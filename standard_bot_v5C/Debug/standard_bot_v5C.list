
standard_bot_v5C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f18  080256c8  080256c8  000356c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080265e0  080265e0  0004031c  2**0
                  CONTENTS
  4 .ARM          00000008  080265e0  080265e0  000365e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080265e8  080265e8  0004031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080265e8  080265e8  000365e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080265ec  080265ec  000365ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  080265f0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f184  20000320  0802690c  00040320  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000f4a4  0802690c  0004f4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004056b  00000000  00000000  0004034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a8e1  00000000  00000000  000808b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d68  00000000  00000000  0008b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028b8  00000000  00000000  0008df00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037b1c  00000000  00000000  000907b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004e912  00000000  00000000  000c82d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f54f8  00000000  00000000  00116be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020c0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d2b4  00000000  00000000  0020c130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  002193e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  002194b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000320 	.word	0x20000320
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080256ac 	.word	0x080256ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000324 	.word	0x20000324
 80001cc:	080256ac 	.word	0x080256ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	4613      	mov	r3, r2
 8001004:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8001006:	e00a      	b.n	800101e <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60fa      	str	r2, [r7, #12]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4053      	eors	r3, r2
 8001014:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <get_CRC8_check_sum+0x40>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ef      	bne.n	8001008 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	080258ac 	.word	0x080258ac

0800103c <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <verify_CRC8_check_sum+0x1a>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d801      	bhi.n	800105a <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e013      	b.n	8001082 <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3b01      	subs	r3, #1
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffc8 	bl	8000ff8 <get_CRC8_check_sum>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	429a      	cmp	r2, r3
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <append_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
    unsigned char ucCRC = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d012      	beq.n	80010c4 <append_CRC8_check_sum+0x3a>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d90f      	bls.n	80010c4 <append_CRC8_check_sum+0x3a>
    {
        return;
    }
    ucCRC = get_CRC8_check_sum((unsigned char *)pch_message, dw_length - 1, CRC8_INIT);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	22ff      	movs	r2, #255	; 0xff
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffa3 	bl	8000ff8 <get_CRC8_check_sum>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
    pch_message[dw_length - 1] = ucCRC;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e000      	b.n	80010c6 <append_CRC8_check_sum+0x3c>
        return;
 80010c4:	bf00      	nop
}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d113      	bne.n	8001108 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 80010e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e4:	e016      	b.n	8001114 <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	60fa      	str	r2, [r7, #12]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	88f9      	ldrh	r1, [r7, #6]
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	404b      	eors	r3, r1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <get_CRC16_check_sum+0x54>)
 8001100:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001104:	4053      	eors	r3, r2
 8001106:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e9      	bne.n	80010e6 <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 8001112:	88fb      	ldrh	r3, [r7, #6]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	080259ac 	.word	0x080259ac

08001124 <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <verify_CRC16_check_sum+0x1a>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d801      	bhi.n	8001142 <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e020      	b.n	8001184 <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3b02      	subs	r3, #2
 8001146:	4a11      	ldr	r2, [pc, #68]	; (800118c <verify_CRC16_check_sum+0x68>)
 8001148:	8812      	ldrh	r2, [r2, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffbd 	bl	80010cc <get_CRC16_check_sum>
 8001152:	4603      	mov	r3, r0
 8001154:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	3a02      	subs	r2, #2
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	440a      	add	r2, r1
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4293      	cmp	r3, r2
 8001166:	d10c      	bne.n	8001182 <verify_CRC16_check_sum+0x5e>
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29b      	uxth	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	3a01      	subs	r2, #1
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	440a      	add	r2, r1
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <verify_CRC16_check_sum+0x5e>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <verify_CRC16_check_sum+0x60>
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000

08001190 <append_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC16_check_sum(uint8_t * pchMessage,uint32_t dwLength)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01d      	beq.n	80011e0 <append_CRC16_check_sum+0x50>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d91a      	bls.n	80011e0 <append_CRC16_check_sum+0x50>
    {
        return;
    }
    wCRC = get_CRC16_check_sum ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3b02      	subs	r3, #2
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <append_CRC16_check_sum+0x58>)
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff89 	bl	80010cc <get_CRC16_check_sum>
 80011ba:	4603      	mov	r3, r0
 80011bc:	81fb      	strh	r3, [r7, #14]
    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3b02      	subs	r3, #2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	89fa      	ldrh	r2, [r7, #14]
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b299      	uxth	r1, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e000      	b.n	80011e2 <append_CRC16_check_sum+0x52>
        return;
 80011e0:	bf00      	nop
}
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000

080011ec <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d104      	bne.n	8001206 <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <buzzer+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001204:	e00c      	b.n	8001220 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f24a 4210 	movw	r2, #42000	; 0xa410
 800120c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <buzzer+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
		htim4.Instance->CCR3 = 500;
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <buzzer+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	20001578 	.word	0x20001578

08001230 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f003 ff71 	bl	8005120 <can_ISR>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f003 ff66 	bl	8005120 <can_ISR>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	2100      	movs	r1, #0
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f00d fef1 	bl	800f056 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	2101      	movs	r1, #1
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f00d fee0 	bl	800f056 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	2228      	movs	r2, #40	; 0x28
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f01d f95c 	bl	801e572 <memset>
    can_filter_st.FilterActivation = ENABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	0c1b      	lsrs	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <can_start+0xa4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d111      	bne.n	800130c <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f00d fcae 	bl	800ec58 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f00d fd8b 	bl	800ee18 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001302:	2102      	movs	r1, #2
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f00d ffb8 	bl	800f27a <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 800130a:	e017      	b.n	800133c <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <can_start+0xa8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d112      	bne.n	800133c <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 800131a:	230e      	movs	r3, #14
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
		can_filter_st.FilterBank = 14;
 800131e:	230e      	movs	r3, #14
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f00d fc95 	bl	800ec58 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f00d fd72 	bl	800ee18 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 8001334:	2110      	movs	r1, #16
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f00d ff9f 	bl	800f27a <HAL_CAN_ActivateNotification>
}
 800133c:	bf00      	nop
 800133e:	3738      	adds	r7, #56	; 0x38
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40006400 	.word	0x40006400
 8001348:	40006800 	.word	0x40006800

0800134c <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8001354:	4b71      	ldr	r3, [pc, #452]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b70      	ldr	r3, [pc, #448]	; (800151c <dbus_remote_ISR+0x1d0>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21b      	sxth	r3, r3
 8001366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800136e:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 8001370:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	b29b      	uxth	r3, r3
 8001378:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b67      	ldr	r3, [pc, #412]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001382:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8001384:	4b65      	ldr	r3, [pc, #404]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	b21b      	sxth	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b21b      	sxth	r3, r3
 800139a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013a2:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 80013a4:	4b5e      	ldr	r3, [pc, #376]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013b6:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80013b8:	4b58      	ldr	r3, [pc, #352]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 80013ce:	4b53      	ldr	r3, [pc, #332]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	029b      	lsls	r3, r3, #10
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b21b      	sxth	r3, r3
 80013da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013de:	b21a      	sxth	r2, r3
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013e2:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013f6:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 80013f8:	4b48      	ldr	r3, [pc, #288]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001404:	795b      	ldrb	r3, [r3, #5]
 8001406:	01db      	lsls	r3, r3, #7
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b42      	ldr	r3, [pc, #264]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001416:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800141a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800141e:	b29b      	uxth	r3, r3
 8001420:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800142a:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 800142c:	4b3b      	ldr	r3, [pc, #236]	; (800151c <dbus_remote_ISR+0x1d0>)
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	b2db      	uxtb	r3, r3
 8001434:	109b      	asrs	r3, r3, #2
 8001436:	b25b      	sxtb	r3, r3
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	b25a      	sxtb	r2, r3
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001440:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 8001442:	4b36      	ldr	r3, [pc, #216]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001444:	795b      	ldrb	r3, [r3, #5]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	b2db      	uxtb	r3, r3
 800144a:	b25b      	sxtb	r3, r3
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	b25a      	sxtb	r2, r3
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001454:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <dbus_remote_ISR+0x1d0>)
 800145e:	79db      	ldrb	r3, [r3, #7]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800146a:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <dbus_remote_ISR+0x1d0>)
 800146e:	7a1b      	ldrb	r3, [r3, #8]
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001474:	7a5b      	ldrb	r3, [r3, #9]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001480:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001484:	7a9b      	ldrb	r3, [r3, #10]
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <dbus_remote_ISR+0x1d0>)
 800148a:	7adb      	ldrb	r3, [r3, #11]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001496:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <dbus_remote_ISR+0x1d0>)
 800149a:	7b1b      	ldrb	r3, [r3, #12]
 800149c:	b25a      	sxtb	r2, r3
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014a0:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014a4:	7b5b      	ldrb	r3, [r3, #13]
 80014a6:	b25a      	sxtb	r2, r3
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014aa:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014ae:	7b9b      	ldrb	r3, [r3, #14]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014b4:	835a      	strh	r2, [r3, #26]
	remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014b8:	7c1b      	ldrb	r3, [r3, #16]
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014be:	7c5b      	ldrb	r3, [r3, #17]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014ca:	839a      	strh	r2, [r3, #28]
	remote_cmd.side_dial -= JOYSTICK_OFFSET;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b21a      	sxth	r2, r3
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014de:	839a      	strh	r2, [r3, #28]
	remote_cmd.last_time = HAL_GetTick();
 80014e0:	f00d f82c 	bl	800e53c <HAL_GetTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014e8:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <dbus_remote_ISR+0x1d8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f01b f925 	bl	801c748 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <dbus_remote_ISR+0x1c8>
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <dbus_remote_ISR+0x1dc>)
 8001506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	f3bf 8f6f 	isb	sy
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000033c 	.word	0x2000033c
 8001520:	20000350 	.word	0x20000350
 8001524:	20000484 	.word	0x20000484
 8001528:	e000ed04 	.word	0xe000ed04

0800152c <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <dbus_remote_start+0x13c>)
 8001534:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <dbus_remote_start+0x140>)
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	f040 808b 	bne.w	800165e <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <dbus_remote_start+0x26>
			return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e086      	b.n	8001660 <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <dbus_remote_start+0x34>
 800155c:	2302      	movs	r3, #2
 800155e:	e07f      	b.n	8001660 <dbus_remote_start+0x134>
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	2201      	movs	r2, #1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
		huart->pRxBuffPtr = pData;
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	2212      	movs	r2, #18
 8001578:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	2200      	movs	r2, #0
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	2222      	movs	r2, #34	; 0x22
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <dbus_remote_start+0x144>)
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001594:	2200      	movs	r2, #0
 8001596:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3304      	adds	r3, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2312      	movs	r3, #18
 80015b0:	f00e fa66 	bl	800fa80 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80015ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e0:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001600:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	2b01      	cmp	r3, #1
 8001608:	d125      	bne.n	8001656 <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	330c      	adds	r3, #12
 8001626:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	e853 3f00 	ldrex	r3, [r3]
 800162e:	613b      	str	r3, [r7, #16]
   return(result);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	330c      	adds	r3, #12
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	623a      	str	r2, [r7, #32]
 8001642:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001644:	69f9      	ldr	r1, [r7, #28]
 8001646:	6a3a      	ldr	r2, [r7, #32]
 8001648:	e841 2300 	strex	r3, r2, [r1]
 800164c:	61bb      	str	r3, [r7, #24]
   return(result);
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1e5      	bne.n	8001620 <dbus_remote_start+0xf4>
 8001654:	e001      	b.n	800165a <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e002      	b.n	8001660 <dbus_remote_start+0x134>
		}
		return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 800165e:	2302      	movs	r3, #2
	}
}
 8001660:	4618      	mov	r0, r3
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000033c 	.word	0x2000033c
 800166c:	20001694 	.word	0x20001694
 8001670:	0800134d 	.word	0x0800134d

08001674 <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	4802      	ldr	r0, [pc, #8]	; (8001688 <laser_on+0x14>)
 8001680:	f00e fefa 	bl	8010478 <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40020800 	.word	0x40020800

0800168c <laser_off>:

void laser_off()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <laser_off+0x14>)
 8001698:	f00e feee 	bl	8010478 <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020800 	.word	0x40020800

080016a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80016a8:	f3bf 8f4f 	dsb	sy
}
 80016ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <__NVIC_SystemReset+0x24>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016b6:	4904      	ldr	r1, [pc, #16]	; (80016c8 <__NVIC_SystemReset+0x24>)
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_SystemReset+0x28>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016be:	f3bf 8f4f 	dsb	sy
}
 80016c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <__NVIC_SystemReset+0x20>
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	05fa0004 	.word	0x05fa0004

080016d0 <inv_sqrt>:
 * @brief  fast inverse square-root, to calculate 1/Sqrt(x)
 * @param  x: the number need to be calculated
 * @retval 1/Sqrt(x)
 * @usage  call in imu_ahrs_update() function
 */
float inv_sqrt(float x) {
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80016da:	edd7 7a01 	vldr	s15, [r7, #4]
 80016de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	105a      	asrs	r2, r3, #1
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <inv_sqrt+0x74>)
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001708:	ed97 7a04 	vldr	s14, [r7, #16]
 800170c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001714:	edd7 7a04 	vldr	s15, [r7, #16]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	ee07 3a90 	vmov	s15, r3
}
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	5f3759df 	.word	0x5f3759df

08001748 <gyro_write_byte>:

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af02      	add	r7, sp, #8
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 8001758:	2200      	movs	r2, #0
 800175a:	2101      	movs	r1, #1
 800175c:	4811      	ldr	r0, [pc, #68]	; (80017a4 <gyro_write_byte+0x5c>)
 800175e:	f00e fe8b 	bl	8010478 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001766:	f107 020e 	add.w	r2, r7, #14
 800176a:	f107 010f 	add.w	r1, r7, #15
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <gyro_write_byte+0x60>)
 8001776:	f012 fd0f 	bl	8014198 <HAL_SPI_TransmitReceive>
	tx = data;
 800177a:	79bb      	ldrb	r3, [r7, #6]
 800177c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800177e:	f107 020e 	add.w	r2, r7, #14
 8001782:	f107 010f 	add.w	r1, r7, #15
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <gyro_write_byte+0x60>)
 800178e:	f012 fd03 	bl	8014198 <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 8001792:	2201      	movs	r2, #1
 8001794:	2101      	movs	r1, #1
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <gyro_write_byte+0x5c>)
 8001798:	f00e fe6e 	bl	8010478 <HAL_GPIO_WritePin>
	return;
 800179c:	bf00      	nop
}
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40020400 	.word	0x40020400
 80017a8:	20001388 	.word	0x20001388

080017ac <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <gyro_read_byte+0x54>)
 80017bc:	f00e fe5c 	bl	8010478 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017ca:	f107 020f 	add.w	r2, r7, #15
 80017ce:	f107 010e 	add.w	r1, r7, #14
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <gyro_read_byte+0x58>)
 80017da:	f012 fcdd 	bl	8014198 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80017de:	f107 010f 	add.w	r1, r7, #15
 80017e2:	2364      	movs	r3, #100	; 0x64
 80017e4:	2201      	movs	r2, #1
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <gyro_read_byte+0x58>)
 80017e8:	f012 fbc5 	bl	8013f76 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 80017ec:	2201      	movs	r2, #1
 80017ee:	2101      	movs	r1, #1
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <gyro_read_byte+0x54>)
 80017f2:	f00e fe41 	bl	8010478 <HAL_GPIO_WritePin>
	return rx;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020400 	.word	0x40020400
 8001804:	20001388 	.word	0x20001388

08001808 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af02      	add	r7, sp, #8
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001818:	2200      	movs	r2, #0
 800181a:	2101      	movs	r1, #1
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <gyro_read_bytes+0x5c>)
 800181e:	f00e fe2b 	bl	8010478 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001828:	b2db      	uxtb	r3, r3
 800182a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800182c:	f107 020e 	add.w	r2, r7, #14
 8001830:	f107 010f 	add.w	r1, r7, #15
 8001834:	2364      	movs	r3, #100	; 0x64
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <gyro_read_bytes+0x60>)
 800183c:	f012 fcac 	bl	8014198 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	b29a      	uxth	r2, r3
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <gyro_read_bytes+0x60>)
 800184a:	f012 fb94 	bl	8013f76 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 800184e:	2201      	movs	r2, #1
 8001850:	2101      	movs	r1, #1
 8001852:	4804      	ldr	r0, [pc, #16]	; (8001864 <gyro_read_bytes+0x5c>)
 8001854:	f00e fe10 	bl	8010478 <HAL_GPIO_WritePin>
	return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020400 	.word	0x40020400
 8001868:	20001388 	.word	0x20001388

0800186c <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af02      	add	r7, sp, #8
 8001872:	4603      	mov	r3, r0
 8001874:	460a      	mov	r2, r1
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	4613      	mov	r3, r2
 800187a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 800187c:	2200      	movs	r2, #0
 800187e:	2110      	movs	r1, #16
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <accel_write_byte+0x5c>)
 8001882:	f00e fdf9 	bl	8010478 <HAL_GPIO_WritePin>
	tx = reg;
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800188a:	f107 020e 	add.w	r2, r7, #14
 800188e:	f107 010f 	add.w	r1, r7, #15
 8001892:	2364      	movs	r3, #100	; 0x64
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <accel_write_byte+0x60>)
 800189a:	f012 fc7d 	bl	8014198 <HAL_SPI_TransmitReceive>
	tx = data;
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018a2:	f107 020e 	add.w	r2, r7, #14
 80018a6:	f107 010f 	add.w	r1, r7, #15
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <accel_write_byte+0x60>)
 80018b2:	f012 fc71 	bl	8014198 <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 80018b6:	2201      	movs	r2, #1
 80018b8:	2110      	movs	r1, #16
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <accel_write_byte+0x5c>)
 80018bc:	f00e fddc 	bl	8010478 <HAL_GPIO_WritePin>
	return;
 80018c0:	bf00      	nop
}
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000
 80018cc:	20001388 	.word	0x20001388

080018d0 <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80018da:	2200      	movs	r2, #0
 80018dc:	2110      	movs	r1, #16
 80018de:	4816      	ldr	r0, [pc, #88]	; (8001938 <accel_read_byte+0x68>)
 80018e0:	f00e fdca 	bl	8010478 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018ee:	f107 020e 	add.w	r2, r7, #14
 80018f2:	f107 010f 	add.w	r1, r7, #15
 80018f6:	2364      	movs	r3, #100	; 0x64
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <accel_read_byte+0x6c>)
 80018fe:	f012 fc4b 	bl	8014198 <HAL_SPI_TransmitReceive>
	tx = 0x55;
 8001902:	2355      	movs	r3, #85	; 0x55
 8001904:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001906:	f107 010e 	add.w	r1, r7, #14
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	2201      	movs	r2, #1
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <accel_read_byte+0x6c>)
 8001910:	f012 fb31 	bl	8013f76 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001914:	f107 010e 	add.w	r1, r7, #14
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	2201      	movs	r2, #1
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <accel_read_byte+0x6c>)
 800191e:	f012 fb2a 	bl	8013f76 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001922:	2201      	movs	r2, #1
 8001924:	2110      	movs	r1, #16
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <accel_read_byte+0x68>)
 8001928:	f00e fda6 	bl	8010478 <HAL_GPIO_WritePin>
	return rx;
 800192c:	7bbb      	ldrb	r3, [r7, #14]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020000 	.word	0x40020000
 800193c:	20001388 	.word	0x20001388

08001940 <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af02      	add	r7, sp, #8
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	4613      	mov	r3, r2
 800194e:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 8001950:	2200      	movs	r2, #0
 8001952:	2110      	movs	r1, #16
 8001954:	4814      	ldr	r0, [pc, #80]	; (80019a8 <accel_read_bytes+0x68>)
 8001956:	f00e fd8f 	bl	8010478 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001960:	b2db      	uxtb	r3, r3
 8001962:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001964:	f107 020e 	add.w	r2, r7, #14
 8001968:	f107 010f 	add.w	r1, r7, #15
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	480e      	ldr	r0, [pc, #56]	; (80019ac <accel_read_bytes+0x6c>)
 8001974:	f012 fc10 	bl	8014198 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001978:	f107 010e 	add.w	r1, r7, #14
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	2201      	movs	r2, #1
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <accel_read_bytes+0x6c>)
 8001982:	f012 faf8 	bl	8013f76 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	6839      	ldr	r1, [r7, #0]
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <accel_read_bytes+0x6c>)
 8001990:	f012 faf1 	bl	8013f76 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001994:	2201      	movs	r2, #1
 8001996:	2110      	movs	r1, #16
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <accel_read_bytes+0x68>)
 800199a:	f00e fd6d 	bl	8010478 <HAL_GPIO_WritePin>
	return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40020000 	.word	0x40020000
 80019ac:	20001388 	.word	0x20001388

080019b0 <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80019b6:	21b6      	movs	r1, #182	; 0xb6
 80019b8:	2014      	movs	r0, #20
 80019ba:	f7ff fec5 	bl	8001748 <gyro_write_byte>
	HAL_Delay(10);
 80019be:	200a      	movs	r0, #10
 80019c0:	f00c fdc8 	bl	800e554 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2011      	movs	r0, #17
 80019c8:	f7ff febe 	bl	8001748 <gyro_write_byte>
	HAL_Delay(2);
 80019cc:	2002      	movs	r0, #2
 80019ce:	f00c fdc1 	bl	800e554 <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff feea 	bl	80017ac <gyro_read_byte>
 80019d8:	4603      	mov	r3, r0
 80019da:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 80019dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d001      	beq.n	80019e8 <gyro_init+0x38>
		NVIC_SystemReset();
 80019e4:	f7ff fe5e 	bl	80016a4 <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 80019e8:	2002      	movs	r0, #2
 80019ea:	f00c fdb3 	bl	800e554 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 80019ee:	2102      	movs	r1, #2
 80019f0:	200f      	movs	r0, #15
 80019f2:	f7ff fea9 	bl	8001748 <gyro_write_byte>
	HAL_Delay(2);
 80019f6:	2002      	movs	r0, #2
 80019f8:	f00c fdac 	bl	800e554 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 80019fc:	2182      	movs	r1, #130	; 0x82
 80019fe:	2010      	movs	r0, #16
 8001a00:	f7ff fea2 	bl	8001748 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_1000_116_HZ));
	HAL_Delay(2);
 8001a04:	2002      	movs	r0, #2
 8001a06:	f00c fda5 	bl	800e554 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2016      	movs	r0, #22
 8001a0e:	f7ff fe9b 	bl	8001748 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f00c fd9e 	bl	800e554 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001a18:	2101      	movs	r1, #1
 8001a1a:	2018      	movs	r0, #24
 8001a1c:	f7ff fe94 	bl	8001748 <gyro_write_byte>
	HAL_Delay(2);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f00c fd97 	bl	800e554 <HAL_Delay>

	return 0;
 8001a26:	2300      	movs	r3, #0
	//blah
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <accel_init>:

uint8_t accel_init() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff ff4a 	bl	80018d0 <accel_read_byte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f00c fd87 	bl	800e554 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff ff42 	bl	80018d0 <accel_read_byte>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a50:	2002      	movs	r0, #2
 8001a52:	f00c fd7f 	bl	800e554 <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001a56:	21b6      	movs	r1, #182	; 0xb6
 8001a58:	207e      	movs	r0, #126	; 0x7e
 8001a5a:	f7ff ff07 	bl	800186c <accel_write_byte>
	HAL_Delay(10);
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f00c fd78 	bl	800e554 <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff ff33 	bl	80018d0 <accel_read_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f00c fd70 	bl	800e554 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff ff2b 	bl	80018d0 <accel_read_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f00c fd68 	bl	800e554 <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b1e      	cmp	r3, #30
 8001a88:	d001      	beq.n	8001a8e <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e023      	b.n	8001ad6 <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001a8e:	2104      	movs	r1, #4
 8001a90:	207d      	movs	r0, #125	; 0x7d
 8001a92:	f7ff feeb 	bl	800186c <accel_write_byte>
	HAL_Delay(2);
 8001a96:	2002      	movs	r0, #2
 8001a98:	f00c fd5c 	bl	800e554 <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	207c      	movs	r0, #124	; 0x7c
 8001aa0:	f7ff fee4 	bl	800186c <accel_write_byte>
	HAL_Delay(2);
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f00c fd55 	bl	800e554 <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001aaa:	21a8      	movs	r1, #168	; 0xa8
 8001aac:	2040      	movs	r0, #64	; 0x40
 8001aae:	f7ff fedd 	bl	800186c <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_100_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f00c fd4e 	bl	800e554 <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001ab8:	2101      	movs	r1, #1
 8001aba:	2041      	movs	r0, #65	; 0x41
 8001abc:	f7ff fed6 	bl	800186c <accel_write_byte>
	HAL_Delay(2);
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f00c fd47 	bl	800e554 <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	2053      	movs	r0, #83	; 0x53
 8001aca:	f7ff fecf 	bl	800186c <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f00c fd40 	bl	800e554 <HAL_Delay>
	return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af04      	add	r7, sp, #16
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2305      	movs	r3, #5
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	2301      	movs	r3, #1
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	f107 030f 	add.w	r3, r7, #15
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	211c      	movs	r1, #28
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <mag_read_single_reg+0x34>)
 8001b06:	f00e ff27 	bl	8010958 <HAL_I2C_Mem_Read>
	return data;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20001264 	.word	0x20001264

08001b18 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af04      	add	r7, sp, #16
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	2301      	movs	r3, #1
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	1dbb      	adds	r3, r7, #6
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	211c      	movs	r1, #28
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <mag_write_single_reg+0x34>)
 8001b3e:	f00e fe11 	bl	8010764 <HAL_I2C_Mem_Write>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20001264 	.word	0x20001264

08001b50 <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	4603      	mov	r3, r0
 8001b58:	603a      	str	r2, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	211c      	movs	r1, #28
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <mag_read_multi_reg_dma+0x30>)
 8001b72:	f00f f917 	bl	8010da4 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20001264 	.word	0x20001264
 8001b84:	00000000 	.word	0x00000000

08001b88 <gyro_offset_cali>:
void reset_imu_data() {

}

//find the offset of the gyro
void gyro_offset_cali() {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
	int32_t gyro_x_total = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
	int32_t gyro_y_total = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
	int32_t gyro_z_total = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < 100; i++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	807b      	strh	r3, [r7, #2]
 8001b9e:	e031      	b.n	8001c04 <gyro_offset_cali+0x7c>
		gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	4935      	ldr	r1, [pc, #212]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7ff fe2f 	bl	8001808 <gyro_read_bytes>
		gyro_x_total += (int16_t)(gyro_buff[1] << 8 | gyro_buff[0]);
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
		gyro_y_total += (int16_t)(gyro_buff[3] << 8 | gyro_buff[2]);
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bc6:	78db      	ldrb	r3, [r3, #3]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60bb      	str	r3, [r7, #8]
		gyro_z_total += (int16_t)(gyro_buff[5] << 8 | gyro_buff[4]);
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001be0:	795b      	ldrb	r3, [r3, #5]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001be8:	791b      	ldrb	r3, [r3, #4]
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	607b      	str	r3, [r7, #4]
		HAL_Delay(2);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f00c fcab 	bl	800e554 <HAL_Delay>
	for (uint16_t i = 0; i < 100; i++) {
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	3301      	adds	r3, #1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	2b63      	cmp	r3, #99	; 0x63
 8001c08:	d9ca      	bls.n	8001ba0 <gyro_offset_cali+0x18>
	}
	imu_data.gx_offset = gyro_x_total / 100 + 0.06; //added offset
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <gyro_offset_cali+0xf4>)
 8001c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c12:	1152      	asrs	r2, r2, #5
 8001c14:	17db      	asrs	r3, r3, #31
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	a314      	add	r3, pc, #80	; (adr r3, 8001c70 <gyro_offset_cali+0xe8>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb32 	bl	800028c <__adddf3>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7fe ff92 	bl	8000b58 <__aeabi_d2iz>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <gyro_offset_cali+0xf8>)
 8001c3a:	865a      	strh	r2, [r3, #50]	; 0x32
	imu_data.gy_offset = gyro_y_total / 100;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <gyro_offset_cali+0xf4>)
 8001c40:	fb82 1203 	smull	r1, r2, r2, r3
 8001c44:	1152      	asrs	r2, r2, #5
 8001c46:	17db      	asrs	r3, r3, #31
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <gyro_offset_cali+0xf8>)
 8001c4e:	869a      	strh	r2, [r3, #52]	; 0x34
	imu_data.gz_offset = gyro_z_total / 100;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <gyro_offset_cali+0xf4>)
 8001c54:	fb82 1203 	smull	r1, r2, r2, r3
 8001c58:	1152      	asrs	r2, r2, #5
 8001c5a:	17db      	asrs	r3, r3, #31
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <gyro_offset_cali+0xf8>)
 8001c62:	86da      	strh	r2, [r3, #54]	; 0x36

}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	f3af 8000 	nop.w
 8001c70:	eb851eb8 	.word	0xeb851eb8
 8001c74:	3faeb851 	.word	0x3faeb851
 8001c78:	2000037c 	.word	0x2000037c
 8001c7c:	51eb851f 	.word	0x51eb851f
 8001c80:	2000038c 	.word	0x2000038c

08001c84 <imu_init>:

void imu_init() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <imu_init+0x48>)
 8001c8e:	f00e fbf3 	bl	8010478 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001c92:	2200      	movs	r2, #0
 8001c94:	2101      	movs	r1, #1
 8001c96:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <imu_init+0x4c>)
 8001c98:	f00e fbee 	bl	8010478 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c9c:	2064      	movs	r0, #100	; 0x64
 8001c9e:	f00c fc59 	bl	800e554 <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <imu_init+0x48>)
 8001ca8:	f00e fbe6 	bl	8010478 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001cac:	2201      	movs	r2, #1
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <imu_init+0x4c>)
 8001cb2:	f00e fbe1 	bl	8010478 <HAL_GPIO_WritePin>
	gyro_init();
 8001cb6:	f7ff fe7b 	bl	80019b0 <gyro_init>
	accel_init();
 8001cba:	f7ff feb9 	bl	8001a30 <accel_init>
	ist8310_init();
 8001cbe:	f000 f907 	bl	8001ed0 <ist8310_init>
	gyro_offset_cali();
 8001cc2:	f7ff ff61 	bl	8001b88 <gyro_offset_cali>

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <imu_start_ints>:

void imu_start_ints() {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	2015      	movs	r0, #21
 8001cdc:	f7ff fd34 	bl	8001748 <gyro_write_byte>
	vTaskDelay(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f019 fed5 	bl	801ba90 <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	2058      	movs	r0, #88	; 0x58
 8001cea:	f7ff fdbf 	bl	800186c <accel_write_byte>
	vTaskDelay(10);
 8001cee:	200a      	movs	r0, #10
 8001cf0:	f019 fece 	bl	801ba90 <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001cf4:	2108      	movs	r1, #8
 8001cf6:	200b      	movs	r0, #11
 8001cf8:	f7ff ff0e 	bl	8001b18 <mag_write_single_reg>
	imu_init_status = 1;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <imu_start_ints+0x34>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200003c4 	.word	0x200003c4

08001d0c <accel_get_data>:

void accel_get_data() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001d10:	2206      	movs	r2, #6
 8001d12:	4903      	ldr	r1, [pc, #12]	; (8001d20 <accel_get_data+0x14>)
 8001d14:	2012      	movs	r0, #18
 8001d16:	f7ff fe13 	bl	8001940 <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000374 	.word	0x20000374

08001d24 <accel_process_data>:

void accel_process_data() {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <accel_process_data+0xa8>)
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <accel_process_data+0xa8>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d48:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001dd0 <accel_process_data+0xac>
 8001d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <accel_process_data+0xb0>)
 8001d52:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <accel_process_data+0xa8>)
 8001d58:	78db      	ldrb	r3, [r3, #3]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <accel_process_data+0xa8>)
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d74:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001dd0 <accel_process_data+0xac>
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <accel_process_data+0xb0>)
 8001d7e:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <accel_process_data+0xa8>)
 8001d84:	795b      	ldrb	r3, [r3, #5]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <accel_process_data+0xa8>)
 8001d8c:	791b      	ldrb	r3, [r3, #4]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001dd0 <accel_process_data+0xac>
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <accel_process_data+0xb0>)
 8001daa:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001dae:	f00c fbc5 	bl	800e53c <HAL_GetTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <accel_process_data+0xb0>)
 8001db6:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <accel_process_data+0xb0>)
 8001dba:	3310      	adds	r3, #16
 8001dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbe:	f005 f863 	bl	8006e88 <accel_data_ready>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000374 	.word	0x20000374
 8001dd0:	3aeb3333 	.word	0x3aeb3333
 8001dd4:	2000038c 	.word	0x2000038c

08001dd8 <gyro_get_data>:

void gyro_get_data() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001ddc:	2206      	movs	r2, #6
 8001dde:	4903      	ldr	r1, [pc, #12]	; (8001dec <gyro_get_data+0x14>)
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff fd11 	bl	8001808 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000037c 	.word	0x2000037c

08001df0 <gyro_process_data>:

void gyro_process_data() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001df6:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <gyro_process_data+0xd4>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001e08:	88fa      	ldrh	r2, [r7, #6]
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e0c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001e18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e24:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001ecc <gyro_process_data+0xdc>
 8001e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2c:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e48:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ecc <gyro_process_data+0xdc>
 8001e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e6a:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e70:	795b      	ldrb	r3, [r3, #5]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e84:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ecc <gyro_process_data+0xdc>
 8001ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <gyro_process_data+0xd8>)
 8001ea6:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001eaa:	f00c fb47 	bl	800e53c <HAL_GetTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <gyro_process_data+0xd8>)
 8001eb2:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <gyro_process_data+0xd8>)
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	f004 ffba 	bl	8006e30 <gyro_data_ready>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000037c 	.word	0x2000037c
 8001ec8:	2000038c 	.word	0x2000038c
 8001ecc:	398ba058 	.word	0x398ba058

08001ed0 <ist8310_init>:

uint8_t ist8310_init() {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2140      	movs	r1, #64	; 0x40
 8001eda:	481d      	ldr	r0, [pc, #116]	; (8001f50 <ist8310_init+0x80>)
 8001edc:	f00e facc 	bl	8010478 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f00c fb37 	bl	800e554 <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	4819      	ldr	r0, [pc, #100]	; (8001f50 <ist8310_init+0x80>)
 8001eec:	f00e fac4 	bl	8010478 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f00c fb2f 	bl	800e554 <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fdf2 	bl	8001ae0 <mag_read_single_reg>
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d00a      	beq.n	8001f1c <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <ist8310_init+0x84>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <ist8310_init+0x84>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	845a      	strh	r2, [r3, #34]	; 0x22
		imu_data.mag_data.mz = 0;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <ist8310_init+0x84>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	849a      	strh	r2, [r3, #36]	; 0x24
		return 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e015      	b.n	8001f48 <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f00c fb19 	bl	800e554 <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001f22:	2109      	movs	r1, #9
 8001f24:	2041      	movs	r0, #65	; 0x41
 8001f26:	f7ff fdf7 	bl	8001b18 <mag_write_single_reg>
	HAL_Delay(2);
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f00c fb12 	bl	800e554 <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001f30:	21c0      	movs	r1, #192	; 0xc0
 8001f32:	2042      	movs	r0, #66	; 0x42
 8001f34:	f7ff fdf0 	bl	8001b18 <mag_write_single_reg>
	HAL_Delay(2);
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f00c fb0b 	bl	800e554 <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001f3e:	210b      	movs	r1, #11
 8001f40:	200a      	movs	r0, #10
 8001f42:	f7ff fde9 	bl	8001b18 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021800 	.word	0x40021800
 8001f54:	2000038c 	.word	0x2000038c

08001f58 <ist8310_get_data>:

void ist8310_get_data() {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <ist8310_get_data+0x1c>)
 8001f5e:	2105      	movs	r1, #5
 8001f60:	2003      	movs	r0, #3
 8001f62:	f7ff fdf5 	bl	8001b50 <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001f66:	f00c fae9 	bl	800e53c <HAL_GetTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a02      	ldr	r2, [pc, #8]	; (8001f78 <ist8310_get_data+0x20>)
 8001f6e:	6293      	str	r3, [r2, #40]	; 0x28

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000384 	.word	0x20000384
 8001f78:	2000038c 	.word	0x2000038c

08001f7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d11e      	bne.n	8001fcc <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10d      	bne.n	8001fb6 <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d103      	bne.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x2c>
				gyro_get_data();
 8001fa0:	f7ff ff1a 	bl	8001dd8 <gyro_get_data>
				gyro_process_data();
 8001fa4:	f7ff ff24 	bl	8001df0 <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d103      	bne.n	8001fb6 <HAL_GPIO_EXTI_Callback+0x3a>
				accel_get_data();
 8001fae:	f7ff fead 	bl	8001d0c <accel_get_data>
				accel_process_data();
 8001fb2:	f7ff feb7 	bl	8001d24 <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d107      	bne.n	8001fcc <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x60>)
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001fc8:	f7ff ffc6 	bl	8001f58 <ist8310_get_data>
			}
		}
	}
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200003c4 	.word	0x200003c4
 8001fd8:	20001388 	.word	0x20001388
 8001fdc:	20001264 	.word	0x20001264

08001fe0 <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ffe:	78db      	ldrb	r3, [r3, #3]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b21a      	sxth	r2, r3
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8002006:	789b      	ldrb	r3, [r3, #2]
 8002008:	b21b      	sxth	r3, r3
 800200a:	4313      	orrs	r3, r2
 800200c:	b21b      	sxth	r3, r3
 800200e:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8002012:	795b      	ldrb	r3, [r3, #5]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21b      	sxth	r3, r3
 8002022:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8002024:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 800202a:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 800202c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 8002032:	845a      	strh	r2, [r3, #34]	; 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8002034:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 800203a:	849a      	strh	r2, [r3, #36]	; 0x24
	mag_data_ready(imu_data.mag_data);
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 800203e:	3320      	adds	r3, #32
 8002040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002044:	f004 ff4c 	bl	8006ee0 <mag_data_ready>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000384 	.word	0x20000384
 8002054:	2000038c 	.word	0x2000038c

08002058 <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <led_green_off+0x18>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200015c0 	.word	0x200015c0

08002074 <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002078:	2100      	movs	r1, #0
 800207a:	480c      	ldr	r0, [pc, #48]	; (80020ac <led_on+0x38>)
 800207c:	f012 fd2e 	bl	8014adc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002080:	2104      	movs	r1, #4
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <led_on+0x38>)
 8002084:	f012 fd2a 	bl	8014adc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002088:	2108      	movs	r1, #8
 800208a:	4808      	ldr	r0, [pc, #32]	; (80020ac <led_on+0x38>)
 800208c:	f012 fd26 	bl	8014adc <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <led_on+0x38>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	22ff      	movs	r2, #255	; 0xff
 8002096:	63da      	str	r2, [r3, #60]	; 0x3c
	htim5.Instance->CCR2 = 255;
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <led_on+0x38>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
	htim5.Instance->CCR1 = 255;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <led_on+0x38>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200015c0 	.word	0x200015c0

080020b0 <led_toggle>:
void led_toggle(void){
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	460a      	mov	r2, r1
 80020ca:	80fb      	strh	r3, [r7, #6]
 80020cc:	4613      	mov	r3, r2
 80020ce:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 80020d0:	797b      	ldrb	r3, [r7, #5]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 808f 	bne.w	80021f6 <status_led+0x136>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	3b01      	subs	r3, #1
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f200 808c 	bhi.w	80021fa <status_led+0x13a>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <status_led+0x28>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	0800210d 	.word	0x0800210d
 80020ec:	08002127 	.word	0x08002127
 80020f0:	08002141 	.word	0x08002141
 80020f4:	0800215b 	.word	0x0800215b
 80020f8:	08002175 	.word	0x08002175
 80020fc:	0800218f 	.word	0x0800218f
 8002100:	080021a9 	.word	0x080021a9
 8002104:	080021c3 	.word	0x080021c3
 8002108:	080021dd 	.word	0x080021dd
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <status_led+0x148>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	22ff      	movs	r2, #255	; 0xff
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 8002114:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <status_led+0x148>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2200      	movs	r2, #0
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <status_led+0x148>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002124:	e06a      	b.n	80021fc <status_led+0x13c>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <status_led+0x148>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <status_led+0x148>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	22ff      	movs	r2, #255	; 0xff
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <status_led+0x148>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800213e:	e05d      	b.n	80021fc <status_led+0x13c>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <status_led+0x148>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <status_led+0x148>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <status_led+0x148>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002158:	e050      	b.n	80021fc <status_led+0x13c>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <status_led+0x148>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	; 0xff
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <status_led+0x148>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <status_led+0x148>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002172:	e043      	b.n	80021fc <status_led+0x13c>
		case 5:
			htim5.Instance->CCR3 = 0;
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <status_led+0x148>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <status_led+0x148>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2200      	movs	r2, #0
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <status_led+0x148>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800218c:	e036      	b.n	80021fc <status_led+0x13c>
		case 6:
			htim5.Instance->CCR3 = 0;
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <status_led+0x148>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <status_led+0x148>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2200      	movs	r2, #0
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <status_led+0x148>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021a6:	e029      	b.n	80021fc <status_led+0x13c>
		case 7:
			htim5.Instance->CCR3 = 0;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <status_led+0x148>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <status_led+0x148>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <status_led+0x148>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021c0:	e01c      	b.n	80021fc <status_led+0x13c>
		case 8:
			htim5.Instance->CCR3 = 0;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <status_led+0x148>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <status_led+0x148>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <status_led+0x148>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2200      	movs	r2, #0
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021da:	e00f      	b.n	80021fc <status_led+0x13c>
		case 9:
			htim5.Instance->CCR3 = 0;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <status_led+0x148>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <status_led+0x148>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <status_led+0x148>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021f4:	e002      	b.n	80021fc <status_led+0x13c>

		default:
			break;
		}
	}
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <status_led+0x13c>
			break;
 80021fa:	bf00      	nop

}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	200015c0 	.word	0x200015c0

0800220c <micros_tick>:
#include "robot_config.h"

uint32_t gv_curr_micros = 0;
uint32_t gv_overflow_times = 0;

void micros_tick(){
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	if (gv_curr_micros == 4294967295) //2^32 - 1
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <micros_tick+0x2c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002218:	d104      	bne.n	8002224 <micros_tick+0x18>
		gv_overflow_times ++;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <micros_tick+0x30>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <micros_tick+0x30>)
 8002222:	6013      	str	r3, [r2, #0]
	gv_curr_micros ++;
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <micros_tick+0x2c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	4a03      	ldr	r2, [pc, #12]	; (8002238 <micros_tick+0x2c>)
 800222c:	6013      	str	r3, [r2, #0]
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	200003c8 	.word	0x200003c8
 800223c:	200003cc 	.word	0x200003cc

08002240 <start_micros_timer>:

void start_micros_timer()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	configASSERT(TIMER_FREQ <= 1000000);
	__HAL_TIM_SET_AUTORELOAD(&htim3, (999999/TIMER_FREQ) + 1);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <start_micros_timer+0x2c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2264      	movs	r2, #100	; 0x64
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <start_micros_timer+0x2c>)
 800224e:	2264      	movs	r2, #100	; 0x64
 8002250:	60da      	str	r2, [r3, #12]
	htim3.Instance->DIER |= TIM_DIER_UIE; //enable update interrupt
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <start_micros_timer+0x2c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <start_micros_timer+0x2c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim3);
 8002262:	4802      	ldr	r0, [pc, #8]	; (800226c <start_micros_timer+0x2c>)
 8002264:	f012 faba 	bl	80147dc <HAL_TIM_Base_Start>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20001530 	.word	0x20001530

08002270 <get_microseconds>:



uint32_t get_microseconds()
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	return gv_curr_micros;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <get_microseconds+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200003c8 	.word	0x200003c8

08002288 <queue_init>:
#include "bsp_queue.h"
#include <string.h>



QueueOpStat_t queue_init(queue_t* queue){
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	723b      	strb	r3, [r7, #8]
	if (queue == NULL){
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <queue_init+0x1c>
		op_stat.op_status = Q_INVALID;
 800229a:	2304      	movs	r3, #4
 800229c:	723b      	strb	r3, [r7, #8]
		return op_stat;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e015      	b.n	80022d0 <queue_init+0x48>
	}
	queue->curr_byte_pos = 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->last_byte_pos=0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	queue->last_proc = 0;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	queue->last_time=0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->stored_bytes=0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60fb      	str	r3, [r7, #12]
}
 80022d0:	2300      	movs	r3, #0
 80022d2:	89ba      	ldrh	r2, [r7, #12]
 80022d4:	f362 030f 	bfi	r3, r2, #0, #16
 80022d8:	89fa      	ldrh	r2, [r7, #14]
 80022da:	f362 431f 	bfi	r3, r2, #16, #16
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <queue_append_byte>:

/*
 * Adds a byte to the end of the byte_queue
 * Add one byte at a time!
 */
QueueOpStat_t queue_append_byte(queue_t* queue, uint8_t data){
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	70fb      	strb	r3, [r7, #3]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	723b      	strb	r3, [r7, #8]
	queue->last_time = HAL_GetTick();
 80022fa:	f00c f91f 	bl	800e53c <HAL_GetTick>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->queue[queue->last_byte_pos] = data;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800230e:	4619      	mov	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	545a      	strb	r2, [r3, r1]
	op_stat.bytes_appended = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	817b      	strh	r3, [r7, #10]
	queue->last_byte_pos = (queue->last_byte_pos >= TQUEUE_SIZE-1) ? 0 : queue->last_byte_pos + 1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002320:	2bfe      	cmp	r3, #254	; 0xfe
 8002322:	d805      	bhi.n	8002330 <queue_append_byte+0x46>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800232a:	3301      	adds	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	e000      	b.n	8002332 <queue_append_byte+0x48>
 8002330:	2200      	movs	r2, #0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	if (queue->stored_bytes > TQUEUE_SIZE) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800233e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002342:	d918      	bls.n	8002376 <queue_append_byte+0x8c>
		queue->stored_bytes = TQUEUE_SIZE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		queue->curr_byte_pos = (queue->curr_byte_pos == TQUEUE_SIZE-1) ? 0 : queue->curr_byte_pos+1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002354:	2bff      	cmp	r3, #255	; 0xff
 8002356:	d005      	beq.n	8002364 <queue_append_byte+0x7a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800235e:	3301      	adds	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	e000      	b.n	8002366 <queue_append_byte+0x7c>
 8002364:	2200      	movs	r2, #0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		op_stat.op_status = Q_FULL;
 800236c:	2301      	movs	r3, #1
 800236e:	723b      	strb	r3, [r7, #8]
		return op_stat;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e009      	b.n	800238a <queue_append_byte+0xa0>
	}
	queue->stored_bytes+=1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800237c:	3301      	adds	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	60fb      	str	r3, [r7, #12]
}
 800238a:	2300      	movs	r3, #0
 800238c:	89ba      	ldrh	r2, [r7, #12]
 800238e:	f362 030f 	bfi	r3, r2, #0, #16
 8002392:	89fa      	ldrh	r2, [r7, #14]
 8002394:	f362 431f 	bfi	r3, r2, #16, #16
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <queue_pop_element>:
	}
	op_stat.bytes_appended = len;
	return op_stat;
}

uint8_t queue_pop_element(queue_t* queue){
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

	if (queue->stored_bytes == 0){
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <queue_pop_element+0x16>
		return 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e024      	b.n	8002400 <queue_pop_element+0x60>
	} else {
		uint8_t temp =queue->queue[queue->curr_byte_pos];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	73fb      	strb	r3, [r7, #15]
		queue->curr_byte_pos +=1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023ca:	3301      	adds	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023da:	2bff      	cmp	r3, #255	; 0xff
 80023dc:	d803      	bhi.n	80023e6 <queue_pop_element+0x46>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80023e4:	e000      	b.n	80023e8 <queue_pop_element+0x48>
 80023e6:	2200      	movs	r2, #0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				0:queue->curr_byte_pos;
		queue->stored_bytes -= 1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		return temp;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <queue_pop_elements>:


QueueOpStat_t queue_pop_elements(queue_t* queue, uint8_t* data, uint16_t len){
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
		QueueOpStat_t op_stat;

		op_stat = queue_peek_number(queue, data, len);
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	461a      	mov	r2, r3
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f82d 	bl	8002480 <queue_peek_number>
 8002426:	4603      	mov	r3, r0
 8002428:	61bb      	str	r3, [r7, #24]
		QueueOpStat_t remove_stat;
		remove_stat = queue_remove_number(queue, op_stat.bytes_appended);
 800242a:	8b7b      	ldrh	r3, [r7, #26]
 800242c:	4619      	mov	r1, r3
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f87c 	bl	800252c <queue_remove_number>
 8002434:	4603      	mov	r3, r0
 8002436:	617b      	str	r3, [r7, #20]
	return op_stat;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	2300      	movs	r3, #0
 800243e:	8bba      	ldrh	r2, [r7, #28]
 8002440:	f362 030f 	bfi	r3, r2, #0, #16
 8002444:	8bfa      	ldrh	r2, [r7, #30]
 8002446:	f362 431f 	bfi	r3, r2, #16, #16
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <queue_peek>:

uint8_t queue_peek(queue_t* queue){
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
	if (queue->stored_bytes>0){
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <queue_peek+0x20>
		return queue->queue[queue->curr_byte_pos];
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	e000      	b.n	8002474 <queue_peek+0x22>
	}
	else{
		return 0;
 8002472:	2300      	movs	r3, #0
	}
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <queue_peek_number>:

QueueOpStat_t queue_peek_number(queue_t* queue, uint8_t* buffer,uint16_t size){
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
	QueueOpStat_t op_stat;
	queue->last_time = HAL_GetTick();
 800248e:	f00c f855 	bl	800e53c <HAL_GetTick>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	op_stat.op_status = Q_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	753b      	strb	r3, [r7, #20]
	uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80024a6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024aa:	83fb      	strh	r3, [r7, #30]
	if (queue->stored_bytes < size){
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d905      	bls.n	80024c4 <queue_peek_number+0x44>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80024b8:	2303      	movs	r3, #3
 80024ba:	753b      	strb	r3, [r7, #20]
		size = queue->stored_bytes;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80024c2:	80fb      	strh	r3, [r7, #6]
	}

	if (bytes_to_end >= size){
 80024c4:	8bfa      	ldrh	r2, [r7, #30]
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d30b      	bcc.n	80024e4 <queue_peek_number+0x64>
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], size);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	4619      	mov	r1, r3
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f01c f83a 	bl	801e556 <memcpy>
 80024e2:	e014      	b.n	800250e <queue_peek_number+0x8e>
	} else {
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	8bfa      	ldrh	r2, [r7, #30]
 80024f2:	4619      	mov	r1, r3
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f01c f82e 	bl	801e556 <memcpy>
		memcpy(buffer+bytes_to_end, queue->queue,size-bytes_to_end);
 80024fa:	8bfb      	ldrh	r3, [r7, #30]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	18d0      	adds	r0, r2, r3
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	8bfb      	ldrh	r3, [r7, #30]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	461a      	mov	r2, r3
 800250a:	f01c f824 	bl	801e556 <memcpy>
	}
	op_stat.bytes_appended = size;
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	82fb      	strh	r3, [r7, #22]
	return op_stat;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	2300      	movs	r3, #0
 8002518:	8b3a      	ldrh	r2, [r7, #24]
 800251a:	f362 030f 	bfi	r3, r2, #0, #16
 800251e:	8b7a      	ldrh	r2, [r7, #26]
 8002520:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <queue_remove_number>:

QueueOpStat_t queue_remove_number(queue_t* queue, uint16_t size){
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
//	queue_sanity_check(queue);
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	723b      	strb	r3, [r7, #8]
	if (queue->stored_bytes < size){
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	429a      	cmp	r2, r3
 8002546:	d905      	bls.n	8002554 <queue_remove_number+0x28>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 8002548:	2303      	movs	r3, #3
 800254a:	723b      	strb	r3, [r7, #8]
		size = queue->stored_bytes;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002552:	807b      	strh	r3, [r7, #2]
	}

	queue->curr_byte_pos += size;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	4413      	add	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->stored_bytes -= size;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d906      	bls.n	8002590 <queue_remove_number+0x64>
			queue->curr_byte_pos-TQUEUE_SIZE : queue->curr_byte_pos;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002588:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800258c:	b29b      	uxth	r3, r3
 800258e:	e002      	b.n	8002596 <queue_remove_number+0x6a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	op_stat.bytes_appended = size;
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	817b      	strh	r3, [r7, #10]
	return op_stat;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	2300      	movs	r3, #0
 80025a6:	89ba      	ldrh	r2, [r7, #12]
 80025a8:	f362 030f 	bfi	r3, r2, #0, #16
 80025ac:	89fa      	ldrh	r2, [r7, #14]
 80025ae:	f362 431f 	bfi	r3, r2, #16, #16
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <queue_get_size>:

uint16_t queue_get_size(queue_t* queue){
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
	return queue->stored_bytes;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b097      	sub	sp, #92	; 0x5c
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6578      	str	r0, [r7, #84]	; 0x54
 80025e0:	6539      	str	r1, [r7, #80]	; 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 80025e2:	e064      	b.n	80026ae <ref_process_data+0xd6>
		switch(state){
 80025e4:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <ref_process_data+0xec>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <ref_process_data+0x1a>
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d037      	beq.n	8002660 <ref_process_data+0x88>
 80025f0:	e05d      	b.n	80026ae <ref_process_data+0xd6>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 80025f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025f4:	f7ff ffe3 	bl	80025be <queue_get_size>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d801      	bhi.n	8002602 <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 80025fe:	2302      	movs	r3, #2
 8002600:	e05c      	b.n	80026bc <ref_process_data+0xe4>
				}
				if (queue_peek(uart_queue) != 0xA5){
 8002602:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002604:	f7ff ff25 	bl	8002452 <queue_peek>
 8002608:	4603      	mov	r3, r0
 800260a:	2ba5      	cmp	r3, #165	; 0xa5
 800260c:	d003      	beq.n	8002616 <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 800260e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002610:	f7ff fec6 	bl	80023a0 <queue_pop_element>
 8002614:	e04b      	b.n	80026ae <ref_process_data+0xd6>
				}else {
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002616:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002618:	f7ff ffd1 	bl	80025be <queue_get_size>
 800261c:	4603      	mov	r3, r0
 800261e:	2b07      	cmp	r3, #7
 8002620:	d91c      	bls.n	800265c <ref_process_data+0x84>
						header = ref_get_header(uart_queue);
 8002622:	4c29      	ldr	r4, [pc, #164]	; (80026c8 <ref_process_data+0xf0>)
 8002624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f84e 	bl	80026cc <ref_get_header>
 8002630:	4622      	mov	r2, r4
 8002632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	6010      	str	r0, [r2, #0]
 800263a:	8899      	ldrh	r1, [r3, #4]
 800263c:	799b      	ldrb	r3, [r3, #6]
 800263e:	8091      	strh	r1, [r2, #4]
 8002640:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <ref_process_data+0xf0>)
 8002644:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002648:	b29b      	uxth	r3, r3
 800264a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264e:	4293      	cmp	r3, r2
 8002650:	d100      	bne.n	8002654 <ref_process_data+0x7c>
							//invalid data, continue checking
							break;
 8002652:	e02c      	b.n	80026ae <ref_process_data+0xd6>
						}
						//header is valid, remove header bytes and start finding data
						state = DATA;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <ref_process_data+0xec>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e028      	b.n	80026ae <ref_process_data+0xd6>
					} else {
						return INSUFFICIENT_DATA;
 800265c:	2302      	movs	r3, #2
 800265e:	e02d      	b.n	80026bc <ref_process_data+0xe4>
					}
				}
				break;
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 8002660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002662:	f7ff ffac 	bl	80025be <queue_get_size>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <ref_process_data+0xf0>)
 800266c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002670:	b29b      	uxth	r3, r3
 8002672:	3309      	adds	r3, #9
 8002674:	429a      	cmp	r2, r3
 8002676:	dd18      	ble.n	80026aa <ref_process_data+0xd2>
					state = HEADER;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <ref_process_data+0xec>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 800267e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002680:	4638      	mov	r0, r7
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <ref_process_data+0xf0>)
 8002684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002686:	ca06      	ldmia	r2, {r1, r2}
 8002688:	f000 f898 	bl	80027bc <ref_get_msg>
 800268c:	4620      	mov	r0, r4
 800268e:	463b      	mov	r3, r7
 8002690:	2242      	movs	r2, #66	; 0x42
 8002692:	4619      	mov	r1, r3
 8002694:	f01b ff5f 	bl	801e556 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 8002698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <ref_process_data+0xd6>
						return PROCESS_SUCCESS;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e008      	b.n	80026bc <ref_process_data+0xe4>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 80026aa:	2302      	movs	r3, #2
 80026ac:	e006      	b.n	80026bc <ref_process_data+0xe4>
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 80026ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026b0:	f7ff ff85 	bl	80025be <queue_get_size>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d894      	bhi.n	80025e4 <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 80026ba:	2302      	movs	r3, #2
}
 80026bc:	4618      	mov	r0, r3
 80026be:	375c      	adds	r7, #92	; 0x5c
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	200003d0 	.word	0x200003d0
 80026c8:	200003d4 	.word	0x200003d4

080026cc <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	2207      	movs	r2, #7
 80026dc:	4619      	mov	r1, r3
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f7ff fece 	bl	8002480 <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 80026e4:	7b3b      	ldrb	r3, [r7, #12]
 80026e6:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 80026e8:	7d3b      	ldrb	r3, [r7, #20]
 80026ea:	2ba5      	cmp	r3, #165	; 0xa5
 80026ec:	d013      	beq.n	8002716 <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f7ff fe56 	bl	80023a0 <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f8:	767b      	strb	r3, [r7, #25]
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026fe:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	461a      	mov	r2, r3
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	6010      	str	r0, [r2, #0]
 800270c:	8899      	ldrh	r1, [r3, #4]
 800270e:	799b      	ldrb	r3, [r3, #6]
 8002710:	8091      	strh	r1, [r2, #4]
 8002712:	7193      	strb	r3, [r2, #6]
 8002714:	e04d      	b.n	80027b2 <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 8002716:	7bbb      	ldrb	r3, [r7, #14]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21a      	sxth	r2, r3
 800271c:	7b7b      	ldrb	r3, [r7, #13]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 800272e:	7c3b      	ldrb	r3, [r7, #16]
 8002730:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	2105      	movs	r1, #5
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fc7f 	bl	800103c <verify_CRC8_check_sum>
 800273e:	4603      	mov	r3, r0
 8002740:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 8002742:	7cbb      	ldrb	r3, [r7, #18]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	b21a      	sxth	r2, r3
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21b      	sxth	r3, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00c      	beq.n	8002776 <ref_get_header+0xaa>
 800275c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d806      	bhi.n	8002776 <ref_get_header+0xaa>
 8002768:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f240 3205 	movw	r2, #773	; 0x305
 8002772:	4293      	cmp	r3, r2
 8002774:	d913      	bls.n	800279e <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277a:	767b      	strb	r3, [r7, #25]
 800277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002780:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f7ff fe0c 	bl	80023a0 <queue_pop_element>
		return ret_header;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	6010      	str	r0, [r2, #0]
 8002794:	8899      	ldrh	r1, [r3, #4]
 8002796:	799b      	ldrb	r3, [r3, #6]
 8002798:	8091      	strh	r1, [r2, #4]
 800279a:	7193      	strb	r3, [r2, #6]
 800279c:	e009      	b.n	80027b2 <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	6010      	str	r0, [r2, #0]
 80027aa:	8899      	ldrh	r1, [r3, #4]
 80027ac:	799b      	ldrb	r3, [r3, #6]
 80027ae:	8091      	strh	r1, [r2, #4]
 80027b0:	7193      	strb	r3, [r2, #6]
}
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b0d8      	sub	sp, #352	; 0x160
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 80027c6:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 80027d0:	f5a0 70ae 	sub.w	r0, r0, #348	; 0x15c
 80027d4:	e880 0006 	stmia.w	r0, {r1, r2}
 80027d8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80027dc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80027e0:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 80027e2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027e6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80027ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3309      	adds	r3, #9
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80027f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027fc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	f7ff fe03 	bl	800240c <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002806:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800280a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800280e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002812:	b29b      	uxth	r3, r3
 8002814:	3309      	adds	r3, #9
 8002816:	461a      	mov	r2, r3
 8002818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fc80 	bl	8001124 <verify_CRC16_check_sum>
 8002824:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	if (!crc_test){
 8002828:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d116      	bne.n	800285e <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 8002830:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002834:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283c:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 800283e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002842:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800284c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	2342      	movs	r3, #66	; 0x42
 8002856:	461a      	mov	r2, r3
 8002858:	f01b fe7d 	bl	801e556 <memcpy>
 800285c:	e19f      	b.n	8002b9e <ref_get_msg+0x3e2>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 800285e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002862:	3307      	adds	r3, #7
 8002864:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	buffer_msg.cmd_id = header.cmd_id;
 8002868:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800286c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002870:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002874:	b29a      	uxth	r2, r3
 8002876:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800287a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800287e:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 8002880:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002884:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002888:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f240 3202 	movw	r2, #770	; 0x302
 8002892:	4293      	cmp	r3, r2
 8002894:	f000 815c 	beq.w	8002b50 <ref_get_msg+0x394>
 8002898:	f240 3202 	movw	r2, #770	; 0x302
 800289c:	4293      	cmp	r3, r2
 800289e:	f300 8167 	bgt.w	8002b70 <ref_get_msg+0x3b4>
 80028a2:	f240 3201 	movw	r2, #769	; 0x301
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f000 8146 	beq.w	8002b38 <ref_get_msg+0x37c>
 80028ac:	f240 3201 	movw	r2, #769	; 0x301
 80028b0:	4293      	cmp	r3, r2
 80028b2:	f300 815d 	bgt.w	8002b70 <ref_get_msg+0x3b4>
 80028b6:	f240 220a 	movw	r2, #522	; 0x20a
 80028ba:	4293      	cmp	r3, r2
 80028bc:	f300 8158 	bgt.w	8002b70 <ref_get_msg+0x3b4>
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c4:	dc04      	bgt.n	80028d0 <ref_get_msg+0x114>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	dc40      	bgt.n	800294c <ref_get_msg+0x190>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dc2e      	bgt.n	800292c <ref_get_msg+0x170>
 80028ce:	e14f      	b.n	8002b70 <ref_get_msg+0x3b4>
 80028d0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	f200 814b 	bhi.w	8002b70 <ref_get_msg+0x3b4>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <ref_get_msg+0x124>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	08002a35 	.word	0x08002a35
 80028e4:	08002a65 	.word	0x08002a65
 80028e8:	08002a85 	.word	0x08002a85
 80028ec:	08002aa5 	.word	0x08002aa5
 80028f0:	08002ab7 	.word	0x08002ab7
 80028f4:	08002ac9 	.word	0x08002ac9
 80028f8:	08002adb 	.word	0x08002adb
 80028fc:	08002af7 	.word	0x08002af7
 8002900:	08002b0f 	.word	0x08002b0f
 8002904:	08002b25 	.word	0x08002b25
 8002908:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800290c:	2b04      	cmp	r3, #4
 800290e:	f200 812f 	bhi.w	8002b70 <ref_get_msg+0x3b4>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <ref_get_msg+0x15c>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	080029cb 	.word	0x080029cb
 800291c:	080029e1 	.word	0x080029e1
 8002920:	080029f7 	.word	0x080029f7
 8002924:	08002a0f 	.word	0x08002a0f
 8002928:	08002a23 	.word	0x08002a23
 800292c:	3b01      	subs	r3, #1
 800292e:	2b03      	cmp	r3, #3
 8002930:	f200 811e 	bhi.w	8002b70 <ref_get_msg+0x3b4>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <ref_get_msg+0x180>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800295d 	.word	0x0800295d
 8002940:	08002975 	.word	0x08002975
 8002944:	08002987 	.word	0x08002987
 8002948:	080029b3 	.word	0x080029b3
 800294c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002950:	f280 810e 	bge.w	8002b70 <ref_get_msg+0x3b4>
 8002954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002958:	dcd6      	bgt.n	8002908 <ref_get_msg+0x14c>
 800295a:	e109      	b.n	8002b70 <ref_get_msg+0x3b4>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 800295c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002960:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002964:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002968:	3302      	adds	r3, #2
 800296a:	8811      	ldrh	r1, [r2, #0]
 800296c:	7892      	ldrb	r2, [r2, #2]
 800296e:	8019      	strh	r1, [r3, #0]
 8002970:	709a      	strb	r2, [r3, #2]
		break;
 8002972:	e105      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002974:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002978:	781a      	ldrb	r2, [r3, #0]
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 800297a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800297e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002982:	709a      	strb	r2, [r3, #2]
		break;
 8002984:	e0fc      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 8002986:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800298a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800298e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002992:	3302      	adds	r3, #2
 8002994:	6814      	ldr	r4, [r2, #0]
 8002996:	6850      	ldr	r0, [r2, #4]
 8002998:	6891      	ldr	r1, [r2, #8]
 800299a:	68d5      	ldr	r5, [r2, #12]
 800299c:	601c      	str	r4, [r3, #0]
 800299e:	6058      	str	r0, [r3, #4]
 80029a0:	6099      	str	r1, [r3, #8]
 80029a2:	60dd      	str	r5, [r3, #12]
 80029a4:	6914      	ldr	r4, [r2, #16]
 80029a6:	6950      	ldr	r0, [r2, #20]
 80029a8:	6991      	ldr	r1, [r2, #24]
 80029aa:	611c      	str	r4, [r3, #16]
 80029ac:	6158      	str	r0, [r3, #20]
 80029ae:	6199      	str	r1, [r3, #24]
		break;
 80029b0:	e0e6      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 80029b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029ba:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029be:	3302      	adds	r3, #2
 80029c0:	8811      	ldrh	r1, [r2, #0]
 80029c2:	7892      	ldrb	r2, [r2, #2]
 80029c4:	8019      	strh	r1, [r3, #0]
 80029c6:	709a      	strb	r2, [r3, #2]
		break;
 80029c8:	e0da      	b.n	8002b80 <ref_get_msg+0x3c4>
 80029ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 80029d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029da:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 80029de:	e0cf      	b.n	8002b80 <ref_get_msg+0x3c4>
 80029e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 80029e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029f0:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 80029f4:	e0c4      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 80029f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029fe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a02:	3302      	adds	r3, #2
 8002a04:	8811      	ldrh	r1, [r2, #0]
 8002a06:	7892      	ldrb	r2, [r2, #2]
 8002a08:	8019      	strh	r1, [r3, #0]
 8002a0a:	709a      	strb	r2, [r3, #2]
		break;
 8002a0c:	e0b8      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002a0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 8002a16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a1e:	805a      	strh	r2, [r3, #2]
		break;
 8002a20:	e0ae      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002a22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a26:	781a      	ldrb	r2, [r3, #0]
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 8002a28:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a30:	709a      	strb	r2, [r3, #2]
		break;
 8002a32:	e0a5      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 8002a34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a3c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a40:	3302      	adds	r3, #2
 8002a42:	6810      	ldr	r0, [r2, #0]
 8002a44:	6851      	ldr	r1, [r2, #4]
 8002a46:	6895      	ldr	r5, [r2, #8]
 8002a48:	68d4      	ldr	r4, [r2, #12]
 8002a4a:	6018      	str	r0, [r3, #0]
 8002a4c:	6059      	str	r1, [r3, #4]
 8002a4e:	609d      	str	r5, [r3, #8]
 8002a50:	60dc      	str	r4, [r3, #12]
 8002a52:	6910      	ldr	r0, [r2, #16]
 8002a54:	6951      	ldr	r1, [r2, #20]
 8002a56:	6118      	str	r0, [r3, #16]
 8002a58:	6159      	str	r1, [r3, #20]
 8002a5a:	8b11      	ldrh	r1, [r2, #24]
 8002a5c:	7e92      	ldrb	r2, [r2, #26]
 8002a5e:	8319      	strh	r1, [r3, #24]
 8002a60:	769a      	strb	r2, [r3, #26]
		break;
 8002a62:	e08d      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 8002a64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a6c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a70:	3302      	adds	r3, #2
 8002a72:	6814      	ldr	r4, [r2, #0]
 8002a74:	6850      	ldr	r0, [r2, #4]
 8002a76:	6891      	ldr	r1, [r2, #8]
 8002a78:	601c      	str	r4, [r3, #0]
 8002a7a:	6058      	str	r0, [r3, #4]
 8002a7c:	6099      	str	r1, [r3, #8]
 8002a7e:	8992      	ldrh	r2, [r2, #12]
 8002a80:	819a      	strh	r2, [r3, #12]
		break;
 8002a82:	e07d      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 8002a84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a88:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a8c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a90:	3302      	adds	r3, #2
 8002a92:	6814      	ldr	r4, [r2, #0]
 8002a94:	6850      	ldr	r0, [r2, #4]
 8002a96:	6891      	ldr	r1, [r2, #8]
 8002a98:	68d2      	ldr	r2, [r2, #12]
 8002a9a:	601c      	str	r4, [r3, #0]
 8002a9c:	6058      	str	r0, [r3, #4]
 8002a9e:	6099      	str	r1, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
		break;
 8002aa2:	e06d      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002aa4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aa8:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 8002aaa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002aae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ab2:	709a      	strb	r2, [r3, #2]
		break;
 8002ab4:	e064      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002ab6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aba:	781a      	ldrb	r2, [r3, #0]
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 8002abc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ac0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ac4:	709a      	strb	r2, [r3, #2]
		break;
 8002ac6:	e05b      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002ac8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002acc:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 8002ace:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ad2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ad6:	709a      	strb	r2, [r3, #2]
		break;
 8002ad8:	e052      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 8002ada:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ade:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ae2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	6019      	str	r1, [r3, #0]
 8002aec:	8891      	ldrh	r1, [r2, #4]
 8002aee:	7992      	ldrb	r2, [r2, #6]
 8002af0:	8099      	strh	r1, [r3, #4]
 8002af2:	719a      	strb	r2, [r3, #6]
		break;
 8002af4:	e044      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002af6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002afa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002afe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002b02:	3302      	adds	r3, #2
 8002b04:	6811      	ldr	r1, [r2, #0]
 8002b06:	6019      	str	r1, [r3, #0]
 8002b08:	8892      	ldrh	r2, [r2, #4]
 8002b0a:	809a      	strh	r2, [r3, #4]
		break;
 8002b0c:	e038      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002b0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002b16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b1e:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002b22:	e02d      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	3302      	adds	r3, #2
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8002b30:	4618      	mov	r0, r3
 8002b32:	f01b fd10 	bl	801e556 <memcpy>
		break;
 8002b36:	e023      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 8002b38:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b3c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b40:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002b44:	3302      	adds	r3, #2
 8002b46:	6811      	ldr	r1, [r2, #0]
 8002b48:	6019      	str	r1, [r3, #0]
 8002b4a:	8892      	ldrh	r2, [r2, #4]
 8002b4c:	809a      	strh	r2, [r3, #4]
		break;
 8002b4e:	e017      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 8002b50:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b54:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b58:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	6814      	ldr	r4, [r2, #0]
 8002b60:	6850      	ldr	r0, [r2, #4]
 8002b62:	6891      	ldr	r1, [r2, #8]
 8002b64:	601c      	str	r4, [r3, #0]
 8002b66:	6058      	str	r0, [r3, #4]
 8002b68:	6099      	str	r1, [r3, #8]
 8002b6a:	7b12      	ldrb	r2, [r2, #12]
 8002b6c:	731a      	strb	r2, [r3, #12]
		break;
 8002b6e:	e007      	b.n	8002b80 <ref_get_msg+0x3c4>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 8002b70:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b74:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7c:	801a      	strh	r2, [r3, #0]
		break;
 8002b7e:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 8002b80:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b84:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	2342      	movs	r3, #66	; 0x42
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f01b fcdc 	bl	801e556 <memcpy>
}
 8002b9e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ba2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bdb0      	pop	{r4, r5, r7, pc}

08002bb0 <init_xvr_usart>:

static queue_t *xvr_UART_queue;
static queue_t *ref_UART_queue;


void init_xvr_usart(uint8_t *pData){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	xvr_usart_start(&SBC_UART, pData, 15, NULL);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	220f      	movs	r2, #15
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4803      	ldr	r0, [pc, #12]	; (8002bcc <init_xvr_usart+0x1c>)
 8002bc0:	f000 f810 	bl	8002be4 <xvr_usart_start>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20001650 	.word	0x20001650

08002bd0 <xvr_full_cplt_isr>:
		queue_append_byte(xvr_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
//	} else {
//		queue_append_byte(xvr_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
void xvr_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	sbc_process_data();
 8002bd8:	f00a f898 	bl	800cd0c <sbc_process_data>
};
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <xvr_usart_start>:

HAL_StatusTypeDef xvr_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	xvr_UART_queue = uart_queue;
 8002bf4:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <xvr_usart_start+0xfc>)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6013      	str	r3, [r2, #0]
	queue_init(xvr_UART_queue);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <xvr_usart_start+0xfc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb42 	bl	8002288 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d161      	bne.n	8002cd4 <xvr_usart_start+0xf0>
		if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <xvr_usart_start+0x38>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <xvr_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e05a      	b.n	8002cd6 <xvr_usart_start+0xf2>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <xvr_usart_start+0x4a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e053      	b.n	8002cd6 <xvr_usart_start+0xf2>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2222      	movs	r2, #34	; 0x22
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = xvr_full_cplt_isr;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <xvr_usart_start+0x100>)
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
//		huart->hdmarx->XferHalfCpltCallback = xvr_half_cplt_isr;


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	2200      	movs	r2, #0
 8002c64:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3304      	adds	r3, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	f00c feff 	bl	800fa80 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cce:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <xvr_usart_start+0xf2>
	} else {
		return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
	}
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200003dc 	.word	0x200003dc
 8002ce4:	08002bd1 	.word	0x08002bd1

08002ce8 <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <ref_usart_start+0xfc>)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <ref_usart_start+0xfc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fac0 	bl	8002288 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d162      	bne.n	8002dda <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <ref_usart_start+0x38>
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e05b      	b.n	8002ddc <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <ref_usart_start+0x4a>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e054      	b.n	8002ddc <ref_usart_start+0xf4>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2222      	movs	r2, #34	; 0x22
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <ref_usart_start+0x100>)
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <ref_usart_start+0x104>)
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2200      	movs	r2, #0
 8002d6a:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	f00c fe7c 	bl	800fa80 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db4:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd4:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
	}
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200003e0 	.word	0x200003e0
 8002de8:	08002e19 	.word	0x08002e19
 8002dec:	08002df1 	.word	0x08002df1

08002df0 <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <ref_half_cplt_isr+0x24>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7ff fa6f 	bl	80022ea <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200003e0 	.word	0x200003e0

08002e18 <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <ref_full_cplt_isr+0x28>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f7ff fa5a 	bl	80022ea <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200003e0 	.word	0x200003e0

08002e44 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <MX_ADC3_Init+0x9c>)
 8002e5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002e76:	4b19      	ldr	r3, [pc, #100]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <MX_ADC3_Init+0xa0>)
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <MX_ADC3_Init+0x98>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <MX_ADC3_Init+0x98>)
 8002ea6:	f00b fb79 	bl	800e59c <HAL_ADC_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002eb0:	f000 fe8b 	bl	8003bca <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_ADC3_Init+0x98>)
 8002ec6:	f00b fbad 	bl	800e624 <HAL_ADC_ConfigChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002ed0:	f000 fe7b 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200003e4 	.word	0x200003e4
 8002ee0:	40012200 	.word	0x40012200
 8002ee4:	0f000001 	.word	0x0f000001

08002ee8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_ADC_MspInit+0x7c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d128      	bne.n	8002f5c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f30:	f043 0320 	orr.w	r3, r3, #32
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_ADC_MspInit+0x84>)
 8002f58:	f00d f8f2 	bl	8010140 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012200 	.word	0x40012200
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40021400 	.word	0x40021400

08002f70 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <MX_CAN1_Init+0x68>)
 8002f78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f96:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002f9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002fc0:	4804      	ldr	r0, [pc, #16]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fc2:	f00b fd4d 	bl	800ea60 <HAL_CAN_Init>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002fcc:	f000 fdfd 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	2000042c 	.word	0x2000042c
 8002fd8:	40006400 	.word	0x40006400

08002fdc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <MX_CAN2_Init+0x64>)
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <MX_CAN2_Init+0x68>)
 8002fe4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <MX_CAN2_Init+0x64>)
 8002fe8:	2203      	movs	r2, #3
 8002fea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <MX_CAN2_Init+0x64>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <MX_CAN2_Init+0x64>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_CAN2_Init+0x64>)
 8002ffa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ffe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <MX_CAN2_Init+0x64>)
 8003002:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003006:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <MX_CAN2_Init+0x64>)
 800300a:	2200      	movs	r2, #0
 800300c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <MX_CAN2_Init+0x64>)
 8003010:	2200      	movs	r2, #0
 8003012:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <MX_CAN2_Init+0x64>)
 8003016:	2200      	movs	r2, #0
 8003018:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <MX_CAN2_Init+0x64>)
 800301c:	2200      	movs	r2, #0
 800301e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <MX_CAN2_Init+0x64>)
 8003022:	2200      	movs	r2, #0
 8003024:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <MX_CAN2_Init+0x64>)
 8003028:	2200      	movs	r2, #0
 800302a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800302c:	4804      	ldr	r0, [pc, #16]	; (8003040 <MX_CAN2_Init+0x64>)
 800302e:	f00b fd17 	bl	800ea60 <HAL_CAN_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003038:	f000 fdc7 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000454 	.word	0x20000454
 8003044:	40006800 	.word	0x40006800

08003048 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_CAN_MspInit+0x168>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d145      	bne.n	80030f6 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800306a:	4b52      	ldr	r3, [pc, #328]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003072:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003074:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10d      	bne.n	8003098 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	4a4c      	ldr	r2, [pc, #304]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308a:	6413      	str	r3, [r2, #64]	; 0x40
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4a45      	ldr	r2, [pc, #276]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	6313      	str	r3, [r2, #48]	; 0x30
 80030a8:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030b4:	2303      	movs	r3, #3
 80030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	2303      	movs	r3, #3
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80030c4:	2309      	movs	r3, #9
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	4619      	mov	r1, r3
 80030ce:	483b      	ldr	r0, [pc, #236]	; (80031bc <HAL_CAN_MspInit+0x174>)
 80030d0:	f00d f836 	bl	8010140 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2105      	movs	r1, #5
 80030d8:	2014      	movs	r0, #20
 80030da:	f00c fbf9 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80030de:	2014      	movs	r0, #20
 80030e0:	f00c fc12 	bl	800f908 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2105      	movs	r1, #5
 80030e8:	2015      	movs	r0, #21
 80030ea:	f00c fbf1 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80030ee:	2015      	movs	r0, #21
 80030f0:	f00c fc0a 	bl	800f908 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80030f4:	e057      	b.n	80031a6 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a31      	ldr	r2, [pc, #196]	; (80031c0 <HAL_CAN_MspInit+0x178>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d152      	bne.n	80031a6 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	4a2b      	ldr	r2, [pc, #172]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800310a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800310e:	6413      	str	r3, [r2, #64]	; 0x40
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003124:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003126:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003166:	2360      	movs	r3, #96	; 0x60
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003176:	2309      	movs	r3, #9
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	4810      	ldr	r0, [pc, #64]	; (80031c4 <HAL_CAN_MspInit+0x17c>)
 8003182:	f00c ffdd 	bl	8010140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2105      	movs	r1, #5
 800318a:	2040      	movs	r0, #64	; 0x40
 800318c:	f00c fba0 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003190:	2040      	movs	r0, #64	; 0x40
 8003192:	f00c fbb9 	bl	800f908 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2105      	movs	r1, #5
 800319a:	2041      	movs	r0, #65	; 0x41
 800319c:	f00c fb98 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80031a0:	2041      	movs	r0, #65	; 0x41
 80031a2:	f00c fbb1 	bl	800f908 <HAL_NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3730      	adds	r7, #48	; 0x30
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40006400 	.word	0x40006400
 80031b4:	2000047c 	.word	0x2000047c
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40006800 	.word	0x40006800
 80031c4:	40020400 	.word	0x40020400

080031c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <MX_DMA_Init+0xc8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <MX_DMA_Init+0xc8>)
 80031d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <MX_DMA_Init+0xc8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <MX_DMA_Init+0xc8>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a27      	ldr	r2, [pc, #156]	; (8003290 <MX_DMA_Init+0xc8>)
 80031f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <MX_DMA_Init+0xc8>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2105      	movs	r1, #5
 800320a:	200c      	movs	r0, #12
 800320c:	f00c fb60 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003210:	200c      	movs	r0, #12
 8003212:	f00c fb79 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2105      	movs	r1, #5
 800321a:	200d      	movs	r0, #13
 800321c:	f00c fb58 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003220:	200d      	movs	r0, #13
 8003222:	f00c fb71 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2105      	movs	r1, #5
 800322a:	200f      	movs	r0, #15
 800322c:	f00c fb50 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003230:	200f      	movs	r0, #15
 8003232:	f00c fb69 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2105      	movs	r1, #5
 800323a:	2038      	movs	r0, #56	; 0x38
 800323c:	f00c fb48 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003240:	2038      	movs	r0, #56	; 0x38
 8003242:	f00c fb61 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2105      	movs	r1, #5
 800324a:	2039      	movs	r0, #57	; 0x39
 800324c:	f00c fb40 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003250:	2039      	movs	r0, #57	; 0x39
 8003252:	f00c fb59 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2105      	movs	r1, #5
 800325a:	203b      	movs	r0, #59	; 0x3b
 800325c:	f00c fb38 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003260:	203b      	movs	r0, #59	; 0x3b
 8003262:	f00c fb51 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8003266:	2200      	movs	r2, #0
 8003268:	2105      	movs	r1, #5
 800326a:	2044      	movs	r0, #68	; 0x44
 800326c:	f00c fb30 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003270:	2044      	movs	r0, #68	; 0x44
 8003272:	f00c fb49 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2105      	movs	r1, #5
 800327a:	2045      	movs	r0, #69	; 0x45
 800327c:	f00c fb28 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003280:	2045      	movs	r0, #69	; 0x45
 8003282:	f00c fb41 	bl	800f908 <HAL_NVIC_EnableIRQ>

}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
	return 0;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80032d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <vApplicationGetIdleTaskMemory+0x30>)
 80032de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e6:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	200004e4 	.word	0x200004e4
 80032f8:	200005a4 	.word	0x200005a4

080032fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <vApplicationGetTimerTaskMemory+0x2c>)
 800330c:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <vApplicationGetTimerTaskMemory+0x30>)
 8003312:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	200009a4 	.word	0x200009a4
 800332c:	20000a64 	.word	0x20000a64

08003330 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af02      	add	r7, sp, #8
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	gimbal_event_group = xEventGroupCreate();
 8003336:	f017 f91e 	bl	801a576 <xEventGroupCreate>
 800333a:	4603      	mov	r3, r0
 800333c:	4a89      	ldr	r2, [pc, #548]	; (8003564 <MX_FREERTOS_Init+0x234>)
 800333e:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 8003340:	f017 f919 	bl	801a576 <xEventGroupCreate>
 8003344:	4603      	mov	r3, r0
 8003346:	4a88      	ldr	r2, [pc, #544]	; (8003568 <MX_FREERTOS_Init+0x238>)
 8003348:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 800334a:	f017 f914 	bl	801a576 <xEventGroupCreate>
 800334e:	4603      	mov	r3, r0
 8003350:	4a86      	ldr	r2, [pc, #536]	; (800356c <MX_FREERTOS_Init+0x23c>)
 8003352:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 8003354:	2203      	movs	r2, #3
 8003356:	2100      	movs	r1, #0
 8003358:	2001      	movs	r0, #1
 800335a:	f017 fc8f 	bl	801ac7c <xQueueGenericCreate>
 800335e:	4603      	mov	r3, r0
 8003360:	4a83      	ldr	r2, [pc, #524]	; (8003570 <MX_FREERTOS_Init+0x240>)
 8003362:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 8003364:	2200      	movs	r2, #0
 8003366:	2110      	movs	r1, #16
 8003368:	2005      	movs	r0, #5
 800336a:	f017 fc87 	bl	801ac7c <xQueueGenericCreate>
 800336e:	4603      	mov	r3, r0
 8003370:	4a80      	ldr	r2, [pc, #512]	; (8003574 <MX_FREERTOS_Init+0x244>)
 8003372:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 8003374:	2200      	movs	r2, #0
 8003376:	2110      	movs	r1, #16
 8003378:	2005      	movs	r0, #5
 800337a:	f017 fc7f 	bl	801ac7c <xQueueGenericCreate>
 800337e:	4603      	mov	r3, r0
 8003380:	4a7d      	ldr	r2, [pc, #500]	; (8003578 <MX_FREERTOS_Init+0x248>)
 8003382:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 8003384:	2200      	movs	r2, #0
 8003386:	210c      	movs	r1, #12
 8003388:	2005      	movs	r0, #5
 800338a:	f017 fc77 	bl	801ac7c <xQueueGenericCreate>
 800338e:	4603      	mov	r3, r0
 8003390:	4a7a      	ldr	r2, [pc, #488]	; (800357c <MX_FREERTOS_Init+0x24c>)
 8003392:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 8003394:	2200      	movs	r2, #0
 8003396:	2101      	movs	r1, #1
 8003398:	2030      	movs	r0, #48	; 0x30
 800339a:	f017 fc6f 	bl	801ac7c <xQueueGenericCreate>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a77      	ldr	r2, [pc, #476]	; (8003580 <MX_FREERTOS_Init+0x250>)
 80033a2:	6013      	str	r3, [r2, #0]
	uart_data_queue = xQueueCreate(5, sizeof(ref_msg_t));
 80033a4:	2200      	movs	r2, #0
 80033a6:	2142      	movs	r1, #66	; 0x42
 80033a8:	2005      	movs	r0, #5
 80033aa:	f017 fc67 	bl	801ac7c <xQueueGenericCreate>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a74      	ldr	r2, [pc, #464]	; (8003584 <MX_FREERTOS_Init+0x254>)
 80033b2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80033b4:	4b74      	ldr	r3, [pc, #464]	; (8003588 <MX_FREERTOS_Init+0x258>)
 80033b6:	1d3c      	adds	r4, r7, #4
 80033b8:	461d      	mov	r5, r3
 80033ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f017 f873 	bl	801a4b6 <osThreadCreate>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a6e      	ldr	r2, [pc, #440]	; (800358c <MX_FREERTOS_Init+0x25c>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(imu_processing_task, "IMU_task",
 80033d6:	4b6e      	ldr	r3, [pc, #440]	; (8003590 <MX_FREERTOS_Init+0x260>)
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	230f      	movs	r3, #15
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	2301      	movs	r3, #1
 80033e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e4:	496b      	ldr	r1, [pc, #428]	; (8003594 <MX_FREERTOS_Init+0x264>)
 80033e6:	486c      	ldr	r0, [pc, #432]	; (8003598 <MX_FREERTOS_Init+0x268>)
 80033e8:	f018 f977 	bl	801b6da <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 80033ec:	4b6b      	ldr	r3, [pc, #428]	; (800359c <MX_FREERTOS_Init+0x26c>)
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	2309      	movs	r3, #9
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fa:	4969      	ldr	r1, [pc, #420]	; (80035a0 <MX_FREERTOS_Init+0x270>)
 80033fc:	4869      	ldr	r0, [pc, #420]	; (80035a4 <MX_FREERTOS_Init+0x274>)
 80033fe:	f018 f96c 	bl	801b6da <xTaskCreate>
		// 		&gimbal_control_task_handle);
//	}
//new implementation
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(motor_calib_task, "motor_calib_task",
 8003402:	4b66      	ldr	r3, [pc, #408]	; (800359c <MX_FREERTOS_Init+0x26c>)
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2309      	movs	r3, #9
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2301      	movs	r3, #1
 800340c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003410:	4963      	ldr	r1, [pc, #396]	; (80035a0 <MX_FREERTOS_Init+0x270>)
 8003412:	4864      	ldr	r0, [pc, #400]	; (80035a4 <MX_FREERTOS_Init+0x274>)
 8003414:	f018 f961 	bl	801b6da <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 9,
			&motor_calib_task_handle);

	xTaskCreate(Ctrl_Task, "Ctrl_Task_task",
 8003418:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <MX_FREERTOS_Init+0x278>)
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	2308      	movs	r3, #8
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2301      	movs	r3, #1
 8003422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003426:	4961      	ldr	r1, [pc, #388]	; (80035ac <MX_FREERTOS_Init+0x27c>)
 8003428:	4861      	ldr	r0, [pc, #388]	; (80035b0 <MX_FREERTOS_Init+0x280>)
 800342a:	f018 f956 	bl	801b6da <xTaskCreate>
					configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 8,
							&Ctrl_Task_handle);

	xTaskCreate(LegPos_UpdateTask, "LegPos_UpdateTask",
 800342e:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <MX_FREERTOS_Init+0x284>)
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	2308      	movs	r3, #8
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2301      	movs	r3, #1
 8003438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343c:	495e      	ldr	r1, [pc, #376]	; (80035b8 <MX_FREERTOS_Init+0x288>)
 800343e:	485f      	ldr	r0, [pc, #380]	; (80035bc <MX_FREERTOS_Init+0x28c>)
 8003440:	f018 f94b 	bl	801b6da <xTaskCreate>
				configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 8,
						&LegPos_UpdateTask_handle);

	xTaskCreate(Ctrl_TargetUpdateTask, "Ctrl_TargetUpdateTask",
 8003444:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <MX_FREERTOS_Init+0x290>)
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2308      	movs	r3, #8
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2301      	movs	r3, #1
 800344e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003452:	495c      	ldr	r1, [pc, #368]	; (80035c4 <MX_FREERTOS_Init+0x294>)
 8003454:	485c      	ldr	r0, [pc, #368]	; (80035c8 <MX_FREERTOS_Init+0x298>)
 8003456:	f018 f940 	bl	801b6da <xTaskCreate>
			configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 8,
					&Ctrl_TargetUpdateTask_handle);

	xTaskCreate(motors_process_task, "motor_process",
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <MX_FREERTOS_Init+0x29c>)
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	2308      	movs	r3, #8
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2301      	movs	r3, #1
 8003464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003468:	4959      	ldr	r1, [pc, #356]	; (80035d0 <MX_FREERTOS_Init+0x2a0>)
 800346a:	485a      	ldr	r0, [pc, #360]	; (80035d4 <MX_FREERTOS_Init+0x2a4>)
 800346c:	f018 f935 	bl	801b6da <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 8,
				&motors_process_handle);

	xTaskCreate(balancing_task, "balancing_task",
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <MX_FREERTOS_Init+0x2a8>)
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	2308      	movs	r3, #8
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2301      	movs	r3, #1
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	4957      	ldr	r1, [pc, #348]	; (80035dc <MX_FREERTOS_Init+0x2ac>)
 8003480:	4857      	ldr	r0, [pc, #348]	; (80035e0 <MX_FREERTOS_Init+0x2b0>)
 8003482:	f018 f92a 	bl	801b6da <xTaskCreate>
			configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 8,
					&balancing_task_handle);

	xTaskCreate(motor_send_RTOS, "motor_send_RTOS",
 8003486:	4b57      	ldr	r3, [pc, #348]	; (80035e4 <MX_FREERTOS_Init+0x2b4>)
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	2309      	movs	r3, #9
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	2303      	movs	r3, #3
 8003490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003494:	4954      	ldr	r1, [pc, #336]	; (80035e8 <MX_FREERTOS_Init+0x2b8>)
 8003496:	4855      	ldr	r0, [pc, #340]	; (80035ec <MX_FREERTOS_Init+0x2bc>)
 8003498:	f018 f91f 	bl	801b6da <xTaskCreate>

	// xTaskCreate(leg_kinematic_task, "leg_kinematic",
	// 		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 8,
	// 				&leg_kinematic_handle);

	xTaskCreate(imu_processing_task, "IMU_task",
 800349c:	4b3c      	ldr	r3, [pc, #240]	; (8003590 <MX_FREERTOS_Init+0x260>)
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	230f      	movs	r3, #15
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2301      	movs	r3, #1
 80034a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034aa:	493a      	ldr	r1, [pc, #232]	; (8003594 <MX_FREERTOS_Init+0x264>)
 80034ac:	483a      	ldr	r0, [pc, #232]	; (8003598 <MX_FREERTOS_Init+0x268>)
 80034ae:	f018 f914 	bl	801b6da <xTaskCreate>
	// 	xTaskCreate(movement_control_task, "chassis_task",
	// 	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
	// 			&movement_control_task_handle);
	// }

	if (launcher_event_group == NULL) {
 80034b2:	4b2e      	ldr	r3, [pc, #184]	; (800356c <MX_FREERTOS_Init+0x23c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <MX_FREERTOS_Init+0x1a0>
		//error handler
	} else {
		xTaskCreate(launcher_control_task, "launcher_task",
 80034ba:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <MX_FREERTOS_Init+0x2c0>)
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2304      	movs	r3, #4
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2301      	movs	r3, #1
 80034c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c8:	494a      	ldr	r1, [pc, #296]	; (80035f4 <MX_FREERTOS_Init+0x2c4>)
 80034ca:	484b      	ldr	r0, [pc, #300]	; (80035f8 <MX_FREERTOS_Init+0x2c8>)
 80034cc:	f018 f905 	bl	801b6da <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&launcher_control_task_handle);
	}

	xTaskCreate(control_input_task, "RC_task",
 80034d0:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <MX_FREERTOS_Init+0x2cc>)
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2304      	movs	r3, #4
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2301      	movs	r3, #1
 80034da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034de:	4948      	ldr	r1, [pc, #288]	; (8003600 <MX_FREERTOS_Init+0x2d0>)
 80034e0:	4848      	ldr	r0, [pc, #288]	; (8003604 <MX_FREERTOS_Init+0x2d4>)
 80034e2:	f018 f8fa 	bl	801b6da <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 2048, (void*) 1,
 80034e6:	4b48      	ldr	r3, [pc, #288]	; (8003608 <MX_FREERTOS_Init+0x2d8>)
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2301      	movs	r3, #1
 80034f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f4:	4945      	ldr	r1, [pc, #276]	; (800360c <MX_FREERTOS_Init+0x2dc>)
 80034f6:	4846      	ldr	r0, [pc, #280]	; (8003610 <MX_FREERTOS_Init+0x2e0>)
 80034f8:	f018 f8ef 	bl	801b6da <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 80034fc:	4b45      	ldr	r3, [pc, #276]	; (8003614 <MX_FREERTOS_Init+0x2e4>)
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2301      	movs	r3, #1
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	2301      	movs	r3, #1
 8003506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800350a:	4943      	ldr	r1, [pc, #268]	; (8003618 <MX_FREERTOS_Init+0x2e8>)
 800350c:	4843      	ldr	r0, [pc, #268]	; (800361c <MX_FREERTOS_Init+0x2ec>)
 800350e:	f018 f8e4 	bl	801b6da <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);
	if (usb_continue_semaphore == NULL) {
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <MX_FREERTOS_Init+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <MX_FREERTOS_Init+0x200>
		//error handler
	} else {
		xTaskCreate(usb_task, "usb_task",
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <MX_FREERTOS_Init+0x2f0>)
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2301      	movs	r3, #1
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2301      	movs	r3, #1
 8003524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003528:	493e      	ldr	r1, [pc, #248]	; (8003624 <MX_FREERTOS_Init+0x2f4>)
 800352a:	483f      	ldr	r0, [pc, #252]	; (8003628 <MX_FREERTOS_Init+0x2f8>)
 800352c:	f018 f8d5 	bl	801b6da <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &usb_task_handle);
	}

	xTaskCreate(telemetry_task, "telemetry_task", 700, (void*) 1,
 8003530:	4b3e      	ldr	r3, [pc, #248]	; (800362c <MX_FREERTOS_Init+0x2fc>)
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2305      	movs	r3, #5
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2301      	movs	r3, #1
 800353a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800353e:	493c      	ldr	r1, [pc, #240]	; (8003630 <MX_FREERTOS_Init+0x300>)
 8003540:	483c      	ldr	r0, [pc, #240]	; (8003634 <MX_FREERTOS_Init+0x304>)
 8003542:	f018 f8ca 	bl	801b6da <xTaskCreate>
			(UBaseType_t) 5, &telemetry_task_handle);
	xTaskCreate(hud_task, "hud_task", 500, (void*) 3,
 8003546:	4b3c      	ldr	r3, [pc, #240]	; (8003638 <MX_FREERTOS_Init+0x308>)
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2305      	movs	r3, #5
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2303      	movs	r3, #3
 8003550:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003554:	4939      	ldr	r1, [pc, #228]	; (800363c <MX_FREERTOS_Init+0x30c>)
 8003556:	483a      	ldr	r0, [pc, #232]	; (8003640 <MX_FREERTOS_Init+0x310>)
 8003558:	f018 f8bf 	bl	801b6da <xTaskCreate>
			(UBaseType_t) 5, &hud_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 800355c:	bf00      	nop
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bdb0      	pop	{r4, r5, r7, pc}
 8003564:	200004bc 	.word	0x200004bc
 8003568:	200004c0 	.word	0x200004c0
 800356c:	200004c4 	.word	0x200004c4
 8003570:	200004c8 	.word	0x200004c8
 8003574:	200004cc 	.word	0x200004cc
 8003578:	200004d0 	.word	0x200004d0
 800357c:	200004d4 	.word	0x200004d4
 8003580:	200004d8 	.word	0x200004d8
 8003584:	200004dc 	.word	0x200004dc
 8003588:	080257bc 	.word	0x080257bc
 800358c:	200004e0 	.word	0x200004e0
 8003590:	20000498 	.word	0x20000498
 8003594:	080256d4 	.word	0x080256d4
 8003598:	08006f2d 	.word	0x08006f2d
 800359c:	20000490 	.word	0x20000490
 80035a0:	080256e0 	.word	0x080256e0
 80035a4:	0800b8f9 	.word	0x0800b8f9
 80035a8:	200004b0 	.word	0x200004b0
 80035ac:	080256f4 	.word	0x080256f4
 80035b0:	0800d699 	.word	0x0800d699
 80035b4:	200004ac 	.word	0x200004ac
 80035b8:	08025704 	.word	0x08025704
 80035bc:	0800d45d 	.word	0x0800d45d
 80035c0:	200004a8 	.word	0x200004a8
 80035c4:	08025718 	.word	0x08025718
 80035c8:	0800d2c9 	.word	0x0800d2c9
 80035cc:	200004b4 	.word	0x200004b4
 80035d0:	08025730 	.word	0x08025730
 80035d4:	0800c109 	.word	0x0800c109
 80035d8:	200004a4 	.word	0x200004a4
 80035dc:	08025740 	.word	0x08025740
 80035e0:	0800d0c1 	.word	0x0800d0c1
 80035e4:	200004b8 	.word	0x200004b8
 80035e8:	08025750 	.word	0x08025750
 80035ec:	0800bb11 	.word	0x0800bb11
 80035f0:	20000488 	.word	0x20000488
 80035f4:	08025760 	.word	0x08025760
 80035f8:	08007c19 	.word	0x08007c19
 80035fc:	20000484 	.word	0x20000484
 8003600:	08025770 	.word	0x08025770
 8003604:	08005809 	.word	0x08005809
 8003608:	20000480 	.word	0x20000480
 800360c:	08025778 	.word	0x08025778
 8003610:	0800c859 	.word	0x0800c859
 8003614:	2000048c 	.word	0x2000048c
 8003618:	08025788 	.word	0x08025788
 800361c:	08004f01 	.word	0x08004f01
 8003620:	20000494 	.word	0x20000494
 8003624:	08025794 	.word	0x08025794
 8003628:	0800d0ad 	.word	0x0800d0ad
 800362c:	2000049c 	.word	0x2000049c
 8003630:	080257a0 	.word	0x080257a0
 8003634:	0800cd79 	.word	0x0800cd79
 8003638:	200004a0 	.word	0x200004a0
 800363c:	080257b0 	.word	0x080257b0
 8003640:	08006661 	.word	0x08006661

08003644 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800364c:	f01a f91e 	bl	801d88c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8003650:	2001      	movs	r0, #1
 8003652:	f016 ff7c 	bl	801a54e <osDelay>
 8003656:	e7fb      	b.n	8003650 <StartDefaultTask+0xc>

08003658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08e      	sub	sp, #56	; 0x38
 800365c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	4b79      	ldr	r3, [pc, #484]	; (8003858 <MX_GPIO_Init+0x200>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a78      	ldr	r2, [pc, #480]	; (8003858 <MX_GPIO_Init+0x200>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <MX_GPIO_Init+0x200>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	4b72      	ldr	r3, [pc, #456]	; (8003858 <MX_GPIO_Init+0x200>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a71      	ldr	r2, [pc, #452]	; (8003858 <MX_GPIO_Init+0x200>)
 8003694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <MX_GPIO_Init+0x200>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	4b6b      	ldr	r3, [pc, #428]	; (8003858 <MX_GPIO_Init+0x200>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a6a      	ldr	r2, [pc, #424]	; (8003858 <MX_GPIO_Init+0x200>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b68      	ldr	r3, [pc, #416]	; (8003858 <MX_GPIO_Init+0x200>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b64      	ldr	r3, [pc, #400]	; (8003858 <MX_GPIO_Init+0x200>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a63      	ldr	r2, [pc, #396]	; (8003858 <MX_GPIO_Init+0x200>)
 80036cc:	f043 0308 	orr.w	r3, r3, #8
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b61      	ldr	r3, [pc, #388]	; (8003858 <MX_GPIO_Init+0x200>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <MX_GPIO_Init+0x200>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <MX_GPIO_Init+0x200>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b5a      	ldr	r3, [pc, #360]	; (8003858 <MX_GPIO_Init+0x200>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b56      	ldr	r3, [pc, #344]	; (8003858 <MX_GPIO_Init+0x200>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a55      	ldr	r2, [pc, #340]	; (8003858 <MX_GPIO_Init+0x200>)
 8003704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b53      	ldr	r3, [pc, #332]	; (8003858 <MX_GPIO_Init+0x200>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <MX_GPIO_Init+0x200>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <MX_GPIO_Init+0x200>)
 8003720:	f043 0320 	orr.w	r3, r3, #32
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b4c      	ldr	r3, [pc, #304]	; (8003858 <MX_GPIO_Init+0x200>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	4b48      	ldr	r3, [pc, #288]	; (8003858 <MX_GPIO_Init+0x200>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a47      	ldr	r2, [pc, #284]	; (8003858 <MX_GPIO_Init+0x200>)
 800373c:	f043 0310 	orr.w	r3, r3, #16
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b45      	ldr	r3, [pc, #276]	; (8003858 <MX_GPIO_Init+0x200>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003754:	4841      	ldr	r0, [pc, #260]	; (800385c <MX_GPIO_Init+0x204>)
 8003756:	f00c fe8f 	bl	8010478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 800375a:	2200      	movs	r2, #0
 800375c:	2140      	movs	r1, #64	; 0x40
 800375e:	4840      	ldr	r0, [pc, #256]	; (8003860 <MX_GPIO_Init+0x208>)
 8003760:	f00c fe8a 	bl	8010478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003764:	2201      	movs	r2, #1
 8003766:	2110      	movs	r1, #16
 8003768:	483e      	ldr	r0, [pc, #248]	; (8003864 <MX_GPIO_Init+0x20c>)
 800376a:	f00c fe85 	bl	8010478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800376e:	2201      	movs	r2, #1
 8003770:	2101      	movs	r1, #1
 8003772:	483d      	ldr	r0, [pc, #244]	; (8003868 <MX_GPIO_Init+0x210>)
 8003774:	f00c fe80 	bl	8010478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 8003778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800377e:	2301      	movs	r3, #1
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003786:	2300      	movs	r3, #0
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 800378a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378e:	4619      	mov	r1, r3
 8003790:	4832      	ldr	r0, [pc, #200]	; (800385c <MX_GPIO_Init+0x204>)
 8003792:	f00c fcd5 	bl	8010140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 8003796:	2340      	movs	r3, #64	; 0x40
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379a:	2301      	movs	r3, #1
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2300      	movs	r3, #0
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 80037a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037aa:	4619      	mov	r1, r3
 80037ac:	482c      	ldr	r0, [pc, #176]	; (8003860 <MX_GPIO_Init+0x208>)
 80037ae:	f00c fcc7 	bl	8010140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80037b2:	2308      	movs	r3, #8
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037bc:	2301      	movs	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80037c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c4:	4619      	mov	r1, r3
 80037c6:	4826      	ldr	r0, [pc, #152]	; (8003860 <MX_GPIO_Init+0x208>)
 80037c8:	f00c fcba 	bl	8010140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037cc:	2310      	movs	r3, #16
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d0:	2301      	movs	r3, #1
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d8:	2300      	movs	r3, #0
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e0:	4619      	mov	r1, r3
 80037e2:	4820      	ldr	r0, [pc, #128]	; (8003864 <MX_GPIO_Init+0x20c>)
 80037e4:	f00c fcac 	bl	8010140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 80037e8:	2330      	movs	r3, #48	; 0x30
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037f2:	2301      	movs	r3, #1
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fa:	4619      	mov	r1, r3
 80037fc:	4817      	ldr	r0, [pc, #92]	; (800385c <MX_GPIO_Init+0x204>)
 80037fe:	f00c fc9f 	bl	8010140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003802:	2301      	movs	r3, #1
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003806:	2301      	movs	r3, #1
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380e:	2300      	movs	r3, #0
 8003810:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003816:	4619      	mov	r1, r3
 8003818:	4813      	ldr	r0, [pc, #76]	; (8003868 <MX_GPIO_Init+0x210>)
 800381a:	f00c fc91 	bl	8010140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2105      	movs	r1, #5
 8003822:	2009      	movs	r0, #9
 8003824:	f00c f854 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003828:	2009      	movs	r0, #9
 800382a:	f00c f86d 	bl	800f908 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2105      	movs	r1, #5
 8003832:	200a      	movs	r0, #10
 8003834:	f00c f84c 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003838:	200a      	movs	r0, #10
 800383a:	f00c f865 	bl	800f908 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2105      	movs	r1, #5
 8003842:	2017      	movs	r0, #23
 8003844:	f00c f844 	bl	800f8d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003848:	2017      	movs	r0, #23
 800384a:	f00c f85d 	bl	800f908 <HAL_NVIC_EnableIRQ>

}
 800384e:	bf00      	nop
 8003850:	3738      	adds	r7, #56	; 0x38
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	40020800 	.word	0x40020800
 8003860:	40021800 	.word	0x40021800
 8003864:	40020000 	.word	0x40020000
 8003868:	40020400 	.word	0x40020400

0800386c <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <MX_I2C3_Init+0x50>)
 8003872:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <MX_I2C3_Init+0x54>)
 8003874:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_I2C3_Init+0x50>)
 8003878:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <MX_I2C3_Init+0x58>)
 800387a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <MX_I2C3_Init+0x50>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_I2C3_Init+0x50>)
 8003884:	2200      	movs	r2, #0
 8003886:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <MX_I2C3_Init+0x50>)
 800388a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800388e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <MX_I2C3_Init+0x50>)
 8003892:	2200      	movs	r2, #0
 8003894:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <MX_I2C3_Init+0x50>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <MX_I2C3_Init+0x50>)
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <MX_I2C3_Init+0x50>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80038a8:	4804      	ldr	r0, [pc, #16]	; (80038bc <MX_I2C3_Init+0x50>)
 80038aa:	f00c fe17 	bl	80104dc <HAL_I2C_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80038b4:	f000 f989 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20001264 	.word	0x20001264
 80038c0:	40005c00 	.word	0x40005c00
 80038c4:	00061a80 	.word	0x00061a80

080038c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5b      	ldr	r2, [pc, #364]	; (8003a54 <HAL_I2C_MspInit+0x18c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	f040 80b0 	bne.w	8003a4c <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	6313      	str	r3, [r2, #48]	; 0x30
 80038fc:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	4b52      	ldr	r3, [pc, #328]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	4a51      	ldr	r2, [pc, #324]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6313      	str	r3, [r2, #48]	; 0x30
 8003918:	4b4f      	ldr	r3, [pc, #316]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800392a:	2312      	movs	r3, #18
 800392c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392e:	2301      	movs	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003932:	2303      	movs	r3, #3
 8003934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003936:	2304      	movs	r3, #4
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4619      	mov	r1, r3
 8003940:	4846      	ldr	r0, [pc, #280]	; (8003a5c <HAL_I2C_MspInit+0x194>)
 8003942:	f00c fbfd 	bl	8010140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800394a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800394c:	2312      	movs	r3, #18
 800394e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003950:	2301      	movs	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003954:	2303      	movs	r3, #3
 8003956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003958:	2304      	movs	r3, #4
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	483f      	ldr	r0, [pc, #252]	; (8003a60 <HAL_I2C_MspInit+0x198>)
 8003964:	f00c fbec 	bl	8010140 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	4b3a      	ldr	r3, [pc, #232]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a39      	ldr	r2, [pc, #228]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 8003972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
 8003978:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_I2C_MspInit+0x190>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8003984:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 8003986:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_I2C_MspInit+0x1a0>)
 8003988:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 800398c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003990:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003992:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a6:	4b2f      	ldr	r3, [pc, #188]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80039b2:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80039c4:	4827      	ldr	r0, [pc, #156]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039c6:	f00b ffad 	bl	800f924 <HAL_DMA_Init>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80039d0:	f000 f8fb 	bl	8003bca <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
 80039da:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_I2C_MspInit+0x19c>)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <HAL_I2C_MspInit+0x1a8>)
 80039e4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 80039e8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80039ec:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 80039f0:	2240      	movs	r2, #64	; 0x40
 80039f2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 80039fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a00:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a08:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a14:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8003a20:	4812      	ldr	r0, [pc, #72]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a22:	f00b ff7f 	bl	800f924 <HAL_DMA_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8003a2c:	f000 f8cd 	bl	8003bca <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34
 8003a36:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <HAL_I2C_MspInit+0x1a4>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2105      	movs	r1, #5
 8003a40:	2049      	movs	r0, #73	; 0x49
 8003a42:	f00b ff45 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003a46:	2049      	movs	r0, #73	; 0x49
 8003a48:	f00b ff5e 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40005c00 	.word	0x40005c00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	200012b8 	.word	0x200012b8
 8003a68:	40026040 	.word	0x40026040
 8003a6c:	20001318 	.word	0x20001318
 8003a70:	40026070 	.word	0x40026070

08003a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a78:	f00a fd2a 	bl	800e4d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a7c:	f000 f82c 	bl	8003ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a80:	f7ff fdea 	bl	8003658 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a84:	f7ff fba0 	bl	80031c8 <MX_DMA_Init>
  MX_CAN1_Init();
 8003a88:	f7ff fa72 	bl	8002f70 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003a8c:	f7ff faa6 	bl	8002fdc <MX_CAN2_Init>
  MX_TIM5_Init();
 8003a90:	f000 fcde 	bl	8004450 <MX_TIM5_Init>
  MX_TIM10_Init();
 8003a94:	f000 fd4c 	bl	8004530 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8003a98:	f000 fed8 	bl	800484c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003a9c:	f000 ff00 	bl	80048a0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003aa0:	f000 ff2a 	bl	80048f8 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8003aa4:	f000 f8cc 	bl	8003c40 <MX_SPI1_Init>
  MX_I2C3_Init();
 8003aa8:	f7ff fee0 	bl	800386c <MX_I2C3_Init>
  MX_ADC3_Init();
 8003aac:	f7ff f9ca 	bl	8002e44 <MX_ADC3_Init>
  MX_TIM3_Init();
 8003ab0:	f000 fc02 	bl	80042b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003ab4:	f000 fc72 	bl	800439c <MX_TIM4_Init>
  MX_TIM1_Init();
 8003ab8:	f000 fb6e 	bl	8004198 <MX_TIM1_Init>
  MX_RNG_Init();
 8003abc:	f000 f88a 	bl	8003bd4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 8003ac0:	f009 f915 	bl	800ccee <startup_task>
  HAL_TIM_Base_Start(&htim3); //start micros clock
 8003ac4:	4803      	ldr	r0, [pc, #12]	; (8003ad4 <main+0x60>)
 8003ac6:	f010 fe89 	bl	80147dc <HAL_TIM_Base_Start>
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003aca:	f7ff fc31 	bl	8003330 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003ace:	f016 fceb 	bl	801a4a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ad2:	e7fe      	b.n	8003ad2 <main+0x5e>
 8003ad4:	20001530 	.word	0x20001530

08003ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b094      	sub	sp, #80	; 0x50
 8003adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ade:	f107 0320 	add.w	r3, r7, #32
 8003ae2:	2230      	movs	r2, #48	; 0x30
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f01a fd43 	bl	801e572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <SystemClock_Config+0xcc>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <SystemClock_Config+0xcc>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <SystemClock_Config+0xcc>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <SystemClock_Config+0xd0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <SystemClock_Config+0xd0>)
 8003b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <SystemClock_Config+0xd0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003b48:	2306      	movs	r3, #6
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b4c:	23a8      	movs	r3, #168	; 0xa8
 8003b4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b50:	2302      	movs	r3, #2
 8003b52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b54:	2307      	movs	r3, #7
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b58:	f107 0320 	add.w	r3, r7, #32
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f00f fccd 	bl	80134fc <HAL_RCC_OscConfig>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003b68:	f000 f82f 	bl	8003bca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b6c:	230f      	movs	r3, #15
 8003b6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b70:	2302      	movs	r3, #2
 8003b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	2105      	movs	r1, #5
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f00f ff2e 	bl	80139ec <HAL_RCC_ClockConfig>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003b96:	f000 f818 	bl	8003bca <Error_Handler>
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3750      	adds	r7, #80	; 0x50
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40007000 	.word	0x40007000

08003bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003bbe:	f00a fca9 	bl	800e514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003bce:	b672      	cpsid	i
}
 8003bd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <Error_Handler+0x8>

08003bd4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <MX_RNG_Init+0x20>)
 8003bda:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <MX_RNG_Init+0x24>)
 8003bdc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003bde:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <MX_RNG_Init+0x20>)
 8003be0:	f010 f916 	bl	8013e10 <HAL_RNG_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003bea:	f7ff ffee 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20001378 	.word	0x20001378
 8003bf8:	50060800 	.word	0x50060800

08003bfc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <HAL_RNG_MspInit+0x3c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10d      	bne.n	8003c2a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RNG_MspInit+0x40>)
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_RNG_MspInit+0x40>)
 8003c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c1c:	6353      	str	r3, [r2, #52]	; 0x34
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <HAL_RNG_MspInit+0x40>)
 8003c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	50060800 	.word	0x50060800
 8003c3c:	40023800 	.word	0x40023800

08003c40 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003c44:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <MX_SPI1_Init+0x68>)
 8003c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c74:	2228      	movs	r2, #40	; 0x28
 8003c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c8c:	220a      	movs	r2, #10
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c90:	4804      	ldr	r0, [pc, #16]	; (8003ca4 <MX_SPI1_Init+0x64>)
 8003c92:	f010 f8e7 	bl	8013e64 <HAL_SPI_Init>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c9c:	f7ff ff95 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20001388 	.word	0x20001388
 8003ca8:	40013000 	.word	0x40013000

08003cac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a56      	ldr	r2, [pc, #344]	; (8003e24 <HAL_SPI_MspInit+0x178>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	f040 80a6 	bne.w	8003e1c <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	4b54      	ldr	r3, [pc, #336]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	4a53      	ldr	r2, [pc, #332]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003cda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cde:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce0:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	4b4d      	ldr	r3, [pc, #308]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4a4c      	ldr	r2, [pc, #304]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfc:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	4b46      	ldr	r3, [pc, #280]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	4a45      	ldr	r2, [pc, #276]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6313      	str	r3, [r2, #48]	; 0x30
 8003d18:	4b43      	ldr	r3, [pc, #268]	; (8003e28 <HAL_SPI_MspInit+0x17c>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003d24:	2318      	movs	r3, #24
 8003d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d30:	2303      	movs	r3, #3
 8003d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d34:	2305      	movs	r3, #5
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	483b      	ldr	r0, [pc, #236]	; (8003e2c <HAL_SPI_MspInit+0x180>)
 8003d40:	f00c f9fe 	bl	8010140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d50:	2303      	movs	r3, #3
 8003d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d54:	2305      	movs	r3, #5
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4834      	ldr	r0, [pc, #208]	; (8003e30 <HAL_SPI_MspInit+0x184>)
 8003d60:	f00c f9ee 	bl	8010140 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003d64:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d66:	4a34      	ldr	r2, [pc, #208]	; (8003e38 <HAL_SPI_MspInit+0x18c>)
 8003d68:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003d6a:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003d70:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d78:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7e:	4b2d      	ldr	r3, [pc, #180]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d84:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d86:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d8c:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d98:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d9e:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003da4:	4823      	ldr	r0, [pc, #140]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003da6:	f00b fdbd 	bl	800f924 <HAL_DMA_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8003db0:	f7ff ff0b 	bl	8003bca <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003db8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_SPI_MspInit+0x188>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_SPI_MspInit+0x194>)
 8003dc4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003dc8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003dcc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dce:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dda:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003de0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003de2:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003de8:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003e00:	480e      	ldr	r0, [pc, #56]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003e02:	f00b fd8f 	bl	800f924 <HAL_DMA_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003e0c:	f7ff fedd 	bl	8003bca <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003e14:	649a      	str	r2, [r3, #72]	; 0x48
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <HAL_SPI_MspInit+0x190>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	3728      	adds	r7, #40	; 0x28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40013000 	.word	0x40013000
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40020400 	.word	0x40020400
 8003e30:	40020000 	.word	0x40020000
 8003e34:	200013e0 	.word	0x200013e0
 8003e38:	40026410 	.word	0x40026410
 8003e3c:	20001440 	.word	0x20001440
 8003e40:	40026458 	.word	0x40026458

08003e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_MspInit+0x54>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <HAL_MspInit+0x54>)
 8003e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e58:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_MspInit+0x54>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_MspInit+0x54>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <HAL_MspInit+0x54>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_MspInit+0x54>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	210f      	movs	r1, #15
 8003e86:	f06f 0001 	mvn.w	r0, #1
 8003e8a:	f00b fd21 	bl	800f8d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800

08003e9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08e      	sub	sp, #56	; 0x38
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <HAL_InitTick+0xe8>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <HAL_InitTick+0xe8>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebc:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <HAL_InitTick+0xe8>)
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ec8:	f107 0210 	add.w	r2, r7, #16
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f00f ff6a 	bl	8013dac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ee2:	f00f ff3b 	bl	8013d5c <HAL_RCC_GetPCLK1Freq>
 8003ee6:	6378      	str	r0, [r7, #52]	; 0x34
 8003ee8:	e004      	b.n	8003ef4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003eea:	f00f ff37 	bl	8013d5c <HAL_RCC_GetPCLK1Freq>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	4a24      	ldr	r2, [pc, #144]	; (8003f88 <HAL_InitTick+0xec>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	0c9b      	lsrs	r3, r3, #18
 8003efe:	3b01      	subs	r3, #1
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f10:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003f18:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f1e:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003f2a:	4818      	ldr	r0, [pc, #96]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f2c:	f010 fc06 	bl	801473c <HAL_TIM_Base_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11b      	bne.n	8003f76 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003f3e:	4813      	ldr	r0, [pc, #76]	; (8003f8c <HAL_InitTick+0xf0>)
 8003f40:	f010 fcb4 	bl	80148ac <HAL_TIM_Base_Start_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d111      	bne.n	8003f76 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f52:	201c      	movs	r0, #28
 8003f54:	f00b fcd8 	bl	800f908 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d808      	bhi.n	8003f70 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	201c      	movs	r0, #28
 8003f64:	f00b fcb4 	bl	800f8d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <HAL_InitTick+0xf4>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e002      	b.n	8003f76 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3738      	adds	r7, #56	; 0x38
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	431bde83 	.word	0x431bde83
 8003f8c:	200014a0 	.word	0x200014a0
 8003f90:	2000004c 	.word	0x2000004c

08003f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f98:	e7fe      	b.n	8003f98 <NMI_Handler+0x4>

08003f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f9e:	e7fe      	b.n	8003f9e <HardFault_Handler+0x4>

08003fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fa4:	e7fe      	b.n	8003fa4 <MemManage_Handler+0x4>

08003fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003faa:	e7fe      	b.n	8003faa <BusFault_Handler+0x4>

08003fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fb0:	e7fe      	b.n	8003fb0 <UsageFault_Handler+0x4>

08003fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003fc4:	2008      	movs	r0, #8
 8003fc6:	f00c fa71 	bl	80104ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003fd2:	2010      	movs	r0, #16
 8003fd4:	f00c fa6a 	bl	80104ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003fe0:	4802      	ldr	r0, [pc, #8]	; (8003fec <DMA1_Stream1_IRQHandler+0x10>)
 8003fe2:	f00b fe37 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000177c 	.word	0x2000177c

08003ff0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <DMA1_Stream2_IRQHandler+0x10>)
 8003ff6:	f00b fe2d 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200012b8 	.word	0x200012b8

08004004 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <DMA1_Stream4_IRQHandler+0x10>)
 800400a:	f00b fe23 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20001318 	.word	0x20001318

08004018 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800401c:	4802      	ldr	r0, [pc, #8]	; (8004028 <CAN1_RX0_IRQHandler+0x10>)
 800401e:	f00b f979 	bl	800f314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	2000042c 	.word	0x2000042c

0800402c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <CAN1_RX1_IRQHandler+0x10>)
 8004032:	f00b f96f 	bl	800f314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	2000042c 	.word	0x2000042c

08004040 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8004044:	2020      	movs	r0, #32
 8004046:	f00c fa31 	bl	80104ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <TIM2_IRQHandler+0x10>)
 8004056:	f010 fe09 	bl	8014c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200014a0 	.word	0x200014a0

08004064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004068:	4803      	ldr	r0, [pc, #12]	; (8004078 <TIM3_IRQHandler+0x14>)
 800406a:	f010 fdff 	bl	8014c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 800406e:	f7fe f8cd 	bl	800220c <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20001530 	.word	0x20001530

0800407c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004080:	4802      	ldr	r0, [pc, #8]	; (800408c <USART1_IRQHandler+0x10>)
 8004082:	f011 fe8b 	bl	8015d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20001650 	.word	0x20001650

08004090 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <USART3_IRQHandler+0x10>)
 8004096:	f011 fe81 	bl	8015d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20001694 	.word	0x20001694

080040a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <DMA2_Stream0_IRQHandler+0x10>)
 80040aa:	f00b fdd3 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200013e0 	.word	0x200013e0

080040b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <DMA2_Stream1_IRQHandler+0x10>)
 80040be:	f00b fdc9 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200017dc 	.word	0x200017dc

080040cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <DMA2_Stream3_IRQHandler+0x10>)
 80040d2:	f00b fdbf 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20001440 	.word	0x20001440

080040e0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <CAN2_RX0_IRQHandler+0x10>)
 80040e6:	f00b f915 	bl	800f314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000454 	.word	0x20000454

080040f4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <CAN2_RX1_IRQHandler+0x10>)
 80040fa:	f00b f90b 	bl	800f314 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000454 	.word	0x20000454

08004108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800410c:	4802      	ldr	r0, [pc, #8]	; (8004118 <OTG_FS_IRQHandler+0x10>)
 800410e:	f00e f8c8 	bl	80122a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000ed64 	.word	0x2000ed64

0800411c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004120:	4802      	ldr	r0, [pc, #8]	; (800412c <DMA2_Stream5_IRQHandler+0x10>)
 8004122:	f00b fd97 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000171c 	.word	0x2000171c

08004130 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <DMA2_Stream6_IRQHandler+0x10>)
 8004136:	f00b fd8d 	bl	800fc54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000183c 	.word	0x2000183c

08004144 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004148:	4802      	ldr	r0, [pc, #8]	; (8004154 <USART6_IRQHandler+0x10>)
 800414a:	f011 fe27 	bl	8015d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200016d8 	.word	0x200016d8

08004158 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <I2C3_ER_IRQHandler+0x10>)
 800415e:	f00c ffb5 	bl	80110cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20001264 	.word	0x20001264

0800416c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <SystemInit+0x28>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <SystemInit+0x28>)
 8004178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800417c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <SystemInit+0x28>)
 8004182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004186:	609a      	str	r2, [r3, #8]
#endif
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b092      	sub	sp, #72	; 0x48
 800419c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800419e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
 80041b8:	615a      	str	r2, [r3, #20]
 80041ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	2220      	movs	r2, #32
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f01a f9d5 	bl	801e572 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041c8:	4b39      	ldr	r3, [pc, #228]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041ca:	4a3a      	ldr	r2, [pc, #232]	; (80042b4 <MX_TIM1_Init+0x11c>)
 80041cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80041ce:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041d0:	22a7      	movs	r2, #167	; 0xa7
 80041d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d4:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80041e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041e2:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041e8:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80041f4:	482e      	ldr	r0, [pc, #184]	; (80042b0 <MX_TIM1_Init+0x118>)
 80041f6:	f010 fc22 	bl	8014a3e <HAL_TIM_PWM_Init>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004200:	f7ff fce3 	bl	8003bca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004204:	2300      	movs	r3, #0
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004208:	2300      	movs	r3, #0
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800420c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004210:	4619      	mov	r1, r3
 8004212:	4827      	ldr	r0, [pc, #156]	; (80042b0 <MX_TIM1_Init+0x118>)
 8004214:	f011 fb50 	bl	80158b8 <HAL_TIMEx_MasterConfigSynchronization>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800421e:	f7ff fcd4 	bl	8003bca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004222:	2360      	movs	r3, #96	; 0x60
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800422a:	2300      	movs	r3, #0
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800422e:	2300      	movs	r3, #0
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800423e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004242:	2200      	movs	r2, #0
 8004244:	4619      	mov	r1, r3
 8004246:	481a      	ldr	r0, [pc, #104]	; (80042b0 <MX_TIM1_Init+0x118>)
 8004248:	f010 fe74 	bl	8014f34 <HAL_TIM_PWM_ConfigChannel>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004252:	f7ff fcba 	bl	8003bca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425a:	2204      	movs	r2, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4814      	ldr	r0, [pc, #80]	; (80042b0 <MX_TIM1_Init+0x118>)
 8004260:	f010 fe68 	bl	8014f34 <HAL_TIM_PWM_ConfigChannel>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800426a:	f7ff fcae 	bl	8003bca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004286:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4807      	ldr	r0, [pc, #28]	; (80042b0 <MX_TIM1_Init+0x118>)
 8004292:	f011 fb8d 	bl	80159b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800429c:	f7ff fc95 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042a0:	4803      	ldr	r0, [pc, #12]	; (80042b0 <MX_TIM1_Init+0x118>)
 80042a2:	f000 fa1f 	bl	80046e4 <HAL_TIM_MspPostInit>

}
 80042a6:	bf00      	nop
 80042a8:	3748      	adds	r7, #72	; 0x48
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200014e8 	.word	0x200014e8
 80042b4:	40010000 	.word	0x40010000

080042b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042cc:	f107 0320 	add.w	r3, r7, #32
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
 80042e4:	615a      	str	r2, [r3, #20]
 80042e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <MX_TIM3_Init+0xdc>)
 80042ea:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <MX_TIM3_Init+0xe0>)
 80042ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80042ee:	4b29      	ldr	r3, [pc, #164]	; (8004394 <MX_TIM3_Init+0xdc>)
 80042f0:	22a7      	movs	r2, #167	; 0xa7
 80042f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <MX_TIM3_Init+0xdc>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80042fa:	4b26      	ldr	r3, [pc, #152]	; (8004394 <MX_TIM3_Init+0xdc>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b24      	ldr	r3, [pc, #144]	; (8004394 <MX_TIM3_Init+0xdc>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <MX_TIM3_Init+0xdc>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800430c:	4821      	ldr	r0, [pc, #132]	; (8004394 <MX_TIM3_Init+0xdc>)
 800430e:	f010 fa15 	bl	801473c <HAL_TIM_Base_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8004318:	f7ff fc57 	bl	8003bca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800431c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004326:	4619      	mov	r1, r3
 8004328:	481a      	ldr	r0, [pc, #104]	; (8004394 <MX_TIM3_Init+0xdc>)
 800432a:	f010 fec5 	bl	80150b8 <HAL_TIM_ConfigClockSource>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004334:	f7ff fc49 	bl	8003bca <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004338:	4816      	ldr	r0, [pc, #88]	; (8004394 <MX_TIM3_Init+0xdc>)
 800433a:	f010 fb27 	bl	801498c <HAL_TIM_OC_Init>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004344:	f7ff fc41 	bl	8003bca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004348:	2300      	movs	r3, #0
 800434a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	4619      	mov	r1, r3
 8004356:	480f      	ldr	r0, [pc, #60]	; (8004394 <MX_TIM3_Init+0xdc>)
 8004358:	f011 faae 	bl	80158b8 <HAL_TIMEx_MasterConfigSynchronization>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004362:	f7ff fc32 	bl	8003bca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	2200      	movs	r2, #0
 800437a:	4619      	mov	r1, r3
 800437c:	4805      	ldr	r0, [pc, #20]	; (8004394 <MX_TIM3_Init+0xdc>)
 800437e:	f010 fd7d 	bl	8014e7c <HAL_TIM_OC_ConfigChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8004388:	f7ff fc1f 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800438c:	bf00      	nop
 800438e:	3738      	adds	r7, #56	; 0x38
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20001530 	.word	0x20001530
 8004398:	40000400 	.word	0x40000400

0800439c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a2:	f107 0320 	add.w	r3, r7, #32
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ac:	1d3b      	adds	r3, r7, #4
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	60da      	str	r2, [r3, #12]
 80043b8:	611a      	str	r2, [r3, #16]
 80043ba:	615a      	str	r2, [r3, #20]
 80043bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <MX_TIM4_Init+0xac>)
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <MX_TIM4_Init+0xb0>)
 80043c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <MX_TIM4_Init+0xac>)
 80043c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043cc:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <MX_TIM4_Init+0xac>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80043d2:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <MX_TIM4_Init+0xac>)
 80043d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043da:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <MX_TIM4_Init+0xac>)
 80043dc:	2200      	movs	r2, #0
 80043de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <MX_TIM4_Init+0xac>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80043e6:	4818      	ldr	r0, [pc, #96]	; (8004448 <MX_TIM4_Init+0xac>)
 80043e8:	f010 fb29 	bl	8014a3e <HAL_TIM_PWM_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80043f2:	f7ff fbea 	bl	8003bca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043fe:	f107 0320 	add.w	r3, r7, #32
 8004402:	4619      	mov	r1, r3
 8004404:	4810      	ldr	r0, [pc, #64]	; (8004448 <MX_TIM4_Init+0xac>)
 8004406:	f011 fa57 	bl	80158b8 <HAL_TIMEx_MasterConfigSynchronization>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004410:	f7ff fbdb 	bl	8003bca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004414:	2360      	movs	r3, #96	; 0x60
 8004416:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	2208      	movs	r2, #8
 8004428:	4619      	mov	r1, r3
 800442a:	4807      	ldr	r0, [pc, #28]	; (8004448 <MX_TIM4_Init+0xac>)
 800442c:	f010 fd82 	bl	8014f34 <HAL_TIM_PWM_ConfigChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8004436:	f7ff fbc8 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800443a:	4803      	ldr	r0, [pc, #12]	; (8004448 <MX_TIM4_Init+0xac>)
 800443c:	f000 f952 	bl	80046e4 <HAL_TIM_MspPostInit>

}
 8004440:	bf00      	nop
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20001578 	.word	0x20001578
 800444c:	40000800 	.word	0x40000800

08004450 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004456:	f107 0320 	add.w	r3, r7, #32
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004460:	1d3b      	adds	r3, r7, #4
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	615a      	str	r2, [r3, #20]
 8004470:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004472:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <MX_TIM5_Init+0xd8>)
 8004474:	4a2d      	ldr	r2, [pc, #180]	; (800452c <MX_TIM5_Init+0xdc>)
 8004476:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 8004478:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <MX_TIM5_Init+0xd8>)
 800447a:	f240 5225 	movw	r2, #1317	; 0x525
 800447e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004480:	4b29      	ldr	r3, [pc, #164]	; (8004528 <MX_TIM5_Init+0xd8>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8004486:	4b28      	ldr	r3, [pc, #160]	; (8004528 <MX_TIM5_Init+0xd8>)
 8004488:	22ff      	movs	r2, #255	; 0xff
 800448a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800448c:	4b26      	ldr	r3, [pc, #152]	; (8004528 <MX_TIM5_Init+0xd8>)
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004492:	4b25      	ldr	r3, [pc, #148]	; (8004528 <MX_TIM5_Init+0xd8>)
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004498:	4823      	ldr	r0, [pc, #140]	; (8004528 <MX_TIM5_Init+0xd8>)
 800449a:	f010 fad0 	bl	8014a3e <HAL_TIM_PWM_Init>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80044a4:	f7ff fb91 	bl	8003bca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044a8:	2300      	movs	r3, #0
 80044aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80044b0:	f107 0320 	add.w	r3, r7, #32
 80044b4:	4619      	mov	r1, r3
 80044b6:	481c      	ldr	r0, [pc, #112]	; (8004528 <MX_TIM5_Init+0xd8>)
 80044b8:	f011 f9fe 	bl	80158b8 <HAL_TIMEx_MasterConfigSynchronization>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80044c2:	f7ff fb82 	bl	8003bca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044c6:	2360      	movs	r3, #96	; 0x60
 80044c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80044ce:	2302      	movs	r3, #2
 80044d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80044d2:	2304      	movs	r3, #4
 80044d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	2200      	movs	r2, #0
 80044da:	4619      	mov	r1, r3
 80044dc:	4812      	ldr	r0, [pc, #72]	; (8004528 <MX_TIM5_Init+0xd8>)
 80044de:	f010 fd29 	bl	8014f34 <HAL_TIM_PWM_ConfigChannel>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80044e8:	f7ff fb6f 	bl	8003bca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	2204      	movs	r2, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	480d      	ldr	r0, [pc, #52]	; (8004528 <MX_TIM5_Init+0xd8>)
 80044f4:	f010 fd1e 	bl	8014f34 <HAL_TIM_PWM_ConfigChannel>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80044fe:	f7ff fb64 	bl	8003bca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004502:	1d3b      	adds	r3, r7, #4
 8004504:	2208      	movs	r2, #8
 8004506:	4619      	mov	r1, r3
 8004508:	4807      	ldr	r0, [pc, #28]	; (8004528 <MX_TIM5_Init+0xd8>)
 800450a:	f010 fd13 	bl	8014f34 <HAL_TIM_PWM_ConfigChannel>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8004514:	f7ff fb59 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004518:	4803      	ldr	r0, [pc, #12]	; (8004528 <MX_TIM5_Init+0xd8>)
 800451a:	f000 f8e3 	bl	80046e4 <HAL_TIM_MspPostInit>

}
 800451e:	bf00      	nop
 8004520:	3728      	adds	r7, #40	; 0x28
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200015c0 	.word	0x200015c0
 800452c:	40000c00 	.word	0x40000c00

08004530 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	611a      	str	r2, [r3, #16]
 8004544:	615a      	str	r2, [r3, #20]
 8004546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <MX_TIM10_Init+0x94>)
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <MX_TIM10_Init+0x98>)
 800454c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <MX_TIM10_Init+0x94>)
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <MX_TIM10_Init+0x94>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <MX_TIM10_Init+0x94>)
 800455c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004560:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <MX_TIM10_Init+0x94>)
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <MX_TIM10_Init+0x94>)
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800456e:	4815      	ldr	r0, [pc, #84]	; (80045c4 <MX_TIM10_Init+0x94>)
 8004570:	f010 f8e4 	bl	801473c <HAL_TIM_Base_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800457a:	f7ff fb26 	bl	8003bca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800457e:	4811      	ldr	r0, [pc, #68]	; (80045c4 <MX_TIM10_Init+0x94>)
 8004580:	f010 fa5d 	bl	8014a3e <HAL_TIM_PWM_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800458a:	f7ff fb1e 	bl	8003bca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800458e:	2360      	movs	r3, #96	; 0x60
 8004590:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	2200      	movs	r2, #0
 80045a2:	4619      	mov	r1, r3
 80045a4:	4807      	ldr	r0, [pc, #28]	; (80045c4 <MX_TIM10_Init+0x94>)
 80045a6:	f010 fcc5 	bl	8014f34 <HAL_TIM_PWM_ConfigChannel>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80045b0:	f7ff fb0b 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80045b4:	4803      	ldr	r0, [pc, #12]	; (80045c4 <MX_TIM10_Init+0x94>)
 80045b6:	f000 f895 	bl	80046e4 <HAL_TIM_MspPostInit>

}
 80045ba:	bf00      	nop
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20001608 	.word	0x20001608
 80045c8:	40014400 	.word	0x40014400

080045cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <HAL_TIM_PWM_MspInit+0x8c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6453      	str	r3, [r2, #68]	; 0x44
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80045fa:	e026      	b.n	800464a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_TIM_PWM_MspInit+0x94>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a13      	ldr	r2, [pc, #76]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 8004610:	f043 0304 	orr.w	r3, r3, #4
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
}
 8004622:	e012      	b.n	800464a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <HAL_TIM_PWM_MspInit+0x98>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10d      	bne.n	800464a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	6413      	str	r3, [r2, #64]	; 0x40
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <HAL_TIM_PWM_MspInit+0x90>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40023800 	.word	0x40023800
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00

08004668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_TIM_Base_MspInit+0x70>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d116      	bne.n	80046a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <HAL_TIM_Base_MspInit+0x74>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_TIM_Base_MspInit+0x74>)
 8004684:	f043 0302 	orr.w	r3, r3, #2
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_TIM_Base_MspInit+0x74>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004696:	2200      	movs	r2, #0
 8004698:	2105      	movs	r1, #5
 800469a:	201d      	movs	r0, #29
 800469c:	f00b f918 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046a0:	201d      	movs	r0, #29
 80046a2:	f00b f931 	bl	800f908 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80046a6:	e012      	b.n	80046ce <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0c      	ldr	r2, [pc, #48]	; (80046e0 <HAL_TIM_Base_MspInit+0x78>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10d      	bne.n	80046ce <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_TIM_Base_MspInit+0x74>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <HAL_TIM_Base_MspInit+0x74>)
 80046bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c0:	6453      	str	r3, [r2, #68]	; 0x44
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_TIM_Base_MspInit+0x74>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40014400 	.word	0x40014400

080046e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	; 0x30
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ec:	f107 031c 	add.w	r3, r7, #28
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a49      	ldr	r2, [pc, #292]	; (8004828 <HAL_TIM_MspPostInit+0x144>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d11f      	bne.n	8004746 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	4a47      	ldr	r2, [pc, #284]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 8004710:	f043 0310 	orr.w	r3, r3, #16
 8004714:	6313      	str	r3, [r2, #48]	; 0x30
 8004716:	4b45      	ldr	r3, [pc, #276]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004722:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004728:	2302      	movs	r3, #2
 800472a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	2300      	movs	r3, #0
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004730:	2300      	movs	r3, #0
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004734:	2301      	movs	r3, #1
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004738:	f107 031c 	add.w	r3, r7, #28
 800473c:	4619      	mov	r1, r3
 800473e:	483c      	ldr	r0, [pc, #240]	; (8004830 <HAL_TIM_MspPostInit+0x14c>)
 8004740:	f00b fcfe 	bl	8010140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004744:	e06c      	b.n	8004820 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a3a      	ldr	r2, [pc, #232]	; (8004834 <HAL_TIM_MspPostInit+0x150>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d11f      	bne.n	8004790 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	4b35      	ldr	r3, [pc, #212]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	4a34      	ldr	r2, [pc, #208]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	6313      	str	r3, [r2, #48]	; 0x30
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800476c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	2302      	movs	r3, #2
 8004774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477a:	2300      	movs	r3, #0
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800477e:	2302      	movs	r3, #2
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004782:	f107 031c 	add.w	r3, r7, #28
 8004786:	4619      	mov	r1, r3
 8004788:	482b      	ldr	r0, [pc, #172]	; (8004838 <HAL_TIM_MspPostInit+0x154>)
 800478a:	f00b fcd9 	bl	8010140 <HAL_GPIO_Init>
}
 800478e:	e047      	b.n	8004820 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM5)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a29      	ldr	r2, [pc, #164]	; (800483c <HAL_TIM_MspPostInit+0x158>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d11f      	bne.n	80047da <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	4b23      	ldr	r3, [pc, #140]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 80047b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80047ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80047c8:	2302      	movs	r3, #2
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80047cc:	f107 031c 	add.w	r3, r7, #28
 80047d0:	4619      	mov	r1, r3
 80047d2:	481b      	ldr	r0, [pc, #108]	; (8004840 <HAL_TIM_MspPostInit+0x15c>)
 80047d4:	f00b fcb4 	bl	8010140 <HAL_GPIO_Init>
}
 80047d8:	e022      	b.n	8004820 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a19      	ldr	r2, [pc, #100]	; (8004844 <HAL_TIM_MspPostInit+0x160>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d11d      	bne.n	8004820 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	4a0f      	ldr	r2, [pc, #60]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 80047ee:	f043 0320 	orr.w	r3, r3, #32
 80047f2:	6313      	str	r3, [r2, #48]	; 0x30
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <HAL_TIM_MspPostInit+0x148>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 8004800:	2340      	movs	r3, #64	; 0x40
 8004802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004804:	2302      	movs	r3, #2
 8004806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004808:	2300      	movs	r3, #0
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480c:	2300      	movs	r3, #0
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004810:	2303      	movs	r3, #3
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 8004814:	f107 031c 	add.w	r3, r7, #28
 8004818:	4619      	mov	r1, r3
 800481a:	480b      	ldr	r0, [pc, #44]	; (8004848 <HAL_TIM_MspPostInit+0x164>)
 800481c:	f00b fc90 	bl	8010140 <HAL_GPIO_Init>
}
 8004820:	bf00      	nop
 8004822:	3730      	adds	r7, #48	; 0x30
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40010000 	.word	0x40010000
 800482c:	40023800 	.word	0x40023800
 8004830:	40021000 	.word	0x40021000
 8004834:	40000800 	.word	0x40000800
 8004838:	40020c00 	.word	0x40020c00
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40021c00 	.word	0x40021c00
 8004844:	40014400 	.word	0x40014400
 8004848:	40021400 	.word	0x40021400

0800484c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004852:	4a12      	ldr	r2, [pc, #72]	; (800489c <MX_USART1_UART_Init+0x50>)
 8004854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800485c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004860:	2200      	movs	r2, #0
 8004862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004866:	2200      	movs	r2, #0
 8004868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 800486c:	2200      	movs	r2, #0
 800486e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004872:	220c      	movs	r2, #12
 8004874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004878:	2200      	movs	r2, #0
 800487a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 800487e:	2200      	movs	r2, #0
 8004880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004882:	4805      	ldr	r0, [pc, #20]	; (8004898 <MX_USART1_UART_Init+0x4c>)
 8004884:	f011 f8fa 	bl	8015a7c <HAL_UART_Init>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800488e:	f7ff f99c 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20001650 	.word	0x20001650
 800489c:	40011000 	.word	0x40011000

080048a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <MX_USART3_UART_Init+0x50>)
 80048a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048ac:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <MX_USART3_UART_Init+0x54>)
 80048ae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80048b0:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048c4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048c8:	220c      	movs	r2, #12
 80048ca:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d2:	4b06      	ldr	r3, [pc, #24]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048d8:	4804      	ldr	r0, [pc, #16]	; (80048ec <MX_USART3_UART_Init+0x4c>)
 80048da:	f011 f8cf 	bl	8015a7c <HAL_UART_Init>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 80048e4:	f7ff f971 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80048e8:	bf00      	nop
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20001694 	.word	0x20001694
 80048f0:	40004800 	.word	0x40004800
 80048f4:	000186a0 	.word	0x000186a0

080048f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <MX_USART6_UART_Init+0x50>)
 8004900:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 8004904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004908:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 8004918:	2200      	movs	r2, #0
 800491a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 800491e:	220c      	movs	r2, #12
 8004920:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 800492a:	2200      	movs	r2, #0
 800492c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800492e:	4805      	ldr	r0, [pc, #20]	; (8004944 <MX_USART6_UART_Init+0x4c>)
 8004930:	f011 f8a4 	bl	8015a7c <HAL_UART_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800493a:	f7ff f946 	bl	8003bca <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200016d8 	.word	0x200016d8
 8004948:	40011400 	.word	0x40011400

0800494c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08e      	sub	sp, #56	; 0x38
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a78      	ldr	r2, [pc, #480]	; (8004b4c <HAL_UART_MspInit+0x200>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f040 8083 	bne.w	8004a76 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	4b76      	ldr	r3, [pc, #472]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	4a75      	ldr	r2, [pc, #468]	; (8004b50 <HAL_UART_MspInit+0x204>)
 800497a:	f043 0310 	orr.w	r3, r3, #16
 800497e:	6453      	str	r3, [r2, #68]	; 0x44
 8004980:	4b73      	ldr	r3, [pc, #460]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	4b6f      	ldr	r3, [pc, #444]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	4a6e      	ldr	r2, [pc, #440]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	6313      	str	r3, [r2, #48]	; 0x30
 800499c:	4b6c      	ldr	r3, [pc, #432]	; (8004b50 <HAL_UART_MspInit+0x204>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	4b68      	ldr	r3, [pc, #416]	; (8004b50 <HAL_UART_MspInit+0x204>)
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	4a67      	ldr	r2, [pc, #412]	; (8004b50 <HAL_UART_MspInit+0x204>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6313      	str	r3, [r2, #48]	; 0x30
 80049b8:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_UART_MspInit+0x204>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c8:	2302      	movs	r3, #2
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d0:	2303      	movs	r3, #3
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049d4:	2307      	movs	r3, #7
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049dc:	4619      	mov	r1, r3
 80049de:	485d      	ldr	r0, [pc, #372]	; (8004b54 <HAL_UART_MspInit+0x208>)
 80049e0:	f00b fbae 	bl	8010140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80049e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f2:	2303      	movs	r3, #3
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049f6:	2307      	movs	r3, #7
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049fe:	4619      	mov	r1, r3
 8004a00:	4855      	ldr	r0, [pc, #340]	; (8004b58 <HAL_UART_MspInit+0x20c>)
 8004a02:	f00b fb9d 	bl	8010140 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8004a06:	4b55      	ldr	r3, [pc, #340]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a08:	4a55      	ldr	r2, [pc, #340]	; (8004b60 <HAL_UART_MspInit+0x214>)
 8004a0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a12:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a14:	4b51      	ldr	r3, [pc, #324]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a1a:	4b50      	ldr	r3, [pc, #320]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a20:	4b4e      	ldr	r3, [pc, #312]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a26:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a28:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a2e:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004a34:	4b49      	ldr	r3, [pc, #292]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a3c:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a42:	4b46      	ldr	r3, [pc, #280]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a48:	4844      	ldr	r0, [pc, #272]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a4a:	f00a ff6b 	bl	800f924 <HAL_DMA_Init>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004a54:	f7ff f8b9 	bl	8003bca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a40      	ldr	r2, [pc, #256]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <HAL_UART_MspInit+0x210>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004a64:	2200      	movs	r2, #0
 8004a66:	2105      	movs	r1, #5
 8004a68:	2025      	movs	r0, #37	; 0x25
 8004a6a:	f00a ff31 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a6e:	2025      	movs	r0, #37	; 0x25
 8004a70:	f00a ff4a 	bl	800f908 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004a74:	e116      	b.n	8004ca4 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <HAL_UART_MspInit+0x218>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d179      	bne.n	8004b74 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	4a31      	ldr	r2, [pc, #196]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a90:	4b2f      	ldr	r3, [pc, #188]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004aa6:	f043 0304 	orr.w	r3, r3, #4
 8004aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8004aac:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_UART_MspInit+0x204>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004ab8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004aca:	2307      	movs	r3, #7
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4824      	ldr	r0, [pc, #144]	; (8004b68 <HAL_UART_MspInit+0x21c>)
 8004ad6:	f00b fb33 	bl	8010140 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004adc:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <HAL_UART_MspInit+0x224>)
 8004ade:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004ae0:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004ae2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ae6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ae8:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aee:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004afa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004b08:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b0e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b10:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004b1c:	4813      	ldr	r0, [pc, #76]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004b1e:	f00a ff01 	bl	800f924 <HAL_DMA_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8004b28:	f7ff f84f 	bl	8003bca <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a0f      	ldr	r2, [pc, #60]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_UART_MspInit+0x220>)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2105      	movs	r1, #5
 8004b3c:	2027      	movs	r0, #39	; 0x27
 8004b3e:	f00a fec7 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b42:	2027      	movs	r0, #39	; 0x27
 8004b44:	f00a fee0 	bl	800f908 <HAL_NVIC_EnableIRQ>
}
 8004b48:	e0ac      	b.n	8004ca4 <HAL_UART_MspInit+0x358>
 8004b4a:	bf00      	nop
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40020400 	.word	0x40020400
 8004b58:	40020000 	.word	0x40020000
 8004b5c:	2000171c 	.word	0x2000171c
 8004b60:	40026488 	.word	0x40026488
 8004b64:	40004800 	.word	0x40004800
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	2000177c 	.word	0x2000177c
 8004b70:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a4c      	ldr	r2, [pc, #304]	; (8004cac <HAL_UART_MspInit+0x360>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f040 8092 	bne.w	8004ca4 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	4b4a      	ldr	r3, [pc, #296]	; (8004cb0 <HAL_UART_MspInit+0x364>)
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	4a49      	ldr	r2, [pc, #292]	; (8004cb0 <HAL_UART_MspInit+0x364>)
 8004b8a:	f043 0320 	orr.w	r3, r3, #32
 8004b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8004b90:	4b47      	ldr	r3, [pc, #284]	; (8004cb0 <HAL_UART_MspInit+0x364>)
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <HAL_UART_MspInit+0x364>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	4a42      	ldr	r2, [pc, #264]	; (8004cb0 <HAL_UART_MspInit+0x364>)
 8004ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004baa:	6313      	str	r3, [r2, #48]	; 0x30
 8004bac:	4b40      	ldr	r3, [pc, #256]	; (8004cb0 <HAL_UART_MspInit+0x364>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004bb8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004bca:	2308      	movs	r3, #8
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4837      	ldr	r0, [pc, #220]	; (8004cb4 <HAL_UART_MspInit+0x368>)
 8004bd6:	f00b fab3 	bl	8010140 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004bda:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004bdc:	4a37      	ldr	r2, [pc, #220]	; (8004cbc <HAL_UART_MspInit+0x370>)
 8004bde:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004be0:	4b35      	ldr	r3, [pc, #212]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004be2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004be6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004be8:	4b33      	ldr	r3, [pc, #204]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bee:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bfa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c02:	4b2d      	ldr	r3, [pc, #180]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004c08:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c0e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c16:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004c1c:	4826      	ldr	r0, [pc, #152]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004c1e:	f00a fe81 	bl	800f924 <HAL_DMA_Init>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8004c28:	f7fe ffcf 	bl	8003bca <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
 8004c32:	4a21      	ldr	r2, [pc, #132]	; (8004cb8 <HAL_UART_MspInit+0x36c>)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004c38:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c3a:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <HAL_UART_MspInit+0x378>)
 8004c3c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004c3e:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c40:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004c44:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c46:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c48:	2240      	movs	r2, #64	; 0x40
 8004c4a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4c:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c52:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c58:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c5a:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c60:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004c78:	4811      	ldr	r0, [pc, #68]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c7a:	f00a fe53 	bl	800f924 <HAL_DMA_Init>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8004c84:	f7fe ffa1 	bl	8003bca <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <HAL_UART_MspInit+0x374>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004c94:	2200      	movs	r2, #0
 8004c96:	2105      	movs	r1, #5
 8004c98:	2047      	movs	r0, #71	; 0x47
 8004c9a:	f00a fe19 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004c9e:	2047      	movs	r0, #71	; 0x47
 8004ca0:	f00a fe32 	bl	800f908 <HAL_NVIC_EnableIRQ>
}
 8004ca4:	bf00      	nop
 8004ca6:	3738      	adds	r7, #56	; 0x38
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40011400 	.word	0x40011400
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40021800 	.word	0x40021800
 8004cb8:	200017dc 	.word	0x200017dc
 8004cbc:	40026428 	.word	0x40026428
 8004cc0:	2000183c 	.word	0x2000183c
 8004cc4:	400264a0 	.word	0x400264a0

08004cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
////////////////////////////////////////////////////////////////..
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d00 <LoopFillZerobss+0x14>


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ccc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004cce:	e003      	b.n	8004cd8 <LoopCopyDataInit>

08004cd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004cd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004cd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004cd6:	3104      	adds	r1, #4

08004cd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004cd8:	480b      	ldr	r0, [pc, #44]	; (8004d08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004cdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004cde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ce0:	d3f6      	bcc.n	8004cd0 <CopyDataInit>
  ldr  r2, =_sbss
 8004ce2:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ce4:	e002      	b.n	8004cec <LoopFillZerobss>

08004ce6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ce6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ce8:	f842 3b04 	str.w	r3, [r2], #4

08004cec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004cee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004cf0:	d3f9      	bcc.n	8004ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004cf2:	f7ff fa3b 	bl	800416c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cf6:	f019 fc07 	bl	801e508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cfa:	f7fe febb 	bl	8003a74 <main>
  bx  lr    
 8004cfe:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004d00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004d04:	080265f0 	.word	0x080265f0
  ldr  r0, =_sdata
 8004d08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d0c:	2000031c 	.word	0x2000031c
  ldr  r2, =_sbss
 8004d10:	20000320 	.word	0x20000320
  ldr  r3, = _ebss
 8004d14:	2000f4a4 	.word	0x2000f4a4

08004d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d18:	e7fe      	b.n	8004d18 <ADC_IRQHandler>

08004d1a <PID_Init>:
#include "can_msg_processor.h"
//#include "motors_process.h"
//#include "leg_pos.h"
#include "typedefs.h"

void PID_Init(PID *pid, double kp, double ki, double kd, double min_output, double max_output) {
 8004d1a:	b480      	push	{r7}
 8004d1c:	b08d      	sub	sp, #52	; 0x34
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d22:	ed87 0b08 	vstr	d0, [r7, #32]
 8004d26:	ed87 1b06 	vstr	d1, [r7, #24]
 8004d2a:	ed87 2b04 	vstr	d2, [r7, #16]
 8004d2e:	ed87 3b02 	vstr	d3, [r7, #8]
 8004d32:	ed87 4b00 	vstr	d4, [r7]
    pid->kp = kp;
 8004d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d3c:	e9c1 2300 	strd	r2, r3, [r1]
    pid->ki = ki;
 8004d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d46:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->kd = kd;
 8004d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d50:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->prev_error = 0;
 8004d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->integral = 0;
 8004d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->max_output = max_output;
 8004d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d76:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    pid->min_output = min_output;
 8004d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d80:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8004d84:	bf00      	nop
 8004d86:	3734      	adds	r7, #52	; 0x34
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <PID_Compute>:

double PID_Compute(PID *pid, double setpoint, double measured_value, double dt, double deadzone) {
 8004d90:	b5b0      	push	{r4, r5, r7, lr}
 8004d92:	b090      	sub	sp, #64	; 0x40
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24
 8004d98:	ed87 0b06 	vstr	d0, [r7, #24]
 8004d9c:	ed87 1b04 	vstr	d1, [r7, #16]
 8004da0:	ed87 2b02 	vstr	d2, [r7, #8]
 8004da4:	ed87 3b00 	vstr	d3, [r7]
    double error = setpoint - measured_value;
 8004da8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004db0:	f7fb fa6a 	bl	8000288 <__aeabi_dsub>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if (error < deadzone && error > -deadzone ){
 8004dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004dc4:	f7fb fe8a 	bl	8000adc <__aeabi_dcmplt>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d012      	beq.n	8004df4 <PID_Compute+0x64>
 8004dce:	683c      	ldr	r4, [r7, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	462b      	mov	r3, r5
 8004dda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004dde:	f7fb fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <PID_Compute+0x64>
        error = 0.0;
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    pid->integral += error * dt;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dfe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e02:	f7fb fbf9 	bl	80005f8 <__aeabi_dmul>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb fa3d 	bl	800028c <__adddf3>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e18:	e9c1 2308 	strd	r2, r3, [r1, #32]
    double derivative = (error - pid->prev_error) / dt;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004e22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e26:	f7fb fa2f 	bl	8000288 <__aeabi_dsub>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e36:	f7fb fd09 	bl	800084c <__aeabi_ddiv>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e4c:	f7fb fbd4 	bl	80005f8 <__aeabi_dmul>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e64:	f7fb fbc8 	bl	80005f8 <__aeabi_dmul>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fa0c 	bl	800028c <__adddf3>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e86:	f7fb fbb7 	bl	80005f8 <__aeabi_dmul>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	f7fb f9fb 	bl	800028c <__adddf3>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Clamp the output to the specified max and min limits
    if (output > pid->max_output) {
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004ea4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004ea8:	f7fb fe36 	bl	8000b18 <__aeabi_dcmpgt>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <PID_Compute+0x12e>
        output = pid->max_output;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004eb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004ebc:	e00e      	b.n	8004edc <PID_Compute+0x14c>
    } else if (output < pid->min_output) {
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004ec4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004ec8:	f7fb fe08 	bl	8000adc <__aeabi_dcmplt>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <PID_Compute+0x14c>
        output = pid->min_output;
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004ed8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    pid->prev_error = error;
 8004edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ede:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->output =  output;
 8004ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ee8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004eec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8004ef0:	bf00      	nop
 8004ef2:	eeb0 0a47 	vmov.f32	s0, s14
 8004ef6:	eef0 0a67 	vmov.f32	s1, s15
 8004efa:	3740      	adds	r7, #64	; 0x40
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bdb0      	pop	{r4, r5, r7, pc}

08004f00 <buzzing_task>:
 4, 3, 1, 8
 };
 */

//fun
void buzzing_task(void *argument) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000 / (4 * TEMPO);
 8004f08:	4b81      	ldr	r3, [pc, #516]	; (8005110 <buzzing_task+0x210>)
 8004f0a:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004f0c:	4b81      	ldr	r3, [pc, #516]	; (8005114 <buzzing_task+0x214>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f107 010d 	add.w	r1, r7, #13
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f016 f933 	bl	801b184 <xQueueReceive>
		switch (buzzing_type) {
 8004f1e:	7b7b      	ldrb	r3, [r7, #13]
 8004f20:	2b0a      	cmp	r3, #10
 8004f22:	f200 80e8 	bhi.w	80050f6 <buzzing_task+0x1f6>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <buzzing_task+0x2c>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	08004fe1 	.word	0x08004fe1
 8004f34:	080050f7 	.word	0x080050f7
 8004f38:	08005045 	.word	0x08005045
 8004f3c:	08005013 	.word	0x08005013
 8004f40:	0800507d 	.word	0x0800507d
 8004f44:	080050d7 	.word	0x080050d7
 8004f48:	080050e7 	.word	0x080050e7
 8004f4c:	080050a9 	.word	0x080050a9
 8004f50:	080050b9 	.word	0x080050b9
 8004f54:	080050c9 	.word	0x080050c9
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004f58:	2300      	movs	r3, #0
 8004f5a:	82fb      	strh	r3, [r7, #22]
 8004f5c:	e03c      	b.n	8004fd8 <buzzing_task+0xd8>
				last_wake_time = xTaskGetTickCount();
 8004f5e:	f016 fee7 	bl	801bd30 <xTaskGetTickCount>
 8004f62:	4603      	mov	r3, r0
 8004f64:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 8004f66:	8afb      	ldrh	r3, [r7, #22]
 8004f68:	4a6b      	ldr	r2, [pc, #428]	; (8005118 <buzzing_task+0x218>)
 8004f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc f93c 	bl	80011ec <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8004f74:	8afb      	ldrh	r3, [r7, #22]
 8004f76:	4a69      	ldr	r2, [pc, #420]	; (800511c <buzzing_task+0x21c>)
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	ed93 7a00 	vldr	s14, [r3]
 8004f80:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8c:	ee17 3a90 	vmov	r3, s15
 8004f90:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time * 0.95);
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fb fac5 	bl	8000524 <__aeabi_i2d>
 8004f9a:	a35b      	add	r3, pc, #364	; (adr r3, 8005108 <buzzing_task+0x208>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb fb2a 	bl	80005f8 <__aeabi_dmul>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4619      	mov	r1, r3
 8004fac:	f7fb fdfc 	bl	8000ba8 <__aeabi_d2uiz>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f016 fceb 	bl	801b994 <vTaskDelayUntil>
				buzzer(0);
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f7fc f914 	bl	80011ec <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time);
 8004fc4:	89fa      	ldrh	r2, [r7, #14]
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f016 fce1 	bl	801b994 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004fd2:	8afb      	ldrh	r3, [r7, #22]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	82fb      	strh	r3, [r7, #22]
 8004fd8:	8afb      	ldrh	r3, [r7, #22]
 8004fda:	2b7c      	cmp	r3, #124	; 0x7c
 8004fdc:	d9bf      	bls.n	8004f5e <buzzing_task+0x5e>
			}
			break;
 8004fde:	e08a      	b.n	80050f6 <buzzing_task+0x1f6>
		case ok:
			last_wake_time = xTaskGetTickCount();
 8004fe0:	f016 fea6 	bl	801bd30 <xTaskGetTickCount>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004fe8:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004fec:	f7fc f8fe 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004ff0:	2064      	movs	r0, #100	; 0x64
 8004ff2:	f016 fd4d 	bl	801ba90 <vTaskDelay>
			buzzer(0);
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f7fc f8f8 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004ffc:	2032      	movs	r0, #50	; 0x32
 8004ffe:	f016 fd47 	bl	801ba90 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8005002:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8005006:	f7fc f8f1 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 800500a:	2064      	movs	r0, #100	; 0x64
 800500c:	f016 fd40 	bl	801ba90 <vTaskDelay>
			break;
 8005010:	e071      	b.n	80050f6 <buzzing_task+0x1f6>
//			buzzer(BUZZER_HIGH);
//			vTaskDelay(BUZZ_TIME);
//			buzzer(0);
//			break;
		case control_control:
			last_wake_time = xTaskGetTickCount();
 8005012:	f016 fe8d 	bl	801bd30 <xTaskGetTickCount>
 8005016:	4603      	mov	r3, r0
 8005018:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 800501a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800501e:	f7fc f8e5 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8005022:	2064      	movs	r0, #100	; 0x64
 8005024:	f016 fd34 	bl	801ba90 <vTaskDelay>
			buzzer(0);
 8005028:	2000      	movs	r0, #0
 800502a:	f7fc f8df 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 800502e:	2032      	movs	r0, #50	; 0x32
 8005030:	f016 fd2e 	bl	801ba90 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8005034:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8005038:	f7fc f8d8 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 800503c:	2064      	movs	r0, #100	; 0x64
 800503e:	f016 fd27 	bl	801ba90 <vTaskDelay>
			break;
 8005042:	e058      	b.n	80050f6 <buzzing_task+0x1f6>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 8005044:	f016 fe74 	bl	801bd30 <xTaskGetTickCount>
 8005048:	4603      	mov	r3, r0
 800504a:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 800504c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8005050:	f7fc f8cc 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8005054:	2064      	movs	r0, #100	; 0x64
 8005056:	f016 fd1b 	bl	801ba90 <vTaskDelay>
			buzzer(0);
 800505a:	2000      	movs	r0, #0
 800505c:	f7fc f8c6 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8005060:	2032      	movs	r0, #50	; 0x32
 8005062:	f016 fd15 	bl	801ba90 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8005066:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 800506a:	f7fc f8bf 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 800506e:	2064      	movs	r0, #100	; 0x64
 8005070:	f016 fd0e 	bl	801ba90 <vTaskDelay>
			buzzer(BUZZ_TIME);
 8005074:	2064      	movs	r0, #100	; 0x64
 8005076:	f7fc f8b9 	bl	80011ec <buzzer>
			break;
 800507a:	e03c      	b.n	80050f6 <buzzing_task+0x1f6>

		case control_sbc:
			buzzer(BUZZER_LOW);
 800507c:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8005080:	f7fc f8b4 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	f016 fd03 	bl	801ba90 <vTaskDelay>
			buzzer((BUZZER_HIGH+BUZZER_LOW)/2);
 800508a:	f240 404c 	movw	r0, #1100	; 0x44c
 800508e:	f7fc f8ad 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8005092:	2064      	movs	r0, #100	; 0x64
 8005094:	f016 fcfc 	bl	801ba90 <vTaskDelay>
			buzzer(BUZZER_HIGH);;
 8005098:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 800509c:	f7fc f8a6 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 80050a0:	2064      	movs	r0, #100	; 0x64
 80050a2:	f016 fcf5 	bl	801ba90 <vTaskDelay>
			break;
 80050a6:	e026      	b.n	80050f6 <buzzing_task+0x1f6>


		case bz_debug_low:
			buzzer(DEBUG_LOW_FREQ);
 80050a8:	f44f 70b9 	mov.w	r0, #370	; 0x172
 80050ac:	f7fc f89e 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 80050b0:	2064      	movs	r0, #100	; 0x64
 80050b2:	f016 fced 	bl	801ba90 <vTaskDelay>
			break;
 80050b6:	e01e      	b.n	80050f6 <buzzing_task+0x1f6>

		case bz_debug_high:
			buzzer(DEBUG_HIGH_FREQ);
 80050b8:	f640 1082 	movw	r0, #2434	; 0x982
 80050bc:	f7fc f896 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 80050c0:	2064      	movs	r0, #100	; 0x64
 80050c2:	f016 fce5 	bl	801ba90 <vTaskDelay>
			break;
 80050c6:	e016      	b.n	80050f6 <buzzing_task+0x1f6>

		case bz_debug_rest:
			buzzer(0);
 80050c8:	2000      	movs	r0, #0
 80050ca:	f7fc f88f 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 80050ce:	2032      	movs	r0, #50	; 0x32
 80050d0:	f016 fcde 	bl	801ba90 <vTaskDelay>
			break;
 80050d4:	e00f      	b.n	80050f6 <buzzing_task+0x1f6>
		case bz_high:
			buzzer(BUZZER_HIGH);
 80050d6:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 80050da:	f7fc f887 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 80050de:	2064      	movs	r0, #100	; 0x64
 80050e0:	f016 fcd6 	bl	801ba90 <vTaskDelay>
			break;
 80050e4:	e007      	b.n	80050f6 <buzzing_task+0x1f6>
		case bz_low:
			buzzer(BUZZER_LOW);
 80050e6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80050ea:	f7fc f87f 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 80050ee:	2064      	movs	r0, #100	; 0x64
 80050f0:	f016 fcce 	bl	801ba90 <vTaskDelay>
			break;
 80050f4:	bf00      	nop
		}
		buzzer(0);
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7fc f878 	bl	80011ec <buzzer>
		vTaskDelay(GAP_TIME);
 80050fc:	2032      	movs	r0, #50	; 0x32
 80050fe:	f016 fcc7 	bl	801ba90 <vTaskDelay>
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8005102:	e703      	b.n	8004f0c <buzzing_task+0xc>
 8005104:	f3af 8000 	nop.w
 8005108:	66666666 	.word	0x66666666
 800510c:	3fee6666 	.word	0x3fee6666
 8005110:	42fa0000 	.word	0x42fa0000
 8005114:	200004d8 	.word	0x200004d8
 8005118:	08025bc4 	.word	0x08025bc4
 800511c:	08025cc0 	.word	0x08025cc0

08005120 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b08c      	sub	sp, #48	; 0x30
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <can_ISR+0x8c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d118      	bne.n	8005164 <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8005132:	210e      	movs	r1, #14
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f00a f8c6 	bl	800f2c6 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 800513a:	f107 020c 	add.w	r2, r7, #12
 800513e:	f107 0314 	add.w	r3, r7, #20
 8005142:	4619      	mov	r1, r3
 8005144:	481a      	ldr	r0, [pc, #104]	; (80051b0 <can_ISR+0x90>)
 8005146:	f7fc f889 	bl	800125c <can1_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId, rx_buffer);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f107 020c 	add.w	r2, r7, #12
 8005152:	4619      	mov	r1, r3
 8005154:	4817      	ldr	r0, [pc, #92]	; (80051b4 <can_ISR+0x94>)
 8005156:	f000 f833 	bl	80051c0 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 800515a:	210e      	movs	r1, #14
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f00a f88c 	bl	800f27a <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8005162:	e01e      	b.n	80051a2 <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <can_ISR+0x98>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d119      	bne.n	80051a2 <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 800516e:	2170      	movs	r1, #112	; 0x70
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f00a f8a8 	bl	800f2c6 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8005176:	f107 020c 	add.w	r2, r7, #12
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	4619      	mov	r1, r3
 8005180:	480e      	ldr	r0, [pc, #56]	; (80051bc <can_ISR+0x9c>)
 8005182:	f7fc f87c 	bl	800127e <can2_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	b29b      	uxth	r3, r3
 800518a:	330c      	adds	r3, #12
 800518c:	b29b      	uxth	r3, r3
 800518e:	f107 020c 	add.w	r2, r7, #12
 8005192:	4619      	mov	r1, r3
 8005194:	4807      	ldr	r0, [pc, #28]	; (80051b4 <can_ISR+0x94>)
 8005196:	f000 f813 	bl	80051c0 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 800519a:	2170      	movs	r1, #112	; 0x70
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f00a f86c 	bl	800f27a <HAL_CAN_ActivateNotification>
}
 80051a2:	bf00      	nop
 80051a4:	3730      	adds	r7, #48	; 0x30
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40006400 	.word	0x40006400
 80051b0:	2000042c 	.word	0x2000042c
 80051b4:	200018a0 	.word	0x200018a0
 80051b8:	40006800 	.word	0x40006800
 80051bc:	20000454 	.word	0x20000454

080051c0 <convert_raw_can_data>:
 * in the struct for the motor.
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id, uint8_t *rx_buffer) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	460b      	mov	r3, r1
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80051d4:	847b      	strh	r3, [r7, #34]	; 0x22

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24)
 80051d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051d8:	2b18      	cmp	r3, #24
 80051da:	f200 8160 	bhi.w	800549e <convert_raw_can_data+0x2de>
	{
		return;
	}
	motor_data_t* curr_motor = &can_motor_data[idnum];
 80051de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	461a      	mov	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	789b      	ldrb	r3, [r3, #2]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 814f 	beq.w	8005498 <convert_raw_can_data+0x2d8>
		//convert the raw data back into the respective values
		curr_motor->id 				= motor_id;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	897a      	ldrh	r2, [r7, #10]
 80051fe:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	b21a      	sxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b21b      	sxth	r3, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	b21a      	sxth	r2, r3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm						=(rx_buffer[2] << 8) | rx_buffer[3];
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3302      	adds	r3, #2
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	b21a      	sxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3303      	adds	r3, #3
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b21b      	sxth	r3, r3
 800522a:	4313      	orrs	r3, r2
 800522c:	833b      	strh	r3, [r7, #24]
		curr_motor->raw_data.rpm 		= curr_motor->raw_data.rpm * SPEED_LPF + temp_rpm * (1-SPEED_LPF);
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	8b3a      	ldrh	r2, [r7, #24]
 8005232:	811a      	strh	r2, [r3, #8]
		curr_motor->raw_data.torque 	= (rx_buffer[4] << 8) | rx_buffer[5];
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	b21a      	sxth	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3305      	adds	r3, #5
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b21b      	sxth	r3, r3
 8005246:	4313      	orrs	r3, r2
 8005248:	b21a      	sxth	r2, r3
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	815a      	strh	r2, [r3, #10]
		curr_motor->raw_data.temp 	= (rx_buffer[6]);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	799a      	ldrb	r2, [r3, #6]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] 		= curr_motor->last_time[0];
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		curr_motor->last_time[0]	 	= get_microseconds();
 8005262:	f7fd f805 	bl	8002270 <get_microseconds>
 8005266:	4602      	mov	r2, r0
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		float rds_passed = (float)(curr_motor->raw_data.angle[0] - curr_motor->raw_data.angle[1]) /8192;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005274:	461a      	mov	r2, r3
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005286:	eddf 6a88 	vldr	s13, [pc, #544]	; 80054a8 <convert_raw_can_data+0x2e8>
 800528a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800528e:	edc7 7a05 	vstr	s15, [r7, #20]
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8005292:	edd7 7a05 	vldr	s15, [r7, #20]
 8005296:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80054ac <convert_raw_can_data+0x2ec>
 800529a:	ee67 6a87 	vmul.f32	s13, s15, s14
				/ curr_motor->last_time[0] - curr_motor->last_time[1]) * 60;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80052a4:	ee07 3a90 	vmov	s15, r3
 80052a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c2:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80054b0 <convert_raw_can_data+0x2f0>
 80052c6:	ee67 7a87 	vmul.f32	s15, s15, s14
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	789b      	ldrb	r3, [r3, #2]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d84e      	bhi.n	8005378 <convert_raw_can_data+0x1b8>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <convert_raw_can_data+0x120>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005305 	.word	0x08005305
 80052e4:	08005317 	.word	0x08005317
 80052e8:	08005317 	.word	0x08005317
 80052ec:	08005379 	.word	0x08005379
 80052f0:	0800533d 	.word	0x0800533d
 80052f4:	0800533d 	.word	0x0800533d
 80052f8:	08005353 	.word	0x08005353
 80052fc:	08005353 	.word	0x08005353
 8005300:	08005353 	.word	0x08005353
		case TYPE_GM6020:
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	1d1a      	adds	r2, r3, #4
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	3398      	adds	r3, #152	; 0x98
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f000 f8d8 	bl	80054c4 <angle_offset>
			break;
 8005314:	e031      	b.n	800537a <convert_raw_can_data+0x1ba>
		case TYPE_M2006:
		case TYPE_M3508:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	1d18      	adds	r0, r3, #4
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f103 0198 	add.w	r1, r3, #152	; 0x98
								curr_motor->last_time);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	33e4      	adds	r3, #228	; 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005324:	461a      	mov	r2, r3
 8005326:	f000 f989 	bl	800563c <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	1d1a      	adds	r2, r3, #4
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3398      	adds	r3, #152	; 0x98
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f000 f8c5 	bl	80054c4 <angle_offset>
			break;
 800533a:	e01e      	b.n	800537a <convert_raw_can_data+0x1ba>
		case TYPE_M2006_STEPS:
		case TYPE_M3508_STEPS:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	1d18      	adds	r0, r3, #4
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f103 0198 	add.w	r1, r3, #152	; 0x98
					curr_motor->last_time);
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	33e4      	adds	r3, #228	; 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 800534a:	461a      	mov	r2, r3
 800534c:	f000 f976 	bl	800563c <motor_calc_odometry>
			break;
 8005350:	e013      	b.n	800537a <convert_raw_can_data+0x1ba>
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	1d18      	adds	r0, r3, #4
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f103 0198 	add.w	r1, r3, #152	; 0x98
					curr_motor->last_time);
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	33e4      	adds	r3, #228	; 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005360:	461a      	mov	r2, r3
 8005362:	f000 f96b 	bl	800563c <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	1d1a      	adds	r2, r3, #4
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3398      	adds	r3, #152	; 0x98
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f000 f8a7 	bl	80054c4 <angle_offset>
			break;
 8005376:	e000      	b.n	800537a <convert_raw_can_data+0x1ba>
		default:
			break;
 8005378:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 800537e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005380:	3301      	adds	r3, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	2b16      	cmp	r3, #22
 8005386:	d877      	bhi.n	8005478 <convert_raw_can_data+0x2b8>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <convert_raw_can_data+0x1d0>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053ed 	.word	0x080053ed
 8005394:	08005401 	.word	0x08005401
 8005398:	08005479 	.word	0x08005479
 800539c:	08005479 	.word	0x08005479
 80053a0:	08005465 	.word	0x08005465
 80053a4:	08005479 	.word	0x08005479
 80053a8:	08005479 	.word	0x08005479
 80053ac:	08005451 	.word	0x08005451
 80053b0:	08005479 	.word	0x08005479
 80053b4:	08005479 	.word	0x08005479
 80053b8:	08005479 	.word	0x08005479
 80053bc:	08005479 	.word	0x08005479
 80053c0:	08005479 	.word	0x08005479
 80053c4:	08005479 	.word	0x08005479
 80053c8:	08005479 	.word	0x08005479
 80053cc:	08005479 	.word	0x08005479
 80053d0:	08005479 	.word	0x08005479
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	08005429 	.word	0x08005429
 80053dc:	08005479 	.word	0x08005479
 80053e0:	08005479 	.word	0x08005479
 80053e4:	08005479 	.word	0x08005479
 80053e8:	08005415 	.word	0x08005415
		#ifndef CHASSIS_MCU
				case Leftwheel_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 80053ec:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <convert_raw_can_data+0x2f4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f107 0210 	add.w	r2, r7, #16
 80053f4:	2108      	movs	r1, #8
 80053f6:	4618      	mov	r0, r3
 80053f8:	f015 fa98 	bl	801a92c <xEventGroupSetBitsFromISR>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80053fe:	e03c      	b.n	800547a <convert_raw_can_data+0x2ba>
				case Rightwheel_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 8005400:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <convert_raw_can_data+0x2f4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f107 0210 	add.w	r2, r7, #16
 8005408:	2104      	movs	r1, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f015 fa8e 	bl	801a92c <xEventGroupSetBitsFromISR>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005412:	e032      	b.n	800547a <convert_raw_can_data+0x2ba>
//					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
//							&xHigherPriorityTaskWoken);
//					break;
		#endif
				case LFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <convert_raw_can_data+0x2f8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f107 0210 	add.w	r2, r7, #16
 800541c:	2102      	movs	r1, #2
 800541e:	4618      	mov	r0, r3
 8005420:	f015 fa84 	bl	801a92c <xEventGroupSetBitsFromISR>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005426:	e028      	b.n	800547a <convert_raw_can_data+0x2ba>
				case RFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8005428:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <convert_raw_can_data+0x2f8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f107 0210 	add.w	r2, r7, #16
 8005430:	2101      	movs	r1, #1
 8005432:	4618      	mov	r0, r3
 8005434:	f015 fa7a 	bl	801a92c <xEventGroupSetBitsFromISR>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800543a:	e01e      	b.n	800547a <convert_raw_can_data+0x2ba>
				case FEEDER_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 800543c:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <convert_raw_can_data+0x2f8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f107 0210 	add.w	r2, r7, #16
 8005444:	2104      	movs	r1, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f015 fa70 	bl	801a92c <xEventGroupSetBitsFromISR>
 800544c:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800544e:	e014      	b.n	800547a <convert_raw_can_data+0x2ba>
				case L1_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 8005450:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <convert_raw_can_data+0x2fc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f107 0210 	add.w	r2, r7, #16
 8005458:	2101      	movs	r1, #1
 800545a:	4618      	mov	r0, r3
 800545c:	f015 fa66 	bl	801a92c <xEventGroupSetBitsFromISR>
 8005460:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005462:	e00a      	b.n	800547a <convert_raw_can_data+0x2ba>
				case R1_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8005464:	4b15      	ldr	r3, [pc, #84]	; (80054bc <convert_raw_can_data+0x2fc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f107 0210 	add.w	r2, r7, #16
 800546c:	2102      	movs	r1, #2
 800546e:	4618      	mov	r0, r3
 8005470:	f015 fa5c 	bl	801a92c <xEventGroupSetBitsFromISR>
 8005474:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005476:	e000      	b.n	800547a <convert_raw_can_data+0x2ba>
				default:
					idnum = idnum;
					//error handler
					break;
 8005478:	bf00      	nop
				}

				//switches tasks if a higher priority task is ready.
				//required because the function is in an ISR
				if (xResult != pdFAIL) {
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00f      	beq.n	80054a0 <convert_raw_can_data+0x2e0>
					portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00c      	beq.n	80054a0 <convert_raw_can_data+0x2e0>
 8005486:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <convert_raw_can_data+0x300>)
 8005488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	e003      	b.n	80054a0 <convert_raw_can_data+0x2e0>
				}
			} else {
				//this is a useless statement so that it is possible to set a breakpoint here lol
				uint8_t stopper = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	e000      	b.n	80054a0 <convert_raw_can_data+0x2e0>
		return;
 800549e:	bf00      	nop
				//error handler
		}
}
 80054a0:	3728      	adds	r7, #40	; 0x28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	46000000 	.word	0x46000000
 80054ac:	461c4000 	.word	0x461c4000
 80054b0:	42700000 	.word	0x42700000
 80054b4:	200004c0 	.word	0x200004c0
 80054b8:	200004c4 	.word	0x200004c4
 80054bc:	200004bc 	.word	0x200004bc
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]

	//if there's a gearbox, use the ticks after the gearbox.
	//make sure center angle is properly set with respect to the zero-ing angle
	//YOUR ROBOT MUST HAVE A WAY TO ZERO THIS ANGLE AND IMPLEMENT A ZEROING FUNCTION AT STARTUP
	//IF NOT IT WON'T WORK 							-wx
	if (angle_data->gearbox_ratio > 0) {
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80054d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e0:	dd69      	ble.n	80055b6 <angle_offset+0xf2>
		temp_ang = angle_data->ticks - angle_data->center_ang;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	60fb      	str	r3, [r7, #12]
		if (temp_ang > (4096 * angle_data->gearbox_ratio)) {
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80054fe:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8005628 <angle_offset+0x164>
 8005502:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	dd13      	ble.n	8005538 <angle_offset+0x74>
			temp_ang -= (8192 * angle_data->gearbox_ratio);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005520:	eddf 6a42 	vldr	s13, [pc, #264]	; 800562c <angle_offset+0x168>
 8005524:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800552c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005530:	ee17 3a90 	vmov	r3, s15
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e023      	b.n	8005580 <angle_offset+0xbc>
		} else if (temp_ang < (-4096 * angle_data->gearbox_ratio)) {
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005548:	eddf 6a39 	vldr	s13, [pc, #228]	; 8005630 <angle_offset+0x16c>
 800554c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005558:	d512      	bpl.n	8005580 <angle_offset+0xbc>
			temp_ang += 8192 * angle_data->gearbox_ratio;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800556a:	eddf 6a30 	vldr	s13, [pc, #192]	; 800562c <angle_offset+0x168>
 800556e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800557a:	ee17 3a90 	vmov	r3, s15
 800557e:	60fb      	str	r3, [r7, #12]
		}
		angle_data->ticks = temp_ang;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]
		angle_data->adj_ang = (float) temp_ang * 2 *PI / (8192 * angle_data->gearbox_ratio);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005590:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005594:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005634 <angle_offset+0x170>
 8005598:	ee67 6a87 	vmul.f32	s13, s15, s14
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055a2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800562c <angle_offset+0x168>
 80055a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		} else if (temp_ang < -4096) {
			temp_ang += 8192;
		}
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
	}
}
 80055b4:	e031      	b.n	800561a <angle_offset+0x156>
		temp_ang = (int32_t) (motor_data->angle[0]) - angle_data->center_ang;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055bc:	461a      	mov	r2, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	60fb      	str	r3, [r7, #12]
		if (temp_ang > 4096) {
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	dd04      	ble.n	80055d8 <angle_offset+0x114>
			temp_ang -= 8192;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e007      	b.n	80055e8 <angle_offset+0x124>
		} else if (temp_ang < -4096) {
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80055de:	da03      	bge.n	80055e8 <angle_offset+0x124>
			temp_ang += 8192;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055e6:	60fb      	str	r3, [r7, #12]
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80055ee:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005638 <angle_offset+0x174>
 80055f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005600:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005634 <angle_offset+0x170>
 8005604:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005608:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8005628 <angle_offset+0x164>
 800560c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	45800000 	.word	0x45800000
 800562c:	46000000 	.word	0x46000000
 8005630:	c5800000 	.word	0xc5800000
 8005634:	40490fdb 	.word	0x40490fdb
 8005638:	00000000 	.word	0x00000000

0800563c <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data,
		angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
	int8_t int_round_passed = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	77fb      	strb	r3, [r7, #31]
	//check to make sure it's not the same data point
	if (feedback_times[0] - feedback_times[1] >= 1) {
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d02e      	beq.n	80056b8 <motor_calc_odometry+0x7c>
		float rounds_passed = (((float)(feedback_times[0] - feedback_times[1]) * motor_data->rpm)/(60 * TIMER_FREQ));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3304      	adds	r3, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005680:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80057f4 <motor_calc_odometry+0x1b8>
 8005684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005688:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fabs(rounds_passed) >= 1) {
 800568c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005690:	eef0 7ae7 	vabs.f32	s15, s15
 8005694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a0:	db08      	blt.n	80056b4 <motor_calc_odometry+0x78>
			int_round_passed = rounds_passed;
 80056a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80056a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056aa:	edc7 7a00 	vstr	s15, [r7]
 80056ae:	783b      	ldrb	r3, [r7, #0]
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e001      	b.n	80056b8 <motor_calc_odometry+0x7c>
		} else {
			int_round_passed = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	77fb      	strb	r3, [r7, #31]
		}
	}
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	83bb      	strh	r3, [r7, #28]
	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 80056ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	dd05      	ble.n	80056e4 <motor_calc_odometry+0xa8>
		abs_angle_diff -= 8192;
 80056d8:	8bbb      	ldrh	r3, [r7, #28]
 80056da:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80056de:	b29b      	uxth	r3, r3
 80056e0:	83bb      	strh	r3, [r7, #28]
 80056e2:	e009      	b.n	80056f8 <motor_calc_odometry+0xbc>
	} else if (abs_angle_diff < -4096) {
 80056e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80056e8:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80056ec:	da04      	bge.n	80056f8 <motor_calc_odometry+0xbc>
		abs_angle_diff += 8192;
 80056ee:	8bbb      	ldrh	r3, [r7, #28]
 80056f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	83bb      	strh	r3, [r7, #28]
	 } else {
	 abs_angle_diff = (8192-motor_data->angle[0]) - motor_data->angle[1];
	 }
	 }
	 */
	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80056fe:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80057f8 <motor_calc_odometry+0x1bc>
 8005702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800570a:	ee17 3a90 	vmov	r3, s15
 800570e:	82fb      	strh	r3, [r7, #22]
	angle_data->ticks += (int_round_passed * 8192) + abs_angle_diff;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005718:	0359      	lsls	r1, r3, #13
 800571a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800571e:	440b      	add	r3, r1
 8005720:	441a      	add	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	601a      	str	r2, [r3, #0]
	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005738:	ee67 6a27 	vmul.f32	s13, s14, s15
 800573c:	8afb      	ldrh	r3, [r7, #22]
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	angle_data->adj_ang = (float) (angle_data->ticks % gear_ticks ) * 2*PI/gear_ticks;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	8afa      	ldrh	r2, [r7, #22]
 8005756:	fb93 f1f2 	sdiv	r1, r3, r2
 800575a:	fb01 f202 	mul.w	r2, r1, r2
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005768:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800576c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80057fc <motor_calc_odometry+0x1c0>
 8005770:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005774:	8afb      	ldrh	r3, [r7, #22]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800577e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	angle_data->adj_ang = (angle_data->adj_ang > PI) ? (angle_data->adj_ang - 2*PI) : (angle_data->adj_ang < -PI) ? angle_data->adj_ang+2*PI : angle_data->adj_ang;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800578e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80057fc <motor_calc_odometry+0x1c0>
 8005792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579a:	dd07      	ble.n	80057ac <motor_calc_odometry+0x170>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80057a2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005800 <motor_calc_odometry+0x1c4>
 80057a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057aa:	e014      	b.n	80057d6 <motor_calc_odometry+0x19a>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80057b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005804 <motor_calc_odometry+0x1c8>
 80057b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057be:	d507      	bpl.n	80057d0 <motor_calc_odometry+0x194>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80057c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005800 <motor_calc_odometry+0x1c4>
 80057ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ce:	e002      	b.n	80057d6 <motor_calc_odometry+0x19a>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	motor_data->angle[1] = motor_data->angle[0];
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	805a      	strh	r2, [r3, #2]
}
 80057e6:	bf00      	nop
 80057e8:	3724      	adds	r7, #36	; 0x24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	49127c00 	.word	0x49127c00
 80057f8:	46000000 	.word	0x46000000
 80057fc:	40490fdb 	.word	0x40490fdb
 8005800:	40c90fdb 	.word	0x40c90fdb
 8005804:	c0490fdb 	.word	0xc0490fdb

08005808 <control_input_task>:
uint8_t safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;



void control_input_task(void *argument) {
 8005808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800580c:	b088      	sub	sp, #32
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 8005812:	f000 f967 	bl	8005ae4 <control_reset>
	chassis_yaw_pid_init();
 8005816:	f000 fb61 	bl	8005edc <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 800581a:	4b7b      	ldr	r3, [pc, #492]	; (8005a08 <control_input_task+0x200>)
 800581c:	2201      	movs	r2, #1
 800581e:	721a      	strb	r2, [r3, #8]
	aimbot_pid_init();
 8005820:	f000 fee0 	bl	80065e4 <aimbot_pid_init>
	dbus_remote_start();
 8005824:	f7fb fe82 	bl	800152c <dbus_remote_start>
	gear_speed.curr_gear = 3;
 8005828:	4b78      	ldr	r3, [pc, #480]	; (8005a0c <control_input_task+0x204>)
 800582a:	2203      	movs	r2, #3
 800582c:	701a      	strb	r2, [r3, #0]
	gear_speed.spin_mult = GEAR3_YAW_MULT;
 800582e:	4b77      	ldr	r3, [pc, #476]	; (8005a0c <control_input_task+0x204>)
 8005830:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005834:	605a      	str	r2, [r3, #4]
	gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005836:	4b75      	ldr	r3, [pc, #468]	; (8005a0c <control_input_task+0x204>)
 8005838:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800583c:	609a      	str	r2, [r3, #8]
	gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 800583e:	4b73      	ldr	r3, [pc, #460]	; (8005a0c <control_input_task+0x204>)
 8005840:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005844:	60da      	str	r2, [r3, #12]
	safety_toggle = 1;
 8005846:	4b72      	ldr	r3, [pc, #456]	; (8005a10 <control_input_task+0x208>)
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 800584c:	2064      	movs	r0, #100	; 0x64
 800584e:	f016 f91f 	bl	801ba90 <vTaskDelay>
	uint8_t rc_check;
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50 || fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50){
 8005852:	e01a      	b.n	800588a <control_input_task+0x82>
		uint8_t temp_msg;
		temp_msg = not_ok;
 8005854:	2302      	movs	r3, #2
 8005856:	75fb      	strb	r3, [r7, #23]
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005858:	4b6e      	ldr	r3, [pc, #440]	; (8005a14 <control_input_task+0x20c>)
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	f107 0117 	add.w	r1, r7, #23
 8005860:	2300      	movs	r3, #0
 8005862:	2200      	movs	r2, #0
 8005864:	f015 fa68 	bl	801ad38 <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8005868:	21c8      	movs	r1, #200	; 0xc8
 800586a:	2001      	movs	r0, #1
 800586c:	f016 ff20 	bl	801c6b0 <ulTaskNotifyTake>
 8005870:	4603      	mov	r3, r0
 8005872:	77fb      	strb	r3, [r7, #31]
		HAL_UART_DMAStop(&DBUS_UART);
 8005874:	4868      	ldr	r0, [pc, #416]	; (8005a18 <control_input_task+0x210>)
 8005876:	f010 fa11 	bl	8015c9c <HAL_UART_DMAStop>
		dbus_remote_start();
 800587a:	f7fb fe57 	bl	800152c <dbus_remote_start>
		if (rc_check){
 800587e:	7ffb      	ldrb	r3, [r7, #31]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <control_input_task+0x82>
			vTaskDelay(200);
 8005884:	20c8      	movs	r0, #200	; 0xc8
 8005886:	f016 f903 	bl	801ba90 <vTaskDelay>
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50 || fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50){
 800588a:	4b64      	ldr	r3, [pc, #400]	; (8005a1c <control_input_task+0x214>)
 800588c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005890:	4618      	mov	r0, r3
 8005892:	f7fa fe47 	bl	8000524 <__aeabi_i2d>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4690      	mov	r8, r2
 800589c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <control_input_task+0x218>)
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f7fb f935 	bl	8000b18 <__aeabi_dcmpgt>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1cf      	bne.n	8005854 <control_input_task+0x4c>
 80058b4:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <control_input_task+0x214>)
 80058b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa fe32 	bl	8000524 <__aeabi_i2d>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4692      	mov	sl, r2
 80058c6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	4b54      	ldr	r3, [pc, #336]	; (8005a20 <control_input_task+0x218>)
 80058d0:	4650      	mov	r0, sl
 80058d2:	4659      	mov	r1, fp
 80058d4:	f7fb f920 	bl	8000b18 <__aeabi_dcmpgt>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1ba      	bne.n	8005854 <control_input_task+0x4c>
 80058de:	4b4f      	ldr	r3, [pc, #316]	; (8005a1c <control_input_task+0x214>)
 80058e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fa fe1d 	bl	8000524 <__aeabi_i2d>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	603a      	str	r2, [r7, #0]
 80058f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	4b49      	ldr	r3, [pc, #292]	; (8005a20 <control_input_task+0x218>)
 80058fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005900:	f7fb f90a 	bl	8000b18 <__aeabi_dcmpgt>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1a4      	bne.n	8005854 <control_input_task+0x4c>
 800590a:	4b44      	ldr	r3, [pc, #272]	; (8005a1c <control_input_task+0x214>)
 800590c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fa fe07 	bl	8000524 <__aeabi_i2d>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4614      	mov	r4, r2
 800591c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <control_input_task+0x218>)
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	f7fb f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d18f      	bne.n	8005854 <control_input_task+0x4c>
		}
	}
	safety_toggle = ARM_SWITCH;
 8005934:	4b36      	ldr	r3, [pc, #216]	; (8005a10 <control_input_task+0x208>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]


	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800593a:	21c8      	movs	r1, #200	; 0xc8
 800593c:	2001      	movs	r0, #1
 800593e:	f016 feb7 	bl	801c6b0 <ulTaskNotifyTake>
 8005942:	4603      	mov	r3, r0
 8005944:	77fb      	strb	r3, [r7, #31]
		if (rc_check) {
 8005946:	7ffb      	ldrb	r3, [r7, #31]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d039      	beq.n	80059c0 <control_input_task+0x1b8>
			status_led(1, on_led);
 800594c:	2100      	movs	r1, #0
 800594e:	2001      	movs	r0, #1
 8005950:	f7fc fbb6 	bl	80020c0 <status_led>
			start_time = xTaskGetTickCount();
 8005954:	f016 f9ec 	bl	801bd30 <xTaskGetTickCount>
 8005958:	4603      	mov	r3, r0
 800595a:	61bb      	str	r3, [r7, #24]
			if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 800595c:	4b2f      	ldr	r3, [pc, #188]	; (8005a1c <control_input_task+0x214>)
 800595e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d110      	bne.n	8005988 <control_input_task+0x180>
				laser_on();
 8005966:	f7fb fe85 	bl	8001674 <laser_on>
				control_mode_change(remote_cmd.side_dial);
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <control_input_task+0x214>)
 800596c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005970:	4618      	mov	r0, r3
 8005972:	f000 f8ed 	bl	8005b50 <control_mode_change>
				safety_toggle = 0;
 8005976:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <control_input_task+0x208>)
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 800597c:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <control_input_task+0x21c>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
				control_reset();
 8005982:	f000 f8af 	bl	8005ae4 <control_reset>
 8005986:	e037      	b.n	80059f8 <control_input_task+0x1f0>
			} else {

				switch (control_mode) {
 8005988:	4b27      	ldr	r3, [pc, #156]	; (8005a28 <control_input_task+0x220>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d002      	beq.n	8005996 <control_input_task+0x18e>
 8005990:	2b02      	cmp	r3, #2
 8005992:	d008      	beq.n	80059a6 <control_input_task+0x19e>
					sbc_control_input();
					break;
#endif HAS_SBC

				default:
					break;
 8005994:	e00f      	b.n	80059b6 <control_input_task+0x1ae>
					keyboard_gear_shifter(&gear_speed);
 8005996:	481d      	ldr	r0, [pc, #116]	; (8005a0c <control_input_task+0x204>)
 8005998:	f000 fac4 	bl	8005f24 <keyboard_gear_shifter>
					set_gear();
 800599c:	f000 fa20 	bl	8005de0 <set_gear>
					keyboard_control_input();
 80059a0:	f000 fab6 	bl	8005f10 <keyboard_control_input>
					break;
 80059a4:	e007      	b.n	80059b6 <control_input_task+0x1ae>
					remote_gear_shifter(&gear_speed);
 80059a6:	4819      	ldr	r0, [pc, #100]	; (8005a0c <control_input_task+0x204>)
 80059a8:	f000 fca4 	bl	80062f4 <remote_gear_shifter>
					set_gear();
 80059ac:	f000 fa18 	bl	8005de0 <set_gear>
					remote_control_input();
 80059b0:	f000 fc96 	bl	80062e0 <remote_control_input>
					break;
 80059b4:	bf00      	nop

				}
				status_led(1, off_led);
 80059b6:	2101      	movs	r1, #1
 80059b8:	2001      	movs	r0, #1
 80059ba:	f7fc fb81 	bl	80020c0 <status_led>
 80059be:	e01b      	b.n	80059f8 <control_input_task+0x1f0>
			}
		} else {
			//restart remote uart
			if (HAL_GetTick() - remote_cmd.last_time > 100) {
 80059c0:	f008 fdbc 	bl	800e53c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <control_input_task+0x214>)
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b64      	cmp	r3, #100	; 0x64
 80059ce:	d909      	bls.n	80059e4 <control_input_task+0x1dc>
				HAL_UART_DMAStop(&DBUS_UART);
 80059d0:	4811      	ldr	r0, [pc, #68]	; (8005a18 <control_input_task+0x210>)
 80059d2:	f010 f963 	bl	8015c9c <HAL_UART_DMAStop>
				dbus_remote_start();
 80059d6:	f7fb fda9 	bl	800152c <dbus_remote_start>
				remote_cmd.last_time = HAL_GetTick();
 80059da:	f008 fdaf 	bl	800e53c <HAL_GetTick>
 80059de:	4603      	mov	r3, r0
 80059e0:	4a0e      	ldr	r2, [pc, #56]	; (8005a1c <control_input_task+0x214>)
 80059e2:	6213      	str	r3, [r2, #32]
			}
			kill_can();
 80059e4:	f006 fb3c 	bl	800c060 <kill_can>
			control_reset();
 80059e8:	f000 f87c 	bl	8005ae4 <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <control_input_task+0x21c>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
			safety_toggle = ARM_SWITCH;
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <control_input_task+0x208>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 80059f8:	f107 0318 	add.w	r3, r7, #24
 80059fc:	2102      	movs	r1, #2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f015 ffc8 	bl	801b994 <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8005a04:	e799      	b.n	800593a <control_input_task+0x132>
 8005a06:	bf00      	nop
 8005a08:	20002f40 	.word	0x20002f40
 8005a0c:	20002f7c 	.word	0x20002f7c
 8005a10:	20002f90 	.word	0x20002f90
 8005a14:	200004d8 	.word	0x200004d8
 8005a18:	20001694 	.word	0x20001694
 8005a1c:	20000350 	.word	0x20000350
 8005a20:	40490000 	.word	0x40490000
 8005a24:	20002f91 	.word	0x20002f91
 8005a28:	20000008 	.word	0x20000008
 8005a2c:	00000000 	.word	0x00000000

08005a30 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
	speed_pid(0, can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang,
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <chassis_center_yaw+0x40>)
 8005a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3a:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fa fd82 	bl	8000548 <__aeabi_f2d>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	480a      	ldr	r0, [pc, #40]	; (8005a74 <chassis_center_yaw+0x44>)
 8005a4a:	ec43 2b11 	vmov	d1, r2, r3
 8005a4e:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8005a68 <chassis_center_yaw+0x38>
 8005a52:	f005 ff9b 	bl	800b98c <speed_pid>
			&yaw_pid_data);
	return yaw_pid_data.output;
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <chassis_center_yaw+0x44>)
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	ee07 3a90 	vmov	s15, r3
}
 8005a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	f3af 8000 	nop.w
	...
 8005a70:	200018a0 	.word	0x200018a0
 8005a74:	20002f4c 	.word	0x20002f4c

08005a78 <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw){
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a82:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a86:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <chassis_set_ctrl+0x38>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 8005a90:	4a07      	ldr	r2, [pc, #28]	; (8005ab0 <chassis_set_ctrl+0x38>)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 8005a96:	4a06      	ldr	r2, [pc, #24]	; (8005ab0 <chassis_set_ctrl+0x38>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = yaw;
 8005a9c:	4a04      	ldr	r2, [pc, #16]	; (8005ab0 <chassis_set_ctrl+0x38>)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6093      	str	r3, [r2, #8]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20002f20 	.word	0x20002f20

08005ab4 <chassis_kill_ctrl>:

void chassis_kill_ctrl(){
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <chassis_kill_ctrl+0x2c>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 8005abe:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <chassis_kill_ctrl+0x2c>)
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005ac6:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <chassis_kill_ctrl+0x2c>)
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <chassis_kill_ctrl+0x2c>)
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	609a      	str	r2, [r3, #8]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20002f20 	.word	0x20002f20

08005ae4 <control_reset>:
		}
	}
	return 0;
}

void control_reset() {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 8005ae8:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <control_reset+0x58>)
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005af0:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <control_reset+0x58>)
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 8005af8:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <control_reset+0x58>)
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 8005b00:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <control_reset+0x58>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 8005b06:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <control_reset+0x5c>)
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <control_reset+0x60>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	4a0b      	ldr	r2, [pc, #44]	; (8005b40 <control_reset+0x5c>)
 8005b14:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <control_reset+0x5c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	725a      	strb	r2, [r3, #9]
	launcher_ctrl_data.gun_feeding_speed = 0;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <control_reset+0x64>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <control_reset+0x64>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <control_reset+0x64>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	715a      	strb	r2, [r3, #5]
	g_spinspin_mode = 0;
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <control_reset+0x68>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
	laser_off();
 8005b34:	f7fb fdaa 	bl	800168c <laser_off>
}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20002f20 	.word	0x20002f20
 8005b40:	20002f40 	.word	0x20002f40
 8005b44:	20003194 	.word	0x20003194
 8005b48:	20002f38 	.word	0x20002f38
 8005b4c:	20002f8c 	.word	0x20002f8c

08005b50 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	80fb      	strh	r3, [r7, #6]
//assume already in shutdown mode here
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (remote_cmd.left_switch == ge_LSW_CONFIG) {
 8005b5a:	4b6f      	ldr	r3, [pc, #444]	; (8005d18 <control_mode_change+0x1c8>)
 8005b5c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d133      	bne.n	8005bcc <control_mode_change+0x7c>
		if (left_dial_input > 330 || left_dial_input < -330) {
 8005b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b68:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005b6c:	dc04      	bgt.n	8005b78 <control_mode_change+0x28>
 8005b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b72:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8005b76:	da23      	bge.n	8005bc0 <control_mode_change+0x70>
			if (HAL_GetTick() - last_trig_time > 1000) {
 8005b78:	f008 fce0 	bl	800e53c <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <control_mode_change+0x1cc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b88:	d918      	bls.n	8005bbc <control_mode_change+0x6c>
				switch (control_mode) {
 8005b8a:	4b65      	ldr	r3, [pc, #404]	; (8005d20 <control_mode_change+0x1d0>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d80d      	bhi.n	8005bb0 <control_mode_change+0x60>
				case KEYBOARD_CTRL_MODE:
				case REMOTE_CTRL_MODE:
					control_mode = SBC_CTRL_MODE;
 8005b94:	4b62      	ldr	r3, [pc, #392]	; (8005d20 <control_mode_change+0x1d0>)
 8005b96:	2203      	movs	r2, #3
 8005b98:	701a      	strb	r2, [r3, #0]
					temp_msg = control_sbc;
 8005b9a:	2305      	movs	r3, #5
 8005b9c:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005b9e:	4b61      	ldr	r3, [pc, #388]	; (8005d24 <control_mode_change+0x1d4>)
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f107 010f 	add.w	r1, r7, #15
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f015 f8c5 	bl	801ad38 <xQueueGenericSend>
					break;
 8005bae:	e006      	b.n	8005bbe <control_mode_change+0x6e>
				default:
					last_trig_time = HAL_GetTick();
 8005bb0:	f008 fcc4 	bl	800e53c <HAL_GetTick>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4a59      	ldr	r2, [pc, #356]	; (8005d1c <control_mode_change+0x1cc>)
 8005bb8:	6013      	str	r3, [r2, #0]
					break;
 8005bba:	e000      	b.n	8005bbe <control_mode_change+0x6e>
				}
			}
 8005bbc:	bf00      	nop
			if (HAL_GetTick() - last_trig_time > 1000) {
 8005bbe:	e0a7      	b.n	8005d10 <control_mode_change+0x1c0>
		} else {
			last_trig_time = HAL_GetTick();
 8005bc0:	f008 fcbc 	bl	800e53c <HAL_GetTick>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4a55      	ldr	r2, [pc, #340]	; (8005d1c <control_mode_change+0x1cc>)
 8005bc8:	6013      	str	r3, [r2, #0]
			break;
		default:
			break;
		}
	}
}
 8005bca:	e0a1      	b.n	8005d10 <control_mode_change+0x1c0>
		switch (control_mode) {
 8005bcc:	4b54      	ldr	r3, [pc, #336]	; (8005d20 <control_mode_change+0x1d0>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d052      	beq.n	8005c7a <control_mode_change+0x12a>
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	f300 8094 	bgt.w	8005d02 <control_mode_change+0x1b2>
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d002      	beq.n	8005be4 <control_mode_change+0x94>
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d026      	beq.n	8005c30 <control_mode_change+0xe0>
			break;
 8005be2:	e08e      	b.n	8005d02 <control_mode_change+0x1b2>
			if (left_dial_input < -330) {
 8005be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005be8:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8005bec:	da1a      	bge.n	8005c24 <control_mode_change+0xd4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005bee:	f008 fca5 	bl	800e53c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	4b49      	ldr	r3, [pc, #292]	; (8005d1c <control_mode_change+0x1cc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bfe:	f240 8082 	bls.w	8005d06 <control_mode_change+0x1b6>
					control_mode = REMOTE_CTRL_MODE;
 8005c02:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <control_mode_change+0x1d0>)
 8005c04:	2202      	movs	r2, #2
 8005c06:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8005c08:	2304      	movs	r3, #4
 8005c0a:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005c0c:	4b45      	ldr	r3, [pc, #276]	; (8005d24 <control_mode_change+0x1d4>)
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	f107 010f 	add.w	r1, r7, #15
 8005c14:	2300      	movs	r3, #0
 8005c16:	2200      	movs	r2, #0
 8005c18:	f015 f88e 	bl	801ad38 <xQueueGenericSend>
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005c1c:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <control_mode_change+0x1d8>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	701a      	strb	r2, [r3, #0]
			break;
 8005c22:	e070      	b.n	8005d06 <control_mode_change+0x1b6>
				last_trig_time = HAL_GetTick();
 8005c24:	f008 fc8a 	bl	800e53c <HAL_GetTick>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	4a3c      	ldr	r2, [pc, #240]	; (8005d1c <control_mode_change+0x1cc>)
 8005c2c:	6013      	str	r3, [r2, #0]
			break;
 8005c2e:	e06a      	b.n	8005d06 <control_mode_change+0x1b6>
			if (left_dial_input > 330) {
 8005c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c34:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005c38:	dd19      	ble.n	8005c6e <control_mode_change+0x11e>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005c3a:	f008 fc7f 	bl	800e53c <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <control_mode_change+0x1cc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4a:	d95e      	bls.n	8005d0a <control_mode_change+0x1ba>
					control_mode = KEYBOARD_CTRL_MODE;
 8005c4c:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <control_mode_change+0x1d0>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8005c52:	2303      	movs	r3, #3
 8005c54:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005c56:	4b34      	ldr	r3, [pc, #208]	; (8005d28 <control_mode_change+0x1d8>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005c5c:	4b31      	ldr	r3, [pc, #196]	; (8005d24 <control_mode_change+0x1d4>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	f107 010f 	add.w	r1, r7, #15
 8005c64:	2300      	movs	r3, #0
 8005c66:	2200      	movs	r2, #0
 8005c68:	f015 f866 	bl	801ad38 <xQueueGenericSend>
			break;
 8005c6c:	e04d      	b.n	8005d0a <control_mode_change+0x1ba>
				last_trig_time = HAL_GetTick();
 8005c6e:	f008 fc65 	bl	800e53c <HAL_GetTick>
 8005c72:	4603      	mov	r3, r0
 8005c74:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <control_mode_change+0x1cc>)
 8005c76:	6013      	str	r3, [r2, #0]
			break;
 8005c78:	e047      	b.n	8005d0a <control_mode_change+0x1ba>
			if (left_dial_input < -330) {
 8005c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c7e:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8005c82:	da19      	bge.n	8005cb8 <control_mode_change+0x168>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005c84:	f008 fc5a 	bl	800e53c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <control_mode_change+0x1cc>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c94:	d93b      	bls.n	8005d0e <control_mode_change+0x1be>
					control_mode = REMOTE_CTRL_MODE;
 8005c96:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <control_mode_change+0x1d0>)
 8005c98:	2202      	movs	r2, #2
 8005c9a:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <control_mode_change+0x1d8>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <control_mode_change+0x1d4>)
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	f107 010f 	add.w	r1, r7, #15
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f015 f841 	bl	801ad38 <xQueueGenericSend>
			break;
 8005cb6:	e02a      	b.n	8005d0e <control_mode_change+0x1be>
			} else if (left_dial_input > 330) {
 8005cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cbc:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005cc0:	dd19      	ble.n	8005cf6 <control_mode_change+0x1a6>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005cc2:	f008 fc3b 	bl	800e53c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <control_mode_change+0x1cc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cd2:	d91c      	bls.n	8005d0e <control_mode_change+0x1be>
					control_mode = KEYBOARD_CTRL_MODE;
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <control_mode_change+0x1d0>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <control_mode_change+0x1d8>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <control_mode_change+0x1d4>)
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	f107 010f 	add.w	r1, r7, #15
 8005cec:	2300      	movs	r3, #0
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f015 f822 	bl	801ad38 <xQueueGenericSend>
			break;
 8005cf4:	e00b      	b.n	8005d0e <control_mode_change+0x1be>
				last_trig_time = HAL_GetTick();
 8005cf6:	f008 fc21 	bl	800e53c <HAL_GetTick>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <control_mode_change+0x1cc>)
 8005cfe:	6013      	str	r3, [r2, #0]
			break;
 8005d00:	e005      	b.n	8005d0e <control_mode_change+0x1be>
			break;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <control_mode_change+0x1c0>
			break;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <control_mode_change+0x1c0>
			break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <control_mode_change+0x1c0>
			break;
 8005d0e:	bf00      	nop
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000350 	.word	0x20000350
 8005d1c:	20002f94 	.word	0x20002f94
 8005d20:	20000008 	.word	0x20000008
 8005d24:	200004d8 	.word	0x200004d8
 8005d28:	20002f91 	.word	0x20002f91

08005d2c <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d36:	edc7 0a00 	vstr	s1, [r7]
	yaw_radians += gimbal_ctrl_data.yaw += yaw_radians;
 8005d3a:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <gimbal_turn_ang+0xa4>)
 8005d3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d40:	edd7 7a00 	vldr	s15, [r7]
 8005d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <gimbal_turn_ang+0xa4>)
 8005d4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8005d4e:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <gimbal_turn_ang+0xa4>)
 8005d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d54:	ed97 7a00 	vldr	s14, [r7]
 8005d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5c:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005d60:	e007      	b.n	8005d72 <gimbal_turn_ang+0x46>
		yaw_radians -= 2 * PI;
 8005d62:	edd7 7a00 	vldr	s15, [r7]
 8005d66:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005dd4 <gimbal_turn_ang+0xa8>
 8005d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d6e:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005d72:	edd7 7a00 	vldr	s15, [r7]
 8005d76:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005dd8 <gimbal_turn_ang+0xac>
 8005d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	dcee      	bgt.n	8005d62 <gimbal_turn_ang+0x36>
	}
	while (yaw_radians < -PI) {
 8005d84:	e007      	b.n	8005d96 <gimbal_turn_ang+0x6a>
		yaw_radians += 2 * PI;
 8005d86:	edd7 7a00 	vldr	s15, [r7]
 8005d8a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005dd4 <gimbal_turn_ang+0xa8>
 8005d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d92:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians < -PI) {
 8005d96:	edd7 7a00 	vldr	s15, [r7]
 8005d9a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005ddc <gimbal_turn_ang+0xb0>
 8005d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da6:	d4ee      	bmi.n	8005d86 <gimbal_turn_ang+0x5a>
	}
	gimbal_ctrl_data.pitch += pit_radians;
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <gimbal_turn_ang+0xa4>)
 8005daa:	ed93 7a00 	vldr	s14, [r3]
 8005dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8005db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <gimbal_turn_ang+0xa4>)
 8005db8:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = yaw_radians;
 8005dbc:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <gimbal_turn_ang+0xa4>)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6053      	str	r3, [r2, #4]
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20002f40 	.word	0x20002f40
 8005dd4:	40c90fdb 	.word	0x40c90fdb
 8005dd8:	40490fdb 	.word	0x40490fdb
 8005ddc:	c0490fdb 	.word	0xc0490fdb

08005de0 <set_gear>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void set_gear() {
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
	switch (gear_speed.curr_gear) {
 8005de4:	4b35      	ldr	r3, [pc, #212]	; (8005ebc <set_gear+0xdc>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d854      	bhi.n	8005e98 <set_gear+0xb8>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <set_gear+0x14>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e0d 	.word	0x08005e0d
 8005df8:	08005e25 	.word	0x08005e25
 8005dfc:	08005e3d 	.word	0x08005e3d
 8005e00:	08005e57 	.word	0x08005e57
 8005e04:	08005e6b 	.word	0x08005e6b
 8005e08:	08005e85 	.word	0x08005e85
	case 1:
		gear_speed.spin_mult = GEAR1_YAW_MULT;
 8005e0c:	4b2b      	ldr	r3, [pc, #172]	; (8005ebc <set_gear+0xdc>)
 8005e0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e12:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR1_SPEED_MULT;
 8005e14:	4b29      	ldr	r3, [pc, #164]	; (8005ebc <set_gear+0xdc>)
 8005e16:	4a2a      	ldr	r2, [pc, #168]	; (8005ec0 <set_gear+0xe0>)
 8005e18:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR1_ACCEL_MULT;
 8005e1a:	4b28      	ldr	r3, [pc, #160]	; (8005ebc <set_gear+0xdc>)
 8005e1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e20:	60da      	str	r2, [r3, #12]
		break;
 8005e22:	e046      	b.n	8005eb2 <set_gear+0xd2>
	case 2:
		gear_speed.spin_mult = GEAR2_YAW_MULT;
 8005e24:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <set_gear+0xdc>)
 8005e26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e2a:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR2_SPEED_MULT;
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <set_gear+0xdc>)
 8005e2e:	4a25      	ldr	r2, [pc, #148]	; (8005ec4 <set_gear+0xe4>)
 8005e30:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR2_ACCEL_MULT;
 8005e32:	4b22      	ldr	r3, [pc, #136]	; (8005ebc <set_gear+0xdc>)
 8005e34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e38:	60da      	str	r2, [r3, #12]
		break;
 8005e3a:	e03a      	b.n	8005eb2 <set_gear+0xd2>
	case 3:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <set_gear+0xdc>)
 8005e3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e42:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <set_gear+0xdc>)
 8005e46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e4a:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005e4c:	4b1b      	ldr	r3, [pc, #108]	; (8005ebc <set_gear+0xdc>)
 8005e4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e52:	60da      	str	r2, [r3, #12]
		break;
 8005e54:	e02d      	b.n	8005eb2 <set_gear+0xd2>
	case 4:
		gear_speed.spin_mult = GEAR4_YAW_MULT;
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <set_gear+0xdc>)
 8005e58:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <set_gear+0xe8>)
 8005e5a:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR4_SPEED_MULT;
 8005e5c:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <set_gear+0xdc>)
 8005e5e:	4a1b      	ldr	r2, [pc, #108]	; (8005ecc <set_gear+0xec>)
 8005e60:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR4_ACCEL_MULT;
 8005e62:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <set_gear+0xdc>)
 8005e64:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <set_gear+0xe8>)
 8005e66:	60da      	str	r2, [r3, #12]
		break;
 8005e68:	e023      	b.n	8005eb2 <set_gear+0xd2>
	case 5:
		gear_speed.spin_mult = GEAR5_YAW_MULT;
 8005e6a:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <set_gear+0xdc>)
 8005e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e70:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR5_SPEED_MULT;
 8005e72:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <set_gear+0xdc>)
 8005e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e78:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR5_ACCEL_MULT;
 8005e7a:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <set_gear+0xdc>)
 8005e7c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005e80:	60da      	str	r2, [r3, #12]
		break;
 8005e82:	e016      	b.n	8005eb2 <set_gear+0xd2>
	case 6:
		gear_speed.spin_mult = GEAR6_YAW_MULT;
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <set_gear+0xdc>)
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <set_gear+0xf0>)
 8005e88:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR6_SPEED_MULT;
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <set_gear+0xdc>)
 8005e8c:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <set_gear+0xf4>)
 8005e8e:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR6_ACCEL_MULT;
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <set_gear+0xdc>)
 8005e92:	4a11      	ldr	r2, [pc, #68]	; (8005ed8 <set_gear+0xf8>)
 8005e94:	60da      	str	r2, [r3, #12]
		break;
 8005e96:	e00c      	b.n	8005eb2 <set_gear+0xd2>
	default:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <set_gear+0xdc>)
 8005e9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e9e:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <set_gear+0xdc>)
 8005ea2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005ea6:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <set_gear+0xdc>)
 8005eaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005eae:	60da      	str	r2, [r3, #12]
		break;
 8005eb0:	bf00      	nop
	}

}
 8005eb2:	bf00      	nop
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	20002f7c 	.word	0x20002f7c
 8005ec0:	3ecccccd 	.word	0x3ecccccd
 8005ec4:	3f333333 	.word	0x3f333333
 8005ec8:	3f99999a 	.word	0x3f99999a
 8005ecc:	3fb33333 	.word	0x3fb33333
 8005ed0:	40400000 	.word	0x40400000
 8005ed4:	40a00000 	.word	0x40a00000
 8005ed8:	41200000 	.word	0x41200000

08005edc <chassis_yaw_pid_init>:

void chassis_yaw_pid_init() {
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <chassis_yaw_pid_init+0x30>)
 8005ee2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005ee6:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 8005ee8:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <chassis_yaw_pid_init+0x30>)
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <chassis_yaw_pid_init+0x30>)
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 8005ef8:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <chassis_yaw_pid_init+0x30>)
 8005efa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005efe:	61da      	str	r2, [r3, #28]
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20002f4c 	.word	0x20002f4c

08005f10 <keyboard_control_input>:

extern int g_spinspin_mode;



void keyboard_control_input() {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 8005f14:	f000 f918 	bl	8006148 <mouse_gimbal_input>
	keyboard_chassis_input();
 8005f18:	f000 f86a 	bl	8005ff0 <keyboard_chassis_input>
	mouse_launcher_control_input();
 8005f1c:	f000 f984 	bl	8006228 <mouse_launcher_control_input>
}
 8005f20:	bf00      	nop
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <keyboard_gear_shifter>:

void keyboard_gear_shifter(speed_shift_t *gear_speed) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if ((remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 8005f2c:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <keyboard_gear_shifter+0xbc>)
 8005f2e:	8b5b      	ldrh	r3, [r3, #26]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d013      	beq.n	8005f60 <keyboard_gear_shifter+0x3c>
			&& (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 8005f38:	4b29      	ldr	r3, [pc, #164]	; (8005fe0 <keyboard_gear_shifter+0xbc>)
 8005f3a:	8b5b      	ldrh	r3, [r3, #26]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <keyboard_gear_shifter+0x3c>
		gear_speed->curr_gear = 3;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2203      	movs	r2, #3
 8005f48:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005f4a:	f008 faf7 	bl	800e53c <HAL_GetTick>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4a24      	ldr	r2, [pc, #144]	; (8005fe4 <keyboard_gear_shifter+0xc0>)
 8005f52:	6013      	str	r3, [r2, #0]
		ctrl_press_time = HAL_GetTick();
 8005f54:	f008 faf2 	bl	800e53c <HAL_GetTick>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <keyboard_gear_shifter+0xc4>)
 8005f5c:	6013      	str	r3, [r2, #0]
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
		}
		ctrl_press_time = HAL_GetTick();
	}

}
 8005f5e:	e03a      	b.n	8005fd6 <keyboard_gear_shifter+0xb2>
	else if (remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT) {
 8005f60:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <keyboard_gear_shifter+0xbc>)
 8005f62:	8b5b      	ldrh	r3, [r3, #26]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <keyboard_gear_shifter+0x78>
		if (HAL_GetTick() - shift_press_time > 100) {
 8005f6c:	f008 fae6 	bl	800e53c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <keyboard_gear_shifter+0xc0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b64      	cmp	r3, #100	; 0x64
 8005f7a:	d909      	bls.n	8005f90 <keyboard_gear_shifter+0x6c>
					(gear_speed->curr_gear < 5) ? gear_speed->curr_gear + 1 : 5;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	bf28      	it	cs
 8005f84:	2304      	movcs	r3, #4
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005f90:	f008 fad4 	bl	800e53c <HAL_GetTick>
 8005f94:	4603      	mov	r3, r0
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <keyboard_gear_shifter+0xc0>)
 8005f98:	6013      	str	r3, [r2, #0]
}
 8005f9a:	e01c      	b.n	8005fd6 <keyboard_gear_shifter+0xb2>
	else if (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL) {
 8005f9c:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <keyboard_gear_shifter+0xbc>)
 8005f9e:	8b5b      	ldrh	r3, [r3, #26]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <keyboard_gear_shifter+0xb2>
		if (HAL_GetTick() - ctrl_press_time > 100) {
 8005fa8:	f008 fac8 	bl	800e53c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <keyboard_gear_shifter+0xc4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b64      	cmp	r3, #100	; 0x64
 8005fb6:	d909      	bls.n	8005fcc <keyboard_gear_shifter+0xa8>
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	bf38      	it	cc
 8005fc0:	2302      	movcc	r3, #2
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	701a      	strb	r2, [r3, #0]
		ctrl_press_time = HAL_GetTick();
 8005fcc:	f008 fab6 	bl	800e53c <HAL_GetTick>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <keyboard_gear_shifter+0xc4>)
 8005fd4:	6013      	str	r3, [r2, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000350 	.word	0x20000350
 8005fe4:	20002f98 	.word	0x20002f98
 8005fe8:	20002f9c 	.word	0x20002f9c
 8005fec:	00000000 	.word	0x00000000

08005ff0 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005ff6:	4b50      	ldr	r3, [pc, #320]	; (8006138 <keyboard_chassis_input+0x148>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <keyboard_chassis_input+0x18>
 8005ffe:	4b4f      	ldr	r3, [pc, #316]	; (800613c <keyboard_chassis_input+0x14c>)
 8006000:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d00f      	beq.n	8006028 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 8006008:	4b4d      	ldr	r3, [pc, #308]	; (8006140 <keyboard_chassis_input+0x150>)
 800600a:	2200      	movs	r2, #0
 800600c:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 800600e:	4b4c      	ldr	r3, [pc, #304]	; (8006140 <keyboard_chassis_input+0x150>)
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8006016:	4b4a      	ldr	r3, [pc, #296]	; (8006140 <keyboard_chassis_input+0x150>)
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 800601e:	4b48      	ldr	r3, [pc, #288]	; (8006140 <keyboard_chassis_input+0x150>)
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8006026:	e07f      	b.n	8006128 <keyboard_chassis_input+0x138>
		if (remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8006028:	4b44      	ldr	r3, [pc, #272]	; (800613c <keyboard_chassis_input+0x14c>)
 800602a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d17a      	bne.n	8006128 <keyboard_chassis_input+0x138>
			chassis_ctrl_data.enabled = 1;
 8006032:	4b43      	ldr	r3, [pc, #268]	; (8006140 <keyboard_chassis_input+0x150>)
 8006034:	2201      	movs	r2, #1
 8006036:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	607b      	str	r3, [r7, #4]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_Q) {
 800604a:	4b3c      	ldr	r3, [pc, #240]	; (800613c <keyboard_chassis_input+0x14c>)
 800604c:	8b5b      	ldrh	r3, [r3, #26]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <keyboard_chassis_input+0x6e>
				g_spinspin_mode = 1;
 8006056:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <keyboard_chassis_input+0x154>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e008      	b.n	8006070 <keyboard_chassis_input+0x80>
			} else if (remote_cmd.keyboard_keys & KEY_OFFSET_E) {
 800605e:	4b37      	ldr	r3, [pc, #220]	; (800613c <keyboard_chassis_input+0x14c>)
 8006060:	8b5b      	ldrh	r3, [r3, #26]
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <keyboard_chassis_input+0x80>
				g_spinspin_mode = 0;
 800606a:	4b36      	ldr	r3, [pc, #216]	; (8006144 <keyboard_chassis_input+0x154>)
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 8006070:	4b32      	ldr	r3, [pc, #200]	; (800613c <keyboard_chassis_input+0x14c>)
 8006072:	8b5b      	ldrh	r3, [r3, #26]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <keyboard_chassis_input+0x9c>
				forward_input += KEYBD_MAX_SPD;
 800607c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006088:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <keyboard_chassis_input+0x14c>)
 800608e:	8b5b      	ldrh	r3, [r3, #26]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <keyboard_chassis_input+0xb8>
				forward_input -= KEYBD_MAX_SPD;
 8006098:	edd7 7a02 	vldr	s15, [r7, #8]
 800609c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060a4:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 80060a8:	4b24      	ldr	r3, [pc, #144]	; (800613c <keyboard_chassis_input+0x14c>)
 80060aa:	8b5b      	ldrh	r3, [r3, #26]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <keyboard_chassis_input+0xd4>
				horizontal_input -= KEYBD_MAX_SPD;
 80060b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80060b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060c0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 80060c4:	4b1d      	ldr	r3, [pc, #116]	; (800613c <keyboard_chassis_input+0x14c>)
 80060c6:	8b5b      	ldrh	r3, [r3, #26]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <keyboard_chassis_input+0xf0>
				horizontal_input += KEYBD_MAX_SPD;
 80060d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80060d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060dc:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_spinspin_mode) {
 80060e0:	4b18      	ldr	r3, [pc, #96]	; (8006144 <keyboard_chassis_input+0x154>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d012      	beq.n	800610e <keyboard_chassis_input+0x11e>
				yaw_input = g_spinspin_mode * CHASSIS_SPINSPIN_MAX;
 80060e8:	4b16      	ldr	r3, [pc, #88]	; (8006144 <keyboard_chassis_input+0x154>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fa fa19 	bl	8000524 <__aeabi_i2d>
 80060f2:	a30f      	add	r3, pc, #60	; (adr r3, 8006130 <keyboard_chassis_input+0x140>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa fa7e 	bl	80005f8 <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f7fa fd70 	bl	8000be8 <__aeabi_d2f>
 8006108:	4603      	mov	r3, r0
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	e003      	b.n	8006116 <keyboard_chassis_input+0x126>
				yaw_input = chassis_center_yaw();
 800610e:	f7ff fc8f 	bl	8005a30 <chassis_center_yaw>
 8006112:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 8006116:	4a0a      	ldr	r2, [pc, #40]	; (8006140 <keyboard_chassis_input+0x150>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 800611c:	4a08      	ldr	r2, [pc, #32]	; (8006140 <keyboard_chassis_input+0x150>)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 8006122:	4a07      	ldr	r2, [pc, #28]	; (8006140 <keyboard_chassis_input+0x150>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6093      	str	r3, [r2, #8]
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	cccccccd 	.word	0xcccccccd
 8006134:	3feccccc 	.word	0x3feccccc
 8006138:	20002f90 	.word	0x20002f90
 800613c:	20000350 	.word	0x20000350
 8006140:	20002f20 	.word	0x20002f20
 8006144:	20002f8c 	.word	0x20002f8c

08006148 <mouse_gimbal_input>:

void mouse_gimbal_input() {
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 800614e:	4b30      	ldr	r3, [pc, #192]	; (8006210 <mouse_gimbal_input+0xc8>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <mouse_gimbal_input+0x18>
 8006156:	4b2f      	ldr	r3, [pc, #188]	; (8006214 <mouse_gimbal_input+0xcc>)
 8006158:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d103      	bne.n	8006168 <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8006160:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <mouse_gimbal_input+0xd0>)
 8006162:	2200      	movs	r2, #0
 8006164:	725a      	strb	r2, [r3, #9]
 8006166:	e04e      	b.n	8006206 <mouse_gimbal_input+0xbe>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8006168:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <mouse_gimbal_input+0xd0>)
 800616a:	2201      	movs	r2, #1
 800616c:	725a      	strb	r2, [r3, #9]
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 800616e:	4b29      	ldr	r3, [pc, #164]	; (8006214 <mouse_gimbal_input+0xcc>)
 8006170:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800617c:	ee17 0a90 	vmov	r0, s15
 8006180:	f7fa f9e2 	bl	8000548 <__aeabi_f2d>
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	4b24      	ldr	r3, [pc, #144]	; (800621c <mouse_gimbal_input+0xd4>)
 800618a:	f7fa fa35 	bl	80005f8 <__aeabi_dmul>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	4b21      	ldr	r3, [pc, #132]	; (8006220 <mouse_gimbal_input+0xd8>)
 800619c:	f7fa fb56 	bl	800084c <__aeabi_ddiv>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	f7fa fd1e 	bl	8000be8 <__aeabi_d2f>
 80061ac:	4603      	mov	r3, r0
 80061ae:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 80061b0:	4b18      	ldr	r3, [pc, #96]	; (8006214 <mouse_gimbal_input+0xcc>)
 80061b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 80061be:	eef1 7a67 	vneg.f32	s15, s15
 80061c2:	ee17 3a90 	vmov	r3, s15
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fa f9be 	bl	8000548 <__aeabi_f2d>
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	4b14      	ldr	r3, [pc, #80]	; (8006224 <mouse_gimbal_input+0xdc>)
 80061d2:	f7fa fa11 	bl	80005f8 <__aeabi_dmul>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <mouse_gimbal_input+0xd8>)
 80061e4:	f7fa fb32 	bl	800084c <__aeabi_ddiv>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 80061ec:	4610      	mov	r0, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	f7fa fcfa 	bl	8000be8 <__aeabi_d2f>
 80061f4:	4603      	mov	r3, r0
 80061f6:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 80061f8:	edd7 0a00 	vldr	s1, [r7]
 80061fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8006200:	f7ff fd94 	bl	8005d2c <gimbal_turn_ang>
	}
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20002f90 	.word	0x20002f90
 8006214:	20000350 	.word	0x20000350
 8006218:	20002f40 	.word	0x20002f40
 800621c:	40240000 	.word	0x40240000
 8006220:	40e00000 	.word	0x40e00000
 8006224:	40340000 	.word	0x40340000

08006228 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
	if (safety_toggle || launcher_safety_toggle
 800622c:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <mouse_launcher_control_input+0xa8>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10d      	bne.n	8006250 <mouse_launcher_control_input+0x28>
 8006234:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <mouse_launcher_control_input+0xac>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <mouse_launcher_control_input+0x28>
			|| remote_cmd.right_switch == ge_RSW_SHUTDOWN
 800623c:	4b26      	ldr	r3, [pc, #152]	; (80062d8 <mouse_launcher_control_input+0xb0>)
 800623e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d004      	beq.n	8006250 <mouse_launcher_control_input+0x28>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8006246:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <mouse_launcher_control_input+0xb0>)
 8006248:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d016      	beq.n	800627e <mouse_launcher_control_input+0x56>
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8006250:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <mouse_launcher_control_input+0xb0>)
 8006252:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d102      	bne.n	8006260 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 800625a:	4b20      	ldr	r3, [pc, #128]	; (80062dc <mouse_launcher_control_input+0xb4>)
 800625c:	2200      	movs	r2, #0
 800625e:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.gun_feeding_speed = 0;
 8006260:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <mouse_launcher_control_input+0xb4>)
 8006262:	2200      	movs	r2, #0
 8006264:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8006266:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <mouse_launcher_control_input+0xb4>)
 8006268:	2200      	movs	r2, #0
 800626a:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <mouse_launcher_control_input+0xb0>)
 800626e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d027      	beq.n	80062c6 <mouse_launcher_control_input+0x9e>
			launcher_safety_toggle = 0;
 8006276:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <mouse_launcher_control_input+0xac>)
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800627c:	e023      	b.n	80062c6 <mouse_launcher_control_input+0x9e>
		}
	} else {
		launcher_ctrl_data.enabled = 1;
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <mouse_launcher_control_input+0xb4>)
 8006280:	2201      	movs	r2, #1
 8006282:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 8006284:	4b15      	ldr	r3, [pc, #84]	; (80062dc <mouse_launcher_control_input+0xb4>)
 8006286:	2201      	movs	r2, #1
 8006288:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <mouse_launcher_control_input+0xb0>)
 800628c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d10b      	bne.n	80062ac <mouse_launcher_control_input+0x84>
			if (remote_cmd.mouse_right) {
 8006294:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <mouse_launcher_control_input+0xb0>)
 8006296:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <mouse_launcher_control_input+0x7e>
				launcher_ctrl_data.override = 1;
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <mouse_launcher_control_input+0xb4>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	711a      	strb	r2, [r3, #4]
 80062a4:	e002      	b.n	80062ac <mouse_launcher_control_input+0x84>
			} else {
				launcher_ctrl_data.override = 0;
 80062a6:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <mouse_launcher_control_input+0xb4>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	711a      	strb	r2, [r3, #4]
			}
		}
		if (remote_cmd.mouse_left) {
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <mouse_launcher_control_input+0xb0>)
 80062ae:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <mouse_launcher_control_input+0x96>
			launcher_ctrl_data.gun_feeding_speed =1;
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <mouse_launcher_control_input+0xb4>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	805a      	strh	r2, [r3, #2]

		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}
}
 80062bc:	e003      	b.n	80062c6 <mouse_launcher_control_input+0x9e>
			launcher_ctrl_data.gun_feeding_speed = 0;
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <mouse_launcher_control_input+0xb4>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	805a      	strh	r2, [r3, #2]
}
 80062c4:	e7ff      	b.n	80062c6 <mouse_launcher_control_input+0x9e>
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20002f90 	.word	0x20002f90
 80062d4:	20002f91 	.word	0x20002f91
 80062d8:	20000350 	.word	0x20000350
 80062dc:	20002f38 	.word	0x20002f38

080062e0 <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 80062e4:	f000 f8d0 	bl	8006488 <remote_gimbal_input>
	remote_chassis_input();
 80062e8:	f000 f87e 	bl	80063e8 <remote_chassis_input>
	remote_launcher_control_input();
 80062ec:	f000 f934 	bl	8006558 <remote_launcher_control_input>
}
 80062f0:	bf00      	nop
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <remote_gear_shifter>:
void remote_gear_shifter(speed_shift_t* gear_speed){
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if (remote_cmd.left_switch == ge_LSW_CONFIG) {
 80062fc:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <remote_gear_shifter+0xe4>)
 80062fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006302:	2b03      	cmp	r3, #3
 8006304:	d164      	bne.n	80063d0 <remote_gear_shifter+0xdc>
		if (remote_cmd.side_dial > 330) {
 8006306:	4b34      	ldr	r3, [pc, #208]	; (80063d8 <remote_gear_shifter+0xe4>)
 8006308:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800630c:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8006310:	dd2c      	ble.n	800636c <remote_gear_shifter+0x78>
			if (HAL_GetTick() - shift_press_time > 100) {
 8006312:	f008 f913 	bl	800e53c <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	4b30      	ldr	r3, [pc, #192]	; (80063dc <remote_gear_shifter+0xe8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b64      	cmp	r3, #100	; 0x64
 8006320:	d91e      	bls.n	8006360 <remote_gear_shifter+0x6c>
				gear_speed->curr_gear =
						(gear_speed->curr_gear < 6) ?
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 8006326:	2b05      	cmp	r3, #5
 8006328:	bf28      	it	cs
 800632a:	2305      	movcs	r3, #5
 800632c:	b2db      	uxtb	r3, r3
 800632e:	3301      	adds	r3, #1
 8006330:	b2da      	uxtb	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	701a      	strb	r2, [r3, #0]
								gear_speed->curr_gear + 1 : 6;
				temp_msg = bz_high;
 8006336:	2306      	movs	r3, #6
 8006338:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
 800633e:	e00a      	b.n	8006356 <remote_gear_shifter+0x62>
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <remote_gear_shifter+0xec>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	f107 010d 	add.w	r1, r7, #13
 8006348:	2300      	movs	r3, #0
 800634a:	2200      	movs	r2, #0
 800634c:	f014 fcf4 	bl	801ad38 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	3301      	adds	r3, #1
 8006354:	73fb      	strb	r3, [r7, #15]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	7bfa      	ldrb	r2, [r7, #15]
 800635c:	429a      	cmp	r2, r3
 800635e:	d3ef      	bcc.n	8006340 <remote_gear_shifter+0x4c>
				}
			}
			shift_press_time = HAL_GetTick();
 8006360:	f008 f8ec 	bl	800e53c <HAL_GetTick>
 8006364:	4603      	mov	r3, r0
 8006366:	4a1d      	ldr	r2, [pc, #116]	; (80063dc <remote_gear_shifter+0xe8>)
 8006368:	6013      	str	r3, [r2, #0]
				}
			}
			ctrl_press_time = HAL_GetTick();
		}
	}
}
 800636a:	e031      	b.n	80063d0 <remote_gear_shifter+0xdc>
		else if (remote_cmd.side_dial < -330) {
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <remote_gear_shifter+0xe4>)
 800636e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006372:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 8006376:	da2b      	bge.n	80063d0 <remote_gear_shifter+0xdc>
			if (HAL_GetTick() - ctrl_press_time > 100) {
 8006378:	f008 f8e0 	bl	800e53c <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <remote_gear_shifter+0xf0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b64      	cmp	r3, #100	; 0x64
 8006386:	d91e      	bls.n	80063c6 <remote_gear_shifter+0xd2>
						(gear_speed->curr_gear > 1) ?
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 800638c:	2b02      	cmp	r3, #2
 800638e:	bf38      	it	cc
 8006390:	2302      	movcc	r3, #2
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	701a      	strb	r2, [r3, #0]
				temp_msg = bz_low;
 800639c:	2307      	movs	r3, #7
 800639e:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 80063a0:	2300      	movs	r3, #0
 80063a2:	73bb      	strb	r3, [r7, #14]
 80063a4:	e00a      	b.n	80063bc <remote_gear_shifter+0xc8>
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <remote_gear_shifter+0xec>)
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f107 010d 	add.w	r1, r7, #13
 80063ae:	2300      	movs	r3, #0
 80063b0:	2200      	movs	r2, #0
 80063b2:	f014 fcc1 	bl	801ad38 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	3301      	adds	r3, #1
 80063ba:	73bb      	strb	r3, [r7, #14]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	7bba      	ldrb	r2, [r7, #14]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d3ef      	bcc.n	80063a6 <remote_gear_shifter+0xb2>
			ctrl_press_time = HAL_GetTick();
 80063c6:	f008 f8b9 	bl	800e53c <HAL_GetTick>
 80063ca:	4603      	mov	r3, r0
 80063cc:	4a05      	ldr	r2, [pc, #20]	; (80063e4 <remote_gear_shifter+0xf0>)
 80063ce:	6013      	str	r3, [r2, #0]
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000350 	.word	0x20000350
 80063dc:	20002fa0 	.word	0x20002fa0
 80063e0:	200004d8 	.word	0x200004d8
 80063e4:	20002fa4 	.word	0x20002fa4

080063e8 <remote_chassis_input>:

void remote_chassis_input() {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <remote_chassis_input+0x8c>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <remote_chassis_input+0x18>
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <remote_chassis_input+0x90>)
 80063f8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d002      	beq.n	8006406 <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 8006400:	f7ff fb58 	bl	8005ab4 <chassis_kill_ctrl>
 8006404:	e032      	b.n	800646c <remote_chassis_input+0x84>
	} else {
			chassis_ctrl_data.enabled = 1;
 8006406:	4b1d      	ldr	r3, [pc, #116]	; (800647c <remote_chassis_input+0x94>)
 8006408:	2201      	movs	r2, #1
 800640a:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	607b      	str	r3, [r7, #4]

			forward_input = (float) remote_cmd.left_y / RC_LIMITS;
 800641e:	4b16      	ldr	r3, [pc, #88]	; (8006478 <remote_chassis_input+0x90>)
 8006420:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800642c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006480 <remote_chassis_input+0x98>
 8006430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006434:	edc7 7a02 	vstr	s15, [r7, #8]
			horizontal_input = (float) remote_cmd.left_x / RC_LIMITS;
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <remote_chassis_input+0x90>)
 800643a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006446:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006480 <remote_chassis_input+0x98>
 800644a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800644e:	edc7 7a03 	vstr	s15, [r7, #12]
			yaw_input = chassis_center_yaw();
 8006452:	f7ff faed 	bl	8005a30 <chassis_center_yaw>
 8006456:	ed87 0a01 	vstr	s0, [r7, #4]
//yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 800645a:	ed97 1a01 	vldr	s2, [r7, #4]
 800645e:	edd7 0a03 	vldr	s1, [r7, #12]
 8006462:	ed97 0a02 	vldr	s0, [r7, #8]
 8006466:	f7ff fb07 	bl	8005a78 <chassis_set_ctrl>
	}
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20002f90 	.word	0x20002f90
 8006478:	20000350 	.word	0x20000350
 800647c:	20002f20 	.word	0x20002f20
 8006480:	44250000 	.word	0x44250000
 8006484:	00000000 	.word	0x00000000

08006488 <remote_gimbal_input>:

void remote_gimbal_input() {
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 800648e:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <remote_gimbal_input+0xc0>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <remote_gimbal_input+0x18>
 8006496:	4b2d      	ldr	r3, [pc, #180]	; (800654c <remote_gimbal_input+0xc4>)
 8006498:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d103      	bne.n	80064a8 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 80064a0:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <remote_gimbal_input+0xc8>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	725a      	strb	r2, [r3, #9]
 80064a6:	e047      	b.n	8006538 <remote_gimbal_input+0xb0>
	} else {
		gimbal_ctrl_data.enabled = 1;
 80064a8:	4b29      	ldr	r3, [pc, #164]	; (8006550 <remote_gimbal_input+0xc8>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	725a      	strb	r2, [r3, #9]
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 80064ae:	4b27      	ldr	r3, [pc, #156]	; (800654c <remote_gimbal_input+0xc4>)
 80064b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064bc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006554 <remote_gimbal_input+0xcc>
 80064c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064c4:	eef1 7a67 	vneg.f32	s15, s15
 80064c8:	ee17 3a90 	vmov	r3, s15
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fa f83b 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 80064d2:	a31b      	add	r3, pc, #108	; (adr r3, 8006540 <remote_gimbal_input+0xb8>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	f7fa fb80 	bl	8000be8 <__aeabi_d2f>
 80064e8:	4603      	mov	r3, r0
 80064ea:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 80064ec:	4b17      	ldr	r3, [pc, #92]	; (800654c <remote_gimbal_input+0xc4>)
 80064ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064fa:	eddf 6a16 	vldr	s13, [pc, #88]	; 8006554 <remote_gimbal_input+0xcc>
 80064fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006502:	eef1 7a67 	vneg.f32	s15, s15
 8006506:	ee17 3a90 	vmov	r3, s15
 800650a:	4618      	mov	r0, r3
 800650c:	f7fa f81c 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 8006510:	a30b      	add	r3, pc, #44	; (adr r3, 8006540 <remote_gimbal_input+0xb8>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	f7fa fb61 	bl	8000be8 <__aeabi_d2f>
 8006526:	4603      	mov	r3, r0
 8006528:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 800652a:	edd7 0a00 	vldr	s1, [r7]
 800652e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006532:	f7ff fbfb 	bl	8005d2c <gimbal_turn_ang>
	}
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	9999999a 	.word	0x9999999a
 8006544:	3fa99999 	.word	0x3fa99999
 8006548:	20002f90 	.word	0x20002f90
 800654c:	20000350 	.word	0x20000350
 8006550:	20002f40 	.word	0x20002f40
 8006554:	44250000 	.word	0x44250000

08006558 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <remote_launcher_control_input+0x7c>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <remote_launcher_control_input+0x20>
 8006564:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <remote_launcher_control_input+0x80>)
 8006566:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d004      	beq.n	8006578 <remote_launcher_control_input+0x20>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 800656e:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <remote_launcher_control_input+0x80>)
 8006570:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d016      	beq.n	80065a6 <remote_launcher_control_input+0x4e>
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <remote_launcher_control_input+0x80>)
 800657a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d002      	beq.n	8006588 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 8006582:	4b16      	ldr	r3, [pc, #88]	; (80065dc <remote_launcher_control_input+0x84>)
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
		}
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <remote_launcher_control_input+0x80>)
 800658a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d102      	bne.n	8006598 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <remote_launcher_control_input+0x88>)
 8006594:	2200      	movs	r2, #0
 8006596:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.gun_feeding_speed = 0;
 8006598:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <remote_launcher_control_input+0x88>)
 800659a:	2200      	movs	r2, #0
 800659c:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <remote_launcher_control_input+0x88>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}

}
 80065a4:	e011      	b.n	80065ca <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 80065a6:	4b0e      	ldr	r3, [pc, #56]	; (80065e0 <remote_launcher_control_input+0x88>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <remote_launcher_control_input+0x88>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <remote_launcher_control_input+0x80>)
 80065b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d103      	bne.n	80065c4 <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.gun_feeding_speed = 1;
 80065bc:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <remote_launcher_control_input+0x88>)
 80065be:	2201      	movs	r2, #1
 80065c0:	805a      	strh	r2, [r3, #2]
}
 80065c2:	e002      	b.n	80065ca <remote_launcher_control_input+0x72>
			launcher_ctrl_data.gun_feeding_speed = 0;
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <remote_launcher_control_input+0x88>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	805a      	strh	r2, [r3, #2]
}
 80065ca:	bf00      	nop
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	20002f90 	.word	0x20002f90
 80065d8:	20000350 	.word	0x20000350
 80065dc:	20002f91 	.word	0x20002f91
 80065e0:	20002f38 	.word	0x20002f38

080065e4 <aimbot_pid_init>:
		sbc_new_data = 0;
		control_reset();
	}
}

void aimbot_pid_init() {
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
	aimbot_offset.y_offset = 0;
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <aimbot_pid_init+0x70>)
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	605a      	str	r2, [r3, #4]
	aimbot_offset.x_offset = 0;
 80065f0:	4b18      	ldr	r3, [pc, #96]	; (8006654 <aimbot_pid_init+0x70>)
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.kp = AIMBOT_X_KP;
 80065f8:	4b17      	ldr	r3, [pc, #92]	; (8006658 <aimbot_pid_init+0x74>)
 80065fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80065fe:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.ki = AIMBOT_X_KI;
 8006600:	4b15      	ldr	r3, [pc, #84]	; (8006658 <aimbot_pid_init+0x74>)
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	605a      	str	r2, [r3, #4]
	aimbot_x_pid.kd = AIMBOT_X_KD;
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <aimbot_pid_init+0x74>)
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	609a      	str	r2, [r3, #8]
	aimbot_x_pid.max_out = 1.5;
 8006610:	4b11      	ldr	r3, [pc, #68]	; (8006658 <aimbot_pid_init+0x74>)
 8006612:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8006616:	61da      	str	r2, [r3, #28]
	aimbot_x_pid.int_max = AIMBOT_KI_MAX;
 8006618:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <aimbot_pid_init+0x74>)
 800661a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800661e:	619a      	str	r2, [r3, #24]

	aimbot_y_pid.kp = AIMBOT_Y_KP;
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <aimbot_pid_init+0x78>)
 8006622:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006626:	601a      	str	r2, [r3, #0]
	aimbot_y_pid.ki = AIMBOT_Y_KI;
 8006628:	4b0c      	ldr	r3, [pc, #48]	; (800665c <aimbot_pid_init+0x78>)
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	605a      	str	r2, [r3, #4]
	aimbot_y_pid.kd = AIMBOT_Y_KD;
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <aimbot_pid_init+0x78>)
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	609a      	str	r2, [r3, #8]
	aimbot_y_pid.max_out = 1.5;
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <aimbot_pid_init+0x78>)
 800663a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800663e:	61da      	str	r2, [r3, #28]
	aimbot_y_pid.int_max = AIMBOT_KI_MAX;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <aimbot_pid_init+0x78>)
 8006642:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006646:	619a      	str	r2, [r3, #24]
}
 8006648:	bf00      	nop
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000300c 	.word	0x2000300c
 8006658:	20002fd8 	.word	0x20002fd8
 800665c:	20002fa8 	.word	0x20002fa8

08006660 <hud_task>:
ref_inter_robot_data_t graphic_header;
graphic_data_struct_t graphic_data;
ref_frame_header_t send_header;
uint8_t char_buffer[30];

void hud_task(void *argument) {
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]

	enum drawings {
		spinspin, gearing, robot_state, motor_fault, refresh

	};
	while (ref_robot_data.robot_id == 0) {
 8006668:	e002      	b.n	8006670 <hud_task+0x10>
		vTaskDelay(10);
 800666a:	200a      	movs	r0, #10
 800666c:	f015 fa10 	bl	801ba90 <vTaskDelay>
	while (ref_robot_data.robot_id == 0) {
 8006670:	4b69      	ldr	r3, [pc, #420]	; (8006818 <hud_task+0x1b8>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f8      	beq.n	800666a <hud_task+0xa>
	}
	uint32_t refresh_timer = HAL_GetTick();
 8006678:	f007 ff60 	bl	800e53c <HAL_GetTick>
 800667c:	60f8      	str	r0, [r7, #12]

	uint8_t draw_state = spinspin;
 800667e:	2300      	movs	r3, #0
 8006680:	72fb      	strb	r3, [r7, #11]
	//draw all images
	vTaskDelay(1000);
 8006682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006686:	f015 fa03 	bl	801ba90 <vTaskDelay>
	clear_hud();
 800668a:	f000 fb29 	bl	8006ce0 <clear_hud>
	vTaskDelay(150);
 800668e:	2096      	movs	r0, #150	; 0x96
 8006690:	f015 f9fe 	bl	801ba90 <vTaskDelay>
	draw_spinspin(0);
 8006694:	2000      	movs	r0, #0
 8006696:	f000 f8c3 	bl	8006820 <draw_spinspin>
	vTaskDelay(150);
 800669a:	2096      	movs	r0, #150	; 0x96
 800669c:	f015 f9f8 	bl	801ba90 <vTaskDelay>
	draw_gearing(0);
 80066a0:	2000      	movs	r0, #0
 80066a2:	f000 f9f5 	bl	8006a90 <draw_gearing>
	vTaskDelay(150);
 80066a6:	2096      	movs	r0, #150	; 0x96
 80066a8:	f015 f9f2 	bl	801ba90 <vTaskDelay>
	while (1) {
		if (HAL_GetTick() - refresh_timer > 5000){
 80066ac:	f007 ff46 	bl	800e53c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d904      	bls.n	80066c8 <hud_task+0x68>
			draw_state = refresh;
 80066be:	2304      	movs	r3, #4
 80066c0:	72fb      	strb	r3, [r7, #11]
			refresh_timer = HAL_GetTick();
 80066c2:	f007 ff3b 	bl	800e53c <HAL_GetTick>
 80066c6:	60f8      	str	r0, [r7, #12]
		}
		switch (ref_robot_data.robot_id) {
 80066c8:	4b53      	ldr	r3, [pc, #332]	; (8006818 <hud_task+0x1b8>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b06      	cmp	r3, #6
 80066ce:	dc27      	bgt.n	8006720 <hud_task+0xc0>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dc13      	bgt.n	80066fc <hud_task+0x9c>
 80066d4:	e065      	b.n	80067a2 <hud_task+0x142>
 80066d6:	3b65      	subs	r3, #101	; 0x65
 80066d8:	2b05      	cmp	r3, #5
 80066da:	d862      	bhi.n	80067a2 <hud_task+0x142>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <hud_task+0x84>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006767 	.word	0x08006767
 80066e8:	08006771 	.word	0x08006771
 80066ec:	0800677b 	.word	0x0800677b
 80066f0:	08006785 	.word	0x08006785
 80066f4:	0800678f 	.word	0x0800678f
 80066f8:	08006799 	.word	0x08006799
 80066fc:	3b01      	subs	r3, #1
 80066fe:	2b05      	cmp	r3, #5
 8006700:	d84f      	bhi.n	80067a2 <hud_task+0x142>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <hud_task+0xa8>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800672b 	.word	0x0800672b
 800670c:	08006735 	.word	0x08006735
 8006710:	0800673f 	.word	0x0800673f
 8006714:	08006749 	.word	0x08006749
 8006718:	08006753 	.word	0x08006753
 800671c:	0800675d 	.word	0x0800675d
 8006720:	2b6a      	cmp	r3, #106	; 0x6a
 8006722:	dc3e      	bgt.n	80067a2 <hud_task+0x142>
 8006724:	2b65      	cmp	r3, #101	; 0x65
 8006726:	dad6      	bge.n	80066d6 <hud_task+0x76>
 8006728:	e03b      	b.n	80067a2 <hud_task+0x142>
		case 1:
			g_client_id = 0x101;
 800672a:	4b3c      	ldr	r3, [pc, #240]	; (800681c <hud_task+0x1bc>)
 800672c:	f240 1201 	movw	r2, #257	; 0x101
 8006730:	801a      	strh	r2, [r3, #0]
			break;
 8006732:	e03a      	b.n	80067aa <hud_task+0x14a>
		case 2:
			g_client_id = 0x102;
 8006734:	4b39      	ldr	r3, [pc, #228]	; (800681c <hud_task+0x1bc>)
 8006736:	f44f 7281 	mov.w	r2, #258	; 0x102
 800673a:	801a      	strh	r2, [r3, #0]
			break;
 800673c:	e035      	b.n	80067aa <hud_task+0x14a>
		case 3:
			g_client_id = 0x103;
 800673e:	4b37      	ldr	r3, [pc, #220]	; (800681c <hud_task+0x1bc>)
 8006740:	f240 1203 	movw	r2, #259	; 0x103
 8006744:	801a      	strh	r2, [r3, #0]
			break;
 8006746:	e030      	b.n	80067aa <hud_task+0x14a>
		case 4:
			g_client_id = 0x104;
 8006748:	4b34      	ldr	r3, [pc, #208]	; (800681c <hud_task+0x1bc>)
 800674a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800674e:	801a      	strh	r2, [r3, #0]
			break;
 8006750:	e02b      	b.n	80067aa <hud_task+0x14a>
		case 5:
			g_client_id = 0x105;
 8006752:	4b32      	ldr	r3, [pc, #200]	; (800681c <hud_task+0x1bc>)
 8006754:	f240 1205 	movw	r2, #261	; 0x105
 8006758:	801a      	strh	r2, [r3, #0]
			break;
 800675a:	e026      	b.n	80067aa <hud_task+0x14a>
		case 6:
			g_client_id = 0x106;
 800675c:	4b2f      	ldr	r3, [pc, #188]	; (800681c <hud_task+0x1bc>)
 800675e:	f44f 7283 	mov.w	r2, #262	; 0x106
 8006762:	801a      	strh	r2, [r3, #0]
			break;
 8006764:	e021      	b.n	80067aa <hud_task+0x14a>

		case 101:
			g_client_id = 0x165;
 8006766:	4b2d      	ldr	r3, [pc, #180]	; (800681c <hud_task+0x1bc>)
 8006768:	f240 1265 	movw	r2, #357	; 0x165
 800676c:	801a      	strh	r2, [r3, #0]
			break;
 800676e:	e01c      	b.n	80067aa <hud_task+0x14a>
		case 102:
			g_client_id = 0x166;
 8006770:	4b2a      	ldr	r3, [pc, #168]	; (800681c <hud_task+0x1bc>)
 8006772:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8006776:	801a      	strh	r2, [r3, #0]
			break;
 8006778:	e017      	b.n	80067aa <hud_task+0x14a>
		case 103:
			g_client_id = 0x167;
 800677a:	4b28      	ldr	r3, [pc, #160]	; (800681c <hud_task+0x1bc>)
 800677c:	f240 1267 	movw	r2, #359	; 0x167
 8006780:	801a      	strh	r2, [r3, #0]
			break;
 8006782:	e012      	b.n	80067aa <hud_task+0x14a>
		case 104:
			g_client_id = 0x168;
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <hud_task+0x1bc>)
 8006786:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800678a:	801a      	strh	r2, [r3, #0]
			break;
 800678c:	e00d      	b.n	80067aa <hud_task+0x14a>
		case 105:
			g_client_id = 0x169;
 800678e:	4b23      	ldr	r3, [pc, #140]	; (800681c <hud_task+0x1bc>)
 8006790:	f240 1269 	movw	r2, #361	; 0x169
 8006794:	801a      	strh	r2, [r3, #0]
			break;
 8006796:	e008      	b.n	80067aa <hud_task+0x14a>
		case 106:
			g_client_id = 0x16A;
 8006798:	4b20      	ldr	r3, [pc, #128]	; (800681c <hud_task+0x1bc>)
 800679a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800679e:	801a      	strh	r2, [r3, #0]
			break;
 80067a0:	e003      	b.n	80067aa <hud_task+0x14a>
		default:
			g_client_id = 0;
 80067a2:	4b1e      	ldr	r3, [pc, #120]	; (800681c <hud_task+0x1bc>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	801a      	strh	r2, [r3, #0]
			break;
 80067a8:	bf00      	nop

		}



		switch (draw_state) {
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d82d      	bhi.n	800680c <hud_task+0x1ac>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <hud_task+0x158>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067cd 	.word	0x080067cd
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	0800680d 	.word	0x0800680d
 80067c4:	0800680d 	.word	0x0800680d
 80067c8:	080067e5 	.word	0x080067e5
		case spinspin:
			draw_spinspin(1);
 80067cc:	2001      	movs	r0, #1
 80067ce:	f000 f827 	bl	8006820 <draw_spinspin>
			draw_state = gearing;
 80067d2:	2301      	movs	r3, #1
 80067d4:	72fb      	strb	r3, [r7, #11]
			break;
 80067d6:	e01a      	b.n	800680e <hud_task+0x1ae>
		case gearing:
			draw_gearing(1);
 80067d8:	2001      	movs	r0, #1
 80067da:	f000 f959 	bl	8006a90 <draw_gearing>
			draw_state = spinspin;
 80067de:	2300      	movs	r3, #0
 80067e0:	72fb      	strb	r3, [r7, #11]
			break;
 80067e2:	e014      	b.n	800680e <hud_task+0x1ae>
		case robot_state:
			break;
		case motor_fault:
			break;
		case refresh:
			clear_hud();
 80067e4:	f000 fa7c 	bl	8006ce0 <clear_hud>
			vTaskDelay(150);
 80067e8:	2096      	movs	r0, #150	; 0x96
 80067ea:	f015 f951 	bl	801ba90 <vTaskDelay>
			draw_spinspin(0);
 80067ee:	2000      	movs	r0, #0
 80067f0:	f000 f816 	bl	8006820 <draw_spinspin>
			vTaskDelay(150);
 80067f4:	2096      	movs	r0, #150	; 0x96
 80067f6:	f015 f94b 	bl	801ba90 <vTaskDelay>
			draw_gearing(0);
 80067fa:	2000      	movs	r0, #0
 80067fc:	f000 f948 	bl	8006a90 <draw_gearing>
			vTaskDelay(150);
 8006800:	2096      	movs	r0, #150	; 0x96
 8006802:	f015 f945 	bl	801ba90 <vTaskDelay>
			draw_state = spinspin;
 8006806:	2300      	movs	r3, #0
 8006808:	72fb      	strb	r3, [r7, #11]
			break;
 800680a:	e000      	b.n	800680e <hud_task+0x1ae>
		default:
			break;
 800680c:	bf00      	nop
		}
		vTaskDelay(150);
 800680e:	2096      	movs	r0, #150	; 0x96
 8006810:	f015 f93e 	bl	801ba90 <vTaskDelay>
		if (HAL_GetTick() - refresh_timer > 5000){
 8006814:	e74a      	b.n	80066ac <hud_task+0x4c>
 8006816:	bf00      	nop
 8006818:	20003294 	.word	0x20003294
 800681c:	20003014 	.word	0x20003014

08006820 <draw_spinspin>:
	}
}

void draw_spinspin(uint8_t modify) {
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
	uint8_t char_len = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
	curr_pos = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	60bb      	str	r3, [r7, #8]
	if (g_spinspin_mode == 0) {
 8006836:	4b8a      	ldr	r3, [pc, #552]	; (8006a60 <draw_spinspin+0x240>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <draw_spinspin+0x3a>
		graphic_data.color = 4; //orange
 800683e:	4a89      	ldr	r2, [pc, #548]	; (8006a64 <draw_spinspin+0x244>)
 8006840:	7913      	ldrb	r3, [r2, #4]
 8006842:	2104      	movs	r1, #4
 8006844:	f361 0385 	bfi	r3, r1, #2, #4
 8006848:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN OFF");
 800684a:	4a87      	ldr	r2, [pc, #540]	; (8006a68 <draw_spinspin+0x248>)
 800684c:	211e      	movs	r1, #30
 800684e:	4887      	ldr	r0, [pc, #540]	; (8006a6c <draw_spinspin+0x24c>)
 8006850:	f018 fe26 	bl	801f4a0 <sniprintf>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	e00c      	b.n	8006874 <draw_spinspin+0x54>
	} else {
		graphic_data.color = 3; //orange
 800685a:	4a82      	ldr	r2, [pc, #520]	; (8006a64 <draw_spinspin+0x244>)
 800685c:	7913      	ldrb	r3, [r2, #4]
 800685e:	2103      	movs	r1, #3
 8006860:	f361 0385 	bfi	r3, r1, #2, #4
 8006864:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN ON");
 8006866:	4a82      	ldr	r2, [pc, #520]	; (8006a70 <draw_spinspin+0x250>)
 8006868:	211e      	movs	r1, #30
 800686a:	4880      	ldr	r0, [pc, #512]	; (8006a6c <draw_spinspin+0x24c>)
 800686c:	f018 fe18 	bl	801f4a0 <sniprintf>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
	}
	send_header.start_frame = 0xA5;
 8006874:	4b7f      	ldr	r3, [pc, #508]	; (8006a74 <draw_spinspin+0x254>)
 8006876:	22a5      	movs	r2, #165	; 0xa5
 8006878:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 800687a:	4b7e      	ldr	r3, [pc, #504]	; (8006a74 <draw_spinspin+0x254>)
 800687c:	2200      	movs	r2, #0
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	715a      	strb	r2, [r3, #5]
 8006884:	2200      	movs	r2, #0
 8006886:	f042 0203 	orr.w	r2, r2, #3
 800688a:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 800688c:	4b7a      	ldr	r3, [pc, #488]	; (8006a78 <draw_spinspin+0x258>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	b2d1      	uxtb	r1, r2
 8006894:	4a78      	ldr	r2, [pc, #480]	; (8006a78 <draw_spinspin+0x258>)
 8006896:	7011      	strb	r1, [r2, #0]
 8006898:	4a76      	ldr	r2, [pc, #472]	; (8006a74 <draw_spinspin+0x254>)
 800689a:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3315      	adds	r3, #21
 80068a2:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 80068a4:	4b73      	ldr	r3, [pc, #460]	; (8006a74 <draw_spinspin+0x254>)
 80068a6:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 80068aa:	4b73      	ldr	r3, [pc, #460]	; (8006a78 <draw_spinspin+0x258>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	b2d1      	uxtb	r1, r2
 80068b2:	4a71      	ldr	r2, [pc, #452]	; (8006a78 <draw_spinspin+0x258>)
 80068b4:	7011      	strb	r1, [r2, #0]
 80068b6:	4a6f      	ldr	r2, [pc, #444]	; (8006a74 <draw_spinspin+0x254>)
 80068b8:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a6f      	ldr	r2, [pc, #444]	; (8006a7c <draw_spinspin+0x25c>)
 80068be:	4413      	add	r3, r2
 80068c0:	4a6c      	ldr	r2, [pc, #432]	; (8006a74 <draw_spinspin+0x254>)
 80068c2:	6810      	ldr	r0, [r2, #0]
 80068c4:	6018      	str	r0, [r3, #0]
 80068c6:	8891      	ldrh	r1, [r2, #4]
 80068c8:	7992      	ldrb	r2, [r2, #6]
 80068ca:	8099      	strh	r1, [r3, #4]
 80068cc:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3307      	adds	r3, #7
 80068d2:	60bb      	str	r3, [r7, #8]
	append_CRC8_check_sum(tx_buffer, 5);
 80068d4:	2105      	movs	r1, #5
 80068d6:	4869      	ldr	r0, [pc, #420]	; (8006a7c <draw_spinspin+0x25c>)
 80068d8:	f7fa fbd7 	bl	800108a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 80068dc:	4b68      	ldr	r3, [pc, #416]	; (8006a80 <draw_spinspin+0x260>)
 80068de:	f44f 7288 	mov.w	r2, #272	; 0x110
 80068e2:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 80068e4:	4b67      	ldr	r3, [pc, #412]	; (8006a84 <draw_spinspin+0x264>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	4b65      	ldr	r3, [pc, #404]	; (8006a80 <draw_spinspin+0x260>)
 80068ec:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 80068ee:	4b66      	ldr	r3, [pc, #408]	; (8006a88 <draw_spinspin+0x268>)
 80068f0:	881a      	ldrh	r2, [r3, #0]
 80068f2:	4b63      	ldr	r3, [pc, #396]	; (8006a80 <draw_spinspin+0x260>)
 80068f4:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a60      	ldr	r2, [pc, #384]	; (8006a7c <draw_spinspin+0x25c>)
 80068fa:	4413      	add	r3, r2
 80068fc:	4a60      	ldr	r2, [pc, #384]	; (8006a80 <draw_spinspin+0x260>)
 80068fe:	6810      	ldr	r0, [r2, #0]
 8006900:	6018      	str	r0, [r3, #0]
 8006902:	8892      	ldrh	r2, [r2, #4]
 8006904:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	3306      	adds	r3, #6
 800690a:	60bb      	str	r3, [r7, #8]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 800690c:	4b55      	ldr	r3, [pc, #340]	; (8006a64 <draw_spinspin+0x244>)
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 8006912:	4b54      	ldr	r3, [pc, #336]	; (8006a64 <draw_spinspin+0x244>)
 8006914:	2200      	movs	r2, #0
 8006916:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 1;
 8006918:	4b52      	ldr	r3, [pc, #328]	; (8006a64 <draw_spinspin+0x244>)
 800691a:	2201      	movs	r2, #1
 800691c:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 800691e:	4b51      	ldr	r3, [pc, #324]	; (8006a64 <draw_spinspin+0x244>)
 8006920:	78da      	ldrb	r2, [r3, #3]
 8006922:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006926:	70da      	strb	r2, [r3, #3]
 8006928:	791a      	ldrb	r2, [r3, #4]
 800692a:	f022 0203 	bic.w	r2, r2, #3
 800692e:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d106      	bne.n	8006944 <draw_spinspin+0x124>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006936:	4a4b      	ldr	r2, [pc, #300]	; (8006a64 <draw_spinspin+0x244>)
 8006938:	78d3      	ldrb	r3, [r2, #3]
 800693a:	2102      	movs	r1, #2
 800693c:	f361 0302 	bfi	r3, r1, #0, #3
 8006940:	70d3      	strb	r3, [r2, #3]
 8006942:	e005      	b.n	8006950 <draw_spinspin+0x130>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006944:	4a47      	ldr	r2, [pc, #284]	; (8006a64 <draw_spinspin+0x244>)
 8006946:	78d3      	ldrb	r3, [r2, #3]
 8006948:	2101      	movs	r1, #1
 800694a:	f361 0302 	bfi	r3, r1, #0, #3
 800694e:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8006950:	4a44      	ldr	r2, [pc, #272]	; (8006a64 <draw_spinspin+0x244>)
 8006952:	78d3      	ldrb	r3, [r2, #3]
 8006954:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006958:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 800695a:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <draw_spinspin+0x244>)
 800695c:	791a      	ldrb	r2, [r3, #4]
 800695e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006966:	711a      	strb	r2, [r3, #4]
 8006968:	795a      	ldrb	r2, [r3, #5]
 800696a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800696e:	f042 0207 	orr.w	r2, r2, #7
 8006972:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697a:	b29a      	uxth	r2, r3
 800697c:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <draw_spinspin+0x244>)
 800697e:	f002 0101 	and.w	r1, r2, #1
 8006982:	01cc      	lsls	r4, r1, #7
 8006984:	7959      	ldrb	r1, [r3, #5]
 8006986:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800698a:	4608      	mov	r0, r1
 800698c:	4621      	mov	r1, r4
 800698e:	4301      	orrs	r1, r0
 8006990:	7159      	strb	r1, [r3, #5]
 8006992:	0852      	lsrs	r2, r2, #1
 8006994:	b292      	uxth	r2, r2
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	2100      	movs	r1, #0
 800699a:	430a      	orrs	r2, r1
 800699c:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 800699e:	4b31      	ldr	r3, [pc, #196]	; (8006a64 <draw_spinspin+0x244>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	f042 0207 	orr.w	r2, r2, #7
 80069a6:	71da      	strb	r2, [r3, #7]
 80069a8:	7a1a      	ldrb	r2, [r3, #8]
 80069aa:	f022 0203 	bic.w	r2, r2, #3
 80069ae:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 80069b0:	4b2c      	ldr	r3, [pc, #176]	; (8006a64 <draw_spinspin+0x244>)
 80069b2:	78da      	ldrb	r2, [r3, #3]
 80069b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80069b8:	70da      	strb	r2, [r3, #3]
 80069ba:	791a      	ldrb	r2, [r3, #4]
 80069bc:	f022 0203 	bic.w	r2, r2, #3
 80069c0:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 80069c2:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <draw_spinspin+0x244>)
 80069c4:	7a1a      	ldrb	r2, [r3, #8]
 80069c6:	f002 0203 	and.w	r2, r2, #3
 80069ca:	f062 0237 	orn	r2, r2, #55	; 0x37
 80069ce:	721a      	strb	r2, [r3, #8]
 80069d0:	7a5a      	ldrb	r2, [r3, #9]
 80069d2:	f022 021f 	bic.w	r2, r2, #31
 80069d6:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 600;
 80069d8:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <draw_spinspin+0x244>)
 80069da:	7a5a      	ldrb	r2, [r3, #9]
 80069dc:	f002 021f 	and.w	r2, r2, #31
 80069e0:	725a      	strb	r2, [r3, #9]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 80069e8:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4a23      	ldr	r2, [pc, #140]	; (8006a7c <draw_spinspin+0x25c>)
 80069ee:	4413      	add	r3, r2
 80069f0:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <draw_spinspin+0x244>)
 80069f2:	461c      	mov	r4, r3
 80069f4:	4613      	mov	r3, r2
 80069f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069f8:	6020      	str	r0, [r4, #0]
 80069fa:	6061      	str	r1, [r4, #4]
 80069fc:	60a2      	str	r2, [r4, #8]
 80069fe:	881a      	ldrh	r2, [r3, #0]
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	81a2      	strh	r2, [r4, #12]
 8006a04:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	330f      	adds	r3, #15
 8006a0a:	60bb      	str	r3, [r7, #8]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4a1b      	ldr	r2, [pc, #108]	; (8006a7c <draw_spinspin+0x25c>)
 8006a10:	4413      	add	r3, r2
 8006a12:	7bfa      	ldrb	r2, [r7, #15]
 8006a14:	4915      	ldr	r1, [pc, #84]	; (8006a6c <draw_spinspin+0x24c>)
 8006a16:	4618      	mov	r0, r3
 8006a18:	f017 fd9d 	bl	801e556 <memcpy>
	curr_pos += char_len;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	3302      	adds	r3, #2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4814      	ldr	r0, [pc, #80]	; (8006a7c <draw_spinspin+0x25c>)
 8006a2c:	f7fa fbb0 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006a30:	e002      	b.n	8006a38 <draw_spinspin+0x218>
		vTaskDelay(1);
 8006a32:	2001      	movs	r0, #1
 8006a34:	f015 f82c 	bl	801ba90 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006a38:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <draw_spinspin+0x26c>)
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d1f6      	bne.n	8006a32 <draw_spinspin+0x212>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3302      	adds	r3, #2
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	490b      	ldr	r1, [pc, #44]	; (8006a7c <draw_spinspin+0x25c>)
 8006a50:	480e      	ldr	r0, [pc, #56]	; (8006a8c <draw_spinspin+0x26c>)
 8006a52:	f00f f8a5 	bl	8015ba0 <HAL_UART_Transmit_DMA>
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd90      	pop	{r4, r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20002f8c 	.word	0x20002f8c
 8006a64:	20003120 	.word	0x20003120
 8006a68:	080257d8 	.word	0x080257d8
 8006a6c:	20003138 	.word	0x20003138
 8006a70:	080257e4 	.word	0x080257e4
 8006a74:	20003130 	.word	0x20003130
 8006a78:	200032fc 	.word	0x200032fc
 8006a7c:	20003018 	.word	0x20003018
 8006a80:	20003118 	.word	0x20003118
 8006a84:	20003294 	.word	0x20003294
 8006a88:	20003014 	.word	0x20003014
 8006a8c:	200016d8 	.word	0x200016d8

08006a90 <draw_gearing>:

void draw_gearing(uint8_t modify) {
 8006a90:	b590      	push	{r4, r7, lr}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
	graphic_data.color = 6; //CYAN
 8006aa6:	4a83      	ldr	r2, [pc, #524]	; (8006cb4 <draw_gearing+0x224>)
 8006aa8:	7913      	ldrb	r3, [r2, #4]
 8006aaa:	2106      	movs	r1, #6
 8006aac:	f361 0385 	bfi	r3, r1, #2, #4
 8006ab0:	7113      	strb	r3, [r2, #4]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 8006ab2:	4b81      	ldr	r3, [pc, #516]	; (8006cb8 <draw_gearing+0x228>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	4a81      	ldr	r2, [pc, #516]	; (8006cbc <draw_gearing+0x22c>)
 8006ab8:	211e      	movs	r1, #30
 8006aba:	4881      	ldr	r0, [pc, #516]	; (8006cc0 <draw_gearing+0x230>)
 8006abc:	f018 fcf0 	bl	801f4a0 <sniprintf>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	72fb      	strb	r3, [r7, #11]
	send_header.start_frame = 0xA5;
 8006ac4:	4b7f      	ldr	r3, [pc, #508]	; (8006cc4 <draw_gearing+0x234>)
 8006ac6:	22a5      	movs	r2, #165	; 0xa5
 8006ac8:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8006aca:	4b7e      	ldr	r3, [pc, #504]	; (8006cc4 <draw_gearing+0x234>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	715a      	strb	r2, [r3, #5]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f042 0203 	orr.w	r2, r2, #3
 8006ada:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8006adc:	4b7a      	ldr	r3, [pc, #488]	; (8006cc8 <draw_gearing+0x238>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	b2d1      	uxtb	r1, r2
 8006ae4:	4a78      	ldr	r2, [pc, #480]	; (8006cc8 <draw_gearing+0x238>)
 8006ae6:	7011      	strb	r1, [r2, #0]
 8006ae8:	4a76      	ldr	r2, [pc, #472]	; (8006cc4 <draw_gearing+0x234>)
 8006aea:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3315      	adds	r3, #21
 8006af2:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 8006af4:	4b73      	ldr	r3, [pc, #460]	; (8006cc4 <draw_gearing+0x234>)
 8006af6:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8006afa:	4b73      	ldr	r3, [pc, #460]	; (8006cc8 <draw_gearing+0x238>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	b2d1      	uxtb	r1, r2
 8006b02:	4a71      	ldr	r2, [pc, #452]	; (8006cc8 <draw_gearing+0x238>)
 8006b04:	7011      	strb	r1, [r2, #0]
 8006b06:	4a6f      	ldr	r2, [pc, #444]	; (8006cc4 <draw_gearing+0x234>)
 8006b08:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a6f      	ldr	r2, [pc, #444]	; (8006ccc <draw_gearing+0x23c>)
 8006b0e:	4413      	add	r3, r2
 8006b10:	4a6c      	ldr	r2, [pc, #432]	; (8006cc4 <draw_gearing+0x234>)
 8006b12:	6810      	ldr	r0, [r2, #0]
 8006b14:	6018      	str	r0, [r3, #0]
 8006b16:	8891      	ldrh	r1, [r2, #4]
 8006b18:	7992      	ldrb	r2, [r2, #6]
 8006b1a:	8099      	strh	r1, [r3, #4]
 8006b1c:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3307      	adds	r3, #7
 8006b22:	60fb      	str	r3, [r7, #12]
	append_CRC8_check_sum(tx_buffer, 5);
 8006b24:	2105      	movs	r1, #5
 8006b26:	4869      	ldr	r0, [pc, #420]	; (8006ccc <draw_gearing+0x23c>)
 8006b28:	f7fa faaf 	bl	800108a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 8006b2c:	4b68      	ldr	r3, [pc, #416]	; (8006cd0 <draw_gearing+0x240>)
 8006b2e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006b32:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 8006b34:	4b67      	ldr	r3, [pc, #412]	; (8006cd4 <draw_gearing+0x244>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	4b65      	ldr	r3, [pc, #404]	; (8006cd0 <draw_gearing+0x240>)
 8006b3c:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 8006b3e:	4b66      	ldr	r3, [pc, #408]	; (8006cd8 <draw_gearing+0x248>)
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	4b63      	ldr	r3, [pc, #396]	; (8006cd0 <draw_gearing+0x240>)
 8006b44:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4a60      	ldr	r2, [pc, #384]	; (8006ccc <draw_gearing+0x23c>)
 8006b4a:	4413      	add	r3, r2
 8006b4c:	4a60      	ldr	r2, [pc, #384]	; (8006cd0 <draw_gearing+0x240>)
 8006b4e:	6810      	ldr	r0, [r2, #0]
 8006b50:	6018      	str	r0, [r3, #0]
 8006b52:	8892      	ldrh	r2, [r2, #4]
 8006b54:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3306      	adds	r3, #6
 8006b5a:	60fb      	str	r3, [r7, #12]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 8006b5c:	4b55      	ldr	r3, [pc, #340]	; (8006cb4 <draw_gearing+0x224>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 8006b62:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <draw_gearing+0x224>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 2;
 8006b68:	4b52      	ldr	r3, [pc, #328]	; (8006cb4 <draw_gearing+0x224>)
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <draw_gearing+0x224>)
 8006b70:	78da      	ldrb	r2, [r3, #3]
 8006b72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006b76:	70da      	strb	r2, [r3, #3]
 8006b78:	791a      	ldrb	r2, [r3, #4]
 8006b7a:	f022 0203 	bic.w	r2, r2, #3
 8006b7e:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d106      	bne.n	8006b94 <draw_gearing+0x104>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006b86:	4a4b      	ldr	r2, [pc, #300]	; (8006cb4 <draw_gearing+0x224>)
 8006b88:	78d3      	ldrb	r3, [r2, #3]
 8006b8a:	2102      	movs	r1, #2
 8006b8c:	f361 0302 	bfi	r3, r1, #0, #3
 8006b90:	70d3      	strb	r3, [r2, #3]
 8006b92:	e005      	b.n	8006ba0 <draw_gearing+0x110>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8006b94:	4a47      	ldr	r2, [pc, #284]	; (8006cb4 <draw_gearing+0x224>)
 8006b96:	78d3      	ldrb	r3, [r2, #3]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	f361 0302 	bfi	r3, r1, #0, #3
 8006b9e:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8006ba0:	4a44      	ldr	r2, [pc, #272]	; (8006cb4 <draw_gearing+0x224>)
 8006ba2:	78d3      	ldrb	r3, [r2, #3]
 8006ba4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006ba8:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <draw_gearing+0x224>)
 8006bac:	791a      	ldrb	r2, [r3, #4]
 8006bae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb6:	711a      	strb	r2, [r3, #4]
 8006bb8:	795a      	ldrb	r2, [r3, #5]
 8006bba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006bbe:	f042 0207 	orr.w	r2, r2, #7
 8006bc2:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <draw_gearing+0x224>)
 8006bce:	f002 0101 	and.w	r1, r2, #1
 8006bd2:	01cc      	lsls	r4, r1, #7
 8006bd4:	7959      	ldrb	r1, [r3, #5]
 8006bd6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006bda:	4608      	mov	r0, r1
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4301      	orrs	r1, r0
 8006be0:	7159      	strb	r1, [r3, #5]
 8006be2:	0852      	lsrs	r2, r2, #1
 8006be4:	b292      	uxth	r2, r2
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	2100      	movs	r1, #0
 8006bea:	430a      	orrs	r2, r1
 8006bec:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 8006bee:	4b31      	ldr	r3, [pc, #196]	; (8006cb4 <draw_gearing+0x224>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f042 0207 	orr.w	r2, r2, #7
 8006bf6:	71da      	strb	r2, [r3, #7]
 8006bf8:	7a1a      	ldrb	r2, [r3, #8]
 8006bfa:	f022 0203 	bic.w	r2, r2, #3
 8006bfe:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8006c00:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <draw_gearing+0x224>)
 8006c02:	78da      	ldrb	r2, [r3, #3]
 8006c04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006c08:	70da      	strb	r2, [r3, #3]
 8006c0a:	791a      	ldrb	r2, [r3, #4]
 8006c0c:	f022 0203 	bic.w	r2, r2, #3
 8006c10:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 8006c12:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <draw_gearing+0x224>)
 8006c14:	7a1a      	ldrb	r2, [r3, #8]
 8006c16:	f002 0203 	and.w	r2, r2, #3
 8006c1a:	f062 0237 	orn	r2, r2, #55	; 0x37
 8006c1e:	721a      	strb	r2, [r3, #8]
 8006c20:	7a5a      	ldrb	r2, [r3, #9]
 8006c22:	f022 021f 	bic.w	r2, r2, #31
 8006c26:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 650;
 8006c28:	4b22      	ldr	r3, [pc, #136]	; (8006cb4 <draw_gearing+0x224>)
 8006c2a:	7a5a      	ldrb	r2, [r3, #9]
 8006c2c:	f002 021f 	and.w	r2, r2, #31
 8006c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c34:	725a      	strb	r2, [r3, #9]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8006c3c:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a22      	ldr	r2, [pc, #136]	; (8006ccc <draw_gearing+0x23c>)
 8006c42:	4413      	add	r3, r2
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <draw_gearing+0x224>)
 8006c46:	461c      	mov	r4, r3
 8006c48:	4613      	mov	r3, r2
 8006c4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c4c:	6020      	str	r0, [r4, #0]
 8006c4e:	6061      	str	r1, [r4, #4]
 8006c50:	60a2      	str	r2, [r4, #8]
 8006c52:	881a      	ldrh	r2, [r3, #0]
 8006c54:	789b      	ldrb	r3, [r3, #2]
 8006c56:	81a2      	strh	r2, [r4, #12]
 8006c58:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	330f      	adds	r3, #15
 8006c5e:	60fb      	str	r3, [r7, #12]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a1a      	ldr	r2, [pc, #104]	; (8006ccc <draw_gearing+0x23c>)
 8006c64:	4413      	add	r3, r2
 8006c66:	7afa      	ldrb	r2, [r7, #11]
 8006c68:	4915      	ldr	r1, [pc, #84]	; (8006cc0 <draw_gearing+0x230>)
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f017 fc73 	bl	801e556 <memcpy>
	curr_pos += char_len;
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4813      	ldr	r0, [pc, #76]	; (8006ccc <draw_gearing+0x23c>)
 8006c80:	f7fa fa86 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006c84:	e002      	b.n	8006c8c <draw_gearing+0x1fc>
		vTaskDelay(1);
 8006c86:	2001      	movs	r0, #1
 8006c88:	f014 ff02 	bl	801ba90 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006c8c:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <draw_gearing+0x24c>)
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d1f6      	bne.n	8006c86 <draw_gearing+0x1f6>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	490a      	ldr	r1, [pc, #40]	; (8006ccc <draw_gearing+0x23c>)
 8006ca4:	480d      	ldr	r0, [pc, #52]	; (8006cdc <draw_gearing+0x24c>)
 8006ca6:	f00e ff7b 	bl	8015ba0 <HAL_UART_Transmit_DMA>
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd90      	pop	{r4, r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20003120 	.word	0x20003120
 8006cb8:	20002f7c 	.word	0x20002f7c
 8006cbc:	080257ec 	.word	0x080257ec
 8006cc0:	20003138 	.word	0x20003138
 8006cc4:	20003130 	.word	0x20003130
 8006cc8:	200032fc 	.word	0x200032fc
 8006ccc:	20003018 	.word	0x20003018
 8006cd0:	20003118 	.word	0x20003118
 8006cd4:	20003294 	.word	0x20003294
 8006cd8:	20003014 	.word	0x20003014
 8006cdc:	200016d8 	.word	0x200016d8

08006ce0 <clear_hud>:


void clear_hud(){
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
	uint32_t curr_pos = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 8006cf2:	4b34      	ldr	r3, [pc, #208]	; (8006dc4 <clear_hud+0xe4>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	4a34      	ldr	r2, [pc, #208]	; (8006dc8 <clear_hud+0xe8>)
 8006cf8:	211e      	movs	r1, #30
 8006cfa:	4834      	ldr	r0, [pc, #208]	; (8006dcc <clear_hud+0xec>)
 8006cfc:	f018 fbd0 	bl	801f4a0 <sniprintf>
 8006d00:	4603      	mov	r3, r0
 8006d02:	72fb      	strb	r3, [r7, #11]

	send_header.start_frame = 0xA5;
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <clear_hud+0xf0>)
 8006d06:	22a5      	movs	r2, #165	; 0xa5
 8006d08:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8006d0a:	4b31      	ldr	r3, [pc, #196]	; (8006dd0 <clear_hud+0xf0>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	715a      	strb	r2, [r3, #5]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f042 0203 	orr.w	r2, r2, #3
 8006d1a:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8006d1c:	4b2d      	ldr	r3, [pc, #180]	; (8006dd4 <clear_hud+0xf4>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	b2d1      	uxtb	r1, r2
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <clear_hud+0xf4>)
 8006d26:	7011      	strb	r1, [r2, #0]
 8006d28:	4a29      	ldr	r2, [pc, #164]	; (8006dd0 <clear_hud+0xf0>)
 8006d2a:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_delete_graphic_t);
 8006d2c:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <clear_hud+0xf0>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f042 0208 	orr.w	r2, r2, #8
 8006d34:	705a      	strb	r2, [r3, #1]
 8006d36:	2200      	movs	r2, #0
 8006d38:	709a      	strb	r2, [r3, #2]
	send_header.seq = g_ref_tx_seq++;
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <clear_hud+0xf4>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	b2d1      	uxtb	r1, r2
 8006d42:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <clear_hud+0xf4>)
 8006d44:	7011      	strb	r1, [r2, #0]
 8006d46:	4a22      	ldr	r2, [pc, #136]	; (8006dd0 <clear_hud+0xf0>)
 8006d48:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <clear_hud+0xf8>)
 8006d4e:	4413      	add	r3, r2
 8006d50:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <clear_hud+0xf0>)
 8006d52:	6810      	ldr	r0, [r2, #0]
 8006d54:	6018      	str	r0, [r3, #0]
 8006d56:	8891      	ldrh	r1, [r2, #4]
 8006d58:	7992      	ldrb	r2, [r2, #6]
 8006d5a:	8099      	strh	r1, [r3, #4]
 8006d5c:	719a      	strb	r2, [r3, #6]
	ref_delete_graphic_t ref_delete;
	ref_delete.cmd_ID = 0x100;
 8006d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d62:	803b      	strh	r3, [r7, #0]
	ref_delete.graphic_layer = 9;
 8006d64:	2309      	movs	r3, #9
 8006d66:	71fb      	strb	r3, [r7, #7]
	ref_delete.graphic_operation = 2;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	71bb      	strb	r3, [r7, #6]
	ref_delete.receiver_ID = g_client_id;
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <clear_hud+0xfc>)
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	80bb      	strh	r3, [r7, #4]
	ref_delete.send_ID = ref_robot_data.robot_id;
 8006d72:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <clear_hud+0x100>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	807b      	strh	r3, [r7, #2]
	memcpy(tx_buffer + curr_pos, &ref_delete, sizeof(ref_delete_graphic_t));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a16      	ldr	r2, [pc, #88]	; (8006dd8 <clear_hud+0xf8>)
 8006d7e:	4413      	add	r3, r2
 8006d80:	461a      	mov	r2, r3
 8006d82:	463b      	mov	r3, r7
 8006d84:	cb03      	ldmia	r3!, {r0, r1}
 8006d86:	6010      	str	r0, [r2, #0]
 8006d88:	6051      	str	r1, [r2, #4]
	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4811      	ldr	r0, [pc, #68]	; (8006dd8 <clear_hud+0xf8>)
 8006d92:	f7fa f9fd 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006d96:	e002      	b.n	8006d9e <clear_hud+0xbe>
		vTaskDelay(1);
 8006d98:	2001      	movs	r0, #1
 8006d9a:	f014 fe79 	bl	801ba90 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <clear_hud+0x104>)
 8006da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d1f6      	bne.n	8006d98 <clear_hud+0xb8>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3302      	adds	r3, #2
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	4908      	ldr	r1, [pc, #32]	; (8006dd8 <clear_hud+0xf8>)
 8006db6:	480b      	ldr	r0, [pc, #44]	; (8006de4 <clear_hud+0x104>)
 8006db8:	f00e fef2 	bl	8015ba0 <HAL_UART_Transmit_DMA>

}
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20002f7c 	.word	0x20002f7c
 8006dc8:	080257ec 	.word	0x080257ec
 8006dcc:	20003138 	.word	0x20003138
 8006dd0:	20003130 	.word	0x20003130
 8006dd4:	200032fc 	.word	0x200032fc
 8006dd8:	20003018 	.word	0x20003018
 8006ddc:	20003014 	.word	0x20003014
 8006de0:	20003294 	.word	0x20003294
 8006de4:	200016d8 	.word	0x200016d8

08006de8 <imu_proc_task_notif>:
extern QueueHandle_t mag_data_queue;
extern TaskHandle_t imu_processing_task_handle;
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;

void imu_proc_task_notif() {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <imu_proc_task_notif+0x3c>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <imu_proc_task_notif+0x40>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	1d3a      	adds	r2, r7, #4
 8006dfe:	4611      	mov	r1, r2
 8006e00:	4618      	mov	r0, r3
 8006e02:	f015 fca1 	bl	801c748 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <imu_proc_task_notif+0x34>
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <imu_proc_task_notif+0x44>)
 8006e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	f3bf 8f6f 	isb	sy
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	200031f0 	.word	0x200031f0
 8006e28:	20000498 	.word	0x20000498
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	463c      	mov	r4, r7
 8006e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gyro_proc_data.gx = gyro_data.gx;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	4a10      	ldr	r2, [pc, #64]	; (8006e80 <gyro_data_ready+0x50>)
 8006e40:	6013      	str	r3, [r2, #0]
	gyro_proc_data.gy = gyro_data.gy;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a0e      	ldr	r2, [pc, #56]	; (8006e80 <gyro_data_ready+0x50>)
 8006e46:	6053      	str	r3, [r2, #4]
	gyro_proc_data.gz = gyro_data.gz;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <gyro_data_ready+0x50>)
 8006e4c:	6093      	str	r3, [r2, #8]
	if (IMU_ORIENTATION == 2) {		// swap gyro inputs for vertically mounted devboard
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4a0b      	ldr	r2, [pc, #44]	; (8006e80 <gyro_data_ready+0x50>)
 8006e52:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8006e54:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <gyro_data_ready+0x54>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <gyro_data_ready+0x54>)
 8006e60:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 8006e62:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <gyro_data_ready+0x54>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b07      	cmp	r3, #7
 8006e68:	d003      	beq.n	8006e72 <gyro_data_ready+0x42>
 8006e6a:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <gyro_data_ready+0x54>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d101      	bne.n	8006e76 <gyro_data_ready+0x46>
		imu_proc_task_notif();
 8006e72:	f7ff ffb9 	bl	8006de8 <imu_proc_task_notif>
	}
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd90      	pop	{r4, r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200031cc 	.word	0x200031cc
 8006e84:	200031f0 	.word	0x200031f0

08006e88 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8006e88:	b590      	push	{r4, r7, lr}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	463c      	mov	r4, r7
 8006e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel_proc_data.ax = accel_data.ax;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	4a10      	ldr	r2, [pc, #64]	; (8006ed8 <accel_data_ready+0x50>)
 8006e98:	6013      	str	r3, [r2, #0]
	accel_proc_data.ay = accel_data.ay;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a0e      	ldr	r2, [pc, #56]	; (8006ed8 <accel_data_ready+0x50>)
 8006e9e:	6053      	str	r3, [r2, #4]
	accel_proc_data.az = accel_data.az;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4a0d      	ldr	r2, [pc, #52]	; (8006ed8 <accel_data_ready+0x50>)
 8006ea4:	6093      	str	r3, [r2, #8]
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <accel_data_ready+0x50>)
 8006eaa:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <accel_data_ready+0x54>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f043 0302 	orr.w	r3, r3, #2
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	4b09      	ldr	r3, [pc, #36]	; (8006edc <accel_data_ready+0x54>)
 8006eb8:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <accel_data_ready+0x54>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b07      	cmp	r3, #7
 8006ec0:	d003      	beq.n	8006eca <accel_data_ready+0x42>
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <accel_data_ready+0x54>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d101      	bne.n	8006ece <accel_data_ready+0x46>
		imu_proc_task_notif();
 8006eca:	f7ff ff8d 	bl	8006de8 <imu_proc_task_notif>
	}
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd90      	pop	{r4, r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200031bc 	.word	0x200031bc
 8006edc:	200031f0 	.word	0x200031f0

08006ee0 <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 8006eec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <mag_data_ready+0x44>)
 8006ef2:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 8006ef4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <mag_data_ready+0x44>)
 8006efa:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 8006efc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006f00:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <mag_data_ready+0x44>)
 8006f02:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a07      	ldr	r2, [pc, #28]	; (8006f24 <mag_data_ready+0x44>)
 8006f08:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 8006f0a:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <mag_data_ready+0x48>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	f043 0304 	orr.w	r3, r3, #4
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <mag_data_ready+0x48>)
 8006f16:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	200031dc 	.word	0x200031dc
 8006f28:	200031f0 	.word	0x200031f0

08006f2c <imu_processing_task>:

void imu_processing_task(void *argument) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 8006f34:	f7fa fece 	bl	8001cd4 <imu_start_ints>
	init_quaternion();
 8006f38:	f000 f80a 	bl	8006f50 <init_quaternion>
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f40:	2001      	movs	r0, #1
 8006f42:	f015 fbb5 	bl	801c6b0 <ulTaskNotifyTake>
		imu_ahrs_update();
 8006f46:	f000 f93f 	bl	80071c8 <imu_ahrs_update>
		imu_attitude_update();
 8006f4a:	f000 fd91 	bl	8007a70 <imu_attitude_update>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006f4e:	e7f5      	b.n	8006f3c <imu_processing_task+0x10>

08006f50 <init_quaternion>:
	}
}

void init_quaternion(void) {
 8006f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
	int16_t hx, hy; //hz;

	hx = mag_proc_data.mx;
 8006f58:	4b79      	ldr	r3, [pc, #484]	; (8007140 <init_quaternion+0x1f0>)
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	81fb      	strh	r3, [r7, #14]
	hy = mag_proc_data.my;
 8006f5e:	4b78      	ldr	r3, [pc, #480]	; (8007140 <init_quaternion+0x1f0>)
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
	if (hx < 0 && hy < 0) {
 8006f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da36      	bge.n	8006fda <init_quaternion+0x8a>
 8006f6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da32      	bge.n	8006fda <init_quaternion+0x8a>
		if (fabs(hx / hy) >= 1) {
 8006f74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006f78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7f9 facf 	bl	8000524 <__aeabi_i2d>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	603a      	str	r2, [r7, #0]
 8006f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	4b6b      	ldr	r3, [pc, #428]	; (8007144 <init_quaternion+0x1f4>)
 8006f98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f9c:	f7f9 fdb2 	bl	8000b04 <__aeabi_dcmpge>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <init_quaternion+0x70>
			q0 = 0.195;
 8006fa6:	4b68      	ldr	r3, [pc, #416]	; (8007148 <init_quaternion+0x1f8>)
 8006fa8:	4a68      	ldr	r2, [pc, #416]	; (800714c <init_quaternion+0x1fc>)
 8006faa:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8006fac:	4b68      	ldr	r3, [pc, #416]	; (8007150 <init_quaternion+0x200>)
 8006fae:	4a69      	ldr	r2, [pc, #420]	; (8007154 <init_quaternion+0x204>)
 8006fb0:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 8006fb2:	4b69      	ldr	r3, [pc, #420]	; (8007158 <init_quaternion+0x208>)
 8006fb4:	4a69      	ldr	r2, [pc, #420]	; (800715c <init_quaternion+0x20c>)
 8006fb6:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8006fb8:	4b69      	ldr	r3, [pc, #420]	; (8007160 <init_quaternion+0x210>)
 8006fba:	4a6a      	ldr	r2, [pc, #424]	; (8007164 <init_quaternion+0x214>)
 8006fbc:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8006fbe:	e0ba      	b.n	8007136 <init_quaternion+0x1e6>
		} else {
			q0 = 0.555;
 8006fc0:	4b61      	ldr	r3, [pc, #388]	; (8007148 <init_quaternion+0x1f8>)
 8006fc2:	4a69      	ldr	r2, [pc, #420]	; (8007168 <init_quaternion+0x218>)
 8006fc4:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8006fc6:	4b62      	ldr	r3, [pc, #392]	; (8007150 <init_quaternion+0x200>)
 8006fc8:	4a62      	ldr	r2, [pc, #392]	; (8007154 <init_quaternion+0x204>)
 8006fca:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 8006fcc:	4b62      	ldr	r3, [pc, #392]	; (8007158 <init_quaternion+0x208>)
 8006fce:	4a67      	ldr	r2, [pc, #412]	; (800716c <init_quaternion+0x21c>)
 8006fd0:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 8006fd2:	4b63      	ldr	r3, [pc, #396]	; (8007160 <init_quaternion+0x210>)
 8006fd4:	4a66      	ldr	r2, [pc, #408]	; (8007170 <init_quaternion+0x220>)
 8006fd6:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8006fd8:	e0ad      	b.n	8007136 <init_quaternion+0x1e6>
		}

	} else if (hx < 0 && hy > 0) {
 8006fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	da35      	bge.n	800704e <init_quaternion+0xfe>
 8006fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	dd31      	ble.n	800704e <init_quaternion+0xfe>
		if (fabs(hx / hy) >= 1) {
 8006fea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006fee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ff2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7f9 fa94 	bl	8000524 <__aeabi_i2d>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4692      	mov	sl, r2
 8007002:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	4b4e      	ldr	r3, [pc, #312]	; (8007144 <init_quaternion+0x1f4>)
 800700c:	4650      	mov	r0, sl
 800700e:	4659      	mov	r1, fp
 8007010:	f7f9 fd78 	bl	8000b04 <__aeabi_dcmpge>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <init_quaternion+0xe4>
			q0 = -0.193;
 800701a:	4b4b      	ldr	r3, [pc, #300]	; (8007148 <init_quaternion+0x1f8>)
 800701c:	4a55      	ldr	r2, [pc, #340]	; (8007174 <init_quaternion+0x224>)
 800701e:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 8007020:	4b4b      	ldr	r3, [pc, #300]	; (8007150 <init_quaternion+0x200>)
 8007022:	4a55      	ldr	r2, [pc, #340]	; (8007178 <init_quaternion+0x228>)
 8007024:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 8007026:	4b4c      	ldr	r3, [pc, #304]	; (8007158 <init_quaternion+0x208>)
 8007028:	4a54      	ldr	r2, [pc, #336]	; (800717c <init_quaternion+0x22c>)
 800702a:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 800702c:	4b4c      	ldr	r3, [pc, #304]	; (8007160 <init_quaternion+0x210>)
 800702e:	4a4d      	ldr	r2, [pc, #308]	; (8007164 <init_quaternion+0x214>)
 8007030:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007032:	e080      	b.n	8007136 <init_quaternion+0x1e6>
		} else {
			q0 = -0.552;
 8007034:	4b44      	ldr	r3, [pc, #272]	; (8007148 <init_quaternion+0x1f8>)
 8007036:	4a52      	ldr	r2, [pc, #328]	; (8007180 <init_quaternion+0x230>)
 8007038:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 800703a:	4b45      	ldr	r3, [pc, #276]	; (8007150 <init_quaternion+0x200>)
 800703c:	4a51      	ldr	r2, [pc, #324]	; (8007184 <init_quaternion+0x234>)
 800703e:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 8007040:	4b45      	ldr	r3, [pc, #276]	; (8007158 <init_quaternion+0x208>)
 8007042:	4a51      	ldr	r2, [pc, #324]	; (8007188 <init_quaternion+0x238>)
 8007044:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 8007046:	4b46      	ldr	r3, [pc, #280]	; (8007160 <init_quaternion+0x210>)
 8007048:	4a50      	ldr	r2, [pc, #320]	; (800718c <init_quaternion+0x23c>)
 800704a:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800704c:	e073      	b.n	8007136 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy > 0) {
 800704e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dd35      	ble.n	80070c2 <init_quaternion+0x172>
 8007056:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	dd31      	ble.n	80070c2 <init_quaternion+0x172>
		if (fabs(hx / hy) >= 1) {
 800705e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007062:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007066:	fb92 f3f3 	sdiv	r3, r2, r3
 800706a:	4618      	mov	r0, r3
 800706c:	f7f9 fa5a 	bl	8000524 <__aeabi_i2d>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4690      	mov	r8, r2
 8007076:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <init_quaternion+0x1f4>)
 8007080:	4640      	mov	r0, r8
 8007082:	4649      	mov	r1, r9
 8007084:	f7f9 fd3e 	bl	8000b04 <__aeabi_dcmpge>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <init_quaternion+0x158>
			q0 = -0.9785;
 800708e:	4b2e      	ldr	r3, [pc, #184]	; (8007148 <init_quaternion+0x1f8>)
 8007090:	4a3f      	ldr	r2, [pc, #252]	; (8007190 <init_quaternion+0x240>)
 8007092:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 8007094:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <init_quaternion+0x200>)
 8007096:	4a3f      	ldr	r2, [pc, #252]	; (8007194 <init_quaternion+0x244>)
 8007098:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 800709a:	4b2f      	ldr	r3, [pc, #188]	; (8007158 <init_quaternion+0x208>)
 800709c:	4a3e      	ldr	r2, [pc, #248]	; (8007198 <init_quaternion+0x248>)
 800709e:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 80070a0:	4b2f      	ldr	r3, [pc, #188]	; (8007160 <init_quaternion+0x210>)
 80070a2:	4a2a      	ldr	r2, [pc, #168]	; (800714c <init_quaternion+0x1fc>)
 80070a4:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80070a6:	e046      	b.n	8007136 <init_quaternion+0x1e6>
		} else {
			q0 = -0.9828;
 80070a8:	4b27      	ldr	r3, [pc, #156]	; (8007148 <init_quaternion+0x1f8>)
 80070aa:	4a3c      	ldr	r2, [pc, #240]	; (800719c <init_quaternion+0x24c>)
 80070ac:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <init_quaternion+0x200>)
 80070b0:	4a3b      	ldr	r2, [pc, #236]	; (80071a0 <init_quaternion+0x250>)
 80070b2:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 80070b4:	4b28      	ldr	r3, [pc, #160]	; (8007158 <init_quaternion+0x208>)
 80070b6:	4a3b      	ldr	r2, [pc, #236]	; (80071a4 <init_quaternion+0x254>)
 80070b8:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 80070ba:	4b29      	ldr	r3, [pc, #164]	; (8007160 <init_quaternion+0x210>)
 80070bc:	4a3a      	ldr	r2, [pc, #232]	; (80071a8 <init_quaternion+0x258>)
 80070be:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80070c0:	e039      	b.n	8007136 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy < 0) {
 80070c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd35      	ble.n	8007136 <init_quaternion+0x1e6>
 80070ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da31      	bge.n	8007136 <init_quaternion+0x1e6>
		if (fabs(hx / hy) >= 1) {
 80070d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80070d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070da:	fb92 f3f3 	sdiv	r3, r2, r3
 80070de:	4618      	mov	r0, r3
 80070e0:	f7f9 fa20 	bl	8000524 <__aeabi_i2d>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4614      	mov	r4, r2
 80070ea:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <init_quaternion+0x1f4>)
 80070f4:	4620      	mov	r0, r4
 80070f6:	4629      	mov	r1, r5
 80070f8:	f7f9 fd04 	bl	8000b04 <__aeabi_dcmpge>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00c      	beq.n	800711c <init_quaternion+0x1cc>
			q0 = -0.979;
 8007102:	4b11      	ldr	r3, [pc, #68]	; (8007148 <init_quaternion+0x1f8>)
 8007104:	4a29      	ldr	r2, [pc, #164]	; (80071ac <init_quaternion+0x25c>)
 8007106:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <init_quaternion+0x200>)
 800710a:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <init_quaternion+0x260>)
 800710c:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <init_quaternion+0x208>)
 8007110:	4a24      	ldr	r2, [pc, #144]	; (80071a4 <init_quaternion+0x254>)
 8007112:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 8007114:	4b12      	ldr	r3, [pc, #72]	; (8007160 <init_quaternion+0x210>)
 8007116:	4a27      	ldr	r2, [pc, #156]	; (80071b4 <init_quaternion+0x264>)
 8007118:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}
	}
#endif
}
 800711a:	e00c      	b.n	8007136 <init_quaternion+0x1e6>
			q0 = -0.83;
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <init_quaternion+0x1f8>)
 800711e:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <init_quaternion+0x268>)
 8007120:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <init_quaternion+0x200>)
 8007124:	4a25      	ldr	r2, [pc, #148]	; (80071bc <init_quaternion+0x26c>)
 8007126:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <init_quaternion+0x208>)
 800712a:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <init_quaternion+0x270>)
 800712c:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <init_quaternion+0x210>)
 8007130:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <init_quaternion+0x274>)
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	e7ff      	b.n	8007136 <init_quaternion+0x1e6>
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007140:	200031dc 	.word	0x200031dc
 8007144:	3ff00000 	.word	0x3ff00000
 8007148:	2000000c 	.word	0x2000000c
 800714c:	3e47ae14 	.word	0x3e47ae14
 8007150:	20003158 	.word	0x20003158
 8007154:	bc75c28f 	.word	0xbc75c28f
 8007158:	2000315c 	.word	0x2000315c
 800715c:	3b8ce704 	.word	0x3b8ce704
 8007160:	20003160 	.word	0x20003160
 8007164:	3f7a9fbe 	.word	0x3f7a9fbe
 8007168:	3f0e147b 	.word	0x3f0e147b
 800716c:	3bc49ba6 	.word	0x3bc49ba6
 8007170:	3f543958 	.word	0x3f543958
 8007174:	be45a1cb 	.word	0xbe45a1cb
 8007178:	bc1374bc 	.word	0xbc1374bc
 800717c:	bbc49ba6 	.word	0xbbc49ba6
 8007180:	bf0d4fdf 	.word	0xbf0d4fdf
 8007184:	bb9d4952 	.word	0xbb9d4952
 8007188:	bc3c6a7f 	.word	0xbc3c6a7f
 800718c:	3f54d014 	.word	0x3f54d014
 8007190:	bf7a7efa 	.word	0xbf7a7efa
 8007194:	3c03126f 	.word	0x3c03126f
 8007198:	bca3d70a 	.word	0xbca3d70a
 800719c:	bf7b98c8 	.word	0xbf7b98c8
 80071a0:	3b03126f 	.word	0x3b03126f
 80071a4:	bc88ce70 	.word	0xbc88ce70
 80071a8:	3f0e425b 	.word	0x3f0e425b
 80071ac:	bf7a9fbe 	.word	0xbf7a9fbe
 80071b0:	3c3e0ded 	.word	0x3c3e0ded
 80071b4:	be47ae14 	.word	0xbe47ae14
 80071b8:	bf547ae1 	.word	0xbf547ae1
 80071bc:	3c656042 	.word	0x3c656042
 80071c0:	bc449ba6 	.word	0xbc449ba6
 80071c4:	bf0e5604 	.word	0xbf0e5604

080071c8 <imu_ahrs_update>:
	q1 = tempq1 * norm;
	q2 = tempq2 * norm;
	q3 = tempq3 * norm;
}

void imu_ahrs_update(void) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b09e      	sub	sp, #120	; 0x78
 80071cc:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0, tempq1, tempq2, tempq3;

	float q0q0 = q0 * q0;
 80071ce:	4bd3      	ldr	r3, [pc, #844]	; (800751c <imu_ahrs_update+0x354>)
 80071d0:	ed93 7a00 	vldr	s14, [r3]
 80071d4:	4bd1      	ldr	r3, [pc, #836]	; (800751c <imu_ahrs_update+0x354>)
 80071d6:	edd3 7a00 	vldr	s15, [r3]
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0 * q1;
 80071e2:	4bce      	ldr	r3, [pc, #824]	; (800751c <imu_ahrs_update+0x354>)
 80071e4:	ed93 7a00 	vldr	s14, [r3]
 80071e8:	4bcd      	ldr	r3, [pc, #820]	; (8007520 <imu_ahrs_update+0x358>)
 80071ea:	edd3 7a00 	vldr	s15, [r3]
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0 * q2;
 80071f6:	4bc9      	ldr	r3, [pc, #804]	; (800751c <imu_ahrs_update+0x354>)
 80071f8:	ed93 7a00 	vldr	s14, [r3]
 80071fc:	4bc9      	ldr	r3, [pc, #804]	; (8007524 <imu_ahrs_update+0x35c>)
 80071fe:	edd3 7a00 	vldr	s15, [r3]
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0 * q3;
 800720a:	4bc4      	ldr	r3, [pc, #784]	; (800751c <imu_ahrs_update+0x354>)
 800720c:	ed93 7a00 	vldr	s14, [r3]
 8007210:	4bc5      	ldr	r3, [pc, #788]	; (8007528 <imu_ahrs_update+0x360>)
 8007212:	edd3 7a00 	vldr	s15, [r3]
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1 * q1;
 800721e:	4bc0      	ldr	r3, [pc, #768]	; (8007520 <imu_ahrs_update+0x358>)
 8007220:	ed93 7a00 	vldr	s14, [r3]
 8007224:	4bbe      	ldr	r3, [pc, #760]	; (8007520 <imu_ahrs_update+0x358>)
 8007226:	edd3 7a00 	vldr	s15, [r3]
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1 * q2;
 8007232:	4bbb      	ldr	r3, [pc, #748]	; (8007520 <imu_ahrs_update+0x358>)
 8007234:	ed93 7a00 	vldr	s14, [r3]
 8007238:	4bba      	ldr	r3, [pc, #744]	; (8007524 <imu_ahrs_update+0x35c>)
 800723a:	edd3 7a00 	vldr	s15, [r3]
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1 * q3;
 8007246:	4bb6      	ldr	r3, [pc, #728]	; (8007520 <imu_ahrs_update+0x358>)
 8007248:	ed93 7a00 	vldr	s14, [r3]
 800724c:	4bb6      	ldr	r3, [pc, #728]	; (8007528 <imu_ahrs_update+0x360>)
 800724e:	edd3 7a00 	vldr	s15, [r3]
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2 * q2;
 800725a:	4bb2      	ldr	r3, [pc, #712]	; (8007524 <imu_ahrs_update+0x35c>)
 800725c:	ed93 7a00 	vldr	s14, [r3]
 8007260:	4bb0      	ldr	r3, [pc, #704]	; (8007524 <imu_ahrs_update+0x35c>)
 8007262:	edd3 7a00 	vldr	s15, [r3]
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2 * q3;
 800726e:	4bad      	ldr	r3, [pc, #692]	; (8007524 <imu_ahrs_update+0x35c>)
 8007270:	ed93 7a00 	vldr	s14, [r3]
 8007274:	4bac      	ldr	r3, [pc, #688]	; (8007528 <imu_ahrs_update+0x360>)
 8007276:	edd3 7a00 	vldr	s15, [r3]
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3 * q3;
 8007282:	4ba9      	ldr	r3, [pc, #676]	; (8007528 <imu_ahrs_update+0x360>)
 8007284:	ed93 7a00 	vldr	s14, [r3]
 8007288:	4ba7      	ldr	r3, [pc, #668]	; (8007528 <imu_ahrs_update+0x360>)
 800728a:	edd3 7a00 	vldr	s15, [r3]
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = gyro_proc_data.gx;
 8007296:	4ba5      	ldr	r3, [pc, #660]	; (800752c <imu_ahrs_update+0x364>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4aa5      	ldr	r2, [pc, #660]	; (8007530 <imu_ahrs_update+0x368>)
 800729c:	6013      	str	r3, [r2, #0]
	gy = gyro_proc_data.gy;
 800729e:	4ba3      	ldr	r3, [pc, #652]	; (800752c <imu_ahrs_update+0x364>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	4aa4      	ldr	r2, [pc, #656]	; (8007534 <imu_ahrs_update+0x36c>)
 80072a4:	6013      	str	r3, [r2, #0]
	gz = gyro_proc_data.gz;
 80072a6:	4ba1      	ldr	r3, [pc, #644]	; (800752c <imu_ahrs_update+0x364>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	4aa3      	ldr	r2, [pc, #652]	; (8007538 <imu_ahrs_update+0x370>)
 80072ac:	6013      	str	r3, [r2, #0]
	ax = accel_proc_data.ax;
 80072ae:	4ba3      	ldr	r3, [pc, #652]	; (800753c <imu_ahrs_update+0x374>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4aa3      	ldr	r2, [pc, #652]	; (8007540 <imu_ahrs_update+0x378>)
 80072b4:	6013      	str	r3, [r2, #0]
	ay = accel_proc_data.ay;
 80072b6:	4ba1      	ldr	r3, [pc, #644]	; (800753c <imu_ahrs_update+0x374>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4aa2      	ldr	r2, [pc, #648]	; (8007544 <imu_ahrs_update+0x37c>)
 80072bc:	6013      	str	r3, [r2, #0]
	az = accel_proc_data.az;
 80072be:	4b9f      	ldr	r3, [pc, #636]	; (800753c <imu_ahrs_update+0x374>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	4aa1      	ldr	r2, [pc, #644]	; (8007548 <imu_ahrs_update+0x380>)
 80072c4:	6013      	str	r3, [r2, #0]
	mx = mag_proc_data.mx;
 80072c6:	4ba1      	ldr	r3, [pc, #644]	; (800754c <imu_ahrs_update+0x384>)
 80072c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072d4:	4b9e      	ldr	r3, [pc, #632]	; (8007550 <imu_ahrs_update+0x388>)
 80072d6:	edc3 7a00 	vstr	s15, [r3]
	my = mag_proc_data.my;
 80072da:	4b9c      	ldr	r3, [pc, #624]	; (800754c <imu_ahrs_update+0x384>)
 80072dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072e8:	4b9a      	ldr	r3, [pc, #616]	; (8007554 <imu_ahrs_update+0x38c>)
 80072ea:	edc3 7a00 	vstr	s15, [r3]
	mz = mag_proc_data.mz;
 80072ee:	4b97      	ldr	r3, [pc, #604]	; (800754c <imu_ahrs_update+0x384>)
 80072f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072fc:	4b96      	ldr	r3, [pc, #600]	; (8007558 <imu_ahrs_update+0x390>)
 80072fe:	edc3 7a00 	vstr	s15, [r3]

	last_proc_times[0] = HAL_GetTick(); //ms
 8007302:	f007 f91b 	bl	800e53c <HAL_GetTick>
 8007306:	4603      	mov	r3, r0
 8007308:	4a94      	ldr	r2, [pc, #592]	; (800755c <imu_ahrs_update+0x394>)
 800730a:	6013      	str	r3, [r2, #0]
	halfT = ((float) (last_proc_times[0] - last_proc_times[1]) / 2000.0f);
 800730c:	4b93      	ldr	r3, [pc, #588]	; (800755c <imu_ahrs_update+0x394>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	4b92      	ldr	r3, [pc, #584]	; (800755c <imu_ahrs_update+0x394>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800731e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007560 <imu_ahrs_update+0x398>
 8007322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007326:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_proc_times[1] = last_proc_times[0];
 800732a:	4b8c      	ldr	r3, [pc, #560]	; (800755c <imu_ahrs_update+0x394>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a8b      	ldr	r2, [pc, #556]	; (800755c <imu_ahrs_update+0x394>)
 8007330:	6053      	str	r3, [r2, #4]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax * ax + ay * ay + az * az);
 8007332:	4b83      	ldr	r3, [pc, #524]	; (8007540 <imu_ahrs_update+0x378>)
 8007334:	ed93 7a00 	vldr	s14, [r3]
 8007338:	4b81      	ldr	r3, [pc, #516]	; (8007540 <imu_ahrs_update+0x378>)
 800733a:	edd3 7a00 	vldr	s15, [r3]
 800733e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007342:	4b80      	ldr	r3, [pc, #512]	; (8007544 <imu_ahrs_update+0x37c>)
 8007344:	edd3 6a00 	vldr	s13, [r3]
 8007348:	4b7e      	ldr	r3, [pc, #504]	; (8007544 <imu_ahrs_update+0x37c>)
 800734a:	edd3 7a00 	vldr	s15, [r3]
 800734e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007356:	4b7c      	ldr	r3, [pc, #496]	; (8007548 <imu_ahrs_update+0x380>)
 8007358:	edd3 6a00 	vldr	s13, [r3]
 800735c:	4b7a      	ldr	r3, [pc, #488]	; (8007548 <imu_ahrs_update+0x380>)
 800735e:	edd3 7a00 	vldr	s15, [r3]
 8007362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800736a:	eeb0 0a67 	vmov.f32	s0, s15
 800736e:	f7fa f9af 	bl	80016d0 <inv_sqrt>
 8007372:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 8007376:	4b72      	ldr	r3, [pc, #456]	; (8007540 <imu_ahrs_update+0x378>)
 8007378:	ed93 7a00 	vldr	s14, [r3]
 800737c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007384:	4b6e      	ldr	r3, [pc, #440]	; (8007540 <imu_ahrs_update+0x378>)
 8007386:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 800738a:	4b6e      	ldr	r3, [pc, #440]	; (8007544 <imu_ahrs_update+0x37c>)
 800738c:	ed93 7a00 	vldr	s14, [r3]
 8007390:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007398:	4b6a      	ldr	r3, [pc, #424]	; (8007544 <imu_ahrs_update+0x37c>)
 800739a:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 800739e:	4b6a      	ldr	r3, [pc, #424]	; (8007548 <imu_ahrs_update+0x380>)
 80073a0:	ed93 7a00 	vldr	s14, [r3]
 80073a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80073a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ac:	4b66      	ldr	r3, [pc, #408]	; (8007548 <imu_ahrs_update+0x380>)
 80073ae:	edc3 7a00 	vstr	s15, [r3]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
		mx = mx * norm;
		my = my * norm;
		mz = mz * norm;
	#else
	mx = 0;
 80073b2:	4b67      	ldr	r3, [pc, #412]	; (8007550 <imu_ahrs_update+0x388>)
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
	my = 0;
 80073ba:	4b66      	ldr	r3, [pc, #408]	; (8007554 <imu_ahrs_update+0x38c>)
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
	mz = 0;
 80073c2:	4b65      	ldr	r3, [pc, #404]	; (8007558 <imu_ahrs_update+0x390>)
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
#endif
	/* compute reference direction of flux */
	hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 80073ca:	4b61      	ldr	r3, [pc, #388]	; (8007550 <imu_ahrs_update+0x388>)
 80073cc:	edd3 7a00 	vldr	s15, [r3]
 80073d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80073d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80073d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80073dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80073e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80073e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80073e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073ec:	4b59      	ldr	r3, [pc, #356]	; (8007554 <imu_ahrs_update+0x38c>)
 80073ee:	edd3 7a00 	vldr	s15, [r3]
 80073f2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80073f6:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80073fa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80073fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800740a:	4b53      	ldr	r3, [pc, #332]	; (8007558 <imu_ahrs_update+0x390>)
 800740c:	edd3 7a00 	vldr	s15, [r3]
 8007410:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007414:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8007418:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800741c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007428:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800742c:	4b48      	ldr	r3, [pc, #288]	; (8007550 <imu_ahrs_update+0x388>)
 800742e:	edd3 7a00 	vldr	s15, [r3]
 8007432:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007436:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800743a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007446:	4b43      	ldr	r3, [pc, #268]	; (8007554 <imu_ahrs_update+0x38c>)
 8007448:	edd3 7a00 	vldr	s15, [r3]
 800744c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007450:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007454:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007458:	ee36 6a67 	vsub.f32	s12, s12, s15
 800745c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007460:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800746c:	4b3a      	ldr	r3, [pc, #232]	; (8007558 <imu_ahrs_update+0x390>)
 800746e:	edd3 7a00 	vldr	s15, [r3]
 8007472:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007476:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800747a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800747e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800748a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 800748e:	4b30      	ldr	r3, [pc, #192]	; (8007550 <imu_ahrs_update+0x388>)
 8007490:	edd3 7a00 	vldr	s15, [r3]
 8007494:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007498:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800749c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80074a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80074a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074a8:	4b2a      	ldr	r3, [pc, #168]	; (8007554 <imu_ahrs_update+0x38c>)
 80074aa:	edd3 7a00 	vldr	s15, [r3]
 80074ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80074b2:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80074b6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80074ba:	ee76 7a27 	vadd.f32	s15, s12, s15
 80074be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <imu_ahrs_update+0x390>)
 80074c8:	edd3 7a00 	vldr	s15, [r3]
 80074cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80074d0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80074d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80074d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80074dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80074e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80074e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx * hx) + (hy * hy));
 80074f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80074f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80074f8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80074fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007504:	ee17 0a90 	vmov	r0, s15
 8007508:	f7f9 f81e 	bl	8000548 <__aeabi_f2d>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	ec43 2b10 	vmov	d0, r2, r3
 8007514:	f01b ffc2 	bl	802349c <sqrt>
 8007518:	e024      	b.n	8007564 <imu_ahrs_update+0x39c>
 800751a:	bf00      	nop
 800751c:	2000000c 	.word	0x2000000c
 8007520:	20003158 	.word	0x20003158
 8007524:	2000315c 	.word	0x2000315c
 8007528:	20003160 	.word	0x20003160
 800752c:	200031cc 	.word	0x200031cc
 8007530:	20003170 	.word	0x20003170
 8007534:	20003174 	.word	0x20003174
 8007538:	20003178 	.word	0x20003178
 800753c:	200031bc 	.word	0x200031bc
 8007540:	2000317c 	.word	0x2000317c
 8007544:	20003180 	.word	0x20003180
 8007548:	20003184 	.word	0x20003184
 800754c:	200031dc 	.word	0x200031dc
 8007550:	20003188 	.word	0x20003188
 8007554:	2000318c 	.word	0x2000318c
 8007558:	20003190 	.word	0x20003190
 800755c:	200031e8 	.word	0x200031e8
 8007560:	44fa0000 	.word	0x44fa0000
 8007564:	ec53 2b10 	vmov	r2, r3, d0
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	f7f9 fb3c 	bl	8000be8 <__aeabi_d2f>
 8007570:	4603      	mov	r3, r0
 8007572:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 8007574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007576:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f * (q1q3 - q0q2);
 8007578:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800757c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007584:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007588:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f * (q0q1 + q2q3);
 800758c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8007590:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007598:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800759c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 80075a0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80075a4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80075a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075ac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80075b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80075b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 80075c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80075c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80075c8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80075cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80075d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80075d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80075d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80075dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80075e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80075e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80075e8:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80075ec:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80075f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80075f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 8007600:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007604:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007608:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800760c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007610:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007618:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800761c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007620:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8007624:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007628:	ee76 7a27 	vadd.f32	s15, s12, s15
 800762c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007634:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 8007638:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800763c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007640:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8007644:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007650:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007654:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007658:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800765c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007660:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007664:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007668:	ee76 7a67 	vsub.f32	s15, s12, s15
 800766c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007674:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8007678:	4bde      	ldr	r3, [pc, #888]	; (80079f4 <imu_ahrs_update+0x82c>)
 800767a:	ed93 7a00 	vldr	s14, [r3]
 800767e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007686:	4bdc      	ldr	r3, [pc, #880]	; (80079f8 <imu_ahrs_update+0x830>)
 8007688:	edd3 6a00 	vldr	s13, [r3]
 800768c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007698:	4bd8      	ldr	r3, [pc, #864]	; (80079fc <imu_ahrs_update+0x834>)
 800769a:	edd3 6a00 	vldr	s13, [r3]
 800769e:	edd7 7a07 	vldr	s15, [r7, #28]
 80076a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80076a6:	4bd6      	ldr	r3, [pc, #856]	; (8007a00 <imu_ahrs_update+0x838>)
 80076a8:	ed93 6a00 	vldr	s12, [r3]
 80076ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80076b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80076b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80076b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076bc:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 80076c0:	4bcd      	ldr	r3, [pc, #820]	; (80079f8 <imu_ahrs_update+0x830>)
 80076c2:	ed93 7a00 	vldr	s14, [r3]
 80076c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80076ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076ce:	4bcd      	ldr	r3, [pc, #820]	; (8007a04 <imu_ahrs_update+0x83c>)
 80076d0:	edd3 6a00 	vldr	s13, [r3]
 80076d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80076d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076e0:	4bc7      	ldr	r3, [pc, #796]	; (8007a00 <imu_ahrs_update+0x838>)
 80076e2:	edd3 6a00 	vldr	s13, [r3]
 80076e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80076ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80076ee:	4bc6      	ldr	r3, [pc, #792]	; (8007a08 <imu_ahrs_update+0x840>)
 80076f0:	ed93 6a00 	vldr	s12, [r3]
 80076f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80076f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80076fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007704:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8007708:	4bbe      	ldr	r3, [pc, #760]	; (8007a04 <imu_ahrs_update+0x83c>)
 800770a:	ed93 7a00 	vldr	s14, [r3]
 800770e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007716:	4bb7      	ldr	r3, [pc, #732]	; (80079f4 <imu_ahrs_update+0x82c>)
 8007718:	edd3 6a00 	vldr	s13, [r3]
 800771c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007728:	4bb7      	ldr	r3, [pc, #732]	; (8007a08 <imu_ahrs_update+0x840>)
 800772a:	edd3 6a00 	vldr	s13, [r3]
 800772e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007732:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007736:	4bb1      	ldr	r3, [pc, #708]	; (80079fc <imu_ahrs_update+0x834>)
 8007738:	ed93 6a00 	vldr	s12, [r3]
 800773c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007740:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007744:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800774c:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if (ex != 0.0f && ey != 0.0f && ez != 0.0f) {
 8007750:	edd7 7a06 	vldr	s15, [r7, #24]
 8007754:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775c:	d07c      	beq.n	8007858 <imu_ahrs_update+0x690>
 800775e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007762:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776a:	d075      	beq.n	8007858 <imu_ahrs_update+0x690>
 800776c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007770:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007778:	d06e      	beq.n	8007858 <imu_ahrs_update+0x690>
		exInt = exInt + ex * AHRSKi * halfT;
 800777a:	edd7 7a06 	vldr	s15, [r7, #24]
 800777e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007a0c <imu_ahrs_update+0x844>
 8007782:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007786:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800778a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800778e:	4ba0      	ldr	r3, [pc, #640]	; (8007a10 <imu_ahrs_update+0x848>)
 8007790:	edd3 7a00 	vldr	s15, [r3]
 8007794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007798:	4b9d      	ldr	r3, [pc, #628]	; (8007a10 <imu_ahrs_update+0x848>)
 800779a:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * AHRSKi * halfT;
 800779e:	edd7 7a05 	vldr	s15, [r7, #20]
 80077a2:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8007a0c <imu_ahrs_update+0x844>
 80077a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077aa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80077ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077b2:	4b98      	ldr	r3, [pc, #608]	; (8007a14 <imu_ahrs_update+0x84c>)
 80077b4:	edd3 7a00 	vldr	s15, [r3]
 80077b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077bc:	4b95      	ldr	r3, [pc, #596]	; (8007a14 <imu_ahrs_update+0x84c>)
 80077be:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * AHRSKi * halfT;
 80077c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80077c6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8007a0c <imu_ahrs_update+0x844>
 80077ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077ce:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80077d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077d6:	4b90      	ldr	r3, [pc, #576]	; (8007a18 <imu_ahrs_update+0x850>)
 80077d8:	edd3 7a00 	vldr	s15, [r3]
 80077dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e0:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <imu_ahrs_update+0x850>)
 80077e2:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + AHRSKp * ex + exInt;
 80077e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80077ea:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007a1c <imu_ahrs_update+0x854>
 80077ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80077f2:	4b8b      	ldr	r3, [pc, #556]	; (8007a20 <imu_ahrs_update+0x858>)
 80077f4:	edd3 7a00 	vldr	s15, [r3]
 80077f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077fc:	4b84      	ldr	r3, [pc, #528]	; (8007a10 <imu_ahrs_update+0x848>)
 80077fe:	edd3 7a00 	vldr	s15, [r3]
 8007802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007806:	4b86      	ldr	r3, [pc, #536]	; (8007a20 <imu_ahrs_update+0x858>)
 8007808:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + AHRSKp * ey + eyInt;
 800780c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007810:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8007a1c <imu_ahrs_update+0x854>
 8007814:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007818:	4b82      	ldr	r3, [pc, #520]	; (8007a24 <imu_ahrs_update+0x85c>)
 800781a:	edd3 7a00 	vldr	s15, [r3]
 800781e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007822:	4b7c      	ldr	r3, [pc, #496]	; (8007a14 <imu_ahrs_update+0x84c>)
 8007824:	edd3 7a00 	vldr	s15, [r3]
 8007828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800782c:	4b7d      	ldr	r3, [pc, #500]	; (8007a24 <imu_ahrs_update+0x85c>)
 800782e:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + AHRSKp * ez + ezInt;
 8007832:	edd7 7a04 	vldr	s15, [r7, #16]
 8007836:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8007a1c <imu_ahrs_update+0x854>
 800783a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800783e:	4b7a      	ldr	r3, [pc, #488]	; (8007a28 <imu_ahrs_update+0x860>)
 8007840:	edd3 7a00 	vldr	s15, [r3]
 8007844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007848:	4b73      	ldr	r3, [pc, #460]	; (8007a18 <imu_ahrs_update+0x850>)
 800784a:	edd3 7a00 	vldr	s15, [r3]
 800784e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007852:	4b75      	ldr	r3, [pc, #468]	; (8007a28 <imu_ahrs_update+0x860>)
 8007854:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8007858:	4b74      	ldr	r3, [pc, #464]	; (8007a2c <imu_ahrs_update+0x864>)
 800785a:	edd3 7a00 	vldr	s15, [r3]
 800785e:	eeb1 7a67 	vneg.f32	s14, s15
 8007862:	4b6f      	ldr	r3, [pc, #444]	; (8007a20 <imu_ahrs_update+0x858>)
 8007864:	edd3 7a00 	vldr	s15, [r3]
 8007868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800786c:	4b70      	ldr	r3, [pc, #448]	; (8007a30 <imu_ahrs_update+0x868>)
 800786e:	edd3 6a00 	vldr	s13, [r3]
 8007872:	4b6c      	ldr	r3, [pc, #432]	; (8007a24 <imu_ahrs_update+0x85c>)
 8007874:	edd3 7a00 	vldr	s15, [r3]
 8007878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800787c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007880:	4b6c      	ldr	r3, [pc, #432]	; (8007a34 <imu_ahrs_update+0x86c>)
 8007882:	edd3 6a00 	vldr	s13, [r3]
 8007886:	4b68      	ldr	r3, [pc, #416]	; (8007a28 <imu_ahrs_update+0x860>)
 8007888:	edd3 7a00 	vldr	s15, [r3]
 800788c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007894:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800789c:	4b66      	ldr	r3, [pc, #408]	; (8007a38 <imu_ahrs_update+0x870>)
 800789e:	edd3 7a00 	vldr	s15, [r3]
 80078a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078a6:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 80078aa:	4b63      	ldr	r3, [pc, #396]	; (8007a38 <imu_ahrs_update+0x870>)
 80078ac:	ed93 7a00 	vldr	s14, [r3]
 80078b0:	4b5b      	ldr	r3, [pc, #364]	; (8007a20 <imu_ahrs_update+0x858>)
 80078b2:	edd3 7a00 	vldr	s15, [r3]
 80078b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ba:	4b5d      	ldr	r3, [pc, #372]	; (8007a30 <imu_ahrs_update+0x868>)
 80078bc:	edd3 6a00 	vldr	s13, [r3]
 80078c0:	4b59      	ldr	r3, [pc, #356]	; (8007a28 <imu_ahrs_update+0x860>)
 80078c2:	edd3 7a00 	vldr	s15, [r3]
 80078c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078ce:	4b59      	ldr	r3, [pc, #356]	; (8007a34 <imu_ahrs_update+0x86c>)
 80078d0:	edd3 6a00 	vldr	s13, [r3]
 80078d4:	4b53      	ldr	r3, [pc, #332]	; (8007a24 <imu_ahrs_update+0x85c>)
 80078d6:	edd3 7a00 	vldr	s15, [r3]
 80078da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078e2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80078e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ea:	4b50      	ldr	r3, [pc, #320]	; (8007a2c <imu_ahrs_update+0x864>)
 80078ec:	edd3 7a00 	vldr	s15, [r3]
 80078f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078f4:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 80078f8:	4b4f      	ldr	r3, [pc, #316]	; (8007a38 <imu_ahrs_update+0x870>)
 80078fa:	ed93 7a00 	vldr	s14, [r3]
 80078fe:	4b49      	ldr	r3, [pc, #292]	; (8007a24 <imu_ahrs_update+0x85c>)
 8007900:	edd3 7a00 	vldr	s15, [r3]
 8007904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007908:	4b48      	ldr	r3, [pc, #288]	; (8007a2c <imu_ahrs_update+0x864>)
 800790a:	edd3 6a00 	vldr	s13, [r3]
 800790e:	4b46      	ldr	r3, [pc, #280]	; (8007a28 <imu_ahrs_update+0x860>)
 8007910:	edd3 7a00 	vldr	s15, [r3]
 8007914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800791c:	4b45      	ldr	r3, [pc, #276]	; (8007a34 <imu_ahrs_update+0x86c>)
 800791e:	edd3 6a00 	vldr	s13, [r3]
 8007922:	4b3f      	ldr	r3, [pc, #252]	; (8007a20 <imu_ahrs_update+0x858>)
 8007924:	edd3 7a00 	vldr	s15, [r3]
 8007928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800792c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007930:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007938:	4b3d      	ldr	r3, [pc, #244]	; (8007a30 <imu_ahrs_update+0x868>)
 800793a:	edd3 7a00 	vldr	s15, [r3]
 800793e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007942:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 8007946:	4b3c      	ldr	r3, [pc, #240]	; (8007a38 <imu_ahrs_update+0x870>)
 8007948:	ed93 7a00 	vldr	s14, [r3]
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <imu_ahrs_update+0x860>)
 800794e:	edd3 7a00 	vldr	s15, [r3]
 8007952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007956:	4b35      	ldr	r3, [pc, #212]	; (8007a2c <imu_ahrs_update+0x864>)
 8007958:	edd3 6a00 	vldr	s13, [r3]
 800795c:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <imu_ahrs_update+0x85c>)
 800795e:	edd3 7a00 	vldr	s15, [r3]
 8007962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800796a:	4b31      	ldr	r3, [pc, #196]	; (8007a30 <imu_ahrs_update+0x868>)
 800796c:	edd3 6a00 	vldr	s13, [r3]
 8007970:	4b2b      	ldr	r3, [pc, #172]	; (8007a20 <imu_ahrs_update+0x858>)
 8007972:	edd3 7a00 	vldr	s15, [r3]
 8007976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800797a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800797e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007986:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <imu_ahrs_update+0x86c>)
 8007988:	edd3 7a00 	vldr	s15, [r3]
 800798c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007990:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8007994:	edd7 7a03 	vldr	s15, [r7, #12]
 8007998:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800799c:	edd7 7a02 	vldr	s15, [r7, #8]
 80079a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80079a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80079ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80079b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079b4:	edd7 7a00 	vldr	s15, [r7]
 80079b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80079bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079c0:	eeb0 0a67 	vmov.f32	s0, s15
 80079c4:	f7f9 fe84 	bl	80016d0 <inv_sqrt>
 80079c8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 80079cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80079d0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80079d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d8:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <imu_ahrs_update+0x870>)
 80079da:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 80079de:	ed97 7a02 	vldr	s14, [r7, #8]
 80079e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80079e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ea:	4b10      	ldr	r3, [pc, #64]	; (8007a2c <imu_ahrs_update+0x864>)
 80079ec:	edc3 7a00 	vstr	s15, [r3]
 80079f0:	e024      	b.n	8007a3c <imu_ahrs_update+0x874>
 80079f2:	bf00      	nop
 80079f4:	20003180 	.word	0x20003180
 80079f8:	20003184 	.word	0x20003184
 80079fc:	2000318c 	.word	0x2000318c
 8007a00:	20003190 	.word	0x20003190
 8007a04:	2000317c 	.word	0x2000317c
 8007a08:	20003188 	.word	0x20003188
 8007a0c:	00000000 	.word	0x00000000
 8007a10:	20003164 	.word	0x20003164
 8007a14:	20003168 	.word	0x20003168
 8007a18:	2000316c 	.word	0x2000316c
 8007a1c:	3e19999a 	.word	0x3e19999a
 8007a20:	20003170 	.word	0x20003170
 8007a24:	20003174 	.word	0x20003174
 8007a28:	20003178 	.word	0x20003178
 8007a2c:	20003158 	.word	0x20003158
 8007a30:	2000315c 	.word	0x2000315c
 8007a34:	20003160 	.word	0x20003160
 8007a38:	2000000c 	.word	0x2000000c
	q2 = tempq2 * norm;
 8007a3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007a40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <imu_ahrs_update+0x8a0>)
 8007a4a:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8007a4e:	ed97 7a00 	vldr	s14, [r7]
 8007a52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <imu_ahrs_update+0x8a4>)
 8007a5c:	edc3 7a00 	vstr	s15, [r3]
}
 8007a60:	bf00      	nop
 8007a62:	3778      	adds	r7, #120	; 0x78
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	2000315c 	.word	0x2000315c
 8007a6c:	20003160 	.word	0x20003160

08007a70 <imu_attitude_update>:

void imu_attitude_update(void) {
 8007a70:	b5b0      	push	{r4, r5, r7, lr}
 8007a72:	af00      	add	r7, sp, #0
	if (IMU_ORIENTATION == 0) {
		/* yaw    -pi----pi */
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8007a74:	4b63      	ldr	r3, [pc, #396]	; (8007c04 <imu_attitude_update+0x194>)
 8007a76:	edd3 7a00 	vldr	s15, [r3]
 8007a7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007a7e:	4b62      	ldr	r3, [pc, #392]	; (8007c08 <imu_attitude_update+0x198>)
 8007a80:	edd3 7a00 	vldr	s15, [r3]
 8007a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a88:	4b60      	ldr	r3, [pc, #384]	; (8007c0c <imu_attitude_update+0x19c>)
 8007a8a:	edd3 7a00 	vldr	s15, [r3]
 8007a8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007a92:	4b5f      	ldr	r3, [pc, #380]	; (8007c10 <imu_attitude_update+0x1a0>)
 8007a94:	edd3 7a00 	vldr	s15, [r3]
 8007a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q2 * q2 - 2 * q3 * q3 + 1) * IMU_YAW_INVERT;
 8007aa0:	ee17 0a90 	vmov	r0, s15
 8007aa4:	f7f8 fd50 	bl	8000548 <__aeabi_f2d>
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	460d      	mov	r5, r1
 8007aac:	4b56      	ldr	r3, [pc, #344]	; (8007c08 <imu_attitude_update+0x198>)
 8007aae:	edd3 7a00 	vldr	s15, [r3]
 8007ab2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007aba:	4b53      	ldr	r3, [pc, #332]	; (8007c08 <imu_attitude_update+0x198>)
 8007abc:	edd3 7a00 	vldr	s15, [r3]
 8007ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ac4:	4b52      	ldr	r3, [pc, #328]	; (8007c10 <imu_attitude_update+0x1a0>)
 8007ac6:	edd3 7a00 	vldr	s15, [r3]
 8007aca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007ace:	4b50      	ldr	r3, [pc, #320]	; (8007c10 <imu_attitude_update+0x1a0>)
 8007ad0:	edd3 7a00 	vldr	s15, [r3]
 8007ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ae4:	ee17 0a90 	vmov	r0, s15
 8007ae8:	f7f8 fd2e 	bl	8000548 <__aeabi_f2d>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	ec43 2b11 	vmov	d1, r2, r3
 8007af4:	ec45 4b10 	vmov	d0, r4, r5
 8007af8:	f01b fc5e 	bl	80233b8 <atan2>
 8007afc:	ec53 2b10 	vmov	r2, r3, d0
 8007b00:	4610      	mov	r0, r2
 8007b02:	4619      	mov	r1, r3
 8007b04:	f7f9 f870 	bl	8000be8 <__aeabi_d2f>
 8007b08:	4603      	mov	r3, r0
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8007b0a:	4a42      	ldr	r2, [pc, #264]	; (8007c14 <imu_attitude_update+0x1a4>)
 8007b0c:	6093      	str	r3, [r2, #8]
		/* pitch  -pi/2----pi/2 */
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
 8007b0e:	4b3d      	ldr	r3, [pc, #244]	; (8007c04 <imu_attitude_update+0x194>)
 8007b10:	edd3 7a00 	vldr	s15, [r3]
 8007b14:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007b18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b1c:	4b3c      	ldr	r3, [pc, #240]	; (8007c10 <imu_attitude_update+0x1a0>)
 8007b1e:	edd3 7a00 	vldr	s15, [r3]
 8007b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b26:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <imu_attitude_update+0x19c>)
 8007b28:	edd3 7a00 	vldr	s15, [r3]
 8007b2c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007b30:	4b35      	ldr	r3, [pc, #212]	; (8007c08 <imu_attitude_update+0x198>)
 8007b32:	edd3 7a00 	vldr	s15, [r3]
 8007b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b3e:	ee17 0a90 	vmov	r0, s15
 8007b42:	f7f8 fd01 	bl	8000548 <__aeabi_f2d>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	ec43 2b10 	vmov	d0, r2, r3
 8007b4e:	f01b fbff 	bl	8023350 <asin>
 8007b52:	ec53 2b10 	vmov	r2, r3, d0
 8007b56:	4610      	mov	r0, r2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7f9 f845 	bl	8000be8 <__aeabi_d2f>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4a2c      	ldr	r2, [pc, #176]	; (8007c14 <imu_attitude_update+0x1a4>)
 8007b62:	6013      	str	r3, [r2, #0]
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8007b64:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <imu_attitude_update+0x198>)
 8007b66:	edd3 7a00 	vldr	s15, [r3]
 8007b6a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007b6e:	4b28      	ldr	r3, [pc, #160]	; (8007c10 <imu_attitude_update+0x1a0>)
 8007b70:	edd3 7a00 	vldr	s15, [r3]
 8007b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b78:	4b24      	ldr	r3, [pc, #144]	; (8007c0c <imu_attitude_update+0x19c>)
 8007b7a:	edd3 7a00 	vldr	s15, [r3]
 8007b7e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007b82:	4b20      	ldr	r3, [pc, #128]	; (8007c04 <imu_attitude_update+0x194>)
 8007b84:	edd3 7a00 	vldr	s15, [r3]
 8007b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
 8007b90:	ee17 0a90 	vmov	r0, s15
 8007b94:	f7f8 fcd8 	bl	8000548 <__aeabi_f2d>
 8007b98:	4604      	mov	r4, r0
 8007b9a:	460d      	mov	r5, r1
 8007b9c:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <imu_attitude_update+0x194>)
 8007b9e:	edd3 7a00 	vldr	s15, [r3]
 8007ba2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8007ba6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <imu_attitude_update+0x194>)
 8007bac:	edd3 7a00 	vldr	s15, [r3]
 8007bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bb4:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <imu_attitude_update+0x198>)
 8007bb6:	edd3 7a00 	vldr	s15, [r3]
 8007bba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007bbe:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <imu_attitude_update+0x198>)
 8007bc0:	edd3 7a00 	vldr	s15, [r3]
 8007bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bd4:	ee17 0a90 	vmov	r0, s15
 8007bd8:	f7f8 fcb6 	bl	8000548 <__aeabi_f2d>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	ec43 2b11 	vmov	d1, r2, r3
 8007be4:	ec45 4b10 	vmov	d0, r4, r5
 8007be8:	f01b fbe6 	bl	80233b8 <atan2>
 8007bec:	ec53 2b10 	vmov	r2, r3, d0
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	f7f8 fff8 	bl	8000be8 <__aeabi_d2f>
 8007bf8:	4603      	mov	r3, r0
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8007bfa:	4a06      	ldr	r2, [pc, #24]	; (8007c14 <imu_attitude_update+0x1a4>)
 8007bfc:	6053      	str	r3, [r2, #4]
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
	}
}
 8007bfe:	bf00      	nop
 8007c00:	bdb0      	pop	{r4, r5, r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20003158 	.word	0x20003158
 8007c08:	2000315c 	.word	0x2000315c
 8007c0c:	2000000c 	.word	0x2000000c
 8007c10:	20003160 	.word	0x20003160
 8007c14:	20003194 	.word	0x20003194

08007c18 <launcher_control_task>:
extern ref_magazine_data_t ref_mag_data;
extern uint32_t ref_mag_data_txno;
static uint32_t prev_power_data_no = 0;
static uint32_t prev_mag_data_no = 0;

void launcher_control_task(void *argument) {
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		//event flags!
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8007c20:	4b26      	ldr	r3, [pc, #152]	; (8007cbc <launcher_control_task+0xa4>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	2107      	movs	r1, #7
 8007c30:	f012 fcbc 	bl	801a5ac <xEventGroupWaitBits>
		portMAX_DELAY);
		status_led(4, on_led);
 8007c34:	2100      	movs	r1, #0
 8007c36:	2004      	movs	r0, #4
 8007c38:	f7fa fa42 	bl	80020c0 <status_led>
		start_time = xTaskGetTickCount();
 8007c3c:	f014 f878 	bl	801bd30 <xTaskGetTickCount>
 8007c40:	4603      	mov	r3, r0
 8007c42:	60fb      	str	r3, [r7, #12]

		if (launcher_ctrl_data.enabled) {
 8007c44:	4b1e      	ldr	r3, [pc, #120]	; (8007cc0 <launcher_control_task+0xa8>)
 8007c46:	795b      	ldrb	r3, [r3, #5]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d006      	beq.n	8007c5a <launcher_control_task+0x42>
			launcher_control(can_motors + LFRICTION_MOTOR_ID - 1,
 8007c4c:	4b1d      	ldr	r3, [pc, #116]	; (8007cc4 <launcher_control_task+0xac>)
 8007c4e:	491e      	ldr	r1, [pc, #120]	; (8007cc8 <launcher_control_task+0xb0>)
 8007c50:	4a1e      	ldr	r2, [pc, #120]	; (8007ccc <launcher_control_task+0xb4>)
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f840 	bl	8007cd8 <launcher_control>
 8007c58:	e01e      	b.n	8007c98 <launcher_control_task+0x80>
					can_motors + RFRICTION_MOTOR_ID - 1,
					can_motors + FEEDER_MOTOR_ID - 1);

		} else {
			can_motors[LFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8007c5a:	4b1d      	ldr	r3, [pc, #116]	; (8007cd0 <launcher_control_task+0xb8>)
 8007c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c60:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
			can_motors[RFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8007c6a:	4b19      	ldr	r3, [pc, #100]	; (8007cd0 <launcher_control_task+0xb8>)
 8007c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c70:	461a      	mov	r2, r3
 8007c72:	f04f 0300 	mov.w	r3, #0
 8007c76:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
			can_motors[FEEDER_MOTOR_ID - 1].rpm_pid.output = 0;
 8007c7a:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <launcher_control_task+0xb8>)
 8007c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c80:	461a      	mov	r2, r3
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	6493      	str	r3, [r2, #72]	; 0x48
			motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 8007c88:	2300      	movs	r3, #0
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2313      	movs	r3, #19
 8007c8e:	2217      	movs	r2, #23
 8007c90:	2112      	movs	r1, #18
 8007c92:	480f      	ldr	r0, [pc, #60]	; (8007cd0 <launcher_control_task+0xb8>)
 8007c94:	f003 ff56 	bl	800bb44 <motor_send_can>
			RFRICTION_MOTOR_ID, 0);
		}
		status_led(4, off_led);
 8007c98:	2101      	movs	r1, #1
 8007c9a:	2004      	movs	r0, #4
 8007c9c:	f7fa fa10 	bl	80020c0 <status_led>
		//vTaskDelay(CHASSIS_DELAY);
		xEventGroupClearBits(launcher_event_group, 0b111);
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <launcher_control_task+0xa4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2107      	movs	r1, #7
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f012 fd4e 	bl	801a748 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 8007cac:	f107 030c 	add.w	r3, r7, #12
 8007cb0:	210a      	movs	r1, #10
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f013 fe6e 	bl	801b994 <vTaskDelayUntil>
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8007cb8:	e7b2      	b.n	8007c20 <launcher_control_task+0x8>
 8007cba:	bf00      	nop
 8007cbc:	200004c4 	.word	0x200004c4
 8007cc0:	20002f38 	.word	0x20002f38
 8007cc4:	20002d40 	.word	0x20002d40
 8007cc8:	20002980 	.word	0x20002980
 8007ccc:	20002890 	.word	0x20002890
 8007cd0:	200018a0 	.word	0x200018a0
 8007cd4:	00000000 	.word	0x00000000

08007cd8 <launcher_control>:
	}

}

void launcher_control(motor_data_t *left_friction_motor,
		motor_data_t *right_friction_motor, motor_data_t *feeder) {
 8007cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cdc:	b094      	sub	sp, #80	; 0x50
 8007cde:	af02      	add	r7, sp, #8
 8007ce0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ce2:	6339      	str	r1, [r7, #48]	; 0x30
 8007ce4:	62fa      	str	r2, [r7, #44]	; 0x2c

	int16_t feeder_output = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static uint32_t overheat_time;
	static float target_ang;
	uint32_t curr_time = HAL_GetTick();
 8007cec:	f006 fc26 	bl	800e53c <HAL_GetTick>
 8007cf0:	63f8      	str	r0, [r7, #60]	; 0x3c
	static uint32_t overheat_start;
	static uint32_t last_fire;
	static uint8_t fired;
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8007cf2:	4bb5      	ldr	r3, [pc, #724]	; (8007fc8 <launcher_control+0x2f0>)
 8007cf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007cf8:	461a      	mov	r2, r3
			* referee_limiters.feeding_speed / FEEDER_SPEED_RATIO;
 8007cfa:	4bb4      	ldr	r3, [pc, #720]	; (8007fcc <launcher_control+0x2f4>)
 8007cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d00:	fb02 f303 	mul.w	r3, r2, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	da00      	bge.n	8007d0a <launcher_control+0x32>
 8007d08:	3307      	adds	r3, #7
 8007d0a:	10db      	asrs	r3, r3, #3
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8007d0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	if (launcher_ctrl_data.gun_feeding_speed == 0) {
 8007d10:	4bad      	ldr	r3, [pc, #692]	; (8007fc8 <launcher_control+0x2f0>)
 8007d12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f040 80e7 	bne.w	8007eea <launcher_control+0x212>
		feeder_output = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if (launcher_ctrl_data.override == 1) {
 8007d22:	4ba9      	ldr	r3, [pc, #676]	; (8007fc8 <launcher_control+0x2f0>)
 8007d24:	791b      	ldrb	r3, [r3, #4]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d13b      	bne.n	8007da2 <launcher_control+0xca>
			speed_pid(
					referee_limiters.projectile_speed * FRICTION_INVERT
 8007d2a:	4ba8      	ldr	r3, [pc, #672]	; (8007fcc <launcher_control+0x2f4>)
 8007d2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007d30:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007d32:	4ba7      	ldr	r3, [pc, #668]	; (8007fd0 <launcher_control+0x2f8>)
 8007d34:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7f8 fbf3 	bl	8000524 <__aeabi_i2d>
 8007d3e:	4604      	mov	r4, r0
 8007d40:	460d      	mov	r5, r1
					left_friction_motor->raw_data.rpm,
 8007d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7f8 fbeb 	bl	8000524 <__aeabi_i2d>
 8007d4e:	4680      	mov	r8, r0
 8007d50:	4689      	mov	r9, r1
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	3338      	adds	r3, #56	; 0x38
 8007d56:	4618      	mov	r0, r3
 8007d58:	ec49 8b11 	vmov	d1, r8, r9
 8007d5c:	ec45 4b10 	vmov	d0, r4, r5
 8007d60:	f003 fe14 	bl	800b98c <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-referee_limiters.projectile_speed * FRICTION_INVERT
 8007d64:	4b99      	ldr	r3, [pc, #612]	; (8007fcc <launcher_control+0x2f4>)
 8007d66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007d6a:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007d6c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7f8 fbd5 	bl	8000524 <__aeabi_i2d>
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	460d      	mov	r5, r1
					right_friction_motor->raw_data.rpm,
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f8 fbcd 	bl	8000524 <__aeabi_i2d>
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	4689      	mov	r9, r1
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	3338      	adds	r3, #56	; 0x38
 8007d92:	4618      	mov	r0, r3
 8007d94:	ec49 8b11 	vmov	d1, r8, r9
 8007d98:	ec45 4b10 	vmov	d0, r4, r5
 8007d9c:	f003 fdf6 	bl	800b98c <speed_pid>
 8007da0:	e09a      	b.n	8007ed8 <launcher_control+0x200>
					&right_friction_motor->rpm_pid);

		} else if (clear_time + CLEAR_DELAY > HAL_GetTick()) {
 8007da2:	4b8c      	ldr	r3, [pc, #560]	; (8007fd4 <launcher_control+0x2fc>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8007daa:	f006 fbc7 	bl	800e53c <HAL_GetTick>
 8007dae:	4603      	mov	r3, r0
 8007db0:	429c      	cmp	r4, r3
 8007db2:	d95f      	bls.n	8007e74 <launcher_control+0x19c>
			speed_pid(
					referee_limiters.projectile_speed * FRICTION_INVERT
 8007db4:	4b85      	ldr	r3, [pc, #532]	; (8007fcc <launcher_control+0x2f4>)
 8007db6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007dba:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007dbc:	4b84      	ldr	r3, [pc, #528]	; (8007fd0 <launcher_control+0x2f8>)
 8007dbe:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7f8 fbae 	bl	8000524 <__aeabi_i2d>
 8007dc8:	4604      	mov	r4, r0
 8007dca:	460d      	mov	r5, r1
					left_friction_motor->raw_data.rpm,
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7f8 fba6 	bl	8000524 <__aeabi_i2d>
 8007dd8:	4680      	mov	r8, r0
 8007dda:	4689      	mov	r9, r1
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dde:	3338      	adds	r3, #56	; 0x38
 8007de0:	4618      	mov	r0, r3
 8007de2:	ec49 8b11 	vmov	d1, r8, r9
 8007de6:	ec45 4b10 	vmov	d0, r4, r5
 8007dea:	f003 fdcf 	bl	800b98c <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-referee_limiters.projectile_speed * FRICTION_INVERT
 8007dee:	4b77      	ldr	r3, [pc, #476]	; (8007fcc <launcher_control+0x2f4>)
 8007df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007df4:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8007df6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f8 fb90 	bl	8000524 <__aeabi_i2d>
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
					right_friction_motor->raw_data.rpm,
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7f8 fb88 	bl	8000524 <__aeabi_i2d>
 8007e14:	4680      	mov	r8, r0
 8007e16:	4689      	mov	r9, r1
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	3338      	adds	r3, #56	; 0x38
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	ec49 8b11 	vmov	d1, r8, r9
 8007e22:	ec45 4b10 	vmov	d0, r4, r5
 8007e26:	f003 fdb1 	bl	800b98c <speed_pid>
					&right_friction_motor->rpm_pid);
			if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 8007e2a:	4b6b      	ldr	r3, [pc, #428]	; (8007fd8 <launcher_control+0x300>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d11b      	bne.n	8007e6a <launcher_control+0x192>
				if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 8007e32:	4b6a      	ldr	r3, [pc, #424]	; (8007fdc <launcher_control+0x304>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8007e3a:	f006 fb7f 	bl	800e53c <HAL_GetTick>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	429c      	cmp	r4, r3
 8007e42:	d305      	bcc.n	8007e50 <launcher_control+0x178>
						|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8007e4a:	4a65      	ldr	r2, [pc, #404]	; (8007fe0 <launcher_control+0x308>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	da07      	bge.n	8007e60 <launcher_control+0x188>
					unjamming = 0;
 8007e50:	4b61      	ldr	r3, [pc, #388]	; (8007fd8 <launcher_control+0x300>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
#ifndef ANGLE_FEEDER
					feeder_output = firing_speed;
 8007e56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007e5e:	e03b      	b.n	8007ed8 <launcher_control+0x200>
#endif
				} else {
					feeder_output = FEEDER_UNJAM_SPD;
 8007e60:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 8007e64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007e68:	e036      	b.n	8007ed8 <launcher_control+0x200>
				}
			} else {
#ifndef ANGLE_FEEDER
				feeder_output = firing_speed;
 8007e6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007e72:	e031      	b.n	8007ed8 <launcher_control+0x200>
;
#endif
			}

		} else if (ref_game_state.game_progress == 4){
 8007e74:	4b5b      	ldr	r3, [pc, #364]	; (8007fe4 <launcher_control+0x30c>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	f023 030f 	bic.w	r3, r3, #15
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d122      	bne.n	8007ec8 <launcher_control+0x1f0>

			speed_pid(FRICTION_SB_SPIN * FRICTION_INVERT,
					left_friction_motor->raw_data.rpm,
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(FRICTION_SB_SPIN * FRICTION_INVERT,
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7f8 fb4b 	bl	8000524 <__aeabi_i2d>
 8007e8e:	4604      	mov	r4, r0
 8007e90:	460d      	mov	r5, r1
 8007e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e94:	3338      	adds	r3, #56	; 0x38
 8007e96:	4618      	mov	r0, r3
 8007e98:	ec45 4b11 	vmov	d1, r4, r5
 8007e9c:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8007fb8 <launcher_control+0x2e0>
 8007ea0:	f003 fd74 	bl	800b98c <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-FRICTION_SB_SPIN * FRICTION_INVERT,
					right_friction_motor->raw_data.rpm,
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7f8 fb3a 	bl	8000524 <__aeabi_i2d>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	3338      	adds	r3, #56	; 0x38
 8007eb8:	4618      	mov	r0, r3
 8007eba:	ec45 4b11 	vmov	d1, r4, r5
 8007ebe:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8007fc0 <launcher_control+0x2e8>
 8007ec2:	f003 fd63 	bl	800b98c <speed_pid>
 8007ec6:	e007      	b.n	8007ed8 <launcher_control+0x200>
					&right_friction_motor->rpm_pid);

		}else {
			left_friction_motor->rpm_pid.output = 0;
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	659a      	str	r2, [r3, #88]	; 0x58
			right_friction_motor->rpm_pid.output = 0;
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	659a      	str	r2, [r3, #88]	; 0x58
		}
		overheat_time = curr_time + 1000;
 8007ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eda:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007ede:	4a42      	ldr	r2, [pc, #264]	; (8007fe8 <launcher_control+0x310>)
 8007ee0:	6013      	str	r3, [r2, #0]
		overheat = 0;
 8007ee2:	4b42      	ldr	r3, [pc, #264]	; (8007fec <launcher_control+0x314>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	e1fe      	b.n	80082e8 <launcher_control+0x610>
	} else {

#ifdef OVERHEAT_PROTECTION
		if (overheat == 1) {
 8007eea:	4b40      	ldr	r3, [pc, #256]	; (8007fec <launcher_control+0x314>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d108      	bne.n	8007f04 <launcher_control+0x22c>
			if (curr_time - overheat_start >= OVERHEAT_TIME) {
 8007ef2:	4b3f      	ldr	r3, [pc, #252]	; (8007ff0 <launcher_control+0x318>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b63      	cmp	r3, #99	; 0x63
 8007efc:	d902      	bls.n	8007f04 <launcher_control+0x22c>
				overheat = 0;
 8007efe:	4a3b      	ldr	r2, [pc, #236]	; (8007fec <launcher_control+0x314>)
 8007f00:	2300      	movs	r3, #0
 8007f02:	7013      	strb	r3, [r2, #0]
			}
		}
		if (prev_power_data_no != ref_power_data_txno) {
 8007f04:	4b3b      	ldr	r3, [pc, #236]	; (8007ff4 <launcher_control+0x31c>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b3b      	ldr	r3, [pc, #236]	; (8007ff8 <launcher_control+0x320>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	f000 80c9 	beq.w	80080a4 <launcher_control+0x3cc>
			prev_power_data_no = ref_power_data_txno;
 8007f12:	4b39      	ldr	r3, [pc, #228]	; (8007ff8 <launcher_control+0x320>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a37      	ldr	r2, [pc, #220]	; (8007ff4 <launcher_control+0x31c>)
 8007f18:	6013      	str	r3, [r2, #0]
//			int16_t cur_fire_rate = fabs(launcher_ctrl_data.gun_feeding_speed* referee_limiters.feeding_speed);
			int16_t ammo_remaining;

#ifdef BULLET_17
			uint8_t active_feeder = 2;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			if (ref_robot_data.shooter17_heat1_cooling_limit == 0
 8007f20:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <launcher_control+0x324>)
 8007f22:	89db      	ldrh	r3, [r3, #14]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d108      	bne.n	8007f3c <launcher_control+0x264>
					&& ref_robot_data.shooter17_heat0_cooling_limit == 0) {
 8007f2a:	4b34      	ldr	r3, [pc, #208]	; (8007ffc <launcher_control+0x324>)
 8007f2c:	891b      	ldrh	r3, [r3, #8]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <launcher_control+0x264>
				active_feeder = 3;
 8007f34:	2303      	movs	r3, #3
 8007f36:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007f3a:	e010      	b.n	8007f5e <launcher_control+0x286>
			} else if (ref_robot_data.shooter17_heat0_cooling_limit == 0) {
 8007f3c:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <launcher_control+0x324>)
 8007f3e:	891b      	ldrh	r3, [r3, #8]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <launcher_control+0x276>
				active_feeder = 1;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007f4c:	e007      	b.n	8007f5e <launcher_control+0x286>
			} else if (ref_robot_data.shooter17_heat1_cooling_limit == 0) {
 8007f4e:	4b2b      	ldr	r3, [pc, #172]	; (8007ffc <launcher_control+0x324>)
 8007f50:	89db      	ldrh	r3, [r3, #14]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <launcher_control+0x286>
				active_feeder = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			}

			if (active_feeder == 2) {
 8007f5e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d10e      	bne.n	8007f84 <launcher_control+0x2ac>
				if (ref_power_data.shooter_heat0
 8007f66:	4b26      	ldr	r3, [pc, #152]	; (8008000 <launcher_control+0x328>)
 8007f68:	895b      	ldrh	r3, [r3, #10]
 8007f6a:	b29a      	uxth	r2, r3
						>= ref_power_data.shooter_heat1) {
 8007f6c:	4b24      	ldr	r3, [pc, #144]	; (8008000 <launcher_control+0x328>)
 8007f6e:	899b      	ldrh	r3, [r3, #12]
 8007f70:	b29b      	uxth	r3, r3
				if (ref_power_data.shooter_heat0
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d303      	bcc.n	8007f7e <launcher_control+0x2a6>
					active_feeder = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8007f7c:	e002      	b.n	8007f84 <launcher_control+0x2ac>
				} else {
					active_feeder = 1;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				}

			}

			if (active_feeder == 0) {
 8007f84:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d13d      	bne.n	8008008 <launcher_control+0x330>
				ammo_remaining =
						((((int16_t) ref_robot_data.shooter17_heat0_cooling_limit
 8007f8c:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <launcher_control+0x324>)
 8007f8e:	891b      	ldrh	r3, [r3, #8]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	461a      	mov	r2, r3
								- (int16_t) ref_power_data.shooter_heat0))
 8007f96:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <launcher_control+0x328>)
 8007f98:	895b      	ldrh	r3, [r3, #10]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	b21b      	sxth	r3, r3
 8007f9e:	1ad1      	subs	r1, r2, r3
								/ BULLET_17_HEAT) - 2;
 8007fa0:	4b18      	ldr	r3, [pc, #96]	; (8008004 <launcher_control+0x32c>)
 8007fa2:	fb83 2301 	smull	r2, r3, r3, r1
 8007fa6:	109a      	asrs	r2, r3, #2
 8007fa8:	17cb      	asrs	r3, r1, #31
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b02      	subs	r3, #2
 8007fb0:	b29b      	uxth	r3, r3
				ammo_remaining =
 8007fb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007fb6:	e040      	b.n	800803a <launcher_control+0x362>
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	c08f4000 	.word	0xc08f4000
 8007fc0:	00000000 	.word	0x00000000
 8007fc4:	408f4000 	.word	0x408f4000
 8007fc8:	20002f38 	.word	0x20002f38
 8007fcc:	20003210 	.word	0x20003210
 8007fd0:	fffffe98 	.word	0xfffffe98
 8007fd4:	200031f8 	.word	0x200031f8
 8007fd8:	200031fc 	.word	0x200031fc
 8007fdc:	200031f4 	.word	0x200031f4
 8007fe0:	ffffd9b8 	.word	0xffffd9b8
 8007fe4:	2000326c 	.word	0x2000326c
 8007fe8:	20003204 	.word	0x20003204
 8007fec:	200031fd 	.word	0x200031fd
 8007ff0:	20003208 	.word	0x20003208
 8007ff4:	20003200 	.word	0x20003200
 8007ff8:	200032c4 	.word	0x200032c4
 8007ffc:	20003294 	.word	0x20003294
 8008000:	200032b4 	.word	0x200032b4
 8008004:	66666667 	.word	0x66666667
			} else if (active_feeder == 1) {
 8008008:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800800c:	2b01      	cmp	r3, #1
 800800e:	d114      	bne.n	800803a <launcher_control+0x362>
				ammo_remaining =
						((((int16_t) ref_robot_data.shooter17_heat1_cooling_limit
 8008010:	4ba5      	ldr	r3, [pc, #660]	; (80082a8 <launcher_control+0x5d0>)
 8008012:	89db      	ldrh	r3, [r3, #14]
 8008014:	b29b      	uxth	r3, r3
 8008016:	b21b      	sxth	r3, r3
 8008018:	461a      	mov	r2, r3
								- (int16_t) ref_power_data.shooter_heat1))
 800801a:	4ba4      	ldr	r3, [pc, #656]	; (80082ac <launcher_control+0x5d4>)
 800801c:	899b      	ldrh	r3, [r3, #12]
 800801e:	b29b      	uxth	r3, r3
 8008020:	b21b      	sxth	r3, r3
 8008022:	1ad1      	subs	r1, r2, r3
								/ BULLET_17_HEAT) - 2;
 8008024:	4ba2      	ldr	r3, [pc, #648]	; (80082b0 <launcher_control+0x5d8>)
 8008026:	fb83 2301 	smull	r2, r3, r3, r1
 800802a:	109a      	asrs	r2, r3, #2
 800802c:	17cb      	asrs	r3, r1, #31
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b02      	subs	r3, #2
 8008034:	b29b      	uxth	r3, r3
				ammo_remaining =
 8008036:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			}
			if (active_feeder == 3) {
 800803a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800803e:	2b03      	cmp	r3, #3
 8008040:	d103      	bne.n	800804a <launcher_control+0x372>
				ammo_remaining = 1000;
 8008042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008046:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			}
#endif

#endif

			if (ammo_remaining < 3) {
 800804a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800804e:	2b02      	cmp	r3, #2
 8008050:	dc06      	bgt.n	8008060 <launcher_control+0x388>
				overheat = 1;
 8008052:	4a98      	ldr	r2, [pc, #608]	; (80082b4 <launcher_control+0x5dc>)
 8008054:	2301      	movs	r3, #1
 8008056:	7013      	strb	r3, [r2, #0]
				overheat_start = curr_time;
 8008058:	4a97      	ldr	r2, [pc, #604]	; (80082b8 <launcher_control+0x5e0>)
 800805a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	e011      	b.n	8008084 <launcher_control+0x3ac>
			} else {
				if (ammo_remaining < 10){
 8008060:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8008064:	2b09      	cmp	r3, #9
 8008066:	dc0d      	bgt.n	8008084 <launcher_control+0x3ac>
					firing_speed = firing_speed * ammo_remaining/10;
 8008068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800806c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8008070:	fb02 f103 	mul.w	r1, r2, r3
 8008074:	4b8e      	ldr	r3, [pc, #568]	; (80082b0 <launcher_control+0x5d8>)
 8008076:	fb83 2301 	smull	r2, r3, r3, r1
 800807a:	109a      	asrs	r2, r3, #2
 800807c:	17cb      	asrs	r3, r1, #31
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				}
			}
			overheat_time = curr_time
					+ (ammo_remaining * 60 * 1000) / (firing_speed) - 50;
 8008084:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8008088:	f64e 2260 	movw	r2, #60000	; 0xea60
 800808c:	fb03 f202 	mul.w	r2, r3, r2
 8008090:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008094:	fb92 f3f3 	sdiv	r3, r2, r3
 8008098:	461a      	mov	r2, r3
 800809a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809c:	4413      	add	r3, r2
 800809e:	3b32      	subs	r3, #50	; 0x32
			overheat_time = curr_time
 80080a0:	4a86      	ldr	r2, [pc, #536]	; (80082bc <launcher_control+0x5e4>)
 80080a2:	6013      	str	r3, [r2, #0]
		}
#endif

		//TODO: add in speed checks and shtuffasdwqwe
		clear_time = HAL_GetTick();
 80080a4:	f006 fa4a 	bl	800e53c <HAL_GetTick>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4a85      	ldr	r2, [pc, #532]	; (80082c0 <launcher_control+0x5e8>)
 80080ac:	6013      	str	r3, [r2, #0]
		speed_pid(
				referee_limiters.projectile_speed * FRICTION_INVERT
 80080ae:	4b85      	ldr	r3, [pc, #532]	; (80082c4 <launcher_control+0x5ec>)
 80080b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80080b4:	461a      	mov	r2, r3
						* PROJECTILE_SPEED_RATIO,
 80080b6:	4b84      	ldr	r3, [pc, #528]	; (80082c8 <launcher_control+0x5f0>)
 80080b8:	fb02 f303 	mul.w	r3, r2, r3
		speed_pid(
 80080bc:	4618      	mov	r0, r3
 80080be:	f7f8 fa31 	bl	8000524 <__aeabi_i2d>
 80080c2:	4680      	mov	r8, r0
 80080c4:	4689      	mov	r9, r1
				left_friction_motor->raw_data.rpm,
 80080c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7f8 fa29 	bl	8000524 <__aeabi_i2d>
 80080d2:	4604      	mov	r4, r0
 80080d4:	460d      	mov	r5, r1
 80080d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d8:	3338      	adds	r3, #56	; 0x38
 80080da:	4618      	mov	r0, r3
 80080dc:	ec45 4b11 	vmov	d1, r4, r5
 80080e0:	ec49 8b10 	vmov	d0, r8, r9
 80080e4:	f003 fc52 	bl	800b98c <speed_pid>
				&left_friction_motor->rpm_pid);
		speed_pid(
				-referee_limiters.projectile_speed * FRICTION_INVERT
 80080e8:	4b76      	ldr	r3, [pc, #472]	; (80082c4 <launcher_control+0x5ec>)
 80080ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80080ee:	461a      	mov	r2, r3
						* PROJECTILE_SPEED_RATIO,
 80080f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
		speed_pid(
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7f8 fa13 	bl	8000524 <__aeabi_i2d>
 80080fe:	4680      	mov	r8, r0
 8008100:	4689      	mov	r9, r1
				right_friction_motor->raw_data.rpm,
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(
 8008108:	4618      	mov	r0, r3
 800810a:	f7f8 fa0b 	bl	8000524 <__aeabi_i2d>
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	3338      	adds	r3, #56	; 0x38
 8008116:	4618      	mov	r0, r3
 8008118:	ec45 4b11 	vmov	d1, r4, r5
 800811c:	ec49 8b10 	vmov	d0, r8, r9
 8008120:	f003 fc34 	bl	800b98c <speed_pid>

		}
		last_fire = curr_time;
#endif

		if (((((fabs(left_friction_motor->raw_data.rpm)
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800812a:	4618      	mov	r0, r3
 800812c:	f7f8 f9fa 	bl	8000524 <__aeabi_i2d>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4692      	mov	sl, r2
 8008136:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
				- fabs(
						(launcher_ctrl_data.projectile_speed
 800813a:	4b64      	ldr	r3, [pc, #400]	; (80082cc <launcher_control+0x5f4>)
 800813c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008140:	461a      	mov	r2, r3
								* PROJECTILE_SPEED_RATIO
								* referee_limiters.projectile_speed))
 8008142:	4b60      	ldr	r3, [pc, #384]	; (80082c4 <launcher_control+0x5ec>)
 8008144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008148:	fb02 f303 	mul.w	r3, r2, r3
 800814c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008150:	fb02 f303 	mul.w	r3, r2, r3
				- fabs(
 8008154:	4618      	mov	r0, r3
 8008156:	f7f8 f9e5 	bl	8000524 <__aeabi_i2d>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	623a      	str	r2, [r7, #32]
 8008160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
 8008166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800816a:	4650      	mov	r0, sl
 800816c:	4659      	mov	r1, fp
 800816e:	f7f8 f88b 	bl	8000288 <__aeabi_dsub>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	4610      	mov	r0, r2
 8008178:	4619      	mov	r1, r3
		if (((((fabs(left_friction_motor->raw_data.rpm)
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	4b54      	ldr	r3, [pc, #336]	; (80082d0 <launcher_control+0x5f8>)
 8008180:	f7f8 fcac 	bl	8000adc <__aeabi_dcmplt>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80ae 	beq.w	80082e8 <launcher_control+0x610>
				< LAUNCHER_MARGIN)))
				&& ((fabs(right_friction_motor->raw_data.rpm)
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f7f8 f9c6 	bl	8000524 <__aeabi_i2d>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	61ba      	str	r2, [r7, #24]
 800819e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081a2:	61fb      	str	r3, [r7, #28]
						- fabs(
								(launcher_ctrl_data.projectile_speed
 80081a4:	4b49      	ldr	r3, [pc, #292]	; (80082cc <launcher_control+0x5f4>)
 80081a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081aa:	461a      	mov	r2, r3
										* PROJECTILE_SPEED_RATIO
										* referee_limiters.projectile_speed))
 80081ac:	4b45      	ldr	r3, [pc, #276]	; (80082c4 <launcher_control+0x5ec>)
 80081ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
 80081b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
						- fabs(
 80081be:	4618      	mov	r0, r3
 80081c0:	f7f8 f9b0 	bl	8000524 <__aeabi_i2d>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	613a      	str	r2, [r7, #16]
 80081ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80081d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80081d8:	f7f8 f856 	bl	8000288 <__aeabi_dsub>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4610      	mov	r0, r2
 80081e2:	4619      	mov	r1, r3
				&& ((fabs(right_friction_motor->raw_data.rpm)
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	4b39      	ldr	r3, [pc, #228]	; (80082d0 <launcher_control+0x5f8>)
 80081ea:	f7f8 fc77 	bl	8000adc <__aeabi_dcmplt>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d079      	beq.n	80082e8 <launcher_control+0x610>
						< LAUNCHER_MARGIN)))
				&& ((fabs(right_friction_motor->raw_data.rpm)
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7f8 f992 	bl	8000524 <__aeabi_i2d>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	60ba      	str	r2, [r7, #8]
 8008206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800820a:	60fb      	str	r3, [r7, #12]
						- fabs(left_friction_motor->raw_data.rpm))
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f7f8 f986 	bl	8000524 <__aeabi_i2d>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	603a      	str	r2, [r7, #0]
 800821e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008222:	607b      	str	r3, [r7, #4]
 8008224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800822c:	f7f8 f82c 	bl	8000288 <__aeabi_dsub>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4610      	mov	r0, r2
 8008236:	4619      	mov	r1, r3
				&& ((fabs(right_friction_motor->raw_data.rpm)
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <launcher_control+0x5f8>)
 800823e:	f7f8 fc4d 	bl	8000adc <__aeabi_dcmplt>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d04f      	beq.n	80082e8 <launcher_control+0x610>
						< LAUNCHER_DIFF_MARGIN)) {

			if ((feeder->raw_data.torque > FEEDER_JAM_TORQUE)) {
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800824e:	f242 6248 	movw	r2, #9800	; 0x2648
 8008252:	4293      	cmp	r3, r2
 8008254:	dd07      	ble.n	8008266 <launcher_control+0x58e>
				unjamming = 1;
 8008256:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <launcher_control+0x5fc>)
 8008258:	2201      	movs	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]
				start_time = HAL_GetTick();
 800825c:	f006 f96e 	bl	800e53c <HAL_GetTick>
 8008260:	4603      	mov	r3, r0
 8008262:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <launcher_control+0x600>)
 8008264:	6013      	str	r3, [r2, #0]
			}

			if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 8008266:	4b1b      	ldr	r3, [pc, #108]	; (80082d4 <launcher_control+0x5fc>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d138      	bne.n	80082e0 <launcher_control+0x608>
				if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 800826e:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <launcher_control+0x600>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8008276:	f006 f961 	bl	800e53c <HAL_GetTick>
 800827a:	4603      	mov	r3, r0
 800827c:	429c      	cmp	r4, r3
 800827e:	d305      	bcc.n	800828c <launcher_control+0x5b4>
						|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008286:	4a15      	ldr	r2, [pc, #84]	; (80082dc <launcher_control+0x604>)
 8008288:	4293      	cmp	r3, r2
 800828a:	da07      	bge.n	800829c <launcher_control+0x5c4>
					unjamming = 0;
 800828c:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <launcher_control+0x5fc>)
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
#ifndef ANGLE_FEEDER
					feeder_output = firing_speed;
 8008292:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008296:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800829a:	e025      	b.n	80082e8 <launcher_control+0x610>
#endif
				} else {
					feeder_output = FEEDER_UNJAM_SPD;
 800829c:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 80082a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80082a4:	e020      	b.n	80082e8 <launcher_control+0x610>
 80082a6:	bf00      	nop
 80082a8:	20003294 	.word	0x20003294
 80082ac:	200032b4 	.word	0x200032b4
 80082b0:	66666667 	.word	0x66666667
 80082b4:	200031fd 	.word	0x200031fd
 80082b8:	20003208 	.word	0x20003208
 80082bc:	20003204 	.word	0x20003204
 80082c0:	200031f8 	.word	0x200031f8
 80082c4:	20003210 	.word	0x20003210
 80082c8:	fffffe98 	.word	0xfffffe98
 80082cc:	20002f38 	.word	0x20002f38
 80082d0:	40590000 	.word	0x40590000
 80082d4:	200031fc 	.word	0x200031fc
 80082d8:	200031f4 	.word	0x200031f4
 80082dc:	ffffd9b8 	.word	0xffffd9b8
				}
			} else {
#ifndef ANGLE_FEEDER
				feeder_output = firing_speed;
 80082e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80082e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}

		}
	}

	if ((overheat == 1) && launcher_ctrl_data.override == 0) {
 80082e8:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <launcher_control+0x6e8>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d106      	bne.n	80082fe <launcher_control+0x626>
 80082f0:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <launcher_control+0x6ec>)
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <launcher_control+0x626>
		feeder_output = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}

	if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 80082fe:	4b32      	ldr	r3, [pc, #200]	; (80083c8 <launcher_control+0x6f0>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d111      	bne.n	800832a <launcher_control+0x652>
		if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 8008306:	4b31      	ldr	r3, [pc, #196]	; (80083cc <launcher_control+0x6f4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800830e:	f006 f915 	bl	800e53c <HAL_GetTick>
 8008312:	4603      	mov	r3, r0
 8008314:	429c      	cmp	r4, r3
 8008316:	d305      	bcc.n	8008324 <launcher_control+0x64c>
				|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800831e:	4a2c      	ldr	r2, [pc, #176]	; (80083d0 <launcher_control+0x6f8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	da02      	bge.n	800832a <launcher_control+0x652>
			unjamming = 0;
 8008324:	4b28      	ldr	r3, [pc, #160]	; (80083c8 <launcher_control+0x6f0>)
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
				(feeder_output < -FEEDER_MAX_RPM) ?
						-FEEDER_MAX_RPM : feeder_output;
	}
#endif

	if (feeder_output == 0) {
 800832a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800832e:	2b00      	cmp	r3, #0
 8008330:	d111      	bne.n	8008356 <launcher_control+0x67e>
//		feeder->rpm_pid.output = 0;
		speed_pid(0, feeder->raw_data.rpm, &feeder->rpm_pid);
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008338:	4618      	mov	r0, r3
 800833a:	f7f8 f8f3 	bl	8000524 <__aeabi_i2d>
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	3338      	adds	r3, #56	; 0x38
 8008346:	4618      	mov	r0, r3
 8008348:	ec45 4b11 	vmov	d1, r4, r5
 800834c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80083b8 <launcher_control+0x6e0>
 8008350:	f003 fb1c 	bl	800b98c <speed_pid>
 8008354:	e021      	b.n	800839a <launcher_control+0x6c2>
	} else {
		speed_pid(feeder_output * feeder->angle_data.gearbox_ratio,
 8008356:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8008368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836c:	ee17 0a90 	vmov	r0, s15
 8008370:	f7f8 f8ea 	bl	8000548 <__aeabi_f2d>
 8008374:	4604      	mov	r4, r0
 8008376:	460d      	mov	r5, r1
				feeder->raw_data.rpm, &feeder->rpm_pid);
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(feeder_output * feeder->angle_data.gearbox_ratio,
 800837e:	4618      	mov	r0, r3
 8008380:	f7f8 f8d0 	bl	8000524 <__aeabi_i2d>
 8008384:	4680      	mov	r8, r0
 8008386:	4689      	mov	r9, r1
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	3338      	adds	r3, #56	; 0x38
 800838c:	4618      	mov	r0, r3
 800838e:	ec49 8b11 	vmov	d1, r8, r9
 8008392:	ec45 4b10 	vmov	d0, r4, r5
 8008396:	f003 faf9 	bl	800b98c <speed_pid>
		//speed_pid(feeder_output * 36,feeder->raw_data.rpm, &feeder->rpm_pid);
	}

	motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 800839a:	2300      	movs	r3, #0
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	2313      	movs	r3, #19
 80083a0:	2217      	movs	r2, #23
 80083a2:	2112      	movs	r1, #18
 80083a4:	480b      	ldr	r0, [pc, #44]	; (80083d4 <launcher_control+0x6fc>)
 80083a6:	f003 fbcd 	bl	800bb44 <motor_send_can>
	RFRICTION_MOTOR_ID, 0);
}
 80083aa:	bf00      	nop
 80083ac:	3748      	adds	r7, #72	; 0x48
 80083ae:	46bd      	mov	sp, r7
 80083b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083b4:	f3af 8000 	nop.w
	...
 80083c0:	200031fd 	.word	0x200031fd
 80083c4:	20002f38 	.word	0x20002f38
 80083c8:	200031fc 	.word	0x200031fc
 80083cc:	200031f4 	.word	0x200031f4
 80083d0:	ffffd9b8 	.word	0xffffd9b8
 80083d4:	200018a0 	.word	0x200018a0

080083d8 <rt_atan2d_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_atan2d_snf(double u0, double u1)
{
 80083d8:	b5b0      	push	{r4, r5, r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	ed87 0b02 	vstr	d0, [r7, #8]
 80083e2:	ed87 1b00 	vstr	d1, [r7]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 80083e6:	ed97 0b02 	vldr	d0, [r7, #8]
 80083ea:	f004 fc6b 	bl	800ccc4 <rtIsNaN>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <rt_atan2d_snf+0x2a>
 80083f4:	ed97 0b00 	vldr	d0, [r7]
 80083f8:	f004 fc64 	bl	800ccc4 <rtIsNaN>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d005      	beq.n	800840e <rt_atan2d_snf+0x36>
    y = rtNaN;
 8008402:	4b4d      	ldr	r3, [pc, #308]	; (8008538 <rt_atan2d_snf+0x160>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800840c:	e07e      	b.n	800850c <rt_atan2d_snf+0x134>
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 800840e:	ed97 0b02 	vldr	d0, [r7, #8]
 8008412:	f004 fc29 	bl	800cc68 <rtIsInf>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d03b      	beq.n	8008494 <rt_atan2d_snf+0xbc>
 800841c:	ed97 0b00 	vldr	d0, [r7]
 8008420:	f004 fc22 	bl	800cc68 <rtIsInf>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d034      	beq.n	8008494 <rt_atan2d_snf+0xbc>
    int i;
    int i1;
    if (u0 > 0.0) {
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008436:	f7f8 fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <rt_atan2d_snf+0x6e>
      i = 1;
 8008440:	2301      	movs	r3, #1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	e002      	b.n	800844c <rt_atan2d_snf+0x74>
    } else {
      i = -1;
 8008446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800844a:	617b      	str	r3, [r7, #20]
    }
    if (u1 > 0.0) {
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008458:	f7f8 fb5e 	bl	8000b18 <__aeabi_dcmpgt>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <rt_atan2d_snf+0x90>
      i1 = 1;
 8008462:	2301      	movs	r3, #1
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	e002      	b.n	800846e <rt_atan2d_snf+0x96>
    } else {
      i1 = -1;
 8008468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800846c:	613b      	str	r3, [r7, #16]
    }
    y = atan2(i, i1);
 800846e:	6978      	ldr	r0, [r7, #20]
 8008470:	f7f8 f858 	bl	8000524 <__aeabi_i2d>
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	6938      	ldr	r0, [r7, #16]
 800847a:	f7f8 f853 	bl	8000524 <__aeabi_i2d>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	ec43 2b11 	vmov	d1, r2, r3
 8008486:	ec45 4b10 	vmov	d0, r4, r5
 800848a:	f01a ff95 	bl	80233b8 <atan2>
 800848e:	ed87 0b06 	vstr	d0, [r7, #24]
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 8008492:	e03b      	b.n	800850c <rt_atan2d_snf+0x134>
  } else if (u1 == 0.0) {
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084a0:	f7f8 fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d028      	beq.n	80084fc <rt_atan2d_snf+0x124>
    if (u0 > 0.0) {
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	f04f 0300 	mov.w	r3, #0
 80084b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084b6:	f7f8 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <rt_atan2d_snf+0xf4>
      y = RT_PI / 2.0;
 80084c0:	a319      	add	r3, pc, #100	; (adr r3, 8008528 <rt_atan2d_snf+0x150>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80084ca:	e01f      	b.n	800850c <rt_atan2d_snf+0x134>
    } else if (u0 < 0.0) {
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084d8:	f7f8 fb00 	bl	8000adc <__aeabi_dcmplt>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <rt_atan2d_snf+0x116>
      y = -(RT_PI / 2.0);
 80084e2:	a313      	add	r3, pc, #76	; (adr r3, 8008530 <rt_atan2d_snf+0x158>)
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80084ec:	e00e      	b.n	800850c <rt_atan2d_snf+0x134>
    } else {
      y = 0.0;
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	f04f 0300 	mov.w	r3, #0
 80084f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80084fa:	e007      	b.n	800850c <rt_atan2d_snf+0x134>
    }
  } else {
    y = atan2(u0, u1);
 80084fc:	ed97 1b00 	vldr	d1, [r7]
 8008500:	ed97 0b02 	vldr	d0, [r7, #8]
 8008504:	f01a ff58 	bl	80233b8 <atan2>
 8008508:	ed87 0b06 	vstr	d0, [r7, #24]
  }
  return y;
 800850c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008510:	ec43 2b17 	vmov	d7, r2, r3
}
 8008514:	eeb0 0a47 	vmov.f32	s0, s14
 8008518:	eef0 0a67 	vmov.f32	s1, s15
 800851c:	3720      	adds	r7, #32
 800851e:	46bd      	mov	sp, r7
 8008520:	bdb0      	pop	{r4, r5, r7, pc}
 8008522:	bf00      	nop
 8008524:	f3af 8000 	nop.w
 8008528:	54442d18 	.word	0x54442d18
 800852c:	3ff921fb 	.word	0x3ff921fb
 8008530:	54442d18 	.word	0x54442d18
 8008534:	bff921fb 	.word	0xbff921fb
 8008538:	20000010 	.word	0x20000010
 800853c:	00000000 	.word	0x00000000

08008540 <leg_pos>:
 *                double pos[2]
 * Return Type  : void
 */

void leg_pos(double phi1, double phi4, double pos[2])
{
 8008540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008544:	b09a      	sub	sp, #104	; 0x68
 8008546:	af00      	add	r7, sp, #0
 8008548:	ed87 0b04 	vstr	d0, [r7, #16]
 800854c:	ed87 1b02 	vstr	d1, [r7, #8]
 8008550:	6078      	str	r0, [r7, #4]
  double t6;
  double t8;
  /*     This function was generated by the Symbolic Math Toolbox version 24.1.
   */
  /*     20-Jul-2024 15:20:14 */
  t2 = cos(phi1);
 8008552:	ed97 0b04 	vldr	d0, [r7, #16]
 8008556:	f01a fdc3 	bl	80230e0 <cos>
 800855a:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
  t3 = cos(phi4);
 800855e:	ed97 0b02 	vldr	d0, [r7, #8]
 8008562:	f01a fdbd 	bl	80230e0 <cos>
 8008566:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
  t4 = sin(phi1);
 800856a:	ed97 0b04 	vldr	d0, [r7, #16]
 800856e:	f01a fe97 	bl	80232a0 <sin>
 8008572:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
  t5 = sin(phi4);
 8008576:	ed97 0b02 	vldr	d0, [r7, #8]
 800857a:	f01a fe91 	bl	80232a0 <sin>
 800857e:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
  t6 = t2 * 0.08;
 8008582:	a3c4      	add	r3, pc, #784	; (adr r3, 8008894 <leg_pos+0x354>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  t8 = t4 * 0.08;
 8008598:	a3be      	add	r3, pc, #760	; (adr r3, 8008894 <leg_pos+0x354>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80085a2:	f7f8 f829 	bl	80005f8 <__aeabi_dmul>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  t14 = t4 * 0.024;
 80085ae:	a3bb      	add	r3, pc, #748	; (adr r3, 800889c <leg_pos+0x35c>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80085b8:	f7f8 f81e 	bl	80005f8 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  t15 = t5 * 0.024;
 80085c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800889c <leg_pos+0x35c>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085ce:	f7f8 f813 	bl	80005f8 <__aeabi_dmul>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  t5 = t8 - t5 * 0.08;
 80085da:	a3ae      	add	r3, pc, #696	; (adr r3, 8008894 <leg_pos+0x354>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085e4:	f7f8 f808 	bl	80005f8 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085f0:	f7f7 fe4a 	bl	8000288 <__aeabi_dsub>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  a = t14 - t15;
 80085fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008600:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008604:	f7f7 fe40 	bl	8000288 <__aeabi_dsub>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  b_a = (t3 * 0.08 - t6) + 0.0983;
 8008610:	a3a0      	add	r3, pc, #640	; (adr r3, 8008894 <leg_pos+0x354>)
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800861a:	f7f7 ffed 	bl	80005f8 <__aeabi_dmul>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4610      	mov	r0, r2
 8008624:	4619      	mov	r1, r3
 8008626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800862a:	f7f7 fe2d 	bl	8000288 <__aeabi_dsub>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	a39b      	add	r3, pc, #620	; (adr r3, 80088a4 <leg_pos+0x364>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 fe26 	bl	800028c <__adddf3>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	e9c7 2306 	strd	r2, r3, [r7, #24]
  t4 = (t3 * 0.024 - t2 * 0.024) + 0.02949;
 8008648:	a394      	add	r3, pc, #592	; (adr r3, 800889c <leg_pos+0x35c>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008652:	f7f7 ffd1 	bl	80005f8 <__aeabi_dmul>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4614      	mov	r4, r2
 800865c:	461d      	mov	r5, r3
 800865e:	a38f      	add	r3, pc, #572	; (adr r3, 800889c <leg_pos+0x35c>)
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008668:	f7f7 ffc6 	bl	80005f8 <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4620      	mov	r0, r4
 8008672:	4629      	mov	r1, r5
 8008674:	f7f7 fe08 	bl	8000288 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	a38a      	add	r3, pc, #552	; (adr r3, 80088ac <leg_pos+0x36c>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 fe01 	bl	800028c <__adddf3>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  t5 = t5 * t5 + b_a * b_a;
 8008692:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008696:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800869a:	f7f7 ffad 	bl	80005f8 <__aeabi_dmul>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4614      	mov	r4, r2
 80086a4:	461d      	mov	r5, r3
 80086a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086ae:	f7f7 ffa3 	bl	80005f8 <__aeabi_dmul>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f7 fde7 	bl	800028c <__adddf3>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  t4 = atan(1.0 / (t4 + t5) *
 80086c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80086ce:	f7f7 fddd 	bl	800028c <__adddf3>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	f04f 0000 	mov.w	r0, #0
 80086da:	496d      	ldr	r1, [pc, #436]	; (8008890 <leg_pos+0x350>)
 80086dc:	f7f8 f8b6 	bl	800084c <__aeabi_ddiv>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4614      	mov	r4, r2
 80086e6:	461d      	mov	r5, r3
            ((t15 - t14) + sqrt((a * a + t4 * t4) - t5 * t5))) *
 80086e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80086f0:	f7f7 fdca 	bl	8000288 <__aeabi_dsub>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4690      	mov	r8, r2
 80086fa:	4699      	mov	r9, r3
 80086fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008700:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008704:	f7f7 ff78 	bl	80005f8 <__aeabi_dmul>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4692      	mov	sl, r2
 800870e:	469b      	mov	fp, r3
 8008710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008714:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008718:	f7f7 ff6e 	bl	80005f8 <__aeabi_dmul>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4650      	mov	r0, sl
 8008722:	4659      	mov	r1, fp
 8008724:	f7f7 fdb2 	bl	800028c <__adddf3>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4692      	mov	sl, r2
 800872e:	469b      	mov	fp, r3
 8008730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008734:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008738:	f7f7 ff5e 	bl	80005f8 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4650      	mov	r0, sl
 8008742:	4659      	mov	r1, fp
 8008744:	f7f7 fda0 	bl	8000288 <__aeabi_dsub>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	ec43 2b17 	vmov	d7, r2, r3
 8008750:	eeb0 0a47 	vmov.f32	s0, s14
 8008754:	eef0 0a67 	vmov.f32	s1, s15
 8008758:	f01a fea0 	bl	802349c <sqrt>
 800875c:	ec53 2b10 	vmov	r2, r3, d0
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f7 fd92 	bl	800028c <__adddf3>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
  t4 = atan(1.0 / (t4 + t5) *
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f7 ff42 	bl	80005f8 <__aeabi_dmul>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	ec43 2b17 	vmov	d7, r2, r3
 800877c:	eeb0 0a47 	vmov.f32	s0, s14
 8008780:	eef0 0a67 	vmov.f32	s1, s15
 8008784:	f01a fb0c 	bl	8022da0 <atan>
 8008788:	ec51 0b10 	vmov	r0, r1, d0
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	f7f7 fd7c 	bl	800028c <__adddf3>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
       2.0;
  t5 = t8 + sin(t4) * 0.15;
 800879c:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80087a0:	f01a fd7e 	bl	80232a0 <sin>
 80087a4:	ec51 0b10 	vmov	r0, r1, d0
 80087a8:	a335      	add	r3, pc, #212	; (adr r3, 8008880 <leg_pos+0x340>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 ff23 	bl	80005f8 <__aeabi_dmul>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80087ba:	f7f7 fd67 	bl	800028c <__adddf3>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  t4 = (t6 + cos(t4) * 0.15) - 0.04915;
 80087c6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80087ca:	f01a fc89 	bl	80230e0 <cos>
 80087ce:	ec51 0b10 	vmov	r0, r1, d0
 80087d2:	a32b      	add	r3, pc, #172	; (adr r3, 8008880 <leg_pos+0x340>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 ff0e 	bl	80005f8 <__aeabi_dmul>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4610      	mov	r0, r2
 80087e2:	4619      	mov	r1, r3
 80087e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087e8:	f7f7 fd50 	bl	800028c <__adddf3>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4610      	mov	r0, r2
 80087f2:	4619      	mov	r1, r3
 80087f4:	a324      	add	r3, pc, #144	; (adr r3, 8008888 <leg_pos+0x348>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd45 	bl	8000288 <__aeabi_dsub>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  pos[0] = sqrt(t5 * t5 + t4 * t4);
 8008806:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800880a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800880e:	f7f7 fef3 	bl	80005f8 <__aeabi_dmul>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4614      	mov	r4, r2
 8008818:	461d      	mov	r5, r3
 800881a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800881e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008822:	f7f7 fee9 	bl	80005f8 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fd2d 	bl	800028c <__adddf3>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	ec43 2b17 	vmov	d7, r2, r3
 800883a:	eeb0 0a47 	vmov.f32	s0, s14
 800883e:	eef0 0a67 	vmov.f32	s1, s15
 8008842:	f01a fe2b 	bl	802349c <sqrt>
 8008846:	eeb0 7a40 	vmov.f32	s14, s0
 800884a:	eef0 7a60 	vmov.f32	s15, s1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	ed83 7b00 	vstr	d7, [r3]
  pos[1] = rt_atan2d_snf(t5, t4);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f103 0408 	add.w	r4, r3, #8
 800885a:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800885e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8008862:	f7ff fdb9 	bl	80083d8 <rt_atan2d_snf>
 8008866:	eeb0 7a40 	vmov.f32	s14, s0
 800886a:	eef0 7a60 	vmov.f32	s15, s1
 800886e:	ed84 7b00 	vstr	d7, [r4]
}
 8008872:	bf00      	nop
 8008874:	3768      	adds	r7, #104	; 0x68
 8008876:	46bd      	mov	sp, r7
 8008878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800887c:	f3af 8000 	nop.w
 8008880:	33333333 	.word	0x33333333
 8008884:	3fc33333 	.word	0x3fc33333
 8008888:	5532617c 	.word	0x5532617c
 800888c:	3fa92a30 	.word	0x3fa92a30
 8008890:	3ff00000 	.word	0x3ff00000
 8008894:	47ae147b 	.word	0x47ae147b
 8008898:	3fb47ae1 	.word	0x3fb47ae1
 800889c:	bc6a7efa 	.word	0xbc6a7efa
 80088a0:	3f989374 	.word	0x3f989374
 80088a4:	5532617c 	.word	0x5532617c
 80088a8:	3fb92a30 	.word	0x3fb92a30
 80088ac:	663c74fb 	.word	0x663c74fb
 80088b0:	3f9e32a0 	.word	0x3f9e32a0
 80088b4:	00000000 	.word	0x00000000

080088b8 <leg_conv>:


void leg_conv(double F, double Tp, double phi1, double phi4, double T[2])
{
 80088b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088bc:	b0ba      	sub	sp, #232	; 0xe8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	ed87 0b08 	vstr	d0, [r7, #32]
 80088c4:	ed87 1b06 	vstr	d1, [r7, #24]
 80088c8:	ed87 2b04 	vstr	d2, [r7, #16]
 80088cc:	ed87 3b02 	vstr	d3, [r7, #8]
 80088d0:	6078      	str	r0, [r7, #4]
  double t82_tmp;
  double t91_tmp;
  /*     This function was generated by the Symbolic Math Toolbox version 24.1.
   */
  /*     20-Jul-2024 15:20:16 */
  t174 = cos(phi1);
 80088d2:	ed97 0b04 	vldr	d0, [r7, #16]
 80088d6:	f01a fc03 	bl	80230e0 <cos>
 80088da:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  t5_tmp = cos(phi4);
 80088de:	ed97 0b02 	vldr	d0, [r7, #8]
 80088e2:	f01a fbfd 	bl	80230e0 <cos>
 80088e6:	ed87 0b36 	vstr	d0, [r7, #216]	; 0xd8
  t175 = sin(phi1);
 80088ea:	ed97 0b04 	vldr	d0, [r7, #16]
 80088ee:	f01a fcd7 	bl	80232a0 <sin>
 80088f2:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0
  t7_tmp = sin(phi4);
 80088f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80088fa:	f01a fcd1 	bl	80232a0 <sin>
 80088fe:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
  t16_tmp = t174 * 0.08;
 8008902:	f20f 5350 	addw	r3, pc, #1360	; 0x550
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800890e:	f7f7 fe73 	bl	80005f8 <__aeabi_dmul>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  t18_tmp = t175 * 0.08;
 800891a:	f20f 5338 	addw	r3, pc, #1336	; 0x538
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008926:	f7f7 fe67 	bl	80005f8 <__aeabi_dmul>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  t21_tmp = t174 * 0.024;
 8008932:	f20f 5328 	addw	r3, pc, #1320	; 0x528
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800893e:	f7f7 fe5b 	bl	80005f8 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  t22_tmp = t5_tmp * 0.024;
 800894a:	f20f 5310 	addw	r3, pc, #1296	; 0x510
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008956:	f7f7 fe4f 	bl	80005f8 <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  t24_tmp = t175 * 0.024;
 8008962:	f20f 43f8 	addw	r3, pc, #1272	; 0x4f8
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  t25_tmp = t7_tmp * 0.024;
 800897a:	f20f 43e0 	addw	r3, pc, #1248	; 0x4e0
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008986:	f7f7 fe37 	bl	80005f8 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  t100 = t18_tmp - t7_tmp * 0.08;
 8008992:	f20f 43c0 	addw	r3, pc, #1216	; 0x4c0
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800899e:	f7f7 fe2b 	bl	80005f8 <__aeabi_dmul>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80089aa:	f7f7 fc6d 	bl	8000288 <__aeabi_dsub>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  t50_tmp = t24_tmp - t25_tmp;
 80089b6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80089ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80089be:	f7f7 fc63 	bl	8000288 <__aeabi_dsub>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  t60_tmp = (t5_tmp * 0.08 - t16_tmp) + 0.0983;
 80089ca:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80089d6:	f7f7 fe0f 	bl	80005f8 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80089e6:	f7f7 fc4f 	bl	8000288 <__aeabi_dsub>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4610      	mov	r0, r2
 80089f0:	4619      	mov	r1, r3
 80089f2:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fc47 	bl	800028c <__adddf3>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  t65_tmp = (t22_tmp - t21_tmp) + 0.02949;
 8008a06:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8008a0a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008a0e:	f7f7 fc3b 	bl	8000288 <__aeabi_dsub>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4610      	mov	r0, r2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f20f 4350 	addw	r3, pc, #1104	; 0x450
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f7f7 fc33 	bl	800028c <__adddf3>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  t77_tmp = t100 * t100 + t60_tmp * t60_tmp;
 8008a2e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008a32:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008a36:	f7f7 fddf 	bl	80005f8 <__aeabi_dmul>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4690      	mov	r8, r2
 8008a40:	4699      	mov	r9, r3
 8008a42:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a4a:	f7f7 fdd5 	bl	80005f8 <__aeabi_dmul>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fc19 	bl	800028c <__adddf3>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  t81_tmp = t174 * t100 * 0.16 + t175 * t60_tmp * 0.16;
 8008a62:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008a66:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a6a:	f7f7 fdc5 	bl	80005f8 <__aeabi_dmul>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4610      	mov	r0, r2
 8008a74:	4619      	mov	r1, r3
 8008a76:	a3ff      	add	r3, pc, #1020	; (adr r3, 8008e74 <leg_conv+0x5bc>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4690      	mov	r8, r2
 8008a86:	4699      	mov	r9, r3
 8008a88:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008a8c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008a90:	f7f7 fdb2 	bl	80005f8 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	a3f5      	add	r3, pc, #980	; (adr r3, 8008e74 <leg_conv+0x5bc>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fda9 	bl	80005f8 <__aeabi_dmul>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fbed 	bl	800028c <__adddf3>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  t82_tmp = t5_tmp * t100 * 0.16 + t7_tmp * t60_tmp * 0.16;
 8008aba:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008abe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008ac2:	f7f7 fd99 	bl	80005f8 <__aeabi_dmul>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4610      	mov	r0, r2
 8008acc:	4619      	mov	r1, r3
 8008ace:	a3e9      	add	r3, pc, #932	; (adr r3, 8008e74 <leg_conv+0x5bc>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4690      	mov	r8, r2
 8008ade:	4699      	mov	r9, r3
 8008ae0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008ae4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4610      	mov	r0, r2
 8008af2:	4619      	mov	r1, r3
 8008af4:	a3df      	add	r3, pc, #892	; (adr r3, 8008e74 <leg_conv+0x5bc>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4640      	mov	r0, r8
 8008b04:	4649      	mov	r1, r9
 8008b06:	f7f7 fbc1 	bl	800028c <__adddf3>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  t60_tmp = 1.0 / (t65_tmp + t77_tmp);
 8008b12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008b16:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008b1a:	f7f7 fbb7 	bl	800028c <__adddf3>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	f04f 0000 	mov.w	r0, #0
 8008b26:	49ca      	ldr	r1, [pc, #808]	; (8008e50 <leg_conv+0x598>)
 8008b28:	f7f7 fe90 	bl	800084c <__aeabi_ddiv>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  t91_tmp = t60_tmp * t60_tmp;
 8008b34:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008b38:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b3c:	f7f7 fd5c 	bl	80005f8 <__aeabi_dmul>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  t100 = sqrt((t50_tmp * t50_tmp + t65_tmp * t65_tmp) - t77_tmp * t77_tmp);
 8008b48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008b4c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008b50:	f7f7 fd52 	bl	80005f8 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4690      	mov	r8, r2
 8008b5a:	4699      	mov	r9, r3
 8008b5c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008b60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008b64:	f7f7 fd48 	bl	80005f8 <__aeabi_dmul>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 fb8c 	bl	800028c <__adddf3>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4690      	mov	r8, r2
 8008b7a:	4699      	mov	r9, r3
 8008b7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008b80:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008b84:	f7f7 fd38 	bl	80005f8 <__aeabi_dmul>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	f7f7 fb7a 	bl	8000288 <__aeabi_dsub>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	ec43 2b17 	vmov	d7, r2, r3
 8008b9c:	eeb0 0a47 	vmov.f32	s0, s14
 8008ba0:	eef0 0a67 	vmov.f32	s1, s15
 8008ba4:	f01a fc7a 	bl	802349c <sqrt>
 8008ba8:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
  t102_tmp = 1.0 / t100;
 8008bac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008bb0:	f04f 0000 	mov.w	r0, #0
 8008bb4:	49a6      	ldr	r1, [pc, #664]	; (8008e50 <leg_conv+0x598>)
 8008bb6:	f7f7 fe49 	bl	800084c <__aeabi_ddiv>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  t108_tmp = (t25_tmp - t24_tmp) + t100;
 8008bc2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008bc6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008bca:	f7f7 fb5d 	bl	8000288 <__aeabi_dsub>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008bd6:	f7f7 fb59 	bl	800028c <__adddf3>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  t120_tmp = atan(t60_tmp * t108_tmp) * 2.0;
 8008be2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008be6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008bea:	f7f7 fd05 	bl	80005f8 <__aeabi_dmul>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	ec43 2b17 	vmov	d7, r2, r3
 8008bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8008bfa:	eef0 0a67 	vmov.f32	s1, s15
 8008bfe:	f01a f8cf 	bl	8022da0 <atan>
 8008c02:	ec51 0b10 	vmov	r0, r1, d0
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	f7f7 fb3f 	bl	800028c <__adddf3>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  t123_tmp = cos(t120_tmp);
 8008c16:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8008c1a:	f01a fa61 	bl	80230e0 <cos>
 8008c1e:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
  t124_tmp = sin(t120_tmp);
 8008c22:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8008c26:	f01a fb3b 	bl	80232a0 <sin>
 8008c2a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  t131_tmp = 1.0 / (t91_tmp * (t108_tmp * t108_tmp) + 1.0);
 8008c2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008c36:	f7f7 fcdf 	bl	80005f8 <__aeabi_dmul>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4610      	mov	r0, r2
 8008c40:	4619      	mov	r1, r3
 8008c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c46:	f7f7 fcd7 	bl	80005f8 <__aeabi_dmul>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4619      	mov	r1, r3
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	4b7e      	ldr	r3, [pc, #504]	; (8008e50 <leg_conv+0x598>)
 8008c58:	f7f7 fb18 	bl	800028c <__adddf3>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	f04f 0000 	mov.w	r0, #0
 8008c64:	497a      	ldr	r1, [pc, #488]	; (8008e50 <leg_conv+0x598>)
 8008c66:	f7f7 fdf1 	bl	800084c <__aeabi_ddiv>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  t120_tmp = (t24_tmp + t81_tmp) * t91_tmp * t108_tmp +
 8008c72:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008c76:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008c7a:	f7f7 fb07 	bl	800028c <__adddf3>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c8a:	f7f7 fcb5 	bl	80005f8 <__aeabi_dmul>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4610      	mov	r0, r2
 8008c94:	4619      	mov	r1, r3
 8008c96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c9a:	f7f7 fcad 	bl	80005f8 <__aeabi_dmul>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4690      	mov	r8, r2
 8008ca4:	4699      	mov	r9, r3
             t60_tmp * (t21_tmp -
                        t102_tmp *
                            ((t174 * t50_tmp * 0.048 + t175 * t65_tmp * 0.048) -
 8008ca6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008caa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cae:	f7f7 fca3 	bl	80005f8 <__aeabi_dmul>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	a363      	add	r3, pc, #396	; (adr r3, 8008e48 <leg_conv+0x590>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 fc9a 	bl	80005f8 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4692      	mov	sl, r2
 8008cca:	469b      	mov	fp, r3
 8008ccc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008cd0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008cd4:	f7f7 fc90 	bl	80005f8 <__aeabi_dmul>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4619      	mov	r1, r3
 8008ce0:	a359      	add	r3, pc, #356	; (adr r3, 8008e48 <leg_conv+0x590>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f7f7 fc87 	bl	80005f8 <__aeabi_dmul>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4650      	mov	r0, sl
 8008cf0:	4659      	mov	r1, fp
 8008cf2:	f7f7 facb 	bl	800028c <__adddf3>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4692      	mov	sl, r2
 8008cfc:	469b      	mov	fp, r3
                             t77_tmp * t81_tmp * 2.0) /
 8008cfe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d02:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008d06:	f7f7 fc77 	bl	80005f8 <__aeabi_dmul>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4610      	mov	r0, r2
 8008d10:	4619      	mov	r1, r3
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	f7f7 fab9 	bl	800028c <__adddf3>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
                            ((t174 * t50_tmp * 0.048 + t175 * t65_tmp * 0.048) -
 8008d1e:	4650      	mov	r0, sl
 8008d20:	4659      	mov	r1, fp
 8008d22:	f7f7 fab1 	bl	8000288 <__aeabi_dsub>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4619      	mov	r1, r3
                        t102_tmp *
 8008d2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d32:	f7f7 fc61 	bl	80005f8 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
                             t77_tmp * t81_tmp * 2.0) /
 8008d3e:	f04f 0200 	mov.w	r2, #0
 8008d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d46:	f7f7 fd81 	bl	800084c <__aeabi_ddiv>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
             t60_tmp * (t21_tmp -
 8008d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d52:	f7f7 fa99 	bl	8000288 <__aeabi_dsub>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
  t120_tmp = (t24_tmp + t81_tmp) * t91_tmp * t108_tmp +
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fa8d 	bl	800028c <__adddf3>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                            2.0);
  t21_tmp =
      (t25_tmp + t82_tmp) * t91_tmp * t108_tmp +
 8008d7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008d7e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d82:	f7f7 fa83 	bl	800028c <__adddf3>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d92:	f7f7 fc31 	bl	80005f8 <__aeabi_dmul>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008da2:	f7f7 fc29 	bl	80005f8 <__aeabi_dmul>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4690      	mov	r8, r2
 8008dac:	4699      	mov	r9, r3
      t60_tmp * (t22_tmp -
                 t102_tmp *
                     ((t5_tmp * t50_tmp * 0.048 + t7_tmp * t65_tmp * 0.048) -
 8008dae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008db2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008db6:	f7f7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	a321      	add	r3, pc, #132	; (adr r3, 8008e48 <leg_conv+0x590>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fc16 	bl	80005f8 <__aeabi_dmul>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4692      	mov	sl, r2
 8008dd2:	469b      	mov	fp, r3
 8008dd4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008dd8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ddc:	f7f7 fc0c 	bl	80005f8 <__aeabi_dmul>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4610      	mov	r0, r2
 8008de6:	4619      	mov	r1, r3
 8008de8:	a317      	add	r3, pc, #92	; (adr r3, 8008e48 <leg_conv+0x590>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f7f7 fc03 	bl	80005f8 <__aeabi_dmul>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4650      	mov	r0, sl
 8008df8:	4659      	mov	r1, fp
 8008dfa:	f7f7 fa47 	bl	800028c <__adddf3>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4692      	mov	sl, r2
 8008e04:	469b      	mov	fp, r3
                      t77_tmp * t82_tmp * 2.0) /
 8008e06:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008e0a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008e0e:	f7f7 fbf3 	bl	80005f8 <__aeabi_dmul>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4610      	mov	r0, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	f7f7 fa35 	bl	800028c <__adddf3>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
                     ((t5_tmp * t50_tmp * 0.048 + t7_tmp * t65_tmp * 0.048) -
 8008e26:	4650      	mov	r0, sl
 8008e28:	4659      	mov	r1, fp
 8008e2a:	f7f7 fa2d 	bl	8000288 <__aeabi_dsub>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
                 t102_tmp *
 8008e36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	e01b      	b.n	8008e7c <leg_conv+0x5c4>
 8008e44:	f3af 8000 	nop.w
 8008e48:	bc6a7efa 	.word	0xbc6a7efa
 8008e4c:	3fa89374 	.word	0x3fa89374
 8008e50:	3ff00000 	.word	0x3ff00000
 8008e54:	47ae147b 	.word	0x47ae147b
 8008e58:	3fb47ae1 	.word	0x3fb47ae1
 8008e5c:	bc6a7efa 	.word	0xbc6a7efa
 8008e60:	3f989374 	.word	0x3f989374
 8008e64:	5532617c 	.word	0x5532617c
 8008e68:	3fb92a30 	.word	0x3fb92a30
 8008e6c:	663c74fb 	.word	0x663c74fb
 8008e70:	3f9e32a0 	.word	0x3f9e32a0
 8008e74:	47ae147b 	.word	0x47ae147b
 8008e78:	3fc47ae1 	.word	0x3fc47ae1
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4619      	mov	r1, r3
                      t77_tmp * t82_tmp * 2.0) /
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e88:	f7f7 fce0 	bl	800084c <__aeabi_ddiv>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
      t60_tmp * (t22_tmp -
 8008e90:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008e94:	f7f7 f9f8 	bl	8000288 <__aeabi_dsub>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
  t21_tmp =
 8008eac:	4640      	mov	r0, r8
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7f7 f9ec 	bl	800028c <__adddf3>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
                     2.0);
  t24_tmp = t18_tmp + t124_tmp * 0.15;
 8008ebc:	a3f3      	add	r3, pc, #972	; (adr r3, 800928c <leg_conv+0x9d4>)
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008ed2:	f7f7 f9db 	bl	800028c <__adddf3>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  t81_tmp = (t16_tmp + t123_tmp * 0.15) - 0.04915;
 8008ede:	a3eb      	add	r3, pc, #940	; (adr r3, 800928c <leg_conv+0x9d4>)
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008ee8:	f7f7 fb86 	bl	80005f8 <__aeabi_dmul>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8008ef8:	f7f7 f9c8 	bl	800028c <__adddf3>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4610      	mov	r0, r2
 8008f02:	4619      	mov	r1, r3
 8008f04:	a3e3      	add	r3, pc, #908	; (adr r3, 8009294 <leg_conv+0x9dc>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 f9bd 	bl	8000288 <__aeabi_dsub>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  t100 = (-t16_tmp - t123_tmp * 0.15) + 0.04915;
 8008f16:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8008f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f1e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008f22:	a3da      	add	r3, pc, #872	; (adr r3, 800928c <leg_conv+0x9d4>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008f2c:	f7f7 fb64 	bl	80005f8 <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4620      	mov	r0, r4
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7f7 f9a6 	bl	8000288 <__aeabi_dsub>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4610      	mov	r0, r2
 8008f42:	4619      	mov	r1, r3
 8008f44:	a3d3      	add	r3, pc, #844	; (adr r3, 8009294 <leg_conv+0x9dc>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f99f 	bl	800028c <__adddf3>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  t174 = t100 * t100;
 8008f56:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008f5a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008f5e:	f7f7 fb4b 	bl	80005f8 <__aeabi_dmul>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  t175 = 1.0 / t100;
 8008f6a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008f6e:	f04f 0000 	mov.w	r0, #0
 8008f72:	49c5      	ldr	r1, [pc, #788]	; (8009288 <leg_conv+0x9d0>)
 8008f74:	f7f7 fc6a 	bl	800084c <__aeabi_ddiv>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  t100 = t24_tmp * t24_tmp;
 8008f80:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008f84:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008f88:	f7f7 fb36 	bl	80005f8 <__aeabi_dmul>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  t102_tmp = t123_tmp * t131_tmp;
 8008f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008f9c:	f7f7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  t91_tmp = t16_tmp - t102_tmp * t120_tmp * 0.3;
 8008fa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	a3ae      	add	r3, pc, #696	; (adr r3, 8009278 <leg_conv+0x9c0>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 fb19 	bl	80005f8 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008fce:	f7f7 f95b 	bl	8000288 <__aeabi_dsub>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  t82_tmp = t124_tmp * t131_tmp;
 8008fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fde:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008fe2:	f7f7 fb09 	bl	80005f8 <__aeabi_dmul>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  t120_tmp = t18_tmp - t82_tmp * t120_tmp * 0.3;
 8008fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ff2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4610      	mov	r0, r2
 8009000:	4619      	mov	r1, r3
 8009002:	a39d      	add	r3, pc, #628	; (adr r3, 8009278 <leg_conv+0x9c0>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 faf6 	bl	80005f8 <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009014:	f7f7 f938 	bl	8000288 <__aeabi_dsub>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  t108_tmp = F * (1.0 / sqrt(t100 + t81_tmp * t81_tmp));
 8009020:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009028:	f7f7 fae6 	bl	80005f8 <__aeabi_dmul>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4610      	mov	r0, r2
 8009032:	4619      	mov	r1, r3
 8009034:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009038:	f7f7 f928 	bl	800028c <__adddf3>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	ec43 2b17 	vmov	d7, r2, r3
 8009044:	eeb0 0a47 	vmov.f32	s0, s14
 8009048:	eef0 0a67 	vmov.f32	s1, s15
 800904c:	f01a fa26 	bl	802349c <sqrt>
 8009050:	ec53 2b10 	vmov	r2, r3, d0
 8009054:	f04f 0000 	mov.w	r0, #0
 8009058:	498b      	ldr	r1, [pc, #556]	; (8009288 <leg_conv+0x9d0>)
 800905a:	f7f7 fbf7 	bl	800084c <__aeabi_ddiv>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009066:	f7f7 fac7 	bl	80005f8 <__aeabi_dmul>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  t60_tmp = Tp * t174 * (1.0 / (t100 + t174));
 8009072:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009076:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800907a:	f7f7 fabd 	bl	80005f8 <__aeabi_dmul>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4614      	mov	r4, r2
 8009084:	461d      	mov	r5, r3
 8009086:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800908a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800908e:	f7f7 f8fd 	bl	800028c <__adddf3>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	f04f 0000 	mov.w	r0, #0
 800909a:	497b      	ldr	r1, [pc, #492]	; (8009288 <leg_conv+0x9d0>)
 800909c:	f7f7 fbd6 	bl	800084c <__aeabi_ddiv>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4620      	mov	r0, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	f7f7 faa6 	bl	80005f8 <__aeabi_dmul>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  t100 = t24_tmp * (1.0 / t174);
 80090b4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80090b8:	f04f 0000 	mov.w	r0, #0
 80090bc:	4972      	ldr	r1, [pc, #456]	; (8009288 <leg_conv+0x9d0>)
 80090be:	f7f7 fbc5 	bl	800084c <__aeabi_ddiv>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80090ca:	f7f7 fa95 	bl	80005f8 <__aeabi_dmul>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  T[0] = t108_tmp * (t24_tmp * t91_tmp * 2.0 - t81_tmp * t120_tmp * 2.0) / 2.0 -
 80090d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090da:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80090de:	f7f7 fa8b 	bl	80005f8 <__aeabi_dmul>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4610      	mov	r0, r2
 80090e8:	4619      	mov	r1, r3
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	f7f7 f8cd 	bl	800028c <__adddf3>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4614      	mov	r4, r2
 80090f8:	461d      	mov	r5, r3
 80090fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009102:	f7f7 fa79 	bl	80005f8 <__aeabi_dmul>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4610      	mov	r0, r2
 800910c:	4619      	mov	r1, r3
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	f7f7 f8bb 	bl	800028c <__adddf3>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 f8b3 	bl	8000288 <__aeabi_dsub>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4610      	mov	r0, r2
 8009128:	4619      	mov	r1, r3
 800912a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800912e:	f7f7 fa63 	bl	80005f8 <__aeabi_dmul>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4610      	mov	r0, r2
 8009138:	4619      	mov	r1, r3
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009142:	f7f7 fb83 	bl	800084c <__aeabi_ddiv>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4614      	mov	r4, r2
 800914c:	461d      	mov	r5, r3
         t60_tmp * (t175 * t91_tmp - t100 * t120_tmp);
 800914e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009152:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009156:	f7f7 fa4f 	bl	80005f8 <__aeabi_dmul>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4690      	mov	r8, r2
 8009160:	4699      	mov	r9, r3
 8009162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009166:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800916a:	f7f7 fa45 	bl	80005f8 <__aeabi_dmul>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 f887 	bl	8000288 <__aeabi_dsub>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4610      	mov	r0, r2
 8009180:	4619      	mov	r1, r3
 8009182:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009186:	f7f7 fa37 	bl	80005f8 <__aeabi_dmul>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
  T[0] = t108_tmp * (t24_tmp * t91_tmp * 2.0 - t81_tmp * t120_tmp * 2.0) / 2.0 -
 800918e:	4620      	mov	r0, r4
 8009190:	4629      	mov	r1, r5
 8009192:	f7f7 f879 	bl	8000288 <__aeabi_dsub>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	e9c1 2300 	strd	r2, r3, [r1]
  T[1] = t108_tmp *
             (t102_tmp * t24_tmp * t21_tmp * 0.6 -
 80091a0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80091a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80091a8:	f7f7 fa26 	bl	80005f8 <__aeabi_dmul>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4610      	mov	r0, r2
 80091b2:	4619      	mov	r1, r3
 80091b4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80091b8:	f7f7 fa1e 	bl	80005f8 <__aeabi_dmul>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4610      	mov	r0, r2
 80091c2:	4619      	mov	r1, r3
 80091c4:	a32e      	add	r3, pc, #184	; (adr r3, 8009280 <leg_conv+0x9c8>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4614      	mov	r4, r2
 80091d4:	461d      	mov	r5, r3
              t82_tmp * t81_tmp * t21_tmp * 0.6) /
 80091d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80091da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80091de:	f7f7 fa0b 	bl	80005f8 <__aeabi_dmul>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80091ee:	f7f7 fa03 	bl	80005f8 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	a321      	add	r3, pc, #132	; (adr r3, 8009280 <leg_conv+0x9c8>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	f7f7 f9fa 	bl	80005f8 <__aeabi_dmul>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
             (t102_tmp * t24_tmp * t21_tmp * 0.6 -
 8009208:	4620      	mov	r0, r4
 800920a:	4629      	mov	r1, r5
 800920c:	f7f7 f83c 	bl	8000288 <__aeabi_dsub>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4610      	mov	r0, r2
 8009216:	4619      	mov	r1, r3
  T[1] = t108_tmp *
 8009218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800921c:	f7f7 f9ec 	bl	80005f8 <__aeabi_dmul>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4610      	mov	r0, r2
 8009226:	4619      	mov	r1, r3
              t82_tmp * t81_tmp * t21_tmp * 0.6) /
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009230:	f7f7 fb0c 	bl	800084c <__aeabi_ddiv>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4690      	mov	r8, r2
 800923a:	4699      	mov	r9, r3
             2.0 +
         t60_tmp * (t175 * (0.0 - t102_tmp * t21_tmp * 0.3) +
 800923c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8009240:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009244:	f7f7 f9d8 	bl	80005f8 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4610      	mov	r0, r2
 800924e:	4619      	mov	r1, r3
 8009250:	a309      	add	r3, pc, #36	; (adr r3, 8009278 <leg_conv+0x9c0>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 f9cf 	bl	80005f8 <__aeabi_dmul>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	f04f 0000 	mov.w	r0, #0
 8009262:	f04f 0100 	mov.w	r1, #0
 8009266:	f7f7 f80f 	bl	8000288 <__aeabi_dsub>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4610      	mov	r0, r2
 8009270:	4619      	mov	r1, r3
 8009272:	e013      	b.n	800929c <leg_conv+0x9e4>
 8009274:	f3af 8000 	nop.w
 8009278:	33333333 	.word	0x33333333
 800927c:	3fd33333 	.word	0x3fd33333
 8009280:	33333333 	.word	0x33333333
 8009284:	3fe33333 	.word	0x3fe33333
 8009288:	3ff00000 	.word	0x3ff00000
 800928c:	33333333 	.word	0x33333333
 8009290:	3fc33333 	.word	0x3fc33333
 8009294:	5532617c 	.word	0x5532617c
 8009298:	3fa92a30 	.word	0x3fa92a30
 800929c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80092a0:	f7f7 f9aa 	bl	80005f8 <__aeabi_dmul>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4614      	mov	r4, r2
 80092aa:	461d      	mov	r5, r3
                    t100 * (t82_tmp * t21_tmp * 0.3));
 80092ac:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80092b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80092b4:	f7f7 f9a0 	bl	80005f8 <__aeabi_dmul>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4610      	mov	r0, r2
 80092be:	4619      	mov	r1, r3
 80092c0:	a319      	add	r3, pc, #100	; (adr r3, 8009328 <leg_conv+0xa70>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4610      	mov	r0, r2
 80092d0:	4619      	mov	r1, r3
 80092d2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80092d6:	f7f7 f98f 	bl	80005f8 <__aeabi_dmul>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
         t60_tmp * (t175 * (0.0 - t102_tmp * t21_tmp * 0.3) +
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f6 ffd3 	bl	800028c <__adddf3>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4610      	mov	r0, r2
 80092ec:	4619      	mov	r1, r3
 80092ee:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80092f2:	f7f7 f981 	bl	80005f8 <__aeabi_dmul>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4610      	mov	r0, r2
 80092fc:	4619      	mov	r1, r3
  T[1] = t108_tmp *
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f103 0408 	add.w	r4, r3, #8
             2.0 +
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4640      	mov	r0, r8
 800930a:	4649      	mov	r1, r9
 800930c:	f7f6 ffbe 	bl	800028c <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
  T[1] = t108_tmp *
 8009314:	e9c4 2300 	strd	r2, r3, [r4]
}
 8009318:	bf00      	nop
 800931a:	37e8      	adds	r7, #232	; 0xe8
 800931c:	46bd      	mov	sp, r7
 800931e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009322:	bf00      	nop
 8009324:	f3af 8000 	nop.w
 8009328:	33333333 	.word	0x33333333
 800932c:	3fd33333 	.word	0x3fd33333

08009330 <leg_spd>:
 *                double spd[2]
 * Return Type  : void
 */
void leg_spd(double dphi1, double dphi4, double phi1, double phi4,
             double spd[2])
{
 8009330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009334:	b0be      	sub	sp, #248	; 0xf8
 8009336:	af00      	add	r7, sp, #0
 8009338:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 800933c:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8009340:	ed87 2b08 	vstr	d2, [r7, #32]
 8009344:	ed87 3b06 	vstr	d3, [r7, #24]
 8009348:	6178      	str	r0, [r7, #20]
  double t71;
  double t76;
  /*     This function was generated by the Symbolic Math Toolbox version 24.1.
   */
  /*     20-Jul-2024 15:20:15 */
  t2 = cos(phi1);
 800934a:	ed97 0b08 	vldr	d0, [r7, #32]
 800934e:	f019 fec7 	bl	80230e0 <cos>
 8009352:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
  t3 = cos(phi4);
 8009356:	ed97 0b06 	vldr	d0, [r7, #24]
 800935a:	f019 fec1 	bl	80230e0 <cos>
 800935e:	ed87 0b3a 	vstr	d0, [r7, #232]	; 0xe8
  t4 = sin(phi1);
 8009362:	ed97 0b08 	vldr	d0, [r7, #32]
 8009366:	f019 ff9b 	bl	80232a0 <sin>
 800936a:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
  t5 = sin(phi4);
 800936e:	ed97 0b06 	vldr	d0, [r7, #24]
 8009372:	f019 ff95 	bl	80232a0 <sin>
 8009376:	ed87 0b36 	vstr	d0, [r7, #216]	; 0xd8
  t10_tmp = t2 * 0.08;
 800937a:	f20f 5350 	addw	r3, pc, #1360	; 0x550
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8009386:	f7f7 f937 	bl	80005f8 <__aeabi_dmul>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  t12_tmp = t4 * 0.08;
 8009392:	f20f 5338 	addw	r3, pc, #1336	; 0x538
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  t15 = t2 * 0.024;
 80093aa:	f20f 5328 	addw	r3, pc, #1320	; 0x528
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80093b6:	f7f7 f91f 	bl	80005f8 <__aeabi_dmul>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  t16 = t3 * 0.024;
 80093c2:	f20f 5310 	addw	r3, pc, #1296	; 0x510
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  t18 = t4 * 0.024;
 80093da:	f20f 43f8 	addw	r3, pc, #1272	; 0x4f8
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80093e6:	f7f7 f907 	bl	80005f8 <__aeabi_dmul>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  t19 = t5 * 0.024;
 80093f2:	f20f 43e0 	addw	r3, pc, #1248	; 0x4e0
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80093fe:	f7f7 f8fb 	bl	80005f8 <__aeabi_dmul>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  t28 = t12_tmp - t5 * 0.08;
 800940a:	f20f 43c0 	addw	r3, pc, #1216	; 0x4c0
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009422:	f7f6 ff31 	bl	8000288 <__aeabi_dsub>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  t30 = t18 - t19;
 800942e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009436:	f7f6 ff27 	bl	8000288 <__aeabi_dsub>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  t36 = (t3 * 0.08 - t10_tmp) + 0.0983;
 8009442:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800945e:	f7f6 ff13 	bl	8000288 <__aeabi_dsub>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4610      	mov	r0, r2
 8009468:	4619      	mov	r1, r3
 800946a:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 ff0b 	bl	800028c <__adddf3>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  t38 = (t16 - t15) + 0.02949;
 800947e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8009482:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009486:	f7f6 feff 	bl	8000288 <__aeabi_dsub>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4610      	mov	r0, r2
 8009490:	4619      	mov	r1, r3
 8009492:	f20f 4350 	addw	r3, pc, #1104	; 0x450
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f6 fef7 	bl	800028c <__adddf3>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  t44 = t28 * t28 + t36 * t36;
 80094a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80094aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4614      	mov	r4, r2
 80094b8:	461d      	mov	r5, r3
 80094ba:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80094be:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80094c2:	f7f7 f899 	bl	80005f8 <__aeabi_dmul>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4620      	mov	r0, r4
 80094cc:	4629      	mov	r1, r5
 80094ce:	f7f6 fedd 	bl	800028c <__adddf3>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  t47 = t2 * t28 * 0.16 + t4 * t36 * 0.16;
 80094da:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80094de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80094e2:	f7f7 f889 	bl	80005f8 <__aeabi_dmul>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4610      	mov	r0, r2
 80094ec:	4619      	mov	r1, r3
 80094ee:	a3ff      	add	r3, pc, #1020	; (adr r3, 80098ec <leg_spd+0x5bc>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f7 f880 	bl	80005f8 <__aeabi_dmul>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4614      	mov	r4, r2
 80094fe:	461d      	mov	r5, r3
 8009500:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009508:	f7f7 f876 	bl	80005f8 <__aeabi_dmul>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4610      	mov	r0, r2
 8009512:	4619      	mov	r1, r3
 8009514:	a3f5      	add	r3, pc, #980	; (adr r3, 80098ec <leg_spd+0x5bc>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f7f7 f86d 	bl	80005f8 <__aeabi_dmul>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4620      	mov	r0, r4
 8009524:	4629      	mov	r1, r5
 8009526:	f7f6 feb1 	bl	800028c <__adddf3>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  t48 = t3 * t28 * 0.16 + t5 * t36 * 0.16;
 8009532:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009536:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800953a:	f7f7 f85d 	bl	80005f8 <__aeabi_dmul>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4610      	mov	r0, r2
 8009544:	4619      	mov	r1, r3
 8009546:	a3e9      	add	r3, pc, #932	; (adr r3, 80098ec <leg_spd+0x5bc>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f7f7 f854 	bl	80005f8 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4614      	mov	r4, r2
 8009556:	461d      	mov	r5, r3
 8009558:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800955c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009560:	f7f7 f84a 	bl	80005f8 <__aeabi_dmul>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4610      	mov	r0, r2
 800956a:	4619      	mov	r1, r3
 800956c:	a3df      	add	r3, pc, #892	; (adr r3, 80098ec <leg_spd+0x5bc>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4620      	mov	r0, r4
 800957c:	4629      	mov	r1, r5
 800957e:	f7f6 fe85 	bl	800028c <__adddf3>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  t52 = 1.0 / (t38 + t44);
 800958a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800958e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009592:	f7f6 fe7b 	bl	800028c <__adddf3>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	f04f 0000 	mov.w	r0, #0
 800959e:	49ca      	ldr	r1, [pc, #808]	; (80098c8 <leg_spd+0x598>)
 80095a0:	f7f7 f954 	bl	800084c <__aeabi_ddiv>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  t53 = t52 * t52;
 80095ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80095b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095b4:	f7f7 f820 	bl	80005f8 <__aeabi_dmul>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  t59 = sqrt((t30 * t30 + t38 * t38) - t44 * t44);
 80095c0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80095c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095c8:	f7f7 f816 	bl	80005f8 <__aeabi_dmul>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	4614      	mov	r4, r2
 80095d2:	461d      	mov	r5, r3
 80095d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80095d8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80095dc:	f7f7 f80c 	bl	80005f8 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4620      	mov	r0, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	f7f6 fe50 	bl	800028c <__adddf3>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4614      	mov	r4, r2
 80095f2:	461d      	mov	r5, r3
 80095f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80095f8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80095fc:	f7f6 fffc 	bl	80005f8 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f7f6 fe3e 	bl	8000288 <__aeabi_dsub>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	ec43 2b17 	vmov	d7, r2, r3
 8009614:	eeb0 0a47 	vmov.f32	s0, s14
 8009618:	eef0 0a67 	vmov.f32	s1, s15
 800961c:	f019 ff3e 	bl	802349c <sqrt>
 8009620:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
  t60 = 1.0 / t59;
 8009624:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009628:	f04f 0000 	mov.w	r0, #0
 800962c:	49a6      	ldr	r1, [pc, #664]	; (80098c8 <leg_spd+0x598>)
 800962e:	f7f7 f90d 	bl	800084c <__aeabi_ddiv>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  t36 = (t19 - t18) + t59;
 800963a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800963e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009642:	f7f6 fe21 	bl	8000288 <__aeabi_dsub>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800964e:	f7f6 fe1d 	bl	800028c <__adddf3>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  t28 = atan(t52 * t36) * 2.0;
 800965a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800965e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009662:	f7f6 ffc9 	bl	80005f8 <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	ec43 2b17 	vmov	d7, r2, r3
 800966e:	eeb0 0a47 	vmov.f32	s0, s14
 8009672:	eef0 0a67 	vmov.f32	s1, s15
 8009676:	f019 fb93 	bl	8022da0 <atan>
 800967a:	ec51 0b10 	vmov	r0, r1, d0
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	f7f6 fe03 	bl	800028c <__adddf3>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  t70 = cos(t28);
 800968e:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8009692:	f019 fd25 	bl	80230e0 <cos>
 8009696:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
  t71 = sin(t28);
 800969a:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 800969e:	f019 fdff 	bl	80232a0 <sin>
 80096a2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
  t76 = 1.0 / (t53 * (t36 * t36) + 1.0);
 80096a6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80096aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80096ae:	f7f6 ffa3 	bl	80005f8 <__aeabi_dmul>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4610      	mov	r0, r2
 80096b8:	4619      	mov	r1, r3
 80096ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4610      	mov	r0, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	4b7e      	ldr	r3, [pc, #504]	; (80098c8 <leg_spd+0x598>)
 80096d0:	f7f6 fddc 	bl	800028c <__adddf3>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	f04f 0000 	mov.w	r0, #0
 80096dc:	497a      	ldr	r1, [pc, #488]	; (80098c8 <leg_spd+0x598>)
 80096de:	f7f7 f8b5 	bl	800084c <__aeabi_ddiv>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  t47 = (t18 + t47) * t53 * t36 +
 80096ea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80096ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80096f2:	f7f6 fdcb 	bl	800028c <__adddf3>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4610      	mov	r0, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009702:	f7f6 ff79 	bl	80005f8 <__aeabi_dmul>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4610      	mov	r0, r2
 800970c:	4619      	mov	r1, r3
 800970e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009712:	f7f6 ff71 	bl	80005f8 <__aeabi_dmul>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	4690      	mov	r8, r2
 800971c:	4699      	mov	r9, r3
        t52 * (t15 -
               t60 * ((t2 * t30 * 0.048 + t4 * t38 * 0.048) - t44 * t47 * 2.0) /
 800971e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009722:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8009726:	f7f6 ff67 	bl	80005f8 <__aeabi_dmul>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4610      	mov	r0, r2
 8009730:	4619      	mov	r1, r3
 8009732:	a363      	add	r3, pc, #396	; (adr r3, 80098c0 <leg_spd+0x590>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 ff5e 	bl	80005f8 <__aeabi_dmul>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	4614      	mov	r4, r2
 8009742:	461d      	mov	r5, r3
 8009744:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4610      	mov	r0, r2
 8009756:	4619      	mov	r1, r3
 8009758:	a359      	add	r3, pc, #356	; (adr r3, 80098c0 <leg_spd+0x590>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 ff4b 	bl	80005f8 <__aeabi_dmul>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	f7f6 fd8f 	bl	800028c <__adddf3>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4614      	mov	r4, r2
 8009774:	461d      	mov	r5, r3
 8009776:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800977a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800977e:	f7f6 ff3b 	bl	80005f8 <__aeabi_dmul>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4610      	mov	r0, r2
 8009788:	4619      	mov	r1, r3
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	f7f6 fd7d 	bl	800028c <__adddf3>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4620      	mov	r0, r4
 8009798:	4629      	mov	r1, r5
 800979a:	f7f6 fd75 	bl	8000288 <__aeabi_dsub>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4610      	mov	r0, r2
 80097a4:	4619      	mov	r1, r3
 80097a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80097aa:	f7f6 ff25 	bl	80005f8 <__aeabi_dmul>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4610      	mov	r0, r2
 80097b4:	4619      	mov	r1, r3
 80097b6:	f04f 0200 	mov.w	r2, #0
 80097ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097be:	f7f7 f845 	bl	800084c <__aeabi_ddiv>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
        t52 * (t15 -
 80097c6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80097ca:	f7f6 fd5d 	bl	8000288 <__aeabi_dsub>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4610      	mov	r0, r2
 80097d4:	4619      	mov	r1, r3
 80097d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80097da:	f7f6 ff0d 	bl	80005f8 <__aeabi_dmul>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
  t47 = (t18 + t47) * t53 * t36 +
 80097e2:	4640      	mov	r0, r8
 80097e4:	4649      	mov	r1, r9
 80097e6:	f7f6 fd51 	bl	800028c <__adddf3>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
                   2.0);
  t28 = (t19 + t48) * t53 * t36 +
 80097f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80097f6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80097fa:	f7f6 fd47 	bl	800028c <__adddf3>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800980a:	f7f6 fef5 	bl	80005f8 <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4610      	mov	r0, r2
 8009814:	4619      	mov	r1, r3
 8009816:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800981a:	f7f6 feed 	bl	80005f8 <__aeabi_dmul>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4690      	mov	r8, r2
 8009824:	4699      	mov	r9, r3
        t52 * (t16 -
               t60 * ((t3 * t30 * 0.048 + t5 * t38 * 0.048) - t44 * t48 * 2.0) /
 8009826:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800982a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4610      	mov	r0, r2
 8009838:	4619      	mov	r1, r3
 800983a:	a321      	add	r3, pc, #132	; (adr r3, 80098c0 <leg_spd+0x590>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7f6 feda 	bl	80005f8 <__aeabi_dmul>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4614      	mov	r4, r2
 800984a:	461d      	mov	r5, r3
 800984c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009850:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009854:	f7f6 fed0 	bl	80005f8 <__aeabi_dmul>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4610      	mov	r0, r2
 800985e:	4619      	mov	r1, r3
 8009860:	a317      	add	r3, pc, #92	; (adr r3, 80098c0 <leg_spd+0x590>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fec7 	bl	80005f8 <__aeabi_dmul>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f6 fd0b 	bl	800028c <__adddf3>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4614      	mov	r4, r2
 800987c:	461d      	mov	r5, r3
 800987e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009886:	f7f6 feb7 	bl	80005f8 <__aeabi_dmul>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	4610      	mov	r0, r2
 8009890:	4619      	mov	r1, r3
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	f7f6 fcf9 	bl	800028c <__adddf3>
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f6 fcf1 	bl	8000288 <__aeabi_dsub>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4610      	mov	r0, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80098b2:	f7f6 fea1 	bl	80005f8 <__aeabi_dmul>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	e01b      	b.n	80098f4 <leg_spd+0x5c4>
 80098bc:	f3af 8000 	nop.w
 80098c0:	bc6a7efa 	.word	0xbc6a7efa
 80098c4:	3fa89374 	.word	0x3fa89374
 80098c8:	3ff00000 	.word	0x3ff00000
 80098cc:	47ae147b 	.word	0x47ae147b
 80098d0:	3fb47ae1 	.word	0x3fb47ae1
 80098d4:	bc6a7efa 	.word	0xbc6a7efa
 80098d8:	3f989374 	.word	0x3f989374
 80098dc:	5532617c 	.word	0x5532617c
 80098e0:	3fb92a30 	.word	0x3fb92a30
 80098e4:	663c74fb 	.word	0x663c74fb
 80098e8:	3f9e32a0 	.word	0x3f9e32a0
 80098ec:	47ae147b 	.word	0x47ae147b
 80098f0:	3fc47ae1 	.word	0x3fc47ae1
 80098f4:	4610      	mov	r0, r2
 80098f6:	4619      	mov	r1, r3
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009900:	f7f6 ffa4 	bl	800084c <__aeabi_ddiv>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
        t52 * (t16 -
 8009908:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800990c:	f7f6 fcbc 	bl	8000288 <__aeabi_dsub>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4610      	mov	r0, r2
 8009916:	4619      	mov	r1, r3
 8009918:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800991c:	f7f6 fe6c 	bl	80005f8 <__aeabi_dmul>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
  t28 = (t19 + t48) * t53 * t36 +
 8009924:	4640      	mov	r0, r8
 8009926:	4649      	mov	r1, r9
 8009928:	f7f6 fcb0 	bl	800028c <__adddf3>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
                   2.0);
  t4 = t12_tmp + t71 * 0.15;
 8009934:	f20f 432c 	addw	r3, pc, #1068	; 0x42c
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009940:	f7f6 fe5a 	bl	80005f8 <__aeabi_dmul>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800994c:	f7f6 fc9e 	bl	800028c <__adddf3>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  t15 = (t10_tmp + t70 * 0.15) - 0.04915;
 8009958:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009964:	f7f6 fe48 	bl	80005f8 <__aeabi_dmul>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4610      	mov	r0, r2
 800996e:	4619      	mov	r1, r3
 8009970:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009974:	f7f6 fc8a 	bl	800028c <__adddf3>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
 8009980:	a3fa      	add	r3, pc, #1000	; (adr r3, 8009d6c <leg_spd+0xa3c>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fc7f 	bl	8000288 <__aeabi_dsub>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  t59 = t70 * t76;
 8009992:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009996:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  t18 = t59 * t28;
 80099a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80099aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80099ae:	f7f6 fe23 	bl	80005f8 <__aeabi_dmul>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  t53 = t71 * t76;
 80099ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80099c2:	f7f6 fe19 	bl	80005f8 <__aeabi_dmul>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  t2 = t53 * t28;
 80099ce:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80099d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80099d6:	f7f6 fe0f 	bl	80005f8 <__aeabi_dmul>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  t28 = (-t10_tmp - t70 * 0.15) + 0.04915;
 80099e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80099e6:	60bb      	str	r3, [r7, #8]
 80099e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	a3dc      	add	r3, pc, #880	; (adr r3, 8009d64 <leg_spd+0xa34>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80099fc:	f7f6 fdfc 	bl	80005f8 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a08:	f7f6 fc3e 	bl	8000288 <__aeabi_dsub>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4610      	mov	r0, r2
 8009a12:	4619      	mov	r1, r3
 8009a14:	a3d5      	add	r3, pc, #852	; (adr r3, 8009d6c <leg_spd+0xa3c>)
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f7f6 fc37 	bl	800028c <__adddf3>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  t60 = t28 * t28;
 8009a26:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a2a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009a2e:	f7f6 fde3 	bl	80005f8 <__aeabi_dmul>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  t52 = 1.0 / t28;
 8009a3a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009a3e:	f04f 0000 	mov.w	r0, #0
 8009a42:	49c7      	ldr	r1, [pc, #796]	; (8009d60 <leg_spd+0xa30>)
 8009a44:	f7f6 ff02 	bl	800084c <__aeabi_ddiv>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  t36 = t4 * t4;
 8009a50:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a58:	f7f6 fdce 	bl	80005f8 <__aeabi_dmul>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  t28 = 1.0 / sqrt(t36 + t15 * t15);
 8009a64:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8009a68:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009a6c:	f7f6 fdc4 	bl	80005f8 <__aeabi_dmul>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4610      	mov	r0, r2
 8009a76:	4619      	mov	r1, r3
 8009a78:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009a7c:	f7f6 fc06 	bl	800028c <__adddf3>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	ec43 2b17 	vmov	d7, r2, r3
 8009a88:	eeb0 0a47 	vmov.f32	s0, s14
 8009a8c:	eef0 0a67 	vmov.f32	s1, s15
 8009a90:	f019 fd04 	bl	802349c <sqrt>
 8009a94:	ec53 2b10 	vmov	r2, r3, d0
 8009a98:	f04f 0000 	mov.w	r0, #0
 8009a9c:	49b0      	ldr	r1, [pc, #704]	; (8009d60 <leg_spd+0xa30>)
 8009a9e:	f7f6 fed5 	bl	800084c <__aeabi_ddiv>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  t48 = 1.0 / (t36 + t60);
 8009aaa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009aae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009ab2:	f7f6 fbeb 	bl	800028c <__adddf3>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	f04f 0000 	mov.w	r0, #0
 8009abe:	49a8      	ldr	r1, [pc, #672]	; (8009d60 <leg_spd+0xa30>)
 8009ac0:	f7f6 fec4 	bl	800084c <__aeabi_ddiv>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  t59 = t10_tmp - t59 * t47 * 0.3;
 8009acc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009ad0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009ad4:	f7f6 fd90 	bl	80005f8 <__aeabi_dmul>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4610      	mov	r0, r2
 8009ade:	4619      	mov	r1, r3
 8009ae0:	a39b      	add	r3, pc, #620	; (adr r3, 8009d50 <leg_spd+0xa20>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fd87 	bl	80005f8 <__aeabi_dmul>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009af2:	f7f6 fbc9 	bl	8000288 <__aeabi_dsub>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  t36 = t12_tmp - t53 * t47 * 0.3;
 8009afe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009b02:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009b06:	f7f6 fd77 	bl	80005f8 <__aeabi_dmul>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4619      	mov	r1, r3
 8009b12:	a38f      	add	r3, pc, #572	; (adr r3, 8009d50 <leg_spd+0xa20>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fd6e 	bl	80005f8 <__aeabi_dmul>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b24:	f7f6 fbb0 	bl	8000288 <__aeabi_dsub>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  spd[0] = dphi4 * t28 * (t4 * t18 * 0.6 - t15 * t2 * 0.6) / 2.0 +
 8009b30:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009b34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4614      	mov	r4, r2
 8009b42:	461d      	mov	r5, r3
 8009b44:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8009b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b4c:	f7f6 fd54 	bl	80005f8 <__aeabi_dmul>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4610      	mov	r0, r2
 8009b56:	4619      	mov	r1, r3
 8009b58:	a37f      	add	r3, pc, #508	; (adr r3, 8009d58 <leg_spd+0xa28>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f7f6 fd4b 	bl	80005f8 <__aeabi_dmul>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4690      	mov	r8, r2
 8009b68:	4699      	mov	r9, r3
 8009b6a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8009b6e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009b72:	f7f6 fd41 	bl	80005f8 <__aeabi_dmul>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	a376      	add	r3, pc, #472	; (adr r3, 8009d58 <leg_spd+0xa28>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f7f6 fd38 	bl	80005f8 <__aeabi_dmul>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	4649      	mov	r1, r9
 8009b90:	f7f6 fb7a 	bl	8000288 <__aeabi_dsub>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bb0:	f7f6 fe4c 	bl	800084c <__aeabi_ddiv>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4614      	mov	r4, r2
 8009bba:	461d      	mov	r5, r3
           dphi1 * t28 * (t4 * t59 * 2.0 - t15 * t36 * 2.0) / 2.0;
 8009bbc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009bc0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009bc4:	f7f6 fd18 	bl	80005f8 <__aeabi_dmul>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4690      	mov	r8, r2
 8009bce:	4699      	mov	r9, r3
 8009bd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009bd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4610      	mov	r0, r2
 8009be2:	4619      	mov	r1, r3
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	f7f6 fb50 	bl	800028c <__adddf3>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4692      	mov	sl, r2
 8009bf2:	469b      	mov	fp, r3
 8009bf4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009bf8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009bfc:	f7f6 fcfc 	bl	80005f8 <__aeabi_dmul>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4610      	mov	r0, r2
 8009c06:	4619      	mov	r1, r3
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	f7f6 fb3e 	bl	800028c <__adddf3>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4650      	mov	r0, sl
 8009c16:	4659      	mov	r1, fp
 8009c18:	f7f6 fb36 	bl	8000288 <__aeabi_dsub>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4640      	mov	r0, r8
 8009c22:	4649      	mov	r1, r9
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c38:	f7f6 fe08 	bl	800084c <__aeabi_ddiv>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
  spd[0] = dphi4 * t28 * (t4 * t18 * 0.6 - t15 * t2 * 0.6) / 2.0 +
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fb22 	bl	800028c <__adddf3>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	e9c1 2300 	strd	r2, r3, [r1]
  t28 = t4 * (1.0 / t60);
 8009c52:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c56:	f04f 0000 	mov.w	r0, #0
 8009c5a:	4941      	ldr	r1, [pc, #260]	; (8009d60 <leg_spd+0xa30>)
 8009c5c:	f7f6 fdf6 	bl	800084c <__aeabi_ddiv>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c68:	f7f6 fcc6 	bl	80005f8 <__aeabi_dmul>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  spd[1] = -dphi1 * t60 * t48 * (t52 * t59 - t28 * t36) +
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4610      	mov	r0, r2
 8009c92:	4619      	mov	r1, r3
 8009c94:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009c98:	f7f6 fcae 	bl	80005f8 <__aeabi_dmul>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	461d      	mov	r5, r3
 8009ca4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ca8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cac:	f7f6 fca4 	bl	80005f8 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4690      	mov	r8, r2
 8009cb6:	4699      	mov	r9, r3
 8009cb8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009cbc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4640      	mov	r0, r8
 8009cca:	4649      	mov	r1, r9
 8009ccc:	f7f6 fadc 	bl	8000288 <__aeabi_dsub>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 fc8e 	bl	80005f8 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4690      	mov	r8, r2
 8009ce2:	4699      	mov	r9, r3
           dphi4 * t60 * t48 * (t52 * (0.0 - t18 * 0.3) + t28 * (t2 * 0.3));
 8009ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ce8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009cec:	f7f6 fc84 	bl	80005f8 <__aeabi_dmul>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009cfc:	f7f6 fc7c 	bl	80005f8 <__aeabi_dmul>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4614      	mov	r4, r2
 8009d06:	461d      	mov	r5, r3
 8009d08:	a311      	add	r3, pc, #68	; (adr r3, 8009d50 <leg_spd+0xa20>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009d12:	f7f6 fc71 	bl	80005f8 <__aeabi_dmul>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	f04f 0000 	mov.w	r0, #0
 8009d1e:	f04f 0100 	mov.w	r1, #0
 8009d22:	f7f6 fab1 	bl	8000288 <__aeabi_dsub>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009d32:	f7f6 fc61 	bl	80005f8 <__aeabi_dmul>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4692      	mov	sl, r2
 8009d3c:	469b      	mov	fp, r3
 8009d3e:	a304      	add	r3, pc, #16	; (adr r3, 8009d50 <leg_spd+0xa20>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8009d48:	e014      	b.n	8009d74 <leg_spd+0xa44>
 8009d4a:	bf00      	nop
 8009d4c:	f3af 8000 	nop.w
 8009d50:	33333333 	.word	0x33333333
 8009d54:	3fd33333 	.word	0x3fd33333
 8009d58:	33333333 	.word	0x33333333
 8009d5c:	3fe33333 	.word	0x3fe33333
 8009d60:	3ff00000 	.word	0x3ff00000
 8009d64:	33333333 	.word	0x33333333
 8009d68:	3fc33333 	.word	0x3fc33333
 8009d6c:	5532617c 	.word	0x5532617c
 8009d70:	3fa92a30 	.word	0x3fa92a30
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4619      	mov	r1, r3
 8009d80:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009d84:	f7f6 fc38 	bl	80005f8 <__aeabi_dmul>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4650      	mov	r0, sl
 8009d8e:	4659      	mov	r1, fp
 8009d90:	f7f6 fa7c 	bl	800028c <__adddf3>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4620      	mov	r0, r4
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f7f6 fc2c 	bl	80005f8 <__aeabi_dmul>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4610      	mov	r0, r2
 8009da6:	4619      	mov	r1, r3
  spd[1] = -dphi1 * t60 * t48 * (t52 * t59 - t28 * t36) +
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f103 0408 	add.w	r4, r3, #8
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4640      	mov	r0, r8
 8009db4:	4649      	mov	r1, r9
 8009db6:	f7f6 fa69 	bl	800028c <__adddf3>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	e9c4 2300 	strd	r2, r3, [r4]
}
 8009dc2:	bf00      	nop
 8009dc4:	37f8      	adds	r7, #248	; 0xf8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009dcc <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 8009dcc:	b5b0      	push	{r4, r5, r7, lr}
 8009dce:	b08c      	sub	sp, #48	; 0x30
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	ed87 0b04 	vstr	d0, [r7, #16]
 8009dd6:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8009dda:	ed97 0b04 	vldr	d0, [r7, #16]
 8009dde:	f002 ff71 	bl	800ccc4 <rtIsNaN>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d106      	bne.n	8009df6 <rt_powd_snf+0x2a>
 8009de8:	ed97 0b02 	vldr	d0, [r7, #8]
 8009dec:	f002 ff6a 	bl	800ccc4 <rtIsNaN>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <rt_powd_snf+0x36>
    y = rtNaN;
 8009df6:	4b80      	ldr	r3, [pc, #512]	; (8009ff8 <rt_powd_snf+0x22c>)
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009e00:	e0ef      	b.n	8009fe2 <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	603b      	str	r3, [r7, #0]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e0c:	607b      	str	r3, [r7, #4]
 8009e0e:	ed97 7b00 	vldr	d7, [r7]
 8009e12:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 8009e16:	68bc      	ldr	r4, [r7, #8]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009e1e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 8009e22:	ed97 0b02 	vldr	d0, [r7, #8]
 8009e26:	f002 ff1f 	bl	800cc68 <rtIsInf>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d049      	beq.n	8009ec4 <rt_powd_snf+0xf8>
      if (d == 1.0) {
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	4b71      	ldr	r3, [pc, #452]	; (8009ffc <rt_powd_snf+0x230>)
 8009e36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009e3a:	f7f6 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d005      	beq.n	8009e50 <rt_powd_snf+0x84>
        y = 1.0;
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	4b6c      	ldr	r3, [pc, #432]	; (8009ffc <rt_powd_snf+0x230>)
 8009e4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009e4e:	e0c8      	b.n	8009fe2 <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 8009e50:	f04f 0200 	mov.w	r2, #0
 8009e54:	4b69      	ldr	r3, [pc, #420]	; (8009ffc <rt_powd_snf+0x230>)
 8009e56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009e5a:	f7f6 fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d017      	beq.n	8009e94 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 8009e64:	f04f 0200 	mov.w	r2, #0
 8009e68:	f04f 0300 	mov.w	r3, #0
 8009e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e70:	f7f6 fe52 	bl	8000b18 <__aeabi_dcmpgt>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <rt_powd_snf+0xba>
          y = rtInf;
 8009e7a:	4b61      	ldr	r3, [pc, #388]	; (800a000 <rt_powd_snf+0x234>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009e84:	e0ad      	b.n	8009fe2 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 8009e86:	f04f 0200 	mov.w	r2, #0
 8009e8a:	f04f 0300 	mov.w	r3, #0
 8009e8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009e92:	e0a6      	b.n	8009fe2 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8009e94:	f04f 0200 	mov.w	r2, #0
 8009e98:	f04f 0300 	mov.w	r3, #0
 8009e9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ea0:	f7f6 fe3a 	bl	8000b18 <__aeabi_dcmpgt>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <rt_powd_snf+0xec>
        y = 0.0;
 8009eaa:	f04f 0200 	mov.w	r2, #0
 8009eae:	f04f 0300 	mov.w	r3, #0
 8009eb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009eb6:	e094      	b.n	8009fe2 <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 8009eb8:	4b51      	ldr	r3, [pc, #324]	; (800a000 <rt_powd_snf+0x234>)
 8009eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009ec2:	e08e      	b.n	8009fe2 <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ed0:	f7f6 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d005      	beq.n	8009ee6 <rt_powd_snf+0x11a>
      y = 1.0;
 8009eda:	f04f 0200 	mov.w	r2, #0
 8009ede:	4b47      	ldr	r3, [pc, #284]	; (8009ffc <rt_powd_snf+0x230>)
 8009ee0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009ee4:	e07d      	b.n	8009fe2 <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	4b44      	ldr	r3, [pc, #272]	; (8009ffc <rt_powd_snf+0x230>)
 8009eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ef0:	f7f6 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01b      	beq.n	8009f32 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 8009efa:	f04f 0200 	mov.w	r2, #0
 8009efe:	f04f 0300 	mov.w	r3, #0
 8009f02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f06:	f7f6 fe07 	bl	8000b18 <__aeabi_dcmpgt>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d004      	beq.n	8009f1a <rt_powd_snf+0x14e>
        y = u0;
 8009f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009f18:	e063      	b.n	8009fe2 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 8009f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f1e:	f04f 0000 	mov.w	r0, #0
 8009f22:	4936      	ldr	r1, [pc, #216]	; (8009ffc <rt_powd_snf+0x230>)
 8009f24:	f7f6 fc92 	bl	800084c <__aeabi_ddiv>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009f30:	e057      	b.n	8009fe2 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 8009f32:	f04f 0200 	mov.w	r2, #0
 8009f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f3e:	f7f6 fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <rt_powd_snf+0x192>
      y = u0 * u0;
 8009f48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009f50:	f7f6 fb52 	bl	80005f8 <__aeabi_dmul>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009f5c:	e041      	b.n	8009fe2 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 8009f5e:	f04f 0200 	mov.w	r2, #0
 8009f62:	4b28      	ldr	r3, [pc, #160]	; (800a004 <rt_powd_snf+0x238>)
 8009f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f68:	f7f6 fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d011      	beq.n	8009f96 <rt_powd_snf+0x1ca>
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009f7e:	f7f6 fdc1 	bl	8000b04 <__aeabi_dcmpge>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d006      	beq.n	8009f96 <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 8009f88:	ed97 0b04 	vldr	d0, [r7, #16]
 8009f8c:	f019 fa86 	bl	802349c <sqrt>
 8009f90:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8009f94:	e025      	b.n	8009fe2 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 8009f96:	f04f 0200 	mov.w	r2, #0
 8009f9a:	f04f 0300 	mov.w	r3, #0
 8009f9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009fa2:	f7f6 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d012      	beq.n	8009fd2 <rt_powd_snf+0x206>
 8009fac:	ed97 0b02 	vldr	d0, [r7, #8]
 8009fb0:	f019 f8f6 	bl	80231a0 <floor>
 8009fb4:	ec53 2b10 	vmov	r2, r3, d0
 8009fb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fbc:	f7f6 fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d005      	beq.n	8009fd2 <rt_powd_snf+0x206>
      y = rtNaN;
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <rt_powd_snf+0x22c>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8009fd0:	e007      	b.n	8009fe2 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8009fd2:	ed97 1b02 	vldr	d1, [r7, #8]
 8009fd6:	ed97 0b04 	vldr	d0, [r7, #16]
 8009fda:	f019 f9ef 	bl	80233bc <pow>
 8009fde:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    }
  }
  return y;
 8009fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fe6:	ec43 2b17 	vmov	d7, r2, r3
}
 8009fea:	eeb0 0a47 	vmov.f32	s0, s14
 8009fee:	eef0 0a67 	vmov.f32	s1, s15
 8009ff2:	3730      	adds	r7, #48	; 0x30
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ff8:	20000010 	.word	0x20000010
 8009ffc:	3ff00000 	.word	0x3ff00000
 800a000:	20000018 	.word	0x20000018
 800a004:	3fe00000 	.word	0x3fe00000

0800a008 <lqr_k>:
 * Arguments    : double L0
 *                double K[12]
 * Return Type  : void
 */
void lqr_k(double L0, double K[12])
{
 800a008:	b5b0      	push	{r4, r5, r7, lr}
 800a00a:	b088      	sub	sp, #32
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	ed87 0b02 	vstr	d0, [r7, #8]
 800a012:	6078      	str	r0, [r7, #4]
  double t2;
  double t3;
  /*     This function was generated by the Symbolic Math Toolbox version 24.1.
   */
  /*     27-Jul-2024 17:35:25 */
  t2 = L0 * L0;
 800a014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a018:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a01c:	f7f6 faec 	bl	80005f8 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	e9c7 2306 	strd	r2, r3, [r7, #24]
  t3 = rt_powd_snf(L0, 3.0);
 800a028:	ed9f 1bcf 	vldr	d1, [pc, #828]	; 800a368 <lqr_k+0x360>
 800a02c:	ed97 0b02 	vldr	d0, [r7, #8]
 800a030:	f7ff fecc 	bl	8009dcc <rt_powd_snf>
 800a034:	ed87 0b04 	vstr	d0, [r7, #16]
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 800a038:	a3cd      	add	r3, pc, #820	; (adr r3, 800a370 <lqr_k+0x368>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a042:	f7f6 fad9 	bl	80005f8 <__aeabi_dmul>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4614      	mov	r4, r2
 800a04c:	461d      	mov	r5, r3
 800a04e:	a3ca      	add	r3, pc, #808	; (adr r3, 800a378 <lqr_k+0x370>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a058:	f7f6 face 	bl	80005f8 <__aeabi_dmul>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4620      	mov	r0, r4
 800a062:	4629      	mov	r1, r5
 800a064:	f7f6 f912 	bl	800028c <__adddf3>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	461d      	mov	r5, r3
          t3 * 277.71747427878682) -
 800a070:	a3c3      	add	r3, pc, #780	; (adr r3, 800a380 <lqr_k+0x378>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 f8ff 	bl	8000288 <__aeabi_dsub>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4610      	mov	r0, r2
 800a090:	4619      	mov	r1, r3
          t3 * 277.71747427878682) -
 800a092:	a3bd      	add	r3, pc, #756	; (adr r3, 800a388 <lqr_k+0x380>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 f8f6 	bl	8000288 <__aeabi_dsub>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 800a0a0:	6879      	ldr	r1, [r7, #4]
 800a0a2:	e9c1 2300 	strd	r2, r3, [r1]
         2.6875305810977892;
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 800a0a6:	a3ba      	add	r3, pc, #744	; (adr r3, 800a390 <lqr_k+0x388>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0b0:	f7f6 faa2 	bl	80005f8 <__aeabi_dmul>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	a3b6      	add	r3, pc, #728	; (adr r3, 800a398 <lqr_k+0x390>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a0c6:	f7f6 fa97 	bl	80005f8 <__aeabi_dmul>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 f8db 	bl	800028c <__adddf3>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4614      	mov	r4, r2
 800a0dc:	461d      	mov	r5, r3
          t3 * 62.862564037484013) +
 800a0de:	a3b0      	add	r3, pc, #704	; (adr r3, 800a3a0 <lqr_k+0x398>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a0e8:	f7f6 fa86 	bl	80005f8 <__aeabi_dmul>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	f7f6 f8c8 	bl	8000288 <__aeabi_dsub>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4619      	mov	r1, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f103 0408 	add.w	r4, r3, #8
          t3 * 62.862564037484013) +
 800a106:	a3a8      	add	r3, pc, #672	; (adr r3, 800a3a8 <lqr_k+0x3a0>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	f7f6 f8be 	bl	800028c <__adddf3>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 800a114:	e9c4 2300 	strd	r2, r3, [r4]
         2.4077773297174141;
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 800a118:	a3a5      	add	r3, pc, #660	; (adr r3, 800a3b0 <lqr_k+0x3a8>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a122:	f7f6 fa69 	bl	80005f8 <__aeabi_dmul>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4614      	mov	r4, r2
 800a12c:	461d      	mov	r5, r3
 800a12e:	a3a2      	add	r3, pc, #648	; (adr r3, 800a3b8 <lqr_k+0x3b0>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a138:	f7f6 fa5e 	bl	80005f8 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4620      	mov	r0, r4
 800a142:	4629      	mov	r1, r5
 800a144:	f7f6 f8a2 	bl	800028c <__adddf3>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4614      	mov	r4, r2
 800a14e:	461d      	mov	r5, r3
          t3 * 5.39712632191915) -
 800a150:	a39b      	add	r3, pc, #620	; (adr r3, 800a3c0 <lqr_k+0x3b8>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a15a:	f7f6 fa4d 	bl	80005f8 <__aeabi_dmul>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f7f6 f88f 	bl	8000288 <__aeabi_dsub>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4610      	mov	r0, r2
 800a170:	4619      	mov	r1, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f103 0410 	add.w	r4, r3, #16
          t3 * 5.39712632191915) -
 800a178:	a393      	add	r3, pc, #588	; (adr r3, 800a3c8 <lqr_k+0x3c0>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f883 	bl	8000288 <__aeabi_dsub>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 800a186:	e9c4 2300 	strd	r2, r3, [r4]
         0.34788258861362348;
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 800a18a:	a391      	add	r3, pc, #580	; (adr r3, 800a3d0 <lqr_k+0x3c8>)
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a194:	f7f6 fa30 	bl	80005f8 <__aeabi_dmul>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4614      	mov	r4, r2
 800a19e:	461d      	mov	r5, r3
 800a1a0:	a38d      	add	r3, pc, #564	; (adr r3, 800a3d8 <lqr_k+0x3d0>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a1aa:	f7f6 fa25 	bl	80005f8 <__aeabi_dmul>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	f7f6 f869 	bl	800028c <__adddf3>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4614      	mov	r4, r2
 800a1c0:	461d      	mov	r5, r3
          t3 * 13.093348455609879) +
 800a1c2:	a387      	add	r3, pc, #540	; (adr r3, 800a3e0 <lqr_k+0x3d8>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a1cc:	f7f6 fa14 	bl	80005f8 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 f856 	bl	8000288 <__aeabi_dsub>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f103 0418 	add.w	r4, r3, #24
          t3 * 13.093348455609879) +
 800a1ea:	a37f      	add	r3, pc, #508	; (adr r3, 800a3e8 <lqr_k+0x3e0>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f7f6 f84c 	bl	800028c <__adddf3>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 800a1f8:	e9c4 2300 	strd	r2, r3, [r4]
         0.33619836382767981;
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800a1fc:	a37c      	add	r3, pc, #496	; (adr r3, 800a3f0 <lqr_k+0x3e8>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a206:	f7f6 f9f7 	bl	80005f8 <__aeabi_dmul>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4614      	mov	r4, r2
 800a210:	461d      	mov	r5, r3
 800a212:	a379      	add	r3, pc, #484	; (adr r3, 800a3f8 <lqr_k+0x3f0>)
 800a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a218:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a21c:	f7f6 f9ec 	bl	80005f8 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4620      	mov	r0, r4
 800a226:	4629      	mov	r1, r5
 800a228:	f7f6 f830 	bl	800028c <__adddf3>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4614      	mov	r4, r2
 800a232:	461d      	mov	r5, r3
          t3 * 83.5018738492099) -
 800a234:	a372      	add	r3, pc, #456	; (adr r3, 800a400 <lqr_k+0x3f8>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a23e:	f7f6 f9db 	bl	80005f8 <__aeabi_dmul>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 f81d 	bl	8000288 <__aeabi_dsub>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4610      	mov	r0, r2
 800a254:	4619      	mov	r1, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f103 0420 	add.w	r4, r3, #32
          t3 * 83.5018738492099) -
 800a25c:	a36a      	add	r3, pc, #424	; (adr r3, 800a408 <lqr_k+0x400>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f7f6 f811 	bl	8000288 <__aeabi_dsub>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800a26a:	e9c4 2300 	strd	r2, r3, [r4]
         2.5346969801909141;
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800a26e:	a368      	add	r3, pc, #416	; (adr r3, 800a410 <lqr_k+0x408>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a278:	f7f6 f9be 	bl	80005f8 <__aeabi_dmul>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4614      	mov	r4, r2
 800a282:	461d      	mov	r5, r3
 800a284:	a364      	add	r3, pc, #400	; (adr r3, 800a418 <lqr_k+0x410>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a28e:	f7f6 f9b3 	bl	80005f8 <__aeabi_dmul>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f5 fff7 	bl	800028c <__adddf3>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	461d      	mov	r5, r3
          t3 * 141.7488288180505) +
 800a2a6:	a35e      	add	r3, pc, #376	; (adr r3, 800a420 <lqr_k+0x418>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a2b0:	f7f6 f9a2 	bl	80005f8 <__aeabi_dmul>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	f7f5 ffe4 	bl	8000288 <__aeabi_dsub>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f103 0428 	add.w	r4, r3, #40	; 0x28
          t3 * 141.7488288180505) +
 800a2ce:	a356      	add	r3, pc, #344	; (adr r3, 800a428 <lqr_k+0x420>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f5 ffda 	bl	800028c <__adddf3>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800a2dc:	e9c4 2300 	strd	r2, r3, [r4]
         2.2061564840746279;
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800a2e0:	a353      	add	r3, pc, #332	; (adr r3, 800a430 <lqr_k+0x428>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2ea:	f7f6 f985 	bl	80005f8 <__aeabi_dmul>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4614      	mov	r4, r2
 800a2f4:	461d      	mov	r5, r3
 800a2f6:	a350      	add	r3, pc, #320	; (adr r3, 800a438 <lqr_k+0x430>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a300:	f7f6 f97a 	bl	80005f8 <__aeabi_dmul>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4620      	mov	r0, r4
 800a30a:	4629      	mov	r1, r5
 800a30c:	f7f5 ffbe 	bl	800028c <__adddf3>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4614      	mov	r4, r2
 800a316:	461d      	mov	r5, r3
          t3 * 12.33887280821885) -
 800a318:	a349      	add	r3, pc, #292	; (adr r3, 800a440 <lqr_k+0x438>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a322:	f7f6 f969 	bl	80005f8 <__aeabi_dmul>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800a32a:	4620      	mov	r0, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7f5 ffab 	bl	8000288 <__aeabi_dsub>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4610      	mov	r0, r2
 800a338:	4619      	mov	r1, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f103 0430 	add.w	r4, r3, #48	; 0x30
          t3 * 12.33887280821885) -
 800a340:	a341      	add	r3, pc, #260	; (adr r3, 800a448 <lqr_k+0x440>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f7f5 ff9f 	bl	8000288 <__aeabi_dsub>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800a34e:	e9c4 2300 	strd	r2, r3, [r4]
         2.3946300730855778;
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 800a352:	a33f      	add	r3, pc, #252	; (adr r3, 800a450 <lqr_k+0x448>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a35c:	f7f6 f94c 	bl	80005f8 <__aeabi_dmul>
 800a360:	e07a      	b.n	800a458 <lqr_k+0x450>
 800a362:	bf00      	nop
 800a364:	f3af 8000 	nop.w
 800a368:	00000000 	.word	0x00000000
 800a36c:	40080000 	.word	0x40080000
 800a370:	e11d56d7 	.word	0xe11d56d7
 800a374:	c0495e82 	.word	0xc0495e82
 800a378:	cef284e7 	.word	0xcef284e7
 800a37c:	40651773 	.word	0x40651773
 800a380:	c64f31c5 	.word	0xc64f31c5
 800a384:	40715b7a 	.word	0x40715b7a
 800a388:	088684e0 	.word	0x088684e0
 800a38c:	40058010 	.word	0x40058010
 800a390:	dc2046b8 	.word	0xdc2046b8
 800a394:	c0306918 	.word	0xc0306918
 800a398:	d1f54deb 	.word	0xd1f54deb
 800a39c:	404a26fe 	.word	0x404a26fe
 800a3a0:	7f95d98b 	.word	0x7f95d98b
 800a3a4:	404f6e68 	.word	0x404f6e68
 800a3a8:	c2b97df5 	.word	0xc2b97df5
 800a3ac:	40034320 	.word	0x40034320
 800a3b0:	bbfc5804 	.word	0xbbfc5804
 800a3b4:	c00e57c6 	.word	0xc00e57c6
 800a3b8:	8b2cbed8 	.word	0x8b2cbed8
 800a3bc:	3fe136f6 	.word	0x3fe136f6
 800a3c0:	48541815 	.word	0x48541815
 800a3c4:	401596a8 	.word	0x401596a8
 800a3c8:	553c5f99 	.word	0x553c5f99
 800a3cc:	3fd643b5 	.word	0x3fd643b5
 800a3d0:	8b6872cc 	.word	0x8b6872cc
 800a3d4:	c0030952 	.word	0xc0030952
 800a3d8:	0321b9a5 	.word	0x0321b9a5
 800a3dc:	40221b5e 	.word	0x40221b5e
 800a3e0:	5e67f3fd 	.word	0x5e67f3fd
 800a3e4:	402a2fcb 	.word	0x402a2fcb
 800a3e8:	2466f335 	.word	0x2466f335
 800a3ec:	3fd58446 	.word	0x3fd58446
 800a3f0:	12933d46 	.word	0x12933d46
 800a3f4:	c022345e 	.word	0xc022345e
 800a3f8:	104153cc 	.word	0x104153cc
 800a3fc:	404791c5 	.word	0x404791c5
 800a400:	b37e44bf 	.word	0xb37e44bf
 800a404:	4054e01e 	.word	0x4054e01e
 800a408:	35d984fd 	.word	0x35d984fd
 800a40c:	4004470f 	.word	0x4004470f
 800a410:	6d2a2eb6 	.word	0x6d2a2eb6
 800a414:	c035b964 	.word	0xc035b964
 800a418:	001d5b40 	.word	0x001d5b40
 800a41c:	4056ca7d 	.word	0x4056ca7d
 800a420:	67da7a89 	.word	0x67da7a89
 800a424:	4061b7f6 	.word	0x4061b7f6
 800a428:	5ee7abc5 	.word	0x5ee7abc5
 800a42c:	4001a635 	.word	0x4001a635
 800a430:	3c8af835 	.word	0x3c8af835
 800a434:	c00363cc 	.word	0xc00363cc
 800a438:	2d7aa92b 	.word	0x2d7aa92b
 800a43c:	401a315b 	.word	0x401a315b
 800a440:	bc999b77 	.word	0xbc999b77
 800a444:	4028ad80 	.word	0x4028ad80
 800a448:	cfcf5d7c 	.word	0xcfcf5d7c
 800a44c:	40032833 	.word	0x40032833
 800a450:	9ad97d7b 	.word	0x9ad97d7b
 800a454:	c03416fd 	.word	0xc03416fd
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	4614      	mov	r4, r2
 800a45e:	461d      	mov	r5, r3
 800a460:	a38b      	add	r3, pc, #556	; (adr r3, 800a690 <lqr_k+0x688>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a46a:	f7f6 f8c5 	bl	80005f8 <__aeabi_dmul>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4620      	mov	r0, r4
 800a474:	4629      	mov	r1, r5
 800a476:	f7f5 ff09 	bl	800028c <__adddf3>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4614      	mov	r4, r2
 800a480:	461d      	mov	r5, r3
          t3 * 143.792464436029) +
 800a482:	a385      	add	r3, pc, #532	; (adr r3, 800a698 <lqr_k+0x690>)
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a48c:	f7f6 f8b4 	bl	80005f8 <__aeabi_dmul>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 800a494:	4620      	mov	r0, r4
 800a496:	4629      	mov	r1, r5
 800a498:	f7f5 fef6 	bl	8000288 <__aeabi_dsub>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f103 0438 	add.w	r4, r3, #56	; 0x38
          t3 * 143.792464436029) +
 800a4aa:	a37d      	add	r3, pc, #500	; (adr r3, 800a6a0 <lqr_k+0x698>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	f7f5 feec 	bl	800028c <__adddf3>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 800a4b8:	e9c4 2300 	strd	r2, r3, [r4]
         1.9279268694789149;
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 800a4bc:	a37a      	add	r3, pc, #488	; (adr r3, 800a6a8 <lqr_k+0x6a0>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4c6:	f7f6 f897 	bl	80005f8 <__aeabi_dmul>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4614      	mov	r4, r2
 800a4d0:	461d      	mov	r5, r3
 800a4d2:	a377      	add	r3, pc, #476	; (adr r3, 800a6b0 <lqr_k+0x6a8>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a4dc:	f7f6 f88c 	bl	80005f8 <__aeabi_dmul>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	f7f5 fed0 	bl	800028c <__adddf3>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	461d      	mov	r5, r3
          t3 * 448.24915472642982) +
 800a4f4:	a370      	add	r3, pc, #448	; (adr r3, 800a6b8 <lqr_k+0x6b0>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a4fe:	f7f6 f87b 	bl	80005f8 <__aeabi_dmul>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 800a506:	4620      	mov	r0, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f5 febd 	bl	8000288 <__aeabi_dsub>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4610      	mov	r0, r2
 800a514:	4619      	mov	r1, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f103 0440 	add.w	r4, r3, #64	; 0x40
          t3 * 448.24915472642982) +
 800a51c:	a368      	add	r3, pc, #416	; (adr r3, 800a6c0 <lqr_k+0x6b8>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	f7f5 feb3 	bl	800028c <__adddf3>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 800a52a:	e9c4 2300 	strd	r2, r3, [r4]
         6.9764793644248986;
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 800a52e:	a366      	add	r3, pc, #408	; (adr r3, 800a6c8 <lqr_k+0x6c0>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a538:	f7f6 f85e 	bl	80005f8 <__aeabi_dmul>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4614      	mov	r4, r2
 800a542:	461d      	mov	r5, r3
 800a544:	a362      	add	r3, pc, #392	; (adr r3, 800a6d0 <lqr_k+0x6c8>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a54e:	f7f6 f853 	bl	80005f8 <__aeabi_dmul>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4620      	mov	r0, r4
 800a558:	4629      	mov	r1, r5
 800a55a:	f7f5 fe95 	bl	8000288 <__aeabi_dsub>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4614      	mov	r4, r2
 800a564:	461d      	mov	r5, r3
          t3 * 264.05611025542441) +
 800a566:	a35c      	add	r3, pc, #368	; (adr r3, 800a6d8 <lqr_k+0x6d0>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a570:	f7f6 f842 	bl	80005f8 <__aeabi_dmul>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 800a578:	4620      	mov	r0, r4
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7f5 fe86 	bl	800028c <__adddf3>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4610      	mov	r0, r2
 800a586:	4619      	mov	r1, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f103 0448 	add.w	r4, r3, #72	; 0x48
          t3 * 264.05611025542441) +
 800a58e:	a354      	add	r3, pc, #336	; (adr r3, 800a6e0 <lqr_k+0x6d8>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f7f5 fe7a 	bl	800028c <__adddf3>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 800a59c:	e9c4 2300 	strd	r2, r3, [r4]
         8.0154156357539623;
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 800a5a0:	a351      	add	r3, pc, #324	; (adr r3, 800a6e8 <lqr_k+0x6e0>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5aa:	f7f6 f825 	bl	80005f8 <__aeabi_dmul>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4614      	mov	r4, r2
 800a5b4:	461d      	mov	r5, r3
 800a5b6:	a34e      	add	r3, pc, #312	; (adr r3, 800a6f0 <lqr_k+0x6e8>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a5c0:	f7f6 f81a 	bl	80005f8 <__aeabi_dmul>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	f7f5 fe5e 	bl	800028c <__adddf3>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	461d      	mov	r5, r3
           t3 * 28.733067607751678) +
 800a5d8:	a347      	add	r3, pc, #284	; (adr r3, 800a6f8 <lqr_k+0x6f0>)
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a5e2:	f7f6 f809 	bl	80005f8 <__aeabi_dmul>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	f7f5 fe4b 	bl	8000288 <__aeabi_dsub>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f103 0450 	add.w	r4, r3, #80	; 0x50
           t3 * 28.733067607751678) +
 800a600:	a33f      	add	r3, pc, #252	; (adr r3, 800a700 <lqr_k+0x6f8>)
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	f7f5 fe41 	bl	800028c <__adddf3>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 800a60e:	e9c4 2300 	strd	r2, r3, [r4]
          0.4913040439106548;
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 800a612:	a33d      	add	r3, pc, #244	; (adr r3, 800a708 <lqr_k+0x700>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a61c:	f7f5 ffec 	bl	80005f8 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4614      	mov	r4, r2
 800a626:	461d      	mov	r5, r3
 800a628:	a339      	add	r3, pc, #228	; (adr r3, 800a710 <lqr_k+0x708>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a632:	f7f5 ffe1 	bl	80005f8 <__aeabi_dmul>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4620      	mov	r0, r4
 800a63c:	4629      	mov	r1, r5
 800a63e:	f7f5 fe23 	bl	8000288 <__aeabi_dsub>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4614      	mov	r4, r2
 800a648:	461d      	mov	r5, r3
           t3 * 17.281074817235439) +
 800a64a:	a333      	add	r3, pc, #204	; (adr r3, 800a718 <lqr_k+0x710>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a654:	f7f5 ffd0 	bl	80005f8 <__aeabi_dmul>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 800a65c:	4620      	mov	r0, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	f7f5 fe14 	bl	800028c <__adddf3>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4610      	mov	r0, r2
 800a66a:	4619      	mov	r1, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f103 0458 	add.w	r4, r3, #88	; 0x58
           t3 * 17.281074817235439) +
 800a672:	a32b      	add	r3, pc, #172	; (adr r3, 800a720 <lqr_k+0x718>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 fe08 	bl	800028c <__adddf3>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 800a680:	e9c4 2300 	strd	r2, r3, [r4]
          0.45590187076573768;
}
 800a684:	bf00      	nop
 800a686:	3720      	adds	r7, #32
 800a688:	46bd      	mov	sp, r7
 800a68a:	bdb0      	pop	{r4, r5, r7, pc}
 800a68c:	f3af 8000 	nop.w
 800a690:	ec636a38 	.word	0xec636a38
 800a694:	40563570 	.word	0x40563570
 800a698:	de607f9b 	.word	0xde607f9b
 800a69c:	4061f95b 	.word	0x4061f95b
 800a6a0:	d857dd98 	.word	0xd857dd98
 800a6a4:	3ffed8c9 	.word	0x3ffed8c9
 800a6a8:	a994a8df 	.word	0xa994a8df
 800a6ac:	c0512caa 	.word	0xc0512caa
 800a6b0:	67b97e90 	.word	0x67b97e90
 800a6b4:	40720491 	.word	0x40720491
 800a6b8:	89aa9a8f 	.word	0x89aa9a8f
 800a6bc:	407c03fc 	.word	0x407c03fc
 800a6c0:	34ddb1fa 	.word	0x34ddb1fa
 800a6c4:	401be7ea 	.word	0x401be7ea
 800a6c8:	1ed9f335 	.word	0x1ed9f335
 800a6cc:	403cc8b0 	.word	0x403cc8b0
 800a6d0:	24f0940c 	.word	0x24f0940c
 800a6d4:	4062a21d 	.word	0x4062a21d
 800a6d8:	d3de004a 	.word	0xd3de004a
 800a6dc:	407080e5 	.word	0x407080e5
 800a6e0:	8ee6d215 	.word	0x8ee6d215
 800a6e4:	402007e4 	.word	0x402007e4
 800a6e8:	61780aba 	.word	0x61780aba
 800a6ec:	c011e3af 	.word	0xc011e3af
 800a6f0:	95202cc4 	.word	0x95202cc4
 800a6f4:	40327c8a 	.word	0x40327c8a
 800a6f8:	51990ce8 	.word	0x51990ce8
 800a6fc:	403cbbaa 	.word	0x403cbbaa
 800a700:	843f48ab 	.word	0x843f48ab
 800a704:	3fdf7186 	.word	0x3fdf7186
 800a708:	2f3d86ed 	.word	0x2f3d86ed
 800a70c:	3ffeb730 	.word	0x3ffeb730
 800a710:	ef16c0ea 	.word	0xef16c0ea
 800a714:	4023a29b 	.word	0x4023a29b
 800a718:	84ebc161 	.word	0x84ebc161
 800a71c:	403147f4 	.word	0x403147f4
 800a720:	0a47f0a1 	.word	0x0a47f0a1
 800a724:	3fdd2d7f 	.word	0x3fdd2d7f

0800a728 <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t* motor){
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	//general config:
		switch(motor->motor_type){
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	789b      	ldrb	r3, [r3, #2]
 800a734:	3b01      	subs	r3, #1
 800a736:	2b08      	cmp	r3, #8
 800a738:	d849      	bhi.n	800a7ce <set_motor_config+0xa6>
 800a73a:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <set_motor_config+0x18>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a79b 	.word	0x0800a79b
 800a744:	0800a7b5 	.word	0x0800a7b5
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	0800a77f 	.word	0x0800a77f
 800a750:	0800a765 	.word	0x0800a765
 800a754:	0800a7b5 	.word	0x0800a7b5
 800a758:	0800a7b5 	.word	0x0800a7b5
 800a75c:	0800a765 	.word	0x0800a765
 800a760:	0800a79b 	.word	0x0800a79b
		case TYPE_M3508_ANGLE:
		case TYPE_M3508_STEPS:
		case TYPE_M3508:
			motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a1d      	ldr	r2, [pc, #116]	; (800a7dc <set_motor_config+0xb4>)
 800a768:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a1c      	ldr	r2, [pc, #112]	; (800a7e0 <set_motor_config+0xb8>)
 800a770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a77a:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 800a77c:	e028      	b.n	800a7d0 <set_motor_config+0xa8>
		case TYPE_M3508_NGEARBOX:
			motor->angle_data.gearbox_ratio = 1;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a784:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a15      	ldr	r2, [pc, #84]	; (800a7e0 <set_motor_config+0xb8>)
 800a78c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a796:	65da      	str	r2, [r3, #92]	; 0x5c

		break;
 800a798:	e01a      	b.n	800a7d0 <set_motor_config+0xa8>
		case TYPE_GM6020:
		case TYPE_GM6020_720:
			motor->angle_data.gearbox_ratio = 0;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f04f 0200 	mov.w	r2, #0
 800a7a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = GM6020_MAX_RPM;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a0f      	ldr	r2, [pc, #60]	; (800a7e4 <set_motor_config+0xbc>)
 800a7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a0e      	ldr	r2, [pc, #56]	; (800a7e8 <set_motor_config+0xc0>)
 800a7b0:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 800a7b2:	e00d      	b.n	800a7d0 <set_motor_config+0xa8>
		case TYPE_M2006:
		case TYPE_M2006_STEPS:
		case TYPE_M2006_ANGLE:
			motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a0d      	ldr	r2, [pc, #52]	; (800a7ec <set_motor_config+0xc4>)
 800a7b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = M2006_MAX_RPM;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a0c      	ldr	r2, [pc, #48]	; (800a7f0 <set_motor_config+0xc8>)
 800a7c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a7ca:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 800a7cc:	e000      	b.n	800a7d0 <set_motor_config+0xa8>
		default:
			break;
 800a7ce:	bf00      	nop
		}

}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	4199999a 	.word	0x4199999a
 800a7e0:	460ca000 	.word	0x460ca000
 800a7e4:	43c80000 	.word	0x43c80000
 800a7e8:	469c4000 	.word	0x469c4000
 800a7ec:	42100000 	.word	0x42100000
 800a7f0:	466a6000 	.word	0x466a6000

0800a7f4 <config_motors>:

extern motor_data_t can_motors[24];
void config_motors() {
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 24; i++) {
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	71fb      	strb	r3, [r7, #7]
 800a7fe:	e042      	b.n	800a886 <config_motors+0x92>
		//reset all the values to 0
		can_motors[i].motor_type = 0;
 800a800:	79fa      	ldrb	r2, [r7, #7]
 800a802:	49c2      	ldr	r1, [pc, #776]	; (800ab0c <config_motors+0x318>)
 800a804:	4613      	mov	r3, r2
 800a806:	011b      	lsls	r3, r3, #4
 800a808:	1a9b      	subs	r3, r3, r2
 800a80a:	011b      	lsls	r3, r3, #4
 800a80c:	440b      	add	r3, r1
 800a80e:	3302      	adds	r3, #2
 800a810:	2200      	movs	r2, #0
 800a812:	701a      	strb	r2, [r3, #0]
		can_motors[i].rpm_pid.output = 0;
 800a814:	79fa      	ldrb	r2, [r7, #7]
 800a816:	49bd      	ldr	r1, [pc, #756]	; (800ab0c <config_motors+0x318>)
 800a818:	4613      	mov	r3, r2
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	1a9b      	subs	r3, r3, r2
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	440b      	add	r3, r1
 800a822:	3358      	adds	r3, #88	; 0x58
 800a824:	f04f 0200 	mov.w	r2, #0
 800a828:	601a      	str	r2, [r3, #0]
		can_motors[i].rpm_pid.integral = 0;
 800a82a:	79fa      	ldrb	r2, [r7, #7]
 800a82c:	49b7      	ldr	r1, [pc, #732]	; (800ab0c <config_motors+0x318>)
 800a82e:	4613      	mov	r3, r2
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	1a9b      	subs	r3, r3, r2
 800a834:	011b      	lsls	r3, r3, #4
 800a836:	440b      	add	r3, r1
 800a838:	334c      	adds	r3, #76	; 0x4c
 800a83a:	f04f 0200 	mov.w	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.output = 0;
 800a840:	79fa      	ldrb	r2, [r7, #7]
 800a842:	49b2      	ldr	r1, [pc, #712]	; (800ab0c <config_motors+0x318>)
 800a844:	4613      	mov	r3, r2
 800a846:	011b      	lsls	r3, r3, #4
 800a848:	1a9b      	subs	r3, r3, r2
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	440b      	add	r3, r1
 800a84e:	3388      	adds	r3, #136	; 0x88
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.integral = 0;
 800a856:	79fa      	ldrb	r2, [r7, #7]
 800a858:	49ac      	ldr	r1, [pc, #688]	; (800ab0c <config_motors+0x318>)
 800a85a:	4613      	mov	r3, r2
 800a85c:	011b      	lsls	r3, r3, #4
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	011b      	lsls	r3, r3, #4
 800a862:	440b      	add	r3, r1
 800a864:	337c      	adds	r3, #124	; 0x7c
 800a866:	f04f 0200 	mov.w	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_data.ticks = 0;
 800a86c:	79fa      	ldrb	r2, [r7, #7]
 800a86e:	49a7      	ldr	r1, [pc, #668]	; (800ab0c <config_motors+0x318>)
 800a870:	4613      	mov	r3, r2
 800a872:	011b      	lsls	r3, r3, #4
 800a874:	1a9b      	subs	r3, r3, r2
 800a876:	011b      	lsls	r3, r3, #4
 800a878:	440b      	add	r3, r1
 800a87a:	3398      	adds	r3, #152	; 0x98
 800a87c:	2200      	movs	r2, #0
 800a87e:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i <= 24; i++) {
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	3301      	adds	r3, #1
 800a884:	71fb      	strb	r3, [r7, #7]
 800a886:	79fb      	ldrb	r3, [r7, #7]
 800a888:	2b18      	cmp	r3, #24
 800a88a:	d9b9      	bls.n	800a800 <config_motors+0xc>
	}

	//initialise motor data
#ifdef Leftwheel_MOTOR_ID
	uint8_t motor_id = Leftwheel_MOTOR_ID - 1;
 800a88c:	2300      	movs	r3, #0
 800a88e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 800a890:	79ba      	ldrb	r2, [r7, #6]
 800a892:	499e      	ldr	r1, [pc, #632]	; (800ab0c <config_motors+0x318>)
 800a894:	4613      	mov	r3, r2
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	1a9b      	subs	r3, r3, r2
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	440b      	add	r3, r1
 800a89e:	3302      	adds	r3, #2
 800a8a0:	2203      	movs	r2, #3
 800a8a2:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800a8a4:	79ba      	ldrb	r2, [r7, #6]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	011b      	lsls	r3, r3, #4
 800a8ae:	4a97      	ldr	r2, [pc, #604]	; (800ab0c <config_motors+0x318>)
 800a8b0:	4413      	add	r3, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff ff38 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 800a8b8:	79ba      	ldrb	r2, [r7, #6]
 800a8ba:	4994      	ldr	r1, [pc, #592]	; (800ab0c <config_motors+0x318>)
 800a8bc:	4613      	mov	r3, r2
 800a8be:	011b      	lsls	r3, r3, #4
 800a8c0:	1a9b      	subs	r3, r3, r2
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	440b      	add	r3, r1
 800a8c6:	339c      	adds	r3, #156	; 0x9c
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800a8cc:	79ba      	ldrb	r2, [r7, #6]
 800a8ce:	498f      	ldr	r1, [pc, #572]	; (800ab0c <config_motors+0x318>)
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	011b      	lsls	r3, r3, #4
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	440b      	add	r3, r1
 800a8da:	33b8      	adds	r3, #184	; 0xb8
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800a8e2:	79ba      	ldrb	r2, [r7, #6]
 800a8e4:	4989      	ldr	r1, [pc, #548]	; (800ab0c <config_motors+0x318>)
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	011b      	lsls	r3, r3, #4
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	440b      	add	r3, r1
 800a8f0:	33b4      	adds	r3, #180	; 0xb4
 800a8f2:	f04f 0200 	mov.w	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800a8f8:	79ba      	ldrb	r2, [r7, #6]
 800a8fa:	4984      	ldr	r1, [pc, #528]	; (800ab0c <config_motors+0x318>)
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	011b      	lsls	r3, r3, #4
 800a900:	1a9b      	subs	r3, r3, r2
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	440b      	add	r3, r1
 800a906:	3338      	adds	r3, #56	; 0x38
 800a908:	4a81      	ldr	r2, [pc, #516]	; (800ab10 <config_motors+0x31c>)
 800a90a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800a90c:	79ba      	ldrb	r2, [r7, #6]
 800a90e:	497f      	ldr	r1, [pc, #508]	; (800ab0c <config_motors+0x318>)
 800a910:	4613      	mov	r3, r2
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	1a9b      	subs	r3, r3, r2
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	440b      	add	r3, r1
 800a91a:	333c      	adds	r3, #60	; 0x3c
 800a91c:	4a7d      	ldr	r2, [pc, #500]	; (800ab14 <config_motors+0x320>)
 800a91e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800a920:	79ba      	ldrb	r2, [r7, #6]
 800a922:	497a      	ldr	r1, [pc, #488]	; (800ab0c <config_motors+0x318>)
 800a924:	4613      	mov	r3, r2
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	1a9b      	subs	r3, r3, r2
 800a92a:	011b      	lsls	r3, r3, #4
 800a92c:	440b      	add	r3, r1
 800a92e:	3340      	adds	r3, #64	; 0x40
 800a930:	4a79      	ldr	r2, [pc, #484]	; (800ab18 <config_motors+0x324>)
 800a932:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800a934:	79ba      	ldrb	r2, [r7, #6]
 800a936:	4975      	ldr	r1, [pc, #468]	; (800ab0c <config_motors+0x318>)
 800a938:	4613      	mov	r3, r2
 800a93a:	011b      	lsls	r3, r3, #4
 800a93c:	1a9b      	subs	r3, r3, r2
 800a93e:	011b      	lsls	r3, r3, #4
 800a940:	440b      	add	r3, r1
 800a942:	33d4      	adds	r3, #212	; 0xd4
 800a944:	4a75      	ldr	r2, [pc, #468]	; (800ab1c <config_motors+0x328>)
 800a946:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800a948:	79ba      	ldrb	r2, [r7, #6]
 800a94a:	4970      	ldr	r1, [pc, #448]	; (800ab0c <config_motors+0x318>)
 800a94c:	4613      	mov	r3, r2
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	011b      	lsls	r3, r3, #4
 800a954:	440b      	add	r3, r1
 800a956:	3350      	adds	r3, #80	; 0x50
 800a958:	4a71      	ldr	r2, [pc, #452]	; (800ab20 <config_motors+0x32c>)
 800a95a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800a95c:	79ba      	ldrb	r2, [r7, #6]
 800a95e:	496b      	ldr	r1, [pc, #428]	; (800ab0c <config_motors+0x318>)
 800a960:	4613      	mov	r3, r2
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	1a9b      	subs	r3, r3, r2
 800a966:	011b      	lsls	r3, r3, #4
 800a968:	440b      	add	r3, r1
 800a96a:	3354      	adds	r3, #84	; 0x54
 800a96c:	4a6d      	ldr	r2, [pc, #436]	; (800ab24 <config_motors+0x330>)
 800a96e:	601a      	str	r2, [r3, #0]
#endif

#ifdef Rightwheel_MOTOR_ID
	motor_id =Rightwheel_MOTOR_ID - 1;
 800a970:	2301      	movs	r3, #1
 800a972:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 800a974:	79ba      	ldrb	r2, [r7, #6]
 800a976:	4965      	ldr	r1, [pc, #404]	; (800ab0c <config_motors+0x318>)
 800a978:	4613      	mov	r3, r2
 800a97a:	011b      	lsls	r3, r3, #4
 800a97c:	1a9b      	subs	r3, r3, r2
 800a97e:	011b      	lsls	r3, r3, #4
 800a980:	440b      	add	r3, r1
 800a982:	3302      	adds	r3, #2
 800a984:	2203      	movs	r2, #3
 800a986:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800a988:	79ba      	ldrb	r2, [r7, #6]
 800a98a:	4613      	mov	r3, r2
 800a98c:	011b      	lsls	r3, r3, #4
 800a98e:	1a9b      	subs	r3, r3, r2
 800a990:	011b      	lsls	r3, r3, #4
 800a992:	4a5e      	ldr	r2, [pc, #376]	; (800ab0c <config_motors+0x318>)
 800a994:	4413      	add	r3, r2
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fec6 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 800a99c:	79ba      	ldrb	r2, [r7, #6]
 800a99e:	495b      	ldr	r1, [pc, #364]	; (800ab0c <config_motors+0x318>)
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	011b      	lsls	r3, r3, #4
 800a9a8:	440b      	add	r3, r1
 800a9aa:	339c      	adds	r3, #156	; 0x9c
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800a9b0:	79ba      	ldrb	r2, [r7, #6]
 800a9b2:	4956      	ldr	r1, [pc, #344]	; (800ab0c <config_motors+0x318>)
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	1a9b      	subs	r3, r3, r2
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	440b      	add	r3, r1
 800a9be:	33b8      	adds	r3, #184	; 0xb8
 800a9c0:	f04f 0200 	mov.w	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800a9c6:	79ba      	ldrb	r2, [r7, #6]
 800a9c8:	4950      	ldr	r1, [pc, #320]	; (800ab0c <config_motors+0x318>)
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	1a9b      	subs	r3, r3, r2
 800a9d0:	011b      	lsls	r3, r3, #4
 800a9d2:	440b      	add	r3, r1
 800a9d4:	33b4      	adds	r3, #180	; 0xb4
 800a9d6:	f04f 0200 	mov.w	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a9dc:	79ba      	ldrb	r2, [r7, #6]
 800a9de:	494b      	ldr	r1, [pc, #300]	; (800ab0c <config_motors+0x318>)
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	440b      	add	r3, r1
 800a9ea:	33c4      	adds	r3, #196	; 0xc4
 800a9ec:	4a4e      	ldr	r2, [pc, #312]	; (800ab28 <config_motors+0x334>)
 800a9ee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a9f0:	79ba      	ldrb	r2, [r7, #6]
 800a9f2:	4946      	ldr	r1, [pc, #280]	; (800ab0c <config_motors+0x318>)
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	1a9b      	subs	r3, r3, r2
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	440b      	add	r3, r1
 800a9fe:	33c0      	adds	r3, #192	; 0xc0
 800aa00:	4a4a      	ldr	r2, [pc, #296]	; (800ab2c <config_motors+0x338>)
 800aa02:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800aa04:	79ba      	ldrb	r2, [r7, #6]
 800aa06:	4941      	ldr	r1, [pc, #260]	; (800ab0c <config_motors+0x318>)
 800aa08:	4613      	mov	r3, r2
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	1a9b      	subs	r3, r3, r2
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	440b      	add	r3, r1
 800aa12:	33d4      	adds	r3, #212	; 0xd4
 800aa14:	4a41      	ldr	r2, [pc, #260]	; (800ab1c <config_motors+0x328>)
 800aa16:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800aa18:	79ba      	ldrb	r2, [r7, #6]
 800aa1a:	493c      	ldr	r1, [pc, #240]	; (800ab0c <config_motors+0x318>)
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	011b      	lsls	r3, r3, #4
 800aa20:	1a9b      	subs	r3, r3, r2
 800aa22:	011b      	lsls	r3, r3, #4
 800aa24:	440b      	add	r3, r1
 800aa26:	3338      	adds	r3, #56	; 0x38
 800aa28:	4a39      	ldr	r2, [pc, #228]	; (800ab10 <config_motors+0x31c>)
 800aa2a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800aa2c:	79ba      	ldrb	r2, [r7, #6]
 800aa2e:	4937      	ldr	r1, [pc, #220]	; (800ab0c <config_motors+0x318>)
 800aa30:	4613      	mov	r3, r2
 800aa32:	011b      	lsls	r3, r3, #4
 800aa34:	1a9b      	subs	r3, r3, r2
 800aa36:	011b      	lsls	r3, r3, #4
 800aa38:	440b      	add	r3, r1
 800aa3a:	333c      	adds	r3, #60	; 0x3c
 800aa3c:	4a35      	ldr	r2, [pc, #212]	; (800ab14 <config_motors+0x320>)
 800aa3e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800aa40:	79ba      	ldrb	r2, [r7, #6]
 800aa42:	4932      	ldr	r1, [pc, #200]	; (800ab0c <config_motors+0x318>)
 800aa44:	4613      	mov	r3, r2
 800aa46:	011b      	lsls	r3, r3, #4
 800aa48:	1a9b      	subs	r3, r3, r2
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	440b      	add	r3, r1
 800aa4e:	3340      	adds	r3, #64	; 0x40
 800aa50:	4a31      	ldr	r2, [pc, #196]	; (800ab18 <config_motors+0x324>)
 800aa52:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800aa54:	79ba      	ldrb	r2, [r7, #6]
 800aa56:	492d      	ldr	r1, [pc, #180]	; (800ab0c <config_motors+0x318>)
 800aa58:	4613      	mov	r3, r2
 800aa5a:	011b      	lsls	r3, r3, #4
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	011b      	lsls	r3, r3, #4
 800aa60:	440b      	add	r3, r1
 800aa62:	3350      	adds	r3, #80	; 0x50
 800aa64:	4a2e      	ldr	r2, [pc, #184]	; (800ab20 <config_motors+0x32c>)
 800aa66:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800aa68:	79ba      	ldrb	r2, [r7, #6]
 800aa6a:	4928      	ldr	r1, [pc, #160]	; (800ab0c <config_motors+0x318>)
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	1a9b      	subs	r3, r3, r2
 800aa72:	011b      	lsls	r3, r3, #4
 800aa74:	440b      	add	r3, r1
 800aa76:	3354      	adds	r3, #84	; 0x54
 800aa78:	4a2a      	ldr	r2, [pc, #168]	; (800ab24 <config_motors+0x330>)
 800aa7a:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 800aa7c:	230e      	movs	r3, #14
 800aa7e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 800aa80:	79ba      	ldrb	r2, [r7, #6]
 800aa82:	4922      	ldr	r1, [pc, #136]	; (800ab0c <config_motors+0x318>)
 800aa84:	4613      	mov	r3, r2
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	1a9b      	subs	r3, r3, r2
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3302      	adds	r3, #2
 800aa90:	2203      	movs	r2, #3
 800aa92:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800aa94:	79ba      	ldrb	r2, [r7, #6]
 800aa96:	4613      	mov	r3, r2
 800aa98:	011b      	lsls	r3, r3, #4
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	011b      	lsls	r3, r3, #4
 800aa9e:	4a1b      	ldr	r2, [pc, #108]	; (800ab0c <config_motors+0x318>)
 800aaa0:	4413      	add	r3, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff fe40 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 800aaa8:	79ba      	ldrb	r2, [r7, #6]
 800aaaa:	4918      	ldr	r1, [pc, #96]	; (800ab0c <config_motors+0x318>)
 800aaac:	4613      	mov	r3, r2
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	1a9b      	subs	r3, r3, r2
 800aab2:	011b      	lsls	r3, r3, #4
 800aab4:	440b      	add	r3, r1
 800aab6:	339c      	adds	r3, #156	; 0x9c
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800aabc:	79ba      	ldrb	r2, [r7, #6]
 800aabe:	4913      	ldr	r1, [pc, #76]	; (800ab0c <config_motors+0x318>)
 800aac0:	4613      	mov	r3, r2
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	1a9b      	subs	r3, r3, r2
 800aac6:	011b      	lsls	r3, r3, #4
 800aac8:	440b      	add	r3, r1
 800aaca:	33b8      	adds	r3, #184	; 0xb8
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800aad2:	79ba      	ldrb	r2, [r7, #6]
 800aad4:	490d      	ldr	r1, [pc, #52]	; (800ab0c <config_motors+0x318>)
 800aad6:	4613      	mov	r3, r2
 800aad8:	011b      	lsls	r3, r3, #4
 800aada:	1a9b      	subs	r3, r3, r2
 800aadc:	011b      	lsls	r3, r3, #4
 800aade:	440b      	add	r3, r1
 800aae0:	33b4      	adds	r3, #180	; 0xb4
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800aae8:	79ba      	ldrb	r2, [r7, #6]
 800aaea:	4908      	ldr	r1, [pc, #32]	; (800ab0c <config_motors+0x318>)
 800aaec:	4613      	mov	r3, r2
 800aaee:	011b      	lsls	r3, r3, #4
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	011b      	lsls	r3, r3, #4
 800aaf4:	440b      	add	r3, r1
 800aaf6:	33c4      	adds	r3, #196	; 0xc4
 800aaf8:	4a0b      	ldr	r2, [pc, #44]	; (800ab28 <config_motors+0x334>)
 800aafa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800aafc:	79ba      	ldrb	r2, [r7, #6]
 800aafe:	4903      	ldr	r1, [pc, #12]	; (800ab0c <config_motors+0x318>)
 800ab00:	4613      	mov	r3, r2
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	e012      	b.n	800ab30 <config_motors+0x33c>
 800ab0a:	bf00      	nop
 800ab0c:	200018a0 	.word	0x200018a0
 800ab10:	41200000 	.word	0x41200000
 800ab14:	3dcccccd 	.word	0x3dcccccd
 800ab18:	40a00000 	.word	0x40a00000
 800ab1c:	40f40000 	.word	0x40f40000
 800ab20:	461c4000 	.word	0x461c4000
 800ab24:	457a0000 	.word	0x457a0000
 800ab28:	40c90fdb 	.word	0x40c90fdb
 800ab2c:	c0c90fdb 	.word	0xc0c90fdb
 800ab30:	440b      	add	r3, r1
 800ab32:	33c0      	adds	r3, #192	; 0xc0
 800ab34:	4abe      	ldr	r2, [pc, #760]	; (800ae30 <config_motors+0x63c>)
 800ab36:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800ab38:	79ba      	ldrb	r2, [r7, #6]
 800ab3a:	49be      	ldr	r1, [pc, #760]	; (800ae34 <config_motors+0x640>)
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	011b      	lsls	r3, r3, #4
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	440b      	add	r3, r1
 800ab46:	33d4      	adds	r3, #212	; 0xd4
 800ab48:	4abb      	ldr	r2, [pc, #748]	; (800ae38 <config_motors+0x644>)
 800ab4a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 800ab4c:	79ba      	ldrb	r2, [r7, #6]
 800ab4e:	49b9      	ldr	r1, [pc, #740]	; (800ae34 <config_motors+0x640>)
 800ab50:	4613      	mov	r3, r2
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	1a9b      	subs	r3, r3, r2
 800ab56:	011b      	lsls	r3, r3, #4
 800ab58:	440b      	add	r3, r1
 800ab5a:	3368      	adds	r3, #104	; 0x68
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 800ab62:	79ba      	ldrb	r2, [r7, #6]
 800ab64:	49b3      	ldr	r1, [pc, #716]	; (800ae34 <config_motors+0x640>)
 800ab66:	4613      	mov	r3, r2
 800ab68:	011b      	lsls	r3, r3, #4
 800ab6a:	1a9b      	subs	r3, r3, r2
 800ab6c:	011b      	lsls	r3, r3, #4
 800ab6e:	440b      	add	r3, r1
 800ab70:	336c      	adds	r3, #108	; 0x6c
 800ab72:	f04f 0200 	mov.w	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 800ab78:	79ba      	ldrb	r2, [r7, #6]
 800ab7a:	49ae      	ldr	r1, [pc, #696]	; (800ae34 <config_motors+0x640>)
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	011b      	lsls	r3, r3, #4
 800ab80:	1a9b      	subs	r3, r3, r2
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	440b      	add	r3, r1
 800ab86:	3370      	adds	r3, #112	; 0x70
 800ab88:	f04f 0200 	mov.w	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 800ab8e:	79ba      	ldrb	r2, [r7, #6]
 800ab90:	49a8      	ldr	r1, [pc, #672]	; (800ae34 <config_motors+0x640>)
 800ab92:	4613      	mov	r3, r2
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	440b      	add	r3, r1
 800ab9c:	3380      	adds	r3, #128	; 0x80
 800ab9e:	f04f 0200 	mov.w	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 800aba4:	79ba      	ldrb	r2, [r7, #6]
 800aba6:	49a3      	ldr	r1, [pc, #652]	; (800ae34 <config_motors+0x640>)
 800aba8:	4613      	mov	r3, r2
 800abaa:	011b      	lsls	r3, r3, #4
 800abac:	1a9b      	subs	r3, r3, r2
 800abae:	011b      	lsls	r3, r3, #4
 800abb0:	440b      	add	r3, r1
 800abb2:	3384      	adds	r3, #132	; 0x84
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800abba:	79ba      	ldrb	r2, [r7, #6]
 800abbc:	499d      	ldr	r1, [pc, #628]	; (800ae34 <config_motors+0x640>)
 800abbe:	4613      	mov	r3, r2
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	440b      	add	r3, r1
 800abc8:	3338      	adds	r3, #56	; 0x38
 800abca:	4a9c      	ldr	r2, [pc, #624]	; (800ae3c <config_motors+0x648>)
 800abcc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800abce:	79ba      	ldrb	r2, [r7, #6]
 800abd0:	4998      	ldr	r1, [pc, #608]	; (800ae34 <config_motors+0x640>)
 800abd2:	4613      	mov	r3, r2
 800abd4:	011b      	lsls	r3, r3, #4
 800abd6:	1a9b      	subs	r3, r3, r2
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	440b      	add	r3, r1
 800abdc:	333c      	adds	r3, #60	; 0x3c
 800abde:	4a98      	ldr	r2, [pc, #608]	; (800ae40 <config_motors+0x64c>)
 800abe0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800abe2:	79ba      	ldrb	r2, [r7, #6]
 800abe4:	4993      	ldr	r1, [pc, #588]	; (800ae34 <config_motors+0x640>)
 800abe6:	4613      	mov	r3, r2
 800abe8:	011b      	lsls	r3, r3, #4
 800abea:	1a9b      	subs	r3, r3, r2
 800abec:	011b      	lsls	r3, r3, #4
 800abee:	440b      	add	r3, r1
 800abf0:	3340      	adds	r3, #64	; 0x40
 800abf2:	4a94      	ldr	r2, [pc, #592]	; (800ae44 <config_motors+0x650>)
 800abf4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800abf6:	79ba      	ldrb	r2, [r7, #6]
 800abf8:	498e      	ldr	r1, [pc, #568]	; (800ae34 <config_motors+0x640>)
 800abfa:	4613      	mov	r3, r2
 800abfc:	011b      	lsls	r3, r3, #4
 800abfe:	1a9b      	subs	r3, r3, r2
 800ac00:	011b      	lsls	r3, r3, #4
 800ac02:	440b      	add	r3, r1
 800ac04:	3350      	adds	r3, #80	; 0x50
 800ac06:	4a90      	ldr	r2, [pc, #576]	; (800ae48 <config_motors+0x654>)
 800ac08:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800ac0a:	79ba      	ldrb	r2, [r7, #6]
 800ac0c:	4989      	ldr	r1, [pc, #548]	; (800ae34 <config_motors+0x640>)
 800ac0e:	4613      	mov	r3, r2
 800ac10:	011b      	lsls	r3, r3, #4
 800ac12:	1a9b      	subs	r3, r3, r2
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	440b      	add	r3, r1
 800ac18:	3354      	adds	r3, #84	; 0x54
 800ac1a:	4a8c      	ldr	r2, [pc, #560]	; (800ae4c <config_motors+0x658>)
 800ac1c:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 800ac1e:	230f      	movs	r3, #15
 800ac20:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 800ac22:	79ba      	ldrb	r2, [r7, #6]
 800ac24:	4983      	ldr	r1, [pc, #524]	; (800ae34 <config_motors+0x640>)
 800ac26:	4613      	mov	r3, r2
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	1a9b      	subs	r3, r3, r2
 800ac2c:	011b      	lsls	r3, r3, #4
 800ac2e:	440b      	add	r3, r1
 800ac30:	3302      	adds	r3, #2
 800ac32:	2203      	movs	r2, #3
 800ac34:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800ac36:	79ba      	ldrb	r2, [r7, #6]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	011b      	lsls	r3, r3, #4
 800ac3c:	1a9b      	subs	r3, r3, r2
 800ac3e:	011b      	lsls	r3, r3, #4
 800ac40:	4a7c      	ldr	r2, [pc, #496]	; (800ae34 <config_motors+0x640>)
 800ac42:	4413      	add	r3, r2
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff fd6f 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 800ac4a:	79ba      	ldrb	r2, [r7, #6]
 800ac4c:	4979      	ldr	r1, [pc, #484]	; (800ae34 <config_motors+0x640>)
 800ac4e:	4613      	mov	r3, r2
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	011b      	lsls	r3, r3, #4
 800ac56:	440b      	add	r3, r1
 800ac58:	339c      	adds	r3, #156	; 0x9c
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 800ac5e:	79ba      	ldrb	r2, [r7, #6]
 800ac60:	4974      	ldr	r1, [pc, #464]	; (800ae34 <config_motors+0x640>)
 800ac62:	4613      	mov	r3, r2
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	440b      	add	r3, r1
 800ac6c:	33b8      	adds	r3, #184	; 0xb8
 800ac6e:	f04f 0200 	mov.w	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800ac74:	79ba      	ldrb	r2, [r7, #6]
 800ac76:	496f      	ldr	r1, [pc, #444]	; (800ae34 <config_motors+0x640>)
 800ac78:	4613      	mov	r3, r2
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	011b      	lsls	r3, r3, #4
 800ac80:	440b      	add	r3, r1
 800ac82:	33b4      	adds	r3, #180	; 0xb4
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800ac8a:	79ba      	ldrb	r2, [r7, #6]
 800ac8c:	4969      	ldr	r1, [pc, #420]	; (800ae34 <config_motors+0x640>)
 800ac8e:	4613      	mov	r3, r2
 800ac90:	011b      	lsls	r3, r3, #4
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	011b      	lsls	r3, r3, #4
 800ac96:	440b      	add	r3, r1
 800ac98:	33c4      	adds	r3, #196	; 0xc4
 800ac9a:	4a6d      	ldr	r2, [pc, #436]	; (800ae50 <config_motors+0x65c>)
 800ac9c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800ac9e:	79ba      	ldrb	r2, [r7, #6]
 800aca0:	4964      	ldr	r1, [pc, #400]	; (800ae34 <config_motors+0x640>)
 800aca2:	4613      	mov	r3, r2
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	011b      	lsls	r3, r3, #4
 800acaa:	440b      	add	r3, r1
 800acac:	33c0      	adds	r3, #192	; 0xc0
 800acae:	4a60      	ldr	r2, [pc, #384]	; (800ae30 <config_motors+0x63c>)
 800acb0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800acb2:	79ba      	ldrb	r2, [r7, #6]
 800acb4:	495f      	ldr	r1, [pc, #380]	; (800ae34 <config_motors+0x640>)
 800acb6:	4613      	mov	r3, r2
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	011b      	lsls	r3, r3, #4
 800acbe:	440b      	add	r3, r1
 800acc0:	33d4      	adds	r3, #212	; 0xd4
 800acc2:	4a5d      	ldr	r2, [pc, #372]	; (800ae38 <config_motors+0x644>)
 800acc4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 800acc6:	79ba      	ldrb	r2, [r7, #6]
 800acc8:	495a      	ldr	r1, [pc, #360]	; (800ae34 <config_motors+0x640>)
 800acca:	4613      	mov	r3, r2
 800accc:	011b      	lsls	r3, r3, #4
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	011b      	lsls	r3, r3, #4
 800acd2:	440b      	add	r3, r1
 800acd4:	3368      	adds	r3, #104	; 0x68
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 800acdc:	79ba      	ldrb	r2, [r7, #6]
 800acde:	4955      	ldr	r1, [pc, #340]	; (800ae34 <config_motors+0x640>)
 800ace0:	4613      	mov	r3, r2
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	440b      	add	r3, r1
 800acea:	336c      	adds	r3, #108	; 0x6c
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 800acf2:	79ba      	ldrb	r2, [r7, #6]
 800acf4:	494f      	ldr	r1, [pc, #316]	; (800ae34 <config_motors+0x640>)
 800acf6:	4613      	mov	r3, r2
 800acf8:	011b      	lsls	r3, r3, #4
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	011b      	lsls	r3, r3, #4
 800acfe:	440b      	add	r3, r1
 800ad00:	3370      	adds	r3, #112	; 0x70
 800ad02:	f04f 0200 	mov.w	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 800ad08:	79ba      	ldrb	r2, [r7, #6]
 800ad0a:	494a      	ldr	r1, [pc, #296]	; (800ae34 <config_motors+0x640>)
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	011b      	lsls	r3, r3, #4
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	440b      	add	r3, r1
 800ad16:	3380      	adds	r3, #128	; 0x80
 800ad18:	f04f 0200 	mov.w	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 800ad1e:	79ba      	ldrb	r2, [r7, #6]
 800ad20:	4944      	ldr	r1, [pc, #272]	; (800ae34 <config_motors+0x640>)
 800ad22:	4613      	mov	r3, r2
 800ad24:	011b      	lsls	r3, r3, #4
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	440b      	add	r3, r1
 800ad2c:	3384      	adds	r3, #132	; 0x84
 800ad2e:	f04f 0200 	mov.w	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800ad34:	79ba      	ldrb	r2, [r7, #6]
 800ad36:	493f      	ldr	r1, [pc, #252]	; (800ae34 <config_motors+0x640>)
 800ad38:	4613      	mov	r3, r2
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	011b      	lsls	r3, r3, #4
 800ad40:	440b      	add	r3, r1
 800ad42:	3338      	adds	r3, #56	; 0x38
 800ad44:	4a3d      	ldr	r2, [pc, #244]	; (800ae3c <config_motors+0x648>)
 800ad46:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800ad48:	79ba      	ldrb	r2, [r7, #6]
 800ad4a:	493a      	ldr	r1, [pc, #232]	; (800ae34 <config_motors+0x640>)
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	440b      	add	r3, r1
 800ad56:	333c      	adds	r3, #60	; 0x3c
 800ad58:	4a39      	ldr	r2, [pc, #228]	; (800ae40 <config_motors+0x64c>)
 800ad5a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800ad5c:	79ba      	ldrb	r2, [r7, #6]
 800ad5e:	4935      	ldr	r1, [pc, #212]	; (800ae34 <config_motors+0x640>)
 800ad60:	4613      	mov	r3, r2
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	011b      	lsls	r3, r3, #4
 800ad68:	440b      	add	r3, r1
 800ad6a:	3340      	adds	r3, #64	; 0x40
 800ad6c:	4a35      	ldr	r2, [pc, #212]	; (800ae44 <config_motors+0x650>)
 800ad6e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800ad70:	79ba      	ldrb	r2, [r7, #6]
 800ad72:	4930      	ldr	r1, [pc, #192]	; (800ae34 <config_motors+0x640>)
 800ad74:	4613      	mov	r3, r2
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3350      	adds	r3, #80	; 0x50
 800ad80:	4a31      	ldr	r2, [pc, #196]	; (800ae48 <config_motors+0x654>)
 800ad82:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800ad84:	79ba      	ldrb	r2, [r7, #6]
 800ad86:	492b      	ldr	r1, [pc, #172]	; (800ae34 <config_motors+0x640>)
 800ad88:	4613      	mov	r3, r2
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	1a9b      	subs	r3, r3, r2
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	440b      	add	r3, r1
 800ad92:	3354      	adds	r3, #84	; 0x54
 800ad94:	4a2d      	ldr	r2, [pc, #180]	; (800ae4c <config_motors+0x658>)
 800ad96:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 800ad98:	2316      	movs	r3, #22
 800ad9a:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 800ad9c:	79ba      	ldrb	r2, [r7, #6]
 800ad9e:	4925      	ldr	r1, [pc, #148]	; (800ae34 <config_motors+0x640>)
 800ada0:	4613      	mov	r3, r2
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	1a9b      	subs	r3, r3, r2
 800ada6:	011b      	lsls	r3, r3, #4
 800ada8:	440b      	add	r3, r1
 800adaa:	3302      	adds	r3, #2
 800adac:	2204      	movs	r2, #4
 800adae:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800adb0:	79ba      	ldrb	r2, [r7, #6]
 800adb2:	4613      	mov	r3, r2
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	1a9b      	subs	r3, r3, r2
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	4a1e      	ldr	r2, [pc, #120]	; (800ae34 <config_motors+0x640>)
 800adbc:	4413      	add	r3, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff fcb2 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800adc4:	79ba      	ldrb	r2, [r7, #6]
 800adc6:	491b      	ldr	r1, [pc, #108]	; (800ae34 <config_motors+0x640>)
 800adc8:	4613      	mov	r3, r2
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	1a9b      	subs	r3, r3, r2
 800adce:	011b      	lsls	r3, r3, #4
 800add0:	440b      	add	r3, r1
 800add2:	33c8      	adds	r3, #200	; 0xc8
 800add4:	4a1f      	ldr	r2, [pc, #124]	; (800ae54 <config_motors+0x660>)
 800add6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 800add8:	79ba      	ldrb	r2, [r7, #6]
 800adda:	4916      	ldr	r1, [pc, #88]	; (800ae34 <config_motors+0x640>)
 800addc:	4613      	mov	r3, r2
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	1a9b      	subs	r3, r3, r2
 800ade2:	011b      	lsls	r3, r3, #4
 800ade4:	440b      	add	r3, r1
 800ade6:	338c      	adds	r3, #140	; 0x8c
 800ade8:	4a1b      	ldr	r2, [pc, #108]	; (800ae58 <config_motors+0x664>)
 800adea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800adec:	79ba      	ldrb	r2, [r7, #6]
 800adee:	4911      	ldr	r1, [pc, #68]	; (800ae34 <config_motors+0x640>)
 800adf0:	4613      	mov	r3, r2
 800adf2:	011b      	lsls	r3, r3, #4
 800adf4:	1a9b      	subs	r3, r3, r2
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	440b      	add	r3, r1
 800adfa:	3338      	adds	r3, #56	; 0x38
 800adfc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800ae00:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 800ae02:	79ba      	ldrb	r2, [r7, #6]
 800ae04:	490b      	ldr	r1, [pc, #44]	; (800ae34 <config_motors+0x640>)
 800ae06:	4613      	mov	r3, r2
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	1a9b      	subs	r3, r3, r2
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	440b      	add	r3, r1
 800ae10:	333c      	adds	r3, #60	; 0x3c
 800ae12:	4a12      	ldr	r2, [pc, #72]	; (800ae5c <config_motors+0x668>)
 800ae14:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 800ae16:	79ba      	ldrb	r2, [r7, #6]
 800ae18:	4906      	ldr	r1, [pc, #24]	; (800ae34 <config_motors+0x640>)
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	1a9b      	subs	r3, r3, r2
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	440b      	add	r3, r1
 800ae24:	3340      	adds	r3, #64	; 0x40
 800ae26:	f04f 0200 	mov.w	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800ae2c:	79ba      	ldrb	r2, [r7, #6]
 800ae2e:	e017      	b.n	800ae60 <config_motors+0x66c>
 800ae30:	c0c90fdb 	.word	0xc0c90fdb
 800ae34:	200018a0 	.word	0x200018a0
 800ae38:	40f40000 	.word	0x40f40000
 800ae3c:	41200000 	.word	0x41200000
 800ae40:	3dcccccd 	.word	0x3dcccccd
 800ae44:	40a00000 	.word	0x40a00000
 800ae48:	461c4000 	.word	0x461c4000
 800ae4c:	457a0000 	.word	0x457a0000
 800ae50:	40c90fdb 	.word	0x40c90fdb
 800ae54:	4199999a 	.word	0x4199999a
 800ae58:	460ca000 	.word	0x460ca000
 800ae5c:	3b03126f 	.word	0x3b03126f
 800ae60:	49c1      	ldr	r1, [pc, #772]	; (800b168 <config_motors+0x974>)
 800ae62:	4613      	mov	r3, r2
 800ae64:	011b      	lsls	r3, r3, #4
 800ae66:	1a9b      	subs	r3, r3, r2
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	440b      	add	r3, r1
 800ae6c:	3350      	adds	r3, #80	; 0x50
 800ae6e:	4abf      	ldr	r2, [pc, #764]	; (800b16c <config_motors+0x978>)
 800ae70:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 800ae72:	79ba      	ldrb	r2, [r7, #6]
 800ae74:	49bc      	ldr	r1, [pc, #752]	; (800b168 <config_motors+0x974>)
 800ae76:	4613      	mov	r3, r2
 800ae78:	011b      	lsls	r3, r3, #4
 800ae7a:	1a9b      	subs	r3, r3, r2
 800ae7c:	011b      	lsls	r3, r3, #4
 800ae7e:	440b      	add	r3, r1
 800ae80:	3354      	adds	r3, #84	; 0x54
 800ae82:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800ae86:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 800ae88:	2312      	movs	r3, #18
 800ae8a:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 800ae8c:	79ba      	ldrb	r2, [r7, #6]
 800ae8e:	49b6      	ldr	r1, [pc, #728]	; (800b168 <config_motors+0x974>)
 800ae90:	4613      	mov	r3, r2
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	011b      	lsls	r3, r3, #4
 800ae98:	440b      	add	r3, r1
 800ae9a:	3302      	adds	r3, #2
 800ae9c:	2204      	movs	r2, #4
 800ae9e:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 800aea0:	79ba      	ldrb	r2, [r7, #6]
 800aea2:	49b1      	ldr	r1, [pc, #708]	; (800b168 <config_motors+0x974>)
 800aea4:	4613      	mov	r3, r2
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	1a9b      	subs	r3, r3, r2
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	440b      	add	r3, r1
 800aeae:	338c      	adds	r3, #140	; 0x8c
 800aeb0:	4aaf      	ldr	r2, [pc, #700]	; (800b170 <config_motors+0x97c>)
 800aeb2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800aeb4:	79ba      	ldrb	r2, [r7, #6]
 800aeb6:	49ac      	ldr	r1, [pc, #688]	; (800b168 <config_motors+0x974>)
 800aeb8:	4613      	mov	r3, r2
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	1a9b      	subs	r3, r3, r2
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	440b      	add	r3, r1
 800aec2:	3338      	adds	r3, #56	; 0x38
 800aec4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800aec8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 800aeca:	79ba      	ldrb	r2, [r7, #6]
 800aecc:	49a6      	ldr	r1, [pc, #664]	; (800b168 <config_motors+0x974>)
 800aece:	4613      	mov	r3, r2
 800aed0:	011b      	lsls	r3, r3, #4
 800aed2:	1a9b      	subs	r3, r3, r2
 800aed4:	011b      	lsls	r3, r3, #4
 800aed6:	440b      	add	r3, r1
 800aed8:	333c      	adds	r3, #60	; 0x3c
 800aeda:	4aa6      	ldr	r2, [pc, #664]	; (800b174 <config_motors+0x980>)
 800aedc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 800aede:	79ba      	ldrb	r2, [r7, #6]
 800aee0:	49a1      	ldr	r1, [pc, #644]	; (800b168 <config_motors+0x974>)
 800aee2:	4613      	mov	r3, r2
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	1a9b      	subs	r3, r3, r2
 800aee8:	011b      	lsls	r3, r3, #4
 800aeea:	440b      	add	r3, r1
 800aeec:	3340      	adds	r3, #64	; 0x40
 800aeee:	f04f 0200 	mov.w	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800aef4:	79ba      	ldrb	r2, [r7, #6]
 800aef6:	499c      	ldr	r1, [pc, #624]	; (800b168 <config_motors+0x974>)
 800aef8:	4613      	mov	r3, r2
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	1a9b      	subs	r3, r3, r2
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	440b      	add	r3, r1
 800af02:	3350      	adds	r3, #80	; 0x50
 800af04:	4a99      	ldr	r2, [pc, #612]	; (800b16c <config_motors+0x978>)
 800af06:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 800af08:	79ba      	ldrb	r2, [r7, #6]
 800af0a:	4997      	ldr	r1, [pc, #604]	; (800b168 <config_motors+0x974>)
 800af0c:	4613      	mov	r3, r2
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	1a9b      	subs	r3, r3, r2
 800af12:	011b      	lsls	r3, r3, #4
 800af14:	440b      	add	r3, r1
 800af16:	3354      	adds	r3, #84	; 0x54
 800af18:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800af1c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800af1e:	79ba      	ldrb	r2, [r7, #6]
 800af20:	4991      	ldr	r1, [pc, #580]	; (800b168 <config_motors+0x974>)
 800af22:	4613      	mov	r3, r2
 800af24:	011b      	lsls	r3, r3, #4
 800af26:	1a9b      	subs	r3, r3, r2
 800af28:	011b      	lsls	r3, r3, #4
 800af2a:	440b      	add	r3, r1
 800af2c:	335c      	adds	r3, #92	; 0x5c
 800af2e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800af32:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 800af34:	2311      	movs	r3, #17
 800af36:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M2006;
 800af38:	79ba      	ldrb	r2, [r7, #6]
 800af3a:	498b      	ldr	r1, [pc, #556]	; (800b168 <config_motors+0x974>)
 800af3c:	4613      	mov	r3, r2
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	011b      	lsls	r3, r3, #4
 800af44:	440b      	add	r3, r1
 800af46:	3302      	adds	r3, #2
 800af48:	2202      	movs	r2, #2
 800af4a:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&can_motors[motor_id]);
 800af4c:	79ba      	ldrb	r2, [r7, #6]
 800af4e:	4613      	mov	r3, r2
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	1a9b      	subs	r3, r3, r2
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	4a84      	ldr	r2, [pc, #528]	; (800b168 <config_motors+0x974>)
 800af58:	4413      	add	r3, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fbe4 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.max_ang = PI * 5000; //so it can rotate 5000 times oops
 800af60:	79ba      	ldrb	r2, [r7, #6]
 800af62:	4981      	ldr	r1, [pc, #516]	; (800b168 <config_motors+0x974>)
 800af64:	4613      	mov	r3, r2
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	1a9b      	subs	r3, r3, r2
 800af6a:	011b      	lsls	r3, r3, #4
 800af6c:	440b      	add	r3, r1
 800af6e:	33b8      	adds	r3, #184	; 0xb8
 800af70:	4a81      	ldr	r2, [pc, #516]	; (800b178 <config_motors+0x984>)
 800af72:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = -PI * 5000;
 800af74:	79ba      	ldrb	r2, [r7, #6]
 800af76:	497c      	ldr	r1, [pc, #496]	; (800b168 <config_motors+0x974>)
 800af78:	4613      	mov	r3, r2
 800af7a:	011b      	lsls	r3, r3, #4
 800af7c:	1a9b      	subs	r3, r3, r2
 800af7e:	011b      	lsls	r3, r3, #4
 800af80:	440b      	add	r3, r1
 800af82:	33b4      	adds	r3, #180	; 0xb4
 800af84:	4a7d      	ldr	r2, [pc, #500]	; (800b17c <config_motors+0x988>)
 800af86:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800af88:	79ba      	ldrb	r2, [r7, #6]
 800af8a:	4977      	ldr	r1, [pc, #476]	; (800b168 <config_motors+0x974>)
 800af8c:	4613      	mov	r3, r2
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	1a9b      	subs	r3, r3, r2
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	440b      	add	r3, r1
 800af96:	33c4      	adds	r3, #196	; 0xc4
 800af98:	4a79      	ldr	r2, [pc, #484]	; (800b180 <config_motors+0x98c>)
 800af9a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800af9c:	79ba      	ldrb	r2, [r7, #6]
 800af9e:	4972      	ldr	r1, [pc, #456]	; (800b168 <config_motors+0x974>)
 800afa0:	4613      	mov	r3, r2
 800afa2:	011b      	lsls	r3, r3, #4
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	440b      	add	r3, r1
 800afaa:	33c0      	adds	r3, #192	; 0xc0
 800afac:	4a75      	ldr	r2, [pc, #468]	; (800b184 <config_motors+0x990>)
 800afae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 800afb0:	79ba      	ldrb	r2, [r7, #6]
 800afb2:	496d      	ldr	r1, [pc, #436]	; (800b168 <config_motors+0x974>)
 800afb4:	4613      	mov	r3, r2
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	1a9b      	subs	r3, r3, r2
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	440b      	add	r3, r1
 800afbe:	33d4      	adds	r3, #212	; 0xd4
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 800afc6:	79ba      	ldrb	r2, [r7, #6]
 800afc8:	4967      	ldr	r1, [pc, #412]	; (800b168 <config_motors+0x974>)
 800afca:	4613      	mov	r3, r2
 800afcc:	011b      	lsls	r3, r3, #4
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	440b      	add	r3, r1
 800afd4:	3368      	adds	r3, #104	; 0x68
 800afd6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800afda:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 800afdc:	79ba      	ldrb	r2, [r7, #6]
 800afde:	4962      	ldr	r1, [pc, #392]	; (800b168 <config_motors+0x974>)
 800afe0:	4613      	mov	r3, r2
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	1a9b      	subs	r3, r3, r2
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	440b      	add	r3, r1
 800afea:	336c      	adds	r3, #108	; 0x6c
 800afec:	f04f 0200 	mov.w	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 800aff2:	79ba      	ldrb	r2, [r7, #6]
 800aff4:	495c      	ldr	r1, [pc, #368]	; (800b168 <config_motors+0x974>)
 800aff6:	4613      	mov	r3, r2
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	1a9b      	subs	r3, r3, r2
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	440b      	add	r3, r1
 800b000:	3370      	adds	r3, #112	; 0x70
 800b002:	f04f 0200 	mov.w	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 800b008:	79ba      	ldrb	r2, [r7, #6]
 800b00a:	4957      	ldr	r1, [pc, #348]	; (800b168 <config_motors+0x974>)
 800b00c:	4613      	mov	r3, r2
 800b00e:	011b      	lsls	r3, r3, #4
 800b010:	1a9b      	subs	r3, r3, r2
 800b012:	011b      	lsls	r3, r3, #4
 800b014:	440b      	add	r3, r1
 800b016:	3380      	adds	r3, #128	; 0x80
 800b018:	f04f 0200 	mov.w	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 800b01e:	79ba      	ldrb	r2, [r7, #6]
 800b020:	4951      	ldr	r1, [pc, #324]	; (800b168 <config_motors+0x974>)
 800b022:	4613      	mov	r3, r2
 800b024:	011b      	lsls	r3, r3, #4
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	011b      	lsls	r3, r3, #4
 800b02a:	440b      	add	r3, r1
 800b02c:	3384      	adds	r3, #132	; 0x84
 800b02e:	4a56      	ldr	r2, [pc, #344]	; (800b188 <config_motors+0x994>)
 800b030:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 800b032:	79ba      	ldrb	r2, [r7, #6]
 800b034:	494c      	ldr	r1, [pc, #304]	; (800b168 <config_motors+0x974>)
 800b036:	4613      	mov	r3, r2
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	011b      	lsls	r3, r3, #4
 800b03e:	440b      	add	r3, r1
 800b040:	3338      	adds	r3, #56	; 0x38
 800b042:	4a52      	ldr	r2, [pc, #328]	; (800b18c <config_motors+0x998>)
 800b044:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 800b046:	79ba      	ldrb	r2, [r7, #6]
 800b048:	4947      	ldr	r1, [pc, #284]	; (800b168 <config_motors+0x974>)
 800b04a:	4613      	mov	r3, r2
 800b04c:	011b      	lsls	r3, r3, #4
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	440b      	add	r3, r1
 800b054:	333c      	adds	r3, #60	; 0x3c
 800b056:	4a4e      	ldr	r2, [pc, #312]	; (800b190 <config_motors+0x99c>)
 800b058:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 800b05a:	79ba      	ldrb	r2, [r7, #6]
 800b05c:	4942      	ldr	r1, [pc, #264]	; (800b168 <config_motors+0x974>)
 800b05e:	4613      	mov	r3, r2
 800b060:	011b      	lsls	r3, r3, #4
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	440b      	add	r3, r1
 800b068:	3340      	adds	r3, #64	; 0x40
 800b06a:	4a4a      	ldr	r2, [pc, #296]	; (800b194 <config_motors+0x9a0>)
 800b06c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 800b06e:	79ba      	ldrb	r2, [r7, #6]
 800b070:	493d      	ldr	r1, [pc, #244]	; (800b168 <config_motors+0x974>)
 800b072:	4613      	mov	r3, r2
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	011b      	lsls	r3, r3, #4
 800b07a:	440b      	add	r3, r1
 800b07c:	3350      	adds	r3, #80	; 0x50
 800b07e:	4a3b      	ldr	r2, [pc, #236]	; (800b16c <config_motors+0x978>)
 800b080:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 800b082:	79ba      	ldrb	r2, [r7, #6]
 800b084:	4938      	ldr	r1, [pc, #224]	; (800b168 <config_motors+0x974>)
 800b086:	4613      	mov	r3, r2
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	1a9b      	subs	r3, r3, r2
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	440b      	add	r3, r1
 800b090:	3354      	adds	r3, #84	; 0x54
 800b092:	4a36      	ldr	r2, [pc, #216]	; (800b16c <config_motors+0x978>)
 800b094:	601a      	str	r2, [r3, #0]
#endif

#ifdef L1_MOTOR_ID
	motor_id = L1_MOTOR_ID - 1;
 800b096:	2307      	movs	r3, #7
 800b098:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 800b09a:	79ba      	ldrb	r2, [r7, #6]
 800b09c:	4932      	ldr	r1, [pc, #200]	; (800b168 <config_motors+0x974>)
 800b09e:	4613      	mov	r3, r2
 800b0a0:	011b      	lsls	r3, r3, #4
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	440b      	add	r3, r1
 800b0a8:	3302      	adds	r3, #2
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800b0ae:	79ba      	ldrb	r2, [r7, #6]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	1a9b      	subs	r3, r3, r2
 800b0b6:	011b      	lsls	r3, r3, #4
 800b0b8:	4a2b      	ldr	r2, [pc, #172]	; (800b168 <config_motors+0x974>)
 800b0ba:	4413      	add	r3, r2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff fb33 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 800b0c2:	79ba      	ldrb	r2, [r7, #6]
 800b0c4:	4928      	ldr	r1, [pc, #160]	; (800b168 <config_motors+0x974>)
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	011b      	lsls	r3, r3, #4
 800b0ce:	440b      	add	r3, r1
 800b0d0:	33c8      	adds	r3, #200	; 0xc8
 800b0d2:	f04f 0200 	mov.w	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = L1_CENTER;
 800b0d8:	79ba      	ldrb	r2, [r7, #6]
 800b0da:	4923      	ldr	r1, [pc, #140]	; (800b168 <config_motors+0x974>)
 800b0dc:	4613      	mov	r3, r2
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	440b      	add	r3, r1
 800b0e6:	339c      	adds	r3, #156	; 0x9c
 800b0e8:	f240 5276 	movw	r2, #1398	; 0x576
 800b0ec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = L1_MAX_ANG;
 800b0ee:	79ba      	ldrb	r2, [r7, #6]
 800b0f0:	491d      	ldr	r1, [pc, #116]	; (800b168 <config_motors+0x974>)
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	011b      	lsls	r3, r3, #4
 800b0f6:	1a9b      	subs	r3, r3, r2
 800b0f8:	011b      	lsls	r3, r3, #4
 800b0fa:	440b      	add	r3, r1
 800b0fc:	33b8      	adds	r3, #184	; 0xb8
 800b0fe:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800b102:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = L1_MIN_ANG;
 800b104:	79ba      	ldrb	r2, [r7, #6]
 800b106:	4918      	ldr	r1, [pc, #96]	; (800b168 <config_motors+0x974>)
 800b108:	4613      	mov	r3, r2
 800b10a:	011b      	lsls	r3, r3, #4
 800b10c:	1a9b      	subs	r3, r3, r2
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	440b      	add	r3, r1
 800b112:	33b4      	adds	r3, #180	; 0xb4
 800b114:	4a20      	ldr	r2, [pc, #128]	; (800b198 <config_motors+0x9a4>)
 800b116:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b118:	79ba      	ldrb	r2, [r7, #6]
 800b11a:	4913      	ldr	r1, [pc, #76]	; (800b168 <config_motors+0x974>)
 800b11c:	4613      	mov	r3, r2
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	1a9b      	subs	r3, r3, r2
 800b122:	011b      	lsls	r3, r3, #4
 800b124:	440b      	add	r3, r1
 800b126:	33c4      	adds	r3, #196	; 0xc4
 800b128:	4a15      	ldr	r2, [pc, #84]	; (800b180 <config_motors+0x98c>)
 800b12a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b12c:	79ba      	ldrb	r2, [r7, #6]
 800b12e:	490e      	ldr	r1, [pc, #56]	; (800b168 <config_motors+0x974>)
 800b130:	4613      	mov	r3, r2
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	440b      	add	r3, r1
 800b13a:	33c0      	adds	r3, #192	; 0xc0
 800b13c:	4a11      	ldr	r2, [pc, #68]	; (800b184 <config_motors+0x990>)
 800b13e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 800b140:	79ba      	ldrb	r2, [r7, #6]
 800b142:	4909      	ldr	r1, [pc, #36]	; (800b168 <config_motors+0x974>)
 800b144:	4613      	mov	r3, r2
 800b146:	011b      	lsls	r3, r3, #4
 800b148:	1a9b      	subs	r3, r3, r2
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	440b      	add	r3, r1
 800b14e:	33d4      	adds	r3, #212	; 0xd4
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 800b156:	79ba      	ldrb	r2, [r7, #6]
 800b158:	4903      	ldr	r1, [pc, #12]	; (800b168 <config_motors+0x974>)
 800b15a:	4613      	mov	r3, r2
 800b15c:	011b      	lsls	r3, r3, #4
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	011b      	lsls	r3, r3, #4
 800b162:	440b      	add	r3, r1
 800b164:	3368      	adds	r3, #104	; 0x68
 800b166:	e019      	b.n	800b19c <config_motors+0x9a8>
 800b168:	200018a0 	.word	0x200018a0
 800b16c:	461c4000 	.word	0x461c4000
 800b170:	460ca000 	.word	0x460ca000
 800b174:	3b03126f 	.word	0x3b03126f
 800b178:	46756fdb 	.word	0x46756fdb
 800b17c:	c6756fdb 	.word	0xc6756fdb
 800b180:	40c90fdb 	.word	0x40c90fdb
 800b184:	c0c90fdb 	.word	0xc0c90fdb
 800b188:	42c80000 	.word	0x42c80000
 800b18c:	40e00000 	.word	0x40e00000
 800b190:	3ca3d70a 	.word	0x3ca3d70a
 800b194:	40400000 	.word	0x40400000
 800b198:	bfc00000 	.word	0xbfc00000
 800b19c:	4abd      	ldr	r2, [pc, #756]	; (800b494 <config_motors+0xca0>)
 800b19e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800b1a0:	79ba      	ldrb	r2, [r7, #6]
 800b1a2:	49bd      	ldr	r1, [pc, #756]	; (800b498 <config_motors+0xca4>)
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	011b      	lsls	r3, r3, #4
 800b1a8:	1a9b      	subs	r3, r3, r2
 800b1aa:	011b      	lsls	r3, r3, #4
 800b1ac:	440b      	add	r3, r1
 800b1ae:	336c      	adds	r3, #108	; 0x6c
 800b1b0:	f04f 0200 	mov.w	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 800b1b6:	79ba      	ldrb	r2, [r7, #6]
 800b1b8:	49b7      	ldr	r1, [pc, #732]	; (800b498 <config_motors+0xca4>)
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	011b      	lsls	r3, r3, #4
 800b1be:	1a9b      	subs	r3, r3, r2
 800b1c0:	011b      	lsls	r3, r3, #4
 800b1c2:	440b      	add	r3, r1
 800b1c4:	3370      	adds	r3, #112	; 0x70
 800b1c6:	f04f 0200 	mov.w	r2, #0
 800b1ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 800b1cc:	79ba      	ldrb	r2, [r7, #6]
 800b1ce:	49b2      	ldr	r1, [pc, #712]	; (800b498 <config_motors+0xca4>)
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	011b      	lsls	r3, r3, #4
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	011b      	lsls	r3, r3, #4
 800b1d8:	440b      	add	r3, r1
 800b1da:	3380      	adds	r3, #128	; 0x80
 800b1dc:	4aaf      	ldr	r2, [pc, #700]	; (800b49c <config_motors+0xca8>)
 800b1de:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 800b1e0:	79ba      	ldrb	r2, [r7, #6]
 800b1e2:	49ad      	ldr	r1, [pc, #692]	; (800b498 <config_motors+0xca4>)
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	011b      	lsls	r3, r3, #4
 800b1e8:	1a9b      	subs	r3, r3, r2
 800b1ea:	011b      	lsls	r3, r3, #4
 800b1ec:	440b      	add	r3, r1
 800b1ee:	3384      	adds	r3, #132	; 0x84
 800b1f0:	4aa8      	ldr	r2, [pc, #672]	; (800b494 <config_motors+0xca0>)
 800b1f2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 800b1f4:	79ba      	ldrb	r2, [r7, #6]
 800b1f6:	49a8      	ldr	r1, [pc, #672]	; (800b498 <config_motors+0xca4>)
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	1a9b      	subs	r3, r3, r2
 800b1fe:	011b      	lsls	r3, r3, #4
 800b200:	440b      	add	r3, r1
 800b202:	3338      	adds	r3, #56	; 0x38
 800b204:	4aa3      	ldr	r2, [pc, #652]	; (800b494 <config_motors+0xca0>)
 800b206:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 800b208:	79ba      	ldrb	r2, [r7, #6]
 800b20a:	49a3      	ldr	r1, [pc, #652]	; (800b498 <config_motors+0xca4>)
 800b20c:	4613      	mov	r3, r2
 800b20e:	011b      	lsls	r3, r3, #4
 800b210:	1a9b      	subs	r3, r3, r2
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	440b      	add	r3, r1
 800b216:	333c      	adds	r3, #60	; 0x3c
 800b218:	4aa1      	ldr	r2, [pc, #644]	; (800b4a0 <config_motors+0xcac>)
 800b21a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 800b21c:	79ba      	ldrb	r2, [r7, #6]
 800b21e:	499e      	ldr	r1, [pc, #632]	; (800b498 <config_motors+0xca4>)
 800b220:	4613      	mov	r3, r2
 800b222:	011b      	lsls	r3, r3, #4
 800b224:	1a9b      	subs	r3, r3, r2
 800b226:	011b      	lsls	r3, r3, #4
 800b228:	440b      	add	r3, r1
 800b22a:	3340      	adds	r3, #64	; 0x40
 800b22c:	f04f 0200 	mov.w	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 800b232:	79ba      	ldrb	r2, [r7, #6]
 800b234:	4998      	ldr	r1, [pc, #608]	; (800b498 <config_motors+0xca4>)
 800b236:	4613      	mov	r3, r2
 800b238:	011b      	lsls	r3, r3, #4
 800b23a:	1a9b      	subs	r3, r3, r2
 800b23c:	011b      	lsls	r3, r3, #4
 800b23e:	440b      	add	r3, r1
 800b240:	3350      	adds	r3, #80	; 0x50
 800b242:	4a98      	ldr	r2, [pc, #608]	; (800b4a4 <config_motors+0xcb0>)
 800b244:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 800b246:	79ba      	ldrb	r2, [r7, #6]
 800b248:	4993      	ldr	r1, [pc, #588]	; (800b498 <config_motors+0xca4>)
 800b24a:	4613      	mov	r3, r2
 800b24c:	011b      	lsls	r3, r3, #4
 800b24e:	1a9b      	subs	r3, r3, r2
 800b250:	011b      	lsls	r3, r3, #4
 800b252:	440b      	add	r3, r1
 800b254:	3354      	adds	r3, #84	; 0x54
 800b256:	4a94      	ldr	r2, [pc, #592]	; (800b4a8 <config_motors+0xcb4>)
 800b258:	601a      	str	r2, [r3, #0]
#endif

#ifdef L2_MOTOR_ID
	motor_id = L2_MOTOR_ID - 1;
 800b25a:	2306      	movs	r3, #6
 800b25c:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 800b25e:	79ba      	ldrb	r2, [r7, #6]
 800b260:	498d      	ldr	r1, [pc, #564]	; (800b498 <config_motors+0xca4>)
 800b262:	4613      	mov	r3, r2
 800b264:	011b      	lsls	r3, r3, #4
 800b266:	1a9b      	subs	r3, r3, r2
 800b268:	011b      	lsls	r3, r3, #4
 800b26a:	440b      	add	r3, r1
 800b26c:	3302      	adds	r3, #2
 800b26e:	2201      	movs	r2, #1
 800b270:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800b272:	79ba      	ldrb	r2, [r7, #6]
 800b274:	4613      	mov	r3, r2
 800b276:	011b      	lsls	r3, r3, #4
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	011b      	lsls	r3, r3, #4
 800b27c:	4a86      	ldr	r2, [pc, #536]	; (800b498 <config_motors+0xca4>)
 800b27e:	4413      	add	r3, r2
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fa51 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 800b286:	79ba      	ldrb	r2, [r7, #6]
 800b288:	4983      	ldr	r1, [pc, #524]	; (800b498 <config_motors+0xca4>)
 800b28a:	4613      	mov	r3, r2
 800b28c:	011b      	lsls	r3, r3, #4
 800b28e:	1a9b      	subs	r3, r3, r2
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	440b      	add	r3, r1
 800b294:	33c8      	adds	r3, #200	; 0xc8
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = L2_CENTER;
 800b29c:	79ba      	ldrb	r2, [r7, #6]
 800b29e:	497e      	ldr	r1, [pc, #504]	; (800b498 <config_motors+0xca4>)
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	011b      	lsls	r3, r3, #4
 800b2a8:	440b      	add	r3, r1
 800b2aa:	339c      	adds	r3, #156	; 0x9c
 800b2ac:	f241 023c 	movw	r2, #4156	; 0x103c
 800b2b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = L2_MAX_ANG;
 800b2b2:	79ba      	ldrb	r2, [r7, #6]
 800b2b4:	4978      	ldr	r1, [pc, #480]	; (800b498 <config_motors+0xca4>)
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	1a9b      	subs	r3, r3, r2
 800b2bc:	011b      	lsls	r3, r3, #4
 800b2be:	440b      	add	r3, r1
 800b2c0:	33b8      	adds	r3, #184	; 0xb8
 800b2c2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800b2c6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = L2_MIN_ANG;
 800b2c8:	79ba      	ldrb	r2, [r7, #6]
 800b2ca:	4973      	ldr	r1, [pc, #460]	; (800b498 <config_motors+0xca4>)
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	1a9b      	subs	r3, r3, r2
 800b2d2:	011b      	lsls	r3, r3, #4
 800b2d4:	440b      	add	r3, r1
 800b2d6:	33b4      	adds	r3, #180	; 0xb4
 800b2d8:	4a74      	ldr	r2, [pc, #464]	; (800b4ac <config_motors+0xcb8>)
 800b2da:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b2dc:	79ba      	ldrb	r2, [r7, #6]
 800b2de:	496e      	ldr	r1, [pc, #440]	; (800b498 <config_motors+0xca4>)
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	011b      	lsls	r3, r3, #4
 800b2e4:	1a9b      	subs	r3, r3, r2
 800b2e6:	011b      	lsls	r3, r3, #4
 800b2e8:	440b      	add	r3, r1
 800b2ea:	33c4      	adds	r3, #196	; 0xc4
 800b2ec:	4a70      	ldr	r2, [pc, #448]	; (800b4b0 <config_motors+0xcbc>)
 800b2ee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b2f0:	79ba      	ldrb	r2, [r7, #6]
 800b2f2:	4969      	ldr	r1, [pc, #420]	; (800b498 <config_motors+0xca4>)
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	011b      	lsls	r3, r3, #4
 800b2f8:	1a9b      	subs	r3, r3, r2
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	440b      	add	r3, r1
 800b2fe:	33c0      	adds	r3, #192	; 0xc0
 800b300:	4a6c      	ldr	r2, [pc, #432]	; (800b4b4 <config_motors+0xcc0>)
 800b302:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 800b304:	79ba      	ldrb	r2, [r7, #6]
 800b306:	4964      	ldr	r1, [pc, #400]	; (800b498 <config_motors+0xca4>)
 800b308:	4613      	mov	r3, r2
 800b30a:	011b      	lsls	r3, r3, #4
 800b30c:	1a9b      	subs	r3, r3, r2
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	440b      	add	r3, r1
 800b312:	33d4      	adds	r3, #212	; 0xd4
 800b314:	f04f 0200 	mov.w	r2, #0
 800b318:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 800b31a:	79ba      	ldrb	r2, [r7, #6]
 800b31c:	495e      	ldr	r1, [pc, #376]	; (800b498 <config_motors+0xca4>)
 800b31e:	4613      	mov	r3, r2
 800b320:	011b      	lsls	r3, r3, #4
 800b322:	1a9b      	subs	r3, r3, r2
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	440b      	add	r3, r1
 800b328:	3368      	adds	r3, #104	; 0x68
 800b32a:	4a5a      	ldr	r2, [pc, #360]	; (800b494 <config_motors+0xca0>)
 800b32c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800b32e:	79ba      	ldrb	r2, [r7, #6]
 800b330:	4959      	ldr	r1, [pc, #356]	; (800b498 <config_motors+0xca4>)
 800b332:	4613      	mov	r3, r2
 800b334:	011b      	lsls	r3, r3, #4
 800b336:	1a9b      	subs	r3, r3, r2
 800b338:	011b      	lsls	r3, r3, #4
 800b33a:	440b      	add	r3, r1
 800b33c:	336c      	adds	r3, #108	; 0x6c
 800b33e:	f04f 0200 	mov.w	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 800b344:	79ba      	ldrb	r2, [r7, #6]
 800b346:	4954      	ldr	r1, [pc, #336]	; (800b498 <config_motors+0xca4>)
 800b348:	4613      	mov	r3, r2
 800b34a:	011b      	lsls	r3, r3, #4
 800b34c:	1a9b      	subs	r3, r3, r2
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	440b      	add	r3, r1
 800b352:	3370      	adds	r3, #112	; 0x70
 800b354:	f04f 0200 	mov.w	r2, #0
 800b358:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 800b35a:	79ba      	ldrb	r2, [r7, #6]
 800b35c:	494e      	ldr	r1, [pc, #312]	; (800b498 <config_motors+0xca4>)
 800b35e:	4613      	mov	r3, r2
 800b360:	011b      	lsls	r3, r3, #4
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	011b      	lsls	r3, r3, #4
 800b366:	440b      	add	r3, r1
 800b368:	3380      	adds	r3, #128	; 0x80
 800b36a:	4a4c      	ldr	r2, [pc, #304]	; (800b49c <config_motors+0xca8>)
 800b36c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 800b36e:	79ba      	ldrb	r2, [r7, #6]
 800b370:	4949      	ldr	r1, [pc, #292]	; (800b498 <config_motors+0xca4>)
 800b372:	4613      	mov	r3, r2
 800b374:	011b      	lsls	r3, r3, #4
 800b376:	1a9b      	subs	r3, r3, r2
 800b378:	011b      	lsls	r3, r3, #4
 800b37a:	440b      	add	r3, r1
 800b37c:	3384      	adds	r3, #132	; 0x84
 800b37e:	4a45      	ldr	r2, [pc, #276]	; (800b494 <config_motors+0xca0>)
 800b380:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 800b382:	79ba      	ldrb	r2, [r7, #6]
 800b384:	4944      	ldr	r1, [pc, #272]	; (800b498 <config_motors+0xca4>)
 800b386:	4613      	mov	r3, r2
 800b388:	011b      	lsls	r3, r3, #4
 800b38a:	1a9b      	subs	r3, r3, r2
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	440b      	add	r3, r1
 800b390:	3338      	adds	r3, #56	; 0x38
 800b392:	4a40      	ldr	r2, [pc, #256]	; (800b494 <config_motors+0xca0>)
 800b394:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 800b396:	79ba      	ldrb	r2, [r7, #6]
 800b398:	493f      	ldr	r1, [pc, #252]	; (800b498 <config_motors+0xca4>)
 800b39a:	4613      	mov	r3, r2
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	1a9b      	subs	r3, r3, r2
 800b3a0:	011b      	lsls	r3, r3, #4
 800b3a2:	440b      	add	r3, r1
 800b3a4:	333c      	adds	r3, #60	; 0x3c
 800b3a6:	4a3e      	ldr	r2, [pc, #248]	; (800b4a0 <config_motors+0xcac>)
 800b3a8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 800b3aa:	79ba      	ldrb	r2, [r7, #6]
 800b3ac:	493a      	ldr	r1, [pc, #232]	; (800b498 <config_motors+0xca4>)
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	011b      	lsls	r3, r3, #4
 800b3b2:	1a9b      	subs	r3, r3, r2
 800b3b4:	011b      	lsls	r3, r3, #4
 800b3b6:	440b      	add	r3, r1
 800b3b8:	3340      	adds	r3, #64	; 0x40
 800b3ba:	f04f 0200 	mov.w	r2, #0
 800b3be:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 800b3c0:	79ba      	ldrb	r2, [r7, #6]
 800b3c2:	4935      	ldr	r1, [pc, #212]	; (800b498 <config_motors+0xca4>)
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	011b      	lsls	r3, r3, #4
 800b3c8:	1a9b      	subs	r3, r3, r2
 800b3ca:	011b      	lsls	r3, r3, #4
 800b3cc:	440b      	add	r3, r1
 800b3ce:	3350      	adds	r3, #80	; 0x50
 800b3d0:	4a34      	ldr	r2, [pc, #208]	; (800b4a4 <config_motors+0xcb0>)
 800b3d2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 800b3d4:	79ba      	ldrb	r2, [r7, #6]
 800b3d6:	4930      	ldr	r1, [pc, #192]	; (800b498 <config_motors+0xca4>)
 800b3d8:	4613      	mov	r3, r2
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	1a9b      	subs	r3, r3, r2
 800b3de:	011b      	lsls	r3, r3, #4
 800b3e0:	440b      	add	r3, r1
 800b3e2:	3354      	adds	r3, #84	; 0x54
 800b3e4:	4a30      	ldr	r2, [pc, #192]	; (800b4a8 <config_motors+0xcb4>)
 800b3e6:	601a      	str	r2, [r3, #0]
#endif

#ifdef R1_MOTOR_ID
	motor_id = R1_MOTOR_ID - 1;
 800b3e8:	2304      	movs	r3, #4
 800b3ea:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 800b3ec:	79ba      	ldrb	r2, [r7, #6]
 800b3ee:	492a      	ldr	r1, [pc, #168]	; (800b498 <config_motors+0xca4>)
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	011b      	lsls	r3, r3, #4
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	011b      	lsls	r3, r3, #4
 800b3f8:	440b      	add	r3, r1
 800b3fa:	3302      	adds	r3, #2
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800b400:	79ba      	ldrb	r2, [r7, #6]
 800b402:	4613      	mov	r3, r2
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	1a9b      	subs	r3, r3, r2
 800b408:	011b      	lsls	r3, r3, #4
 800b40a:	4a23      	ldr	r2, [pc, #140]	; (800b498 <config_motors+0xca4>)
 800b40c:	4413      	add	r3, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff f98a 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;	//1;
 800b414:	79ba      	ldrb	r2, [r7, #6]
 800b416:	4920      	ldr	r1, [pc, #128]	; (800b498 <config_motors+0xca4>)
 800b418:	4613      	mov	r3, r2
 800b41a:	011b      	lsls	r3, r3, #4
 800b41c:	1a9b      	subs	r3, r3, r2
 800b41e:	011b      	lsls	r3, r3, #4
 800b420:	440b      	add	r3, r1
 800b422:	33c8      	adds	r3, #200	; 0xc8
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = R1_CENTER;
 800b42a:	79ba      	ldrb	r2, [r7, #6]
 800b42c:	491a      	ldr	r1, [pc, #104]	; (800b498 <config_motors+0xca4>)
 800b42e:	4613      	mov	r3, r2
 800b430:	011b      	lsls	r3, r3, #4
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	011b      	lsls	r3, r3, #4
 800b436:	440b      	add	r3, r1
 800b438:	339c      	adds	r3, #156	; 0x9c
 800b43a:	2200      	movs	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = R1_MAX_ANG;
 800b43e:	79ba      	ldrb	r2, [r7, #6]
 800b440:	4915      	ldr	r1, [pc, #84]	; (800b498 <config_motors+0xca4>)
 800b442:	4613      	mov	r3, r2
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	1a9b      	subs	r3, r3, r2
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	440b      	add	r3, r1
 800b44c:	33b8      	adds	r3, #184	; 0xb8
 800b44e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800b452:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = R1_MIN_ANG;
 800b454:	79ba      	ldrb	r2, [r7, #6]
 800b456:	4910      	ldr	r1, [pc, #64]	; (800b498 <config_motors+0xca4>)
 800b458:	4613      	mov	r3, r2
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	1a9b      	subs	r3, r3, r2
 800b45e:	011b      	lsls	r3, r3, #4
 800b460:	440b      	add	r3, r1
 800b462:	33b4      	adds	r3, #180	; 0xb4
 800b464:	4a11      	ldr	r2, [pc, #68]	; (800b4ac <config_motors+0xcb8>)
 800b466:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b468:	79ba      	ldrb	r2, [r7, #6]
 800b46a:	490b      	ldr	r1, [pc, #44]	; (800b498 <config_motors+0xca4>)
 800b46c:	4613      	mov	r3, r2
 800b46e:	011b      	lsls	r3, r3, #4
 800b470:	1a9b      	subs	r3, r3, r2
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	440b      	add	r3, r1
 800b476:	33c4      	adds	r3, #196	; 0xc4
 800b478:	4a0d      	ldr	r2, [pc, #52]	; (800b4b0 <config_motors+0xcbc>)
 800b47a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI; //angle before it overflows
 800b47c:	79ba      	ldrb	r2, [r7, #6]
 800b47e:	4906      	ldr	r1, [pc, #24]	; (800b498 <config_motors+0xca4>)
 800b480:	4613      	mov	r3, r2
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	011b      	lsls	r3, r3, #4
 800b488:	440b      	add	r3, r1
 800b48a:	33c0      	adds	r3, #192	; 0xc0
 800b48c:	4a09      	ldr	r2, [pc, #36]	; (800b4b4 <config_motors+0xcc0>)
 800b48e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 800b490:	79ba      	ldrb	r2, [r7, #6]
 800b492:	e011      	b.n	800b4b8 <config_motors+0xcc4>
 800b494:	43480000 	.word	0x43480000
 800b498:	200018a0 	.word	0x200018a0
 800b49c:	447a0000 	.word	0x447a0000
 800b4a0:	3dcccccd 	.word	0x3dcccccd
 800b4a4:	461c4000 	.word	0x461c4000
 800b4a8:	469c4000 	.word	0x469c4000
 800b4ac:	bfc00000 	.word	0xbfc00000
 800b4b0:	40c90fdb 	.word	0x40c90fdb
 800b4b4:	c0c90fdb 	.word	0xc0c90fdb
 800b4b8:	499d      	ldr	r1, [pc, #628]	; (800b730 <config_motors+0xf3c>)
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	011b      	lsls	r3, r3, #4
 800b4be:	1a9b      	subs	r3, r3, r2
 800b4c0:	011b      	lsls	r3, r3, #4
 800b4c2:	440b      	add	r3, r1
 800b4c4:	33d4      	adds	r3, #212	; 0xd4
 800b4c6:	f04f 0200 	mov.w	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 800b4cc:	79ba      	ldrb	r2, [r7, #6]
 800b4ce:	4998      	ldr	r1, [pc, #608]	; (800b730 <config_motors+0xf3c>)
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	011b      	lsls	r3, r3, #4
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	011b      	lsls	r3, r3, #4
 800b4d8:	440b      	add	r3, r1
 800b4da:	3368      	adds	r3, #104	; 0x68
 800b4dc:	4a95      	ldr	r2, [pc, #596]	; (800b734 <config_motors+0xf40>)
 800b4de:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 800b4e0:	79ba      	ldrb	r2, [r7, #6]
 800b4e2:	4993      	ldr	r1, [pc, #588]	; (800b730 <config_motors+0xf3c>)
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	1a9b      	subs	r3, r3, r2
 800b4ea:	011b      	lsls	r3, r3, #4
 800b4ec:	440b      	add	r3, r1
 800b4ee:	336c      	adds	r3, #108	; 0x6c
 800b4f0:	f04f 0200 	mov.w	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 800b4f6:	79ba      	ldrb	r2, [r7, #6]
 800b4f8:	498d      	ldr	r1, [pc, #564]	; (800b730 <config_motors+0xf3c>)
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	1a9b      	subs	r3, r3, r2
 800b500:	011b      	lsls	r3, r3, #4
 800b502:	440b      	add	r3, r1
 800b504:	3370      	adds	r3, #112	; 0x70
 800b506:	f04f 0200 	mov.w	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 800b50c:	79ba      	ldrb	r2, [r7, #6]
 800b50e:	4988      	ldr	r1, [pc, #544]	; (800b730 <config_motors+0xf3c>)
 800b510:	4613      	mov	r3, r2
 800b512:	011b      	lsls	r3, r3, #4
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	011b      	lsls	r3, r3, #4
 800b518:	440b      	add	r3, r1
 800b51a:	3380      	adds	r3, #128	; 0x80
 800b51c:	4a86      	ldr	r2, [pc, #536]	; (800b738 <config_motors+0xf44>)
 800b51e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 800b520:	79ba      	ldrb	r2, [r7, #6]
 800b522:	4983      	ldr	r1, [pc, #524]	; (800b730 <config_motors+0xf3c>)
 800b524:	4613      	mov	r3, r2
 800b526:	011b      	lsls	r3, r3, #4
 800b528:	1a9b      	subs	r3, r3, r2
 800b52a:	011b      	lsls	r3, r3, #4
 800b52c:	440b      	add	r3, r1
 800b52e:	3384      	adds	r3, #132	; 0x84
 800b530:	4a82      	ldr	r2, [pc, #520]	; (800b73c <config_motors+0xf48>)
 800b532:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 800b534:	79ba      	ldrb	r2, [r7, #6]
 800b536:	497e      	ldr	r1, [pc, #504]	; (800b730 <config_motors+0xf3c>)
 800b538:	4613      	mov	r3, r2
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	1a9b      	subs	r3, r3, r2
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	440b      	add	r3, r1
 800b542:	3338      	adds	r3, #56	; 0x38
 800b544:	4a7c      	ldr	r2, [pc, #496]	; (800b738 <config_motors+0xf44>)
 800b546:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 800b548:	79ba      	ldrb	r2, [r7, #6]
 800b54a:	4979      	ldr	r1, [pc, #484]	; (800b730 <config_motors+0xf3c>)
 800b54c:	4613      	mov	r3, r2
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	1a9b      	subs	r3, r3, r2
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	440b      	add	r3, r1
 800b556:	333c      	adds	r3, #60	; 0x3c
 800b558:	4a79      	ldr	r2, [pc, #484]	; (800b740 <config_motors+0xf4c>)
 800b55a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 800b55c:	79ba      	ldrb	r2, [r7, #6]
 800b55e:	4974      	ldr	r1, [pc, #464]	; (800b730 <config_motors+0xf3c>)
 800b560:	4613      	mov	r3, r2
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	011b      	lsls	r3, r3, #4
 800b568:	440b      	add	r3, r1
 800b56a:	3340      	adds	r3, #64	; 0x40
 800b56c:	4a72      	ldr	r2, [pc, #456]	; (800b738 <config_motors+0xf44>)
 800b56e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 800b570:	79ba      	ldrb	r2, [r7, #6]
 800b572:	496f      	ldr	r1, [pc, #444]	; (800b730 <config_motors+0xf3c>)
 800b574:	4613      	mov	r3, r2
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	1a9b      	subs	r3, r3, r2
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	440b      	add	r3, r1
 800b57e:	3350      	adds	r3, #80	; 0x50
 800b580:	4a70      	ldr	r2, [pc, #448]	; (800b744 <config_motors+0xf50>)
 800b582:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 800b584:	79ba      	ldrb	r2, [r7, #6]
 800b586:	496a      	ldr	r1, [pc, #424]	; (800b730 <config_motors+0xf3c>)
 800b588:	4613      	mov	r3, r2
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	440b      	add	r3, r1
 800b592:	3354      	adds	r3, #84	; 0x54
 800b594:	4a6c      	ldr	r2, [pc, #432]	; (800b748 <config_motors+0xf54>)
 800b596:	601a      	str	r2, [r3, #0]
#endif



#ifdef R2_MOTOR_ID
	motor_id = R2_MOTOR_ID - 1;
 800b598:	2305      	movs	r3, #5
 800b59a:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 800b59c:	79ba      	ldrb	r2, [r7, #6]
 800b59e:	4964      	ldr	r1, [pc, #400]	; (800b730 <config_motors+0xf3c>)
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	011b      	lsls	r3, r3, #4
 800b5a4:	1a9b      	subs	r3, r3, r2
 800b5a6:	011b      	lsls	r3, r3, #4
 800b5a8:	440b      	add	r3, r1
 800b5aa:	3302      	adds	r3, #2
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800b5b0:	79ba      	ldrb	r2, [r7, #6]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	011b      	lsls	r3, r3, #4
 800b5b6:	1a9b      	subs	r3, r3, r2
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	4a5d      	ldr	r2, [pc, #372]	; (800b730 <config_motors+0xf3c>)
 800b5bc:	4413      	add	r3, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7ff f8b2 	bl	800a728 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 800b5c4:	79ba      	ldrb	r2, [r7, #6]
 800b5c6:	495a      	ldr	r1, [pc, #360]	; (800b730 <config_motors+0xf3c>)
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	011b      	lsls	r3, r3, #4
 800b5cc:	1a9b      	subs	r3, r3, r2
 800b5ce:	011b      	lsls	r3, r3, #4
 800b5d0:	440b      	add	r3, r1
 800b5d2:	33c8      	adds	r3, #200	; 0xc8
 800b5d4:	f04f 0200 	mov.w	r2, #0
 800b5d8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = R2_CENTER;
 800b5da:	79ba      	ldrb	r2, [r7, #6]
 800b5dc:	4954      	ldr	r1, [pc, #336]	; (800b730 <config_motors+0xf3c>)
 800b5de:	4613      	mov	r3, r2
 800b5e0:	011b      	lsls	r3, r3, #4
 800b5e2:	1a9b      	subs	r3, r3, r2
 800b5e4:	011b      	lsls	r3, r3, #4
 800b5e6:	440b      	add	r3, r1
 800b5e8:	339c      	adds	r3, #156	; 0x9c
 800b5ea:	f240 525a 	movw	r2, #1370	; 0x55a
 800b5ee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = R2_MAX_ANG;
 800b5f0:	79ba      	ldrb	r2, [r7, #6]
 800b5f2:	494f      	ldr	r1, [pc, #316]	; (800b730 <config_motors+0xf3c>)
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	011b      	lsls	r3, r3, #4
 800b5f8:	1a9b      	subs	r3, r3, r2
 800b5fa:	011b      	lsls	r3, r3, #4
 800b5fc:	440b      	add	r3, r1
 800b5fe:	33b8      	adds	r3, #184	; 0xb8
 800b600:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800b604:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = R2_MIN_ANG;
 800b606:	79ba      	ldrb	r2, [r7, #6]
 800b608:	4949      	ldr	r1, [pc, #292]	; (800b730 <config_motors+0xf3c>)
 800b60a:	4613      	mov	r3, r2
 800b60c:	011b      	lsls	r3, r3, #4
 800b60e:	1a9b      	subs	r3, r3, r2
 800b610:	011b      	lsls	r3, r3, #4
 800b612:	440b      	add	r3, r1
 800b614:	33b4      	adds	r3, #180	; 0xb4
 800b616:	4a4d      	ldr	r2, [pc, #308]	; (800b74c <config_motors+0xf58>)
 800b618:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b61a:	79ba      	ldrb	r2, [r7, #6]
 800b61c:	4944      	ldr	r1, [pc, #272]	; (800b730 <config_motors+0xf3c>)
 800b61e:	4613      	mov	r3, r2
 800b620:	011b      	lsls	r3, r3, #4
 800b622:	1a9b      	subs	r3, r3, r2
 800b624:	011b      	lsls	r3, r3, #4
 800b626:	440b      	add	r3, r1
 800b628:	33c4      	adds	r3, #196	; 0xc4
 800b62a:	4a49      	ldr	r2, [pc, #292]	; (800b750 <config_motors+0xf5c>)
 800b62c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b62e:	79ba      	ldrb	r2, [r7, #6]
 800b630:	493f      	ldr	r1, [pc, #252]	; (800b730 <config_motors+0xf3c>)
 800b632:	4613      	mov	r3, r2
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	440b      	add	r3, r1
 800b63c:	33c0      	adds	r3, #192	; 0xc0
 800b63e:	4a45      	ldr	r2, [pc, #276]	; (800b754 <config_motors+0xf60>)
 800b640:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 800b642:	79ba      	ldrb	r2, [r7, #6]
 800b644:	493a      	ldr	r1, [pc, #232]	; (800b730 <config_motors+0xf3c>)
 800b646:	4613      	mov	r3, r2
 800b648:	011b      	lsls	r3, r3, #4
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	011b      	lsls	r3, r3, #4
 800b64e:	440b      	add	r3, r1
 800b650:	33d4      	adds	r3, #212	; 0xd4
 800b652:	f04f 0200 	mov.w	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 800b658:	79ba      	ldrb	r2, [r7, #6]
 800b65a:	4935      	ldr	r1, [pc, #212]	; (800b730 <config_motors+0xf3c>)
 800b65c:	4613      	mov	r3, r2
 800b65e:	011b      	lsls	r3, r3, #4
 800b660:	1a9b      	subs	r3, r3, r2
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	440b      	add	r3, r1
 800b666:	3368      	adds	r3, #104	; 0x68
 800b668:	4a32      	ldr	r2, [pc, #200]	; (800b734 <config_motors+0xf40>)
 800b66a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800b66c:	79ba      	ldrb	r2, [r7, #6]
 800b66e:	4930      	ldr	r1, [pc, #192]	; (800b730 <config_motors+0xf3c>)
 800b670:	4613      	mov	r3, r2
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	440b      	add	r3, r1
 800b67a:	336c      	adds	r3, #108	; 0x6c
 800b67c:	f04f 0200 	mov.w	r2, #0
 800b680:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 800b682:	79ba      	ldrb	r2, [r7, #6]
 800b684:	492a      	ldr	r1, [pc, #168]	; (800b730 <config_motors+0xf3c>)
 800b686:	4613      	mov	r3, r2
 800b688:	011b      	lsls	r3, r3, #4
 800b68a:	1a9b      	subs	r3, r3, r2
 800b68c:	011b      	lsls	r3, r3, #4
 800b68e:	440b      	add	r3, r1
 800b690:	3370      	adds	r3, #112	; 0x70
 800b692:	f04f 0200 	mov.w	r2, #0
 800b696:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 800b698:	79ba      	ldrb	r2, [r7, #6]
 800b69a:	4925      	ldr	r1, [pc, #148]	; (800b730 <config_motors+0xf3c>)
 800b69c:	4613      	mov	r3, r2
 800b69e:	011b      	lsls	r3, r3, #4
 800b6a0:	1a9b      	subs	r3, r3, r2
 800b6a2:	011b      	lsls	r3, r3, #4
 800b6a4:	440b      	add	r3, r1
 800b6a6:	3380      	adds	r3, #128	; 0x80
 800b6a8:	4a2b      	ldr	r2, [pc, #172]	; (800b758 <config_motors+0xf64>)
 800b6aa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 800b6ac:	79ba      	ldrb	r2, [r7, #6]
 800b6ae:	4920      	ldr	r1, [pc, #128]	; (800b730 <config_motors+0xf3c>)
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	011b      	lsls	r3, r3, #4
 800b6b4:	1a9b      	subs	r3, r3, r2
 800b6b6:	011b      	lsls	r3, r3, #4
 800b6b8:	440b      	add	r3, r1
 800b6ba:	3384      	adds	r3, #132	; 0x84
 800b6bc:	4a1d      	ldr	r2, [pc, #116]	; (800b734 <config_motors+0xf40>)
 800b6be:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 800b6c0:	79ba      	ldrb	r2, [r7, #6]
 800b6c2:	491b      	ldr	r1, [pc, #108]	; (800b730 <config_motors+0xf3c>)
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	1a9b      	subs	r3, r3, r2
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	440b      	add	r3, r1
 800b6ce:	3338      	adds	r3, #56	; 0x38
 800b6d0:	4a18      	ldr	r2, [pc, #96]	; (800b734 <config_motors+0xf40>)
 800b6d2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 800b6d4:	79ba      	ldrb	r2, [r7, #6]
 800b6d6:	4916      	ldr	r1, [pc, #88]	; (800b730 <config_motors+0xf3c>)
 800b6d8:	4613      	mov	r3, r2
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	440b      	add	r3, r1
 800b6e2:	333c      	adds	r3, #60	; 0x3c
 800b6e4:	4a1d      	ldr	r2, [pc, #116]	; (800b75c <config_motors+0xf68>)
 800b6e6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 800b6e8:	79ba      	ldrb	r2, [r7, #6]
 800b6ea:	4911      	ldr	r1, [pc, #68]	; (800b730 <config_motors+0xf3c>)
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	011b      	lsls	r3, r3, #4
 800b6f0:	1a9b      	subs	r3, r3, r2
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	440b      	add	r3, r1
 800b6f6:	3340      	adds	r3, #64	; 0x40
 800b6f8:	f04f 0200 	mov.w	r2, #0
 800b6fc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 800b6fe:	79ba      	ldrb	r2, [r7, #6]
 800b700:	490b      	ldr	r1, [pc, #44]	; (800b730 <config_motors+0xf3c>)
 800b702:	4613      	mov	r3, r2
 800b704:	011b      	lsls	r3, r3, #4
 800b706:	1a9b      	subs	r3, r3, r2
 800b708:	011b      	lsls	r3, r3, #4
 800b70a:	440b      	add	r3, r1
 800b70c:	3350      	adds	r3, #80	; 0x50
 800b70e:	4a14      	ldr	r2, [pc, #80]	; (800b760 <config_motors+0xf6c>)
 800b710:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 800b712:	79ba      	ldrb	r2, [r7, #6]
 800b714:	4906      	ldr	r1, [pc, #24]	; (800b730 <config_motors+0xf3c>)
 800b716:	4613      	mov	r3, r2
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	1a9b      	subs	r3, r3, r2
 800b71c:	011b      	lsls	r3, r3, #4
 800b71e:	440b      	add	r3, r1
 800b720:	3354      	adds	r3, #84	; 0x54
 800b722:	4a09      	ldr	r2, [pc, #36]	; (800b748 <config_motors+0xf54>)
 800b724:	601a      	str	r2, [r3, #0]
#endif

}
 800b726:	bf00      	nop
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	200018a0 	.word	0x200018a0
 800b734:	43480000 	.word	0x43480000
 800b738:	42c80000 	.word	0x42c80000
 800b73c:	43c80000 	.word	0x43c80000
 800b740:	3ba3d70a 	.word	0x3ba3d70a
 800b744:	459c4000 	.word	0x459c4000
 800b748:	469c4000 	.word	0x469c4000
 800b74c:	bfc00000 	.word	0xbfc00000
 800b750:	40c90fdb 	.word	0x40c90fdb
 800b754:	c0c90fdb 	.word	0xc0c90fdb
 800b758:	447a0000 	.word	0x447a0000
 800b75c:	3dcccccd 	.word	0x3dcccccd
 800b760:	461c4000 	.word	0x461c4000

0800b764 <bz_buzzer>:
void bz_buzzer(uint8_t high, uint8_t low) {
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	460a      	mov	r2, r1
 800b76e:	71fb      	strb	r3, [r7, #7]
 800b770:	4613      	mov	r3, r2
 800b772:	71bb      	strb	r3, [r7, #6]
	int8_t temp_msg = bz_debug_high;
 800b774:	2309      	movs	r3, #9
 800b776:	737b      	strb	r3, [r7, #13]
	for (int8_t i = 0; i < high; i++) {
 800b778:	2300      	movs	r3, #0
 800b77a:	73fb      	strb	r3, [r7, #15]
 800b77c:	e00d      	b.n	800b79a <bz_buzzer+0x36>
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800b77e:	4b1c      	ldr	r3, [pc, #112]	; (800b7f0 <bz_buzzer+0x8c>)
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f107 010d 	add.w	r1, r7, #13
 800b786:	2300      	movs	r3, #0
 800b788:	2200      	movs	r2, #0
 800b78a:	f00f fad5 	bl	801ad38 <xQueueGenericSend>
	for (int8_t i = 0; i < high; i++) {
 800b78e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	3301      	adds	r3, #1
 800b796:	b2db      	uxtb	r3, r3
 800b798:	73fb      	strb	r3, [r7, #15]
 800b79a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b79e:	79fb      	ldrb	r3, [r7, #7]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	dbec      	blt.n	800b77e <bz_buzzer+0x1a>
	}
	temp_msg = bz_debug_low;
 800b7a4:	2308      	movs	r3, #8
 800b7a6:	737b      	strb	r3, [r7, #13]
	for (int8_t i = 0; i < low; i++) {
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73bb      	strb	r3, [r7, #14]
 800b7ac:	e00d      	b.n	800b7ca <bz_buzzer+0x66>
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800b7ae:	4b10      	ldr	r3, [pc, #64]	; (800b7f0 <bz_buzzer+0x8c>)
 800b7b0:	6818      	ldr	r0, [r3, #0]
 800b7b2:	f107 010d 	add.w	r1, r7, #13
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f00f fabd 	bl	801ad38 <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 800b7be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	73bb      	strb	r3, [r7, #14]
 800b7ca:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800b7ce:	79bb      	ldrb	r3, [r7, #6]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	dbec      	blt.n	800b7ae <bz_buzzer+0x4a>
	}
	temp_msg = bz_debug_rest;
 800b7d4:	230a      	movs	r3, #10
 800b7d6:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <bz_buzzer+0x8c>)
 800b7da:	6818      	ldr	r0, [r3, #0]
 800b7dc:	f107 010d 	add.w	r1, r7, #13
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f00f faa8 	bl	801ad38 <xQueueGenericSend>
}
 800b7e8:	bf00      	nop
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	200004d8 	.word	0x200004d8

0800b7f4 <check_motors>:

uint16_t check_motors() {
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 800b7fe:	f7f6 fd37 	bl	8002270 <get_microseconds>
 800b802:	6038      	str	r0, [r7, #0]
	if (curr_time - can_motors[FR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b804:	4b3b      	ldr	r3, [pc, #236]	; (800b8f4 <check_motors+0x100>)
 800b806:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b812:	d903      	bls.n	800b81c <check_motors+0x28>
		error |= 1 << (0);
 800b814:	88fb      	ldrh	r3, [r7, #6]
 800b816:	f043 0301 	orr.w	r3, r3, #1
 800b81a:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[FL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b81c:	4b35      	ldr	r3, [pc, #212]	; (800b8f4 <check_motors+0x100>)
 800b81e:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b82a:	d903      	bls.n	800b834 <check_motors+0x40>
		error |= 1 << (1);
 800b82c:	88fb      	ldrh	r3, [r7, #6]
 800b82e:	f043 0302 	orr.w	r3, r3, #2
 800b832:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b834:	4b2f      	ldr	r3, [pc, #188]	; (800b8f4 <check_motors+0x100>)
 800b836:	f8d3 3e04 	ldr.w	r3, [r3, #3588]	; 0xe04
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b842:	d903      	bls.n	800b84c <check_motors+0x58>
		error |= 1 << (2);
 800b844:	88fb      	ldrh	r3, [r7, #6]
 800b846:	f043 0304 	orr.w	r3, r3, #4
 800b84a:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b84c:	4b29      	ldr	r3, [pc, #164]	; (800b8f4 <check_motors+0x100>)
 800b84e:	f8d3 3ef4 	ldr.w	r3, [r3, #3828]	; 0xef4
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b85a:	d903      	bls.n	800b864 <check_motors+0x70>
		error |= 1 << (3);
 800b85c:	88fb      	ldrh	r3, [r7, #6]
 800b85e:	f043 0308 	orr.w	r3, r3, #8
 800b862:	80fb      	strh	r3, [r7, #6]
	}

	if (curr_time - can_motors[LFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b864:	4b23      	ldr	r3, [pc, #140]	; (800b8f4 <check_motors+0x100>)
 800b866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b86a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b876:	d903      	bls.n	800b880 <check_motors+0x8c>
		error |= 1 << (4);
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	f043 0310 	orr.w	r3, r3, #16
 800b87e:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[RFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b880:	4b1c      	ldr	r3, [pc, #112]	; (800b8f4 <check_motors+0x100>)
 800b882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b886:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b892:	d903      	bls.n	800b89c <check_motors+0xa8>
		error |= 1 << (5);
 800b894:	88fb      	ldrh	r3, [r7, #6]
 800b896:	f043 0320 	orr.w	r3, r3, #32
 800b89a:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[FEEDER_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b89c:	4b15      	ldr	r3, [pc, #84]	; (800b8f4 <check_motors+0x100>)
 800b89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8ae:	d903      	bls.n	800b8b8 <check_motors+0xc4>
		error |= 1 << 6;
 800b8b0:	88fb      	ldrh	r3, [r7, #6]
 800b8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b6:	80fb      	strh	r3, [r7, #6]

	}

	if (curr_time - can_motors[L1_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <check_motors+0x100>)
 800b8ba:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8c6:	d903      	bls.n	800b8d0 <check_motors+0xdc>
		error |= 1 << 7;
 800b8c8:	88fb      	ldrh	r3, [r7, #6]
 800b8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ce:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[R1_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800b8d0:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <check_motors+0x100>)
 800b8d2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8de:	d903      	bls.n	800b8e8 <check_motors+0xf4>
		error |= 1 << 8;
 800b8e0:	88fb      	ldrh	r3, [r7, #6]
 800b8e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8e6:	80fb      	strh	r3, [r7, #6]

	}
	return error;
 800b8e8:	88fb      	ldrh	r3, [r7, #6]

}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	200018a0 	.word	0x200018a0

0800b8f8 <motor_calib_task>:

void motor_calib_task(void *argument) {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 800b900:	2200      	movs	r2, #0
 800b902:	2100      	movs	r1, #0
 800b904:	481d      	ldr	r0, [pc, #116]	; (800b97c <motor_calib_task+0x84>)
 800b906:	f7f5 fccb 	bl	80012a0 <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 800b90a:	2200      	movs	r2, #0
 800b90c:	2100      	movs	r1, #0
 800b90e:	481c      	ldr	r0, [pc, #112]	; (800b980 <motor_calib_task+0x88>)
 800b910:	f7f5 fcc6 	bl	80012a0 <can_start>
	config_motors();
 800b914:	f7fe ff6e 	bl	800a7f4 <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 800b918:	f240 13ff 	movw	r3, #511	; 0x1ff
 800b91c:	81fb      	strh	r3, [r7, #14]
	vTaskDelay(50);
 800b91e:	2032      	movs	r0, #50	; 0x32
 800b920:	f010 f8b6 	bl	801ba90 <vTaskDelay>
	uint8_t startup = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	737b      	strb	r3, [r7, #13]
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0){
 800b928:	89fb      	ldrh	r3, [r7, #14]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <motor_calib_task+0x3c>
		temp_msg = ok;
 800b92e:	2301      	movs	r3, #1
 800b930:	733b      	strb	r3, [r7, #12]
 800b932:	e001      	b.n	800b938 <motor_calib_task+0x40>
	} else {
		temp_msg = not_ok;
 800b934:	2302      	movs	r3, #2
 800b936:	733b      	strb	r3, [r7, #12]
	}
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800b938:	4b12      	ldr	r3, [pc, #72]	; (800b984 <motor_calib_task+0x8c>)
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	f107 010c 	add.w	r1, r7, #12
 800b940:	2300      	movs	r3, #0
 800b942:	2200      	movs	r2, #0
 800b944:	f00f f9f8 	bl	801ad38 <xQueueGenericSend>

	while (1) {
		error = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	81fb      	strh	r3, [r7, #14]

		error = check_motors();
 800b94c:	f7ff ff52 	bl	800b7f4 <check_motors>
 800b950:	4603      	mov	r3, r0
 800b952:	81fb      	strh	r3, [r7, #14]
		g_motor_fault = error;
 800b954:	4a0c      	ldr	r2, [pc, #48]	; (800b988 <motor_calib_task+0x90>)
 800b956:	89fb      	ldrh	r3, [r7, #14]
 800b958:	8013      	strh	r3, [r2, #0]
			}
			vTaskDelay(5000);
			continue;
		}
		else if (MOTOR_ONLINE_CHECK == 0) {
			if(error != 0) {
 800b95a:	89fb      	ldrh	r3, [r7, #14]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d008      	beq.n	800b972 <motor_calib_task+0x7a>
			bz_buzzer(0, 2);
 800b960:	2102      	movs	r1, #2
 800b962:	2000      	movs	r0, #0
 800b964:	f7ff fefe 	bl	800b764 <bz_buzzer>
			vTaskDelay(5000);
 800b968:	f241 3088 	movw	r0, #5000	; 0x1388
 800b96c:	f010 f890 	bl	801ba90 <vTaskDelay>
			continue;
 800b970:	e003      	b.n	800b97a <motor_calib_task+0x82>
			}
		}
		vTaskDelay(10000);
 800b972:	f242 7010 	movw	r0, #10000	; 0x2710
 800b976:	f010 f88b 	bl	801ba90 <vTaskDelay>
		error = 0;
 800b97a:	e7e5      	b.n	800b948 <motor_calib_task+0x50>
 800b97c:	2000042c 	.word	0x2000042c
 800b980:	20000454 	.word	0x20000454
 800b984:	200004d8 	.word	0x200004d8
 800b988:	2000320c 	.word	0x2000320c

0800b98c <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08e      	sub	sp, #56	; 0x38
 800b990:	af00      	add	r7, sp, #0
 800b992:	ed87 0b04 	vstr	d0, [r7, #16]
 800b996:	ed87 1b02 	vstr	d1, [r7, #8]
 800b99a:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 800b9a4:	f7f6 fc64 	bl	8002270 <get_microseconds>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	629a      	str	r2, [r3, #40]	; 0x28
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 800b9b2:	f04f 0200 	mov.w	r2, #0
 800b9b6:	f04f 0300 	mov.w	r3, #0
 800b9ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 800b9be:	f04f 0200 	mov.w	r2, #0
 800b9c2:	f04f 0300 	mov.w	r3, #0
 800b9c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	f04f 0300 	mov.w	r3, #0
 800b9d2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68da      	ldr	r2, [r3, #12]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 800b9de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b9e6:	f7f4 fc4f 	bl	8000288 <__aeabi_dsub>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	f7f5 f8f9 	bl	8000be8 <__aeabi_d2f>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	ed93 7a03 	vldr	s14, [r3, #12]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	edd3 7a00 	vldr	s15, [r3]
 800ba08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0e:	ee07 3a90 	vmov	s15, r3
 800ba12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba1a:	ee17 0a90 	vmov	r0, s15
 800ba1e:	f7f4 fd93 	bl	8000548 <__aeabi_f2d>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	edd3 7a04 	vldr	s15, [r3, #16]
 800ba36:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	edd3 7a02 	vldr	s15, [r3, #8]
 800ba40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba52:	ee17 0a90 	vmov	r0, s15
 800ba56:	f7f4 fd77 	bl	8000548 <__aeabi_f2d>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	ed93 7a05 	vldr	s14, [r3, #20]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	edd3 6a03 	vldr	s13, [r3, #12]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ba78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f103 0214 	add.w	r2, r3, #20
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	edd3 7a06 	vldr	s15, [r3, #24]
 800ba9c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800bb0c <speed_pid+0x180>
 800baa0:	eeb0 0a67 	vmov.f32	s0, s15
 800baa4:	4610      	mov	r0, r2
 800baa6:	f000 faee 	bl	800c086 <float_minmax>
	Iout = pid->integral;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	4618      	mov	r0, r3
 800bab0:	f7f4 fd4a 	bl	8000548 <__aeabi_f2d>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 800babc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bac0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bac4:	f7f4 fbe2 	bl	800028c <__adddf3>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4610      	mov	r0, r2
 800bace:	4619      	mov	r1, r3
 800bad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bad4:	f7f4 fbda 	bl	800028c <__adddf3>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4610      	mov	r0, r2
 800bade:	4619      	mov	r1, r3
 800bae0:	f7f5 f882 	bl	8000be8 <__aeabi_d2f>
 800bae4:	4602      	mov	r2, r0
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	621a      	str	r2, [r3, #32]
	float_minmax(&pid->output, pid->max_out, 0);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f103 0220 	add.w	r2, r3, #32
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	edd3 7a07 	vldr	s15, [r3, #28]
 800baf6:	eddf 0a05 	vldr	s1, [pc, #20]	; 800bb0c <speed_pid+0x180>
 800bafa:	eeb0 0a67 	vmov.f32	s0, s15
 800bafe:	4610      	mov	r0, r2
 800bb00:	f000 fac1 	bl	800c086 <float_minmax>
}
 800bb04:	bf00      	nop
 800bb06:	3738      	adds	r7, #56	; 0x38
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	00000000 	.word	0x00000000

0800bb10 <motor_send_RTOS>:
 * @param id_two	id number of second motor to send can message to
 * @param id_three	id number of third motor to send can message to
 * @param id_four	id number of fourth motor to send can message to
 */

void motor_send_RTOS(void *argument){
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af02      	add	r7, sp, #8
 800bb16:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800bb18:	f010 f90a 	bl	801bd30 <xTaskGetTickCount>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		motor_send_can(can_motors, Leftwheel_MOTOR_ID, Rightwheel_MOTOR_ID, 0, 0);
 800bb20:	2300      	movs	r3, #0
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	2300      	movs	r3, #0
 800bb26:	2202      	movs	r2, #2
 800bb28:	2101      	movs	r1, #1
 800bb2a:	4805      	ldr	r0, [pc, #20]	; (800bb40 <motor_send_RTOS+0x30>)
 800bb2c:	f000 f80a 	bl	800bb44 <motor_send_can>
		vTaskDelayUntil(&xLastWakeTime, 4);
 800bb30:	f107 030c 	add.w	r3, r7, #12
 800bb34:	2104      	movs	r1, #4
 800bb36:	4618      	mov	r0, r3
 800bb38:	f00f ff2c 	bl	801b994 <vTaskDelayUntil>
		motor_send_can(can_motors, Leftwheel_MOTOR_ID, Rightwheel_MOTOR_ID, 0, 0);
 800bb3c:	e7f0      	b.n	800bb20 <motor_send_RTOS+0x10>
 800bb3e:	bf00      	nop
 800bb40:	200018a0 	.word	0x200018a0

0800bb44 <motor_send_can>:
	}
}

void motor_send_can(motor_data_t motor_all[], uint8_t id_one, uint8_t id_two, uint8_t id_three, uint8_t id_four) {
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08e      	sub	sp, #56	; 0x38
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	4611      	mov	r1, r2
 800bb50:	461a      	mov	r2, r3
 800bb52:	4603      	mov	r3, r0
 800bb54:	70fb      	strb	r3, [r7, #3]
 800bb56:	460b      	mov	r3, r1
 800bb58:	70bb      	strb	r3, [r7, #2]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 800bb62:	2300      	movs	r3, #0
 800bb64:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 800bb66:	2300      	movs	r3, #0
 800bb68:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 800bb6a:	2308      	movs	r3, #8
 800bb6c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	2b18      	cmp	r3, #24
 800bb72:	d80b      	bhi.n	800bb8c <motor_send_can+0x48>
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d008      	beq.n	800bb8c <motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	2201      	movs	r2, #1
 800bb80:	fa02 f303 	lsl.w	r3, r2, r3
 800bb84:	461a      	mov	r2, r3
 800bb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 800bb8c:	78bb      	ldrb	r3, [r7, #2]
 800bb8e:	2b18      	cmp	r3, #24
 800bb90:	d80b      	bhi.n	800bbaa <motor_send_can+0x66>
 800bb92:	78bb      	ldrb	r3, [r7, #2]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d008      	beq.n	800bbaa <motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 800bb98:	78bb      	ldrb	r3, [r7, #2]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba6:	4313      	orrs	r3, r2
 800bba8:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 800bbaa:	787b      	ldrb	r3, [r7, #1]
 800bbac:	2b18      	cmp	r3, #24
 800bbae:	d80b      	bhi.n	800bbc8 <motor_send_can+0x84>
 800bbb0:	787b      	ldrb	r3, [r7, #1]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d008      	beq.n	800bbc8 <motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 800bbb6:	787b      	ldrb	r3, [r7, #1]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	2201      	movs	r2, #1
 800bbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 800bbc8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bbcc:	2b18      	cmp	r3, #24
 800bbce:	d80d      	bhi.n	800bbec <motor_send_can+0xa8>
 800bbd0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d009      	beq.n	800bbec <motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 800bbd8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	2201      	movs	r2, #1
 800bbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (temp_checker & 0x00000F) {
 800bbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbee:	f003 030f 	and.w	r3, r3, #15
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d054      	beq.n	800bca0 <motor_send_can+0x15c>
		CAN_tx_message.StdId = 0x200;
 800bbf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbfa:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0].rpm_pid.output;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bc02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc06:	ee17 3a90 	vmov	r3, s15
 800bc0a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800bc0c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bc10:	121b      	asrs	r3, r3, #8
 800bc12:	b21b      	sxth	r3, r3
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800bc18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1].rpm_pid.output;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	33f0      	adds	r3, #240	; 0xf0
 800bc22:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bc26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc2a:	ee17 3a90 	vmov	r3, s15
 800bc2e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800bc30:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bc34:	121b      	asrs	r3, r3, #8
 800bc36:	b21b      	sxth	r3, r3
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800bc3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2].rpm_pid.output;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800bc48:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bc4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc50:	ee17 3a90 	vmov	r3, s15
 800bc54:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800bc56:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bc5a:	121b      	asrs	r3, r3, #8
 800bc5c:	b21b      	sxth	r3, r3
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800bc62:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3].rpm_pid.output;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800bc6e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bc72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc76:	ee17 3a90 	vmov	r3, s15
 800bc7a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800bc7c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bc80:	121b      	asrs	r3, r3, #8
 800bc82:	b21b      	sxth	r3, r3
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800bc88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800bc8e:	f107 030c 	add.w	r3, r7, #12
 800bc92:	f107 0210 	add.w	r2, r7, #16
 800bc96:	f107 0118 	add.w	r1, r7, #24
 800bc9a:	48bc      	ldr	r0, [pc, #752]	; (800bf8c <motor_send_can+0x448>)
 800bc9c:	f003 f900 	bl	800eea0 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0000F0) {
 800bca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d057      	beq.n	800bd5a <motor_send_can+0x216>
		CAN_tx_message.StdId = 0x1FF;
 800bcaa:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bcae:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4].rpm_pid.output;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800bcb6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bcba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcbe:	ee17 3a90 	vmov	r3, s15
 800bcc2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800bcc4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bcc8:	121b      	asrs	r3, r3, #8
 800bcca:	b21b      	sxth	r3, r3
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800bcd0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5].rpm_pid.output;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800bcdc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bce4:	ee17 3a90 	vmov	r3, s15
 800bce8:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800bcea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bcee:	121b      	asrs	r3, r3, #8
 800bcf0:	b21b      	sxth	r3, r3
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800bcf6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6].rpm_pid.output;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800bd02:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bd06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd0a:	ee17 3a90 	vmov	r3, s15
 800bd0e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800bd10:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bd14:	121b      	asrs	r3, r3, #8
 800bd16:	b21b      	sxth	r3, r3
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800bd1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7].rpm_pid.output;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800bd28:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bd2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd30:	ee17 3a90 	vmov	r3, s15
 800bd34:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800bd36:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bd3a:	121b      	asrs	r3, r3, #8
 800bd3c:	b21b      	sxth	r3, r3
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800bd42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800bd48:	f107 030c 	add.w	r3, r7, #12
 800bd4c:	f107 0210 	add.w	r2, r7, #16
 800bd50:	f107 0118 	add.w	r1, r7, #24
 800bd54:	488d      	ldr	r0, [pc, #564]	; (800bf8c <motor_send_can+0x448>)
 800bd56:	f003 f8a3 	bl	800eea0 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x000F00) {
 800bd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d057      	beq.n	800be14 <motor_send_can+0x2d0>
		CAN_tx_message.StdId = 0x2FF;
 800bd64:	f240 23ff 	movw	r3, #767	; 0x2ff
 800bd68:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8].rpm_pid.output;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800bd70:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bd74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd78:	ee17 3a90 	vmov	r3, s15
 800bd7c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800bd7e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bd82:	121b      	asrs	r3, r3, #8
 800bd84:	b21b      	sxth	r3, r3
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800bd8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9].rpm_pid.output;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 800bd96:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bd9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd9e:	ee17 3a90 	vmov	r3, s15
 800bda2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800bda4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bda8:	121b      	asrs	r3, r3, #8
 800bdaa:	b21b      	sxth	r3, r3
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800bdb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA].rpm_pid.output;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800bdbc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bdc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdc4:	ee17 3a90 	vmov	r3, s15
 800bdc8:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800bdca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bdce:	121b      	asrs	r3, r3, #8
 800bdd0:	b21b      	sxth	r3, r3
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800bdd6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB].rpm_pid.output;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 800bde2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bde6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdea:	ee17 3a90 	vmov	r3, s15
 800bdee:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800bdf0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bdf4:	121b      	asrs	r3, r3, #8
 800bdf6:	b21b      	sxth	r3, r3
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800bdfc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800be02:	f107 030c 	add.w	r3, r7, #12
 800be06:	f107 0210 	add.w	r2, r7, #16
 800be0a:	f107 0118 	add.w	r1, r7, #24
 800be0e:	485f      	ldr	r0, [pc, #380]	; (800bf8c <motor_send_can+0x448>)
 800be10:	f003 f846 	bl	800eea0 <HAL_CAN_AddTxMessage>
	}
#ifndef CHASSIS_MCU
	if (temp_checker & 0x00F000) {
 800be14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be16:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d057      	beq.n	800bece <motor_send_can+0x38a>
		CAN_tx_message.StdId = 0x200;
 800be1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be22:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0 + 12].rpm_pid.output;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800be2a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800be2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be32:	ee17 3a90 	vmov	r3, s15
 800be36:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800be38:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800be3c:	121b      	asrs	r3, r3, #8
 800be3e:	b21b      	sxth	r3, r3
 800be40:	b2db      	uxtb	r3, r3
 800be42:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800be44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be46:	b2db      	uxtb	r3, r3
 800be48:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1 + 12].rpm_pid.output;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800be50:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800be54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be58:	ee17 3a90 	vmov	r3, s15
 800be5c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800be5e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800be62:	121b      	asrs	r3, r3, #8
 800be64:	b21b      	sxth	r3, r3
 800be66:	b2db      	uxtb	r3, r3
 800be68:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800be6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2 + 12].rpm_pid.output;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800be76:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800be7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be7e:	ee17 3a90 	vmov	r3, s15
 800be82:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800be84:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800be88:	121b      	asrs	r3, r3, #8
 800be8a:	b21b      	sxth	r3, r3
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800be90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be92:	b2db      	uxtb	r3, r3
 800be94:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3 + 12].rpm_pid.output;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800be9c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bea4:	ee17 3a90 	vmov	r3, s15
 800bea8:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800beaa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800beae:	121b      	asrs	r3, r3, #8
 800beb0:	b21b      	sxth	r3, r3
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800beb6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	f107 0210 	add.w	r2, r7, #16
 800bec4:	f107 0118 	add.w	r1, r7, #24
 800bec8:	4831      	ldr	r0, [pc, #196]	; (800bf90 <motor_send_can+0x44c>)
 800beca:	f002 ffe9 	bl	800eea0 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0F0000) {
 800bece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d05d      	beq.n	800bf94 <motor_send_can+0x450>
		CAN_tx_message.StdId = 0x1FF;
 800bed8:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bedc:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4 + 12].rpm_pid.output;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800bee4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800beec:	ee17 3a90 	vmov	r3, s15
 800bef0:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800bef2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bef6:	121b      	asrs	r3, r3, #8
 800bef8:	b21b      	sxth	r3, r3
 800befa:	b2db      	uxtb	r3, r3
 800befc:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800befe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5 + 12].rpm_pid.output;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 800bf0a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bf0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf12:	ee17 3a90 	vmov	r3, s15
 800bf16:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800bf18:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bf1c:	121b      	asrs	r3, r3, #8
 800bf1e:	b21b      	sxth	r3, r3
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800bf24:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6 + 12].rpm_pid.output;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800bf30:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bf34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf38:	ee17 3a90 	vmov	r3, s15
 800bf3c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800bf3e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bf42:	121b      	asrs	r3, r3, #8
 800bf44:	b21b      	sxth	r3, r3
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800bf4a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7 + 12].rpm_pid.output;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800bf56:	3310      	adds	r3, #16
 800bf58:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bf5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf60:	ee17 3a90 	vmov	r3, s15
 800bf64:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800bf66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bf6a:	121b      	asrs	r3, r3, #8
 800bf6c:	b21b      	sxth	r3, r3
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800bf72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800bf78:	f107 030c 	add.w	r3, r7, #12
 800bf7c:	f107 0210 	add.w	r2, r7, #16
 800bf80:	f107 0118 	add.w	r1, r7, #24
 800bf84:	4802      	ldr	r0, [pc, #8]	; (800bf90 <motor_send_can+0x44c>)
 800bf86:	f002 ff8b 	bl	800eea0 <HAL_CAN_AddTxMessage>
 800bf8a:	e003      	b.n	800bf94 <motor_send_can+0x450>
 800bf8c:	2000042c 	.word	0x2000042c
 800bf90:	20000454 	.word	0x20000454
	}
	if (temp_checker & 0xF00000) {
 800bf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d059      	beq.n	800c052 <motor_send_can+0x50e>
		CAN_tx_message.StdId = 0x2FF;
 800bf9e:	f240 23ff 	movw	r3, #767	; 0x2ff
 800bfa2:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8 + 12].rpm_pid.output;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800bfaa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bfae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfb2:	ee17 3a90 	vmov	r3, s15
 800bfb6:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800bfb8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bfbc:	121b      	asrs	r3, r3, #8
 800bfbe:	b21b      	sxth	r3, r3
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800bfc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9 + 12].rpm_pid.output;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800bfd0:	3310      	adds	r3, #16
 800bfd2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bfd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfda:	ee17 3a90 	vmov	r3, s15
 800bfde:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800bfe0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800bfe4:	121b      	asrs	r3, r3, #8
 800bfe6:	b21b      	sxth	r3, r3
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800bfec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA + 12].rpm_pid.output;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 800bff8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c000:	ee17 3a90 	vmov	r3, s15
 800c004:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800c006:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c00a:	121b      	asrs	r3, r3, #8
 800c00c:	b21b      	sxth	r3, r3
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800c012:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c014:	b2db      	uxtb	r3, r3
 800c016:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB + 12].rpm_pid.output;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800c01e:	3310      	adds	r3, #16
 800c020:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c028:	ee17 3a90 	vmov	r3, s15
 800c02c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800c02e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800c032:	121b      	asrs	r3, r3, #8
 800c034:	b21b      	sxth	r3, r3
 800c036:	b2db      	uxtb	r3, r3
 800c038:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800c03a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800c040:	f107 030c 	add.w	r3, r7, #12
 800c044:	f107 0210 	add.w	r2, r7, #16
 800c048:	f107 0118 	add.w	r1, r7, #24
 800c04c:	4803      	ldr	r0, [pc, #12]	; (800c05c <motor_send_can+0x518>)
 800c04e:	f002 ff27 	bl	800eea0 <HAL_CAN_AddTxMessage>
	}
#endif
}
 800c052:	bf00      	nop
 800c054:	3738      	adds	r7, #56	; 0x38
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20000454 	.word	0x20000454

0800c060 <kill_can>:

void kill_can() {
 800c060:	b480      	push	{r7}
 800c062:	b089      	sub	sp, #36	; 0x24
 800c064:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8] = { 0, };
 800c066:	2300      	movs	r3, #0
 800c068:	603b      	str	r3, [r7, #0]
 800c06a:	2300      	movs	r3, #0
 800c06c:	607b      	str	r3, [r7, #4]
	uint32_t send_mail_box;
	CAN_tx_message.IDE = CAN_ID_STD;
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 800c072:	2300      	movs	r3, #0
 800c074:	617b      	str	r3, [r7, #20]
	CAN_tx_message.DLC = 0x08;
 800c076:	2308      	movs	r3, #8
 800c078:	61bb      	str	r3, [r7, #24]
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//	CAN_tx_message.StdId = 0x2FF;
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//
//#endif
}
 800c07a:	bf00      	nop
 800c07c:	3724      	adds	r7, #36	; 0x24
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	60f8      	str	r0, [r7, #12]
 800c08e:	ed87 0a02 	vstr	s0, [r7, #8]
 800c092:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	edd3 7a00 	vldr	s15, [r3]
 800c09c:	ed97 7a02 	vldr	s14, [r7, #8]
 800c0a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a8:	d503      	bpl.n	800c0b2 <float_minmax+0x2c>
		*motor_in = motor_max;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	e012      	b.n	800c0d8 <float_minmax+0x52>
	} else if (*motor_in < -motor_max) {
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	ed93 7a00 	vldr	s14, [r3]
 800c0b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0bc:	eef1 7a67 	vneg.f32	s15, s15
 800c0c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c8:	d506      	bpl.n	800c0d8 <float_minmax+0x52>
		*motor_in = -motor_max;
 800c0ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0ce:	eef1 7a67 	vneg.f32	s15, s15
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabs(*motor_in) < motor_min) {
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	edd3 7a00 	vldr	s15, [r3]
 800c0de:	eef0 7ae7 	vabs.f32	s15, s15
 800c0e2:	ed97 7a01 	vldr	s14, [r7, #4]
 800c0e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ee:	dc00      	bgt.n	800c0f2 <float_minmax+0x6c>
		*motor_in = 0;
	}

}
 800c0f0:	e003      	b.n	800c0fa <float_minmax+0x74>
		*motor_in = 0;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	601a      	str	r2, [r3, #0]
}
 800c0fa:	bf00      	nop
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
	...

0800c108 <motors_process_task>:
double rev[24] = {0};
extern float motorOutRatio;



void motors_process_task(void *argument) {
 800c108:	b5b0      	push	{r4, r5, r7, lr}
 800c10a:	b08e      	sub	sp, #56	; 0x38
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
	double starttime = 0;
 800c110:	f04f 0200 	mov.w	r2, #0
 800c114:	f04f 0300 	mov.w	r3, #0
 800c118:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double endtime = 0;
 800c11c:	f04f 0200 	mov.w	r2, #0
 800c120:	f04f 0300 	mov.w	r3, #0
 800c124:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dt;
	vTaskDelay(5);
 800c128:	2005      	movs	r0, #5
 800c12a:	f00f fcb1 	bl	801ba90 <vTaskDelay>
	double leftWheel_offset = (double)can_motors[1].raw_data.angle[0];
 800c12e:	4b88      	ldr	r3, [pc, #544]	; (800c350 <motors_process_task+0x248>)
 800c130:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800c134:	4618      	mov	r0, r3
 800c136:	f7f4 f9f5 	bl	8000524 <__aeabi_i2d>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double rightWheel_offset = (double)can_motors[0].raw_data.angle[0];
 800c142:	4b83      	ldr	r3, [pc, #524]	; (800c350 <motors_process_task+0x248>)
 800c144:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f4 f9eb 	bl	8000524 <__aeabi_i2d>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	e9c7 2306 	strd	r2, r3, [r7, #24]
	can_motors[1].rpm_pid.kp = 5000;
 800c156:	4b7e      	ldr	r3, [pc, #504]	; (800c350 <motors_process_task+0x248>)
 800c158:	4a7e      	ldr	r2, [pc, #504]	; (800c354 <motors_process_task+0x24c>)
 800c15a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	can_motors[0].rpm_pid.kp = 5000;
 800c15e:	4b7c      	ldr	r3, [pc, #496]	; (800c350 <motors_process_task+0x248>)
 800c160:	4a7c      	ldr	r2, [pc, #496]	; (800c354 <motors_process_task+0x24c>)
 800c162:	639a      	str	r2, [r3, #56]	; 0x38
	can_motors[1].rpm_pid.ki = 0;
 800c164:	4b7a      	ldr	r3, [pc, #488]	; (800c350 <motors_process_task+0x248>)
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	can_motors[0].rpm_pid.ki = 0;
 800c16e:	4b78      	ldr	r3, [pc, #480]	; (800c350 <motors_process_task+0x248>)
 800c170:	f04f 0200 	mov.w	r2, #0
 800c174:	63da      	str	r2, [r3, #60]	; 0x3c
	can_motors[1].rpm_pid.kd = 0;
 800c176:	4b76      	ldr	r3, [pc, #472]	; (800c350 <motors_process_task+0x248>)
 800c178:	f04f 0200 	mov.w	r2, #0
 800c17c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	can_motors[0].rpm_pid.kd = 0;
 800c180:	4b73      	ldr	r3, [pc, #460]	; (800c350 <motors_process_task+0x248>)
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	641a      	str	r2, [r3, #64]	; 0x40
	can_motors[1].rpm_pid.max_out = 10000;
 800c188:	4b71      	ldr	r3, [pc, #452]	; (800c350 <motors_process_task+0x248>)
 800c18a:	4a73      	ldr	r2, [pc, #460]	; (800c358 <motors_process_task+0x250>)
 800c18c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	can_motors[0].rpm_pid.max_out = 10000;
 800c190:	4b6f      	ldr	r3, [pc, #444]	; (800c350 <motors_process_task+0x248>)
 800c192:	4a71      	ldr	r2, [pc, #452]	; (800c358 <motors_process_task+0x250>)
 800c194:	655a      	str	r2, [r3, #84]	; 0x54
    TickType_t start_time;
    while (1) {
        endtime = get_microseconds();
 800c196:	f7f6 f86b 	bl	8002270 <get_microseconds>
 800c19a:	4603      	mov	r3, r0
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7f4 f9b1 	bl	8000504 <__aeabi_ui2d>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        dt = endtime - starttime;
 800c1aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c1ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c1b2:	f7f4 f869 	bl	8000288 <__aeabi_dsub>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
        start_time = xTaskGetTickCount();
 800c1be:	f00f fdb7 	bl	801bd30 <xTaskGetTickCount>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	60fb      	str	r3, [r7, #12]
        raw_angle_to_rad(can_motors); // Pass the array directly
 800c1c6:	4862      	ldr	r0, [pc, #392]	; (800c350 <motors_process_task+0x248>)
 800c1c8:	f000 f8e2 	bl	800c390 <raw_angle_to_rad>
        motors_raw_angle_to_desired_angle_dir(&can_motors[8], 3.62+PI, -1);
 800c1cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c1d0:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800c35c <motors_process_task+0x254>
 800c1d4:	4862      	ldr	r0, [pc, #392]	; (800c360 <motors_process_task+0x258>)
 800c1d6:	f000 f963 	bl	800c4a0 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&can_motors[9], 3.62, -1);
 800c1da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c1de:	ed9f 0a61 	vldr	s0, [pc, #388]	; 800c364 <motors_process_task+0x25c>
 800c1e2:	4861      	ldr	r0, [pc, #388]	; (800c368 <motors_process_task+0x260>)
 800c1e4:	f000 f95c 	bl	800c4a0 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&can_motors[16], -0.531, 1);
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800c36c <motors_process_task+0x264>
 800c1ee:	4860      	ldr	r0, [pc, #384]	; (800c370 <motors_process_task+0x268>)
 800c1f0:	f000 f956 	bl	800c4a0 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&can_motors[17], -3.62, 1);
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800c374 <motors_process_task+0x26c>
 800c1fa:	485f      	ldr	r0, [pc, #380]	; (800c378 <motors_process_task+0x270>)
 800c1fc:	f000 f950 	bl	800c4a0 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&can_motors[1], 0, -1);
 800c200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c204:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800c37c <motors_process_task+0x274>
 800c208:	485d      	ldr	r0, [pc, #372]	; (800c380 <motors_process_task+0x278>)
 800c20a:	f000 f949 	bl	800c4a0 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&can_motors[0], 0, 1);
 800c20e:	2101      	movs	r1, #1
 800c210:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 800c37c <motors_process_task+0x274>
 800c214:	484e      	ldr	r0, [pc, #312]	; (800c350 <motors_process_task+0x248>)
 800c216:	f000 f943 	bl	800c4a0 <motors_raw_angle_to_desired_angle_dir>
        motors_torque_to_current_6020(&can_motors[8],0,-1.0);
 800c21a:	ed9f 1b49 	vldr	d1, [pc, #292]	; 800c340 <motors_process_task+0x238>
 800c21e:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800c37c <motors_process_task+0x274>
 800c222:	484f      	ldr	r0, [pc, #316]	; (800c360 <motors_process_task+0x258>)
 800c224:	f000 f99c 	bl	800c560 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&can_motors[9],0,-1.0);
 800c228:	ed9f 1b45 	vldr	d1, [pc, #276]	; 800c340 <motors_process_task+0x238>
 800c22c:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800c37c <motors_process_task+0x274>
 800c230:	484d      	ldr	r0, [pc, #308]	; (800c368 <motors_process_task+0x260>)
 800c232:	f000 f995 	bl	800c560 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&can_motors[16],0,1.0);
 800c236:	ed9f 1b44 	vldr	d1, [pc, #272]	; 800c348 <motors_process_task+0x240>
 800c23a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800c37c <motors_process_task+0x274>
 800c23e:	484c      	ldr	r0, [pc, #304]	; (800c370 <motors_process_task+0x268>)
 800c240:	f000 f98e 	bl	800c560 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&can_motors[17],0,1.0);
 800c244:	ed9f 1b40 	vldr	d1, [pc, #256]	; 800c348 <motors_process_task+0x240>
 800c248:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800c37c <motors_process_task+0x274>
 800c24c:	484a      	ldr	r0, [pc, #296]	; (800c378 <motors_process_task+0x270>)
 800c24e:	f000 f987 	bl	800c560 <motors_torque_to_current_6020>
        motors_torque_to_current_3508_gearbox(&can_motors[0],15,1.0);
 800c252:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 800c348 <motors_process_task+0x240>
 800c256:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800c25a:	483d      	ldr	r0, [pc, #244]	; (800c350 <motors_process_task+0x248>)
 800c25c:	f000 fa0c 	bl	800c678 <motors_torque_to_current_3508_gearbox>
        motors_torque_to_current_3508_gearbox(&can_motors[1],15,-1.0);
 800c260:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800c340 <motors_process_task+0x238>
 800c264:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800c268:	4845      	ldr	r0, [pc, #276]	; (800c380 <motors_process_task+0x278>)
 800c26a:	f000 fa05 	bl	800c678 <motors_torque_to_current_3508_gearbox>


        speed_pid((double)can_motors[1].torque ,(double)can_motors[1].raw_data.rpm/1000, &can_motors[1].rpm_pid);
 800c26e:	4b38      	ldr	r3, [pc, #224]	; (800c350 <motors_process_task+0x248>)
 800c270:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c274:	4618      	mov	r0, r3
 800c276:	f7f4 f967 	bl	8000548 <__aeabi_f2d>
 800c27a:	4604      	mov	r4, r0
 800c27c:	460d      	mov	r5, r1
 800c27e:	4b34      	ldr	r3, [pc, #208]	; (800c350 <motors_process_task+0x248>)
 800c280:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 800c284:	4618      	mov	r0, r3
 800c286:	f7f4 f94d 	bl	8000524 <__aeabi_i2d>
 800c28a:	f04f 0200 	mov.w	r2, #0
 800c28e:	4b3d      	ldr	r3, [pc, #244]	; (800c384 <motors_process_task+0x27c>)
 800c290:	f7f4 fadc 	bl	800084c <__aeabi_ddiv>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	ec43 2b17 	vmov	d7, r2, r3
 800c29c:	483a      	ldr	r0, [pc, #232]	; (800c388 <motors_process_task+0x280>)
 800c29e:	eeb0 1a47 	vmov.f32	s2, s14
 800c2a2:	eef0 1a67 	vmov.f32	s3, s15
 800c2a6:	ec45 4b10 	vmov	d0, r4, r5
 800c2aa:	f7ff fb6f 	bl	800b98c <speed_pid>
        speed_pid((double)can_motors[0].torque ,(double)can_motors[0].raw_data.rpm/1000, &can_motors[0].rpm_pid);
 800c2ae:	4b28      	ldr	r3, [pc, #160]	; (800c350 <motors_process_task+0x248>)
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f4 f948 	bl	8000548 <__aeabi_f2d>
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	4b24      	ldr	r3, [pc, #144]	; (800c350 <motors_process_task+0x248>)
 800c2be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f4 f92e 	bl	8000524 <__aeabi_i2d>
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	4b2d      	ldr	r3, [pc, #180]	; (800c384 <motors_process_task+0x27c>)
 800c2ce:	f7f4 fabd 	bl	800084c <__aeabi_ddiv>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	ec43 2b17 	vmov	d7, r2, r3
 800c2da:	482c      	ldr	r0, [pc, #176]	; (800c38c <motors_process_task+0x284>)
 800c2dc:	eeb0 1a47 	vmov.f32	s2, s14
 800c2e0:	eef0 1a67 	vmov.f32	s3, s15
 800c2e4:	ec45 4b10 	vmov	d0, r4, r5
 800c2e8:	f7ff fb50 	bl	800b98c <speed_pid>
        can_motors[1].output = can_motors[1].rpm_pid.output;
 800c2ec:	4b18      	ldr	r3, [pc, #96]	; (800c350 <motors_process_task+0x248>)
 800c2ee:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800c2f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2f6:	ee17 3a90 	vmov	r3, s15
 800c2fa:	b21a      	sxth	r2, r3
 800c2fc:	4b14      	ldr	r3, [pc, #80]	; (800c350 <motors_process_task+0x248>)
 800c2fe:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
        can_motors[0].output = can_motors[0].rpm_pid.output;
 800c302:	4b13      	ldr	r3, [pc, #76]	; (800c350 <motors_process_task+0x248>)
 800c304:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c30c:	ee17 3a90 	vmov	r3, s15
 800c310:	b21a      	sxth	r2, r3
 800c312:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <motors_process_task+0x248>)
 800c314:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
        starttime = get_microseconds();
 800c318:	f7f5 ffaa 	bl	8002270 <get_microseconds>
 800c31c:	4603      	mov	r3, r0
 800c31e:	4618      	mov	r0, r3
 800c320:	f7f4 f8f0 	bl	8000504 <__aeabi_ui2d>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30




        vTaskDelayUntil(&start_time, 5);
 800c32c:	f107 030c 	add.w	r3, r7, #12
 800c330:	2105      	movs	r1, #5
 800c332:	4618      	mov	r0, r3
 800c334:	f00f fb2e 	bl	801b994 <vTaskDelayUntil>
        endtime = get_microseconds();
 800c338:	e72d      	b.n	800c196 <motors_process_task+0x8e>
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
 800c340:	00000000 	.word	0x00000000
 800c344:	bff00000 	.word	0xbff00000
 800c348:	00000000 	.word	0x00000000
 800c34c:	3ff00000 	.word	0x3ff00000
 800c350:	200018a0 	.word	0x200018a0
 800c354:	459c4000 	.word	0x459c4000
 800c358:	461c4000 	.word	0x461c4000
 800c35c:	40d85ef8 	.word	0x40d85ef8
 800c360:	20002020 	.word	0x20002020
 800c364:	4067ae14 	.word	0x4067ae14
 800c368:	20002110 	.word	0x20002110
 800c36c:	bf07ef9e 	.word	0xbf07ef9e
 800c370:	200027a0 	.word	0x200027a0
 800c374:	c067ae14 	.word	0xc067ae14
 800c378:	20002890 	.word	0x20002890
 800c37c:	00000000 	.word	0x00000000
 800c380:	20001990 	.word	0x20001990
 800c384:	408f4000 	.word	0x408f4000
 800c388:	200019c8 	.word	0x200019c8
 800c38c:	200018d8 	.word	0x200018d8

0800c390 <raw_angle_to_rad>:
    }
}

void raw_angle_to_rad(motor_data_t motor[]) { // Change the parameter to accept an array
 800c390:	b590      	push	{r4, r7, lr}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++) {
 800c398:	2300      	movs	r3, #0
 800c39a:	617b      	str	r3, [r7, #20]
 800c39c:	e06b      	b.n	800c476 <raw_angle_to_rad+0xe6>
        // Update moving average history
        double continuous_angle = motor[i].raw_data.angle[0] + (-motor[i].angle_data.rev*8192);
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	1a9b      	subs	r3, r3, r2
 800c3a6:	011b      	lsls	r3, r3, #4
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	011b      	lsls	r3, r3, #4
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	011b      	lsls	r3, r3, #4
 800c3be:	461a      	mov	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	04db      	lsls	r3, r3, #19
 800c3cc:	1a9b      	subs	r3, r3, r2
 800c3ce:	035b      	lsls	r3, r3, #13
 800c3d0:	440b      	add	r3, r1
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7f4 f8a6 	bl	8000524 <__aeabi_i2d>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor[i].raw_angle_rad = (continuous_angle / 8191.0) * 2 * PI;
 800c3e0:	a32a      	add	r3, pc, #168	; (adr r3, 800c48c <raw_angle_to_rad+0xfc>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3ea:	f7f4 fa2f 	bl	800084c <__aeabi_ddiv>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	f7f3 ff47 	bl	800028c <__adddf3>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4610      	mov	r0, r2
 800c404:	4619      	mov	r1, r3
 800c406:	a323      	add	r3, pc, #140	; (adr r3, 800c494 <raw_angle_to_rad+0x104>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f4 f8f4 	bl	80005f8 <__aeabi_dmul>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4610      	mov	r0, r2
 800c416:	4619      	mov	r1, r3
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	4613      	mov	r3, r2
 800c41c:	011b      	lsls	r3, r3, #4
 800c41e:	1a9b      	subs	r3, r3, r2
 800c420:	011b      	lsls	r3, r3, #4
 800c422:	461a      	mov	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	189c      	adds	r4, r3, r2
 800c428:	f7f4 fbde 	bl	8000be8 <__aeabi_d2f>
 800c42c:	4603      	mov	r3, r0
 800c42e:	6123      	str	r3, [r4, #16]
        motor[i].raw_angle_deg = (continuous_angle / 8191.0) * 360;
 800c430:	a316      	add	r3, pc, #88	; (adr r3, 800c48c <raw_angle_to_rad+0xfc>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c43a:	f7f4 fa07 	bl	800084c <__aeabi_ddiv>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4610      	mov	r0, r2
 800c444:	4619      	mov	r1, r3
 800c446:	f04f 0200 	mov.w	r2, #0
 800c44a:	4b0f      	ldr	r3, [pc, #60]	; (800c488 <raw_angle_to_rad+0xf8>)
 800c44c:	f7f4 f8d4 	bl	80005f8 <__aeabi_dmul>
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4610      	mov	r0, r2
 800c456:	4619      	mov	r1, r3
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	4613      	mov	r3, r2
 800c45c:	011b      	lsls	r3, r3, #4
 800c45e:	1a9b      	subs	r3, r3, r2
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	461a      	mov	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	189c      	adds	r4, r3, r2
 800c468:	f7f4 fbbe 	bl	8000be8 <__aeabi_d2f>
 800c46c:	4603      	mov	r3, r0
 800c46e:	6163      	str	r3, [r4, #20]
    for (int i = 0; i < 24; i++) {
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	3301      	adds	r3, #1
 800c474:	617b      	str	r3, [r7, #20]
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	2b17      	cmp	r3, #23
 800c47a:	dd90      	ble.n	800c39e <raw_angle_to_rad+0xe>
    }
}
 800c47c:	bf00      	nop
 800c47e:	bf00      	nop
 800c480:	371c      	adds	r7, #28
 800c482:	46bd      	mov	sp, r7
 800c484:	bd90      	pop	{r4, r7, pc}
 800c486:	bf00      	nop
 800c488:	40768000 	.word	0x40768000
 800c48c:	00000000 	.word	0x00000000
 800c490:	40bfff00 	.word	0x40bfff00
 800c494:	60000000 	.word	0x60000000
 800c498:	400921fb 	.word	0x400921fb
 800c49c:	00000000 	.word	0x00000000

0800c4a0 <motors_raw_angle_to_desired_angle_dir>:

void motors_raw_angle_to_desired_angle_dir(motor_data_t *motor, float offset, int dir) {
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800c4ac:	6079      	str	r1, [r7, #4]
    if (dir == -1) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b4:	d11b      	bne.n	800c4ee <motors_raw_angle_to_desired_angle_dir+0x4e>
        motor->angle_rad = -motor->raw_angle_rad + offset;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	edd3 7a04 	vldr	s15, [r3, #16]
 800c4bc:	ed97 7a02 	vldr	s14, [r7, #8]
 800c4c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	edc3 7a06 	vstr	s15, [r3, #24]
        motor->speed = -motor->raw_data.rpm * 0.10472;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4d0:	425b      	negs	r3, r3
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7f4 f826 	bl	8000524 <__aeabi_i2d>
 800c4d8:	a31d      	add	r3, pc, #116	; (adr r3, 800c550 <motors_raw_angle_to_desired_angle_dir+0xb0>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f7f4 f88b 	bl	80005f8 <__aeabi_dmul>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	68f9      	ldr	r1, [r7, #12]
 800c4e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800c4ec:	e019      	b.n	800c522 <motors_raw_angle_to_desired_angle_dir+0x82>
    } else {
        motor->angle_rad = motor->raw_angle_rad + offset;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	ed93 7a04 	vldr	s14, [r3, #16]
 800c4f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	edc3 7a06 	vstr	s15, [r3, #24]
        motor->speed = motor->raw_data.rpm * 0.10472;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c508:	4618      	mov	r0, r3
 800c50a:	f7f4 f80b 	bl	8000524 <__aeabi_i2d>
 800c50e:	a310      	add	r3, pc, #64	; (adr r3, 800c550 <motors_raw_angle_to_desired_angle_dir+0xb0>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	f7f4 f870 	bl	80005f8 <__aeabi_dmul>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	68f9      	ldr	r1, [r7, #12]
 800c51e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
    motor->angle_deg = motor->angle_rad * (180.0 / PI); // Update the degree value as well
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	4618      	mov	r0, r3
 800c528:	f7f4 f80e 	bl	8000548 <__aeabi_f2d>
 800c52c:	a30a      	add	r3, pc, #40	; (adr r3, 800c558 <motors_raw_angle_to_desired_angle_dir+0xb8>)
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	f7f4 f861 	bl	80005f8 <__aeabi_dmul>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4610      	mov	r0, r2
 800c53c:	4619      	mov	r1, r3
 800c53e:	f7f4 fb53 	bl	8000be8 <__aeabi_d2f>
 800c542:	4602      	mov	r2, r0
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	61da      	str	r2, [r3, #28]

}
 800c548:	bf00      	nop
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	0f3cb3e5 	.word	0x0f3cb3e5
 800c554:	3fbaceee 	.word	0x3fbaceee
 800c558:	0d03cf26 	.word	0x0d03cf26
 800c55c:	404ca5dc 	.word	0x404ca5dc

0800c560 <motors_torque_to_current_6020>:

void motors_torque_to_current_6020(motor_data_t *motor, float deadzone,double dir) {
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	ed87 0a02 	vstr	s0, [r7, #8]
 800c56c:	ed87 1b00 	vstr	d1, [r7]
	double current = 0;
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (motor->torque > 0){
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58a:	dd17      	ble.n	800c5bc <motors_torque_to_current_6020+0x5c>
		current = 1.8 * motor->torque + 0.2;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c590:	4618      	mov	r0, r3
 800c592:	f7f3 ffd9 	bl	8000548 <__aeabi_f2d>
 800c596:	a333      	add	r3, pc, #204	; (adr r3, 800c664 <motors_torque_to_current_6020+0x104>)
 800c598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59c:	f7f4 f82c 	bl	80005f8 <__aeabi_dmul>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	a330      	add	r3, pc, #192	; (adr r3, 800c66c <motors_torque_to_current_6020+0x10c>)
 800c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ae:	f7f3 fe6d 	bl	800028c <__adddf3>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c5ba:	e025      	b.n	800c608 <motors_torque_to_current_6020+0xa8>
	} else if(motor->torque < 0){
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c5c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ca:	d517      	bpl.n	800c5fc <motors_torque_to_current_6020+0x9c>
		current = 1.8 * motor->torque - 0.2;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7f3 ffb9 	bl	8000548 <__aeabi_f2d>
 800c5d6:	a323      	add	r3, pc, #140	; (adr r3, 800c664 <motors_torque_to_current_6020+0x104>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f4 f80c 	bl	80005f8 <__aeabi_dmul>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	a320      	add	r3, pc, #128	; (adr r3, 800c66c <motors_torque_to_current_6020+0x10c>)
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f7f3 fe4b 	bl	8000288 <__aeabi_dsub>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c5fa:	e005      	b.n	800c608 <motors_torque_to_current_6020+0xa8>
	} else{
		current = 0;
 800c5fc:	f04f 0200 	mov.w	r2, #0
 800c600:	f04f 0300 	mov.w	r3, #0
 800c604:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	motor->output = ((current * dir)/3.0)*16385.0;
 800c608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c60c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c610:	f7f3 fff2 	bl	80005f8 <__aeabi_dmul>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	4610      	mov	r0, r2
 800c61a:	4619      	mov	r1, r3
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	4b0f      	ldr	r3, [pc, #60]	; (800c660 <motors_torque_to_current_6020+0x100>)
 800c622:	f7f4 f913 	bl	800084c <__aeabi_ddiv>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	4610      	mov	r0, r2
 800c62c:	4619      	mov	r1, r3
 800c62e:	a30a      	add	r3, pc, #40	; (adr r3, 800c658 <motors_torque_to_current_6020+0xf8>)
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f7f3 ffe0 	bl	80005f8 <__aeabi_dmul>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	4610      	mov	r0, r2
 800c63e:	4619      	mov	r1, r3
 800c640:	f7f4 fa8a 	bl	8000b58 <__aeabi_d2iz>
 800c644:	4603      	mov	r3, r0
 800c646:	b21a      	sxth	r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
}
 800c64e:	bf00      	nop
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	00000000 	.word	0x00000000
 800c65c:	40d00040 	.word	0x40d00040
 800c660:	40080000 	.word	0x40080000
 800c664:	cccccccd 	.word	0xcccccccd
 800c668:	3ffccccc 	.word	0x3ffccccc
 800c66c:	9999999a 	.word	0x9999999a
 800c670:	3fc99999 	.word	0x3fc99999
 800c674:	00000000 	.word	0x00000000

0800c678 <motors_torque_to_current_3508_gearbox>:
void motors_torque_to_current_3508_gearbox(motor_data_t *motor, float maxCurrent,double dir) {
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	ed87 0a02 	vstr	s0, [r7, #8]
 800c684:	ed87 1b00 	vstr	d1, [r7]
	double current = 0;
 800c688:	f04f 0200 	mov.w	r2, #0
 800c68c:	f04f 0300 	mov.w	r3, #0
 800c690:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (motor->torque > 0){
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c69a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a2:	dd20      	ble.n	800c6e6 <motors_torque_to_current_3508_gearbox+0x6e>
		current = (motor->torque / 4.5) * 20 + 0.08;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7f3 ff4d 	bl	8000548 <__aeabi_f2d>
 800c6ae:	f04f 0200 	mov.w	r2, #0
 800c6b2:	4b55      	ldr	r3, [pc, #340]	; (800c808 <motors_torque_to_current_3508_gearbox+0x190>)
 800c6b4:	f7f4 f8ca 	bl	800084c <__aeabi_ddiv>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4610      	mov	r0, r2
 800c6be:	4619      	mov	r1, r3
 800c6c0:	f04f 0200 	mov.w	r2, #0
 800c6c4:	4b51      	ldr	r3, [pc, #324]	; (800c80c <motors_torque_to_current_3508_gearbox+0x194>)
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	a349      	add	r3, pc, #292	; (adr r3, 800c7f8 <motors_torque_to_current_3508_gearbox+0x180>)
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f7f3 fdd8 	bl	800028c <__adddf3>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c6e4:	e02e      	b.n	800c744 <motors_torque_to_current_3508_gearbox+0xcc>
	} else if(motor->torque < 0){
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c6ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f4:	d520      	bpl.n	800c738 <motors_torque_to_current_3508_gearbox+0xc0>
		current = (motor->torque / 4.5) * 20 - 0.08;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7f3 ff24 	bl	8000548 <__aeabi_f2d>
 800c700:	f04f 0200 	mov.w	r2, #0
 800c704:	4b40      	ldr	r3, [pc, #256]	; (800c808 <motors_torque_to_current_3508_gearbox+0x190>)
 800c706:	f7f4 f8a1 	bl	800084c <__aeabi_ddiv>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4610      	mov	r0, r2
 800c710:	4619      	mov	r1, r3
 800c712:	f04f 0200 	mov.w	r2, #0
 800c716:	4b3d      	ldr	r3, [pc, #244]	; (800c80c <motors_torque_to_current_3508_gearbox+0x194>)
 800c718:	f7f3 ff6e 	bl	80005f8 <__aeabi_dmul>
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	4610      	mov	r0, r2
 800c722:	4619      	mov	r1, r3
 800c724:	a334      	add	r3, pc, #208	; (adr r3, 800c7f8 <motors_torque_to_current_3508_gearbox+0x180>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 fdad 	bl	8000288 <__aeabi_dsub>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c736:	e005      	b.n	800c744 <motors_torque_to_current_3508_gearbox+0xcc>
	} else{
		current = 0;
 800c738:	f04f 0200 	mov.w	r2, #0
 800c73c:	f04f 0300 	mov.w	r3, #0
 800c740:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	if (current > maxCurrent){
 800c744:	68b8      	ldr	r0, [r7, #8]
 800c746:	f7f3 feff 	bl	8000548 <__aeabi_f2d>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c752:	f7f4 f9e1 	bl	8000b18 <__aeabi_dcmpgt>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d007      	beq.n	800c76c <motors_torque_to_current_3508_gearbox+0xf4>
		current = maxCurrent;
 800c75c:	68b8      	ldr	r0, [r7, #8]
 800c75e:	f7f3 fef3 	bl	8000548 <__aeabi_f2d>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c76a:	e01e      	b.n	800c7aa <motors_torque_to_current_3508_gearbox+0x132>
	} else if(current < -maxCurrent){
 800c76c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c770:	eef1 7a67 	vneg.f32	s15, s15
 800c774:	ee17 3a90 	vmov	r3, s15
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f3 fee5 	bl	8000548 <__aeabi_f2d>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c786:	f7f4 f9a9 	bl	8000adc <__aeabi_dcmplt>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00c      	beq.n	800c7aa <motors_torque_to_current_3508_gearbox+0x132>
		current = -maxCurrent;
 800c790:	edd7 7a02 	vldr	s15, [r7, #8]
 800c794:	eef1 7a67 	vneg.f32	s15, s15
 800c798:	ee17 3a90 	vmov	r3, s15
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7f3 fed3 	bl	8000548 <__aeabi_f2d>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	motor->output = ((current * dir)/20.0)*16385.0;
 800c7aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7b2:	f7f3 ff21 	bl	80005f8 <__aeabi_dmul>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4619      	mov	r1, r3
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	4b12      	ldr	r3, [pc, #72]	; (800c80c <motors_torque_to_current_3508_gearbox+0x194>)
 800c7c4:	f7f4 f842 	bl	800084c <__aeabi_ddiv>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	a30b      	add	r3, pc, #44	; (adr r3, 800c800 <motors_torque_to_current_3508_gearbox+0x188>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4610      	mov	r0, r2
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f7f4 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	b21a      	sxth	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
}
 800c7f0:	bf00      	nop
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	47ae147b 	.word	0x47ae147b
 800c7fc:	3fb47ae1 	.word	0x3fb47ae1
 800c800:	00000000 	.word	0x00000000
 800c804:	40d00040 	.word	0x40d00040
 800c808:	40120000 	.word	0x40120000
 800c80c:	40340000 	.word	0x40340000

0800c810 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	ed87 0a01 	vstr	s0, [r7, #4]
 800c81a:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800c81c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c820:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c828:	db0a      	blt.n	800c840 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800c82a:	ed97 0a01 	vldr	s0, [r7, #4]
 800c82e:	f016 fe61 	bl	80234f4 <sqrtf>
 800c832:	eef0 7a40 	vmov.f32	s15, s0
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800c83c:	2300      	movs	r3, #0
 800c83e:	e005      	b.n	800c84c <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	f04f 0200 	mov.w	r2, #0
 800c846:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800c848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800c84c:	4618      	mov	r0, r3
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	0000      	movs	r0, r0
	...

0800c858 <referee_processing_task>:
ref_magazine_data_t ref_mag_data;
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;


void referee_processing_task(void *argument) {
 800c858:	b5b0      	push	{r4, r5, r7, lr}
 800c85a:	b0ca      	sub	sp, #296	; 0x128
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c862:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800c866:	6018      	str	r0, [r3, #0]
	referee_limiters.robot_level = 0;
 800c868:	4ba0      	ldr	r3, [pc, #640]	; (800caec <referee_processing_task+0x294>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	731a      	strb	r2, [r3, #12]
	queue_t referee_uart_q;
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	referee_limiters.feeding_speed = LV1_FEEDER;
 800c86e:	4b9f      	ldr	r3, [pc, #636]	; (800caec <referee_processing_task+0x294>)
 800c870:	f44f 7252 	mov.w	r2, #840	; 0x348
 800c874:	801a      	strh	r2, [r3, #0]
	referee_limiters.projectile_speed = LV1_PROJECTILE;
 800c876:	4b9d      	ldr	r3, [pc, #628]	; (800caec <referee_processing_task+0x294>)
 800c878:	220d      	movs	r2, #13
 800c87a:	805a      	strh	r2, [r3, #2]
	referee_limiters.wheel_power_limit = LV1_POWER * CHASSIS_POWER_MULT;
 800c87c:	4b9b      	ldr	r3, [pc, #620]	; (800caec <referee_processing_task+0x294>)
 800c87e:	4a9c      	ldr	r2, [pc, #624]	; (800caf0 <referee_processing_task+0x298>)
 800c880:	605a      	str	r2, [r3, #4]
	referee_limiters.robot_level = 1;
 800c882:	4b9a      	ldr	r3, [pc, #616]	; (800caec <referee_processing_task+0x294>)
 800c884:	2201      	movs	r2, #1
 800c886:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 800c888:	2100      	movs	r1, #0
 800c88a:	2007      	movs	r0, #7
 800c88c:	f7f5 fc18 	bl	80020c0 <status_led>
	status_led(8, off_led);
 800c890:	2101      	movs	r1, #1
 800c892:	2008      	movs	r0, #8
 800c894:	f7f5 fc14 	bl	80020c0 <status_led>
	uint8_t graphic_sent = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	ref_robot_data.robot_id = 0;
 800c89e:	4b95      	ldr	r3, [pc, #596]	; (800caf4 <referee_processing_task+0x29c>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800c8a4:	f107 030c 	add.w	r3, r7, #12
 800c8a8:	f107 0108 	add.w	r1, r7, #8
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	4892      	ldr	r0, [pc, #584]	; (800caf8 <referee_processing_task+0x2a0>)
 800c8b0:	f7f6 fa1a 	bl	8002ce8 <ref_usart_start>
	while (1) {
//			uint32_t ref_check = ulTaskNotifyTake(pdTRUE, 5);
		status_led(5, on_led);
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	2005      	movs	r0, #5
 800c8b8:	f7f5 fc02 	bl	80020c0 <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 800c8bc:	f107 030c 	add.w	r3, r7, #12
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7f5 fe7c 	bl	80025be <queue_get_size>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b07      	cmp	r3, #7
 800c8ca:	f240 80c1 	bls.w	800ca50 <referee_processing_task+0x1f8>
			while (queue_get_size(&referee_uart_q) > 7) {
 800c8ce:	e0b4      	b.n	800ca3a <referee_processing_task+0x1e2>
				proc_status = ref_process_data(&referee_uart_q, &msg_buffer);
 800c8d0:	f107 030c 	add.w	r3, r7, #12
 800c8d4:	4989      	ldr	r1, [pc, #548]	; (800cafc <referee_processing_task+0x2a4>)
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7f5 fe7e 	bl	80025d8 <ref_process_data>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if (proc_status == PROCESS_SUCCESS) {
 800c8e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f040 80a3 	bne.w	800ca32 <referee_processing_task+0x1da>
					switch (msg_buffer.cmd_id) {
 800c8ec:	4b83      	ldr	r3, [pc, #524]	; (800cafc <referee_processing_task+0x2a4>)
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800c8f4:	f300 809b 	bgt.w	800ca2e <referee_processing_task+0x1d6>
 800c8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8fc:	dc04      	bgt.n	800c908 <referee_processing_task+0xb0>
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d029      	beq.n	800c956 <referee_processing_task+0xfe>
 800c902:	2b03      	cmp	r3, #3
 800c904:	d073      	beq.n	800c9ee <referee_processing_task+0x196>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 800c906:	e092      	b.n	800ca2e <referee_processing_task+0x1d6>
					switch (msg_buffer.cmd_id) {
 800c908:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800c90c:	2b07      	cmp	r3, #7
 800c90e:	f200 808e 	bhi.w	800ca2e <referee_processing_task+0x1d6>
 800c912:	a201      	add	r2, pc, #4	; (adr r2, 800c918 <referee_processing_task+0xc0>)
 800c914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c918:	0800c971 	.word	0x0800c971
 800c91c:	0800c9bd 	.word	0x0800c9bd
 800c920:	0800c99f 	.word	0x0800c99f
 800c924:	0800ca2f 	.word	0x0800ca2f
 800c928:	0800ca2f 	.word	0x0800ca2f
 800c92c:	0800c9db 	.word	0x0800c9db
 800c930:	0800c939 	.word	0x0800c939
 800c934:	0800ca15 	.word	0x0800ca15
						memcpy(&ref_shoot_data, &msg_buffer.data,
 800c938:	4a71      	ldr	r2, [pc, #452]	; (800cb00 <referee_processing_task+0x2a8>)
 800c93a:	4b70      	ldr	r3, [pc, #448]	; (800cafc <referee_processing_task+0x2a4>)
 800c93c:	3302      	adds	r3, #2
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	6010      	str	r0, [r2, #0]
 800c942:	8899      	ldrh	r1, [r3, #4]
 800c944:	799b      	ldrb	r3, [r3, #6]
 800c946:	8091      	strh	r1, [r2, #4]
 800c948:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 800c94a:	4b6e      	ldr	r3, [pc, #440]	; (800cb04 <referee_processing_task+0x2ac>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	4a6c      	ldr	r2, [pc, #432]	; (800cb04 <referee_processing_task+0x2ac>)
 800c952:	6013      	str	r3, [r2, #0]
						break;
 800c954:	e071      	b.n	800ca3a <referee_processing_task+0x1e2>
							memcpy(&ref_game_state, &msg_buffer.data,
 800c956:	4a6c      	ldr	r2, [pc, #432]	; (800cb08 <referee_processing_task+0x2b0>)
 800c958:	4b68      	ldr	r3, [pc, #416]	; (800cafc <referee_processing_task+0x2a4>)
 800c95a:	3302      	adds	r3, #2
 800c95c:	8819      	ldrh	r1, [r3, #0]
 800c95e:	789b      	ldrb	r3, [r3, #2]
 800c960:	8011      	strh	r1, [r2, #0]
 800c962:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 800c964:	4b69      	ldr	r3, [pc, #420]	; (800cb0c <referee_processing_task+0x2b4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3301      	adds	r3, #1
 800c96a:	4a68      	ldr	r2, [pc, #416]	; (800cb0c <referee_processing_task+0x2b4>)
 800c96c:	6013      	str	r3, [r2, #0]
							break;
 800c96e:	e064      	b.n	800ca3a <referee_processing_task+0x1e2>
						memcpy(&ref_robot_data, &msg_buffer.data,
 800c970:	4a60      	ldr	r2, [pc, #384]	; (800caf4 <referee_processing_task+0x29c>)
 800c972:	4b62      	ldr	r3, [pc, #392]	; (800cafc <referee_processing_task+0x2a4>)
 800c974:	4614      	mov	r4, r2
 800c976:	1c9d      	adds	r5, r3, #2
 800c978:	6828      	ldr	r0, [r5, #0]
 800c97a:	6869      	ldr	r1, [r5, #4]
 800c97c:	68aa      	ldr	r2, [r5, #8]
 800c97e:	68eb      	ldr	r3, [r5, #12]
 800c980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c982:	6928      	ldr	r0, [r5, #16]
 800c984:	6969      	ldr	r1, [r5, #20]
 800c986:	c403      	stmia	r4!, {r0, r1}
 800c988:	8b2b      	ldrh	r3, [r5, #24]
 800c98a:	7eaa      	ldrb	r2, [r5, #26]
 800c98c:	8023      	strh	r3, [r4, #0]
 800c98e:	4613      	mov	r3, r2
 800c990:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800c992:	4b5f      	ldr	r3, [pc, #380]	; (800cb10 <referee_processing_task+0x2b8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	3301      	adds	r3, #1
 800c998:	4a5d      	ldr	r2, [pc, #372]	; (800cb10 <referee_processing_task+0x2b8>)
 800c99a:	6013      	str	r3, [r2, #0]
						break;
 800c99c:	e04d      	b.n	800ca3a <referee_processing_task+0x1e2>
						memcpy(&ref_robot_pos, &msg_buffer.data,
 800c99e:	4a5d      	ldr	r2, [pc, #372]	; (800cb14 <referee_processing_task+0x2bc>)
 800c9a0:	4b56      	ldr	r3, [pc, #344]	; (800cafc <referee_processing_task+0x2a4>)
 800c9a2:	4614      	mov	r4, r2
 800c9a4:	3302      	adds	r3, #2
 800c9a6:	6818      	ldr	r0, [r3, #0]
 800c9a8:	6859      	ldr	r1, [r3, #4]
 800c9aa:	689a      	ldr	r2, [r3, #8]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_robot_pos_txno++;
 800c9b0:	4b59      	ldr	r3, [pc, #356]	; (800cb18 <referee_processing_task+0x2c0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	4a58      	ldr	r2, [pc, #352]	; (800cb18 <referee_processing_task+0x2c0>)
 800c9b8:	6013      	str	r3, [r2, #0]
						break;
 800c9ba:	e03e      	b.n	800ca3a <referee_processing_task+0x1e2>
						memcpy(&ref_power_data, &msg_buffer.data,
 800c9bc:	4b57      	ldr	r3, [pc, #348]	; (800cb1c <referee_processing_task+0x2c4>)
 800c9be:	4a4f      	ldr	r2, [pc, #316]	; (800cafc <referee_processing_task+0x2a4>)
 800c9c0:	1c94      	adds	r4, r2, #2
 800c9c2:	6820      	ldr	r0, [r4, #0]
 800c9c4:	6861      	ldr	r1, [r4, #4]
 800c9c6:	68a2      	ldr	r2, [r4, #8]
 800c9c8:	c307      	stmia	r3!, {r0, r1, r2}
 800c9ca:	89a2      	ldrh	r2, [r4, #12]
 800c9cc:	801a      	strh	r2, [r3, #0]
						ref_power_data_txno++;
 800c9ce:	4b54      	ldr	r3, [pc, #336]	; (800cb20 <referee_processing_task+0x2c8>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	4a52      	ldr	r2, [pc, #328]	; (800cb20 <referee_processing_task+0x2c8>)
 800c9d6:	6013      	str	r3, [r2, #0]
						break;
 800c9d8:	e02f      	b.n	800ca3a <referee_processing_task+0x1e2>
 800c9da:	4b48      	ldr	r3, [pc, #288]	; (800cafc <referee_processing_task+0x2a4>)
 800c9dc:	789a      	ldrb	r2, [r3, #2]
						memcpy(&ref_dmg_data, &msg_buffer.data,
 800c9de:	4b51      	ldr	r3, [pc, #324]	; (800cb24 <referee_processing_task+0x2cc>)
 800c9e0:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 800c9e2:	4b51      	ldr	r3, [pc, #324]	; (800cb28 <referee_processing_task+0x2d0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	4a4f      	ldr	r2, [pc, #316]	; (800cb28 <referee_processing_task+0x2d0>)
 800c9ea:	6013      	str	r3, [r2, #0]
						break;
 800c9ec:	e025      	b.n	800ca3a <referee_processing_task+0x1e2>
						memcpy(&ref_robot_hp, &msg_buffer.data,
 800c9ee:	4a4f      	ldr	r2, [pc, #316]	; (800cb2c <referee_processing_task+0x2d4>)
 800c9f0:	4b42      	ldr	r3, [pc, #264]	; (800cafc <referee_processing_task+0x2a4>)
 800c9f2:	4614      	mov	r4, r2
 800c9f4:	1c9d      	adds	r5, r3, #2
 800c9f6:	6828      	ldr	r0, [r5, #0]
 800c9f8:	6869      	ldr	r1, [r5, #4]
 800c9fa:	68aa      	ldr	r2, [r5, #8]
 800c9fc:	68eb      	ldr	r3, [r5, #12]
 800c9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca00:	6928      	ldr	r0, [r5, #16]
 800ca02:	6969      	ldr	r1, [r5, #20]
 800ca04:	69aa      	ldr	r2, [r5, #24]
 800ca06:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 800ca08:	4b49      	ldr	r3, [pc, #292]	; (800cb30 <referee_processing_task+0x2d8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	4a48      	ldr	r2, [pc, #288]	; (800cb30 <referee_processing_task+0x2d8>)
 800ca10:	6013      	str	r3, [r2, #0]
						break;
 800ca12:	e012      	b.n	800ca3a <referee_processing_task+0x1e2>
						memcpy(&ref_mag_data, &msg_buffer.data,
 800ca14:	4a47      	ldr	r2, [pc, #284]	; (800cb34 <referee_processing_task+0x2dc>)
 800ca16:	4b39      	ldr	r3, [pc, #228]	; (800cafc <referee_processing_task+0x2a4>)
 800ca18:	3302      	adds	r3, #2
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	6010      	str	r0, [r2, #0]
 800ca1e:	889b      	ldrh	r3, [r3, #4]
 800ca20:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 800ca22:	4b45      	ldr	r3, [pc, #276]	; (800cb38 <referee_processing_task+0x2e0>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3301      	adds	r3, #1
 800ca28:	4a43      	ldr	r2, [pc, #268]	; (800cb38 <referee_processing_task+0x2e0>)
 800ca2a:	6013      	str	r3, [r2, #0]
						break;
 800ca2c:	e005      	b.n	800ca3a <referee_processing_task+0x1e2>
						break;
 800ca2e:	bf00      	nop
 800ca30:	e003      	b.n	800ca3a <referee_processing_task+0x1e2>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 800ca32:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d009      	beq.n	800ca4e <referee_processing_task+0x1f6>
			while (queue_get_size(&referee_uart_q) > 7) {
 800ca3a:	f107 030c 	add.w	r3, r7, #12
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7f5 fdbd 	bl	80025be <queue_get_size>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b07      	cmp	r3, #7
 800ca48:	f63f af42 	bhi.w	800c8d0 <referee_processing_task+0x78>
 800ca4c:	e000      	b.n	800ca50 <referee_processing_task+0x1f8>
					break;
 800ca4e:	bf00      	nop
				}
			}
		}

		status_led(5, off_led);
 800ca50:	2101      	movs	r1, #1
 800ca52:	2005      	movs	r0, #5
 800ca54:	f7f5 fb34 	bl	80020c0 <status_led>
		static uint32_t last_sent;

		status_led(5, on_led);
 800ca58:	2100      	movs	r1, #0
 800ca5a:	2005      	movs	r0, #5
 800ca5c:	f7f5 fb30 	bl	80020c0 <status_led>
		if (ref_robot_data.robot_level == 1) {
 800ca60:	4b24      	ldr	r3, [pc, #144]	; (800caf4 <referee_processing_task+0x29c>)
 800ca62:	785b      	ldrb	r3, [r3, #1]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d112      	bne.n	800ca8e <referee_processing_task+0x236>
			referee_limiters.feeding_speed = LV1_FEEDER;
 800ca68:	4b20      	ldr	r3, [pc, #128]	; (800caec <referee_processing_task+0x294>)
 800ca6a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800ca6e:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 800ca70:	4b1e      	ldr	r3, [pc, #120]	; (800caec <referee_processing_task+0x294>)
 800ca72:	220d      	movs	r2, #13
 800ca74:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 1;
 800ca76:	4b1d      	ldr	r3, [pc, #116]	; (800caec <referee_processing_task+0x294>)
 800ca78:	2201      	movs	r2, #1
 800ca7a:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	2007      	movs	r0, #7
 800ca80:	f7f5 fb1e 	bl	80020c0 <status_led>
			status_led(8, off_led);
 800ca84:	2101      	movs	r1, #1
 800ca86:	2008      	movs	r0, #8
 800ca88:	f7f5 fb1a 	bl	80020c0 <status_led>
 800ca8c:	e05d      	b.n	800cb4a <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 2) {
 800ca8e:	4b19      	ldr	r3, [pc, #100]	; (800caf4 <referee_processing_task+0x29c>)
 800ca90:	785b      	ldrb	r3, [r3, #1]
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d112      	bne.n	800cabc <referee_processing_task+0x264>
			referee_limiters.feeding_speed = LV2_FEEDER;
 800ca96:	4b15      	ldr	r3, [pc, #84]	; (800caec <referee_processing_task+0x294>)
 800ca98:	f44f 7252 	mov.w	r2, #840	; 0x348
 800ca9c:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV2_PROJECTILE;
 800ca9e:	4b13      	ldr	r3, [pc, #76]	; (800caec <referee_processing_task+0x294>)
 800caa0:	220d      	movs	r2, #13
 800caa2:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 2;
 800caa4:	4b11      	ldr	r3, [pc, #68]	; (800caec <referee_processing_task+0x294>)
 800caa6:	2202      	movs	r2, #2
 800caa8:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 800caaa:	2101      	movs	r1, #1
 800caac:	2007      	movs	r0, #7
 800caae:	f7f5 fb07 	bl	80020c0 <status_led>
			status_led(8, on_led);
 800cab2:	2100      	movs	r1, #0
 800cab4:	2008      	movs	r0, #8
 800cab6:	f7f5 fb03 	bl	80020c0 <status_led>
 800caba:	e046      	b.n	800cb4a <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 3) {
 800cabc:	4b0d      	ldr	r3, [pc, #52]	; (800caf4 <referee_processing_task+0x29c>)
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	d13b      	bne.n	800cb3c <referee_processing_task+0x2e4>
			referee_limiters.feeding_speed = LV3_FEEDER;
 800cac4:	4b09      	ldr	r3, [pc, #36]	; (800caec <referee_processing_task+0x294>)
 800cac6:	f44f 7252 	mov.w	r2, #840	; 0x348
 800caca:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV3_PROJECTILE;
 800cacc:	4b07      	ldr	r3, [pc, #28]	; (800caec <referee_processing_task+0x294>)
 800cace:	220d      	movs	r2, #13
 800cad0:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 3;
 800cad2:	4b06      	ldr	r3, [pc, #24]	; (800caec <referee_processing_task+0x294>)
 800cad4:	2203      	movs	r2, #3
 800cad6:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800cad8:	2100      	movs	r1, #0
 800cada:	2007      	movs	r0, #7
 800cadc:	f7f5 faf0 	bl	80020c0 <status_led>
			status_led(8, on_led);
 800cae0:	2100      	movs	r1, #0
 800cae2:	2008      	movs	r0, #8
 800cae4:	f7f5 faec 	bl	80020c0 <status_led>
 800cae8:	e02f      	b.n	800cb4a <referee_processing_task+0x2f2>
 800caea:	bf00      	nop
 800caec:	20003210 	.word	0x20003210
 800caf0:	42700000 	.word	0x42700000
 800caf4:	20003294 	.word	0x20003294
 800caf8:	200016d8 	.word	0x200016d8
 800cafc:	20003228 	.word	0x20003228
 800cb00:	200032e4 	.word	0x200032e4
 800cb04:	200032ec 	.word	0x200032ec
 800cb08:	2000326c 	.word	0x2000326c
 800cb0c:	20003270 	.word	0x20003270
 800cb10:	200032b0 	.word	0x200032b0
 800cb14:	200032c8 	.word	0x200032c8
 800cb18:	200032d8 	.word	0x200032d8
 800cb1c:	200032b4 	.word	0x200032b4
 800cb20:	200032c4 	.word	0x200032c4
 800cb24:	200032dc 	.word	0x200032dc
 800cb28:	200032e0 	.word	0x200032e0
 800cb2c:	20003274 	.word	0x20003274
 800cb30:	20003290 	.word	0x20003290
 800cb34:	200032f0 	.word	0x200032f0
 800cb38:	200032f8 	.word	0x200032f8
		} else {
			referee_limiters.feeding_speed = LV1_FEEDER;
 800cb3c:	4b44      	ldr	r3, [pc, #272]	; (800cc50 <referee_processing_task+0x3f8>)
 800cb3e:	f44f 7252 	mov.w	r2, #840	; 0x348
 800cb42:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 800cb44:	4b42      	ldr	r3, [pc, #264]	; (800cc50 <referee_processing_task+0x3f8>)
 800cb46:	220d      	movs	r2, #13
 800cb48:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 800cb4a:	4b42      	ldr	r3, [pc, #264]	; (800cc54 <referee_processing_task+0x3fc>)
 800cb4c:	785b      	ldrb	r3, [r3, #1]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d06e      	beq.n	800cc30 <referee_processing_task+0x3d8>
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 800cb52:	4b41      	ldr	r3, [pc, #260]	; (800cc58 <referee_processing_task+0x400>)
 800cb54:	891b      	ldrh	r3, [r3, #8]
 800cb56:	ee07 3a90 	vmov	s15, r3
 800cb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
					/ 40) + 0.01);
 800cb5e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800cc5c <referee_processing_task+0x404>
 800cb62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cb66:	ee16 0a90 	vmov	r0, s13
 800cb6a:	f7f3 fced 	bl	8000548 <__aeabi_f2d>
 800cb6e:	a336      	add	r3, pc, #216	; (adr r3, 800cc48 <referee_processing_task+0x3f0>)
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f7f3 fb8a 	bl	800028c <__adddf3>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f7f4 f832 	bl	8000be8 <__aeabi_d2f>
 800cb84:	4603      	mov	r3, r0
 800cb86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 800cb8a:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800cb8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb9a:	dd02      	ble.n	800cba2 <referee_processing_task+0x34a>
 800cb9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cba0:	e001      	b.n	800cba6 <referee_processing_task+0x34e>
 800cba2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cba6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 800cbaa:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800cbae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cbb2:	4b27      	ldr	r3, [pc, #156]	; (800cc50 <referee_processing_task+0x3f8>)
 800cbb4:	edc3 7a02 	vstr	s15, [r3, #8]
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800cbb8:	4b27      	ldr	r3, [pc, #156]	; (800cc58 <referee_processing_task+0x400>)
 800cbba:	ed93 7a01 	vldr	s14, [r3, #4]
 800cbbe:	4b25      	ldr	r3, [pc, #148]	; (800cc54 <referee_processing_task+0x3fc>)
 800cbc0:	8b1b      	ldrh	r3, [r3, #24]
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cbce:	ee16 0a90 	vmov	r0, s13
 800cbd2:	f7f3 fcb9 	bl	8000548 <__aeabi_f2d>
					) * 0.5) + 0.5;
 800cbd6:	f04f 0200 	mov.w	r2, #0
 800cbda:	4b21      	ldr	r3, [pc, #132]	; (800cc60 <referee_processing_task+0x408>)
 800cbdc:	f7f3 fd0c 	bl	80005f8 <__aeabi_dmul>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	f04f 0200 	mov.w	r2, #0
 800cbec:	4b1c      	ldr	r3, [pc, #112]	; (800cc60 <referee_processing_task+0x408>)
 800cbee:	f7f3 fb4d 	bl	800028c <__adddf3>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	f7f3 fff5 	bl	8000be8 <__aeabi_d2f>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			temp_power = (temp_power > 1) ? 1 : temp_power;
 800cc04:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800cc08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc14:	dd02      	ble.n	800cc1c <referee_processing_task+0x3c4>
 800cc16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cc1a:	e001      	b.n	800cc20 <referee_processing_task+0x3c8>
 800cc1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cc20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
 800cc24:	480f      	ldr	r0, [pc, #60]	; (800cc64 <referee_processing_task+0x40c>)
 800cc26:	ed97 0a47 	vldr	s0, [r7, #284]	; 0x11c
 800cc2a:	f7ff fdf1 	bl	800c810 <arm_sqrt_f32>
 800cc2e:	e007      	b.n	800cc40 <referee_processing_task+0x3e8>
		} else {
			referee_limiters.wheel_buffer_limit = 1;
 800cc30:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <referee_processing_task+0x3f8>)
 800cc32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc36:	609a      	str	r2, [r3, #8]
			referee_limiters.wheel_power_limit = 1;
 800cc38:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <referee_processing_task+0x3f8>)
 800cc3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc3e:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(10);
 800cc40:	200a      	movs	r0, #10
 800cc42:	f00e ff25 	bl	801ba90 <vTaskDelay>
	while (1) {
 800cc46:	e635      	b.n	800c8b4 <referee_processing_task+0x5c>
 800cc48:	47ae147b 	.word	0x47ae147b
 800cc4c:	3f847ae1 	.word	0x3f847ae1
 800cc50:	20003210 	.word	0x20003210
 800cc54:	20003294 	.word	0x20003294
 800cc58:	200032b4 	.word	0x200032b4
 800cc5c:	42200000 	.word	0x42200000
 800cc60:	3fe00000 	.word	0x3fe00000
 800cc64:	20003214 	.word	0x20003214

0800cc68 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 800cc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 800cc72:	683c      	ldr	r4, [r7, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	461e      	mov	r6, r3
 800cc7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc82:	4b0f      	ldr	r3, [pc, #60]	; (800ccc0 <rtIsInf+0x58>)
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 ff50 	bl	8000b2c <__aeabi_dcmpun>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10b      	bne.n	800ccaa <rtIsInf+0x42>
 800cc92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc96:	4b0a      	ldr	r3, [pc, #40]	; (800ccc0 <rtIsInf+0x58>)
 800cc98:	4620      	mov	r0, r4
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	f7f3 ff28 	bl	8000af0 <__aeabi_dcmple>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <rtIsInf+0x42>
 800cca6:	2300      	movs	r3, #0
 800cca8:	461e      	mov	r6, r3
 800ccaa:	b2f3      	uxtb	r3, r6
 800ccac:	f083 0301 	eor.w	r3, r3, #1
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	b2db      	uxtb	r3, r3
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccc0:	7fefffff 	.word	0x7fefffff

0800ccc4 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800ccce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccd6:	f7f3 ff29 	bl	8000b2c <__aeabi_dcmpun>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <rtIsNaN+0x20>
 800cce0:	2301      	movs	r3, #1
 800cce2:	e000      	b.n	800cce6 <rtIsNaN+0x22>
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <startup_task>:
extern remote_cmd_t remote_cmd;
extern float pitch;
extern float yaw;
uint16_t error = 0b111111111;

void startup_task() {
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 800ccf2:	f7f5 f9bf 	bl	8002074 <led_on>
	//buzzer_init();
	imu_init();
 800ccf6:	f7f4 ffc5 	bl	8001c84 <imu_init>
	led_green_off();
 800ccfa:	f7f5 f9ad 	bl	8002058 <led_green_off>
	start_micros_timer();
 800ccfe:	f7f5 fa9f 	bl	8002240 <start_micros_timer>
	led_toggle();
 800cd02:	f7f5 f9d5 	bl	80020b0 <led_toggle>

}
 800cd06:	bf00      	nop
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <sbc_process_data>:
sbc_data_t sbc_data;
uint8_t sbc_new_data = 0;
uint8_t sbc_dma_buffer[20];
static uint8_t sbc_error;

void sbc_process_data() {
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	af00      	add	r7, sp, #0
	if (sbc_dma_buffer[0] == 0xa5 && sbc_dma_buffer[14] == 0x5a){
 800cd10:	4b13      	ldr	r3, [pc, #76]	; (800cd60 <sbc_process_data+0x54>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2ba5      	cmp	r3, #165	; 0xa5
 800cd16:	d119      	bne.n	800cd4c <sbc_process_data+0x40>
 800cd18:	4b11      	ldr	r3, [pc, #68]	; (800cd60 <sbc_process_data+0x54>)
 800cd1a:	7b9b      	ldrb	r3, [r3, #14]
 800cd1c:	2b5a      	cmp	r3, #90	; 0x5a
 800cd1e:	d115      	bne.n	800cd4c <sbc_process_data+0x40>
		sbc_data.cmd_id = sbc_dma_buffer[1];
 800cd20:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <sbc_process_data+0x54>)
 800cd22:	785a      	ldrb	r2, [r3, #1]
 800cd24:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <sbc_process_data+0x58>)
 800cd26:	701a      	strb	r2, [r3, #0]
		memcpy(&sbc_data.data, sbc_dma_buffer+2,12);
 800cd28:	4a0f      	ldr	r2, [pc, #60]	; (800cd68 <sbc_process_data+0x5c>)
 800cd2a:	4b0e      	ldr	r3, [pc, #56]	; (800cd64 <sbc_process_data+0x58>)
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	6810      	ldr	r0, [r2, #0]
 800cd30:	6851      	ldr	r1, [r2, #4]
 800cd32:	6892      	ldr	r2, [r2, #8]
 800cd34:	6018      	str	r0, [r3, #0]
 800cd36:	6059      	str	r1, [r3, #4]
 800cd38:	609a      	str	r2, [r3, #8]
		sbc_new_data = 1;
 800cd3a:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <sbc_process_data+0x60>)
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	701a      	strb	r2, [r3, #0]
		sbc_last_time = HAL_GetTick();
 800cd40:	f001 fbfc 	bl	800e53c <HAL_GetTick>
 800cd44:	4603      	mov	r3, r0
 800cd46:	4a0a      	ldr	r2, [pc, #40]	; (800cd70 <sbc_process_data+0x64>)
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	e006      	b.n	800cd5a <sbc_process_data+0x4e>
	} else {
		sbc_error +=1;
 800cd4c:	4b09      	ldr	r3, [pc, #36]	; (800cd74 <sbc_process_data+0x68>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	3301      	adds	r3, #1
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	4b07      	ldr	r3, [pc, #28]	; (800cd74 <sbc_process_data+0x68>)
 800cd56:	701a      	strb	r2, [r3, #0]
//	queue_append_bytes(&g_sbc_queue, sbc_dma_buffer, 15);
//	BaseType_t xHigherPriorityTaskWoken;
//	xHigherPriorityTaskWoken = pdFALSE;
//	vTaskNotifyGiveFromISR(telemetry_task_handle, &xHigherPriorityTaskWoken);
//	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20003420 	.word	0x20003420
 800cd64:	20003410 	.word	0x20003410
 800cd68:	20003422 	.word	0x20003422
 800cd6c:	2000341d 	.word	0x2000341d
 800cd70:	20003008 	.word	0x20003008
 800cd74:	20003434 	.word	0x20003434

0800cd78 <telemetry_task>:

//lol more stuff to add
void telemetry_task(void *argument) {
 800cd78:	b590      	push	{r4, r7, lr}
 800cd7a:	b0d3      	sub	sp, #332	; 0x14c
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800cd86:	6018      	str	r0, [r3, #0]

	uint8_t send_buffer[256];
	uint32_t curr_time = HAL_GetTick();
 800cd88:	f001 fbd8 	bl	800e53c <HAL_GetTick>
 800cd8c:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	uint32_t game_data_time = curr_time;
 800cd90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cd94:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint32_t imu_data_time = curr_time;
 800cd98:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800cd9c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	sbc_game_data_t sbc_game_tx;
	queue_init(&g_sbc_queue);
 800cda0:	4888      	ldr	r0, [pc, #544]	; (800cfc4 <telemetry_task+0x24c>)
 800cda2:	f7f5 fa71 	bl	8002288 <queue_init>

	sbc_game_tx.header = 0xA5;
 800cda6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cdaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cdae:	22a5      	movs	r2, #165	; 0xa5
 800cdb0:	701a      	strb	r2, [r3, #0]
	sbc_game_tx.cmd_id = 0x80;
 800cdb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cdb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cdba:	2280      	movs	r2, #128	; 0x80
 800cdbc:	705a      	strb	r2, [r3, #1]
	sbc_game_tx.team = 1;
 800cdbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cdc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	709a      	strb	r2, [r3, #2]
	sbc_game_tx.robot_id = 1;
 800cdca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cdce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	70da      	strb	r2, [r3, #3]
	sbc_game_tx.robot_level = 1;
 800cdd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cdda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cdde:	2201      	movs	r2, #1
 800cde0:	711a      	strb	r2, [r3, #4]
	sbc_game_tx.remaining_time = 1000;
 800cde2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cde6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cdea:	2200      	movs	r2, #0
 800cdec:	f062 0217 	orn	r2, r2, #23
 800cdf0:	715a      	strb	r2, [r3, #5]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f042 0203 	orr.w	r2, r2, #3
 800cdf8:	719a      	strb	r2, [r3, #6]
	sbc_game_tx.ammo = 10;
 800cdfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cdfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce02:	2200      	movs	r2, #0
 800ce04:	f042 020a 	orr.w	r2, r2, #10
 800ce08:	71da      	strb	r2, [r3, #7]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	721a      	strb	r2, [r3, #8]
	sbc_game_tx.end_byte = 0x5A;
 800ce0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce16:	225a      	movs	r2, #90	; 0x5a
 800ce18:	739a      	strb	r2, [r3, #14]
	sbc_game_tx.padding[0] = 0;
 800ce1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce22:	2200      	movs	r2, #0
 800ce24:	725a      	strb	r2, [r3, #9]
	sbc_game_tx.padding[1] = 0;
 800ce26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce2e:	2200      	movs	r2, #0
 800ce30:	729a      	strb	r2, [r3, #10]
	sbc_game_tx.padding[2] = 0;
 800ce32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	72da      	strb	r2, [r3, #11]
	sbc_game_tx.padding[3] = 0;
 800ce3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce46:	2200      	movs	r2, #0
 800ce48:	731a      	strb	r2, [r3, #12]
	sbc_game_tx.padding[4] = 0;
 800ce4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ce52:	2200      	movs	r2, #0
 800ce54:	735a      	strb	r2, [r3, #13]

	//insert sbc control here, end byte 0x5B
	sbc_imu_data_t sbc_imu_tx;
	sbc_imu_tx.cmd_id = 0x82;
 800ce56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce5e:	2282      	movs	r2, #130	; 0x82
 800ce60:	705a      	strb	r2, [r3, #1]
	sbc_imu_tx.end_byte = 0x5C;
 800ce62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce6a:	225c      	movs	r2, #92	; 0x5c
 800ce6c:	739a      	strb	r2, [r3, #14]
	sbc_imu_tx.header = 0xA5;
 800ce6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ce76:	22a5      	movs	r2, #165	; 0xa5
 800ce78:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[15];;
				init_xvr_usart(sbc_dma_buffer);
 800ce7a:	4853      	ldr	r0, [pc, #332]	; (800cfc8 <telemetry_task+0x250>)
 800ce7c:	f7f5 fe98 	bl	8002bb0 <init_xvr_usart>
//					break;
//				}
//			}
//		}

		if (ref_robot_data.robot_id != 0){
 800ce80:	4b52      	ldr	r3, [pc, #328]	; (800cfcc <telemetry_task+0x254>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d047      	beq.n	800cf18 <telemetry_task+0x1a0>
			sbc_game_tx.team = (ref_robot_data.robot_id < 100) ? 1 : 0;
 800ce88:	4b50      	ldr	r3, [pc, #320]	; (800cfcc <telemetry_task+0x254>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b63      	cmp	r3, #99	; 0x63
 800ce8e:	bf94      	ite	ls
 800ce90:	2301      	movls	r3, #1
 800ce92:	2300      	movhi	r3, #0
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	461a      	mov	r2, r3
 800ce98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cea0:	709a      	strb	r2, [r3, #2]
			sbc_game_tx.robot_id = ref_robot_data.robot_id;
 800cea2:	4b4a      	ldr	r3, [pc, #296]	; (800cfcc <telemetry_task+0x254>)
 800cea4:	781a      	ldrb	r2, [r3, #0]
 800cea6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ceaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ceae:	70da      	strb	r2, [r3, #3]
			sbc_game_tx.remaining_time = ref_game_state.stage_remain_time;
 800ceb0:	4b47      	ldr	r3, [pc, #284]	; (800cfd0 <telemetry_task+0x258>)
 800ceb2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cebc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cec0:	f8a3 2005 	strh.w	r2, [r3, #5]
			sbc_game_tx.ammo = ref_mag_data.magazine_17mm;
 800cec4:	4b43      	ldr	r3, [pc, #268]	; (800cfd4 <telemetry_task+0x25c>)
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cece:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ced2:	f8a3 2007 	strh.w	r2, [r3, #7]
			memcpy(send_buffer, &sbc_game_tx, 15);
 800ced6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ceda:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800cede:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cee2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cee6:	4614      	mov	r4, r2
 800cee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ceea:	c407      	stmia	r4!, {r0, r1, r2}
 800ceec:	8023      	strh	r3, [r4, #0]
 800ceee:	3402      	adds	r4, #2
 800cef0:	0c1b      	lsrs	r3, r3, #16
 800cef2:	7023      	strb	r3, [r4, #0]
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800cef4:	e002      	b.n	800cefc <telemetry_task+0x184>
				vTaskDelay(1);
 800cef6:	2001      	movs	r0, #1
 800cef8:	f00e fdca 	bl	801ba90 <vTaskDelay>
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800cefc:	4b36      	ldr	r3, [pc, #216]	; (800cfd8 <telemetry_task+0x260>)
 800cefe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b21      	cmp	r3, #33	; 0x21
 800cf06:	d0f6      	beq.n	800cef6 <telemetry_task+0x17e>
			}
			HAL_UART_Transmit_IT(&SBC_UART, send_buffer, 15);
 800cf08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf0c:	220f      	movs	r2, #15
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4831      	ldr	r0, [pc, #196]	; (800cfd8 <telemetry_task+0x260>)
 800cf12:	f008 fe00 	bl	8015b16 <HAL_UART_Transmit_IT>
 800cf16:	e043      	b.n	800cfa0 <telemetry_task+0x228>
		} else {
			sbc_game_tx.team = 1;
 800cf18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf20:	2201      	movs	r2, #1
 800cf22:	709a      	strb	r2, [r3, #2]
			sbc_game_tx.robot_id = 0;
 800cf24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	70da      	strb	r2, [r3, #3]
			sbc_game_tx.remaining_time = 999;
 800cf30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f062 0218 	orn	r2, r2, #24
 800cf3e:	715a      	strb	r2, [r3, #5]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f042 0203 	orr.w	r2, r2, #3
 800cf46:	719a      	strb	r2, [r3, #6]
			sbc_game_tx.ammo = 999;
 800cf48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf50:	2200      	movs	r2, #0
 800cf52:	f062 0218 	orn	r2, r2, #24
 800cf56:	71da      	strb	r2, [r3, #7]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f042 0203 	orr.w	r2, r2, #3
 800cf5e:	721a      	strb	r2, [r3, #8]
			memcpy(send_buffer, &sbc_game_tx, 15);
 800cf60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf64:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800cf68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cf70:	4614      	mov	r4, r2
 800cf72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf74:	c407      	stmia	r4!, {r0, r1, r2}
 800cf76:	8023      	strh	r3, [r4, #0]
 800cf78:	3402      	adds	r4, #2
 800cf7a:	0c1b      	lsrs	r3, r3, #16
 800cf7c:	7023      	strb	r3, [r4, #0]
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800cf7e:	e002      	b.n	800cf86 <telemetry_task+0x20e>
				vTaskDelay(1);
 800cf80:	2001      	movs	r0, #1
 800cf82:	f00e fd85 	bl	801ba90 <vTaskDelay>
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800cf86:	4b14      	ldr	r3, [pc, #80]	; (800cfd8 <telemetry_task+0x260>)
 800cf88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b21      	cmp	r3, #33	; 0x21
 800cf90:	d0f6      	beq.n	800cf80 <telemetry_task+0x208>
			}
			HAL_UART_Transmit_IT(&SBC_UART, send_buffer, 15);
 800cf92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf96:	220f      	movs	r2, #15
 800cf98:	4619      	mov	r1, r3
 800cf9a:	480f      	ldr	r0, [pc, #60]	; (800cfd8 <telemetry_task+0x260>)
 800cf9c:	f008 fdbb 	bl	8015b16 <HAL_UART_Transmit_IT>
		}

		if (sbc_error >= 1){
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <telemetry_task+0x264>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d008      	beq.n	800cfba <telemetry_task+0x242>
			HAL_UART_DMAStop(&SBC_UART);
 800cfa8:	480b      	ldr	r0, [pc, #44]	; (800cfd8 <telemetry_task+0x260>)
 800cfaa:	f008 fe77 	bl	8015c9c <HAL_UART_DMAStop>
			init_xvr_usart(sbc_dma_buffer);
 800cfae:	4806      	ldr	r0, [pc, #24]	; (800cfc8 <telemetry_task+0x250>)
 800cfb0:	f7f5 fdfe 	bl	8002bb0 <init_xvr_usart>
			sbc_error = 0;
 800cfb4:	4b09      	ldr	r3, [pc, #36]	; (800cfdc <telemetry_task+0x264>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(1000);
 800cfba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfbe:	f00e fd67 	bl	801ba90 <vTaskDelay>
		if (ref_robot_data.robot_id != 0){
 800cfc2:	e75d      	b.n	800ce80 <telemetry_task+0x108>
 800cfc4:	20003300 	.word	0x20003300
 800cfc8:	20003420 	.word	0x20003420
 800cfcc:	20003294 	.word	0x20003294
 800cfd0:	2000326c 	.word	0x2000326c
 800cfd4:	200032f0 	.word	0x200032f0
 800cfd8:	20001650 	.word	0x20001650
 800cfdc:	20003434 	.word	0x20003434

0800cfe0 <usb_vcp_processing>:
uint8_t usb_waiting = 0;

//#define DATA_OUTPUT_MODE
#define USB_CONFIG_MODE

void usb_vcp_processing(uint8_t *buffer, uint32_t *len) {
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b0c4      	sub	sp, #272	; 0x110
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cfea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cfee:	6018      	str	r0, [r3, #0]
 800cff0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cff4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cff8:	6019      	str	r1, [r3, #0]
	uint8_t blank_buffer[MAX_CHAR_SIZE] = { 0 };
 800cffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cffe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	3304      	adds	r3, #4
 800d008:	22fc      	movs	r2, #252	; 0xfc
 800d00a:	2100      	movs	r1, #0
 800d00c:	4618      	mov	r0, r3
 800d00e:	f011 fab0 	bl	801e572 <memset>
	memcpy(blank_buffer, buffer, *len);
 800d012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d016:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d022:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d026:	f107 0010 	add.w	r0, r7, #16
 800d02a:	6819      	ldr	r1, [r3, #0]
 800d02c:	f011 fa93 	bl	801e556 <memcpy>
	memcpy(usb_input_buffer, blank_buffer, MAX_CHAR_SIZE);
 800d030:	4a1a      	ldr	r2, [pc, #104]	; (800d09c <usb_vcp_processing+0xbc>)
 800d032:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d036:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d03a:	4610      	mov	r0, r2
 800d03c:	4619      	mov	r1, r3
 800d03e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d042:	461a      	mov	r2, r3
 800d044:	f011 fa87 	bl	801e556 <memcpy>
	usb_input_len = *len;
 800d048:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d04c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a12      	ldr	r2, [pc, #72]	; (800d0a0 <usb_vcp_processing+0xc0>)
 800d056:	6013      	str	r3, [r2, #0]

	//Check if the currently running task needs to yield
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800d058:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d05c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d060:	2200      	movs	r2, #0
 800d062:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR(usb_continue_semaphore, &xHigherPriorityTaskWoken);
 800d064:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <usb_vcp_processing+0xc4>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f107 020c 	add.w	r2, r7, #12
 800d06c:	4611      	mov	r1, r2
 800d06e:	4618      	mov	r0, r3
 800d070:	f00d fffb 	bl	801b06a <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800d074:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d007      	beq.n	800d092 <usb_vcp_processing+0xb2>
 800d082:	4b09      	ldr	r3, [pc, #36]	; (800d0a8 <usb_vcp_processing+0xc8>)
 800d084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	f3bf 8f6f 	isb	sy
}
 800d092:	bf00      	nop
 800d094:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	20003438 	.word	0x20003438
 800d0a0:	20003538 	.word	0x20003538
 800d0a4:	200004c8 	.word	0x200004c8
 800d0a8:	e000ed04 	.word	0xe000ed04

0800d0ac <usb_task>:
	return 0;

}


void usb_task(void *argument) {
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
//						CDC_Transmit_FS(usb_input_buffer, len);
//					}
//				}
//			}
//		}
		vTaskDelay(100);
 800d0b4:	2064      	movs	r0, #100	; 0x64
 800d0b6:	f00e fceb 	bl	801ba90 <vTaskDelay>
 800d0ba:	e7fb      	b.n	800d0b4 <usb_task+0x8>
 800d0bc:	0000      	movs	r0, r0
	...

0800d0c0 <balancing_task>:
//double r1;
//double r4;
double k_check[12] = {0};
float check_x = 0;

void balancing_task(void *argument) {
 800d0c0:	b5b0      	push	{r4, r5, r7, lr}
 800d0c2:	b08a      	sub	sp, #40	; 0x28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
	double starttime = 0;
 800d0c8:	f04f 0200 	mov.w	r2, #0
 800d0cc:	f04f 0300 	mov.w	r3, #0
 800d0d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double endtime = 0;
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	f04f 0300 	mov.w	r3, #0
 800d0dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dt;
    TickType_t start_time;
    Ctrl_Init();
 800d0e0:	f001 f982 	bl	800e3e8 <Ctrl_Init>
    while (1) {
        endtime = get_microseconds();
 800d0e4:	f7f5 f8c4 	bl	8002270 <get_microseconds>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7f3 fa0a 	bl	8000504 <__aeabi_ui2d>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        dt = endtime - starttime;
 800d0f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d100:	f7f3 f8c2 	bl	8000288 <__aeabi_dsub>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	e9c7 2304 	strd	r2, r3, [r7, #16]
        start_time = xTaskGetTickCount();
 800d10c:	f00e fe10 	bl	801bd30 <xTaskGetTickCount>
 800d110:	4603      	mov	r3, r0
 800d112:	60fb      	str	r3, [r7, #12]
        starttime = get_microseconds();
 800d114:	f7f5 f8ac 	bl	8002270 <get_microseconds>
 800d118:	4603      	mov	r3, r0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 f9f2 	bl	8000504 <__aeabi_ui2d>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	e9c7 2308 	strd	r2, r3, [r7, #32]

        target.speedCmd = 0;//((float)g_remote_cmd.left_y/660)*1.0f;
 800d128:	4b61      	ldr	r3, [pc, #388]	; (800d2b0 <balancing_task+0x1f0>)
 800d12a:	f04f 0200 	mov.w	r2, #0
 800d12e:	605a      	str	r2, [r3, #4]
        target.yawSpeedCmd = 0;//-((float)g_remote_cmd.left_x/660)*2.0f;
 800d130:	4b5f      	ldr	r3, [pc, #380]	; (800d2b0 <balancing_task+0x1f0>)
 800d132:	f04f 0200 	mov.w	r2, #0
 800d136:	60da      	str	r2, [r3, #12]
        target.legLength = 0;//((float)g_remote_cmd.right_y/660)*0.04 + 0.12f;
 800d138:	4b5d      	ldr	r3, [pc, #372]	; (800d2b0 <balancing_task+0x1f0>)
 800d13a:	f04f 0200 	mov.w	r2, #0
 800d13e:	619a      	str	r2, [r3, #24]
        leftJoint[1].angle = (double)can_motors[8].angle_rad;
 800d140:	4b5c      	ldr	r3, [pc, #368]	; (800d2b4 <balancing_task+0x1f4>)
 800d142:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f3 f9fd 	bl	8000548 <__aeabi_f2d>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	4959      	ldr	r1, [pc, #356]	; (800d2b8 <balancing_task+0x1f8>)
 800d154:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        leftJoint[1].speed = (double)can_motors[8].speed;
 800d158:	4b56      	ldr	r3, [pc, #344]	; (800d2b4 <balancing_task+0x1f4>)
 800d15a:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	4955      	ldr	r1, [pc, #340]	; (800d2b8 <balancing_task+0x1f8>)
 800d164:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
        leftJoint[0].angle = (double)can_motors[9].angle_rad;
 800d168:	4b52      	ldr	r3, [pc, #328]	; (800d2b4 <balancing_task+0x1f4>)
 800d16a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4618      	mov	r0, r3
 800d172:	f7f3 f9e9 	bl	8000548 <__aeabi_f2d>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	494f      	ldr	r1, [pc, #316]	; (800d2b8 <balancing_task+0x1f8>)
 800d17c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        leftJoint[0].speed = (double)can_motors[9].speed;
 800d180:	4b4c      	ldr	r3, [pc, #304]	; (800d2b4 <balancing_task+0x1f4>)
 800d182:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	494b      	ldr	r1, [pc, #300]	; (800d2b8 <balancing_task+0x1f8>)
 800d18c:	e9c1 2300 	strd	r2, r3, [r1]
        rightJoint[1].angle = (double)can_motors[16].angle_rad;
 800d190:	4b48      	ldr	r3, [pc, #288]	; (800d2b4 <balancing_task+0x1f4>)
 800d192:	f603 7318 	addw	r3, r3, #3864	; 0xf18
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7f3 f9d5 	bl	8000548 <__aeabi_f2d>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	4946      	ldr	r1, [pc, #280]	; (800d2bc <balancing_task+0x1fc>)
 800d1a4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        rightJoint[1].speed = (double)can_motors[16].speed;
 800d1a8:	4b42      	ldr	r3, [pc, #264]	; (800d2b4 <balancing_task+0x1f4>)
 800d1aa:	f503 6372 	add.w	r3, r3, #3872	; 0xf20
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	4942      	ldr	r1, [pc, #264]	; (800d2bc <balancing_task+0x1fc>)
 800d1b4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
        rightJoint[0].angle = (double)can_motors[17].angle_rad;
 800d1b8:	4b3e      	ldr	r3, [pc, #248]	; (800d2b4 <balancing_task+0x1f4>)
 800d1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7f3 f9c1 	bl	8000548 <__aeabi_f2d>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	493c      	ldr	r1, [pc, #240]	; (800d2bc <balancing_task+0x1fc>)
 800d1cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rightJoint[0].speed = (double)can_motors[17].speed;
 800d1d0:	4b38      	ldr	r3, [pc, #224]	; (800d2b4 <balancing_task+0x1f4>)
 800d1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d6:	3310      	adds	r3, #16
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	4937      	ldr	r1, [pc, #220]	; (800d2bc <balancing_task+0x1fc>)
 800d1de:	e9c1 2300 	strd	r2, r3, [r1]
        leftWheel.angle = (double)can_motors[1].angle_rad/19.2;
 800d1e2:	4b34      	ldr	r3, [pc, #208]	; (800d2b4 <balancing_task+0x1f4>)
 800d1e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f3 f9ad 	bl	8000548 <__aeabi_f2d>
 800d1ee:	a32c      	add	r3, pc, #176	; (adr r3, 800d2a0 <balancing_task+0x1e0>)
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	f7f3 fb2a 	bl	800084c <__aeabi_ddiv>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	4930      	ldr	r1, [pc, #192]	; (800d2c0 <balancing_task+0x200>)
 800d1fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rightWheel.angle = (double)can_motors[0].angle_rad/19.2;
 800d202:	4b2c      	ldr	r3, [pc, #176]	; (800d2b4 <balancing_task+0x1f4>)
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	4618      	mov	r0, r3
 800d208:	f7f3 f99e 	bl	8000548 <__aeabi_f2d>
 800d20c:	a324      	add	r3, pc, #144	; (adr r3, 800d2a0 <balancing_task+0x1e0>)
 800d20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d212:	f7f3 fb1b 	bl	800084c <__aeabi_ddiv>
 800d216:	4602      	mov	r2, r0
 800d218:	460b      	mov	r3, r1
 800d21a:	492a      	ldr	r1, [pc, #168]	; (800d2c4 <balancing_task+0x204>)
 800d21c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        leftWheel.speed = -(double)can_motors[1].raw_data.rpm * (2*PI/60) /19.2;
 800d220:	4b24      	ldr	r3, [pc, #144]	; (800d2b4 <balancing_task+0x1f4>)
 800d222:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 800d226:	4618      	mov	r0, r3
 800d228:	f7f3 f97c 	bl	8000524 <__aeabi_i2d>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	4614      	mov	r4, r2
 800d232:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800d236:	a31c      	add	r3, pc, #112	; (adr r3, 800d2a8 <balancing_task+0x1e8>)
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	f7f3 f9da 	bl	80005f8 <__aeabi_dmul>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	4610      	mov	r0, r2
 800d24a:	4619      	mov	r1, r3
 800d24c:	a314      	add	r3, pc, #80	; (adr r3, 800d2a0 <balancing_task+0x1e0>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f7f3 fafb 	bl	800084c <__aeabi_ddiv>
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	4919      	ldr	r1, [pc, #100]	; (800d2c0 <balancing_task+0x200>)
 800d25c:	e9c1 2300 	strd	r2, r3, [r1]
        rightWheel.speed = (double)can_motors[0].raw_data.rpm * (2*PI/60) /19.2;
 800d260:	4b14      	ldr	r3, [pc, #80]	; (800d2b4 <balancing_task+0x1f4>)
 800d262:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d266:	4618      	mov	r0, r3
 800d268:	f7f3 f95c 	bl	8000524 <__aeabi_i2d>
 800d26c:	a30e      	add	r3, pc, #56	; (adr r3, 800d2a8 <balancing_task+0x1e8>)
 800d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d272:	f7f3 f9c1 	bl	80005f8 <__aeabi_dmul>
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	4610      	mov	r0, r2
 800d27c:	4619      	mov	r1, r3
 800d27e:	a308      	add	r3, pc, #32	; (adr r3, 800d2a0 <balancing_task+0x1e0>)
 800d280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d284:	f7f3 fae2 	bl	800084c <__aeabi_ddiv>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	490d      	ldr	r1, [pc, #52]	; (800d2c4 <balancing_task+0x204>)
 800d28e:	e9c1 2300 	strd	r2, r3, [r1]

        vTaskDelayUntil(&start_time, 4);
 800d292:	f107 030c 	add.w	r3, r7, #12
 800d296:	2104      	movs	r1, #4
 800d298:	4618      	mov	r0, r3
 800d29a:	f00e fb7b 	bl	801b994 <vTaskDelayUntil>
        endtime = get_microseconds();
 800d29e:	e721      	b.n	800d0e4 <balancing_task+0x24>
 800d2a0:	33333333 	.word	0x33333333
 800d2a4:	40333333 	.word	0x40333333
 800d2a8:	00000000 	.word	0x00000000
 800d2ac:	3fbaceea 	.word	0x3fbaceea
 800d2b0:	20000020 	.word	0x20000020
 800d2b4:	200018a0 	.word	0x200018a0
 800d2b8:	20003540 	.word	0x20003540
 800d2bc:	200035d0 	.word	0x200035d0
 800d2c0:	20003660 	.word	0x20003660
 800d2c4:	200036a8 	.word	0x200036a8

0800d2c8 <Ctrl_TargetUpdateTask>:
    }
}

void Ctrl_TargetUpdateTask()
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800d2ce:	f00e fd2f 	bl	801bd30 <xTaskGetTickCount>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	607b      	str	r3, [r7, #4]
	float speedSlopeStep = 0.005f;
 800d2d6:	4b56      	ldr	r3, [pc, #344]	; (800d430 <Ctrl_TargetUpdateTask+0x168>)
 800d2d8:	60fb      	str	r3, [r7, #12]
	while(1){
		//根据当前腿长计算速度斜坡步长(腿越短越稳定，加减速斜率越大)
			float legLength = (leftLegPos.length + rightLegPos.length) / 2;
 800d2da:	4b56      	ldr	r3, [pc, #344]	; (800d434 <Ctrl_TargetUpdateTask+0x16c>)
 800d2dc:	ed93 7a01 	vldr	s14, [r3, #4]
 800d2e0:	4b55      	ldr	r3, [pc, #340]	; (800d438 <Ctrl_TargetUpdateTask+0x170>)
 800d2e2:	edd3 7a01 	vldr	s15, [r3, #4]
 800d2e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d2ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2f2:	edc7 7a02 	vstr	s15, [r7, #8]
			speedSlopeStep = -(legLength - 0.12f) * 0.03f + 0.005f;
 800d2f6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d2fa:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800d43c <Ctrl_TargetUpdateTask+0x174>
 800d2fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d302:	eef1 7a67 	vneg.f32	s15, s15
 800d306:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800d440 <Ctrl_TargetUpdateTask+0x178>
 800d30a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d30e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d444 <Ctrl_TargetUpdateTask+0x17c>
 800d312:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d316:	edc7 7a03 	vstr	s15, [r7, #12]
			// 		target.speed -= speedSlopeStep;
			// }
            //target.speed = target.speedCmd;

			//计算位置目标，并限制在当前位置的±0.1m内
			target.position += target.speed * 0.004f;
 800d31a:	4b4b      	ldr	r3, [pc, #300]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d31c:	ed93 7a00 	vldr	s14, [r3]
 800d320:	4b49      	ldr	r3, [pc, #292]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d322:	edd3 7a02 	vldr	s15, [r3, #8]
 800d326:	eddf 6a49 	vldr	s13, [pc, #292]	; 800d44c <Ctrl_TargetUpdateTask+0x184>
 800d32a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d32e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d332:	4b45      	ldr	r3, [pc, #276]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d334:	edc3 7a00 	vstr	s15, [r3]
			if(target.position - stateVar.x > 0.1f)
 800d338:	4b43      	ldr	r3, [pc, #268]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d33a:	ed93 7a00 	vldr	s14, [r3]
 800d33e:	4b44      	ldr	r3, [pc, #272]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d340:	edd3 7a02 	vldr	s15, [r3, #8]
 800d344:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d348:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800d454 <Ctrl_TargetUpdateTask+0x18c>
 800d34c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d354:	dd0a      	ble.n	800d36c <Ctrl_TargetUpdateTask+0xa4>
				target.position = stateVar.x + 0.1f;
 800d356:	4b3e      	ldr	r3, [pc, #248]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d358:	edd3 7a02 	vldr	s15, [r3, #8]
 800d35c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800d454 <Ctrl_TargetUpdateTask+0x18c>
 800d360:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d364:	4b38      	ldr	r3, [pc, #224]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d366:	edc3 7a00 	vstr	s15, [r3]
 800d36a:	e018      	b.n	800d39e <Ctrl_TargetUpdateTask+0xd6>
			else if(target.position - stateVar.x < -0.1f)
 800d36c:	4b36      	ldr	r3, [pc, #216]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d36e:	ed93 7a00 	vldr	s14, [r3]
 800d372:	4b37      	ldr	r3, [pc, #220]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d374:	edd3 7a02 	vldr	s15, [r3, #8]
 800d378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d37c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d458 <Ctrl_TargetUpdateTask+0x190>
 800d380:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d388:	d509      	bpl.n	800d39e <Ctrl_TargetUpdateTask+0xd6>
				target.position = stateVar.x - 0.1f;
 800d38a:	4b31      	ldr	r3, [pc, #196]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d38c:	edd3 7a02 	vldr	s15, [r3, #8]
 800d390:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d454 <Ctrl_TargetUpdateTask+0x18c>
 800d394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d398:	4b2b      	ldr	r3, [pc, #172]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d39a:	edc3 7a00 	vstr	s15, [r3]

			//限制速度目标在当前速度的±0.3m/s内
			if(target.speed - stateVar.dx > 1.0f)
 800d39e:	4b2a      	ldr	r3, [pc, #168]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d3a0:	ed93 7a02 	vldr	s14, [r3, #8]
 800d3a4:	4b2a      	ldr	r3, [pc, #168]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d3a6:	edd3 7a03 	vldr	s15, [r3, #12]
 800d3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ba:	dd0a      	ble.n	800d3d2 <Ctrl_TargetUpdateTask+0x10a>
				target.speed = stateVar.dx + 1.0f;
 800d3bc:	4b24      	ldr	r3, [pc, #144]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d3be:	edd3 7a03 	vldr	s15, [r3, #12]
 800d3c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3ca:	4b1f      	ldr	r3, [pc, #124]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d3cc:	edc3 7a02 	vstr	s15, [r3, #8]
 800d3d0:	e018      	b.n	800d404 <Ctrl_TargetUpdateTask+0x13c>
			else if(target.speed - stateVar.dx < -1.0f)
 800d3d2:	4b1d      	ldr	r3, [pc, #116]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d3d4:	ed93 7a02 	vldr	s14, [r3, #8]
 800d3d8:	4b1d      	ldr	r3, [pc, #116]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d3da:	edd3 7a03 	vldr	s15, [r3, #12]
 800d3de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d3e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ee:	d509      	bpl.n	800d404 <Ctrl_TargetUpdateTask+0x13c>
				target.speed = stateVar.dx - 1.0f;
 800d3f0:	4b17      	ldr	r3, [pc, #92]	; (800d450 <Ctrl_TargetUpdateTask+0x188>)
 800d3f2:	edd3 7a03 	vldr	s15, [r3, #12]
 800d3f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3fe:	4b12      	ldr	r3, [pc, #72]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d400:	edc3 7a02 	vstr	s15, [r3, #8]

			//计算yaw方位角目标
			target.yawAngle += target.yawSpeedCmd * 0.004f;
 800d404:	4b10      	ldr	r3, [pc, #64]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d406:	ed93 7a04 	vldr	s14, [r3, #16]
 800d40a:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d40c:	edd3 7a03 	vldr	s15, [r3, #12]
 800d410:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800d44c <Ctrl_TargetUpdateTask+0x184>
 800d414:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d41c:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <Ctrl_TargetUpdateTask+0x180>)
 800d41e:	edc3 7a04 	vstr	s15, [r3, #16]
			vTaskDelayUntil(&xLastWakeTime, 4); //每4ms更新一次
 800d422:	1d3b      	adds	r3, r7, #4
 800d424:	2104      	movs	r1, #4
 800d426:	4618      	mov	r0, r3
 800d428:	f00e fab4 	bl	801b994 <vTaskDelayUntil>
	while(1){
 800d42c:	e755      	b.n	800d2da <Ctrl_TargetUpdateTask+0x12>
 800d42e:	bf00      	nop
 800d430:	3ba3d70a 	.word	0x3ba3d70a
 800d434:	200036f0 	.word	0x200036f0
 800d438:	20003704 	.word	0x20003704
 800d43c:	3df5c28f 	.word	0x3df5c28f
 800d440:	3cf5c28f 	.word	0x3cf5c28f
 800d444:	3ba3d70a 	.word	0x3ba3d70a
 800d448:	20000020 	.word	0x20000020
 800d44c:	3b83126f 	.word	0x3b83126f
 800d450:	20003718 	.word	0x20003718
 800d454:	3dcccccd 	.word	0x3dcccccd
 800d458:	bdcccccd 	.word	0xbdcccccd

0800d45c <LegPos_UpdateTask>:
	}
}

void LegPos_UpdateTask(void *arg)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08e      	sub	sp, #56	; 0x38
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
	const float lpfRatio = 0.5f; //低通滤波系数(新值的权重)
 800d464:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800d468:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lastLeftDLength = 0, lastRightDLength = 0;
 800d46a:	f04f 0300 	mov.w	r3, #0
 800d46e:	637b      	str	r3, [r7, #52]	; 0x34
 800d470:	f04f 0300 	mov.w	r3, #0
 800d474:	633b      	str	r3, [r7, #48]	; 0x30
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800d476:	f00e fc5b 	bl	801bd30 <xTaskGetTickCount>
 800d47a:	4603      	mov	r3, r0
 800d47c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1)
	{
		double legPos[2], legSpd[2];

		//计算左腿位置
		leg_pos(leftJoint[1].angle, leftJoint[0].angle, legPos);
 800d47e:	4b81      	ldr	r3, [pc, #516]	; (800d684 <LegPos_UpdateTask+0x228>)
 800d480:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800d484:	4b7f      	ldr	r3, [pc, #508]	; (800d684 <LegPos_UpdateTask+0x228>)
 800d486:	ed93 6b02 	vldr	d6, [r3, #8]
 800d48a:	f107 0318 	add.w	r3, r7, #24
 800d48e:	4618      	mov	r0, r3
 800d490:	eeb0 1a46 	vmov.f32	s2, s12
 800d494:	eef0 1a66 	vmov.f32	s3, s13
 800d498:	eeb0 0a47 	vmov.f32	s0, s14
 800d49c:	eef0 0a67 	vmov.f32	s1, s15
 800d4a0:	f7fb f84e 	bl	8008540 <leg_pos>
		leftLegPos.length = legPos[0];
 800d4a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	f7f3 fb9c 	bl	8000be8 <__aeabi_d2f>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	4a75      	ldr	r2, [pc, #468]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d4b4:	6053      	str	r3, [r2, #4]
		leftLegPos.angle = legPos[1];
 800d4b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	4619      	mov	r1, r3
 800d4be:	f7f3 fb93 	bl	8000be8 <__aeabi_d2f>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	4a70      	ldr	r2, [pc, #448]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d4c6:	6013      	str	r3, [r2, #0]

		//计算左腿速度
		leg_spd(leftJoint[1].speed, leftJoint[0].speed, leftJoint[1].angle, leftJoint[0].angle, legSpd);
 800d4c8:	4b6e      	ldr	r3, [pc, #440]	; (800d684 <LegPos_UpdateTask+0x228>)
 800d4ca:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800d4ce:	4b6d      	ldr	r3, [pc, #436]	; (800d684 <LegPos_UpdateTask+0x228>)
 800d4d0:	ed93 6b00 	vldr	d6, [r3]
 800d4d4:	4b6b      	ldr	r3, [pc, #428]	; (800d684 <LegPos_UpdateTask+0x228>)
 800d4d6:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 800d4da:	4b6a      	ldr	r3, [pc, #424]	; (800d684 <LegPos_UpdateTask+0x228>)
 800d4dc:	ed93 4b02 	vldr	d4, [r3, #8]
 800d4e0:	f107 0308 	add.w	r3, r7, #8
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	eeb0 3a44 	vmov.f32	s6, s8
 800d4ea:	eef0 3a64 	vmov.f32	s7, s9
 800d4ee:	eeb0 2a45 	vmov.f32	s4, s10
 800d4f2:	eef0 2a65 	vmov.f32	s5, s11
 800d4f6:	eeb0 1a46 	vmov.f32	s2, s12
 800d4fa:	eef0 1a66 	vmov.f32	s3, s13
 800d4fe:	eeb0 0a47 	vmov.f32	s0, s14
 800d502:	eef0 0a67 	vmov.f32	s1, s15
 800d506:	f7fb ff13 	bl	8009330 <leg_spd>
		leftLegPos.dLength = legSpd[0];
 800d50a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d50e:	4610      	mov	r0, r2
 800d510:	4619      	mov	r1, r3
 800d512:	f7f3 fb69 	bl	8000be8 <__aeabi_d2f>
 800d516:	4603      	mov	r3, r0
 800d518:	4a5b      	ldr	r2, [pc, #364]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d51a:	60d3      	str	r3, [r2, #12]
		leftLegPos.dAngle = legSpd[1];
 800d51c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d520:	4610      	mov	r0, r2
 800d522:	4619      	mov	r1, r3
 800d524:	f7f3 fb60 	bl	8000be8 <__aeabi_d2f>
 800d528:	4603      	mov	r3, r0
 800d52a:	4a57      	ldr	r2, [pc, #348]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d52c:	6093      	str	r3, [r2, #8]

		//计算左腿腿长加速度
		leftLegPos.ddLength = ((leftLegPos.dLength - lastLeftDLength) * 1000 / 4) * lpfRatio + leftLegPos.ddLength * (1 - lpfRatio);
 800d52e:	4b56      	ldr	r3, [pc, #344]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d530:	ed93 7a03 	vldr	s14, [r3, #12]
 800d534:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d53c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800d68c <LegPos_UpdateTask+0x230>
 800d540:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d544:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d548:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d54c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d550:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d554:	4b4c      	ldr	r3, [pc, #304]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d556:	edd3 6a04 	vldr	s13, [r3, #16]
 800d55a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d55e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d562:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d56a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d56e:	4b46      	ldr	r3, [pc, #280]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d570:	edc3 7a04 	vstr	s15, [r3, #16]
		lastLeftDLength = leftLegPos.dLength;
 800d574:	4b44      	ldr	r3, [pc, #272]	; (800d688 <LegPos_UpdateTask+0x22c>)
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	637b      	str	r3, [r7, #52]	; 0x34

		//计算右腿位置
		leg_pos(rightJoint[1].angle, rightJoint[0].angle, legPos);
 800d57a:	4b45      	ldr	r3, [pc, #276]	; (800d690 <LegPos_UpdateTask+0x234>)
 800d57c:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800d580:	4b43      	ldr	r3, [pc, #268]	; (800d690 <LegPos_UpdateTask+0x234>)
 800d582:	ed93 6b02 	vldr	d6, [r3, #8]
 800d586:	f107 0318 	add.w	r3, r7, #24
 800d58a:	4618      	mov	r0, r3
 800d58c:	eeb0 1a46 	vmov.f32	s2, s12
 800d590:	eef0 1a66 	vmov.f32	s3, s13
 800d594:	eeb0 0a47 	vmov.f32	s0, s14
 800d598:	eef0 0a67 	vmov.f32	s1, s15
 800d59c:	f7fa ffd0 	bl	8008540 <leg_pos>
		rightLegPos.length = legPos[0];
 800d5a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	f7f3 fb1e 	bl	8000be8 <__aeabi_d2f>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	4a39      	ldr	r2, [pc, #228]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d5b0:	6053      	str	r3, [r2, #4]
		rightLegPos.angle = legPos[1];
 800d5b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	f7f3 fb15 	bl	8000be8 <__aeabi_d2f>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	4a34      	ldr	r2, [pc, #208]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d5c2:	6013      	str	r3, [r2, #0]

		//计算右腿速度
		leg_spd(rightJoint[1].speed, rightJoint[0].speed, rightJoint[1].angle, rightJoint[0].angle, legSpd);
 800d5c4:	4b32      	ldr	r3, [pc, #200]	; (800d690 <LegPos_UpdateTask+0x234>)
 800d5c6:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800d5ca:	4b31      	ldr	r3, [pc, #196]	; (800d690 <LegPos_UpdateTask+0x234>)
 800d5cc:	ed93 6b00 	vldr	d6, [r3]
 800d5d0:	4b2f      	ldr	r3, [pc, #188]	; (800d690 <LegPos_UpdateTask+0x234>)
 800d5d2:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 800d5d6:	4b2e      	ldr	r3, [pc, #184]	; (800d690 <LegPos_UpdateTask+0x234>)
 800d5d8:	ed93 4b02 	vldr	d4, [r3, #8]
 800d5dc:	f107 0308 	add.w	r3, r7, #8
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	eeb0 3a44 	vmov.f32	s6, s8
 800d5e6:	eef0 3a64 	vmov.f32	s7, s9
 800d5ea:	eeb0 2a45 	vmov.f32	s4, s10
 800d5ee:	eef0 2a65 	vmov.f32	s5, s11
 800d5f2:	eeb0 1a46 	vmov.f32	s2, s12
 800d5f6:	eef0 1a66 	vmov.f32	s3, s13
 800d5fa:	eeb0 0a47 	vmov.f32	s0, s14
 800d5fe:	eef0 0a67 	vmov.f32	s1, s15
 800d602:	f7fb fe95 	bl	8009330 <leg_spd>
		rightLegPos.dLength = legSpd[0];
 800d606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d60a:	4610      	mov	r0, r2
 800d60c:	4619      	mov	r1, r3
 800d60e:	f7f3 faeb 	bl	8000be8 <__aeabi_d2f>
 800d612:	4603      	mov	r3, r0
 800d614:	4a1f      	ldr	r2, [pc, #124]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d616:	60d3      	str	r3, [r2, #12]
		rightLegPos.dAngle = legSpd[1];
 800d618:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d61c:	4610      	mov	r0, r2
 800d61e:	4619      	mov	r1, r3
 800d620:	f7f3 fae2 	bl	8000be8 <__aeabi_d2f>
 800d624:	4603      	mov	r3, r0
 800d626:	4a1b      	ldr	r2, [pc, #108]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d628:	6093      	str	r3, [r2, #8]

		//计算右腿腿长加速度
		rightLegPos.ddLength = ((rightLegPos.dLength - lastRightDLength) * 1000 / 4) * lpfRatio + rightLegPos.ddLength * (1 - lpfRatio);
 800d62a:	4b1a      	ldr	r3, [pc, #104]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d62c:	ed93 7a03 	vldr	s14, [r3, #12]
 800d630:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d634:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d638:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800d68c <LegPos_UpdateTask+0x230>
 800d63c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d640:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d644:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d648:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d64c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d650:	4b10      	ldr	r3, [pc, #64]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d652:	edd3 6a04 	vldr	s13, [r3, #16]
 800d656:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d65a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d65e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d66a:	4b0a      	ldr	r3, [pc, #40]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d66c:	edc3 7a04 	vstr	s15, [r3, #16]
		lastRightDLength = rightLegPos.dLength;
 800d670:	4b08      	ldr	r3, [pc, #32]	; (800d694 <LegPos_UpdateTask+0x238>)
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	633b      	str	r3, [r7, #48]	; 0x30

		vTaskDelayUntil(&xLastWakeTime, 4); //每4ms更新一次
 800d676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d67a:	2104      	movs	r1, #4
 800d67c:	4618      	mov	r0, r3
 800d67e:	f00e f989 	bl	801b994 <vTaskDelayUntil>
	{
 800d682:	e6fc      	b.n	800d47e <LegPos_UpdateTask+0x22>
 800d684:	20003540 	.word	0x20003540
 800d688:	200036f0 	.word	0x200036f0
 800d68c:	447a0000 	.word	0x447a0000
 800d690:	200035d0 	.word	0x200035d0
 800d694:	20003704 	.word	0x20003704

0800d698 <Ctrl_Task>:
	}
}

void Ctrl_Task(void *arg)
{
 800d698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d69c:	b0ec      	sub	sp, #432	; 0x1b0
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d6a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d6a8:	6018      	str	r0, [r3, #0]
	double starttime = 0;
 800d6aa:	f04f 0200 	mov.w	r2, #0
 800d6ae:	f04f 0300 	mov.w	r3, #0
 800d6b2:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
	double endtime = 0;
 800d6b6:	f04f 0200 	mov.w	r2, #0
 800d6ba:	f04f 0300 	mov.w	r3, #0
 800d6be:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	double dt;
	const float wheelRadius = 0.045f; //m，车轮半径
 800d6c2:	4bb7      	ldr	r3, [pc, #732]	; (800d9a0 <Ctrl_Task+0x308>)
 800d6c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	const float legMass = 0.01f; //kg，腿部质量
 800d6c8:	4bb6      	ldr	r3, [pc, #728]	; (800d9a4 <Ctrl_Task+0x30c>)
 800d6ca:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

	TickType_t xLastWakeTime = xTaskGetTickCount();
 800d6ce:	f00e fb2f 	bl	801bd30 <xTaskGetTickCount>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	//手动为反馈矩阵和输出叠加一个系数，用于手动优化控制效果
	float kRatio[2][6] = {{1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f},
 800d6d8:	4bb3      	ldr	r3, [pc, #716]	; (800d9a8 <Ctrl_Task+0x310>)
 800d6da:	f507 7482 	add.w	r4, r7, #260	; 0x104
 800d6de:	461d      	mov	r5, r3
 800d6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d6ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						{1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f}};
	float lqrTpRatio = 1.0f, lqrTRatio = 1.0f;
 800d6f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d6f4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800d6f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d6fc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

	//设定初始目标值
	target.rollAngle = 0.0f;
 800d700:	4baa      	ldr	r3, [pc, #680]	; (800d9ac <Ctrl_Task+0x314>)
 800d702:	f04f 0200 	mov.w	r2, #0
 800d706:	615a      	str	r2, [r3, #20]
	target.legLength = 0.12f;
 800d708:	4ba8      	ldr	r3, [pc, #672]	; (800d9ac <Ctrl_Task+0x314>)
 800d70a:	4aa9      	ldr	r2, [pc, #676]	; (800d9b0 <Ctrl_Task+0x318>)
 800d70c:	619a      	str	r2, [r3, #24]
	target.speed = 0.0f;
 800d70e:	4ba7      	ldr	r3, [pc, #668]	; (800d9ac <Ctrl_Task+0x314>)
 800d710:	f04f 0200 	mov.w	r2, #0
 800d714:	609a      	str	r2, [r3, #8]
	target.position = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 800d716:	4ba7      	ldr	r3, [pc, #668]	; (800d9b4 <Ctrl_Task+0x31c>)
 800d718:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d71c:	4ba6      	ldr	r3, [pc, #664]	; (800d9b8 <Ctrl_Task+0x320>)
 800d71e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d722:	f7f2 fdb3 	bl	800028c <__adddf3>
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	4610      	mov	r0, r2
 800d72c:	4619      	mov	r1, r3
 800d72e:	f04f 0200 	mov.w	r2, #0
 800d732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d736:	f7f3 f889 	bl	800084c <__aeabi_ddiv>
 800d73a:	4602      	mov	r2, r0
 800d73c:	460b      	mov	r3, r1
 800d73e:	4614      	mov	r4, r2
 800d740:	461d      	mov	r5, r3
 800d742:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800d746:	f7f2 feff 	bl	8000548 <__aeabi_f2d>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4620      	mov	r0, r4
 800d750:	4629      	mov	r1, r5
 800d752:	f7f2 ff51 	bl	80005f8 <__aeabi_dmul>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4610      	mov	r0, r2
 800d75c:	4619      	mov	r1, r3
 800d75e:	f7f3 fa43 	bl	8000be8 <__aeabi_d2f>
 800d762:	4603      	mov	r3, r0
 800d764:	4a91      	ldr	r2, [pc, #580]	; (800d9ac <Ctrl_Task+0x314>)
 800d766:	6013      	str	r3, [r2, #0]

	while (1)
	{
		endtime = get_microseconds();
 800d768:	f7f4 fd82 	bl	8002270 <get_microseconds>
 800d76c:	4603      	mov	r3, r0
 800d76e:	4618      	mov	r0, r3
 800d770:	f7f2 fec8 	bl	8000504 <__aeabi_ui2d>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
		dt = endtime - starttime;
 800d77c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800d780:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800d784:	f7f2 fd80 	bl	8000288 <__aeabi_dsub>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
		check_dt = dt;
 800d790:	498a      	ldr	r1, [pc, #552]	; (800d9bc <Ctrl_Task+0x324>)
 800d792:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800d796:	e9c1 2300 	strd	r2, r3, [r1]
		starttime = get_microseconds();
 800d79a:	f7f4 fd69 	bl	8002270 <get_microseconds>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7f2 feaf 	bl	8000504 <__aeabi_ui2d>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
		//计算状态变量
		stateVar.phi = imu_heading.pit;
 800d7ae:	4b84      	ldr	r3, [pc, #528]	; (800d9c0 <Ctrl_Task+0x328>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a84      	ldr	r2, [pc, #528]	; (800d9c4 <Ctrl_Task+0x32c>)
 800d7b4:	6113      	str	r3, [r2, #16]
		stateVar.dPhi = imu_heading.dpit;
 800d7b6:	4b82      	ldr	r3, [pc, #520]	; (800d9c0 <Ctrl_Task+0x328>)
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	4a82      	ldr	r2, [pc, #520]	; (800d9c4 <Ctrl_Task+0x32c>)
 800d7bc:	6153      	str	r3, [r2, #20]
		stateVar.x = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 800d7be:	4b7d      	ldr	r3, [pc, #500]	; (800d9b4 <Ctrl_Task+0x31c>)
 800d7c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d7c4:	4b7c      	ldr	r3, [pc, #496]	; (800d9b8 <Ctrl_Task+0x320>)
 800d7c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d7ca:	f7f2 fd5f 	bl	800028c <__adddf3>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	f04f 0200 	mov.w	r2, #0
 800d7da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7de:	f7f3 f835 	bl	800084c <__aeabi_ddiv>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4614      	mov	r4, r2
 800d7e8:	461d      	mov	r5, r3
 800d7ea:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800d7ee:	f7f2 feab 	bl	8000548 <__aeabi_f2d>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	f7f2 fefd 	bl	80005f8 <__aeabi_dmul>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	4610      	mov	r0, r2
 800d804:	4619      	mov	r1, r3
 800d806:	f7f3 f9ef 	bl	8000be8 <__aeabi_d2f>
 800d80a:	4603      	mov	r3, r0
 800d80c:	4a6d      	ldr	r2, [pc, #436]	; (800d9c4 <Ctrl_Task+0x32c>)
 800d80e:	6093      	str	r3, [r2, #8]
		stateVar.dx = (leftWheel.speed + rightWheel.speed) / 2 * wheelRadius;
 800d810:	4b68      	ldr	r3, [pc, #416]	; (800d9b4 <Ctrl_Task+0x31c>)
 800d812:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d816:	4b68      	ldr	r3, [pc, #416]	; (800d9b8 <Ctrl_Task+0x320>)
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f7f2 fd36 	bl	800028c <__adddf3>
 800d820:	4602      	mov	r2, r0
 800d822:	460b      	mov	r3, r1
 800d824:	4610      	mov	r0, r2
 800d826:	4619      	mov	r1, r3
 800d828:	f04f 0200 	mov.w	r2, #0
 800d82c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d830:	f7f3 f80c 	bl	800084c <__aeabi_ddiv>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	4614      	mov	r4, r2
 800d83a:	461d      	mov	r5, r3
 800d83c:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 800d840:	f7f2 fe82 	bl	8000548 <__aeabi_f2d>
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4620      	mov	r0, r4
 800d84a:	4629      	mov	r1, r5
 800d84c:	f7f2 fed4 	bl	80005f8 <__aeabi_dmul>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4610      	mov	r0, r2
 800d856:	4619      	mov	r1, r3
 800d858:	f7f3 f9c6 	bl	8000be8 <__aeabi_d2f>
 800d85c:	4603      	mov	r3, r0
 800d85e:	4a59      	ldr	r2, [pc, #356]	; (800d9c4 <Ctrl_Task+0x32c>)
 800d860:	60d3      	str	r3, [r2, #12]
		stateVar.theta = 0;//(leftLegPos.angle + rightLegPos.angle) / 2 - M_PI_2 - imu_heading.pit;
 800d862:	4b58      	ldr	r3, [pc, #352]	; (800d9c4 <Ctrl_Task+0x32c>)
 800d864:	f04f 0200 	mov.w	r2, #0
 800d868:	601a      	str	r2, [r3, #0]
		stateVar.dTheta = 0;//(leftLegPos.dAngle + rightLegPos.dAngle) / 2 - imu_heading.dpit;
 800d86a:	4b56      	ldr	r3, [pc, #344]	; (800d9c4 <Ctrl_Task+0x32c>)
 800d86c:	f04f 0200 	mov.w	r2, #0
 800d870:	605a      	str	r2, [r3, #4]
		double legLength = 0.12;//(leftLegPos.length + rightLegPos.length) / 2;
 800d872:	a349      	add	r3, pc, #292	; (adr r3, 800d998 <Ctrl_Task+0x300>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
		double dLegLength = 0;//(leftLegPos.dLength + rightLegPos.dLength) / 2;
 800d87c:	f04f 0200 	mov.w	r2, #0
 800d880:	f04f 0300 	mov.w	r3, #0
 800d884:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158

		//如果正在站立准备状态，则不进行后续控制
		if(standupState == StandupState_Prepare)
 800d888:	4b4f      	ldr	r3, [pc, #316]	; (800d9c8 <Ctrl_Task+0x330>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d106      	bne.n	800d89e <Ctrl_Task+0x206>
		{
			vTaskDelayUntil(&xLastWakeTime, 4);
 800d890:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800d894:	2104      	movs	r1, #4
 800d896:	4618      	mov	r0, r3
 800d898:	f00e f87c 	bl	801b994 <vTaskDelayUntil>
 800d89c:	e764      	b.n	800d768 <Ctrl_Task+0xd0>
			continue;
		}

		//计算LQR反馈矩阵
		double kRes[12] = {0}, k[2][6] = {0};
 800d89e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d8a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	2360      	movs	r3, #96	; 0x60
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	f010 fe60 	bl	801e572 <memset>
 800d8b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d8b6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	2360      	movs	r3, #96	; 0x60
 800d8be:	461a      	mov	r2, r3
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	f010 fe56 	bl	801e572 <memset>
		lqr_k(legLength, kRes);
 800d8c6:	f107 0308 	add.w	r3, r7, #8
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	ed97 0b58 	vldr	d0, [r7, #352]	; 0x160
 800d8d0:	f7fc fb9a 	bl	800a008 <lqr_k>
		lqr_k(0.12, k_check);
 800d8d4:	483d      	ldr	r0, [pc, #244]	; (800d9cc <Ctrl_Task+0x334>)
 800d8d6:	ed9f 0b30 	vldr	d0, [pc, #192]	; 800d998 <Ctrl_Task+0x300>
 800d8da:	f7fc fb95 	bl	800a008 <lqr_k>
		if(groundDetector.isTouchingGround) //正常触地状态
 800d8de:	4b3c      	ldr	r3, [pc, #240]	; (800d9d0 <Ctrl_Task+0x338>)
 800d8e0:	7a1b      	ldrb	r3, [r3, #8]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d076      	beq.n	800d9d4 <Ctrl_Task+0x33c>
		{
            // double k[2][6] = {
            //     {-0.0224, -2.2530, -11.1054, -1.6155, 2.2361, 0.5513},
            //     {-0.0224, -2.2530, -11.1054, -1.6155, -2.2361, -0.5513}
            // };
			for (int i = 0; i < 6; i++)
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800d8ec:	e04c      	b.n	800d988 <Ctrl_Task+0x2f0>
			{
				for (int j = 0; j < 2; j++)
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800d8f4:	e03f      	b.n	800d976 <Ctrl_Task+0x2de>
					k[j][i] = kRes[i * 2 + j] * kRatio[j][i];
 800d8f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d8fa:	005a      	lsls	r2, r3, #1
 800d8fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d900:	4413      	add	r3, r2
 800d902:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800d906:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800d90a:	00db      	lsls	r3, r3, #3
 800d90c:	4413      	add	r3, r2
 800d90e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d912:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800d916:	4613      	mov	r3, r2
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	4413      	add	r3, r2
 800d91c:	005b      	lsls	r3, r3, #1
 800d91e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800d922:	4413      	add	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800d92a:	443b      	add	r3, r7
 800d92c:	3bac      	subs	r3, #172	; 0xac
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4618      	mov	r0, r3
 800d932:	f7f2 fe09 	bl	8000548 <__aeabi_f2d>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4620      	mov	r0, r4
 800d93c:	4629      	mov	r1, r5
 800d93e:	f7f2 fe5b 	bl	80005f8 <__aeabi_dmul>
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	4610      	mov	r0, r2
 800d948:	4619      	mov	r1, r3
 800d94a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d94e:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 800d952:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800d956:	4613      	mov	r3, r2
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	4413      	add	r3, r2
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800d962:	4413      	add	r3, r2
 800d964:	00db      	lsls	r3, r3, #3
 800d966:	4423      	add	r3, r4
 800d968:	e9c3 0100 	strd	r0, r1, [r3]
				for (int j = 0; j < 2; j++)
 800d96c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d970:	3301      	adds	r3, #1
 800d972:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800d976:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	ddbb      	ble.n	800d8f6 <Ctrl_Task+0x25e>
			for (int i = 0; i < 6; i++)
 800d97e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d982:	3301      	adds	r3, #1
 800d984:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800d988:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800d98c:	2b05      	cmp	r3, #5
 800d98e:	ddae      	ble.n	800d8ee <Ctrl_Task+0x256>
 800d990:	e04e      	b.n	800da30 <Ctrl_Task+0x398>
 800d992:	bf00      	nop
 800d994:	f3af 8000 	nop.w
 800d998:	eb851eb8 	.word	0xeb851eb8
 800d99c:	3fbeb851 	.word	0x3fbeb851
 800d9a0:	3d3851ec 	.word	0x3d3851ec
 800d9a4:	3c23d70a 	.word	0x3c23d70a
 800d9a8:	080257f4 	.word	0x080257f4
 800d9ac:	20000020 	.word	0x20000020
 800d9b0:	3df5c28f 	.word	0x3df5c28f
 800d9b4:	20003660 	.word	0x20003660
 800d9b8:	200036a8 	.word	0x200036a8
 800d9bc:	20003860 	.word	0x20003860
 800d9c0:	20003194 	.word	0x20003194
 800d9c4:	20003718 	.word	0x20003718
 800d9c8:	20000048 	.word	0x20000048
 800d9cc:	20003868 	.word	0x20003868
 800d9d0:	2000003c 	.word	0x2000003c
			}
		}
		else //腿部离地状态，手动修改反馈矩阵，仅保持腿部竖直
		{
			memset(k, 0, sizeof(k));
 800d9d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d9d8:	2260      	movs	r2, #96	; 0x60
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f010 fdc8 	bl	801e572 <memset>
			k[1][0] = kRes[1] * -2;
 800d9e2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800d9e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d9ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d9ee:	f04f 0200 	mov.w	r2, #0
 800d9f2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800d9f6:	f7f2 fdff 	bl	80005f8 <__aeabi_dmul>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800da02:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 800da06:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			k[1][1] = kRes[3] * -10;
 800da0a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800da12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800da16:	f04f 0200 	mov.w	r2, #0
 800da1a:	4bdb      	ldr	r3, [pc, #876]	; (800dd88 <Ctrl_Task+0x6f0>)
 800da1c:	f7f2 fdec 	bl	80005f8 <__aeabi_dmul>
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800da28:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 800da2c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		}

		//准备状态变量
		float x[6] = {stateVar.theta, stateVar.dTheta, stateVar.x, stateVar.dx, stateVar.phi, stateVar.dPhi};
 800da30:	4bd6      	ldr	r3, [pc, #856]	; (800dd8c <Ctrl_Task+0x6f4>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da38:	4bd4      	ldr	r3, [pc, #848]	; (800dd8c <Ctrl_Task+0x6f4>)
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800da40:	4bd2      	ldr	r3, [pc, #840]	; (800dd8c <Ctrl_Task+0x6f4>)
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800da48:	4bd0      	ldr	r3, [pc, #832]	; (800dd8c <Ctrl_Task+0x6f4>)
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800da50:	4bce      	ldr	r3, [pc, #824]	; (800dd8c <Ctrl_Task+0x6f4>)
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800da58:	4bcc      	ldr	r3, [pc, #816]	; (800dd8c <Ctrl_Task+0x6f4>)
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		//与给定量作差
		x[2] -= target.position;
 800da60:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 800da64:	4bca      	ldr	r3, [pc, #808]	; (800dd90 <Ctrl_Task+0x6f8>)
 800da66:	edd3 7a00 	vldr	s15, [r3]
 800da6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da6e:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
		x[3] -= target.speed;
 800da72:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 800da76:	4bc6      	ldr	r3, [pc, #792]	; (800dd90 <Ctrl_Task+0x6f8>)
 800da78:	edd3 7a02 	vldr	s15, [r3, #8]
 800da7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da80:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
		check_x = x[2];
 800da84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da88:	4ac2      	ldr	r2, [pc, #776]	; (800dd94 <Ctrl_Task+0x6fc>)
 800da8a:	6013      	str	r3, [r2, #0]
		//矩阵相乘，计算LQR输出
		float lqrOutT = k[0][0] * x[0] + k[0][1] * x[1] + k[0][2] * x[2] + k[0][3] * x[3] + k[0][4] * x[4] + k[0][5] * x[5];
 800da8c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800da90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800da94:	e9d3 4500 	ldrd	r4, r5, [r3]
 800da98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f2 fd53 	bl	8000548 <__aeabi_f2d>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4620      	mov	r0, r4
 800daa8:	4629      	mov	r1, r5
 800daaa:	f7f2 fda5 	bl	80005f8 <__aeabi_dmul>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4692      	mov	sl, r2
 800dab4:	469b      	mov	fp, r3
 800dab6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800dabe:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800dac2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7f2 fd3e 	bl	8000548 <__aeabi_f2d>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	4620      	mov	r0, r4
 800dad2:	4629      	mov	r1, r5
 800dad4:	f7f2 fd90 	bl	80005f8 <__aeabi_dmul>
 800dad8:	4602      	mov	r2, r0
 800dada:	460b      	mov	r3, r1
 800dadc:	4650      	mov	r0, sl
 800dade:	4659      	mov	r1, fp
 800dae0:	f7f2 fbd4 	bl	800028c <__adddf3>
 800dae4:	4602      	mov	r2, r0
 800dae6:	460b      	mov	r3, r1
 800dae8:	4692      	mov	sl, r2
 800daea:	469b      	mov	fp, r3
 800daec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800daf0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800daf4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800daf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7f2 fd23 	bl	8000548 <__aeabi_f2d>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4620      	mov	r0, r4
 800db08:	4629      	mov	r1, r5
 800db0a:	f7f2 fd75 	bl	80005f8 <__aeabi_dmul>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	4650      	mov	r0, sl
 800db14:	4659      	mov	r1, fp
 800db16:	f7f2 fbb9 	bl	800028c <__adddf3>
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	4692      	mov	sl, r2
 800db20:	469b      	mov	fp, r3
 800db22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db26:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800db2a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800db2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db32:	4618      	mov	r0, r3
 800db34:	f7f2 fd08 	bl	8000548 <__aeabi_f2d>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4620      	mov	r0, r4
 800db3e:	4629      	mov	r1, r5
 800db40:	f7f2 fd5a 	bl	80005f8 <__aeabi_dmul>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4650      	mov	r0, sl
 800db4a:	4659      	mov	r1, fp
 800db4c:	f7f2 fb9e 	bl	800028c <__adddf3>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	4692      	mov	sl, r2
 800db56:	469b      	mov	fp, r3
 800db58:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800db60:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800db64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db68:	4618      	mov	r0, r3
 800db6a:	f7f2 fced 	bl	8000548 <__aeabi_f2d>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4620      	mov	r0, r4
 800db74:	4629      	mov	r1, r5
 800db76:	f7f2 fd3f 	bl	80005f8 <__aeabi_dmul>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	4650      	mov	r0, sl
 800db80:	4659      	mov	r1, fp
 800db82:	f7f2 fb83 	bl	800028c <__adddf3>
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4692      	mov	sl, r2
 800db8c:	469b      	mov	fp, r3
 800db8e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800db92:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800db96:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800db9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f2 fcd2 	bl	8000548 <__aeabi_f2d>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	4620      	mov	r0, r4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f7f2 fd24 	bl	80005f8 <__aeabi_dmul>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	4659      	mov	r1, fp
 800dbb8:	f7f2 fb68 	bl	800028c <__adddf3>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	f7f3 f810 	bl	8000be8 <__aeabi_d2f>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		float lqrOutTp = k[1][0] * x[0] + k[1][1] * x[1] + k[1][2] * x[2] + k[1][3] * x[3] + k[1][4] * x[4] + k[1][5] * x[5];
 800dbce:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbd2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800dbd6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800dbda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7f2 fcb2 	bl	8000548 <__aeabi_f2d>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	4620      	mov	r0, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f2 fd04 	bl	80005f8 <__aeabi_dmul>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4692      	mov	sl, r2
 800dbf6:	469b      	mov	fp, r3
 800dbf8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dbfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800dc00:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800dc04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7f2 fc9d 	bl	8000548 <__aeabi_f2d>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	f7f2 fcef 	bl	80005f8 <__aeabi_dmul>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	4650      	mov	r0, sl
 800dc20:	4659      	mov	r1, fp
 800dc22:	f7f2 fb33 	bl	800028c <__adddf3>
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	4692      	mov	sl, r2
 800dc2c:	469b      	mov	fp, r3
 800dc2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc32:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800dc36:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800dc3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f2 fc82 	bl	8000548 <__aeabi_f2d>
 800dc44:	4602      	mov	r2, r0
 800dc46:	460b      	mov	r3, r1
 800dc48:	4620      	mov	r0, r4
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	f7f2 fcd4 	bl	80005f8 <__aeabi_dmul>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4650      	mov	r0, sl
 800dc56:	4659      	mov	r1, fp
 800dc58:	f7f2 fb18 	bl	800028c <__adddf3>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4692      	mov	sl, r2
 800dc62:	469b      	mov	fp, r3
 800dc64:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800dc6c:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800dc70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7f2 fc67 	bl	8000548 <__aeabi_f2d>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	4620      	mov	r0, r4
 800dc80:	4629      	mov	r1, r5
 800dc82:	f7f2 fcb9 	bl	80005f8 <__aeabi_dmul>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4650      	mov	r0, sl
 800dc8c:	4659      	mov	r1, fp
 800dc8e:	f7f2 fafd 	bl	800028c <__adddf3>
 800dc92:	4602      	mov	r2, r0
 800dc94:	460b      	mov	r3, r1
 800dc96:	4692      	mov	sl, r2
 800dc98:	469b      	mov	fp, r3
 800dc9a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dc9e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800dca2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800dca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7f2 fc4c 	bl	8000548 <__aeabi_f2d>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	f7f2 fc9e 	bl	80005f8 <__aeabi_dmul>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4650      	mov	r0, sl
 800dcc2:	4659      	mov	r1, fp
 800dcc4:	f7f2 fae2 	bl	800028c <__adddf3>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4692      	mov	sl, r2
 800dcce:	469b      	mov	fp, r3
 800dcd0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800dcd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800dcd8:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800dcdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7f2 fc31 	bl	8000548 <__aeabi_f2d>
 800dce6:	4602      	mov	r2, r0
 800dce8:	460b      	mov	r3, r1
 800dcea:	4620      	mov	r0, r4
 800dcec:	4629      	mov	r1, r5
 800dcee:	f7f2 fc83 	bl	80005f8 <__aeabi_dmul>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4650      	mov	r0, sl
 800dcf8:	4659      	mov	r1, fp
 800dcfa:	f7f2 fac7 	bl	800028c <__adddf3>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	4610      	mov	r0, r2
 800dd04:	4619      	mov	r1, r3
 800dd06:	f7f2 ff6f 	bl	8000be8 <__aeabi_d2f>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		lqrOutT_check = -lqrOutT;
 800dd10:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 800dd14:	eef1 7a67 	vneg.f32	s15, s15
 800dd18:	ee17 3a90 	vmov	r3, s15
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7f2 fc13 	bl	8000548 <__aeabi_f2d>
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	491c      	ldr	r1, [pc, #112]	; (800dd98 <Ctrl_Task+0x700>)
 800dd28:	e9c1 2300 	strd	r2, r3, [r1]
		lqrOutTp_check = -lqrOutTp;
 800dd2c:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 800dd30:	eef1 7a67 	vneg.f32	s15, s15
 800dd34:	ee17 3a90 	vmov	r3, s15
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7f2 fc05 	bl	8000548 <__aeabi_f2d>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4916      	ldr	r1, [pc, #88]	; (800dd9c <Ctrl_Task+0x704>)
 800dd44:	e9c1 2300 	strd	r2, r3, [r1]
		//计算yaw轴PID输出
		PID_Compute(&yawPID, target.yawAngle, imu_heading.yaw,0.004,0);
 800dd48:	4b11      	ldr	r3, [pc, #68]	; (800dd90 <Ctrl_Task+0x6f8>)
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7f2 fbfb 	bl	8000548 <__aeabi_f2d>
 800dd52:	4604      	mov	r4, r0
 800dd54:	460d      	mov	r5, r1
 800dd56:	4b12      	ldr	r3, [pc, #72]	; (800dda0 <Ctrl_Task+0x708>)
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7f2 fbf4 	bl	8000548 <__aeabi_f2d>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	ed9f 3b04 	vldr	d3, [pc, #16]	; 800dd78 <Ctrl_Task+0x6e0>
 800dd68:	ed9f 2b05 	vldr	d2, [pc, #20]	; 800dd80 <Ctrl_Task+0x6e8>
 800dd6c:	ec43 2b11 	vmov	d1, r2, r3
 800dd70:	e018      	b.n	800dda4 <Ctrl_Task+0x70c>
 800dd72:	bf00      	nop
 800dd74:	f3af 8000 	nop.w
	...
 800dd80:	d2f1a9fc 	.word	0xd2f1a9fc
 800dd84:	3f70624d 	.word	0x3f70624d
 800dd88:	c0240000 	.word	0xc0240000
 800dd8c:	20003718 	.word	0x20003718
 800dd90:	20000020 	.word	0x20000020
 800dd94:	200038c8 	.word	0x200038c8
 800dd98:	20003838 	.word	0x20003838
 800dd9c:	20003830 	.word	0x20003830
 800dda0:	20003194 	.word	0x20003194
 800dda4:	ec45 4b10 	vmov	d0, r4, r5
 800dda8:	4861      	ldr	r0, [pc, #388]	; (800df30 <Ctrl_Task+0x898>)
 800ddaa:	f7f6 fff1 	bl	8004d90 <PID_Compute>

		//设定车轮电机输出扭矩，为LQR和yaw轴PID输出的叠加
		if(groundDetector.isTouchingGround) //正常接地状态
 800ddae:	4b61      	ldr	r3, [pc, #388]	; (800df34 <Ctrl_Task+0x89c>)
 800ddb0:	7a1b      	ldrb	r3, [r3, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d033      	beq.n	800de1e <Ctrl_Task+0x786>
		{
//			Motor_SetTorque(&leftWheel, -lqrOutT * lqrTRatio - yawPID.output);
//			Motor_SetTorque(&rightWheel, -lqrOutT * lqrTRatio + yawPID.output);
			can_motors[1].torque = lqrOutT * lqrTRatio + yawPID.output;
 800ddb6:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800ddba:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 800ddbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddc2:	ee17 0a90 	vmov	r0, s15
 800ddc6:	f7f2 fbbf 	bl	8000548 <__aeabi_f2d>
 800ddca:	4b59      	ldr	r3, [pc, #356]	; (800df30 <Ctrl_Task+0x898>)
 800ddcc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ddd0:	f7f2 fa5c 	bl	800028c <__adddf3>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	4610      	mov	r0, r2
 800ddda:	4619      	mov	r1, r3
 800dddc:	f7f2 ff04 	bl	8000be8 <__aeabi_d2f>
 800dde0:	4603      	mov	r3, r0
 800dde2:	4a55      	ldr	r2, [pc, #340]	; (800df38 <Ctrl_Task+0x8a0>)
 800dde4:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
			can_motors[0].torque = -lqrOutT * lqrTRatio - yawPID.output;
 800dde8:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 800ddec:	eeb1 7a67 	vneg.f32	s14, s15
 800ddf0:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 800ddf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddf8:	ee17 0a90 	vmov	r0, s15
 800ddfc:	f7f2 fba4 	bl	8000548 <__aeabi_f2d>
 800de00:	4b4b      	ldr	r3, [pc, #300]	; (800df30 <Ctrl_Task+0x898>)
 800de02:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800de06:	f7f2 fa3f 	bl	8000288 <__aeabi_dsub>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	4610      	mov	r0, r2
 800de10:	4619      	mov	r1, r3
 800de12:	f7f2 fee9 	bl	8000be8 <__aeabi_d2f>
 800de16:	4603      	mov	r3, r0
 800de18:	4a47      	ldr	r2, [pc, #284]	; (800df38 <Ctrl_Task+0x8a0>)
 800de1a:	6293      	str	r3, [r2, #40]	; 0x28
 800de1c:	e008      	b.n	800de30 <Ctrl_Task+0x798>
		}
		else //腿部离地状态，关闭车轮电机
		{
//			Motor_SetTorque(&leftWheel, 0);
//			Motor_SetTorque(&rightWheel, 0);
			can_motors[1].torque = 0;
 800de1e:	4b46      	ldr	r3, [pc, #280]	; (800df38 <Ctrl_Task+0x8a0>)
 800de20:	f04f 0200 	mov.w	r2, #0
 800de24:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			can_motors[0].torque = 0;
 800de28:	4b43      	ldr	r3, [pc, #268]	; (800df38 <Ctrl_Task+0x8a0>)
 800de2a:	f04f 0200 	mov.w	r2, #0
 800de2e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		//根据离地状态修改目标腿长，并计算腿长PID输出
		PID_Compute(&legLengthPID, (groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? target.legLength : 0.2f, legLength,0.004,0.001);
 800de30:	4b40      	ldr	r3, [pc, #256]	; (800df34 <Ctrl_Task+0x89c>)
 800de32:	7a1b      	ldrb	r3, [r3, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00e      	beq.n	800de56 <Ctrl_Task+0x7be>
 800de38:	4b3e      	ldr	r3, [pc, #248]	; (800df34 <Ctrl_Task+0x89c>)
 800de3a:	7a5b      	ldrb	r3, [r3, #9]
 800de3c:	f083 0301 	eor.w	r3, r3, #1
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b00      	cmp	r3, #0
 800de44:	d007      	beq.n	800de56 <Ctrl_Task+0x7be>
 800de46:	4b3d      	ldr	r3, [pc, #244]	; (800df3c <Ctrl_Task+0x8a4>)
 800de48:	699b      	ldr	r3, [r3, #24]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7f2 fb7c 	bl	8000548 <__aeabi_f2d>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	e002      	b.n	800de5c <Ctrl_Task+0x7c4>
 800de56:	a330      	add	r3, pc, #192	; (adr r3, 800df18 <Ctrl_Task+0x880>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	ed9f 3b30 	vldr	d3, [pc, #192]	; 800df20 <Ctrl_Task+0x888>
 800de60:	ed9f 2b31 	vldr	d2, [pc, #196]	; 800df28 <Ctrl_Task+0x890>
 800de64:	ed97 1b58 	vldr	d1, [r7, #352]	; 0x160
 800de68:	ec43 2b10 	vmov	d0, r2, r3
 800de6c:	4834      	ldr	r0, [pc, #208]	; (800df40 <Ctrl_Task+0x8a8>)
 800de6e:	f7f6 ff8f 	bl	8004d90 <PID_Compute>
		//计算roll轴PID输出
		PID_Compute(&rollPID, target.rollAngle, imu_heading.rol,0.004,0.001);
 800de72:	4b32      	ldr	r3, [pc, #200]	; (800df3c <Ctrl_Task+0x8a4>)
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	4618      	mov	r0, r3
 800de78:	f7f2 fb66 	bl	8000548 <__aeabi_f2d>
 800de7c:	4604      	mov	r4, r0
 800de7e:	460d      	mov	r5, r1
 800de80:	4b30      	ldr	r3, [pc, #192]	; (800df44 <Ctrl_Task+0x8ac>)
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	4618      	mov	r0, r3
 800de86:	f7f2 fb5f 	bl	8000548 <__aeabi_f2d>
 800de8a:	4602      	mov	r2, r0
 800de8c:	460b      	mov	r3, r1
 800de8e:	ed9f 3b24 	vldr	d3, [pc, #144]	; 800df20 <Ctrl_Task+0x888>
 800de92:	ed9f 2b25 	vldr	d2, [pc, #148]	; 800df28 <Ctrl_Task+0x890>
 800de96:	ec43 2b11 	vmov	d1, r2, r3
 800de9a:	ec45 4b10 	vmov	d0, r4, r5
 800de9e:	482a      	ldr	r0, [pc, #168]	; (800df48 <Ctrl_Task+0x8b0>)
 800dea0:	f7f6 ff76 	bl	8004d90 <PID_Compute>
		//根据离地状态计算左右腿推力，若离地则不考虑roll轴PID输出和前馈量
		double leftForce = legLengthPID.output + ((groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? +rollPID.output : 0) + 13;
 800dea4:	4b26      	ldr	r3, [pc, #152]	; (800df40 <Ctrl_Task+0x8a8>)
 800dea6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800deaa:	4922      	ldr	r1, [pc, #136]	; (800df34 <Ctrl_Task+0x89c>)
 800deac:	7a09      	ldrb	r1, [r1, #8]
 800deae:	2900      	cmp	r1, #0
 800deb0:	d00a      	beq.n	800dec8 <Ctrl_Task+0x830>
 800deb2:	4920      	ldr	r1, [pc, #128]	; (800df34 <Ctrl_Task+0x89c>)
 800deb4:	7a49      	ldrb	r1, [r1, #9]
 800deb6:	f081 0101 	eor.w	r1, r1, #1
 800deba:	b2c9      	uxtb	r1, r1
 800debc:	2900      	cmp	r1, #0
 800debe:	d003      	beq.n	800dec8 <Ctrl_Task+0x830>
 800dec0:	4921      	ldr	r1, [pc, #132]	; (800df48 <Ctrl_Task+0x8b0>)
 800dec2:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800dec6:	e003      	b.n	800ded0 <Ctrl_Task+0x838>
 800dec8:	f04f 0000 	mov.w	r0, #0
 800decc:	f04f 0100 	mov.w	r1, #0
 800ded0:	f7f2 f9dc 	bl	800028c <__adddf3>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4610      	mov	r0, r2
 800deda:	4619      	mov	r1, r3
 800dedc:	f04f 0200 	mov.w	r2, #0
 800dee0:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <Ctrl_Task+0x8b4>)
 800dee2:	f7f2 f9d3 	bl	800028c <__adddf3>
 800dee6:	4602      	mov	r2, r0
 800dee8:	460b      	mov	r3, r1
 800deea:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		double rightForce = legLengthPID.output + ((groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? -rollPID.output : 0) + 13;
 800deee:	4b14      	ldr	r3, [pc, #80]	; (800df40 <Ctrl_Task+0x8a8>)
 800def0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800def4:	4b0f      	ldr	r3, [pc, #60]	; (800df34 <Ctrl_Task+0x89c>)
 800def6:	7a1b      	ldrb	r3, [r3, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d029      	beq.n	800df50 <Ctrl_Task+0x8b8>
 800defc:	4b0d      	ldr	r3, [pc, #52]	; (800df34 <Ctrl_Task+0x89c>)
 800defe:	7a5b      	ldrb	r3, [r3, #9]
 800df00:	f083 0301 	eor.w	r3, r3, #1
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d022      	beq.n	800df50 <Ctrl_Task+0x8b8>
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <Ctrl_Task+0x8b0>)
 800df0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df10:	4690      	mov	r8, r2
 800df12:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800df16:	e01f      	b.n	800df58 <Ctrl_Task+0x8c0>
 800df18:	a0000000 	.word	0xa0000000
 800df1c:	3fc99999 	.word	0x3fc99999
 800df20:	d2f1a9fc 	.word	0xd2f1a9fc
 800df24:	3f50624d 	.word	0x3f50624d
 800df28:	d2f1a9fc 	.word	0xd2f1a9fc
 800df2c:	3f70624d 	.word	0x3f70624d
 800df30:	200037b0 	.word	0x200037b0
 800df34:	2000003c 	.word	0x2000003c
 800df38:	200018a0 	.word	0x200018a0
 800df3c:	20000020 	.word	0x20000020
 800df40:	20003770 	.word	0x20003770
 800df44:	20003194 	.word	0x20003194
 800df48:	200037f0 	.word	0x200037f0
 800df4c:	402a0000 	.word	0x402a0000
 800df50:	f04f 0800 	mov.w	r8, #0
 800df54:	f04f 0900 	mov.w	r9, #0
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4640      	mov	r0, r8
 800df5e:	4649      	mov	r1, r9
 800df60:	f7f2 f994 	bl	800028c <__adddf3>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	4610      	mov	r0, r2
 800df6a:	4619      	mov	r1, r3
 800df6c:	f04f 0200 	mov.w	r2, #0
 800df70:	4b62      	ldr	r3, [pc, #392]	; (800e0fc <Ctrl_Task+0xa64>)
 800df72:	f7f2 f98b 	bl	800028c <__adddf3>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
//		double leftForce = legLengthPID.output + 5.0;
//		double rightForce = legLengthPID.output + 5.0;
		if(leftLegPos.length > 0.22f) //保护腿部不能伸太长
 800df7e:	4b60      	ldr	r3, [pc, #384]	; (800e100 <Ctrl_Task+0xa68>)
 800df80:	edd3 7a01 	vldr	s15, [r3, #4]
 800df84:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800e104 <Ctrl_Task+0xa6c>
 800df88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df90:	dd14      	ble.n	800dfbc <Ctrl_Task+0x924>
			leftForce -= (leftLegPos.length - 0.2f) * 1;
 800df92:	4b5b      	ldr	r3, [pc, #364]	; (800e100 <Ctrl_Task+0xa68>)
 800df94:	edd3 7a01 	vldr	s15, [r3, #4]
 800df98:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800e108 <Ctrl_Task+0xa70>
 800df9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfa0:	ee17 0a90 	vmov	r0, s15
 800dfa4:	f7f2 fad0 	bl	8000548 <__aeabi_f2d>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800dfb0:	f7f2 f96a 	bl	8000288 <__aeabi_dsub>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		if(rightLegPos.length > 0.22f)
 800dfbc:	4b53      	ldr	r3, [pc, #332]	; (800e10c <Ctrl_Task+0xa74>)
 800dfbe:	edd3 7a01 	vldr	s15, [r3, #4]
 800dfc2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800e104 <Ctrl_Task+0xa6c>
 800dfc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfce:	dd14      	ble.n	800dffa <Ctrl_Task+0x962>
			rightForce -= (rightLegPos.length - 0.2f) * 1;
 800dfd0:	4b4e      	ldr	r3, [pc, #312]	; (800e10c <Ctrl_Task+0xa74>)
 800dfd2:	edd3 7a01 	vldr	s15, [r3, #4]
 800dfd6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800e108 <Ctrl_Task+0xa70>
 800dfda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfde:	ee17 0a90 	vmov	r0, s15
 800dfe2:	f7f2 fab1 	bl	8000548 <__aeabi_f2d>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800dfee:	f7f2 f94b 	bl	8000288 <__aeabi_dsub>
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190

		//计算左右腿的地面支持力
		groundDetector.leftSupportForce = leftForce + legMass * 9.8f - legMass * (leftLegPos.ddLength - imu_heading.ddz - 9.8f);
 800dffa:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800dffe:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e110 <Ctrl_Task+0xa78>
 800e002:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e006:	ee17 0a90 	vmov	r0, s15
 800e00a:	f7f2 fa9d 	bl	8000548 <__aeabi_f2d>
 800e00e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e012:	f7f2 f93b 	bl	800028c <__adddf3>
 800e016:	4602      	mov	r2, r0
 800e018:	460b      	mov	r3, r1
 800e01a:	4614      	mov	r4, r2
 800e01c:	461d      	mov	r5, r3
 800e01e:	4b38      	ldr	r3, [pc, #224]	; (800e100 <Ctrl_Task+0xa68>)
 800e020:	ed93 7a04 	vldr	s14, [r3, #16]
 800e024:	4b3b      	ldr	r3, [pc, #236]	; (800e114 <Ctrl_Task+0xa7c>)
 800e026:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e02a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e02e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e110 <Ctrl_Task+0xa78>
 800e032:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e036:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800e03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e03e:	ee17 0a90 	vmov	r0, s15
 800e042:	f7f2 fa81 	bl	8000548 <__aeabi_f2d>
 800e046:	4602      	mov	r2, r0
 800e048:	460b      	mov	r3, r1
 800e04a:	4620      	mov	r0, r4
 800e04c:	4629      	mov	r1, r5
 800e04e:	f7f2 f91b 	bl	8000288 <__aeabi_dsub>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4610      	mov	r0, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	f7f2 fdc5 	bl	8000be8 <__aeabi_d2f>
 800e05e:	4603      	mov	r3, r0
 800e060:	4a2d      	ldr	r2, [pc, #180]	; (800e118 <Ctrl_Task+0xa80>)
 800e062:	6013      	str	r3, [r2, #0]
		groundDetector.rightSupportForce = rightForce + legMass * 9.8f - legMass * (rightLegPos.ddLength - imu_heading.ddz - 9.8f);
 800e064:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800e068:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e110 <Ctrl_Task+0xa78>
 800e06c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e070:	ee17 0a90 	vmov	r0, s15
 800e074:	f7f2 fa68 	bl	8000548 <__aeabi_f2d>
 800e078:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e07c:	f7f2 f906 	bl	800028c <__adddf3>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	4614      	mov	r4, r2
 800e086:	461d      	mov	r5, r3
 800e088:	4b20      	ldr	r3, [pc, #128]	; (800e10c <Ctrl_Task+0xa74>)
 800e08a:	ed93 7a04 	vldr	s14, [r3, #16]
 800e08e:	4b21      	ldr	r3, [pc, #132]	; (800e114 <Ctrl_Task+0xa7c>)
 800e090:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e094:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e098:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e110 <Ctrl_Task+0xa78>
 800e09c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e0a0:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800e0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0a8:	ee17 0a90 	vmov	r0, s15
 800e0ac:	f7f2 fa4c 	bl	8000548 <__aeabi_f2d>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	f7f2 f8e6 	bl	8000288 <__aeabi_dsub>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	f7f2 fd90 	bl	8000be8 <__aeabi_d2f>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	4a13      	ldr	r2, [pc, #76]	; (800e118 <Ctrl_Task+0xa80>)
 800e0cc:	6053      	str	r3, [r2, #4]
		//更新离地检测器数据
		static uint32_t lastTouchTime = 0;
		bool isTouchingGround = groundDetector.leftSupportForce > -100 && groundDetector.rightSupportForce > -100; //判断当前瞬间是否接地
 800e0ce:	4b12      	ldr	r3, [pc, #72]	; (800e118 <Ctrl_Task+0xa80>)
 800e0d0:	edd3 7a00 	vldr	s15, [r3]
 800e0d4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800e11c <Ctrl_Task+0xa84>
 800e0d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e0:	dd1e      	ble.n	800e120 <Ctrl_Task+0xa88>
 800e0e2:	4b0d      	ldr	r3, [pc, #52]	; (800e118 <Ctrl_Task+0xa80>)
 800e0e4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e0e8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e11c <Ctrl_Task+0xa84>
 800e0ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f4:	dd14      	ble.n	800e120 <Ctrl_Task+0xa88>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e013      	b.n	800e122 <Ctrl_Task+0xa8a>
 800e0fa:	bf00      	nop
 800e0fc:	402a0000 	.word	0x402a0000
 800e100:	200036f0 	.word	0x200036f0
 800e104:	3e6147ae 	.word	0x3e6147ae
 800e108:	3e4ccccd 	.word	0x3e4ccccd
 800e10c:	20003704 	.word	0x20003704
 800e110:	411ccccd 	.word	0x411ccccd
 800e114:	20003194 	.word	0x20003194
 800e118:	2000003c 	.word	0x2000003c
 800e11c:	c2c80000 	.word	0xc2c80000
 800e120:	2300      	movs	r3, #0
 800e122:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 800e126:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		if(!isTouchingGround && (get_microseconds()/1000) - lastTouchTime < 1000) //若上次触地时间距离现在不超过1s，则认为当前瞬间接地，避免弹跳导致误判
 800e132:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800e136:	f083 0301 	eor.w	r3, r3, #1
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00f      	beq.n	800e160 <Ctrl_Task+0xac8>
 800e140:	f7f4 f896 	bl	8002270 <get_microseconds>
 800e144:	4603      	mov	r3, r0
 800e146:	4a98      	ldr	r2, [pc, #608]	; (800e3a8 <Ctrl_Task+0xd10>)
 800e148:	fba2 2303 	umull	r2, r3, r2, r3
 800e14c:	099a      	lsrs	r2, r3, #6
 800e14e:	4b97      	ldr	r3, [pc, #604]	; (800e3ac <Ctrl_Task+0xd14>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e158:	d202      	bcs.n	800e160 <Ctrl_Task+0xac8>
			isTouchingGround = true;
 800e15a:	2301      	movs	r3, #1
 800e15c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
		if(!groundDetector.isTouchingGround && isTouchingGround) //判断转为接地状态，标记进入缓冲状态
 800e160:	4b93      	ldr	r3, [pc, #588]	; (800e3b0 <Ctrl_Task+0xd18>)
 800e162:	7a1b      	ldrb	r3, [r3, #8]
 800e164:	f083 0301 	eor.w	r3, r3, #1
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d013      	beq.n	800e196 <Ctrl_Task+0xafe>
 800e16e:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00f      	beq.n	800e196 <Ctrl_Task+0xafe>
		{
			target.position = stateVar.x;
 800e176:	4b8f      	ldr	r3, [pc, #572]	; (800e3b4 <Ctrl_Task+0xd1c>)
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	4a8f      	ldr	r2, [pc, #572]	; (800e3b8 <Ctrl_Task+0xd20>)
 800e17c:	6013      	str	r3, [r2, #0]
			groundDetector.isCuchioning = true;
 800e17e:	4b8c      	ldr	r3, [pc, #560]	; (800e3b0 <Ctrl_Task+0xd18>)
 800e180:	2201      	movs	r2, #1
 800e182:	725a      	strb	r2, [r3, #9]
			lastTouchTime = (get_microseconds()/1000);
 800e184:	f7f4 f874 	bl	8002270 <get_microseconds>
 800e188:	4603      	mov	r3, r0
 800e18a:	4a87      	ldr	r2, [pc, #540]	; (800e3a8 <Ctrl_Task+0xd10>)
 800e18c:	fba2 2303 	umull	r2, r3, r2, r3
 800e190:	099b      	lsrs	r3, r3, #6
 800e192:	4a86      	ldr	r2, [pc, #536]	; (800e3ac <Ctrl_Task+0xd14>)
 800e194:	6013      	str	r3, [r2, #0]
		}
		if(groundDetector.isCuchioning && legLength < target.legLength) //缓冲状态直到腿长压缩到目标腿长结束
 800e196:	4b86      	ldr	r3, [pc, #536]	; (800e3b0 <Ctrl_Task+0xd18>)
 800e198:	7a5b      	ldrb	r3, [r3, #9]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d010      	beq.n	800e1c0 <Ctrl_Task+0xb28>
 800e19e:	4b86      	ldr	r3, [pc, #536]	; (800e3b8 <Ctrl_Task+0xd20>)
 800e1a0:	699b      	ldr	r3, [r3, #24]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7f2 f9d0 	bl	8000548 <__aeabi_f2d>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800e1b0:	f7f2 fc94 	bl	8000adc <__aeabi_dcmplt>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <Ctrl_Task+0xb28>
			groundDetector.isCuchioning = false;
 800e1ba:	4b7d      	ldr	r3, [pc, #500]	; (800e3b0 <Ctrl_Task+0xd18>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	725a      	strb	r2, [r3, #9]
		groundDetector.isTouchingGround = isTouchingGround;
 800e1c0:	4a7b      	ldr	r2, [pc, #492]	; (800e3b0 <Ctrl_Task+0xd18>)
 800e1c2:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800e1c6:	7213      	strb	r3, [r2, #8]

		//计算左右腿角度差PID输出
		// PID_Compute(&legAnglePID, 0, leftLegPos.angle - rightLegPos.angle,0.004,0.01);
        legAnglePID.output = 0;
 800e1c8:	497c      	ldr	r1, [pc, #496]	; (800e3bc <Ctrl_Task+0xd24>)
 800e1ca:	f04f 0200 	mov.w	r2, #0
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

		//计算髋关节扭矩输出，为LQR输出和左右腿角度差PID输出的叠加
//		double leftTp = lqrOutTp * lqrTpRatio - legAnglePID.output * (leftLegPos.length / 0.15f);
//		double rightTp = -lqrOutTp * lqrTpRatio + legAnglePID.output * (rightLegPos.length / 0.15f);
		double leftTp = -lqrOutTp * lqrTpRatio + legAnglePID.output * (leftLegPos.length / 0.1f);
 800e1d6:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 800e1da:	eeb1 7a67 	vneg.f32	s14, s15
 800e1de:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 800e1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1e6:	ee17 0a90 	vmov	r0, s15
 800e1ea:	f7f2 f9ad 	bl	8000548 <__aeabi_f2d>
 800e1ee:	4682      	mov	sl, r0
 800e1f0:	468b      	mov	fp, r1
 800e1f2:	4b72      	ldr	r3, [pc, #456]	; (800e3bc <Ctrl_Task+0xd24>)
 800e1f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800e1f8:	4b71      	ldr	r3, [pc, #452]	; (800e3c0 <Ctrl_Task+0xd28>)
 800e1fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800e1fe:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800e3c4 <Ctrl_Task+0xd2c>
 800e202:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e206:	ee16 0a90 	vmov	r0, s13
 800e20a:	f7f2 f99d 	bl	8000548 <__aeabi_f2d>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	4620      	mov	r0, r4
 800e214:	4629      	mov	r1, r5
 800e216:	f7f2 f9ef 	bl	80005f8 <__aeabi_dmul>
 800e21a:	4602      	mov	r2, r0
 800e21c:	460b      	mov	r3, r1
 800e21e:	4650      	mov	r0, sl
 800e220:	4659      	mov	r1, fp
 800e222:	f7f2 f833 	bl	800028c <__adddf3>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
		double rightTp = -lqrOutTp * lqrTpRatio - legAnglePID.output * (rightLegPos.length / 0.1f);
 800e22e:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 800e232:	eeb1 7a67 	vneg.f32	s14, s15
 800e236:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 800e23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e23e:	ee17 0a90 	vmov	r0, s15
 800e242:	f7f2 f981 	bl	8000548 <__aeabi_f2d>
 800e246:	4682      	mov	sl, r0
 800e248:	468b      	mov	fp, r1
 800e24a:	4b5c      	ldr	r3, [pc, #368]	; (800e3bc <Ctrl_Task+0xd24>)
 800e24c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800e250:	4b5d      	ldr	r3, [pc, #372]	; (800e3c8 <Ctrl_Task+0xd30>)
 800e252:	edd3 7a01 	vldr	s15, [r3, #4]
 800e256:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800e3c4 <Ctrl_Task+0xd2c>
 800e25a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e25e:	ee16 0a90 	vmov	r0, s13
 800e262:	f7f2 f971 	bl	8000548 <__aeabi_f2d>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f2 f9c3 	bl	80005f8 <__aeabi_dmul>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4650      	mov	r0, sl
 800e278:	4659      	mov	r1, fp
 800e27a:	f7f2 f805 	bl	8000288 <__aeabi_dsub>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140



		//使用VMC计算各关节电机输出扭矩
		double leftJointTorque[2]={0};
 800e286:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800e28a:	2200      	movs	r2, #0
 800e28c:	601a      	str	r2, [r3, #0]
 800e28e:	605a      	str	r2, [r3, #4]
 800e290:	609a      	str	r2, [r3, #8]
 800e292:	60da      	str	r2, [r3, #12]
		leg_conv(leftForce, leftTp, leftJoint[1].angle, leftJoint[0].angle, leftJointTorque);
 800e294:	4b4d      	ldr	r3, [pc, #308]	; (800e3cc <Ctrl_Task+0xd34>)
 800e296:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800e29a:	4b4c      	ldr	r3, [pc, #304]	; (800e3cc <Ctrl_Task+0xd34>)
 800e29c:	ed93 6b02 	vldr	d6, [r3, #8]
 800e2a0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	eeb0 3a46 	vmov.f32	s6, s12
 800e2aa:	eef0 3a66 	vmov.f32	s7, s13
 800e2ae:	eeb0 2a47 	vmov.f32	s4, s14
 800e2b2:	eef0 2a67 	vmov.f32	s5, s15
 800e2b6:	ed97 1b52 	vldr	d1, [r7, #328]	; 0x148
 800e2ba:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 800e2be:	f7fa fafb 	bl	80088b8 <leg_conv>
		double rightJointTorque[2]={0};
 800e2c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	605a      	str	r2, [r3, #4]
 800e2cc:	609a      	str	r2, [r3, #8]
 800e2ce:	60da      	str	r2, [r3, #12]
		leg_conv(rightForce, rightTp, rightJoint[1].angle, rightJoint[0].angle, rightJointTorque);
 800e2d0:	4b3f      	ldr	r3, [pc, #252]	; (800e3d0 <Ctrl_Task+0xd38>)
 800e2d2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800e2d6:	4b3e      	ldr	r3, [pc, #248]	; (800e3d0 <Ctrl_Task+0xd38>)
 800e2d8:	ed93 6b02 	vldr	d6, [r3, #8]
 800e2dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	eeb0 3a46 	vmov.f32	s6, s12
 800e2e6:	eef0 3a66 	vmov.f32	s7, s13
 800e2ea:	eeb0 2a47 	vmov.f32	s4, s14
 800e2ee:	eef0 2a67 	vmov.f32	s5, s15
 800e2f2:	ed97 1b50 	vldr	d1, [r7, #320]	; 0x140
 800e2f6:	ed97 0b64 	vldr	d0, [r7, #400]	; 0x190
 800e2fa:	f7fa fadd 	bl	80088b8 <leg_conv>

		leftF_check = leftForce;
 800e2fe:	4935      	ldr	r1, [pc, #212]	; (800e3d4 <Ctrl_Task+0xd3c>)
 800e300:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800e304:	e9c1 2300 	strd	r2, r3, [r1]
		leftTp_check = leftTp;
 800e308:	4933      	ldr	r1, [pc, #204]	; (800e3d8 <Ctrl_Task+0xd40>)
 800e30a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800e30e:	e9c1 2300 	strd	r2, r3, [r1]
		rightF_check = rightForce;
 800e312:	4932      	ldr	r1, [pc, #200]	; (800e3dc <Ctrl_Task+0xd44>)
 800e314:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800e318:	e9c1 2300 	strd	r2, r3, [r1]
		rightTp_check = rightTp;
 800e31c:	4930      	ldr	r1, [pc, #192]	; (800e3e0 <Ctrl_Task+0xd48>)
 800e31e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800e322:	e9c1 2300 	strd	r2, r3, [r1]
		// if (g_remote_cmd.right_switch == 3){
		// 	standupState = StandupState_Standup;
		// }else{
		// 	standupState = StandupState_None;
		// }
		float leftTheta = leftLegPos.angle - imu_heading.pit - M_PI_2;
 800e326:	4b26      	ldr	r3, [pc, #152]	; (800e3c0 <Ctrl_Task+0xd28>)
 800e328:	ed93 7a00 	vldr	s14, [r3]
 800e32c:	4b2d      	ldr	r3, [pc, #180]	; (800e3e4 <Ctrl_Task+0xd4c>)
 800e32e:	edd3 7a00 	vldr	s15, [r3]
 800e332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e336:	ee17 0a90 	vmov	r0, s15
 800e33a:	f7f2 f905 	bl	8000548 <__aeabi_f2d>
 800e33e:	a318      	add	r3, pc, #96	; (adr r3, 800e3a0 <Ctrl_Task+0xd08>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	f7f1 ffa0 	bl	8000288 <__aeabi_dsub>
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	4610      	mov	r0, r2
 800e34e:	4619      	mov	r1, r3
 800e350:	f7f2 fc4a 	bl	8000be8 <__aeabi_d2f>
 800e354:	4603      	mov	r3, r0
 800e356:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		float rightTheta = rightLegPos.angle - imu_heading.pit - M_PI_2;
 800e35a:	4b1b      	ldr	r3, [pc, #108]	; (800e3c8 <Ctrl_Task+0xd30>)
 800e35c:	ed93 7a00 	vldr	s14, [r3]
 800e360:	4b20      	ldr	r3, [pc, #128]	; (800e3e4 <Ctrl_Task+0xd4c>)
 800e362:	edd3 7a00 	vldr	s15, [r3]
 800e366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e36a:	ee17 0a90 	vmov	r0, s15
 800e36e:	f7f2 f8eb 	bl	8000548 <__aeabi_f2d>
 800e372:	a30b      	add	r3, pc, #44	; (adr r3, 800e3a0 <Ctrl_Task+0xd08>)
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	f7f1 ff86 	bl	8000288 <__aeabi_dsub>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4610      	mov	r0, r2
 800e382:	4619      	mov	r1, r3
 800e384:	f7f2 fc30 	bl	8000be8 <__aeabi_d2f>
 800e388:	4603      	mov	r3, r0
 800e38a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
//		l1 = leftJointTorque[0];
//		l4 = leftJointTorque[1];
//		r1 = rightJointTorque[0];
//		r4 = rightJointTorque[1];

		vTaskDelayUntil(&xLastWakeTime, 4); //4ms控制周期
 800e38e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800e392:	2104      	movs	r1, #4
 800e394:	4618      	mov	r0, r3
 800e396:	f00d fafd 	bl	801b994 <vTaskDelayUntil>
	{
 800e39a:	f7ff b9e5 	b.w	800d768 <Ctrl_Task+0xd0>
 800e39e:	bf00      	nop
 800e3a0:	54442d18 	.word	0x54442d18
 800e3a4:	3ff921fb 	.word	0x3ff921fb
 800e3a8:	10624dd3 	.word	0x10624dd3
 800e3ac:	200038cc 	.word	0x200038cc
 800e3b0:	2000003c 	.word	0x2000003c
 800e3b4:	20003718 	.word	0x20003718
 800e3b8:	20000020 	.word	0x20000020
 800e3bc:	20003730 	.word	0x20003730
 800e3c0:	200036f0 	.word	0x200036f0
 800e3c4:	3dcccccd 	.word	0x3dcccccd
 800e3c8:	20003704 	.word	0x20003704
 800e3cc:	20003540 	.word	0x20003540
 800e3d0:	200035d0 	.word	0x200035d0
 800e3d4:	20003840 	.word	0x20003840
 800e3d8:	20003848 	.word	0x20003848
 800e3dc:	20003850 	.word	0x20003850
 800e3e0:	20003858 	.word	0x20003858
 800e3e4:	20003194 	.word	0x20003194

0800e3e8 <Ctrl_Init>:
	}
}
void Ctrl_Init()
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	af00      	add	r7, sp, #0
	//初始化各个PID参数
//	PID_SetErrLpfRatio(&rollPID.inner, 0.1f);
	PID_Init(&legLengthPID, 500, 0.0, 0.0, -300.0, 300.0);
 800e3ec:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 800e458 <Ctrl_Init+0x70>
 800e3f0:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 800e460 <Ctrl_Init+0x78>
 800e3f4:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 800e468 <Ctrl_Init+0x80>
 800e3f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800e468 <Ctrl_Init+0x80>
 800e3fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e470 <Ctrl_Init+0x88>
 800e400:	482f      	ldr	r0, [pc, #188]	; (800e4c0 <Ctrl_Init+0xd8>)
 800e402:	f7f6 fc8a 	bl	8004d1a <PID_Init>
//	PID_SetErrLpfRatio(&legLengthPID.inner, 0.5f);
	PID_Init(&legAnglePID, 13, 0.0, 0.0, -3.0, 3.0);
 800e406:	ed9f 4b1c 	vldr	d4, [pc, #112]	; 800e478 <Ctrl_Init+0x90>
 800e40a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800e480 <Ctrl_Init+0x98>
 800e40e:	ed9f 2b16 	vldr	d2, [pc, #88]	; 800e468 <Ctrl_Init+0x80>
 800e412:	ed9f 1b15 	vldr	d1, [pc, #84]	; 800e468 <Ctrl_Init+0x80>
 800e416:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e488 <Ctrl_Init+0xa0>
 800e41a:	482a      	ldr	r0, [pc, #168]	; (800e4c4 <Ctrl_Init+0xdc>)
 800e41c:	f7f6 fc7d 	bl	8004d1a <PID_Init>
//	PID_SetErrLpfRatio(&legAnglePID.outer, 0.5f);
	PID_Init(&rollPID, 55, 0.0, 0.0, -50.0, 50.0);
 800e420:	ed9f 4b1b 	vldr	d4, [pc, #108]	; 800e490 <Ctrl_Init+0xa8>
 800e424:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 800e498 <Ctrl_Init+0xb0>
 800e428:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 800e468 <Ctrl_Init+0x80>
 800e42c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 800e468 <Ctrl_Init+0x80>
 800e430:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800e4a0 <Ctrl_Init+0xb8>
 800e434:	4824      	ldr	r0, [pc, #144]	; (800e4c8 <Ctrl_Init+0xe0>)
 800e436:	f7f6 fc70 	bl	8004d1a <PID_Init>
	PID_Init(&yawPID, 0.5f, 0.0, 0.0, -1, 1);
 800e43a:	ed9f 4b1b 	vldr	d4, [pc, #108]	; 800e4a8 <Ctrl_Init+0xc0>
 800e43e:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 800e4b0 <Ctrl_Init+0xc8>
 800e442:	ed9f 2b09 	vldr	d2, [pc, #36]	; 800e468 <Ctrl_Init+0x80>
 800e446:	ed9f 1b08 	vldr	d1, [pc, #32]	; 800e468 <Ctrl_Init+0x80>
 800e44a:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800e4b8 <Ctrl_Init+0xd0>
 800e44e:	481f      	ldr	r0, [pc, #124]	; (800e4cc <Ctrl_Init+0xe4>)
 800e450:	f7f6 fc63 	bl	8004d1a <PID_Init>
}
 800e454:	bf00      	nop
 800e456:	bd80      	pop	{r7, pc}
 800e458:	00000000 	.word	0x00000000
 800e45c:	4072c000 	.word	0x4072c000
 800e460:	00000000 	.word	0x00000000
 800e464:	c072c000 	.word	0xc072c000
	...
 800e474:	407f4000 	.word	0x407f4000
 800e478:	00000000 	.word	0x00000000
 800e47c:	40080000 	.word	0x40080000
 800e480:	00000000 	.word	0x00000000
 800e484:	c0080000 	.word	0xc0080000
 800e488:	00000000 	.word	0x00000000
 800e48c:	402a0000 	.word	0x402a0000
 800e490:	00000000 	.word	0x00000000
 800e494:	40490000 	.word	0x40490000
 800e498:	00000000 	.word	0x00000000
 800e49c:	c0490000 	.word	0xc0490000
 800e4a0:	00000000 	.word	0x00000000
 800e4a4:	404b8000 	.word	0x404b8000
 800e4a8:	00000000 	.word	0x00000000
 800e4ac:	3ff00000 	.word	0x3ff00000
 800e4b0:	00000000 	.word	0x00000000
 800e4b4:	bff00000 	.word	0xbff00000
 800e4b8:	00000000 	.word	0x00000000
 800e4bc:	3fe00000 	.word	0x3fe00000
 800e4c0:	20003770 	.word	0x20003770
 800e4c4:	20003730 	.word	0x20003730
 800e4c8:	200037f0 	.word	0x200037f0
 800e4cc:	200037b0 	.word	0x200037b0

0800e4d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e4d4:	4b0e      	ldr	r3, [pc, #56]	; (800e510 <HAL_Init+0x40>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a0d      	ldr	r2, [pc, #52]	; (800e510 <HAL_Init+0x40>)
 800e4da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e4de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e4e0:	4b0b      	ldr	r3, [pc, #44]	; (800e510 <HAL_Init+0x40>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a0a      	ldr	r2, [pc, #40]	; (800e510 <HAL_Init+0x40>)
 800e4e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e4ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e4ec:	4b08      	ldr	r3, [pc, #32]	; (800e510 <HAL_Init+0x40>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a07      	ldr	r2, [pc, #28]	; (800e510 <HAL_Init+0x40>)
 800e4f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e4f8:	2003      	movs	r0, #3
 800e4fa:	f001 f9de 	bl	800f8ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e4fe:	2000      	movs	r0, #0
 800e500:	f7f5 fccc 	bl	8003e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e504:	f7f5 fc9e 	bl	8003e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e508:	2300      	movs	r3, #0
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	40023c00 	.word	0x40023c00

0800e514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e514:	b480      	push	{r7}
 800e516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e518:	4b06      	ldr	r3, [pc, #24]	; (800e534 <HAL_IncTick+0x20>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	461a      	mov	r2, r3
 800e51e:	4b06      	ldr	r3, [pc, #24]	; (800e538 <HAL_IncTick+0x24>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4413      	add	r3, r2
 800e524:	4a04      	ldr	r2, [pc, #16]	; (800e538 <HAL_IncTick+0x24>)
 800e526:	6013      	str	r3, [r2, #0]
}
 800e528:	bf00      	nop
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	20000050 	.word	0x20000050
 800e538:	200038d0 	.word	0x200038d0

0800e53c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e53c:	b480      	push	{r7}
 800e53e:	af00      	add	r7, sp, #0
  return uwTick;
 800e540:	4b03      	ldr	r3, [pc, #12]	; (800e550 <HAL_GetTick+0x14>)
 800e542:	681b      	ldr	r3, [r3, #0]
}
 800e544:	4618      	mov	r0, r3
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	200038d0 	.word	0x200038d0

0800e554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e55c:	f7ff ffee 	bl	800e53c <HAL_GetTick>
 800e560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56c:	d005      	beq.n	800e57a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e56e:	4b0a      	ldr	r3, [pc, #40]	; (800e598 <HAL_Delay+0x44>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	4413      	add	r3, r2
 800e578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e57a:	bf00      	nop
 800e57c:	f7ff ffde 	bl	800e53c <HAL_GetTick>
 800e580:	4602      	mov	r2, r0
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	1ad3      	subs	r3, r2, r3
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d8f7      	bhi.n	800e57c <HAL_Delay+0x28>
  {
  }
}
 800e58c:	bf00      	nop
 800e58e:	bf00      	nop
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	20000050 	.word	0x20000050

0800e59c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d101      	bne.n	800e5b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e033      	b.n	800e61a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d109      	bne.n	800e5ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7f4 fc94 	bl	8002ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d2:	f003 0310 	and.w	r3, r3, #16
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d118      	bne.n	800e60c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e5e2:	f023 0302 	bic.w	r3, r3, #2
 800e5e6:	f043 0202 	orr.w	r2, r3, #2
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f93a 	bl	800e868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fe:	f023 0303 	bic.w	r3, r3, #3
 800e602:	f043 0201 	orr.w	r2, r3, #1
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	641a      	str	r2, [r3, #64]	; 0x40
 800e60a:	e001      	b.n	800e610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e60c:	2301      	movs	r3, #1
 800e60e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e618:	7bfb      	ldrb	r3, [r7, #15]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
	...

0800e624 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800e62e:	2300      	movs	r3, #0
 800e630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d101      	bne.n	800e640 <HAL_ADC_ConfigChannel+0x1c>
 800e63c:	2302      	movs	r3, #2
 800e63e:	e105      	b.n	800e84c <HAL_ADC_ConfigChannel+0x228>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b09      	cmp	r3, #9
 800e64e:	d925      	bls.n	800e69c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68d9      	ldr	r1, [r3, #12]
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	461a      	mov	r2, r3
 800e65e:	4613      	mov	r3, r2
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	4413      	add	r3, r2
 800e664:	3b1e      	subs	r3, #30
 800e666:	2207      	movs	r2, #7
 800e668:	fa02 f303 	lsl.w	r3, r2, r3
 800e66c:	43da      	mvns	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	400a      	ands	r2, r1
 800e674:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68d9      	ldr	r1, [r3, #12]
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	689a      	ldr	r2, [r3, #8]
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	b29b      	uxth	r3, r3
 800e686:	4618      	mov	r0, r3
 800e688:	4603      	mov	r3, r0
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	4403      	add	r3, r0
 800e68e:	3b1e      	subs	r3, #30
 800e690:	409a      	lsls	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	430a      	orrs	r2, r1
 800e698:	60da      	str	r2, [r3, #12]
 800e69a:	e022      	b.n	800e6e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6919      	ldr	r1, [r3, #16]
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	005b      	lsls	r3, r3, #1
 800e6ae:	4413      	add	r3, r2
 800e6b0:	2207      	movs	r2, #7
 800e6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6b6:	43da      	mvns	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	400a      	ands	r2, r1
 800e6be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6919      	ldr	r1, [r3, #16]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	689a      	ldr	r2, [r3, #8]
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	4403      	add	r3, r0
 800e6d8:	409a      	lsls	r2, r3
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	430a      	orrs	r2, r1
 800e6e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	2b06      	cmp	r3, #6
 800e6e8:	d824      	bhi.n	800e734 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	685a      	ldr	r2, [r3, #4]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	3b05      	subs	r3, #5
 800e6fc:	221f      	movs	r2, #31
 800e6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e702:	43da      	mvns	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	400a      	ands	r2, r1
 800e70a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	b29b      	uxth	r3, r3
 800e718:	4618      	mov	r0, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	4613      	mov	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4413      	add	r3, r2
 800e724:	3b05      	subs	r3, #5
 800e726:	fa00 f203 	lsl.w	r2, r0, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	430a      	orrs	r2, r1
 800e730:	635a      	str	r2, [r3, #52]	; 0x34
 800e732:	e04c      	b.n	800e7ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	2b0c      	cmp	r3, #12
 800e73a:	d824      	bhi.n	800e786 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	4613      	mov	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4413      	add	r3, r2
 800e74c:	3b23      	subs	r3, #35	; 0x23
 800e74e:	221f      	movs	r2, #31
 800e750:	fa02 f303 	lsl.w	r3, r2, r3
 800e754:	43da      	mvns	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	400a      	ands	r2, r1
 800e75c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	b29b      	uxth	r3, r3
 800e76a:	4618      	mov	r0, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	4613      	mov	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	3b23      	subs	r3, #35	; 0x23
 800e778:	fa00 f203 	lsl.w	r2, r0, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	430a      	orrs	r2, r1
 800e782:	631a      	str	r2, [r3, #48]	; 0x30
 800e784:	e023      	b.n	800e7ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	4613      	mov	r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	3b41      	subs	r3, #65	; 0x41
 800e798:	221f      	movs	r2, #31
 800e79a:	fa02 f303 	lsl.w	r3, r2, r3
 800e79e:	43da      	mvns	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	400a      	ands	r2, r1
 800e7a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	685a      	ldr	r2, [r3, #4]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	4413      	add	r3, r2
 800e7c0:	3b41      	subs	r3, #65	; 0x41
 800e7c2:	fa00 f203 	lsl.w	r2, r0, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e7ce:	4b22      	ldr	r3, [pc, #136]	; (800e858 <HAL_ADC_ConfigChannel+0x234>)
 800e7d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a21      	ldr	r2, [pc, #132]	; (800e85c <HAL_ADC_ConfigChannel+0x238>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d109      	bne.n	800e7f0 <HAL_ADC_ConfigChannel+0x1cc>
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b12      	cmp	r3, #18
 800e7e2:	d105      	bne.n	800e7f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a19      	ldr	r2, [pc, #100]	; (800e85c <HAL_ADC_ConfigChannel+0x238>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d123      	bne.n	800e842 <HAL_ADC_ConfigChannel+0x21e>
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b10      	cmp	r3, #16
 800e800:	d003      	beq.n	800e80a <HAL_ADC_ConfigChannel+0x1e6>
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b11      	cmp	r3, #17
 800e808:	d11b      	bne.n	800e842 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b10      	cmp	r3, #16
 800e81c:	d111      	bne.n	800e842 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800e81e:	4b10      	ldr	r3, [pc, #64]	; (800e860 <HAL_ADC_ConfigChannel+0x23c>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a10      	ldr	r2, [pc, #64]	; (800e864 <HAL_ADC_ConfigChannel+0x240>)
 800e824:	fba2 2303 	umull	r2, r3, r2, r3
 800e828:	0c9a      	lsrs	r2, r3, #18
 800e82a:	4613      	mov	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4413      	add	r3, r2
 800e830:	005b      	lsls	r3, r3, #1
 800e832:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e834:	e002      	b.n	800e83c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	3b01      	subs	r3, #1
 800e83a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1f9      	bne.n	800e836 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3714      	adds	r7, #20
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	40012300 	.word	0x40012300
 800e85c:	40012000 	.word	0x40012000
 800e860:	20000004 	.word	0x20000004
 800e864:	431bde83 	.word	0x431bde83

0800e868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e868:	b480      	push	{r7}
 800e86a:	b085      	sub	sp, #20
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e870:	4b79      	ldr	r3, [pc, #484]	; (800ea58 <ADC_Init+0x1f0>)
 800e872:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	685a      	ldr	r2, [r3, #4]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	431a      	orrs	r2, r3
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e89c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	6859      	ldr	r1, [r3, #4]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	021a      	lsls	r2, r3, #8
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	685a      	ldr	r2, [r3, #4]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e8c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6859      	ldr	r1, [r3, #4]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	689a      	ldr	r2, [r3, #8]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	430a      	orrs	r2, r1
 800e8d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	689a      	ldr	r2, [r3, #8]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e8e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	6899      	ldr	r1, [r3, #8]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	68da      	ldr	r2, [r3, #12]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	430a      	orrs	r2, r1
 800e8f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fa:	4a58      	ldr	r2, [pc, #352]	; (800ea5c <ADC_Init+0x1f4>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d022      	beq.n	800e946 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	689a      	ldr	r2, [r3, #8]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e90e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6899      	ldr	r1, [r3, #8]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	430a      	orrs	r2, r1
 800e920:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	689a      	ldr	r2, [r3, #8]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	6899      	ldr	r1, [r3, #8]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	430a      	orrs	r2, r1
 800e942:	609a      	str	r2, [r3, #8]
 800e944:	e00f      	b.n	800e966 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	689a      	ldr	r2, [r3, #8]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	689a      	ldr	r2, [r3, #8]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e964:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	689a      	ldr	r2, [r3, #8]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f022 0202 	bic.w	r2, r2, #2
 800e974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	6899      	ldr	r1, [r3, #8]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	7e1b      	ldrb	r3, [r3, #24]
 800e980:	005a      	lsls	r2, r3, #1
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	430a      	orrs	r2, r1
 800e988:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d01b      	beq.n	800e9cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685a      	ldr	r2, [r3, #4]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	685a      	ldr	r2, [r3, #4]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e9b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6859      	ldr	r1, [r3, #4]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	035a      	lsls	r2, r3, #13
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	430a      	orrs	r2, r1
 800e9c8:	605a      	str	r2, [r3, #4]
 800e9ca:	e007      	b.n	800e9dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e9da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e9ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	69db      	ldr	r3, [r3, #28]
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	051a      	lsls	r2, r3, #20
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	689a      	ldr	r2, [r3, #8]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ea10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6899      	ldr	r1, [r3, #8]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea1e:	025a      	lsls	r2, r3, #9
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	430a      	orrs	r2, r1
 800ea26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689a      	ldr	r2, [r3, #8]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6899      	ldr	r1, [r3, #8]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	695b      	ldr	r3, [r3, #20]
 800ea42:	029a      	lsls	r2, r3, #10
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	430a      	orrs	r2, r1
 800ea4a:	609a      	str	r2, [r3, #8]
}
 800ea4c:	bf00      	nop
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	40012300 	.word	0x40012300
 800ea5c:	0f000001 	.word	0x0f000001

0800ea60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d101      	bne.n	800ea72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e0ed      	b.n	800ec4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d102      	bne.n	800ea84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7f4 fae2 	bl	8003048 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f042 0201 	orr.w	r2, r2, #1
 800ea92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ea94:	f7ff fd52 	bl	800e53c <HAL_GetTick>
 800ea98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ea9a:	e012      	b.n	800eac2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ea9c:	f7ff fd4e 	bl	800e53c <HAL_GetTick>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	2b0a      	cmp	r3, #10
 800eaa8:	d90b      	bls.n	800eac2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2205      	movs	r2, #5
 800eaba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800eabe:	2301      	movs	r3, #1
 800eac0:	e0c5      	b.n	800ec4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0e5      	beq.n	800ea9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f022 0202 	bic.w	r2, r2, #2
 800eade:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800eae0:	f7ff fd2c 	bl	800e53c <HAL_GetTick>
 800eae4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800eae6:	e012      	b.n	800eb0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800eae8:	f7ff fd28 	bl	800e53c <HAL_GetTick>
 800eaec:	4602      	mov	r2, r0
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	2b0a      	cmp	r3, #10
 800eaf4:	d90b      	bls.n	800eb0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2205      	movs	r2, #5
 800eb06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e09f      	b.n	800ec4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	f003 0302 	and.w	r3, r3, #2
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1e5      	bne.n	800eae8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7e1b      	ldrb	r3, [r3, #24]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d108      	bne.n	800eb36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	e007      	b.n	800eb46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7e5b      	ldrb	r3, [r3, #25]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d108      	bne.n	800eb60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	e007      	b.n	800eb70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	7e9b      	ldrb	r3, [r3, #26]
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d108      	bne.n	800eb8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f042 0220 	orr.w	r2, r2, #32
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	e007      	b.n	800eb9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f022 0220 	bic.w	r2, r2, #32
 800eb98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	7edb      	ldrb	r3, [r3, #27]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d108      	bne.n	800ebb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f022 0210 	bic.w	r2, r2, #16
 800ebb0:	601a      	str	r2, [r3, #0]
 800ebb2:	e007      	b.n	800ebc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f042 0210 	orr.w	r2, r2, #16
 800ebc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	7f1b      	ldrb	r3, [r3, #28]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d108      	bne.n	800ebde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f042 0208 	orr.w	r2, r2, #8
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	e007      	b.n	800ebee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f022 0208 	bic.w	r2, r2, #8
 800ebec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	7f5b      	ldrb	r3, [r3, #29]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d108      	bne.n	800ec08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f042 0204 	orr.w	r2, r2, #4
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	e007      	b.n	800ec18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f022 0204 	bic.w	r2, r2, #4
 800ec16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	689a      	ldr	r2, [r3, #8]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	431a      	orrs	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	431a      	orrs	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	695b      	ldr	r3, [r3, #20]
 800ec2c:	ea42 0103 	orr.w	r1, r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	1e5a      	subs	r2, r3, #1
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	430a      	orrs	r2, r1
 800ec3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
	...

0800ec58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b087      	sub	sp, #28
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800ec70:	7cfb      	ldrb	r3, [r7, #19]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d003      	beq.n	800ec7e <HAL_CAN_ConfigFilter+0x26>
 800ec76:	7cfb      	ldrb	r3, [r7, #19]
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	f040 80be 	bne.w	800edfa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800ec7e:	4b65      	ldr	r3, [pc, #404]	; (800ee14 <HAL_CAN_ConfigFilter+0x1bc>)
 800ec80:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec88:	f043 0201 	orr.w	r2, r3, #1
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	431a      	orrs	r2, r3
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	695b      	ldr	r3, [r3, #20]
 800ecba:	f003 031f 	and.w	r3, r3, #31
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecc4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	43db      	mvns	r3, r3
 800ecd0:	401a      	ands	r2, r3
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	69db      	ldr	r3, [r3, #28]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d123      	bne.n	800ed28 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	43db      	mvns	r3, r3
 800ecea:	401a      	ands	r2, r3
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ed02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	3248      	adds	r2, #72	; 0x48
 800ed08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ed1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ed1e:	6979      	ldr	r1, [r7, #20]
 800ed20:	3348      	adds	r3, #72	; 0x48
 800ed22:	00db      	lsls	r3, r3, #3
 800ed24:	440b      	add	r3, r1
 800ed26:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	69db      	ldr	r3, [r3, #28]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d122      	bne.n	800ed76 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	431a      	orrs	r2, r3
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ed50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	3248      	adds	r2, #72	; 0x48
 800ed56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ed6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ed6c:	6979      	ldr	r1, [r7, #20]
 800ed6e:	3348      	adds	r3, #72	; 0x48
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	440b      	add	r3, r1
 800ed74:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	699b      	ldr	r3, [r3, #24]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d109      	bne.n	800ed92 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	43db      	mvns	r3, r3
 800ed88:	401a      	ands	r2, r3
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800ed90:	e007      	b.n	800eda2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	431a      	orrs	r2, r3
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d109      	bne.n	800edbe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	43db      	mvns	r3, r3
 800edb4:	401a      	ands	r2, r3
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800edbc:	e007      	b.n	800edce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	431a      	orrs	r2, r3
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d107      	bne.n	800ede6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	431a      	orrs	r2, r3
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800edec:	f023 0201 	bic.w	r2, r3, #1
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	e006      	b.n	800ee08 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ee06:	2301      	movs	r3, #1
  }
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	371c      	adds	r7, #28
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	40006400 	.word	0x40006400

0800ee18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d12e      	bne.n	800ee8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2202      	movs	r2, #2
 800ee30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f022 0201 	bic.w	r2, r2, #1
 800ee42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ee44:	f7ff fb7a 	bl	800e53c <HAL_GetTick>
 800ee48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ee4a:	e012      	b.n	800ee72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ee4c:	f7ff fb76 	bl	800e53c <HAL_GetTick>
 800ee50:	4602      	mov	r2, r0
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	1ad3      	subs	r3, r2, r3
 800ee56:	2b0a      	cmp	r3, #10
 800ee58:	d90b      	bls.n	800ee72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2205      	movs	r2, #5
 800ee6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e012      	b.n	800ee98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d1e5      	bne.n	800ee4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	e006      	b.n	800ee98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
  }
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b089      	sub	sp, #36	; 0x24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
 800eeac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eeb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800eebe:	7ffb      	ldrb	r3, [r7, #31]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d003      	beq.n	800eecc <HAL_CAN_AddTxMessage+0x2c>
 800eec4:	7ffb      	ldrb	r3, [r7, #31]
 800eec6:	2b02      	cmp	r3, #2
 800eec8:	f040 80b8 	bne.w	800f03c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d10a      	bne.n	800eeec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d105      	bne.n	800eeec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 80a0 	beq.w	800f02c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	0e1b      	lsrs	r3, r3, #24
 800eef0:	f003 0303 	and.w	r3, r3, #3
 800eef4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d907      	bls.n	800ef0c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e09e      	b.n	800f04a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	409a      	lsls	r2, r3
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10d      	bne.n	800ef3a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ef28:	68f9      	ldr	r1, [r7, #12]
 800ef2a:	6809      	ldr	r1, [r1, #0]
 800ef2c:	431a      	orrs	r2, r3
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	3318      	adds	r3, #24
 800ef32:	011b      	lsls	r3, r3, #4
 800ef34:	440b      	add	r3, r1
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	e00f      	b.n	800ef5a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ef44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ef4a:	68f9      	ldr	r1, [r7, #12]
 800ef4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800ef4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	3318      	adds	r3, #24
 800ef54:	011b      	lsls	r3, r3, #4
 800ef56:	440b      	add	r3, r1
 800ef58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6819      	ldr	r1, [r3, #0]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	691a      	ldr	r2, [r3, #16]
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	3318      	adds	r3, #24
 800ef66:	011b      	lsls	r3, r3, #4
 800ef68:	440b      	add	r3, r1
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	7d1b      	ldrb	r3, [r3, #20]
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d111      	bne.n	800ef9a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	3318      	adds	r3, #24
 800ef7e:	011b      	lsls	r3, r3, #4
 800ef80:	4413      	add	r3, r2
 800ef82:	3304      	adds	r3, #4
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	6811      	ldr	r1, [r2, #0]
 800ef8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	3318      	adds	r3, #24
 800ef92:	011b      	lsls	r3, r3, #4
 800ef94:	440b      	add	r3, r1
 800ef96:	3304      	adds	r3, #4
 800ef98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	3307      	adds	r3, #7
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	061a      	lsls	r2, r3, #24
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	3306      	adds	r3, #6
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	041b      	lsls	r3, r3, #16
 800efaa:	431a      	orrs	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	3305      	adds	r3, #5
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	021b      	lsls	r3, r3, #8
 800efb4:	4313      	orrs	r3, r2
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	3204      	adds	r2, #4
 800efba:	7812      	ldrb	r2, [r2, #0]
 800efbc:	4610      	mov	r0, r2
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	6811      	ldr	r1, [r2, #0]
 800efc2:	ea43 0200 	orr.w	r2, r3, r0
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	011b      	lsls	r3, r3, #4
 800efca:	440b      	add	r3, r1
 800efcc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800efd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	3303      	adds	r3, #3
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	061a      	lsls	r2, r3, #24
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3302      	adds	r3, #2
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	041b      	lsls	r3, r3, #16
 800efe2:	431a      	orrs	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	3301      	adds	r3, #1
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	021b      	lsls	r3, r3, #8
 800efec:	4313      	orrs	r3, r2
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	7812      	ldrb	r2, [r2, #0]
 800eff2:	4610      	mov	r0, r2
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	6811      	ldr	r1, [r2, #0]
 800eff8:	ea43 0200 	orr.w	r2, r3, r0
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	011b      	lsls	r3, r3, #4
 800f000:	440b      	add	r3, r1
 800f002:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800f006:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	3318      	adds	r3, #24
 800f010:	011b      	lsls	r3, r3, #4
 800f012:	4413      	add	r3, r2
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	6811      	ldr	r1, [r2, #0]
 800f01a:	f043 0201 	orr.w	r2, r3, #1
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	3318      	adds	r3, #24
 800f022:	011b      	lsls	r3, r3, #4
 800f024:	440b      	add	r3, r1
 800f026:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	e00e      	b.n	800f04a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f030:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800f038:	2301      	movs	r3, #1
 800f03a:	e006      	b.n	800f04a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f040:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f048:	2301      	movs	r3, #1
  }
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3724      	adds	r7, #36	; 0x24
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800f056:	b480      	push	{r7}
 800f058:	b087      	sub	sp, #28
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	60b9      	str	r1, [r7, #8]
 800f060:	607a      	str	r2, [r7, #4]
 800f062:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f06a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d003      	beq.n	800f07a <HAL_CAN_GetRxMessage+0x24>
 800f072:	7dfb      	ldrb	r3, [r7, #23]
 800f074:	2b02      	cmp	r3, #2
 800f076:	f040 80f3 	bne.w	800f260 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d10e      	bne.n	800f09e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	f003 0303 	and.w	r3, r3, #3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d116      	bne.n	800f0bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f092:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800f09a:	2301      	movs	r3, #1
 800f09c:	e0e7      	b.n	800f26e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	691b      	ldr	r3, [r3, #16]
 800f0a4:	f003 0303 	and.w	r3, r3, #3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d107      	bne.n	800f0bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e0d8      	b.n	800f26e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	331b      	adds	r3, #27
 800f0c4:	011b      	lsls	r3, r3, #4
 800f0c6:	4413      	add	r3, r2
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f003 0204 	and.w	r2, r3, #4
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10c      	bne.n	800f0f4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	331b      	adds	r3, #27
 800f0e2:	011b      	lsls	r3, r3, #4
 800f0e4:	4413      	add	r3, r2
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	0d5b      	lsrs	r3, r3, #21
 800f0ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	e00b      	b.n	800f10c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	331b      	adds	r3, #27
 800f0fc:	011b      	lsls	r3, r3, #4
 800f0fe:	4413      	add	r3, r2
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	08db      	lsrs	r3, r3, #3
 800f104:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	331b      	adds	r3, #27
 800f114:	011b      	lsls	r3, r3, #4
 800f116:	4413      	add	r3, r2
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f003 0202 	and.w	r2, r3, #2
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	331b      	adds	r3, #27
 800f12a:	011b      	lsls	r3, r3, #4
 800f12c:	4413      	add	r3, r2
 800f12e:	3304      	adds	r3, #4
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f003 020f 	and.w	r2, r3, #15
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	331b      	adds	r3, #27
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	4413      	add	r3, r2
 800f146:	3304      	adds	r3, #4
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	0a1b      	lsrs	r3, r3, #8
 800f14c:	b2da      	uxtb	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	331b      	adds	r3, #27
 800f15a:	011b      	lsls	r3, r3, #4
 800f15c:	4413      	add	r3, r2
 800f15e:	3304      	adds	r3, #4
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	0c1b      	lsrs	r3, r3, #16
 800f164:	b29a      	uxth	r2, r3
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	011b      	lsls	r3, r3, #4
 800f172:	4413      	add	r3, r2
 800f174:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	011b      	lsls	r3, r3, #4
 800f188:	4413      	add	r3, r2
 800f18a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	0a1a      	lsrs	r2, r3, #8
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	3301      	adds	r3, #1
 800f196:	b2d2      	uxtb	r2, r2
 800f198:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	011b      	lsls	r3, r3, #4
 800f1a2:	4413      	add	r3, r2
 800f1a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	0c1a      	lsrs	r2, r3, #16
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	3302      	adds	r3, #2
 800f1b0:	b2d2      	uxtb	r2, r2
 800f1b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	011b      	lsls	r3, r3, #4
 800f1bc:	4413      	add	r3, r2
 800f1be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	0e1a      	lsrs	r2, r3, #24
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	3303      	adds	r3, #3
 800f1ca:	b2d2      	uxtb	r2, r2
 800f1cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	011b      	lsls	r3, r3, #4
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	b2d2      	uxtb	r2, r2
 800f1e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	011b      	lsls	r3, r3, #4
 800f1ee:	4413      	add	r3, r2
 800f1f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	0a1a      	lsrs	r2, r3, #8
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	3305      	adds	r3, #5
 800f1fc:	b2d2      	uxtb	r2, r2
 800f1fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	011b      	lsls	r3, r3, #4
 800f208:	4413      	add	r3, r2
 800f20a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	0c1a      	lsrs	r2, r3, #16
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	3306      	adds	r3, #6
 800f216:	b2d2      	uxtb	r2, r2
 800f218:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	011b      	lsls	r3, r3, #4
 800f222:	4413      	add	r3, r2
 800f224:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	0e1a      	lsrs	r2, r3, #24
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	3307      	adds	r3, #7
 800f230:	b2d2      	uxtb	r2, r2
 800f232:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d108      	bne.n	800f24c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68da      	ldr	r2, [r3, #12]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f042 0220 	orr.w	r2, r2, #32
 800f248:	60da      	str	r2, [r3, #12]
 800f24a:	e007      	b.n	800f25c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	691a      	ldr	r2, [r3, #16]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f042 0220 	orr.w	r2, r2, #32
 800f25a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	e006      	b.n	800f26e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f26c:	2301      	movs	r3, #1
  }
}
 800f26e:	4618      	mov	r0, r3
 800f270:	371c      	adds	r7, #28
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800f27a:	b480      	push	{r7}
 800f27c:	b085      	sub	sp, #20
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f28a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d002      	beq.n	800f298 <HAL_CAN_ActivateNotification+0x1e>
 800f292:	7bfb      	ldrb	r3, [r7, #15]
 800f294:	2b02      	cmp	r3, #2
 800f296:	d109      	bne.n	800f2ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6959      	ldr	r1, [r3, #20]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	430a      	orrs	r2, r1
 800f2a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e006      	b.n	800f2ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
  }
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b085      	sub	sp, #20
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f2d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800f2d8:	7bfb      	ldrb	r3, [r7, #15]
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d002      	beq.n	800f2e4 <HAL_CAN_DeactivateNotification+0x1e>
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d10a      	bne.n	800f2fa <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6959      	ldr	r1, [r3, #20]
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	43da      	mvns	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	400a      	ands	r2, r1
 800f2f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	e006      	b.n	800f308 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f306:	2301      	movs	r3, #1
  }
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3714      	adds	r7, #20
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08a      	sub	sp, #40	; 0x28
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800f31c:	2300      	movs	r3, #0
 800f31e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	699b      	ldr	r3, [r3, #24]
 800f34e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800f350:	6a3b      	ldr	r3, [r7, #32]
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d07c      	beq.n	800f454 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	f003 0301 	and.w	r3, r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	d023      	beq.n	800f3ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2201      	movs	r2, #1
 800f36a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d003      	beq.n	800f37e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 f983 	bl	800f682 <HAL_CAN_TxMailbox0CompleteCallback>
 800f37c:	e016      	b.n	800f3ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	f003 0304 	and.w	r3, r3, #4
 800f384:	2b00      	cmp	r3, #0
 800f386:	d004      	beq.n	800f392 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f38e:	627b      	str	r3, [r7, #36]	; 0x24
 800f390:	e00c      	b.n	800f3ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	f003 0308 	and.w	r3, r3, #8
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d004      	beq.n	800f3a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a4:	e002      	b.n	800f3ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 f989 	bl	800f6be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d024      	beq.n	800f400 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d003      	beq.n	800f3d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f963 	bl	800f696 <HAL_CAN_TxMailbox1CompleteCallback>
 800f3d0:	e016      	b.n	800f400 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d004      	beq.n	800f3e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800f3e4:	e00c      	b.n	800f400 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d004      	beq.n	800f3fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3f8:	e002      	b.n	800f400 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f969 	bl	800f6d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f406:	2b00      	cmp	r3, #0
 800f408:	d024      	beq.n	800f454 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d003      	beq.n	800f426 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 f943 	bl	800f6aa <HAL_CAN_TxMailbox2CompleteCallback>
 800f424:	e016      	b.n	800f454 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d004      	beq.n	800f43a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f436:	627b      	str	r3, [r7, #36]	; 0x24
 800f438:	e00c      	b.n	800f454 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f440:	2b00      	cmp	r3, #0
 800f442:	d004      	beq.n	800f44e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f44a:	627b      	str	r3, [r7, #36]	; 0x24
 800f44c:	e002      	b.n	800f454 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 f949 	bl	800f6e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800f454:	6a3b      	ldr	r3, [r7, #32]
 800f456:	f003 0308 	and.w	r3, r3, #8
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00c      	beq.n	800f478 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	f003 0310 	and.w	r3, r3, #16
 800f464:	2b00      	cmp	r3, #0
 800f466:	d007      	beq.n	800f478 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f46e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2210      	movs	r2, #16
 800f476:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	f003 0304 	and.w	r3, r3, #4
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00b      	beq.n	800f49a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	f003 0308 	and.w	r3, r3, #8
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d006      	beq.n	800f49a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2208      	movs	r2, #8
 800f492:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f930 	bl	800f6fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800f49a:	6a3b      	ldr	r3, [r7, #32]
 800f49c:	f003 0302 	and.w	r3, r3, #2
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d009      	beq.n	800f4b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	f003 0303 	and.w	r3, r3, #3
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d002      	beq.n	800f4b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7f1 febc 	bl	8001230 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800f4b8:	6a3b      	ldr	r3, [r7, #32]
 800f4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d00c      	beq.n	800f4dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	f003 0310 	and.w	r3, r3, #16
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d007      	beq.n	800f4dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f4d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2210      	movs	r2, #16
 800f4da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800f4dc:	6a3b      	ldr	r3, [r7, #32]
 800f4de:	f003 0320 	and.w	r3, r3, #32
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00b      	beq.n	800f4fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	f003 0308 	and.w	r3, r3, #8
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d006      	beq.n	800f4fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2208      	movs	r2, #8
 800f4f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f908 	bl	800f70e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	f003 0310 	and.w	r3, r3, #16
 800f504:	2b00      	cmp	r3, #0
 800f506:	d009      	beq.n	800f51c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	f003 0303 	and.w	r3, r3, #3
 800f512:	2b00      	cmp	r3, #0
 800f514:	d002      	beq.n	800f51c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7f1 fe95 	bl	8001246 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800f51c:	6a3b      	ldr	r3, [r7, #32]
 800f51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00b      	beq.n	800f53e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	f003 0310 	and.w	r3, r3, #16
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d006      	beq.n	800f53e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2210      	movs	r2, #16
 800f536:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f8f2 	bl	800f722 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f544:	2b00      	cmp	r3, #0
 800f546:	d00b      	beq.n	800f560 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	f003 0308 	and.w	r3, r3, #8
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d006      	beq.n	800f560 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2208      	movs	r2, #8
 800f558:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f8eb 	bl	800f736 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800f560:	6a3b      	ldr	r3, [r7, #32]
 800f562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f566:	2b00      	cmp	r3, #0
 800f568:	d07b      	beq.n	800f662 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	f003 0304 	and.w	r3, r3, #4
 800f570:	2b00      	cmp	r3, #0
 800f572:	d072      	beq.n	800f65a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f574:	6a3b      	ldr	r3, [r7, #32]
 800f576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d008      	beq.n	800f590 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f584:	2b00      	cmp	r3, #0
 800f586:	d003      	beq.n	800f590 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	f043 0301 	orr.w	r3, r3, #1
 800f58e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f590:	6a3b      	ldr	r3, [r7, #32]
 800f592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f596:	2b00      	cmp	r3, #0
 800f598:	d008      	beq.n	800f5ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d003      	beq.n	800f5ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	f043 0302 	orr.w	r3, r3, #2
 800f5aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f5ac:	6a3b      	ldr	r3, [r7, #32]
 800f5ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d008      	beq.n	800f5c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d003      	beq.n	800f5c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	f043 0304 	orr.w	r3, r3, #4
 800f5c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d043      	beq.n	800f65a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d03e      	beq.n	800f65a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f5e2:	2b60      	cmp	r3, #96	; 0x60
 800f5e4:	d02b      	beq.n	800f63e <HAL_CAN_IRQHandler+0x32a>
 800f5e6:	2b60      	cmp	r3, #96	; 0x60
 800f5e8:	d82e      	bhi.n	800f648 <HAL_CAN_IRQHandler+0x334>
 800f5ea:	2b50      	cmp	r3, #80	; 0x50
 800f5ec:	d022      	beq.n	800f634 <HAL_CAN_IRQHandler+0x320>
 800f5ee:	2b50      	cmp	r3, #80	; 0x50
 800f5f0:	d82a      	bhi.n	800f648 <HAL_CAN_IRQHandler+0x334>
 800f5f2:	2b40      	cmp	r3, #64	; 0x40
 800f5f4:	d019      	beq.n	800f62a <HAL_CAN_IRQHandler+0x316>
 800f5f6:	2b40      	cmp	r3, #64	; 0x40
 800f5f8:	d826      	bhi.n	800f648 <HAL_CAN_IRQHandler+0x334>
 800f5fa:	2b30      	cmp	r3, #48	; 0x30
 800f5fc:	d010      	beq.n	800f620 <HAL_CAN_IRQHandler+0x30c>
 800f5fe:	2b30      	cmp	r3, #48	; 0x30
 800f600:	d822      	bhi.n	800f648 <HAL_CAN_IRQHandler+0x334>
 800f602:	2b10      	cmp	r3, #16
 800f604:	d002      	beq.n	800f60c <HAL_CAN_IRQHandler+0x2f8>
 800f606:	2b20      	cmp	r3, #32
 800f608:	d005      	beq.n	800f616 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800f60a:	e01d      	b.n	800f648 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	f043 0308 	orr.w	r3, r3, #8
 800f612:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f614:	e019      	b.n	800f64a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800f616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f618:	f043 0310 	orr.w	r3, r3, #16
 800f61c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f61e:	e014      	b.n	800f64a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	f043 0320 	orr.w	r3, r3, #32
 800f626:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f628:	e00f      	b.n	800f64a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f630:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f632:	e00a      	b.n	800f64a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f63a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f63c:	e005      	b.n	800f64a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f644:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f646:	e000      	b.n	800f64a <HAL_CAN_IRQHandler+0x336>
            break;
 800f648:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	699a      	ldr	r2, [r3, #24]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f658:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2204      	movs	r2, #4
 800f660:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f664:	2b00      	cmp	r3, #0
 800f666:	d008      	beq.n	800f67a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	431a      	orrs	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f868 	bl	800f74a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f67a:	bf00      	nop
 800f67c:	3728      	adds	r7, #40	; 0x28
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f682:	b480      	push	{r7}
 800f684:	b083      	sub	sp, #12
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800f68a:	bf00      	nop
 800f68c:	370c      	adds	r7, #12
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr

0800f696 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f696:	b480      	push	{r7}
 800f698:	b083      	sub	sp, #12
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f69e:	bf00      	nop
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f6aa:	b480      	push	{r7}
 800f6ac:	b083      	sub	sp, #12
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f6b2:	bf00      	nop
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f6be:	b480      	push	{r7}
 800f6c0:	b083      	sub	sp, #12
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f6c6:	bf00      	nop
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b083      	sub	sp, #12
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f6da:	bf00      	nop
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f6ee:	bf00      	nop
 800f6f0:	370c      	adds	r7, #12
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr

0800f6fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	b083      	sub	sp, #12
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f702:	bf00      	nop
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f70e:	b480      	push	{r7}
 800f710:	b083      	sub	sp, #12
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f716:	bf00      	nop
 800f718:	370c      	adds	r7, #12
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f722:	b480      	push	{r7}
 800f724:	b083      	sub	sp, #12
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f72a:	bf00      	nop
 800f72c:	370c      	adds	r7, #12
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr

0800f736 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f736:	b480      	push	{r7}
 800f738:	b083      	sub	sp, #12
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f73e:	bf00      	nop
 800f740:	370c      	adds	r7, #12
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800f74a:	b480      	push	{r7}
 800f74c:	b083      	sub	sp, #12
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800f752:	bf00      	nop
 800f754:	370c      	adds	r7, #12
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
	...

0800f760 <__NVIC_SetPriorityGrouping>:
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f003 0307 	and.w	r3, r3, #7
 800f76e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f770:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <__NVIC_SetPriorityGrouping+0x44>)
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f776:	68ba      	ldr	r2, [r7, #8]
 800f778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f77c:	4013      	ands	r3, r2
 800f77e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f78c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f792:	4a04      	ldr	r2, [pc, #16]	; (800f7a4 <__NVIC_SetPriorityGrouping+0x44>)
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	60d3      	str	r3, [r2, #12]
}
 800f798:	bf00      	nop
 800f79a:	3714      	adds	r7, #20
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr
 800f7a4:	e000ed00 	.word	0xe000ed00

0800f7a8 <__NVIC_GetPriorityGrouping>:
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f7ac:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <__NVIC_GetPriorityGrouping+0x18>)
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	0a1b      	lsrs	r3, r3, #8
 800f7b2:	f003 0307 	and.w	r3, r3, #7
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	e000ed00 	.word	0xe000ed00

0800f7c4 <__NVIC_EnableIRQ>:
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f7ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	db0b      	blt.n	800f7ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f7d6:	79fb      	ldrb	r3, [r7, #7]
 800f7d8:	f003 021f 	and.w	r2, r3, #31
 800f7dc:	4907      	ldr	r1, [pc, #28]	; (800f7fc <__NVIC_EnableIRQ+0x38>)
 800f7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7e2:	095b      	lsrs	r3, r3, #5
 800f7e4:	2001      	movs	r0, #1
 800f7e6:	fa00 f202 	lsl.w	r2, r0, r2
 800f7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f7ee:	bf00      	nop
 800f7f0:	370c      	adds	r7, #12
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	e000e100 	.word	0xe000e100

0800f800 <__NVIC_SetPriority>:
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	4603      	mov	r3, r0
 800f808:	6039      	str	r1, [r7, #0]
 800f80a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f80c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f810:	2b00      	cmp	r3, #0
 800f812:	db0a      	blt.n	800f82a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	b2da      	uxtb	r2, r3
 800f818:	490c      	ldr	r1, [pc, #48]	; (800f84c <__NVIC_SetPriority+0x4c>)
 800f81a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f81e:	0112      	lsls	r2, r2, #4
 800f820:	b2d2      	uxtb	r2, r2
 800f822:	440b      	add	r3, r1
 800f824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f828:	e00a      	b.n	800f840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	b2da      	uxtb	r2, r3
 800f82e:	4908      	ldr	r1, [pc, #32]	; (800f850 <__NVIC_SetPriority+0x50>)
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	f003 030f 	and.w	r3, r3, #15
 800f836:	3b04      	subs	r3, #4
 800f838:	0112      	lsls	r2, r2, #4
 800f83a:	b2d2      	uxtb	r2, r2
 800f83c:	440b      	add	r3, r1
 800f83e:	761a      	strb	r2, [r3, #24]
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	e000e100 	.word	0xe000e100
 800f850:	e000ed00 	.word	0xe000ed00

0800f854 <NVIC_EncodePriority>:
{
 800f854:	b480      	push	{r7}
 800f856:	b089      	sub	sp, #36	; 0x24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f003 0307 	and.w	r3, r3, #7
 800f866:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	f1c3 0307 	rsb	r3, r3, #7
 800f86e:	2b04      	cmp	r3, #4
 800f870:	bf28      	it	cs
 800f872:	2304      	movcs	r3, #4
 800f874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	3304      	adds	r3, #4
 800f87a:	2b06      	cmp	r3, #6
 800f87c:	d902      	bls.n	800f884 <NVIC_EncodePriority+0x30>
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	3b03      	subs	r3, #3
 800f882:	e000      	b.n	800f886 <NVIC_EncodePriority+0x32>
 800f884:	2300      	movs	r3, #0
 800f886:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f88c:	69bb      	ldr	r3, [r7, #24]
 800f88e:	fa02 f303 	lsl.w	r3, r2, r3
 800f892:	43da      	mvns	r2, r3
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	401a      	ands	r2, r3
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f89c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f8a6:	43d9      	mvns	r1, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f8ac:	4313      	orrs	r3, r2
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3724      	adds	r7, #36	; 0x24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr

0800f8ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b082      	sub	sp, #8
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff ff4c 	bl	800f760 <__NVIC_SetPriorityGrouping>
}
 800f8c8:	bf00      	nop
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b086      	sub	sp, #24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	607a      	str	r2, [r7, #4]
 800f8dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f8e2:	f7ff ff61 	bl	800f7a8 <__NVIC_GetPriorityGrouping>
 800f8e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	68b9      	ldr	r1, [r7, #8]
 800f8ec:	6978      	ldr	r0, [r7, #20]
 800f8ee:	f7ff ffb1 	bl	800f854 <NVIC_EncodePriority>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff ff80 	bl	800f800 <__NVIC_SetPriority>
}
 800f900:	bf00      	nop
 800f902:	3718      	adds	r7, #24
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	4603      	mov	r3, r0
 800f910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff ff54 	bl	800f7c4 <__NVIC_EnableIRQ>
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f92c:	2300      	movs	r3, #0
 800f92e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f930:	f7fe fe04 	bl	800e53c <HAL_GetTick>
 800f934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d101      	bne.n	800f940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f93c:	2301      	movs	r3, #1
 800f93e:	e099      	b.n	800fa74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2202      	movs	r2, #2
 800f944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f022 0201 	bic.w	r2, r2, #1
 800f95e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f960:	e00f      	b.n	800f982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f962:	f7fe fdeb 	bl	800e53c <HAL_GetTick>
 800f966:	4602      	mov	r2, r0
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	1ad3      	subs	r3, r2, r3
 800f96c:	2b05      	cmp	r3, #5
 800f96e:	d908      	bls.n	800f982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2220      	movs	r2, #32
 800f974:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2203      	movs	r2, #3
 800f97a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e078      	b.n	800fa74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1e8      	bne.n	800f962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f998:	697a      	ldr	r2, [r7, #20]
 800f99a:	4b38      	ldr	r3, [pc, #224]	; (800fa7c <HAL_DMA_Init+0x158>)
 800f99c:	4013      	ands	r3, r2
 800f99e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685a      	ldr	r2, [r3, #4]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	689b      	ldr	r3, [r3, #8]
 800f9a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f9ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f9ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	699b      	ldr	r3, [r3, #24]
 800f9c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f9c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6a1b      	ldr	r3, [r3, #32]
 800f9cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f9ce:	697a      	ldr	r2, [r7, #20]
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d8:	2b04      	cmp	r3, #4
 800f9da:	d107      	bne.n	800f9ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	697a      	ldr	r2, [r7, #20]
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	695b      	ldr	r3, [r3, #20]
 800f9fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	f023 0307 	bic.w	r3, r3, #7
 800fa02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa12:	2b04      	cmp	r3, #4
 800fa14:	d117      	bne.n	800fa46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa1a:	697a      	ldr	r2, [r7, #20]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00e      	beq.n	800fa46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f000 fb0d 	bl	8010048 <DMA_CheckFifoParam>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d008      	beq.n	800fa46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2240      	movs	r2, #64	; 0x40
 800fa38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800fa42:	2301      	movs	r3, #1
 800fa44:	e016      	b.n	800fa74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 fac4 	bl	800ffdc <DMA_CalcBaseAndBitshift>
 800fa54:	4603      	mov	r3, r0
 800fa56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa5c:	223f      	movs	r2, #63	; 0x3f
 800fa5e:	409a      	lsls	r2, r3
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800fa72:	2300      	movs	r3, #0
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	f010803f 	.word	0xf010803f

0800fa80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
 800fa8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d101      	bne.n	800faa6 <HAL_DMA_Start_IT+0x26>
 800faa2:	2302      	movs	r3, #2
 800faa4:	e040      	b.n	800fb28 <HAL_DMA_Start_IT+0xa8>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d12f      	bne.n	800fb1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2202      	movs	r2, #2
 800fabe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2200      	movs	r2, #0
 800fac6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	68b9      	ldr	r1, [r7, #8]
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	f000 fa56 	bl	800ff80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fad8:	223f      	movs	r2, #63	; 0x3f
 800fada:	409a      	lsls	r2, r3
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f042 0216 	orr.w	r2, r2, #22
 800faee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d007      	beq.n	800fb08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f042 0208 	orr.w	r2, r2, #8
 800fb06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f042 0201 	orr.w	r2, r2, #1
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	e005      	b.n	800fb26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800fb22:	2302      	movs	r3, #2
 800fb24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3718      	adds	r7, #24
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800fb3e:	f7fe fcfd 	bl	800e53c <HAL_GetTick>
 800fb42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	d008      	beq.n	800fb62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2280      	movs	r2, #128	; 0x80
 800fb54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e052      	b.n	800fc08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f022 0216 	bic.w	r2, r2, #22
 800fb70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	695a      	ldr	r2, [r3, #20]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d103      	bne.n	800fb92 <HAL_DMA_Abort+0x62>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d007      	beq.n	800fba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f022 0208 	bic.w	r2, r2, #8
 800fba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f022 0201 	bic.w	r2, r2, #1
 800fbb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fbb2:	e013      	b.n	800fbdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800fbb4:	f7fe fcc2 	bl	800e53c <HAL_GetTick>
 800fbb8:	4602      	mov	r2, r0
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	2b05      	cmp	r3, #5
 800fbc0:	d90c      	bls.n	800fbdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2220      	movs	r2, #32
 800fbc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2203      	movs	r2, #3
 800fbcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	e015      	b.n	800fc08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f003 0301 	and.w	r3, r3, #1
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1e4      	bne.n	800fbb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbee:	223f      	movs	r2, #63	; 0x3f
 800fbf0:	409a      	lsls	r2, r3
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800fc06:	2300      	movs	r3, #0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	d004      	beq.n	800fc2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2280      	movs	r2, #128	; 0x80
 800fc28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	e00c      	b.n	800fc48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2205      	movs	r2, #5
 800fc32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f022 0201 	bic.w	r2, r2, #1
 800fc44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800fc46:	2300      	movs	r3, #0
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800fc60:	4b8e      	ldr	r3, [pc, #568]	; (800fe9c <HAL_DMA_IRQHandler+0x248>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a8e      	ldr	r2, [pc, #568]	; (800fea0 <HAL_DMA_IRQHandler+0x24c>)
 800fc66:	fba2 2303 	umull	r2, r3, r2, r3
 800fc6a:	0a9b      	lsrs	r3, r3, #10
 800fc6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc7e:	2208      	movs	r2, #8
 800fc80:	409a      	lsls	r2, r3
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	4013      	ands	r3, r2
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d01a      	beq.n	800fcc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f003 0304 	and.w	r3, r3, #4
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d013      	beq.n	800fcc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f022 0204 	bic.w	r2, r2, #4
 800fca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcac:	2208      	movs	r2, #8
 800fcae:	409a      	lsls	r2, r3
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcb8:	f043 0201 	orr.w	r2, r3, #1
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	409a      	lsls	r2, r3
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	4013      	ands	r3, r2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d012      	beq.n	800fcf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00b      	beq.n	800fcf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fce2:	2201      	movs	r2, #1
 800fce4:	409a      	lsls	r2, r3
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcee:	f043 0202 	orr.w	r2, r3, #2
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcfa:	2204      	movs	r2, #4
 800fcfc:	409a      	lsls	r2, r3
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	4013      	ands	r3, r2
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d012      	beq.n	800fd2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f003 0302 	and.w	r3, r3, #2
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00b      	beq.n	800fd2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd18:	2204      	movs	r2, #4
 800fd1a:	409a      	lsls	r2, r3
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd24:	f043 0204 	orr.w	r2, r3, #4
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd30:	2210      	movs	r2, #16
 800fd32:	409a      	lsls	r2, r3
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	4013      	ands	r3, r2
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d043      	beq.n	800fdc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f003 0308 	and.w	r3, r3, #8
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d03c      	beq.n	800fdc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd4e:	2210      	movs	r2, #16
 800fd50:	409a      	lsls	r2, r3
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d018      	beq.n	800fd96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d108      	bne.n	800fd84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d024      	beq.n	800fdc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	4798      	blx	r3
 800fd82:	e01f      	b.n	800fdc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d01b      	beq.n	800fdc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	4798      	blx	r3
 800fd94:	e016      	b.n	800fdc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d107      	bne.n	800fdb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f022 0208 	bic.w	r2, r2, #8
 800fdb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d003      	beq.n	800fdc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdc8:	2220      	movs	r2, #32
 800fdca:	409a      	lsls	r2, r3
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	4013      	ands	r3, r2
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f000 808f 	beq.w	800fef4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f003 0310 	and.w	r3, r3, #16
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f000 8087 	beq.w	800fef4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdea:	2220      	movs	r2, #32
 800fdec:	409a      	lsls	r2, r3
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b05      	cmp	r3, #5
 800fdfc:	d136      	bne.n	800fe6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f022 0216 	bic.w	r2, r2, #22
 800fe0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	695a      	ldr	r2, [r3, #20]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fe1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d103      	bne.n	800fe2e <HAL_DMA_IRQHandler+0x1da>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d007      	beq.n	800fe3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f022 0208 	bic.w	r2, r2, #8
 800fe3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe42:	223f      	movs	r2, #63	; 0x3f
 800fe44:	409a      	lsls	r2, r3
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d07e      	beq.n	800ff60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	4798      	blx	r3
        }
        return;
 800fe6a:	e079      	b.n	800ff60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d01d      	beq.n	800feb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10d      	bne.n	800fea4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d031      	beq.n	800fef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	4798      	blx	r3
 800fe98:	e02c      	b.n	800fef4 <HAL_DMA_IRQHandler+0x2a0>
 800fe9a:	bf00      	nop
 800fe9c:	20000004 	.word	0x20000004
 800fea0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d023      	beq.n	800fef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	4798      	blx	r3
 800feb4:	e01e      	b.n	800fef4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d10f      	bne.n	800fee4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	f022 0210 	bic.w	r2, r2, #16
 800fed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2201      	movs	r2, #1
 800fed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d003      	beq.n	800fef4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d032      	beq.n	800ff62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff00:	f003 0301 	and.w	r3, r3, #1
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d022      	beq.n	800ff4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2205      	movs	r2, #5
 800ff0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f022 0201 	bic.w	r2, r2, #1
 800ff1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	3301      	adds	r3, #1
 800ff24:	60bb      	str	r3, [r7, #8]
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d307      	bcc.n	800ff3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1f2      	bne.n	800ff20 <HAL_DMA_IRQHandler+0x2cc>
 800ff3a:	e000      	b.n	800ff3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ff3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2201      	movs	r2, #1
 800ff42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d005      	beq.n	800ff62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	4798      	blx	r3
 800ff5e:	e000      	b.n	800ff62 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ff60:	bf00      	nop
    }
  }
}
 800ff62:	3718      	adds	r7, #24
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	607a      	str	r2, [r7, #4]
 800ff8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ff9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	683a      	ldr	r2, [r7, #0]
 800ffa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	2b40      	cmp	r3, #64	; 0x40
 800ffac:	d108      	bne.n	800ffc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ffbe:	e007      	b.n	800ffd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68ba      	ldr	r2, [r7, #8]
 800ffc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	60da      	str	r2, [r3, #12]
}
 800ffd0:	bf00      	nop
 800ffd2:	3714      	adds	r7, #20
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	3b10      	subs	r3, #16
 800ffec:	4a14      	ldr	r2, [pc, #80]	; (8010040 <DMA_CalcBaseAndBitshift+0x64>)
 800ffee:	fba2 2303 	umull	r2, r3, r2, r3
 800fff2:	091b      	lsrs	r3, r3, #4
 800fff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fff6:	4a13      	ldr	r2, [pc, #76]	; (8010044 <DMA_CalcBaseAndBitshift+0x68>)
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	4413      	add	r3, r2
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2b03      	cmp	r3, #3
 8010008:	d909      	bls.n	801001e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010012:	f023 0303 	bic.w	r3, r3, #3
 8010016:	1d1a      	adds	r2, r3, #4
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	659a      	str	r2, [r3, #88]	; 0x58
 801001c:	e007      	b.n	801002e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010026:	f023 0303 	bic.w	r3, r3, #3
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010032:	4618      	mov	r0, r3
 8010034:	3714      	adds	r7, #20
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop
 8010040:	aaaaaaab 	.word	0xaaaaaaab
 8010044:	08025eb4 	.word	0x08025eb4

08010048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010048:	b480      	push	{r7}
 801004a:	b085      	sub	sp, #20
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	699b      	ldr	r3, [r3, #24]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d11f      	bne.n	80100a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2b03      	cmp	r3, #3
 8010066:	d856      	bhi.n	8010116 <DMA_CheckFifoParam+0xce>
 8010068:	a201      	add	r2, pc, #4	; (adr r2, 8010070 <DMA_CheckFifoParam+0x28>)
 801006a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801006e:	bf00      	nop
 8010070:	08010081 	.word	0x08010081
 8010074:	08010093 	.word	0x08010093
 8010078:	08010081 	.word	0x08010081
 801007c:	08010117 	.word	0x08010117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010088:	2b00      	cmp	r3, #0
 801008a:	d046      	beq.n	801011a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801008c:	2301      	movs	r3, #1
 801008e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010090:	e043      	b.n	801011a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801009a:	d140      	bne.n	801011e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801009c:	2301      	movs	r3, #1
 801009e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80100a0:	e03d      	b.n	801011e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	699b      	ldr	r3, [r3, #24]
 80100a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80100aa:	d121      	bne.n	80100f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2b03      	cmp	r3, #3
 80100b0:	d837      	bhi.n	8010122 <DMA_CheckFifoParam+0xda>
 80100b2:	a201      	add	r2, pc, #4	; (adr r2, 80100b8 <DMA_CheckFifoParam+0x70>)
 80100b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b8:	080100c9 	.word	0x080100c9
 80100bc:	080100cf 	.word	0x080100cf
 80100c0:	080100c9 	.word	0x080100c9
 80100c4:	080100e1 	.word	0x080100e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	73fb      	strb	r3, [r7, #15]
      break;
 80100cc:	e030      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d025      	beq.n	8010126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80100de:	e022      	b.n	8010126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80100e8:	d11f      	bne.n	801012a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80100ea:	2301      	movs	r3, #1
 80100ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80100ee:	e01c      	b.n	801012a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	2b02      	cmp	r3, #2
 80100f4:	d903      	bls.n	80100fe <DMA_CheckFifoParam+0xb6>
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	d003      	beq.n	8010104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80100fc:	e018      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80100fe:	2301      	movs	r3, #1
 8010100:	73fb      	strb	r3, [r7, #15]
      break;
 8010102:	e015      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00e      	beq.n	801012e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8010110:	2301      	movs	r3, #1
 8010112:	73fb      	strb	r3, [r7, #15]
      break;
 8010114:	e00b      	b.n	801012e <DMA_CheckFifoParam+0xe6>
      break;
 8010116:	bf00      	nop
 8010118:	e00a      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      break;
 801011a:	bf00      	nop
 801011c:	e008      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      break;
 801011e:	bf00      	nop
 8010120:	e006      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      break;
 8010122:	bf00      	nop
 8010124:	e004      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      break;
 8010126:	bf00      	nop
 8010128:	e002      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      break;   
 801012a:	bf00      	nop
 801012c:	e000      	b.n	8010130 <DMA_CheckFifoParam+0xe8>
      break;
 801012e:	bf00      	nop
    }
  } 
  
  return status; 
 8010130:	7bfb      	ldrb	r3, [r7, #15]
}
 8010132:	4618      	mov	r0, r3
 8010134:	3714      	adds	r7, #20
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop

08010140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010140:	b480      	push	{r7}
 8010142:	b089      	sub	sp, #36	; 0x24
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801014a:	2300      	movs	r3, #0
 801014c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801014e:	2300      	movs	r3, #0
 8010150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010152:	2300      	movs	r3, #0
 8010154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010156:	2300      	movs	r3, #0
 8010158:	61fb      	str	r3, [r7, #28]
 801015a:	e16b      	b.n	8010434 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801015c:	2201      	movs	r2, #1
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	fa02 f303 	lsl.w	r3, r2, r3
 8010164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	4013      	ands	r3, r2
 801016e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	429a      	cmp	r2, r3
 8010176:	f040 815a 	bne.w	801042e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	f003 0303 	and.w	r3, r3, #3
 8010182:	2b01      	cmp	r3, #1
 8010184:	d005      	beq.n	8010192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801018e:	2b02      	cmp	r3, #2
 8010190:	d130      	bne.n	80101f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	2203      	movs	r2, #3
 801019e:	fa02 f303 	lsl.w	r3, r2, r3
 80101a2:	43db      	mvns	r3, r3
 80101a4:	69ba      	ldr	r2, [r7, #24]
 80101a6:	4013      	ands	r3, r2
 80101a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	68da      	ldr	r2, [r3, #12]
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	fa02 f303 	lsl.w	r3, r2, r3
 80101b6:	69ba      	ldr	r2, [r7, #24]
 80101b8:	4313      	orrs	r3, r2
 80101ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	69ba      	ldr	r2, [r7, #24]
 80101c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80101c8:	2201      	movs	r2, #1
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	fa02 f303 	lsl.w	r3, r2, r3
 80101d0:	43db      	mvns	r3, r3
 80101d2:	69ba      	ldr	r2, [r7, #24]
 80101d4:	4013      	ands	r3, r2
 80101d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	091b      	lsrs	r3, r3, #4
 80101de:	f003 0201 	and.w	r2, r3, #1
 80101e2:	69fb      	ldr	r3, [r7, #28]
 80101e4:	fa02 f303 	lsl.w	r3, r2, r3
 80101e8:	69ba      	ldr	r2, [r7, #24]
 80101ea:	4313      	orrs	r3, r2
 80101ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	69ba      	ldr	r2, [r7, #24]
 80101f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	f003 0303 	and.w	r3, r3, #3
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d017      	beq.n	8010230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	2203      	movs	r2, #3
 801020c:	fa02 f303 	lsl.w	r3, r2, r3
 8010210:	43db      	mvns	r3, r3
 8010212:	69ba      	ldr	r2, [r7, #24]
 8010214:	4013      	ands	r3, r2
 8010216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	689a      	ldr	r2, [r3, #8]
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	005b      	lsls	r3, r3, #1
 8010220:	fa02 f303 	lsl.w	r3, r2, r3
 8010224:	69ba      	ldr	r2, [r7, #24]
 8010226:	4313      	orrs	r3, r2
 8010228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	69ba      	ldr	r2, [r7, #24]
 801022e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	f003 0303 	and.w	r3, r3, #3
 8010238:	2b02      	cmp	r3, #2
 801023a:	d123      	bne.n	8010284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	08da      	lsrs	r2, r3, #3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	3208      	adds	r2, #8
 8010244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	f003 0307 	and.w	r3, r3, #7
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	220f      	movs	r2, #15
 8010254:	fa02 f303 	lsl.w	r3, r2, r3
 8010258:	43db      	mvns	r3, r3
 801025a:	69ba      	ldr	r2, [r7, #24]
 801025c:	4013      	ands	r3, r2
 801025e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	691a      	ldr	r2, [r3, #16]
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	f003 0307 	and.w	r3, r3, #7
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	fa02 f303 	lsl.w	r3, r2, r3
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	4313      	orrs	r3, r2
 8010274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	08da      	lsrs	r2, r3, #3
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	3208      	adds	r2, #8
 801027e:	69b9      	ldr	r1, [r7, #24]
 8010280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	2203      	movs	r2, #3
 8010290:	fa02 f303 	lsl.w	r3, r2, r3
 8010294:	43db      	mvns	r3, r3
 8010296:	69ba      	ldr	r2, [r7, #24]
 8010298:	4013      	ands	r3, r2
 801029a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	f003 0203 	and.w	r2, r3, #3
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	fa02 f303 	lsl.w	r3, r2, r3
 80102ac:	69ba      	ldr	r2, [r7, #24]
 80102ae:	4313      	orrs	r3, r2
 80102b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f000 80b4 	beq.w	801042e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80102c6:	2300      	movs	r3, #0
 80102c8:	60fb      	str	r3, [r7, #12]
 80102ca:	4b60      	ldr	r3, [pc, #384]	; (801044c <HAL_GPIO_Init+0x30c>)
 80102cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ce:	4a5f      	ldr	r2, [pc, #380]	; (801044c <HAL_GPIO_Init+0x30c>)
 80102d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80102d4:	6453      	str	r3, [r2, #68]	; 0x44
 80102d6:	4b5d      	ldr	r3, [pc, #372]	; (801044c <HAL_GPIO_Init+0x30c>)
 80102d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80102de:	60fb      	str	r3, [r7, #12]
 80102e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80102e2:	4a5b      	ldr	r2, [pc, #364]	; (8010450 <HAL_GPIO_Init+0x310>)
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	089b      	lsrs	r3, r3, #2
 80102e8:	3302      	adds	r3, #2
 80102ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	f003 0303 	and.w	r3, r3, #3
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	220f      	movs	r2, #15
 80102fa:	fa02 f303 	lsl.w	r3, r2, r3
 80102fe:	43db      	mvns	r3, r3
 8010300:	69ba      	ldr	r2, [r7, #24]
 8010302:	4013      	ands	r3, r2
 8010304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4a52      	ldr	r2, [pc, #328]	; (8010454 <HAL_GPIO_Init+0x314>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d02b      	beq.n	8010366 <HAL_GPIO_Init+0x226>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4a51      	ldr	r2, [pc, #324]	; (8010458 <HAL_GPIO_Init+0x318>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d025      	beq.n	8010362 <HAL_GPIO_Init+0x222>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4a50      	ldr	r2, [pc, #320]	; (801045c <HAL_GPIO_Init+0x31c>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d01f      	beq.n	801035e <HAL_GPIO_Init+0x21e>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4a4f      	ldr	r2, [pc, #316]	; (8010460 <HAL_GPIO_Init+0x320>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d019      	beq.n	801035a <HAL_GPIO_Init+0x21a>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4a4e      	ldr	r2, [pc, #312]	; (8010464 <HAL_GPIO_Init+0x324>)
 801032a:	4293      	cmp	r3, r2
 801032c:	d013      	beq.n	8010356 <HAL_GPIO_Init+0x216>
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4a4d      	ldr	r2, [pc, #308]	; (8010468 <HAL_GPIO_Init+0x328>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d00d      	beq.n	8010352 <HAL_GPIO_Init+0x212>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	4a4c      	ldr	r2, [pc, #304]	; (801046c <HAL_GPIO_Init+0x32c>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d007      	beq.n	801034e <HAL_GPIO_Init+0x20e>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	4a4b      	ldr	r2, [pc, #300]	; (8010470 <HAL_GPIO_Init+0x330>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d101      	bne.n	801034a <HAL_GPIO_Init+0x20a>
 8010346:	2307      	movs	r3, #7
 8010348:	e00e      	b.n	8010368 <HAL_GPIO_Init+0x228>
 801034a:	2308      	movs	r3, #8
 801034c:	e00c      	b.n	8010368 <HAL_GPIO_Init+0x228>
 801034e:	2306      	movs	r3, #6
 8010350:	e00a      	b.n	8010368 <HAL_GPIO_Init+0x228>
 8010352:	2305      	movs	r3, #5
 8010354:	e008      	b.n	8010368 <HAL_GPIO_Init+0x228>
 8010356:	2304      	movs	r3, #4
 8010358:	e006      	b.n	8010368 <HAL_GPIO_Init+0x228>
 801035a:	2303      	movs	r3, #3
 801035c:	e004      	b.n	8010368 <HAL_GPIO_Init+0x228>
 801035e:	2302      	movs	r3, #2
 8010360:	e002      	b.n	8010368 <HAL_GPIO_Init+0x228>
 8010362:	2301      	movs	r3, #1
 8010364:	e000      	b.n	8010368 <HAL_GPIO_Init+0x228>
 8010366:	2300      	movs	r3, #0
 8010368:	69fa      	ldr	r2, [r7, #28]
 801036a:	f002 0203 	and.w	r2, r2, #3
 801036e:	0092      	lsls	r2, r2, #2
 8010370:	4093      	lsls	r3, r2
 8010372:	69ba      	ldr	r2, [r7, #24]
 8010374:	4313      	orrs	r3, r2
 8010376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010378:	4935      	ldr	r1, [pc, #212]	; (8010450 <HAL_GPIO_Init+0x310>)
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	089b      	lsrs	r3, r3, #2
 801037e:	3302      	adds	r3, #2
 8010380:	69ba      	ldr	r2, [r7, #24]
 8010382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010386:	4b3b      	ldr	r3, [pc, #236]	; (8010474 <HAL_GPIO_Init+0x334>)
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	43db      	mvns	r3, r3
 8010390:	69ba      	ldr	r2, [r7, #24]
 8010392:	4013      	ands	r3, r2
 8010394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d003      	beq.n	80103aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80103a2:	69ba      	ldr	r2, [r7, #24]
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	4313      	orrs	r3, r2
 80103a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80103aa:	4a32      	ldr	r2, [pc, #200]	; (8010474 <HAL_GPIO_Init+0x334>)
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80103b0:	4b30      	ldr	r3, [pc, #192]	; (8010474 <HAL_GPIO_Init+0x334>)
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	43db      	mvns	r3, r3
 80103ba:	69ba      	ldr	r2, [r7, #24]
 80103bc:	4013      	ands	r3, r2
 80103be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d003      	beq.n	80103d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80103cc:	69ba      	ldr	r2, [r7, #24]
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	4313      	orrs	r3, r2
 80103d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80103d4:	4a27      	ldr	r2, [pc, #156]	; (8010474 <HAL_GPIO_Init+0x334>)
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80103da:	4b26      	ldr	r3, [pc, #152]	; (8010474 <HAL_GPIO_Init+0x334>)
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	43db      	mvns	r3, r3
 80103e4:	69ba      	ldr	r2, [r7, #24]
 80103e6:	4013      	ands	r3, r2
 80103e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d003      	beq.n	80103fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80103fe:	4a1d      	ldr	r2, [pc, #116]	; (8010474 <HAL_GPIO_Init+0x334>)
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010404:	4b1b      	ldr	r3, [pc, #108]	; (8010474 <HAL_GPIO_Init+0x334>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	43db      	mvns	r3, r3
 801040e:	69ba      	ldr	r2, [r7, #24]
 8010410:	4013      	ands	r3, r2
 8010412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d003      	beq.n	8010428 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010420:	69ba      	ldr	r2, [r7, #24]
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	4313      	orrs	r3, r2
 8010426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010428:	4a12      	ldr	r2, [pc, #72]	; (8010474 <HAL_GPIO_Init+0x334>)
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	3301      	adds	r3, #1
 8010432:	61fb      	str	r3, [r7, #28]
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	2b0f      	cmp	r3, #15
 8010438:	f67f ae90 	bls.w	801015c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801043c:	bf00      	nop
 801043e:	bf00      	nop
 8010440:	3724      	adds	r7, #36	; 0x24
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	40023800 	.word	0x40023800
 8010450:	40013800 	.word	0x40013800
 8010454:	40020000 	.word	0x40020000
 8010458:	40020400 	.word	0x40020400
 801045c:	40020800 	.word	0x40020800
 8010460:	40020c00 	.word	0x40020c00
 8010464:	40021000 	.word	0x40021000
 8010468:	40021400 	.word	0x40021400
 801046c:	40021800 	.word	0x40021800
 8010470:	40021c00 	.word	0x40021c00
 8010474:	40013c00 	.word	0x40013c00

08010478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	460b      	mov	r3, r1
 8010482:	807b      	strh	r3, [r7, #2]
 8010484:	4613      	mov	r3, r2
 8010486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010488:	787b      	ldrb	r3, [r7, #1]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d003      	beq.n	8010496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801048e:	887a      	ldrh	r2, [r7, #2]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010494:	e003      	b.n	801049e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010496:	887b      	ldrh	r3, [r7, #2]
 8010498:	041a      	lsls	r2, r3, #16
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	619a      	str	r2, [r3, #24]
}
 801049e:	bf00      	nop
 80104a0:	370c      	adds	r7, #12
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
	...

080104ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	4603      	mov	r3, r0
 80104b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80104b6:	4b08      	ldr	r3, [pc, #32]	; (80104d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80104b8:	695a      	ldr	r2, [r3, #20]
 80104ba:	88fb      	ldrh	r3, [r7, #6]
 80104bc:	4013      	ands	r3, r2
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d006      	beq.n	80104d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80104c2:	4a05      	ldr	r2, [pc, #20]	; (80104d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80104c4:	88fb      	ldrh	r3, [r7, #6]
 80104c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80104c8:	88fb      	ldrh	r3, [r7, #6]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f1 fd56 	bl	8001f7c <HAL_GPIO_EXTI_Callback>
  }
}
 80104d0:	bf00      	nop
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	40013c00 	.word	0x40013c00

080104dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d101      	bne.n	80104ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80104ea:	2301      	movs	r3, #1
 80104ec:	e12b      	b.n	8010746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d106      	bne.n	8010508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7f3 f9e0 	bl	80038c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2224      	movs	r2, #36	; 0x24
 801050c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f022 0201 	bic.w	r2, r2, #1
 801051e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801052e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801053e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8010540:	f003 fc0c 	bl	8013d5c <HAL_RCC_GetPCLK1Freq>
 8010544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	4a81      	ldr	r2, [pc, #516]	; (8010750 <HAL_I2C_Init+0x274>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d807      	bhi.n	8010560 <HAL_I2C_Init+0x84>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	4a80      	ldr	r2, [pc, #512]	; (8010754 <HAL_I2C_Init+0x278>)
 8010554:	4293      	cmp	r3, r2
 8010556:	bf94      	ite	ls
 8010558:	2301      	movls	r3, #1
 801055a:	2300      	movhi	r3, #0
 801055c:	b2db      	uxtb	r3, r3
 801055e:	e006      	b.n	801056e <HAL_I2C_Init+0x92>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	4a7d      	ldr	r2, [pc, #500]	; (8010758 <HAL_I2C_Init+0x27c>)
 8010564:	4293      	cmp	r3, r2
 8010566:	bf94      	ite	ls
 8010568:	2301      	movls	r3, #1
 801056a:	2300      	movhi	r3, #0
 801056c:	b2db      	uxtb	r3, r3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	e0e7      	b.n	8010746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	4a78      	ldr	r2, [pc, #480]	; (801075c <HAL_I2C_Init+0x280>)
 801057a:	fba2 2303 	umull	r2, r3, r2, r3
 801057e:	0c9b      	lsrs	r3, r3, #18
 8010580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68ba      	ldr	r2, [r7, #8]
 8010592:	430a      	orrs	r2, r1
 8010594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	6a1b      	ldr	r3, [r3, #32]
 801059c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	4a6a      	ldr	r2, [pc, #424]	; (8010750 <HAL_I2C_Init+0x274>)
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d802      	bhi.n	80105b0 <HAL_I2C_Init+0xd4>
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	3301      	adds	r3, #1
 80105ae:	e009      	b.n	80105c4 <HAL_I2C_Init+0xe8>
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80105b6:	fb02 f303 	mul.w	r3, r2, r3
 80105ba:	4a69      	ldr	r2, [pc, #420]	; (8010760 <HAL_I2C_Init+0x284>)
 80105bc:	fba2 2303 	umull	r2, r3, r2, r3
 80105c0:	099b      	lsrs	r3, r3, #6
 80105c2:	3301      	adds	r3, #1
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	6812      	ldr	r2, [r2, #0]
 80105c8:	430b      	orrs	r3, r1
 80105ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	69db      	ldr	r3, [r3, #28]
 80105d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80105d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	495c      	ldr	r1, [pc, #368]	; (8010750 <HAL_I2C_Init+0x274>)
 80105e0:	428b      	cmp	r3, r1
 80105e2:	d819      	bhi.n	8010618 <HAL_I2C_Init+0x13c>
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	1e59      	subs	r1, r3, #1
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	005b      	lsls	r3, r3, #1
 80105ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80105f2:	1c59      	adds	r1, r3, #1
 80105f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80105f8:	400b      	ands	r3, r1
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d00a      	beq.n	8010614 <HAL_I2C_Init+0x138>
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	1e59      	subs	r1, r3, #1
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	005b      	lsls	r3, r3, #1
 8010608:	fbb1 f3f3 	udiv	r3, r1, r3
 801060c:	3301      	adds	r3, #1
 801060e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010612:	e051      	b.n	80106b8 <HAL_I2C_Init+0x1dc>
 8010614:	2304      	movs	r3, #4
 8010616:	e04f      	b.n	80106b8 <HAL_I2C_Init+0x1dc>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d111      	bne.n	8010644 <HAL_I2C_Init+0x168>
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	1e58      	subs	r0, r3, #1
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6859      	ldr	r1, [r3, #4]
 8010628:	460b      	mov	r3, r1
 801062a:	005b      	lsls	r3, r3, #1
 801062c:	440b      	add	r3, r1
 801062e:	fbb0 f3f3 	udiv	r3, r0, r3
 8010632:	3301      	adds	r3, #1
 8010634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010638:	2b00      	cmp	r3, #0
 801063a:	bf0c      	ite	eq
 801063c:	2301      	moveq	r3, #1
 801063e:	2300      	movne	r3, #0
 8010640:	b2db      	uxtb	r3, r3
 8010642:	e012      	b.n	801066a <HAL_I2C_Init+0x18e>
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	1e58      	subs	r0, r3, #1
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6859      	ldr	r1, [r3, #4]
 801064c:	460b      	mov	r3, r1
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	440b      	add	r3, r1
 8010652:	0099      	lsls	r1, r3, #2
 8010654:	440b      	add	r3, r1
 8010656:	fbb0 f3f3 	udiv	r3, r0, r3
 801065a:	3301      	adds	r3, #1
 801065c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010660:	2b00      	cmp	r3, #0
 8010662:	bf0c      	ite	eq
 8010664:	2301      	moveq	r3, #1
 8010666:	2300      	movne	r3, #0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	2b00      	cmp	r3, #0
 801066c:	d001      	beq.n	8010672 <HAL_I2C_Init+0x196>
 801066e:	2301      	movs	r3, #1
 8010670:	e022      	b.n	80106b8 <HAL_I2C_Init+0x1dc>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	689b      	ldr	r3, [r3, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d10e      	bne.n	8010698 <HAL_I2C_Init+0x1bc>
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	1e58      	subs	r0, r3, #1
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6859      	ldr	r1, [r3, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	005b      	lsls	r3, r3, #1
 8010686:	440b      	add	r3, r1
 8010688:	fbb0 f3f3 	udiv	r3, r0, r3
 801068c:	3301      	adds	r3, #1
 801068e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010696:	e00f      	b.n	80106b8 <HAL_I2C_Init+0x1dc>
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	1e58      	subs	r0, r3, #1
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6859      	ldr	r1, [r3, #4]
 80106a0:	460b      	mov	r3, r1
 80106a2:	009b      	lsls	r3, r3, #2
 80106a4:	440b      	add	r3, r1
 80106a6:	0099      	lsls	r1, r3, #2
 80106a8:	440b      	add	r3, r1
 80106aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80106ae:	3301      	adds	r3, #1
 80106b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80106b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80106b8:	6879      	ldr	r1, [r7, #4]
 80106ba:	6809      	ldr	r1, [r1, #0]
 80106bc:	4313      	orrs	r3, r2
 80106be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	69da      	ldr	r2, [r3, #28]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a1b      	ldr	r3, [r3, #32]
 80106d2:	431a      	orrs	r2, r3
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	430a      	orrs	r2, r1
 80106da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80106e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	6911      	ldr	r1, [r2, #16]
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	68d2      	ldr	r2, [r2, #12]
 80106f2:	4311      	orrs	r1, r2
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	6812      	ldr	r2, [r2, #0]
 80106f8:	430b      	orrs	r3, r1
 80106fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	695a      	ldr	r2, [r3, #20]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	431a      	orrs	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	430a      	orrs	r2, r1
 8010716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f042 0201 	orr.w	r2, r2, #1
 8010726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2220      	movs	r2, #32
 8010732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010744:	2300      	movs	r3, #0
}
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	000186a0 	.word	0x000186a0
 8010754:	001e847f 	.word	0x001e847f
 8010758:	003d08ff 	.word	0x003d08ff
 801075c:	431bde83 	.word	0x431bde83
 8010760:	10624dd3 	.word	0x10624dd3

08010764 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af02      	add	r7, sp, #8
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	4608      	mov	r0, r1
 801076e:	4611      	mov	r1, r2
 8010770:	461a      	mov	r2, r3
 8010772:	4603      	mov	r3, r0
 8010774:	817b      	strh	r3, [r7, #10]
 8010776:	460b      	mov	r3, r1
 8010778:	813b      	strh	r3, [r7, #8]
 801077a:	4613      	mov	r3, r2
 801077c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801077e:	f7fd fedd 	bl	800e53c <HAL_GetTick>
 8010782:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b20      	cmp	r3, #32
 801078e:	f040 80d9 	bne.w	8010944 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	2319      	movs	r3, #25
 8010798:	2201      	movs	r2, #1
 801079a:	496d      	ldr	r1, [pc, #436]	; (8010950 <HAL_I2C_Mem_Write+0x1ec>)
 801079c:	68f8      	ldr	r0, [r7, #12]
 801079e:	f001 fa53 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d001      	beq.n	80107ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80107a8:	2302      	movs	r3, #2
 80107aa:	e0cc      	b.n	8010946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d101      	bne.n	80107ba <HAL_I2C_Mem_Write+0x56>
 80107b6:	2302      	movs	r3, #2
 80107b8:	e0c5      	b.n	8010946 <HAL_I2C_Mem_Write+0x1e2>
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2201      	movs	r2, #1
 80107be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f003 0301 	and.w	r3, r3, #1
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d007      	beq.n	80107e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f042 0201 	orr.w	r2, r2, #1
 80107de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80107ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2221      	movs	r2, #33	; 0x21
 80107f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2240      	movs	r2, #64	; 0x40
 80107fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	6a3a      	ldr	r2, [r7, #32]
 801080a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010816:	b29a      	uxth	r2, r3
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	4a4d      	ldr	r2, [pc, #308]	; (8010954 <HAL_I2C_Mem_Write+0x1f0>)
 8010820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010822:	88f8      	ldrh	r0, [r7, #6]
 8010824:	893a      	ldrh	r2, [r7, #8]
 8010826:	8979      	ldrh	r1, [r7, #10]
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	4603      	mov	r3, r0
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f000 fed0 	bl	80115d8 <I2C_RequestMemoryWrite>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d052      	beq.n	80108e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 801083e:	2301      	movs	r3, #1
 8010840:	e081      	b.n	8010946 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010842:	697a      	ldr	r2, [r7, #20]
 8010844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f001 fad4 	bl	8011df4 <I2C_WaitOnTXEFlagUntilTimeout>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d00d      	beq.n	801086e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010856:	2b04      	cmp	r3, #4
 8010858:	d107      	bne.n	801086a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	e06b      	b.n	8010946 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010872:	781a      	ldrb	r2, [r3, #0]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087e:	1c5a      	adds	r2, r3, #1
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010888:	3b01      	subs	r3, #1
 801088a:	b29a      	uxth	r2, r3
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010894:	b29b      	uxth	r3, r3
 8010896:	3b01      	subs	r3, #1
 8010898:	b29a      	uxth	r2, r3
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	695b      	ldr	r3, [r3, #20]
 80108a4:	f003 0304 	and.w	r3, r3, #4
 80108a8:	2b04      	cmp	r3, #4
 80108aa:	d11b      	bne.n	80108e4 <HAL_I2C_Mem_Write+0x180>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d017      	beq.n	80108e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b8:	781a      	ldrb	r2, [r3, #0]
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108ce:	3b01      	subs	r3, #1
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108da:	b29b      	uxth	r3, r3
 80108dc:	3b01      	subs	r3, #1
 80108de:	b29a      	uxth	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1aa      	bne.n	8010842 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80108ec:	697a      	ldr	r2, [r7, #20]
 80108ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f001 fac0 	bl	8011e76 <I2C_WaitOnBTFFlagUntilTimeout>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00d      	beq.n	8010918 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010900:	2b04      	cmp	r3, #4
 8010902:	d107      	bne.n	8010914 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010912:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010914:	2301      	movs	r3, #1
 8010916:	e016      	b.n	8010946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2220      	movs	r2, #32
 801092c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2200      	movs	r2, #0
 8010934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2200      	movs	r2, #0
 801093c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	e000      	b.n	8010946 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8010944:	2302      	movs	r3, #2
  }
}
 8010946:	4618      	mov	r0, r3
 8010948:	3718      	adds	r7, #24
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	00100002 	.word	0x00100002
 8010954:	ffff0000 	.word	0xffff0000

08010958 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b08c      	sub	sp, #48	; 0x30
 801095c:	af02      	add	r7, sp, #8
 801095e:	60f8      	str	r0, [r7, #12]
 8010960:	4608      	mov	r0, r1
 8010962:	4611      	mov	r1, r2
 8010964:	461a      	mov	r2, r3
 8010966:	4603      	mov	r3, r0
 8010968:	817b      	strh	r3, [r7, #10]
 801096a:	460b      	mov	r3, r1
 801096c:	813b      	strh	r3, [r7, #8]
 801096e:	4613      	mov	r3, r2
 8010970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010972:	f7fd fde3 	bl	800e53c <HAL_GetTick>
 8010976:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b20      	cmp	r3, #32
 8010982:	f040 8208 	bne.w	8010d96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	2319      	movs	r3, #25
 801098c:	2201      	movs	r2, #1
 801098e:	497b      	ldr	r1, [pc, #492]	; (8010b7c <HAL_I2C_Mem_Read+0x224>)
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f001 f959 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d001      	beq.n	80109a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 801099c:	2302      	movs	r3, #2
 801099e:	e1fb      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d101      	bne.n	80109ae <HAL_I2C_Mem_Read+0x56>
 80109aa:	2302      	movs	r3, #2
 80109ac:	e1f4      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2201      	movs	r2, #1
 80109b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f003 0301 	and.w	r3, r3, #1
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d007      	beq.n	80109d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f042 0201 	orr.w	r2, r2, #1
 80109d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80109e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2222      	movs	r2, #34	; 0x22
 80109e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2240      	movs	r2, #64	; 0x40
 80109f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	4a5b      	ldr	r2, [pc, #364]	; (8010b80 <HAL_I2C_Mem_Read+0x228>)
 8010a14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010a16:	88f8      	ldrh	r0, [r7, #6]
 8010a18:	893a      	ldrh	r2, [r7, #8]
 8010a1a:	8979      	ldrh	r1, [r7, #10]
 8010a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a22:	9300      	str	r3, [sp, #0]
 8010a24:	4603      	mov	r3, r0
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f000 fe6c 	bl	8011704 <I2C_RequestMemoryRead>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8010a32:	2301      	movs	r3, #1
 8010a34:	e1b0      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d113      	bne.n	8010a66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010a3e:	2300      	movs	r3, #0
 8010a40:	623b      	str	r3, [r7, #32]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	695b      	ldr	r3, [r3, #20]
 8010a48:	623b      	str	r3, [r7, #32]
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	699b      	ldr	r3, [r3, #24]
 8010a50:	623b      	str	r3, [r7, #32]
 8010a52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a62:	601a      	str	r2, [r3, #0]
 8010a64:	e184      	b.n	8010d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d11b      	bne.n	8010aa6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010a7e:	2300      	movs	r3, #0
 8010a80:	61fb      	str	r3, [r7, #28]
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	61fb      	str	r3, [r7, #28]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	699b      	ldr	r3, [r3, #24]
 8010a90:	61fb      	str	r3, [r7, #28]
 8010a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010aa2:	601a      	str	r2, [r3, #0]
 8010aa4:	e164      	b.n	8010d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010aaa:	2b02      	cmp	r3, #2
 8010aac:	d11b      	bne.n	8010ae6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010abc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010ace:	2300      	movs	r3, #0
 8010ad0:	61bb      	str	r3, [r7, #24]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	695b      	ldr	r3, [r3, #20]
 8010ad8:	61bb      	str	r3, [r7, #24]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	699b      	ldr	r3, [r3, #24]
 8010ae0:	61bb      	str	r3, [r7, #24]
 8010ae2:	69bb      	ldr	r3, [r7, #24]
 8010ae4:	e144      	b.n	8010d70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	617b      	str	r3, [r7, #20]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	695b      	ldr	r3, [r3, #20]
 8010af0:	617b      	str	r3, [r7, #20]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	699b      	ldr	r3, [r3, #24]
 8010af8:	617b      	str	r3, [r7, #20]
 8010afa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8010afc:	e138      	b.n	8010d70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b02:	2b03      	cmp	r3, #3
 8010b04:	f200 80f1 	bhi.w	8010cea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d123      	bne.n	8010b58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f001 f9ef 	bl	8011ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d001      	beq.n	8010b24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8010b20:	2301      	movs	r3, #1
 8010b22:	e139      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	691a      	ldr	r2, [r3, #16]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2e:	b2d2      	uxtb	r2, r2
 8010b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b36:	1c5a      	adds	r2, r3, #1
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b40:	3b01      	subs	r3, #1
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010b56:	e10b      	b.n	8010d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d14e      	bne.n	8010bfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b66:	2200      	movs	r2, #0
 8010b68:	4906      	ldr	r1, [pc, #24]	; (8010b84 <HAL_I2C_Mem_Read+0x22c>)
 8010b6a:	68f8      	ldr	r0, [r7, #12]
 8010b6c:	f001 f86c 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d008      	beq.n	8010b88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8010b76:	2301      	movs	r3, #1
 8010b78:	e10e      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
 8010b7a:	bf00      	nop
 8010b7c:	00100002 	.word	0x00100002
 8010b80:	ffff0000 	.word	0xffff0000
 8010b84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	691a      	ldr	r2, [r3, #16]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba2:	b2d2      	uxtb	r2, r2
 8010ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010baa:	1c5a      	adds	r2, r3, #1
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	691a      	ldr	r2, [r3, #16]
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd4:	b2d2      	uxtb	r2, r2
 8010bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bdc:	1c5a      	adds	r2, r3, #1
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010be6:	3b01      	subs	r3, #1
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010bfc:	e0b8      	b.n	8010d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c04:	2200      	movs	r2, #0
 8010c06:	4966      	ldr	r1, [pc, #408]	; (8010da0 <HAL_I2C_Mem_Read+0x448>)
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	f001 f81d 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8010c14:	2301      	movs	r3, #1
 8010c16:	e0bf      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	691a      	ldr	r2, [r3, #16]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c32:	b2d2      	uxtb	r2, r2
 8010c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c3a:	1c5a      	adds	r2, r3, #1
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c44:	3b01      	subs	r3, #1
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	3b01      	subs	r3, #1
 8010c54:	b29a      	uxth	r2, r3
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	9300      	str	r3, [sp, #0]
 8010c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c60:	2200      	movs	r2, #0
 8010c62:	494f      	ldr	r1, [pc, #316]	; (8010da0 <HAL_I2C_Mem_Read+0x448>)
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f000 ffef 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d001      	beq.n	8010c74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8010c70:	2301      	movs	r3, #1
 8010c72:	e091      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	691a      	ldr	r2, [r3, #16]
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8e:	b2d2      	uxtb	r2, r2
 8010c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c96:	1c5a      	adds	r2, r3, #1
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ca0:	3b01      	subs	r3, #1
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	3b01      	subs	r3, #1
 8010cb0:	b29a      	uxth	r2, r3
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	691a      	ldr	r2, [r3, #16]
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc0:	b2d2      	uxtb	r2, r2
 8010cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc8:	1c5a      	adds	r2, r3, #1
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010ce8:	e042      	b.n	8010d70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f001 f902 	bl	8011ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e04c      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	691a      	ldr	r2, [r3, #16]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d08:	b2d2      	uxtb	r2, r2
 8010d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d10:	1c5a      	adds	r2, r3, #1
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	b29a      	uxth	r2, r3
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	3b01      	subs	r3, #1
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	695b      	ldr	r3, [r3, #20]
 8010d36:	f003 0304 	and.w	r3, r3, #4
 8010d3a:	2b04      	cmp	r3, #4
 8010d3c:	d118      	bne.n	8010d70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	691a      	ldr	r2, [r3, #16]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d48:	b2d2      	uxtb	r2, r2
 8010d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d50:	1c5a      	adds	r2, r3, #1
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	3b01      	subs	r3, #1
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f47f aec2 	bne.w	8010afe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2220      	movs	r2, #32
 8010d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2200      	movs	r2, #0
 8010d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8010d92:	2300      	movs	r3, #0
 8010d94:	e000      	b.n	8010d98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8010d96:	2302      	movs	r3, #2
  }
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3728      	adds	r7, #40	; 0x28
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	00010004 	.word	0x00010004

08010da4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b08c      	sub	sp, #48	; 0x30
 8010da8:	af02      	add	r7, sp, #8
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	4608      	mov	r0, r1
 8010dae:	4611      	mov	r1, r2
 8010db0:	461a      	mov	r2, r3
 8010db2:	4603      	mov	r3, r0
 8010db4:	817b      	strh	r3, [r7, #10]
 8010db6:	460b      	mov	r3, r1
 8010db8:	813b      	strh	r3, [r7, #8]
 8010dba:	4613      	mov	r3, r2
 8010dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010dbe:	f7fd fbbd 	bl	800e53c <HAL_GetTick>
 8010dc2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	2b20      	cmp	r3, #32
 8010dd2:	f040 8176 	bne.w	80110c2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8010dd6:	4b95      	ldr	r3, [pc, #596]	; (801102c <HAL_I2C_Mem_Read_DMA+0x288>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	08db      	lsrs	r3, r3, #3
 8010ddc:	4a94      	ldr	r2, [pc, #592]	; (8011030 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8010dde:	fba2 2303 	umull	r2, r3, r2, r3
 8010de2:	0a1a      	lsrs	r2, r3, #8
 8010de4:	4613      	mov	r3, r2
 8010de6:	009b      	lsls	r3, r3, #2
 8010de8:	4413      	add	r3, r2
 8010dea:	009a      	lsls	r2, r3, #2
 8010dec:	4413      	add	r3, r2
 8010dee:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	3b01      	subs	r3, #1
 8010df4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d116      	bne.n	8010e2a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2220      	movs	r2, #32
 8010e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e16:	f043 0220 	orr.w	r2, r3, #32
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e14c      	b.n	80110c4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	699b      	ldr	r3, [r3, #24]
 8010e30:	f003 0302 	and.w	r3, r3, #2
 8010e34:	2b02      	cmp	r3, #2
 8010e36:	d0db      	beq.n	8010df0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d101      	bne.n	8010e46 <HAL_I2C_Mem_Read_DMA+0xa2>
 8010e42:	2302      	movs	r3, #2
 8010e44:	e13e      	b.n	80110c4 <HAL_I2C_Mem_Read_DMA+0x320>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2201      	movs	r2, #1
 8010e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f003 0301 	and.w	r3, r3, #1
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d007      	beq.n	8010e6c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f042 0201 	orr.w	r2, r2, #1
 8010e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	2222      	movs	r2, #34	; 0x22
 8010e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2240      	movs	r2, #64	; 0x40
 8010e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ea2:	b29a      	uxth	r2, r3
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	4a62      	ldr	r2, [pc, #392]	; (8011034 <HAL_I2C_Mem_Read_DMA+0x290>)
 8010eac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8010eae:	897a      	ldrh	r2, [r7, #10]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8010eb4:	893a      	ldrh	r2, [r7, #8]
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8010eba:	88fa      	ldrh	r2, [r7, #6]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f000 80cc 	beq.w	8011068 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d02d      	beq.n	8010f34 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010edc:	4a56      	ldr	r2, [pc, #344]	; (8011038 <HAL_I2C_Mem_Read_DMA+0x294>)
 8010ede:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee4:	4a55      	ldr	r2, [pc, #340]	; (801103c <HAL_I2C_Mem_Read_DMA+0x298>)
 8010ee6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eec:	2200      	movs	r2, #0
 8010eee:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efc:	2200      	movs	r2, #0
 8010efe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f04:	2200      	movs	r2, #0
 8010f06:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	3310      	adds	r3, #16
 8010f12:	4619      	mov	r1, r3
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f18:	461a      	mov	r2, r3
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f1e:	f7fe fdaf 	bl	800fa80 <HAL_DMA_Start_IT>
 8010f22:	4603      	mov	r3, r0
 8010f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f040 8087 	bne.w	8011040 <HAL_I2C_Mem_Read_DMA+0x29c>
 8010f32:	e013      	b.n	8010f5c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2220      	movs	r2, #32
 8010f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2200      	movs	r2, #0
 8010f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	e0b3      	b.n	80110c4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8010f5c:	88f8      	ldrh	r0, [r7, #6]
 8010f5e:	893a      	ldrh	r2, [r7, #8]
 8010f60:	8979      	ldrh	r1, [r7, #10]
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	9301      	str	r3, [sp, #4]
 8010f66:	2323      	movs	r3, #35	; 0x23
 8010f68:	9300      	str	r3, [sp, #0]
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f000 fbc9 	bl	8011704 <I2C_RequestMemoryRead>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d023      	beq.n	8010fc0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fe fe47 	bl	800fc10 <HAL_DMA_Abort_IT>
 8010f82:	4603      	mov	r3, r0
 8010f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f9e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f022 0201 	bic.w	r2, r2, #1
 8010fba:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e081      	b.n	80110c4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d108      	bne.n	8010fda <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010fd6:	601a      	str	r2, [r3, #0]
 8010fd8:	e007      	b.n	8010fea <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	685a      	ldr	r2, [r3, #4]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010fe8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010fea:	2300      	movs	r3, #0
 8010fec:	61bb      	str	r3, [r7, #24]
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	695b      	ldr	r3, [r3, #20]
 8010ff4:	61bb      	str	r3, [r7, #24]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	699b      	ldr	r3, [r3, #24]
 8010ffc:	61bb      	str	r3, [r7, #24]
 8010ffe:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2200      	movs	r2, #0
 8011004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	685a      	ldr	r2, [r3, #4]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011016:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	685a      	ldr	r2, [r3, #4]
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011026:	605a      	str	r2, [r3, #4]
 8011028:	e049      	b.n	80110be <HAL_I2C_Mem_Read_DMA+0x31a>
 801102a:	bf00      	nop
 801102c:	20000004 	.word	0x20000004
 8011030:	14f8b589 	.word	0x14f8b589
 8011034:	ffff0000 	.word	0xffff0000
 8011038:	080118d5 	.word	0x080118d5
 801103c:	08011a7f 	.word	0x08011a7f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2220      	movs	r2, #32
 8011044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2200      	movs	r2, #0
 801104c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011054:	f043 0210 	orr.w	r2, r3, #16
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2200      	movs	r2, #0
 8011060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011064:	2301      	movs	r3, #1
 8011066:	e02d      	b.n	80110c4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8011068:	88f8      	ldrh	r0, [r7, #6]
 801106a:	893a      	ldrh	r2, [r7, #8]
 801106c:	8979      	ldrh	r1, [r7, #10]
 801106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011070:	9301      	str	r3, [sp, #4]
 8011072:	2323      	movs	r3, #35	; 0x23
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	4603      	mov	r3, r0
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	f000 fb43 	bl	8011704 <I2C_RequestMemoryRead>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8011084:	2301      	movs	r3, #1
 8011086:	e01d      	b.n	80110c4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011088:	2300      	movs	r3, #0
 801108a:	617b      	str	r3, [r7, #20]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	695b      	ldr	r3, [r3, #20]
 8011092:	617b      	str	r3, [r7, #20]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	699b      	ldr	r3, [r3, #24]
 801109a:	617b      	str	r3, [r7, #20]
 801109c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110ac:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2220      	movs	r2, #32
 80110b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2200      	movs	r2, #0
 80110ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80110be:	2300      	movs	r3, #0
 80110c0:	e000      	b.n	80110c4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80110c2:	2302      	movs	r3, #2
  }
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3728      	adds	r7, #40	; 0x28
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b08a      	sub	sp, #40	; 0x28
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	695b      	ldr	r3, [r3, #20]
 80110da:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80110e4:	2300      	movs	r3, #0
 80110e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80110ee:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80110f0:	6a3b      	ldr	r3, [r7, #32]
 80110f2:	0a1b      	lsrs	r3, r3, #8
 80110f4:	f003 0301 	and.w	r3, r3, #1
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00e      	beq.n	801111a <HAL_I2C_ER_IRQHandler+0x4e>
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	0a1b      	lsrs	r3, r3, #8
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	d008      	beq.n	801111a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	f043 0301 	orr.w	r3, r3, #1
 801110e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011118:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801111a:	6a3b      	ldr	r3, [r7, #32]
 801111c:	0a5b      	lsrs	r3, r3, #9
 801111e:	f003 0301 	and.w	r3, r3, #1
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00e      	beq.n	8011144 <HAL_I2C_ER_IRQHandler+0x78>
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	0a1b      	lsrs	r3, r3, #8
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	2b00      	cmp	r3, #0
 8011130:	d008      	beq.n	8011144 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8011132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011134:	f043 0302 	orr.w	r3, r3, #2
 8011138:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8011142:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011144:	6a3b      	ldr	r3, [r7, #32]
 8011146:	0a9b      	lsrs	r3, r3, #10
 8011148:	f003 0301 	and.w	r3, r3, #1
 801114c:	2b00      	cmp	r3, #0
 801114e:	d03f      	beq.n	80111d0 <HAL_I2C_ER_IRQHandler+0x104>
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	0a1b      	lsrs	r3, r3, #8
 8011154:	f003 0301 	and.w	r3, r3, #1
 8011158:	2b00      	cmp	r3, #0
 801115a:	d039      	beq.n	80111d0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801115c:	7efb      	ldrb	r3, [r7, #27]
 801115e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011164:	b29b      	uxth	r3, r3
 8011166:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801116e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011174:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8011176:	7ebb      	ldrb	r3, [r7, #26]
 8011178:	2b20      	cmp	r3, #32
 801117a:	d112      	bne.n	80111a2 <HAL_I2C_ER_IRQHandler+0xd6>
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10f      	bne.n	80111a2 <HAL_I2C_ER_IRQHandler+0xd6>
 8011182:	7cfb      	ldrb	r3, [r7, #19]
 8011184:	2b21      	cmp	r3, #33	; 0x21
 8011186:	d008      	beq.n	801119a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8011188:	7cfb      	ldrb	r3, [r7, #19]
 801118a:	2b29      	cmp	r3, #41	; 0x29
 801118c:	d005      	beq.n	801119a <HAL_I2C_ER_IRQHandler+0xce>
 801118e:	7cfb      	ldrb	r3, [r7, #19]
 8011190:	2b28      	cmp	r3, #40	; 0x28
 8011192:	d106      	bne.n	80111a2 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2b21      	cmp	r3, #33	; 0x21
 8011198:	d103      	bne.n	80111a2 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 f87a 	bl	8011294 <I2C_Slave_AF>
 80111a0:	e016      	b.n	80111d0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80111aa:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ae:	f043 0304 	orr.w	r3, r3, #4
 80111b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80111b4:	7efb      	ldrb	r3, [r7, #27]
 80111b6:	2b10      	cmp	r3, #16
 80111b8:	d002      	beq.n	80111c0 <HAL_I2C_ER_IRQHandler+0xf4>
 80111ba:	7efb      	ldrb	r3, [r7, #27]
 80111bc:	2b40      	cmp	r3, #64	; 0x40
 80111be:	d107      	bne.n	80111d0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111ce:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	0adb      	lsrs	r3, r3, #11
 80111d4:	f003 0301 	and.w	r3, r3, #1
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d00e      	beq.n	80111fa <HAL_I2C_ER_IRQHandler+0x12e>
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	0a1b      	lsrs	r3, r3, #8
 80111e0:	f003 0301 	and.w	r3, r3, #1
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d008      	beq.n	80111fa <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80111e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ea:	f043 0308 	orr.w	r3, r3, #8
 80111ee:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80111f8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80111fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d008      	beq.n	8011212 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011206:	431a      	orrs	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f000 f8b1 	bl	8011374 <I2C_ITError>
  }
}
 8011212:	bf00      	nop
 8011214:	3728      	adds	r7, #40	; 0x28
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801121a:	b480      	push	{r7}
 801121c:	b083      	sub	sp, #12
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8011222:	bf00      	nop
 8011224:	370c      	adds	r7, #12
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr

0801122e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801122e:	b480      	push	{r7}
 8011230:	b083      	sub	sp, #12
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8011236:	bf00      	nop
 8011238:	370c      	adds	r7, #12
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr

08011242 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011242:	b480      	push	{r7}
 8011244:	b083      	sub	sp, #12
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801124a:	bf00      	nop
 801124c:	370c      	adds	r7, #12
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr

08011256 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011256:	b480      	push	{r7}
 8011258:	b083      	sub	sp, #12
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801125e:	bf00      	nop
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8011272:	bf00      	nop
 8011274:	370c      	adds	r7, #12
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr

0801127e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801127e:	b480      	push	{r7}
 8011280:	b083      	sub	sp, #12
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8011286:	bf00      	nop
 8011288:	370c      	adds	r7, #12
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr
	...

08011294 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	2b08      	cmp	r3, #8
 80112ae:	d002      	beq.n	80112b6 <I2C_Slave_AF+0x22>
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b20      	cmp	r3, #32
 80112b4:	d129      	bne.n	801130a <I2C_Slave_AF+0x76>
 80112b6:	7bfb      	ldrb	r3, [r7, #15]
 80112b8:	2b28      	cmp	r3, #40	; 0x28
 80112ba:	d126      	bne.n	801130a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4a2c      	ldr	r2, [pc, #176]	; (8011370 <I2C_Slave_AF+0xdc>)
 80112c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	685a      	ldr	r2, [r3, #4]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80112d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80112da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2200      	movs	r2, #0
 80112f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2220      	movs	r2, #32
 80112f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2200      	movs	r2, #0
 80112fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff ffa7 	bl	8011256 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8011308:	e02e      	b.n	8011368 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801130a:	7bfb      	ldrb	r3, [r7, #15]
 801130c:	2b21      	cmp	r3, #33	; 0x21
 801130e:	d126      	bne.n	801135e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4a17      	ldr	r2, [pc, #92]	; (8011370 <I2C_Slave_AF+0xdc>)
 8011314:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2221      	movs	r2, #33	; 0x21
 801131a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2220      	movs	r2, #32
 8011320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	685a      	ldr	r2, [r3, #4]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801133a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011344:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011354:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7ff ff69 	bl	801122e <HAL_I2C_SlaveTxCpltCallback>
}
 801135c:	e004      	b.n	8011368 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011366:	615a      	str	r2, [r3, #20]
}
 8011368:	bf00      	nop
 801136a:	3710      	adds	r7, #16
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}
 8011370:	ffff0000 	.word	0xffff0000

08011374 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011382:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801138a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801138c:	7bbb      	ldrb	r3, [r7, #14]
 801138e:	2b10      	cmp	r3, #16
 8011390:	d002      	beq.n	8011398 <I2C_ITError+0x24>
 8011392:	7bbb      	ldrb	r3, [r7, #14]
 8011394:	2b40      	cmp	r3, #64	; 0x40
 8011396:	d10a      	bne.n	80113ae <I2C_ITError+0x3a>
 8011398:	7bfb      	ldrb	r3, [r7, #15]
 801139a:	2b22      	cmp	r3, #34	; 0x22
 801139c:	d107      	bne.n	80113ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80113ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80113b4:	2b28      	cmp	r3, #40	; 0x28
 80113b6:	d107      	bne.n	80113c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2228      	movs	r2, #40	; 0x28
 80113c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80113c6:	e015      	b.n	80113f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113d6:	d00a      	beq.n	80113ee <I2C_ITError+0x7a>
 80113d8:	7bfb      	ldrb	r3, [r7, #15]
 80113da:	2b60      	cmp	r3, #96	; 0x60
 80113dc:	d007      	beq.n	80113ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2220      	movs	r2, #32
 80113e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2200      	movs	r2, #0
 80113f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011402:	d162      	bne.n	80114ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	685a      	ldr	r2, [r3, #4]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011412:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801141c:	b2db      	uxtb	r3, r3
 801141e:	2b01      	cmp	r3, #1
 8011420:	d020      	beq.n	8011464 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011426:	4a6a      	ldr	r2, [pc, #424]	; (80115d0 <I2C_ITError+0x25c>)
 8011428:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801142e:	4618      	mov	r0, r3
 8011430:	f7fe fbee 	bl	800fc10 <HAL_DMA_Abort_IT>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	f000 8089 	beq.w	801154e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f022 0201 	bic.w	r2, r2, #1
 801144a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2220      	movs	r2, #32
 8011450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801145e:	4610      	mov	r0, r2
 8011460:	4798      	blx	r3
 8011462:	e074      	b.n	801154e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011468:	4a59      	ldr	r2, [pc, #356]	; (80115d0 <I2C_ITError+0x25c>)
 801146a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011470:	4618      	mov	r0, r3
 8011472:	f7fe fbcd 	bl	800fc10 <HAL_DMA_Abort_IT>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d068      	beq.n	801154e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	695b      	ldr	r3, [r3, #20]
 8011482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011486:	2b40      	cmp	r3, #64	; 0x40
 8011488:	d10b      	bne.n	80114a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	691a      	ldr	r2, [r3, #16]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011494:	b2d2      	uxtb	r2, r2
 8011496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801149c:	1c5a      	adds	r2, r3, #1
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f022 0201 	bic.w	r2, r2, #1
 80114b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2220      	movs	r2, #32
 80114b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80114c4:	4610      	mov	r0, r2
 80114c6:	4798      	blx	r3
 80114c8:	e041      	b.n	801154e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	2b60      	cmp	r3, #96	; 0x60
 80114d4:	d125      	bne.n	8011522 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2220      	movs	r2, #32
 80114da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2200      	movs	r2, #0
 80114e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114ee:	2b40      	cmp	r3, #64	; 0x40
 80114f0:	d10b      	bne.n	801150a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	691a      	ldr	r2, [r3, #16]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114fc:	b2d2      	uxtb	r2, r2
 80114fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011504:	1c5a      	adds	r2, r3, #1
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f022 0201 	bic.w	r2, r2, #1
 8011518:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7ff feaf 	bl	801127e <HAL_I2C_AbortCpltCallback>
 8011520:	e015      	b.n	801154e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	695b      	ldr	r3, [r3, #20]
 8011528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801152c:	2b40      	cmp	r3, #64	; 0x40
 801152e:	d10b      	bne.n	8011548 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	691a      	ldr	r2, [r3, #16]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801153a:	b2d2      	uxtb	r2, r2
 801153c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011542:	1c5a      	adds	r2, r3, #1
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff fe8e 	bl	801126a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011552:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	f003 0301 	and.w	r3, r3, #1
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10e      	bne.n	801157c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8011564:	2b00      	cmp	r3, #0
 8011566:	d109      	bne.n	801157c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801156e:	2b00      	cmp	r3, #0
 8011570:	d104      	bne.n	801157c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8011578:	2b00      	cmp	r3, #0
 801157a:	d007      	beq.n	801158c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	685a      	ldr	r2, [r3, #4]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801158a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011592:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	2b04      	cmp	r3, #4
 801159e:	d113      	bne.n	80115c8 <I2C_ITError+0x254>
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
 80115a2:	2b28      	cmp	r3, #40	; 0x28
 80115a4:	d110      	bne.n	80115c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4a0a      	ldr	r2, [pc, #40]	; (80115d4 <I2C_ITError+0x260>)
 80115aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2220      	movs	r2, #32
 80115b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7ff fe47 	bl	8011256 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80115c8:	bf00      	nop
 80115ca:	3710      	adds	r7, #16
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	08011af9 	.word	0x08011af9
 80115d4:	ffff0000 	.word	0xffff0000

080115d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b088      	sub	sp, #32
 80115dc:	af02      	add	r7, sp, #8
 80115de:	60f8      	str	r0, [r7, #12]
 80115e0:	4608      	mov	r0, r1
 80115e2:	4611      	mov	r1, r2
 80115e4:	461a      	mov	r2, r3
 80115e6:	4603      	mov	r3, r0
 80115e8:	817b      	strh	r3, [r7, #10]
 80115ea:	460b      	mov	r3, r1
 80115ec:	813b      	strh	r3, [r7, #8]
 80115ee:	4613      	mov	r3, r2
 80115f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011600:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8011602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011604:	9300      	str	r3, [sp, #0]
 8011606:	6a3b      	ldr	r3, [r7, #32]
 8011608:	2200      	movs	r2, #0
 801160a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	f000 fb1a 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d00d      	beq.n	8011636 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011628:	d103      	bne.n	8011632 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011630:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8011632:	2303      	movs	r3, #3
 8011634:	e05f      	b.n	80116f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8011636:	897b      	ldrh	r3, [r7, #10]
 8011638:	b2db      	uxtb	r3, r3
 801163a:	461a      	mov	r2, r3
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011644:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8011646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011648:	6a3a      	ldr	r2, [r7, #32]
 801164a:	492d      	ldr	r1, [pc, #180]	; (8011700 <I2C_RequestMemoryWrite+0x128>)
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f000 fb52 	bl	8011cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8011658:	2301      	movs	r3, #1
 801165a:	e04c      	b.n	80116f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801165c:	2300      	movs	r3, #0
 801165e:	617b      	str	r3, [r7, #20]
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	695b      	ldr	r3, [r3, #20]
 8011666:	617b      	str	r3, [r7, #20]
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	699b      	ldr	r3, [r3, #24]
 801166e:	617b      	str	r3, [r7, #20]
 8011670:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011674:	6a39      	ldr	r1, [r7, #32]
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f000 fbbc 	bl	8011df4 <I2C_WaitOnTXEFlagUntilTimeout>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00d      	beq.n	801169e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011686:	2b04      	cmp	r3, #4
 8011688:	d107      	bne.n	801169a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011698:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801169a:	2301      	movs	r3, #1
 801169c:	e02b      	b.n	80116f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801169e:	88fb      	ldrh	r3, [r7, #6]
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d105      	bne.n	80116b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80116a4:	893b      	ldrh	r3, [r7, #8]
 80116a6:	b2da      	uxtb	r2, r3
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	611a      	str	r2, [r3, #16]
 80116ae:	e021      	b.n	80116f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80116b0:	893b      	ldrh	r3, [r7, #8]
 80116b2:	0a1b      	lsrs	r3, r3, #8
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	b2da      	uxtb	r2, r3
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80116be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116c0:	6a39      	ldr	r1, [r7, #32]
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f000 fb96 	bl	8011df4 <I2C_WaitOnTXEFlagUntilTimeout>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00d      	beq.n	80116ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116d2:	2b04      	cmp	r3, #4
 80116d4:	d107      	bne.n	80116e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80116e6:	2301      	movs	r3, #1
 80116e8:	e005      	b.n	80116f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80116ea:	893b      	ldrh	r3, [r7, #8]
 80116ec:	b2da      	uxtb	r2, r3
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3718      	adds	r7, #24
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	00010002 	.word	0x00010002

08011704 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b088      	sub	sp, #32
 8011708:	af02      	add	r7, sp, #8
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	4608      	mov	r0, r1
 801170e:	4611      	mov	r1, r2
 8011710:	461a      	mov	r2, r3
 8011712:	4603      	mov	r3, r0
 8011714:	817b      	strh	r3, [r7, #10]
 8011716:	460b      	mov	r3, r1
 8011718:	813b      	strh	r3, [r7, #8]
 801171a:	4613      	mov	r3, r2
 801171c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801172c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801173c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	6a3b      	ldr	r3, [r7, #32]
 8011744:	2200      	movs	r2, #0
 8011746:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	f000 fa7c 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00d      	beq.n	8011772 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011764:	d103      	bne.n	801176e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f44f 7200 	mov.w	r2, #512	; 0x200
 801176c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801176e:	2303      	movs	r3, #3
 8011770:	e0aa      	b.n	80118c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8011772:	897b      	ldrh	r3, [r7, #10]
 8011774:	b2db      	uxtb	r3, r3
 8011776:	461a      	mov	r2, r3
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011780:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8011782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011784:	6a3a      	ldr	r2, [r7, #32]
 8011786:	4952      	ldr	r1, [pc, #328]	; (80118d0 <I2C_RequestMemoryRead+0x1cc>)
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f000 fab4 	bl	8011cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801178e:	4603      	mov	r3, r0
 8011790:	2b00      	cmp	r3, #0
 8011792:	d001      	beq.n	8011798 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8011794:	2301      	movs	r3, #1
 8011796:	e097      	b.n	80118c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011798:	2300      	movs	r3, #0
 801179a:	617b      	str	r3, [r7, #20]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	695b      	ldr	r3, [r3, #20]
 80117a2:	617b      	str	r3, [r7, #20]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	699b      	ldr	r3, [r3, #24]
 80117aa:	617b      	str	r3, [r7, #20]
 80117ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80117ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117b0:	6a39      	ldr	r1, [r7, #32]
 80117b2:	68f8      	ldr	r0, [r7, #12]
 80117b4:	f000 fb1e 	bl	8011df4 <I2C_WaitOnTXEFlagUntilTimeout>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d00d      	beq.n	80117da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c2:	2b04      	cmp	r3, #4
 80117c4:	d107      	bne.n	80117d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80117d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80117d6:	2301      	movs	r3, #1
 80117d8:	e076      	b.n	80118c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80117da:	88fb      	ldrh	r3, [r7, #6]
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d105      	bne.n	80117ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80117e0:	893b      	ldrh	r3, [r7, #8]
 80117e2:	b2da      	uxtb	r2, r3
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	611a      	str	r2, [r3, #16]
 80117ea:	e021      	b.n	8011830 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80117ec:	893b      	ldrh	r3, [r7, #8]
 80117ee:	0a1b      	lsrs	r3, r3, #8
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80117fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117fc:	6a39      	ldr	r1, [r7, #32]
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f000 faf8 	bl	8011df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8011804:	4603      	mov	r3, r0
 8011806:	2b00      	cmp	r3, #0
 8011808:	d00d      	beq.n	8011826 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801180e:	2b04      	cmp	r3, #4
 8011810:	d107      	bne.n	8011822 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	681a      	ldr	r2, [r3, #0]
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011820:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8011822:	2301      	movs	r3, #1
 8011824:	e050      	b.n	80118c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8011826:	893b      	ldrh	r3, [r7, #8]
 8011828:	b2da      	uxtb	r2, r3
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011832:	6a39      	ldr	r1, [r7, #32]
 8011834:	68f8      	ldr	r0, [r7, #12]
 8011836:	f000 fadd 	bl	8011df4 <I2C_WaitOnTXEFlagUntilTimeout>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d00d      	beq.n	801185c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011844:	2b04      	cmp	r3, #4
 8011846:	d107      	bne.n	8011858 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011856:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8011858:	2301      	movs	r3, #1
 801185a:	e035      	b.n	80118c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	681a      	ldr	r2, [r3, #0]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801186a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	6a3b      	ldr	r3, [r7, #32]
 8011872:	2200      	movs	r2, #0
 8011874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 f9e5 	bl	8011c48 <I2C_WaitOnFlagUntilTimeout>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d00d      	beq.n	80118a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801188e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011892:	d103      	bne.n	801189c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f44f 7200 	mov.w	r2, #512	; 0x200
 801189a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801189c:	2303      	movs	r3, #3
 801189e:	e013      	b.n	80118c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80118a0:	897b      	ldrh	r3, [r7, #10]
 80118a2:	b2db      	uxtb	r3, r3
 80118a4:	f043 0301 	orr.w	r3, r3, #1
 80118a8:	b2da      	uxtb	r2, r3
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	6a3a      	ldr	r2, [r7, #32]
 80118b4:	4906      	ldr	r1, [pc, #24]	; (80118d0 <I2C_RequestMemoryRead+0x1cc>)
 80118b6:	68f8      	ldr	r0, [r7, #12]
 80118b8:	f000 fa1d 	bl	8011cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80118c2:	2301      	movs	r3, #1
 80118c4:	e000      	b.n	80118c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80118c6:	2300      	movs	r3, #0
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3718      	adds	r7, #24
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	00010002 	.word	0x00010002

080118d4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80118e8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80118f0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	685a      	ldr	r2, [r3, #4]
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011906:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801190c:	2b00      	cmp	r3, #0
 801190e:	d003      	beq.n	8011918 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011914:	2200      	movs	r2, #0
 8011916:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801191c:	2b00      	cmp	r3, #0
 801191e:	d003      	beq.n	8011928 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011924:	2200      	movs	r2, #0
 8011926:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8011928:	7cfb      	ldrb	r3, [r7, #19]
 801192a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801192e:	2b21      	cmp	r3, #33	; 0x21
 8011930:	d007      	beq.n	8011942 <I2C_DMAXferCplt+0x6e>
 8011932:	7cfb      	ldrb	r3, [r7, #19]
 8011934:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8011938:	2b22      	cmp	r3, #34	; 0x22
 801193a:	d131      	bne.n	80119a0 <I2C_DMAXferCplt+0xcc>
 801193c:	7cbb      	ldrb	r3, [r7, #18]
 801193e:	2b20      	cmp	r3, #32
 8011940:	d12e      	bne.n	80119a0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	685a      	ldr	r2, [r3, #4]
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011950:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	2200      	movs	r2, #0
 8011956:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011958:	7cfb      	ldrb	r3, [r7, #19]
 801195a:	2b29      	cmp	r3, #41	; 0x29
 801195c:	d10a      	bne.n	8011974 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	2221      	movs	r2, #33	; 0x21
 8011962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	2228      	movs	r2, #40	; 0x28
 8011968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801196c:	6978      	ldr	r0, [r7, #20]
 801196e:	f7ff fc5e 	bl	801122e <HAL_I2C_SlaveTxCpltCallback>
 8011972:	e00c      	b.n	801198e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011974:	7cfb      	ldrb	r3, [r7, #19]
 8011976:	2b2a      	cmp	r3, #42	; 0x2a
 8011978:	d109      	bne.n	801198e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	2222      	movs	r2, #34	; 0x22
 801197e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	2228      	movs	r2, #40	; 0x28
 8011984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011988:	6978      	ldr	r0, [r7, #20]
 801198a:	f7ff fc5a 	bl	8011242 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	685a      	ldr	r2, [r3, #4]
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801199c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801199e:	e06a      	b.n	8011a76 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d064      	beq.n	8011a76 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d107      	bne.n	80119c6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80119c4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	685a      	ldr	r2, [r3, #4]
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80119d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80119dc:	d009      	beq.n	80119f2 <I2C_DMAXferCplt+0x11e>
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2b08      	cmp	r3, #8
 80119e2:	d006      	beq.n	80119f2 <I2C_DMAXferCplt+0x11e>
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80119ea:	d002      	beq.n	80119f2 <I2C_DMAXferCplt+0x11e>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b20      	cmp	r3, #32
 80119f0:	d107      	bne.n	8011a02 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a00:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	685a      	ldr	r2, [r3, #4]
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011a10:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	685a      	ldr	r2, [r3, #4]
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011a20:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2200      	movs	r2, #0
 8011a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d003      	beq.n	8011a38 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8011a30:	6978      	ldr	r0, [r7, #20]
 8011a32:	f7ff fc1a 	bl	801126a <HAL_I2C_ErrorCallback>
}
 8011a36:	e01e      	b.n	8011a76 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	2220      	movs	r2, #32
 8011a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	2b40      	cmp	r3, #64	; 0x40
 8011a4a:	d10a      	bne.n	8011a62 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	2200      	movs	r2, #0
 8011a58:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8011a5a:	6978      	ldr	r0, [r7, #20]
 8011a5c:	f7f0 fac0 	bl	8001fe0 <HAL_I2C_MemRxCpltCallback>
}
 8011a60:	e009      	b.n	8011a76 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	2200      	movs	r2, #0
 8011a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	2212      	movs	r2, #18
 8011a6e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8011a70:	6978      	ldr	r0, [r7, #20]
 8011a72:	f7ff fbd2 	bl	801121a <HAL_I2C_MasterRxCpltCallback>
}
 8011a76:	bf00      	nop
 8011a78:	3718      	adds	r7, #24
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b084      	sub	sp, #16
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a8a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d003      	beq.n	8011a9c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a98:	2200      	movs	r2, #0
 8011a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d003      	beq.n	8011aac <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f7fe fa5b 	bl	800ff68 <HAL_DMA_GetError>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b02      	cmp	r3, #2
 8011ab6:	d01b      	beq.n	8011af0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ac6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2200      	movs	r2, #0
 8011acc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2220      	movs	r2, #32
 8011ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae2:	f043 0210 	orr.w	r2, r3, #16
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	f7ff fbbd 	bl	801126a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011af0:	bf00      	nop
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b086      	sub	sp, #24
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011b00:	2300      	movs	r3, #0
 8011b02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8011b12:	4b4b      	ldr	r3, [pc, #300]	; (8011c40 <I2C_DMAAbort+0x148>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	08db      	lsrs	r3, r3, #3
 8011b18:	4a4a      	ldr	r2, [pc, #296]	; (8011c44 <I2C_DMAAbort+0x14c>)
 8011b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b1e:	0a1a      	lsrs	r2, r3, #8
 8011b20:	4613      	mov	r3, r2
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	4413      	add	r3, r2
 8011b26:	00da      	lsls	r2, r3, #3
 8011b28:	1ad3      	subs	r3, r2, r3
 8011b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d106      	bne.n	8011b40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b36:	f043 0220 	orr.w	r2, r3, #32
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8011b3e:	e00a      	b.n	8011b56 <I2C_DMAAbort+0x5e>
    }
    count--;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3b01      	subs	r3, #1
 8011b44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b54:	d0ea      	beq.n	8011b2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d003      	beq.n	8011b66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b62:	2200      	movs	r2, #0
 8011b64:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d003      	beq.n	8011b76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b72:	2200      	movs	r2, #0
 8011b74:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d003      	beq.n	8011b9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b98:	2200      	movs	r2, #0
 8011b9a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d003      	beq.n	8011bac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba8:	2200      	movs	r2, #0
 8011baa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f022 0201 	bic.w	r2, r2, #1
 8011bba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	2b60      	cmp	r3, #96	; 0x60
 8011bc6:	d10e      	bne.n	8011be6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	2220      	movs	r2, #32
 8011bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011bde:	6978      	ldr	r0, [r7, #20]
 8011be0:	f7ff fb4d 	bl	801127e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011be4:	e027      	b.n	8011c36 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011be6:	7cfb      	ldrb	r3, [r7, #19]
 8011be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011bec:	2b28      	cmp	r3, #40	; 0x28
 8011bee:	d117      	bne.n	8011c20 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f042 0201 	orr.w	r2, r2, #1
 8011bfe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011c0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	2200      	movs	r2, #0
 8011c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	2228      	movs	r2, #40	; 0x28
 8011c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011c1e:	e007      	b.n	8011c30 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2220      	movs	r2, #32
 8011c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8011c30:	6978      	ldr	r0, [r7, #20]
 8011c32:	f7ff fb1a 	bl	801126a <HAL_I2C_ErrorCallback>
}
 8011c36:	bf00      	nop
 8011c38:	3718      	adds	r7, #24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	20000004 	.word	0x20000004
 8011c44:	14f8b589 	.word	0x14f8b589

08011c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	603b      	str	r3, [r7, #0]
 8011c54:	4613      	mov	r3, r2
 8011c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011c58:	e025      	b.n	8011ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c60:	d021      	beq.n	8011ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c62:	f7fc fc6b 	bl	800e53c <HAL_GetTick>
 8011c66:	4602      	mov	r2, r0
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	683a      	ldr	r2, [r7, #0]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d302      	bcc.n	8011c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d116      	bne.n	8011ca6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2220      	movs	r2, #32
 8011c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c92:	f043 0220 	orr.w	r2, r3, #32
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	e023      	b.n	8011cee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	0c1b      	lsrs	r3, r3, #16
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d10d      	bne.n	8011ccc <I2C_WaitOnFlagUntilTimeout+0x84>
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	695b      	ldr	r3, [r3, #20]
 8011cb6:	43da      	mvns	r2, r3
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	4013      	ands	r3, r2
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	bf0c      	ite	eq
 8011cc2:	2301      	moveq	r3, #1
 8011cc4:	2300      	movne	r3, #0
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	461a      	mov	r2, r3
 8011cca:	e00c      	b.n	8011ce6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	43da      	mvns	r2, r3
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	bf0c      	ite	eq
 8011cde:	2301      	moveq	r3, #1
 8011ce0:	2300      	movne	r3, #0
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	79fb      	ldrb	r3, [r7, #7]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d0b6      	beq.n	8011c5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011cec:	2300      	movs	r3, #0
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}

08011cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b084      	sub	sp, #16
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	60f8      	str	r0, [r7, #12]
 8011cfe:	60b9      	str	r1, [r7, #8]
 8011d00:	607a      	str	r2, [r7, #4]
 8011d02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011d04:	e051      	b.n	8011daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	695b      	ldr	r3, [r3, #20]
 8011d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011d14:	d123      	bne.n	8011d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011d2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2200      	movs	r2, #0
 8011d34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2220      	movs	r2, #32
 8011d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d4a:	f043 0204 	orr.w	r2, r3, #4
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2200      	movs	r2, #0
 8011d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e046      	b.n	8011dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d64:	d021      	beq.n	8011daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d66:	f7fc fbe9 	bl	800e53c <HAL_GetTick>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d302      	bcc.n	8011d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d116      	bne.n	8011daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2220      	movs	r2, #32
 8011d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d96:	f043 0220 	orr.w	r2, r3, #32
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	2200      	movs	r2, #0
 8011da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011da6:	2301      	movs	r3, #1
 8011da8:	e020      	b.n	8011dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	0c1b      	lsrs	r3, r3, #16
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d10c      	bne.n	8011dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	695b      	ldr	r3, [r3, #20]
 8011dba:	43da      	mvns	r2, r3
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bf14      	ite	ne
 8011dc6:	2301      	movne	r3, #1
 8011dc8:	2300      	moveq	r3, #0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	e00b      	b.n	8011de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	699b      	ldr	r3, [r3, #24]
 8011dd4:	43da      	mvns	r2, r3
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	4013      	ands	r3, r2
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	bf14      	ite	ne
 8011de0:	2301      	movne	r3, #1
 8011de2:	2300      	moveq	r3, #0
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d18d      	bne.n	8011d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011e00:	e02d      	b.n	8011e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f000 f8ce 	bl	8011fa4 <I2C_IsAcknowledgeFailed>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d001      	beq.n	8011e12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8011e0e:	2301      	movs	r3, #1
 8011e10:	e02d      	b.n	8011e6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e18:	d021      	beq.n	8011e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e1a:	f7fc fb8f 	bl	800e53c <HAL_GetTick>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	1ad3      	subs	r3, r2, r3
 8011e24:	68ba      	ldr	r2, [r7, #8]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d302      	bcc.n	8011e30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d116      	bne.n	8011e5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2200      	movs	r2, #0
 8011e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2220      	movs	r2, #32
 8011e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e4a:	f043 0220 	orr.w	r2, r3, #32
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2200      	movs	r2, #0
 8011e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	e007      	b.n	8011e6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	695b      	ldr	r3, [r3, #20]
 8011e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e68:	2b80      	cmp	r3, #128	; 0x80
 8011e6a:	d1ca      	bne.n	8011e02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011e6c:	2300      	movs	r3, #0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3710      	adds	r7, #16
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b084      	sub	sp, #16
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	60f8      	str	r0, [r7, #12]
 8011e7e:	60b9      	str	r1, [r7, #8]
 8011e80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8011e82:	e02d      	b.n	8011ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011e84:	68f8      	ldr	r0, [r7, #12]
 8011e86:	f000 f88d 	bl	8011fa4 <I2C_IsAcknowledgeFailed>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d001      	beq.n	8011e94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8011e90:	2301      	movs	r3, #1
 8011e92:	e02d      	b.n	8011ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e9a:	d021      	beq.n	8011ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011e9c:	f7fc fb4e 	bl	800e53c <HAL_GetTick>
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	1ad3      	subs	r3, r2, r3
 8011ea6:	68ba      	ldr	r2, [r7, #8]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d302      	bcc.n	8011eb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d116      	bne.n	8011ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2220      	movs	r2, #32
 8011ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ecc:	f043 0220 	orr.w	r2, r3, #32
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011edc:	2301      	movs	r3, #1
 8011ede:	e007      	b.n	8011ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	695b      	ldr	r3, [r3, #20]
 8011ee6:	f003 0304 	and.w	r3, r3, #4
 8011eea:	2b04      	cmp	r3, #4
 8011eec:	d1ca      	bne.n	8011e84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3710      	adds	r7, #16
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011f04:	e042      	b.n	8011f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	695b      	ldr	r3, [r3, #20]
 8011f0c:	f003 0310 	and.w	r3, r3, #16
 8011f10:	2b10      	cmp	r3, #16
 8011f12:	d119      	bne.n	8011f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f06f 0210 	mvn.w	r2, #16
 8011f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2200      	movs	r2, #0
 8011f22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2220      	movs	r2, #32
 8011f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011f44:	2301      	movs	r3, #1
 8011f46:	e029      	b.n	8011f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011f48:	f7fc faf8 	bl	800e53c <HAL_GetTick>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	68ba      	ldr	r2, [r7, #8]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d302      	bcc.n	8011f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d116      	bne.n	8011f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2200      	movs	r2, #0
 8011f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2220      	movs	r2, #32
 8011f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f78:	f043 0220 	orr.w	r2, r3, #32
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	e007      	b.n	8011f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	695b      	ldr	r3, [r3, #20]
 8011f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f96:	2b40      	cmp	r3, #64	; 0x40
 8011f98:	d1b5      	bne.n	8011f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011f9a:	2300      	movs	r3, #0
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3710      	adds	r7, #16
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	695b      	ldr	r3, [r3, #20]
 8011fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fba:	d11b      	bne.n	8011ff4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011fc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2220      	movs	r2, #32
 8011fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fe0:	f043 0204 	orr.w	r2, r3, #4
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	e000      	b.n	8011ff6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011ff4:	2300      	movs	r3, #0
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	370c      	adds	r7, #12
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr

08012002 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012004:	b08f      	sub	sp, #60	; 0x3c
 8012006:	af0a      	add	r7, sp, #40	; 0x28
 8012008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d101      	bne.n	8012014 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8012010:	2301      	movs	r3, #1
 8012012:	e10f      	b.n	8012234 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8012020:	b2db      	uxtb	r3, r3
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f00b fe54 	bl	801dcdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2203      	movs	r2, #3
 8012038:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012044:	2b00      	cmp	r3, #0
 8012046:	d102      	bne.n	801204e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	4618      	mov	r0, r3
 8012054:	f004 ff55 	bl	8016f02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	603b      	str	r3, [r7, #0]
 801205e:	687e      	ldr	r6, [r7, #4]
 8012060:	466d      	mov	r5, sp
 8012062:	f106 0410 	add.w	r4, r6, #16
 8012066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801206c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801206e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012072:	e885 0003 	stmia.w	r5, {r0, r1}
 8012076:	1d33      	adds	r3, r6, #4
 8012078:	cb0e      	ldmia	r3, {r1, r2, r3}
 801207a:	6838      	ldr	r0, [r7, #0]
 801207c:	f004 fe2c 	bl	8016cd8 <USB_CoreInit>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d005      	beq.n	8012092 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2202      	movs	r2, #2
 801208a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 801208e:	2301      	movs	r3, #1
 8012090:	e0d0      	b.n	8012234 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	2100      	movs	r1, #0
 8012098:	4618      	mov	r0, r3
 801209a:	f004 ff43 	bl	8016f24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801209e:	2300      	movs	r3, #0
 80120a0:	73fb      	strb	r3, [r7, #15]
 80120a2:	e04a      	b.n	801213a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80120a4:	7bfa      	ldrb	r2, [r7, #15]
 80120a6:	6879      	ldr	r1, [r7, #4]
 80120a8:	4613      	mov	r3, r2
 80120aa:	00db      	lsls	r3, r3, #3
 80120ac:	4413      	add	r3, r2
 80120ae:	009b      	lsls	r3, r3, #2
 80120b0:	440b      	add	r3, r1
 80120b2:	333d      	adds	r3, #61	; 0x3d
 80120b4:	2201      	movs	r2, #1
 80120b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80120b8:	7bfa      	ldrb	r2, [r7, #15]
 80120ba:	6879      	ldr	r1, [r7, #4]
 80120bc:	4613      	mov	r3, r2
 80120be:	00db      	lsls	r3, r3, #3
 80120c0:	4413      	add	r3, r2
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	440b      	add	r3, r1
 80120c6:	333c      	adds	r3, #60	; 0x3c
 80120c8:	7bfa      	ldrb	r2, [r7, #15]
 80120ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80120cc:	7bfa      	ldrb	r2, [r7, #15]
 80120ce:	7bfb      	ldrb	r3, [r7, #15]
 80120d0:	b298      	uxth	r0, r3
 80120d2:	6879      	ldr	r1, [r7, #4]
 80120d4:	4613      	mov	r3, r2
 80120d6:	00db      	lsls	r3, r3, #3
 80120d8:	4413      	add	r3, r2
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	440b      	add	r3, r1
 80120de:	3344      	adds	r3, #68	; 0x44
 80120e0:	4602      	mov	r2, r0
 80120e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80120e4:	7bfa      	ldrb	r2, [r7, #15]
 80120e6:	6879      	ldr	r1, [r7, #4]
 80120e8:	4613      	mov	r3, r2
 80120ea:	00db      	lsls	r3, r3, #3
 80120ec:	4413      	add	r3, r2
 80120ee:	009b      	lsls	r3, r3, #2
 80120f0:	440b      	add	r3, r1
 80120f2:	3340      	adds	r3, #64	; 0x40
 80120f4:	2200      	movs	r2, #0
 80120f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80120f8:	7bfa      	ldrb	r2, [r7, #15]
 80120fa:	6879      	ldr	r1, [r7, #4]
 80120fc:	4613      	mov	r3, r2
 80120fe:	00db      	lsls	r3, r3, #3
 8012100:	4413      	add	r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	440b      	add	r3, r1
 8012106:	3348      	adds	r3, #72	; 0x48
 8012108:	2200      	movs	r2, #0
 801210a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801210c:	7bfa      	ldrb	r2, [r7, #15]
 801210e:	6879      	ldr	r1, [r7, #4]
 8012110:	4613      	mov	r3, r2
 8012112:	00db      	lsls	r3, r3, #3
 8012114:	4413      	add	r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	440b      	add	r3, r1
 801211a:	334c      	adds	r3, #76	; 0x4c
 801211c:	2200      	movs	r2, #0
 801211e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012120:	7bfa      	ldrb	r2, [r7, #15]
 8012122:	6879      	ldr	r1, [r7, #4]
 8012124:	4613      	mov	r3, r2
 8012126:	00db      	lsls	r3, r3, #3
 8012128:	4413      	add	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	440b      	add	r3, r1
 801212e:	3354      	adds	r3, #84	; 0x54
 8012130:	2200      	movs	r2, #0
 8012132:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012134:	7bfb      	ldrb	r3, [r7, #15]
 8012136:	3301      	adds	r3, #1
 8012138:	73fb      	strb	r3, [r7, #15]
 801213a:	7bfa      	ldrb	r2, [r7, #15]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	429a      	cmp	r2, r3
 8012142:	d3af      	bcc.n	80120a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012144:	2300      	movs	r3, #0
 8012146:	73fb      	strb	r3, [r7, #15]
 8012148:	e044      	b.n	80121d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801214a:	7bfa      	ldrb	r2, [r7, #15]
 801214c:	6879      	ldr	r1, [r7, #4]
 801214e:	4613      	mov	r3, r2
 8012150:	00db      	lsls	r3, r3, #3
 8012152:	4413      	add	r3, r2
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	440b      	add	r3, r1
 8012158:	f203 237d 	addw	r3, r3, #637	; 0x27d
 801215c:	2200      	movs	r2, #0
 801215e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8012160:	7bfa      	ldrb	r2, [r7, #15]
 8012162:	6879      	ldr	r1, [r7, #4]
 8012164:	4613      	mov	r3, r2
 8012166:	00db      	lsls	r3, r3, #3
 8012168:	4413      	add	r3, r2
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	440b      	add	r3, r1
 801216e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8012172:	7bfa      	ldrb	r2, [r7, #15]
 8012174:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8012176:	7bfa      	ldrb	r2, [r7, #15]
 8012178:	6879      	ldr	r1, [r7, #4]
 801217a:	4613      	mov	r3, r2
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	4413      	add	r3, r2
 8012180:	009b      	lsls	r3, r3, #2
 8012182:	440b      	add	r3, r1
 8012184:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8012188:	2200      	movs	r2, #0
 801218a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801218c:	7bfa      	ldrb	r2, [r7, #15]
 801218e:	6879      	ldr	r1, [r7, #4]
 8012190:	4613      	mov	r3, r2
 8012192:	00db      	lsls	r3, r3, #3
 8012194:	4413      	add	r3, r2
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	440b      	add	r3, r1
 801219a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801219e:	2200      	movs	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80121a2:	7bfa      	ldrb	r2, [r7, #15]
 80121a4:	6879      	ldr	r1, [r7, #4]
 80121a6:	4613      	mov	r3, r2
 80121a8:	00db      	lsls	r3, r3, #3
 80121aa:	4413      	add	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	440b      	add	r3, r1
 80121b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80121b4:	2200      	movs	r2, #0
 80121b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80121b8:	7bfa      	ldrb	r2, [r7, #15]
 80121ba:	6879      	ldr	r1, [r7, #4]
 80121bc:	4613      	mov	r3, r2
 80121be:	00db      	lsls	r3, r3, #3
 80121c0:	4413      	add	r3, r2
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	440b      	add	r3, r1
 80121c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80121ca:	2200      	movs	r2, #0
 80121cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80121ce:	7bfb      	ldrb	r3, [r7, #15]
 80121d0:	3301      	adds	r3, #1
 80121d2:	73fb      	strb	r3, [r7, #15]
 80121d4:	7bfa      	ldrb	r2, [r7, #15]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d3b5      	bcc.n	801214a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	603b      	str	r3, [r7, #0]
 80121e4:	687e      	ldr	r6, [r7, #4]
 80121e6:	466d      	mov	r5, sp
 80121e8:	f106 0410 	add.w	r4, r6, #16
 80121ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80121f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80121f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80121f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80121fc:	1d33      	adds	r3, r6, #4
 80121fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012200:	6838      	ldr	r0, [r7, #0]
 8012202:	f004 fedb 	bl	8016fbc <USB_DevInit>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d005      	beq.n	8012218 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2202      	movs	r2, #2
 8012210:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8012214:	2301      	movs	r3, #1
 8012216:	e00d      	b.n	8012234 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2201      	movs	r2, #1
 8012224:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4618      	mov	r0, r3
 801222e:	f006 f82a 	bl	8018286 <USB_DevDisconnect>

  return HAL_OK;
 8012232:	2300      	movs	r3, #0
}
 8012234:	4618      	mov	r0, r3
 8012236:	3714      	adds	r7, #20
 8012238:	46bd      	mov	sp, r7
 801223a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801223c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b084      	sub	sp, #16
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8012250:	2b01      	cmp	r3, #1
 8012252:	d101      	bne.n	8012258 <HAL_PCD_Start+0x1c>
 8012254:	2302      	movs	r3, #2
 8012256:	e020      	b.n	801229a <HAL_PCD_Start+0x5e>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2201      	movs	r2, #1
 801225c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012264:	2b01      	cmp	r3, #1
 8012266:	d109      	bne.n	801227c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801226c:	2b01      	cmp	r3, #1
 801226e:	d005      	beq.n	801227c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012274:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	f004 fe2d 	bl	8016ee0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	4618      	mov	r0, r3
 801228c:	f005 ffda 	bl	8018244 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2200      	movs	r2, #0
 8012294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8012298:	2300      	movs	r3, #0
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80122a2:	b590      	push	{r4, r7, lr}
 80122a4:	b08d      	sub	sp, #52	; 0x34
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122b0:	6a3b      	ldr	r3, [r7, #32]
 80122b2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	4618      	mov	r0, r3
 80122ba:	f006 f898 	bl	80183ee <USB_GetMode>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f040 848a 	bne.w	8012bda <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4618      	mov	r0, r3
 80122cc:	f005 fffc 	bl	80182c8 <USB_ReadInterrupts>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f000 8480 	beq.w	8012bd8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	0a1b      	lsrs	r3, r3, #8
 80122e2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4618      	mov	r0, r3
 80122f2:	f005 ffe9 	bl	80182c8 <USB_ReadInterrupts>
 80122f6:	4603      	mov	r3, r0
 80122f8:	f003 0302 	and.w	r3, r3, #2
 80122fc:	2b02      	cmp	r3, #2
 80122fe:	d107      	bne.n	8012310 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	695a      	ldr	r2, [r3, #20]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	f002 0202 	and.w	r2, r2, #2
 801230e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4618      	mov	r0, r3
 8012316:	f005 ffd7 	bl	80182c8 <USB_ReadInterrupts>
 801231a:	4603      	mov	r3, r0
 801231c:	f003 0310 	and.w	r3, r3, #16
 8012320:	2b10      	cmp	r3, #16
 8012322:	d161      	bne.n	80123e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	699a      	ldr	r2, [r3, #24]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f022 0210 	bic.w	r2, r2, #16
 8012332:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8012334:	6a3b      	ldr	r3, [r7, #32]
 8012336:	6a1b      	ldr	r3, [r3, #32]
 8012338:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	f003 020f 	and.w	r2, r3, #15
 8012340:	4613      	mov	r3, r2
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	4413      	add	r3, r2
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	4413      	add	r3, r2
 8012350:	3304      	adds	r3, #4
 8012352:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	0c5b      	lsrs	r3, r3, #17
 8012358:	f003 030f 	and.w	r3, r3, #15
 801235c:	2b02      	cmp	r3, #2
 801235e:	d124      	bne.n	80123aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8012360:	69ba      	ldr	r2, [r7, #24]
 8012362:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8012366:	4013      	ands	r3, r2
 8012368:	2b00      	cmp	r3, #0
 801236a:	d035      	beq.n	80123d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8012370:	69bb      	ldr	r3, [r7, #24]
 8012372:	091b      	lsrs	r3, r3, #4
 8012374:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8012376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801237a:	b29b      	uxth	r3, r3
 801237c:	461a      	mov	r2, r3
 801237e:	6a38      	ldr	r0, [r7, #32]
 8012380:	f005 fe0e 	bl	8017fa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	691a      	ldr	r2, [r3, #16]
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	091b      	lsrs	r3, r3, #4
 801238c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012390:	441a      	add	r2, r3
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	6a1a      	ldr	r2, [r3, #32]
 801239a:	69bb      	ldr	r3, [r7, #24]
 801239c:	091b      	lsrs	r3, r3, #4
 801239e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80123a2:	441a      	add	r2, r3
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	621a      	str	r2, [r3, #32]
 80123a8:	e016      	b.n	80123d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80123aa:	69bb      	ldr	r3, [r7, #24]
 80123ac:	0c5b      	lsrs	r3, r3, #17
 80123ae:	f003 030f 	and.w	r3, r3, #15
 80123b2:	2b06      	cmp	r3, #6
 80123b4:	d110      	bne.n	80123d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80123bc:	2208      	movs	r2, #8
 80123be:	4619      	mov	r1, r3
 80123c0:	6a38      	ldr	r0, [r7, #32]
 80123c2:	f005 fded 	bl	8017fa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	6a1a      	ldr	r2, [r3, #32]
 80123ca:	69bb      	ldr	r3, [r7, #24]
 80123cc:	091b      	lsrs	r3, r3, #4
 80123ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80123d2:	441a      	add	r2, r3
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	699a      	ldr	r2, [r3, #24]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	f042 0210 	orr.w	r2, r2, #16
 80123e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4618      	mov	r0, r3
 80123ee:	f005 ff6b 	bl	80182c8 <USB_ReadInterrupts>
 80123f2:	4603      	mov	r3, r0
 80123f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80123f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80123fc:	f040 80a7 	bne.w	801254e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8012400:	2300      	movs	r3, #0
 8012402:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4618      	mov	r0, r3
 801240a:	f005 ff70 	bl	80182ee <USB_ReadDevAllOutEpInterrupt>
 801240e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8012410:	e099      	b.n	8012546 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	f003 0301 	and.w	r3, r3, #1
 8012418:	2b00      	cmp	r3, #0
 801241a:	f000 808e 	beq.w	801253a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012424:	b2d2      	uxtb	r2, r2
 8012426:	4611      	mov	r1, r2
 8012428:	4618      	mov	r0, r3
 801242a:	f005 ff94 	bl	8018356 <USB_ReadDevOutEPInterrupt>
 801242e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	f003 0301 	and.w	r3, r3, #1
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00c      	beq.n	8012454 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	015a      	lsls	r2, r3, #5
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	4413      	add	r3, r2
 8012442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012446:	461a      	mov	r2, r3
 8012448:	2301      	movs	r3, #1
 801244a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801244c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f000 fec2 	bl	80131d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	f003 0308 	and.w	r3, r3, #8
 801245a:	2b00      	cmp	r3, #0
 801245c:	d00c      	beq.n	8012478 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	015a      	lsls	r2, r3, #5
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	4413      	add	r3, r2
 8012466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801246a:	461a      	mov	r2, r3
 801246c:	2308      	movs	r3, #8
 801246e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8012470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f000 ff98 	bl	80133a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	f003 0310 	and.w	r3, r3, #16
 801247e:	2b00      	cmp	r3, #0
 8012480:	d008      	beq.n	8012494 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8012482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012484:	015a      	lsls	r2, r3, #5
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	4413      	add	r3, r2
 801248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801248e:	461a      	mov	r2, r3
 8012490:	2310      	movs	r3, #16
 8012492:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	f003 0302 	and.w	r3, r3, #2
 801249a:	2b00      	cmp	r3, #0
 801249c:	d030      	beq.n	8012500 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 801249e:	6a3b      	ldr	r3, [r7, #32]
 80124a0:	695b      	ldr	r3, [r3, #20]
 80124a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124a6:	2b80      	cmp	r3, #128	; 0x80
 80124a8:	d109      	bne.n	80124be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	69fa      	ldr	r2, [r7, #28]
 80124b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80124b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80124bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80124be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124c0:	4613      	mov	r3, r2
 80124c2:	00db      	lsls	r3, r3, #3
 80124c4:	4413      	add	r3, r2
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	4413      	add	r3, r2
 80124d0:	3304      	adds	r3, #4
 80124d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	78db      	ldrb	r3, [r3, #3]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d108      	bne.n	80124ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	2200      	movs	r2, #0
 80124e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80124e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	4619      	mov	r1, r3
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f00b fd09 	bl	801df00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	015a      	lsls	r2, r3, #5
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	4413      	add	r3, r2
 80124f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124fa:	461a      	mov	r2, r3
 80124fc:	2302      	movs	r3, #2
 80124fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	f003 0320 	and.w	r3, r3, #32
 8012506:	2b00      	cmp	r3, #0
 8012508:	d008      	beq.n	801251c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801250c:	015a      	lsls	r2, r3, #5
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	4413      	add	r3, r2
 8012512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012516:	461a      	mov	r2, r3
 8012518:	2320      	movs	r3, #32
 801251a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012522:	2b00      	cmp	r3, #0
 8012524:	d009      	beq.n	801253a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8012526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012528:	015a      	lsls	r2, r3, #5
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	4413      	add	r3, r2
 801252e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012532:	461a      	mov	r2, r3
 8012534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012538:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253c:	3301      	adds	r3, #1
 801253e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8012540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012542:	085b      	lsrs	r3, r3, #1
 8012544:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8012546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012548:	2b00      	cmp	r3, #0
 801254a:	f47f af62 	bne.w	8012412 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	4618      	mov	r0, r3
 8012554:	f005 feb8 	bl	80182c8 <USB_ReadInterrupts>
 8012558:	4603      	mov	r3, r0
 801255a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801255e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012562:	f040 80db 	bne.w	801271c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	4618      	mov	r0, r3
 801256c:	f005 fed9 	bl	8018322 <USB_ReadDevAllInEpInterrupt>
 8012570:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8012572:	2300      	movs	r3, #0
 8012574:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8012576:	e0cd      	b.n	8012714 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8012578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257a:	f003 0301 	and.w	r3, r3, #1
 801257e:	2b00      	cmp	r3, #0
 8012580:	f000 80c2 	beq.w	8012708 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801258a:	b2d2      	uxtb	r2, r2
 801258c:	4611      	mov	r1, r2
 801258e:	4618      	mov	r0, r3
 8012590:	f005 feff 	bl	8018392 <USB_ReadDevInEPInterrupt>
 8012594:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	2b00      	cmp	r3, #0
 801259e:	d057      	beq.n	8012650 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80125a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a2:	f003 030f 	and.w	r3, r3, #15
 80125a6:	2201      	movs	r2, #1
 80125a8:	fa02 f303 	lsl.w	r3, r2, r3
 80125ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	43db      	mvns	r3, r3
 80125ba:	69f9      	ldr	r1, [r7, #28]
 80125bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125c0:	4013      	ands	r3, r2
 80125c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80125c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c6:	015a      	lsls	r2, r3, #5
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	4413      	add	r3, r2
 80125cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125d0:	461a      	mov	r2, r3
 80125d2:	2301      	movs	r3, #1
 80125d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	691b      	ldr	r3, [r3, #16]
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d132      	bne.n	8012644 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80125de:	6879      	ldr	r1, [r7, #4]
 80125e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125e2:	4613      	mov	r3, r2
 80125e4:	00db      	lsls	r3, r3, #3
 80125e6:	4413      	add	r3, r2
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	440b      	add	r3, r1
 80125ec:	334c      	adds	r3, #76	; 0x4c
 80125ee:	6819      	ldr	r1, [r3, #0]
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125f4:	4613      	mov	r3, r2
 80125f6:	00db      	lsls	r3, r3, #3
 80125f8:	4413      	add	r3, r2
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	4403      	add	r3, r0
 80125fe:	3348      	adds	r3, #72	; 0x48
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	4419      	add	r1, r3
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012608:	4613      	mov	r3, r2
 801260a:	00db      	lsls	r3, r3, #3
 801260c:	4413      	add	r3, r2
 801260e:	009b      	lsls	r3, r3, #2
 8012610:	4403      	add	r3, r0
 8012612:	334c      	adds	r3, #76	; 0x4c
 8012614:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	2b00      	cmp	r3, #0
 801261a:	d113      	bne.n	8012644 <HAL_PCD_IRQHandler+0x3a2>
 801261c:	6879      	ldr	r1, [r7, #4]
 801261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012620:	4613      	mov	r3, r2
 8012622:	00db      	lsls	r3, r3, #3
 8012624:	4413      	add	r3, r2
 8012626:	009b      	lsls	r3, r3, #2
 8012628:	440b      	add	r3, r1
 801262a:	3354      	adds	r3, #84	; 0x54
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d108      	bne.n	8012644 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6818      	ldr	r0, [r3, #0]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801263c:	461a      	mov	r2, r3
 801263e:	2101      	movs	r1, #1
 8012640:	f005 ff06 	bl	8018450 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	b2db      	uxtb	r3, r3
 8012648:	4619      	mov	r1, r3
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f00b fbc7 	bl	801ddde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	f003 0308 	and.w	r3, r3, #8
 8012656:	2b00      	cmp	r3, #0
 8012658:	d008      	beq.n	801266c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265c:	015a      	lsls	r2, r3, #5
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	4413      	add	r3, r2
 8012662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012666:	461a      	mov	r2, r3
 8012668:	2308      	movs	r3, #8
 801266a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	f003 0310 	and.w	r3, r3, #16
 8012672:	2b00      	cmp	r3, #0
 8012674:	d008      	beq.n	8012688 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8012676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012678:	015a      	lsls	r2, r3, #5
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	4413      	add	r3, r2
 801267e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012682:	461a      	mov	r2, r3
 8012684:	2310      	movs	r3, #16
 8012686:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801268e:	2b00      	cmp	r3, #0
 8012690:	d008      	beq.n	80126a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8012692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012694:	015a      	lsls	r2, r3, #5
 8012696:	69fb      	ldr	r3, [r7, #28]
 8012698:	4413      	add	r3, r2
 801269a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801269e:	461a      	mov	r2, r3
 80126a0:	2340      	movs	r3, #64	; 0x40
 80126a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	f003 0302 	and.w	r3, r3, #2
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d023      	beq.n	80126f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80126ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126b0:	6a38      	ldr	r0, [r7, #32]
 80126b2:	f004 fde7 	bl	8017284 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80126b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126b8:	4613      	mov	r3, r2
 80126ba:	00db      	lsls	r3, r3, #3
 80126bc:	4413      	add	r3, r2
 80126be:	009b      	lsls	r3, r3, #2
 80126c0:	3338      	adds	r3, #56	; 0x38
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	4413      	add	r3, r2
 80126c6:	3304      	adds	r3, #4
 80126c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	78db      	ldrb	r3, [r3, #3]
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d108      	bne.n	80126e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	2200      	movs	r2, #0
 80126d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	4619      	mov	r1, r3
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f00b fc20 	bl	801df24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	015a      	lsls	r2, r3, #5
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	4413      	add	r3, r2
 80126ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126f0:	461a      	mov	r2, r3
 80126f2:	2302      	movs	r3, #2
 80126f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d003      	beq.n	8012708 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8012700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f000 fcdb 	bl	80130be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8012708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270a:	3301      	adds	r3, #1
 801270c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012710:	085b      	lsrs	r3, r3, #1
 8012712:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8012714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012716:	2b00      	cmp	r3, #0
 8012718:	f47f af2e 	bne.w	8012578 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	4618      	mov	r0, r3
 8012722:	f005 fdd1 	bl	80182c8 <USB_ReadInterrupts>
 8012726:	4603      	mov	r3, r0
 8012728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801272c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012730:	d122      	bne.n	8012778 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	69fa      	ldr	r2, [r7, #28]
 801273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012740:	f023 0301 	bic.w	r3, r3, #1
 8012744:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801274c:	2b01      	cmp	r3, #1
 801274e:	d108      	bne.n	8012762 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012758:	2100      	movs	r1, #0
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 fec2 	bl	80134e4 <HAL_PCDEx_LPM_Callback>
 8012760:	e002      	b.n	8012768 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f00b fbb8 	bl	801ded8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	695a      	ldr	r2, [r3, #20]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8012776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	4618      	mov	r0, r3
 801277e:	f005 fda3 	bl	80182c8 <USB_ReadInterrupts>
 8012782:	4603      	mov	r3, r0
 8012784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801278c:	d112      	bne.n	80127b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	f003 0301 	and.w	r3, r3, #1
 801279a:	2b01      	cmp	r3, #1
 801279c:	d102      	bne.n	80127a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f00b fb6e 	bl	801de80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	695a      	ldr	r2, [r3, #20]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80127b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4618      	mov	r0, r3
 80127ba:	f005 fd85 	bl	80182c8 <USB_ReadInterrupts>
 80127be:	4603      	mov	r3, r0
 80127c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80127c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80127c8:	f040 80b7 	bne.w	801293a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	69fa      	ldr	r2, [r7, #28]
 80127d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80127da:	f023 0301 	bic.w	r3, r3, #1
 80127de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2110      	movs	r1, #16
 80127e6:	4618      	mov	r0, r3
 80127e8:	f004 fd4c 	bl	8017284 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80127ec:	2300      	movs	r3, #0
 80127ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127f0:	e046      	b.n	8012880 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80127f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f4:	015a      	lsls	r2, r3, #5
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	4413      	add	r3, r2
 80127fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127fe:	461a      	mov	r2, r3
 8012800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012804:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	015a      	lsls	r2, r3, #5
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	4413      	add	r3, r2
 801280e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012816:	0151      	lsls	r1, r2, #5
 8012818:	69fa      	ldr	r2, [r7, #28]
 801281a:	440a      	add	r2, r1
 801281c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8012826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012828:	015a      	lsls	r2, r3, #5
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	4413      	add	r3, r2
 801282e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012832:	461a      	mov	r2, r3
 8012834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012838:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283c:	015a      	lsls	r2, r3, #5
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	4413      	add	r3, r2
 8012842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801284a:	0151      	lsls	r1, r2, #5
 801284c:	69fa      	ldr	r2, [r7, #28]
 801284e:	440a      	add	r2, r1
 8012850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012854:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012858:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801285c:	015a      	lsls	r2, r3, #5
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	4413      	add	r3, r2
 8012862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801286a:	0151      	lsls	r1, r2, #5
 801286c:	69fa      	ldr	r2, [r7, #28]
 801286e:	440a      	add	r2, r1
 8012870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012878:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287c:	3301      	adds	r3, #1
 801287e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012886:	429a      	cmp	r2, r3
 8012888:	d3b3      	bcc.n	80127f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801288a:	69fb      	ldr	r3, [r7, #28]
 801288c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012890:	69db      	ldr	r3, [r3, #28]
 8012892:	69fa      	ldr	r2, [r7, #28]
 8012894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012898:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801289c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d016      	beq.n	80128d4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128b0:	69fa      	ldr	r2, [r7, #28]
 80128b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80128b6:	f043 030b 	orr.w	r3, r3, #11
 80128ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c6:	69fa      	ldr	r2, [r7, #28]
 80128c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80128cc:	f043 030b 	orr.w	r3, r3, #11
 80128d0:	6453      	str	r3, [r2, #68]	; 0x44
 80128d2:	e015      	b.n	8012900 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128da:	695b      	ldr	r3, [r3, #20]
 80128dc:	69fa      	ldr	r2, [r7, #28]
 80128de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80128e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80128e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80128ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128f2:	691b      	ldr	r3, [r3, #16]
 80128f4:	69fa      	ldr	r2, [r7, #28]
 80128f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80128fa:	f043 030b 	orr.w	r3, r3, #11
 80128fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	69fa      	ldr	r2, [r7, #28]
 801290a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801290e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012912:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6818      	ldr	r0, [r3, #0]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	691b      	ldr	r3, [r3, #16]
 801291c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012924:	461a      	mov	r2, r3
 8012926:	f005 fd93 	bl	8018450 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	695a      	ldr	r2, [r3, #20]
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8012938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4618      	mov	r0, r3
 8012940:	f005 fcc2 	bl	80182c8 <USB_ReadInterrupts>
 8012944:	4603      	mov	r3, r0
 8012946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801294a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801294e:	d124      	bne.n	801299a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	4618      	mov	r0, r3
 8012956:	f005 fd58 	bl	801840a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	4618      	mov	r0, r3
 8012960:	f004 fd0d 	bl	801737e <USB_GetDevSpeed>
 8012964:	4603      	mov	r3, r0
 8012966:	461a      	mov	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681c      	ldr	r4, [r3, #0]
 8012970:	f001 f9e8 	bl	8013d44 <HAL_RCC_GetHCLKFreq>
 8012974:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801297a:	b2db      	uxtb	r3, r3
 801297c:	461a      	mov	r2, r3
 801297e:	4620      	mov	r0, r4
 8012980:	f004 fa0c 	bl	8016d9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f00b fa52 	bl	801de2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	695a      	ldr	r2, [r3, #20]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8012998:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4618      	mov	r0, r3
 80129a0:	f005 fc92 	bl	80182c8 <USB_ReadInterrupts>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f003 0308 	and.w	r3, r3, #8
 80129aa:	2b08      	cmp	r3, #8
 80129ac:	d10a      	bne.n	80129c4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f00b fa2f 	bl	801de12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	695a      	ldr	r2, [r3, #20]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	f002 0208 	and.w	r2, r2, #8
 80129c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f005 fc7d 	bl	80182c8 <USB_ReadInterrupts>
 80129ce:	4603      	mov	r3, r0
 80129d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129d4:	2b80      	cmp	r3, #128	; 0x80
 80129d6:	d122      	bne.n	8012a1e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80129d8:	6a3b      	ldr	r3, [r7, #32]
 80129da:	699b      	ldr	r3, [r3, #24]
 80129dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80129e0:	6a3b      	ldr	r3, [r7, #32]
 80129e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80129e4:	2301      	movs	r3, #1
 80129e6:	627b      	str	r3, [r7, #36]	; 0x24
 80129e8:	e014      	b.n	8012a14 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80129ea:	6879      	ldr	r1, [r7, #4]
 80129ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129ee:	4613      	mov	r3, r2
 80129f0:	00db      	lsls	r3, r3, #3
 80129f2:	4413      	add	r3, r2
 80129f4:	009b      	lsls	r3, r3, #2
 80129f6:	440b      	add	r3, r1
 80129f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d105      	bne.n	8012a0e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8012a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	4619      	mov	r1, r3
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f000 fb27 	bl	801305c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a10:	3301      	adds	r3, #1
 8012a12:	627b      	str	r3, [r7, #36]	; 0x24
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d3e5      	bcc.n	80129ea <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f005 fc50 	bl	80182c8 <USB_ReadInterrupts>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a32:	d13b      	bne.n	8012aac <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012a34:	2301      	movs	r3, #1
 8012a36:	627b      	str	r3, [r7, #36]	; 0x24
 8012a38:	e02b      	b.n	8012a92 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3c:	015a      	lsls	r2, r3, #5
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	4413      	add	r3, r2
 8012a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012a4a:	6879      	ldr	r1, [r7, #4]
 8012a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a4e:	4613      	mov	r3, r2
 8012a50:	00db      	lsls	r3, r3, #3
 8012a52:	4413      	add	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	440b      	add	r3, r1
 8012a58:	3340      	adds	r3, #64	; 0x40
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d115      	bne.n	8012a8c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8012a60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	da12      	bge.n	8012a8c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8012a66:	6879      	ldr	r1, [r7, #4]
 8012a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	00db      	lsls	r3, r3, #3
 8012a6e:	4413      	add	r3, r2
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	440b      	add	r3, r1
 8012a74:	333f      	adds	r3, #63	; 0x3f
 8012a76:	2201      	movs	r2, #1
 8012a78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8012a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	4619      	mov	r1, r3
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f000 fae8 	bl	801305c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8e:	3301      	adds	r3, #1
 8012a90:	627b      	str	r3, [r7, #36]	; 0x24
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d3ce      	bcc.n	8012a3a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	695a      	ldr	r2, [r3, #20]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8012aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f005 fc09 	bl	80182c8 <USB_ReadInterrupts>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012ac0:	d155      	bne.n	8012b6e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8012ac6:	e045      	b.n	8012b54 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aca:	015a      	lsls	r2, r3, #5
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	4413      	add	r3, r2
 8012ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012ad8:	6879      	ldr	r1, [r7, #4]
 8012ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012adc:	4613      	mov	r3, r2
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	4413      	add	r3, r2
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	440b      	add	r3, r1
 8012ae6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d12e      	bne.n	8012b4e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012af0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	da2b      	bge.n	8012b4e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8012b02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d121      	bne.n	8012b4e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8012b0a:	6879      	ldr	r1, [r7, #4]
 8012b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b0e:	4613      	mov	r3, r2
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	4413      	add	r3, r2
 8012b14:	009b      	lsls	r3, r3, #2
 8012b16:	440b      	add	r3, r1
 8012b18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8012b20:	6a3b      	ldr	r3, [r7, #32]
 8012b22:	699b      	ldr	r3, [r3, #24]
 8012b24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012b28:	6a3b      	ldr	r3, [r7, #32]
 8012b2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8012b2c:	6a3b      	ldr	r3, [r7, #32]
 8012b2e:	695b      	ldr	r3, [r3, #20]
 8012b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d10a      	bne.n	8012b4e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	69fa      	ldr	r2, [r7, #28]
 8012b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012b4a:	6053      	str	r3, [r2, #4]
            break;
 8012b4c:	e007      	b.n	8012b5e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b50:	3301      	adds	r3, #1
 8012b52:	627b      	str	r3, [r7, #36]	; 0x24
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d3b4      	bcc.n	8012ac8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	695a      	ldr	r2, [r3, #20]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8012b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f005 fba8 	bl	80182c8 <USB_ReadInterrupts>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b82:	d10a      	bne.n	8012b9a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f00b f9df 	bl	801df48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	695a      	ldr	r2, [r3, #20]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8012b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f005 fb92 	bl	80182c8 <USB_ReadInterrupts>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	f003 0304 	and.w	r3, r3, #4
 8012baa:	2b04      	cmp	r3, #4
 8012bac:	d115      	bne.n	8012bda <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	f003 0304 	and.w	r3, r3, #4
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f00b f9cf 	bl	801df64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	6859      	ldr	r1, [r3, #4]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	69ba      	ldr	r2, [r7, #24]
 8012bd2:	430a      	orrs	r2, r1
 8012bd4:	605a      	str	r2, [r3, #4]
 8012bd6:	e000      	b.n	8012bda <HAL_PCD_IRQHandler+0x938>
      return;
 8012bd8:	bf00      	nop
    }
  }
}
 8012bda:	3734      	adds	r7, #52	; 0x34
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd90      	pop	{r4, r7, pc}

08012be0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	460b      	mov	r3, r1
 8012bea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d101      	bne.n	8012bfa <HAL_PCD_SetAddress+0x1a>
 8012bf6:	2302      	movs	r3, #2
 8012bf8:	e013      	b.n	8012c22 <HAL_PCD_SetAddress+0x42>
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	78fa      	ldrb	r2, [r7, #3]
 8012c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	78fa      	ldrb	r2, [r7, #3]
 8012c10:	4611      	mov	r1, r2
 8012c12:	4618      	mov	r0, r3
 8012c14:	f005 faf0 	bl	80181f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8012c20:	2300      	movs	r3, #0
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3708      	adds	r7, #8
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}

08012c2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b084      	sub	sp, #16
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	6078      	str	r0, [r7, #4]
 8012c32:	4608      	mov	r0, r1
 8012c34:	4611      	mov	r1, r2
 8012c36:	461a      	mov	r2, r3
 8012c38:	4603      	mov	r3, r0
 8012c3a:	70fb      	strb	r3, [r7, #3]
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	803b      	strh	r3, [r7, #0]
 8012c40:	4613      	mov	r3, r2
 8012c42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012c44:	2300      	movs	r3, #0
 8012c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	da0f      	bge.n	8012c70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012c50:	78fb      	ldrb	r3, [r7, #3]
 8012c52:	f003 020f 	and.w	r2, r3, #15
 8012c56:	4613      	mov	r3, r2
 8012c58:	00db      	lsls	r3, r3, #3
 8012c5a:	4413      	add	r3, r2
 8012c5c:	009b      	lsls	r3, r3, #2
 8012c5e:	3338      	adds	r3, #56	; 0x38
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	4413      	add	r3, r2
 8012c64:	3304      	adds	r3, #4
 8012c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	705a      	strb	r2, [r3, #1]
 8012c6e:	e00f      	b.n	8012c90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012c70:	78fb      	ldrb	r3, [r7, #3]
 8012c72:	f003 020f 	and.w	r2, r3, #15
 8012c76:	4613      	mov	r3, r2
 8012c78:	00db      	lsls	r3, r3, #3
 8012c7a:	4413      	add	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8012c82:	687a      	ldr	r2, [r7, #4]
 8012c84:	4413      	add	r3, r2
 8012c86:	3304      	adds	r3, #4
 8012c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012c90:	78fb      	ldrb	r3, [r7, #3]
 8012c92:	f003 030f 	and.w	r3, r3, #15
 8012c96:	b2da      	uxtb	r2, r3
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012c9c:	883a      	ldrh	r2, [r7, #0]
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	78ba      	ldrb	r2, [r7, #2]
 8012ca6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	785b      	ldrb	r3, [r3, #1]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d004      	beq.n	8012cba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012cba:	78bb      	ldrb	r3, [r7, #2]
 8012cbc:	2b02      	cmp	r3, #2
 8012cbe:	d102      	bne.n	8012cc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d101      	bne.n	8012cd4 <HAL_PCD_EP_Open+0xaa>
 8012cd0:	2302      	movs	r3, #2
 8012cd2:	e00e      	b.n	8012cf2 <HAL_PCD_EP_Open+0xc8>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	68f9      	ldr	r1, [r7, #12]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f004 fb70 	bl	80173c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8012cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3710      	adds	r7, #16
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}

08012cfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b084      	sub	sp, #16
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
 8012d02:	460b      	mov	r3, r1
 8012d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	da0f      	bge.n	8012d2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012d0e:	78fb      	ldrb	r3, [r7, #3]
 8012d10:	f003 020f 	and.w	r2, r3, #15
 8012d14:	4613      	mov	r3, r2
 8012d16:	00db      	lsls	r3, r3, #3
 8012d18:	4413      	add	r3, r2
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	3338      	adds	r3, #56	; 0x38
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	4413      	add	r3, r2
 8012d22:	3304      	adds	r3, #4
 8012d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2201      	movs	r2, #1
 8012d2a:	705a      	strb	r2, [r3, #1]
 8012d2c:	e00f      	b.n	8012d4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012d2e:	78fb      	ldrb	r3, [r7, #3]
 8012d30:	f003 020f 	and.w	r2, r3, #15
 8012d34:	4613      	mov	r3, r2
 8012d36:	00db      	lsls	r3, r3, #3
 8012d38:	4413      	add	r3, r2
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	4413      	add	r3, r2
 8012d44:	3304      	adds	r3, #4
 8012d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8012d4e:	78fb      	ldrb	r3, [r7, #3]
 8012d50:	f003 030f 	and.w	r3, r3, #15
 8012d54:	b2da      	uxtb	r2, r3
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d101      	bne.n	8012d68 <HAL_PCD_EP_Close+0x6e>
 8012d64:	2302      	movs	r3, #2
 8012d66:	e00e      	b.n	8012d86 <HAL_PCD_EP_Close+0x8c>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	68f9      	ldr	r1, [r7, #12]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f004 fbae 	bl	80174d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8012d84:	2300      	movs	r3, #0
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3710      	adds	r7, #16
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b086      	sub	sp, #24
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	60f8      	str	r0, [r7, #12]
 8012d96:	607a      	str	r2, [r7, #4]
 8012d98:	603b      	str	r3, [r7, #0]
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012d9e:	7afb      	ldrb	r3, [r7, #11]
 8012da0:	f003 020f 	and.w	r2, r3, #15
 8012da4:	4613      	mov	r3, r2
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	4413      	add	r3, r2
 8012daa:	009b      	lsls	r3, r3, #2
 8012dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8012db0:	68fa      	ldr	r2, [r7, #12]
 8012db2:	4413      	add	r3, r2
 8012db4:	3304      	adds	r3, #4
 8012db6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	687a      	ldr	r2, [r7, #4]
 8012dbc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	683a      	ldr	r2, [r7, #0]
 8012dc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012dd0:	7afb      	ldrb	r3, [r7, #11]
 8012dd2:	f003 030f 	and.w	r3, r3, #15
 8012dd6:	b2da      	uxtb	r2, r3
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	691b      	ldr	r3, [r3, #16]
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d102      	bne.n	8012dea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012dea:	7afb      	ldrb	r3, [r7, #11]
 8012dec:	f003 030f 	and.w	r3, r3, #15
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d109      	bne.n	8012e08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6818      	ldr	r0, [r3, #0]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	691b      	ldr	r3, [r3, #16]
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	461a      	mov	r2, r3
 8012e00:	6979      	ldr	r1, [r7, #20]
 8012e02:	f004 fe8d 	bl	8017b20 <USB_EP0StartXfer>
 8012e06:	e008      	b.n	8012e1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	6818      	ldr	r0, [r3, #0]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	461a      	mov	r2, r3
 8012e14:	6979      	ldr	r1, [r7, #20]
 8012e16:	f004 fc3b 	bl	8017690 <USB_EPStartXfer>
  }

  return HAL_OK;
 8012e1a:	2300      	movs	r3, #0
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3718      	adds	r7, #24
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012e30:	78fb      	ldrb	r3, [r7, #3]
 8012e32:	f003 020f 	and.w	r2, r3, #15
 8012e36:	6879      	ldr	r1, [r7, #4]
 8012e38:	4613      	mov	r3, r2
 8012e3a:	00db      	lsls	r3, r3, #3
 8012e3c:	4413      	add	r3, r2
 8012e3e:	009b      	lsls	r3, r3, #2
 8012e40:	440b      	add	r3, r1
 8012e42:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8012e46:	681b      	ldr	r3, [r3, #0]
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	370c      	adds	r7, #12
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr

08012e54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b086      	sub	sp, #24
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	607a      	str	r2, [r7, #4]
 8012e5e:	603b      	str	r3, [r7, #0]
 8012e60:	460b      	mov	r3, r1
 8012e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012e64:	7afb      	ldrb	r3, [r7, #11]
 8012e66:	f003 020f 	and.w	r2, r3, #15
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	00db      	lsls	r3, r3, #3
 8012e6e:	4413      	add	r3, r2
 8012e70:	009b      	lsls	r3, r3, #2
 8012e72:	3338      	adds	r3, #56	; 0x38
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	4413      	add	r3, r2
 8012e78:	3304      	adds	r3, #4
 8012e7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	683a      	ldr	r2, [r7, #0]
 8012e86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	2201      	movs	r2, #1
 8012e92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012e94:	7afb      	ldrb	r3, [r7, #11]
 8012e96:	f003 030f 	and.w	r3, r3, #15
 8012e9a:	b2da      	uxtb	r2, r3
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	691b      	ldr	r3, [r3, #16]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d102      	bne.n	8012eae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012eae:	7afb      	ldrb	r3, [r7, #11]
 8012eb0:	f003 030f 	and.w	r3, r3, #15
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d109      	bne.n	8012ecc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	6818      	ldr	r0, [r3, #0]
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	691b      	ldr	r3, [r3, #16]
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	6979      	ldr	r1, [r7, #20]
 8012ec6:	f004 fe2b 	bl	8017b20 <USB_EP0StartXfer>
 8012eca:	e008      	b.n	8012ede <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6818      	ldr	r0, [r3, #0]
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	691b      	ldr	r3, [r3, #16]
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	6979      	ldr	r1, [r7, #20]
 8012eda:	f004 fbd9 	bl	8017690 <USB_EPStartXfer>
  }

  return HAL_OK;
 8012ede:	2300      	movs	r3, #0
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3718      	adds	r7, #24
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}

08012ee8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	460b      	mov	r3, r1
 8012ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012ef4:	78fb      	ldrb	r3, [r7, #3]
 8012ef6:	f003 020f 	and.w	r2, r3, #15
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	685b      	ldr	r3, [r3, #4]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d901      	bls.n	8012f06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8012f02:	2301      	movs	r3, #1
 8012f04:	e050      	b.n	8012fa8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	da0f      	bge.n	8012f2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012f0e:	78fb      	ldrb	r3, [r7, #3]
 8012f10:	f003 020f 	and.w	r2, r3, #15
 8012f14:	4613      	mov	r3, r2
 8012f16:	00db      	lsls	r3, r3, #3
 8012f18:	4413      	add	r3, r2
 8012f1a:	009b      	lsls	r3, r3, #2
 8012f1c:	3338      	adds	r3, #56	; 0x38
 8012f1e:	687a      	ldr	r2, [r7, #4]
 8012f20:	4413      	add	r3, r2
 8012f22:	3304      	adds	r3, #4
 8012f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2201      	movs	r2, #1
 8012f2a:	705a      	strb	r2, [r3, #1]
 8012f2c:	e00d      	b.n	8012f4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012f2e:	78fa      	ldrb	r2, [r7, #3]
 8012f30:	4613      	mov	r3, r2
 8012f32:	00db      	lsls	r3, r3, #3
 8012f34:	4413      	add	r3, r2
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	4413      	add	r3, r2
 8012f40:	3304      	adds	r3, #4
 8012f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2200      	movs	r2, #0
 8012f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2201      	movs	r2, #1
 8012f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012f50:	78fb      	ldrb	r3, [r7, #3]
 8012f52:	f003 030f 	and.w	r3, r3, #15
 8012f56:	b2da      	uxtb	r2, r3
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d101      	bne.n	8012f6a <HAL_PCD_EP_SetStall+0x82>
 8012f66:	2302      	movs	r3, #2
 8012f68:	e01e      	b.n	8012fa8 <HAL_PCD_EP_SetStall+0xc0>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	68f9      	ldr	r1, [r7, #12]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f005 f869 	bl	8018050 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012f7e:	78fb      	ldrb	r3, [r7, #3]
 8012f80:	f003 030f 	and.w	r3, r3, #15
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10a      	bne.n	8012f9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6818      	ldr	r0, [r3, #0]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	691b      	ldr	r3, [r3, #16]
 8012f90:	b2d9      	uxtb	r1, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012f98:	461a      	mov	r2, r3
 8012f9a:	f005 fa59 	bl	8018450 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8012fa6:	2300      	movs	r3, #0
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3710      	adds	r7, #16
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}

08012fb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012fbc:	78fb      	ldrb	r3, [r7, #3]
 8012fbe:	f003 020f 	and.w	r2, r3, #15
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d901      	bls.n	8012fce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	e042      	b.n	8013054 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	da0f      	bge.n	8012ff6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012fd6:	78fb      	ldrb	r3, [r7, #3]
 8012fd8:	f003 020f 	and.w	r2, r3, #15
 8012fdc:	4613      	mov	r3, r2
 8012fde:	00db      	lsls	r3, r3, #3
 8012fe0:	4413      	add	r3, r2
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	3338      	adds	r3, #56	; 0x38
 8012fe6:	687a      	ldr	r2, [r7, #4]
 8012fe8:	4413      	add	r3, r2
 8012fea:	3304      	adds	r3, #4
 8012fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	705a      	strb	r2, [r3, #1]
 8012ff4:	e00f      	b.n	8013016 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012ff6:	78fb      	ldrb	r3, [r7, #3]
 8012ff8:	f003 020f 	and.w	r2, r3, #15
 8012ffc:	4613      	mov	r3, r2
 8012ffe:	00db      	lsls	r3, r3, #3
 8013000:	4413      	add	r3, r2
 8013002:	009b      	lsls	r3, r3, #2
 8013004:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8013008:	687a      	ldr	r2, [r7, #4]
 801300a:	4413      	add	r3, r2
 801300c:	3304      	adds	r3, #4
 801300e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2200      	movs	r2, #0
 8013014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2200      	movs	r2, #0
 801301a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801301c:	78fb      	ldrb	r3, [r7, #3]
 801301e:	f003 030f 	and.w	r3, r3, #15
 8013022:	b2da      	uxtb	r2, r3
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801302e:	2b01      	cmp	r3, #1
 8013030:	d101      	bne.n	8013036 <HAL_PCD_EP_ClrStall+0x86>
 8013032:	2302      	movs	r3, #2
 8013034:	e00e      	b.n	8013054 <HAL_PCD_EP_ClrStall+0xa4>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2201      	movs	r2, #1
 801303a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	68f9      	ldr	r1, [r7, #12]
 8013044:	4618      	mov	r0, r3
 8013046:	f005 f871 	bl	801812c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2200      	movs	r2, #0
 801304e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8013052:	2300      	movs	r3, #0
}
 8013054:	4618      	mov	r0, r3
 8013056:	3710      	adds	r7, #16
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	460b      	mov	r3, r1
 8013066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8013068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801306c:	2b00      	cmp	r3, #0
 801306e:	da0c      	bge.n	801308a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013070:	78fb      	ldrb	r3, [r7, #3]
 8013072:	f003 020f 	and.w	r2, r3, #15
 8013076:	4613      	mov	r3, r2
 8013078:	00db      	lsls	r3, r3, #3
 801307a:	4413      	add	r3, r2
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	3338      	adds	r3, #56	; 0x38
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	4413      	add	r3, r2
 8013084:	3304      	adds	r3, #4
 8013086:	60fb      	str	r3, [r7, #12]
 8013088:	e00c      	b.n	80130a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801308a:	78fb      	ldrb	r3, [r7, #3]
 801308c:	f003 020f 	and.w	r2, r3, #15
 8013090:	4613      	mov	r3, r2
 8013092:	00db      	lsls	r3, r3, #3
 8013094:	4413      	add	r3, r2
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	4413      	add	r3, r2
 80130a0:	3304      	adds	r3, #4
 80130a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	68f9      	ldr	r1, [r7, #12]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f004 fe90 	bl	8017dd0 <USB_EPStopXfer>
 80130b0:	4603      	mov	r3, r0
 80130b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80130b4:	7afb      	ldrb	r3, [r7, #11]
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3710      	adds	r7, #16
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b08a      	sub	sp, #40	; 0x28
 80130c2:	af02      	add	r7, sp, #8
 80130c4:	6078      	str	r0, [r7, #4]
 80130c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80130d2:	683a      	ldr	r2, [r7, #0]
 80130d4:	4613      	mov	r3, r2
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	4413      	add	r3, r2
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	3338      	adds	r3, #56	; 0x38
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	4413      	add	r3, r2
 80130e2:	3304      	adds	r3, #4
 80130e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	6a1a      	ldr	r2, [r3, #32]
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	699b      	ldr	r3, [r3, #24]
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d901      	bls.n	80130f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80130f2:	2301      	movs	r3, #1
 80130f4:	e06c      	b.n	80131d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	699a      	ldr	r2, [r3, #24]
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	6a1b      	ldr	r3, [r3, #32]
 80130fe:	1ad3      	subs	r3, r2, r3
 8013100:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	69fa      	ldr	r2, [r7, #28]
 8013108:	429a      	cmp	r2, r3
 801310a:	d902      	bls.n	8013112 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	68db      	ldr	r3, [r3, #12]
 8013110:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8013112:	69fb      	ldr	r3, [r7, #28]
 8013114:	3303      	adds	r3, #3
 8013116:	089b      	lsrs	r3, r3, #2
 8013118:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801311a:	e02b      	b.n	8013174 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	699a      	ldr	r2, [r3, #24]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	6a1b      	ldr	r3, [r3, #32]
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	69fa      	ldr	r2, [r7, #28]
 801312e:	429a      	cmp	r2, r3
 8013130:	d902      	bls.n	8013138 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	3303      	adds	r3, #3
 801313c:	089b      	lsrs	r3, r3, #2
 801313e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	6919      	ldr	r1, [r3, #16]
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	b2da      	uxtb	r2, r3
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8013150:	b2db      	uxtb	r3, r3
 8013152:	9300      	str	r3, [sp, #0]
 8013154:	4603      	mov	r3, r0
 8013156:	6978      	ldr	r0, [r7, #20]
 8013158:	f004 fee4 	bl	8017f24 <USB_WritePacket>

    ep->xfer_buff  += len;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	691a      	ldr	r2, [r3, #16]
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	441a      	add	r2, r3
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	6a1a      	ldr	r2, [r3, #32]
 801316c:	69fb      	ldr	r3, [r7, #28]
 801316e:	441a      	add	r2, r3
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	015a      	lsls	r2, r3, #5
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	4413      	add	r3, r2
 801317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013180:	699b      	ldr	r3, [r3, #24]
 8013182:	b29b      	uxth	r3, r3
 8013184:	69ba      	ldr	r2, [r7, #24]
 8013186:	429a      	cmp	r2, r3
 8013188:	d809      	bhi.n	801319e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	6a1a      	ldr	r2, [r3, #32]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013192:	429a      	cmp	r2, r3
 8013194:	d203      	bcs.n	801319e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	699b      	ldr	r3, [r3, #24]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d1be      	bne.n	801311c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	699a      	ldr	r2, [r3, #24]
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	6a1b      	ldr	r3, [r3, #32]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d811      	bhi.n	80131ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	f003 030f 	and.w	r3, r3, #15
 80131b0:	2201      	movs	r2, #1
 80131b2:	fa02 f303 	lsl.w	r3, r2, r3
 80131b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	43db      	mvns	r3, r3
 80131c4:	6939      	ldr	r1, [r7, #16]
 80131c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131ca:	4013      	ands	r3, r2
 80131cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80131ce:	2300      	movs	r3, #0
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3720      	adds	r7, #32
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b088      	sub	sp, #32
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	333c      	adds	r3, #60	; 0x3c
 80131f0:	3304      	adds	r3, #4
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	015a      	lsls	r2, r3, #5
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	4413      	add	r3, r2
 80131fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013202:	689b      	ldr	r3, [r3, #8]
 8013204:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	691b      	ldr	r3, [r3, #16]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d17b      	bne.n	8013306 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	f003 0308 	and.w	r3, r3, #8
 8013214:	2b00      	cmp	r3, #0
 8013216:	d015      	beq.n	8013244 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	4a61      	ldr	r2, [pc, #388]	; (80133a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801321c:	4293      	cmp	r3, r2
 801321e:	f240 80b9 	bls.w	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013228:	2b00      	cmp	r3, #0
 801322a:	f000 80b3 	beq.w	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	015a      	lsls	r2, r3, #5
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	4413      	add	r3, r2
 8013236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801323a:	461a      	mov	r2, r3
 801323c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013240:	6093      	str	r3, [r2, #8]
 8013242:	e0a7      	b.n	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	f003 0320 	and.w	r3, r3, #32
 801324a:	2b00      	cmp	r3, #0
 801324c:	d009      	beq.n	8013262 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	015a      	lsls	r2, r3, #5
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	4413      	add	r3, r2
 8013256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801325a:	461a      	mov	r2, r3
 801325c:	2320      	movs	r3, #32
 801325e:	6093      	str	r3, [r2, #8]
 8013260:	e098      	b.n	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013268:	2b00      	cmp	r3, #0
 801326a:	f040 8093 	bne.w	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	4a4b      	ldr	r2, [pc, #300]	; (80133a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8013272:	4293      	cmp	r3, r2
 8013274:	d90f      	bls.n	8013296 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801327c:	2b00      	cmp	r3, #0
 801327e:	d00a      	beq.n	8013296 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	015a      	lsls	r2, r3, #5
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	4413      	add	r3, r2
 8013288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801328c:	461a      	mov	r2, r3
 801328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013292:	6093      	str	r3, [r2, #8]
 8013294:	e07e      	b.n	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8013296:	683a      	ldr	r2, [r7, #0]
 8013298:	4613      	mov	r3, r2
 801329a:	00db      	lsls	r3, r3, #3
 801329c:	4413      	add	r3, r2
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	4413      	add	r3, r2
 80132a8:	3304      	adds	r3, #4
 80132aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	69da      	ldr	r2, [r3, #28]
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	0159      	lsls	r1, r3, #5
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	440b      	add	r3, r1
 80132b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132bc:	691b      	ldr	r3, [r3, #16]
 80132be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132c2:	1ad2      	subs	r2, r2, r3
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d114      	bne.n	80132f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	699b      	ldr	r3, [r3, #24]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d109      	bne.n	80132ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6818      	ldr	r0, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80132e0:	461a      	mov	r2, r3
 80132e2:	2101      	movs	r1, #1
 80132e4:	f005 f8b4 	bl	8018450 <USB_EP0_OutStart>
 80132e8:	e006      	b.n	80132f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	691a      	ldr	r2, [r3, #16]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	6a1b      	ldr	r3, [r3, #32]
 80132f2:	441a      	add	r2, r3
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	b2db      	uxtb	r3, r3
 80132fc:	4619      	mov	r1, r3
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f00a fd52 	bl	801dda8 <HAL_PCD_DataOutStageCallback>
 8013304:	e046      	b.n	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	4a26      	ldr	r2, [pc, #152]	; (80133a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801330a:	4293      	cmp	r3, r2
 801330c:	d124      	bne.n	8013358 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013314:	2b00      	cmp	r3, #0
 8013316:	d00a      	beq.n	801332e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	015a      	lsls	r2, r3, #5
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	4413      	add	r3, r2
 8013320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013324:	461a      	mov	r2, r3
 8013326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801332a:	6093      	str	r3, [r2, #8]
 801332c:	e032      	b.n	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801332e:	693b      	ldr	r3, [r7, #16]
 8013330:	f003 0320 	and.w	r3, r3, #32
 8013334:	2b00      	cmp	r3, #0
 8013336:	d008      	beq.n	801334a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	015a      	lsls	r2, r3, #5
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	4413      	add	r3, r2
 8013340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013344:	461a      	mov	r2, r3
 8013346:	2320      	movs	r3, #32
 8013348:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	b2db      	uxtb	r3, r3
 801334e:	4619      	mov	r1, r3
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f00a fd29 	bl	801dda8 <HAL_PCD_DataOutStageCallback>
 8013356:	e01d      	b.n	8013394 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d114      	bne.n	8013388 <PCD_EP_OutXfrComplete_int+0x1b0>
 801335e:	6879      	ldr	r1, [r7, #4]
 8013360:	683a      	ldr	r2, [r7, #0]
 8013362:	4613      	mov	r3, r2
 8013364:	00db      	lsls	r3, r3, #3
 8013366:	4413      	add	r3, r2
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	440b      	add	r3, r1
 801336c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d108      	bne.n	8013388 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6818      	ldr	r0, [r3, #0]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013380:	461a      	mov	r2, r3
 8013382:	2100      	movs	r1, #0
 8013384:	f005 f864 	bl	8018450 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	b2db      	uxtb	r3, r3
 801338c:	4619      	mov	r1, r3
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f00a fd0a 	bl	801dda8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8013394:	2300      	movs	r3, #0
}
 8013396:	4618      	mov	r0, r3
 8013398:	3720      	adds	r7, #32
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	4f54300a 	.word	0x4f54300a
 80133a4:	4f54310a 	.word	0x4f54310a

080133a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b086      	sub	sp, #24
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	333c      	adds	r3, #60	; 0x3c
 80133c0:	3304      	adds	r3, #4
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	015a      	lsls	r2, r3, #5
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	4413      	add	r3, r2
 80133ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	4a15      	ldr	r2, [pc, #84]	; (8013430 <PCD_EP_OutSetupPacket_int+0x88>)
 80133da:	4293      	cmp	r3, r2
 80133dc:	d90e      	bls.n	80133fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d009      	beq.n	80133fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	015a      	lsls	r2, r3, #5
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	4413      	add	r3, r2
 80133f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f4:	461a      	mov	r2, r3
 80133f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	f00a fcc1 	bl	801dd84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	4a0a      	ldr	r2, [pc, #40]	; (8013430 <PCD_EP_OutSetupPacket_int+0x88>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d90c      	bls.n	8013424 <PCD_EP_OutSetupPacket_int+0x7c>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	691b      	ldr	r3, [r3, #16]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d108      	bne.n	8013424 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6818      	ldr	r0, [r3, #0]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801341c:	461a      	mov	r2, r3
 801341e:	2101      	movs	r1, #1
 8013420:	f005 f816 	bl	8018450 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8013424:	2300      	movs	r3, #0
}
 8013426:	4618      	mov	r0, r3
 8013428:	3718      	adds	r7, #24
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	4f54300a 	.word	0x4f54300a

08013434 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8013434:	b480      	push	{r7}
 8013436:	b085      	sub	sp, #20
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	460b      	mov	r3, r1
 801343e:	70fb      	strb	r3, [r7, #3]
 8013440:	4613      	mov	r3, r2
 8013442:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801344c:	78fb      	ldrb	r3, [r7, #3]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d107      	bne.n	8013462 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8013452:	883b      	ldrh	r3, [r7, #0]
 8013454:	0419      	lsls	r1, r3, #16
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	68ba      	ldr	r2, [r7, #8]
 801345c:	430a      	orrs	r2, r1
 801345e:	629a      	str	r2, [r3, #40]	; 0x28
 8013460:	e028      	b.n	80134b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013468:	0c1b      	lsrs	r3, r3, #16
 801346a:	68ba      	ldr	r2, [r7, #8]
 801346c:	4413      	add	r3, r2
 801346e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8013470:	2300      	movs	r3, #0
 8013472:	73fb      	strb	r3, [r7, #15]
 8013474:	e00d      	b.n	8013492 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	7bfb      	ldrb	r3, [r7, #15]
 801347c:	3340      	adds	r3, #64	; 0x40
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	4413      	add	r3, r2
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	0c1b      	lsrs	r3, r3, #16
 8013486:	68ba      	ldr	r2, [r7, #8]
 8013488:	4413      	add	r3, r2
 801348a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801348c:	7bfb      	ldrb	r3, [r7, #15]
 801348e:	3301      	adds	r3, #1
 8013490:	73fb      	strb	r3, [r7, #15]
 8013492:	7bfa      	ldrb	r2, [r7, #15]
 8013494:	78fb      	ldrb	r3, [r7, #3]
 8013496:	3b01      	subs	r3, #1
 8013498:	429a      	cmp	r2, r3
 801349a:	d3ec      	bcc.n	8013476 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801349c:	883b      	ldrh	r3, [r7, #0]
 801349e:	0418      	lsls	r0, r3, #16
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6819      	ldr	r1, [r3, #0]
 80134a4:	78fb      	ldrb	r3, [r7, #3]
 80134a6:	3b01      	subs	r3, #1
 80134a8:	68ba      	ldr	r2, [r7, #8]
 80134aa:	4302      	orrs	r2, r0
 80134ac:	3340      	adds	r3, #64	; 0x40
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	440b      	add	r3, r1
 80134b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80134b4:	2300      	movs	r3, #0
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3714      	adds	r7, #20
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr

080134c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80134c2:	b480      	push	{r7}
 80134c4:	b083      	sub	sp, #12
 80134c6:	af00      	add	r7, sp, #0
 80134c8:	6078      	str	r0, [r7, #4]
 80134ca:	460b      	mov	r3, r1
 80134cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	887a      	ldrh	r2, [r7, #2]
 80134d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80134d6:	2300      	movs	r3, #0
}
 80134d8:	4618      	mov	r0, r3
 80134da:	370c      	adds	r7, #12
 80134dc:	46bd      	mov	sp, r7
 80134de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e2:	4770      	bx	lr

080134e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	460b      	mov	r3, r1
 80134ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80134f0:	bf00      	nop
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr

080134fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b086      	sub	sp, #24
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d101      	bne.n	801350e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801350a:	2301      	movs	r3, #1
 801350c:	e267      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f003 0301 	and.w	r3, r3, #1
 8013516:	2b00      	cmp	r3, #0
 8013518:	d075      	beq.n	8013606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801351a:	4b88      	ldr	r3, [pc, #544]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	f003 030c 	and.w	r3, r3, #12
 8013522:	2b04      	cmp	r3, #4
 8013524:	d00c      	beq.n	8013540 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013526:	4b85      	ldr	r3, [pc, #532]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801352e:	2b08      	cmp	r3, #8
 8013530:	d112      	bne.n	8013558 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013532:	4b82      	ldr	r3, [pc, #520]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801353a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801353e:	d10b      	bne.n	8013558 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013540:	4b7e      	ldr	r3, [pc, #504]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013548:	2b00      	cmp	r3, #0
 801354a:	d05b      	beq.n	8013604 <HAL_RCC_OscConfig+0x108>
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	685b      	ldr	r3, [r3, #4]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d157      	bne.n	8013604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013554:	2301      	movs	r3, #1
 8013556:	e242      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013560:	d106      	bne.n	8013570 <HAL_RCC_OscConfig+0x74>
 8013562:	4b76      	ldr	r3, [pc, #472]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4a75      	ldr	r2, [pc, #468]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801356c:	6013      	str	r3, [r2, #0]
 801356e:	e01d      	b.n	80135ac <HAL_RCC_OscConfig+0xb0>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013578:	d10c      	bne.n	8013594 <HAL_RCC_OscConfig+0x98>
 801357a:	4b70      	ldr	r3, [pc, #448]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	4a6f      	ldr	r2, [pc, #444]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	4b6d      	ldr	r3, [pc, #436]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4a6c      	ldr	r2, [pc, #432]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013590:	6013      	str	r3, [r2, #0]
 8013592:	e00b      	b.n	80135ac <HAL_RCC_OscConfig+0xb0>
 8013594:	4b69      	ldr	r3, [pc, #420]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4a68      	ldr	r2, [pc, #416]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801359a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801359e:	6013      	str	r3, [r2, #0]
 80135a0:	4b66      	ldr	r3, [pc, #408]	; (801373c <HAL_RCC_OscConfig+0x240>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4a65      	ldr	r2, [pc, #404]	; (801373c <HAL_RCC_OscConfig+0x240>)
 80135a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80135aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d013      	beq.n	80135dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80135b4:	f7fa ffc2 	bl	800e53c <HAL_GetTick>
 80135b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80135ba:	e008      	b.n	80135ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80135bc:	f7fa ffbe 	bl	800e53c <HAL_GetTick>
 80135c0:	4602      	mov	r2, r0
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	2b64      	cmp	r3, #100	; 0x64
 80135c8:	d901      	bls.n	80135ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80135ca:	2303      	movs	r3, #3
 80135cc:	e207      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80135ce:	4b5b      	ldr	r3, [pc, #364]	; (801373c <HAL_RCC_OscConfig+0x240>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d0f0      	beq.n	80135bc <HAL_RCC_OscConfig+0xc0>
 80135da:	e014      	b.n	8013606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80135dc:	f7fa ffae 	bl	800e53c <HAL_GetTick>
 80135e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80135e2:	e008      	b.n	80135f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80135e4:	f7fa ffaa 	bl	800e53c <HAL_GetTick>
 80135e8:	4602      	mov	r2, r0
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	1ad3      	subs	r3, r2, r3
 80135ee:	2b64      	cmp	r3, #100	; 0x64
 80135f0:	d901      	bls.n	80135f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80135f2:	2303      	movs	r3, #3
 80135f4:	e1f3      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80135f6:	4b51      	ldr	r3, [pc, #324]	; (801373c <HAL_RCC_OscConfig+0x240>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d1f0      	bne.n	80135e4 <HAL_RCC_OscConfig+0xe8>
 8013602:	e000      	b.n	8013606 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f003 0302 	and.w	r3, r3, #2
 801360e:	2b00      	cmp	r3, #0
 8013610:	d063      	beq.n	80136da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013612:	4b4a      	ldr	r3, [pc, #296]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	f003 030c 	and.w	r3, r3, #12
 801361a:	2b00      	cmp	r3, #0
 801361c:	d00b      	beq.n	8013636 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801361e:	4b47      	ldr	r3, [pc, #284]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013626:	2b08      	cmp	r3, #8
 8013628:	d11c      	bne.n	8013664 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801362a:	4b44      	ldr	r3, [pc, #272]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013632:	2b00      	cmp	r3, #0
 8013634:	d116      	bne.n	8013664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013636:	4b41      	ldr	r3, [pc, #260]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f003 0302 	and.w	r3, r3, #2
 801363e:	2b00      	cmp	r3, #0
 8013640:	d005      	beq.n	801364e <HAL_RCC_OscConfig+0x152>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	2b01      	cmp	r3, #1
 8013648:	d001      	beq.n	801364e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801364a:	2301      	movs	r3, #1
 801364c:	e1c7      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801364e:	4b3b      	ldr	r3, [pc, #236]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	691b      	ldr	r3, [r3, #16]
 801365a:	00db      	lsls	r3, r3, #3
 801365c:	4937      	ldr	r1, [pc, #220]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801365e:	4313      	orrs	r3, r2
 8013660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013662:	e03a      	b.n	80136da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	68db      	ldr	r3, [r3, #12]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d020      	beq.n	80136ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801366c:	4b34      	ldr	r3, [pc, #208]	; (8013740 <HAL_RCC_OscConfig+0x244>)
 801366e:	2201      	movs	r2, #1
 8013670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013672:	f7fa ff63 	bl	800e53c <HAL_GetTick>
 8013676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013678:	e008      	b.n	801368c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801367a:	f7fa ff5f 	bl	800e53c <HAL_GetTick>
 801367e:	4602      	mov	r2, r0
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	2b02      	cmp	r3, #2
 8013686:	d901      	bls.n	801368c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013688:	2303      	movs	r3, #3
 801368a:	e1a8      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801368c:	4b2b      	ldr	r3, [pc, #172]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f003 0302 	and.w	r3, r3, #2
 8013694:	2b00      	cmp	r3, #0
 8013696:	d0f0      	beq.n	801367a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013698:	4b28      	ldr	r3, [pc, #160]	; (801373c <HAL_RCC_OscConfig+0x240>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	691b      	ldr	r3, [r3, #16]
 80136a4:	00db      	lsls	r3, r3, #3
 80136a6:	4925      	ldr	r1, [pc, #148]	; (801373c <HAL_RCC_OscConfig+0x240>)
 80136a8:	4313      	orrs	r3, r2
 80136aa:	600b      	str	r3, [r1, #0]
 80136ac:	e015      	b.n	80136da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80136ae:	4b24      	ldr	r3, [pc, #144]	; (8013740 <HAL_RCC_OscConfig+0x244>)
 80136b0:	2200      	movs	r2, #0
 80136b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80136b4:	f7fa ff42 	bl	800e53c <HAL_GetTick>
 80136b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80136ba:	e008      	b.n	80136ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80136bc:	f7fa ff3e 	bl	800e53c <HAL_GetTick>
 80136c0:	4602      	mov	r2, r0
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	1ad3      	subs	r3, r2, r3
 80136c6:	2b02      	cmp	r3, #2
 80136c8:	d901      	bls.n	80136ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80136ca:	2303      	movs	r3, #3
 80136cc:	e187      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80136ce:	4b1b      	ldr	r3, [pc, #108]	; (801373c <HAL_RCC_OscConfig+0x240>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f003 0302 	and.w	r3, r3, #2
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d1f0      	bne.n	80136bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f003 0308 	and.w	r3, r3, #8
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d036      	beq.n	8013754 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	695b      	ldr	r3, [r3, #20]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d016      	beq.n	801371c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80136ee:	4b15      	ldr	r3, [pc, #84]	; (8013744 <HAL_RCC_OscConfig+0x248>)
 80136f0:	2201      	movs	r2, #1
 80136f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80136f4:	f7fa ff22 	bl	800e53c <HAL_GetTick>
 80136f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80136fa:	e008      	b.n	801370e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80136fc:	f7fa ff1e 	bl	800e53c <HAL_GetTick>
 8013700:	4602      	mov	r2, r0
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	1ad3      	subs	r3, r2, r3
 8013706:	2b02      	cmp	r3, #2
 8013708:	d901      	bls.n	801370e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801370a:	2303      	movs	r3, #3
 801370c:	e167      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801370e:	4b0b      	ldr	r3, [pc, #44]	; (801373c <HAL_RCC_OscConfig+0x240>)
 8013710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013712:	f003 0302 	and.w	r3, r3, #2
 8013716:	2b00      	cmp	r3, #0
 8013718:	d0f0      	beq.n	80136fc <HAL_RCC_OscConfig+0x200>
 801371a:	e01b      	b.n	8013754 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801371c:	4b09      	ldr	r3, [pc, #36]	; (8013744 <HAL_RCC_OscConfig+0x248>)
 801371e:	2200      	movs	r2, #0
 8013720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013722:	f7fa ff0b 	bl	800e53c <HAL_GetTick>
 8013726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013728:	e00e      	b.n	8013748 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801372a:	f7fa ff07 	bl	800e53c <HAL_GetTick>
 801372e:	4602      	mov	r2, r0
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	1ad3      	subs	r3, r2, r3
 8013734:	2b02      	cmp	r3, #2
 8013736:	d907      	bls.n	8013748 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013738:	2303      	movs	r3, #3
 801373a:	e150      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
 801373c:	40023800 	.word	0x40023800
 8013740:	42470000 	.word	0x42470000
 8013744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013748:	4b88      	ldr	r3, [pc, #544]	; (801396c <HAL_RCC_OscConfig+0x470>)
 801374a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801374c:	f003 0302 	and.w	r3, r3, #2
 8013750:	2b00      	cmp	r3, #0
 8013752:	d1ea      	bne.n	801372a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f003 0304 	and.w	r3, r3, #4
 801375c:	2b00      	cmp	r3, #0
 801375e:	f000 8097 	beq.w	8013890 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013762:	2300      	movs	r3, #0
 8013764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013766:	4b81      	ldr	r3, [pc, #516]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10f      	bne.n	8013792 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013772:	2300      	movs	r3, #0
 8013774:	60bb      	str	r3, [r7, #8]
 8013776:	4b7d      	ldr	r3, [pc, #500]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801377a:	4a7c      	ldr	r2, [pc, #496]	; (801396c <HAL_RCC_OscConfig+0x470>)
 801377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013780:	6413      	str	r3, [r2, #64]	; 0x40
 8013782:	4b7a      	ldr	r3, [pc, #488]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801378a:	60bb      	str	r3, [r7, #8]
 801378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801378e:	2301      	movs	r3, #1
 8013790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013792:	4b77      	ldr	r3, [pc, #476]	; (8013970 <HAL_RCC_OscConfig+0x474>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801379a:	2b00      	cmp	r3, #0
 801379c:	d118      	bne.n	80137d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801379e:	4b74      	ldr	r3, [pc, #464]	; (8013970 <HAL_RCC_OscConfig+0x474>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	4a73      	ldr	r2, [pc, #460]	; (8013970 <HAL_RCC_OscConfig+0x474>)
 80137a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80137a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80137aa:	f7fa fec7 	bl	800e53c <HAL_GetTick>
 80137ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80137b0:	e008      	b.n	80137c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80137b2:	f7fa fec3 	bl	800e53c <HAL_GetTick>
 80137b6:	4602      	mov	r2, r0
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	1ad3      	subs	r3, r2, r3
 80137bc:	2b02      	cmp	r3, #2
 80137be:	d901      	bls.n	80137c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80137c0:	2303      	movs	r3, #3
 80137c2:	e10c      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80137c4:	4b6a      	ldr	r3, [pc, #424]	; (8013970 <HAL_RCC_OscConfig+0x474>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d0f0      	beq.n	80137b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	689b      	ldr	r3, [r3, #8]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d106      	bne.n	80137e6 <HAL_RCC_OscConfig+0x2ea>
 80137d8:	4b64      	ldr	r3, [pc, #400]	; (801396c <HAL_RCC_OscConfig+0x470>)
 80137da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137dc:	4a63      	ldr	r2, [pc, #396]	; (801396c <HAL_RCC_OscConfig+0x470>)
 80137de:	f043 0301 	orr.w	r3, r3, #1
 80137e2:	6713      	str	r3, [r2, #112]	; 0x70
 80137e4:	e01c      	b.n	8013820 <HAL_RCC_OscConfig+0x324>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	689b      	ldr	r3, [r3, #8]
 80137ea:	2b05      	cmp	r3, #5
 80137ec:	d10c      	bne.n	8013808 <HAL_RCC_OscConfig+0x30c>
 80137ee:	4b5f      	ldr	r3, [pc, #380]	; (801396c <HAL_RCC_OscConfig+0x470>)
 80137f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137f2:	4a5e      	ldr	r2, [pc, #376]	; (801396c <HAL_RCC_OscConfig+0x470>)
 80137f4:	f043 0304 	orr.w	r3, r3, #4
 80137f8:	6713      	str	r3, [r2, #112]	; 0x70
 80137fa:	4b5c      	ldr	r3, [pc, #368]	; (801396c <HAL_RCC_OscConfig+0x470>)
 80137fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137fe:	4a5b      	ldr	r2, [pc, #364]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013800:	f043 0301 	orr.w	r3, r3, #1
 8013804:	6713      	str	r3, [r2, #112]	; 0x70
 8013806:	e00b      	b.n	8013820 <HAL_RCC_OscConfig+0x324>
 8013808:	4b58      	ldr	r3, [pc, #352]	; (801396c <HAL_RCC_OscConfig+0x470>)
 801380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801380c:	4a57      	ldr	r2, [pc, #348]	; (801396c <HAL_RCC_OscConfig+0x470>)
 801380e:	f023 0301 	bic.w	r3, r3, #1
 8013812:	6713      	str	r3, [r2, #112]	; 0x70
 8013814:	4b55      	ldr	r3, [pc, #340]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013818:	4a54      	ldr	r2, [pc, #336]	; (801396c <HAL_RCC_OscConfig+0x470>)
 801381a:	f023 0304 	bic.w	r3, r3, #4
 801381e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	689b      	ldr	r3, [r3, #8]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d015      	beq.n	8013854 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013828:	f7fa fe88 	bl	800e53c <HAL_GetTick>
 801382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801382e:	e00a      	b.n	8013846 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013830:	f7fa fe84 	bl	800e53c <HAL_GetTick>
 8013834:	4602      	mov	r2, r0
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	1ad3      	subs	r3, r2, r3
 801383a:	f241 3288 	movw	r2, #5000	; 0x1388
 801383e:	4293      	cmp	r3, r2
 8013840:	d901      	bls.n	8013846 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013842:	2303      	movs	r3, #3
 8013844:	e0cb      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013846:	4b49      	ldr	r3, [pc, #292]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801384a:	f003 0302 	and.w	r3, r3, #2
 801384e:	2b00      	cmp	r3, #0
 8013850:	d0ee      	beq.n	8013830 <HAL_RCC_OscConfig+0x334>
 8013852:	e014      	b.n	801387e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013854:	f7fa fe72 	bl	800e53c <HAL_GetTick>
 8013858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801385a:	e00a      	b.n	8013872 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801385c:	f7fa fe6e 	bl	800e53c <HAL_GetTick>
 8013860:	4602      	mov	r2, r0
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	1ad3      	subs	r3, r2, r3
 8013866:	f241 3288 	movw	r2, #5000	; 0x1388
 801386a:	4293      	cmp	r3, r2
 801386c:	d901      	bls.n	8013872 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801386e:	2303      	movs	r3, #3
 8013870:	e0b5      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013872:	4b3e      	ldr	r3, [pc, #248]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013876:	f003 0302 	and.w	r3, r3, #2
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1ee      	bne.n	801385c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801387e:	7dfb      	ldrb	r3, [r7, #23]
 8013880:	2b01      	cmp	r3, #1
 8013882:	d105      	bne.n	8013890 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013884:	4b39      	ldr	r3, [pc, #228]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013888:	4a38      	ldr	r2, [pc, #224]	; (801396c <HAL_RCC_OscConfig+0x470>)
 801388a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801388e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	699b      	ldr	r3, [r3, #24]
 8013894:	2b00      	cmp	r3, #0
 8013896:	f000 80a1 	beq.w	80139dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801389a:	4b34      	ldr	r3, [pc, #208]	; (801396c <HAL_RCC_OscConfig+0x470>)
 801389c:	689b      	ldr	r3, [r3, #8]
 801389e:	f003 030c 	and.w	r3, r3, #12
 80138a2:	2b08      	cmp	r3, #8
 80138a4:	d05c      	beq.n	8013960 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	699b      	ldr	r3, [r3, #24]
 80138aa:	2b02      	cmp	r3, #2
 80138ac:	d141      	bne.n	8013932 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80138ae:	4b31      	ldr	r3, [pc, #196]	; (8013974 <HAL_RCC_OscConfig+0x478>)
 80138b0:	2200      	movs	r2, #0
 80138b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80138b4:	f7fa fe42 	bl	800e53c <HAL_GetTick>
 80138b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80138ba:	e008      	b.n	80138ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80138bc:	f7fa fe3e 	bl	800e53c <HAL_GetTick>
 80138c0:	4602      	mov	r2, r0
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	2b02      	cmp	r3, #2
 80138c8:	d901      	bls.n	80138ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80138ca:	2303      	movs	r3, #3
 80138cc:	e087      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80138ce:	4b27      	ldr	r3, [pc, #156]	; (801396c <HAL_RCC_OscConfig+0x470>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d1f0      	bne.n	80138bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	69da      	ldr	r2, [r3, #28]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6a1b      	ldr	r3, [r3, #32]
 80138e2:	431a      	orrs	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e8:	019b      	lsls	r3, r3, #6
 80138ea:	431a      	orrs	r2, r3
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138f0:	085b      	lsrs	r3, r3, #1
 80138f2:	3b01      	subs	r3, #1
 80138f4:	041b      	lsls	r3, r3, #16
 80138f6:	431a      	orrs	r2, r3
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138fc:	061b      	lsls	r3, r3, #24
 80138fe:	491b      	ldr	r1, [pc, #108]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013900:	4313      	orrs	r3, r2
 8013902:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013904:	4b1b      	ldr	r3, [pc, #108]	; (8013974 <HAL_RCC_OscConfig+0x478>)
 8013906:	2201      	movs	r2, #1
 8013908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801390a:	f7fa fe17 	bl	800e53c <HAL_GetTick>
 801390e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013910:	e008      	b.n	8013924 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013912:	f7fa fe13 	bl	800e53c <HAL_GetTick>
 8013916:	4602      	mov	r2, r0
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	1ad3      	subs	r3, r2, r3
 801391c:	2b02      	cmp	r3, #2
 801391e:	d901      	bls.n	8013924 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013920:	2303      	movs	r3, #3
 8013922:	e05c      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013924:	4b11      	ldr	r3, [pc, #68]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801392c:	2b00      	cmp	r3, #0
 801392e:	d0f0      	beq.n	8013912 <HAL_RCC_OscConfig+0x416>
 8013930:	e054      	b.n	80139dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013932:	4b10      	ldr	r3, [pc, #64]	; (8013974 <HAL_RCC_OscConfig+0x478>)
 8013934:	2200      	movs	r2, #0
 8013936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013938:	f7fa fe00 	bl	800e53c <HAL_GetTick>
 801393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801393e:	e008      	b.n	8013952 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013940:	f7fa fdfc 	bl	800e53c <HAL_GetTick>
 8013944:	4602      	mov	r2, r0
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	2b02      	cmp	r3, #2
 801394c:	d901      	bls.n	8013952 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801394e:	2303      	movs	r3, #3
 8013950:	e045      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013952:	4b06      	ldr	r3, [pc, #24]	; (801396c <HAL_RCC_OscConfig+0x470>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801395a:	2b00      	cmp	r3, #0
 801395c:	d1f0      	bne.n	8013940 <HAL_RCC_OscConfig+0x444>
 801395e:	e03d      	b.n	80139dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	699b      	ldr	r3, [r3, #24]
 8013964:	2b01      	cmp	r3, #1
 8013966:	d107      	bne.n	8013978 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013968:	2301      	movs	r3, #1
 801396a:	e038      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
 801396c:	40023800 	.word	0x40023800
 8013970:	40007000 	.word	0x40007000
 8013974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013978:	4b1b      	ldr	r3, [pc, #108]	; (80139e8 <HAL_RCC_OscConfig+0x4ec>)
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	699b      	ldr	r3, [r3, #24]
 8013982:	2b01      	cmp	r3, #1
 8013984:	d028      	beq.n	80139d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013990:	429a      	cmp	r2, r3
 8013992:	d121      	bne.n	80139d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801399e:	429a      	cmp	r2, r3
 80139a0:	d11a      	bne.n	80139d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80139a8:	4013      	ands	r3, r2
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80139ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d111      	bne.n	80139d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139be:	085b      	lsrs	r3, r3, #1
 80139c0:	3b01      	subs	r3, #1
 80139c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d107      	bne.n	80139d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d001      	beq.n	80139dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80139d8:	2301      	movs	r3, #1
 80139da:	e000      	b.n	80139de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3718      	adds	r7, #24
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	40023800 	.word	0x40023800

080139ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80139fc:	2301      	movs	r3, #1
 80139fe:	e0cc      	b.n	8013b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013a00:	4b68      	ldr	r3, [pc, #416]	; (8013ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f003 0307 	and.w	r3, r3, #7
 8013a08:	683a      	ldr	r2, [r7, #0]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d90c      	bls.n	8013a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013a0e:	4b65      	ldr	r3, [pc, #404]	; (8013ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8013a10:	683a      	ldr	r2, [r7, #0]
 8013a12:	b2d2      	uxtb	r2, r2
 8013a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013a16:	4b63      	ldr	r3, [pc, #396]	; (8013ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f003 0307 	and.w	r3, r3, #7
 8013a1e:	683a      	ldr	r2, [r7, #0]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d001      	beq.n	8013a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013a24:	2301      	movs	r3, #1
 8013a26:	e0b8      	b.n	8013b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	f003 0302 	and.w	r3, r3, #2
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d020      	beq.n	8013a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	f003 0304 	and.w	r3, r3, #4
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d005      	beq.n	8013a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013a40:	4b59      	ldr	r3, [pc, #356]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013a42:	689b      	ldr	r3, [r3, #8]
 8013a44:	4a58      	ldr	r2, [pc, #352]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	f003 0308 	and.w	r3, r3, #8
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d005      	beq.n	8013a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013a58:	4b53      	ldr	r3, [pc, #332]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013a5a:	689b      	ldr	r3, [r3, #8]
 8013a5c:	4a52      	ldr	r2, [pc, #328]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013a64:	4b50      	ldr	r3, [pc, #320]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013a66:	689b      	ldr	r3, [r3, #8]
 8013a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	494d      	ldr	r1, [pc, #308]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013a72:	4313      	orrs	r3, r2
 8013a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f003 0301 	and.w	r3, r3, #1
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d044      	beq.n	8013b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d107      	bne.n	8013a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013a8a:	4b47      	ldr	r3, [pc, #284]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d119      	bne.n	8013aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013a96:	2301      	movs	r3, #1
 8013a98:	e07f      	b.n	8013b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	2b02      	cmp	r3, #2
 8013aa0:	d003      	beq.n	8013aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013aa6:	2b03      	cmp	r3, #3
 8013aa8:	d107      	bne.n	8013aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013aaa:	4b3f      	ldr	r3, [pc, #252]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d109      	bne.n	8013aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e06f      	b.n	8013b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013aba:	4b3b      	ldr	r3, [pc, #236]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f003 0302 	and.w	r3, r3, #2
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d101      	bne.n	8013aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e067      	b.n	8013b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013aca:	4b37      	ldr	r3, [pc, #220]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013acc:	689b      	ldr	r3, [r3, #8]
 8013ace:	f023 0203 	bic.w	r2, r3, #3
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	4934      	ldr	r1, [pc, #208]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013ad8:	4313      	orrs	r3, r2
 8013ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013adc:	f7fa fd2e 	bl	800e53c <HAL_GetTick>
 8013ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013ae2:	e00a      	b.n	8013afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013ae4:	f7fa fd2a 	bl	800e53c <HAL_GetTick>
 8013ae8:	4602      	mov	r2, r0
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	1ad3      	subs	r3, r2, r3
 8013aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d901      	bls.n	8013afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013af6:	2303      	movs	r3, #3
 8013af8:	e04f      	b.n	8013b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013afa:	4b2b      	ldr	r3, [pc, #172]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013afc:	689b      	ldr	r3, [r3, #8]
 8013afe:	f003 020c 	and.w	r2, r3, #12
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	009b      	lsls	r3, r3, #2
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d1eb      	bne.n	8013ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013b0c:	4b25      	ldr	r3, [pc, #148]	; (8013ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f003 0307 	and.w	r3, r3, #7
 8013b14:	683a      	ldr	r2, [r7, #0]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d20c      	bcs.n	8013b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013b1a:	4b22      	ldr	r3, [pc, #136]	; (8013ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b1c:	683a      	ldr	r2, [r7, #0]
 8013b1e:	b2d2      	uxtb	r2, r2
 8013b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013b22:	4b20      	ldr	r3, [pc, #128]	; (8013ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	f003 0307 	and.w	r3, r3, #7
 8013b2a:	683a      	ldr	r2, [r7, #0]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d001      	beq.n	8013b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013b30:	2301      	movs	r3, #1
 8013b32:	e032      	b.n	8013b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f003 0304 	and.w	r3, r3, #4
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d008      	beq.n	8013b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013b40:	4b19      	ldr	r3, [pc, #100]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	4916      	ldr	r1, [pc, #88]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b4e:	4313      	orrs	r3, r2
 8013b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f003 0308 	and.w	r3, r3, #8
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d009      	beq.n	8013b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013b5e:	4b12      	ldr	r3, [pc, #72]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b60:	689b      	ldr	r3, [r3, #8]
 8013b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	691b      	ldr	r3, [r3, #16]
 8013b6a:	00db      	lsls	r3, r3, #3
 8013b6c:	490e      	ldr	r1, [pc, #56]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b6e:	4313      	orrs	r3, r2
 8013b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013b72:	f000 f821 	bl	8013bb8 <HAL_RCC_GetSysClockFreq>
 8013b76:	4602      	mov	r2, r0
 8013b78:	4b0b      	ldr	r3, [pc, #44]	; (8013ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b7a:	689b      	ldr	r3, [r3, #8]
 8013b7c:	091b      	lsrs	r3, r3, #4
 8013b7e:	f003 030f 	and.w	r3, r3, #15
 8013b82:	490a      	ldr	r1, [pc, #40]	; (8013bac <HAL_RCC_ClockConfig+0x1c0>)
 8013b84:	5ccb      	ldrb	r3, [r1, r3]
 8013b86:	fa22 f303 	lsr.w	r3, r2, r3
 8013b8a:	4a09      	ldr	r2, [pc, #36]	; (8013bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8013b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013b8e:	4b09      	ldr	r3, [pc, #36]	; (8013bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7f0 f982 	bl	8003e9c <HAL_InitTick>

  return HAL_OK;
 8013b98:	2300      	movs	r3, #0
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3710      	adds	r7, #16
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	40023c00 	.word	0x40023c00
 8013ba8:	40023800 	.word	0x40023800
 8013bac:	08025bac 	.word	0x08025bac
 8013bb0:	20000004 	.word	0x20000004
 8013bb4:	2000004c 	.word	0x2000004c

08013bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013bbc:	b090      	sub	sp, #64	; 0x40
 8013bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bc8:	2300      	movs	r3, #0
 8013bca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013bd0:	4b59      	ldr	r3, [pc, #356]	; (8013d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8013bd2:	689b      	ldr	r3, [r3, #8]
 8013bd4:	f003 030c 	and.w	r3, r3, #12
 8013bd8:	2b08      	cmp	r3, #8
 8013bda:	d00d      	beq.n	8013bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8013bdc:	2b08      	cmp	r3, #8
 8013bde:	f200 80a1 	bhi.w	8013d24 <HAL_RCC_GetSysClockFreq+0x16c>
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d002      	beq.n	8013bec <HAL_RCC_GetSysClockFreq+0x34>
 8013be6:	2b04      	cmp	r3, #4
 8013be8:	d003      	beq.n	8013bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8013bea:	e09b      	b.n	8013d24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013bec:	4b53      	ldr	r3, [pc, #332]	; (8013d3c <HAL_RCC_GetSysClockFreq+0x184>)
 8013bee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8013bf0:	e09b      	b.n	8013d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013bf2:	4b53      	ldr	r3, [pc, #332]	; (8013d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8013bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013bf6:	e098      	b.n	8013d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013bf8:	4b4f      	ldr	r3, [pc, #316]	; (8013d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013c02:	4b4d      	ldr	r3, [pc, #308]	; (8013d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d028      	beq.n	8013c60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013c0e:	4b4a      	ldr	r3, [pc, #296]	; (8013d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	099b      	lsrs	r3, r3, #6
 8013c14:	2200      	movs	r2, #0
 8013c16:	623b      	str	r3, [r7, #32]
 8013c18:	627a      	str	r2, [r7, #36]	; 0x24
 8013c1a:	6a3b      	ldr	r3, [r7, #32]
 8013c1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8013c20:	2100      	movs	r1, #0
 8013c22:	4b47      	ldr	r3, [pc, #284]	; (8013d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8013c24:	fb03 f201 	mul.w	r2, r3, r1
 8013c28:	2300      	movs	r3, #0
 8013c2a:	fb00 f303 	mul.w	r3, r0, r3
 8013c2e:	4413      	add	r3, r2
 8013c30:	4a43      	ldr	r2, [pc, #268]	; (8013d40 <HAL_RCC_GetSysClockFreq+0x188>)
 8013c32:	fba0 1202 	umull	r1, r2, r0, r2
 8013c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013c38:	460a      	mov	r2, r1
 8013c3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8013c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c3e:	4413      	add	r3, r2
 8013c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c44:	2200      	movs	r2, #0
 8013c46:	61bb      	str	r3, [r7, #24]
 8013c48:	61fa      	str	r2, [r7, #28]
 8013c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013c4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8013c52:	f7ed f819 	bl	8000c88 <__aeabi_uldivmod>
 8013c56:	4602      	mov	r2, r0
 8013c58:	460b      	mov	r3, r1
 8013c5a:	4613      	mov	r3, r2
 8013c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013c5e:	e053      	b.n	8013d08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013c60:	4b35      	ldr	r3, [pc, #212]	; (8013d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	099b      	lsrs	r3, r3, #6
 8013c66:	2200      	movs	r2, #0
 8013c68:	613b      	str	r3, [r7, #16]
 8013c6a:	617a      	str	r2, [r7, #20]
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8013c72:	f04f 0b00 	mov.w	fp, #0
 8013c76:	4652      	mov	r2, sl
 8013c78:	465b      	mov	r3, fp
 8013c7a:	f04f 0000 	mov.w	r0, #0
 8013c7e:	f04f 0100 	mov.w	r1, #0
 8013c82:	0159      	lsls	r1, r3, #5
 8013c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013c88:	0150      	lsls	r0, r2, #5
 8013c8a:	4602      	mov	r2, r0
 8013c8c:	460b      	mov	r3, r1
 8013c8e:	ebb2 080a 	subs.w	r8, r2, sl
 8013c92:	eb63 090b 	sbc.w	r9, r3, fp
 8013c96:	f04f 0200 	mov.w	r2, #0
 8013c9a:	f04f 0300 	mov.w	r3, #0
 8013c9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8013ca2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8013ca6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8013caa:	ebb2 0408 	subs.w	r4, r2, r8
 8013cae:	eb63 0509 	sbc.w	r5, r3, r9
 8013cb2:	f04f 0200 	mov.w	r2, #0
 8013cb6:	f04f 0300 	mov.w	r3, #0
 8013cba:	00eb      	lsls	r3, r5, #3
 8013cbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013cc0:	00e2      	lsls	r2, r4, #3
 8013cc2:	4614      	mov	r4, r2
 8013cc4:	461d      	mov	r5, r3
 8013cc6:	eb14 030a 	adds.w	r3, r4, sl
 8013cca:	603b      	str	r3, [r7, #0]
 8013ccc:	eb45 030b 	adc.w	r3, r5, fp
 8013cd0:	607b      	str	r3, [r7, #4]
 8013cd2:	f04f 0200 	mov.w	r2, #0
 8013cd6:	f04f 0300 	mov.w	r3, #0
 8013cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013cde:	4629      	mov	r1, r5
 8013ce0:	028b      	lsls	r3, r1, #10
 8013ce2:	4621      	mov	r1, r4
 8013ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013ce8:	4621      	mov	r1, r4
 8013cea:	028a      	lsls	r2, r1, #10
 8013cec:	4610      	mov	r0, r2
 8013cee:	4619      	mov	r1, r3
 8013cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	60bb      	str	r3, [r7, #8]
 8013cf6:	60fa      	str	r2, [r7, #12]
 8013cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013cfc:	f7ec ffc4 	bl	8000c88 <__aeabi_uldivmod>
 8013d00:	4602      	mov	r2, r0
 8013d02:	460b      	mov	r3, r1
 8013d04:	4613      	mov	r3, r2
 8013d06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013d08:	4b0b      	ldr	r3, [pc, #44]	; (8013d38 <HAL_RCC_GetSysClockFreq+0x180>)
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	0c1b      	lsrs	r3, r3, #16
 8013d0e:	f003 0303 	and.w	r3, r3, #3
 8013d12:	3301      	adds	r3, #1
 8013d14:	005b      	lsls	r3, r3, #1
 8013d16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8013d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013d22:	e002      	b.n	8013d2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013d24:	4b05      	ldr	r3, [pc, #20]	; (8013d3c <HAL_RCC_GetSysClockFreq+0x184>)
 8013d26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8013d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3740      	adds	r7, #64	; 0x40
 8013d30:	46bd      	mov	sp, r7
 8013d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013d36:	bf00      	nop
 8013d38:	40023800 	.word	0x40023800
 8013d3c:	00f42400 	.word	0x00f42400
 8013d40:	00b71b00 	.word	0x00b71b00

08013d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013d44:	b480      	push	{r7}
 8013d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013d48:	4b03      	ldr	r3, [pc, #12]	; (8013d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	20000004 	.word	0x20000004

08013d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013d60:	f7ff fff0 	bl	8013d44 <HAL_RCC_GetHCLKFreq>
 8013d64:	4602      	mov	r2, r0
 8013d66:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8013d68:	689b      	ldr	r3, [r3, #8]
 8013d6a:	0a9b      	lsrs	r3, r3, #10
 8013d6c:	f003 0307 	and.w	r3, r3, #7
 8013d70:	4903      	ldr	r1, [pc, #12]	; (8013d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013d72:	5ccb      	ldrb	r3, [r1, r3]
 8013d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	40023800 	.word	0x40023800
 8013d80:	08025bbc 	.word	0x08025bbc

08013d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013d88:	f7ff ffdc 	bl	8013d44 <HAL_RCC_GetHCLKFreq>
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	4b05      	ldr	r3, [pc, #20]	; (8013da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013d90:	689b      	ldr	r3, [r3, #8]
 8013d92:	0b5b      	lsrs	r3, r3, #13
 8013d94:	f003 0307 	and.w	r3, r3, #7
 8013d98:	4903      	ldr	r1, [pc, #12]	; (8013da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013d9a:	5ccb      	ldrb	r3, [r1, r3]
 8013d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	40023800 	.word	0x40023800
 8013da8:	08025bbc 	.word	0x08025bbc

08013dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b083      	sub	sp, #12
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	220f      	movs	r2, #15
 8013dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013dbc:	4b12      	ldr	r3, [pc, #72]	; (8013e08 <HAL_RCC_GetClockConfig+0x5c>)
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	f003 0203 	and.w	r2, r3, #3
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8013dc8:	4b0f      	ldr	r3, [pc, #60]	; (8013e08 <HAL_RCC_GetClockConfig+0x5c>)
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013dd4:	4b0c      	ldr	r3, [pc, #48]	; (8013e08 <HAL_RCC_GetClockConfig+0x5c>)
 8013dd6:	689b      	ldr	r3, [r3, #8]
 8013dd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013de0:	4b09      	ldr	r3, [pc, #36]	; (8013e08 <HAL_RCC_GetClockConfig+0x5c>)
 8013de2:	689b      	ldr	r3, [r3, #8]
 8013de4:	08db      	lsrs	r3, r3, #3
 8013de6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013dee:	4b07      	ldr	r3, [pc, #28]	; (8013e0c <HAL_RCC_GetClockConfig+0x60>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f003 0207 	and.w	r2, r3, #7
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	601a      	str	r2, [r3, #0]
}
 8013dfa:	bf00      	nop
 8013dfc:	370c      	adds	r7, #12
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	40023800 	.word	0x40023800
 8013e0c:	40023c00 	.word	0x40023c00

08013e10 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d101      	bne.n	8013e22 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8013e1e:	2301      	movs	r3, #1
 8013e20:	e01c      	b.n	8013e5c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	795b      	ldrb	r3, [r3, #5]
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d105      	bne.n	8013e38 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f7ef fee2 	bl	8003bfc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2202      	movs	r2, #2
 8013e3c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	681a      	ldr	r2, [r3, #0]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f042 0204 	orr.w	r2, r2, #4
 8013e4c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2201      	movs	r2, #1
 8013e52:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2200      	movs	r2, #0
 8013e58:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8013e5a:	2300      	movs	r3, #0
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d101      	bne.n	8013e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013e72:	2301      	movs	r3, #1
 8013e74:	e07b      	b.n	8013f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d108      	bne.n	8013e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e86:	d009      	beq.n	8013e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	61da      	str	r2, [r3, #28]
 8013e8e:	e005      	b.n	8013e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ea8:	b2db      	uxtb	r3, r3
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d106      	bne.n	8013ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f7ef fef8 	bl	8003cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2202      	movs	r2, #2
 8013ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	685b      	ldr	r3, [r3, #4]
 8013ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	689b      	ldr	r3, [r3, #8]
 8013ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013ee4:	431a      	orrs	r2, r3
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013eee:	431a      	orrs	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	691b      	ldr	r3, [r3, #16]
 8013ef4:	f003 0302 	and.w	r3, r3, #2
 8013ef8:	431a      	orrs	r2, r3
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	695b      	ldr	r3, [r3, #20]
 8013efe:	f003 0301 	and.w	r3, r3, #1
 8013f02:	431a      	orrs	r2, r3
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	699b      	ldr	r3, [r3, #24]
 8013f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013f0c:	431a      	orrs	r2, r3
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	69db      	ldr	r3, [r3, #28]
 8013f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013f16:	431a      	orrs	r2, r3
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6a1b      	ldr	r3, [r3, #32]
 8013f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f20:	ea42 0103 	orr.w	r1, r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	430a      	orrs	r2, r1
 8013f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	699b      	ldr	r3, [r3, #24]
 8013f38:	0c1b      	lsrs	r3, r3, #16
 8013f3a:	f003 0104 	and.w	r1, r3, #4
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f42:	f003 0210 	and.w	r2, r3, #16
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	430a      	orrs	r2, r1
 8013f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	69da      	ldr	r2, [r3, #28]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2200      	movs	r2, #0
 8013f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2201      	movs	r2, #1
 8013f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013f6c:	2300      	movs	r3, #0
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3708      	adds	r7, #8
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}

08013f76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f76:	b580      	push	{r7, lr}
 8013f78:	b088      	sub	sp, #32
 8013f7a:	af02      	add	r7, sp, #8
 8013f7c:	60f8      	str	r0, [r7, #12]
 8013f7e:	60b9      	str	r1, [r7, #8]
 8013f80:	603b      	str	r3, [r7, #0]
 8013f82:	4613      	mov	r3, r2
 8013f84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013f86:	2300      	movs	r3, #0
 8013f88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f92:	d112      	bne.n	8013fba <HAL_SPI_Receive+0x44>
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	689b      	ldr	r3, [r3, #8]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d10e      	bne.n	8013fba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	2204      	movs	r2, #4
 8013fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013fa4:	88fa      	ldrh	r2, [r7, #6]
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	9300      	str	r3, [sp, #0]
 8013faa:	4613      	mov	r3, r2
 8013fac:	68ba      	ldr	r2, [r7, #8]
 8013fae:	68b9      	ldr	r1, [r7, #8]
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f000 f8f1 	bl	8014198 <HAL_SPI_TransmitReceive>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	e0ea      	b.n	8014190 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d101      	bne.n	8013fc8 <HAL_SPI_Receive+0x52>
 8013fc4:	2302      	movs	r3, #2
 8013fc6:	e0e3      	b.n	8014190 <HAL_SPI_Receive+0x21a>
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2201      	movs	r2, #1
 8013fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013fd0:	f7fa fab4 	bl	800e53c <HAL_GetTick>
 8013fd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	2b01      	cmp	r3, #1
 8013fe0:	d002      	beq.n	8013fe8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013fe2:	2302      	movs	r3, #2
 8013fe4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013fe6:	e0ca      	b.n	801417e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d002      	beq.n	8013ff4 <HAL_SPI_Receive+0x7e>
 8013fee:	88fb      	ldrh	r3, [r7, #6]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d102      	bne.n	8013ffa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013ff8:	e0c1      	b.n	801417e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	2204      	movs	r2, #4
 8013ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	2200      	movs	r2, #0
 8014006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	88fa      	ldrh	r2, [r7, #6]
 8014012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	88fa      	ldrh	r2, [r7, #6]
 8014018:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2200      	movs	r2, #0
 801401e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	2200      	movs	r2, #0
 8014024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2200      	movs	r2, #0
 801402a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2200      	movs	r2, #0
 8014030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2200      	movs	r2, #0
 8014036:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	689b      	ldr	r3, [r3, #8]
 801403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014040:	d10f      	bne.n	8014062 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014060:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801406c:	2b40      	cmp	r3, #64	; 0x40
 801406e:	d007      	beq.n	8014080 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	681a      	ldr	r2, [r3, #0]
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801407e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d162      	bne.n	801414e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8014088:	e02e      	b.n	80140e8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	689b      	ldr	r3, [r3, #8]
 8014090:	f003 0301 	and.w	r3, r3, #1
 8014094:	2b01      	cmp	r3, #1
 8014096:	d115      	bne.n	80140c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	f103 020c 	add.w	r2, r3, #12
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140a4:	7812      	ldrb	r2, [r2, #0]
 80140a6:	b2d2      	uxtb	r2, r2
 80140a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140ae:	1c5a      	adds	r2, r3, #1
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	3b01      	subs	r3, #1
 80140bc:	b29a      	uxth	r2, r3
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80140c2:	e011      	b.n	80140e8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80140c4:	f7fa fa3a 	bl	800e53c <HAL_GetTick>
 80140c8:	4602      	mov	r2, r0
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	1ad3      	subs	r3, r2, r3
 80140ce:	683a      	ldr	r2, [r7, #0]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d803      	bhi.n	80140dc <HAL_SPI_Receive+0x166>
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140da:	d102      	bne.n	80140e2 <HAL_SPI_Receive+0x16c>
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d102      	bne.n	80140e8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80140e2:	2303      	movs	r3, #3
 80140e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80140e6:	e04a      	b.n	801417e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1cb      	bne.n	801408a <HAL_SPI_Receive+0x114>
 80140f2:	e031      	b.n	8014158 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	689b      	ldr	r3, [r3, #8]
 80140fa:	f003 0301 	and.w	r3, r3, #1
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d113      	bne.n	801412a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	68da      	ldr	r2, [r3, #12]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801410c:	b292      	uxth	r2, r2
 801410e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014114:	1c9a      	adds	r2, r3, #2
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801411e:	b29b      	uxth	r3, r3
 8014120:	3b01      	subs	r3, #1
 8014122:	b29a      	uxth	r2, r3
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014128:	e011      	b.n	801414e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801412a:	f7fa fa07 	bl	800e53c <HAL_GetTick>
 801412e:	4602      	mov	r2, r0
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	683a      	ldr	r2, [r7, #0]
 8014136:	429a      	cmp	r2, r3
 8014138:	d803      	bhi.n	8014142 <HAL_SPI_Receive+0x1cc>
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014140:	d102      	bne.n	8014148 <HAL_SPI_Receive+0x1d2>
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d102      	bne.n	801414e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8014148:	2303      	movs	r3, #3
 801414a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801414c:	e017      	b.n	801417e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014152:	b29b      	uxth	r3, r3
 8014154:	2b00      	cmp	r3, #0
 8014156:	d1cd      	bne.n	80140f4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014158:	693a      	ldr	r2, [r7, #16]
 801415a:	6839      	ldr	r1, [r7, #0]
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f000 fa45 	bl	80145ec <SPI_EndRxTransaction>
 8014162:	4603      	mov	r3, r0
 8014164:	2b00      	cmp	r3, #0
 8014166:	d002      	beq.n	801416e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2220      	movs	r2, #32
 801416c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014172:	2b00      	cmp	r3, #0
 8014174:	d002      	beq.n	801417c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8014176:	2301      	movs	r3, #1
 8014178:	75fb      	strb	r3, [r7, #23]
 801417a:	e000      	b.n	801417e <HAL_SPI_Receive+0x208>
  }

error :
 801417c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2201      	movs	r2, #1
 8014182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	2200      	movs	r2, #0
 801418a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801418e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014190:	4618      	mov	r0, r3
 8014192:	3718      	adds	r7, #24
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b08c      	sub	sp, #48	; 0x30
 801419c:	af00      	add	r7, sp, #0
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	607a      	str	r2, [r7, #4]
 80141a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80141a6:	2301      	movs	r3, #1
 80141a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80141aa:	2300      	movs	r3, #0
 80141ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80141b6:	2b01      	cmp	r3, #1
 80141b8:	d101      	bne.n	80141be <HAL_SPI_TransmitReceive+0x26>
 80141ba:	2302      	movs	r3, #2
 80141bc:	e18a      	b.n	80144d4 <HAL_SPI_TransmitReceive+0x33c>
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2201      	movs	r2, #1
 80141c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80141c6:	f7fa f9b9 	bl	800e53c <HAL_GetTick>
 80141ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80141dc:	887b      	ldrh	r3, [r7, #2]
 80141de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80141e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d00f      	beq.n	8014208 <HAL_SPI_TransmitReceive+0x70>
 80141e8:	69fb      	ldr	r3, [r7, #28]
 80141ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80141ee:	d107      	bne.n	8014200 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	689b      	ldr	r3, [r3, #8]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d103      	bne.n	8014200 <HAL_SPI_TransmitReceive+0x68>
 80141f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80141fc:	2b04      	cmp	r3, #4
 80141fe:	d003      	beq.n	8014208 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8014200:	2302      	movs	r3, #2
 8014202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8014206:	e15b      	b.n	80144c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d005      	beq.n	801421a <HAL_SPI_TransmitReceive+0x82>
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d002      	beq.n	801421a <HAL_SPI_TransmitReceive+0x82>
 8014214:	887b      	ldrh	r3, [r7, #2]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d103      	bne.n	8014222 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801421a:	2301      	movs	r3, #1
 801421c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8014220:	e14e      	b.n	80144c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014228:	b2db      	uxtb	r3, r3
 801422a:	2b04      	cmp	r3, #4
 801422c:	d003      	beq.n	8014236 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2205      	movs	r2, #5
 8014232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2200      	movs	r2, #0
 801423a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	887a      	ldrh	r2, [r7, #2]
 8014246:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	887a      	ldrh	r2, [r7, #2]
 801424c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	68ba      	ldr	r2, [r7, #8]
 8014252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	887a      	ldrh	r2, [r7, #2]
 8014258:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	887a      	ldrh	r2, [r7, #2]
 801425e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	2200      	movs	r2, #0
 8014264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014276:	2b40      	cmp	r3, #64	; 0x40
 8014278:	d007      	beq.n	801428a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	681a      	ldr	r2, [r3, #0]
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014292:	d178      	bne.n	8014386 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d002      	beq.n	80142a2 <HAL_SPI_TransmitReceive+0x10a>
 801429c:	8b7b      	ldrh	r3, [r7, #26]
 801429e:	2b01      	cmp	r3, #1
 80142a0:	d166      	bne.n	8014370 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142a6:	881a      	ldrh	r2, [r3, #0]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142b2:	1c9a      	adds	r2, r3, #2
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142bc:	b29b      	uxth	r3, r3
 80142be:	3b01      	subs	r3, #1
 80142c0:	b29a      	uxth	r2, r3
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80142c6:	e053      	b.n	8014370 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	689b      	ldr	r3, [r3, #8]
 80142ce:	f003 0302 	and.w	r3, r3, #2
 80142d2:	2b02      	cmp	r3, #2
 80142d4:	d11b      	bne.n	801430e <HAL_SPI_TransmitReceive+0x176>
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142da:	b29b      	uxth	r3, r3
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d016      	beq.n	801430e <HAL_SPI_TransmitReceive+0x176>
 80142e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d113      	bne.n	801430e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142ea:	881a      	ldrh	r2, [r3, #0]
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f6:	1c9a      	adds	r2, r3, #2
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014300:	b29b      	uxth	r3, r3
 8014302:	3b01      	subs	r3, #1
 8014304:	b29a      	uxth	r2, r3
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801430a:	2300      	movs	r3, #0
 801430c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	689b      	ldr	r3, [r3, #8]
 8014314:	f003 0301 	and.w	r3, r3, #1
 8014318:	2b01      	cmp	r3, #1
 801431a:	d119      	bne.n	8014350 <HAL_SPI_TransmitReceive+0x1b8>
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014320:	b29b      	uxth	r3, r3
 8014322:	2b00      	cmp	r3, #0
 8014324:	d014      	beq.n	8014350 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	68da      	ldr	r2, [r3, #12]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014330:	b292      	uxth	r2, r2
 8014332:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014338:	1c9a      	adds	r2, r3, #2
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014342:	b29b      	uxth	r3, r3
 8014344:	3b01      	subs	r3, #1
 8014346:	b29a      	uxth	r2, r3
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801434c:	2301      	movs	r3, #1
 801434e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014350:	f7fa f8f4 	bl	800e53c <HAL_GetTick>
 8014354:	4602      	mov	r2, r0
 8014356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014358:	1ad3      	subs	r3, r2, r3
 801435a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801435c:	429a      	cmp	r2, r3
 801435e:	d807      	bhi.n	8014370 <HAL_SPI_TransmitReceive+0x1d8>
 8014360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014366:	d003      	beq.n	8014370 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8014368:	2303      	movs	r3, #3
 801436a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801436e:	e0a7      	b.n	80144c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014374:	b29b      	uxth	r3, r3
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1a6      	bne.n	80142c8 <HAL_SPI_TransmitReceive+0x130>
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801437e:	b29b      	uxth	r3, r3
 8014380:	2b00      	cmp	r3, #0
 8014382:	d1a1      	bne.n	80142c8 <HAL_SPI_TransmitReceive+0x130>
 8014384:	e07c      	b.n	8014480 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d002      	beq.n	8014394 <HAL_SPI_TransmitReceive+0x1fc>
 801438e:	8b7b      	ldrh	r3, [r7, #26]
 8014390:	2b01      	cmp	r3, #1
 8014392:	d16b      	bne.n	801446c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	330c      	adds	r3, #12
 801439e:	7812      	ldrb	r2, [r2, #0]
 80143a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143a6:	1c5a      	adds	r2, r3, #1
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143b0:	b29b      	uxth	r3, r3
 80143b2:	3b01      	subs	r3, #1
 80143b4:	b29a      	uxth	r2, r3
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80143ba:	e057      	b.n	801446c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	689b      	ldr	r3, [r3, #8]
 80143c2:	f003 0302 	and.w	r3, r3, #2
 80143c6:	2b02      	cmp	r3, #2
 80143c8:	d11c      	bne.n	8014404 <HAL_SPI_TransmitReceive+0x26c>
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d017      	beq.n	8014404 <HAL_SPI_TransmitReceive+0x26c>
 80143d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d114      	bne.n	8014404 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	330c      	adds	r3, #12
 80143e4:	7812      	ldrb	r2, [r2, #0]
 80143e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ec:	1c5a      	adds	r2, r3, #1
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	3b01      	subs	r3, #1
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014400:	2300      	movs	r3, #0
 8014402:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	689b      	ldr	r3, [r3, #8]
 801440a:	f003 0301 	and.w	r3, r3, #1
 801440e:	2b01      	cmp	r3, #1
 8014410:	d119      	bne.n	8014446 <HAL_SPI_TransmitReceive+0x2ae>
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014416:	b29b      	uxth	r3, r3
 8014418:	2b00      	cmp	r3, #0
 801441a:	d014      	beq.n	8014446 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	68da      	ldr	r2, [r3, #12]
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014426:	b2d2      	uxtb	r2, r2
 8014428:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801442e:	1c5a      	adds	r2, r3, #1
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014438:	b29b      	uxth	r3, r3
 801443a:	3b01      	subs	r3, #1
 801443c:	b29a      	uxth	r2, r3
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014442:	2301      	movs	r3, #1
 8014444:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014446:	f7fa f879 	bl	800e53c <HAL_GetTick>
 801444a:	4602      	mov	r2, r0
 801444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444e:	1ad3      	subs	r3, r2, r3
 8014450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014452:	429a      	cmp	r2, r3
 8014454:	d803      	bhi.n	801445e <HAL_SPI_TransmitReceive+0x2c6>
 8014456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801445c:	d102      	bne.n	8014464 <HAL_SPI_TransmitReceive+0x2cc>
 801445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014460:	2b00      	cmp	r3, #0
 8014462:	d103      	bne.n	801446c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014464:	2303      	movs	r3, #3
 8014466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801446a:	e029      	b.n	80144c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014470:	b29b      	uxth	r3, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d1a2      	bne.n	80143bc <HAL_SPI_TransmitReceive+0x224>
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801447a:	b29b      	uxth	r3, r3
 801447c:	2b00      	cmp	r3, #0
 801447e:	d19d      	bne.n	80143bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f000 f917 	bl	80146b8 <SPI_EndRxTxTransaction>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d006      	beq.n	801449e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8014490:	2301      	movs	r3, #1
 8014492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2220      	movs	r2, #32
 801449a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801449c:	e010      	b.n	80144c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	689b      	ldr	r3, [r3, #8]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d10b      	bne.n	80144be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80144a6:	2300      	movs	r3, #0
 80144a8:	617b      	str	r3, [r7, #20]
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	68db      	ldr	r3, [r3, #12]
 80144b0:	617b      	str	r3, [r7, #20]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	689b      	ldr	r3, [r3, #8]
 80144b8:	617b      	str	r3, [r7, #20]
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	e000      	b.n	80144c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80144be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2201      	movs	r2, #1
 80144c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	2200      	movs	r2, #0
 80144cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80144d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3730      	adds	r7, #48	; 0x30
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}

080144dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b088      	sub	sp, #32
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	603b      	str	r3, [r7, #0]
 80144e8:	4613      	mov	r3, r2
 80144ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80144ec:	f7fa f826 	bl	800e53c <HAL_GetTick>
 80144f0:	4602      	mov	r2, r0
 80144f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f4:	1a9b      	subs	r3, r3, r2
 80144f6:	683a      	ldr	r2, [r7, #0]
 80144f8:	4413      	add	r3, r2
 80144fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80144fc:	f7fa f81e 	bl	800e53c <HAL_GetTick>
 8014500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014502:	4b39      	ldr	r3, [pc, #228]	; (80145e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	015b      	lsls	r3, r3, #5
 8014508:	0d1b      	lsrs	r3, r3, #20
 801450a:	69fa      	ldr	r2, [r7, #28]
 801450c:	fb02 f303 	mul.w	r3, r2, r3
 8014510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014512:	e054      	b.n	80145be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801451a:	d050      	beq.n	80145be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801451c:	f7fa f80e 	bl	800e53c <HAL_GetTick>
 8014520:	4602      	mov	r2, r0
 8014522:	69bb      	ldr	r3, [r7, #24]
 8014524:	1ad3      	subs	r3, r2, r3
 8014526:	69fa      	ldr	r2, [r7, #28]
 8014528:	429a      	cmp	r2, r3
 801452a:	d902      	bls.n	8014532 <SPI_WaitFlagStateUntilTimeout+0x56>
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d13d      	bne.n	80145ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	685a      	ldr	r2, [r3, #4]
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801454a:	d111      	bne.n	8014570 <SPI_WaitFlagStateUntilTimeout+0x94>
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	689b      	ldr	r3, [r3, #8]
 8014550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014554:	d004      	beq.n	8014560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	689b      	ldr	r3, [r3, #8]
 801455a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801455e:	d107      	bne.n	8014570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801456e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014578:	d10f      	bne.n	801459a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014588:	601a      	str	r2, [r3, #0]
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2201      	movs	r2, #1
 801459e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2200      	movs	r2, #0
 80145a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80145aa:	2303      	movs	r3, #3
 80145ac:	e017      	b.n	80145de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d101      	bne.n	80145b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80145b4:	2300      	movs	r3, #0
 80145b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	3b01      	subs	r3, #1
 80145bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	689a      	ldr	r2, [r3, #8]
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	4013      	ands	r3, r2
 80145c8:	68ba      	ldr	r2, [r7, #8]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	bf0c      	ite	eq
 80145ce:	2301      	moveq	r3, #1
 80145d0:	2300      	movne	r3, #0
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	461a      	mov	r2, r3
 80145d6:	79fb      	ldrb	r3, [r7, #7]
 80145d8:	429a      	cmp	r2, r3
 80145da:	d19b      	bne.n	8014514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80145dc:	2300      	movs	r3, #0
}
 80145de:	4618      	mov	r0, r3
 80145e0:	3720      	adds	r7, #32
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	bf00      	nop
 80145e8:	20000004 	.word	0x20000004

080145ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b086      	sub	sp, #24
 80145f0:	af02      	add	r7, sp, #8
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	685b      	ldr	r3, [r3, #4]
 80145fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014600:	d111      	bne.n	8014626 <SPI_EndRxTransaction+0x3a>
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	689b      	ldr	r3, [r3, #8]
 8014606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801460a:	d004      	beq.n	8014616 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	689b      	ldr	r3, [r3, #8]
 8014610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014614:	d107      	bne.n	8014626 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014624:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801462e:	d12a      	bne.n	8014686 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	689b      	ldr	r3, [r3, #8]
 8014634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014638:	d012      	beq.n	8014660 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	9300      	str	r3, [sp, #0]
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	2200      	movs	r2, #0
 8014642:	2180      	movs	r1, #128	; 0x80
 8014644:	68f8      	ldr	r0, [r7, #12]
 8014646:	f7ff ff49 	bl	80144dc <SPI_WaitFlagStateUntilTimeout>
 801464a:	4603      	mov	r3, r0
 801464c:	2b00      	cmp	r3, #0
 801464e:	d02d      	beq.n	80146ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014654:	f043 0220 	orr.w	r2, r3, #32
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801465c:	2303      	movs	r3, #3
 801465e:	e026      	b.n	80146ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	2200      	movs	r2, #0
 8014668:	2101      	movs	r1, #1
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f7ff ff36 	bl	80144dc <SPI_WaitFlagStateUntilTimeout>
 8014670:	4603      	mov	r3, r0
 8014672:	2b00      	cmp	r3, #0
 8014674:	d01a      	beq.n	80146ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801467a:	f043 0220 	orr.w	r2, r3, #32
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014682:	2303      	movs	r3, #3
 8014684:	e013      	b.n	80146ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	9300      	str	r3, [sp, #0]
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	2200      	movs	r2, #0
 801468e:	2101      	movs	r1, #1
 8014690:	68f8      	ldr	r0, [r7, #12]
 8014692:	f7ff ff23 	bl	80144dc <SPI_WaitFlagStateUntilTimeout>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d007      	beq.n	80146ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146a0:	f043 0220 	orr.w	r2, r3, #32
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80146a8:	2303      	movs	r3, #3
 80146aa:	e000      	b.n	80146ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80146ac:	2300      	movs	r3, #0
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3710      	adds	r7, #16
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
	...

080146b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b088      	sub	sp, #32
 80146bc:	af02      	add	r7, sp, #8
 80146be:	60f8      	str	r0, [r7, #12]
 80146c0:	60b9      	str	r1, [r7, #8]
 80146c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80146c4:	4b1b      	ldr	r3, [pc, #108]	; (8014734 <SPI_EndRxTxTransaction+0x7c>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	4a1b      	ldr	r2, [pc, #108]	; (8014738 <SPI_EndRxTxTransaction+0x80>)
 80146ca:	fba2 2303 	umull	r2, r3, r2, r3
 80146ce:	0d5b      	lsrs	r3, r3, #21
 80146d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80146d4:	fb02 f303 	mul.w	r3, r2, r3
 80146d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80146e2:	d112      	bne.n	801470a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	9300      	str	r3, [sp, #0]
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	2200      	movs	r2, #0
 80146ec:	2180      	movs	r1, #128	; 0x80
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	f7ff fef4 	bl	80144dc <SPI_WaitFlagStateUntilTimeout>
 80146f4:	4603      	mov	r3, r0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d016      	beq.n	8014728 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146fe:	f043 0220 	orr.w	r2, r3, #32
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014706:	2303      	movs	r3, #3
 8014708:	e00f      	b.n	801472a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d00a      	beq.n	8014726 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	3b01      	subs	r3, #1
 8014714:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014720:	2b80      	cmp	r3, #128	; 0x80
 8014722:	d0f2      	beq.n	801470a <SPI_EndRxTxTransaction+0x52>
 8014724:	e000      	b.n	8014728 <SPI_EndRxTxTransaction+0x70>
        break;
 8014726:	bf00      	nop
  }

  return HAL_OK;
 8014728:	2300      	movs	r3, #0
}
 801472a:	4618      	mov	r0, r3
 801472c:	3718      	adds	r7, #24
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	20000004 	.word	0x20000004
 8014738:	165e9f81 	.word	0x165e9f81

0801473c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d101      	bne.n	801474e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801474a:	2301      	movs	r3, #1
 801474c:	e041      	b.n	80147d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014754:	b2db      	uxtb	r3, r3
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2200      	movs	r2, #0
 801475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f7ef ff80 	bl	8004668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2202      	movs	r2, #2
 801476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681a      	ldr	r2, [r3, #0]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	3304      	adds	r3, #4
 8014778:	4619      	mov	r1, r3
 801477a:	4610      	mov	r0, r2
 801477c:	f000 fd8c 	bl	8015298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2201      	movs	r2, #1
 8014784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2201      	movs	r2, #1
 801478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2201      	movs	r2, #1
 8014794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2201      	movs	r2, #1
 801479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2201      	movs	r2, #1
 80147a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2201      	movs	r2, #1
 80147ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2201      	movs	r2, #1
 80147b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2201      	movs	r2, #1
 80147bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2201      	movs	r2, #1
 80147c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2201      	movs	r2, #1
 80147cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80147d0:	2300      	movs	r3, #0
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
	...

080147dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	2b01      	cmp	r3, #1
 80147ee:	d001      	beq.n	80147f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80147f0:	2301      	movs	r3, #1
 80147f2:	e046      	b.n	8014882 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2202      	movs	r2, #2
 80147f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4a23      	ldr	r2, [pc, #140]	; (8014890 <HAL_TIM_Base_Start+0xb4>)
 8014802:	4293      	cmp	r3, r2
 8014804:	d022      	beq.n	801484c <HAL_TIM_Base_Start+0x70>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801480e:	d01d      	beq.n	801484c <HAL_TIM_Base_Start+0x70>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4a1f      	ldr	r2, [pc, #124]	; (8014894 <HAL_TIM_Base_Start+0xb8>)
 8014816:	4293      	cmp	r3, r2
 8014818:	d018      	beq.n	801484c <HAL_TIM_Base_Start+0x70>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	4a1e      	ldr	r2, [pc, #120]	; (8014898 <HAL_TIM_Base_Start+0xbc>)
 8014820:	4293      	cmp	r3, r2
 8014822:	d013      	beq.n	801484c <HAL_TIM_Base_Start+0x70>
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	4a1c      	ldr	r2, [pc, #112]	; (801489c <HAL_TIM_Base_Start+0xc0>)
 801482a:	4293      	cmp	r3, r2
 801482c:	d00e      	beq.n	801484c <HAL_TIM_Base_Start+0x70>
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	4a1b      	ldr	r2, [pc, #108]	; (80148a0 <HAL_TIM_Base_Start+0xc4>)
 8014834:	4293      	cmp	r3, r2
 8014836:	d009      	beq.n	801484c <HAL_TIM_Base_Start+0x70>
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4a19      	ldr	r2, [pc, #100]	; (80148a4 <HAL_TIM_Base_Start+0xc8>)
 801483e:	4293      	cmp	r3, r2
 8014840:	d004      	beq.n	801484c <HAL_TIM_Base_Start+0x70>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4a18      	ldr	r2, [pc, #96]	; (80148a8 <HAL_TIM_Base_Start+0xcc>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d111      	bne.n	8014870 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	689b      	ldr	r3, [r3, #8]
 8014852:	f003 0307 	and.w	r3, r3, #7
 8014856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2b06      	cmp	r3, #6
 801485c:	d010      	beq.n	8014880 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	681a      	ldr	r2, [r3, #0]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	f042 0201 	orr.w	r2, r2, #1
 801486c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801486e:	e007      	b.n	8014880 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	681a      	ldr	r2, [r3, #0]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f042 0201 	orr.w	r2, r2, #1
 801487e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014880:	2300      	movs	r3, #0
}
 8014882:	4618      	mov	r0, r3
 8014884:	3714      	adds	r7, #20
 8014886:	46bd      	mov	sp, r7
 8014888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488c:	4770      	bx	lr
 801488e:	bf00      	nop
 8014890:	40010000 	.word	0x40010000
 8014894:	40000400 	.word	0x40000400
 8014898:	40000800 	.word	0x40000800
 801489c:	40000c00 	.word	0x40000c00
 80148a0:	40010400 	.word	0x40010400
 80148a4:	40014000 	.word	0x40014000
 80148a8:	40001800 	.word	0x40001800

080148ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80148ac:	b480      	push	{r7}
 80148ae:	b085      	sub	sp, #20
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	2b01      	cmp	r3, #1
 80148be:	d001      	beq.n	80148c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80148c0:	2301      	movs	r3, #1
 80148c2:	e04e      	b.n	8014962 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2202      	movs	r2, #2
 80148c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	68da      	ldr	r2, [r3, #12]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f042 0201 	orr.w	r2, r2, #1
 80148da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	4a23      	ldr	r2, [pc, #140]	; (8014970 <HAL_TIM_Base_Start_IT+0xc4>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d022      	beq.n	801492c <HAL_TIM_Base_Start_IT+0x80>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80148ee:	d01d      	beq.n	801492c <HAL_TIM_Base_Start_IT+0x80>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	4a1f      	ldr	r2, [pc, #124]	; (8014974 <HAL_TIM_Base_Start_IT+0xc8>)
 80148f6:	4293      	cmp	r3, r2
 80148f8:	d018      	beq.n	801492c <HAL_TIM_Base_Start_IT+0x80>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	4a1e      	ldr	r2, [pc, #120]	; (8014978 <HAL_TIM_Base_Start_IT+0xcc>)
 8014900:	4293      	cmp	r3, r2
 8014902:	d013      	beq.n	801492c <HAL_TIM_Base_Start_IT+0x80>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	4a1c      	ldr	r2, [pc, #112]	; (801497c <HAL_TIM_Base_Start_IT+0xd0>)
 801490a:	4293      	cmp	r3, r2
 801490c:	d00e      	beq.n	801492c <HAL_TIM_Base_Start_IT+0x80>
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	4a1b      	ldr	r2, [pc, #108]	; (8014980 <HAL_TIM_Base_Start_IT+0xd4>)
 8014914:	4293      	cmp	r3, r2
 8014916:	d009      	beq.n	801492c <HAL_TIM_Base_Start_IT+0x80>
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4a19      	ldr	r2, [pc, #100]	; (8014984 <HAL_TIM_Base_Start_IT+0xd8>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d004      	beq.n	801492c <HAL_TIM_Base_Start_IT+0x80>
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	4a18      	ldr	r2, [pc, #96]	; (8014988 <HAL_TIM_Base_Start_IT+0xdc>)
 8014928:	4293      	cmp	r3, r2
 801492a:	d111      	bne.n	8014950 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	f003 0307 	and.w	r3, r3, #7
 8014936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2b06      	cmp	r3, #6
 801493c:	d010      	beq.n	8014960 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	f042 0201 	orr.w	r2, r2, #1
 801494c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801494e:	e007      	b.n	8014960 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	f042 0201 	orr.w	r2, r2, #1
 801495e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014960:	2300      	movs	r3, #0
}
 8014962:	4618      	mov	r0, r3
 8014964:	3714      	adds	r7, #20
 8014966:	46bd      	mov	sp, r7
 8014968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496c:	4770      	bx	lr
 801496e:	bf00      	nop
 8014970:	40010000 	.word	0x40010000
 8014974:	40000400 	.word	0x40000400
 8014978:	40000800 	.word	0x40000800
 801497c:	40000c00 	.word	0x40000c00
 8014980:	40010400 	.word	0x40010400
 8014984:	40014000 	.word	0x40014000
 8014988:	40001800 	.word	0x40001800

0801498c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d101      	bne.n	801499e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801499a:	2301      	movs	r3, #1
 801499c:	e041      	b.n	8014a22 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d106      	bne.n	80149b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2200      	movs	r2, #0
 80149ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f000 f839 	bl	8014a2a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2202      	movs	r2, #2
 80149bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681a      	ldr	r2, [r3, #0]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	3304      	adds	r3, #4
 80149c8:	4619      	mov	r1, r3
 80149ca:	4610      	mov	r0, r2
 80149cc:	f000 fc64 	bl	8015298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2201      	movs	r2, #1
 80149d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2201      	movs	r2, #1
 80149dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2201      	movs	r2, #1
 80149e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2201      	movs	r2, #1
 80149ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2201      	movs	r2, #1
 80149f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2201      	movs	r2, #1
 80149fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2201      	movs	r2, #1
 8014a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2201      	movs	r2, #1
 8014a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2201      	movs	r2, #1
 8014a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014a20:	2300      	movs	r3, #0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3708      	adds	r7, #8
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}

08014a2a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8014a2a:	b480      	push	{r7}
 8014a2c:	b083      	sub	sp, #12
 8014a2e:	af00      	add	r7, sp, #0
 8014a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8014a32:	bf00      	nop
 8014a34:	370c      	adds	r7, #12
 8014a36:	46bd      	mov	sp, r7
 8014a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3c:	4770      	bx	lr

08014a3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014a3e:	b580      	push	{r7, lr}
 8014a40:	b082      	sub	sp, #8
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d101      	bne.n	8014a50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	e041      	b.n	8014ad4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d106      	bne.n	8014a6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f7ef fdb1 	bl	80045cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2202      	movs	r2, #2
 8014a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	3304      	adds	r3, #4
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	4610      	mov	r0, r2
 8014a7e:	f000 fc0b 	bl	8015298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2201      	movs	r2, #1
 8014a86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2201      	movs	r2, #1
 8014a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2201      	movs	r2, #1
 8014a96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2201      	movs	r2, #1
 8014aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	2201      	movs	r2, #1
 8014abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2201      	movs	r2, #1
 8014ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2201      	movs	r2, #1
 8014ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014ad2:	2300      	movs	r3, #0
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3708      	adds	r7, #8
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d109      	bne.n	8014b00 <HAL_TIM_PWM_Start+0x24>
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	bf14      	ite	ne
 8014af8:	2301      	movne	r3, #1
 8014afa:	2300      	moveq	r3, #0
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	e022      	b.n	8014b46 <HAL_TIM_PWM_Start+0x6a>
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	2b04      	cmp	r3, #4
 8014b04:	d109      	bne.n	8014b1a <HAL_TIM_PWM_Start+0x3e>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014b0c:	b2db      	uxtb	r3, r3
 8014b0e:	2b01      	cmp	r3, #1
 8014b10:	bf14      	ite	ne
 8014b12:	2301      	movne	r3, #1
 8014b14:	2300      	moveq	r3, #0
 8014b16:	b2db      	uxtb	r3, r3
 8014b18:	e015      	b.n	8014b46 <HAL_TIM_PWM_Start+0x6a>
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	2b08      	cmp	r3, #8
 8014b1e:	d109      	bne.n	8014b34 <HAL_TIM_PWM_Start+0x58>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014b26:	b2db      	uxtb	r3, r3
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	bf14      	ite	ne
 8014b2c:	2301      	movne	r3, #1
 8014b2e:	2300      	moveq	r3, #0
 8014b30:	b2db      	uxtb	r3, r3
 8014b32:	e008      	b.n	8014b46 <HAL_TIM_PWM_Start+0x6a>
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	bf14      	ite	ne
 8014b40:	2301      	movne	r3, #1
 8014b42:	2300      	moveq	r3, #0
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d001      	beq.n	8014b4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	e07c      	b.n	8014c48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d104      	bne.n	8014b5e <HAL_TIM_PWM_Start+0x82>
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2202      	movs	r2, #2
 8014b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014b5c:	e013      	b.n	8014b86 <HAL_TIM_PWM_Start+0xaa>
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	2b04      	cmp	r3, #4
 8014b62:	d104      	bne.n	8014b6e <HAL_TIM_PWM_Start+0x92>
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2202      	movs	r2, #2
 8014b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014b6c:	e00b      	b.n	8014b86 <HAL_TIM_PWM_Start+0xaa>
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	2b08      	cmp	r3, #8
 8014b72:	d104      	bne.n	8014b7e <HAL_TIM_PWM_Start+0xa2>
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2202      	movs	r2, #2
 8014b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014b7c:	e003      	b.n	8014b86 <HAL_TIM_PWM_Start+0xaa>
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2202      	movs	r2, #2
 8014b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	2201      	movs	r2, #1
 8014b8c:	6839      	ldr	r1, [r7, #0]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f000 fe6c 	bl	801586c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4a2d      	ldr	r2, [pc, #180]	; (8014c50 <HAL_TIM_PWM_Start+0x174>)
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	d004      	beq.n	8014ba8 <HAL_TIM_PWM_Start+0xcc>
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	4a2c      	ldr	r2, [pc, #176]	; (8014c54 <HAL_TIM_PWM_Start+0x178>)
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	d101      	bne.n	8014bac <HAL_TIM_PWM_Start+0xd0>
 8014ba8:	2301      	movs	r3, #1
 8014baa:	e000      	b.n	8014bae <HAL_TIM_PWM_Start+0xd2>
 8014bac:	2300      	movs	r3, #0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d007      	beq.n	8014bc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	4a22      	ldr	r2, [pc, #136]	; (8014c50 <HAL_TIM_PWM_Start+0x174>)
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	d022      	beq.n	8014c12 <HAL_TIM_PWM_Start+0x136>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014bd4:	d01d      	beq.n	8014c12 <HAL_TIM_PWM_Start+0x136>
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	4a1f      	ldr	r2, [pc, #124]	; (8014c58 <HAL_TIM_PWM_Start+0x17c>)
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	d018      	beq.n	8014c12 <HAL_TIM_PWM_Start+0x136>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4a1d      	ldr	r2, [pc, #116]	; (8014c5c <HAL_TIM_PWM_Start+0x180>)
 8014be6:	4293      	cmp	r3, r2
 8014be8:	d013      	beq.n	8014c12 <HAL_TIM_PWM_Start+0x136>
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	4a1c      	ldr	r2, [pc, #112]	; (8014c60 <HAL_TIM_PWM_Start+0x184>)
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	d00e      	beq.n	8014c12 <HAL_TIM_PWM_Start+0x136>
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	4a16      	ldr	r2, [pc, #88]	; (8014c54 <HAL_TIM_PWM_Start+0x178>)
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	d009      	beq.n	8014c12 <HAL_TIM_PWM_Start+0x136>
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	4a18      	ldr	r2, [pc, #96]	; (8014c64 <HAL_TIM_PWM_Start+0x188>)
 8014c04:	4293      	cmp	r3, r2
 8014c06:	d004      	beq.n	8014c12 <HAL_TIM_PWM_Start+0x136>
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	4a16      	ldr	r2, [pc, #88]	; (8014c68 <HAL_TIM_PWM_Start+0x18c>)
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	d111      	bne.n	8014c36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	689b      	ldr	r3, [r3, #8]
 8014c18:	f003 0307 	and.w	r3, r3, #7
 8014c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	2b06      	cmp	r3, #6
 8014c22:	d010      	beq.n	8014c46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f042 0201 	orr.w	r2, r2, #1
 8014c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014c34:	e007      	b.n	8014c46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	681a      	ldr	r2, [r3, #0]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f042 0201 	orr.w	r2, r2, #1
 8014c44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014c46:	2300      	movs	r3, #0
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3710      	adds	r7, #16
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}
 8014c50:	40010000 	.word	0x40010000
 8014c54:	40010400 	.word	0x40010400
 8014c58:	40000400 	.word	0x40000400
 8014c5c:	40000800 	.word	0x40000800
 8014c60:	40000c00 	.word	0x40000c00
 8014c64:	40014000 	.word	0x40014000
 8014c68:	40001800 	.word	0x40001800

08014c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	691b      	ldr	r3, [r3, #16]
 8014c7a:	f003 0302 	and.w	r3, r3, #2
 8014c7e:	2b02      	cmp	r3, #2
 8014c80:	d122      	bne.n	8014cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	68db      	ldr	r3, [r3, #12]
 8014c88:	f003 0302 	and.w	r3, r3, #2
 8014c8c:	2b02      	cmp	r3, #2
 8014c8e:	d11b      	bne.n	8014cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	f06f 0202 	mvn.w	r2, #2
 8014c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2201      	movs	r2, #1
 8014c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	699b      	ldr	r3, [r3, #24]
 8014ca6:	f003 0303 	and.w	r3, r3, #3
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d003      	beq.n	8014cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f000 fad3 	bl	801525a <HAL_TIM_IC_CaptureCallback>
 8014cb4:	e005      	b.n	8014cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 fac5 	bl	8015246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f000 fad6 	bl	801526e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	691b      	ldr	r3, [r3, #16]
 8014cce:	f003 0304 	and.w	r3, r3, #4
 8014cd2:	2b04      	cmp	r3, #4
 8014cd4:	d122      	bne.n	8014d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	68db      	ldr	r3, [r3, #12]
 8014cdc:	f003 0304 	and.w	r3, r3, #4
 8014ce0:	2b04      	cmp	r3, #4
 8014ce2:	d11b      	bne.n	8014d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	f06f 0204 	mvn.w	r2, #4
 8014cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2202      	movs	r2, #2
 8014cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	699b      	ldr	r3, [r3, #24]
 8014cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d003      	beq.n	8014d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f000 faa9 	bl	801525a <HAL_TIM_IC_CaptureCallback>
 8014d08:	e005      	b.n	8014d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f000 fa9b 	bl	8015246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f000 faac 	bl	801526e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	691b      	ldr	r3, [r3, #16]
 8014d22:	f003 0308 	and.w	r3, r3, #8
 8014d26:	2b08      	cmp	r3, #8
 8014d28:	d122      	bne.n	8014d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	f003 0308 	and.w	r3, r3, #8
 8014d34:	2b08      	cmp	r3, #8
 8014d36:	d11b      	bne.n	8014d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	f06f 0208 	mvn.w	r2, #8
 8014d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2204      	movs	r2, #4
 8014d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	69db      	ldr	r3, [r3, #28]
 8014d4e:	f003 0303 	and.w	r3, r3, #3
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d003      	beq.n	8014d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f000 fa7f 	bl	801525a <HAL_TIM_IC_CaptureCallback>
 8014d5c:	e005      	b.n	8014d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f000 fa71 	bl	8015246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	f000 fa82 	bl	801526e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	691b      	ldr	r3, [r3, #16]
 8014d76:	f003 0310 	and.w	r3, r3, #16
 8014d7a:	2b10      	cmp	r3, #16
 8014d7c:	d122      	bne.n	8014dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	f003 0310 	and.w	r3, r3, #16
 8014d88:	2b10      	cmp	r3, #16
 8014d8a:	d11b      	bne.n	8014dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	f06f 0210 	mvn.w	r2, #16
 8014d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2208      	movs	r2, #8
 8014d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	69db      	ldr	r3, [r3, #28]
 8014da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d003      	beq.n	8014db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f000 fa55 	bl	801525a <HAL_TIM_IC_CaptureCallback>
 8014db0:	e005      	b.n	8014dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f000 fa47 	bl	8015246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f000 fa58 	bl	801526e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	691b      	ldr	r3, [r3, #16]
 8014dca:	f003 0301 	and.w	r3, r3, #1
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d10e      	bne.n	8014df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	f003 0301 	and.w	r3, r3, #1
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	d107      	bne.n	8014df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	f06f 0201 	mvn.w	r2, #1
 8014de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f7ee fede 	bl	8003bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	691b      	ldr	r3, [r3, #16]
 8014df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014dfa:	2b80      	cmp	r3, #128	; 0x80
 8014dfc:	d10e      	bne.n	8014e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	68db      	ldr	r3, [r3, #12]
 8014e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e08:	2b80      	cmp	r3, #128	; 0x80
 8014e0a:	d107      	bne.n	8014e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	f000 fe26 	bl	8015a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	691b      	ldr	r3, [r3, #16]
 8014e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e26:	2b40      	cmp	r3, #64	; 0x40
 8014e28:	d10e      	bne.n	8014e48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e34:	2b40      	cmp	r3, #64	; 0x40
 8014e36:	d107      	bne.n	8014e48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f000 fa1d 	bl	8015282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	691b      	ldr	r3, [r3, #16]
 8014e4e:	f003 0320 	and.w	r3, r3, #32
 8014e52:	2b20      	cmp	r3, #32
 8014e54:	d10e      	bne.n	8014e74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	68db      	ldr	r3, [r3, #12]
 8014e5c:	f003 0320 	and.w	r3, r3, #32
 8014e60:	2b20      	cmp	r3, #32
 8014e62:	d107      	bne.n	8014e74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	f06f 0220 	mvn.w	r2, #32
 8014e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014e6e:	6878      	ldr	r0, [r7, #4]
 8014e70:	f000 fdf0 	bl	8015a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014e74:	bf00      	nop
 8014e76:	3708      	adds	r7, #8
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b086      	sub	sp, #24
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	60f8      	str	r0, [r7, #12]
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014e92:	2b01      	cmp	r3, #1
 8014e94:	d101      	bne.n	8014e9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8014e96:	2302      	movs	r3, #2
 8014e98:	e048      	b.n	8014f2c <HAL_TIM_OC_ConfigChannel+0xb0>
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	2201      	movs	r2, #1
 8014e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2b0c      	cmp	r3, #12
 8014ea6:	d839      	bhi.n	8014f1c <HAL_TIM_OC_ConfigChannel+0xa0>
 8014ea8:	a201      	add	r2, pc, #4	; (adr r2, 8014eb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8014eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014eae:	bf00      	nop
 8014eb0:	08014ee5 	.word	0x08014ee5
 8014eb4:	08014f1d 	.word	0x08014f1d
 8014eb8:	08014f1d 	.word	0x08014f1d
 8014ebc:	08014f1d 	.word	0x08014f1d
 8014ec0:	08014ef3 	.word	0x08014ef3
 8014ec4:	08014f1d 	.word	0x08014f1d
 8014ec8:	08014f1d 	.word	0x08014f1d
 8014ecc:	08014f1d 	.word	0x08014f1d
 8014ed0:	08014f01 	.word	0x08014f01
 8014ed4:	08014f1d 	.word	0x08014f1d
 8014ed8:	08014f1d 	.word	0x08014f1d
 8014edc:	08014f1d 	.word	0x08014f1d
 8014ee0:	08014f0f 	.word	0x08014f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	68b9      	ldr	r1, [r7, #8]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f000 fa74 	bl	80153d8 <TIM_OC1_SetConfig>
      break;
 8014ef0:	e017      	b.n	8014f22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	68b9      	ldr	r1, [r7, #8]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f000 fadd 	bl	80154b8 <TIM_OC2_SetConfig>
      break;
 8014efe:	e010      	b.n	8014f22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	68b9      	ldr	r1, [r7, #8]
 8014f06:	4618      	mov	r0, r3
 8014f08:	f000 fb4c 	bl	80155a4 <TIM_OC3_SetConfig>
      break;
 8014f0c:	e009      	b.n	8014f22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	68b9      	ldr	r1, [r7, #8]
 8014f14:	4618      	mov	r0, r3
 8014f16:	f000 fbb9 	bl	801568c <TIM_OC4_SetConfig>
      break;
 8014f1a:	e002      	b.n	8014f22 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8014f20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2200      	movs	r2, #0
 8014f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3718      	adds	r7, #24
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b086      	sub	sp, #24
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	60f8      	str	r0, [r7, #12]
 8014f3c:	60b9      	str	r1, [r7, #8]
 8014f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014f40:	2300      	movs	r3, #0
 8014f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014f4a:	2b01      	cmp	r3, #1
 8014f4c:	d101      	bne.n	8014f52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014f4e:	2302      	movs	r3, #2
 8014f50:	e0ae      	b.n	80150b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	2201      	movs	r2, #1
 8014f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b0c      	cmp	r3, #12
 8014f5e:	f200 809f 	bhi.w	80150a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8014f62:	a201      	add	r2, pc, #4	; (adr r2, 8014f68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f68:	08014f9d 	.word	0x08014f9d
 8014f6c:	080150a1 	.word	0x080150a1
 8014f70:	080150a1 	.word	0x080150a1
 8014f74:	080150a1 	.word	0x080150a1
 8014f78:	08014fdd 	.word	0x08014fdd
 8014f7c:	080150a1 	.word	0x080150a1
 8014f80:	080150a1 	.word	0x080150a1
 8014f84:	080150a1 	.word	0x080150a1
 8014f88:	0801501f 	.word	0x0801501f
 8014f8c:	080150a1 	.word	0x080150a1
 8014f90:	080150a1 	.word	0x080150a1
 8014f94:	080150a1 	.word	0x080150a1
 8014f98:	0801505f 	.word	0x0801505f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	68b9      	ldr	r1, [r7, #8]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f000 fa18 	bl	80153d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	699a      	ldr	r2, [r3, #24]
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	f042 0208 	orr.w	r2, r2, #8
 8014fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	699a      	ldr	r2, [r3, #24]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	f022 0204 	bic.w	r2, r2, #4
 8014fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	6999      	ldr	r1, [r3, #24]
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	691a      	ldr	r2, [r3, #16]
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	430a      	orrs	r2, r1
 8014fd8:	619a      	str	r2, [r3, #24]
      break;
 8014fda:	e064      	b.n	80150a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	68b9      	ldr	r1, [r7, #8]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f000 fa68 	bl	80154b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	699a      	ldr	r2, [r3, #24]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	699a      	ldr	r2, [r3, #24]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	6999      	ldr	r1, [r3, #24]
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	691b      	ldr	r3, [r3, #16]
 8015012:	021a      	lsls	r2, r3, #8
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	430a      	orrs	r2, r1
 801501a:	619a      	str	r2, [r3, #24]
      break;
 801501c:	e043      	b.n	80150a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	68b9      	ldr	r1, [r7, #8]
 8015024:	4618      	mov	r0, r3
 8015026:	f000 fabd 	bl	80155a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	69da      	ldr	r2, [r3, #28]
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	f042 0208 	orr.w	r2, r2, #8
 8015038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	69da      	ldr	r2, [r3, #28]
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f022 0204 	bic.w	r2, r2, #4
 8015048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	69d9      	ldr	r1, [r3, #28]
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	691a      	ldr	r2, [r3, #16]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	430a      	orrs	r2, r1
 801505a:	61da      	str	r2, [r3, #28]
      break;
 801505c:	e023      	b.n	80150a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	68b9      	ldr	r1, [r7, #8]
 8015064:	4618      	mov	r0, r3
 8015066:	f000 fb11 	bl	801568c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	69da      	ldr	r2, [r3, #28]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	69da      	ldr	r2, [r3, #28]
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	69d9      	ldr	r1, [r3, #28]
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	691b      	ldr	r3, [r3, #16]
 8015094:	021a      	lsls	r2, r3, #8
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	430a      	orrs	r2, r1
 801509c:	61da      	str	r2, [r3, #28]
      break;
 801509e:	e002      	b.n	80150a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80150a0:	2301      	movs	r3, #1
 80150a2:	75fb      	strb	r3, [r7, #23]
      break;
 80150a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	2200      	movs	r2, #0
 80150aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80150ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80150c2:	2300      	movs	r3, #0
 80150c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d101      	bne.n	80150d4 <HAL_TIM_ConfigClockSource+0x1c>
 80150d0:	2302      	movs	r3, #2
 80150d2:	e0b4      	b.n	801523e <HAL_TIM_ConfigClockSource+0x186>
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2201      	movs	r2, #1
 80150d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2202      	movs	r2, #2
 80150e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	689b      	ldr	r3, [r3, #8]
 80150ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80150f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80150fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	68ba      	ldr	r2, [r7, #8]
 8015102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801510c:	d03e      	beq.n	801518c <HAL_TIM_ConfigClockSource+0xd4>
 801510e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015112:	f200 8087 	bhi.w	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 8015116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801511a:	f000 8086 	beq.w	801522a <HAL_TIM_ConfigClockSource+0x172>
 801511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015122:	d87f      	bhi.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 8015124:	2b70      	cmp	r3, #112	; 0x70
 8015126:	d01a      	beq.n	801515e <HAL_TIM_ConfigClockSource+0xa6>
 8015128:	2b70      	cmp	r3, #112	; 0x70
 801512a:	d87b      	bhi.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 801512c:	2b60      	cmp	r3, #96	; 0x60
 801512e:	d050      	beq.n	80151d2 <HAL_TIM_ConfigClockSource+0x11a>
 8015130:	2b60      	cmp	r3, #96	; 0x60
 8015132:	d877      	bhi.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 8015134:	2b50      	cmp	r3, #80	; 0x50
 8015136:	d03c      	beq.n	80151b2 <HAL_TIM_ConfigClockSource+0xfa>
 8015138:	2b50      	cmp	r3, #80	; 0x50
 801513a:	d873      	bhi.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 801513c:	2b40      	cmp	r3, #64	; 0x40
 801513e:	d058      	beq.n	80151f2 <HAL_TIM_ConfigClockSource+0x13a>
 8015140:	2b40      	cmp	r3, #64	; 0x40
 8015142:	d86f      	bhi.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 8015144:	2b30      	cmp	r3, #48	; 0x30
 8015146:	d064      	beq.n	8015212 <HAL_TIM_ConfigClockSource+0x15a>
 8015148:	2b30      	cmp	r3, #48	; 0x30
 801514a:	d86b      	bhi.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 801514c:	2b20      	cmp	r3, #32
 801514e:	d060      	beq.n	8015212 <HAL_TIM_ConfigClockSource+0x15a>
 8015150:	2b20      	cmp	r3, #32
 8015152:	d867      	bhi.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
 8015154:	2b00      	cmp	r3, #0
 8015156:	d05c      	beq.n	8015212 <HAL_TIM_ConfigClockSource+0x15a>
 8015158:	2b10      	cmp	r3, #16
 801515a:	d05a      	beq.n	8015212 <HAL_TIM_ConfigClockSource+0x15a>
 801515c:	e062      	b.n	8015224 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6818      	ldr	r0, [r3, #0]
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	6899      	ldr	r1, [r3, #8]
 8015166:	683b      	ldr	r3, [r7, #0]
 8015168:	685a      	ldr	r2, [r3, #4]
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	f000 fb5d 	bl	801582c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	689b      	ldr	r3, [r3, #8]
 8015178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	68ba      	ldr	r2, [r7, #8]
 8015188:	609a      	str	r2, [r3, #8]
      break;
 801518a:	e04f      	b.n	801522c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6818      	ldr	r0, [r3, #0]
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	6899      	ldr	r1, [r3, #8]
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	685a      	ldr	r2, [r3, #4]
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	f000 fb46 	bl	801582c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	689a      	ldr	r2, [r3, #8]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80151ae:	609a      	str	r2, [r3, #8]
      break;
 80151b0:	e03c      	b.n	801522c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6818      	ldr	r0, [r3, #0]
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	6859      	ldr	r1, [r3, #4]
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	68db      	ldr	r3, [r3, #12]
 80151be:	461a      	mov	r2, r3
 80151c0:	f000 faba 	bl	8015738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	2150      	movs	r1, #80	; 0x50
 80151ca:	4618      	mov	r0, r3
 80151cc:	f000 fb13 	bl	80157f6 <TIM_ITRx_SetConfig>
      break;
 80151d0:	e02c      	b.n	801522c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6818      	ldr	r0, [r3, #0]
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	6859      	ldr	r1, [r3, #4]
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	68db      	ldr	r3, [r3, #12]
 80151de:	461a      	mov	r2, r3
 80151e0:	f000 fad9 	bl	8015796 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	2160      	movs	r1, #96	; 0x60
 80151ea:	4618      	mov	r0, r3
 80151ec:	f000 fb03 	bl	80157f6 <TIM_ITRx_SetConfig>
      break;
 80151f0:	e01c      	b.n	801522c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6818      	ldr	r0, [r3, #0]
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	6859      	ldr	r1, [r3, #4]
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	68db      	ldr	r3, [r3, #12]
 80151fe:	461a      	mov	r2, r3
 8015200:	f000 fa9a 	bl	8015738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2140      	movs	r1, #64	; 0x40
 801520a:	4618      	mov	r0, r3
 801520c:	f000 faf3 	bl	80157f6 <TIM_ITRx_SetConfig>
      break;
 8015210:	e00c      	b.n	801522c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681a      	ldr	r2, [r3, #0]
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	4619      	mov	r1, r3
 801521c:	4610      	mov	r0, r2
 801521e:	f000 faea 	bl	80157f6 <TIM_ITRx_SetConfig>
      break;
 8015222:	e003      	b.n	801522c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8015224:	2301      	movs	r3, #1
 8015226:	73fb      	strb	r3, [r7, #15]
      break;
 8015228:	e000      	b.n	801522c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801522a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2201      	movs	r2, #1
 8015230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2200      	movs	r2, #0
 8015238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801523c:	7bfb      	ldrb	r3, [r7, #15]
}
 801523e:	4618      	mov	r0, r3
 8015240:	3710      	adds	r7, #16
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}

08015246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015246:	b480      	push	{r7}
 8015248:	b083      	sub	sp, #12
 801524a:	af00      	add	r7, sp, #0
 801524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801524e:	bf00      	nop
 8015250:	370c      	adds	r7, #12
 8015252:	46bd      	mov	sp, r7
 8015254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015258:	4770      	bx	lr

0801525a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801525a:	b480      	push	{r7}
 801525c:	b083      	sub	sp, #12
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015262:	bf00      	nop
 8015264:	370c      	adds	r7, #12
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801526e:	b480      	push	{r7}
 8015270:	b083      	sub	sp, #12
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015276:	bf00      	nop
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr

08015282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015282:	b480      	push	{r7}
 8015284:	b083      	sub	sp, #12
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801528a:	bf00      	nop
 801528c:	370c      	adds	r7, #12
 801528e:	46bd      	mov	sp, r7
 8015290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015294:	4770      	bx	lr
	...

08015298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015298:	b480      	push	{r7}
 801529a:	b085      	sub	sp, #20
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	4a40      	ldr	r2, [pc, #256]	; (80153ac <TIM_Base_SetConfig+0x114>)
 80152ac:	4293      	cmp	r3, r2
 80152ae:	d013      	beq.n	80152d8 <TIM_Base_SetConfig+0x40>
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152b6:	d00f      	beq.n	80152d8 <TIM_Base_SetConfig+0x40>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	4a3d      	ldr	r2, [pc, #244]	; (80153b0 <TIM_Base_SetConfig+0x118>)
 80152bc:	4293      	cmp	r3, r2
 80152be:	d00b      	beq.n	80152d8 <TIM_Base_SetConfig+0x40>
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	4a3c      	ldr	r2, [pc, #240]	; (80153b4 <TIM_Base_SetConfig+0x11c>)
 80152c4:	4293      	cmp	r3, r2
 80152c6:	d007      	beq.n	80152d8 <TIM_Base_SetConfig+0x40>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	4a3b      	ldr	r2, [pc, #236]	; (80153b8 <TIM_Base_SetConfig+0x120>)
 80152cc:	4293      	cmp	r3, r2
 80152ce:	d003      	beq.n	80152d8 <TIM_Base_SetConfig+0x40>
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	4a3a      	ldr	r2, [pc, #232]	; (80153bc <TIM_Base_SetConfig+0x124>)
 80152d4:	4293      	cmp	r3, r2
 80152d6:	d108      	bne.n	80152ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	4313      	orrs	r3, r2
 80152e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4a2f      	ldr	r2, [pc, #188]	; (80153ac <TIM_Base_SetConfig+0x114>)
 80152ee:	4293      	cmp	r3, r2
 80152f0:	d02b      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152f8:	d027      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	4a2c      	ldr	r2, [pc, #176]	; (80153b0 <TIM_Base_SetConfig+0x118>)
 80152fe:	4293      	cmp	r3, r2
 8015300:	d023      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	4a2b      	ldr	r2, [pc, #172]	; (80153b4 <TIM_Base_SetConfig+0x11c>)
 8015306:	4293      	cmp	r3, r2
 8015308:	d01f      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	4a2a      	ldr	r2, [pc, #168]	; (80153b8 <TIM_Base_SetConfig+0x120>)
 801530e:	4293      	cmp	r3, r2
 8015310:	d01b      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	4a29      	ldr	r2, [pc, #164]	; (80153bc <TIM_Base_SetConfig+0x124>)
 8015316:	4293      	cmp	r3, r2
 8015318:	d017      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	4a28      	ldr	r2, [pc, #160]	; (80153c0 <TIM_Base_SetConfig+0x128>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d013      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	4a27      	ldr	r2, [pc, #156]	; (80153c4 <TIM_Base_SetConfig+0x12c>)
 8015326:	4293      	cmp	r3, r2
 8015328:	d00f      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4a26      	ldr	r2, [pc, #152]	; (80153c8 <TIM_Base_SetConfig+0x130>)
 801532e:	4293      	cmp	r3, r2
 8015330:	d00b      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	4a25      	ldr	r2, [pc, #148]	; (80153cc <TIM_Base_SetConfig+0x134>)
 8015336:	4293      	cmp	r3, r2
 8015338:	d007      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	4a24      	ldr	r2, [pc, #144]	; (80153d0 <TIM_Base_SetConfig+0x138>)
 801533e:	4293      	cmp	r3, r2
 8015340:	d003      	beq.n	801534a <TIM_Base_SetConfig+0xb2>
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	4a23      	ldr	r2, [pc, #140]	; (80153d4 <TIM_Base_SetConfig+0x13c>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d108      	bne.n	801535c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	68db      	ldr	r3, [r3, #12]
 8015356:	68fa      	ldr	r2, [r7, #12]
 8015358:	4313      	orrs	r3, r2
 801535a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	695b      	ldr	r3, [r3, #20]
 8015366:	4313      	orrs	r3, r2
 8015368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	68fa      	ldr	r2, [r7, #12]
 801536e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	689a      	ldr	r2, [r3, #8]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	681a      	ldr	r2, [r3, #0]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	4a0a      	ldr	r2, [pc, #40]	; (80153ac <TIM_Base_SetConfig+0x114>)
 8015384:	4293      	cmp	r3, r2
 8015386:	d003      	beq.n	8015390 <TIM_Base_SetConfig+0xf8>
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	4a0c      	ldr	r2, [pc, #48]	; (80153bc <TIM_Base_SetConfig+0x124>)
 801538c:	4293      	cmp	r3, r2
 801538e:	d103      	bne.n	8015398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	691a      	ldr	r2, [r3, #16]
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2201      	movs	r2, #1
 801539c:	615a      	str	r2, [r3, #20]
}
 801539e:	bf00      	nop
 80153a0:	3714      	adds	r7, #20
 80153a2:	46bd      	mov	sp, r7
 80153a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a8:	4770      	bx	lr
 80153aa:	bf00      	nop
 80153ac:	40010000 	.word	0x40010000
 80153b0:	40000400 	.word	0x40000400
 80153b4:	40000800 	.word	0x40000800
 80153b8:	40000c00 	.word	0x40000c00
 80153bc:	40010400 	.word	0x40010400
 80153c0:	40014000 	.word	0x40014000
 80153c4:	40014400 	.word	0x40014400
 80153c8:	40014800 	.word	0x40014800
 80153cc:	40001800 	.word	0x40001800
 80153d0:	40001c00 	.word	0x40001c00
 80153d4:	40002000 	.word	0x40002000

080153d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80153d8:	b480      	push	{r7}
 80153da:	b087      	sub	sp, #28
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6a1b      	ldr	r3, [r3, #32]
 80153e6:	f023 0201 	bic.w	r2, r3, #1
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6a1b      	ldr	r3, [r3, #32]
 80153f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	699b      	ldr	r3, [r3, #24]
 80153fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f023 0303 	bic.w	r3, r3, #3
 801540e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68fa      	ldr	r2, [r7, #12]
 8015416:	4313      	orrs	r3, r2
 8015418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	f023 0302 	bic.w	r3, r3, #2
 8015420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	689b      	ldr	r3, [r3, #8]
 8015426:	697a      	ldr	r2, [r7, #20]
 8015428:	4313      	orrs	r3, r2
 801542a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	4a20      	ldr	r2, [pc, #128]	; (80154b0 <TIM_OC1_SetConfig+0xd8>)
 8015430:	4293      	cmp	r3, r2
 8015432:	d003      	beq.n	801543c <TIM_OC1_SetConfig+0x64>
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	4a1f      	ldr	r2, [pc, #124]	; (80154b4 <TIM_OC1_SetConfig+0xdc>)
 8015438:	4293      	cmp	r3, r2
 801543a:	d10c      	bne.n	8015456 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	f023 0308 	bic.w	r3, r3, #8
 8015442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	68db      	ldr	r3, [r3, #12]
 8015448:	697a      	ldr	r2, [r7, #20]
 801544a:	4313      	orrs	r3, r2
 801544c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	f023 0304 	bic.w	r3, r3, #4
 8015454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	4a15      	ldr	r2, [pc, #84]	; (80154b0 <TIM_OC1_SetConfig+0xd8>)
 801545a:	4293      	cmp	r3, r2
 801545c:	d003      	beq.n	8015466 <TIM_OC1_SetConfig+0x8e>
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	4a14      	ldr	r2, [pc, #80]	; (80154b4 <TIM_OC1_SetConfig+0xdc>)
 8015462:	4293      	cmp	r3, r2
 8015464:	d111      	bne.n	801548a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801546c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	695b      	ldr	r3, [r3, #20]
 801547a:	693a      	ldr	r2, [r7, #16]
 801547c:	4313      	orrs	r3, r2
 801547e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	699b      	ldr	r3, [r3, #24]
 8015484:	693a      	ldr	r2, [r7, #16]
 8015486:	4313      	orrs	r3, r2
 8015488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	693a      	ldr	r2, [r7, #16]
 801548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	68fa      	ldr	r2, [r7, #12]
 8015494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	685a      	ldr	r2, [r3, #4]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	697a      	ldr	r2, [r7, #20]
 80154a2:	621a      	str	r2, [r3, #32]
}
 80154a4:	bf00      	nop
 80154a6:	371c      	adds	r7, #28
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr
 80154b0:	40010000 	.word	0x40010000
 80154b4:	40010400 	.word	0x40010400

080154b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80154b8:	b480      	push	{r7}
 80154ba:	b087      	sub	sp, #28
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
 80154c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6a1b      	ldr	r3, [r3, #32]
 80154c6:	f023 0210 	bic.w	r2, r3, #16
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	6a1b      	ldr	r3, [r3, #32]
 80154d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	685b      	ldr	r3, [r3, #4]
 80154d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	699b      	ldr	r3, [r3, #24]
 80154de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80154e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80154ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	021b      	lsls	r3, r3, #8
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	4313      	orrs	r3, r2
 80154fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	f023 0320 	bic.w	r3, r3, #32
 8015502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	689b      	ldr	r3, [r3, #8]
 8015508:	011b      	lsls	r3, r3, #4
 801550a:	697a      	ldr	r2, [r7, #20]
 801550c:	4313      	orrs	r3, r2
 801550e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	4a22      	ldr	r2, [pc, #136]	; (801559c <TIM_OC2_SetConfig+0xe4>)
 8015514:	4293      	cmp	r3, r2
 8015516:	d003      	beq.n	8015520 <TIM_OC2_SetConfig+0x68>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	4a21      	ldr	r2, [pc, #132]	; (80155a0 <TIM_OC2_SetConfig+0xe8>)
 801551c:	4293      	cmp	r3, r2
 801551e:	d10d      	bne.n	801553c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	011b      	lsls	r3, r3, #4
 801552e:	697a      	ldr	r2, [r7, #20]
 8015530:	4313      	orrs	r3, r2
 8015532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801553a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	4a17      	ldr	r2, [pc, #92]	; (801559c <TIM_OC2_SetConfig+0xe4>)
 8015540:	4293      	cmp	r3, r2
 8015542:	d003      	beq.n	801554c <TIM_OC2_SetConfig+0x94>
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	4a16      	ldr	r2, [pc, #88]	; (80155a0 <TIM_OC2_SetConfig+0xe8>)
 8015548:	4293      	cmp	r3, r2
 801554a:	d113      	bne.n	8015574 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801555a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	695b      	ldr	r3, [r3, #20]
 8015560:	009b      	lsls	r3, r3, #2
 8015562:	693a      	ldr	r2, [r7, #16]
 8015564:	4313      	orrs	r3, r2
 8015566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	699b      	ldr	r3, [r3, #24]
 801556c:	009b      	lsls	r3, r3, #2
 801556e:	693a      	ldr	r2, [r7, #16]
 8015570:	4313      	orrs	r3, r2
 8015572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	693a      	ldr	r2, [r7, #16]
 8015578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	68fa      	ldr	r2, [r7, #12]
 801557e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	685a      	ldr	r2, [r3, #4]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	697a      	ldr	r2, [r7, #20]
 801558c:	621a      	str	r2, [r3, #32]
}
 801558e:	bf00      	nop
 8015590:	371c      	adds	r7, #28
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	40010000 	.word	0x40010000
 80155a0:	40010400 	.word	0x40010400

080155a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80155a4:	b480      	push	{r7}
 80155a6:	b087      	sub	sp, #28
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	6a1b      	ldr	r3, [r3, #32]
 80155b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	6a1b      	ldr	r3, [r3, #32]
 80155be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	69db      	ldr	r3, [r3, #28]
 80155ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80155d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f023 0303 	bic.w	r3, r3, #3
 80155da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	68fa      	ldr	r2, [r7, #12]
 80155e2:	4313      	orrs	r3, r2
 80155e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80155ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	689b      	ldr	r3, [r3, #8]
 80155f2:	021b      	lsls	r3, r3, #8
 80155f4:	697a      	ldr	r2, [r7, #20]
 80155f6:	4313      	orrs	r3, r2
 80155f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	4a21      	ldr	r2, [pc, #132]	; (8015684 <TIM_OC3_SetConfig+0xe0>)
 80155fe:	4293      	cmp	r3, r2
 8015600:	d003      	beq.n	801560a <TIM_OC3_SetConfig+0x66>
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	4a20      	ldr	r2, [pc, #128]	; (8015688 <TIM_OC3_SetConfig+0xe4>)
 8015606:	4293      	cmp	r3, r2
 8015608:	d10d      	bne.n	8015626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	68db      	ldr	r3, [r3, #12]
 8015616:	021b      	lsls	r3, r3, #8
 8015618:	697a      	ldr	r2, [r7, #20]
 801561a:	4313      	orrs	r3, r2
 801561c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	4a16      	ldr	r2, [pc, #88]	; (8015684 <TIM_OC3_SetConfig+0xe0>)
 801562a:	4293      	cmp	r3, r2
 801562c:	d003      	beq.n	8015636 <TIM_OC3_SetConfig+0x92>
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	4a15      	ldr	r2, [pc, #84]	; (8015688 <TIM_OC3_SetConfig+0xe4>)
 8015632:	4293      	cmp	r3, r2
 8015634:	d113      	bne.n	801565e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015636:	693b      	ldr	r3, [r7, #16]
 8015638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801563c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	695b      	ldr	r3, [r3, #20]
 801564a:	011b      	lsls	r3, r3, #4
 801564c:	693a      	ldr	r2, [r7, #16]
 801564e:	4313      	orrs	r3, r2
 8015650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	699b      	ldr	r3, [r3, #24]
 8015656:	011b      	lsls	r3, r3, #4
 8015658:	693a      	ldr	r2, [r7, #16]
 801565a:	4313      	orrs	r3, r2
 801565c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	693a      	ldr	r2, [r7, #16]
 8015662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	68fa      	ldr	r2, [r7, #12]
 8015668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	685a      	ldr	r2, [r3, #4]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	697a      	ldr	r2, [r7, #20]
 8015676:	621a      	str	r2, [r3, #32]
}
 8015678:	bf00      	nop
 801567a:	371c      	adds	r7, #28
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr
 8015684:	40010000 	.word	0x40010000
 8015688:	40010400 	.word	0x40010400

0801568c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801568c:	b480      	push	{r7}
 801568e:	b087      	sub	sp, #28
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6a1b      	ldr	r3, [r3, #32]
 801569a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6a1b      	ldr	r3, [r3, #32]
 80156a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	69db      	ldr	r3, [r3, #28]
 80156b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80156ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80156c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	021b      	lsls	r3, r3, #8
 80156ca:	68fa      	ldr	r2, [r7, #12]
 80156cc:	4313      	orrs	r3, r2
 80156ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80156d0:	693b      	ldr	r3, [r7, #16]
 80156d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80156d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	689b      	ldr	r3, [r3, #8]
 80156dc:	031b      	lsls	r3, r3, #12
 80156de:	693a      	ldr	r2, [r7, #16]
 80156e0:	4313      	orrs	r3, r2
 80156e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	4a12      	ldr	r2, [pc, #72]	; (8015730 <TIM_OC4_SetConfig+0xa4>)
 80156e8:	4293      	cmp	r3, r2
 80156ea:	d003      	beq.n	80156f4 <TIM_OC4_SetConfig+0x68>
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	4a11      	ldr	r2, [pc, #68]	; (8015734 <TIM_OC4_SetConfig+0xa8>)
 80156f0:	4293      	cmp	r3, r2
 80156f2:	d109      	bne.n	8015708 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80156fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	695b      	ldr	r3, [r3, #20]
 8015700:	019b      	lsls	r3, r3, #6
 8015702:	697a      	ldr	r2, [r7, #20]
 8015704:	4313      	orrs	r3, r2
 8015706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	697a      	ldr	r2, [r7, #20]
 801570c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	685a      	ldr	r2, [r3, #4]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	693a      	ldr	r2, [r7, #16]
 8015720:	621a      	str	r2, [r3, #32]
}
 8015722:	bf00      	nop
 8015724:	371c      	adds	r7, #28
 8015726:	46bd      	mov	sp, r7
 8015728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572c:	4770      	bx	lr
 801572e:	bf00      	nop
 8015730:	40010000 	.word	0x40010000
 8015734:	40010400 	.word	0x40010400

08015738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015738:	b480      	push	{r7}
 801573a:	b087      	sub	sp, #28
 801573c:	af00      	add	r7, sp, #0
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	60b9      	str	r1, [r7, #8]
 8015742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	6a1b      	ldr	r3, [r3, #32]
 8015748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	6a1b      	ldr	r3, [r3, #32]
 801574e:	f023 0201 	bic.w	r2, r3, #1
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	699b      	ldr	r3, [r3, #24]
 801575a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	011b      	lsls	r3, r3, #4
 8015768:	693a      	ldr	r2, [r7, #16]
 801576a:	4313      	orrs	r3, r2
 801576c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	f023 030a 	bic.w	r3, r3, #10
 8015774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015776:	697a      	ldr	r2, [r7, #20]
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	4313      	orrs	r3, r2
 801577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	693a      	ldr	r2, [r7, #16]
 8015782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	697a      	ldr	r2, [r7, #20]
 8015788:	621a      	str	r2, [r3, #32]
}
 801578a:	bf00      	nop
 801578c:	371c      	adds	r7, #28
 801578e:	46bd      	mov	sp, r7
 8015790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015794:	4770      	bx	lr

08015796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015796:	b480      	push	{r7}
 8015798:	b087      	sub	sp, #28
 801579a:	af00      	add	r7, sp, #0
 801579c:	60f8      	str	r0, [r7, #12]
 801579e:	60b9      	str	r1, [r7, #8]
 80157a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	6a1b      	ldr	r3, [r3, #32]
 80157a6:	f023 0210 	bic.w	r2, r3, #16
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	699b      	ldr	r3, [r3, #24]
 80157b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	6a1b      	ldr	r3, [r3, #32]
 80157b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80157c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	031b      	lsls	r3, r3, #12
 80157c6:	697a      	ldr	r2, [r7, #20]
 80157c8:	4313      	orrs	r3, r2
 80157ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80157d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	011b      	lsls	r3, r3, #4
 80157d8:	693a      	ldr	r2, [r7, #16]
 80157da:	4313      	orrs	r3, r2
 80157dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	697a      	ldr	r2, [r7, #20]
 80157e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	693a      	ldr	r2, [r7, #16]
 80157e8:	621a      	str	r2, [r3, #32]
}
 80157ea:	bf00      	nop
 80157ec:	371c      	adds	r7, #28
 80157ee:	46bd      	mov	sp, r7
 80157f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f4:	4770      	bx	lr

080157f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80157f6:	b480      	push	{r7}
 80157f8:	b085      	sub	sp, #20
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
 80157fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	689b      	ldr	r3, [r3, #8]
 8015804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801580c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801580e:	683a      	ldr	r2, [r7, #0]
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	4313      	orrs	r3, r2
 8015814:	f043 0307 	orr.w	r3, r3, #7
 8015818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	68fa      	ldr	r2, [r7, #12]
 801581e:	609a      	str	r2, [r3, #8]
}
 8015820:	bf00      	nop
 8015822:	3714      	adds	r7, #20
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr

0801582c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801582c:	b480      	push	{r7}
 801582e:	b087      	sub	sp, #28
 8015830:	af00      	add	r7, sp, #0
 8015832:	60f8      	str	r0, [r7, #12]
 8015834:	60b9      	str	r1, [r7, #8]
 8015836:	607a      	str	r2, [r7, #4]
 8015838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	689b      	ldr	r3, [r3, #8]
 801583e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	021a      	lsls	r2, r3, #8
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	431a      	orrs	r2, r3
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	4313      	orrs	r3, r2
 8015854:	697a      	ldr	r2, [r7, #20]
 8015856:	4313      	orrs	r3, r2
 8015858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	697a      	ldr	r2, [r7, #20]
 801585e:	609a      	str	r2, [r3, #8]
}
 8015860:	bf00      	nop
 8015862:	371c      	adds	r7, #28
 8015864:	46bd      	mov	sp, r7
 8015866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586a:	4770      	bx	lr

0801586c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801586c:	b480      	push	{r7}
 801586e:	b087      	sub	sp, #28
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	f003 031f 	and.w	r3, r3, #31
 801587e:	2201      	movs	r2, #1
 8015880:	fa02 f303 	lsl.w	r3, r2, r3
 8015884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	6a1a      	ldr	r2, [r3, #32]
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	43db      	mvns	r3, r3
 801588e:	401a      	ands	r2, r3
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	6a1a      	ldr	r2, [r3, #32]
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	f003 031f 	and.w	r3, r3, #31
 801589e:	6879      	ldr	r1, [r7, #4]
 80158a0:	fa01 f303 	lsl.w	r3, r1, r3
 80158a4:	431a      	orrs	r2, r3
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	621a      	str	r2, [r3, #32]
}
 80158aa:	bf00      	nop
 80158ac:	371c      	adds	r7, #28
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
	...

080158b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b085      	sub	sp, #20
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	d101      	bne.n	80158d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80158cc:	2302      	movs	r3, #2
 80158ce:	e05a      	b.n	8015986 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2201      	movs	r2, #1
 80158d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2202      	movs	r2, #2
 80158dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	689b      	ldr	r3, [r3, #8]
 80158ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80158f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	68fa      	ldr	r2, [r7, #12]
 80158fe:	4313      	orrs	r3, r2
 8015900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	68fa      	ldr	r2, [r7, #12]
 8015908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	4a21      	ldr	r2, [pc, #132]	; (8015994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015910:	4293      	cmp	r3, r2
 8015912:	d022      	beq.n	801595a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801591c:	d01d      	beq.n	801595a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	4a1d      	ldr	r2, [pc, #116]	; (8015998 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015924:	4293      	cmp	r3, r2
 8015926:	d018      	beq.n	801595a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	4a1b      	ldr	r2, [pc, #108]	; (801599c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801592e:	4293      	cmp	r3, r2
 8015930:	d013      	beq.n	801595a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	4a1a      	ldr	r2, [pc, #104]	; (80159a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8015938:	4293      	cmp	r3, r2
 801593a:	d00e      	beq.n	801595a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	4a18      	ldr	r2, [pc, #96]	; (80159a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8015942:	4293      	cmp	r3, r2
 8015944:	d009      	beq.n	801595a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	4a17      	ldr	r2, [pc, #92]	; (80159a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801594c:	4293      	cmp	r3, r2
 801594e:	d004      	beq.n	801595a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	4a15      	ldr	r2, [pc, #84]	; (80159ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8015956:	4293      	cmp	r3, r2
 8015958:	d10c      	bne.n	8015974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	68ba      	ldr	r2, [r7, #8]
 8015968:	4313      	orrs	r3, r2
 801596a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	68ba      	ldr	r2, [r7, #8]
 8015972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2201      	movs	r2, #1
 8015978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2200      	movs	r2, #0
 8015980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	3714      	adds	r7, #20
 801598a:	46bd      	mov	sp, r7
 801598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015990:	4770      	bx	lr
 8015992:	bf00      	nop
 8015994:	40010000 	.word	0x40010000
 8015998:	40000400 	.word	0x40000400
 801599c:	40000800 	.word	0x40000800
 80159a0:	40000c00 	.word	0x40000c00
 80159a4:	40010400 	.word	0x40010400
 80159a8:	40014000 	.word	0x40014000
 80159ac:	40001800 	.word	0x40001800

080159b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80159b0:	b480      	push	{r7}
 80159b2:	b085      	sub	sp, #20
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80159ba:	2300      	movs	r3, #0
 80159bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80159c4:	2b01      	cmp	r3, #1
 80159c6:	d101      	bne.n	80159cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80159c8:	2302      	movs	r3, #2
 80159ca:	e03d      	b.n	8015a48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	2201      	movs	r2, #1
 80159d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	68db      	ldr	r3, [r3, #12]
 80159de:	4313      	orrs	r3, r2
 80159e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	689b      	ldr	r3, [r3, #8]
 80159ec:	4313      	orrs	r3, r2
 80159ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	4313      	orrs	r3, r2
 80159fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	4313      	orrs	r3, r2
 8015a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	691b      	ldr	r3, [r3, #16]
 8015a16:	4313      	orrs	r3, r2
 8015a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	695b      	ldr	r3, [r3, #20]
 8015a24:	4313      	orrs	r3, r2
 8015a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	69db      	ldr	r3, [r3, #28]
 8015a32:	4313      	orrs	r3, r2
 8015a34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	68fa      	ldr	r2, [r7, #12]
 8015a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2200      	movs	r2, #0
 8015a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015a46:	2300      	movs	r3, #0
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3714      	adds	r7, #20
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a52:	4770      	bx	lr

08015a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b083      	sub	sp, #12
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015a5c:	bf00      	nop
 8015a5e:	370c      	adds	r7, #12
 8015a60:	46bd      	mov	sp, r7
 8015a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a66:	4770      	bx	lr

08015a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015a68:	b480      	push	{r7}
 8015a6a:	b083      	sub	sp, #12
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015a70:	bf00      	nop
 8015a72:	370c      	adds	r7, #12
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr

08015a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d101      	bne.n	8015a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	e03f      	b.n	8015b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015a94:	b2db      	uxtb	r3, r3
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d106      	bne.n	8015aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f7ee ff52 	bl	800494c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2224      	movs	r2, #36	; 0x24
 8015aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	68da      	ldr	r2, [r3, #12]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f000 fe95 	bl	80167f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	691a      	ldr	r2, [r3, #16]
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	695a      	ldr	r2, [r3, #20]
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	68da      	ldr	r2, [r3, #12]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2200      	movs	r2, #0
 8015afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2220      	movs	r2, #32
 8015b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2220      	movs	r2, #32
 8015b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015b0c:	2300      	movs	r3, #0
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015b16:	b480      	push	{r7}
 8015b18:	b085      	sub	sp, #20
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	60f8      	str	r0, [r7, #12]
 8015b1e:	60b9      	str	r1, [r7, #8]
 8015b20:	4613      	mov	r3, r2
 8015b22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015b2a:	b2db      	uxtb	r3, r3
 8015b2c:	2b20      	cmp	r3, #32
 8015b2e:	d130      	bne.n	8015b92 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d002      	beq.n	8015b3c <HAL_UART_Transmit_IT+0x26>
 8015b36:	88fb      	ldrh	r3, [r7, #6]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d101      	bne.n	8015b40 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	e029      	b.n	8015b94 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015b46:	2b01      	cmp	r3, #1
 8015b48:	d101      	bne.n	8015b4e <HAL_UART_Transmit_IT+0x38>
 8015b4a:	2302      	movs	r3, #2
 8015b4c:	e022      	b.n	8015b94 <HAL_UART_Transmit_IT+0x7e>
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2201      	movs	r2, #1
 8015b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	68ba      	ldr	r2, [r7, #8]
 8015b5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	88fa      	ldrh	r2, [r7, #6]
 8015b60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	88fa      	ldrh	r2, [r7, #6]
 8015b66:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2221      	movs	r2, #33	; 0x21
 8015b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	2200      	movs	r2, #0
 8015b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	68da      	ldr	r2, [r3, #12]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015b8c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	e000      	b.n	8015b94 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8015b92:	2302      	movs	r3, #2
  }
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	3714      	adds	r7, #20
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9e:	4770      	bx	lr

08015ba0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b08c      	sub	sp, #48	; 0x30
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	4613      	mov	r3, r2
 8015bac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	2b20      	cmp	r3, #32
 8015bb8:	d165      	bne.n	8015c86 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d002      	beq.n	8015bc6 <HAL_UART_Transmit_DMA+0x26>
 8015bc0:	88fb      	ldrh	r3, [r7, #6]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d101      	bne.n	8015bca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	e05e      	b.n	8015c88 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015bd0:	2b01      	cmp	r3, #1
 8015bd2:	d101      	bne.n	8015bd8 <HAL_UART_Transmit_DMA+0x38>
 8015bd4:	2302      	movs	r3, #2
 8015bd6:	e057      	b.n	8015c88 <HAL_UART_Transmit_DMA+0xe8>
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015be0:	68ba      	ldr	r2, [r7, #8]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	88fa      	ldrh	r2, [r7, #6]
 8015bea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	88fa      	ldrh	r2, [r7, #6]
 8015bf0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	2221      	movs	r2, #33	; 0x21
 8015bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c04:	4a22      	ldr	r2, [pc, #136]	; (8015c90 <HAL_UART_Transmit_DMA+0xf0>)
 8015c06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c0c:	4a21      	ldr	r2, [pc, #132]	; (8015c94 <HAL_UART_Transmit_DMA+0xf4>)
 8015c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c14:	4a20      	ldr	r2, [pc, #128]	; (8015c98 <HAL_UART_Transmit_DMA+0xf8>)
 8015c16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8015c20:	f107 0308 	add.w	r3, r7, #8
 8015c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2c:	6819      	ldr	r1, [r3, #0]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	3304      	adds	r3, #4
 8015c34:	461a      	mov	r2, r3
 8015c36:	88fb      	ldrh	r3, [r7, #6]
 8015c38:	f7f9 ff22 	bl	800fa80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015c44:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	3314      	adds	r3, #20
 8015c54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c56:	69bb      	ldr	r3, [r7, #24]
 8015c58:	e853 3f00 	ldrex	r3, [r3]
 8015c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	3314      	adds	r3, #20
 8015c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c6e:	627a      	str	r2, [r7, #36]	; 0x24
 8015c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c72:	6a39      	ldr	r1, [r7, #32]
 8015c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c76:	e841 2300 	strex	r3, r2, [r1]
 8015c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d1e5      	bne.n	8015c4e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8015c82:	2300      	movs	r3, #0
 8015c84:	e000      	b.n	8015c88 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8015c86:	2302      	movs	r3, #2
  }
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3730      	adds	r7, #48	; 0x30
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	08016321 	.word	0x08016321
 8015c94:	080163bb 	.word	0x080163bb
 8015c98:	080163d7 	.word	0x080163d7

08015c9c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b090      	sub	sp, #64	; 0x40
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	695b      	ldr	r3, [r3, #20]
 8015cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cb2:	2b80      	cmp	r3, #128	; 0x80
 8015cb4:	bf0c      	ite	eq
 8015cb6:	2301      	moveq	r3, #1
 8015cb8:	2300      	movne	r3, #0
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015cc4:	b2db      	uxtb	r3, r3
 8015cc6:	2b21      	cmp	r3, #33	; 0x21
 8015cc8:	d128      	bne.n	8015d1c <HAL_UART_DMAStop+0x80>
 8015cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d025      	beq.n	8015d1c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	3314      	adds	r3, #20
 8015cd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cda:	e853 3f00 	ldrex	r3, [r3]
 8015cde:	623b      	str	r3, [r7, #32]
   return(result);
 8015ce0:	6a3b      	ldr	r3, [r7, #32]
 8015ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	3314      	adds	r3, #20
 8015cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cf0:	633a      	str	r2, [r7, #48]	; 0x30
 8015cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cf8:	e841 2300 	strex	r3, r2, [r1]
 8015cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d1e5      	bne.n	8015cd0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d004      	beq.n	8015d16 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7f9 ff0d 	bl	800fb30 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f000 fba7 	bl	801646a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	695b      	ldr	r3, [r3, #20]
 8015d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d26:	2b40      	cmp	r3, #64	; 0x40
 8015d28:	bf0c      	ite	eq
 8015d2a:	2301      	moveq	r3, #1
 8015d2c:	2300      	movne	r3, #0
 8015d2e:	b2db      	uxtb	r3, r3
 8015d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d38:	b2db      	uxtb	r3, r3
 8015d3a:	2b22      	cmp	r3, #34	; 0x22
 8015d3c:	d128      	bne.n	8015d90 <HAL_UART_DMAStop+0xf4>
 8015d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d025      	beq.n	8015d90 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	3314      	adds	r3, #20
 8015d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	e853 3f00 	ldrex	r3, [r3]
 8015d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	3314      	adds	r3, #20
 8015d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d64:	61fa      	str	r2, [r7, #28]
 8015d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d68:	69b9      	ldr	r1, [r7, #24]
 8015d6a:	69fa      	ldr	r2, [r7, #28]
 8015d6c:	e841 2300 	strex	r3, r2, [r1]
 8015d70:	617b      	str	r3, [r7, #20]
   return(result);
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d1e5      	bne.n	8015d44 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d004      	beq.n	8015d8a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7f9 fed3 	bl	800fb30 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f000 fb95 	bl	80164ba <UART_EndRxTransfer>
  }

  return HAL_OK;
 8015d90:	2300      	movs	r3, #0
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	3740      	adds	r7, #64	; 0x40
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
	...

08015d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b0ba      	sub	sp, #232	; 0xe8
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	68db      	ldr	r3, [r3, #12]
 8015db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	695b      	ldr	r3, [r3, #20]
 8015dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8015dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015dd2:	f003 030f 	and.w	r3, r3, #15
 8015dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8015dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d10f      	bne.n	8015e02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8015de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015de6:	f003 0320 	and.w	r3, r3, #32
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d009      	beq.n	8015e02 <HAL_UART_IRQHandler+0x66>
 8015dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015df2:	f003 0320 	and.w	r3, r3, #32
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d003      	beq.n	8015e02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 fc3c 	bl	8016678 <UART_Receive_IT>
      return;
 8015e00:	e256      	b.n	80162b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8015e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	f000 80de 	beq.w	8015fc8 <HAL_UART_IRQHandler+0x22c>
 8015e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015e10:	f003 0301 	and.w	r3, r3, #1
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d106      	bne.n	8015e26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8015e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015e1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f000 80d1 	beq.w	8015fc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8015e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e2a:	f003 0301 	and.w	r3, r3, #1
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d00b      	beq.n	8015e4a <HAL_UART_IRQHandler+0xae>
 8015e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d005      	beq.n	8015e4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e42:	f043 0201 	orr.w	r2, r3, #1
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e4e:	f003 0304 	and.w	r3, r3, #4
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d00b      	beq.n	8015e6e <HAL_UART_IRQHandler+0xd2>
 8015e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015e5a:	f003 0301 	and.w	r3, r3, #1
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d005      	beq.n	8015e6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e66:	f043 0202 	orr.w	r2, r3, #2
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e72:	f003 0302 	and.w	r3, r3, #2
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00b      	beq.n	8015e92 <HAL_UART_IRQHandler+0xf6>
 8015e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015e7e:	f003 0301 	and.w	r3, r3, #1
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d005      	beq.n	8015e92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e8a:	f043 0204 	orr.w	r2, r3, #4
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8015e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e96:	f003 0308 	and.w	r3, r3, #8
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d011      	beq.n	8015ec2 <HAL_UART_IRQHandler+0x126>
 8015e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ea2:	f003 0320 	and.w	r3, r3, #32
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d105      	bne.n	8015eb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8015eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015eae:	f003 0301 	and.w	r3, r3, #1
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d005      	beq.n	8015ec2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eba:	f043 0208 	orr.w	r2, r3, #8
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f000 81ed 	beq.w	80162a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8015ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ed0:	f003 0320 	and.w	r3, r3, #32
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d008      	beq.n	8015eea <HAL_UART_IRQHandler+0x14e>
 8015ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015edc:	f003 0320 	and.w	r3, r3, #32
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d002      	beq.n	8015eea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f000 fbc7 	bl	8016678 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	695b      	ldr	r3, [r3, #20]
 8015ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ef4:	2b40      	cmp	r3, #64	; 0x40
 8015ef6:	bf0c      	ite	eq
 8015ef8:	2301      	moveq	r3, #1
 8015efa:	2300      	movne	r3, #0
 8015efc:	b2db      	uxtb	r3, r3
 8015efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f06:	f003 0308 	and.w	r3, r3, #8
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d103      	bne.n	8015f16 <HAL_UART_IRQHandler+0x17a>
 8015f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d04f      	beq.n	8015fb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 facf 	bl	80164ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	695b      	ldr	r3, [r3, #20]
 8015f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f26:	2b40      	cmp	r3, #64	; 0x40
 8015f28:	d141      	bne.n	8015fae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	3314      	adds	r3, #20
 8015f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f38:	e853 3f00 	ldrex	r3, [r3]
 8015f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	3314      	adds	r3, #20
 8015f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015f66:	e841 2300 	strex	r3, r2, [r1]
 8015f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d1d9      	bne.n	8015f2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d013      	beq.n	8015fa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f82:	4a7d      	ldr	r2, [pc, #500]	; (8016178 <HAL_UART_IRQHandler+0x3dc>)
 8015f84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f9 fe40 	bl	800fc10 <HAL_DMA_Abort_IT>
 8015f90:	4603      	mov	r3, r0
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d016      	beq.n	8015fc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015fa0:	4610      	mov	r0, r2
 8015fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fa4:	e00e      	b.n	8015fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 f9a4 	bl	80162f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fac:	e00a      	b.n	8015fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f000 f9a0 	bl	80162f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fb4:	e006      	b.n	8015fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f000 f99c 	bl	80162f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8015fc2:	e170      	b.n	80162a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fc4:	bf00      	nop
    return;
 8015fc6:	e16e      	b.n	80162a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	f040 814a 	bne.w	8016266 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8015fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015fd6:	f003 0310 	and.w	r3, r3, #16
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f000 8143 	beq.w	8016266 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8015fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015fe4:	f003 0310 	and.w	r3, r3, #16
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	f000 813c 	beq.w	8016266 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015fee:	2300      	movs	r3, #0
 8015ff0:	60bb      	str	r3, [r7, #8]
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	60bb      	str	r3, [r7, #8]
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	685b      	ldr	r3, [r3, #4]
 8016000:	60bb      	str	r3, [r7, #8]
 8016002:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	695b      	ldr	r3, [r3, #20]
 801600a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801600e:	2b40      	cmp	r3, #64	; 0x40
 8016010:	f040 80b4 	bne.w	801617c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016024:	2b00      	cmp	r3, #0
 8016026:	f000 8140 	beq.w	80162aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801602e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016032:	429a      	cmp	r2, r3
 8016034:	f080 8139 	bcs.w	80162aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801603e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016044:	69db      	ldr	r3, [r3, #28]
 8016046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801604a:	f000 8088 	beq.w	801615e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	330c      	adds	r3, #12
 8016054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801605c:	e853 3f00 	ldrex	r3, [r3]
 8016060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801606c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	330c      	adds	r3, #12
 8016076:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801607a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801607e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016082:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801608a:	e841 2300 	strex	r3, r2, [r1]
 801608e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016096:	2b00      	cmp	r3, #0
 8016098:	d1d9      	bne.n	801604e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	3314      	adds	r3, #20
 80160a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160a4:	e853 3f00 	ldrex	r3, [r3]
 80160a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80160aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80160ac:	f023 0301 	bic.w	r3, r3, #1
 80160b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	3314      	adds	r3, #20
 80160ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80160be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80160c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80160c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80160ca:	e841 2300 	strex	r3, r2, [r1]
 80160ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80160d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d1e1      	bne.n	801609a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	3314      	adds	r3, #20
 80160dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160e0:	e853 3f00 	ldrex	r3, [r3]
 80160e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80160e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80160ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	3314      	adds	r3, #20
 80160f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80160fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80160fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016102:	e841 2300 	strex	r3, r2, [r1]
 8016106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801610a:	2b00      	cmp	r3, #0
 801610c:	d1e3      	bne.n	80160d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	2220      	movs	r2, #32
 8016112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2200      	movs	r2, #0
 801611a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	330c      	adds	r3, #12
 8016122:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016126:	e853 3f00 	ldrex	r3, [r3]
 801612a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801612c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801612e:	f023 0310 	bic.w	r3, r3, #16
 8016132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	330c      	adds	r3, #12
 801613c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016140:	65ba      	str	r2, [r7, #88]	; 0x58
 8016142:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016148:	e841 2300 	strex	r3, r2, [r1]
 801614c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801614e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016150:	2b00      	cmp	r3, #0
 8016152:	d1e3      	bne.n	801611c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016158:	4618      	mov	r0, r3
 801615a:	f7f9 fce9 	bl	800fb30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016166:	b29b      	uxth	r3, r3
 8016168:	1ad3      	subs	r3, r2, r3
 801616a:	b29b      	uxth	r3, r3
 801616c:	4619      	mov	r1, r3
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f000 f8ca 	bl	8016308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8016174:	e099      	b.n	80162aa <HAL_UART_IRQHandler+0x50e>
 8016176:	bf00      	nop
 8016178:	08016581 	.word	0x08016581
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016184:	b29b      	uxth	r3, r3
 8016186:	1ad3      	subs	r3, r2, r3
 8016188:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016190:	b29b      	uxth	r3, r3
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 808b 	beq.w	80162ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8016198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801619c:	2b00      	cmp	r3, #0
 801619e:	f000 8086 	beq.w	80162ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	330c      	adds	r3, #12
 80161a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ac:	e853 3f00 	ldrex	r3, [r3]
 80161b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80161b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80161b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	330c      	adds	r3, #12
 80161c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80161c6:	647a      	str	r2, [r7, #68]	; 0x44
 80161c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80161cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80161ce:	e841 2300 	strex	r3, r2, [r1]
 80161d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80161d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d1e3      	bne.n	80161a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	3314      	adds	r3, #20
 80161e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	e853 3f00 	ldrex	r3, [r3]
 80161e8:	623b      	str	r3, [r7, #32]
   return(result);
 80161ea:	6a3b      	ldr	r3, [r7, #32]
 80161ec:	f023 0301 	bic.w	r3, r3, #1
 80161f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	3314      	adds	r3, #20
 80161fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80161fe:	633a      	str	r2, [r7, #48]	; 0x30
 8016200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016206:	e841 2300 	strex	r3, r2, [r1]
 801620a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620e:	2b00      	cmp	r3, #0
 8016210:	d1e3      	bne.n	80161da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2220      	movs	r2, #32
 8016216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	2200      	movs	r2, #0
 801621e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	330c      	adds	r3, #12
 8016226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	e853 3f00 	ldrex	r3, [r3]
 801622e:	60fb      	str	r3, [r7, #12]
   return(result);
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	f023 0310 	bic.w	r3, r3, #16
 8016236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	330c      	adds	r3, #12
 8016240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016244:	61fa      	str	r2, [r7, #28]
 8016246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016248:	69b9      	ldr	r1, [r7, #24]
 801624a:	69fa      	ldr	r2, [r7, #28]
 801624c:	e841 2300 	strex	r3, r2, [r1]
 8016250:	617b      	str	r3, [r7, #20]
   return(result);
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d1e3      	bne.n	8016220 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801625c:	4619      	mov	r1, r3
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 f852 	bl	8016308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8016264:	e023      	b.n	80162ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8016266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801626e:	2b00      	cmp	r3, #0
 8016270:	d009      	beq.n	8016286 <HAL_UART_IRQHandler+0x4ea>
 8016272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801627a:	2b00      	cmp	r3, #0
 801627c:	d003      	beq.n	8016286 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f000 f992 	bl	80165a8 <UART_Transmit_IT>
    return;
 8016284:	e014      	b.n	80162b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8016286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801628a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801628e:	2b00      	cmp	r3, #0
 8016290:	d00e      	beq.n	80162b0 <HAL_UART_IRQHandler+0x514>
 8016292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801629a:	2b00      	cmp	r3, #0
 801629c:	d008      	beq.n	80162b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f000 f9d2 	bl	8016648 <UART_EndTransmit_IT>
    return;
 80162a4:	e004      	b.n	80162b0 <HAL_UART_IRQHandler+0x514>
    return;
 80162a6:	bf00      	nop
 80162a8:	e002      	b.n	80162b0 <HAL_UART_IRQHandler+0x514>
      return;
 80162aa:	bf00      	nop
 80162ac:	e000      	b.n	80162b0 <HAL_UART_IRQHandler+0x514>
      return;
 80162ae:	bf00      	nop
  }
}
 80162b0:	37e8      	adds	r7, #232	; 0xe8
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop

080162b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80162b8:	b480      	push	{r7}
 80162ba:	b083      	sub	sp, #12
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80162c0:	bf00      	nop
 80162c2:	370c      	adds	r7, #12
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr

080162cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b083      	sub	sp, #12
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80162d4:	bf00      	nop
 80162d6:	370c      	adds	r7, #12
 80162d8:	46bd      	mov	sp, r7
 80162da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162de:	4770      	bx	lr

080162e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b083      	sub	sp, #12
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80162e8:	bf00      	nop
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr

080162f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80162f4:	b480      	push	{r7}
 80162f6:	b083      	sub	sp, #12
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80162fc:	bf00      	nop
 80162fe:	370c      	adds	r7, #12
 8016300:	46bd      	mov	sp, r7
 8016302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016306:	4770      	bx	lr

08016308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016308:	b480      	push	{r7}
 801630a:	b083      	sub	sp, #12
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	460b      	mov	r3, r1
 8016312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016314:	bf00      	nop
 8016316:	370c      	adds	r7, #12
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr

08016320 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b090      	sub	sp, #64	; 0x40
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801632c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016338:	2b00      	cmp	r3, #0
 801633a:	d137      	bne.n	80163ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801633e:	2200      	movs	r2, #0
 8016340:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	3314      	adds	r3, #20
 8016348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634c:	e853 3f00 	ldrex	r3, [r3]
 8016350:	623b      	str	r3, [r7, #32]
   return(result);
 8016352:	6a3b      	ldr	r3, [r7, #32]
 8016354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016358:	63bb      	str	r3, [r7, #56]	; 0x38
 801635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	3314      	adds	r3, #20
 8016360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016362:	633a      	str	r2, [r7, #48]	; 0x30
 8016364:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801636a:	e841 2300 	strex	r3, r2, [r1]
 801636e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016372:	2b00      	cmp	r3, #0
 8016374:	d1e5      	bne.n	8016342 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	330c      	adds	r3, #12
 801637c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	e853 3f00 	ldrex	r3, [r3]
 8016384:	60fb      	str	r3, [r7, #12]
   return(result);
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801638c:	637b      	str	r3, [r7, #52]	; 0x34
 801638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	330c      	adds	r3, #12
 8016394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016396:	61fa      	str	r2, [r7, #28]
 8016398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801639a:	69b9      	ldr	r1, [r7, #24]
 801639c:	69fa      	ldr	r2, [r7, #28]
 801639e:	e841 2300 	strex	r3, r2, [r1]
 80163a2:	617b      	str	r3, [r7, #20]
   return(result);
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d1e5      	bne.n	8016376 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80163aa:	e002      	b.n	80163b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80163ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80163ae:	f7ff ff83 	bl	80162b8 <HAL_UART_TxCpltCallback>
}
 80163b2:	bf00      	nop
 80163b4:	3740      	adds	r7, #64	; 0x40
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}

080163ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80163ba:	b580      	push	{r7, lr}
 80163bc:	b084      	sub	sp, #16
 80163be:	af00      	add	r7, sp, #0
 80163c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80163c8:	68f8      	ldr	r0, [r7, #12]
 80163ca:	f7ff ff7f 	bl	80162cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80163ce:	bf00      	nop
 80163d0:	3710      	adds	r7, #16
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}

080163d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80163d6:	b580      	push	{r7, lr}
 80163d8:	b084      	sub	sp, #16
 80163da:	af00      	add	r7, sp, #0
 80163dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80163de:	2300      	movs	r3, #0
 80163e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	695b      	ldr	r3, [r3, #20]
 80163ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80163f2:	2b80      	cmp	r3, #128	; 0x80
 80163f4:	bf0c      	ite	eq
 80163f6:	2301      	moveq	r3, #1
 80163f8:	2300      	movne	r3, #0
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016404:	b2db      	uxtb	r3, r3
 8016406:	2b21      	cmp	r3, #33	; 0x21
 8016408:	d108      	bne.n	801641c <UART_DMAError+0x46>
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d005      	beq.n	801641c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	2200      	movs	r2, #0
 8016414:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8016416:	68b8      	ldr	r0, [r7, #8]
 8016418:	f000 f827 	bl	801646a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	695b      	ldr	r3, [r3, #20]
 8016422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016426:	2b40      	cmp	r3, #64	; 0x40
 8016428:	bf0c      	ite	eq
 801642a:	2301      	moveq	r3, #1
 801642c:	2300      	movne	r3, #0
 801642e:	b2db      	uxtb	r3, r3
 8016430:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016438:	b2db      	uxtb	r3, r3
 801643a:	2b22      	cmp	r3, #34	; 0x22
 801643c:	d108      	bne.n	8016450 <UART_DMAError+0x7a>
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d005      	beq.n	8016450 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	2200      	movs	r2, #0
 8016448:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801644a:	68b8      	ldr	r0, [r7, #8]
 801644c:	f000 f835 	bl	80164ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016454:	f043 0210 	orr.w	r2, r3, #16
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801645c:	68b8      	ldr	r0, [r7, #8]
 801645e:	f7ff ff49 	bl	80162f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016462:	bf00      	nop
 8016464:	3710      	adds	r7, #16
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801646a:	b480      	push	{r7}
 801646c:	b089      	sub	sp, #36	; 0x24
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	330c      	adds	r3, #12
 8016478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	e853 3f00 	ldrex	r3, [r3]
 8016480:	60bb      	str	r3, [r7, #8]
   return(result);
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016488:	61fb      	str	r3, [r7, #28]
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	330c      	adds	r3, #12
 8016490:	69fa      	ldr	r2, [r7, #28]
 8016492:	61ba      	str	r2, [r7, #24]
 8016494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016496:	6979      	ldr	r1, [r7, #20]
 8016498:	69ba      	ldr	r2, [r7, #24]
 801649a:	e841 2300 	strex	r3, r2, [r1]
 801649e:	613b      	str	r3, [r7, #16]
   return(result);
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d1e5      	bne.n	8016472 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	2220      	movs	r2, #32
 80164aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80164ae:	bf00      	nop
 80164b0:	3724      	adds	r7, #36	; 0x24
 80164b2:	46bd      	mov	sp, r7
 80164b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b8:	4770      	bx	lr

080164ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80164ba:	b480      	push	{r7}
 80164bc:	b095      	sub	sp, #84	; 0x54
 80164be:	af00      	add	r7, sp, #0
 80164c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	330c      	adds	r3, #12
 80164c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164cc:	e853 3f00 	ldrex	r3, [r3]
 80164d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80164d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80164d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	330c      	adds	r3, #12
 80164e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80164e2:	643a      	str	r2, [r7, #64]	; 0x40
 80164e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80164e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80164ea:	e841 2300 	strex	r3, r2, [r1]
 80164ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80164f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d1e5      	bne.n	80164c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	3314      	adds	r3, #20
 80164fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164fe:	6a3b      	ldr	r3, [r7, #32]
 8016500:	e853 3f00 	ldrex	r3, [r3]
 8016504:	61fb      	str	r3, [r7, #28]
   return(result);
 8016506:	69fb      	ldr	r3, [r7, #28]
 8016508:	f023 0301 	bic.w	r3, r3, #1
 801650c:	64bb      	str	r3, [r7, #72]	; 0x48
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	3314      	adds	r3, #20
 8016514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801651a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801651c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801651e:	e841 2300 	strex	r3, r2, [r1]
 8016522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016526:	2b00      	cmp	r3, #0
 8016528:	d1e5      	bne.n	80164f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801652e:	2b01      	cmp	r3, #1
 8016530:	d119      	bne.n	8016566 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	330c      	adds	r3, #12
 8016538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	e853 3f00 	ldrex	r3, [r3]
 8016540:	60bb      	str	r3, [r7, #8]
   return(result);
 8016542:	68bb      	ldr	r3, [r7, #8]
 8016544:	f023 0310 	bic.w	r3, r3, #16
 8016548:	647b      	str	r3, [r7, #68]	; 0x44
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	330c      	adds	r3, #12
 8016550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016552:	61ba      	str	r2, [r7, #24]
 8016554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016556:	6979      	ldr	r1, [r7, #20]
 8016558:	69ba      	ldr	r2, [r7, #24]
 801655a:	e841 2300 	strex	r3, r2, [r1]
 801655e:	613b      	str	r3, [r7, #16]
   return(result);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1e5      	bne.n	8016532 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2220      	movs	r2, #32
 801656a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2200      	movs	r2, #0
 8016572:	631a      	str	r2, [r3, #48]	; 0x30
}
 8016574:	bf00      	nop
 8016576:	3754      	adds	r7, #84	; 0x54
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr

08016580 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801658c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2200      	movs	r2, #0
 8016592:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2200      	movs	r2, #0
 8016598:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801659a:	68f8      	ldr	r0, [r7, #12]
 801659c:	f7ff feaa 	bl	80162f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80165a0:	bf00      	nop
 80165a2:	3710      	adds	r7, #16
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80165a8:	b480      	push	{r7}
 80165aa:	b085      	sub	sp, #20
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	2b21      	cmp	r3, #33	; 0x21
 80165ba:	d13e      	bne.n	801663a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	689b      	ldr	r3, [r3, #8]
 80165c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80165c4:	d114      	bne.n	80165f0 <UART_Transmit_IT+0x48>
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	691b      	ldr	r3, [r3, #16]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d110      	bne.n	80165f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	6a1b      	ldr	r3, [r3, #32]
 80165d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	881b      	ldrh	r3, [r3, #0]
 80165d8:	461a      	mov	r2, r3
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80165e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6a1b      	ldr	r3, [r3, #32]
 80165e8:	1c9a      	adds	r2, r3, #2
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	621a      	str	r2, [r3, #32]
 80165ee:	e008      	b.n	8016602 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6a1b      	ldr	r3, [r3, #32]
 80165f4:	1c59      	adds	r1, r3, #1
 80165f6:	687a      	ldr	r2, [r7, #4]
 80165f8:	6211      	str	r1, [r2, #32]
 80165fa:	781a      	ldrb	r2, [r3, #0]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016606:	b29b      	uxth	r3, r3
 8016608:	3b01      	subs	r3, #1
 801660a:	b29b      	uxth	r3, r3
 801660c:	687a      	ldr	r2, [r7, #4]
 801660e:	4619      	mov	r1, r3
 8016610:	84d1      	strh	r1, [r2, #38]	; 0x26
 8016612:	2b00      	cmp	r3, #0
 8016614:	d10f      	bne.n	8016636 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	68da      	ldr	r2, [r3, #12]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016624:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	68da      	ldr	r2, [r3, #12]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016634:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8016636:	2300      	movs	r3, #0
 8016638:	e000      	b.n	801663c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801663a:	2302      	movs	r3, #2
  }
}
 801663c:	4618      	mov	r0, r3
 801663e:	3714      	adds	r7, #20
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr

08016648 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	68da      	ldr	r2, [r3, #12]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801665e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2220      	movs	r2, #32
 8016664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f7ff fe25 	bl	80162b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801666e:	2300      	movs	r3, #0
}
 8016670:	4618      	mov	r0, r3
 8016672:	3708      	adds	r7, #8
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}

08016678 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b08c      	sub	sp, #48	; 0x30
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016686:	b2db      	uxtb	r3, r3
 8016688:	2b22      	cmp	r3, #34	; 0x22
 801668a:	f040 80ab 	bne.w	80167e4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	689b      	ldr	r3, [r3, #8]
 8016692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016696:	d117      	bne.n	80166c8 <UART_Receive_IT+0x50>
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	691b      	ldr	r3, [r3, #16]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d113      	bne.n	80166c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80166a0:	2300      	movs	r3, #0
 80166a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	b29b      	uxth	r3, r3
 80166b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166c0:	1c9a      	adds	r2, r3, #2
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	629a      	str	r2, [r3, #40]	; 0x28
 80166c6:	e026      	b.n	8016716 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80166ce:	2300      	movs	r3, #0
 80166d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	689b      	ldr	r3, [r3, #8]
 80166d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80166da:	d007      	beq.n	80166ec <UART_Receive_IT+0x74>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	689b      	ldr	r3, [r3, #8]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d10a      	bne.n	80166fa <UART_Receive_IT+0x82>
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	691b      	ldr	r3, [r3, #16]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d106      	bne.n	80166fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	685b      	ldr	r3, [r3, #4]
 80166f2:	b2da      	uxtb	r2, r3
 80166f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f6:	701a      	strb	r2, [r3, #0]
 80166f8:	e008      	b.n	801670c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	b2db      	uxtb	r3, r3
 8016702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016706:	b2da      	uxtb	r2, r3
 8016708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801670a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016710:	1c5a      	adds	r2, r3, #1
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801671a:	b29b      	uxth	r3, r3
 801671c:	3b01      	subs	r3, #1
 801671e:	b29b      	uxth	r3, r3
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	4619      	mov	r1, r3
 8016724:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8016726:	2b00      	cmp	r3, #0
 8016728:	d15a      	bne.n	80167e0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	68da      	ldr	r2, [r3, #12]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f022 0220 	bic.w	r2, r2, #32
 8016738:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	68da      	ldr	r2, [r3, #12]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016748:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	695a      	ldr	r2, [r3, #20]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	f022 0201 	bic.w	r2, r2, #1
 8016758:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2220      	movs	r2, #32
 801675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016766:	2b01      	cmp	r3, #1
 8016768:	d135      	bne.n	80167d6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2200      	movs	r2, #0
 801676e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	330c      	adds	r3, #12
 8016776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016778:	697b      	ldr	r3, [r7, #20]
 801677a:	e853 3f00 	ldrex	r3, [r3]
 801677e:	613b      	str	r3, [r7, #16]
   return(result);
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	f023 0310 	bic.w	r3, r3, #16
 8016786:	627b      	str	r3, [r7, #36]	; 0x24
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	330c      	adds	r3, #12
 801678e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016790:	623a      	str	r2, [r7, #32]
 8016792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016794:	69f9      	ldr	r1, [r7, #28]
 8016796:	6a3a      	ldr	r2, [r7, #32]
 8016798:	e841 2300 	strex	r3, r2, [r1]
 801679c:	61bb      	str	r3, [r7, #24]
   return(result);
 801679e:	69bb      	ldr	r3, [r7, #24]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d1e5      	bne.n	8016770 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	f003 0310 	and.w	r3, r3, #16
 80167ae:	2b10      	cmp	r3, #16
 80167b0:	d10a      	bne.n	80167c8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80167b2:	2300      	movs	r3, #0
 80167b4:	60fb      	str	r3, [r7, #12]
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	60fb      	str	r3, [r7, #12]
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	60fb      	str	r3, [r7, #12]
 80167c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80167cc:	4619      	mov	r1, r3
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f7ff fd9a 	bl	8016308 <HAL_UARTEx_RxEventCallback>
 80167d4:	e002      	b.n	80167dc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f7ff fd82 	bl	80162e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80167dc:	2300      	movs	r3, #0
 80167de:	e002      	b.n	80167e6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80167e0:	2300      	movs	r3, #0
 80167e2:	e000      	b.n	80167e6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80167e4:	2302      	movs	r3, #2
  }
}
 80167e6:	4618      	mov	r0, r3
 80167e8:	3730      	adds	r7, #48	; 0x30
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}
	...

080167f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80167f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80167f4:	b0c0      	sub	sp, #256	; 0x100
 80167f6:	af00      	add	r7, sp, #0
 80167f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80167fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	691b      	ldr	r3, [r3, #16]
 8016804:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8016808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801680c:	68d9      	ldr	r1, [r3, #12]
 801680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016812:	681a      	ldr	r2, [r3, #0]
 8016814:	ea40 0301 	orr.w	r3, r0, r1
 8016818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801681a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801681e:	689a      	ldr	r2, [r3, #8]
 8016820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016824:	691b      	ldr	r3, [r3, #16]
 8016826:	431a      	orrs	r2, r3
 8016828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801682c:	695b      	ldr	r3, [r3, #20]
 801682e:	431a      	orrs	r2, r3
 8016830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016834:	69db      	ldr	r3, [r3, #28]
 8016836:	4313      	orrs	r3, r2
 8016838:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	68db      	ldr	r3, [r3, #12]
 8016844:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8016848:	f021 010c 	bic.w	r1, r1, #12
 801684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016850:	681a      	ldr	r2, [r3, #0]
 8016852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016856:	430b      	orrs	r3, r1
 8016858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	695b      	ldr	r3, [r3, #20]
 8016862:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8016866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801686a:	6999      	ldr	r1, [r3, #24]
 801686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	ea40 0301 	orr.w	r3, r0, r1
 8016876:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	4b8f      	ldr	r3, [pc, #572]	; (8016abc <UART_SetConfig+0x2cc>)
 8016880:	429a      	cmp	r2, r3
 8016882:	d005      	beq.n	8016890 <UART_SetConfig+0xa0>
 8016884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016888:	681a      	ldr	r2, [r3, #0]
 801688a:	4b8d      	ldr	r3, [pc, #564]	; (8016ac0 <UART_SetConfig+0x2d0>)
 801688c:	429a      	cmp	r2, r3
 801688e:	d104      	bne.n	801689a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8016890:	f7fd fa78 	bl	8013d84 <HAL_RCC_GetPCLK2Freq>
 8016894:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8016898:	e003      	b.n	80168a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801689a:	f7fd fa5f 	bl	8013d5c <HAL_RCC_GetPCLK1Freq>
 801689e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80168a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80168a6:	69db      	ldr	r3, [r3, #28]
 80168a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80168ac:	f040 810c 	bne.w	8016ac8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80168b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80168b4:	2200      	movs	r2, #0
 80168b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80168ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80168be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80168c2:	4622      	mov	r2, r4
 80168c4:	462b      	mov	r3, r5
 80168c6:	1891      	adds	r1, r2, r2
 80168c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80168ca:	415b      	adcs	r3, r3
 80168cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80168ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80168d2:	4621      	mov	r1, r4
 80168d4:	eb12 0801 	adds.w	r8, r2, r1
 80168d8:	4629      	mov	r1, r5
 80168da:	eb43 0901 	adc.w	r9, r3, r1
 80168de:	f04f 0200 	mov.w	r2, #0
 80168e2:	f04f 0300 	mov.w	r3, #0
 80168e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80168ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80168ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80168f2:	4690      	mov	r8, r2
 80168f4:	4699      	mov	r9, r3
 80168f6:	4623      	mov	r3, r4
 80168f8:	eb18 0303 	adds.w	r3, r8, r3
 80168fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016900:	462b      	mov	r3, r5
 8016902:	eb49 0303 	adc.w	r3, r9, r3
 8016906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801690a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	2200      	movs	r2, #0
 8016912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016916:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801691a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801691e:	460b      	mov	r3, r1
 8016920:	18db      	adds	r3, r3, r3
 8016922:	653b      	str	r3, [r7, #80]	; 0x50
 8016924:	4613      	mov	r3, r2
 8016926:	eb42 0303 	adc.w	r3, r2, r3
 801692a:	657b      	str	r3, [r7, #84]	; 0x54
 801692c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8016934:	f7ea f9a8 	bl	8000c88 <__aeabi_uldivmod>
 8016938:	4602      	mov	r2, r0
 801693a:	460b      	mov	r3, r1
 801693c:	4b61      	ldr	r3, [pc, #388]	; (8016ac4 <UART_SetConfig+0x2d4>)
 801693e:	fba3 2302 	umull	r2, r3, r3, r2
 8016942:	095b      	lsrs	r3, r3, #5
 8016944:	011c      	lsls	r4, r3, #4
 8016946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801694a:	2200      	movs	r2, #0
 801694c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016950:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8016954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8016958:	4642      	mov	r2, r8
 801695a:	464b      	mov	r3, r9
 801695c:	1891      	adds	r1, r2, r2
 801695e:	64b9      	str	r1, [r7, #72]	; 0x48
 8016960:	415b      	adcs	r3, r3
 8016962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016968:	4641      	mov	r1, r8
 801696a:	eb12 0a01 	adds.w	sl, r2, r1
 801696e:	4649      	mov	r1, r9
 8016970:	eb43 0b01 	adc.w	fp, r3, r1
 8016974:	f04f 0200 	mov.w	r2, #0
 8016978:	f04f 0300 	mov.w	r3, #0
 801697c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8016980:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8016984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016988:	4692      	mov	sl, r2
 801698a:	469b      	mov	fp, r3
 801698c:	4643      	mov	r3, r8
 801698e:	eb1a 0303 	adds.w	r3, sl, r3
 8016992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016996:	464b      	mov	r3, r9
 8016998:	eb4b 0303 	adc.w	r3, fp, r3
 801699c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80169a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	2200      	movs	r2, #0
 80169a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80169ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80169b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80169b4:	460b      	mov	r3, r1
 80169b6:	18db      	adds	r3, r3, r3
 80169b8:	643b      	str	r3, [r7, #64]	; 0x40
 80169ba:	4613      	mov	r3, r2
 80169bc:	eb42 0303 	adc.w	r3, r2, r3
 80169c0:	647b      	str	r3, [r7, #68]	; 0x44
 80169c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80169c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80169ca:	f7ea f95d 	bl	8000c88 <__aeabi_uldivmod>
 80169ce:	4602      	mov	r2, r0
 80169d0:	460b      	mov	r3, r1
 80169d2:	4611      	mov	r1, r2
 80169d4:	4b3b      	ldr	r3, [pc, #236]	; (8016ac4 <UART_SetConfig+0x2d4>)
 80169d6:	fba3 2301 	umull	r2, r3, r3, r1
 80169da:	095b      	lsrs	r3, r3, #5
 80169dc:	2264      	movs	r2, #100	; 0x64
 80169de:	fb02 f303 	mul.w	r3, r2, r3
 80169e2:	1acb      	subs	r3, r1, r3
 80169e4:	00db      	lsls	r3, r3, #3
 80169e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80169ea:	4b36      	ldr	r3, [pc, #216]	; (8016ac4 <UART_SetConfig+0x2d4>)
 80169ec:	fba3 2302 	umull	r2, r3, r3, r2
 80169f0:	095b      	lsrs	r3, r3, #5
 80169f2:	005b      	lsls	r3, r3, #1
 80169f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80169f8:	441c      	add	r4, r3
 80169fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80169fe:	2200      	movs	r2, #0
 8016a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016a04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8016a08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8016a0c:	4642      	mov	r2, r8
 8016a0e:	464b      	mov	r3, r9
 8016a10:	1891      	adds	r1, r2, r2
 8016a12:	63b9      	str	r1, [r7, #56]	; 0x38
 8016a14:	415b      	adcs	r3, r3
 8016a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8016a1c:	4641      	mov	r1, r8
 8016a1e:	1851      	adds	r1, r2, r1
 8016a20:	6339      	str	r1, [r7, #48]	; 0x30
 8016a22:	4649      	mov	r1, r9
 8016a24:	414b      	adcs	r3, r1
 8016a26:	637b      	str	r3, [r7, #52]	; 0x34
 8016a28:	f04f 0200 	mov.w	r2, #0
 8016a2c:	f04f 0300 	mov.w	r3, #0
 8016a30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8016a34:	4659      	mov	r1, fp
 8016a36:	00cb      	lsls	r3, r1, #3
 8016a38:	4651      	mov	r1, sl
 8016a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016a3e:	4651      	mov	r1, sl
 8016a40:	00ca      	lsls	r2, r1, #3
 8016a42:	4610      	mov	r0, r2
 8016a44:	4619      	mov	r1, r3
 8016a46:	4603      	mov	r3, r0
 8016a48:	4642      	mov	r2, r8
 8016a4a:	189b      	adds	r3, r3, r2
 8016a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016a50:	464b      	mov	r3, r9
 8016a52:	460a      	mov	r2, r1
 8016a54:	eb42 0303 	adc.w	r3, r2, r3
 8016a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	2200      	movs	r2, #0
 8016a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016a68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8016a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8016a70:	460b      	mov	r3, r1
 8016a72:	18db      	adds	r3, r3, r3
 8016a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a76:	4613      	mov	r3, r2
 8016a78:	eb42 0303 	adc.w	r3, r2, r3
 8016a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016a82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8016a86:	f7ea f8ff 	bl	8000c88 <__aeabi_uldivmod>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	4b0d      	ldr	r3, [pc, #52]	; (8016ac4 <UART_SetConfig+0x2d4>)
 8016a90:	fba3 1302 	umull	r1, r3, r3, r2
 8016a94:	095b      	lsrs	r3, r3, #5
 8016a96:	2164      	movs	r1, #100	; 0x64
 8016a98:	fb01 f303 	mul.w	r3, r1, r3
 8016a9c:	1ad3      	subs	r3, r2, r3
 8016a9e:	00db      	lsls	r3, r3, #3
 8016aa0:	3332      	adds	r3, #50	; 0x32
 8016aa2:	4a08      	ldr	r2, [pc, #32]	; (8016ac4 <UART_SetConfig+0x2d4>)
 8016aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8016aa8:	095b      	lsrs	r3, r3, #5
 8016aaa:	f003 0207 	and.w	r2, r3, #7
 8016aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4422      	add	r2, r4
 8016ab6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8016ab8:	e105      	b.n	8016cc6 <UART_SetConfig+0x4d6>
 8016aba:	bf00      	nop
 8016abc:	40011000 	.word	0x40011000
 8016ac0:	40011400 	.word	0x40011400
 8016ac4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016acc:	2200      	movs	r2, #0
 8016ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016ad2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8016ad6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8016ada:	4642      	mov	r2, r8
 8016adc:	464b      	mov	r3, r9
 8016ade:	1891      	adds	r1, r2, r2
 8016ae0:	6239      	str	r1, [r7, #32]
 8016ae2:	415b      	adcs	r3, r3
 8016ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016aea:	4641      	mov	r1, r8
 8016aec:	1854      	adds	r4, r2, r1
 8016aee:	4649      	mov	r1, r9
 8016af0:	eb43 0501 	adc.w	r5, r3, r1
 8016af4:	f04f 0200 	mov.w	r2, #0
 8016af8:	f04f 0300 	mov.w	r3, #0
 8016afc:	00eb      	lsls	r3, r5, #3
 8016afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016b02:	00e2      	lsls	r2, r4, #3
 8016b04:	4614      	mov	r4, r2
 8016b06:	461d      	mov	r5, r3
 8016b08:	4643      	mov	r3, r8
 8016b0a:	18e3      	adds	r3, r4, r3
 8016b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016b10:	464b      	mov	r3, r9
 8016b12:	eb45 0303 	adc.w	r3, r5, r3
 8016b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016b1e:	685b      	ldr	r3, [r3, #4]
 8016b20:	2200      	movs	r2, #0
 8016b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016b26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016b2a:	f04f 0200 	mov.w	r2, #0
 8016b2e:	f04f 0300 	mov.w	r3, #0
 8016b32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8016b36:	4629      	mov	r1, r5
 8016b38:	008b      	lsls	r3, r1, #2
 8016b3a:	4621      	mov	r1, r4
 8016b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016b40:	4621      	mov	r1, r4
 8016b42:	008a      	lsls	r2, r1, #2
 8016b44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8016b48:	f7ea f89e 	bl	8000c88 <__aeabi_uldivmod>
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	460b      	mov	r3, r1
 8016b50:	4b60      	ldr	r3, [pc, #384]	; (8016cd4 <UART_SetConfig+0x4e4>)
 8016b52:	fba3 2302 	umull	r2, r3, r3, r2
 8016b56:	095b      	lsrs	r3, r3, #5
 8016b58:	011c      	lsls	r4, r3, #4
 8016b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016b5e:	2200      	movs	r2, #0
 8016b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016b64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8016b68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8016b6c:	4642      	mov	r2, r8
 8016b6e:	464b      	mov	r3, r9
 8016b70:	1891      	adds	r1, r2, r2
 8016b72:	61b9      	str	r1, [r7, #24]
 8016b74:	415b      	adcs	r3, r3
 8016b76:	61fb      	str	r3, [r7, #28]
 8016b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016b7c:	4641      	mov	r1, r8
 8016b7e:	1851      	adds	r1, r2, r1
 8016b80:	6139      	str	r1, [r7, #16]
 8016b82:	4649      	mov	r1, r9
 8016b84:	414b      	adcs	r3, r1
 8016b86:	617b      	str	r3, [r7, #20]
 8016b88:	f04f 0200 	mov.w	r2, #0
 8016b8c:	f04f 0300 	mov.w	r3, #0
 8016b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8016b94:	4659      	mov	r1, fp
 8016b96:	00cb      	lsls	r3, r1, #3
 8016b98:	4651      	mov	r1, sl
 8016b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016b9e:	4651      	mov	r1, sl
 8016ba0:	00ca      	lsls	r2, r1, #3
 8016ba2:	4610      	mov	r0, r2
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	4642      	mov	r2, r8
 8016baa:	189b      	adds	r3, r3, r2
 8016bac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016bb0:	464b      	mov	r3, r9
 8016bb2:	460a      	mov	r2, r1
 8016bb4:	eb42 0303 	adc.w	r3, r2, r3
 8016bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016bc0:	685b      	ldr	r3, [r3, #4]
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8016bc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8016bc8:	f04f 0200 	mov.w	r2, #0
 8016bcc:	f04f 0300 	mov.w	r3, #0
 8016bd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8016bd4:	4649      	mov	r1, r9
 8016bd6:	008b      	lsls	r3, r1, #2
 8016bd8:	4641      	mov	r1, r8
 8016bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016bde:	4641      	mov	r1, r8
 8016be0:	008a      	lsls	r2, r1, #2
 8016be2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8016be6:	f7ea f84f 	bl	8000c88 <__aeabi_uldivmod>
 8016bea:	4602      	mov	r2, r0
 8016bec:	460b      	mov	r3, r1
 8016bee:	4b39      	ldr	r3, [pc, #228]	; (8016cd4 <UART_SetConfig+0x4e4>)
 8016bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8016bf4:	095b      	lsrs	r3, r3, #5
 8016bf6:	2164      	movs	r1, #100	; 0x64
 8016bf8:	fb01 f303 	mul.w	r3, r1, r3
 8016bfc:	1ad3      	subs	r3, r2, r3
 8016bfe:	011b      	lsls	r3, r3, #4
 8016c00:	3332      	adds	r3, #50	; 0x32
 8016c02:	4a34      	ldr	r2, [pc, #208]	; (8016cd4 <UART_SetConfig+0x4e4>)
 8016c04:	fba2 2303 	umull	r2, r3, r2, r3
 8016c08:	095b      	lsrs	r3, r3, #5
 8016c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c0e:	441c      	add	r4, r3
 8016c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016c14:	2200      	movs	r2, #0
 8016c16:	673b      	str	r3, [r7, #112]	; 0x70
 8016c18:	677a      	str	r2, [r7, #116]	; 0x74
 8016c1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8016c1e:	4642      	mov	r2, r8
 8016c20:	464b      	mov	r3, r9
 8016c22:	1891      	adds	r1, r2, r2
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	415b      	adcs	r3, r3
 8016c28:	60fb      	str	r3, [r7, #12]
 8016c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016c2e:	4641      	mov	r1, r8
 8016c30:	1851      	adds	r1, r2, r1
 8016c32:	6039      	str	r1, [r7, #0]
 8016c34:	4649      	mov	r1, r9
 8016c36:	414b      	adcs	r3, r1
 8016c38:	607b      	str	r3, [r7, #4]
 8016c3a:	f04f 0200 	mov.w	r2, #0
 8016c3e:	f04f 0300 	mov.w	r3, #0
 8016c42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8016c46:	4659      	mov	r1, fp
 8016c48:	00cb      	lsls	r3, r1, #3
 8016c4a:	4651      	mov	r1, sl
 8016c4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016c50:	4651      	mov	r1, sl
 8016c52:	00ca      	lsls	r2, r1, #3
 8016c54:	4610      	mov	r0, r2
 8016c56:	4619      	mov	r1, r3
 8016c58:	4603      	mov	r3, r0
 8016c5a:	4642      	mov	r2, r8
 8016c5c:	189b      	adds	r3, r3, r2
 8016c5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8016c60:	464b      	mov	r3, r9
 8016c62:	460a      	mov	r2, r1
 8016c64:	eb42 0303 	adc.w	r3, r2, r3
 8016c68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016c6e:	685b      	ldr	r3, [r3, #4]
 8016c70:	2200      	movs	r2, #0
 8016c72:	663b      	str	r3, [r7, #96]	; 0x60
 8016c74:	667a      	str	r2, [r7, #100]	; 0x64
 8016c76:	f04f 0200 	mov.w	r2, #0
 8016c7a:	f04f 0300 	mov.w	r3, #0
 8016c7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8016c82:	4649      	mov	r1, r9
 8016c84:	008b      	lsls	r3, r1, #2
 8016c86:	4641      	mov	r1, r8
 8016c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016c8c:	4641      	mov	r1, r8
 8016c8e:	008a      	lsls	r2, r1, #2
 8016c90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016c94:	f7e9 fff8 	bl	8000c88 <__aeabi_uldivmod>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	460b      	mov	r3, r1
 8016c9c:	4b0d      	ldr	r3, [pc, #52]	; (8016cd4 <UART_SetConfig+0x4e4>)
 8016c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8016ca2:	095b      	lsrs	r3, r3, #5
 8016ca4:	2164      	movs	r1, #100	; 0x64
 8016ca6:	fb01 f303 	mul.w	r3, r1, r3
 8016caa:	1ad3      	subs	r3, r2, r3
 8016cac:	011b      	lsls	r3, r3, #4
 8016cae:	3332      	adds	r3, #50	; 0x32
 8016cb0:	4a08      	ldr	r2, [pc, #32]	; (8016cd4 <UART_SetConfig+0x4e4>)
 8016cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8016cb6:	095b      	lsrs	r3, r3, #5
 8016cb8:	f003 020f 	and.w	r2, r3, #15
 8016cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	4422      	add	r2, r4
 8016cc4:	609a      	str	r2, [r3, #8]
}
 8016cc6:	bf00      	nop
 8016cc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016cd2:	bf00      	nop
 8016cd4:	51eb851f 	.word	0x51eb851f

08016cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016cd8:	b084      	sub	sp, #16
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b084      	sub	sp, #16
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	6078      	str	r0, [r7, #4]
 8016ce2:	f107 001c 	add.w	r0, r7, #28
 8016ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8016cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cec:	2b01      	cmp	r3, #1
 8016cee:	d122      	bne.n	8016d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	68db      	ldr	r3, [r3, #12]
 8016d00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8016d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d08:	687a      	ldr	r2, [r7, #4]
 8016d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8016d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d1a:	2b01      	cmp	r3, #1
 8016d1c:	d105      	bne.n	8016d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	68db      	ldr	r3, [r3, #12]
 8016d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8016d2a:	6878      	ldr	r0, [r7, #4]
 8016d2c:	f001 fbee 	bl	801850c <USB_CoreReset>
 8016d30:	4603      	mov	r3, r0
 8016d32:	73fb      	strb	r3, [r7, #15]
 8016d34:	e01a      	b.n	8016d6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	68db      	ldr	r3, [r3, #12]
 8016d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f001 fbe2 	bl	801850c <USB_CoreReset>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8016d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d106      	bne.n	8016d60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8016d5e:	e005      	b.n	8016d6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8016d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d10b      	bne.n	8016d8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	689b      	ldr	r3, [r3, #8]
 8016d76:	f043 0206 	orr.w	r2, r3, #6
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	689b      	ldr	r3, [r3, #8]
 8016d82:	f043 0220 	orr.w	r2, r3, #32
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8016d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	3710      	adds	r7, #16
 8016d90:	46bd      	mov	sp, r7
 8016d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016d96:	b004      	add	sp, #16
 8016d98:	4770      	bx	lr
	...

08016d9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b087      	sub	sp, #28
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	60f8      	str	r0, [r7, #12]
 8016da4:	60b9      	str	r1, [r7, #8]
 8016da6:	4613      	mov	r3, r2
 8016da8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016daa:	79fb      	ldrb	r3, [r7, #7]
 8016dac:	2b02      	cmp	r3, #2
 8016dae:	d165      	bne.n	8016e7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	4a41      	ldr	r2, [pc, #260]	; (8016eb8 <USB_SetTurnaroundTime+0x11c>)
 8016db4:	4293      	cmp	r3, r2
 8016db6:	d906      	bls.n	8016dc6 <USB_SetTurnaroundTime+0x2a>
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	4a40      	ldr	r2, [pc, #256]	; (8016ebc <USB_SetTurnaroundTime+0x120>)
 8016dbc:	4293      	cmp	r3, r2
 8016dbe:	d202      	bcs.n	8016dc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8016dc0:	230f      	movs	r3, #15
 8016dc2:	617b      	str	r3, [r7, #20]
 8016dc4:	e062      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	4a3c      	ldr	r2, [pc, #240]	; (8016ebc <USB_SetTurnaroundTime+0x120>)
 8016dca:	4293      	cmp	r3, r2
 8016dcc:	d306      	bcc.n	8016ddc <USB_SetTurnaroundTime+0x40>
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	4a3b      	ldr	r2, [pc, #236]	; (8016ec0 <USB_SetTurnaroundTime+0x124>)
 8016dd2:	4293      	cmp	r3, r2
 8016dd4:	d202      	bcs.n	8016ddc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8016dd6:	230e      	movs	r3, #14
 8016dd8:	617b      	str	r3, [r7, #20]
 8016dda:	e057      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	4a38      	ldr	r2, [pc, #224]	; (8016ec0 <USB_SetTurnaroundTime+0x124>)
 8016de0:	4293      	cmp	r3, r2
 8016de2:	d306      	bcc.n	8016df2 <USB_SetTurnaroundTime+0x56>
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	4a37      	ldr	r2, [pc, #220]	; (8016ec4 <USB_SetTurnaroundTime+0x128>)
 8016de8:	4293      	cmp	r3, r2
 8016dea:	d202      	bcs.n	8016df2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8016dec:	230d      	movs	r3, #13
 8016dee:	617b      	str	r3, [r7, #20]
 8016df0:	e04c      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	4a33      	ldr	r2, [pc, #204]	; (8016ec4 <USB_SetTurnaroundTime+0x128>)
 8016df6:	4293      	cmp	r3, r2
 8016df8:	d306      	bcc.n	8016e08 <USB_SetTurnaroundTime+0x6c>
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	4a32      	ldr	r2, [pc, #200]	; (8016ec8 <USB_SetTurnaroundTime+0x12c>)
 8016dfe:	4293      	cmp	r3, r2
 8016e00:	d802      	bhi.n	8016e08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8016e02:	230c      	movs	r3, #12
 8016e04:	617b      	str	r3, [r7, #20]
 8016e06:	e041      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	4a2f      	ldr	r2, [pc, #188]	; (8016ec8 <USB_SetTurnaroundTime+0x12c>)
 8016e0c:	4293      	cmp	r3, r2
 8016e0e:	d906      	bls.n	8016e1e <USB_SetTurnaroundTime+0x82>
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	4a2e      	ldr	r2, [pc, #184]	; (8016ecc <USB_SetTurnaroundTime+0x130>)
 8016e14:	4293      	cmp	r3, r2
 8016e16:	d802      	bhi.n	8016e1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8016e18:	230b      	movs	r3, #11
 8016e1a:	617b      	str	r3, [r7, #20]
 8016e1c:	e036      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8016e1e:	68bb      	ldr	r3, [r7, #8]
 8016e20:	4a2a      	ldr	r2, [pc, #168]	; (8016ecc <USB_SetTurnaroundTime+0x130>)
 8016e22:	4293      	cmp	r3, r2
 8016e24:	d906      	bls.n	8016e34 <USB_SetTurnaroundTime+0x98>
 8016e26:	68bb      	ldr	r3, [r7, #8]
 8016e28:	4a29      	ldr	r2, [pc, #164]	; (8016ed0 <USB_SetTurnaroundTime+0x134>)
 8016e2a:	4293      	cmp	r3, r2
 8016e2c:	d802      	bhi.n	8016e34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8016e2e:	230a      	movs	r3, #10
 8016e30:	617b      	str	r3, [r7, #20]
 8016e32:	e02b      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	4a26      	ldr	r2, [pc, #152]	; (8016ed0 <USB_SetTurnaroundTime+0x134>)
 8016e38:	4293      	cmp	r3, r2
 8016e3a:	d906      	bls.n	8016e4a <USB_SetTurnaroundTime+0xae>
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	4a25      	ldr	r2, [pc, #148]	; (8016ed4 <USB_SetTurnaroundTime+0x138>)
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d202      	bcs.n	8016e4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8016e44:	2309      	movs	r3, #9
 8016e46:	617b      	str	r3, [r7, #20]
 8016e48:	e020      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	4a21      	ldr	r2, [pc, #132]	; (8016ed4 <USB_SetTurnaroundTime+0x138>)
 8016e4e:	4293      	cmp	r3, r2
 8016e50:	d306      	bcc.n	8016e60 <USB_SetTurnaroundTime+0xc4>
 8016e52:	68bb      	ldr	r3, [r7, #8]
 8016e54:	4a20      	ldr	r2, [pc, #128]	; (8016ed8 <USB_SetTurnaroundTime+0x13c>)
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d802      	bhi.n	8016e60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8016e5a:	2308      	movs	r3, #8
 8016e5c:	617b      	str	r3, [r7, #20]
 8016e5e:	e015      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	4a1d      	ldr	r2, [pc, #116]	; (8016ed8 <USB_SetTurnaroundTime+0x13c>)
 8016e64:	4293      	cmp	r3, r2
 8016e66:	d906      	bls.n	8016e76 <USB_SetTurnaroundTime+0xda>
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	4a1c      	ldr	r2, [pc, #112]	; (8016edc <USB_SetTurnaroundTime+0x140>)
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d202      	bcs.n	8016e76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8016e70:	2307      	movs	r3, #7
 8016e72:	617b      	str	r3, [r7, #20]
 8016e74:	e00a      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8016e76:	2306      	movs	r3, #6
 8016e78:	617b      	str	r3, [r7, #20]
 8016e7a:	e007      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8016e7c:	79fb      	ldrb	r3, [r7, #7]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d102      	bne.n	8016e88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8016e82:	2309      	movs	r3, #9
 8016e84:	617b      	str	r3, [r7, #20]
 8016e86:	e001      	b.n	8016e8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016e88:	2309      	movs	r3, #9
 8016e8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	68db      	ldr	r3, [r3, #12]
 8016e90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	68da      	ldr	r2, [r3, #12]
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	029b      	lsls	r3, r3, #10
 8016ea0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8016ea4:	431a      	orrs	r2, r3
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016eaa:	2300      	movs	r3, #0
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	371c      	adds	r7, #28
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb6:	4770      	bx	lr
 8016eb8:	00d8acbf 	.word	0x00d8acbf
 8016ebc:	00e4e1c0 	.word	0x00e4e1c0
 8016ec0:	00f42400 	.word	0x00f42400
 8016ec4:	01067380 	.word	0x01067380
 8016ec8:	011a499f 	.word	0x011a499f
 8016ecc:	01312cff 	.word	0x01312cff
 8016ed0:	014ca43f 	.word	0x014ca43f
 8016ed4:	016e3600 	.word	0x016e3600
 8016ed8:	01a6ab1f 	.word	0x01a6ab1f
 8016edc:	01e84800 	.word	0x01e84800

08016ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	689b      	ldr	r3, [r3, #8]
 8016eec:	f043 0201 	orr.w	r2, r3, #1
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016ef4:	2300      	movs	r3, #0
}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	370c      	adds	r7, #12
 8016efa:	46bd      	mov	sp, r7
 8016efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f00:	4770      	bx	lr

08016f02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016f02:	b480      	push	{r7}
 8016f04:	b083      	sub	sp, #12
 8016f06:	af00      	add	r7, sp, #0
 8016f08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	689b      	ldr	r3, [r3, #8]
 8016f0e:	f023 0201 	bic.w	r2, r3, #1
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016f16:	2300      	movs	r3, #0
}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	370c      	adds	r7, #12
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f22:	4770      	bx	lr

08016f24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b084      	sub	sp, #16
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
 8016f2c:	460b      	mov	r3, r1
 8016f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8016f30:	2300      	movs	r3, #0
 8016f32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	68db      	ldr	r3, [r3, #12]
 8016f38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8016f40:	78fb      	ldrb	r3, [r7, #3]
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d115      	bne.n	8016f72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	68db      	ldr	r3, [r3, #12]
 8016f4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016f52:	2001      	movs	r0, #1
 8016f54:	f7f7 fafe 	bl	800e554 <HAL_Delay>
      ms++;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	3301      	adds	r3, #1
 8016f5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f001 fa45 	bl	80183ee <USB_GetMode>
 8016f64:	4603      	mov	r3, r0
 8016f66:	2b01      	cmp	r3, #1
 8016f68:	d01e      	beq.n	8016fa8 <USB_SetCurrentMode+0x84>
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	2b31      	cmp	r3, #49	; 0x31
 8016f6e:	d9f0      	bls.n	8016f52 <USB_SetCurrentMode+0x2e>
 8016f70:	e01a      	b.n	8016fa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8016f72:	78fb      	ldrb	r3, [r7, #3]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d115      	bne.n	8016fa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	68db      	ldr	r3, [r3, #12]
 8016f7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016f84:	2001      	movs	r0, #1
 8016f86:	f7f7 fae5 	bl	800e554 <HAL_Delay>
      ms++;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	3301      	adds	r3, #1
 8016f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8016f90:	6878      	ldr	r0, [r7, #4]
 8016f92:	f001 fa2c 	bl	80183ee <USB_GetMode>
 8016f96:	4603      	mov	r3, r0
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d005      	beq.n	8016fa8 <USB_SetCurrentMode+0x84>
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	2b31      	cmp	r3, #49	; 0x31
 8016fa0:	d9f0      	bls.n	8016f84 <USB_SetCurrentMode+0x60>
 8016fa2:	e001      	b.n	8016fa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	e005      	b.n	8016fb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2b32      	cmp	r3, #50	; 0x32
 8016fac:	d101      	bne.n	8016fb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8016fae:	2301      	movs	r3, #1
 8016fb0:	e000      	b.n	8016fb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8016fb2:	2300      	movs	r3, #0
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3710      	adds	r7, #16
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd80      	pop	{r7, pc}

08016fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016fbc:	b084      	sub	sp, #16
 8016fbe:	b580      	push	{r7, lr}
 8016fc0:	b086      	sub	sp, #24
 8016fc2:	af00      	add	r7, sp, #0
 8016fc4:	6078      	str	r0, [r7, #4]
 8016fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	613b      	str	r3, [r7, #16]
 8016fda:	e009      	b.n	8016ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	3340      	adds	r3, #64	; 0x40
 8016fe2:	009b      	lsls	r3, r3, #2
 8016fe4:	4413      	add	r3, r2
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8016fea:	693b      	ldr	r3, [r7, #16]
 8016fec:	3301      	adds	r3, #1
 8016fee:	613b      	str	r3, [r7, #16]
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	2b0e      	cmp	r3, #14
 8016ff4:	d9f2      	bls.n	8016fdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d11c      	bne.n	8017036 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017002:	685b      	ldr	r3, [r3, #4]
 8017004:	68fa      	ldr	r2, [r7, #12]
 8017006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801700a:	f043 0302 	orr.w	r3, r3, #2
 801700e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017020:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801702c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	639a      	str	r2, [r3, #56]	; 0x38
 8017034:	e00b      	b.n	801704e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801703a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017046:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017054:	461a      	mov	r2, r3
 8017056:	2300      	movs	r3, #0
 8017058:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017060:	4619      	mov	r1, r3
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017068:	461a      	mov	r2, r3
 801706a:	680b      	ldr	r3, [r1, #0]
 801706c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017070:	2b01      	cmp	r3, #1
 8017072:	d10c      	bne.n	801708e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8017074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017076:	2b00      	cmp	r3, #0
 8017078:	d104      	bne.n	8017084 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801707a:	2100      	movs	r1, #0
 801707c:	6878      	ldr	r0, [r7, #4]
 801707e:	f000 f965 	bl	801734c <USB_SetDevSpeed>
 8017082:	e008      	b.n	8017096 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8017084:	2101      	movs	r1, #1
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f000 f960 	bl	801734c <USB_SetDevSpeed>
 801708c:	e003      	b.n	8017096 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801708e:	2103      	movs	r1, #3
 8017090:	6878      	ldr	r0, [r7, #4]
 8017092:	f000 f95b 	bl	801734c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8017096:	2110      	movs	r1, #16
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f000 f8f3 	bl	8017284 <USB_FlushTxFifo>
 801709e:	4603      	mov	r3, r0
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d001      	beq.n	80170a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80170a4:	2301      	movs	r3, #1
 80170a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f000 f91f 	bl	80172ec <USB_FlushRxFifo>
 80170ae:	4603      	mov	r3, r0
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d001      	beq.n	80170b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80170b4:	2301      	movs	r3, #1
 80170b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80170be:	461a      	mov	r2, r3
 80170c0:	2300      	movs	r3, #0
 80170c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80170ca:	461a      	mov	r2, r3
 80170cc:	2300      	movs	r3, #0
 80170ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80170d6:	461a      	mov	r2, r3
 80170d8:	2300      	movs	r3, #0
 80170da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80170dc:	2300      	movs	r3, #0
 80170de:	613b      	str	r3, [r7, #16]
 80170e0:	e043      	b.n	801716a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80170e2:	693b      	ldr	r3, [r7, #16]
 80170e4:	015a      	lsls	r2, r3, #5
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	4413      	add	r3, r2
 80170ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80170f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80170f8:	d118      	bne.n	801712c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d10a      	bne.n	8017116 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	015a      	lsls	r2, r3, #5
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	4413      	add	r3, r2
 8017108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801710c:	461a      	mov	r2, r3
 801710e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8017112:	6013      	str	r3, [r2, #0]
 8017114:	e013      	b.n	801713e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	015a      	lsls	r2, r3, #5
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	4413      	add	r3, r2
 801711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017122:	461a      	mov	r2, r3
 8017124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8017128:	6013      	str	r3, [r2, #0]
 801712a:	e008      	b.n	801713e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	015a      	lsls	r2, r3, #5
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	4413      	add	r3, r2
 8017134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017138:	461a      	mov	r2, r3
 801713a:	2300      	movs	r3, #0
 801713c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801713e:	693b      	ldr	r3, [r7, #16]
 8017140:	015a      	lsls	r2, r3, #5
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	4413      	add	r3, r2
 8017146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801714a:	461a      	mov	r2, r3
 801714c:	2300      	movs	r3, #0
 801714e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8017150:	693b      	ldr	r3, [r7, #16]
 8017152:	015a      	lsls	r2, r3, #5
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	4413      	add	r3, r2
 8017158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801715c:	461a      	mov	r2, r3
 801715e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8017162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	3301      	adds	r3, #1
 8017168:	613b      	str	r3, [r7, #16]
 801716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801716c:	693a      	ldr	r2, [r7, #16]
 801716e:	429a      	cmp	r2, r3
 8017170:	d3b7      	bcc.n	80170e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8017172:	2300      	movs	r3, #0
 8017174:	613b      	str	r3, [r7, #16]
 8017176:	e043      	b.n	8017200 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	015a      	lsls	r2, r3, #5
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	4413      	add	r3, r2
 8017180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801718a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801718e:	d118      	bne.n	80171c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8017190:	693b      	ldr	r3, [r7, #16]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d10a      	bne.n	80171ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	015a      	lsls	r2, r3, #5
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	4413      	add	r3, r2
 801719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171a2:	461a      	mov	r2, r3
 80171a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80171a8:	6013      	str	r3, [r2, #0]
 80171aa:	e013      	b.n	80171d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	015a      	lsls	r2, r3, #5
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	4413      	add	r3, r2
 80171b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171b8:	461a      	mov	r2, r3
 80171ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80171be:	6013      	str	r3, [r2, #0]
 80171c0:	e008      	b.n	80171d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80171c2:	693b      	ldr	r3, [r7, #16]
 80171c4:	015a      	lsls	r2, r3, #5
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	4413      	add	r3, r2
 80171ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171ce:	461a      	mov	r2, r3
 80171d0:	2300      	movs	r3, #0
 80171d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	015a      	lsls	r2, r3, #5
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	4413      	add	r3, r2
 80171dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171e0:	461a      	mov	r2, r3
 80171e2:	2300      	movs	r3, #0
 80171e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	015a      	lsls	r2, r3, #5
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	4413      	add	r3, r2
 80171ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171f2:	461a      	mov	r2, r3
 80171f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80171f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	3301      	adds	r3, #1
 80171fe:	613b      	str	r3, [r7, #16]
 8017200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017202:	693a      	ldr	r2, [r7, #16]
 8017204:	429a      	cmp	r2, r3
 8017206:	d3b7      	bcc.n	8017178 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801720e:	691b      	ldr	r3, [r3, #16]
 8017210:	68fa      	ldr	r2, [r7, #12]
 8017212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801721a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2200      	movs	r2, #0
 8017220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8017228:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801722c:	2b00      	cmp	r3, #0
 801722e:	d105      	bne.n	801723c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	699b      	ldr	r3, [r3, #24]
 8017234:	f043 0210 	orr.w	r2, r3, #16
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	699a      	ldr	r2, [r3, #24]
 8017240:	4b0f      	ldr	r3, [pc, #60]	; (8017280 <USB_DevInit+0x2c4>)
 8017242:	4313      	orrs	r3, r2
 8017244:	687a      	ldr	r2, [r7, #4]
 8017246:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8017248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801724a:	2b00      	cmp	r3, #0
 801724c:	d005      	beq.n	801725a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	699b      	ldr	r3, [r3, #24]
 8017252:	f043 0208 	orr.w	r2, r3, #8
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801725a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801725c:	2b01      	cmp	r3, #1
 801725e:	d107      	bne.n	8017270 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	699b      	ldr	r3, [r3, #24]
 8017264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017268:	f043 0304 	orr.w	r3, r3, #4
 801726c:	687a      	ldr	r2, [r7, #4]
 801726e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8017270:	7dfb      	ldrb	r3, [r7, #23]
}
 8017272:	4618      	mov	r0, r3
 8017274:	3718      	adds	r7, #24
 8017276:	46bd      	mov	sp, r7
 8017278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801727c:	b004      	add	sp, #16
 801727e:	4770      	bx	lr
 8017280:	803c3800 	.word	0x803c3800

08017284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8017284:	b480      	push	{r7}
 8017286:	b085      	sub	sp, #20
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801728e:	2300      	movs	r3, #0
 8017290:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	3301      	adds	r3, #1
 8017296:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	4a13      	ldr	r2, [pc, #76]	; (80172e8 <USB_FlushTxFifo+0x64>)
 801729c:	4293      	cmp	r3, r2
 801729e:	d901      	bls.n	80172a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80172a0:	2303      	movs	r3, #3
 80172a2:	e01b      	b.n	80172dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	691b      	ldr	r3, [r3, #16]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	daf2      	bge.n	8017292 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80172ac:	2300      	movs	r3, #0
 80172ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	019b      	lsls	r3, r3, #6
 80172b4:	f043 0220 	orr.w	r2, r3, #32
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	3301      	adds	r3, #1
 80172c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	4a08      	ldr	r2, [pc, #32]	; (80172e8 <USB_FlushTxFifo+0x64>)
 80172c6:	4293      	cmp	r3, r2
 80172c8:	d901      	bls.n	80172ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80172ca:	2303      	movs	r3, #3
 80172cc:	e006      	b.n	80172dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	691b      	ldr	r3, [r3, #16]
 80172d2:	f003 0320 	and.w	r3, r3, #32
 80172d6:	2b20      	cmp	r3, #32
 80172d8:	d0f0      	beq.n	80172bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80172da:	2300      	movs	r3, #0
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3714      	adds	r7, #20
 80172e0:	46bd      	mov	sp, r7
 80172e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e6:	4770      	bx	lr
 80172e8:	00030d40 	.word	0x00030d40

080172ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80172ec:	b480      	push	{r7}
 80172ee:	b085      	sub	sp, #20
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80172f4:	2300      	movs	r3, #0
 80172f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	3301      	adds	r3, #1
 80172fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	4a11      	ldr	r2, [pc, #68]	; (8017348 <USB_FlushRxFifo+0x5c>)
 8017302:	4293      	cmp	r3, r2
 8017304:	d901      	bls.n	801730a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8017306:	2303      	movs	r3, #3
 8017308:	e018      	b.n	801733c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	691b      	ldr	r3, [r3, #16]
 801730e:	2b00      	cmp	r3, #0
 8017310:	daf2      	bge.n	80172f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8017312:	2300      	movs	r3, #0
 8017314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2210      	movs	r2, #16
 801731a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	3301      	adds	r3, #1
 8017320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	4a08      	ldr	r2, [pc, #32]	; (8017348 <USB_FlushRxFifo+0x5c>)
 8017326:	4293      	cmp	r3, r2
 8017328:	d901      	bls.n	801732e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801732a:	2303      	movs	r3, #3
 801732c:	e006      	b.n	801733c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	691b      	ldr	r3, [r3, #16]
 8017332:	f003 0310 	and.w	r3, r3, #16
 8017336:	2b10      	cmp	r3, #16
 8017338:	d0f0      	beq.n	801731c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801733a:	2300      	movs	r3, #0
}
 801733c:	4618      	mov	r0, r3
 801733e:	3714      	adds	r7, #20
 8017340:	46bd      	mov	sp, r7
 8017342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017346:	4770      	bx	lr
 8017348:	00030d40 	.word	0x00030d40

0801734c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801734c:	b480      	push	{r7}
 801734e:	b085      	sub	sp, #20
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	460b      	mov	r3, r1
 8017356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017362:	681a      	ldr	r2, [r3, #0]
 8017364:	78fb      	ldrb	r3, [r7, #3]
 8017366:	68f9      	ldr	r1, [r7, #12]
 8017368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801736c:	4313      	orrs	r3, r2
 801736e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8017370:	2300      	movs	r3, #0
}
 8017372:	4618      	mov	r0, r3
 8017374:	3714      	adds	r7, #20
 8017376:	46bd      	mov	sp, r7
 8017378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737c:	4770      	bx	lr

0801737e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801737e:	b480      	push	{r7}
 8017380:	b087      	sub	sp, #28
 8017382:	af00      	add	r7, sp, #0
 8017384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017390:	689b      	ldr	r3, [r3, #8]
 8017392:	f003 0306 	and.w	r3, r3, #6
 8017396:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d102      	bne.n	80173a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801739e:	2300      	movs	r3, #0
 80173a0:	75fb      	strb	r3, [r7, #23]
 80173a2:	e00a      	b.n	80173ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	2b02      	cmp	r3, #2
 80173a8:	d002      	beq.n	80173b0 <USB_GetDevSpeed+0x32>
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	2b06      	cmp	r3, #6
 80173ae:	d102      	bne.n	80173b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80173b0:	2302      	movs	r3, #2
 80173b2:	75fb      	strb	r3, [r7, #23]
 80173b4:	e001      	b.n	80173ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80173b6:	230f      	movs	r3, #15
 80173b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80173ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80173bc:	4618      	mov	r0, r3
 80173be:	371c      	adds	r7, #28
 80173c0:	46bd      	mov	sp, r7
 80173c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c6:	4770      	bx	lr

080173c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80173c8:	b480      	push	{r7}
 80173ca:	b085      	sub	sp, #20
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
 80173d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80173dc:	683b      	ldr	r3, [r7, #0]
 80173de:	785b      	ldrb	r3, [r3, #1]
 80173e0:	2b01      	cmp	r3, #1
 80173e2:	d13a      	bne.n	801745a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80173ea:	69da      	ldr	r2, [r3, #28]
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	f003 030f 	and.w	r3, r3, #15
 80173f4:	2101      	movs	r1, #1
 80173f6:	fa01 f303 	lsl.w	r3, r1, r3
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	68f9      	ldr	r1, [r7, #12]
 80173fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017402:	4313      	orrs	r3, r2
 8017404:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	015a      	lsls	r2, r3, #5
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	4413      	add	r3, r2
 801740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017418:	2b00      	cmp	r3, #0
 801741a:	d155      	bne.n	80174c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	015a      	lsls	r2, r3, #5
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	4413      	add	r3, r2
 8017424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017428:	681a      	ldr	r2, [r3, #0]
 801742a:	683b      	ldr	r3, [r7, #0]
 801742c:	68db      	ldr	r3, [r3, #12]
 801742e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	791b      	ldrb	r3, [r3, #4]
 8017436:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8017438:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	059b      	lsls	r3, r3, #22
 801743e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8017440:	4313      	orrs	r3, r2
 8017442:	68ba      	ldr	r2, [r7, #8]
 8017444:	0151      	lsls	r1, r2, #5
 8017446:	68fa      	ldr	r2, [r7, #12]
 8017448:	440a      	add	r2, r1
 801744a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801744e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017456:	6013      	str	r3, [r2, #0]
 8017458:	e036      	b.n	80174c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017460:	69da      	ldr	r2, [r3, #28]
 8017462:	683b      	ldr	r3, [r7, #0]
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	f003 030f 	and.w	r3, r3, #15
 801746a:	2101      	movs	r1, #1
 801746c:	fa01 f303 	lsl.w	r3, r1, r3
 8017470:	041b      	lsls	r3, r3, #16
 8017472:	68f9      	ldr	r1, [r7, #12]
 8017474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017478:	4313      	orrs	r3, r2
 801747a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801747c:	68bb      	ldr	r3, [r7, #8]
 801747e:	015a      	lsls	r2, r3, #5
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	4413      	add	r3, r2
 8017484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801748e:	2b00      	cmp	r3, #0
 8017490:	d11a      	bne.n	80174c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	015a      	lsls	r2, r3, #5
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	4413      	add	r3, r2
 801749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801749e:	681a      	ldr	r2, [r3, #0]
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	68db      	ldr	r3, [r3, #12]
 80174a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	791b      	ldrb	r3, [r3, #4]
 80174ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80174ae:	430b      	orrs	r3, r1
 80174b0:	4313      	orrs	r3, r2
 80174b2:	68ba      	ldr	r2, [r7, #8]
 80174b4:	0151      	lsls	r1, r2, #5
 80174b6:	68fa      	ldr	r2, [r7, #12]
 80174b8:	440a      	add	r2, r1
 80174ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80174be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80174c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80174c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80174c8:	2300      	movs	r3, #0
}
 80174ca:	4618      	mov	r0, r3
 80174cc:	3714      	adds	r7, #20
 80174ce:	46bd      	mov	sp, r7
 80174d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d4:	4770      	bx	lr
	...

080174d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80174d8:	b480      	push	{r7}
 80174da:	b085      	sub	sp, #20
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	785b      	ldrb	r3, [r3, #1]
 80174f0:	2b01      	cmp	r3, #1
 80174f2:	d161      	bne.n	80175b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	015a      	lsls	r2, r3, #5
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	4413      	add	r3, r2
 80174fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801750a:	d11f      	bne.n	801754c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	015a      	lsls	r2, r3, #5
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	4413      	add	r3, r2
 8017514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	68ba      	ldr	r2, [r7, #8]
 801751c:	0151      	lsls	r1, r2, #5
 801751e:	68fa      	ldr	r2, [r7, #12]
 8017520:	440a      	add	r2, r1
 8017522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017526:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801752a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	015a      	lsls	r2, r3, #5
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	4413      	add	r3, r2
 8017534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	68ba      	ldr	r2, [r7, #8]
 801753c:	0151      	lsls	r1, r2, #5
 801753e:	68fa      	ldr	r2, [r7, #12]
 8017540:	440a      	add	r2, r1
 8017542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801754a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	f003 030f 	and.w	r3, r3, #15
 801755c:	2101      	movs	r1, #1
 801755e:	fa01 f303 	lsl.w	r3, r1, r3
 8017562:	b29b      	uxth	r3, r3
 8017564:	43db      	mvns	r3, r3
 8017566:	68f9      	ldr	r1, [r7, #12]
 8017568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801756c:	4013      	ands	r3, r2
 801756e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017576:	69da      	ldr	r2, [r3, #28]
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	f003 030f 	and.w	r3, r3, #15
 8017580:	2101      	movs	r1, #1
 8017582:	fa01 f303 	lsl.w	r3, r1, r3
 8017586:	b29b      	uxth	r3, r3
 8017588:	43db      	mvns	r3, r3
 801758a:	68f9      	ldr	r1, [r7, #12]
 801758c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017590:	4013      	ands	r3, r2
 8017592:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	015a      	lsls	r2, r3, #5
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	4413      	add	r3, r2
 801759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80175a0:	681a      	ldr	r2, [r3, #0]
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	0159      	lsls	r1, r3, #5
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	440b      	add	r3, r1
 80175aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80175ae:	4619      	mov	r1, r3
 80175b0:	4b35      	ldr	r3, [pc, #212]	; (8017688 <USB_DeactivateEndpoint+0x1b0>)
 80175b2:	4013      	ands	r3, r2
 80175b4:	600b      	str	r3, [r1, #0]
 80175b6:	e060      	b.n	801767a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	015a      	lsls	r2, r3, #5
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	4413      	add	r3, r2
 80175c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80175ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80175ce:	d11f      	bne.n	8017610 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	015a      	lsls	r2, r3, #5
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	4413      	add	r3, r2
 80175d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	68ba      	ldr	r2, [r7, #8]
 80175e0:	0151      	lsls	r1, r2, #5
 80175e2:	68fa      	ldr	r2, [r7, #12]
 80175e4:	440a      	add	r2, r1
 80175e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80175ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80175ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	015a      	lsls	r2, r3, #5
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	4413      	add	r3, r2
 80175f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	68ba      	ldr	r2, [r7, #8]
 8017600:	0151      	lsls	r1, r2, #5
 8017602:	68fa      	ldr	r2, [r7, #12]
 8017604:	440a      	add	r2, r1
 8017606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801760a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801760e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	781b      	ldrb	r3, [r3, #0]
 801761c:	f003 030f 	and.w	r3, r3, #15
 8017620:	2101      	movs	r1, #1
 8017622:	fa01 f303 	lsl.w	r3, r1, r3
 8017626:	041b      	lsls	r3, r3, #16
 8017628:	43db      	mvns	r3, r3
 801762a:	68f9      	ldr	r1, [r7, #12]
 801762c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017630:	4013      	ands	r3, r2
 8017632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801763a:	69da      	ldr	r2, [r3, #28]
 801763c:	683b      	ldr	r3, [r7, #0]
 801763e:	781b      	ldrb	r3, [r3, #0]
 8017640:	f003 030f 	and.w	r3, r3, #15
 8017644:	2101      	movs	r1, #1
 8017646:	fa01 f303 	lsl.w	r3, r1, r3
 801764a:	041b      	lsls	r3, r3, #16
 801764c:	43db      	mvns	r3, r3
 801764e:	68f9      	ldr	r1, [r7, #12]
 8017650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017654:	4013      	ands	r3, r2
 8017656:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	015a      	lsls	r2, r3, #5
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	4413      	add	r3, r2
 8017660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017664:	681a      	ldr	r2, [r3, #0]
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	0159      	lsls	r1, r3, #5
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	440b      	add	r3, r1
 801766e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017672:	4619      	mov	r1, r3
 8017674:	4b05      	ldr	r3, [pc, #20]	; (801768c <USB_DeactivateEndpoint+0x1b4>)
 8017676:	4013      	ands	r3, r2
 8017678:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801767a:	2300      	movs	r3, #0
}
 801767c:	4618      	mov	r0, r3
 801767e:	3714      	adds	r7, #20
 8017680:	46bd      	mov	sp, r7
 8017682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017686:	4770      	bx	lr
 8017688:	ec337800 	.word	0xec337800
 801768c:	eff37800 	.word	0xeff37800

08017690 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b08a      	sub	sp, #40	; 0x28
 8017694:	af02      	add	r7, sp, #8
 8017696:	60f8      	str	r0, [r7, #12]
 8017698:	60b9      	str	r1, [r7, #8]
 801769a:	4613      	mov	r3, r2
 801769c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	781b      	ldrb	r3, [r3, #0]
 80176a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	785b      	ldrb	r3, [r3, #1]
 80176ac:	2b01      	cmp	r3, #1
 80176ae:	f040 815c 	bne.w	801796a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	699b      	ldr	r3, [r3, #24]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d132      	bne.n	8017720 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80176ba:	69bb      	ldr	r3, [r7, #24]
 80176bc:	015a      	lsls	r2, r3, #5
 80176be:	69fb      	ldr	r3, [r7, #28]
 80176c0:	4413      	add	r3, r2
 80176c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80176c6:	691b      	ldr	r3, [r3, #16]
 80176c8:	69ba      	ldr	r2, [r7, #24]
 80176ca:	0151      	lsls	r1, r2, #5
 80176cc:	69fa      	ldr	r2, [r7, #28]
 80176ce:	440a      	add	r2, r1
 80176d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80176d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80176d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80176dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80176de:	69bb      	ldr	r3, [r7, #24]
 80176e0:	015a      	lsls	r2, r3, #5
 80176e2:	69fb      	ldr	r3, [r7, #28]
 80176e4:	4413      	add	r3, r2
 80176e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80176ea:	691b      	ldr	r3, [r3, #16]
 80176ec:	69ba      	ldr	r2, [r7, #24]
 80176ee:	0151      	lsls	r1, r2, #5
 80176f0:	69fa      	ldr	r2, [r7, #28]
 80176f2:	440a      	add	r2, r1
 80176f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80176f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80176fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80176fe:	69bb      	ldr	r3, [r7, #24]
 8017700:	015a      	lsls	r2, r3, #5
 8017702:	69fb      	ldr	r3, [r7, #28]
 8017704:	4413      	add	r3, r2
 8017706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801770a:	691b      	ldr	r3, [r3, #16]
 801770c:	69ba      	ldr	r2, [r7, #24]
 801770e:	0151      	lsls	r1, r2, #5
 8017710:	69fa      	ldr	r2, [r7, #28]
 8017712:	440a      	add	r2, r1
 8017714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017718:	0cdb      	lsrs	r3, r3, #19
 801771a:	04db      	lsls	r3, r3, #19
 801771c:	6113      	str	r3, [r2, #16]
 801771e:	e074      	b.n	801780a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017720:	69bb      	ldr	r3, [r7, #24]
 8017722:	015a      	lsls	r2, r3, #5
 8017724:	69fb      	ldr	r3, [r7, #28]
 8017726:	4413      	add	r3, r2
 8017728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801772c:	691b      	ldr	r3, [r3, #16]
 801772e:	69ba      	ldr	r2, [r7, #24]
 8017730:	0151      	lsls	r1, r2, #5
 8017732:	69fa      	ldr	r2, [r7, #28]
 8017734:	440a      	add	r2, r1
 8017736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801773a:	0cdb      	lsrs	r3, r3, #19
 801773c:	04db      	lsls	r3, r3, #19
 801773e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017740:	69bb      	ldr	r3, [r7, #24]
 8017742:	015a      	lsls	r2, r3, #5
 8017744:	69fb      	ldr	r3, [r7, #28]
 8017746:	4413      	add	r3, r2
 8017748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801774c:	691b      	ldr	r3, [r3, #16]
 801774e:	69ba      	ldr	r2, [r7, #24]
 8017750:	0151      	lsls	r1, r2, #5
 8017752:	69fa      	ldr	r2, [r7, #28]
 8017754:	440a      	add	r2, r1
 8017756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801775a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801775e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	015a      	lsls	r2, r3, #5
 8017768:	69fb      	ldr	r3, [r7, #28]
 801776a:	4413      	add	r3, r2
 801776c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017770:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	6999      	ldr	r1, [r3, #24]
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	68db      	ldr	r3, [r3, #12]
 801777a:	440b      	add	r3, r1
 801777c:	1e59      	subs	r1, r3, #1
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	68db      	ldr	r3, [r3, #12]
 8017782:	fbb1 f3f3 	udiv	r3, r1, r3
 8017786:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8017788:	4b9d      	ldr	r3, [pc, #628]	; (8017a00 <USB_EPStartXfer+0x370>)
 801778a:	400b      	ands	r3, r1
 801778c:	69b9      	ldr	r1, [r7, #24]
 801778e:	0148      	lsls	r0, r1, #5
 8017790:	69f9      	ldr	r1, [r7, #28]
 8017792:	4401      	add	r1, r0
 8017794:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8017798:	4313      	orrs	r3, r2
 801779a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801779c:	69bb      	ldr	r3, [r7, #24]
 801779e:	015a      	lsls	r2, r3, #5
 80177a0:	69fb      	ldr	r3, [r7, #28]
 80177a2:	4413      	add	r3, r2
 80177a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80177a8:	691a      	ldr	r2, [r3, #16]
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	699b      	ldr	r3, [r3, #24]
 80177ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80177b2:	69b9      	ldr	r1, [r7, #24]
 80177b4:	0148      	lsls	r0, r1, #5
 80177b6:	69f9      	ldr	r1, [r7, #28]
 80177b8:	4401      	add	r1, r0
 80177ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80177be:	4313      	orrs	r3, r2
 80177c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	791b      	ldrb	r3, [r3, #4]
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	d11f      	bne.n	801780a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80177ca:	69bb      	ldr	r3, [r7, #24]
 80177cc:	015a      	lsls	r2, r3, #5
 80177ce:	69fb      	ldr	r3, [r7, #28]
 80177d0:	4413      	add	r3, r2
 80177d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80177d6:	691b      	ldr	r3, [r3, #16]
 80177d8:	69ba      	ldr	r2, [r7, #24]
 80177da:	0151      	lsls	r1, r2, #5
 80177dc:	69fa      	ldr	r2, [r7, #28]
 80177de:	440a      	add	r2, r1
 80177e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80177e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80177e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	015a      	lsls	r2, r3, #5
 80177ee:	69fb      	ldr	r3, [r7, #28]
 80177f0:	4413      	add	r3, r2
 80177f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80177f6:	691b      	ldr	r3, [r3, #16]
 80177f8:	69ba      	ldr	r2, [r7, #24]
 80177fa:	0151      	lsls	r1, r2, #5
 80177fc:	69fa      	ldr	r2, [r7, #28]
 80177fe:	440a      	add	r2, r1
 8017800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017808:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801780a:	79fb      	ldrb	r3, [r7, #7]
 801780c:	2b01      	cmp	r3, #1
 801780e:	d14b      	bne.n	80178a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	695b      	ldr	r3, [r3, #20]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d009      	beq.n	801782c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8017818:	69bb      	ldr	r3, [r7, #24]
 801781a:	015a      	lsls	r2, r3, #5
 801781c:	69fb      	ldr	r3, [r7, #28]
 801781e:	4413      	add	r3, r2
 8017820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017824:	461a      	mov	r2, r3
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	695b      	ldr	r3, [r3, #20]
 801782a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	791b      	ldrb	r3, [r3, #4]
 8017830:	2b01      	cmp	r3, #1
 8017832:	d128      	bne.n	8017886 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8017834:	69fb      	ldr	r3, [r7, #28]
 8017836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801783a:	689b      	ldr	r3, [r3, #8]
 801783c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017840:	2b00      	cmp	r3, #0
 8017842:	d110      	bne.n	8017866 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8017844:	69bb      	ldr	r3, [r7, #24]
 8017846:	015a      	lsls	r2, r3, #5
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	4413      	add	r3, r2
 801784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	69ba      	ldr	r2, [r7, #24]
 8017854:	0151      	lsls	r1, r2, #5
 8017856:	69fa      	ldr	r2, [r7, #28]
 8017858:	440a      	add	r2, r1
 801785a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801785e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017862:	6013      	str	r3, [r2, #0]
 8017864:	e00f      	b.n	8017886 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8017866:	69bb      	ldr	r3, [r7, #24]
 8017868:	015a      	lsls	r2, r3, #5
 801786a:	69fb      	ldr	r3, [r7, #28]
 801786c:	4413      	add	r3, r2
 801786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	69ba      	ldr	r2, [r7, #24]
 8017876:	0151      	lsls	r1, r2, #5
 8017878:	69fa      	ldr	r2, [r7, #28]
 801787a:	440a      	add	r2, r1
 801787c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017884:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8017886:	69bb      	ldr	r3, [r7, #24]
 8017888:	015a      	lsls	r2, r3, #5
 801788a:	69fb      	ldr	r3, [r7, #28]
 801788c:	4413      	add	r3, r2
 801788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	69ba      	ldr	r2, [r7, #24]
 8017896:	0151      	lsls	r1, r2, #5
 8017898:	69fa      	ldr	r2, [r7, #28]
 801789a:	440a      	add	r2, r1
 801789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80178a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80178a4:	6013      	str	r3, [r2, #0]
 80178a6:	e133      	b.n	8017b10 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80178a8:	69bb      	ldr	r3, [r7, #24]
 80178aa:	015a      	lsls	r2, r3, #5
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	4413      	add	r3, r2
 80178b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	69ba      	ldr	r2, [r7, #24]
 80178b8:	0151      	lsls	r1, r2, #5
 80178ba:	69fa      	ldr	r2, [r7, #28]
 80178bc:	440a      	add	r2, r1
 80178be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80178c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80178c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	791b      	ldrb	r3, [r3, #4]
 80178cc:	2b01      	cmp	r3, #1
 80178ce:	d015      	beq.n	80178fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	699b      	ldr	r3, [r3, #24]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	f000 811b 	beq.w	8017b10 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80178da:	69fb      	ldr	r3, [r7, #28]
 80178dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80178e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	f003 030f 	and.w	r3, r3, #15
 80178ea:	2101      	movs	r1, #1
 80178ec:	fa01 f303 	lsl.w	r3, r1, r3
 80178f0:	69f9      	ldr	r1, [r7, #28]
 80178f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80178f6:	4313      	orrs	r3, r2
 80178f8:	634b      	str	r3, [r1, #52]	; 0x34
 80178fa:	e109      	b.n	8017b10 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80178fc:	69fb      	ldr	r3, [r7, #28]
 80178fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017902:	689b      	ldr	r3, [r3, #8]
 8017904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017908:	2b00      	cmp	r3, #0
 801790a:	d110      	bne.n	801792e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801790c:	69bb      	ldr	r3, [r7, #24]
 801790e:	015a      	lsls	r2, r3, #5
 8017910:	69fb      	ldr	r3, [r7, #28]
 8017912:	4413      	add	r3, r2
 8017914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	69ba      	ldr	r2, [r7, #24]
 801791c:	0151      	lsls	r1, r2, #5
 801791e:	69fa      	ldr	r2, [r7, #28]
 8017920:	440a      	add	r2, r1
 8017922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801792a:	6013      	str	r3, [r2, #0]
 801792c:	e00f      	b.n	801794e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801792e:	69bb      	ldr	r3, [r7, #24]
 8017930:	015a      	lsls	r2, r3, #5
 8017932:	69fb      	ldr	r3, [r7, #28]
 8017934:	4413      	add	r3, r2
 8017936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	69ba      	ldr	r2, [r7, #24]
 801793e:	0151      	lsls	r1, r2, #5
 8017940:	69fa      	ldr	r2, [r7, #28]
 8017942:	440a      	add	r2, r1
 8017944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801794c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	6919      	ldr	r1, [r3, #16]
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	781a      	ldrb	r2, [r3, #0]
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	699b      	ldr	r3, [r3, #24]
 801795a:	b298      	uxth	r0, r3
 801795c:	79fb      	ldrb	r3, [r7, #7]
 801795e:	9300      	str	r3, [sp, #0]
 8017960:	4603      	mov	r3, r0
 8017962:	68f8      	ldr	r0, [r7, #12]
 8017964:	f000 fade 	bl	8017f24 <USB_WritePacket>
 8017968:	e0d2      	b.n	8017b10 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801796a:	69bb      	ldr	r3, [r7, #24]
 801796c:	015a      	lsls	r2, r3, #5
 801796e:	69fb      	ldr	r3, [r7, #28]
 8017970:	4413      	add	r3, r2
 8017972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017976:	691b      	ldr	r3, [r3, #16]
 8017978:	69ba      	ldr	r2, [r7, #24]
 801797a:	0151      	lsls	r1, r2, #5
 801797c:	69fa      	ldr	r2, [r7, #28]
 801797e:	440a      	add	r2, r1
 8017980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017984:	0cdb      	lsrs	r3, r3, #19
 8017986:	04db      	lsls	r3, r3, #19
 8017988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801798a:	69bb      	ldr	r3, [r7, #24]
 801798c:	015a      	lsls	r2, r3, #5
 801798e:	69fb      	ldr	r3, [r7, #28]
 8017990:	4413      	add	r3, r2
 8017992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017996:	691b      	ldr	r3, [r3, #16]
 8017998:	69ba      	ldr	r2, [r7, #24]
 801799a:	0151      	lsls	r1, r2, #5
 801799c:	69fa      	ldr	r2, [r7, #28]
 801799e:	440a      	add	r2, r1
 80179a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80179a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80179a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80179ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80179ae:	68bb      	ldr	r3, [r7, #8]
 80179b0:	699b      	ldr	r3, [r3, #24]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d126      	bne.n	8017a04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80179b6:	69bb      	ldr	r3, [r7, #24]
 80179b8:	015a      	lsls	r2, r3, #5
 80179ba:	69fb      	ldr	r3, [r7, #28]
 80179bc:	4413      	add	r3, r2
 80179be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80179c2:	691a      	ldr	r2, [r3, #16]
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	68db      	ldr	r3, [r3, #12]
 80179c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80179cc:	69b9      	ldr	r1, [r7, #24]
 80179ce:	0148      	lsls	r0, r1, #5
 80179d0:	69f9      	ldr	r1, [r7, #28]
 80179d2:	4401      	add	r1, r0
 80179d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80179d8:	4313      	orrs	r3, r2
 80179da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80179dc:	69bb      	ldr	r3, [r7, #24]
 80179de:	015a      	lsls	r2, r3, #5
 80179e0:	69fb      	ldr	r3, [r7, #28]
 80179e2:	4413      	add	r3, r2
 80179e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80179e8:	691b      	ldr	r3, [r3, #16]
 80179ea:	69ba      	ldr	r2, [r7, #24]
 80179ec:	0151      	lsls	r1, r2, #5
 80179ee:	69fa      	ldr	r2, [r7, #28]
 80179f0:	440a      	add	r2, r1
 80179f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80179f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80179fa:	6113      	str	r3, [r2, #16]
 80179fc:	e03a      	b.n	8017a74 <USB_EPStartXfer+0x3e4>
 80179fe:	bf00      	nop
 8017a00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	699a      	ldr	r2, [r3, #24]
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	68db      	ldr	r3, [r3, #12]
 8017a0c:	4413      	add	r3, r2
 8017a0e:	1e5a      	subs	r2, r3, #1
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	68db      	ldr	r3, [r3, #12]
 8017a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8017a18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8017a1a:	68bb      	ldr	r3, [r7, #8]
 8017a1c:	68db      	ldr	r3, [r3, #12]
 8017a1e:	8afa      	ldrh	r2, [r7, #22]
 8017a20:	fb03 f202 	mul.w	r2, r3, r2
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8017a28:	69bb      	ldr	r3, [r7, #24]
 8017a2a:	015a      	lsls	r2, r3, #5
 8017a2c:	69fb      	ldr	r3, [r7, #28]
 8017a2e:	4413      	add	r3, r2
 8017a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017a34:	691a      	ldr	r2, [r3, #16]
 8017a36:	8afb      	ldrh	r3, [r7, #22]
 8017a38:	04d9      	lsls	r1, r3, #19
 8017a3a:	4b38      	ldr	r3, [pc, #224]	; (8017b1c <USB_EPStartXfer+0x48c>)
 8017a3c:	400b      	ands	r3, r1
 8017a3e:	69b9      	ldr	r1, [r7, #24]
 8017a40:	0148      	lsls	r0, r1, #5
 8017a42:	69f9      	ldr	r1, [r7, #28]
 8017a44:	4401      	add	r1, r0
 8017a46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017a4a:	4313      	orrs	r3, r2
 8017a4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8017a4e:	69bb      	ldr	r3, [r7, #24]
 8017a50:	015a      	lsls	r2, r3, #5
 8017a52:	69fb      	ldr	r3, [r7, #28]
 8017a54:	4413      	add	r3, r2
 8017a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017a5a:	691a      	ldr	r2, [r3, #16]
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	69db      	ldr	r3, [r3, #28]
 8017a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017a64:	69b9      	ldr	r1, [r7, #24]
 8017a66:	0148      	lsls	r0, r1, #5
 8017a68:	69f9      	ldr	r1, [r7, #28]
 8017a6a:	4401      	add	r1, r0
 8017a6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017a70:	4313      	orrs	r3, r2
 8017a72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8017a74:	79fb      	ldrb	r3, [r7, #7]
 8017a76:	2b01      	cmp	r3, #1
 8017a78:	d10d      	bne.n	8017a96 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8017a7a:	68bb      	ldr	r3, [r7, #8]
 8017a7c:	691b      	ldr	r3, [r3, #16]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d009      	beq.n	8017a96 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8017a82:	68bb      	ldr	r3, [r7, #8]
 8017a84:	6919      	ldr	r1, [r3, #16]
 8017a86:	69bb      	ldr	r3, [r7, #24]
 8017a88:	015a      	lsls	r2, r3, #5
 8017a8a:	69fb      	ldr	r3, [r7, #28]
 8017a8c:	4413      	add	r3, r2
 8017a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017a92:	460a      	mov	r2, r1
 8017a94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	791b      	ldrb	r3, [r3, #4]
 8017a9a:	2b01      	cmp	r3, #1
 8017a9c:	d128      	bne.n	8017af0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8017a9e:	69fb      	ldr	r3, [r7, #28]
 8017aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017aa4:	689b      	ldr	r3, [r3, #8]
 8017aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d110      	bne.n	8017ad0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8017aae:	69bb      	ldr	r3, [r7, #24]
 8017ab0:	015a      	lsls	r2, r3, #5
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	4413      	add	r3, r2
 8017ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	69ba      	ldr	r2, [r7, #24]
 8017abe:	0151      	lsls	r1, r2, #5
 8017ac0:	69fa      	ldr	r2, [r7, #28]
 8017ac2:	440a      	add	r2, r1
 8017ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017acc:	6013      	str	r3, [r2, #0]
 8017ace:	e00f      	b.n	8017af0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8017ad0:	69bb      	ldr	r3, [r7, #24]
 8017ad2:	015a      	lsls	r2, r3, #5
 8017ad4:	69fb      	ldr	r3, [r7, #28]
 8017ad6:	4413      	add	r3, r2
 8017ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	69ba      	ldr	r2, [r7, #24]
 8017ae0:	0151      	lsls	r1, r2, #5
 8017ae2:	69fa      	ldr	r2, [r7, #28]
 8017ae4:	440a      	add	r2, r1
 8017ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017aee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8017af0:	69bb      	ldr	r3, [r7, #24]
 8017af2:	015a      	lsls	r2, r3, #5
 8017af4:	69fb      	ldr	r3, [r7, #28]
 8017af6:	4413      	add	r3, r2
 8017af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	69ba      	ldr	r2, [r7, #24]
 8017b00:	0151      	lsls	r1, r2, #5
 8017b02:	69fa      	ldr	r2, [r7, #28]
 8017b04:	440a      	add	r2, r1
 8017b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017b0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017b10:	2300      	movs	r3, #0
}
 8017b12:	4618      	mov	r0, r3
 8017b14:	3720      	adds	r7, #32
 8017b16:	46bd      	mov	sp, r7
 8017b18:	bd80      	pop	{r7, pc}
 8017b1a:	bf00      	nop
 8017b1c:	1ff80000 	.word	0x1ff80000

08017b20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8017b20:	b480      	push	{r7}
 8017b22:	b087      	sub	sp, #28
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	60f8      	str	r0, [r7, #12]
 8017b28:	60b9      	str	r1, [r7, #8]
 8017b2a:	4613      	mov	r3, r2
 8017b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	781b      	ldrb	r3, [r3, #0]
 8017b36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	785b      	ldrb	r3, [r3, #1]
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	f040 80ce 	bne.w	8017cde <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	699b      	ldr	r3, [r3, #24]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d132      	bne.n	8017bb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	015a      	lsls	r2, r3, #5
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	4413      	add	r3, r2
 8017b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017b56:	691b      	ldr	r3, [r3, #16]
 8017b58:	693a      	ldr	r2, [r7, #16]
 8017b5a:	0151      	lsls	r1, r2, #5
 8017b5c:	697a      	ldr	r2, [r7, #20]
 8017b5e:	440a      	add	r2, r1
 8017b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017b64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017b68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8017b6e:	693b      	ldr	r3, [r7, #16]
 8017b70:	015a      	lsls	r2, r3, #5
 8017b72:	697b      	ldr	r3, [r7, #20]
 8017b74:	4413      	add	r3, r2
 8017b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017b7a:	691b      	ldr	r3, [r3, #16]
 8017b7c:	693a      	ldr	r2, [r7, #16]
 8017b7e:	0151      	lsls	r1, r2, #5
 8017b80:	697a      	ldr	r2, [r7, #20]
 8017b82:	440a      	add	r2, r1
 8017b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	015a      	lsls	r2, r3, #5
 8017b92:	697b      	ldr	r3, [r7, #20]
 8017b94:	4413      	add	r3, r2
 8017b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017b9a:	691b      	ldr	r3, [r3, #16]
 8017b9c:	693a      	ldr	r2, [r7, #16]
 8017b9e:	0151      	lsls	r1, r2, #5
 8017ba0:	697a      	ldr	r2, [r7, #20]
 8017ba2:	440a      	add	r2, r1
 8017ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017ba8:	0cdb      	lsrs	r3, r3, #19
 8017baa:	04db      	lsls	r3, r3, #19
 8017bac:	6113      	str	r3, [r2, #16]
 8017bae:	e04e      	b.n	8017c4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	015a      	lsls	r2, r3, #5
 8017bb4:	697b      	ldr	r3, [r7, #20]
 8017bb6:	4413      	add	r3, r2
 8017bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017bbc:	691b      	ldr	r3, [r3, #16]
 8017bbe:	693a      	ldr	r2, [r7, #16]
 8017bc0:	0151      	lsls	r1, r2, #5
 8017bc2:	697a      	ldr	r2, [r7, #20]
 8017bc4:	440a      	add	r2, r1
 8017bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017bca:	0cdb      	lsrs	r3, r3, #19
 8017bcc:	04db      	lsls	r3, r3, #19
 8017bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	015a      	lsls	r2, r3, #5
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017bdc:	691b      	ldr	r3, [r3, #16]
 8017bde:	693a      	ldr	r2, [r7, #16]
 8017be0:	0151      	lsls	r1, r2, #5
 8017be2:	697a      	ldr	r2, [r7, #20]
 8017be4:	440a      	add	r2, r1
 8017be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017bea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017bee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017bf2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8017bf4:	68bb      	ldr	r3, [r7, #8]
 8017bf6:	699a      	ldr	r2, [r3, #24]
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	68db      	ldr	r3, [r3, #12]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d903      	bls.n	8017c08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	68da      	ldr	r2, [r3, #12]
 8017c04:	68bb      	ldr	r3, [r7, #8]
 8017c06:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8017c08:	693b      	ldr	r3, [r7, #16]
 8017c0a:	015a      	lsls	r2, r3, #5
 8017c0c:	697b      	ldr	r3, [r7, #20]
 8017c0e:	4413      	add	r3, r2
 8017c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017c14:	691b      	ldr	r3, [r3, #16]
 8017c16:	693a      	ldr	r2, [r7, #16]
 8017c18:	0151      	lsls	r1, r2, #5
 8017c1a:	697a      	ldr	r2, [r7, #20]
 8017c1c:	440a      	add	r2, r1
 8017c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8017c28:	693b      	ldr	r3, [r7, #16]
 8017c2a:	015a      	lsls	r2, r3, #5
 8017c2c:	697b      	ldr	r3, [r7, #20]
 8017c2e:	4413      	add	r3, r2
 8017c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017c34:	691a      	ldr	r2, [r3, #16]
 8017c36:	68bb      	ldr	r3, [r7, #8]
 8017c38:	699b      	ldr	r3, [r3, #24]
 8017c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017c3e:	6939      	ldr	r1, [r7, #16]
 8017c40:	0148      	lsls	r0, r1, #5
 8017c42:	6979      	ldr	r1, [r7, #20]
 8017c44:	4401      	add	r1, r0
 8017c46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8017c4a:	4313      	orrs	r3, r2
 8017c4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8017c4e:	79fb      	ldrb	r3, [r7, #7]
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	d11e      	bne.n	8017c92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	695b      	ldr	r3, [r3, #20]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d009      	beq.n	8017c70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8017c5c:	693b      	ldr	r3, [r7, #16]
 8017c5e:	015a      	lsls	r2, r3, #5
 8017c60:	697b      	ldr	r3, [r7, #20]
 8017c62:	4413      	add	r3, r2
 8017c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017c68:	461a      	mov	r2, r3
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	695b      	ldr	r3, [r3, #20]
 8017c6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8017c70:	693b      	ldr	r3, [r7, #16]
 8017c72:	015a      	lsls	r2, r3, #5
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	4413      	add	r3, r2
 8017c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	693a      	ldr	r2, [r7, #16]
 8017c80:	0151      	lsls	r1, r2, #5
 8017c82:	697a      	ldr	r2, [r7, #20]
 8017c84:	440a      	add	r2, r1
 8017c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017c8e:	6013      	str	r3, [r2, #0]
 8017c90:	e097      	b.n	8017dc2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8017c92:	693b      	ldr	r3, [r7, #16]
 8017c94:	015a      	lsls	r2, r3, #5
 8017c96:	697b      	ldr	r3, [r7, #20]
 8017c98:	4413      	add	r3, r2
 8017c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	693a      	ldr	r2, [r7, #16]
 8017ca2:	0151      	lsls	r1, r2, #5
 8017ca4:	697a      	ldr	r2, [r7, #20]
 8017ca6:	440a      	add	r2, r1
 8017ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017cac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017cb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	699b      	ldr	r3, [r3, #24]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	f000 8083 	beq.w	8017dc2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	f003 030f 	and.w	r3, r3, #15
 8017ccc:	2101      	movs	r1, #1
 8017cce:	fa01 f303 	lsl.w	r3, r1, r3
 8017cd2:	6979      	ldr	r1, [r7, #20]
 8017cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017cd8:	4313      	orrs	r3, r2
 8017cda:	634b      	str	r3, [r1, #52]	; 0x34
 8017cdc:	e071      	b.n	8017dc2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8017cde:	693b      	ldr	r3, [r7, #16]
 8017ce0:	015a      	lsls	r2, r3, #5
 8017ce2:	697b      	ldr	r3, [r7, #20]
 8017ce4:	4413      	add	r3, r2
 8017ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017cea:	691b      	ldr	r3, [r3, #16]
 8017cec:	693a      	ldr	r2, [r7, #16]
 8017cee:	0151      	lsls	r1, r2, #5
 8017cf0:	697a      	ldr	r2, [r7, #20]
 8017cf2:	440a      	add	r2, r1
 8017cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017cf8:	0cdb      	lsrs	r3, r3, #19
 8017cfa:	04db      	lsls	r3, r3, #19
 8017cfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8017cfe:	693b      	ldr	r3, [r7, #16]
 8017d00:	015a      	lsls	r2, r3, #5
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	4413      	add	r3, r2
 8017d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017d0a:	691b      	ldr	r3, [r3, #16]
 8017d0c:	693a      	ldr	r2, [r7, #16]
 8017d0e:	0151      	lsls	r1, r2, #5
 8017d10:	697a      	ldr	r2, [r7, #20]
 8017d12:	440a      	add	r2, r1
 8017d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017d20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8017d22:	68bb      	ldr	r3, [r7, #8]
 8017d24:	699b      	ldr	r3, [r3, #24]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d003      	beq.n	8017d32 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	68da      	ldr	r2, [r3, #12]
 8017d2e:	68bb      	ldr	r3, [r7, #8]
 8017d30:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	68da      	ldr	r2, [r3, #12]
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	015a      	lsls	r2, r3, #5
 8017d3e:	697b      	ldr	r3, [r7, #20]
 8017d40:	4413      	add	r3, r2
 8017d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017d46:	691b      	ldr	r3, [r3, #16]
 8017d48:	693a      	ldr	r2, [r7, #16]
 8017d4a:	0151      	lsls	r1, r2, #5
 8017d4c:	697a      	ldr	r2, [r7, #20]
 8017d4e:	440a      	add	r2, r1
 8017d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017d58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8017d5a:	693b      	ldr	r3, [r7, #16]
 8017d5c:	015a      	lsls	r2, r3, #5
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	4413      	add	r3, r2
 8017d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017d66:	691a      	ldr	r2, [r3, #16]
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	69db      	ldr	r3, [r3, #28]
 8017d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017d70:	6939      	ldr	r1, [r7, #16]
 8017d72:	0148      	lsls	r0, r1, #5
 8017d74:	6979      	ldr	r1, [r7, #20]
 8017d76:	4401      	add	r1, r0
 8017d78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017d7c:	4313      	orrs	r3, r2
 8017d7e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8017d80:	79fb      	ldrb	r3, [r7, #7]
 8017d82:	2b01      	cmp	r3, #1
 8017d84:	d10d      	bne.n	8017da2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	691b      	ldr	r3, [r3, #16]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d009      	beq.n	8017da2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	6919      	ldr	r1, [r3, #16]
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	015a      	lsls	r2, r3, #5
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	4413      	add	r3, r2
 8017d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017d9e:	460a      	mov	r2, r1
 8017da0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8017da2:	693b      	ldr	r3, [r7, #16]
 8017da4:	015a      	lsls	r2, r3, #5
 8017da6:	697b      	ldr	r3, [r7, #20]
 8017da8:	4413      	add	r3, r2
 8017daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	693a      	ldr	r2, [r7, #16]
 8017db2:	0151      	lsls	r1, r2, #5
 8017db4:	697a      	ldr	r2, [r7, #20]
 8017db6:	440a      	add	r2, r1
 8017db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017dbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8017dc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017dc2:	2300      	movs	r3, #0
}
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	371c      	adds	r7, #28
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr

08017dd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017dd0:	b480      	push	{r7}
 8017dd2:	b087      	sub	sp, #28
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
 8017dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8017dda:	2300      	movs	r3, #0
 8017ddc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8017dde:	2300      	movs	r3, #0
 8017de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017de6:	683b      	ldr	r3, [r7, #0]
 8017de8:	785b      	ldrb	r3, [r3, #1]
 8017dea:	2b01      	cmp	r3, #1
 8017dec:	d14a      	bne.n	8017e84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8017dee:	683b      	ldr	r3, [r7, #0]
 8017df0:	781b      	ldrb	r3, [r3, #0]
 8017df2:	015a      	lsls	r2, r3, #5
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	4413      	add	r3, r2
 8017df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017e06:	f040 8086 	bne.w	8017f16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	015a      	lsls	r2, r3, #5
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	4413      	add	r3, r2
 8017e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	683a      	ldr	r2, [r7, #0]
 8017e1c:	7812      	ldrb	r2, [r2, #0]
 8017e1e:	0151      	lsls	r1, r2, #5
 8017e20:	693a      	ldr	r2, [r7, #16]
 8017e22:	440a      	add	r2, r1
 8017e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017e2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8017e2e:	683b      	ldr	r3, [r7, #0]
 8017e30:	781b      	ldrb	r3, [r3, #0]
 8017e32:	015a      	lsls	r2, r3, #5
 8017e34:	693b      	ldr	r3, [r7, #16]
 8017e36:	4413      	add	r3, r2
 8017e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	683a      	ldr	r2, [r7, #0]
 8017e40:	7812      	ldrb	r2, [r2, #0]
 8017e42:	0151      	lsls	r1, r2, #5
 8017e44:	693a      	ldr	r2, [r7, #16]
 8017e46:	440a      	add	r2, r1
 8017e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017e50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	3301      	adds	r3, #1
 8017e56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8017e5e:	4293      	cmp	r3, r2
 8017e60:	d902      	bls.n	8017e68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8017e62:	2301      	movs	r3, #1
 8017e64:	75fb      	strb	r3, [r7, #23]
          break;
 8017e66:	e056      	b.n	8017f16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	781b      	ldrb	r3, [r3, #0]
 8017e6c:	015a      	lsls	r2, r3, #5
 8017e6e:	693b      	ldr	r3, [r7, #16]
 8017e70:	4413      	add	r3, r2
 8017e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017e80:	d0e7      	beq.n	8017e52 <USB_EPStopXfer+0x82>
 8017e82:	e048      	b.n	8017f16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017e84:	683b      	ldr	r3, [r7, #0]
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	015a      	lsls	r2, r3, #5
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	4413      	add	r3, r2
 8017e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017e9c:	d13b      	bne.n	8017f16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	015a      	lsls	r2, r3, #5
 8017ea4:	693b      	ldr	r3, [r7, #16]
 8017ea6:	4413      	add	r3, r2
 8017ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	683a      	ldr	r2, [r7, #0]
 8017eb0:	7812      	ldrb	r2, [r2, #0]
 8017eb2:	0151      	lsls	r1, r2, #5
 8017eb4:	693a      	ldr	r2, [r7, #16]
 8017eb6:	440a      	add	r2, r1
 8017eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ebc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017ec0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8017ec2:	683b      	ldr	r3, [r7, #0]
 8017ec4:	781b      	ldrb	r3, [r3, #0]
 8017ec6:	015a      	lsls	r2, r3, #5
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	4413      	add	r3, r2
 8017ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	683a      	ldr	r2, [r7, #0]
 8017ed4:	7812      	ldrb	r2, [r2, #0]
 8017ed6:	0151      	lsls	r1, r2, #5
 8017ed8:	693a      	ldr	r2, [r7, #16]
 8017eda:	440a      	add	r2, r1
 8017edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017ee4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	3301      	adds	r3, #1
 8017eea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	f242 7210 	movw	r2, #10000	; 0x2710
 8017ef2:	4293      	cmp	r3, r2
 8017ef4:	d902      	bls.n	8017efc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8017efa:	e00c      	b.n	8017f16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	781b      	ldrb	r3, [r3, #0]
 8017f00:	015a      	lsls	r2, r3, #5
 8017f02:	693b      	ldr	r3, [r7, #16]
 8017f04:	4413      	add	r3, r2
 8017f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017f14:	d0e7      	beq.n	8017ee6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8017f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	371c      	adds	r7, #28
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f22:	4770      	bx	lr

08017f24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8017f24:	b480      	push	{r7}
 8017f26:	b089      	sub	sp, #36	; 0x24
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	60f8      	str	r0, [r7, #12]
 8017f2c:	60b9      	str	r1, [r7, #8]
 8017f2e:	4611      	mov	r1, r2
 8017f30:	461a      	mov	r2, r3
 8017f32:	460b      	mov	r3, r1
 8017f34:	71fb      	strb	r3, [r7, #7]
 8017f36:	4613      	mov	r3, r2
 8017f38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8017f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d123      	bne.n	8017f92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8017f4a:	88bb      	ldrh	r3, [r7, #4]
 8017f4c:	3303      	adds	r3, #3
 8017f4e:	089b      	lsrs	r3, r3, #2
 8017f50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8017f52:	2300      	movs	r3, #0
 8017f54:	61bb      	str	r3, [r7, #24]
 8017f56:	e018      	b.n	8017f8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8017f58:	79fb      	ldrb	r3, [r7, #7]
 8017f5a:	031a      	lsls	r2, r3, #12
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	4413      	add	r3, r2
 8017f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f64:	461a      	mov	r2, r3
 8017f66:	69fb      	ldr	r3, [r7, #28]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	3301      	adds	r3, #1
 8017f76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	3301      	adds	r3, #1
 8017f7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017f7e:	69fb      	ldr	r3, [r7, #28]
 8017f80:	3301      	adds	r3, #1
 8017f82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8017f84:	69bb      	ldr	r3, [r7, #24]
 8017f86:	3301      	adds	r3, #1
 8017f88:	61bb      	str	r3, [r7, #24]
 8017f8a:	69ba      	ldr	r2, [r7, #24]
 8017f8c:	693b      	ldr	r3, [r7, #16]
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	d3e2      	bcc.n	8017f58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8017f92:	2300      	movs	r3, #0
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	3724      	adds	r7, #36	; 0x24
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9e:	4770      	bx	lr

08017fa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	b08b      	sub	sp, #44	; 0x2c
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	4613      	mov	r3, r2
 8017fac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8017fb6:	88fb      	ldrh	r3, [r7, #6]
 8017fb8:	089b      	lsrs	r3, r3, #2
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8017fbe:	88fb      	ldrh	r3, [r7, #6]
 8017fc0:	f003 0303 	and.w	r3, r3, #3
 8017fc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	623b      	str	r3, [r7, #32]
 8017fca:	e014      	b.n	8017ff6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8017fcc:	69bb      	ldr	r3, [r7, #24]
 8017fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017fd2:	681a      	ldr	r2, [r3, #0]
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fda:	3301      	adds	r3, #1
 8017fdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8017fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe0:	3301      	adds	r3, #1
 8017fe2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8017fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8017fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fec:	3301      	adds	r3, #1
 8017fee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8017ff0:	6a3b      	ldr	r3, [r7, #32]
 8017ff2:	3301      	adds	r3, #1
 8017ff4:	623b      	str	r3, [r7, #32]
 8017ff6:	6a3a      	ldr	r2, [r7, #32]
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d3e6      	bcc.n	8017fcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8017ffe:	8bfb      	ldrh	r3, [r7, #30]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d01e      	beq.n	8018042 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8018004:	2300      	movs	r3, #0
 8018006:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8018008:	69bb      	ldr	r3, [r7, #24]
 801800a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801800e:	461a      	mov	r2, r3
 8018010:	f107 0310 	add.w	r3, r7, #16
 8018014:	6812      	ldr	r2, [r2, #0]
 8018016:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8018018:	693a      	ldr	r2, [r7, #16]
 801801a:	6a3b      	ldr	r3, [r7, #32]
 801801c:	b2db      	uxtb	r3, r3
 801801e:	00db      	lsls	r3, r3, #3
 8018020:	fa22 f303 	lsr.w	r3, r2, r3
 8018024:	b2da      	uxtb	r2, r3
 8018026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018028:	701a      	strb	r2, [r3, #0]
      i++;
 801802a:	6a3b      	ldr	r3, [r7, #32]
 801802c:	3301      	adds	r3, #1
 801802e:	623b      	str	r3, [r7, #32]
      pDest++;
 8018030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018032:	3301      	adds	r3, #1
 8018034:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8018036:	8bfb      	ldrh	r3, [r7, #30]
 8018038:	3b01      	subs	r3, #1
 801803a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801803c:	8bfb      	ldrh	r3, [r7, #30]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d1ea      	bne.n	8018018 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8018042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018044:	4618      	mov	r0, r3
 8018046:	372c      	adds	r7, #44	; 0x2c
 8018048:	46bd      	mov	sp, r7
 801804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801804e:	4770      	bx	lr

08018050 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8018050:	b480      	push	{r7}
 8018052:	b085      	sub	sp, #20
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801805e:	683b      	ldr	r3, [r7, #0]
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	785b      	ldrb	r3, [r3, #1]
 8018068:	2b01      	cmp	r3, #1
 801806a:	d12c      	bne.n	80180c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	015a      	lsls	r2, r3, #5
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	4413      	add	r3, r2
 8018074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	2b00      	cmp	r3, #0
 801807c:	db12      	blt.n	80180a4 <USB_EPSetStall+0x54>
 801807e:	68bb      	ldr	r3, [r7, #8]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d00f      	beq.n	80180a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	015a      	lsls	r2, r3, #5
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	4413      	add	r3, r2
 801808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	68ba      	ldr	r2, [r7, #8]
 8018094:	0151      	lsls	r1, r2, #5
 8018096:	68fa      	ldr	r2, [r7, #12]
 8018098:	440a      	add	r2, r1
 801809a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801809e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80180a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	015a      	lsls	r2, r3, #5
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	4413      	add	r3, r2
 80180ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	68ba      	ldr	r2, [r7, #8]
 80180b4:	0151      	lsls	r1, r2, #5
 80180b6:	68fa      	ldr	r2, [r7, #12]
 80180b8:	440a      	add	r2, r1
 80180ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80180be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80180c2:	6013      	str	r3, [r2, #0]
 80180c4:	e02b      	b.n	801811e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	015a      	lsls	r2, r3, #5
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	4413      	add	r3, r2
 80180ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	db12      	blt.n	80180fe <USB_EPSetStall+0xae>
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d00f      	beq.n	80180fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	015a      	lsls	r2, r3, #5
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	4413      	add	r3, r2
 80180e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	68ba      	ldr	r2, [r7, #8]
 80180ee:	0151      	lsls	r1, r2, #5
 80180f0:	68fa      	ldr	r2, [r7, #12]
 80180f2:	440a      	add	r2, r1
 80180f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80180f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80180fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	015a      	lsls	r2, r3, #5
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	4413      	add	r3, r2
 8018106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	68ba      	ldr	r2, [r7, #8]
 801810e:	0151      	lsls	r1, r2, #5
 8018110:	68fa      	ldr	r2, [r7, #12]
 8018112:	440a      	add	r2, r1
 8018114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8018118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801811c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801811e:	2300      	movs	r3, #0
}
 8018120:	4618      	mov	r0, r3
 8018122:	3714      	adds	r7, #20
 8018124:	46bd      	mov	sp, r7
 8018126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812a:	4770      	bx	lr

0801812c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801812c:	b480      	push	{r7}
 801812e:	b085      	sub	sp, #20
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	785b      	ldrb	r3, [r3, #1]
 8018144:	2b01      	cmp	r3, #1
 8018146:	d128      	bne.n	801819a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	015a      	lsls	r2, r3, #5
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	4413      	add	r3, r2
 8018150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	68ba      	ldr	r2, [r7, #8]
 8018158:	0151      	lsls	r1, r2, #5
 801815a:	68fa      	ldr	r2, [r7, #12]
 801815c:	440a      	add	r2, r1
 801815e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8018166:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8018168:	683b      	ldr	r3, [r7, #0]
 801816a:	791b      	ldrb	r3, [r3, #4]
 801816c:	2b03      	cmp	r3, #3
 801816e:	d003      	beq.n	8018178 <USB_EPClearStall+0x4c>
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	791b      	ldrb	r3, [r3, #4]
 8018174:	2b02      	cmp	r3, #2
 8018176:	d138      	bne.n	80181ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	015a      	lsls	r2, r3, #5
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	4413      	add	r3, r2
 8018180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	68ba      	ldr	r2, [r7, #8]
 8018188:	0151      	lsls	r1, r2, #5
 801818a:	68fa      	ldr	r2, [r7, #12]
 801818c:	440a      	add	r2, r1
 801818e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018196:	6013      	str	r3, [r2, #0]
 8018198:	e027      	b.n	80181ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	015a      	lsls	r2, r3, #5
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	4413      	add	r3, r2
 80181a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	68ba      	ldr	r2, [r7, #8]
 80181aa:	0151      	lsls	r1, r2, #5
 80181ac:	68fa      	ldr	r2, [r7, #12]
 80181ae:	440a      	add	r2, r1
 80181b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80181b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80181b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	791b      	ldrb	r3, [r3, #4]
 80181be:	2b03      	cmp	r3, #3
 80181c0:	d003      	beq.n	80181ca <USB_EPClearStall+0x9e>
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	791b      	ldrb	r3, [r3, #4]
 80181c6:	2b02      	cmp	r3, #2
 80181c8:	d10f      	bne.n	80181ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	015a      	lsls	r2, r3, #5
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	4413      	add	r3, r2
 80181d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	68ba      	ldr	r2, [r7, #8]
 80181da:	0151      	lsls	r1, r2, #5
 80181dc:	68fa      	ldr	r2, [r7, #12]
 80181de:	440a      	add	r2, r1
 80181e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80181e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80181e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80181ea:	2300      	movs	r3, #0
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3714      	adds	r7, #20
 80181f0:	46bd      	mov	sp, r7
 80181f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f6:	4770      	bx	lr

080181f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80181f8:	b480      	push	{r7}
 80181fa:	b085      	sub	sp, #20
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	460b      	mov	r3, r1
 8018202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	68fa      	ldr	r2, [r7, #12]
 8018212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018216:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801821a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018222:	681a      	ldr	r2, [r3, #0]
 8018224:	78fb      	ldrb	r3, [r7, #3]
 8018226:	011b      	lsls	r3, r3, #4
 8018228:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801822c:	68f9      	ldr	r1, [r7, #12]
 801822e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8018232:	4313      	orrs	r3, r2
 8018234:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8018236:	2300      	movs	r3, #0
}
 8018238:	4618      	mov	r0, r3
 801823a:	3714      	adds	r7, #20
 801823c:	46bd      	mov	sp, r7
 801823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018242:	4770      	bx	lr

08018244 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8018244:	b480      	push	{r7}
 8018246:	b085      	sub	sp, #20
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	68fa      	ldr	r2, [r7, #12]
 801825a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801825e:	f023 0303 	bic.w	r3, r3, #3
 8018262:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	68fa      	ldr	r2, [r7, #12]
 801826e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8018272:	f023 0302 	bic.w	r3, r3, #2
 8018276:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8018278:	2300      	movs	r3, #0
}
 801827a:	4618      	mov	r0, r3
 801827c:	3714      	adds	r7, #20
 801827e:	46bd      	mov	sp, r7
 8018280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018284:	4770      	bx	lr

08018286 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8018286:	b480      	push	{r7}
 8018288:	b085      	sub	sp, #20
 801828a:	af00      	add	r7, sp, #0
 801828c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	68fa      	ldr	r2, [r7, #12]
 801829c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80182a0:	f023 0303 	bic.w	r3, r3, #3
 80182a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80182ac:	685b      	ldr	r3, [r3, #4]
 80182ae:	68fa      	ldr	r2, [r7, #12]
 80182b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80182b4:	f043 0302 	orr.w	r3, r3, #2
 80182b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80182ba:	2300      	movs	r3, #0
}
 80182bc:	4618      	mov	r0, r3
 80182be:	3714      	adds	r7, #20
 80182c0:	46bd      	mov	sp, r7
 80182c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c6:	4770      	bx	lr

080182c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80182c8:	b480      	push	{r7}
 80182ca:	b085      	sub	sp, #20
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	695b      	ldr	r3, [r3, #20]
 80182d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	699b      	ldr	r3, [r3, #24]
 80182da:	68fa      	ldr	r2, [r7, #12]
 80182dc:	4013      	ands	r3, r2
 80182de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80182e0:	68fb      	ldr	r3, [r7, #12]
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	3714      	adds	r7, #20
 80182e6:	46bd      	mov	sp, r7
 80182e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ec:	4770      	bx	lr

080182ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80182ee:	b480      	push	{r7}
 80182f0:	b085      	sub	sp, #20
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018300:	699b      	ldr	r3, [r3, #24]
 8018302:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801830a:	69db      	ldr	r3, [r3, #28]
 801830c:	68ba      	ldr	r2, [r7, #8]
 801830e:	4013      	ands	r3, r2
 8018310:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	0c1b      	lsrs	r3, r3, #16
}
 8018316:	4618      	mov	r0, r3
 8018318:	3714      	adds	r7, #20
 801831a:	46bd      	mov	sp, r7
 801831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018320:	4770      	bx	lr

08018322 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8018322:	b480      	push	{r7}
 8018324:	b085      	sub	sp, #20
 8018326:	af00      	add	r7, sp, #0
 8018328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018334:	699b      	ldr	r3, [r3, #24]
 8018336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801833e:	69db      	ldr	r3, [r3, #28]
 8018340:	68ba      	ldr	r2, [r7, #8]
 8018342:	4013      	ands	r3, r2
 8018344:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	b29b      	uxth	r3, r3
}
 801834a:	4618      	mov	r0, r3
 801834c:	3714      	adds	r7, #20
 801834e:	46bd      	mov	sp, r7
 8018350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018354:	4770      	bx	lr

08018356 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8018356:	b480      	push	{r7}
 8018358:	b085      	sub	sp, #20
 801835a:	af00      	add	r7, sp, #0
 801835c:	6078      	str	r0, [r7, #4]
 801835e:	460b      	mov	r3, r1
 8018360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8018366:	78fb      	ldrb	r3, [r7, #3]
 8018368:	015a      	lsls	r2, r3, #5
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	4413      	add	r3, r2
 801836e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018372:	689b      	ldr	r3, [r3, #8]
 8018374:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801837c:	695b      	ldr	r3, [r3, #20]
 801837e:	68ba      	ldr	r2, [r7, #8]
 8018380:	4013      	ands	r3, r2
 8018382:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8018384:	68bb      	ldr	r3, [r7, #8]
}
 8018386:	4618      	mov	r0, r3
 8018388:	3714      	adds	r7, #20
 801838a:	46bd      	mov	sp, r7
 801838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018390:	4770      	bx	lr

08018392 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8018392:	b480      	push	{r7}
 8018394:	b087      	sub	sp, #28
 8018396:	af00      	add	r7, sp, #0
 8018398:	6078      	str	r0, [r7, #4]
 801839a:	460b      	mov	r3, r1
 801839c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80183a8:	691b      	ldr	r3, [r3, #16]
 80183aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80183b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80183b6:	78fb      	ldrb	r3, [r7, #3]
 80183b8:	f003 030f 	and.w	r3, r3, #15
 80183bc:	68fa      	ldr	r2, [r7, #12]
 80183be:	fa22 f303 	lsr.w	r3, r2, r3
 80183c2:	01db      	lsls	r3, r3, #7
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	693a      	ldr	r2, [r7, #16]
 80183c8:	4313      	orrs	r3, r2
 80183ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80183cc:	78fb      	ldrb	r3, [r7, #3]
 80183ce:	015a      	lsls	r2, r3, #5
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	4413      	add	r3, r2
 80183d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80183d8:	689b      	ldr	r3, [r3, #8]
 80183da:	693a      	ldr	r2, [r7, #16]
 80183dc:	4013      	ands	r3, r2
 80183de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80183e0:	68bb      	ldr	r3, [r7, #8]
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	371c      	adds	r7, #28
 80183e6:	46bd      	mov	sp, r7
 80183e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ec:	4770      	bx	lr

080183ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80183ee:	b480      	push	{r7}
 80183f0:	b083      	sub	sp, #12
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	695b      	ldr	r3, [r3, #20]
 80183fa:	f003 0301 	and.w	r3, r3, #1
}
 80183fe:	4618      	mov	r0, r3
 8018400:	370c      	adds	r7, #12
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr

0801840a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801840a:	b480      	push	{r7}
 801840c:	b085      	sub	sp, #20
 801840e:	af00      	add	r7, sp, #0
 8018410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	68fa      	ldr	r2, [r7, #12]
 8018420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8018424:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8018428:	f023 0307 	bic.w	r3, r3, #7
 801842c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	68fa      	ldr	r2, [r7, #12]
 8018438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801843c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8018442:	2300      	movs	r3, #0
}
 8018444:	4618      	mov	r0, r3
 8018446:	3714      	adds	r7, #20
 8018448:	46bd      	mov	sp, r7
 801844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844e:	4770      	bx	lr

08018450 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8018450:	b480      	push	{r7}
 8018452:	b087      	sub	sp, #28
 8018454:	af00      	add	r7, sp, #0
 8018456:	60f8      	str	r0, [r7, #12]
 8018458:	460b      	mov	r3, r1
 801845a:	607a      	str	r2, [r7, #4]
 801845c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	333c      	adds	r3, #60	; 0x3c
 8018466:	3304      	adds	r3, #4
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	4a26      	ldr	r2, [pc, #152]	; (8018508 <USB_EP0_OutStart+0xb8>)
 8018470:	4293      	cmp	r3, r2
 8018472:	d90a      	bls.n	801848a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018484:	d101      	bne.n	801848a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8018486:	2300      	movs	r3, #0
 8018488:	e037      	b.n	80184fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8018490:	461a      	mov	r2, r3
 8018492:	2300      	movs	r3, #0
 8018494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801849c:	691b      	ldr	r3, [r3, #16]
 801849e:	697a      	ldr	r2, [r7, #20]
 80184a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80184a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80184a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80184aa:	697b      	ldr	r3, [r7, #20]
 80184ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80184b0:	691b      	ldr	r3, [r3, #16]
 80184b2:	697a      	ldr	r2, [r7, #20]
 80184b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80184b8:	f043 0318 	orr.w	r3, r3, #24
 80184bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80184c4:	691b      	ldr	r3, [r3, #16]
 80184c6:	697a      	ldr	r2, [r7, #20]
 80184c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80184cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80184d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80184d2:	7afb      	ldrb	r3, [r7, #11]
 80184d4:	2b01      	cmp	r3, #1
 80184d6:	d10f      	bne.n	80184f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80184d8:	697b      	ldr	r3, [r7, #20]
 80184da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80184de:	461a      	mov	r2, r3
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	697a      	ldr	r2, [r7, #20]
 80184ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80184f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80184f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80184f8:	2300      	movs	r3, #0
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	371c      	adds	r7, #28
 80184fe:	46bd      	mov	sp, r7
 8018500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018504:	4770      	bx	lr
 8018506:	bf00      	nop
 8018508:	4f54300a 	.word	0x4f54300a

0801850c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801850c:	b480      	push	{r7}
 801850e:	b085      	sub	sp, #20
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8018514:	2300      	movs	r3, #0
 8018516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	3301      	adds	r3, #1
 801851c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	4a13      	ldr	r2, [pc, #76]	; (8018570 <USB_CoreReset+0x64>)
 8018522:	4293      	cmp	r3, r2
 8018524:	d901      	bls.n	801852a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8018526:	2303      	movs	r3, #3
 8018528:	e01b      	b.n	8018562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	691b      	ldr	r3, [r3, #16]
 801852e:	2b00      	cmp	r3, #0
 8018530:	daf2      	bge.n	8018518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8018532:	2300      	movs	r3, #0
 8018534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	691b      	ldr	r3, [r3, #16]
 801853a:	f043 0201 	orr.w	r2, r3, #1
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	3301      	adds	r3, #1
 8018546:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	4a09      	ldr	r2, [pc, #36]	; (8018570 <USB_CoreReset+0x64>)
 801854c:	4293      	cmp	r3, r2
 801854e:	d901      	bls.n	8018554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8018550:	2303      	movs	r3, #3
 8018552:	e006      	b.n	8018562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	691b      	ldr	r3, [r3, #16]
 8018558:	f003 0301 	and.w	r3, r3, #1
 801855c:	2b01      	cmp	r3, #1
 801855e:	d0f0      	beq.n	8018542 <USB_CoreReset+0x36>

  return HAL_OK;
 8018560:	2300      	movs	r3, #0
}
 8018562:	4618      	mov	r0, r3
 8018564:	3714      	adds	r7, #20
 8018566:	46bd      	mov	sp, r7
 8018568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856c:	4770      	bx	lr
 801856e:	bf00      	nop
 8018570:	00030d40 	.word	0x00030d40

08018574 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b084      	sub	sp, #16
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
 801857c:	460b      	mov	r3, r1
 801857e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8018580:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8018584:	f005 fe86 	bl	801e294 <USBD_static_malloc>
 8018588:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d109      	bne.n	80185a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	32b0      	adds	r2, #176	; 0xb0
 801859a:	2100      	movs	r1, #0
 801859c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80185a0:	2302      	movs	r3, #2
 80185a2:	e0d4      	b.n	801874e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80185a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80185a8:	2100      	movs	r1, #0
 80185aa:	68f8      	ldr	r0, [r7, #12]
 80185ac:	f005 ffe1 	bl	801e572 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	32b0      	adds	r2, #176	; 0xb0
 80185ba:	68f9      	ldr	r1, [r7, #12]
 80185bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	32b0      	adds	r2, #176	; 0xb0
 80185ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	7c1b      	ldrb	r3, [r3, #16]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d138      	bne.n	801864e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80185dc:	4b5e      	ldr	r3, [pc, #376]	; (8018758 <USBD_CDC_Init+0x1e4>)
 80185de:	7819      	ldrb	r1, [r3, #0]
 80185e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80185e4:	2202      	movs	r2, #2
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f005 fd31 	bl	801e04e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80185ec:	4b5a      	ldr	r3, [pc, #360]	; (8018758 <USBD_CDC_Init+0x1e4>)
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	f003 020f 	and.w	r2, r3, #15
 80185f4:	6879      	ldr	r1, [r7, #4]
 80185f6:	4613      	mov	r3, r2
 80185f8:	009b      	lsls	r3, r3, #2
 80185fa:	4413      	add	r3, r2
 80185fc:	009b      	lsls	r3, r3, #2
 80185fe:	440b      	add	r3, r1
 8018600:	3324      	adds	r3, #36	; 0x24
 8018602:	2201      	movs	r2, #1
 8018604:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8018606:	4b55      	ldr	r3, [pc, #340]	; (801875c <USBD_CDC_Init+0x1e8>)
 8018608:	7819      	ldrb	r1, [r3, #0]
 801860a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801860e:	2202      	movs	r2, #2
 8018610:	6878      	ldr	r0, [r7, #4]
 8018612:	f005 fd1c 	bl	801e04e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8018616:	4b51      	ldr	r3, [pc, #324]	; (801875c <USBD_CDC_Init+0x1e8>)
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	f003 020f 	and.w	r2, r3, #15
 801861e:	6879      	ldr	r1, [r7, #4]
 8018620:	4613      	mov	r3, r2
 8018622:	009b      	lsls	r3, r3, #2
 8018624:	4413      	add	r3, r2
 8018626:	009b      	lsls	r3, r3, #2
 8018628:	440b      	add	r3, r1
 801862a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801862e:	2201      	movs	r2, #1
 8018630:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018632:	4b4b      	ldr	r3, [pc, #300]	; (8018760 <USBD_CDC_Init+0x1ec>)
 8018634:	781b      	ldrb	r3, [r3, #0]
 8018636:	f003 020f 	and.w	r2, r3, #15
 801863a:	6879      	ldr	r1, [r7, #4]
 801863c:	4613      	mov	r3, r2
 801863e:	009b      	lsls	r3, r3, #2
 8018640:	4413      	add	r3, r2
 8018642:	009b      	lsls	r3, r3, #2
 8018644:	440b      	add	r3, r1
 8018646:	3326      	adds	r3, #38	; 0x26
 8018648:	2210      	movs	r2, #16
 801864a:	801a      	strh	r2, [r3, #0]
 801864c:	e035      	b.n	80186ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801864e:	4b42      	ldr	r3, [pc, #264]	; (8018758 <USBD_CDC_Init+0x1e4>)
 8018650:	7819      	ldrb	r1, [r3, #0]
 8018652:	2340      	movs	r3, #64	; 0x40
 8018654:	2202      	movs	r2, #2
 8018656:	6878      	ldr	r0, [r7, #4]
 8018658:	f005 fcf9 	bl	801e04e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801865c:	4b3e      	ldr	r3, [pc, #248]	; (8018758 <USBD_CDC_Init+0x1e4>)
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	f003 020f 	and.w	r2, r3, #15
 8018664:	6879      	ldr	r1, [r7, #4]
 8018666:	4613      	mov	r3, r2
 8018668:	009b      	lsls	r3, r3, #2
 801866a:	4413      	add	r3, r2
 801866c:	009b      	lsls	r3, r3, #2
 801866e:	440b      	add	r3, r1
 8018670:	3324      	adds	r3, #36	; 0x24
 8018672:	2201      	movs	r2, #1
 8018674:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8018676:	4b39      	ldr	r3, [pc, #228]	; (801875c <USBD_CDC_Init+0x1e8>)
 8018678:	7819      	ldrb	r1, [r3, #0]
 801867a:	2340      	movs	r3, #64	; 0x40
 801867c:	2202      	movs	r2, #2
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f005 fce5 	bl	801e04e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8018684:	4b35      	ldr	r3, [pc, #212]	; (801875c <USBD_CDC_Init+0x1e8>)
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	f003 020f 	and.w	r2, r3, #15
 801868c:	6879      	ldr	r1, [r7, #4]
 801868e:	4613      	mov	r3, r2
 8018690:	009b      	lsls	r3, r3, #2
 8018692:	4413      	add	r3, r2
 8018694:	009b      	lsls	r3, r3, #2
 8018696:	440b      	add	r3, r1
 8018698:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801869c:	2201      	movs	r2, #1
 801869e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80186a0:	4b2f      	ldr	r3, [pc, #188]	; (8018760 <USBD_CDC_Init+0x1ec>)
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	f003 020f 	and.w	r2, r3, #15
 80186a8:	6879      	ldr	r1, [r7, #4]
 80186aa:	4613      	mov	r3, r2
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	4413      	add	r3, r2
 80186b0:	009b      	lsls	r3, r3, #2
 80186b2:	440b      	add	r3, r1
 80186b4:	3326      	adds	r3, #38	; 0x26
 80186b6:	2210      	movs	r2, #16
 80186b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80186ba:	4b29      	ldr	r3, [pc, #164]	; (8018760 <USBD_CDC_Init+0x1ec>)
 80186bc:	7819      	ldrb	r1, [r3, #0]
 80186be:	2308      	movs	r3, #8
 80186c0:	2203      	movs	r2, #3
 80186c2:	6878      	ldr	r0, [r7, #4]
 80186c4:	f005 fcc3 	bl	801e04e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80186c8:	4b25      	ldr	r3, [pc, #148]	; (8018760 <USBD_CDC_Init+0x1ec>)
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	f003 020f 	and.w	r2, r3, #15
 80186d0:	6879      	ldr	r1, [r7, #4]
 80186d2:	4613      	mov	r3, r2
 80186d4:	009b      	lsls	r3, r3, #2
 80186d6:	4413      	add	r3, r2
 80186d8:	009b      	lsls	r3, r3, #2
 80186da:	440b      	add	r3, r1
 80186dc:	3324      	adds	r3, #36	; 0x24
 80186de:	2201      	movs	r2, #1
 80186e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	2200      	movs	r2, #0
 80186e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80186f0:	687a      	ldr	r2, [r7, #4]
 80186f2:	33b0      	adds	r3, #176	; 0xb0
 80186f4:	009b      	lsls	r3, r3, #2
 80186f6:	4413      	add	r3, r2
 80186f8:	685b      	ldr	r3, [r3, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	2200      	movs	r2, #0
 8018702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	2200      	movs	r2, #0
 801870a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8018714:	2b00      	cmp	r3, #0
 8018716:	d101      	bne.n	801871c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8018718:	2302      	movs	r3, #2
 801871a:	e018      	b.n	801874e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	7c1b      	ldrb	r3, [r3, #16]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d10a      	bne.n	801873a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018724:	4b0d      	ldr	r3, [pc, #52]	; (801875c <USBD_CDC_Init+0x1e8>)
 8018726:	7819      	ldrb	r1, [r3, #0]
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801872e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018732:	6878      	ldr	r0, [r7, #4]
 8018734:	f005 fd7a 	bl	801e22c <USBD_LL_PrepareReceive>
 8018738:	e008      	b.n	801874c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801873a:	4b08      	ldr	r3, [pc, #32]	; (801875c <USBD_CDC_Init+0x1e8>)
 801873c:	7819      	ldrb	r1, [r3, #0]
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018744:	2340      	movs	r3, #64	; 0x40
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f005 fd70 	bl	801e22c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801874c:	2300      	movs	r3, #0
}
 801874e:	4618      	mov	r0, r3
 8018750:	3710      	adds	r7, #16
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}
 8018756:	bf00      	nop
 8018758:	200000db 	.word	0x200000db
 801875c:	200000dc 	.word	0x200000dc
 8018760:	200000dd 	.word	0x200000dd

08018764 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b082      	sub	sp, #8
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
 801876c:	460b      	mov	r3, r1
 801876e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8018770:	4b3a      	ldr	r3, [pc, #232]	; (801885c <USBD_CDC_DeInit+0xf8>)
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	4619      	mov	r1, r3
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f005 fc8f 	bl	801e09a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801877c:	4b37      	ldr	r3, [pc, #220]	; (801885c <USBD_CDC_DeInit+0xf8>)
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	f003 020f 	and.w	r2, r3, #15
 8018784:	6879      	ldr	r1, [r7, #4]
 8018786:	4613      	mov	r3, r2
 8018788:	009b      	lsls	r3, r3, #2
 801878a:	4413      	add	r3, r2
 801878c:	009b      	lsls	r3, r3, #2
 801878e:	440b      	add	r3, r1
 8018790:	3324      	adds	r3, #36	; 0x24
 8018792:	2200      	movs	r2, #0
 8018794:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8018796:	4b32      	ldr	r3, [pc, #200]	; (8018860 <USBD_CDC_DeInit+0xfc>)
 8018798:	781b      	ldrb	r3, [r3, #0]
 801879a:	4619      	mov	r1, r3
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f005 fc7c 	bl	801e09a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80187a2:	4b2f      	ldr	r3, [pc, #188]	; (8018860 <USBD_CDC_DeInit+0xfc>)
 80187a4:	781b      	ldrb	r3, [r3, #0]
 80187a6:	f003 020f 	and.w	r2, r3, #15
 80187aa:	6879      	ldr	r1, [r7, #4]
 80187ac:	4613      	mov	r3, r2
 80187ae:	009b      	lsls	r3, r3, #2
 80187b0:	4413      	add	r3, r2
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	440b      	add	r3, r1
 80187b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80187ba:	2200      	movs	r2, #0
 80187bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80187be:	4b29      	ldr	r3, [pc, #164]	; (8018864 <USBD_CDC_DeInit+0x100>)
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	4619      	mov	r1, r3
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f005 fc68 	bl	801e09a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80187ca:	4b26      	ldr	r3, [pc, #152]	; (8018864 <USBD_CDC_DeInit+0x100>)
 80187cc:	781b      	ldrb	r3, [r3, #0]
 80187ce:	f003 020f 	and.w	r2, r3, #15
 80187d2:	6879      	ldr	r1, [r7, #4]
 80187d4:	4613      	mov	r3, r2
 80187d6:	009b      	lsls	r3, r3, #2
 80187d8:	4413      	add	r3, r2
 80187da:	009b      	lsls	r3, r3, #2
 80187dc:	440b      	add	r3, r1
 80187de:	3324      	adds	r3, #36	; 0x24
 80187e0:	2200      	movs	r2, #0
 80187e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80187e4:	4b1f      	ldr	r3, [pc, #124]	; (8018864 <USBD_CDC_DeInit+0x100>)
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	f003 020f 	and.w	r2, r3, #15
 80187ec:	6879      	ldr	r1, [r7, #4]
 80187ee:	4613      	mov	r3, r2
 80187f0:	009b      	lsls	r3, r3, #2
 80187f2:	4413      	add	r3, r2
 80187f4:	009b      	lsls	r3, r3, #2
 80187f6:	440b      	add	r3, r1
 80187f8:	3326      	adds	r3, #38	; 0x26
 80187fa:	2200      	movs	r2, #0
 80187fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	32b0      	adds	r2, #176	; 0xb0
 8018808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d01f      	beq.n	8018850 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018816:	687a      	ldr	r2, [r7, #4]
 8018818:	33b0      	adds	r3, #176	; 0xb0
 801881a:	009b      	lsls	r3, r3, #2
 801881c:	4413      	add	r3, r2
 801881e:	685b      	ldr	r3, [r3, #4]
 8018820:	685b      	ldr	r3, [r3, #4]
 8018822:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	32b0      	adds	r2, #176	; 0xb0
 801882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018832:	4618      	mov	r0, r3
 8018834:	f005 fd3c 	bl	801e2b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	32b0      	adds	r2, #176	; 0xb0
 8018842:	2100      	movs	r1, #0
 8018844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2200      	movs	r2, #0
 801884c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8018850:	2300      	movs	r3, #0
}
 8018852:	4618      	mov	r0, r3
 8018854:	3708      	adds	r7, #8
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
 801885a:	bf00      	nop
 801885c:	200000db 	.word	0x200000db
 8018860:	200000dc 	.word	0x200000dc
 8018864:	200000dd 	.word	0x200000dd

08018868 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b086      	sub	sp, #24
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
 8018870:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	32b0      	adds	r2, #176	; 0xb0
 801887c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018880:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8018882:	2300      	movs	r3, #0
 8018884:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018886:	2300      	movs	r3, #0
 8018888:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801888a:	2300      	movs	r3, #0
 801888c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801888e:	693b      	ldr	r3, [r7, #16]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d101      	bne.n	8018898 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8018894:	2303      	movs	r3, #3
 8018896:	e0bf      	b.n	8018a18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018898:	683b      	ldr	r3, [r7, #0]
 801889a:	781b      	ldrb	r3, [r3, #0]
 801889c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d050      	beq.n	8018946 <USBD_CDC_Setup+0xde>
 80188a4:	2b20      	cmp	r3, #32
 80188a6:	f040 80af 	bne.w	8018a08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80188aa:	683b      	ldr	r3, [r7, #0]
 80188ac:	88db      	ldrh	r3, [r3, #6]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d03a      	beq.n	8018928 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	781b      	ldrb	r3, [r3, #0]
 80188b6:	b25b      	sxtb	r3, r3
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	da1b      	bge.n	80188f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	33b0      	adds	r3, #176	; 0xb0
 80188c6:	009b      	lsls	r3, r3, #2
 80188c8:	4413      	add	r3, r2
 80188ca:	685b      	ldr	r3, [r3, #4]
 80188cc:	689b      	ldr	r3, [r3, #8]
 80188ce:	683a      	ldr	r2, [r7, #0]
 80188d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80188d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80188d4:	683a      	ldr	r2, [r7, #0]
 80188d6:	88d2      	ldrh	r2, [r2, #6]
 80188d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	88db      	ldrh	r3, [r3, #6]
 80188de:	2b07      	cmp	r3, #7
 80188e0:	bf28      	it	cs
 80188e2:	2307      	movcs	r3, #7
 80188e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	89fa      	ldrh	r2, [r7, #14]
 80188ea:	4619      	mov	r1, r3
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f001 fd43 	bl	801a378 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80188f2:	e090      	b.n	8018a16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	785a      	ldrb	r2, [r3, #1]
 80188f8:	693b      	ldr	r3, [r7, #16]
 80188fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	88db      	ldrh	r3, [r3, #6]
 8018902:	2b3f      	cmp	r3, #63	; 0x3f
 8018904:	d803      	bhi.n	801890e <USBD_CDC_Setup+0xa6>
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	88db      	ldrh	r3, [r3, #6]
 801890a:	b2da      	uxtb	r2, r3
 801890c:	e000      	b.n	8018910 <USBD_CDC_Setup+0xa8>
 801890e:	2240      	movs	r2, #64	; 0x40
 8018910:	693b      	ldr	r3, [r7, #16]
 8018912:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8018916:	6939      	ldr	r1, [r7, #16]
 8018918:	693b      	ldr	r3, [r7, #16]
 801891a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801891e:	461a      	mov	r2, r3
 8018920:	6878      	ldr	r0, [r7, #4]
 8018922:	f001 fd55 	bl	801a3d0 <USBD_CtlPrepareRx>
      break;
 8018926:	e076      	b.n	8018a16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801892e:	687a      	ldr	r2, [r7, #4]
 8018930:	33b0      	adds	r3, #176	; 0xb0
 8018932:	009b      	lsls	r3, r3, #2
 8018934:	4413      	add	r3, r2
 8018936:	685b      	ldr	r3, [r3, #4]
 8018938:	689b      	ldr	r3, [r3, #8]
 801893a:	683a      	ldr	r2, [r7, #0]
 801893c:	7850      	ldrb	r0, [r2, #1]
 801893e:	2200      	movs	r2, #0
 8018940:	6839      	ldr	r1, [r7, #0]
 8018942:	4798      	blx	r3
      break;
 8018944:	e067      	b.n	8018a16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	785b      	ldrb	r3, [r3, #1]
 801894a:	2b0b      	cmp	r3, #11
 801894c:	d851      	bhi.n	80189f2 <USBD_CDC_Setup+0x18a>
 801894e:	a201      	add	r2, pc, #4	; (adr r2, 8018954 <USBD_CDC_Setup+0xec>)
 8018950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018954:	08018985 	.word	0x08018985
 8018958:	08018a01 	.word	0x08018a01
 801895c:	080189f3 	.word	0x080189f3
 8018960:	080189f3 	.word	0x080189f3
 8018964:	080189f3 	.word	0x080189f3
 8018968:	080189f3 	.word	0x080189f3
 801896c:	080189f3 	.word	0x080189f3
 8018970:	080189f3 	.word	0x080189f3
 8018974:	080189f3 	.word	0x080189f3
 8018978:	080189f3 	.word	0x080189f3
 801897c:	080189af 	.word	0x080189af
 8018980:	080189d9 	.word	0x080189d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801898a:	b2db      	uxtb	r3, r3
 801898c:	2b03      	cmp	r3, #3
 801898e:	d107      	bne.n	80189a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018990:	f107 030a 	add.w	r3, r7, #10
 8018994:	2202      	movs	r2, #2
 8018996:	4619      	mov	r1, r3
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f001 fced 	bl	801a378 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801899e:	e032      	b.n	8018a06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80189a0:	6839      	ldr	r1, [r7, #0]
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f001 fc77 	bl	801a296 <USBD_CtlError>
            ret = USBD_FAIL;
 80189a8:	2303      	movs	r3, #3
 80189aa:	75fb      	strb	r3, [r7, #23]
          break;
 80189ac:	e02b      	b.n	8018a06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	2b03      	cmp	r3, #3
 80189b8:	d107      	bne.n	80189ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80189ba:	f107 030d 	add.w	r3, r7, #13
 80189be:	2201      	movs	r2, #1
 80189c0:	4619      	mov	r1, r3
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	f001 fcd8 	bl	801a378 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80189c8:	e01d      	b.n	8018a06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80189ca:	6839      	ldr	r1, [r7, #0]
 80189cc:	6878      	ldr	r0, [r7, #4]
 80189ce:	f001 fc62 	bl	801a296 <USBD_CtlError>
            ret = USBD_FAIL;
 80189d2:	2303      	movs	r3, #3
 80189d4:	75fb      	strb	r3, [r7, #23]
          break;
 80189d6:	e016      	b.n	8018a06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80189de:	b2db      	uxtb	r3, r3
 80189e0:	2b03      	cmp	r3, #3
 80189e2:	d00f      	beq.n	8018a04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80189e4:	6839      	ldr	r1, [r7, #0]
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f001 fc55 	bl	801a296 <USBD_CtlError>
            ret = USBD_FAIL;
 80189ec:	2303      	movs	r3, #3
 80189ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80189f0:	e008      	b.n	8018a04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80189f2:	6839      	ldr	r1, [r7, #0]
 80189f4:	6878      	ldr	r0, [r7, #4]
 80189f6:	f001 fc4e 	bl	801a296 <USBD_CtlError>
          ret = USBD_FAIL;
 80189fa:	2303      	movs	r3, #3
 80189fc:	75fb      	strb	r3, [r7, #23]
          break;
 80189fe:	e002      	b.n	8018a06 <USBD_CDC_Setup+0x19e>
          break;
 8018a00:	bf00      	nop
 8018a02:	e008      	b.n	8018a16 <USBD_CDC_Setup+0x1ae>
          break;
 8018a04:	bf00      	nop
      }
      break;
 8018a06:	e006      	b.n	8018a16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8018a08:	6839      	ldr	r1, [r7, #0]
 8018a0a:	6878      	ldr	r0, [r7, #4]
 8018a0c:	f001 fc43 	bl	801a296 <USBD_CtlError>
      ret = USBD_FAIL;
 8018a10:	2303      	movs	r3, #3
 8018a12:	75fb      	strb	r3, [r7, #23]
      break;
 8018a14:	bf00      	nop
  }

  return (uint8_t)ret;
 8018a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a18:	4618      	mov	r0, r3
 8018a1a:	3718      	adds	r7, #24
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}

08018a20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
 8018a28:	460b      	mov	r3, r1
 8018a2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	32b0      	adds	r2, #176	; 0xb0
 8018a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d101      	bne.n	8018a4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8018a46:	2303      	movs	r3, #3
 8018a48:	e065      	b.n	8018b16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	32b0      	adds	r2, #176	; 0xb0
 8018a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018a5a:	78fb      	ldrb	r3, [r7, #3]
 8018a5c:	f003 020f 	and.w	r2, r3, #15
 8018a60:	6879      	ldr	r1, [r7, #4]
 8018a62:	4613      	mov	r3, r2
 8018a64:	009b      	lsls	r3, r3, #2
 8018a66:	4413      	add	r3, r2
 8018a68:	009b      	lsls	r3, r3, #2
 8018a6a:	440b      	add	r3, r1
 8018a6c:	3318      	adds	r3, #24
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d02f      	beq.n	8018ad4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8018a74:	78fb      	ldrb	r3, [r7, #3]
 8018a76:	f003 020f 	and.w	r2, r3, #15
 8018a7a:	6879      	ldr	r1, [r7, #4]
 8018a7c:	4613      	mov	r3, r2
 8018a7e:	009b      	lsls	r3, r3, #2
 8018a80:	4413      	add	r3, r2
 8018a82:	009b      	lsls	r3, r3, #2
 8018a84:	440b      	add	r3, r1
 8018a86:	3318      	adds	r3, #24
 8018a88:	681a      	ldr	r2, [r3, #0]
 8018a8a:	78fb      	ldrb	r3, [r7, #3]
 8018a8c:	f003 010f 	and.w	r1, r3, #15
 8018a90:	68f8      	ldr	r0, [r7, #12]
 8018a92:	460b      	mov	r3, r1
 8018a94:	00db      	lsls	r3, r3, #3
 8018a96:	440b      	add	r3, r1
 8018a98:	009b      	lsls	r3, r3, #2
 8018a9a:	4403      	add	r3, r0
 8018a9c:	3348      	adds	r3, #72	; 0x48
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	fbb2 f1f3 	udiv	r1, r2, r3
 8018aa4:	fb01 f303 	mul.w	r3, r1, r3
 8018aa8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d112      	bne.n	8018ad4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8018aae:	78fb      	ldrb	r3, [r7, #3]
 8018ab0:	f003 020f 	and.w	r2, r3, #15
 8018ab4:	6879      	ldr	r1, [r7, #4]
 8018ab6:	4613      	mov	r3, r2
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	4413      	add	r3, r2
 8018abc:	009b      	lsls	r3, r3, #2
 8018abe:	440b      	add	r3, r1
 8018ac0:	3318      	adds	r3, #24
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8018ac6:	78f9      	ldrb	r1, [r7, #3]
 8018ac8:	2300      	movs	r3, #0
 8018aca:	2200      	movs	r2, #0
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f005 fb8c 	bl	801e1ea <USBD_LL_Transmit>
 8018ad2:	e01f      	b.n	8018b14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8018ad4:	68bb      	ldr	r3, [r7, #8]
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018ae2:	687a      	ldr	r2, [r7, #4]
 8018ae4:	33b0      	adds	r3, #176	; 0xb0
 8018ae6:	009b      	lsls	r3, r3, #2
 8018ae8:	4413      	add	r3, r2
 8018aea:	685b      	ldr	r3, [r3, #4]
 8018aec:	691b      	ldr	r3, [r3, #16]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d010      	beq.n	8018b14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018af8:	687a      	ldr	r2, [r7, #4]
 8018afa:	33b0      	adds	r3, #176	; 0xb0
 8018afc:	009b      	lsls	r3, r3, #2
 8018afe:	4413      	add	r3, r2
 8018b00:	685b      	ldr	r3, [r3, #4]
 8018b02:	691b      	ldr	r3, [r3, #16]
 8018b04:	68ba      	ldr	r2, [r7, #8]
 8018b06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8018b0a:	68ba      	ldr	r2, [r7, #8]
 8018b0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8018b10:	78fa      	ldrb	r2, [r7, #3]
 8018b12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8018b14:	2300      	movs	r3, #0
}
 8018b16:	4618      	mov	r0, r3
 8018b18:	3710      	adds	r7, #16
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}

08018b1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018b1e:	b580      	push	{r7, lr}
 8018b20:	b084      	sub	sp, #16
 8018b22:	af00      	add	r7, sp, #0
 8018b24:	6078      	str	r0, [r7, #4]
 8018b26:	460b      	mov	r3, r1
 8018b28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	32b0      	adds	r2, #176	; 0xb0
 8018b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	32b0      	adds	r2, #176	; 0xb0
 8018b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d101      	bne.n	8018b50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8018b4c:	2303      	movs	r3, #3
 8018b4e:	e01a      	b.n	8018b86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8018b50:	78fb      	ldrb	r3, [r7, #3]
 8018b52:	4619      	mov	r1, r3
 8018b54:	6878      	ldr	r0, [r7, #4]
 8018b56:	f005 fb8a 	bl	801e26e <USBD_LL_GetRxDataSize>
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	33b0      	adds	r3, #176	; 0xb0
 8018b6c:	009b      	lsls	r3, r3, #2
 8018b6e:	4413      	add	r3, r2
 8018b70:	685b      	ldr	r3, [r3, #4]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	68fa      	ldr	r2, [r7, #12]
 8018b76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8018b7a:	68fa      	ldr	r2, [r7, #12]
 8018b7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8018b80:	4611      	mov	r1, r2
 8018b82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8018b84:	2300      	movs	r3, #0
}
 8018b86:	4618      	mov	r0, r3
 8018b88:	3710      	adds	r7, #16
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}

08018b8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8018b8e:	b580      	push	{r7, lr}
 8018b90:	b084      	sub	sp, #16
 8018b92:	af00      	add	r7, sp, #0
 8018b94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	32b0      	adds	r2, #176	; 0xb0
 8018ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ba4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d101      	bne.n	8018bb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018bac:	2303      	movs	r3, #3
 8018bae:	e025      	b.n	8018bfc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018bb6:	687a      	ldr	r2, [r7, #4]
 8018bb8:	33b0      	adds	r3, #176	; 0xb0
 8018bba:	009b      	lsls	r3, r3, #2
 8018bbc:	4413      	add	r3, r2
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d01a      	beq.n	8018bfa <USBD_CDC_EP0_RxReady+0x6c>
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8018bca:	2bff      	cmp	r3, #255	; 0xff
 8018bcc:	d015      	beq.n	8018bfa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018bd4:	687a      	ldr	r2, [r7, #4]
 8018bd6:	33b0      	adds	r3, #176	; 0xb0
 8018bd8:	009b      	lsls	r3, r3, #2
 8018bda:	4413      	add	r3, r2
 8018bdc:	685b      	ldr	r3, [r3, #4]
 8018bde:	689b      	ldr	r3, [r3, #8]
 8018be0:	68fa      	ldr	r2, [r7, #12]
 8018be2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8018be6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8018be8:	68fa      	ldr	r2, [r7, #12]
 8018bea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8018bee:	b292      	uxth	r2, r2
 8018bf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	22ff      	movs	r2, #255	; 0xff
 8018bf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8018bfa:	2300      	movs	r3, #0
}
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	3710      	adds	r7, #16
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bd80      	pop	{r7, pc}

08018c04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b086      	sub	sp, #24
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018c0c:	2182      	movs	r1, #130	; 0x82
 8018c0e:	4818      	ldr	r0, [pc, #96]	; (8018c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018c10:	f000 fd09 	bl	8019626 <USBD_GetEpDesc>
 8018c14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018c16:	2101      	movs	r1, #1
 8018c18:	4815      	ldr	r0, [pc, #84]	; (8018c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018c1a:	f000 fd04 	bl	8019626 <USBD_GetEpDesc>
 8018c1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018c20:	2181      	movs	r1, #129	; 0x81
 8018c22:	4813      	ldr	r0, [pc, #76]	; (8018c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018c24:	f000 fcff 	bl	8019626 <USBD_GetEpDesc>
 8018c28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018c2a:	697b      	ldr	r3, [r7, #20]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d002      	beq.n	8018c36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	2210      	movs	r2, #16
 8018c34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018c36:	693b      	ldr	r3, [r7, #16]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d006      	beq.n	8018c4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018c3c:	693b      	ldr	r3, [r7, #16]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018c44:	711a      	strb	r2, [r3, #4]
 8018c46:	2200      	movs	r2, #0
 8018c48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d006      	beq.n	8018c5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	2200      	movs	r2, #0
 8018c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018c58:	711a      	strb	r2, [r3, #4]
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	2243      	movs	r2, #67	; 0x43
 8018c62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018c64:	4b02      	ldr	r3, [pc, #8]	; (8018c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	3718      	adds	r7, #24
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	bf00      	nop
 8018c70:	20000098 	.word	0x20000098

08018c74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b086      	sub	sp, #24
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018c7c:	2182      	movs	r1, #130	; 0x82
 8018c7e:	4818      	ldr	r0, [pc, #96]	; (8018ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018c80:	f000 fcd1 	bl	8019626 <USBD_GetEpDesc>
 8018c84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018c86:	2101      	movs	r1, #1
 8018c88:	4815      	ldr	r0, [pc, #84]	; (8018ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018c8a:	f000 fccc 	bl	8019626 <USBD_GetEpDesc>
 8018c8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018c90:	2181      	movs	r1, #129	; 0x81
 8018c92:	4813      	ldr	r0, [pc, #76]	; (8018ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018c94:	f000 fcc7 	bl	8019626 <USBD_GetEpDesc>
 8018c98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d002      	beq.n	8018ca6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8018ca0:	697b      	ldr	r3, [r7, #20]
 8018ca2:	2210      	movs	r2, #16
 8018ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018ca6:	693b      	ldr	r3, [r7, #16]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d006      	beq.n	8018cba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	2200      	movs	r2, #0
 8018cb0:	711a      	strb	r2, [r3, #4]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	f042 0202 	orr.w	r2, r2, #2
 8018cb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d006      	beq.n	8018cce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	711a      	strb	r2, [r3, #4]
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	f042 0202 	orr.w	r2, r2, #2
 8018ccc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2243      	movs	r2, #67	; 0x43
 8018cd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018cd4:	4b02      	ldr	r3, [pc, #8]	; (8018ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	3718      	adds	r7, #24
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	bf00      	nop
 8018ce0:	20000098 	.word	0x20000098

08018ce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b086      	sub	sp, #24
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018cec:	2182      	movs	r1, #130	; 0x82
 8018cee:	4818      	ldr	r0, [pc, #96]	; (8018d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018cf0:	f000 fc99 	bl	8019626 <USBD_GetEpDesc>
 8018cf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018cf6:	2101      	movs	r1, #1
 8018cf8:	4815      	ldr	r0, [pc, #84]	; (8018d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018cfa:	f000 fc94 	bl	8019626 <USBD_GetEpDesc>
 8018cfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018d00:	2181      	movs	r1, #129	; 0x81
 8018d02:	4813      	ldr	r0, [pc, #76]	; (8018d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018d04:	f000 fc8f 	bl	8019626 <USBD_GetEpDesc>
 8018d08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018d0a:	697b      	ldr	r3, [r7, #20]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d002      	beq.n	8018d16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8018d10:	697b      	ldr	r3, [r7, #20]
 8018d12:	2210      	movs	r2, #16
 8018d14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018d16:	693b      	ldr	r3, [r7, #16]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d006      	beq.n	8018d2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018d1c:	693b      	ldr	r3, [r7, #16]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018d24:	711a      	strb	r2, [r3, #4]
 8018d26:	2200      	movs	r2, #0
 8018d28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d006      	beq.n	8018d3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	2200      	movs	r2, #0
 8018d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018d38:	711a      	strb	r2, [r3, #4]
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	2243      	movs	r2, #67	; 0x43
 8018d42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018d44:	4b02      	ldr	r3, [pc, #8]	; (8018d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8018d46:	4618      	mov	r0, r3
 8018d48:	3718      	adds	r7, #24
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}
 8018d4e:	bf00      	nop
 8018d50:	20000098 	.word	0x20000098

08018d54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018d54:	b480      	push	{r7}
 8018d56:	b083      	sub	sp, #12
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	220a      	movs	r2, #10
 8018d60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8018d62:	4b03      	ldr	r3, [pc, #12]	; (8018d70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018d64:	4618      	mov	r0, r3
 8018d66:	370c      	adds	r7, #12
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6e:	4770      	bx	lr
 8018d70:	20000054 	.word	0x20000054

08018d74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018d74:	b480      	push	{r7}
 8018d76:	b083      	sub	sp, #12
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
 8018d7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8018d7e:	683b      	ldr	r3, [r7, #0]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d101      	bne.n	8018d88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8018d84:	2303      	movs	r3, #3
 8018d86:	e009      	b.n	8018d9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018d8e:	687a      	ldr	r2, [r7, #4]
 8018d90:	33b0      	adds	r3, #176	; 0xb0
 8018d92:	009b      	lsls	r3, r3, #2
 8018d94:	4413      	add	r3, r2
 8018d96:	683a      	ldr	r2, [r7, #0]
 8018d98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8018d9a:	2300      	movs	r3, #0
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	370c      	adds	r7, #12
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr

08018da8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8018da8:	b480      	push	{r7}
 8018daa:	b087      	sub	sp, #28
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	60f8      	str	r0, [r7, #12]
 8018db0:	60b9      	str	r1, [r7, #8]
 8018db2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	32b0      	adds	r2, #176	; 0xb0
 8018dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dc2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d101      	bne.n	8018dce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8018dca:	2303      	movs	r3, #3
 8018dcc:	e008      	b.n	8018de0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8018dce:	697b      	ldr	r3, [r7, #20]
 8018dd0:	68ba      	ldr	r2, [r7, #8]
 8018dd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8018dd6:	697b      	ldr	r3, [r7, #20]
 8018dd8:	687a      	ldr	r2, [r7, #4]
 8018dda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8018dde:	2300      	movs	r3, #0
}
 8018de0:	4618      	mov	r0, r3
 8018de2:	371c      	adds	r7, #28
 8018de4:	46bd      	mov	sp, r7
 8018de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dea:	4770      	bx	lr

08018dec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8018dec:	b480      	push	{r7}
 8018dee:	b085      	sub	sp, #20
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
 8018df4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	32b0      	adds	r2, #176	; 0xb0
 8018e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d101      	bne.n	8018e10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8018e0c:	2303      	movs	r3, #3
 8018e0e:	e004      	b.n	8018e1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	683a      	ldr	r2, [r7, #0]
 8018e14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8018e18:	2300      	movs	r3, #0
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3714      	adds	r7, #20
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e24:	4770      	bx	lr
	...

08018e28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b084      	sub	sp, #16
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	32b0      	adds	r2, #176	; 0xb0
 8018e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	32b0      	adds	r2, #176	; 0xb0
 8018e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d101      	bne.n	8018e56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8018e52:	2303      	movs	r3, #3
 8018e54:	e018      	b.n	8018e88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	7c1b      	ldrb	r3, [r3, #16]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d10a      	bne.n	8018e74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018e5e:	4b0c      	ldr	r3, [pc, #48]	; (8018e90 <USBD_CDC_ReceivePacket+0x68>)
 8018e60:	7819      	ldrb	r1, [r3, #0]
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f005 f9dd 	bl	801e22c <USBD_LL_PrepareReceive>
 8018e72:	e008      	b.n	8018e86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018e74:	4b06      	ldr	r3, [pc, #24]	; (8018e90 <USBD_CDC_ReceivePacket+0x68>)
 8018e76:	7819      	ldrb	r1, [r3, #0]
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8018e7e:	2340      	movs	r3, #64	; 0x40
 8018e80:	6878      	ldr	r0, [r7, #4]
 8018e82:	f005 f9d3 	bl	801e22c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018e86:	2300      	movs	r3, #0
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3710      	adds	r7, #16
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}
 8018e90:	200000dc 	.word	0x200000dc

08018e94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b086      	sub	sp, #24
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	60f8      	str	r0, [r7, #12]
 8018e9c:	60b9      	str	r1, [r7, #8]
 8018e9e:	4613      	mov	r3, r2
 8018ea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d101      	bne.n	8018eac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018ea8:	2303      	movs	r3, #3
 8018eaa:	e01f      	b.n	8018eec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	2200      	movs	r2, #0
 8018eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8018ec4:	68bb      	ldr	r3, [r7, #8]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d003      	beq.n	8018ed2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	68ba      	ldr	r2, [r7, #8]
 8018ece:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	2201      	movs	r2, #1
 8018ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	79fa      	ldrb	r2, [r7, #7]
 8018ede:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018ee0:	68f8      	ldr	r0, [r7, #12]
 8018ee2:	f005 f84d 	bl	801df80 <USBD_LL_Init>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8018eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8018eec:	4618      	mov	r0, r3
 8018eee:	3718      	adds	r7, #24
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd80      	pop	{r7, pc}

08018ef4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b084      	sub	sp, #16
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
 8018efc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018efe:	2300      	movs	r3, #0
 8018f00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d101      	bne.n	8018f0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018f08:	2303      	movs	r3, #3
 8018f0a:	e025      	b.n	8018f58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	683a      	ldr	r2, [r7, #0]
 8018f10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	32ae      	adds	r2, #174	; 0xae
 8018f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d00f      	beq.n	8018f48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	32ae      	adds	r2, #174	; 0xae
 8018f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f38:	f107 020e 	add.w	r2, r7, #14
 8018f3c:	4610      	mov	r0, r2
 8018f3e:	4798      	blx	r3
 8018f40:	4602      	mov	r2, r0
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8018f4e:	1c5a      	adds	r2, r3, #1
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8018f56:	2300      	movs	r3, #0
}
 8018f58:	4618      	mov	r0, r3
 8018f5a:	3710      	adds	r7, #16
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	bd80      	pop	{r7, pc}

08018f60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b082      	sub	sp, #8
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8018f68:	6878      	ldr	r0, [r7, #4]
 8018f6a:	f005 f855 	bl	801e018 <USBD_LL_Start>
 8018f6e:	4603      	mov	r3, r0
}
 8018f70:	4618      	mov	r0, r3
 8018f72:	3708      	adds	r7, #8
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bd80      	pop	{r7, pc}

08018f78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8018f78:	b480      	push	{r7}
 8018f7a:	b083      	sub	sp, #12
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018f80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8018f82:	4618      	mov	r0, r3
 8018f84:	370c      	adds	r7, #12
 8018f86:	46bd      	mov	sp, r7
 8018f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8c:	4770      	bx	lr

08018f8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b084      	sub	sp, #16
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	6078      	str	r0, [r7, #4]
 8018f96:	460b      	mov	r3, r1
 8018f98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d009      	beq.n	8018fbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	78fa      	ldrb	r2, [r7, #3]
 8018fb2:	4611      	mov	r1, r2
 8018fb4:	6878      	ldr	r0, [r7, #4]
 8018fb6:	4798      	blx	r3
 8018fb8:	4603      	mov	r3, r0
 8018fba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	3710      	adds	r7, #16
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	bd80      	pop	{r7, pc}

08018fc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018fc6:	b580      	push	{r7, lr}
 8018fc8:	b084      	sub	sp, #16
 8018fca:	af00      	add	r7, sp, #0
 8018fcc:	6078      	str	r0, [r7, #4]
 8018fce:	460b      	mov	r3, r1
 8018fd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018fdc:	685b      	ldr	r3, [r3, #4]
 8018fde:	78fa      	ldrb	r2, [r7, #3]
 8018fe0:	4611      	mov	r1, r2
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	4798      	blx	r3
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d001      	beq.n	8018ff0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8018fec:	2303      	movs	r3, #3
 8018fee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	3710      	adds	r7, #16
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	bd80      	pop	{r7, pc}

08018ffa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018ffa:	b580      	push	{r7, lr}
 8018ffc:	b084      	sub	sp, #16
 8018ffe:	af00      	add	r7, sp, #0
 8019000:	6078      	str	r0, [r7, #4]
 8019002:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801900a:	6839      	ldr	r1, [r7, #0]
 801900c:	4618      	mov	r0, r3
 801900e:	f001 f908 	bl	801a222 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	2201      	movs	r2, #1
 8019016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8019020:	461a      	mov	r2, r3
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801902e:	f003 031f 	and.w	r3, r3, #31
 8019032:	2b02      	cmp	r3, #2
 8019034:	d01a      	beq.n	801906c <USBD_LL_SetupStage+0x72>
 8019036:	2b02      	cmp	r3, #2
 8019038:	d822      	bhi.n	8019080 <USBD_LL_SetupStage+0x86>
 801903a:	2b00      	cmp	r3, #0
 801903c:	d002      	beq.n	8019044 <USBD_LL_SetupStage+0x4a>
 801903e:	2b01      	cmp	r3, #1
 8019040:	d00a      	beq.n	8019058 <USBD_LL_SetupStage+0x5e>
 8019042:	e01d      	b.n	8019080 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801904a:	4619      	mov	r1, r3
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f000 fb5f 	bl	8019710 <USBD_StdDevReq>
 8019052:	4603      	mov	r3, r0
 8019054:	73fb      	strb	r3, [r7, #15]
      break;
 8019056:	e020      	b.n	801909a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801905e:	4619      	mov	r1, r3
 8019060:	6878      	ldr	r0, [r7, #4]
 8019062:	f000 fbc7 	bl	80197f4 <USBD_StdItfReq>
 8019066:	4603      	mov	r3, r0
 8019068:	73fb      	strb	r3, [r7, #15]
      break;
 801906a:	e016      	b.n	801909a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8019072:	4619      	mov	r1, r3
 8019074:	6878      	ldr	r0, [r7, #4]
 8019076:	f000 fc29 	bl	80198cc <USBD_StdEPReq>
 801907a:	4603      	mov	r3, r0
 801907c:	73fb      	strb	r3, [r7, #15]
      break;
 801907e:	e00c      	b.n	801909a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8019086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801908a:	b2db      	uxtb	r3, r3
 801908c:	4619      	mov	r1, r3
 801908e:	6878      	ldr	r0, [r7, #4]
 8019090:	f005 f822 	bl	801e0d8 <USBD_LL_StallEP>
 8019094:	4603      	mov	r3, r0
 8019096:	73fb      	strb	r3, [r7, #15]
      break;
 8019098:	bf00      	nop
  }

  return ret;
 801909a:	7bfb      	ldrb	r3, [r7, #15]
}
 801909c:	4618      	mov	r0, r3
 801909e:	3710      	adds	r7, #16
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b086      	sub	sp, #24
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	460b      	mov	r3, r1
 80190ae:	607a      	str	r2, [r7, #4]
 80190b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80190b2:	2300      	movs	r3, #0
 80190b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80190b6:	7afb      	ldrb	r3, [r7, #11]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d16e      	bne.n	801919a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80190c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80190ca:	2b03      	cmp	r3, #3
 80190cc:	f040 8098 	bne.w	8019200 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80190d0:	693b      	ldr	r3, [r7, #16]
 80190d2:	689a      	ldr	r2, [r3, #8]
 80190d4:	693b      	ldr	r3, [r7, #16]
 80190d6:	68db      	ldr	r3, [r3, #12]
 80190d8:	429a      	cmp	r2, r3
 80190da:	d913      	bls.n	8019104 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80190dc:	693b      	ldr	r3, [r7, #16]
 80190de:	689a      	ldr	r2, [r3, #8]
 80190e0:	693b      	ldr	r3, [r7, #16]
 80190e2:	68db      	ldr	r3, [r3, #12]
 80190e4:	1ad2      	subs	r2, r2, r3
 80190e6:	693b      	ldr	r3, [r7, #16]
 80190e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	68da      	ldr	r2, [r3, #12]
 80190ee:	693b      	ldr	r3, [r7, #16]
 80190f0:	689b      	ldr	r3, [r3, #8]
 80190f2:	4293      	cmp	r3, r2
 80190f4:	bf28      	it	cs
 80190f6:	4613      	movcs	r3, r2
 80190f8:	461a      	mov	r2, r3
 80190fa:	6879      	ldr	r1, [r7, #4]
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f001 f984 	bl	801a40a <USBD_CtlContinueRx>
 8019102:	e07d      	b.n	8019200 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801910a:	f003 031f 	and.w	r3, r3, #31
 801910e:	2b02      	cmp	r3, #2
 8019110:	d014      	beq.n	801913c <USBD_LL_DataOutStage+0x98>
 8019112:	2b02      	cmp	r3, #2
 8019114:	d81d      	bhi.n	8019152 <USBD_LL_DataOutStage+0xae>
 8019116:	2b00      	cmp	r3, #0
 8019118:	d002      	beq.n	8019120 <USBD_LL_DataOutStage+0x7c>
 801911a:	2b01      	cmp	r3, #1
 801911c:	d003      	beq.n	8019126 <USBD_LL_DataOutStage+0x82>
 801911e:	e018      	b.n	8019152 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8019120:	2300      	movs	r3, #0
 8019122:	75bb      	strb	r3, [r7, #22]
            break;
 8019124:	e018      	b.n	8019158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801912c:	b2db      	uxtb	r3, r3
 801912e:	4619      	mov	r1, r3
 8019130:	68f8      	ldr	r0, [r7, #12]
 8019132:	f000 fa5e 	bl	80195f2 <USBD_CoreFindIF>
 8019136:	4603      	mov	r3, r0
 8019138:	75bb      	strb	r3, [r7, #22]
            break;
 801913a:	e00d      	b.n	8019158 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8019142:	b2db      	uxtb	r3, r3
 8019144:	4619      	mov	r1, r3
 8019146:	68f8      	ldr	r0, [r7, #12]
 8019148:	f000 fa60 	bl	801960c <USBD_CoreFindEP>
 801914c:	4603      	mov	r3, r0
 801914e:	75bb      	strb	r3, [r7, #22]
            break;
 8019150:	e002      	b.n	8019158 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8019152:	2300      	movs	r3, #0
 8019154:	75bb      	strb	r3, [r7, #22]
            break;
 8019156:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8019158:	7dbb      	ldrb	r3, [r7, #22]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d119      	bne.n	8019192 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019164:	b2db      	uxtb	r3, r3
 8019166:	2b03      	cmp	r3, #3
 8019168:	d113      	bne.n	8019192 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801916a:	7dba      	ldrb	r2, [r7, #22]
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	32ae      	adds	r2, #174	; 0xae
 8019170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019174:	691b      	ldr	r3, [r3, #16]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d00b      	beq.n	8019192 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801917a:	7dba      	ldrb	r2, [r7, #22]
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8019182:	7dba      	ldrb	r2, [r7, #22]
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	32ae      	adds	r2, #174	; 0xae
 8019188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801918c:	691b      	ldr	r3, [r3, #16]
 801918e:	68f8      	ldr	r0, [r7, #12]
 8019190:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8019192:	68f8      	ldr	r0, [r7, #12]
 8019194:	f001 f94a 	bl	801a42c <USBD_CtlSendStatus>
 8019198:	e032      	b.n	8019200 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801919a:	7afb      	ldrb	r3, [r7, #11]
 801919c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	4619      	mov	r1, r3
 80191a4:	68f8      	ldr	r0, [r7, #12]
 80191a6:	f000 fa31 	bl	801960c <USBD_CoreFindEP>
 80191aa:	4603      	mov	r3, r0
 80191ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80191ae:	7dbb      	ldrb	r3, [r7, #22]
 80191b0:	2bff      	cmp	r3, #255	; 0xff
 80191b2:	d025      	beq.n	8019200 <USBD_LL_DataOutStage+0x15c>
 80191b4:	7dbb      	ldrb	r3, [r7, #22]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d122      	bne.n	8019200 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80191c0:	b2db      	uxtb	r3, r3
 80191c2:	2b03      	cmp	r3, #3
 80191c4:	d117      	bne.n	80191f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80191c6:	7dba      	ldrb	r2, [r7, #22]
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	32ae      	adds	r2, #174	; 0xae
 80191cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191d0:	699b      	ldr	r3, [r3, #24]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d00f      	beq.n	80191f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80191d6:	7dba      	ldrb	r2, [r7, #22]
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80191de:	7dba      	ldrb	r2, [r7, #22]
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	32ae      	adds	r2, #174	; 0xae
 80191e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191e8:	699b      	ldr	r3, [r3, #24]
 80191ea:	7afa      	ldrb	r2, [r7, #11]
 80191ec:	4611      	mov	r1, r2
 80191ee:	68f8      	ldr	r0, [r7, #12]
 80191f0:	4798      	blx	r3
 80191f2:	4603      	mov	r3, r0
 80191f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80191f6:	7dfb      	ldrb	r3, [r7, #23]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d001      	beq.n	8019200 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80191fc:	7dfb      	ldrb	r3, [r7, #23]
 80191fe:	e000      	b.n	8019202 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8019200:	2300      	movs	r3, #0
}
 8019202:	4618      	mov	r0, r3
 8019204:	3718      	adds	r7, #24
 8019206:	46bd      	mov	sp, r7
 8019208:	bd80      	pop	{r7, pc}

0801920a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801920a:	b580      	push	{r7, lr}
 801920c:	b086      	sub	sp, #24
 801920e:	af00      	add	r7, sp, #0
 8019210:	60f8      	str	r0, [r7, #12]
 8019212:	460b      	mov	r3, r1
 8019214:	607a      	str	r2, [r7, #4]
 8019216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8019218:	7afb      	ldrb	r3, [r7, #11]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d16f      	bne.n	80192fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	3314      	adds	r3, #20
 8019222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801922a:	2b02      	cmp	r3, #2
 801922c:	d15a      	bne.n	80192e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	689a      	ldr	r2, [r3, #8]
 8019232:	693b      	ldr	r3, [r7, #16]
 8019234:	68db      	ldr	r3, [r3, #12]
 8019236:	429a      	cmp	r2, r3
 8019238:	d914      	bls.n	8019264 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801923a:	693b      	ldr	r3, [r7, #16]
 801923c:	689a      	ldr	r2, [r3, #8]
 801923e:	693b      	ldr	r3, [r7, #16]
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	1ad2      	subs	r2, r2, r3
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8019248:	693b      	ldr	r3, [r7, #16]
 801924a:	689b      	ldr	r3, [r3, #8]
 801924c:	461a      	mov	r2, r3
 801924e:	6879      	ldr	r1, [r7, #4]
 8019250:	68f8      	ldr	r0, [r7, #12]
 8019252:	f001 f8ac 	bl	801a3ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019256:	2300      	movs	r3, #0
 8019258:	2200      	movs	r2, #0
 801925a:	2100      	movs	r1, #0
 801925c:	68f8      	ldr	r0, [r7, #12]
 801925e:	f004 ffe5 	bl	801e22c <USBD_LL_PrepareReceive>
 8019262:	e03f      	b.n	80192e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	68da      	ldr	r2, [r3, #12]
 8019268:	693b      	ldr	r3, [r7, #16]
 801926a:	689b      	ldr	r3, [r3, #8]
 801926c:	429a      	cmp	r2, r3
 801926e:	d11c      	bne.n	80192aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	685a      	ldr	r2, [r3, #4]
 8019274:	693b      	ldr	r3, [r7, #16]
 8019276:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8019278:	429a      	cmp	r2, r3
 801927a:	d316      	bcc.n	80192aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801927c:	693b      	ldr	r3, [r7, #16]
 801927e:	685a      	ldr	r2, [r3, #4]
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8019286:	429a      	cmp	r2, r3
 8019288:	d20f      	bcs.n	80192aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801928a:	2200      	movs	r2, #0
 801928c:	2100      	movs	r1, #0
 801928e:	68f8      	ldr	r0, [r7, #12]
 8019290:	f001 f88d 	bl	801a3ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	2200      	movs	r2, #0
 8019298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801929c:	2300      	movs	r3, #0
 801929e:	2200      	movs	r2, #0
 80192a0:	2100      	movs	r1, #0
 80192a2:	68f8      	ldr	r0, [r7, #12]
 80192a4:	f004 ffc2 	bl	801e22c <USBD_LL_PrepareReceive>
 80192a8:	e01c      	b.n	80192e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80192b0:	b2db      	uxtb	r3, r3
 80192b2:	2b03      	cmp	r3, #3
 80192b4:	d10f      	bne.n	80192d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80192bc:	68db      	ldr	r3, [r3, #12]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d009      	beq.n	80192d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	2200      	movs	r2, #0
 80192c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80192d0:	68db      	ldr	r3, [r3, #12]
 80192d2:	68f8      	ldr	r0, [r7, #12]
 80192d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80192d6:	2180      	movs	r1, #128	; 0x80
 80192d8:	68f8      	ldr	r0, [r7, #12]
 80192da:	f004 fefd 	bl	801e0d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80192de:	68f8      	ldr	r0, [r7, #12]
 80192e0:	f001 f8b7 	bl	801a452 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d03a      	beq.n	8019364 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80192ee:	68f8      	ldr	r0, [r7, #12]
 80192f0:	f7ff fe42 	bl	8018f78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	2200      	movs	r2, #0
 80192f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80192fc:	e032      	b.n	8019364 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80192fe:	7afb      	ldrb	r3, [r7, #11]
 8019300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019304:	b2db      	uxtb	r3, r3
 8019306:	4619      	mov	r1, r3
 8019308:	68f8      	ldr	r0, [r7, #12]
 801930a:	f000 f97f 	bl	801960c <USBD_CoreFindEP>
 801930e:	4603      	mov	r3, r0
 8019310:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019312:	7dfb      	ldrb	r3, [r7, #23]
 8019314:	2bff      	cmp	r3, #255	; 0xff
 8019316:	d025      	beq.n	8019364 <USBD_LL_DataInStage+0x15a>
 8019318:	7dfb      	ldrb	r3, [r7, #23]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d122      	bne.n	8019364 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019324:	b2db      	uxtb	r3, r3
 8019326:	2b03      	cmp	r3, #3
 8019328:	d11c      	bne.n	8019364 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801932a:	7dfa      	ldrb	r2, [r7, #23]
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	32ae      	adds	r2, #174	; 0xae
 8019330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019334:	695b      	ldr	r3, [r3, #20]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d014      	beq.n	8019364 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801933a:	7dfa      	ldrb	r2, [r7, #23]
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8019342:	7dfa      	ldrb	r2, [r7, #23]
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	32ae      	adds	r2, #174	; 0xae
 8019348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801934c:	695b      	ldr	r3, [r3, #20]
 801934e:	7afa      	ldrb	r2, [r7, #11]
 8019350:	4611      	mov	r1, r2
 8019352:	68f8      	ldr	r0, [r7, #12]
 8019354:	4798      	blx	r3
 8019356:	4603      	mov	r3, r0
 8019358:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801935a:	7dbb      	ldrb	r3, [r7, #22]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d001      	beq.n	8019364 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8019360:	7dbb      	ldrb	r3, [r7, #22]
 8019362:	e000      	b.n	8019366 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8019364:	2300      	movs	r3, #0
}
 8019366:	4618      	mov	r0, r3
 8019368:	3718      	adds	r7, #24
 801936a:	46bd      	mov	sp, r7
 801936c:	bd80      	pop	{r7, pc}

0801936e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801936e:	b580      	push	{r7, lr}
 8019370:	b084      	sub	sp, #16
 8019372:	af00      	add	r7, sp, #0
 8019374:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8019376:	2300      	movs	r3, #0
 8019378:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2201      	movs	r2, #1
 801937e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2200      	movs	r2, #0
 8019386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2200      	movs	r2, #0
 801938e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	2200      	movs	r2, #0
 8019394:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	2200      	movs	r2, #0
 801939c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d014      	beq.n	80193d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80193b0:	685b      	ldr	r3, [r3, #4]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d00e      	beq.n	80193d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	687a      	ldr	r2, [r7, #4]
 80193c0:	6852      	ldr	r2, [r2, #4]
 80193c2:	b2d2      	uxtb	r2, r2
 80193c4:	4611      	mov	r1, r2
 80193c6:	6878      	ldr	r0, [r7, #4]
 80193c8:	4798      	blx	r3
 80193ca:	4603      	mov	r3, r0
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d001      	beq.n	80193d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80193d0:	2303      	movs	r3, #3
 80193d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80193d4:	2340      	movs	r3, #64	; 0x40
 80193d6:	2200      	movs	r2, #0
 80193d8:	2100      	movs	r1, #0
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f004 fe37 	bl	801e04e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2201      	movs	r2, #1
 80193e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	2240      	movs	r2, #64	; 0x40
 80193ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80193f0:	2340      	movs	r3, #64	; 0x40
 80193f2:	2200      	movs	r2, #0
 80193f4:	2180      	movs	r1, #128	; 0x80
 80193f6:	6878      	ldr	r0, [r7, #4]
 80193f8:	f004 fe29 	bl	801e04e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	2201      	movs	r2, #1
 8019400:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	2240      	movs	r2, #64	; 0x40
 8019406:	621a      	str	r2, [r3, #32]

  return ret;
 8019408:	7bfb      	ldrb	r3, [r7, #15]
}
 801940a:	4618      	mov	r0, r3
 801940c:	3710      	adds	r7, #16
 801940e:	46bd      	mov	sp, r7
 8019410:	bd80      	pop	{r7, pc}

08019412 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8019412:	b480      	push	{r7}
 8019414:	b083      	sub	sp, #12
 8019416:	af00      	add	r7, sp, #0
 8019418:	6078      	str	r0, [r7, #4]
 801941a:	460b      	mov	r3, r1
 801941c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	78fa      	ldrb	r2, [r7, #3]
 8019422:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8019424:	2300      	movs	r3, #0
}
 8019426:	4618      	mov	r0, r3
 8019428:	370c      	adds	r7, #12
 801942a:	46bd      	mov	sp, r7
 801942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019430:	4770      	bx	lr

08019432 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8019432:	b480      	push	{r7}
 8019434:	b083      	sub	sp, #12
 8019436:	af00      	add	r7, sp, #0
 8019438:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019440:	b2da      	uxtb	r2, r3
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2204      	movs	r2, #4
 801944c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8019450:	2300      	movs	r3, #0
}
 8019452:	4618      	mov	r0, r3
 8019454:	370c      	adds	r7, #12
 8019456:	46bd      	mov	sp, r7
 8019458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945c:	4770      	bx	lr

0801945e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801945e:	b480      	push	{r7}
 8019460:	b083      	sub	sp, #12
 8019462:	af00      	add	r7, sp, #0
 8019464:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801946c:	b2db      	uxtb	r3, r3
 801946e:	2b04      	cmp	r3, #4
 8019470:	d106      	bne.n	8019480 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8019478:	b2da      	uxtb	r2, r3
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8019480:	2300      	movs	r3, #0
}
 8019482:	4618      	mov	r0, r3
 8019484:	370c      	adds	r7, #12
 8019486:	46bd      	mov	sp, r7
 8019488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948c:	4770      	bx	lr

0801948e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801948e:	b580      	push	{r7, lr}
 8019490:	b082      	sub	sp, #8
 8019492:	af00      	add	r7, sp, #0
 8019494:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801949c:	b2db      	uxtb	r3, r3
 801949e:	2b03      	cmp	r3, #3
 80194a0:	d110      	bne.n	80194c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d00b      	beq.n	80194c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80194b2:	69db      	ldr	r3, [r3, #28]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d005      	beq.n	80194c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80194be:	69db      	ldr	r3, [r3, #28]
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80194c4:	2300      	movs	r3, #0
}
 80194c6:	4618      	mov	r0, r3
 80194c8:	3708      	adds	r7, #8
 80194ca:	46bd      	mov	sp, r7
 80194cc:	bd80      	pop	{r7, pc}

080194ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80194ce:	b580      	push	{r7, lr}
 80194d0:	b082      	sub	sp, #8
 80194d2:	af00      	add	r7, sp, #0
 80194d4:	6078      	str	r0, [r7, #4]
 80194d6:	460b      	mov	r3, r1
 80194d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	32ae      	adds	r2, #174	; 0xae
 80194e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d101      	bne.n	80194f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80194ec:	2303      	movs	r3, #3
 80194ee:	e01c      	b.n	801952a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	2b03      	cmp	r3, #3
 80194fa:	d115      	bne.n	8019528 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	32ae      	adds	r2, #174	; 0xae
 8019506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801950a:	6a1b      	ldr	r3, [r3, #32]
 801950c:	2b00      	cmp	r3, #0
 801950e:	d00b      	beq.n	8019528 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	32ae      	adds	r2, #174	; 0xae
 801951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801951e:	6a1b      	ldr	r3, [r3, #32]
 8019520:	78fa      	ldrb	r2, [r7, #3]
 8019522:	4611      	mov	r1, r2
 8019524:	6878      	ldr	r0, [r7, #4]
 8019526:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8019528:	2300      	movs	r3, #0
}
 801952a:	4618      	mov	r0, r3
 801952c:	3708      	adds	r7, #8
 801952e:	46bd      	mov	sp, r7
 8019530:	bd80      	pop	{r7, pc}

08019532 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8019532:	b580      	push	{r7, lr}
 8019534:	b082      	sub	sp, #8
 8019536:	af00      	add	r7, sp, #0
 8019538:	6078      	str	r0, [r7, #4]
 801953a:	460b      	mov	r3, r1
 801953c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	32ae      	adds	r2, #174	; 0xae
 8019548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d101      	bne.n	8019554 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8019550:	2303      	movs	r3, #3
 8019552:	e01c      	b.n	801958e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801955a:	b2db      	uxtb	r3, r3
 801955c:	2b03      	cmp	r3, #3
 801955e:	d115      	bne.n	801958c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	32ae      	adds	r2, #174	; 0xae
 801956a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019570:	2b00      	cmp	r3, #0
 8019572:	d00b      	beq.n	801958c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	32ae      	adds	r2, #174	; 0xae
 801957e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019584:	78fa      	ldrb	r2, [r7, #3]
 8019586:	4611      	mov	r1, r2
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801958c:	2300      	movs	r3, #0
}
 801958e:	4618      	mov	r0, r3
 8019590:	3708      	adds	r7, #8
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}

08019596 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8019596:	b480      	push	{r7}
 8019598:	b083      	sub	sp, #12
 801959a:	af00      	add	r7, sp, #0
 801959c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801959e:	2300      	movs	r3, #0
}
 80195a0:	4618      	mov	r0, r3
 80195a2:	370c      	adds	r7, #12
 80195a4:	46bd      	mov	sp, r7
 80195a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195aa:	4770      	bx	lr

080195ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b084      	sub	sp, #16
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80195b4:	2300      	movs	r3, #0
 80195b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2201      	movs	r2, #1
 80195bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d00e      	beq.n	80195e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80195d0:	685b      	ldr	r3, [r3, #4]
 80195d2:	687a      	ldr	r2, [r7, #4]
 80195d4:	6852      	ldr	r2, [r2, #4]
 80195d6:	b2d2      	uxtb	r2, r2
 80195d8:	4611      	mov	r1, r2
 80195da:	6878      	ldr	r0, [r7, #4]
 80195dc:	4798      	blx	r3
 80195de:	4603      	mov	r3, r0
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d001      	beq.n	80195e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80195e4:	2303      	movs	r3, #3
 80195e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80195e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80195ea:	4618      	mov	r0, r3
 80195ec:	3710      	adds	r7, #16
 80195ee:	46bd      	mov	sp, r7
 80195f0:	bd80      	pop	{r7, pc}

080195f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80195f2:	b480      	push	{r7}
 80195f4:	b083      	sub	sp, #12
 80195f6:	af00      	add	r7, sp, #0
 80195f8:	6078      	str	r0, [r7, #4]
 80195fa:	460b      	mov	r3, r1
 80195fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80195fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8019600:	4618      	mov	r0, r3
 8019602:	370c      	adds	r7, #12
 8019604:	46bd      	mov	sp, r7
 8019606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801960a:	4770      	bx	lr

0801960c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801960c:	b480      	push	{r7}
 801960e:	b083      	sub	sp, #12
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
 8019614:	460b      	mov	r3, r1
 8019616:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8019618:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801961a:	4618      	mov	r0, r3
 801961c:	370c      	adds	r7, #12
 801961e:	46bd      	mov	sp, r7
 8019620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019624:	4770      	bx	lr

08019626 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8019626:	b580      	push	{r7, lr}
 8019628:	b086      	sub	sp, #24
 801962a:	af00      	add	r7, sp, #0
 801962c:	6078      	str	r0, [r7, #4]
 801962e:	460b      	mov	r3, r1
 8019630:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801963a:	2300      	movs	r3, #0
 801963c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	885b      	ldrh	r3, [r3, #2]
 8019642:	b29a      	uxth	r2, r3
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	781b      	ldrb	r3, [r3, #0]
 8019648:	b29b      	uxth	r3, r3
 801964a:	429a      	cmp	r2, r3
 801964c:	d920      	bls.n	8019690 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	781b      	ldrb	r3, [r3, #0]
 8019652:	b29b      	uxth	r3, r3
 8019654:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8019656:	e013      	b.n	8019680 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8019658:	f107 030a 	add.w	r3, r7, #10
 801965c:	4619      	mov	r1, r3
 801965e:	6978      	ldr	r0, [r7, #20]
 8019660:	f000 f81b 	bl	801969a <USBD_GetNextDesc>
 8019664:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8019666:	697b      	ldr	r3, [r7, #20]
 8019668:	785b      	ldrb	r3, [r3, #1]
 801966a:	2b05      	cmp	r3, #5
 801966c:	d108      	bne.n	8019680 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801966e:	697b      	ldr	r3, [r7, #20]
 8019670:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8019672:	693b      	ldr	r3, [r7, #16]
 8019674:	789b      	ldrb	r3, [r3, #2]
 8019676:	78fa      	ldrb	r2, [r7, #3]
 8019678:	429a      	cmp	r2, r3
 801967a:	d008      	beq.n	801968e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801967c:	2300      	movs	r3, #0
 801967e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	885b      	ldrh	r3, [r3, #2]
 8019684:	b29a      	uxth	r2, r3
 8019686:	897b      	ldrh	r3, [r7, #10]
 8019688:	429a      	cmp	r2, r3
 801968a:	d8e5      	bhi.n	8019658 <USBD_GetEpDesc+0x32>
 801968c:	e000      	b.n	8019690 <USBD_GetEpDesc+0x6a>
          break;
 801968e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8019690:	693b      	ldr	r3, [r7, #16]
}
 8019692:	4618      	mov	r0, r3
 8019694:	3718      	adds	r7, #24
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}

0801969a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801969a:	b480      	push	{r7}
 801969c:	b085      	sub	sp, #20
 801969e:	af00      	add	r7, sp, #0
 80196a0:	6078      	str	r0, [r7, #4]
 80196a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	881a      	ldrh	r2, [r3, #0]
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	b29b      	uxth	r3, r3
 80196b2:	4413      	add	r3, r2
 80196b4:	b29a      	uxth	r2, r3
 80196b6:	683b      	ldr	r3, [r7, #0]
 80196b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	781b      	ldrb	r3, [r3, #0]
 80196be:	461a      	mov	r2, r3
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	4413      	add	r3, r2
 80196c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80196c6:	68fb      	ldr	r3, [r7, #12]
}
 80196c8:	4618      	mov	r0, r3
 80196ca:	3714      	adds	r7, #20
 80196cc:	46bd      	mov	sp, r7
 80196ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d2:	4770      	bx	lr

080196d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80196d4:	b480      	push	{r7}
 80196d6:	b087      	sub	sp, #28
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80196e0:	697b      	ldr	r3, [r7, #20]
 80196e2:	781b      	ldrb	r3, [r3, #0]
 80196e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80196e6:	697b      	ldr	r3, [r7, #20]
 80196e8:	3301      	adds	r3, #1
 80196ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	781b      	ldrb	r3, [r3, #0]
 80196f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80196f2:	8a3b      	ldrh	r3, [r7, #16]
 80196f4:	021b      	lsls	r3, r3, #8
 80196f6:	b21a      	sxth	r2, r3
 80196f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80196fc:	4313      	orrs	r3, r2
 80196fe:	b21b      	sxth	r3, r3
 8019700:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8019702:	89fb      	ldrh	r3, [r7, #14]
}
 8019704:	4618      	mov	r0, r3
 8019706:	371c      	adds	r7, #28
 8019708:	46bd      	mov	sp, r7
 801970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801970e:	4770      	bx	lr

08019710 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b084      	sub	sp, #16
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
 8019718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801971a:	2300      	movs	r3, #0
 801971c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019726:	2b40      	cmp	r3, #64	; 0x40
 8019728:	d005      	beq.n	8019736 <USBD_StdDevReq+0x26>
 801972a:	2b40      	cmp	r3, #64	; 0x40
 801972c:	d857      	bhi.n	80197de <USBD_StdDevReq+0xce>
 801972e:	2b00      	cmp	r3, #0
 8019730:	d00f      	beq.n	8019752 <USBD_StdDevReq+0x42>
 8019732:	2b20      	cmp	r3, #32
 8019734:	d153      	bne.n	80197de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	32ae      	adds	r2, #174	; 0xae
 8019740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019744:	689b      	ldr	r3, [r3, #8]
 8019746:	6839      	ldr	r1, [r7, #0]
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	4798      	blx	r3
 801974c:	4603      	mov	r3, r0
 801974e:	73fb      	strb	r3, [r7, #15]
      break;
 8019750:	e04a      	b.n	80197e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019752:	683b      	ldr	r3, [r7, #0]
 8019754:	785b      	ldrb	r3, [r3, #1]
 8019756:	2b09      	cmp	r3, #9
 8019758:	d83b      	bhi.n	80197d2 <USBD_StdDevReq+0xc2>
 801975a:	a201      	add	r2, pc, #4	; (adr r2, 8019760 <USBD_StdDevReq+0x50>)
 801975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019760:	080197b5 	.word	0x080197b5
 8019764:	080197c9 	.word	0x080197c9
 8019768:	080197d3 	.word	0x080197d3
 801976c:	080197bf 	.word	0x080197bf
 8019770:	080197d3 	.word	0x080197d3
 8019774:	08019793 	.word	0x08019793
 8019778:	08019789 	.word	0x08019789
 801977c:	080197d3 	.word	0x080197d3
 8019780:	080197ab 	.word	0x080197ab
 8019784:	0801979d 	.word	0x0801979d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8019788:	6839      	ldr	r1, [r7, #0]
 801978a:	6878      	ldr	r0, [r7, #4]
 801978c:	f000 fa3c 	bl	8019c08 <USBD_GetDescriptor>
          break;
 8019790:	e024      	b.n	80197dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8019792:	6839      	ldr	r1, [r7, #0]
 8019794:	6878      	ldr	r0, [r7, #4]
 8019796:	f000 fba1 	bl	8019edc <USBD_SetAddress>
          break;
 801979a:	e01f      	b.n	80197dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801979c:	6839      	ldr	r1, [r7, #0]
 801979e:	6878      	ldr	r0, [r7, #4]
 80197a0:	f000 fbe0 	bl	8019f64 <USBD_SetConfig>
 80197a4:	4603      	mov	r3, r0
 80197a6:	73fb      	strb	r3, [r7, #15]
          break;
 80197a8:	e018      	b.n	80197dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80197aa:	6839      	ldr	r1, [r7, #0]
 80197ac:	6878      	ldr	r0, [r7, #4]
 80197ae:	f000 fc83 	bl	801a0b8 <USBD_GetConfig>
          break;
 80197b2:	e013      	b.n	80197dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80197b4:	6839      	ldr	r1, [r7, #0]
 80197b6:	6878      	ldr	r0, [r7, #4]
 80197b8:	f000 fcb4 	bl	801a124 <USBD_GetStatus>
          break;
 80197bc:	e00e      	b.n	80197dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80197be:	6839      	ldr	r1, [r7, #0]
 80197c0:	6878      	ldr	r0, [r7, #4]
 80197c2:	f000 fce3 	bl	801a18c <USBD_SetFeature>
          break;
 80197c6:	e009      	b.n	80197dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80197c8:	6839      	ldr	r1, [r7, #0]
 80197ca:	6878      	ldr	r0, [r7, #4]
 80197cc:	f000 fd07 	bl	801a1de <USBD_ClrFeature>
          break;
 80197d0:	e004      	b.n	80197dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80197d2:	6839      	ldr	r1, [r7, #0]
 80197d4:	6878      	ldr	r0, [r7, #4]
 80197d6:	f000 fd5e 	bl	801a296 <USBD_CtlError>
          break;
 80197da:	bf00      	nop
      }
      break;
 80197dc:	e004      	b.n	80197e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80197de:	6839      	ldr	r1, [r7, #0]
 80197e0:	6878      	ldr	r0, [r7, #4]
 80197e2:	f000 fd58 	bl	801a296 <USBD_CtlError>
      break;
 80197e6:	bf00      	nop
  }

  return ret;
 80197e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80197ea:	4618      	mov	r0, r3
 80197ec:	3710      	adds	r7, #16
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}
 80197f2:	bf00      	nop

080197f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b084      	sub	sp, #16
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80197fe:	2300      	movs	r3, #0
 8019800:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801980a:	2b40      	cmp	r3, #64	; 0x40
 801980c:	d005      	beq.n	801981a <USBD_StdItfReq+0x26>
 801980e:	2b40      	cmp	r3, #64	; 0x40
 8019810:	d852      	bhi.n	80198b8 <USBD_StdItfReq+0xc4>
 8019812:	2b00      	cmp	r3, #0
 8019814:	d001      	beq.n	801981a <USBD_StdItfReq+0x26>
 8019816:	2b20      	cmp	r3, #32
 8019818:	d14e      	bne.n	80198b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019820:	b2db      	uxtb	r3, r3
 8019822:	3b01      	subs	r3, #1
 8019824:	2b02      	cmp	r3, #2
 8019826:	d840      	bhi.n	80198aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	889b      	ldrh	r3, [r3, #4]
 801982c:	b2db      	uxtb	r3, r3
 801982e:	2b01      	cmp	r3, #1
 8019830:	d836      	bhi.n	80198a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	889b      	ldrh	r3, [r3, #4]
 8019836:	b2db      	uxtb	r3, r3
 8019838:	4619      	mov	r1, r3
 801983a:	6878      	ldr	r0, [r7, #4]
 801983c:	f7ff fed9 	bl	80195f2 <USBD_CoreFindIF>
 8019840:	4603      	mov	r3, r0
 8019842:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019844:	7bbb      	ldrb	r3, [r7, #14]
 8019846:	2bff      	cmp	r3, #255	; 0xff
 8019848:	d01d      	beq.n	8019886 <USBD_StdItfReq+0x92>
 801984a:	7bbb      	ldrb	r3, [r7, #14]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d11a      	bne.n	8019886 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8019850:	7bba      	ldrb	r2, [r7, #14]
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	32ae      	adds	r2, #174	; 0xae
 8019856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801985a:	689b      	ldr	r3, [r3, #8]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d00f      	beq.n	8019880 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8019860:	7bba      	ldrb	r2, [r7, #14]
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8019868:	7bba      	ldrb	r2, [r7, #14]
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	32ae      	adds	r2, #174	; 0xae
 801986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019872:	689b      	ldr	r3, [r3, #8]
 8019874:	6839      	ldr	r1, [r7, #0]
 8019876:	6878      	ldr	r0, [r7, #4]
 8019878:	4798      	blx	r3
 801987a:	4603      	mov	r3, r0
 801987c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801987e:	e004      	b.n	801988a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8019880:	2303      	movs	r3, #3
 8019882:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8019884:	e001      	b.n	801988a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8019886:	2303      	movs	r3, #3
 8019888:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	88db      	ldrh	r3, [r3, #6]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d110      	bne.n	80198b4 <USBD_StdItfReq+0xc0>
 8019892:	7bfb      	ldrb	r3, [r7, #15]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d10d      	bne.n	80198b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f000 fdc7 	bl	801a42c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801989e:	e009      	b.n	80198b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80198a0:	6839      	ldr	r1, [r7, #0]
 80198a2:	6878      	ldr	r0, [r7, #4]
 80198a4:	f000 fcf7 	bl	801a296 <USBD_CtlError>
          break;
 80198a8:	e004      	b.n	80198b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80198aa:	6839      	ldr	r1, [r7, #0]
 80198ac:	6878      	ldr	r0, [r7, #4]
 80198ae:	f000 fcf2 	bl	801a296 <USBD_CtlError>
          break;
 80198b2:	e000      	b.n	80198b6 <USBD_StdItfReq+0xc2>
          break;
 80198b4:	bf00      	nop
      }
      break;
 80198b6:	e004      	b.n	80198c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80198b8:	6839      	ldr	r1, [r7, #0]
 80198ba:	6878      	ldr	r0, [r7, #4]
 80198bc:	f000 fceb 	bl	801a296 <USBD_CtlError>
      break;
 80198c0:	bf00      	nop
  }

  return ret;
 80198c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3710      	adds	r7, #16
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}

080198cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b084      	sub	sp, #16
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
 80198d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80198d6:	2300      	movs	r3, #0
 80198d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	889b      	ldrh	r3, [r3, #4]
 80198de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	781b      	ldrb	r3, [r3, #0]
 80198e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80198e8:	2b40      	cmp	r3, #64	; 0x40
 80198ea:	d007      	beq.n	80198fc <USBD_StdEPReq+0x30>
 80198ec:	2b40      	cmp	r3, #64	; 0x40
 80198ee:	f200 817f 	bhi.w	8019bf0 <USBD_StdEPReq+0x324>
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d02a      	beq.n	801994c <USBD_StdEPReq+0x80>
 80198f6:	2b20      	cmp	r3, #32
 80198f8:	f040 817a 	bne.w	8019bf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80198fc:	7bbb      	ldrb	r3, [r7, #14]
 80198fe:	4619      	mov	r1, r3
 8019900:	6878      	ldr	r0, [r7, #4]
 8019902:	f7ff fe83 	bl	801960c <USBD_CoreFindEP>
 8019906:	4603      	mov	r3, r0
 8019908:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801990a:	7b7b      	ldrb	r3, [r7, #13]
 801990c:	2bff      	cmp	r3, #255	; 0xff
 801990e:	f000 8174 	beq.w	8019bfa <USBD_StdEPReq+0x32e>
 8019912:	7b7b      	ldrb	r3, [r7, #13]
 8019914:	2b00      	cmp	r3, #0
 8019916:	f040 8170 	bne.w	8019bfa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801991a:	7b7a      	ldrb	r2, [r7, #13]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8019922:	7b7a      	ldrb	r2, [r7, #13]
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	32ae      	adds	r2, #174	; 0xae
 8019928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801992c:	689b      	ldr	r3, [r3, #8]
 801992e:	2b00      	cmp	r3, #0
 8019930:	f000 8163 	beq.w	8019bfa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8019934:	7b7a      	ldrb	r2, [r7, #13]
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	32ae      	adds	r2, #174	; 0xae
 801993a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801993e:	689b      	ldr	r3, [r3, #8]
 8019940:	6839      	ldr	r1, [r7, #0]
 8019942:	6878      	ldr	r0, [r7, #4]
 8019944:	4798      	blx	r3
 8019946:	4603      	mov	r3, r0
 8019948:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801994a:	e156      	b.n	8019bfa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801994c:	683b      	ldr	r3, [r7, #0]
 801994e:	785b      	ldrb	r3, [r3, #1]
 8019950:	2b03      	cmp	r3, #3
 8019952:	d008      	beq.n	8019966 <USBD_StdEPReq+0x9a>
 8019954:	2b03      	cmp	r3, #3
 8019956:	f300 8145 	bgt.w	8019be4 <USBD_StdEPReq+0x318>
 801995a:	2b00      	cmp	r3, #0
 801995c:	f000 809b 	beq.w	8019a96 <USBD_StdEPReq+0x1ca>
 8019960:	2b01      	cmp	r3, #1
 8019962:	d03c      	beq.n	80199de <USBD_StdEPReq+0x112>
 8019964:	e13e      	b.n	8019be4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801996c:	b2db      	uxtb	r3, r3
 801996e:	2b02      	cmp	r3, #2
 8019970:	d002      	beq.n	8019978 <USBD_StdEPReq+0xac>
 8019972:	2b03      	cmp	r3, #3
 8019974:	d016      	beq.n	80199a4 <USBD_StdEPReq+0xd8>
 8019976:	e02c      	b.n	80199d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019978:	7bbb      	ldrb	r3, [r7, #14]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d00d      	beq.n	801999a <USBD_StdEPReq+0xce>
 801997e:	7bbb      	ldrb	r3, [r7, #14]
 8019980:	2b80      	cmp	r3, #128	; 0x80
 8019982:	d00a      	beq.n	801999a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019984:	7bbb      	ldrb	r3, [r7, #14]
 8019986:	4619      	mov	r1, r3
 8019988:	6878      	ldr	r0, [r7, #4]
 801998a:	f004 fba5 	bl	801e0d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801998e:	2180      	movs	r1, #128	; 0x80
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f004 fba1 	bl	801e0d8 <USBD_LL_StallEP>
 8019996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019998:	e020      	b.n	80199dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801999a:	6839      	ldr	r1, [r7, #0]
 801999c:	6878      	ldr	r0, [r7, #4]
 801999e:	f000 fc7a 	bl	801a296 <USBD_CtlError>
              break;
 80199a2:	e01b      	b.n	80199dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80199a4:	683b      	ldr	r3, [r7, #0]
 80199a6:	885b      	ldrh	r3, [r3, #2]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d10e      	bne.n	80199ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80199ac:	7bbb      	ldrb	r3, [r7, #14]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d00b      	beq.n	80199ca <USBD_StdEPReq+0xfe>
 80199b2:	7bbb      	ldrb	r3, [r7, #14]
 80199b4:	2b80      	cmp	r3, #128	; 0x80
 80199b6:	d008      	beq.n	80199ca <USBD_StdEPReq+0xfe>
 80199b8:	683b      	ldr	r3, [r7, #0]
 80199ba:	88db      	ldrh	r3, [r3, #6]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d104      	bne.n	80199ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80199c0:	7bbb      	ldrb	r3, [r7, #14]
 80199c2:	4619      	mov	r1, r3
 80199c4:	6878      	ldr	r0, [r7, #4]
 80199c6:	f004 fb87 	bl	801e0d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80199ca:	6878      	ldr	r0, [r7, #4]
 80199cc:	f000 fd2e 	bl	801a42c <USBD_CtlSendStatus>

              break;
 80199d0:	e004      	b.n	80199dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80199d2:	6839      	ldr	r1, [r7, #0]
 80199d4:	6878      	ldr	r0, [r7, #4]
 80199d6:	f000 fc5e 	bl	801a296 <USBD_CtlError>
              break;
 80199da:	bf00      	nop
          }
          break;
 80199dc:	e107      	b.n	8019bee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80199e4:	b2db      	uxtb	r3, r3
 80199e6:	2b02      	cmp	r3, #2
 80199e8:	d002      	beq.n	80199f0 <USBD_StdEPReq+0x124>
 80199ea:	2b03      	cmp	r3, #3
 80199ec:	d016      	beq.n	8019a1c <USBD_StdEPReq+0x150>
 80199ee:	e04b      	b.n	8019a88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80199f0:	7bbb      	ldrb	r3, [r7, #14]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d00d      	beq.n	8019a12 <USBD_StdEPReq+0x146>
 80199f6:	7bbb      	ldrb	r3, [r7, #14]
 80199f8:	2b80      	cmp	r3, #128	; 0x80
 80199fa:	d00a      	beq.n	8019a12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80199fc:	7bbb      	ldrb	r3, [r7, #14]
 80199fe:	4619      	mov	r1, r3
 8019a00:	6878      	ldr	r0, [r7, #4]
 8019a02:	f004 fb69 	bl	801e0d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019a06:	2180      	movs	r1, #128	; 0x80
 8019a08:	6878      	ldr	r0, [r7, #4]
 8019a0a:	f004 fb65 	bl	801e0d8 <USBD_LL_StallEP>
 8019a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019a10:	e040      	b.n	8019a94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8019a12:	6839      	ldr	r1, [r7, #0]
 8019a14:	6878      	ldr	r0, [r7, #4]
 8019a16:	f000 fc3e 	bl	801a296 <USBD_CtlError>
              break;
 8019a1a:	e03b      	b.n	8019a94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019a1c:	683b      	ldr	r3, [r7, #0]
 8019a1e:	885b      	ldrh	r3, [r3, #2]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d136      	bne.n	8019a92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8019a24:	7bbb      	ldrb	r3, [r7, #14]
 8019a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d004      	beq.n	8019a38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8019a2e:	7bbb      	ldrb	r3, [r7, #14]
 8019a30:	4619      	mov	r1, r3
 8019a32:	6878      	ldr	r0, [r7, #4]
 8019a34:	f004 fb6f 	bl	801e116 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8019a38:	6878      	ldr	r0, [r7, #4]
 8019a3a:	f000 fcf7 	bl	801a42c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8019a3e:	7bbb      	ldrb	r3, [r7, #14]
 8019a40:	4619      	mov	r1, r3
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	f7ff fde2 	bl	801960c <USBD_CoreFindEP>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019a4c:	7b7b      	ldrb	r3, [r7, #13]
 8019a4e:	2bff      	cmp	r3, #255	; 0xff
 8019a50:	d01f      	beq.n	8019a92 <USBD_StdEPReq+0x1c6>
 8019a52:	7b7b      	ldrb	r3, [r7, #13]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d11c      	bne.n	8019a92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8019a58:	7b7a      	ldrb	r2, [r7, #13]
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8019a60:	7b7a      	ldrb	r2, [r7, #13]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	32ae      	adds	r2, #174	; 0xae
 8019a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a6a:	689b      	ldr	r3, [r3, #8]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d010      	beq.n	8019a92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8019a70:	7b7a      	ldrb	r2, [r7, #13]
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	32ae      	adds	r2, #174	; 0xae
 8019a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a7a:	689b      	ldr	r3, [r3, #8]
 8019a7c:	6839      	ldr	r1, [r7, #0]
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	4798      	blx	r3
 8019a82:	4603      	mov	r3, r0
 8019a84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8019a86:	e004      	b.n	8019a92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8019a88:	6839      	ldr	r1, [r7, #0]
 8019a8a:	6878      	ldr	r0, [r7, #4]
 8019a8c:	f000 fc03 	bl	801a296 <USBD_CtlError>
              break;
 8019a90:	e000      	b.n	8019a94 <USBD_StdEPReq+0x1c8>
              break;
 8019a92:	bf00      	nop
          }
          break;
 8019a94:	e0ab      	b.n	8019bee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019a9c:	b2db      	uxtb	r3, r3
 8019a9e:	2b02      	cmp	r3, #2
 8019aa0:	d002      	beq.n	8019aa8 <USBD_StdEPReq+0x1dc>
 8019aa2:	2b03      	cmp	r3, #3
 8019aa4:	d032      	beq.n	8019b0c <USBD_StdEPReq+0x240>
 8019aa6:	e097      	b.n	8019bd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019aa8:	7bbb      	ldrb	r3, [r7, #14]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d007      	beq.n	8019abe <USBD_StdEPReq+0x1f2>
 8019aae:	7bbb      	ldrb	r3, [r7, #14]
 8019ab0:	2b80      	cmp	r3, #128	; 0x80
 8019ab2:	d004      	beq.n	8019abe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8019ab4:	6839      	ldr	r1, [r7, #0]
 8019ab6:	6878      	ldr	r0, [r7, #4]
 8019ab8:	f000 fbed 	bl	801a296 <USBD_CtlError>
                break;
 8019abc:	e091      	b.n	8019be2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	da0b      	bge.n	8019ade <USBD_StdEPReq+0x212>
 8019ac6:	7bbb      	ldrb	r3, [r7, #14]
 8019ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019acc:	4613      	mov	r3, r2
 8019ace:	009b      	lsls	r3, r3, #2
 8019ad0:	4413      	add	r3, r2
 8019ad2:	009b      	lsls	r3, r3, #2
 8019ad4:	3310      	adds	r3, #16
 8019ad6:	687a      	ldr	r2, [r7, #4]
 8019ad8:	4413      	add	r3, r2
 8019ada:	3304      	adds	r3, #4
 8019adc:	e00b      	b.n	8019af6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019ade:	7bbb      	ldrb	r3, [r7, #14]
 8019ae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019ae4:	4613      	mov	r3, r2
 8019ae6:	009b      	lsls	r3, r3, #2
 8019ae8:	4413      	add	r3, r2
 8019aea:	009b      	lsls	r3, r3, #2
 8019aec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8019af0:	687a      	ldr	r2, [r7, #4]
 8019af2:	4413      	add	r3, r2
 8019af4:	3304      	adds	r3, #4
 8019af6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	2200      	movs	r2, #0
 8019afc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	2202      	movs	r2, #2
 8019b02:	4619      	mov	r1, r3
 8019b04:	6878      	ldr	r0, [r7, #4]
 8019b06:	f000 fc37 	bl	801a378 <USBD_CtlSendData>
              break;
 8019b0a:	e06a      	b.n	8019be2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8019b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	da11      	bge.n	8019b38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019b14:	7bbb      	ldrb	r3, [r7, #14]
 8019b16:	f003 020f 	and.w	r2, r3, #15
 8019b1a:	6879      	ldr	r1, [r7, #4]
 8019b1c:	4613      	mov	r3, r2
 8019b1e:	009b      	lsls	r3, r3, #2
 8019b20:	4413      	add	r3, r2
 8019b22:	009b      	lsls	r3, r3, #2
 8019b24:	440b      	add	r3, r1
 8019b26:	3324      	adds	r3, #36	; 0x24
 8019b28:	881b      	ldrh	r3, [r3, #0]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d117      	bne.n	8019b5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8019b2e:	6839      	ldr	r1, [r7, #0]
 8019b30:	6878      	ldr	r0, [r7, #4]
 8019b32:	f000 fbb0 	bl	801a296 <USBD_CtlError>
                  break;
 8019b36:	e054      	b.n	8019be2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8019b38:	7bbb      	ldrb	r3, [r7, #14]
 8019b3a:	f003 020f 	and.w	r2, r3, #15
 8019b3e:	6879      	ldr	r1, [r7, #4]
 8019b40:	4613      	mov	r3, r2
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	4413      	add	r3, r2
 8019b46:	009b      	lsls	r3, r3, #2
 8019b48:	440b      	add	r3, r1
 8019b4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8019b4e:	881b      	ldrh	r3, [r3, #0]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d104      	bne.n	8019b5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8019b54:	6839      	ldr	r1, [r7, #0]
 8019b56:	6878      	ldr	r0, [r7, #4]
 8019b58:	f000 fb9d 	bl	801a296 <USBD_CtlError>
                  break;
 8019b5c:	e041      	b.n	8019be2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	da0b      	bge.n	8019b7e <USBD_StdEPReq+0x2b2>
 8019b66:	7bbb      	ldrb	r3, [r7, #14]
 8019b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019b6c:	4613      	mov	r3, r2
 8019b6e:	009b      	lsls	r3, r3, #2
 8019b70:	4413      	add	r3, r2
 8019b72:	009b      	lsls	r3, r3, #2
 8019b74:	3310      	adds	r3, #16
 8019b76:	687a      	ldr	r2, [r7, #4]
 8019b78:	4413      	add	r3, r2
 8019b7a:	3304      	adds	r3, #4
 8019b7c:	e00b      	b.n	8019b96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019b7e:	7bbb      	ldrb	r3, [r7, #14]
 8019b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019b84:	4613      	mov	r3, r2
 8019b86:	009b      	lsls	r3, r3, #2
 8019b88:	4413      	add	r3, r2
 8019b8a:	009b      	lsls	r3, r3, #2
 8019b8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8019b90:	687a      	ldr	r2, [r7, #4]
 8019b92:	4413      	add	r3, r2
 8019b94:	3304      	adds	r3, #4
 8019b96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8019b98:	7bbb      	ldrb	r3, [r7, #14]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d002      	beq.n	8019ba4 <USBD_StdEPReq+0x2d8>
 8019b9e:	7bbb      	ldrb	r3, [r7, #14]
 8019ba0:	2b80      	cmp	r3, #128	; 0x80
 8019ba2:	d103      	bne.n	8019bac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8019ba4:	68bb      	ldr	r3, [r7, #8]
 8019ba6:	2200      	movs	r2, #0
 8019ba8:	601a      	str	r2, [r3, #0]
 8019baa:	e00e      	b.n	8019bca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8019bac:	7bbb      	ldrb	r3, [r7, #14]
 8019bae:	4619      	mov	r1, r3
 8019bb0:	6878      	ldr	r0, [r7, #4]
 8019bb2:	f004 facf 	bl	801e154 <USBD_LL_IsStallEP>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d003      	beq.n	8019bc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8019bbc:	68bb      	ldr	r3, [r7, #8]
 8019bbe:	2201      	movs	r2, #1
 8019bc0:	601a      	str	r2, [r3, #0]
 8019bc2:	e002      	b.n	8019bca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8019bc4:	68bb      	ldr	r3, [r7, #8]
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019bca:	68bb      	ldr	r3, [r7, #8]
 8019bcc:	2202      	movs	r2, #2
 8019bce:	4619      	mov	r1, r3
 8019bd0:	6878      	ldr	r0, [r7, #4]
 8019bd2:	f000 fbd1 	bl	801a378 <USBD_CtlSendData>
              break;
 8019bd6:	e004      	b.n	8019be2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8019bd8:	6839      	ldr	r1, [r7, #0]
 8019bda:	6878      	ldr	r0, [r7, #4]
 8019bdc:	f000 fb5b 	bl	801a296 <USBD_CtlError>
              break;
 8019be0:	bf00      	nop
          }
          break;
 8019be2:	e004      	b.n	8019bee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8019be4:	6839      	ldr	r1, [r7, #0]
 8019be6:	6878      	ldr	r0, [r7, #4]
 8019be8:	f000 fb55 	bl	801a296 <USBD_CtlError>
          break;
 8019bec:	bf00      	nop
      }
      break;
 8019bee:	e005      	b.n	8019bfc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8019bf0:	6839      	ldr	r1, [r7, #0]
 8019bf2:	6878      	ldr	r0, [r7, #4]
 8019bf4:	f000 fb4f 	bl	801a296 <USBD_CtlError>
      break;
 8019bf8:	e000      	b.n	8019bfc <USBD_StdEPReq+0x330>
      break;
 8019bfa:	bf00      	nop
  }

  return ret;
 8019bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bfe:	4618      	mov	r0, r3
 8019c00:	3710      	adds	r7, #16
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}
	...

08019c08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b084      	sub	sp, #16
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	6078      	str	r0, [r7, #4]
 8019c10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019c12:	2300      	movs	r3, #0
 8019c14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8019c16:	2300      	movs	r3, #0
 8019c18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	885b      	ldrh	r3, [r3, #2]
 8019c22:	0a1b      	lsrs	r3, r3, #8
 8019c24:	b29b      	uxth	r3, r3
 8019c26:	3b01      	subs	r3, #1
 8019c28:	2b06      	cmp	r3, #6
 8019c2a:	f200 8128 	bhi.w	8019e7e <USBD_GetDescriptor+0x276>
 8019c2e:	a201      	add	r2, pc, #4	; (adr r2, 8019c34 <USBD_GetDescriptor+0x2c>)
 8019c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c34:	08019c51 	.word	0x08019c51
 8019c38:	08019c69 	.word	0x08019c69
 8019c3c:	08019ca9 	.word	0x08019ca9
 8019c40:	08019e7f 	.word	0x08019e7f
 8019c44:	08019e7f 	.word	0x08019e7f
 8019c48:	08019e1f 	.word	0x08019e1f
 8019c4c:	08019e4b 	.word	0x08019e4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	687a      	ldr	r2, [r7, #4]
 8019c5a:	7c12      	ldrb	r2, [r2, #16]
 8019c5c:	f107 0108 	add.w	r1, r7, #8
 8019c60:	4610      	mov	r0, r2
 8019c62:	4798      	blx	r3
 8019c64:	60f8      	str	r0, [r7, #12]
      break;
 8019c66:	e112      	b.n	8019e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	7c1b      	ldrb	r3, [r3, #16]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d10d      	bne.n	8019c8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c78:	f107 0208 	add.w	r2, r7, #8
 8019c7c:	4610      	mov	r0, r2
 8019c7e:	4798      	blx	r3
 8019c80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	3301      	adds	r3, #1
 8019c86:	2202      	movs	r2, #2
 8019c88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8019c8a:	e100      	b.n	8019e8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c94:	f107 0208 	add.w	r2, r7, #8
 8019c98:	4610      	mov	r0, r2
 8019c9a:	4798      	blx	r3
 8019c9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	3301      	adds	r3, #1
 8019ca2:	2202      	movs	r2, #2
 8019ca4:	701a      	strb	r2, [r3, #0]
      break;
 8019ca6:	e0f2      	b.n	8019e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	885b      	ldrh	r3, [r3, #2]
 8019cac:	b2db      	uxtb	r3, r3
 8019cae:	2b05      	cmp	r3, #5
 8019cb0:	f200 80ac 	bhi.w	8019e0c <USBD_GetDescriptor+0x204>
 8019cb4:	a201      	add	r2, pc, #4	; (adr r2, 8019cbc <USBD_GetDescriptor+0xb4>)
 8019cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cba:	bf00      	nop
 8019cbc:	08019cd5 	.word	0x08019cd5
 8019cc0:	08019d09 	.word	0x08019d09
 8019cc4:	08019d3d 	.word	0x08019d3d
 8019cc8:	08019d71 	.word	0x08019d71
 8019ccc:	08019da5 	.word	0x08019da5
 8019cd0:	08019dd9 	.word	0x08019dd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019cda:	685b      	ldr	r3, [r3, #4]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d00b      	beq.n	8019cf8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019ce6:	685b      	ldr	r3, [r3, #4]
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	7c12      	ldrb	r2, [r2, #16]
 8019cec:	f107 0108 	add.w	r1, r7, #8
 8019cf0:	4610      	mov	r0, r2
 8019cf2:	4798      	blx	r3
 8019cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019cf6:	e091      	b.n	8019e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019cf8:	6839      	ldr	r1, [r7, #0]
 8019cfa:	6878      	ldr	r0, [r7, #4]
 8019cfc:	f000 facb 	bl	801a296 <USBD_CtlError>
            err++;
 8019d00:	7afb      	ldrb	r3, [r7, #11]
 8019d02:	3301      	adds	r3, #1
 8019d04:	72fb      	strb	r3, [r7, #11]
          break;
 8019d06:	e089      	b.n	8019e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d0e:	689b      	ldr	r3, [r3, #8]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d00b      	beq.n	8019d2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d1a:	689b      	ldr	r3, [r3, #8]
 8019d1c:	687a      	ldr	r2, [r7, #4]
 8019d1e:	7c12      	ldrb	r2, [r2, #16]
 8019d20:	f107 0108 	add.w	r1, r7, #8
 8019d24:	4610      	mov	r0, r2
 8019d26:	4798      	blx	r3
 8019d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019d2a:	e077      	b.n	8019e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019d2c:	6839      	ldr	r1, [r7, #0]
 8019d2e:	6878      	ldr	r0, [r7, #4]
 8019d30:	f000 fab1 	bl	801a296 <USBD_CtlError>
            err++;
 8019d34:	7afb      	ldrb	r3, [r7, #11]
 8019d36:	3301      	adds	r3, #1
 8019d38:	72fb      	strb	r3, [r7, #11]
          break;
 8019d3a:	e06f      	b.n	8019e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d42:	68db      	ldr	r3, [r3, #12]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d00b      	beq.n	8019d60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d4e:	68db      	ldr	r3, [r3, #12]
 8019d50:	687a      	ldr	r2, [r7, #4]
 8019d52:	7c12      	ldrb	r2, [r2, #16]
 8019d54:	f107 0108 	add.w	r1, r7, #8
 8019d58:	4610      	mov	r0, r2
 8019d5a:	4798      	blx	r3
 8019d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019d5e:	e05d      	b.n	8019e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019d60:	6839      	ldr	r1, [r7, #0]
 8019d62:	6878      	ldr	r0, [r7, #4]
 8019d64:	f000 fa97 	bl	801a296 <USBD_CtlError>
            err++;
 8019d68:	7afb      	ldrb	r3, [r7, #11]
 8019d6a:	3301      	adds	r3, #1
 8019d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8019d6e:	e055      	b.n	8019e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d76:	691b      	ldr	r3, [r3, #16]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d00b      	beq.n	8019d94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d82:	691b      	ldr	r3, [r3, #16]
 8019d84:	687a      	ldr	r2, [r7, #4]
 8019d86:	7c12      	ldrb	r2, [r2, #16]
 8019d88:	f107 0108 	add.w	r1, r7, #8
 8019d8c:	4610      	mov	r0, r2
 8019d8e:	4798      	blx	r3
 8019d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019d92:	e043      	b.n	8019e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019d94:	6839      	ldr	r1, [r7, #0]
 8019d96:	6878      	ldr	r0, [r7, #4]
 8019d98:	f000 fa7d 	bl	801a296 <USBD_CtlError>
            err++;
 8019d9c:	7afb      	ldrb	r3, [r7, #11]
 8019d9e:	3301      	adds	r3, #1
 8019da0:	72fb      	strb	r3, [r7, #11]
          break;
 8019da2:	e03b      	b.n	8019e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019daa:	695b      	ldr	r3, [r3, #20]
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d00b      	beq.n	8019dc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019db6:	695b      	ldr	r3, [r3, #20]
 8019db8:	687a      	ldr	r2, [r7, #4]
 8019dba:	7c12      	ldrb	r2, [r2, #16]
 8019dbc:	f107 0108 	add.w	r1, r7, #8
 8019dc0:	4610      	mov	r0, r2
 8019dc2:	4798      	blx	r3
 8019dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019dc6:	e029      	b.n	8019e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019dc8:	6839      	ldr	r1, [r7, #0]
 8019dca:	6878      	ldr	r0, [r7, #4]
 8019dcc:	f000 fa63 	bl	801a296 <USBD_CtlError>
            err++;
 8019dd0:	7afb      	ldrb	r3, [r7, #11]
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8019dd6:	e021      	b.n	8019e1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019dde:	699b      	ldr	r3, [r3, #24]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d00b      	beq.n	8019dfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019dea:	699b      	ldr	r3, [r3, #24]
 8019dec:	687a      	ldr	r2, [r7, #4]
 8019dee:	7c12      	ldrb	r2, [r2, #16]
 8019df0:	f107 0108 	add.w	r1, r7, #8
 8019df4:	4610      	mov	r0, r2
 8019df6:	4798      	blx	r3
 8019df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019dfa:	e00f      	b.n	8019e1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019dfc:	6839      	ldr	r1, [r7, #0]
 8019dfe:	6878      	ldr	r0, [r7, #4]
 8019e00:	f000 fa49 	bl	801a296 <USBD_CtlError>
            err++;
 8019e04:	7afb      	ldrb	r3, [r7, #11]
 8019e06:	3301      	adds	r3, #1
 8019e08:	72fb      	strb	r3, [r7, #11]
          break;
 8019e0a:	e007      	b.n	8019e1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8019e0c:	6839      	ldr	r1, [r7, #0]
 8019e0e:	6878      	ldr	r0, [r7, #4]
 8019e10:	f000 fa41 	bl	801a296 <USBD_CtlError>
          err++;
 8019e14:	7afb      	ldrb	r3, [r7, #11]
 8019e16:	3301      	adds	r3, #1
 8019e18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8019e1a:	bf00      	nop
      }
      break;
 8019e1c:	e037      	b.n	8019e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	7c1b      	ldrb	r3, [r3, #16]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d109      	bne.n	8019e3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e2e:	f107 0208 	add.w	r2, r7, #8
 8019e32:	4610      	mov	r0, r2
 8019e34:	4798      	blx	r3
 8019e36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019e38:	e029      	b.n	8019e8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8019e3a:	6839      	ldr	r1, [r7, #0]
 8019e3c:	6878      	ldr	r0, [r7, #4]
 8019e3e:	f000 fa2a 	bl	801a296 <USBD_CtlError>
        err++;
 8019e42:	7afb      	ldrb	r3, [r7, #11]
 8019e44:	3301      	adds	r3, #1
 8019e46:	72fb      	strb	r3, [r7, #11]
      break;
 8019e48:	e021      	b.n	8019e8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	7c1b      	ldrb	r3, [r3, #16]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d10d      	bne.n	8019e6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e5a:	f107 0208 	add.w	r2, r7, #8
 8019e5e:	4610      	mov	r0, r2
 8019e60:	4798      	blx	r3
 8019e62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	3301      	adds	r3, #1
 8019e68:	2207      	movs	r2, #7
 8019e6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019e6c:	e00f      	b.n	8019e8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8019e6e:	6839      	ldr	r1, [r7, #0]
 8019e70:	6878      	ldr	r0, [r7, #4]
 8019e72:	f000 fa10 	bl	801a296 <USBD_CtlError>
        err++;
 8019e76:	7afb      	ldrb	r3, [r7, #11]
 8019e78:	3301      	adds	r3, #1
 8019e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8019e7c:	e007      	b.n	8019e8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8019e7e:	6839      	ldr	r1, [r7, #0]
 8019e80:	6878      	ldr	r0, [r7, #4]
 8019e82:	f000 fa08 	bl	801a296 <USBD_CtlError>
      err++;
 8019e86:	7afb      	ldrb	r3, [r7, #11]
 8019e88:	3301      	adds	r3, #1
 8019e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8019e8c:	bf00      	nop
  }

  if (err != 0U)
 8019e8e:	7afb      	ldrb	r3, [r7, #11]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d11e      	bne.n	8019ed2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	88db      	ldrh	r3, [r3, #6]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d016      	beq.n	8019eca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8019e9c:	893b      	ldrh	r3, [r7, #8]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d00e      	beq.n	8019ec0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8019ea2:	683b      	ldr	r3, [r7, #0]
 8019ea4:	88da      	ldrh	r2, [r3, #6]
 8019ea6:	893b      	ldrh	r3, [r7, #8]
 8019ea8:	4293      	cmp	r3, r2
 8019eaa:	bf28      	it	cs
 8019eac:	4613      	movcs	r3, r2
 8019eae:	b29b      	uxth	r3, r3
 8019eb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8019eb2:	893b      	ldrh	r3, [r7, #8]
 8019eb4:	461a      	mov	r2, r3
 8019eb6:	68f9      	ldr	r1, [r7, #12]
 8019eb8:	6878      	ldr	r0, [r7, #4]
 8019eba:	f000 fa5d 	bl	801a378 <USBD_CtlSendData>
 8019ebe:	e009      	b.n	8019ed4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019ec0:	6839      	ldr	r1, [r7, #0]
 8019ec2:	6878      	ldr	r0, [r7, #4]
 8019ec4:	f000 f9e7 	bl	801a296 <USBD_CtlError>
 8019ec8:	e004      	b.n	8019ed4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8019eca:	6878      	ldr	r0, [r7, #4]
 8019ecc:	f000 faae 	bl	801a42c <USBD_CtlSendStatus>
 8019ed0:	e000      	b.n	8019ed4 <USBD_GetDescriptor+0x2cc>
    return;
 8019ed2:	bf00      	nop
  }
}
 8019ed4:	3710      	adds	r7, #16
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}
 8019eda:	bf00      	nop

08019edc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b084      	sub	sp, #16
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
 8019ee4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	889b      	ldrh	r3, [r3, #4]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d131      	bne.n	8019f52 <USBD_SetAddress+0x76>
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	88db      	ldrh	r3, [r3, #6]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d12d      	bne.n	8019f52 <USBD_SetAddress+0x76>
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	885b      	ldrh	r3, [r3, #2]
 8019efa:	2b7f      	cmp	r3, #127	; 0x7f
 8019efc:	d829      	bhi.n	8019f52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8019efe:	683b      	ldr	r3, [r7, #0]
 8019f00:	885b      	ldrh	r3, [r3, #2]
 8019f02:	b2db      	uxtb	r3, r3
 8019f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019f08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019f10:	b2db      	uxtb	r3, r3
 8019f12:	2b03      	cmp	r3, #3
 8019f14:	d104      	bne.n	8019f20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8019f16:	6839      	ldr	r1, [r7, #0]
 8019f18:	6878      	ldr	r0, [r7, #4]
 8019f1a:	f000 f9bc 	bl	801a296 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019f1e:	e01d      	b.n	8019f5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	7bfa      	ldrb	r2, [r7, #15]
 8019f24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8019f28:	7bfb      	ldrb	r3, [r7, #15]
 8019f2a:	4619      	mov	r1, r3
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	f004 f93d 	bl	801e1ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	f000 fa7a 	bl	801a42c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8019f38:	7bfb      	ldrb	r3, [r7, #15]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d004      	beq.n	8019f48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	2202      	movs	r2, #2
 8019f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019f46:	e009      	b.n	8019f5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	2201      	movs	r2, #1
 8019f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019f50:	e004      	b.n	8019f5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8019f52:	6839      	ldr	r1, [r7, #0]
 8019f54:	6878      	ldr	r0, [r7, #4]
 8019f56:	f000 f99e 	bl	801a296 <USBD_CtlError>
  }
}
 8019f5a:	bf00      	nop
 8019f5c:	bf00      	nop
 8019f5e:	3710      	adds	r7, #16
 8019f60:	46bd      	mov	sp, r7
 8019f62:	bd80      	pop	{r7, pc}

08019f64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b084      	sub	sp, #16
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
 8019f6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019f6e:	2300      	movs	r3, #0
 8019f70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8019f72:	683b      	ldr	r3, [r7, #0]
 8019f74:	885b      	ldrh	r3, [r3, #2]
 8019f76:	b2da      	uxtb	r2, r3
 8019f78:	4b4e      	ldr	r3, [pc, #312]	; (801a0b4 <USBD_SetConfig+0x150>)
 8019f7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8019f7c:	4b4d      	ldr	r3, [pc, #308]	; (801a0b4 <USBD_SetConfig+0x150>)
 8019f7e:	781b      	ldrb	r3, [r3, #0]
 8019f80:	2b01      	cmp	r3, #1
 8019f82:	d905      	bls.n	8019f90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8019f84:	6839      	ldr	r1, [r7, #0]
 8019f86:	6878      	ldr	r0, [r7, #4]
 8019f88:	f000 f985 	bl	801a296 <USBD_CtlError>
    return USBD_FAIL;
 8019f8c:	2303      	movs	r3, #3
 8019f8e:	e08c      	b.n	801a0aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019f96:	b2db      	uxtb	r3, r3
 8019f98:	2b02      	cmp	r3, #2
 8019f9a:	d002      	beq.n	8019fa2 <USBD_SetConfig+0x3e>
 8019f9c:	2b03      	cmp	r3, #3
 8019f9e:	d029      	beq.n	8019ff4 <USBD_SetConfig+0x90>
 8019fa0:	e075      	b.n	801a08e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8019fa2:	4b44      	ldr	r3, [pc, #272]	; (801a0b4 <USBD_SetConfig+0x150>)
 8019fa4:	781b      	ldrb	r3, [r3, #0]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d020      	beq.n	8019fec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8019faa:	4b42      	ldr	r3, [pc, #264]	; (801a0b4 <USBD_SetConfig+0x150>)
 8019fac:	781b      	ldrb	r3, [r3, #0]
 8019fae:	461a      	mov	r2, r3
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019fb4:	4b3f      	ldr	r3, [pc, #252]	; (801a0b4 <USBD_SetConfig+0x150>)
 8019fb6:	781b      	ldrb	r3, [r3, #0]
 8019fb8:	4619      	mov	r1, r3
 8019fba:	6878      	ldr	r0, [r7, #4]
 8019fbc:	f7fe ffe7 	bl	8018f8e <USBD_SetClassConfig>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8019fc4:	7bfb      	ldrb	r3, [r7, #15]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d008      	beq.n	8019fdc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8019fca:	6839      	ldr	r1, [r7, #0]
 8019fcc:	6878      	ldr	r0, [r7, #4]
 8019fce:	f000 f962 	bl	801a296 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2202      	movs	r2, #2
 8019fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019fda:	e065      	b.n	801a0a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019fdc:	6878      	ldr	r0, [r7, #4]
 8019fde:	f000 fa25 	bl	801a42c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	2203      	movs	r2, #3
 8019fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8019fea:	e05d      	b.n	801a0a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8019fec:	6878      	ldr	r0, [r7, #4]
 8019fee:	f000 fa1d 	bl	801a42c <USBD_CtlSendStatus>
      break;
 8019ff2:	e059      	b.n	801a0a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8019ff4:	4b2f      	ldr	r3, [pc, #188]	; (801a0b4 <USBD_SetConfig+0x150>)
 8019ff6:	781b      	ldrb	r3, [r3, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d112      	bne.n	801a022 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	2202      	movs	r2, #2
 801a000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801a004:	4b2b      	ldr	r3, [pc, #172]	; (801a0b4 <USBD_SetConfig+0x150>)
 801a006:	781b      	ldrb	r3, [r3, #0]
 801a008:	461a      	mov	r2, r3
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801a00e:	4b29      	ldr	r3, [pc, #164]	; (801a0b4 <USBD_SetConfig+0x150>)
 801a010:	781b      	ldrb	r3, [r3, #0]
 801a012:	4619      	mov	r1, r3
 801a014:	6878      	ldr	r0, [r7, #4]
 801a016:	f7fe ffd6 	bl	8018fc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f000 fa06 	bl	801a42c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801a020:	e042      	b.n	801a0a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801a022:	4b24      	ldr	r3, [pc, #144]	; (801a0b4 <USBD_SetConfig+0x150>)
 801a024:	781b      	ldrb	r3, [r3, #0]
 801a026:	461a      	mov	r2, r3
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	685b      	ldr	r3, [r3, #4]
 801a02c:	429a      	cmp	r2, r3
 801a02e:	d02a      	beq.n	801a086 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	685b      	ldr	r3, [r3, #4]
 801a034:	b2db      	uxtb	r3, r3
 801a036:	4619      	mov	r1, r3
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	f7fe ffc4 	bl	8018fc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801a03e:	4b1d      	ldr	r3, [pc, #116]	; (801a0b4 <USBD_SetConfig+0x150>)
 801a040:	781b      	ldrb	r3, [r3, #0]
 801a042:	461a      	mov	r2, r3
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801a048:	4b1a      	ldr	r3, [pc, #104]	; (801a0b4 <USBD_SetConfig+0x150>)
 801a04a:	781b      	ldrb	r3, [r3, #0]
 801a04c:	4619      	mov	r1, r3
 801a04e:	6878      	ldr	r0, [r7, #4]
 801a050:	f7fe ff9d 	bl	8018f8e <USBD_SetClassConfig>
 801a054:	4603      	mov	r3, r0
 801a056:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801a058:	7bfb      	ldrb	r3, [r7, #15]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d00f      	beq.n	801a07e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801a05e:	6839      	ldr	r1, [r7, #0]
 801a060:	6878      	ldr	r0, [r7, #4]
 801a062:	f000 f918 	bl	801a296 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	b2db      	uxtb	r3, r3
 801a06c:	4619      	mov	r1, r3
 801a06e:	6878      	ldr	r0, [r7, #4]
 801a070:	f7fe ffa9 	bl	8018fc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	2202      	movs	r2, #2
 801a078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801a07c:	e014      	b.n	801a0a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801a07e:	6878      	ldr	r0, [r7, #4]
 801a080:	f000 f9d4 	bl	801a42c <USBD_CtlSendStatus>
      break;
 801a084:	e010      	b.n	801a0a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801a086:	6878      	ldr	r0, [r7, #4]
 801a088:	f000 f9d0 	bl	801a42c <USBD_CtlSendStatus>
      break;
 801a08c:	e00c      	b.n	801a0a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801a08e:	6839      	ldr	r1, [r7, #0]
 801a090:	6878      	ldr	r0, [r7, #4]
 801a092:	f000 f900 	bl	801a296 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801a096:	4b07      	ldr	r3, [pc, #28]	; (801a0b4 <USBD_SetConfig+0x150>)
 801a098:	781b      	ldrb	r3, [r3, #0]
 801a09a:	4619      	mov	r1, r3
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	f7fe ff92 	bl	8018fc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801a0a2:	2303      	movs	r3, #3
 801a0a4:	73fb      	strb	r3, [r7, #15]
      break;
 801a0a6:	bf00      	nop
  }

  return ret;
 801a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	3710      	adds	r7, #16
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bd80      	pop	{r7, pc}
 801a0b2:	bf00      	nop
 801a0b4:	200038d4 	.word	0x200038d4

0801a0b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b082      	sub	sp, #8
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	88db      	ldrh	r3, [r3, #6]
 801a0c6:	2b01      	cmp	r3, #1
 801a0c8:	d004      	beq.n	801a0d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801a0ca:	6839      	ldr	r1, [r7, #0]
 801a0cc:	6878      	ldr	r0, [r7, #4]
 801a0ce:	f000 f8e2 	bl	801a296 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801a0d2:	e023      	b.n	801a11c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a0da:	b2db      	uxtb	r3, r3
 801a0dc:	2b02      	cmp	r3, #2
 801a0de:	dc02      	bgt.n	801a0e6 <USBD_GetConfig+0x2e>
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	dc03      	bgt.n	801a0ec <USBD_GetConfig+0x34>
 801a0e4:	e015      	b.n	801a112 <USBD_GetConfig+0x5a>
 801a0e6:	2b03      	cmp	r3, #3
 801a0e8:	d00b      	beq.n	801a102 <USBD_GetConfig+0x4a>
 801a0ea:	e012      	b.n	801a112 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	3308      	adds	r3, #8
 801a0f6:	2201      	movs	r2, #1
 801a0f8:	4619      	mov	r1, r3
 801a0fa:	6878      	ldr	r0, [r7, #4]
 801a0fc:	f000 f93c 	bl	801a378 <USBD_CtlSendData>
        break;
 801a100:	e00c      	b.n	801a11c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	3304      	adds	r3, #4
 801a106:	2201      	movs	r2, #1
 801a108:	4619      	mov	r1, r3
 801a10a:	6878      	ldr	r0, [r7, #4]
 801a10c:	f000 f934 	bl	801a378 <USBD_CtlSendData>
        break;
 801a110:	e004      	b.n	801a11c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801a112:	6839      	ldr	r1, [r7, #0]
 801a114:	6878      	ldr	r0, [r7, #4]
 801a116:	f000 f8be 	bl	801a296 <USBD_CtlError>
        break;
 801a11a:	bf00      	nop
}
 801a11c:	bf00      	nop
 801a11e:	3708      	adds	r7, #8
 801a120:	46bd      	mov	sp, r7
 801a122:	bd80      	pop	{r7, pc}

0801a124 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b082      	sub	sp, #8
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]
 801a12c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a134:	b2db      	uxtb	r3, r3
 801a136:	3b01      	subs	r3, #1
 801a138:	2b02      	cmp	r3, #2
 801a13a:	d81e      	bhi.n	801a17a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801a13c:	683b      	ldr	r3, [r7, #0]
 801a13e:	88db      	ldrh	r3, [r3, #6]
 801a140:	2b02      	cmp	r3, #2
 801a142:	d004      	beq.n	801a14e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801a144:	6839      	ldr	r1, [r7, #0]
 801a146:	6878      	ldr	r0, [r7, #4]
 801a148:	f000 f8a5 	bl	801a296 <USBD_CtlError>
        break;
 801a14c:	e01a      	b.n	801a184 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	2201      	movs	r2, #1
 801a152:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d005      	beq.n	801a16a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	68db      	ldr	r3, [r3, #12]
 801a162:	f043 0202 	orr.w	r2, r3, #2
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	330c      	adds	r3, #12
 801a16e:	2202      	movs	r2, #2
 801a170:	4619      	mov	r1, r3
 801a172:	6878      	ldr	r0, [r7, #4]
 801a174:	f000 f900 	bl	801a378 <USBD_CtlSendData>
      break;
 801a178:	e004      	b.n	801a184 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801a17a:	6839      	ldr	r1, [r7, #0]
 801a17c:	6878      	ldr	r0, [r7, #4]
 801a17e:	f000 f88a 	bl	801a296 <USBD_CtlError>
      break;
 801a182:	bf00      	nop
  }
}
 801a184:	bf00      	nop
 801a186:	3708      	adds	r7, #8
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}

0801a18c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b082      	sub	sp, #8
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
 801a194:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	885b      	ldrh	r3, [r3, #2]
 801a19a:	2b01      	cmp	r3, #1
 801a19c:	d107      	bne.n	801a1ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	2201      	movs	r2, #1
 801a1a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801a1a6:	6878      	ldr	r0, [r7, #4]
 801a1a8:	f000 f940 	bl	801a42c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801a1ac:	e013      	b.n	801a1d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	885b      	ldrh	r3, [r3, #2]
 801a1b2:	2b02      	cmp	r3, #2
 801a1b4:	d10b      	bne.n	801a1ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801a1b6:	683b      	ldr	r3, [r7, #0]
 801a1b8:	889b      	ldrh	r3, [r3, #4]
 801a1ba:	0a1b      	lsrs	r3, r3, #8
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	b2da      	uxtb	r2, r3
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801a1c6:	6878      	ldr	r0, [r7, #4]
 801a1c8:	f000 f930 	bl	801a42c <USBD_CtlSendStatus>
}
 801a1cc:	e003      	b.n	801a1d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801a1ce:	6839      	ldr	r1, [r7, #0]
 801a1d0:	6878      	ldr	r0, [r7, #4]
 801a1d2:	f000 f860 	bl	801a296 <USBD_CtlError>
}
 801a1d6:	bf00      	nop
 801a1d8:	3708      	adds	r7, #8
 801a1da:	46bd      	mov	sp, r7
 801a1dc:	bd80      	pop	{r7, pc}

0801a1de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a1de:	b580      	push	{r7, lr}
 801a1e0:	b082      	sub	sp, #8
 801a1e2:	af00      	add	r7, sp, #0
 801a1e4:	6078      	str	r0, [r7, #4]
 801a1e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	3b01      	subs	r3, #1
 801a1f2:	2b02      	cmp	r3, #2
 801a1f4:	d80b      	bhi.n	801a20e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	885b      	ldrh	r3, [r3, #2]
 801a1fa:	2b01      	cmp	r3, #1
 801a1fc:	d10c      	bne.n	801a218 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	2200      	movs	r2, #0
 801a202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801a206:	6878      	ldr	r0, [r7, #4]
 801a208:	f000 f910 	bl	801a42c <USBD_CtlSendStatus>
      }
      break;
 801a20c:	e004      	b.n	801a218 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801a20e:	6839      	ldr	r1, [r7, #0]
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	f000 f840 	bl	801a296 <USBD_CtlError>
      break;
 801a216:	e000      	b.n	801a21a <USBD_ClrFeature+0x3c>
      break;
 801a218:	bf00      	nop
  }
}
 801a21a:	bf00      	nop
 801a21c:	3708      	adds	r7, #8
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}

0801a222 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801a222:	b580      	push	{r7, lr}
 801a224:	b084      	sub	sp, #16
 801a226:	af00      	add	r7, sp, #0
 801a228:	6078      	str	r0, [r7, #4]
 801a22a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	781a      	ldrb	r2, [r3, #0]
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	3301      	adds	r3, #1
 801a23c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	781a      	ldrb	r2, [r3, #0]
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	3301      	adds	r3, #1
 801a24a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801a24c:	68f8      	ldr	r0, [r7, #12]
 801a24e:	f7ff fa41 	bl	80196d4 <SWAPBYTE>
 801a252:	4603      	mov	r3, r0
 801a254:	461a      	mov	r2, r3
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	3301      	adds	r3, #1
 801a25e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	3301      	adds	r3, #1
 801a264:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801a266:	68f8      	ldr	r0, [r7, #12]
 801a268:	f7ff fa34 	bl	80196d4 <SWAPBYTE>
 801a26c:	4603      	mov	r3, r0
 801a26e:	461a      	mov	r2, r3
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	3301      	adds	r3, #1
 801a278:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	3301      	adds	r3, #1
 801a27e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801a280:	68f8      	ldr	r0, [r7, #12]
 801a282:	f7ff fa27 	bl	80196d4 <SWAPBYTE>
 801a286:	4603      	mov	r3, r0
 801a288:	461a      	mov	r2, r3
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	80da      	strh	r2, [r3, #6]
}
 801a28e:	bf00      	nop
 801a290:	3710      	adds	r7, #16
 801a292:	46bd      	mov	sp, r7
 801a294:	bd80      	pop	{r7, pc}

0801a296 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a296:	b580      	push	{r7, lr}
 801a298:	b082      	sub	sp, #8
 801a29a:	af00      	add	r7, sp, #0
 801a29c:	6078      	str	r0, [r7, #4]
 801a29e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801a2a0:	2180      	movs	r1, #128	; 0x80
 801a2a2:	6878      	ldr	r0, [r7, #4]
 801a2a4:	f003 ff18 	bl	801e0d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801a2a8:	2100      	movs	r1, #0
 801a2aa:	6878      	ldr	r0, [r7, #4]
 801a2ac:	f003 ff14 	bl	801e0d8 <USBD_LL_StallEP>
}
 801a2b0:	bf00      	nop
 801a2b2:	3708      	adds	r7, #8
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}

0801a2b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b086      	sub	sp, #24
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d036      	beq.n	801a33c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801a2d2:	6938      	ldr	r0, [r7, #16]
 801a2d4:	f000 f836 	bl	801a344 <USBD_GetLen>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	3301      	adds	r3, #1
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	005b      	lsls	r3, r3, #1
 801a2e0:	b29a      	uxth	r2, r3
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801a2e6:	7dfb      	ldrb	r3, [r7, #23]
 801a2e8:	68ba      	ldr	r2, [r7, #8]
 801a2ea:	4413      	add	r3, r2
 801a2ec:	687a      	ldr	r2, [r7, #4]
 801a2ee:	7812      	ldrb	r2, [r2, #0]
 801a2f0:	701a      	strb	r2, [r3, #0]
  idx++;
 801a2f2:	7dfb      	ldrb	r3, [r7, #23]
 801a2f4:	3301      	adds	r3, #1
 801a2f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801a2f8:	7dfb      	ldrb	r3, [r7, #23]
 801a2fa:	68ba      	ldr	r2, [r7, #8]
 801a2fc:	4413      	add	r3, r2
 801a2fe:	2203      	movs	r2, #3
 801a300:	701a      	strb	r2, [r3, #0]
  idx++;
 801a302:	7dfb      	ldrb	r3, [r7, #23]
 801a304:	3301      	adds	r3, #1
 801a306:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801a308:	e013      	b.n	801a332 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801a30a:	7dfb      	ldrb	r3, [r7, #23]
 801a30c:	68ba      	ldr	r2, [r7, #8]
 801a30e:	4413      	add	r3, r2
 801a310:	693a      	ldr	r2, [r7, #16]
 801a312:	7812      	ldrb	r2, [r2, #0]
 801a314:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801a316:	693b      	ldr	r3, [r7, #16]
 801a318:	3301      	adds	r3, #1
 801a31a:	613b      	str	r3, [r7, #16]
    idx++;
 801a31c:	7dfb      	ldrb	r3, [r7, #23]
 801a31e:	3301      	adds	r3, #1
 801a320:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801a322:	7dfb      	ldrb	r3, [r7, #23]
 801a324:	68ba      	ldr	r2, [r7, #8]
 801a326:	4413      	add	r3, r2
 801a328:	2200      	movs	r2, #0
 801a32a:	701a      	strb	r2, [r3, #0]
    idx++;
 801a32c:	7dfb      	ldrb	r3, [r7, #23]
 801a32e:	3301      	adds	r3, #1
 801a330:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801a332:	693b      	ldr	r3, [r7, #16]
 801a334:	781b      	ldrb	r3, [r3, #0]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d1e7      	bne.n	801a30a <USBD_GetString+0x52>
 801a33a:	e000      	b.n	801a33e <USBD_GetString+0x86>
    return;
 801a33c:	bf00      	nop
  }
}
 801a33e:	3718      	adds	r7, #24
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}

0801a344 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801a344:	b480      	push	{r7}
 801a346:	b085      	sub	sp, #20
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801a34c:	2300      	movs	r3, #0
 801a34e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801a354:	e005      	b.n	801a362 <USBD_GetLen+0x1e>
  {
    len++;
 801a356:	7bfb      	ldrb	r3, [r7, #15]
 801a358:	3301      	adds	r3, #1
 801a35a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801a35c:	68bb      	ldr	r3, [r7, #8]
 801a35e:	3301      	adds	r3, #1
 801a360:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801a362:	68bb      	ldr	r3, [r7, #8]
 801a364:	781b      	ldrb	r3, [r3, #0]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d1f5      	bne.n	801a356 <USBD_GetLen+0x12>
  }

  return len;
 801a36a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a36c:	4618      	mov	r0, r3
 801a36e:	3714      	adds	r7, #20
 801a370:	46bd      	mov	sp, r7
 801a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a376:	4770      	bx	lr

0801a378 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b084      	sub	sp, #16
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	60f8      	str	r0, [r7, #12]
 801a380:	60b9      	str	r1, [r7, #8]
 801a382:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	2202      	movs	r2, #2
 801a388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	687a      	ldr	r2, [r7, #4]
 801a390:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	687a      	ldr	r2, [r7, #4]
 801a396:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	68ba      	ldr	r2, [r7, #8]
 801a39c:	2100      	movs	r1, #0
 801a39e:	68f8      	ldr	r0, [r7, #12]
 801a3a0:	f003 ff23 	bl	801e1ea <USBD_LL_Transmit>

  return USBD_OK;
 801a3a4:	2300      	movs	r3, #0
}
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	3710      	adds	r7, #16
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}

0801a3ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801a3ae:	b580      	push	{r7, lr}
 801a3b0:	b084      	sub	sp, #16
 801a3b2:	af00      	add	r7, sp, #0
 801a3b4:	60f8      	str	r0, [r7, #12]
 801a3b6:	60b9      	str	r1, [r7, #8]
 801a3b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	68ba      	ldr	r2, [r7, #8]
 801a3be:	2100      	movs	r1, #0
 801a3c0:	68f8      	ldr	r0, [r7, #12]
 801a3c2:	f003 ff12 	bl	801e1ea <USBD_LL_Transmit>

  return USBD_OK;
 801a3c6:	2300      	movs	r3, #0
}
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	3710      	adds	r7, #16
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd80      	pop	{r7, pc}

0801a3d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b084      	sub	sp, #16
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	60f8      	str	r0, [r7, #12]
 801a3d8:	60b9      	str	r1, [r7, #8]
 801a3da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	2203      	movs	r2, #3
 801a3e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	687a      	ldr	r2, [r7, #4]
 801a3e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	687a      	ldr	r2, [r7, #4]
 801a3f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	68ba      	ldr	r2, [r7, #8]
 801a3f8:	2100      	movs	r1, #0
 801a3fa:	68f8      	ldr	r0, [r7, #12]
 801a3fc:	f003 ff16 	bl	801e22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a400:	2300      	movs	r3, #0
}
 801a402:	4618      	mov	r0, r3
 801a404:	3710      	adds	r7, #16
 801a406:	46bd      	mov	sp, r7
 801a408:	bd80      	pop	{r7, pc}

0801a40a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801a40a:	b580      	push	{r7, lr}
 801a40c:	b084      	sub	sp, #16
 801a40e:	af00      	add	r7, sp, #0
 801a410:	60f8      	str	r0, [r7, #12]
 801a412:	60b9      	str	r1, [r7, #8]
 801a414:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	68ba      	ldr	r2, [r7, #8]
 801a41a:	2100      	movs	r1, #0
 801a41c:	68f8      	ldr	r0, [r7, #12]
 801a41e:	f003 ff05 	bl	801e22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a422:	2300      	movs	r3, #0
}
 801a424:	4618      	mov	r0, r3
 801a426:	3710      	adds	r7, #16
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd80      	pop	{r7, pc}

0801a42c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	2204      	movs	r2, #4
 801a438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801a43c:	2300      	movs	r3, #0
 801a43e:	2200      	movs	r2, #0
 801a440:	2100      	movs	r1, #0
 801a442:	6878      	ldr	r0, [r7, #4]
 801a444:	f003 fed1 	bl	801e1ea <USBD_LL_Transmit>

  return USBD_OK;
 801a448:	2300      	movs	r3, #0
}
 801a44a:	4618      	mov	r0, r3
 801a44c:	3708      	adds	r7, #8
 801a44e:	46bd      	mov	sp, r7
 801a450:	bd80      	pop	{r7, pc}

0801a452 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801a452:	b580      	push	{r7, lr}
 801a454:	b082      	sub	sp, #8
 801a456:	af00      	add	r7, sp, #0
 801a458:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	2205      	movs	r2, #5
 801a45e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a462:	2300      	movs	r3, #0
 801a464:	2200      	movs	r2, #0
 801a466:	2100      	movs	r1, #0
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	f003 fedf 	bl	801e22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801a46e:	2300      	movs	r3, #0
}
 801a470:	4618      	mov	r0, r3
 801a472:	3708      	adds	r7, #8
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}

0801a478 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801a478:	b480      	push	{r7}
 801a47a:	b085      	sub	sp, #20
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	4603      	mov	r3, r0
 801a480:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801a482:	2300      	movs	r3, #0
 801a484:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801a486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a48a:	2b84      	cmp	r3, #132	; 0x84
 801a48c:	d005      	beq.n	801a49a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801a48e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	4413      	add	r3, r2
 801a496:	3303      	adds	r3, #3
 801a498:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801a49a:	68fb      	ldr	r3, [r7, #12]
}
 801a49c:	4618      	mov	r0, r3
 801a49e:	3714      	adds	r7, #20
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a6:	4770      	bx	lr

0801a4a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801a4ac:	f001 fb24 	bl	801baf8 <vTaskStartScheduler>
  
  return osOK;
 801a4b0:	2300      	movs	r3, #0
}
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	bd80      	pop	{r7, pc}

0801a4b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801a4b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4b8:	b089      	sub	sp, #36	; 0x24
 801a4ba:	af04      	add	r7, sp, #16
 801a4bc:	6078      	str	r0, [r7, #4]
 801a4be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	695b      	ldr	r3, [r3, #20]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d020      	beq.n	801a50a <osThreadCreate+0x54>
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	699b      	ldr	r3, [r3, #24]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d01c      	beq.n	801a50a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	685c      	ldr	r4, [r3, #4]
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681d      	ldr	r5, [r3, #0]
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	691e      	ldr	r6, [r3, #16]
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	f7ff ffc8 	bl	801a478 <makeFreeRtosPriority>
 801a4e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	695b      	ldr	r3, [r3, #20]
 801a4ee:	687a      	ldr	r2, [r7, #4]
 801a4f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801a4f2:	9202      	str	r2, [sp, #8]
 801a4f4:	9301      	str	r3, [sp, #4]
 801a4f6:	9100      	str	r1, [sp, #0]
 801a4f8:	683b      	ldr	r3, [r7, #0]
 801a4fa:	4632      	mov	r2, r6
 801a4fc:	4629      	mov	r1, r5
 801a4fe:	4620      	mov	r0, r4
 801a500:	f001 f88e 	bl	801b620 <xTaskCreateStatic>
 801a504:	4603      	mov	r3, r0
 801a506:	60fb      	str	r3, [r7, #12]
 801a508:	e01c      	b.n	801a544 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	685c      	ldr	r4, [r3, #4]
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801a516:	b29e      	uxth	r6, r3
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801a51e:	4618      	mov	r0, r3
 801a520:	f7ff ffaa 	bl	801a478 <makeFreeRtosPriority>
 801a524:	4602      	mov	r2, r0
 801a526:	f107 030c 	add.w	r3, r7, #12
 801a52a:	9301      	str	r3, [sp, #4]
 801a52c:	9200      	str	r2, [sp, #0]
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	4632      	mov	r2, r6
 801a532:	4629      	mov	r1, r5
 801a534:	4620      	mov	r0, r4
 801a536:	f001 f8d0 	bl	801b6da <xTaskCreate>
 801a53a:	4603      	mov	r3, r0
 801a53c:	2b01      	cmp	r3, #1
 801a53e:	d001      	beq.n	801a544 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801a540:	2300      	movs	r3, #0
 801a542:	e000      	b.n	801a546 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801a544:	68fb      	ldr	r3, [r7, #12]
}
 801a546:	4618      	mov	r0, r3
 801a548:	3714      	adds	r7, #20
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a54e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801a54e:	b580      	push	{r7, lr}
 801a550:	b084      	sub	sp, #16
 801a552:	af00      	add	r7, sp, #0
 801a554:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d001      	beq.n	801a564 <osDelay+0x16>
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	e000      	b.n	801a566 <osDelay+0x18>
 801a564:	2301      	movs	r3, #1
 801a566:	4618      	mov	r0, r3
 801a568:	f001 fa92 	bl	801ba90 <vTaskDelay>
  
  return osOK;
 801a56c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801a56e:	4618      	mov	r0, r3
 801a570:	3710      	adds	r7, #16
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}

0801a576 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801a576:	b580      	push	{r7, lr}
 801a578:	b082      	sub	sp, #8
 801a57a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801a57c:	2020      	movs	r0, #32
 801a57e:	f002 ff9b 	bl	801d4b8 <pvPortMalloc>
 801a582:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d00a      	beq.n	801a5a0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	2200      	movs	r2, #0
 801a58e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	3304      	adds	r3, #4
 801a594:	4618      	mov	r0, r3
 801a596:	f000 f9dd 	bl	801a954 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	2200      	movs	r2, #0
 801a59e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801a5a0:	687b      	ldr	r3, [r7, #4]
	}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3708      	adds	r7, #8
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	bd80      	pop	{r7, pc}
	...

0801a5ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b090      	sub	sp, #64	; 0x40
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	60f8      	str	r0, [r7, #12]
 801a5b4:	60b9      	str	r1, [r7, #8]
 801a5b6:	607a      	str	r2, [r7, #4]
 801a5b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d10a      	bne.n	801a5e2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5d0:	f383 8811 	msr	BASEPRI, r3
 801a5d4:	f3bf 8f6f 	isb	sy
 801a5d8:	f3bf 8f4f 	dsb	sy
 801a5dc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801a5de:	bf00      	nop
 801a5e0:	e7fe      	b.n	801a5e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d00a      	beq.n	801a602 <xEventGroupWaitBits+0x56>
	__asm volatile
 801a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5f0:	f383 8811 	msr	BASEPRI, r3
 801a5f4:	f3bf 8f6f 	isb	sy
 801a5f8:	f3bf 8f4f 	dsb	sy
 801a5fc:	61fb      	str	r3, [r7, #28]
}
 801a5fe:	bf00      	nop
 801a600:	e7fe      	b.n	801a600 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801a602:	68bb      	ldr	r3, [r7, #8]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d10a      	bne.n	801a61e <xEventGroupWaitBits+0x72>
	__asm volatile
 801a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a60c:	f383 8811 	msr	BASEPRI, r3
 801a610:	f3bf 8f6f 	isb	sy
 801a614:	f3bf 8f4f 	dsb	sy
 801a618:	61bb      	str	r3, [r7, #24]
}
 801a61a:	bf00      	nop
 801a61c:	e7fe      	b.n	801a61c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a61e:	f001 ff8b 	bl	801c538 <xTaskGetSchedulerState>
 801a622:	4603      	mov	r3, r0
 801a624:	2b00      	cmp	r3, #0
 801a626:	d102      	bne.n	801a62e <xEventGroupWaitBits+0x82>
 801a628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d101      	bne.n	801a632 <xEventGroupWaitBits+0x86>
 801a62e:	2301      	movs	r3, #1
 801a630:	e000      	b.n	801a634 <xEventGroupWaitBits+0x88>
 801a632:	2300      	movs	r3, #0
 801a634:	2b00      	cmp	r3, #0
 801a636:	d10a      	bne.n	801a64e <xEventGroupWaitBits+0xa2>
	__asm volatile
 801a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a63c:	f383 8811 	msr	BASEPRI, r3
 801a640:	f3bf 8f6f 	isb	sy
 801a644:	f3bf 8f4f 	dsb	sy
 801a648:	617b      	str	r3, [r7, #20]
}
 801a64a:	bf00      	nop
 801a64c:	e7fe      	b.n	801a64c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801a64e:	f001 fac5 	bl	801bbdc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801a658:	683a      	ldr	r2, [r7, #0]
 801a65a:	68b9      	ldr	r1, [r7, #8]
 801a65c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a65e:	f000 f943 	bl	801a8e8 <prvTestWaitCondition>
 801a662:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a666:	2b00      	cmp	r3, #0
 801a668:	d00e      	beq.n	801a688 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a66c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801a66e:	2300      	movs	r3, #0
 801a670:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d028      	beq.n	801a6ca <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801a678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a67a:	681a      	ldr	r2, [r3, #0]
 801a67c:	68bb      	ldr	r3, [r7, #8]
 801a67e:	43db      	mvns	r3, r3
 801a680:	401a      	ands	r2, r3
 801a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a684:	601a      	str	r2, [r3, #0]
 801a686:	e020      	b.n	801a6ca <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801a688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d104      	bne.n	801a698 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a690:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801a692:	2301      	movs	r3, #1
 801a694:	633b      	str	r3, [r7, #48]	; 0x30
 801a696:	e018      	b.n	801a6ca <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d003      	beq.n	801a6a6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a6a4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d003      	beq.n	801a6b4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801a6b2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6b6:	1d18      	adds	r0, r3, #4
 801a6b8:	68ba      	ldr	r2, [r7, #8]
 801a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6bc:	4313      	orrs	r3, r2
 801a6be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a6c0:	4619      	mov	r1, r3
 801a6c2:	f001 fcaf 	bl	801c024 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801a6ca:	f001 fa95 	bl	801bbf8 <xTaskResumeAll>
 801a6ce:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801a6d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d031      	beq.n	801a73a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d107      	bne.n	801a6ec <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801a6dc:	4b19      	ldr	r3, [pc, #100]	; (801a744 <xEventGroupWaitBits+0x198>)
 801a6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6e2:	601a      	str	r2, [r3, #0]
 801a6e4:	f3bf 8f4f 	dsb	sy
 801a6e8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801a6ec:	f001 ffc8 	bl	801c680 <uxTaskResetEventItemValue>
 801a6f0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801a6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d11a      	bne.n	801a732 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801a6fc:	f002 fdba 	bl	801d274 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801a706:	683a      	ldr	r2, [r7, #0]
 801a708:	68b9      	ldr	r1, [r7, #8]
 801a70a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801a70c:	f000 f8ec 	bl	801a8e8 <prvTestWaitCondition>
 801a710:	4603      	mov	r3, r0
 801a712:	2b00      	cmp	r3, #0
 801a714:	d009      	beq.n	801a72a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d006      	beq.n	801a72a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a71e:	681a      	ldr	r2, [r3, #0]
 801a720:	68bb      	ldr	r3, [r7, #8]
 801a722:	43db      	mvns	r3, r3
 801a724:	401a      	ands	r2, r3
 801a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a728:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801a72a:	2301      	movs	r3, #1
 801a72c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801a72e:	f002 fdd1 	bl	801d2d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801a732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801a738:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801a73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a73c:	4618      	mov	r0, r3
 801a73e:	3740      	adds	r7, #64	; 0x40
 801a740:	46bd      	mov	sp, r7
 801a742:	bd80      	pop	{r7, pc}
 801a744:	e000ed04 	.word	0xe000ed04

0801a748 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b086      	sub	sp, #24
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	6078      	str	r0, [r7, #4]
 801a750:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d10a      	bne.n	801a772 <xEventGroupClearBits+0x2a>
	__asm volatile
 801a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a760:	f383 8811 	msr	BASEPRI, r3
 801a764:	f3bf 8f6f 	isb	sy
 801a768:	f3bf 8f4f 	dsb	sy
 801a76c:	60fb      	str	r3, [r7, #12]
}
 801a76e:	bf00      	nop
 801a770:	e7fe      	b.n	801a770 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801a772:	683b      	ldr	r3, [r7, #0]
 801a774:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d00a      	beq.n	801a792 <xEventGroupClearBits+0x4a>
	__asm volatile
 801a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a780:	f383 8811 	msr	BASEPRI, r3
 801a784:	f3bf 8f6f 	isb	sy
 801a788:	f3bf 8f4f 	dsb	sy
 801a78c:	60bb      	str	r3, [r7, #8]
}
 801a78e:	bf00      	nop
 801a790:	e7fe      	b.n	801a790 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801a792:	f002 fd6f 	bl	801d274 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801a796:	697b      	ldr	r3, [r7, #20]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801a79c:	697b      	ldr	r3, [r7, #20]
 801a79e:	681a      	ldr	r2, [r3, #0]
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	43db      	mvns	r3, r3
 801a7a4:	401a      	ands	r2, r3
 801a7a6:	697b      	ldr	r3, [r7, #20]
 801a7a8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801a7aa:	f002 fd93 	bl	801d2d4 <vPortExitCritical>

	return uxReturn;
 801a7ae:	693b      	ldr	r3, [r7, #16]
}
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	3718      	adds	r7, #24
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	bd80      	pop	{r7, pc}

0801a7b8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	b08e      	sub	sp, #56	; 0x38
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d10a      	bne.n	801a7ea <xEventGroupSetBits+0x32>
	__asm volatile
 801a7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7d8:	f383 8811 	msr	BASEPRI, r3
 801a7dc:	f3bf 8f6f 	isb	sy
 801a7e0:	f3bf 8f4f 	dsb	sy
 801a7e4:	613b      	str	r3, [r7, #16]
}
 801a7e6:	bf00      	nop
 801a7e8:	e7fe      	b.n	801a7e8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d00a      	beq.n	801a80a <xEventGroupSetBits+0x52>
	__asm volatile
 801a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7f8:	f383 8811 	msr	BASEPRI, r3
 801a7fc:	f3bf 8f6f 	isb	sy
 801a800:	f3bf 8f4f 	dsb	sy
 801a804:	60fb      	str	r3, [r7, #12]
}
 801a806:	bf00      	nop
 801a808:	e7fe      	b.n	801a808 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a80c:	3304      	adds	r3, #4
 801a80e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a812:	3308      	adds	r3, #8
 801a814:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801a816:	f001 f9e1 	bl	801bbdc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a81c:	68db      	ldr	r3, [r3, #12]
 801a81e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	683b      	ldr	r3, [r7, #0]
 801a826:	431a      	orrs	r2, r3
 801a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a82a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801a82c:	e03c      	b.n	801a8a8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a830:	685b      	ldr	r3, [r3, #4]
 801a832:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801a83a:	2300      	movs	r3, #0
 801a83c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801a83e:	69bb      	ldr	r3, [r7, #24]
 801a840:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a844:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801a846:	69bb      	ldr	r3, [r7, #24]
 801a848:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801a84c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801a84e:	697b      	ldr	r3, [r7, #20]
 801a850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801a854:	2b00      	cmp	r3, #0
 801a856:	d108      	bne.n	801a86a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a85a:	681a      	ldr	r2, [r3, #0]
 801a85c:	69bb      	ldr	r3, [r7, #24]
 801a85e:	4013      	ands	r3, r2
 801a860:	2b00      	cmp	r3, #0
 801a862:	d00b      	beq.n	801a87c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801a864:	2301      	movs	r3, #1
 801a866:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a868:	e008      	b.n	801a87c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a86c:	681a      	ldr	r2, [r3, #0]
 801a86e:	69bb      	ldr	r3, [r7, #24]
 801a870:	4013      	ands	r3, r2
 801a872:	69ba      	ldr	r2, [r7, #24]
 801a874:	429a      	cmp	r2, r3
 801a876:	d101      	bne.n	801a87c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801a878:	2301      	movs	r3, #1
 801a87a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d010      	beq.n	801a8a4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801a882:	697b      	ldr	r3, [r7, #20]
 801a884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d003      	beq.n	801a894 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801a88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a88e:	69bb      	ldr	r3, [r7, #24]
 801a890:	4313      	orrs	r3, r2
 801a892:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a89c:	4619      	mov	r1, r3
 801a89e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a8a0:	f001 fc8a 	bl	801c1b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801a8a4:	69fb      	ldr	r3, [r7, #28]
 801a8a6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801a8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8aa:	6a3b      	ldr	r3, [r7, #32]
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	d1be      	bne.n	801a82e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8b2:	681a      	ldr	r2, [r3, #0]
 801a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8b6:	43db      	mvns	r3, r3
 801a8b8:	401a      	ands	r2, r3
 801a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8bc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801a8be:	f001 f99b 	bl	801bbf8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8c4:	681b      	ldr	r3, [r3, #0]
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3738      	adds	r7, #56	; 0x38
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}

0801a8ce <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801a8ce:	b580      	push	{r7, lr}
 801a8d0:	b082      	sub	sp, #8
 801a8d2:	af00      	add	r7, sp, #0
 801a8d4:	6078      	str	r0, [r7, #4]
 801a8d6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801a8d8:	6839      	ldr	r1, [r7, #0]
 801a8da:	6878      	ldr	r0, [r7, #4]
 801a8dc:	f7ff ff6c 	bl	801a7b8 <xEventGroupSetBits>
}
 801a8e0:	bf00      	nop
 801a8e2:	3708      	adds	r7, #8
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}

0801a8e8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801a8e8:	b480      	push	{r7}
 801a8ea:	b087      	sub	sp, #28
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	60f8      	str	r0, [r7, #12]
 801a8f0:	60b9      	str	r1, [r7, #8]
 801a8f2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d107      	bne.n	801a90e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801a8fe:	68fa      	ldr	r2, [r7, #12]
 801a900:	68bb      	ldr	r3, [r7, #8]
 801a902:	4013      	ands	r3, r2
 801a904:	2b00      	cmp	r3, #0
 801a906:	d00a      	beq.n	801a91e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801a908:	2301      	movs	r3, #1
 801a90a:	617b      	str	r3, [r7, #20]
 801a90c:	e007      	b.n	801a91e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801a90e:	68fa      	ldr	r2, [r7, #12]
 801a910:	68bb      	ldr	r3, [r7, #8]
 801a912:	4013      	ands	r3, r2
 801a914:	68ba      	ldr	r2, [r7, #8]
 801a916:	429a      	cmp	r2, r3
 801a918:	d101      	bne.n	801a91e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801a91a:	2301      	movs	r3, #1
 801a91c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801a91e:	697b      	ldr	r3, [r7, #20]
}
 801a920:	4618      	mov	r0, r3
 801a922:	371c      	adds	r7, #28
 801a924:	46bd      	mov	sp, r7
 801a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92a:	4770      	bx	lr

0801a92c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b086      	sub	sp, #24
 801a930:	af00      	add	r7, sp, #0
 801a932:	60f8      	str	r0, [r7, #12]
 801a934:	60b9      	str	r1, [r7, #8]
 801a936:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	68ba      	ldr	r2, [r7, #8]
 801a93c:	68f9      	ldr	r1, [r7, #12]
 801a93e:	4804      	ldr	r0, [pc, #16]	; (801a950 <xEventGroupSetBitsFromISR+0x24>)
 801a940:	f002 fb4a 	bl	801cfd8 <xTimerPendFunctionCallFromISR>
 801a944:	6178      	str	r0, [r7, #20]

		return xReturn;
 801a946:	697b      	ldr	r3, [r7, #20]
	}
 801a948:	4618      	mov	r0, r3
 801a94a:	3718      	adds	r7, #24
 801a94c:	46bd      	mov	sp, r7
 801a94e:	bd80      	pop	{r7, pc}
 801a950:	0801a8cf 	.word	0x0801a8cf

0801a954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801a954:	b480      	push	{r7}
 801a956:	b083      	sub	sp, #12
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	f103 0208 	add.w	r2, r3, #8
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a96c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	f103 0208 	add.w	r2, r3, #8
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f103 0208 	add.w	r2, r3, #8
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	2200      	movs	r2, #0
 801a986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801a988:	bf00      	nop
 801a98a:	370c      	adds	r7, #12
 801a98c:	46bd      	mov	sp, r7
 801a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a992:	4770      	bx	lr

0801a994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801a994:	b480      	push	{r7}
 801a996:	b083      	sub	sp, #12
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	2200      	movs	r2, #0
 801a9a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801a9a2:	bf00      	nop
 801a9a4:	370c      	adds	r7, #12
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ac:	4770      	bx	lr

0801a9ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a9ae:	b480      	push	{r7}
 801a9b0:	b085      	sub	sp, #20
 801a9b2:	af00      	add	r7, sp, #0
 801a9b4:	6078      	str	r0, [r7, #4]
 801a9b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	685b      	ldr	r3, [r3, #4]
 801a9bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801a9be:	683b      	ldr	r3, [r7, #0]
 801a9c0:	68fa      	ldr	r2, [r7, #12]
 801a9c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	689a      	ldr	r2, [r3, #8]
 801a9c8:	683b      	ldr	r3, [r7, #0]
 801a9ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	689b      	ldr	r3, [r3, #8]
 801a9d0:	683a      	ldr	r2, [r7, #0]
 801a9d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	683a      	ldr	r2, [r7, #0]
 801a9d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a9da:	683b      	ldr	r3, [r7, #0]
 801a9dc:	687a      	ldr	r2, [r7, #4]
 801a9de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	1c5a      	adds	r2, r3, #1
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	601a      	str	r2, [r3, #0]
}
 801a9ea:	bf00      	nop
 801a9ec:	3714      	adds	r7, #20
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f4:	4770      	bx	lr

0801a9f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a9f6:	b480      	push	{r7}
 801a9f8:	b085      	sub	sp, #20
 801a9fa:	af00      	add	r7, sp, #0
 801a9fc:	6078      	str	r0, [r7, #4]
 801a9fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801aa00:	683b      	ldr	r3, [r7, #0]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801aa06:	68bb      	ldr	r3, [r7, #8]
 801aa08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aa0c:	d103      	bne.n	801aa16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	691b      	ldr	r3, [r3, #16]
 801aa12:	60fb      	str	r3, [r7, #12]
 801aa14:	e00c      	b.n	801aa30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	3308      	adds	r3, #8
 801aa1a:	60fb      	str	r3, [r7, #12]
 801aa1c:	e002      	b.n	801aa24 <vListInsert+0x2e>
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	685b      	ldr	r3, [r3, #4]
 801aa22:	60fb      	str	r3, [r7, #12]
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	685b      	ldr	r3, [r3, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	68ba      	ldr	r2, [r7, #8]
 801aa2c:	429a      	cmp	r2, r3
 801aa2e:	d2f6      	bcs.n	801aa1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	685a      	ldr	r2, [r3, #4]
 801aa34:	683b      	ldr	r3, [r7, #0]
 801aa36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	685b      	ldr	r3, [r3, #4]
 801aa3c:	683a      	ldr	r2, [r7, #0]
 801aa3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801aa40:	683b      	ldr	r3, [r7, #0]
 801aa42:	68fa      	ldr	r2, [r7, #12]
 801aa44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	683a      	ldr	r2, [r7, #0]
 801aa4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	687a      	ldr	r2, [r7, #4]
 801aa50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	1c5a      	adds	r2, r3, #1
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	601a      	str	r2, [r3, #0]
}
 801aa5c:	bf00      	nop
 801aa5e:	3714      	adds	r7, #20
 801aa60:	46bd      	mov	sp, r7
 801aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa66:	4770      	bx	lr

0801aa68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801aa68:	b480      	push	{r7}
 801aa6a:	b085      	sub	sp, #20
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	691b      	ldr	r3, [r3, #16]
 801aa74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	685b      	ldr	r3, [r3, #4]
 801aa7a:	687a      	ldr	r2, [r7, #4]
 801aa7c:	6892      	ldr	r2, [r2, #8]
 801aa7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	689b      	ldr	r3, [r3, #8]
 801aa84:	687a      	ldr	r2, [r7, #4]
 801aa86:	6852      	ldr	r2, [r2, #4]
 801aa88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	685b      	ldr	r3, [r3, #4]
 801aa8e:	687a      	ldr	r2, [r7, #4]
 801aa90:	429a      	cmp	r2, r3
 801aa92:	d103      	bne.n	801aa9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	689a      	ldr	r2, [r3, #8]
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	1e5a      	subs	r2, r3, #1
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	681b      	ldr	r3, [r3, #0]
}
 801aab0:	4618      	mov	r0, r3
 801aab2:	3714      	adds	r7, #20
 801aab4:	46bd      	mov	sp, r7
 801aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaba:	4770      	bx	lr

0801aabc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b084      	sub	sp, #16
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d10a      	bne.n	801aae6 <xQueueGenericReset+0x2a>
	__asm volatile
 801aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aad4:	f383 8811 	msr	BASEPRI, r3
 801aad8:	f3bf 8f6f 	isb	sy
 801aadc:	f3bf 8f4f 	dsb	sy
 801aae0:	60bb      	str	r3, [r7, #8]
}
 801aae2:	bf00      	nop
 801aae4:	e7fe      	b.n	801aae4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801aae6:	f002 fbc5 	bl	801d274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801aaea:	68fb      	ldr	r3, [r7, #12]
 801aaec:	681a      	ldr	r2, [r3, #0]
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aaf2:	68f9      	ldr	r1, [r7, #12]
 801aaf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801aaf6:	fb01 f303 	mul.w	r3, r1, r3
 801aafa:	441a      	add	r2, r3
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	2200      	movs	r2, #0
 801ab04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	681a      	ldr	r2, [r3, #0]
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	681a      	ldr	r2, [r3, #0]
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab16:	3b01      	subs	r3, #1
 801ab18:	68f9      	ldr	r1, [r7, #12]
 801ab1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ab1c:	fb01 f303 	mul.w	r3, r1, r3
 801ab20:	441a      	add	r2, r3
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	22ff      	movs	r2, #255	; 0xff
 801ab2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	22ff      	movs	r2, #255	; 0xff
 801ab32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d114      	bne.n	801ab66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	691b      	ldr	r3, [r3, #16]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d01a      	beq.n	801ab7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	3310      	adds	r3, #16
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f001 fad3 	bl	801c0f4 <xTaskRemoveFromEventList>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d012      	beq.n	801ab7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801ab54:	4b0c      	ldr	r3, [pc, #48]	; (801ab88 <xQueueGenericReset+0xcc>)
 801ab56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ab5a:	601a      	str	r2, [r3, #0]
 801ab5c:	f3bf 8f4f 	dsb	sy
 801ab60:	f3bf 8f6f 	isb	sy
 801ab64:	e009      	b.n	801ab7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	3310      	adds	r3, #16
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7ff fef2 	bl	801a954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	3324      	adds	r3, #36	; 0x24
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7ff feed 	bl	801a954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801ab7a:	f002 fbab 	bl	801d2d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801ab7e:	2301      	movs	r3, #1
}
 801ab80:	4618      	mov	r0, r3
 801ab82:	3710      	adds	r7, #16
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}
 801ab88:	e000ed04 	.word	0xe000ed04

0801ab8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b08e      	sub	sp, #56	; 0x38
 801ab90:	af02      	add	r7, sp, #8
 801ab92:	60f8      	str	r0, [r7, #12]
 801ab94:	60b9      	str	r1, [r7, #8]
 801ab96:	607a      	str	r2, [r7, #4]
 801ab98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d10a      	bne.n	801abb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aba4:	f383 8811 	msr	BASEPRI, r3
 801aba8:	f3bf 8f6f 	isb	sy
 801abac:	f3bf 8f4f 	dsb	sy
 801abb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801abb2:	bf00      	nop
 801abb4:	e7fe      	b.n	801abb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d10a      	bne.n	801abd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abc0:	f383 8811 	msr	BASEPRI, r3
 801abc4:	f3bf 8f6f 	isb	sy
 801abc8:	f3bf 8f4f 	dsb	sy
 801abcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 801abce:	bf00      	nop
 801abd0:	e7fe      	b.n	801abd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d002      	beq.n	801abde <xQueueGenericCreateStatic+0x52>
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d001      	beq.n	801abe2 <xQueueGenericCreateStatic+0x56>
 801abde:	2301      	movs	r3, #1
 801abe0:	e000      	b.n	801abe4 <xQueueGenericCreateStatic+0x58>
 801abe2:	2300      	movs	r3, #0
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d10a      	bne.n	801abfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abec:	f383 8811 	msr	BASEPRI, r3
 801abf0:	f3bf 8f6f 	isb	sy
 801abf4:	f3bf 8f4f 	dsb	sy
 801abf8:	623b      	str	r3, [r7, #32]
}
 801abfa:	bf00      	nop
 801abfc:	e7fe      	b.n	801abfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d102      	bne.n	801ac0a <xQueueGenericCreateStatic+0x7e>
 801ac04:	68bb      	ldr	r3, [r7, #8]
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d101      	bne.n	801ac0e <xQueueGenericCreateStatic+0x82>
 801ac0a:	2301      	movs	r3, #1
 801ac0c:	e000      	b.n	801ac10 <xQueueGenericCreateStatic+0x84>
 801ac0e:	2300      	movs	r3, #0
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d10a      	bne.n	801ac2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac18:	f383 8811 	msr	BASEPRI, r3
 801ac1c:	f3bf 8f6f 	isb	sy
 801ac20:	f3bf 8f4f 	dsb	sy
 801ac24:	61fb      	str	r3, [r7, #28]
}
 801ac26:	bf00      	nop
 801ac28:	e7fe      	b.n	801ac28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801ac2a:	2350      	movs	r3, #80	; 0x50
 801ac2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801ac2e:	697b      	ldr	r3, [r7, #20]
 801ac30:	2b50      	cmp	r3, #80	; 0x50
 801ac32:	d00a      	beq.n	801ac4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac38:	f383 8811 	msr	BASEPRI, r3
 801ac3c:	f3bf 8f6f 	isb	sy
 801ac40:	f3bf 8f4f 	dsb	sy
 801ac44:	61bb      	str	r3, [r7, #24]
}
 801ac46:	bf00      	nop
 801ac48:	e7fe      	b.n	801ac48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801ac4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ac4c:	683b      	ldr	r3, [r7, #0]
 801ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d00d      	beq.n	801ac72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac58:	2201      	movs	r2, #1
 801ac5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ac5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac64:	9300      	str	r3, [sp, #0]
 801ac66:	4613      	mov	r3, r2
 801ac68:	687a      	ldr	r2, [r7, #4]
 801ac6a:	68b9      	ldr	r1, [r7, #8]
 801ac6c:	68f8      	ldr	r0, [r7, #12]
 801ac6e:	f000 f83f 	bl	801acf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801ac74:	4618      	mov	r0, r3
 801ac76:	3730      	adds	r7, #48	; 0x30
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	bd80      	pop	{r7, pc}

0801ac7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b08a      	sub	sp, #40	; 0x28
 801ac80:	af02      	add	r7, sp, #8
 801ac82:	60f8      	str	r0, [r7, #12]
 801ac84:	60b9      	str	r1, [r7, #8]
 801ac86:	4613      	mov	r3, r2
 801ac88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d10a      	bne.n	801aca6 <xQueueGenericCreate+0x2a>
	__asm volatile
 801ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac94:	f383 8811 	msr	BASEPRI, r3
 801ac98:	f3bf 8f6f 	isb	sy
 801ac9c:	f3bf 8f4f 	dsb	sy
 801aca0:	613b      	str	r3, [r7, #16]
}
 801aca2:	bf00      	nop
 801aca4:	e7fe      	b.n	801aca4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	68ba      	ldr	r2, [r7, #8]
 801acaa:	fb02 f303 	mul.w	r3, r2, r3
 801acae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801acb0:	69fb      	ldr	r3, [r7, #28]
 801acb2:	3350      	adds	r3, #80	; 0x50
 801acb4:	4618      	mov	r0, r3
 801acb6:	f002 fbff 	bl	801d4b8 <pvPortMalloc>
 801acba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801acbc:	69bb      	ldr	r3, [r7, #24]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d011      	beq.n	801ace6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801acc2:	69bb      	ldr	r3, [r7, #24]
 801acc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	3350      	adds	r3, #80	; 0x50
 801acca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801accc:	69bb      	ldr	r3, [r7, #24]
 801acce:	2200      	movs	r2, #0
 801acd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801acd4:	79fa      	ldrb	r2, [r7, #7]
 801acd6:	69bb      	ldr	r3, [r7, #24]
 801acd8:	9300      	str	r3, [sp, #0]
 801acda:	4613      	mov	r3, r2
 801acdc:	697a      	ldr	r2, [r7, #20]
 801acde:	68b9      	ldr	r1, [r7, #8]
 801ace0:	68f8      	ldr	r0, [r7, #12]
 801ace2:	f000 f805 	bl	801acf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ace6:	69bb      	ldr	r3, [r7, #24]
	}
 801ace8:	4618      	mov	r0, r3
 801acea:	3720      	adds	r7, #32
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}

0801acf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b084      	sub	sp, #16
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	60f8      	str	r0, [r7, #12]
 801acf8:	60b9      	str	r1, [r7, #8]
 801acfa:	607a      	str	r2, [r7, #4]
 801acfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801acfe:	68bb      	ldr	r3, [r7, #8]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d103      	bne.n	801ad0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801ad04:	69bb      	ldr	r3, [r7, #24]
 801ad06:	69ba      	ldr	r2, [r7, #24]
 801ad08:	601a      	str	r2, [r3, #0]
 801ad0a:	e002      	b.n	801ad12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ad0c:	69bb      	ldr	r3, [r7, #24]
 801ad0e:	687a      	ldr	r2, [r7, #4]
 801ad10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ad12:	69bb      	ldr	r3, [r7, #24]
 801ad14:	68fa      	ldr	r2, [r7, #12]
 801ad16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801ad18:	69bb      	ldr	r3, [r7, #24]
 801ad1a:	68ba      	ldr	r2, [r7, #8]
 801ad1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801ad1e:	2101      	movs	r1, #1
 801ad20:	69b8      	ldr	r0, [r7, #24]
 801ad22:	f7ff fecb 	bl	801aabc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801ad26:	69bb      	ldr	r3, [r7, #24]
 801ad28:	78fa      	ldrb	r2, [r7, #3]
 801ad2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ad2e:	bf00      	nop
 801ad30:	3710      	adds	r7, #16
 801ad32:	46bd      	mov	sp, r7
 801ad34:	bd80      	pop	{r7, pc}
	...

0801ad38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b08e      	sub	sp, #56	; 0x38
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	60f8      	str	r0, [r7, #12]
 801ad40:	60b9      	str	r1, [r7, #8]
 801ad42:	607a      	str	r2, [r7, #4]
 801ad44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801ad46:	2300      	movs	r3, #0
 801ad48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d10a      	bne.n	801ad6a <xQueueGenericSend+0x32>
	__asm volatile
 801ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad58:	f383 8811 	msr	BASEPRI, r3
 801ad5c:	f3bf 8f6f 	isb	sy
 801ad60:	f3bf 8f4f 	dsb	sy
 801ad64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801ad66:	bf00      	nop
 801ad68:	e7fe      	b.n	801ad68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ad6a:	68bb      	ldr	r3, [r7, #8]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d103      	bne.n	801ad78 <xQueueGenericSend+0x40>
 801ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d101      	bne.n	801ad7c <xQueueGenericSend+0x44>
 801ad78:	2301      	movs	r3, #1
 801ad7a:	e000      	b.n	801ad7e <xQueueGenericSend+0x46>
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d10a      	bne.n	801ad98 <xQueueGenericSend+0x60>
	__asm volatile
 801ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad86:	f383 8811 	msr	BASEPRI, r3
 801ad8a:	f3bf 8f6f 	isb	sy
 801ad8e:	f3bf 8f4f 	dsb	sy
 801ad92:	627b      	str	r3, [r7, #36]	; 0x24
}
 801ad94:	bf00      	nop
 801ad96:	e7fe      	b.n	801ad96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ad98:	683b      	ldr	r3, [r7, #0]
 801ad9a:	2b02      	cmp	r3, #2
 801ad9c:	d103      	bne.n	801ada6 <xQueueGenericSend+0x6e>
 801ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ada2:	2b01      	cmp	r3, #1
 801ada4:	d101      	bne.n	801adaa <xQueueGenericSend+0x72>
 801ada6:	2301      	movs	r3, #1
 801ada8:	e000      	b.n	801adac <xQueueGenericSend+0x74>
 801adaa:	2300      	movs	r3, #0
 801adac:	2b00      	cmp	r3, #0
 801adae:	d10a      	bne.n	801adc6 <xQueueGenericSend+0x8e>
	__asm volatile
 801adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adb4:	f383 8811 	msr	BASEPRI, r3
 801adb8:	f3bf 8f6f 	isb	sy
 801adbc:	f3bf 8f4f 	dsb	sy
 801adc0:	623b      	str	r3, [r7, #32]
}
 801adc2:	bf00      	nop
 801adc4:	e7fe      	b.n	801adc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801adc6:	f001 fbb7 	bl	801c538 <xTaskGetSchedulerState>
 801adca:	4603      	mov	r3, r0
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d102      	bne.n	801add6 <xQueueGenericSend+0x9e>
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d101      	bne.n	801adda <xQueueGenericSend+0xa2>
 801add6:	2301      	movs	r3, #1
 801add8:	e000      	b.n	801addc <xQueueGenericSend+0xa4>
 801adda:	2300      	movs	r3, #0
 801addc:	2b00      	cmp	r3, #0
 801adde:	d10a      	bne.n	801adf6 <xQueueGenericSend+0xbe>
	__asm volatile
 801ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ade4:	f383 8811 	msr	BASEPRI, r3
 801ade8:	f3bf 8f6f 	isb	sy
 801adec:	f3bf 8f4f 	dsb	sy
 801adf0:	61fb      	str	r3, [r7, #28]
}
 801adf2:	bf00      	nop
 801adf4:	e7fe      	b.n	801adf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801adf6:	f002 fa3d 	bl	801d274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae02:	429a      	cmp	r2, r3
 801ae04:	d302      	bcc.n	801ae0c <xQueueGenericSend+0xd4>
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	2b02      	cmp	r3, #2
 801ae0a:	d129      	bne.n	801ae60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ae0c:	683a      	ldr	r2, [r7, #0]
 801ae0e:	68b9      	ldr	r1, [r7, #8]
 801ae10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ae12:	f000 fa97 	bl	801b344 <prvCopyDataToQueue>
 801ae16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d010      	beq.n	801ae42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae22:	3324      	adds	r3, #36	; 0x24
 801ae24:	4618      	mov	r0, r3
 801ae26:	f001 f965 	bl	801c0f4 <xTaskRemoveFromEventList>
 801ae2a:	4603      	mov	r3, r0
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d013      	beq.n	801ae58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801ae30:	4b3f      	ldr	r3, [pc, #252]	; (801af30 <xQueueGenericSend+0x1f8>)
 801ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ae36:	601a      	str	r2, [r3, #0]
 801ae38:	f3bf 8f4f 	dsb	sy
 801ae3c:	f3bf 8f6f 	isb	sy
 801ae40:	e00a      	b.n	801ae58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d007      	beq.n	801ae58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801ae48:	4b39      	ldr	r3, [pc, #228]	; (801af30 <xQueueGenericSend+0x1f8>)
 801ae4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ae4e:	601a      	str	r2, [r3, #0]
 801ae50:	f3bf 8f4f 	dsb	sy
 801ae54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801ae58:	f002 fa3c 	bl	801d2d4 <vPortExitCritical>
				return pdPASS;
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	e063      	b.n	801af28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d103      	bne.n	801ae6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ae66:	f002 fa35 	bl	801d2d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	e05c      	b.n	801af28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ae6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d106      	bne.n	801ae82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ae74:	f107 0314 	add.w	r3, r7, #20
 801ae78:	4618      	mov	r0, r3
 801ae7a:	f001 f9ff 	bl	801c27c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ae7e:	2301      	movs	r3, #1
 801ae80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ae82:	f002 fa27 	bl	801d2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ae86:	f000 fea9 	bl	801bbdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ae8a:	f002 f9f3 	bl	801d274 <vPortEnterCritical>
 801ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ae94:	b25b      	sxtb	r3, r3
 801ae96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ae9a:	d103      	bne.n	801aea4 <xQueueGenericSend+0x16c>
 801ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae9e:	2200      	movs	r2, #0
 801aea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aeaa:	b25b      	sxtb	r3, r3
 801aeac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aeb0:	d103      	bne.n	801aeba <xQueueGenericSend+0x182>
 801aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb4:	2200      	movs	r2, #0
 801aeb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801aeba:	f002 fa0b 	bl	801d2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801aebe:	1d3a      	adds	r2, r7, #4
 801aec0:	f107 0314 	add.w	r3, r7, #20
 801aec4:	4611      	mov	r1, r2
 801aec6:	4618      	mov	r0, r3
 801aec8:	f001 f9ee 	bl	801c2a8 <xTaskCheckForTimeOut>
 801aecc:	4603      	mov	r3, r0
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d124      	bne.n	801af1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801aed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aed4:	f000 fb2e 	bl	801b534 <prvIsQueueFull>
 801aed8:	4603      	mov	r3, r0
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d018      	beq.n	801af10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee0:	3310      	adds	r3, #16
 801aee2:	687a      	ldr	r2, [r7, #4]
 801aee4:	4611      	mov	r1, r2
 801aee6:	4618      	mov	r0, r3
 801aee8:	f001 f878 	bl	801bfdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801aeec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aeee:	f000 fab9 	bl	801b464 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801aef2:	f000 fe81 	bl	801bbf8 <xTaskResumeAll>
 801aef6:	4603      	mov	r3, r0
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	f47f af7c 	bne.w	801adf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801aefe:	4b0c      	ldr	r3, [pc, #48]	; (801af30 <xQueueGenericSend+0x1f8>)
 801af00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801af04:	601a      	str	r2, [r3, #0]
 801af06:	f3bf 8f4f 	dsb	sy
 801af0a:	f3bf 8f6f 	isb	sy
 801af0e:	e772      	b.n	801adf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801af10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af12:	f000 faa7 	bl	801b464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801af16:	f000 fe6f 	bl	801bbf8 <xTaskResumeAll>
 801af1a:	e76c      	b.n	801adf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801af1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af1e:	f000 faa1 	bl	801b464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801af22:	f000 fe69 	bl	801bbf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801af26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801af28:	4618      	mov	r0, r3
 801af2a:	3738      	adds	r7, #56	; 0x38
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}
 801af30:	e000ed04 	.word	0xe000ed04

0801af34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b090      	sub	sp, #64	; 0x40
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	607a      	str	r2, [r7, #4]
 801af40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801af46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d10a      	bne.n	801af62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af50:	f383 8811 	msr	BASEPRI, r3
 801af54:	f3bf 8f6f 	isb	sy
 801af58:	f3bf 8f4f 	dsb	sy
 801af5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801af5e:	bf00      	nop
 801af60:	e7fe      	b.n	801af60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d103      	bne.n	801af70 <xQueueGenericSendFromISR+0x3c>
 801af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d101      	bne.n	801af74 <xQueueGenericSendFromISR+0x40>
 801af70:	2301      	movs	r3, #1
 801af72:	e000      	b.n	801af76 <xQueueGenericSendFromISR+0x42>
 801af74:	2300      	movs	r3, #0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d10a      	bne.n	801af90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af7e:	f383 8811 	msr	BASEPRI, r3
 801af82:	f3bf 8f6f 	isb	sy
 801af86:	f3bf 8f4f 	dsb	sy
 801af8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801af8c:	bf00      	nop
 801af8e:	e7fe      	b.n	801af8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	2b02      	cmp	r3, #2
 801af94:	d103      	bne.n	801af9e <xQueueGenericSendFromISR+0x6a>
 801af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af9a:	2b01      	cmp	r3, #1
 801af9c:	d101      	bne.n	801afa2 <xQueueGenericSendFromISR+0x6e>
 801af9e:	2301      	movs	r3, #1
 801afa0:	e000      	b.n	801afa4 <xQueueGenericSendFromISR+0x70>
 801afa2:	2300      	movs	r3, #0
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d10a      	bne.n	801afbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afac:	f383 8811 	msr	BASEPRI, r3
 801afb0:	f3bf 8f6f 	isb	sy
 801afb4:	f3bf 8f4f 	dsb	sy
 801afb8:	623b      	str	r3, [r7, #32]
}
 801afba:	bf00      	nop
 801afbc:	e7fe      	b.n	801afbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801afbe:	f002 fa3b 	bl	801d438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801afc2:	f3ef 8211 	mrs	r2, BASEPRI
 801afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afca:	f383 8811 	msr	BASEPRI, r3
 801afce:	f3bf 8f6f 	isb	sy
 801afd2:	f3bf 8f4f 	dsb	sy
 801afd6:	61fa      	str	r2, [r7, #28]
 801afd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801afda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801afdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801afe6:	429a      	cmp	r2, r3
 801afe8:	d302      	bcc.n	801aff0 <xQueueGenericSendFromISR+0xbc>
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	2b02      	cmp	r3, #2
 801afee:	d12f      	bne.n	801b050 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801affc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801affe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801b000:	683a      	ldr	r2, [r7, #0]
 801b002:	68b9      	ldr	r1, [r7, #8]
 801b004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b006:	f000 f99d 	bl	801b344 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801b00a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801b00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b012:	d112      	bne.n	801b03a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d016      	beq.n	801b04a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b01e:	3324      	adds	r3, #36	; 0x24
 801b020:	4618      	mov	r0, r3
 801b022:	f001 f867 	bl	801c0f4 <xTaskRemoveFromEventList>
 801b026:	4603      	mov	r3, r0
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d00e      	beq.n	801b04a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d00b      	beq.n	801b04a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	2201      	movs	r2, #1
 801b036:	601a      	str	r2, [r3, #0]
 801b038:	e007      	b.n	801b04a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801b03a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801b03e:	3301      	adds	r3, #1
 801b040:	b2db      	uxtb	r3, r3
 801b042:	b25a      	sxtb	r2, r3
 801b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801b04a:	2301      	movs	r3, #1
 801b04c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801b04e:	e001      	b.n	801b054 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801b050:	2300      	movs	r3, #0
 801b052:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b056:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801b058:	697b      	ldr	r3, [r7, #20]
 801b05a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801b05e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801b060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801b062:	4618      	mov	r0, r3
 801b064:	3740      	adds	r7, #64	; 0x40
 801b066:	46bd      	mov	sp, r7
 801b068:	bd80      	pop	{r7, pc}

0801b06a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801b06a:	b580      	push	{r7, lr}
 801b06c:	b08e      	sub	sp, #56	; 0x38
 801b06e:	af00      	add	r7, sp, #0
 801b070:	6078      	str	r0, [r7, #4]
 801b072:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d10a      	bne.n	801b094 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b082:	f383 8811 	msr	BASEPRI, r3
 801b086:	f3bf 8f6f 	isb	sy
 801b08a:	f3bf 8f4f 	dsb	sy
 801b08e:	623b      	str	r3, [r7, #32]
}
 801b090:	bf00      	nop
 801b092:	e7fe      	b.n	801b092 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d00a      	beq.n	801b0b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 801b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0a0:	f383 8811 	msr	BASEPRI, r3
 801b0a4:	f3bf 8f6f 	isb	sy
 801b0a8:	f3bf 8f4f 	dsb	sy
 801b0ac:	61fb      	str	r3, [r7, #28]
}
 801b0ae:	bf00      	nop
 801b0b0:	e7fe      	b.n	801b0b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d103      	bne.n	801b0c2 <xQueueGiveFromISR+0x58>
 801b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0bc:	689b      	ldr	r3, [r3, #8]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d101      	bne.n	801b0c6 <xQueueGiveFromISR+0x5c>
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	e000      	b.n	801b0c8 <xQueueGiveFromISR+0x5e>
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d10a      	bne.n	801b0e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 801b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0d0:	f383 8811 	msr	BASEPRI, r3
 801b0d4:	f3bf 8f6f 	isb	sy
 801b0d8:	f3bf 8f4f 	dsb	sy
 801b0dc:	61bb      	str	r3, [r7, #24]
}
 801b0de:	bf00      	nop
 801b0e0:	e7fe      	b.n	801b0e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801b0e2:	f002 f9a9 	bl	801d438 <vPortValidateInterruptPriority>
	__asm volatile
 801b0e6:	f3ef 8211 	mrs	r2, BASEPRI
 801b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0ee:	f383 8811 	msr	BASEPRI, r3
 801b0f2:	f3bf 8f6f 	isb	sy
 801b0f6:	f3bf 8f4f 	dsb	sy
 801b0fa:	617a      	str	r2, [r7, #20]
 801b0fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801b0fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801b100:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b106:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b10c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b10e:	429a      	cmp	r2, r3
 801b110:	d22b      	bcs.n	801b16a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b11e:	1c5a      	adds	r2, r3, #1
 801b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b122:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801b124:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801b128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b12c:	d112      	bne.n	801b154 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b132:	2b00      	cmp	r3, #0
 801b134:	d016      	beq.n	801b164 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b138:	3324      	adds	r3, #36	; 0x24
 801b13a:	4618      	mov	r0, r3
 801b13c:	f000 ffda 	bl	801c0f4 <xTaskRemoveFromEventList>
 801b140:	4603      	mov	r3, r0
 801b142:	2b00      	cmp	r3, #0
 801b144:	d00e      	beq.n	801b164 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d00b      	beq.n	801b164 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	2201      	movs	r2, #1
 801b150:	601a      	str	r2, [r3, #0]
 801b152:	e007      	b.n	801b164 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801b154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b158:	3301      	adds	r3, #1
 801b15a:	b2db      	uxtb	r3, r3
 801b15c:	b25a      	sxtb	r2, r3
 801b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801b164:	2301      	movs	r3, #1
 801b166:	637b      	str	r3, [r7, #52]	; 0x34
 801b168:	e001      	b.n	801b16e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801b16a:	2300      	movs	r3, #0
 801b16c:	637b      	str	r3, [r7, #52]	; 0x34
 801b16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b170:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	f383 8811 	msr	BASEPRI, r3
}
 801b178:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801b17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801b17c:	4618      	mov	r0, r3
 801b17e:	3738      	adds	r7, #56	; 0x38
 801b180:	46bd      	mov	sp, r7
 801b182:	bd80      	pop	{r7, pc}

0801b184 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801b184:	b580      	push	{r7, lr}
 801b186:	b08c      	sub	sp, #48	; 0x30
 801b188:	af00      	add	r7, sp, #0
 801b18a:	60f8      	str	r0, [r7, #12]
 801b18c:	60b9      	str	r1, [r7, #8]
 801b18e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801b190:	2300      	movs	r3, #0
 801b192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d10a      	bne.n	801b1b4 <xQueueReceive+0x30>
	__asm volatile
 801b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1a2:	f383 8811 	msr	BASEPRI, r3
 801b1a6:	f3bf 8f6f 	isb	sy
 801b1aa:	f3bf 8f4f 	dsb	sy
 801b1ae:	623b      	str	r3, [r7, #32]
}
 801b1b0:	bf00      	nop
 801b1b2:	e7fe      	b.n	801b1b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801b1b4:	68bb      	ldr	r3, [r7, #8]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d103      	bne.n	801b1c2 <xQueueReceive+0x3e>
 801b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d101      	bne.n	801b1c6 <xQueueReceive+0x42>
 801b1c2:	2301      	movs	r3, #1
 801b1c4:	e000      	b.n	801b1c8 <xQueueReceive+0x44>
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d10a      	bne.n	801b1e2 <xQueueReceive+0x5e>
	__asm volatile
 801b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1d0:	f383 8811 	msr	BASEPRI, r3
 801b1d4:	f3bf 8f6f 	isb	sy
 801b1d8:	f3bf 8f4f 	dsb	sy
 801b1dc:	61fb      	str	r3, [r7, #28]
}
 801b1de:	bf00      	nop
 801b1e0:	e7fe      	b.n	801b1e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801b1e2:	f001 f9a9 	bl	801c538 <xTaskGetSchedulerState>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d102      	bne.n	801b1f2 <xQueueReceive+0x6e>
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d101      	bne.n	801b1f6 <xQueueReceive+0x72>
 801b1f2:	2301      	movs	r3, #1
 801b1f4:	e000      	b.n	801b1f8 <xQueueReceive+0x74>
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d10a      	bne.n	801b212 <xQueueReceive+0x8e>
	__asm volatile
 801b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b200:	f383 8811 	msr	BASEPRI, r3
 801b204:	f3bf 8f6f 	isb	sy
 801b208:	f3bf 8f4f 	dsb	sy
 801b20c:	61bb      	str	r3, [r7, #24]
}
 801b20e:	bf00      	nop
 801b210:	e7fe      	b.n	801b210 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801b212:	f002 f82f 	bl	801d274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b21a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d01f      	beq.n	801b262 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801b222:	68b9      	ldr	r1, [r7, #8]
 801b224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b226:	f000 f8f7 	bl	801b418 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22c:	1e5a      	subs	r2, r3, #1
 801b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b230:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b234:	691b      	ldr	r3, [r3, #16]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d00f      	beq.n	801b25a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b23c:	3310      	adds	r3, #16
 801b23e:	4618      	mov	r0, r3
 801b240:	f000 ff58 	bl	801c0f4 <xTaskRemoveFromEventList>
 801b244:	4603      	mov	r3, r0
 801b246:	2b00      	cmp	r3, #0
 801b248:	d007      	beq.n	801b25a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801b24a:	4b3d      	ldr	r3, [pc, #244]	; (801b340 <xQueueReceive+0x1bc>)
 801b24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b250:	601a      	str	r2, [r3, #0]
 801b252:	f3bf 8f4f 	dsb	sy
 801b256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801b25a:	f002 f83b 	bl	801d2d4 <vPortExitCritical>
				return pdPASS;
 801b25e:	2301      	movs	r3, #1
 801b260:	e069      	b.n	801b336 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d103      	bne.n	801b270 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801b268:	f002 f834 	bl	801d2d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801b26c:	2300      	movs	r3, #0
 801b26e:	e062      	b.n	801b336 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801b270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b272:	2b00      	cmp	r3, #0
 801b274:	d106      	bne.n	801b284 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801b276:	f107 0310 	add.w	r3, r7, #16
 801b27a:	4618      	mov	r0, r3
 801b27c:	f000 fffe 	bl	801c27c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801b280:	2301      	movs	r3, #1
 801b282:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801b284:	f002 f826 	bl	801d2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801b288:	f000 fca8 	bl	801bbdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801b28c:	f001 fff2 	bl	801d274 <vPortEnterCritical>
 801b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b296:	b25b      	sxtb	r3, r3
 801b298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b29c:	d103      	bne.n	801b2a6 <xQueueReceive+0x122>
 801b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2a0:	2200      	movs	r2, #0
 801b2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b2ac:	b25b      	sxtb	r3, r3
 801b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b2b2:	d103      	bne.n	801b2bc <xQueueReceive+0x138>
 801b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b2bc:	f002 f80a 	bl	801d2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801b2c0:	1d3a      	adds	r2, r7, #4
 801b2c2:	f107 0310 	add.w	r3, r7, #16
 801b2c6:	4611      	mov	r1, r2
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f000 ffed 	bl	801c2a8 <xTaskCheckForTimeOut>
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d123      	bne.n	801b31c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801b2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b2d6:	f000 f917 	bl	801b508 <prvIsQueueEmpty>
 801b2da:	4603      	mov	r3, r0
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d017      	beq.n	801b310 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801b2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2e2:	3324      	adds	r3, #36	; 0x24
 801b2e4:	687a      	ldr	r2, [r7, #4]
 801b2e6:	4611      	mov	r1, r2
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	f000 fe77 	bl	801bfdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801b2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b2f0:	f000 f8b8 	bl	801b464 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801b2f4:	f000 fc80 	bl	801bbf8 <xTaskResumeAll>
 801b2f8:	4603      	mov	r3, r0
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d189      	bne.n	801b212 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801b2fe:	4b10      	ldr	r3, [pc, #64]	; (801b340 <xQueueReceive+0x1bc>)
 801b300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b304:	601a      	str	r2, [r3, #0]
 801b306:	f3bf 8f4f 	dsb	sy
 801b30a:	f3bf 8f6f 	isb	sy
 801b30e:	e780      	b.n	801b212 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801b310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b312:	f000 f8a7 	bl	801b464 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801b316:	f000 fc6f 	bl	801bbf8 <xTaskResumeAll>
 801b31a:	e77a      	b.n	801b212 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801b31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b31e:	f000 f8a1 	bl	801b464 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801b322:	f000 fc69 	bl	801bbf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801b326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b328:	f000 f8ee 	bl	801b508 <prvIsQueueEmpty>
 801b32c:	4603      	mov	r3, r0
 801b32e:	2b00      	cmp	r3, #0
 801b330:	f43f af6f 	beq.w	801b212 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801b334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801b336:	4618      	mov	r0, r3
 801b338:	3730      	adds	r7, #48	; 0x30
 801b33a:	46bd      	mov	sp, r7
 801b33c:	bd80      	pop	{r7, pc}
 801b33e:	bf00      	nop
 801b340:	e000ed04 	.word	0xe000ed04

0801b344 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b086      	sub	sp, #24
 801b348:	af00      	add	r7, sp, #0
 801b34a:	60f8      	str	r0, [r7, #12]
 801b34c:	60b9      	str	r1, [r7, #8]
 801b34e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801b350:	2300      	movs	r3, #0
 801b352:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b358:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d10d      	bne.n	801b37e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d14d      	bne.n	801b406 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	689b      	ldr	r3, [r3, #8]
 801b36e:	4618      	mov	r0, r3
 801b370:	f001 f900 	bl	801c574 <xTaskPriorityDisinherit>
 801b374:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	2200      	movs	r2, #0
 801b37a:	609a      	str	r2, [r3, #8]
 801b37c:	e043      	b.n	801b406 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d119      	bne.n	801b3b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	6858      	ldr	r0, [r3, #4]
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b38c:	461a      	mov	r2, r3
 801b38e:	68b9      	ldr	r1, [r7, #8]
 801b390:	f003 f8e1 	bl	801e556 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	685a      	ldr	r2, [r3, #4]
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b39c:	441a      	add	r2, r3
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	685a      	ldr	r2, [r3, #4]
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	689b      	ldr	r3, [r3, #8]
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	d32b      	bcc.n	801b406 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	681a      	ldr	r2, [r3, #0]
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	605a      	str	r2, [r3, #4]
 801b3b6:	e026      	b.n	801b406 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	68d8      	ldr	r0, [r3, #12]
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3c0:	461a      	mov	r2, r3
 801b3c2:	68b9      	ldr	r1, [r7, #8]
 801b3c4:	f003 f8c7 	bl	801e556 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	68da      	ldr	r2, [r3, #12]
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3d0:	425b      	negs	r3, r3
 801b3d2:	441a      	add	r2, r3
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	68da      	ldr	r2, [r3, #12]
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	429a      	cmp	r2, r3
 801b3e2:	d207      	bcs.n	801b3f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	689a      	ldr	r2, [r3, #8]
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3ec:	425b      	negs	r3, r3
 801b3ee:	441a      	add	r2, r3
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	2b02      	cmp	r3, #2
 801b3f8:	d105      	bne.n	801b406 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801b3fa:	693b      	ldr	r3, [r7, #16]
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d002      	beq.n	801b406 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801b400:	693b      	ldr	r3, [r7, #16]
 801b402:	3b01      	subs	r3, #1
 801b404:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801b406:	693b      	ldr	r3, [r7, #16]
 801b408:	1c5a      	adds	r2, r3, #1
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801b40e:	697b      	ldr	r3, [r7, #20]
}
 801b410:	4618      	mov	r0, r3
 801b412:	3718      	adds	r7, #24
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}

0801b418 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b082      	sub	sp, #8
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
 801b420:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b426:	2b00      	cmp	r3, #0
 801b428:	d018      	beq.n	801b45c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	68da      	ldr	r2, [r3, #12]
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b432:	441a      	add	r2, r3
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	68da      	ldr	r2, [r3, #12]
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	689b      	ldr	r3, [r3, #8]
 801b440:	429a      	cmp	r2, r3
 801b442:	d303      	bcc.n	801b44c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	681a      	ldr	r2, [r3, #0]
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	68d9      	ldr	r1, [r3, #12]
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b454:	461a      	mov	r2, r3
 801b456:	6838      	ldr	r0, [r7, #0]
 801b458:	f003 f87d 	bl	801e556 <memcpy>
	}
}
 801b45c:	bf00      	nop
 801b45e:	3708      	adds	r7, #8
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}

0801b464 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b084      	sub	sp, #16
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801b46c:	f001 ff02 	bl	801d274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b476:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b478:	e011      	b.n	801b49e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d012      	beq.n	801b4a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	3324      	adds	r3, #36	; 0x24
 801b486:	4618      	mov	r0, r3
 801b488:	f000 fe34 	bl	801c0f4 <xTaskRemoveFromEventList>
 801b48c:	4603      	mov	r3, r0
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d001      	beq.n	801b496 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801b492:	f000 ff6b 	bl	801c36c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801b496:	7bfb      	ldrb	r3, [r7, #15]
 801b498:	3b01      	subs	r3, #1
 801b49a:	b2db      	uxtb	r3, r3
 801b49c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801b49e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	dce9      	bgt.n	801b47a <prvUnlockQueue+0x16>
 801b4a6:	e000      	b.n	801b4aa <prvUnlockQueue+0x46>
					break;
 801b4a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	22ff      	movs	r2, #255	; 0xff
 801b4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801b4b2:	f001 ff0f 	bl	801d2d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801b4b6:	f001 fedd 	bl	801d274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b4c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b4c2:	e011      	b.n	801b4e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	691b      	ldr	r3, [r3, #16]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d012      	beq.n	801b4f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	3310      	adds	r3, #16
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	f000 fe0f 	bl	801c0f4 <xTaskRemoveFromEventList>
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d001      	beq.n	801b4e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801b4dc:	f000 ff46 	bl	801c36c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801b4e0:	7bbb      	ldrb	r3, [r7, #14]
 801b4e2:	3b01      	subs	r3, #1
 801b4e4:	b2db      	uxtb	r3, r3
 801b4e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b4e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	dce9      	bgt.n	801b4c4 <prvUnlockQueue+0x60>
 801b4f0:	e000      	b.n	801b4f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801b4f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	22ff      	movs	r2, #255	; 0xff
 801b4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801b4fc:	f001 feea 	bl	801d2d4 <vPortExitCritical>
}
 801b500:	bf00      	nop
 801b502:	3710      	adds	r7, #16
 801b504:	46bd      	mov	sp, r7
 801b506:	bd80      	pop	{r7, pc}

0801b508 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b084      	sub	sp, #16
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b510:	f001 feb0 	bl	801d274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d102      	bne.n	801b522 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801b51c:	2301      	movs	r3, #1
 801b51e:	60fb      	str	r3, [r7, #12]
 801b520:	e001      	b.n	801b526 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801b522:	2300      	movs	r3, #0
 801b524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b526:	f001 fed5 	bl	801d2d4 <vPortExitCritical>

	return xReturn;
 801b52a:	68fb      	ldr	r3, [r7, #12]
}
 801b52c:	4618      	mov	r0, r3
 801b52e:	3710      	adds	r7, #16
 801b530:	46bd      	mov	sp, r7
 801b532:	bd80      	pop	{r7, pc}

0801b534 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b084      	sub	sp, #16
 801b538:	af00      	add	r7, sp, #0
 801b53a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b53c:	f001 fe9a 	bl	801d274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b548:	429a      	cmp	r2, r3
 801b54a:	d102      	bne.n	801b552 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801b54c:	2301      	movs	r3, #1
 801b54e:	60fb      	str	r3, [r7, #12]
 801b550:	e001      	b.n	801b556 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801b552:	2300      	movs	r3, #0
 801b554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b556:	f001 febd 	bl	801d2d4 <vPortExitCritical>

	return xReturn;
 801b55a:	68fb      	ldr	r3, [r7, #12]
}
 801b55c:	4618      	mov	r0, r3
 801b55e:	3710      	adds	r7, #16
 801b560:	46bd      	mov	sp, r7
 801b562:	bd80      	pop	{r7, pc}

0801b564 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801b564:	b480      	push	{r7}
 801b566:	b085      	sub	sp, #20
 801b568:	af00      	add	r7, sp, #0
 801b56a:	6078      	str	r0, [r7, #4]
 801b56c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b56e:	2300      	movs	r3, #0
 801b570:	60fb      	str	r3, [r7, #12]
 801b572:	e014      	b.n	801b59e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801b574:	4a0f      	ldr	r2, [pc, #60]	; (801b5b4 <vQueueAddToRegistry+0x50>)
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d10b      	bne.n	801b598 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801b580:	490c      	ldr	r1, [pc, #48]	; (801b5b4 <vQueueAddToRegistry+0x50>)
 801b582:	68fb      	ldr	r3, [r7, #12]
 801b584:	683a      	ldr	r2, [r7, #0]
 801b586:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801b58a:	4a0a      	ldr	r2, [pc, #40]	; (801b5b4 <vQueueAddToRegistry+0x50>)
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	00db      	lsls	r3, r3, #3
 801b590:	4413      	add	r3, r2
 801b592:	687a      	ldr	r2, [r7, #4]
 801b594:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801b596:	e006      	b.n	801b5a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	3301      	adds	r3, #1
 801b59c:	60fb      	str	r3, [r7, #12]
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	2b07      	cmp	r3, #7
 801b5a2:	d9e7      	bls.n	801b574 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b5a4:	bf00      	nop
 801b5a6:	bf00      	nop
 801b5a8:	3714      	adds	r7, #20
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b0:	4770      	bx	lr
 801b5b2:	bf00      	nop
 801b5b4:	200038d8 	.word	0x200038d8

0801b5b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b086      	sub	sp, #24
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	60f8      	str	r0, [r7, #12]
 801b5c0:	60b9      	str	r1, [r7, #8]
 801b5c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801b5c8:	f001 fe54 	bl	801d274 <vPortEnterCritical>
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b5d2:	b25b      	sxtb	r3, r3
 801b5d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b5d8:	d103      	bne.n	801b5e2 <vQueueWaitForMessageRestricted+0x2a>
 801b5da:	697b      	ldr	r3, [r7, #20]
 801b5dc:	2200      	movs	r2, #0
 801b5de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b5e2:	697b      	ldr	r3, [r7, #20]
 801b5e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b5e8:	b25b      	sxtb	r3, r3
 801b5ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b5ee:	d103      	bne.n	801b5f8 <vQueueWaitForMessageRestricted+0x40>
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	2200      	movs	r2, #0
 801b5f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b5f8:	f001 fe6c 	bl	801d2d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801b5fc:	697b      	ldr	r3, [r7, #20]
 801b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b600:	2b00      	cmp	r3, #0
 801b602:	d106      	bne.n	801b612 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	3324      	adds	r3, #36	; 0x24
 801b608:	687a      	ldr	r2, [r7, #4]
 801b60a:	68b9      	ldr	r1, [r7, #8]
 801b60c:	4618      	mov	r0, r3
 801b60e:	f000 fd45 	bl	801c09c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801b612:	6978      	ldr	r0, [r7, #20]
 801b614:	f7ff ff26 	bl	801b464 <prvUnlockQueue>
	}
 801b618:	bf00      	nop
 801b61a:	3718      	adds	r7, #24
 801b61c:	46bd      	mov	sp, r7
 801b61e:	bd80      	pop	{r7, pc}

0801b620 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801b620:	b580      	push	{r7, lr}
 801b622:	b08e      	sub	sp, #56	; 0x38
 801b624:	af04      	add	r7, sp, #16
 801b626:	60f8      	str	r0, [r7, #12]
 801b628:	60b9      	str	r1, [r7, #8]
 801b62a:	607a      	str	r2, [r7, #4]
 801b62c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b630:	2b00      	cmp	r3, #0
 801b632:	d10a      	bne.n	801b64a <xTaskCreateStatic+0x2a>
	__asm volatile
 801b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b638:	f383 8811 	msr	BASEPRI, r3
 801b63c:	f3bf 8f6f 	isb	sy
 801b640:	f3bf 8f4f 	dsb	sy
 801b644:	623b      	str	r3, [r7, #32]
}
 801b646:	bf00      	nop
 801b648:	e7fe      	b.n	801b648 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d10a      	bne.n	801b666 <xTaskCreateStatic+0x46>
	__asm volatile
 801b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b654:	f383 8811 	msr	BASEPRI, r3
 801b658:	f3bf 8f6f 	isb	sy
 801b65c:	f3bf 8f4f 	dsb	sy
 801b660:	61fb      	str	r3, [r7, #28]
}
 801b662:	bf00      	nop
 801b664:	e7fe      	b.n	801b664 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801b666:	23c0      	movs	r3, #192	; 0xc0
 801b668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801b66a:	693b      	ldr	r3, [r7, #16]
 801b66c:	2bc0      	cmp	r3, #192	; 0xc0
 801b66e:	d00a      	beq.n	801b686 <xTaskCreateStatic+0x66>
	__asm volatile
 801b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b674:	f383 8811 	msr	BASEPRI, r3
 801b678:	f3bf 8f6f 	isb	sy
 801b67c:	f3bf 8f4f 	dsb	sy
 801b680:	61bb      	str	r3, [r7, #24]
}
 801b682:	bf00      	nop
 801b684:	e7fe      	b.n	801b684 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801b686:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d01e      	beq.n	801b6cc <xTaskCreateStatic+0xac>
 801b68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b690:	2b00      	cmp	r3, #0
 801b692:	d01b      	beq.n	801b6cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b696:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b69a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b69c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6a0:	2202      	movs	r2, #2
 801b6a2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	9303      	str	r3, [sp, #12]
 801b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ac:	9302      	str	r3, [sp, #8]
 801b6ae:	f107 0314 	add.w	r3, r7, #20
 801b6b2:	9301      	str	r3, [sp, #4]
 801b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6b6:	9300      	str	r3, [sp, #0]
 801b6b8:	683b      	ldr	r3, [r7, #0]
 801b6ba:	687a      	ldr	r2, [r7, #4]
 801b6bc:	68b9      	ldr	r1, [r7, #8]
 801b6be:	68f8      	ldr	r0, [r7, #12]
 801b6c0:	f000 f850 	bl	801b764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b6c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b6c6:	f000 f8f7 	bl	801b8b8 <prvAddNewTaskToReadyList>
 801b6ca:	e001      	b.n	801b6d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801b6cc:	2300      	movs	r3, #0
 801b6ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801b6d0:	697b      	ldr	r3, [r7, #20]
	}
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	3728      	adds	r7, #40	; 0x28
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	bd80      	pop	{r7, pc}

0801b6da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801b6da:	b580      	push	{r7, lr}
 801b6dc:	b08c      	sub	sp, #48	; 0x30
 801b6de:	af04      	add	r7, sp, #16
 801b6e0:	60f8      	str	r0, [r7, #12]
 801b6e2:	60b9      	str	r1, [r7, #8]
 801b6e4:	603b      	str	r3, [r7, #0]
 801b6e6:	4613      	mov	r3, r2
 801b6e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801b6ea:	88fb      	ldrh	r3, [r7, #6]
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f001 fee2 	bl	801d4b8 <pvPortMalloc>
 801b6f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801b6f6:	697b      	ldr	r3, [r7, #20]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d00e      	beq.n	801b71a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801b6fc:	20c0      	movs	r0, #192	; 0xc0
 801b6fe:	f001 fedb 	bl	801d4b8 <pvPortMalloc>
 801b702:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801b704:	69fb      	ldr	r3, [r7, #28]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d003      	beq.n	801b712 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801b70a:	69fb      	ldr	r3, [r7, #28]
 801b70c:	697a      	ldr	r2, [r7, #20]
 801b70e:	631a      	str	r2, [r3, #48]	; 0x30
 801b710:	e005      	b.n	801b71e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801b712:	6978      	ldr	r0, [r7, #20]
 801b714:	f001 ff9c 	bl	801d650 <vPortFree>
 801b718:	e001      	b.n	801b71e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801b71a:	2300      	movs	r3, #0
 801b71c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801b71e:	69fb      	ldr	r3, [r7, #28]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d017      	beq.n	801b754 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801b724:	69fb      	ldr	r3, [r7, #28]
 801b726:	2200      	movs	r2, #0
 801b728:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801b72c:	88fa      	ldrh	r2, [r7, #6]
 801b72e:	2300      	movs	r3, #0
 801b730:	9303      	str	r3, [sp, #12]
 801b732:	69fb      	ldr	r3, [r7, #28]
 801b734:	9302      	str	r3, [sp, #8]
 801b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b738:	9301      	str	r3, [sp, #4]
 801b73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b73c:	9300      	str	r3, [sp, #0]
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	68b9      	ldr	r1, [r7, #8]
 801b742:	68f8      	ldr	r0, [r7, #12]
 801b744:	f000 f80e 	bl	801b764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b748:	69f8      	ldr	r0, [r7, #28]
 801b74a:	f000 f8b5 	bl	801b8b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801b74e:	2301      	movs	r3, #1
 801b750:	61bb      	str	r3, [r7, #24]
 801b752:	e002      	b.n	801b75a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801b754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b758:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b75a:	69bb      	ldr	r3, [r7, #24]
	}
 801b75c:	4618      	mov	r0, r3
 801b75e:	3720      	adds	r7, #32
 801b760:	46bd      	mov	sp, r7
 801b762:	bd80      	pop	{r7, pc}

0801b764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b088      	sub	sp, #32
 801b768:	af00      	add	r7, sp, #0
 801b76a:	60f8      	str	r0, [r7, #12]
 801b76c:	60b9      	str	r1, [r7, #8]
 801b76e:	607a      	str	r2, [r7, #4]
 801b770:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b774:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	009b      	lsls	r3, r3, #2
 801b77a:	461a      	mov	r2, r3
 801b77c:	21a5      	movs	r1, #165	; 0xa5
 801b77e:	f002 fef8 	bl	801e572 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b78c:	3b01      	subs	r3, #1
 801b78e:	009b      	lsls	r3, r3, #2
 801b790:	4413      	add	r3, r2
 801b792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801b794:	69bb      	ldr	r3, [r7, #24]
 801b796:	f023 0307 	bic.w	r3, r3, #7
 801b79a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801b79c:	69bb      	ldr	r3, [r7, #24]
 801b79e:	f003 0307 	and.w	r3, r3, #7
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d00a      	beq.n	801b7bc <prvInitialiseNewTask+0x58>
	__asm volatile
 801b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7aa:	f383 8811 	msr	BASEPRI, r3
 801b7ae:	f3bf 8f6f 	isb	sy
 801b7b2:	f3bf 8f4f 	dsb	sy
 801b7b6:	617b      	str	r3, [r7, #20]
}
 801b7b8:	bf00      	nop
 801b7ba:	e7fe      	b.n	801b7ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d01f      	beq.n	801b802 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	61fb      	str	r3, [r7, #28]
 801b7c6:	e012      	b.n	801b7ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801b7c8:	68ba      	ldr	r2, [r7, #8]
 801b7ca:	69fb      	ldr	r3, [r7, #28]
 801b7cc:	4413      	add	r3, r2
 801b7ce:	7819      	ldrb	r1, [r3, #0]
 801b7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b7d2:	69fb      	ldr	r3, [r7, #28]
 801b7d4:	4413      	add	r3, r2
 801b7d6:	3334      	adds	r3, #52	; 0x34
 801b7d8:	460a      	mov	r2, r1
 801b7da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801b7dc:	68ba      	ldr	r2, [r7, #8]
 801b7de:	69fb      	ldr	r3, [r7, #28]
 801b7e0:	4413      	add	r3, r2
 801b7e2:	781b      	ldrb	r3, [r3, #0]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d006      	beq.n	801b7f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b7e8:	69fb      	ldr	r3, [r7, #28]
 801b7ea:	3301      	adds	r3, #1
 801b7ec:	61fb      	str	r3, [r7, #28]
 801b7ee:	69fb      	ldr	r3, [r7, #28]
 801b7f0:	2b0f      	cmp	r3, #15
 801b7f2:	d9e9      	bls.n	801b7c8 <prvInitialiseNewTask+0x64>
 801b7f4:	e000      	b.n	801b7f8 <prvInitialiseNewTask+0x94>
			{
				break;
 801b7f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7fa:	2200      	movs	r2, #0
 801b7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b800:	e003      	b.n	801b80a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b804:	2200      	movs	r2, #0
 801b806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b80c:	2b0e      	cmp	r3, #14
 801b80e:	d901      	bls.n	801b814 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801b810:	230e      	movs	r3, #14
 801b812:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801b814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b818:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b81e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b822:	2200      	movs	r2, #0
 801b824:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b828:	3304      	adds	r3, #4
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7ff f8b2 	bl	801a994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801b830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b832:	3318      	adds	r3, #24
 801b834:	4618      	mov	r0, r3
 801b836:	f7ff f8ad 	bl	801a994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b83e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b842:	f1c3 020f 	rsb	r2, r3, #15
 801b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b848:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b84e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b852:	2200      	movs	r2, #0
 801b854:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b858:	2200      	movs	r2, #0
 801b85a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b860:	2200      	movs	r2, #0
 801b862:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b868:	3358      	adds	r3, #88	; 0x58
 801b86a:	2260      	movs	r2, #96	; 0x60
 801b86c:	2100      	movs	r1, #0
 801b86e:	4618      	mov	r0, r3
 801b870:	f002 fe7f 	bl	801e572 <memset>
 801b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b876:	4a0d      	ldr	r2, [pc, #52]	; (801b8ac <prvInitialiseNewTask+0x148>)
 801b878:	65da      	str	r2, [r3, #92]	; 0x5c
 801b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b87c:	4a0c      	ldr	r2, [pc, #48]	; (801b8b0 <prvInitialiseNewTask+0x14c>)
 801b87e:	661a      	str	r2, [r3, #96]	; 0x60
 801b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b882:	4a0c      	ldr	r2, [pc, #48]	; (801b8b4 <prvInitialiseNewTask+0x150>)
 801b884:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801b886:	683a      	ldr	r2, [r7, #0]
 801b888:	68f9      	ldr	r1, [r7, #12]
 801b88a:	69b8      	ldr	r0, [r7, #24]
 801b88c:	f001 fbc4 	bl	801d018 <pxPortInitialiseStack>
 801b890:	4602      	mov	r2, r0
 801b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d002      	beq.n	801b8a2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b89e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b8a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b8a2:	bf00      	nop
 801b8a4:	3720      	adds	r7, #32
 801b8a6:	46bd      	mov	sp, r7
 801b8a8:	bd80      	pop	{r7, pc}
 801b8aa:	bf00      	nop
 801b8ac:	08025edc 	.word	0x08025edc
 801b8b0:	08025efc 	.word	0x08025efc
 801b8b4:	08025ebc 	.word	0x08025ebc

0801b8b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b082      	sub	sp, #8
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801b8c0:	f001 fcd8 	bl	801d274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801b8c4:	4b2c      	ldr	r3, [pc, #176]	; (801b978 <prvAddNewTaskToReadyList+0xc0>)
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	3301      	adds	r3, #1
 801b8ca:	4a2b      	ldr	r2, [pc, #172]	; (801b978 <prvAddNewTaskToReadyList+0xc0>)
 801b8cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801b8ce:	4b2b      	ldr	r3, [pc, #172]	; (801b97c <prvAddNewTaskToReadyList+0xc4>)
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d109      	bne.n	801b8ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801b8d6:	4a29      	ldr	r2, [pc, #164]	; (801b97c <prvAddNewTaskToReadyList+0xc4>)
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801b8dc:	4b26      	ldr	r3, [pc, #152]	; (801b978 <prvAddNewTaskToReadyList+0xc0>)
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	2b01      	cmp	r3, #1
 801b8e2:	d110      	bne.n	801b906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801b8e4:	f000 fd66 	bl	801c3b4 <prvInitialiseTaskLists>
 801b8e8:	e00d      	b.n	801b906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801b8ea:	4b25      	ldr	r3, [pc, #148]	; (801b980 <prvAddNewTaskToReadyList+0xc8>)
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d109      	bne.n	801b906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801b8f2:	4b22      	ldr	r3, [pc, #136]	; (801b97c <prvAddNewTaskToReadyList+0xc4>)
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8fc:	429a      	cmp	r2, r3
 801b8fe:	d802      	bhi.n	801b906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801b900:	4a1e      	ldr	r2, [pc, #120]	; (801b97c <prvAddNewTaskToReadyList+0xc4>)
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801b906:	4b1f      	ldr	r3, [pc, #124]	; (801b984 <prvAddNewTaskToReadyList+0xcc>)
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	3301      	adds	r3, #1
 801b90c:	4a1d      	ldr	r2, [pc, #116]	; (801b984 <prvAddNewTaskToReadyList+0xcc>)
 801b90e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801b910:	4b1c      	ldr	r3, [pc, #112]	; (801b984 <prvAddNewTaskToReadyList+0xcc>)
 801b912:	681a      	ldr	r2, [r3, #0]
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b91c:	2201      	movs	r2, #1
 801b91e:	409a      	lsls	r2, r3
 801b920:	4b19      	ldr	r3, [pc, #100]	; (801b988 <prvAddNewTaskToReadyList+0xd0>)
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	4313      	orrs	r3, r2
 801b926:	4a18      	ldr	r2, [pc, #96]	; (801b988 <prvAddNewTaskToReadyList+0xd0>)
 801b928:	6013      	str	r3, [r2, #0]
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b92e:	4613      	mov	r3, r2
 801b930:	009b      	lsls	r3, r3, #2
 801b932:	4413      	add	r3, r2
 801b934:	009b      	lsls	r3, r3, #2
 801b936:	4a15      	ldr	r2, [pc, #84]	; (801b98c <prvAddNewTaskToReadyList+0xd4>)
 801b938:	441a      	add	r2, r3
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	3304      	adds	r3, #4
 801b93e:	4619      	mov	r1, r3
 801b940:	4610      	mov	r0, r2
 801b942:	f7ff f834 	bl	801a9ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b946:	f001 fcc5 	bl	801d2d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b94a:	4b0d      	ldr	r3, [pc, #52]	; (801b980 <prvAddNewTaskToReadyList+0xc8>)
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d00e      	beq.n	801b970 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b952:	4b0a      	ldr	r3, [pc, #40]	; (801b97c <prvAddNewTaskToReadyList+0xc4>)
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b95c:	429a      	cmp	r2, r3
 801b95e:	d207      	bcs.n	801b970 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b960:	4b0b      	ldr	r3, [pc, #44]	; (801b990 <prvAddNewTaskToReadyList+0xd8>)
 801b962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b966:	601a      	str	r2, [r3, #0]
 801b968:	f3bf 8f4f 	dsb	sy
 801b96c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b970:	bf00      	nop
 801b972:	3708      	adds	r7, #8
 801b974:	46bd      	mov	sp, r7
 801b976:	bd80      	pop	{r7, pc}
 801b978:	20003ab8 	.word	0x20003ab8
 801b97c:	20003918 	.word	0x20003918
 801b980:	20003ac4 	.word	0x20003ac4
 801b984:	20003ad4 	.word	0x20003ad4
 801b988:	20003ac0 	.word	0x20003ac0
 801b98c:	2000391c 	.word	0x2000391c
 801b990:	e000ed04 	.word	0xe000ed04

0801b994 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801b994:	b580      	push	{r7, lr}
 801b996:	b08a      	sub	sp, #40	; 0x28
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
 801b99c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801b99e:	2300      	movs	r3, #0
 801b9a0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d10a      	bne.n	801b9be <vTaskDelayUntil+0x2a>
	__asm volatile
 801b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9ac:	f383 8811 	msr	BASEPRI, r3
 801b9b0:	f3bf 8f6f 	isb	sy
 801b9b4:	f3bf 8f4f 	dsb	sy
 801b9b8:	617b      	str	r3, [r7, #20]
}
 801b9ba:	bf00      	nop
 801b9bc:	e7fe      	b.n	801b9bc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801b9be:	683b      	ldr	r3, [r7, #0]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d10a      	bne.n	801b9da <vTaskDelayUntil+0x46>
	__asm volatile
 801b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9c8:	f383 8811 	msr	BASEPRI, r3
 801b9cc:	f3bf 8f6f 	isb	sy
 801b9d0:	f3bf 8f4f 	dsb	sy
 801b9d4:	613b      	str	r3, [r7, #16]
}
 801b9d6:	bf00      	nop
 801b9d8:	e7fe      	b.n	801b9d8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801b9da:	4b2a      	ldr	r3, [pc, #168]	; (801ba84 <vTaskDelayUntil+0xf0>)
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d00a      	beq.n	801b9f8 <vTaskDelayUntil+0x64>
	__asm volatile
 801b9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9e6:	f383 8811 	msr	BASEPRI, r3
 801b9ea:	f3bf 8f6f 	isb	sy
 801b9ee:	f3bf 8f4f 	dsb	sy
 801b9f2:	60fb      	str	r3, [r7, #12]
}
 801b9f4:	bf00      	nop
 801b9f6:	e7fe      	b.n	801b9f6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801b9f8:	f000 f8f0 	bl	801bbdc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801b9fc:	4b22      	ldr	r3, [pc, #136]	; (801ba88 <vTaskDelayUntil+0xf4>)
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	683a      	ldr	r2, [r7, #0]
 801ba08:	4413      	add	r3, r2
 801ba0a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	6a3a      	ldr	r2, [r7, #32]
 801ba12:	429a      	cmp	r2, r3
 801ba14:	d20b      	bcs.n	801ba2e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	69fa      	ldr	r2, [r7, #28]
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	d211      	bcs.n	801ba44 <vTaskDelayUntil+0xb0>
 801ba20:	69fa      	ldr	r2, [r7, #28]
 801ba22:	6a3b      	ldr	r3, [r7, #32]
 801ba24:	429a      	cmp	r2, r3
 801ba26:	d90d      	bls.n	801ba44 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801ba28:	2301      	movs	r3, #1
 801ba2a:	627b      	str	r3, [r7, #36]	; 0x24
 801ba2c:	e00a      	b.n	801ba44 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	69fa      	ldr	r2, [r7, #28]
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d303      	bcc.n	801ba40 <vTaskDelayUntil+0xac>
 801ba38:	69fa      	ldr	r2, [r7, #28]
 801ba3a:	6a3b      	ldr	r3, [r7, #32]
 801ba3c:	429a      	cmp	r2, r3
 801ba3e:	d901      	bls.n	801ba44 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801ba40:	2301      	movs	r3, #1
 801ba42:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	69fa      	ldr	r2, [r7, #28]
 801ba48:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d006      	beq.n	801ba5e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801ba50:	69fa      	ldr	r2, [r7, #28]
 801ba52:	6a3b      	ldr	r3, [r7, #32]
 801ba54:	1ad3      	subs	r3, r2, r3
 801ba56:	2100      	movs	r1, #0
 801ba58:	4618      	mov	r0, r3
 801ba5a:	f000 ff09 	bl	801c870 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801ba5e:	f000 f8cb 	bl	801bbf8 <xTaskResumeAll>
 801ba62:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ba64:	69bb      	ldr	r3, [r7, #24]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d107      	bne.n	801ba7a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801ba6a:	4b08      	ldr	r3, [pc, #32]	; (801ba8c <vTaskDelayUntil+0xf8>)
 801ba6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ba70:	601a      	str	r2, [r3, #0]
 801ba72:	f3bf 8f4f 	dsb	sy
 801ba76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ba7a:	bf00      	nop
 801ba7c:	3728      	adds	r7, #40	; 0x28
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	20003ae0 	.word	0x20003ae0
 801ba88:	20003abc 	.word	0x20003abc
 801ba8c:	e000ed04 	.word	0xe000ed04

0801ba90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b084      	sub	sp, #16
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ba98:	2300      	movs	r3, #0
 801ba9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d017      	beq.n	801bad2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801baa2:	4b13      	ldr	r3, [pc, #76]	; (801baf0 <vTaskDelay+0x60>)
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d00a      	beq.n	801bac0 <vTaskDelay+0x30>
	__asm volatile
 801baaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801baae:	f383 8811 	msr	BASEPRI, r3
 801bab2:	f3bf 8f6f 	isb	sy
 801bab6:	f3bf 8f4f 	dsb	sy
 801baba:	60bb      	str	r3, [r7, #8]
}
 801babc:	bf00      	nop
 801babe:	e7fe      	b.n	801babe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801bac0:	f000 f88c 	bl	801bbdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801bac4:	2100      	movs	r1, #0
 801bac6:	6878      	ldr	r0, [r7, #4]
 801bac8:	f000 fed2 	bl	801c870 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801bacc:	f000 f894 	bl	801bbf8 <xTaskResumeAll>
 801bad0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d107      	bne.n	801bae8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801bad8:	4b06      	ldr	r3, [pc, #24]	; (801baf4 <vTaskDelay+0x64>)
 801bada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bade:	601a      	str	r2, [r3, #0]
 801bae0:	f3bf 8f4f 	dsb	sy
 801bae4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801bae8:	bf00      	nop
 801baea:	3710      	adds	r7, #16
 801baec:	46bd      	mov	sp, r7
 801baee:	bd80      	pop	{r7, pc}
 801baf0:	20003ae0 	.word	0x20003ae0
 801baf4:	e000ed04 	.word	0xe000ed04

0801baf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801baf8:	b580      	push	{r7, lr}
 801bafa:	b08a      	sub	sp, #40	; 0x28
 801bafc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801bafe:	2300      	movs	r3, #0
 801bb00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801bb02:	2300      	movs	r3, #0
 801bb04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801bb06:	463a      	mov	r2, r7
 801bb08:	1d39      	adds	r1, r7, #4
 801bb0a:	f107 0308 	add.w	r3, r7, #8
 801bb0e:	4618      	mov	r0, r3
 801bb10:	f7e7 fbda 	bl	80032c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801bb14:	6839      	ldr	r1, [r7, #0]
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	68ba      	ldr	r2, [r7, #8]
 801bb1a:	9202      	str	r2, [sp, #8]
 801bb1c:	9301      	str	r3, [sp, #4]
 801bb1e:	2300      	movs	r3, #0
 801bb20:	9300      	str	r3, [sp, #0]
 801bb22:	2300      	movs	r3, #0
 801bb24:	460a      	mov	r2, r1
 801bb26:	4925      	ldr	r1, [pc, #148]	; (801bbbc <vTaskStartScheduler+0xc4>)
 801bb28:	4825      	ldr	r0, [pc, #148]	; (801bbc0 <vTaskStartScheduler+0xc8>)
 801bb2a:	f7ff fd79 	bl	801b620 <xTaskCreateStatic>
 801bb2e:	4603      	mov	r3, r0
 801bb30:	4a24      	ldr	r2, [pc, #144]	; (801bbc4 <vTaskStartScheduler+0xcc>)
 801bb32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801bb34:	4b23      	ldr	r3, [pc, #140]	; (801bbc4 <vTaskStartScheduler+0xcc>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d002      	beq.n	801bb42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801bb3c:	2301      	movs	r3, #1
 801bb3e:	617b      	str	r3, [r7, #20]
 801bb40:	e001      	b.n	801bb46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801bb42:	2300      	movs	r3, #0
 801bb44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801bb46:	697b      	ldr	r3, [r7, #20]
 801bb48:	2b01      	cmp	r3, #1
 801bb4a:	d102      	bne.n	801bb52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801bb4c:	f000 fef6 	bl	801c93c <xTimerCreateTimerTask>
 801bb50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	2b01      	cmp	r3, #1
 801bb56:	d11d      	bne.n	801bb94 <vTaskStartScheduler+0x9c>
	__asm volatile
 801bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb5c:	f383 8811 	msr	BASEPRI, r3
 801bb60:	f3bf 8f6f 	isb	sy
 801bb64:	f3bf 8f4f 	dsb	sy
 801bb68:	613b      	str	r3, [r7, #16]
}
 801bb6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801bb6c:	4b16      	ldr	r3, [pc, #88]	; (801bbc8 <vTaskStartScheduler+0xd0>)
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	3358      	adds	r3, #88	; 0x58
 801bb72:	4a16      	ldr	r2, [pc, #88]	; (801bbcc <vTaskStartScheduler+0xd4>)
 801bb74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801bb76:	4b16      	ldr	r3, [pc, #88]	; (801bbd0 <vTaskStartScheduler+0xd8>)
 801bb78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bb7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801bb7e:	4b15      	ldr	r3, [pc, #84]	; (801bbd4 <vTaskStartScheduler+0xdc>)
 801bb80:	2201      	movs	r2, #1
 801bb82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801bb84:	4b14      	ldr	r3, [pc, #80]	; (801bbd8 <vTaskStartScheduler+0xe0>)
 801bb86:	2200      	movs	r2, #0
 801bb88:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801bb8a:	f7e7 fb83 	bl	8003294 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801bb8e:	f001 facf 	bl	801d130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801bb92:	e00e      	b.n	801bbb2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801bb94:	697b      	ldr	r3, [r7, #20]
 801bb96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bb9a:	d10a      	bne.n	801bbb2 <vTaskStartScheduler+0xba>
	__asm volatile
 801bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bba0:	f383 8811 	msr	BASEPRI, r3
 801bba4:	f3bf 8f6f 	isb	sy
 801bba8:	f3bf 8f4f 	dsb	sy
 801bbac:	60fb      	str	r3, [r7, #12]
}
 801bbae:	bf00      	nop
 801bbb0:	e7fe      	b.n	801bbb0 <vTaskStartScheduler+0xb8>
}
 801bbb2:	bf00      	nop
 801bbb4:	3718      	adds	r7, #24
 801bbb6:	46bd      	mov	sp, r7
 801bbb8:	bd80      	pop	{r7, pc}
 801bbba:	bf00      	nop
 801bbbc:	08025824 	.word	0x08025824
 801bbc0:	0801c385 	.word	0x0801c385
 801bbc4:	20003adc 	.word	0x20003adc
 801bbc8:	20003918 	.word	0x20003918
 801bbcc:	20000148 	.word	0x20000148
 801bbd0:	20003ad8 	.word	0x20003ad8
 801bbd4:	20003ac4 	.word	0x20003ac4
 801bbd8:	20003abc 	.word	0x20003abc

0801bbdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801bbdc:	b480      	push	{r7}
 801bbde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801bbe0:	4b04      	ldr	r3, [pc, #16]	; (801bbf4 <vTaskSuspendAll+0x18>)
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	3301      	adds	r3, #1
 801bbe6:	4a03      	ldr	r2, [pc, #12]	; (801bbf4 <vTaskSuspendAll+0x18>)
 801bbe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801bbea:	bf00      	nop
 801bbec:	46bd      	mov	sp, r7
 801bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf2:	4770      	bx	lr
 801bbf4:	20003ae0 	.word	0x20003ae0

0801bbf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b084      	sub	sp, #16
 801bbfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801bc02:	2300      	movs	r3, #0
 801bc04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801bc06:	4b41      	ldr	r3, [pc, #260]	; (801bd0c <xTaskResumeAll+0x114>)
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d10a      	bne.n	801bc24 <xTaskResumeAll+0x2c>
	__asm volatile
 801bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc12:	f383 8811 	msr	BASEPRI, r3
 801bc16:	f3bf 8f6f 	isb	sy
 801bc1a:	f3bf 8f4f 	dsb	sy
 801bc1e:	603b      	str	r3, [r7, #0]
}
 801bc20:	bf00      	nop
 801bc22:	e7fe      	b.n	801bc22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801bc24:	f001 fb26 	bl	801d274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801bc28:	4b38      	ldr	r3, [pc, #224]	; (801bd0c <xTaskResumeAll+0x114>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	3b01      	subs	r3, #1
 801bc2e:	4a37      	ldr	r2, [pc, #220]	; (801bd0c <xTaskResumeAll+0x114>)
 801bc30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bc32:	4b36      	ldr	r3, [pc, #216]	; (801bd0c <xTaskResumeAll+0x114>)
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d161      	bne.n	801bcfe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801bc3a:	4b35      	ldr	r3, [pc, #212]	; (801bd10 <xTaskResumeAll+0x118>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d05d      	beq.n	801bcfe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801bc42:	e02e      	b.n	801bca2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bc44:	4b33      	ldr	r3, [pc, #204]	; (801bd14 <xTaskResumeAll+0x11c>)
 801bc46:	68db      	ldr	r3, [r3, #12]
 801bc48:	68db      	ldr	r3, [r3, #12]
 801bc4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	3318      	adds	r3, #24
 801bc50:	4618      	mov	r0, r3
 801bc52:	f7fe ff09 	bl	801aa68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	3304      	adds	r3, #4
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	f7fe ff04 	bl	801aa68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc64:	2201      	movs	r2, #1
 801bc66:	409a      	lsls	r2, r3
 801bc68:	4b2b      	ldr	r3, [pc, #172]	; (801bd18 <xTaskResumeAll+0x120>)
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	4313      	orrs	r3, r2
 801bc6e:	4a2a      	ldr	r2, [pc, #168]	; (801bd18 <xTaskResumeAll+0x120>)
 801bc70:	6013      	str	r3, [r2, #0]
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc76:	4613      	mov	r3, r2
 801bc78:	009b      	lsls	r3, r3, #2
 801bc7a:	4413      	add	r3, r2
 801bc7c:	009b      	lsls	r3, r3, #2
 801bc7e:	4a27      	ldr	r2, [pc, #156]	; (801bd1c <xTaskResumeAll+0x124>)
 801bc80:	441a      	add	r2, r3
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	3304      	adds	r3, #4
 801bc86:	4619      	mov	r1, r3
 801bc88:	4610      	mov	r0, r2
 801bc8a:	f7fe fe90 	bl	801a9ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc92:	4b23      	ldr	r3, [pc, #140]	; (801bd20 <xTaskResumeAll+0x128>)
 801bc94:	681b      	ldr	r3, [r3, #0]
 801bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc98:	429a      	cmp	r2, r3
 801bc9a:	d302      	bcc.n	801bca2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801bc9c:	4b21      	ldr	r3, [pc, #132]	; (801bd24 <xTaskResumeAll+0x12c>)
 801bc9e:	2201      	movs	r2, #1
 801bca0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801bca2:	4b1c      	ldr	r3, [pc, #112]	; (801bd14 <xTaskResumeAll+0x11c>)
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d1cc      	bne.n	801bc44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d001      	beq.n	801bcb4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801bcb0:	f000 fc22 	bl	801c4f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801bcb4:	4b1c      	ldr	r3, [pc, #112]	; (801bd28 <xTaskResumeAll+0x130>)
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d010      	beq.n	801bce2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801bcc0:	f000 f846 	bl	801bd50 <xTaskIncrementTick>
 801bcc4:	4603      	mov	r3, r0
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d002      	beq.n	801bcd0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801bcca:	4b16      	ldr	r3, [pc, #88]	; (801bd24 <xTaskResumeAll+0x12c>)
 801bccc:	2201      	movs	r2, #1
 801bcce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	3b01      	subs	r3, #1
 801bcd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d1f1      	bne.n	801bcc0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801bcdc:	4b12      	ldr	r3, [pc, #72]	; (801bd28 <xTaskResumeAll+0x130>)
 801bcde:	2200      	movs	r2, #0
 801bce0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801bce2:	4b10      	ldr	r3, [pc, #64]	; (801bd24 <xTaskResumeAll+0x12c>)
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d009      	beq.n	801bcfe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801bcea:	2301      	movs	r3, #1
 801bcec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801bcee:	4b0f      	ldr	r3, [pc, #60]	; (801bd2c <xTaskResumeAll+0x134>)
 801bcf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bcf4:	601a      	str	r2, [r3, #0]
 801bcf6:	f3bf 8f4f 	dsb	sy
 801bcfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801bcfe:	f001 fae9 	bl	801d2d4 <vPortExitCritical>

	return xAlreadyYielded;
 801bd02:	68bb      	ldr	r3, [r7, #8]
}
 801bd04:	4618      	mov	r0, r3
 801bd06:	3710      	adds	r7, #16
 801bd08:	46bd      	mov	sp, r7
 801bd0a:	bd80      	pop	{r7, pc}
 801bd0c:	20003ae0 	.word	0x20003ae0
 801bd10:	20003ab8 	.word	0x20003ab8
 801bd14:	20003a78 	.word	0x20003a78
 801bd18:	20003ac0 	.word	0x20003ac0
 801bd1c:	2000391c 	.word	0x2000391c
 801bd20:	20003918 	.word	0x20003918
 801bd24:	20003acc 	.word	0x20003acc
 801bd28:	20003ac8 	.word	0x20003ac8
 801bd2c:	e000ed04 	.word	0xe000ed04

0801bd30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801bd30:	b480      	push	{r7}
 801bd32:	b083      	sub	sp, #12
 801bd34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801bd36:	4b05      	ldr	r3, [pc, #20]	; (801bd4c <xTaskGetTickCount+0x1c>)
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801bd3c:	687b      	ldr	r3, [r7, #4]
}
 801bd3e:	4618      	mov	r0, r3
 801bd40:	370c      	adds	r7, #12
 801bd42:	46bd      	mov	sp, r7
 801bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd48:	4770      	bx	lr
 801bd4a:	bf00      	nop
 801bd4c:	20003abc 	.word	0x20003abc

0801bd50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b086      	sub	sp, #24
 801bd54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801bd56:	2300      	movs	r3, #0
 801bd58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bd5a:	4b4e      	ldr	r3, [pc, #312]	; (801be94 <xTaskIncrementTick+0x144>)
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	f040 808e 	bne.w	801be80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801bd64:	4b4c      	ldr	r3, [pc, #304]	; (801be98 <xTaskIncrementTick+0x148>)
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	3301      	adds	r3, #1
 801bd6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801bd6c:	4a4a      	ldr	r2, [pc, #296]	; (801be98 <xTaskIncrementTick+0x148>)
 801bd6e:	693b      	ldr	r3, [r7, #16]
 801bd70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801bd72:	693b      	ldr	r3, [r7, #16]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d120      	bne.n	801bdba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801bd78:	4b48      	ldr	r3, [pc, #288]	; (801be9c <xTaskIncrementTick+0x14c>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d00a      	beq.n	801bd98 <xTaskIncrementTick+0x48>
	__asm volatile
 801bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd86:	f383 8811 	msr	BASEPRI, r3
 801bd8a:	f3bf 8f6f 	isb	sy
 801bd8e:	f3bf 8f4f 	dsb	sy
 801bd92:	603b      	str	r3, [r7, #0]
}
 801bd94:	bf00      	nop
 801bd96:	e7fe      	b.n	801bd96 <xTaskIncrementTick+0x46>
 801bd98:	4b40      	ldr	r3, [pc, #256]	; (801be9c <xTaskIncrementTick+0x14c>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	60fb      	str	r3, [r7, #12]
 801bd9e:	4b40      	ldr	r3, [pc, #256]	; (801bea0 <xTaskIncrementTick+0x150>)
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	4a3e      	ldr	r2, [pc, #248]	; (801be9c <xTaskIncrementTick+0x14c>)
 801bda4:	6013      	str	r3, [r2, #0]
 801bda6:	4a3e      	ldr	r2, [pc, #248]	; (801bea0 <xTaskIncrementTick+0x150>)
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	6013      	str	r3, [r2, #0]
 801bdac:	4b3d      	ldr	r3, [pc, #244]	; (801bea4 <xTaskIncrementTick+0x154>)
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	3301      	adds	r3, #1
 801bdb2:	4a3c      	ldr	r2, [pc, #240]	; (801bea4 <xTaskIncrementTick+0x154>)
 801bdb4:	6013      	str	r3, [r2, #0]
 801bdb6:	f000 fb9f 	bl	801c4f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801bdba:	4b3b      	ldr	r3, [pc, #236]	; (801bea8 <xTaskIncrementTick+0x158>)
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	693a      	ldr	r2, [r7, #16]
 801bdc0:	429a      	cmp	r2, r3
 801bdc2:	d348      	bcc.n	801be56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bdc4:	4b35      	ldr	r3, [pc, #212]	; (801be9c <xTaskIncrementTick+0x14c>)
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d104      	bne.n	801bdd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bdce:	4b36      	ldr	r3, [pc, #216]	; (801bea8 <xTaskIncrementTick+0x158>)
 801bdd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bdd4:	601a      	str	r2, [r3, #0]
					break;
 801bdd6:	e03e      	b.n	801be56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bdd8:	4b30      	ldr	r3, [pc, #192]	; (801be9c <xTaskIncrementTick+0x14c>)
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	68db      	ldr	r3, [r3, #12]
 801bdde:	68db      	ldr	r3, [r3, #12]
 801bde0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	685b      	ldr	r3, [r3, #4]
 801bde6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801bde8:	693a      	ldr	r2, [r7, #16]
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	429a      	cmp	r2, r3
 801bdee:	d203      	bcs.n	801bdf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801bdf0:	4a2d      	ldr	r2, [pc, #180]	; (801bea8 <xTaskIncrementTick+0x158>)
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801bdf6:	e02e      	b.n	801be56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bdf8:	68bb      	ldr	r3, [r7, #8]
 801bdfa:	3304      	adds	r3, #4
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	f7fe fe33 	bl	801aa68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801be02:	68bb      	ldr	r3, [r7, #8]
 801be04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be06:	2b00      	cmp	r3, #0
 801be08:	d004      	beq.n	801be14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801be0a:	68bb      	ldr	r3, [r7, #8]
 801be0c:	3318      	adds	r3, #24
 801be0e:	4618      	mov	r0, r3
 801be10:	f7fe fe2a 	bl	801aa68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801be14:	68bb      	ldr	r3, [r7, #8]
 801be16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be18:	2201      	movs	r2, #1
 801be1a:	409a      	lsls	r2, r3
 801be1c:	4b23      	ldr	r3, [pc, #140]	; (801beac <xTaskIncrementTick+0x15c>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	4313      	orrs	r3, r2
 801be22:	4a22      	ldr	r2, [pc, #136]	; (801beac <xTaskIncrementTick+0x15c>)
 801be24:	6013      	str	r3, [r2, #0]
 801be26:	68bb      	ldr	r3, [r7, #8]
 801be28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be2a:	4613      	mov	r3, r2
 801be2c:	009b      	lsls	r3, r3, #2
 801be2e:	4413      	add	r3, r2
 801be30:	009b      	lsls	r3, r3, #2
 801be32:	4a1f      	ldr	r2, [pc, #124]	; (801beb0 <xTaskIncrementTick+0x160>)
 801be34:	441a      	add	r2, r3
 801be36:	68bb      	ldr	r3, [r7, #8]
 801be38:	3304      	adds	r3, #4
 801be3a:	4619      	mov	r1, r3
 801be3c:	4610      	mov	r0, r2
 801be3e:	f7fe fdb6 	bl	801a9ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801be42:	68bb      	ldr	r3, [r7, #8]
 801be44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be46:	4b1b      	ldr	r3, [pc, #108]	; (801beb4 <xTaskIncrementTick+0x164>)
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be4c:	429a      	cmp	r2, r3
 801be4e:	d3b9      	bcc.n	801bdc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801be50:	2301      	movs	r3, #1
 801be52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801be54:	e7b6      	b.n	801bdc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801be56:	4b17      	ldr	r3, [pc, #92]	; (801beb4 <xTaskIncrementTick+0x164>)
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be5c:	4914      	ldr	r1, [pc, #80]	; (801beb0 <xTaskIncrementTick+0x160>)
 801be5e:	4613      	mov	r3, r2
 801be60:	009b      	lsls	r3, r3, #2
 801be62:	4413      	add	r3, r2
 801be64:	009b      	lsls	r3, r3, #2
 801be66:	440b      	add	r3, r1
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	2b01      	cmp	r3, #1
 801be6c:	d901      	bls.n	801be72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801be6e:	2301      	movs	r3, #1
 801be70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801be72:	4b11      	ldr	r3, [pc, #68]	; (801beb8 <xTaskIncrementTick+0x168>)
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d007      	beq.n	801be8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801be7a:	2301      	movs	r3, #1
 801be7c:	617b      	str	r3, [r7, #20]
 801be7e:	e004      	b.n	801be8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801be80:	4b0e      	ldr	r3, [pc, #56]	; (801bebc <xTaskIncrementTick+0x16c>)
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	3301      	adds	r3, #1
 801be86:	4a0d      	ldr	r2, [pc, #52]	; (801bebc <xTaskIncrementTick+0x16c>)
 801be88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801be8a:	697b      	ldr	r3, [r7, #20]
}
 801be8c:	4618      	mov	r0, r3
 801be8e:	3718      	adds	r7, #24
 801be90:	46bd      	mov	sp, r7
 801be92:	bd80      	pop	{r7, pc}
 801be94:	20003ae0 	.word	0x20003ae0
 801be98:	20003abc 	.word	0x20003abc
 801be9c:	20003a70 	.word	0x20003a70
 801bea0:	20003a74 	.word	0x20003a74
 801bea4:	20003ad0 	.word	0x20003ad0
 801bea8:	20003ad8 	.word	0x20003ad8
 801beac:	20003ac0 	.word	0x20003ac0
 801beb0:	2000391c 	.word	0x2000391c
 801beb4:	20003918 	.word	0x20003918
 801beb8:	20003acc 	.word	0x20003acc
 801bebc:	20003ac8 	.word	0x20003ac8

0801bec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b086      	sub	sp, #24
 801bec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801bec6:	4b3d      	ldr	r3, [pc, #244]	; (801bfbc <vTaskSwitchContext+0xfc>)
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d003      	beq.n	801bed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801bece:	4b3c      	ldr	r3, [pc, #240]	; (801bfc0 <vTaskSwitchContext+0x100>)
 801bed0:	2201      	movs	r2, #1
 801bed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801bed4:	e06e      	b.n	801bfb4 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 801bed6:	4b3a      	ldr	r3, [pc, #232]	; (801bfc0 <vTaskSwitchContext+0x100>)
 801bed8:	2200      	movs	r2, #0
 801beda:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801bedc:	f7e7 f9e1 	bl	80032a2 <getRunTimeCounterValue>
 801bee0:	4603      	mov	r3, r0
 801bee2:	4a38      	ldr	r2, [pc, #224]	; (801bfc4 <vTaskSwitchContext+0x104>)
 801bee4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801bee6:	4b37      	ldr	r3, [pc, #220]	; (801bfc4 <vTaskSwitchContext+0x104>)
 801bee8:	681a      	ldr	r2, [r3, #0]
 801beea:	4b37      	ldr	r3, [pc, #220]	; (801bfc8 <vTaskSwitchContext+0x108>)
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	429a      	cmp	r2, r3
 801bef0:	d909      	bls.n	801bf06 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801bef2:	4b36      	ldr	r3, [pc, #216]	; (801bfcc <vTaskSwitchContext+0x10c>)
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801bef8:	4a32      	ldr	r2, [pc, #200]	; (801bfc4 <vTaskSwitchContext+0x104>)
 801befa:	6810      	ldr	r0, [r2, #0]
 801befc:	4a32      	ldr	r2, [pc, #200]	; (801bfc8 <vTaskSwitchContext+0x108>)
 801befe:	6812      	ldr	r2, [r2, #0]
 801bf00:	1a82      	subs	r2, r0, r2
 801bf02:	440a      	add	r2, r1
 801bf04:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801bf06:	4b2f      	ldr	r3, [pc, #188]	; (801bfc4 <vTaskSwitchContext+0x104>)
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	4a2f      	ldr	r2, [pc, #188]	; (801bfc8 <vTaskSwitchContext+0x108>)
 801bf0c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801bf0e:	4b2f      	ldr	r3, [pc, #188]	; (801bfcc <vTaskSwitchContext+0x10c>)
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	681a      	ldr	r2, [r3, #0]
 801bf14:	4b2d      	ldr	r3, [pc, #180]	; (801bfcc <vTaskSwitchContext+0x10c>)
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf1a:	429a      	cmp	r2, r3
 801bf1c:	d808      	bhi.n	801bf30 <vTaskSwitchContext+0x70>
 801bf1e:	4b2b      	ldr	r3, [pc, #172]	; (801bfcc <vTaskSwitchContext+0x10c>)
 801bf20:	681a      	ldr	r2, [r3, #0]
 801bf22:	4b2a      	ldr	r3, [pc, #168]	; (801bfcc <vTaskSwitchContext+0x10c>)
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	3334      	adds	r3, #52	; 0x34
 801bf28:	4619      	mov	r1, r3
 801bf2a:	4610      	mov	r0, r2
 801bf2c:	f7e7 f9c1 	bl	80032b2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bf30:	4b27      	ldr	r3, [pc, #156]	; (801bfd0 <vTaskSwitchContext+0x110>)
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	fab3 f383 	clz	r3, r3
 801bf3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801bf3e:	7afb      	ldrb	r3, [r7, #11]
 801bf40:	f1c3 031f 	rsb	r3, r3, #31
 801bf44:	617b      	str	r3, [r7, #20]
 801bf46:	4923      	ldr	r1, [pc, #140]	; (801bfd4 <vTaskSwitchContext+0x114>)
 801bf48:	697a      	ldr	r2, [r7, #20]
 801bf4a:	4613      	mov	r3, r2
 801bf4c:	009b      	lsls	r3, r3, #2
 801bf4e:	4413      	add	r3, r2
 801bf50:	009b      	lsls	r3, r3, #2
 801bf52:	440b      	add	r3, r1
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d10a      	bne.n	801bf70 <vTaskSwitchContext+0xb0>
	__asm volatile
 801bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf5e:	f383 8811 	msr	BASEPRI, r3
 801bf62:	f3bf 8f6f 	isb	sy
 801bf66:	f3bf 8f4f 	dsb	sy
 801bf6a:	607b      	str	r3, [r7, #4]
}
 801bf6c:	bf00      	nop
 801bf6e:	e7fe      	b.n	801bf6e <vTaskSwitchContext+0xae>
 801bf70:	697a      	ldr	r2, [r7, #20]
 801bf72:	4613      	mov	r3, r2
 801bf74:	009b      	lsls	r3, r3, #2
 801bf76:	4413      	add	r3, r2
 801bf78:	009b      	lsls	r3, r3, #2
 801bf7a:	4a16      	ldr	r2, [pc, #88]	; (801bfd4 <vTaskSwitchContext+0x114>)
 801bf7c:	4413      	add	r3, r2
 801bf7e:	613b      	str	r3, [r7, #16]
 801bf80:	693b      	ldr	r3, [r7, #16]
 801bf82:	685b      	ldr	r3, [r3, #4]
 801bf84:	685a      	ldr	r2, [r3, #4]
 801bf86:	693b      	ldr	r3, [r7, #16]
 801bf88:	605a      	str	r2, [r3, #4]
 801bf8a:	693b      	ldr	r3, [r7, #16]
 801bf8c:	685a      	ldr	r2, [r3, #4]
 801bf8e:	693b      	ldr	r3, [r7, #16]
 801bf90:	3308      	adds	r3, #8
 801bf92:	429a      	cmp	r2, r3
 801bf94:	d104      	bne.n	801bfa0 <vTaskSwitchContext+0xe0>
 801bf96:	693b      	ldr	r3, [r7, #16]
 801bf98:	685b      	ldr	r3, [r3, #4]
 801bf9a:	685a      	ldr	r2, [r3, #4]
 801bf9c:	693b      	ldr	r3, [r7, #16]
 801bf9e:	605a      	str	r2, [r3, #4]
 801bfa0:	693b      	ldr	r3, [r7, #16]
 801bfa2:	685b      	ldr	r3, [r3, #4]
 801bfa4:	68db      	ldr	r3, [r3, #12]
 801bfa6:	4a09      	ldr	r2, [pc, #36]	; (801bfcc <vTaskSwitchContext+0x10c>)
 801bfa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801bfaa:	4b08      	ldr	r3, [pc, #32]	; (801bfcc <vTaskSwitchContext+0x10c>)
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	3358      	adds	r3, #88	; 0x58
 801bfb0:	4a09      	ldr	r2, [pc, #36]	; (801bfd8 <vTaskSwitchContext+0x118>)
 801bfb2:	6013      	str	r3, [r2, #0]
}
 801bfb4:	bf00      	nop
 801bfb6:	3718      	adds	r7, #24
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bd80      	pop	{r7, pc}
 801bfbc:	20003ae0 	.word	0x20003ae0
 801bfc0:	20003acc 	.word	0x20003acc
 801bfc4:	20003ae8 	.word	0x20003ae8
 801bfc8:	20003ae4 	.word	0x20003ae4
 801bfcc:	20003918 	.word	0x20003918
 801bfd0:	20003ac0 	.word	0x20003ac0
 801bfd4:	2000391c 	.word	0x2000391c
 801bfd8:	20000148 	.word	0x20000148

0801bfdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b084      	sub	sp, #16
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	6078      	str	r0, [r7, #4]
 801bfe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d10a      	bne.n	801c002 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bff0:	f383 8811 	msr	BASEPRI, r3
 801bff4:	f3bf 8f6f 	isb	sy
 801bff8:	f3bf 8f4f 	dsb	sy
 801bffc:	60fb      	str	r3, [r7, #12]
}
 801bffe:	bf00      	nop
 801c000:	e7fe      	b.n	801c000 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801c002:	4b07      	ldr	r3, [pc, #28]	; (801c020 <vTaskPlaceOnEventList+0x44>)
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	3318      	adds	r3, #24
 801c008:	4619      	mov	r1, r3
 801c00a:	6878      	ldr	r0, [r7, #4]
 801c00c:	f7fe fcf3 	bl	801a9f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801c010:	2101      	movs	r1, #1
 801c012:	6838      	ldr	r0, [r7, #0]
 801c014:	f000 fc2c 	bl	801c870 <prvAddCurrentTaskToDelayedList>
}
 801c018:	bf00      	nop
 801c01a:	3710      	adds	r7, #16
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bd80      	pop	{r7, pc}
 801c020:	20003918 	.word	0x20003918

0801c024 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801c024:	b580      	push	{r7, lr}
 801c026:	b086      	sub	sp, #24
 801c028:	af00      	add	r7, sp, #0
 801c02a:	60f8      	str	r0, [r7, #12]
 801c02c:	60b9      	str	r1, [r7, #8]
 801c02e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d10a      	bne.n	801c04c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801c036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c03a:	f383 8811 	msr	BASEPRI, r3
 801c03e:	f3bf 8f6f 	isb	sy
 801c042:	f3bf 8f4f 	dsb	sy
 801c046:	617b      	str	r3, [r7, #20]
}
 801c048:	bf00      	nop
 801c04a:	e7fe      	b.n	801c04a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801c04c:	4b11      	ldr	r3, [pc, #68]	; (801c094 <vTaskPlaceOnUnorderedEventList+0x70>)
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d10a      	bne.n	801c06a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801c054:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c058:	f383 8811 	msr	BASEPRI, r3
 801c05c:	f3bf 8f6f 	isb	sy
 801c060:	f3bf 8f4f 	dsb	sy
 801c064:	613b      	str	r3, [r7, #16]
}
 801c066:	bf00      	nop
 801c068:	e7fe      	b.n	801c068 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801c06a:	4b0b      	ldr	r3, [pc, #44]	; (801c098 <vTaskPlaceOnUnorderedEventList+0x74>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	68ba      	ldr	r2, [r7, #8]
 801c070:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801c074:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801c076:	4b08      	ldr	r3, [pc, #32]	; (801c098 <vTaskPlaceOnUnorderedEventList+0x74>)
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	3318      	adds	r3, #24
 801c07c:	4619      	mov	r1, r3
 801c07e:	68f8      	ldr	r0, [r7, #12]
 801c080:	f7fe fc95 	bl	801a9ae <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801c084:	2101      	movs	r1, #1
 801c086:	6878      	ldr	r0, [r7, #4]
 801c088:	f000 fbf2 	bl	801c870 <prvAddCurrentTaskToDelayedList>
}
 801c08c:	bf00      	nop
 801c08e:	3718      	adds	r7, #24
 801c090:	46bd      	mov	sp, r7
 801c092:	bd80      	pop	{r7, pc}
 801c094:	20003ae0 	.word	0x20003ae0
 801c098:	20003918 	.word	0x20003918

0801c09c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b086      	sub	sp, #24
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	60f8      	str	r0, [r7, #12]
 801c0a4:	60b9      	str	r1, [r7, #8]
 801c0a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801c0a8:	68fb      	ldr	r3, [r7, #12]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d10a      	bne.n	801c0c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c0b2:	f383 8811 	msr	BASEPRI, r3
 801c0b6:	f3bf 8f6f 	isb	sy
 801c0ba:	f3bf 8f4f 	dsb	sy
 801c0be:	617b      	str	r3, [r7, #20]
}
 801c0c0:	bf00      	nop
 801c0c2:	e7fe      	b.n	801c0c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801c0c4:	4b0a      	ldr	r3, [pc, #40]	; (801c0f0 <vTaskPlaceOnEventListRestricted+0x54>)
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	3318      	adds	r3, #24
 801c0ca:	4619      	mov	r1, r3
 801c0cc:	68f8      	ldr	r0, [r7, #12]
 801c0ce:	f7fe fc6e 	bl	801a9ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d002      	beq.n	801c0de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801c0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c0dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801c0de:	6879      	ldr	r1, [r7, #4]
 801c0e0:	68b8      	ldr	r0, [r7, #8]
 801c0e2:	f000 fbc5 	bl	801c870 <prvAddCurrentTaskToDelayedList>
	}
 801c0e6:	bf00      	nop
 801c0e8:	3718      	adds	r7, #24
 801c0ea:	46bd      	mov	sp, r7
 801c0ec:	bd80      	pop	{r7, pc}
 801c0ee:	bf00      	nop
 801c0f0:	20003918 	.word	0x20003918

0801c0f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b086      	sub	sp, #24
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	68db      	ldr	r3, [r3, #12]
 801c100:	68db      	ldr	r3, [r3, #12]
 801c102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801c104:	693b      	ldr	r3, [r7, #16]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d10a      	bne.n	801c120 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c10e:	f383 8811 	msr	BASEPRI, r3
 801c112:	f3bf 8f6f 	isb	sy
 801c116:	f3bf 8f4f 	dsb	sy
 801c11a:	60fb      	str	r3, [r7, #12]
}
 801c11c:	bf00      	nop
 801c11e:	e7fe      	b.n	801c11e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801c120:	693b      	ldr	r3, [r7, #16]
 801c122:	3318      	adds	r3, #24
 801c124:	4618      	mov	r0, r3
 801c126:	f7fe fc9f 	bl	801aa68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c12a:	4b1d      	ldr	r3, [pc, #116]	; (801c1a0 <xTaskRemoveFromEventList+0xac>)
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d11c      	bne.n	801c16c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801c132:	693b      	ldr	r3, [r7, #16]
 801c134:	3304      	adds	r3, #4
 801c136:	4618      	mov	r0, r3
 801c138:	f7fe fc96 	bl	801aa68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801c13c:	693b      	ldr	r3, [r7, #16]
 801c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c140:	2201      	movs	r2, #1
 801c142:	409a      	lsls	r2, r3
 801c144:	4b17      	ldr	r3, [pc, #92]	; (801c1a4 <xTaskRemoveFromEventList+0xb0>)
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	4313      	orrs	r3, r2
 801c14a:	4a16      	ldr	r2, [pc, #88]	; (801c1a4 <xTaskRemoveFromEventList+0xb0>)
 801c14c:	6013      	str	r3, [r2, #0]
 801c14e:	693b      	ldr	r3, [r7, #16]
 801c150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c152:	4613      	mov	r3, r2
 801c154:	009b      	lsls	r3, r3, #2
 801c156:	4413      	add	r3, r2
 801c158:	009b      	lsls	r3, r3, #2
 801c15a:	4a13      	ldr	r2, [pc, #76]	; (801c1a8 <xTaskRemoveFromEventList+0xb4>)
 801c15c:	441a      	add	r2, r3
 801c15e:	693b      	ldr	r3, [r7, #16]
 801c160:	3304      	adds	r3, #4
 801c162:	4619      	mov	r1, r3
 801c164:	4610      	mov	r0, r2
 801c166:	f7fe fc22 	bl	801a9ae <vListInsertEnd>
 801c16a:	e005      	b.n	801c178 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801c16c:	693b      	ldr	r3, [r7, #16]
 801c16e:	3318      	adds	r3, #24
 801c170:	4619      	mov	r1, r3
 801c172:	480e      	ldr	r0, [pc, #56]	; (801c1ac <xTaskRemoveFromEventList+0xb8>)
 801c174:	f7fe fc1b 	bl	801a9ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801c178:	693b      	ldr	r3, [r7, #16]
 801c17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c17c:	4b0c      	ldr	r3, [pc, #48]	; (801c1b0 <xTaskRemoveFromEventList+0xbc>)
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c182:	429a      	cmp	r2, r3
 801c184:	d905      	bls.n	801c192 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801c186:	2301      	movs	r3, #1
 801c188:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801c18a:	4b0a      	ldr	r3, [pc, #40]	; (801c1b4 <xTaskRemoveFromEventList+0xc0>)
 801c18c:	2201      	movs	r2, #1
 801c18e:	601a      	str	r2, [r3, #0]
 801c190:	e001      	b.n	801c196 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801c192:	2300      	movs	r3, #0
 801c194:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801c196:	697b      	ldr	r3, [r7, #20]
}
 801c198:	4618      	mov	r0, r3
 801c19a:	3718      	adds	r7, #24
 801c19c:	46bd      	mov	sp, r7
 801c19e:	bd80      	pop	{r7, pc}
 801c1a0:	20003ae0 	.word	0x20003ae0
 801c1a4:	20003ac0 	.word	0x20003ac0
 801c1a8:	2000391c 	.word	0x2000391c
 801c1ac:	20003a78 	.word	0x20003a78
 801c1b0:	20003918 	.word	0x20003918
 801c1b4:	20003acc 	.word	0x20003acc

0801c1b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801c1b8:	b580      	push	{r7, lr}
 801c1ba:	b086      	sub	sp, #24
 801c1bc:	af00      	add	r7, sp, #0
 801c1be:	6078      	str	r0, [r7, #4]
 801c1c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801c1c2:	4b29      	ldr	r3, [pc, #164]	; (801c268 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d10a      	bne.n	801c1e0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c1ce:	f383 8811 	msr	BASEPRI, r3
 801c1d2:	f3bf 8f6f 	isb	sy
 801c1d6:	f3bf 8f4f 	dsb	sy
 801c1da:	613b      	str	r3, [r7, #16]
}
 801c1dc:	bf00      	nop
 801c1de:	e7fe      	b.n	801c1de <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801c1e0:	683b      	ldr	r3, [r7, #0]
 801c1e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	68db      	ldr	r3, [r3, #12]
 801c1ee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801c1f0:	697b      	ldr	r3, [r7, #20]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d10a      	bne.n	801c20c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c1fa:	f383 8811 	msr	BASEPRI, r3
 801c1fe:	f3bf 8f6f 	isb	sy
 801c202:	f3bf 8f4f 	dsb	sy
 801c206:	60fb      	str	r3, [r7, #12]
}
 801c208:	bf00      	nop
 801c20a:	e7fe      	b.n	801c20a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801c20c:	6878      	ldr	r0, [r7, #4]
 801c20e:	f7fe fc2b 	bl	801aa68 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801c212:	697b      	ldr	r3, [r7, #20]
 801c214:	3304      	adds	r3, #4
 801c216:	4618      	mov	r0, r3
 801c218:	f7fe fc26 	bl	801aa68 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801c21c:	697b      	ldr	r3, [r7, #20]
 801c21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c220:	2201      	movs	r2, #1
 801c222:	409a      	lsls	r2, r3
 801c224:	4b11      	ldr	r3, [pc, #68]	; (801c26c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	4313      	orrs	r3, r2
 801c22a:	4a10      	ldr	r2, [pc, #64]	; (801c26c <vTaskRemoveFromUnorderedEventList+0xb4>)
 801c22c:	6013      	str	r3, [r2, #0]
 801c22e:	697b      	ldr	r3, [r7, #20]
 801c230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c232:	4613      	mov	r3, r2
 801c234:	009b      	lsls	r3, r3, #2
 801c236:	4413      	add	r3, r2
 801c238:	009b      	lsls	r3, r3, #2
 801c23a:	4a0d      	ldr	r2, [pc, #52]	; (801c270 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801c23c:	441a      	add	r2, r3
 801c23e:	697b      	ldr	r3, [r7, #20]
 801c240:	3304      	adds	r3, #4
 801c242:	4619      	mov	r1, r3
 801c244:	4610      	mov	r0, r2
 801c246:	f7fe fbb2 	bl	801a9ae <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801c24a:	697b      	ldr	r3, [r7, #20]
 801c24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c24e:	4b09      	ldr	r3, [pc, #36]	; (801c274 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c254:	429a      	cmp	r2, r3
 801c256:	d902      	bls.n	801c25e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801c258:	4b07      	ldr	r3, [pc, #28]	; (801c278 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801c25a:	2201      	movs	r2, #1
 801c25c:	601a      	str	r2, [r3, #0]
	}
}
 801c25e:	bf00      	nop
 801c260:	3718      	adds	r7, #24
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	20003ae0 	.word	0x20003ae0
 801c26c:	20003ac0 	.word	0x20003ac0
 801c270:	2000391c 	.word	0x2000391c
 801c274:	20003918 	.word	0x20003918
 801c278:	20003acc 	.word	0x20003acc

0801c27c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801c27c:	b480      	push	{r7}
 801c27e:	b083      	sub	sp, #12
 801c280:	af00      	add	r7, sp, #0
 801c282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801c284:	4b06      	ldr	r3, [pc, #24]	; (801c2a0 <vTaskInternalSetTimeOutState+0x24>)
 801c286:	681a      	ldr	r2, [r3, #0]
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801c28c:	4b05      	ldr	r3, [pc, #20]	; (801c2a4 <vTaskInternalSetTimeOutState+0x28>)
 801c28e:	681a      	ldr	r2, [r3, #0]
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	605a      	str	r2, [r3, #4]
}
 801c294:	bf00      	nop
 801c296:	370c      	adds	r7, #12
 801c298:	46bd      	mov	sp, r7
 801c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c29e:	4770      	bx	lr
 801c2a0:	20003ad0 	.word	0x20003ad0
 801c2a4:	20003abc 	.word	0x20003abc

0801c2a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b088      	sub	sp, #32
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
 801c2b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d10a      	bne.n	801c2ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2bc:	f383 8811 	msr	BASEPRI, r3
 801c2c0:	f3bf 8f6f 	isb	sy
 801c2c4:	f3bf 8f4f 	dsb	sy
 801c2c8:	613b      	str	r3, [r7, #16]
}
 801c2ca:	bf00      	nop
 801c2cc:	e7fe      	b.n	801c2cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d10a      	bne.n	801c2ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2d8:	f383 8811 	msr	BASEPRI, r3
 801c2dc:	f3bf 8f6f 	isb	sy
 801c2e0:	f3bf 8f4f 	dsb	sy
 801c2e4:	60fb      	str	r3, [r7, #12]
}
 801c2e6:	bf00      	nop
 801c2e8:	e7fe      	b.n	801c2e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801c2ea:	f000 ffc3 	bl	801d274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801c2ee:	4b1d      	ldr	r3, [pc, #116]	; (801c364 <xTaskCheckForTimeOut+0xbc>)
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	685b      	ldr	r3, [r3, #4]
 801c2f8:	69ba      	ldr	r2, [r7, #24]
 801c2fa:	1ad3      	subs	r3, r2, r3
 801c2fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c306:	d102      	bne.n	801c30e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801c308:	2300      	movs	r3, #0
 801c30a:	61fb      	str	r3, [r7, #28]
 801c30c:	e023      	b.n	801c356 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	681a      	ldr	r2, [r3, #0]
 801c312:	4b15      	ldr	r3, [pc, #84]	; (801c368 <xTaskCheckForTimeOut+0xc0>)
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	429a      	cmp	r2, r3
 801c318:	d007      	beq.n	801c32a <xTaskCheckForTimeOut+0x82>
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	685b      	ldr	r3, [r3, #4]
 801c31e:	69ba      	ldr	r2, [r7, #24]
 801c320:	429a      	cmp	r2, r3
 801c322:	d302      	bcc.n	801c32a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801c324:	2301      	movs	r3, #1
 801c326:	61fb      	str	r3, [r7, #28]
 801c328:	e015      	b.n	801c356 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801c32a:	683b      	ldr	r3, [r7, #0]
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	697a      	ldr	r2, [r7, #20]
 801c330:	429a      	cmp	r2, r3
 801c332:	d20b      	bcs.n	801c34c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801c334:	683b      	ldr	r3, [r7, #0]
 801c336:	681a      	ldr	r2, [r3, #0]
 801c338:	697b      	ldr	r3, [r7, #20]
 801c33a:	1ad2      	subs	r2, r2, r3
 801c33c:	683b      	ldr	r3, [r7, #0]
 801c33e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801c340:	6878      	ldr	r0, [r7, #4]
 801c342:	f7ff ff9b 	bl	801c27c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801c346:	2300      	movs	r3, #0
 801c348:	61fb      	str	r3, [r7, #28]
 801c34a:	e004      	b.n	801c356 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801c34c:	683b      	ldr	r3, [r7, #0]
 801c34e:	2200      	movs	r2, #0
 801c350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801c352:	2301      	movs	r3, #1
 801c354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801c356:	f000 ffbd 	bl	801d2d4 <vPortExitCritical>

	return xReturn;
 801c35a:	69fb      	ldr	r3, [r7, #28]
}
 801c35c:	4618      	mov	r0, r3
 801c35e:	3720      	adds	r7, #32
 801c360:	46bd      	mov	sp, r7
 801c362:	bd80      	pop	{r7, pc}
 801c364:	20003abc 	.word	0x20003abc
 801c368:	20003ad0 	.word	0x20003ad0

0801c36c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801c36c:	b480      	push	{r7}
 801c36e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801c370:	4b03      	ldr	r3, [pc, #12]	; (801c380 <vTaskMissedYield+0x14>)
 801c372:	2201      	movs	r2, #1
 801c374:	601a      	str	r2, [r3, #0]
}
 801c376:	bf00      	nop
 801c378:	46bd      	mov	sp, r7
 801c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37e:	4770      	bx	lr
 801c380:	20003acc 	.word	0x20003acc

0801c384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801c384:	b580      	push	{r7, lr}
 801c386:	b082      	sub	sp, #8
 801c388:	af00      	add	r7, sp, #0
 801c38a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801c38c:	f000 f852 	bl	801c434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801c390:	4b06      	ldr	r3, [pc, #24]	; (801c3ac <prvIdleTask+0x28>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	2b01      	cmp	r3, #1
 801c396:	d9f9      	bls.n	801c38c <prvIdleTask+0x8>
			{
				taskYIELD();
 801c398:	4b05      	ldr	r3, [pc, #20]	; (801c3b0 <prvIdleTask+0x2c>)
 801c39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c39e:	601a      	str	r2, [r3, #0]
 801c3a0:	f3bf 8f4f 	dsb	sy
 801c3a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801c3a8:	e7f0      	b.n	801c38c <prvIdleTask+0x8>
 801c3aa:	bf00      	nop
 801c3ac:	2000391c 	.word	0x2000391c
 801c3b0:	e000ed04 	.word	0xe000ed04

0801c3b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b082      	sub	sp, #8
 801c3b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801c3ba:	2300      	movs	r3, #0
 801c3bc:	607b      	str	r3, [r7, #4]
 801c3be:	e00c      	b.n	801c3da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801c3c0:	687a      	ldr	r2, [r7, #4]
 801c3c2:	4613      	mov	r3, r2
 801c3c4:	009b      	lsls	r3, r3, #2
 801c3c6:	4413      	add	r3, r2
 801c3c8:	009b      	lsls	r3, r3, #2
 801c3ca:	4a12      	ldr	r2, [pc, #72]	; (801c414 <prvInitialiseTaskLists+0x60>)
 801c3cc:	4413      	add	r3, r2
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	f7fe fac0 	bl	801a954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	3301      	adds	r3, #1
 801c3d8:	607b      	str	r3, [r7, #4]
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	2b0e      	cmp	r3, #14
 801c3de:	d9ef      	bls.n	801c3c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801c3e0:	480d      	ldr	r0, [pc, #52]	; (801c418 <prvInitialiseTaskLists+0x64>)
 801c3e2:	f7fe fab7 	bl	801a954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801c3e6:	480d      	ldr	r0, [pc, #52]	; (801c41c <prvInitialiseTaskLists+0x68>)
 801c3e8:	f7fe fab4 	bl	801a954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801c3ec:	480c      	ldr	r0, [pc, #48]	; (801c420 <prvInitialiseTaskLists+0x6c>)
 801c3ee:	f7fe fab1 	bl	801a954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801c3f2:	480c      	ldr	r0, [pc, #48]	; (801c424 <prvInitialiseTaskLists+0x70>)
 801c3f4:	f7fe faae 	bl	801a954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801c3f8:	480b      	ldr	r0, [pc, #44]	; (801c428 <prvInitialiseTaskLists+0x74>)
 801c3fa:	f7fe faab 	bl	801a954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801c3fe:	4b0b      	ldr	r3, [pc, #44]	; (801c42c <prvInitialiseTaskLists+0x78>)
 801c400:	4a05      	ldr	r2, [pc, #20]	; (801c418 <prvInitialiseTaskLists+0x64>)
 801c402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801c404:	4b0a      	ldr	r3, [pc, #40]	; (801c430 <prvInitialiseTaskLists+0x7c>)
 801c406:	4a05      	ldr	r2, [pc, #20]	; (801c41c <prvInitialiseTaskLists+0x68>)
 801c408:	601a      	str	r2, [r3, #0]
}
 801c40a:	bf00      	nop
 801c40c:	3708      	adds	r7, #8
 801c40e:	46bd      	mov	sp, r7
 801c410:	bd80      	pop	{r7, pc}
 801c412:	bf00      	nop
 801c414:	2000391c 	.word	0x2000391c
 801c418:	20003a48 	.word	0x20003a48
 801c41c:	20003a5c 	.word	0x20003a5c
 801c420:	20003a78 	.word	0x20003a78
 801c424:	20003a8c 	.word	0x20003a8c
 801c428:	20003aa4 	.word	0x20003aa4
 801c42c:	20003a70 	.word	0x20003a70
 801c430:	20003a74 	.word	0x20003a74

0801c434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b082      	sub	sp, #8
 801c438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801c43a:	e019      	b.n	801c470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801c43c:	f000 ff1a 	bl	801d274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c440:	4b10      	ldr	r3, [pc, #64]	; (801c484 <prvCheckTasksWaitingTermination+0x50>)
 801c442:	68db      	ldr	r3, [r3, #12]
 801c444:	68db      	ldr	r3, [r3, #12]
 801c446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	3304      	adds	r3, #4
 801c44c:	4618      	mov	r0, r3
 801c44e:	f7fe fb0b 	bl	801aa68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801c452:	4b0d      	ldr	r3, [pc, #52]	; (801c488 <prvCheckTasksWaitingTermination+0x54>)
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	3b01      	subs	r3, #1
 801c458:	4a0b      	ldr	r2, [pc, #44]	; (801c488 <prvCheckTasksWaitingTermination+0x54>)
 801c45a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801c45c:	4b0b      	ldr	r3, [pc, #44]	; (801c48c <prvCheckTasksWaitingTermination+0x58>)
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	3b01      	subs	r3, #1
 801c462:	4a0a      	ldr	r2, [pc, #40]	; (801c48c <prvCheckTasksWaitingTermination+0x58>)
 801c464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801c466:	f000 ff35 	bl	801d2d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801c46a:	6878      	ldr	r0, [r7, #4]
 801c46c:	f000 f810 	bl	801c490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801c470:	4b06      	ldr	r3, [pc, #24]	; (801c48c <prvCheckTasksWaitingTermination+0x58>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d1e1      	bne.n	801c43c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801c478:	bf00      	nop
 801c47a:	bf00      	nop
 801c47c:	3708      	adds	r7, #8
 801c47e:	46bd      	mov	sp, r7
 801c480:	bd80      	pop	{r7, pc}
 801c482:	bf00      	nop
 801c484:	20003a8c 	.word	0x20003a8c
 801c488:	20003ab8 	.word	0x20003ab8
 801c48c:	20003aa0 	.word	0x20003aa0

0801c490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801c490:	b580      	push	{r7, lr}
 801c492:	b084      	sub	sp, #16
 801c494:	af00      	add	r7, sp, #0
 801c496:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	3358      	adds	r3, #88	; 0x58
 801c49c:	4618      	mov	r0, r3
 801c49e:	f002 ff8d 	bl	801f3bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d108      	bne.n	801c4be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f001 f8cd 	bl	801d650 <vPortFree>
				vPortFree( pxTCB );
 801c4b6:	6878      	ldr	r0, [r7, #4]
 801c4b8:	f001 f8ca 	bl	801d650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801c4bc:	e018      	b.n	801c4f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801c4c4:	2b01      	cmp	r3, #1
 801c4c6:	d103      	bne.n	801c4d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801c4c8:	6878      	ldr	r0, [r7, #4]
 801c4ca:	f001 f8c1 	bl	801d650 <vPortFree>
	}
 801c4ce:	e00f      	b.n	801c4f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801c4d6:	2b02      	cmp	r3, #2
 801c4d8:	d00a      	beq.n	801c4f0 <prvDeleteTCB+0x60>
	__asm volatile
 801c4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4de:	f383 8811 	msr	BASEPRI, r3
 801c4e2:	f3bf 8f6f 	isb	sy
 801c4e6:	f3bf 8f4f 	dsb	sy
 801c4ea:	60fb      	str	r3, [r7, #12]
}
 801c4ec:	bf00      	nop
 801c4ee:	e7fe      	b.n	801c4ee <prvDeleteTCB+0x5e>
	}
 801c4f0:	bf00      	nop
 801c4f2:	3710      	adds	r7, #16
 801c4f4:	46bd      	mov	sp, r7
 801c4f6:	bd80      	pop	{r7, pc}

0801c4f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801c4f8:	b480      	push	{r7}
 801c4fa:	b083      	sub	sp, #12
 801c4fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801c4fe:	4b0c      	ldr	r3, [pc, #48]	; (801c530 <prvResetNextTaskUnblockTime+0x38>)
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	2b00      	cmp	r3, #0
 801c506:	d104      	bne.n	801c512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801c508:	4b0a      	ldr	r3, [pc, #40]	; (801c534 <prvResetNextTaskUnblockTime+0x3c>)
 801c50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c50e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801c510:	e008      	b.n	801c524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c512:	4b07      	ldr	r3, [pc, #28]	; (801c530 <prvResetNextTaskUnblockTime+0x38>)
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	68db      	ldr	r3, [r3, #12]
 801c518:	68db      	ldr	r3, [r3, #12]
 801c51a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	685b      	ldr	r3, [r3, #4]
 801c520:	4a04      	ldr	r2, [pc, #16]	; (801c534 <prvResetNextTaskUnblockTime+0x3c>)
 801c522:	6013      	str	r3, [r2, #0]
}
 801c524:	bf00      	nop
 801c526:	370c      	adds	r7, #12
 801c528:	46bd      	mov	sp, r7
 801c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c52e:	4770      	bx	lr
 801c530:	20003a70 	.word	0x20003a70
 801c534:	20003ad8 	.word	0x20003ad8

0801c538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801c538:	b480      	push	{r7}
 801c53a:	b083      	sub	sp, #12
 801c53c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801c53e:	4b0b      	ldr	r3, [pc, #44]	; (801c56c <xTaskGetSchedulerState+0x34>)
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d102      	bne.n	801c54c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801c546:	2301      	movs	r3, #1
 801c548:	607b      	str	r3, [r7, #4]
 801c54a:	e008      	b.n	801c55e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c54c:	4b08      	ldr	r3, [pc, #32]	; (801c570 <xTaskGetSchedulerState+0x38>)
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	2b00      	cmp	r3, #0
 801c552:	d102      	bne.n	801c55a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801c554:	2302      	movs	r3, #2
 801c556:	607b      	str	r3, [r7, #4]
 801c558:	e001      	b.n	801c55e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801c55a:	2300      	movs	r3, #0
 801c55c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801c55e:	687b      	ldr	r3, [r7, #4]
	}
 801c560:	4618      	mov	r0, r3
 801c562:	370c      	adds	r7, #12
 801c564:	46bd      	mov	sp, r7
 801c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c56a:	4770      	bx	lr
 801c56c:	20003ac4 	.word	0x20003ac4
 801c570:	20003ae0 	.word	0x20003ae0

0801c574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801c574:	b580      	push	{r7, lr}
 801c576:	b086      	sub	sp, #24
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801c580:	2300      	movs	r3, #0
 801c582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	2b00      	cmp	r3, #0
 801c588:	d06e      	beq.n	801c668 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801c58a:	4b3a      	ldr	r3, [pc, #232]	; (801c674 <xTaskPriorityDisinherit+0x100>)
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	693a      	ldr	r2, [r7, #16]
 801c590:	429a      	cmp	r2, r3
 801c592:	d00a      	beq.n	801c5aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c598:	f383 8811 	msr	BASEPRI, r3
 801c59c:	f3bf 8f6f 	isb	sy
 801c5a0:	f3bf 8f4f 	dsb	sy
 801c5a4:	60fb      	str	r3, [r7, #12]
}
 801c5a6:	bf00      	nop
 801c5a8:	e7fe      	b.n	801c5a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801c5aa:	693b      	ldr	r3, [r7, #16]
 801c5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d10a      	bne.n	801c5c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5b6:	f383 8811 	msr	BASEPRI, r3
 801c5ba:	f3bf 8f6f 	isb	sy
 801c5be:	f3bf 8f4f 	dsb	sy
 801c5c2:	60bb      	str	r3, [r7, #8]
}
 801c5c4:	bf00      	nop
 801c5c6:	e7fe      	b.n	801c5c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801c5c8:	693b      	ldr	r3, [r7, #16]
 801c5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c5cc:	1e5a      	subs	r2, r3, #1
 801c5ce:	693b      	ldr	r3, [r7, #16]
 801c5d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801c5d2:	693b      	ldr	r3, [r7, #16]
 801c5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c5d6:	693b      	ldr	r3, [r7, #16]
 801c5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5da:	429a      	cmp	r2, r3
 801c5dc:	d044      	beq.n	801c668 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801c5de:	693b      	ldr	r3, [r7, #16]
 801c5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d140      	bne.n	801c668 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c5e6:	693b      	ldr	r3, [r7, #16]
 801c5e8:	3304      	adds	r3, #4
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	f7fe fa3c 	bl	801aa68 <uxListRemove>
 801c5f0:	4603      	mov	r3, r0
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d115      	bne.n	801c622 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801c5f6:	693b      	ldr	r3, [r7, #16]
 801c5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c5fa:	491f      	ldr	r1, [pc, #124]	; (801c678 <xTaskPriorityDisinherit+0x104>)
 801c5fc:	4613      	mov	r3, r2
 801c5fe:	009b      	lsls	r3, r3, #2
 801c600:	4413      	add	r3, r2
 801c602:	009b      	lsls	r3, r3, #2
 801c604:	440b      	add	r3, r1
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d10a      	bne.n	801c622 <xTaskPriorityDisinherit+0xae>
 801c60c:	693b      	ldr	r3, [r7, #16]
 801c60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c610:	2201      	movs	r2, #1
 801c612:	fa02 f303 	lsl.w	r3, r2, r3
 801c616:	43da      	mvns	r2, r3
 801c618:	4b18      	ldr	r3, [pc, #96]	; (801c67c <xTaskPriorityDisinherit+0x108>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	4013      	ands	r3, r2
 801c61e:	4a17      	ldr	r2, [pc, #92]	; (801c67c <xTaskPriorityDisinherit+0x108>)
 801c620:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801c622:	693b      	ldr	r3, [r7, #16]
 801c624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c626:	693b      	ldr	r3, [r7, #16]
 801c628:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c62a:	693b      	ldr	r3, [r7, #16]
 801c62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c62e:	f1c3 020f 	rsb	r2, r3, #15
 801c632:	693b      	ldr	r3, [r7, #16]
 801c634:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801c636:	693b      	ldr	r3, [r7, #16]
 801c638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c63a:	2201      	movs	r2, #1
 801c63c:	409a      	lsls	r2, r3
 801c63e:	4b0f      	ldr	r3, [pc, #60]	; (801c67c <xTaskPriorityDisinherit+0x108>)
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	4313      	orrs	r3, r2
 801c644:	4a0d      	ldr	r2, [pc, #52]	; (801c67c <xTaskPriorityDisinherit+0x108>)
 801c646:	6013      	str	r3, [r2, #0]
 801c648:	693b      	ldr	r3, [r7, #16]
 801c64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c64c:	4613      	mov	r3, r2
 801c64e:	009b      	lsls	r3, r3, #2
 801c650:	4413      	add	r3, r2
 801c652:	009b      	lsls	r3, r3, #2
 801c654:	4a08      	ldr	r2, [pc, #32]	; (801c678 <xTaskPriorityDisinherit+0x104>)
 801c656:	441a      	add	r2, r3
 801c658:	693b      	ldr	r3, [r7, #16]
 801c65a:	3304      	adds	r3, #4
 801c65c:	4619      	mov	r1, r3
 801c65e:	4610      	mov	r0, r2
 801c660:	f7fe f9a5 	bl	801a9ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801c664:	2301      	movs	r3, #1
 801c666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c668:	697b      	ldr	r3, [r7, #20]
	}
 801c66a:	4618      	mov	r0, r3
 801c66c:	3718      	adds	r7, #24
 801c66e:	46bd      	mov	sp, r7
 801c670:	bd80      	pop	{r7, pc}
 801c672:	bf00      	nop
 801c674:	20003918 	.word	0x20003918
 801c678:	2000391c 	.word	0x2000391c
 801c67c:	20003ac0 	.word	0x20003ac0

0801c680 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801c680:	b480      	push	{r7}
 801c682:	b083      	sub	sp, #12
 801c684:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801c686:	4b09      	ldr	r3, [pc, #36]	; (801c6ac <uxTaskResetEventItemValue+0x2c>)
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	699b      	ldr	r3, [r3, #24]
 801c68c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c68e:	4b07      	ldr	r3, [pc, #28]	; (801c6ac <uxTaskResetEventItemValue+0x2c>)
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c694:	4b05      	ldr	r3, [pc, #20]	; (801c6ac <uxTaskResetEventItemValue+0x2c>)
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	f1c2 020f 	rsb	r2, r2, #15
 801c69c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801c69e:	687b      	ldr	r3, [r7, #4]
}
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	370c      	adds	r7, #12
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6aa:	4770      	bx	lr
 801c6ac:	20003918 	.word	0x20003918

0801c6b0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b084      	sub	sp, #16
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	6078      	str	r0, [r7, #4]
 801c6b8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801c6ba:	f000 fddb 	bl	801d274 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801c6be:	4b20      	ldr	r3, [pc, #128]	; (801c740 <ulTaskNotifyTake+0x90>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d113      	bne.n	801c6f2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801c6ca:	4b1d      	ldr	r3, [pc, #116]	; (801c740 <ulTaskNotifyTake+0x90>)
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	2201      	movs	r2, #1
 801c6d0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 801c6d4:	683b      	ldr	r3, [r7, #0]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d00b      	beq.n	801c6f2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801c6da:	2101      	movs	r1, #1
 801c6dc:	6838      	ldr	r0, [r7, #0]
 801c6de:	f000 f8c7 	bl	801c870 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801c6e2:	4b18      	ldr	r3, [pc, #96]	; (801c744 <ulTaskNotifyTake+0x94>)
 801c6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c6e8:	601a      	str	r2, [r3, #0]
 801c6ea:	f3bf 8f4f 	dsb	sy
 801c6ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801c6f2:	f000 fdef 	bl	801d2d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801c6f6:	f000 fdbd 	bl	801d274 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801c6fa:	4b11      	ldr	r3, [pc, #68]	; (801c740 <ulTaskNotifyTake+0x90>)
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801c702:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d00e      	beq.n	801c728 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d005      	beq.n	801c71c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801c710:	4b0b      	ldr	r3, [pc, #44]	; (801c740 <ulTaskNotifyTake+0x90>)
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	2200      	movs	r2, #0
 801c716:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801c71a:	e005      	b.n	801c728 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801c71c:	4b08      	ldr	r3, [pc, #32]	; (801c740 <ulTaskNotifyTake+0x90>)
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	68fa      	ldr	r2, [r7, #12]
 801c722:	3a01      	subs	r2, #1
 801c724:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801c728:	4b05      	ldr	r3, [pc, #20]	; (801c740 <ulTaskNotifyTake+0x90>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	2200      	movs	r2, #0
 801c72e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 801c732:	f000 fdcf 	bl	801d2d4 <vPortExitCritical>

		return ulReturn;
 801c736:	68fb      	ldr	r3, [r7, #12]
	}
 801c738:	4618      	mov	r0, r3
 801c73a:	3710      	adds	r7, #16
 801c73c:	46bd      	mov	sp, r7
 801c73e:	bd80      	pop	{r7, pc}
 801c740:	20003918 	.word	0x20003918
 801c744:	e000ed04 	.word	0xe000ed04

0801c748 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801c748:	b580      	push	{r7, lr}
 801c74a:	b08a      	sub	sp, #40	; 0x28
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	6078      	str	r0, [r7, #4]
 801c750:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d10a      	bne.n	801c76e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 801c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c75c:	f383 8811 	msr	BASEPRI, r3
 801c760:	f3bf 8f6f 	isb	sy
 801c764:	f3bf 8f4f 	dsb	sy
 801c768:	61bb      	str	r3, [r7, #24]
}
 801c76a:	bf00      	nop
 801c76c:	e7fe      	b.n	801c76c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801c76e:	f000 fe63 	bl	801d438 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 801c776:	f3ef 8211 	mrs	r2, BASEPRI
 801c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c77e:	f383 8811 	msr	BASEPRI, r3
 801c782:	f3bf 8f6f 	isb	sy
 801c786:	f3bf 8f4f 	dsb	sy
 801c78a:	617a      	str	r2, [r7, #20]
 801c78c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801c78e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801c790:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801c792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c794:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801c798:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c79c:	2202      	movs	r2, #2
 801c79e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 801c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801c7a8:	1c5a      	adds	r2, r3, #1
 801c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801c7b0:	7ffb      	ldrb	r3, [r7, #31]
 801c7b2:	2b01      	cmp	r3, #1
 801c7b4:	d145      	bne.n	801c842 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d00a      	beq.n	801c7d4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 801c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7c2:	f383 8811 	msr	BASEPRI, r3
 801c7c6:	f3bf 8f6f 	isb	sy
 801c7ca:	f3bf 8f4f 	dsb	sy
 801c7ce:	60fb      	str	r3, [r7, #12]
}
 801c7d0:	bf00      	nop
 801c7d2:	e7fe      	b.n	801c7d2 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c7d4:	4b20      	ldr	r3, [pc, #128]	; (801c858 <vTaskNotifyGiveFromISR+0x110>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d11c      	bne.n	801c816 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7de:	3304      	adds	r3, #4
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f7fe f941 	bl	801aa68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7ea:	2201      	movs	r2, #1
 801c7ec:	409a      	lsls	r2, r3
 801c7ee:	4b1b      	ldr	r3, [pc, #108]	; (801c85c <vTaskNotifyGiveFromISR+0x114>)
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	4313      	orrs	r3, r2
 801c7f4:	4a19      	ldr	r2, [pc, #100]	; (801c85c <vTaskNotifyGiveFromISR+0x114>)
 801c7f6:	6013      	str	r3, [r2, #0]
 801c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c7fc:	4613      	mov	r3, r2
 801c7fe:	009b      	lsls	r3, r3, #2
 801c800:	4413      	add	r3, r2
 801c802:	009b      	lsls	r3, r3, #2
 801c804:	4a16      	ldr	r2, [pc, #88]	; (801c860 <vTaskNotifyGiveFromISR+0x118>)
 801c806:	441a      	add	r2, r3
 801c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c80a:	3304      	adds	r3, #4
 801c80c:	4619      	mov	r1, r3
 801c80e:	4610      	mov	r0, r2
 801c810:	f7fe f8cd 	bl	801a9ae <vListInsertEnd>
 801c814:	e005      	b.n	801c822 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801c816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c818:	3318      	adds	r3, #24
 801c81a:	4619      	mov	r1, r3
 801c81c:	4811      	ldr	r0, [pc, #68]	; (801c864 <vTaskNotifyGiveFromISR+0x11c>)
 801c81e:	f7fe f8c6 	bl	801a9ae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c826:	4b10      	ldr	r3, [pc, #64]	; (801c868 <vTaskNotifyGiveFromISR+0x120>)
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c82c:	429a      	cmp	r2, r3
 801c82e:	d908      	bls.n	801c842 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801c830:	683b      	ldr	r3, [r7, #0]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d002      	beq.n	801c83c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801c836:	683b      	ldr	r3, [r7, #0]
 801c838:	2201      	movs	r2, #1
 801c83a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801c83c:	4b0b      	ldr	r3, [pc, #44]	; (801c86c <vTaskNotifyGiveFromISR+0x124>)
 801c83e:	2201      	movs	r2, #1
 801c840:	601a      	str	r2, [r3, #0]
 801c842:	6a3b      	ldr	r3, [r7, #32]
 801c844:	60bb      	str	r3, [r7, #8]
	__asm volatile
 801c846:	68bb      	ldr	r3, [r7, #8]
 801c848:	f383 8811 	msr	BASEPRI, r3
}
 801c84c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 801c84e:	bf00      	nop
 801c850:	3728      	adds	r7, #40	; 0x28
 801c852:	46bd      	mov	sp, r7
 801c854:	bd80      	pop	{r7, pc}
 801c856:	bf00      	nop
 801c858:	20003ae0 	.word	0x20003ae0
 801c85c:	20003ac0 	.word	0x20003ac0
 801c860:	2000391c 	.word	0x2000391c
 801c864:	20003a78 	.word	0x20003a78
 801c868:	20003918 	.word	0x20003918
 801c86c:	20003acc 	.word	0x20003acc

0801c870 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801c870:	b580      	push	{r7, lr}
 801c872:	b084      	sub	sp, #16
 801c874:	af00      	add	r7, sp, #0
 801c876:	6078      	str	r0, [r7, #4]
 801c878:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801c87a:	4b29      	ldr	r3, [pc, #164]	; (801c920 <prvAddCurrentTaskToDelayedList+0xb0>)
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c880:	4b28      	ldr	r3, [pc, #160]	; (801c924 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	3304      	adds	r3, #4
 801c886:	4618      	mov	r0, r3
 801c888:	f7fe f8ee 	bl	801aa68 <uxListRemove>
 801c88c:	4603      	mov	r3, r0
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d10b      	bne.n	801c8aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801c892:	4b24      	ldr	r3, [pc, #144]	; (801c924 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c898:	2201      	movs	r2, #1
 801c89a:	fa02 f303 	lsl.w	r3, r2, r3
 801c89e:	43da      	mvns	r2, r3
 801c8a0:	4b21      	ldr	r3, [pc, #132]	; (801c928 <prvAddCurrentTaskToDelayedList+0xb8>)
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	4013      	ands	r3, r2
 801c8a6:	4a20      	ldr	r2, [pc, #128]	; (801c928 <prvAddCurrentTaskToDelayedList+0xb8>)
 801c8a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c8b0:	d10a      	bne.n	801c8c8 <prvAddCurrentTaskToDelayedList+0x58>
 801c8b2:	683b      	ldr	r3, [r7, #0]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d007      	beq.n	801c8c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c8b8:	4b1a      	ldr	r3, [pc, #104]	; (801c924 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	3304      	adds	r3, #4
 801c8be:	4619      	mov	r1, r3
 801c8c0:	481a      	ldr	r0, [pc, #104]	; (801c92c <prvAddCurrentTaskToDelayedList+0xbc>)
 801c8c2:	f7fe f874 	bl	801a9ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801c8c6:	e026      	b.n	801c916 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801c8c8:	68fa      	ldr	r2, [r7, #12]
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	4413      	add	r3, r2
 801c8ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801c8d0:	4b14      	ldr	r3, [pc, #80]	; (801c924 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	68ba      	ldr	r2, [r7, #8]
 801c8d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801c8d8:	68ba      	ldr	r2, [r7, #8]
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	429a      	cmp	r2, r3
 801c8de:	d209      	bcs.n	801c8f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c8e0:	4b13      	ldr	r3, [pc, #76]	; (801c930 <prvAddCurrentTaskToDelayedList+0xc0>)
 801c8e2:	681a      	ldr	r2, [r3, #0]
 801c8e4:	4b0f      	ldr	r3, [pc, #60]	; (801c924 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	3304      	adds	r3, #4
 801c8ea:	4619      	mov	r1, r3
 801c8ec:	4610      	mov	r0, r2
 801c8ee:	f7fe f882 	bl	801a9f6 <vListInsert>
}
 801c8f2:	e010      	b.n	801c916 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c8f4:	4b0f      	ldr	r3, [pc, #60]	; (801c934 <prvAddCurrentTaskToDelayedList+0xc4>)
 801c8f6:	681a      	ldr	r2, [r3, #0]
 801c8f8:	4b0a      	ldr	r3, [pc, #40]	; (801c924 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	3304      	adds	r3, #4
 801c8fe:	4619      	mov	r1, r3
 801c900:	4610      	mov	r0, r2
 801c902:	f7fe f878 	bl	801a9f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801c906:	4b0c      	ldr	r3, [pc, #48]	; (801c938 <prvAddCurrentTaskToDelayedList+0xc8>)
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	68ba      	ldr	r2, [r7, #8]
 801c90c:	429a      	cmp	r2, r3
 801c90e:	d202      	bcs.n	801c916 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801c910:	4a09      	ldr	r2, [pc, #36]	; (801c938 <prvAddCurrentTaskToDelayedList+0xc8>)
 801c912:	68bb      	ldr	r3, [r7, #8]
 801c914:	6013      	str	r3, [r2, #0]
}
 801c916:	bf00      	nop
 801c918:	3710      	adds	r7, #16
 801c91a:	46bd      	mov	sp, r7
 801c91c:	bd80      	pop	{r7, pc}
 801c91e:	bf00      	nop
 801c920:	20003abc 	.word	0x20003abc
 801c924:	20003918 	.word	0x20003918
 801c928:	20003ac0 	.word	0x20003ac0
 801c92c:	20003aa4 	.word	0x20003aa4
 801c930:	20003a74 	.word	0x20003a74
 801c934:	20003a70 	.word	0x20003a70
 801c938:	20003ad8 	.word	0x20003ad8

0801c93c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b08a      	sub	sp, #40	; 0x28
 801c940:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801c942:	2300      	movs	r3, #0
 801c944:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801c946:	f000 fb07 	bl	801cf58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801c94a:	4b1c      	ldr	r3, [pc, #112]	; (801c9bc <xTimerCreateTimerTask+0x80>)
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d021      	beq.n	801c996 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801c952:	2300      	movs	r3, #0
 801c954:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801c956:	2300      	movs	r3, #0
 801c958:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801c95a:	1d3a      	adds	r2, r7, #4
 801c95c:	f107 0108 	add.w	r1, r7, #8
 801c960:	f107 030c 	add.w	r3, r7, #12
 801c964:	4618      	mov	r0, r3
 801c966:	f7e6 fcc9 	bl	80032fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801c96a:	6879      	ldr	r1, [r7, #4]
 801c96c:	68bb      	ldr	r3, [r7, #8]
 801c96e:	68fa      	ldr	r2, [r7, #12]
 801c970:	9202      	str	r2, [sp, #8]
 801c972:	9301      	str	r3, [sp, #4]
 801c974:	2302      	movs	r3, #2
 801c976:	9300      	str	r3, [sp, #0]
 801c978:	2300      	movs	r3, #0
 801c97a:	460a      	mov	r2, r1
 801c97c:	4910      	ldr	r1, [pc, #64]	; (801c9c0 <xTimerCreateTimerTask+0x84>)
 801c97e:	4811      	ldr	r0, [pc, #68]	; (801c9c4 <xTimerCreateTimerTask+0x88>)
 801c980:	f7fe fe4e 	bl	801b620 <xTaskCreateStatic>
 801c984:	4603      	mov	r3, r0
 801c986:	4a10      	ldr	r2, [pc, #64]	; (801c9c8 <xTimerCreateTimerTask+0x8c>)
 801c988:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c98a:	4b0f      	ldr	r3, [pc, #60]	; (801c9c8 <xTimerCreateTimerTask+0x8c>)
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d001      	beq.n	801c996 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801c992:	2301      	movs	r3, #1
 801c994:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c996:	697b      	ldr	r3, [r7, #20]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d10a      	bne.n	801c9b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9a0:	f383 8811 	msr	BASEPRI, r3
 801c9a4:	f3bf 8f6f 	isb	sy
 801c9a8:	f3bf 8f4f 	dsb	sy
 801c9ac:	613b      	str	r3, [r7, #16]
}
 801c9ae:	bf00      	nop
 801c9b0:	e7fe      	b.n	801c9b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801c9b2:	697b      	ldr	r3, [r7, #20]
}
 801c9b4:	4618      	mov	r0, r3
 801c9b6:	3718      	adds	r7, #24
 801c9b8:	46bd      	mov	sp, r7
 801c9ba:	bd80      	pop	{r7, pc}
 801c9bc:	20003b1c 	.word	0x20003b1c
 801c9c0:	08025854 	.word	0x08025854
 801c9c4:	0801cb01 	.word	0x0801cb01
 801c9c8:	20003b20 	.word	0x20003b20

0801c9cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c9cc:	b580      	push	{r7, lr}
 801c9ce:	b08a      	sub	sp, #40	; 0x28
 801c9d0:	af00      	add	r7, sp, #0
 801c9d2:	60f8      	str	r0, [r7, #12]
 801c9d4:	60b9      	str	r1, [r7, #8]
 801c9d6:	607a      	str	r2, [r7, #4]
 801c9d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c9da:	2300      	movs	r3, #0
 801c9dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d10a      	bne.n	801c9fa <xTimerGenericCommand+0x2e>
	__asm volatile
 801c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9e8:	f383 8811 	msr	BASEPRI, r3
 801c9ec:	f3bf 8f6f 	isb	sy
 801c9f0:	f3bf 8f4f 	dsb	sy
 801c9f4:	623b      	str	r3, [r7, #32]
}
 801c9f6:	bf00      	nop
 801c9f8:	e7fe      	b.n	801c9f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c9fa:	4b1a      	ldr	r3, [pc, #104]	; (801ca64 <xTimerGenericCommand+0x98>)
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d02a      	beq.n	801ca58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801ca02:	68bb      	ldr	r3, [r7, #8]
 801ca04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801ca0e:	68bb      	ldr	r3, [r7, #8]
 801ca10:	2b05      	cmp	r3, #5
 801ca12:	dc18      	bgt.n	801ca46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801ca14:	f7ff fd90 	bl	801c538 <xTaskGetSchedulerState>
 801ca18:	4603      	mov	r3, r0
 801ca1a:	2b02      	cmp	r3, #2
 801ca1c:	d109      	bne.n	801ca32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801ca1e:	4b11      	ldr	r3, [pc, #68]	; (801ca64 <xTimerGenericCommand+0x98>)
 801ca20:	6818      	ldr	r0, [r3, #0]
 801ca22:	f107 0110 	add.w	r1, r7, #16
 801ca26:	2300      	movs	r3, #0
 801ca28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca2a:	f7fe f985 	bl	801ad38 <xQueueGenericSend>
 801ca2e:	6278      	str	r0, [r7, #36]	; 0x24
 801ca30:	e012      	b.n	801ca58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801ca32:	4b0c      	ldr	r3, [pc, #48]	; (801ca64 <xTimerGenericCommand+0x98>)
 801ca34:	6818      	ldr	r0, [r3, #0]
 801ca36:	f107 0110 	add.w	r1, r7, #16
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	2200      	movs	r2, #0
 801ca3e:	f7fe f97b 	bl	801ad38 <xQueueGenericSend>
 801ca42:	6278      	str	r0, [r7, #36]	; 0x24
 801ca44:	e008      	b.n	801ca58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801ca46:	4b07      	ldr	r3, [pc, #28]	; (801ca64 <xTimerGenericCommand+0x98>)
 801ca48:	6818      	ldr	r0, [r3, #0]
 801ca4a:	f107 0110 	add.w	r1, r7, #16
 801ca4e:	2300      	movs	r3, #0
 801ca50:	683a      	ldr	r2, [r7, #0]
 801ca52:	f7fe fa6f 	bl	801af34 <xQueueGenericSendFromISR>
 801ca56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	3728      	adds	r7, #40	; 0x28
 801ca5e:	46bd      	mov	sp, r7
 801ca60:	bd80      	pop	{r7, pc}
 801ca62:	bf00      	nop
 801ca64:	20003b1c 	.word	0x20003b1c

0801ca68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	b088      	sub	sp, #32
 801ca6c:	af02      	add	r7, sp, #8
 801ca6e:	6078      	str	r0, [r7, #4]
 801ca70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ca72:	4b22      	ldr	r3, [pc, #136]	; (801cafc <prvProcessExpiredTimer+0x94>)
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	68db      	ldr	r3, [r3, #12]
 801ca78:	68db      	ldr	r3, [r3, #12]
 801ca7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ca7c:	697b      	ldr	r3, [r7, #20]
 801ca7e:	3304      	adds	r3, #4
 801ca80:	4618      	mov	r0, r3
 801ca82:	f7fd fff1 	bl	801aa68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ca86:	697b      	ldr	r3, [r7, #20]
 801ca88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ca8c:	f003 0304 	and.w	r3, r3, #4
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d022      	beq.n	801cada <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801ca94:	697b      	ldr	r3, [r7, #20]
 801ca96:	699a      	ldr	r2, [r3, #24]
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	18d1      	adds	r1, r2, r3
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	683a      	ldr	r2, [r7, #0]
 801caa0:	6978      	ldr	r0, [r7, #20]
 801caa2:	f000 f8d1 	bl	801cc48 <prvInsertTimerInActiveList>
 801caa6:	4603      	mov	r3, r0
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d01f      	beq.n	801caec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801caac:	2300      	movs	r3, #0
 801caae:	9300      	str	r3, [sp, #0]
 801cab0:	2300      	movs	r3, #0
 801cab2:	687a      	ldr	r2, [r7, #4]
 801cab4:	2100      	movs	r1, #0
 801cab6:	6978      	ldr	r0, [r7, #20]
 801cab8:	f7ff ff88 	bl	801c9cc <xTimerGenericCommand>
 801cabc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801cabe:	693b      	ldr	r3, [r7, #16]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d113      	bne.n	801caec <prvProcessExpiredTimer+0x84>
	__asm volatile
 801cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cac8:	f383 8811 	msr	BASEPRI, r3
 801cacc:	f3bf 8f6f 	isb	sy
 801cad0:	f3bf 8f4f 	dsb	sy
 801cad4:	60fb      	str	r3, [r7, #12]
}
 801cad6:	bf00      	nop
 801cad8:	e7fe      	b.n	801cad8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801cada:	697b      	ldr	r3, [r7, #20]
 801cadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cae0:	f023 0301 	bic.w	r3, r3, #1
 801cae4:	b2da      	uxtb	r2, r3
 801cae6:	697b      	ldr	r3, [r7, #20]
 801cae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801caec:	697b      	ldr	r3, [r7, #20]
 801caee:	6a1b      	ldr	r3, [r3, #32]
 801caf0:	6978      	ldr	r0, [r7, #20]
 801caf2:	4798      	blx	r3
}
 801caf4:	bf00      	nop
 801caf6:	3718      	adds	r7, #24
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bd80      	pop	{r7, pc}
 801cafc:	20003b14 	.word	0x20003b14

0801cb00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801cb00:	b580      	push	{r7, lr}
 801cb02:	b084      	sub	sp, #16
 801cb04:	af00      	add	r7, sp, #0
 801cb06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801cb08:	f107 0308 	add.w	r3, r7, #8
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f000 f857 	bl	801cbc0 <prvGetNextExpireTime>
 801cb12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801cb14:	68bb      	ldr	r3, [r7, #8]
 801cb16:	4619      	mov	r1, r3
 801cb18:	68f8      	ldr	r0, [r7, #12]
 801cb1a:	f000 f803 	bl	801cb24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801cb1e:	f000 f8d5 	bl	801cccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801cb22:	e7f1      	b.n	801cb08 <prvTimerTask+0x8>

0801cb24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801cb24:	b580      	push	{r7, lr}
 801cb26:	b084      	sub	sp, #16
 801cb28:	af00      	add	r7, sp, #0
 801cb2a:	6078      	str	r0, [r7, #4]
 801cb2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801cb2e:	f7ff f855 	bl	801bbdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801cb32:	f107 0308 	add.w	r3, r7, #8
 801cb36:	4618      	mov	r0, r3
 801cb38:	f000 f866 	bl	801cc08 <prvSampleTimeNow>
 801cb3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801cb3e:	68bb      	ldr	r3, [r7, #8]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d130      	bne.n	801cba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801cb44:	683b      	ldr	r3, [r7, #0]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d10a      	bne.n	801cb60 <prvProcessTimerOrBlockTask+0x3c>
 801cb4a:	687a      	ldr	r2, [r7, #4]
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	429a      	cmp	r2, r3
 801cb50:	d806      	bhi.n	801cb60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801cb52:	f7ff f851 	bl	801bbf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801cb56:	68f9      	ldr	r1, [r7, #12]
 801cb58:	6878      	ldr	r0, [r7, #4]
 801cb5a:	f7ff ff85 	bl	801ca68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801cb5e:	e024      	b.n	801cbaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801cb60:	683b      	ldr	r3, [r7, #0]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d008      	beq.n	801cb78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801cb66:	4b13      	ldr	r3, [pc, #76]	; (801cbb4 <prvProcessTimerOrBlockTask+0x90>)
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d101      	bne.n	801cb74 <prvProcessTimerOrBlockTask+0x50>
 801cb70:	2301      	movs	r3, #1
 801cb72:	e000      	b.n	801cb76 <prvProcessTimerOrBlockTask+0x52>
 801cb74:	2300      	movs	r3, #0
 801cb76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801cb78:	4b0f      	ldr	r3, [pc, #60]	; (801cbb8 <prvProcessTimerOrBlockTask+0x94>)
 801cb7a:	6818      	ldr	r0, [r3, #0]
 801cb7c:	687a      	ldr	r2, [r7, #4]
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	1ad3      	subs	r3, r2, r3
 801cb82:	683a      	ldr	r2, [r7, #0]
 801cb84:	4619      	mov	r1, r3
 801cb86:	f7fe fd17 	bl	801b5b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801cb8a:	f7ff f835 	bl	801bbf8 <xTaskResumeAll>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d10a      	bne.n	801cbaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801cb94:	4b09      	ldr	r3, [pc, #36]	; (801cbbc <prvProcessTimerOrBlockTask+0x98>)
 801cb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cb9a:	601a      	str	r2, [r3, #0]
 801cb9c:	f3bf 8f4f 	dsb	sy
 801cba0:	f3bf 8f6f 	isb	sy
}
 801cba4:	e001      	b.n	801cbaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801cba6:	f7ff f827 	bl	801bbf8 <xTaskResumeAll>
}
 801cbaa:	bf00      	nop
 801cbac:	3710      	adds	r7, #16
 801cbae:	46bd      	mov	sp, r7
 801cbb0:	bd80      	pop	{r7, pc}
 801cbb2:	bf00      	nop
 801cbb4:	20003b18 	.word	0x20003b18
 801cbb8:	20003b1c 	.word	0x20003b1c
 801cbbc:	e000ed04 	.word	0xe000ed04

0801cbc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801cbc0:	b480      	push	{r7}
 801cbc2:	b085      	sub	sp, #20
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801cbc8:	4b0e      	ldr	r3, [pc, #56]	; (801cc04 <prvGetNextExpireTime+0x44>)
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d101      	bne.n	801cbd6 <prvGetNextExpireTime+0x16>
 801cbd2:	2201      	movs	r2, #1
 801cbd4:	e000      	b.n	801cbd8 <prvGetNextExpireTime+0x18>
 801cbd6:	2200      	movs	r2, #0
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d105      	bne.n	801cbf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801cbe4:	4b07      	ldr	r3, [pc, #28]	; (801cc04 <prvGetNextExpireTime+0x44>)
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	68db      	ldr	r3, [r3, #12]
 801cbea:	681b      	ldr	r3, [r3, #0]
 801cbec:	60fb      	str	r3, [r7, #12]
 801cbee:	e001      	b.n	801cbf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801cbf4:	68fb      	ldr	r3, [r7, #12]
}
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	3714      	adds	r7, #20
 801cbfa:	46bd      	mov	sp, r7
 801cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc00:	4770      	bx	lr
 801cc02:	bf00      	nop
 801cc04:	20003b14 	.word	0x20003b14

0801cc08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b084      	sub	sp, #16
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801cc10:	f7ff f88e 	bl	801bd30 <xTaskGetTickCount>
 801cc14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801cc16:	4b0b      	ldr	r3, [pc, #44]	; (801cc44 <prvSampleTimeNow+0x3c>)
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	68fa      	ldr	r2, [r7, #12]
 801cc1c:	429a      	cmp	r2, r3
 801cc1e:	d205      	bcs.n	801cc2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801cc20:	f000 f936 	bl	801ce90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	2201      	movs	r2, #1
 801cc28:	601a      	str	r2, [r3, #0]
 801cc2a:	e002      	b.n	801cc32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	2200      	movs	r2, #0
 801cc30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801cc32:	4a04      	ldr	r2, [pc, #16]	; (801cc44 <prvSampleTimeNow+0x3c>)
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801cc38:	68fb      	ldr	r3, [r7, #12]
}
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	3710      	adds	r7, #16
 801cc3e:	46bd      	mov	sp, r7
 801cc40:	bd80      	pop	{r7, pc}
 801cc42:	bf00      	nop
 801cc44:	20003b24 	.word	0x20003b24

0801cc48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801cc48:	b580      	push	{r7, lr}
 801cc4a:	b086      	sub	sp, #24
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	60f8      	str	r0, [r7, #12]
 801cc50:	60b9      	str	r1, [r7, #8]
 801cc52:	607a      	str	r2, [r7, #4]
 801cc54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801cc56:	2300      	movs	r3, #0
 801cc58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	68ba      	ldr	r2, [r7, #8]
 801cc5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	68fa      	ldr	r2, [r7, #12]
 801cc64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801cc66:	68ba      	ldr	r2, [r7, #8]
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	429a      	cmp	r2, r3
 801cc6c:	d812      	bhi.n	801cc94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801cc6e:	687a      	ldr	r2, [r7, #4]
 801cc70:	683b      	ldr	r3, [r7, #0]
 801cc72:	1ad2      	subs	r2, r2, r3
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	699b      	ldr	r3, [r3, #24]
 801cc78:	429a      	cmp	r2, r3
 801cc7a:	d302      	bcc.n	801cc82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801cc7c:	2301      	movs	r3, #1
 801cc7e:	617b      	str	r3, [r7, #20]
 801cc80:	e01b      	b.n	801ccba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801cc82:	4b10      	ldr	r3, [pc, #64]	; (801ccc4 <prvInsertTimerInActiveList+0x7c>)
 801cc84:	681a      	ldr	r2, [r3, #0]
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	3304      	adds	r3, #4
 801cc8a:	4619      	mov	r1, r3
 801cc8c:	4610      	mov	r0, r2
 801cc8e:	f7fd feb2 	bl	801a9f6 <vListInsert>
 801cc92:	e012      	b.n	801ccba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801cc94:	687a      	ldr	r2, [r7, #4]
 801cc96:	683b      	ldr	r3, [r7, #0]
 801cc98:	429a      	cmp	r2, r3
 801cc9a:	d206      	bcs.n	801ccaa <prvInsertTimerInActiveList+0x62>
 801cc9c:	68ba      	ldr	r2, [r7, #8]
 801cc9e:	683b      	ldr	r3, [r7, #0]
 801cca0:	429a      	cmp	r2, r3
 801cca2:	d302      	bcc.n	801ccaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801cca4:	2301      	movs	r3, #1
 801cca6:	617b      	str	r3, [r7, #20]
 801cca8:	e007      	b.n	801ccba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ccaa:	4b07      	ldr	r3, [pc, #28]	; (801ccc8 <prvInsertTimerInActiveList+0x80>)
 801ccac:	681a      	ldr	r2, [r3, #0]
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	3304      	adds	r3, #4
 801ccb2:	4619      	mov	r1, r3
 801ccb4:	4610      	mov	r0, r2
 801ccb6:	f7fd fe9e 	bl	801a9f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801ccba:	697b      	ldr	r3, [r7, #20]
}
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	3718      	adds	r7, #24
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bd80      	pop	{r7, pc}
 801ccc4:	20003b18 	.word	0x20003b18
 801ccc8:	20003b14 	.word	0x20003b14

0801cccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b08e      	sub	sp, #56	; 0x38
 801ccd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ccd2:	e0ca      	b.n	801ce6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	da18      	bge.n	801cd0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801ccda:	1d3b      	adds	r3, r7, #4
 801ccdc:	3304      	adds	r3, #4
 801ccde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d10a      	bne.n	801ccfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 801cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ccea:	f383 8811 	msr	BASEPRI, r3
 801ccee:	f3bf 8f6f 	isb	sy
 801ccf2:	f3bf 8f4f 	dsb	sy
 801ccf6:	61fb      	str	r3, [r7, #28]
}
 801ccf8:	bf00      	nop
 801ccfa:	e7fe      	b.n	801ccfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd02:	6850      	ldr	r0, [r2, #4]
 801cd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd06:	6892      	ldr	r2, [r2, #8]
 801cd08:	4611      	mov	r1, r2
 801cd0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	f2c0 80aa 	blt.w	801ce68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd1a:	695b      	ldr	r3, [r3, #20]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d004      	beq.n	801cd2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd22:	3304      	adds	r3, #4
 801cd24:	4618      	mov	r0, r3
 801cd26:	f7fd fe9f 	bl	801aa68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801cd2a:	463b      	mov	r3, r7
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	f7ff ff6b 	bl	801cc08 <prvSampleTimeNow>
 801cd32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2b09      	cmp	r3, #9
 801cd38:	f200 8097 	bhi.w	801ce6a <prvProcessReceivedCommands+0x19e>
 801cd3c:	a201      	add	r2, pc, #4	; (adr r2, 801cd44 <prvProcessReceivedCommands+0x78>)
 801cd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd42:	bf00      	nop
 801cd44:	0801cd6d 	.word	0x0801cd6d
 801cd48:	0801cd6d 	.word	0x0801cd6d
 801cd4c:	0801cd6d 	.word	0x0801cd6d
 801cd50:	0801cde1 	.word	0x0801cde1
 801cd54:	0801cdf5 	.word	0x0801cdf5
 801cd58:	0801ce3f 	.word	0x0801ce3f
 801cd5c:	0801cd6d 	.word	0x0801cd6d
 801cd60:	0801cd6d 	.word	0x0801cd6d
 801cd64:	0801cde1 	.word	0x0801cde1
 801cd68:	0801cdf5 	.word	0x0801cdf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cd72:	f043 0301 	orr.w	r3, r3, #1
 801cd76:	b2da      	uxtb	r2, r3
 801cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801cd7e:	68ba      	ldr	r2, [r7, #8]
 801cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd82:	699b      	ldr	r3, [r3, #24]
 801cd84:	18d1      	adds	r1, r2, r3
 801cd86:	68bb      	ldr	r3, [r7, #8]
 801cd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cd8c:	f7ff ff5c 	bl	801cc48 <prvInsertTimerInActiveList>
 801cd90:	4603      	mov	r3, r0
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d069      	beq.n	801ce6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd98:	6a1b      	ldr	r3, [r3, #32]
 801cd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cd9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cda4:	f003 0304 	and.w	r3, r3, #4
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d05e      	beq.n	801ce6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801cdac:	68ba      	ldr	r2, [r7, #8]
 801cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdb0:	699b      	ldr	r3, [r3, #24]
 801cdb2:	441a      	add	r2, r3
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	9300      	str	r3, [sp, #0]
 801cdb8:	2300      	movs	r3, #0
 801cdba:	2100      	movs	r1, #0
 801cdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cdbe:	f7ff fe05 	bl	801c9cc <xTimerGenericCommand>
 801cdc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801cdc4:	6a3b      	ldr	r3, [r7, #32]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d14f      	bne.n	801ce6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cdce:	f383 8811 	msr	BASEPRI, r3
 801cdd2:	f3bf 8f6f 	isb	sy
 801cdd6:	f3bf 8f4f 	dsb	sy
 801cdda:	61bb      	str	r3, [r7, #24]
}
 801cddc:	bf00      	nop
 801cdde:	e7fe      	b.n	801cdde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cde2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cde6:	f023 0301 	bic.w	r3, r3, #1
 801cdea:	b2da      	uxtb	r2, r3
 801cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801cdf2:	e03a      	b.n	801ce6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cdfa:	f043 0301 	orr.w	r3, r3, #1
 801cdfe:	b2da      	uxtb	r2, r3
 801ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801ce06:	68ba      	ldr	r2, [r7, #8]
 801ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce0e:	699b      	ldr	r3, [r3, #24]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d10a      	bne.n	801ce2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801ce14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce18:	f383 8811 	msr	BASEPRI, r3
 801ce1c:	f3bf 8f6f 	isb	sy
 801ce20:	f3bf 8f4f 	dsb	sy
 801ce24:	617b      	str	r3, [r7, #20]
}
 801ce26:	bf00      	nop
 801ce28:	e7fe      	b.n	801ce28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce2c:	699a      	ldr	r2, [r3, #24]
 801ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce30:	18d1      	adds	r1, r2, r3
 801ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ce38:	f7ff ff06 	bl	801cc48 <prvInsertTimerInActiveList>
					break;
 801ce3c:	e015      	b.n	801ce6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ce44:	f003 0302 	and.w	r3, r3, #2
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d103      	bne.n	801ce54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801ce4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ce4e:	f000 fbff 	bl	801d650 <vPortFree>
 801ce52:	e00a      	b.n	801ce6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ce5a:	f023 0301 	bic.w	r3, r3, #1
 801ce5e:	b2da      	uxtb	r2, r3
 801ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801ce66:	e000      	b.n	801ce6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801ce68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ce6a:	4b08      	ldr	r3, [pc, #32]	; (801ce8c <prvProcessReceivedCommands+0x1c0>)
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	1d39      	adds	r1, r7, #4
 801ce70:	2200      	movs	r2, #0
 801ce72:	4618      	mov	r0, r3
 801ce74:	f7fe f986 	bl	801b184 <xQueueReceive>
 801ce78:	4603      	mov	r3, r0
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	f47f af2a 	bne.w	801ccd4 <prvProcessReceivedCommands+0x8>
	}
}
 801ce80:	bf00      	nop
 801ce82:	bf00      	nop
 801ce84:	3730      	adds	r7, #48	; 0x30
 801ce86:	46bd      	mov	sp, r7
 801ce88:	bd80      	pop	{r7, pc}
 801ce8a:	bf00      	nop
 801ce8c:	20003b1c 	.word	0x20003b1c

0801ce90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ce90:	b580      	push	{r7, lr}
 801ce92:	b088      	sub	sp, #32
 801ce94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ce96:	e048      	b.n	801cf2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ce98:	4b2d      	ldr	r3, [pc, #180]	; (801cf50 <prvSwitchTimerLists+0xc0>)
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	68db      	ldr	r3, [r3, #12]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cea2:	4b2b      	ldr	r3, [pc, #172]	; (801cf50 <prvSwitchTimerLists+0xc0>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	68db      	ldr	r3, [r3, #12]
 801cea8:	68db      	ldr	r3, [r3, #12]
 801ceaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	3304      	adds	r3, #4
 801ceb0:	4618      	mov	r0, r3
 801ceb2:	f7fd fdd9 	bl	801aa68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	6a1b      	ldr	r3, [r3, #32]
 801ceba:	68f8      	ldr	r0, [r7, #12]
 801cebc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801cec4:	f003 0304 	and.w	r3, r3, #4
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d02e      	beq.n	801cf2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	699b      	ldr	r3, [r3, #24]
 801ced0:	693a      	ldr	r2, [r7, #16]
 801ced2:	4413      	add	r3, r2
 801ced4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ced6:	68ba      	ldr	r2, [r7, #8]
 801ced8:	693b      	ldr	r3, [r7, #16]
 801ceda:	429a      	cmp	r2, r3
 801cedc:	d90e      	bls.n	801cefc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	68ba      	ldr	r2, [r7, #8]
 801cee2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801cee4:	68fb      	ldr	r3, [r7, #12]
 801cee6:	68fa      	ldr	r2, [r7, #12]
 801cee8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ceea:	4b19      	ldr	r3, [pc, #100]	; (801cf50 <prvSwitchTimerLists+0xc0>)
 801ceec:	681a      	ldr	r2, [r3, #0]
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	3304      	adds	r3, #4
 801cef2:	4619      	mov	r1, r3
 801cef4:	4610      	mov	r0, r2
 801cef6:	f7fd fd7e 	bl	801a9f6 <vListInsert>
 801cefa:	e016      	b.n	801cf2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801cefc:	2300      	movs	r3, #0
 801cefe:	9300      	str	r3, [sp, #0]
 801cf00:	2300      	movs	r3, #0
 801cf02:	693a      	ldr	r2, [r7, #16]
 801cf04:	2100      	movs	r1, #0
 801cf06:	68f8      	ldr	r0, [r7, #12]
 801cf08:	f7ff fd60 	bl	801c9cc <xTimerGenericCommand>
 801cf0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d10a      	bne.n	801cf2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 801cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf18:	f383 8811 	msr	BASEPRI, r3
 801cf1c:	f3bf 8f6f 	isb	sy
 801cf20:	f3bf 8f4f 	dsb	sy
 801cf24:	603b      	str	r3, [r7, #0]
}
 801cf26:	bf00      	nop
 801cf28:	e7fe      	b.n	801cf28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801cf2a:	4b09      	ldr	r3, [pc, #36]	; (801cf50 <prvSwitchTimerLists+0xc0>)
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d1b1      	bne.n	801ce98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801cf34:	4b06      	ldr	r3, [pc, #24]	; (801cf50 <prvSwitchTimerLists+0xc0>)
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801cf3a:	4b06      	ldr	r3, [pc, #24]	; (801cf54 <prvSwitchTimerLists+0xc4>)
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	4a04      	ldr	r2, [pc, #16]	; (801cf50 <prvSwitchTimerLists+0xc0>)
 801cf40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801cf42:	4a04      	ldr	r2, [pc, #16]	; (801cf54 <prvSwitchTimerLists+0xc4>)
 801cf44:	697b      	ldr	r3, [r7, #20]
 801cf46:	6013      	str	r3, [r2, #0]
}
 801cf48:	bf00      	nop
 801cf4a:	3718      	adds	r7, #24
 801cf4c:	46bd      	mov	sp, r7
 801cf4e:	bd80      	pop	{r7, pc}
 801cf50:	20003b14 	.word	0x20003b14
 801cf54:	20003b18 	.word	0x20003b18

0801cf58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801cf58:	b580      	push	{r7, lr}
 801cf5a:	b082      	sub	sp, #8
 801cf5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801cf5e:	f000 f989 	bl	801d274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801cf62:	4b15      	ldr	r3, [pc, #84]	; (801cfb8 <prvCheckForValidListAndQueue+0x60>)
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d120      	bne.n	801cfac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801cf6a:	4814      	ldr	r0, [pc, #80]	; (801cfbc <prvCheckForValidListAndQueue+0x64>)
 801cf6c:	f7fd fcf2 	bl	801a954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801cf70:	4813      	ldr	r0, [pc, #76]	; (801cfc0 <prvCheckForValidListAndQueue+0x68>)
 801cf72:	f7fd fcef 	bl	801a954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801cf76:	4b13      	ldr	r3, [pc, #76]	; (801cfc4 <prvCheckForValidListAndQueue+0x6c>)
 801cf78:	4a10      	ldr	r2, [pc, #64]	; (801cfbc <prvCheckForValidListAndQueue+0x64>)
 801cf7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801cf7c:	4b12      	ldr	r3, [pc, #72]	; (801cfc8 <prvCheckForValidListAndQueue+0x70>)
 801cf7e:	4a10      	ldr	r2, [pc, #64]	; (801cfc0 <prvCheckForValidListAndQueue+0x68>)
 801cf80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801cf82:	2300      	movs	r3, #0
 801cf84:	9300      	str	r3, [sp, #0]
 801cf86:	4b11      	ldr	r3, [pc, #68]	; (801cfcc <prvCheckForValidListAndQueue+0x74>)
 801cf88:	4a11      	ldr	r2, [pc, #68]	; (801cfd0 <prvCheckForValidListAndQueue+0x78>)
 801cf8a:	2110      	movs	r1, #16
 801cf8c:	200a      	movs	r0, #10
 801cf8e:	f7fd fdfd 	bl	801ab8c <xQueueGenericCreateStatic>
 801cf92:	4603      	mov	r3, r0
 801cf94:	4a08      	ldr	r2, [pc, #32]	; (801cfb8 <prvCheckForValidListAndQueue+0x60>)
 801cf96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801cf98:	4b07      	ldr	r3, [pc, #28]	; (801cfb8 <prvCheckForValidListAndQueue+0x60>)
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d005      	beq.n	801cfac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801cfa0:	4b05      	ldr	r3, [pc, #20]	; (801cfb8 <prvCheckForValidListAndQueue+0x60>)
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	490b      	ldr	r1, [pc, #44]	; (801cfd4 <prvCheckForValidListAndQueue+0x7c>)
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f7fe fadc 	bl	801b564 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801cfac:	f000 f992 	bl	801d2d4 <vPortExitCritical>
}
 801cfb0:	bf00      	nop
 801cfb2:	46bd      	mov	sp, r7
 801cfb4:	bd80      	pop	{r7, pc}
 801cfb6:	bf00      	nop
 801cfb8:	20003b1c 	.word	0x20003b1c
 801cfbc:	20003aec 	.word	0x20003aec
 801cfc0:	20003b00 	.word	0x20003b00
 801cfc4:	20003b14 	.word	0x20003b14
 801cfc8:	20003b18 	.word	0x20003b18
 801cfcc:	20003bc8 	.word	0x20003bc8
 801cfd0:	20003b28 	.word	0x20003b28
 801cfd4:	0802585c 	.word	0x0802585c

0801cfd8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801cfd8:	b580      	push	{r7, lr}
 801cfda:	b08a      	sub	sp, #40	; 0x28
 801cfdc:	af00      	add	r7, sp, #0
 801cfde:	60f8      	str	r0, [r7, #12]
 801cfe0:	60b9      	str	r1, [r7, #8]
 801cfe2:	607a      	str	r2, [r7, #4]
 801cfe4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801cfe6:	f06f 0301 	mvn.w	r3, #1
 801cfea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801cff0:	68bb      	ldr	r3, [r7, #8]
 801cff2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801cff8:	4b06      	ldr	r3, [pc, #24]	; (801d014 <xTimerPendFunctionCallFromISR+0x3c>)
 801cffa:	6818      	ldr	r0, [r3, #0]
 801cffc:	f107 0114 	add.w	r1, r7, #20
 801d000:	2300      	movs	r3, #0
 801d002:	683a      	ldr	r2, [r7, #0]
 801d004:	f7fd ff96 	bl	801af34 <xQueueGenericSendFromISR>
 801d008:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801d00c:	4618      	mov	r0, r3
 801d00e:	3728      	adds	r7, #40	; 0x28
 801d010:	46bd      	mov	sp, r7
 801d012:	bd80      	pop	{r7, pc}
 801d014:	20003b1c 	.word	0x20003b1c

0801d018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801d018:	b480      	push	{r7}
 801d01a:	b085      	sub	sp, #20
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	60f8      	str	r0, [r7, #12]
 801d020:	60b9      	str	r1, [r7, #8]
 801d022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	3b04      	subs	r3, #4
 801d028:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801d030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	3b04      	subs	r3, #4
 801d036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801d038:	68bb      	ldr	r3, [r7, #8]
 801d03a:	f023 0201 	bic.w	r2, r3, #1
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	3b04      	subs	r3, #4
 801d046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801d048:	4a0c      	ldr	r2, [pc, #48]	; (801d07c <pxPortInitialiseStack+0x64>)
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	3b14      	subs	r3, #20
 801d052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801d054:	687a      	ldr	r2, [r7, #4]
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	3b04      	subs	r3, #4
 801d05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801d060:	68fb      	ldr	r3, [r7, #12]
 801d062:	f06f 0202 	mvn.w	r2, #2
 801d066:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	3b20      	subs	r3, #32
 801d06c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801d06e:	68fb      	ldr	r3, [r7, #12]
}
 801d070:	4618      	mov	r0, r3
 801d072:	3714      	adds	r7, #20
 801d074:	46bd      	mov	sp, r7
 801d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d07a:	4770      	bx	lr
 801d07c:	0801d081 	.word	0x0801d081

0801d080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801d080:	b480      	push	{r7}
 801d082:	b085      	sub	sp, #20
 801d084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801d086:	2300      	movs	r3, #0
 801d088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801d08a:	4b12      	ldr	r3, [pc, #72]	; (801d0d4 <prvTaskExitError+0x54>)
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d092:	d00a      	beq.n	801d0aa <prvTaskExitError+0x2a>
	__asm volatile
 801d094:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d098:	f383 8811 	msr	BASEPRI, r3
 801d09c:	f3bf 8f6f 	isb	sy
 801d0a0:	f3bf 8f4f 	dsb	sy
 801d0a4:	60fb      	str	r3, [r7, #12]
}
 801d0a6:	bf00      	nop
 801d0a8:	e7fe      	b.n	801d0a8 <prvTaskExitError+0x28>
	__asm volatile
 801d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0ae:	f383 8811 	msr	BASEPRI, r3
 801d0b2:	f3bf 8f6f 	isb	sy
 801d0b6:	f3bf 8f4f 	dsb	sy
 801d0ba:	60bb      	str	r3, [r7, #8]
}
 801d0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801d0be:	bf00      	nop
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d0fc      	beq.n	801d0c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801d0c6:	bf00      	nop
 801d0c8:	bf00      	nop
 801d0ca:	3714      	adds	r7, #20
 801d0cc:	46bd      	mov	sp, r7
 801d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0d2:	4770      	bx	lr
 801d0d4:	200000e0 	.word	0x200000e0
	...

0801d0e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801d0e0:	4b07      	ldr	r3, [pc, #28]	; (801d100 <pxCurrentTCBConst2>)
 801d0e2:	6819      	ldr	r1, [r3, #0]
 801d0e4:	6808      	ldr	r0, [r1, #0]
 801d0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0ea:	f380 8809 	msr	PSP, r0
 801d0ee:	f3bf 8f6f 	isb	sy
 801d0f2:	f04f 0000 	mov.w	r0, #0
 801d0f6:	f380 8811 	msr	BASEPRI, r0
 801d0fa:	4770      	bx	lr
 801d0fc:	f3af 8000 	nop.w

0801d100 <pxCurrentTCBConst2>:
 801d100:	20003918 	.word	0x20003918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801d104:	bf00      	nop
 801d106:	bf00      	nop

0801d108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801d108:	4808      	ldr	r0, [pc, #32]	; (801d12c <prvPortStartFirstTask+0x24>)
 801d10a:	6800      	ldr	r0, [r0, #0]
 801d10c:	6800      	ldr	r0, [r0, #0]
 801d10e:	f380 8808 	msr	MSP, r0
 801d112:	f04f 0000 	mov.w	r0, #0
 801d116:	f380 8814 	msr	CONTROL, r0
 801d11a:	b662      	cpsie	i
 801d11c:	b661      	cpsie	f
 801d11e:	f3bf 8f4f 	dsb	sy
 801d122:	f3bf 8f6f 	isb	sy
 801d126:	df00      	svc	0
 801d128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801d12a:	bf00      	nop
 801d12c:	e000ed08 	.word	0xe000ed08

0801d130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801d130:	b580      	push	{r7, lr}
 801d132:	b086      	sub	sp, #24
 801d134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801d136:	4b46      	ldr	r3, [pc, #280]	; (801d250 <xPortStartScheduler+0x120>)
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	4a46      	ldr	r2, [pc, #280]	; (801d254 <xPortStartScheduler+0x124>)
 801d13c:	4293      	cmp	r3, r2
 801d13e:	d10a      	bne.n	801d156 <xPortStartScheduler+0x26>
	__asm volatile
 801d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d144:	f383 8811 	msr	BASEPRI, r3
 801d148:	f3bf 8f6f 	isb	sy
 801d14c:	f3bf 8f4f 	dsb	sy
 801d150:	613b      	str	r3, [r7, #16]
}
 801d152:	bf00      	nop
 801d154:	e7fe      	b.n	801d154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801d156:	4b3e      	ldr	r3, [pc, #248]	; (801d250 <xPortStartScheduler+0x120>)
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	4a3f      	ldr	r2, [pc, #252]	; (801d258 <xPortStartScheduler+0x128>)
 801d15c:	4293      	cmp	r3, r2
 801d15e:	d10a      	bne.n	801d176 <xPortStartScheduler+0x46>
	__asm volatile
 801d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d164:	f383 8811 	msr	BASEPRI, r3
 801d168:	f3bf 8f6f 	isb	sy
 801d16c:	f3bf 8f4f 	dsb	sy
 801d170:	60fb      	str	r3, [r7, #12]
}
 801d172:	bf00      	nop
 801d174:	e7fe      	b.n	801d174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801d176:	4b39      	ldr	r3, [pc, #228]	; (801d25c <xPortStartScheduler+0x12c>)
 801d178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801d17a:	697b      	ldr	r3, [r7, #20]
 801d17c:	781b      	ldrb	r3, [r3, #0]
 801d17e:	b2db      	uxtb	r3, r3
 801d180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801d182:	697b      	ldr	r3, [r7, #20]
 801d184:	22ff      	movs	r2, #255	; 0xff
 801d186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801d188:	697b      	ldr	r3, [r7, #20]
 801d18a:	781b      	ldrb	r3, [r3, #0]
 801d18c:	b2db      	uxtb	r3, r3
 801d18e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801d190:	78fb      	ldrb	r3, [r7, #3]
 801d192:	b2db      	uxtb	r3, r3
 801d194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801d198:	b2da      	uxtb	r2, r3
 801d19a:	4b31      	ldr	r3, [pc, #196]	; (801d260 <xPortStartScheduler+0x130>)
 801d19c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801d19e:	4b31      	ldr	r3, [pc, #196]	; (801d264 <xPortStartScheduler+0x134>)
 801d1a0:	2207      	movs	r2, #7
 801d1a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801d1a4:	e009      	b.n	801d1ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801d1a6:	4b2f      	ldr	r3, [pc, #188]	; (801d264 <xPortStartScheduler+0x134>)
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	3b01      	subs	r3, #1
 801d1ac:	4a2d      	ldr	r2, [pc, #180]	; (801d264 <xPortStartScheduler+0x134>)
 801d1ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801d1b0:	78fb      	ldrb	r3, [r7, #3]
 801d1b2:	b2db      	uxtb	r3, r3
 801d1b4:	005b      	lsls	r3, r3, #1
 801d1b6:	b2db      	uxtb	r3, r3
 801d1b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801d1ba:	78fb      	ldrb	r3, [r7, #3]
 801d1bc:	b2db      	uxtb	r3, r3
 801d1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1c2:	2b80      	cmp	r3, #128	; 0x80
 801d1c4:	d0ef      	beq.n	801d1a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801d1c6:	4b27      	ldr	r3, [pc, #156]	; (801d264 <xPortStartScheduler+0x134>)
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	f1c3 0307 	rsb	r3, r3, #7
 801d1ce:	2b04      	cmp	r3, #4
 801d1d0:	d00a      	beq.n	801d1e8 <xPortStartScheduler+0xb8>
	__asm volatile
 801d1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d1d6:	f383 8811 	msr	BASEPRI, r3
 801d1da:	f3bf 8f6f 	isb	sy
 801d1de:	f3bf 8f4f 	dsb	sy
 801d1e2:	60bb      	str	r3, [r7, #8]
}
 801d1e4:	bf00      	nop
 801d1e6:	e7fe      	b.n	801d1e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801d1e8:	4b1e      	ldr	r3, [pc, #120]	; (801d264 <xPortStartScheduler+0x134>)
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	021b      	lsls	r3, r3, #8
 801d1ee:	4a1d      	ldr	r2, [pc, #116]	; (801d264 <xPortStartScheduler+0x134>)
 801d1f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801d1f2:	4b1c      	ldr	r3, [pc, #112]	; (801d264 <xPortStartScheduler+0x134>)
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801d1fa:	4a1a      	ldr	r2, [pc, #104]	; (801d264 <xPortStartScheduler+0x134>)
 801d1fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	b2da      	uxtb	r2, r3
 801d202:	697b      	ldr	r3, [r7, #20]
 801d204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801d206:	4b18      	ldr	r3, [pc, #96]	; (801d268 <xPortStartScheduler+0x138>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	4a17      	ldr	r2, [pc, #92]	; (801d268 <xPortStartScheduler+0x138>)
 801d20c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801d210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801d212:	4b15      	ldr	r3, [pc, #84]	; (801d268 <xPortStartScheduler+0x138>)
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	4a14      	ldr	r2, [pc, #80]	; (801d268 <xPortStartScheduler+0x138>)
 801d218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801d21c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801d21e:	f000 f8dd 	bl	801d3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801d222:	4b12      	ldr	r3, [pc, #72]	; (801d26c <xPortStartScheduler+0x13c>)
 801d224:	2200      	movs	r2, #0
 801d226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801d228:	f000 f8fc 	bl	801d424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801d22c:	4b10      	ldr	r3, [pc, #64]	; (801d270 <xPortStartScheduler+0x140>)
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	4a0f      	ldr	r2, [pc, #60]	; (801d270 <xPortStartScheduler+0x140>)
 801d232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801d236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801d238:	f7ff ff66 	bl	801d108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801d23c:	f7fe fe40 	bl	801bec0 <vTaskSwitchContext>
	prvTaskExitError();
 801d240:	f7ff ff1e 	bl	801d080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801d244:	2300      	movs	r3, #0
}
 801d246:	4618      	mov	r0, r3
 801d248:	3718      	adds	r7, #24
 801d24a:	46bd      	mov	sp, r7
 801d24c:	bd80      	pop	{r7, pc}
 801d24e:	bf00      	nop
 801d250:	e000ed00 	.word	0xe000ed00
 801d254:	410fc271 	.word	0x410fc271
 801d258:	410fc270 	.word	0x410fc270
 801d25c:	e000e400 	.word	0xe000e400
 801d260:	20003c18 	.word	0x20003c18
 801d264:	20003c1c 	.word	0x20003c1c
 801d268:	e000ed20 	.word	0xe000ed20
 801d26c:	200000e0 	.word	0x200000e0
 801d270:	e000ef34 	.word	0xe000ef34

0801d274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801d274:	b480      	push	{r7}
 801d276:	b083      	sub	sp, #12
 801d278:	af00      	add	r7, sp, #0
	__asm volatile
 801d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d27e:	f383 8811 	msr	BASEPRI, r3
 801d282:	f3bf 8f6f 	isb	sy
 801d286:	f3bf 8f4f 	dsb	sy
 801d28a:	607b      	str	r3, [r7, #4]
}
 801d28c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801d28e:	4b0f      	ldr	r3, [pc, #60]	; (801d2cc <vPortEnterCritical+0x58>)
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	3301      	adds	r3, #1
 801d294:	4a0d      	ldr	r2, [pc, #52]	; (801d2cc <vPortEnterCritical+0x58>)
 801d296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801d298:	4b0c      	ldr	r3, [pc, #48]	; (801d2cc <vPortEnterCritical+0x58>)
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	2b01      	cmp	r3, #1
 801d29e:	d10f      	bne.n	801d2c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801d2a0:	4b0b      	ldr	r3, [pc, #44]	; (801d2d0 <vPortEnterCritical+0x5c>)
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	b2db      	uxtb	r3, r3
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d00a      	beq.n	801d2c0 <vPortEnterCritical+0x4c>
	__asm volatile
 801d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d2ae:	f383 8811 	msr	BASEPRI, r3
 801d2b2:	f3bf 8f6f 	isb	sy
 801d2b6:	f3bf 8f4f 	dsb	sy
 801d2ba:	603b      	str	r3, [r7, #0]
}
 801d2bc:	bf00      	nop
 801d2be:	e7fe      	b.n	801d2be <vPortEnterCritical+0x4a>
	}
}
 801d2c0:	bf00      	nop
 801d2c2:	370c      	adds	r7, #12
 801d2c4:	46bd      	mov	sp, r7
 801d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2ca:	4770      	bx	lr
 801d2cc:	200000e0 	.word	0x200000e0
 801d2d0:	e000ed04 	.word	0xe000ed04

0801d2d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801d2d4:	b480      	push	{r7}
 801d2d6:	b083      	sub	sp, #12
 801d2d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801d2da:	4b12      	ldr	r3, [pc, #72]	; (801d324 <vPortExitCritical+0x50>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d10a      	bne.n	801d2f8 <vPortExitCritical+0x24>
	__asm volatile
 801d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d2e6:	f383 8811 	msr	BASEPRI, r3
 801d2ea:	f3bf 8f6f 	isb	sy
 801d2ee:	f3bf 8f4f 	dsb	sy
 801d2f2:	607b      	str	r3, [r7, #4]
}
 801d2f4:	bf00      	nop
 801d2f6:	e7fe      	b.n	801d2f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801d2f8:	4b0a      	ldr	r3, [pc, #40]	; (801d324 <vPortExitCritical+0x50>)
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	3b01      	subs	r3, #1
 801d2fe:	4a09      	ldr	r2, [pc, #36]	; (801d324 <vPortExitCritical+0x50>)
 801d300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801d302:	4b08      	ldr	r3, [pc, #32]	; (801d324 <vPortExitCritical+0x50>)
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	2b00      	cmp	r3, #0
 801d308:	d105      	bne.n	801d316 <vPortExitCritical+0x42>
 801d30a:	2300      	movs	r3, #0
 801d30c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	f383 8811 	msr	BASEPRI, r3
}
 801d314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801d316:	bf00      	nop
 801d318:	370c      	adds	r7, #12
 801d31a:	46bd      	mov	sp, r7
 801d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d320:	4770      	bx	lr
 801d322:	bf00      	nop
 801d324:	200000e0 	.word	0x200000e0
	...

0801d330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801d330:	f3ef 8009 	mrs	r0, PSP
 801d334:	f3bf 8f6f 	isb	sy
 801d338:	4b15      	ldr	r3, [pc, #84]	; (801d390 <pxCurrentTCBConst>)
 801d33a:	681a      	ldr	r2, [r3, #0]
 801d33c:	f01e 0f10 	tst.w	lr, #16
 801d340:	bf08      	it	eq
 801d342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801d346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d34a:	6010      	str	r0, [r2, #0]
 801d34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801d350:	f04f 0050 	mov.w	r0, #80	; 0x50
 801d354:	f380 8811 	msr	BASEPRI, r0
 801d358:	f3bf 8f4f 	dsb	sy
 801d35c:	f3bf 8f6f 	isb	sy
 801d360:	f7fe fdae 	bl	801bec0 <vTaskSwitchContext>
 801d364:	f04f 0000 	mov.w	r0, #0
 801d368:	f380 8811 	msr	BASEPRI, r0
 801d36c:	bc09      	pop	{r0, r3}
 801d36e:	6819      	ldr	r1, [r3, #0]
 801d370:	6808      	ldr	r0, [r1, #0]
 801d372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d376:	f01e 0f10 	tst.w	lr, #16
 801d37a:	bf08      	it	eq
 801d37c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801d380:	f380 8809 	msr	PSP, r0
 801d384:	f3bf 8f6f 	isb	sy
 801d388:	4770      	bx	lr
 801d38a:	bf00      	nop
 801d38c:	f3af 8000 	nop.w

0801d390 <pxCurrentTCBConst>:
 801d390:	20003918 	.word	0x20003918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801d394:	bf00      	nop
 801d396:	bf00      	nop

0801d398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801d398:	b580      	push	{r7, lr}
 801d39a:	b082      	sub	sp, #8
 801d39c:	af00      	add	r7, sp, #0
	__asm volatile
 801d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d3a2:	f383 8811 	msr	BASEPRI, r3
 801d3a6:	f3bf 8f6f 	isb	sy
 801d3aa:	f3bf 8f4f 	dsb	sy
 801d3ae:	607b      	str	r3, [r7, #4]
}
 801d3b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801d3b2:	f7fe fccd 	bl	801bd50 <xTaskIncrementTick>
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d003      	beq.n	801d3c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801d3bc:	4b06      	ldr	r3, [pc, #24]	; (801d3d8 <SysTick_Handler+0x40>)
 801d3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d3c2:	601a      	str	r2, [r3, #0]
 801d3c4:	2300      	movs	r3, #0
 801d3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801d3c8:	683b      	ldr	r3, [r7, #0]
 801d3ca:	f383 8811 	msr	BASEPRI, r3
}
 801d3ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801d3d0:	bf00      	nop
 801d3d2:	3708      	adds	r7, #8
 801d3d4:	46bd      	mov	sp, r7
 801d3d6:	bd80      	pop	{r7, pc}
 801d3d8:	e000ed04 	.word	0xe000ed04

0801d3dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801d3dc:	b480      	push	{r7}
 801d3de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801d3e0:	4b0b      	ldr	r3, [pc, #44]	; (801d410 <vPortSetupTimerInterrupt+0x34>)
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801d3e6:	4b0b      	ldr	r3, [pc, #44]	; (801d414 <vPortSetupTimerInterrupt+0x38>)
 801d3e8:	2200      	movs	r2, #0
 801d3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801d3ec:	4b0a      	ldr	r3, [pc, #40]	; (801d418 <vPortSetupTimerInterrupt+0x3c>)
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	4a0a      	ldr	r2, [pc, #40]	; (801d41c <vPortSetupTimerInterrupt+0x40>)
 801d3f2:	fba2 2303 	umull	r2, r3, r2, r3
 801d3f6:	099b      	lsrs	r3, r3, #6
 801d3f8:	4a09      	ldr	r2, [pc, #36]	; (801d420 <vPortSetupTimerInterrupt+0x44>)
 801d3fa:	3b01      	subs	r3, #1
 801d3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801d3fe:	4b04      	ldr	r3, [pc, #16]	; (801d410 <vPortSetupTimerInterrupt+0x34>)
 801d400:	2207      	movs	r2, #7
 801d402:	601a      	str	r2, [r3, #0]
}
 801d404:	bf00      	nop
 801d406:	46bd      	mov	sp, r7
 801d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d40c:	4770      	bx	lr
 801d40e:	bf00      	nop
 801d410:	e000e010 	.word	0xe000e010
 801d414:	e000e018 	.word	0xe000e018
 801d418:	20000004 	.word	0x20000004
 801d41c:	10624dd3 	.word	0x10624dd3
 801d420:	e000e014 	.word	0xe000e014

0801d424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801d424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801d434 <vPortEnableVFP+0x10>
 801d428:	6801      	ldr	r1, [r0, #0]
 801d42a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801d42e:	6001      	str	r1, [r0, #0]
 801d430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801d432:	bf00      	nop
 801d434:	e000ed88 	.word	0xe000ed88

0801d438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801d438:	b480      	push	{r7}
 801d43a:	b085      	sub	sp, #20
 801d43c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801d43e:	f3ef 8305 	mrs	r3, IPSR
 801d442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	2b0f      	cmp	r3, #15
 801d448:	d914      	bls.n	801d474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801d44a:	4a17      	ldr	r2, [pc, #92]	; (801d4a8 <vPortValidateInterruptPriority+0x70>)
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	4413      	add	r3, r2
 801d450:	781b      	ldrb	r3, [r3, #0]
 801d452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801d454:	4b15      	ldr	r3, [pc, #84]	; (801d4ac <vPortValidateInterruptPriority+0x74>)
 801d456:	781b      	ldrb	r3, [r3, #0]
 801d458:	7afa      	ldrb	r2, [r7, #11]
 801d45a:	429a      	cmp	r2, r3
 801d45c:	d20a      	bcs.n	801d474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d462:	f383 8811 	msr	BASEPRI, r3
 801d466:	f3bf 8f6f 	isb	sy
 801d46a:	f3bf 8f4f 	dsb	sy
 801d46e:	607b      	str	r3, [r7, #4]
}
 801d470:	bf00      	nop
 801d472:	e7fe      	b.n	801d472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801d474:	4b0e      	ldr	r3, [pc, #56]	; (801d4b0 <vPortValidateInterruptPriority+0x78>)
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801d47c:	4b0d      	ldr	r3, [pc, #52]	; (801d4b4 <vPortValidateInterruptPriority+0x7c>)
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	429a      	cmp	r2, r3
 801d482:	d90a      	bls.n	801d49a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d488:	f383 8811 	msr	BASEPRI, r3
 801d48c:	f3bf 8f6f 	isb	sy
 801d490:	f3bf 8f4f 	dsb	sy
 801d494:	603b      	str	r3, [r7, #0]
}
 801d496:	bf00      	nop
 801d498:	e7fe      	b.n	801d498 <vPortValidateInterruptPriority+0x60>
	}
 801d49a:	bf00      	nop
 801d49c:	3714      	adds	r7, #20
 801d49e:	46bd      	mov	sp, r7
 801d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4a4:	4770      	bx	lr
 801d4a6:	bf00      	nop
 801d4a8:	e000e3f0 	.word	0xe000e3f0
 801d4ac:	20003c18 	.word	0x20003c18
 801d4b0:	e000ed0c 	.word	0xe000ed0c
 801d4b4:	20003c1c 	.word	0x20003c1c

0801d4b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	b08a      	sub	sp, #40	; 0x28
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801d4c4:	f7fe fb8a 	bl	801bbdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801d4c8:	4b5b      	ldr	r3, [pc, #364]	; (801d638 <pvPortMalloc+0x180>)
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d101      	bne.n	801d4d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801d4d0:	f000 f920 	bl	801d714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801d4d4:	4b59      	ldr	r3, [pc, #356]	; (801d63c <pvPortMalloc+0x184>)
 801d4d6:	681a      	ldr	r2, [r3, #0]
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	4013      	ands	r3, r2
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	f040 8093 	bne.w	801d608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d01d      	beq.n	801d524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801d4e8:	2208      	movs	r2, #8
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	4413      	add	r3, r2
 801d4ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	f003 0307 	and.w	r3, r3, #7
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d014      	beq.n	801d524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	f023 0307 	bic.w	r3, r3, #7
 801d500:	3308      	adds	r3, #8
 801d502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	f003 0307 	and.w	r3, r3, #7
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d00a      	beq.n	801d524 <pvPortMalloc+0x6c>
	__asm volatile
 801d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d512:	f383 8811 	msr	BASEPRI, r3
 801d516:	f3bf 8f6f 	isb	sy
 801d51a:	f3bf 8f4f 	dsb	sy
 801d51e:	617b      	str	r3, [r7, #20]
}
 801d520:	bf00      	nop
 801d522:	e7fe      	b.n	801d522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d06e      	beq.n	801d608 <pvPortMalloc+0x150>
 801d52a:	4b45      	ldr	r3, [pc, #276]	; (801d640 <pvPortMalloc+0x188>)
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	687a      	ldr	r2, [r7, #4]
 801d530:	429a      	cmp	r2, r3
 801d532:	d869      	bhi.n	801d608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801d534:	4b43      	ldr	r3, [pc, #268]	; (801d644 <pvPortMalloc+0x18c>)
 801d536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801d538:	4b42      	ldr	r3, [pc, #264]	; (801d644 <pvPortMalloc+0x18c>)
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801d53e:	e004      	b.n	801d54a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d54c:	685b      	ldr	r3, [r3, #4]
 801d54e:	687a      	ldr	r2, [r7, #4]
 801d550:	429a      	cmp	r2, r3
 801d552:	d903      	bls.n	801d55c <pvPortMalloc+0xa4>
 801d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d1f1      	bne.n	801d540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801d55c:	4b36      	ldr	r3, [pc, #216]	; (801d638 <pvPortMalloc+0x180>)
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d562:	429a      	cmp	r2, r3
 801d564:	d050      	beq.n	801d608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801d566:	6a3b      	ldr	r3, [r7, #32]
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	2208      	movs	r2, #8
 801d56c:	4413      	add	r3, r2
 801d56e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d572:	681a      	ldr	r2, [r3, #0]
 801d574:	6a3b      	ldr	r3, [r7, #32]
 801d576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d57a:	685a      	ldr	r2, [r3, #4]
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	1ad2      	subs	r2, r2, r3
 801d580:	2308      	movs	r3, #8
 801d582:	005b      	lsls	r3, r3, #1
 801d584:	429a      	cmp	r2, r3
 801d586:	d91f      	bls.n	801d5c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801d588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	4413      	add	r3, r2
 801d58e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801d590:	69bb      	ldr	r3, [r7, #24]
 801d592:	f003 0307 	and.w	r3, r3, #7
 801d596:	2b00      	cmp	r3, #0
 801d598:	d00a      	beq.n	801d5b0 <pvPortMalloc+0xf8>
	__asm volatile
 801d59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d59e:	f383 8811 	msr	BASEPRI, r3
 801d5a2:	f3bf 8f6f 	isb	sy
 801d5a6:	f3bf 8f4f 	dsb	sy
 801d5aa:	613b      	str	r3, [r7, #16]
}
 801d5ac:	bf00      	nop
 801d5ae:	e7fe      	b.n	801d5ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5b2:	685a      	ldr	r2, [r3, #4]
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	1ad2      	subs	r2, r2, r3
 801d5b8:	69bb      	ldr	r3, [r7, #24]
 801d5ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5be:	687a      	ldr	r2, [r7, #4]
 801d5c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801d5c2:	69b8      	ldr	r0, [r7, #24]
 801d5c4:	f000 f908 	bl	801d7d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801d5c8:	4b1d      	ldr	r3, [pc, #116]	; (801d640 <pvPortMalloc+0x188>)
 801d5ca:	681a      	ldr	r2, [r3, #0]
 801d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ce:	685b      	ldr	r3, [r3, #4]
 801d5d0:	1ad3      	subs	r3, r2, r3
 801d5d2:	4a1b      	ldr	r2, [pc, #108]	; (801d640 <pvPortMalloc+0x188>)
 801d5d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801d5d6:	4b1a      	ldr	r3, [pc, #104]	; (801d640 <pvPortMalloc+0x188>)
 801d5d8:	681a      	ldr	r2, [r3, #0]
 801d5da:	4b1b      	ldr	r3, [pc, #108]	; (801d648 <pvPortMalloc+0x190>)
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	d203      	bcs.n	801d5ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801d5e2:	4b17      	ldr	r3, [pc, #92]	; (801d640 <pvPortMalloc+0x188>)
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	4a18      	ldr	r2, [pc, #96]	; (801d648 <pvPortMalloc+0x190>)
 801d5e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ec:	685a      	ldr	r2, [r3, #4]
 801d5ee:	4b13      	ldr	r3, [pc, #76]	; (801d63c <pvPortMalloc+0x184>)
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	431a      	orrs	r2, r3
 801d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5fa:	2200      	movs	r2, #0
 801d5fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801d5fe:	4b13      	ldr	r3, [pc, #76]	; (801d64c <pvPortMalloc+0x194>)
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	3301      	adds	r3, #1
 801d604:	4a11      	ldr	r2, [pc, #68]	; (801d64c <pvPortMalloc+0x194>)
 801d606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801d608:	f7fe faf6 	bl	801bbf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801d60c:	69fb      	ldr	r3, [r7, #28]
 801d60e:	f003 0307 	and.w	r3, r3, #7
 801d612:	2b00      	cmp	r3, #0
 801d614:	d00a      	beq.n	801d62c <pvPortMalloc+0x174>
	__asm volatile
 801d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d61a:	f383 8811 	msr	BASEPRI, r3
 801d61e:	f3bf 8f6f 	isb	sy
 801d622:	f3bf 8f4f 	dsb	sy
 801d626:	60fb      	str	r3, [r7, #12]
}
 801d628:	bf00      	nop
 801d62a:	e7fe      	b.n	801d62a <pvPortMalloc+0x172>
	return pvReturn;
 801d62c:	69fb      	ldr	r3, [r7, #28]
}
 801d62e:	4618      	mov	r0, r3
 801d630:	3728      	adds	r7, #40	; 0x28
 801d632:	46bd      	mov	sp, r7
 801d634:	bd80      	pop	{r7, pc}
 801d636:	bf00      	nop
 801d638:	2000d868 	.word	0x2000d868
 801d63c:	2000d87c 	.word	0x2000d87c
 801d640:	2000d86c 	.word	0x2000d86c
 801d644:	2000d860 	.word	0x2000d860
 801d648:	2000d870 	.word	0x2000d870
 801d64c:	2000d874 	.word	0x2000d874

0801d650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801d650:	b580      	push	{r7, lr}
 801d652:	b086      	sub	sp, #24
 801d654:	af00      	add	r7, sp, #0
 801d656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d04d      	beq.n	801d6fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801d662:	2308      	movs	r3, #8
 801d664:	425b      	negs	r3, r3
 801d666:	697a      	ldr	r2, [r7, #20]
 801d668:	4413      	add	r3, r2
 801d66a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801d66c:	697b      	ldr	r3, [r7, #20]
 801d66e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801d670:	693b      	ldr	r3, [r7, #16]
 801d672:	685a      	ldr	r2, [r3, #4]
 801d674:	4b24      	ldr	r3, [pc, #144]	; (801d708 <vPortFree+0xb8>)
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	4013      	ands	r3, r2
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d10a      	bne.n	801d694 <vPortFree+0x44>
	__asm volatile
 801d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d682:	f383 8811 	msr	BASEPRI, r3
 801d686:	f3bf 8f6f 	isb	sy
 801d68a:	f3bf 8f4f 	dsb	sy
 801d68e:	60fb      	str	r3, [r7, #12]
}
 801d690:	bf00      	nop
 801d692:	e7fe      	b.n	801d692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801d694:	693b      	ldr	r3, [r7, #16]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d00a      	beq.n	801d6b2 <vPortFree+0x62>
	__asm volatile
 801d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d6a0:	f383 8811 	msr	BASEPRI, r3
 801d6a4:	f3bf 8f6f 	isb	sy
 801d6a8:	f3bf 8f4f 	dsb	sy
 801d6ac:	60bb      	str	r3, [r7, #8]
}
 801d6ae:	bf00      	nop
 801d6b0:	e7fe      	b.n	801d6b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801d6b2:	693b      	ldr	r3, [r7, #16]
 801d6b4:	685a      	ldr	r2, [r3, #4]
 801d6b6:	4b14      	ldr	r3, [pc, #80]	; (801d708 <vPortFree+0xb8>)
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	4013      	ands	r3, r2
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d01e      	beq.n	801d6fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801d6c0:	693b      	ldr	r3, [r7, #16]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d11a      	bne.n	801d6fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801d6c8:	693b      	ldr	r3, [r7, #16]
 801d6ca:	685a      	ldr	r2, [r3, #4]
 801d6cc:	4b0e      	ldr	r3, [pc, #56]	; (801d708 <vPortFree+0xb8>)
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	43db      	mvns	r3, r3
 801d6d2:	401a      	ands	r2, r3
 801d6d4:	693b      	ldr	r3, [r7, #16]
 801d6d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801d6d8:	f7fe fa80 	bl	801bbdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801d6dc:	693b      	ldr	r3, [r7, #16]
 801d6de:	685a      	ldr	r2, [r3, #4]
 801d6e0:	4b0a      	ldr	r3, [pc, #40]	; (801d70c <vPortFree+0xbc>)
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	4413      	add	r3, r2
 801d6e6:	4a09      	ldr	r2, [pc, #36]	; (801d70c <vPortFree+0xbc>)
 801d6e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801d6ea:	6938      	ldr	r0, [r7, #16]
 801d6ec:	f000 f874 	bl	801d7d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801d6f0:	4b07      	ldr	r3, [pc, #28]	; (801d710 <vPortFree+0xc0>)
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	3301      	adds	r3, #1
 801d6f6:	4a06      	ldr	r2, [pc, #24]	; (801d710 <vPortFree+0xc0>)
 801d6f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801d6fa:	f7fe fa7d 	bl	801bbf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801d6fe:	bf00      	nop
 801d700:	3718      	adds	r7, #24
 801d702:	46bd      	mov	sp, r7
 801d704:	bd80      	pop	{r7, pc}
 801d706:	bf00      	nop
 801d708:	2000d87c 	.word	0x2000d87c
 801d70c:	2000d86c 	.word	0x2000d86c
 801d710:	2000d878 	.word	0x2000d878

0801d714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801d714:	b480      	push	{r7}
 801d716:	b085      	sub	sp, #20
 801d718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801d71a:	f649 4340 	movw	r3, #40000	; 0x9c40
 801d71e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801d720:	4b27      	ldr	r3, [pc, #156]	; (801d7c0 <prvHeapInit+0xac>)
 801d722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	f003 0307 	and.w	r3, r3, #7
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d00c      	beq.n	801d748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	3307      	adds	r3, #7
 801d732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	f023 0307 	bic.w	r3, r3, #7
 801d73a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801d73c:	68ba      	ldr	r2, [r7, #8]
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	1ad3      	subs	r3, r2, r3
 801d742:	4a1f      	ldr	r2, [pc, #124]	; (801d7c0 <prvHeapInit+0xac>)
 801d744:	4413      	add	r3, r2
 801d746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801d74c:	4a1d      	ldr	r2, [pc, #116]	; (801d7c4 <prvHeapInit+0xb0>)
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801d752:	4b1c      	ldr	r3, [pc, #112]	; (801d7c4 <prvHeapInit+0xb0>)
 801d754:	2200      	movs	r2, #0
 801d756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	68ba      	ldr	r2, [r7, #8]
 801d75c:	4413      	add	r3, r2
 801d75e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801d760:	2208      	movs	r2, #8
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	1a9b      	subs	r3, r3, r2
 801d766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	f023 0307 	bic.w	r3, r3, #7
 801d76e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	4a15      	ldr	r2, [pc, #84]	; (801d7c8 <prvHeapInit+0xb4>)
 801d774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801d776:	4b14      	ldr	r3, [pc, #80]	; (801d7c8 <prvHeapInit+0xb4>)
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	2200      	movs	r2, #0
 801d77c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801d77e:	4b12      	ldr	r3, [pc, #72]	; (801d7c8 <prvHeapInit+0xb4>)
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	2200      	movs	r2, #0
 801d784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801d78a:	683b      	ldr	r3, [r7, #0]
 801d78c:	68fa      	ldr	r2, [r7, #12]
 801d78e:	1ad2      	subs	r2, r2, r3
 801d790:	683b      	ldr	r3, [r7, #0]
 801d792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801d794:	4b0c      	ldr	r3, [pc, #48]	; (801d7c8 <prvHeapInit+0xb4>)
 801d796:	681a      	ldr	r2, [r3, #0]
 801d798:	683b      	ldr	r3, [r7, #0]
 801d79a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d79c:	683b      	ldr	r3, [r7, #0]
 801d79e:	685b      	ldr	r3, [r3, #4]
 801d7a0:	4a0a      	ldr	r2, [pc, #40]	; (801d7cc <prvHeapInit+0xb8>)
 801d7a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801d7a4:	683b      	ldr	r3, [r7, #0]
 801d7a6:	685b      	ldr	r3, [r3, #4]
 801d7a8:	4a09      	ldr	r2, [pc, #36]	; (801d7d0 <prvHeapInit+0xbc>)
 801d7aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801d7ac:	4b09      	ldr	r3, [pc, #36]	; (801d7d4 <prvHeapInit+0xc0>)
 801d7ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801d7b2:	601a      	str	r2, [r3, #0]
}
 801d7b4:	bf00      	nop
 801d7b6:	3714      	adds	r7, #20
 801d7b8:	46bd      	mov	sp, r7
 801d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7be:	4770      	bx	lr
 801d7c0:	20003c20 	.word	0x20003c20
 801d7c4:	2000d860 	.word	0x2000d860
 801d7c8:	2000d868 	.word	0x2000d868
 801d7cc:	2000d870 	.word	0x2000d870
 801d7d0:	2000d86c 	.word	0x2000d86c
 801d7d4:	2000d87c 	.word	0x2000d87c

0801d7d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801d7d8:	b480      	push	{r7}
 801d7da:	b085      	sub	sp, #20
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801d7e0:	4b28      	ldr	r3, [pc, #160]	; (801d884 <prvInsertBlockIntoFreeList+0xac>)
 801d7e2:	60fb      	str	r3, [r7, #12]
 801d7e4:	e002      	b.n	801d7ec <prvInsertBlockIntoFreeList+0x14>
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	60fb      	str	r3, [r7, #12]
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	687a      	ldr	r2, [r7, #4]
 801d7f2:	429a      	cmp	r2, r3
 801d7f4:	d8f7      	bhi.n	801d7e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	685b      	ldr	r3, [r3, #4]
 801d7fe:	68ba      	ldr	r2, [r7, #8]
 801d800:	4413      	add	r3, r2
 801d802:	687a      	ldr	r2, [r7, #4]
 801d804:	429a      	cmp	r2, r3
 801d806:	d108      	bne.n	801d81a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	685a      	ldr	r2, [r3, #4]
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	685b      	ldr	r3, [r3, #4]
 801d810:	441a      	add	r2, r3
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	685b      	ldr	r3, [r3, #4]
 801d822:	68ba      	ldr	r2, [r7, #8]
 801d824:	441a      	add	r2, r3
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	429a      	cmp	r2, r3
 801d82c:	d118      	bne.n	801d860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	681a      	ldr	r2, [r3, #0]
 801d832:	4b15      	ldr	r3, [pc, #84]	; (801d888 <prvInsertBlockIntoFreeList+0xb0>)
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	429a      	cmp	r2, r3
 801d838:	d00d      	beq.n	801d856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	685a      	ldr	r2, [r3, #4]
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	685b      	ldr	r3, [r3, #4]
 801d844:	441a      	add	r2, r3
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	681a      	ldr	r2, [r3, #0]
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	601a      	str	r2, [r3, #0]
 801d854:	e008      	b.n	801d868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801d856:	4b0c      	ldr	r3, [pc, #48]	; (801d888 <prvInsertBlockIntoFreeList+0xb0>)
 801d858:	681a      	ldr	r2, [r3, #0]
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	601a      	str	r2, [r3, #0]
 801d85e:	e003      	b.n	801d868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	681a      	ldr	r2, [r3, #0]
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801d868:	68fa      	ldr	r2, [r7, #12]
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	429a      	cmp	r2, r3
 801d86e:	d002      	beq.n	801d876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801d870:	68fb      	ldr	r3, [r7, #12]
 801d872:	687a      	ldr	r2, [r7, #4]
 801d874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d876:	bf00      	nop
 801d878:	3714      	adds	r7, #20
 801d87a:	46bd      	mov	sp, r7
 801d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d880:	4770      	bx	lr
 801d882:	bf00      	nop
 801d884:	2000d860 	.word	0x2000d860
 801d888:	2000d868 	.word	0x2000d868

0801d88c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d88c:	b580      	push	{r7, lr}
 801d88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d890:	2200      	movs	r2, #0
 801d892:	4912      	ldr	r1, [pc, #72]	; (801d8dc <MX_USB_DEVICE_Init+0x50>)
 801d894:	4812      	ldr	r0, [pc, #72]	; (801d8e0 <MX_USB_DEVICE_Init+0x54>)
 801d896:	f7fb fafd 	bl	8018e94 <USBD_Init>
 801d89a:	4603      	mov	r3, r0
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d001      	beq.n	801d8a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d8a0:	f7e6 f993 	bl	8003bca <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d8a4:	490f      	ldr	r1, [pc, #60]	; (801d8e4 <MX_USB_DEVICE_Init+0x58>)
 801d8a6:	480e      	ldr	r0, [pc, #56]	; (801d8e0 <MX_USB_DEVICE_Init+0x54>)
 801d8a8:	f7fb fb24 	bl	8018ef4 <USBD_RegisterClass>
 801d8ac:	4603      	mov	r3, r0
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d001      	beq.n	801d8b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d8b2:	f7e6 f98a 	bl	8003bca <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d8b6:	490c      	ldr	r1, [pc, #48]	; (801d8e8 <MX_USB_DEVICE_Init+0x5c>)
 801d8b8:	4809      	ldr	r0, [pc, #36]	; (801d8e0 <MX_USB_DEVICE_Init+0x54>)
 801d8ba:	f7fb fa5b 	bl	8018d74 <USBD_CDC_RegisterInterface>
 801d8be:	4603      	mov	r3, r0
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d001      	beq.n	801d8c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d8c4:	f7e6 f981 	bl	8003bca <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d8c8:	4805      	ldr	r0, [pc, #20]	; (801d8e0 <MX_USB_DEVICE_Init+0x54>)
 801d8ca:	f7fb fb49 	bl	8018f60 <USBD_Start>
 801d8ce:	4603      	mov	r3, r0
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d001      	beq.n	801d8d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d8d4:	f7e6 f979 	bl	8003bca <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d8d8:	bf00      	nop
 801d8da:	bd80      	pop	{r7, pc}
 801d8dc:	200000f8 	.word	0x200000f8
 801d8e0:	2000d880 	.word	0x2000d880
 801d8e4:	20000060 	.word	0x20000060
 801d8e8:	200000e4 	.word	0x200000e4

0801d8ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	4905      	ldr	r1, [pc, #20]	; (801d908 <CDC_Init_FS+0x1c>)
 801d8f4:	4805      	ldr	r0, [pc, #20]	; (801d90c <CDC_Init_FS+0x20>)
 801d8f6:	f7fb fa57 	bl	8018da8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d8fa:	4905      	ldr	r1, [pc, #20]	; (801d910 <CDC_Init_FS+0x24>)
 801d8fc:	4803      	ldr	r0, [pc, #12]	; (801d90c <CDC_Init_FS+0x20>)
 801d8fe:	f7fb fa75 	bl	8018dec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d902:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d904:	4618      	mov	r0, r3
 801d906:	bd80      	pop	{r7, pc}
 801d908:	2000e364 	.word	0x2000e364
 801d90c:	2000d880 	.word	0x2000d880
 801d910:	2000db64 	.word	0x2000db64

0801d914 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d914:	b480      	push	{r7}
 801d916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d918:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d91a:	4618      	mov	r0, r3
 801d91c:	46bd      	mov	sp, r7
 801d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d922:	4770      	bx	lr

0801d924 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d924:	b480      	push	{r7}
 801d926:	b083      	sub	sp, #12
 801d928:	af00      	add	r7, sp, #0
 801d92a:	4603      	mov	r3, r0
 801d92c:	6039      	str	r1, [r7, #0]
 801d92e:	71fb      	strb	r3, [r7, #7]
 801d930:	4613      	mov	r3, r2
 801d932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d934:	79fb      	ldrb	r3, [r7, #7]
 801d936:	2b23      	cmp	r3, #35	; 0x23
 801d938:	f200 808c 	bhi.w	801da54 <CDC_Control_FS+0x130>
 801d93c:	a201      	add	r2, pc, #4	; (adr r2, 801d944 <CDC_Control_FS+0x20>)
 801d93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d942:	bf00      	nop
 801d944:	0801da55 	.word	0x0801da55
 801d948:	0801da55 	.word	0x0801da55
 801d94c:	0801da55 	.word	0x0801da55
 801d950:	0801da55 	.word	0x0801da55
 801d954:	0801da55 	.word	0x0801da55
 801d958:	0801da55 	.word	0x0801da55
 801d95c:	0801da55 	.word	0x0801da55
 801d960:	0801da55 	.word	0x0801da55
 801d964:	0801da55 	.word	0x0801da55
 801d968:	0801da55 	.word	0x0801da55
 801d96c:	0801da55 	.word	0x0801da55
 801d970:	0801da55 	.word	0x0801da55
 801d974:	0801da55 	.word	0x0801da55
 801d978:	0801da55 	.word	0x0801da55
 801d97c:	0801da55 	.word	0x0801da55
 801d980:	0801da55 	.word	0x0801da55
 801d984:	0801da55 	.word	0x0801da55
 801d988:	0801da55 	.word	0x0801da55
 801d98c:	0801da55 	.word	0x0801da55
 801d990:	0801da55 	.word	0x0801da55
 801d994:	0801da55 	.word	0x0801da55
 801d998:	0801da55 	.word	0x0801da55
 801d99c:	0801da55 	.word	0x0801da55
 801d9a0:	0801da55 	.word	0x0801da55
 801d9a4:	0801da55 	.word	0x0801da55
 801d9a8:	0801da55 	.word	0x0801da55
 801d9ac:	0801da55 	.word	0x0801da55
 801d9b0:	0801da55 	.word	0x0801da55
 801d9b4:	0801da55 	.word	0x0801da55
 801d9b8:	0801da55 	.word	0x0801da55
 801d9bc:	0801da55 	.word	0x0801da55
 801d9c0:	0801da55 	.word	0x0801da55
 801d9c4:	0801d9d5 	.word	0x0801d9d5
 801d9c8:	0801da0f 	.word	0x0801da0f
 801d9cc:	0801da55 	.word	0x0801da55
 801d9d0:	0801da55 	.word	0x0801da55
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 801d9d4:	683b      	ldr	r3, [r7, #0]
 801d9d6:	781a      	ldrb	r2, [r3, #0]
 801d9d8:	4b22      	ldr	r3, [pc, #136]	; (801da64 <CDC_Control_FS+0x140>)
 801d9da:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 801d9dc:	683b      	ldr	r3, [r7, #0]
 801d9de:	785a      	ldrb	r2, [r3, #1]
 801d9e0:	4b20      	ldr	r3, [pc, #128]	; (801da64 <CDC_Control_FS+0x140>)
 801d9e2:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 801d9e4:	683b      	ldr	r3, [r7, #0]
 801d9e6:	789a      	ldrb	r2, [r3, #2]
 801d9e8:	4b1e      	ldr	r3, [pc, #120]	; (801da64 <CDC_Control_FS+0x140>)
 801d9ea:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 801d9ec:	683b      	ldr	r3, [r7, #0]
 801d9ee:	78da      	ldrb	r2, [r3, #3]
 801d9f0:	4b1c      	ldr	r3, [pc, #112]	; (801da64 <CDC_Control_FS+0x140>)
 801d9f2:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 801d9f4:	683b      	ldr	r3, [r7, #0]
 801d9f6:	791a      	ldrb	r2, [r3, #4]
 801d9f8:	4b1a      	ldr	r3, [pc, #104]	; (801da64 <CDC_Control_FS+0x140>)
 801d9fa:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 801d9fc:	683b      	ldr	r3, [r7, #0]
 801d9fe:	795a      	ldrb	r2, [r3, #5]
 801da00:	4b18      	ldr	r3, [pc, #96]	; (801da64 <CDC_Control_FS+0x140>)
 801da02:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 801da04:	683b      	ldr	r3, [r7, #0]
 801da06:	799a      	ldrb	r2, [r3, #6]
 801da08:	4b16      	ldr	r3, [pc, #88]	; (801da64 <CDC_Control_FS+0x140>)
 801da0a:	719a      	strb	r2, [r3, #6]
      break;
 801da0c:	e023      	b.n	801da56 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801da0e:	4b15      	ldr	r3, [pc, #84]	; (801da64 <CDC_Control_FS+0x140>)
 801da10:	781a      	ldrb	r2, [r3, #0]
 801da12:	683b      	ldr	r3, [r7, #0]
 801da14:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801da16:	683b      	ldr	r3, [r7, #0]
 801da18:	3301      	adds	r3, #1
 801da1a:	4a12      	ldr	r2, [pc, #72]	; (801da64 <CDC_Control_FS+0x140>)
 801da1c:	7852      	ldrb	r2, [r2, #1]
 801da1e:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801da20:	683b      	ldr	r3, [r7, #0]
 801da22:	3302      	adds	r3, #2
 801da24:	4a0f      	ldr	r2, [pc, #60]	; (801da64 <CDC_Control_FS+0x140>)
 801da26:	7892      	ldrb	r2, [r2, #2]
 801da28:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801da2a:	683b      	ldr	r3, [r7, #0]
 801da2c:	3303      	adds	r3, #3
 801da2e:	4a0d      	ldr	r2, [pc, #52]	; (801da64 <CDC_Control_FS+0x140>)
 801da30:	78d2      	ldrb	r2, [r2, #3]
 801da32:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 801da34:	683b      	ldr	r3, [r7, #0]
 801da36:	3304      	adds	r3, #4
 801da38:	4a0a      	ldr	r2, [pc, #40]	; (801da64 <CDC_Control_FS+0x140>)
 801da3a:	7912      	ldrb	r2, [r2, #4]
 801da3c:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801da3e:	683b      	ldr	r3, [r7, #0]
 801da40:	3305      	adds	r3, #5
 801da42:	4a08      	ldr	r2, [pc, #32]	; (801da64 <CDC_Control_FS+0x140>)
 801da44:	7952      	ldrb	r2, [r2, #5]
 801da46:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 801da48:	683b      	ldr	r3, [r7, #0]
 801da4a:	3306      	adds	r3, #6
 801da4c:	4a05      	ldr	r2, [pc, #20]	; (801da64 <CDC_Control_FS+0x140>)
 801da4e:	7992      	ldrb	r2, [r2, #6]
 801da50:	701a      	strb	r2, [r3, #0]
      break;
 801da52:	e000      	b.n	801da56 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801da54:	bf00      	nop
  }

  return (USBD_OK);
 801da56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801da58:	4618      	mov	r0, r3
 801da5a:	370c      	adds	r7, #12
 801da5c:	46bd      	mov	sp, r7
 801da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da62:	4770      	bx	lr
 801da64:	2000db5c 	.word	0x2000db5c

0801da68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801da68:	b580      	push	{r7, lr}
 801da6a:	b082      	sub	sp, #8
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	6078      	str	r0, [r7, #4]
 801da70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801da72:	6879      	ldr	r1, [r7, #4]
 801da74:	4807      	ldr	r0, [pc, #28]	; (801da94 <CDC_Receive_FS+0x2c>)
 801da76:	f7fb f9b9 	bl	8018dec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801da7a:	4806      	ldr	r0, [pc, #24]	; (801da94 <CDC_Receive_FS+0x2c>)
 801da7c:	f7fb f9d4 	bl	8018e28 <USBD_CDC_ReceivePacket>
  usb_vcp_processing(Buf, Len);
 801da80:	6839      	ldr	r1, [r7, #0]
 801da82:	6878      	ldr	r0, [r7, #4]
 801da84:	f7ef faac 	bl	800cfe0 <usb_vcp_processing>
  return (USBD_OK);
 801da88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801da8a:	4618      	mov	r0, r3
 801da8c:	3708      	adds	r7, #8
 801da8e:	46bd      	mov	sp, r7
 801da90:	bd80      	pop	{r7, pc}
 801da92:	bf00      	nop
 801da94:	2000d880 	.word	0x2000d880

0801da98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801da98:	b480      	push	{r7}
 801da9a:	b087      	sub	sp, #28
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	60f8      	str	r0, [r7, #12]
 801daa0:	60b9      	str	r1, [r7, #8]
 801daa2:	4613      	mov	r3, r2
 801daa4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801daa6:	2300      	movs	r3, #0
 801daa8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801daaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801daae:	4618      	mov	r0, r3
 801dab0:	371c      	adds	r7, #28
 801dab2:	46bd      	mov	sp, r7
 801dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dab8:	4770      	bx	lr
	...

0801dabc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dabc:	b480      	push	{r7}
 801dabe:	b083      	sub	sp, #12
 801dac0:	af00      	add	r7, sp, #0
 801dac2:	4603      	mov	r3, r0
 801dac4:	6039      	str	r1, [r7, #0]
 801dac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801dac8:	683b      	ldr	r3, [r7, #0]
 801daca:	2212      	movs	r2, #18
 801dacc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801dace:	4b03      	ldr	r3, [pc, #12]	; (801dadc <USBD_FS_DeviceDescriptor+0x20>)
}
 801dad0:	4618      	mov	r0, r3
 801dad2:	370c      	adds	r7, #12
 801dad4:	46bd      	mov	sp, r7
 801dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dada:	4770      	bx	lr
 801dadc:	20000114 	.word	0x20000114

0801dae0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dae0:	b480      	push	{r7}
 801dae2:	b083      	sub	sp, #12
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	4603      	mov	r3, r0
 801dae8:	6039      	str	r1, [r7, #0]
 801daea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801daec:	683b      	ldr	r3, [r7, #0]
 801daee:	2204      	movs	r2, #4
 801daf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801daf2:	4b03      	ldr	r3, [pc, #12]	; (801db00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801daf4:	4618      	mov	r0, r3
 801daf6:	370c      	adds	r7, #12
 801daf8:	46bd      	mov	sp, r7
 801dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dafe:	4770      	bx	lr
 801db00:	20000128 	.word	0x20000128

0801db04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801db04:	b580      	push	{r7, lr}
 801db06:	b082      	sub	sp, #8
 801db08:	af00      	add	r7, sp, #0
 801db0a:	4603      	mov	r3, r0
 801db0c:	6039      	str	r1, [r7, #0]
 801db0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801db10:	79fb      	ldrb	r3, [r7, #7]
 801db12:	2b00      	cmp	r3, #0
 801db14:	d105      	bne.n	801db22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801db16:	683a      	ldr	r2, [r7, #0]
 801db18:	4907      	ldr	r1, [pc, #28]	; (801db38 <USBD_FS_ProductStrDescriptor+0x34>)
 801db1a:	4808      	ldr	r0, [pc, #32]	; (801db3c <USBD_FS_ProductStrDescriptor+0x38>)
 801db1c:	f7fc fbcc 	bl	801a2b8 <USBD_GetString>
 801db20:	e004      	b.n	801db2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801db22:	683a      	ldr	r2, [r7, #0]
 801db24:	4904      	ldr	r1, [pc, #16]	; (801db38 <USBD_FS_ProductStrDescriptor+0x34>)
 801db26:	4805      	ldr	r0, [pc, #20]	; (801db3c <USBD_FS_ProductStrDescriptor+0x38>)
 801db28:	f7fc fbc6 	bl	801a2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801db2c:	4b02      	ldr	r3, [pc, #8]	; (801db38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801db2e:	4618      	mov	r0, r3
 801db30:	3708      	adds	r7, #8
 801db32:	46bd      	mov	sp, r7
 801db34:	bd80      	pop	{r7, pc}
 801db36:	bf00      	nop
 801db38:	2000eb64 	.word	0x2000eb64
 801db3c:	08025864 	.word	0x08025864

0801db40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801db40:	b580      	push	{r7, lr}
 801db42:	b082      	sub	sp, #8
 801db44:	af00      	add	r7, sp, #0
 801db46:	4603      	mov	r3, r0
 801db48:	6039      	str	r1, [r7, #0]
 801db4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801db4c:	683a      	ldr	r2, [r7, #0]
 801db4e:	4904      	ldr	r1, [pc, #16]	; (801db60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801db50:	4804      	ldr	r0, [pc, #16]	; (801db64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801db52:	f7fc fbb1 	bl	801a2b8 <USBD_GetString>
  return USBD_StrDesc;
 801db56:	4b02      	ldr	r3, [pc, #8]	; (801db60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801db58:	4618      	mov	r0, r3
 801db5a:	3708      	adds	r7, #8
 801db5c:	46bd      	mov	sp, r7
 801db5e:	bd80      	pop	{r7, pc}
 801db60:	2000eb64 	.word	0x2000eb64
 801db64:	0802587c 	.word	0x0802587c

0801db68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801db68:	b580      	push	{r7, lr}
 801db6a:	b082      	sub	sp, #8
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	4603      	mov	r3, r0
 801db70:	6039      	str	r1, [r7, #0]
 801db72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801db74:	683b      	ldr	r3, [r7, #0]
 801db76:	221a      	movs	r2, #26
 801db78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801db7a:	f000 f843 	bl	801dc04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801db7e:	4b02      	ldr	r3, [pc, #8]	; (801db88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801db80:	4618      	mov	r0, r3
 801db82:	3708      	adds	r7, #8
 801db84:	46bd      	mov	sp, r7
 801db86:	bd80      	pop	{r7, pc}
 801db88:	2000012c 	.word	0x2000012c

0801db8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b082      	sub	sp, #8
 801db90:	af00      	add	r7, sp, #0
 801db92:	4603      	mov	r3, r0
 801db94:	6039      	str	r1, [r7, #0]
 801db96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801db98:	79fb      	ldrb	r3, [r7, #7]
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d105      	bne.n	801dbaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801db9e:	683a      	ldr	r2, [r7, #0]
 801dba0:	4907      	ldr	r1, [pc, #28]	; (801dbc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801dba2:	4808      	ldr	r0, [pc, #32]	; (801dbc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801dba4:	f7fc fb88 	bl	801a2b8 <USBD_GetString>
 801dba8:	e004      	b.n	801dbb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801dbaa:	683a      	ldr	r2, [r7, #0]
 801dbac:	4904      	ldr	r1, [pc, #16]	; (801dbc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801dbae:	4805      	ldr	r0, [pc, #20]	; (801dbc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801dbb0:	f7fc fb82 	bl	801a2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dbb4:	4b02      	ldr	r3, [pc, #8]	; (801dbc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	3708      	adds	r7, #8
 801dbba:	46bd      	mov	sp, r7
 801dbbc:	bd80      	pop	{r7, pc}
 801dbbe:	bf00      	nop
 801dbc0:	2000eb64 	.word	0x2000eb64
 801dbc4:	08025890 	.word	0x08025890

0801dbc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b082      	sub	sp, #8
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	4603      	mov	r3, r0
 801dbd0:	6039      	str	r1, [r7, #0]
 801dbd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801dbd4:	79fb      	ldrb	r3, [r7, #7]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d105      	bne.n	801dbe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801dbda:	683a      	ldr	r2, [r7, #0]
 801dbdc:	4907      	ldr	r1, [pc, #28]	; (801dbfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801dbde:	4808      	ldr	r0, [pc, #32]	; (801dc00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801dbe0:	f7fc fb6a 	bl	801a2b8 <USBD_GetString>
 801dbe4:	e004      	b.n	801dbf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801dbe6:	683a      	ldr	r2, [r7, #0]
 801dbe8:	4904      	ldr	r1, [pc, #16]	; (801dbfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801dbea:	4805      	ldr	r0, [pc, #20]	; (801dc00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801dbec:	f7fc fb64 	bl	801a2b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dbf0:	4b02      	ldr	r3, [pc, #8]	; (801dbfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	3708      	adds	r7, #8
 801dbf6:	46bd      	mov	sp, r7
 801dbf8:	bd80      	pop	{r7, pc}
 801dbfa:	bf00      	nop
 801dbfc:	2000eb64 	.word	0x2000eb64
 801dc00:	0802589c 	.word	0x0802589c

0801dc04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b084      	sub	sp, #16
 801dc08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801dc0a:	4b0f      	ldr	r3, [pc, #60]	; (801dc48 <Get_SerialNum+0x44>)
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801dc10:	4b0e      	ldr	r3, [pc, #56]	; (801dc4c <Get_SerialNum+0x48>)
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801dc16:	4b0e      	ldr	r3, [pc, #56]	; (801dc50 <Get_SerialNum+0x4c>)
 801dc18:	681b      	ldr	r3, [r3, #0]
 801dc1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801dc1c:	68fa      	ldr	r2, [r7, #12]
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	4413      	add	r3, r2
 801dc22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d009      	beq.n	801dc3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801dc2a:	2208      	movs	r2, #8
 801dc2c:	4909      	ldr	r1, [pc, #36]	; (801dc54 <Get_SerialNum+0x50>)
 801dc2e:	68f8      	ldr	r0, [r7, #12]
 801dc30:	f000 f814 	bl	801dc5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801dc34:	2204      	movs	r2, #4
 801dc36:	4908      	ldr	r1, [pc, #32]	; (801dc58 <Get_SerialNum+0x54>)
 801dc38:	68b8      	ldr	r0, [r7, #8]
 801dc3a:	f000 f80f 	bl	801dc5c <IntToUnicode>
  }
}
 801dc3e:	bf00      	nop
 801dc40:	3710      	adds	r7, #16
 801dc42:	46bd      	mov	sp, r7
 801dc44:	bd80      	pop	{r7, pc}
 801dc46:	bf00      	nop
 801dc48:	1fff7a10 	.word	0x1fff7a10
 801dc4c:	1fff7a14 	.word	0x1fff7a14
 801dc50:	1fff7a18 	.word	0x1fff7a18
 801dc54:	2000012e 	.word	0x2000012e
 801dc58:	2000013e 	.word	0x2000013e

0801dc5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801dc5c:	b480      	push	{r7}
 801dc5e:	b087      	sub	sp, #28
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	60f8      	str	r0, [r7, #12]
 801dc64:	60b9      	str	r1, [r7, #8]
 801dc66:	4613      	mov	r3, r2
 801dc68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801dc6a:	2300      	movs	r3, #0
 801dc6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801dc6e:	2300      	movs	r3, #0
 801dc70:	75fb      	strb	r3, [r7, #23]
 801dc72:	e027      	b.n	801dcc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	0f1b      	lsrs	r3, r3, #28
 801dc78:	2b09      	cmp	r3, #9
 801dc7a:	d80b      	bhi.n	801dc94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	0f1b      	lsrs	r3, r3, #28
 801dc80:	b2da      	uxtb	r2, r3
 801dc82:	7dfb      	ldrb	r3, [r7, #23]
 801dc84:	005b      	lsls	r3, r3, #1
 801dc86:	4619      	mov	r1, r3
 801dc88:	68bb      	ldr	r3, [r7, #8]
 801dc8a:	440b      	add	r3, r1
 801dc8c:	3230      	adds	r2, #48	; 0x30
 801dc8e:	b2d2      	uxtb	r2, r2
 801dc90:	701a      	strb	r2, [r3, #0]
 801dc92:	e00a      	b.n	801dcaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	0f1b      	lsrs	r3, r3, #28
 801dc98:	b2da      	uxtb	r2, r3
 801dc9a:	7dfb      	ldrb	r3, [r7, #23]
 801dc9c:	005b      	lsls	r3, r3, #1
 801dc9e:	4619      	mov	r1, r3
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	440b      	add	r3, r1
 801dca4:	3237      	adds	r2, #55	; 0x37
 801dca6:	b2d2      	uxtb	r2, r2
 801dca8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	011b      	lsls	r3, r3, #4
 801dcae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801dcb0:	7dfb      	ldrb	r3, [r7, #23]
 801dcb2:	005b      	lsls	r3, r3, #1
 801dcb4:	3301      	adds	r3, #1
 801dcb6:	68ba      	ldr	r2, [r7, #8]
 801dcb8:	4413      	add	r3, r2
 801dcba:	2200      	movs	r2, #0
 801dcbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801dcbe:	7dfb      	ldrb	r3, [r7, #23]
 801dcc0:	3301      	adds	r3, #1
 801dcc2:	75fb      	strb	r3, [r7, #23]
 801dcc4:	7dfa      	ldrb	r2, [r7, #23]
 801dcc6:	79fb      	ldrb	r3, [r7, #7]
 801dcc8:	429a      	cmp	r2, r3
 801dcca:	d3d3      	bcc.n	801dc74 <IntToUnicode+0x18>
  }
}
 801dccc:	bf00      	nop
 801dcce:	bf00      	nop
 801dcd0:	371c      	adds	r7, #28
 801dcd2:	46bd      	mov	sp, r7
 801dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcd8:	4770      	bx	lr
	...

0801dcdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801dcdc:	b580      	push	{r7, lr}
 801dcde:	b08a      	sub	sp, #40	; 0x28
 801dce0:	af00      	add	r7, sp, #0
 801dce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dce4:	f107 0314 	add.w	r3, r7, #20
 801dce8:	2200      	movs	r2, #0
 801dcea:	601a      	str	r2, [r3, #0]
 801dcec:	605a      	str	r2, [r3, #4]
 801dcee:	609a      	str	r2, [r3, #8]
 801dcf0:	60da      	str	r2, [r3, #12]
 801dcf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801dcfc:	d13a      	bne.n	801dd74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dcfe:	2300      	movs	r3, #0
 801dd00:	613b      	str	r3, [r7, #16]
 801dd02:	4b1e      	ldr	r3, [pc, #120]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd06:	4a1d      	ldr	r2, [pc, #116]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd08:	f043 0301 	orr.w	r3, r3, #1
 801dd0c:	6313      	str	r3, [r2, #48]	; 0x30
 801dd0e:	4b1b      	ldr	r3, [pc, #108]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd12:	f003 0301 	and.w	r3, r3, #1
 801dd16:	613b      	str	r3, [r7, #16]
 801dd18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801dd1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801dd1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dd20:	2302      	movs	r3, #2
 801dd22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd24:	2300      	movs	r3, #0
 801dd26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dd28:	2303      	movs	r3, #3
 801dd2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801dd2c:	230a      	movs	r3, #10
 801dd2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dd30:	f107 0314 	add.w	r3, r7, #20
 801dd34:	4619      	mov	r1, r3
 801dd36:	4812      	ldr	r0, [pc, #72]	; (801dd80 <HAL_PCD_MspInit+0xa4>)
 801dd38:	f7f2 fa02 	bl	8010140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801dd3c:	4b0f      	ldr	r3, [pc, #60]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dd40:	4a0e      	ldr	r2, [pc, #56]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd46:	6353      	str	r3, [r2, #52]	; 0x34
 801dd48:	2300      	movs	r3, #0
 801dd4a:	60fb      	str	r3, [r7, #12]
 801dd4c:	4b0b      	ldr	r3, [pc, #44]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dd50:	4a0a      	ldr	r2, [pc, #40]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801dd56:	6453      	str	r3, [r2, #68]	; 0x44
 801dd58:	4b08      	ldr	r3, [pc, #32]	; (801dd7c <HAL_PCD_MspInit+0xa0>)
 801dd5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dd5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801dd60:	60fb      	str	r3, [r7, #12]
 801dd62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801dd64:	2200      	movs	r2, #0
 801dd66:	2105      	movs	r1, #5
 801dd68:	2043      	movs	r0, #67	; 0x43
 801dd6a:	f7f1 fdb1 	bl	800f8d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801dd6e:	2043      	movs	r0, #67	; 0x43
 801dd70:	f7f1 fdca 	bl	800f908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801dd74:	bf00      	nop
 801dd76:	3728      	adds	r7, #40	; 0x28
 801dd78:	46bd      	mov	sp, r7
 801dd7a:	bd80      	pop	{r7, pc}
 801dd7c:	40023800 	.word	0x40023800
 801dd80:	40020000 	.word	0x40020000

0801dd84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd84:	b580      	push	{r7, lr}
 801dd86:	b082      	sub	sp, #8
 801dd88:	af00      	add	r7, sp, #0
 801dd8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801dd98:	4619      	mov	r1, r3
 801dd9a:	4610      	mov	r0, r2
 801dd9c:	f7fb f92d 	bl	8018ffa <USBD_LL_SetupStage>
}
 801dda0:	bf00      	nop
 801dda2:	3708      	adds	r7, #8
 801dda4:	46bd      	mov	sp, r7
 801dda6:	bd80      	pop	{r7, pc}

0801dda8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b082      	sub	sp, #8
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	6078      	str	r0, [r7, #4]
 801ddb0:	460b      	mov	r3, r1
 801ddb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ddba:	78fa      	ldrb	r2, [r7, #3]
 801ddbc:	6879      	ldr	r1, [r7, #4]
 801ddbe:	4613      	mov	r3, r2
 801ddc0:	00db      	lsls	r3, r3, #3
 801ddc2:	4413      	add	r3, r2
 801ddc4:	009b      	lsls	r3, r3, #2
 801ddc6:	440b      	add	r3, r1
 801ddc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801ddcc:	681a      	ldr	r2, [r3, #0]
 801ddce:	78fb      	ldrb	r3, [r7, #3]
 801ddd0:	4619      	mov	r1, r3
 801ddd2:	f7fb f967 	bl	80190a4 <USBD_LL_DataOutStage>
}
 801ddd6:	bf00      	nop
 801ddd8:	3708      	adds	r7, #8
 801ddda:	46bd      	mov	sp, r7
 801dddc:	bd80      	pop	{r7, pc}

0801ddde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ddde:	b580      	push	{r7, lr}
 801dde0:	b082      	sub	sp, #8
 801dde2:	af00      	add	r7, sp, #0
 801dde4:	6078      	str	r0, [r7, #4]
 801dde6:	460b      	mov	r3, r1
 801dde8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ddf0:	78fa      	ldrb	r2, [r7, #3]
 801ddf2:	6879      	ldr	r1, [r7, #4]
 801ddf4:	4613      	mov	r3, r2
 801ddf6:	00db      	lsls	r3, r3, #3
 801ddf8:	4413      	add	r3, r2
 801ddfa:	009b      	lsls	r3, r3, #2
 801ddfc:	440b      	add	r3, r1
 801ddfe:	334c      	adds	r3, #76	; 0x4c
 801de00:	681a      	ldr	r2, [r3, #0]
 801de02:	78fb      	ldrb	r3, [r7, #3]
 801de04:	4619      	mov	r1, r3
 801de06:	f7fb fa00 	bl	801920a <USBD_LL_DataInStage>
}
 801de0a:	bf00      	nop
 801de0c:	3708      	adds	r7, #8
 801de0e:	46bd      	mov	sp, r7
 801de10:	bd80      	pop	{r7, pc}

0801de12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801de12:	b580      	push	{r7, lr}
 801de14:	b082      	sub	sp, #8
 801de16:	af00      	add	r7, sp, #0
 801de18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801de20:	4618      	mov	r0, r3
 801de22:	f7fb fb34 	bl	801948e <USBD_LL_SOF>
}
 801de26:	bf00      	nop
 801de28:	3708      	adds	r7, #8
 801de2a:	46bd      	mov	sp, r7
 801de2c:	bd80      	pop	{r7, pc}

0801de2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801de2e:	b580      	push	{r7, lr}
 801de30:	b084      	sub	sp, #16
 801de32:	af00      	add	r7, sp, #0
 801de34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801de36:	2301      	movs	r3, #1
 801de38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	68db      	ldr	r3, [r3, #12]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d102      	bne.n	801de48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801de42:	2300      	movs	r3, #0
 801de44:	73fb      	strb	r3, [r7, #15]
 801de46:	e008      	b.n	801de5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	68db      	ldr	r3, [r3, #12]
 801de4c:	2b02      	cmp	r3, #2
 801de4e:	d102      	bne.n	801de56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801de50:	2301      	movs	r3, #1
 801de52:	73fb      	strb	r3, [r7, #15]
 801de54:	e001      	b.n	801de5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801de56:	f7e5 feb8 	bl	8003bca <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801de60:	7bfa      	ldrb	r2, [r7, #15]
 801de62:	4611      	mov	r1, r2
 801de64:	4618      	mov	r0, r3
 801de66:	f7fb fad4 	bl	8019412 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801de70:	4618      	mov	r0, r3
 801de72:	f7fb fa7c 	bl	801936e <USBD_LL_Reset>
}
 801de76:	bf00      	nop
 801de78:	3710      	adds	r7, #16
 801de7a:	46bd      	mov	sp, r7
 801de7c:	bd80      	pop	{r7, pc}
	...

0801de80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b082      	sub	sp, #8
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801de8e:	4618      	mov	r0, r3
 801de90:	f7fb facf 	bl	8019432 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	687a      	ldr	r2, [r7, #4]
 801dea0:	6812      	ldr	r2, [r2, #0]
 801dea2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801dea6:	f043 0301 	orr.w	r3, r3, #1
 801deaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  gv_usb_connected = 0;
 801deac:	4b08      	ldr	r3, [pc, #32]	; (801ded0 <HAL_PCD_SuspendCallback+0x50>)
 801deae:	2200      	movs	r2, #0
 801deb0:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.low_power_enable)
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	6a1b      	ldr	r3, [r3, #32]
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	d005      	beq.n	801dec6 <HAL_PCD_SuspendCallback+0x46>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801deba:	4b06      	ldr	r3, [pc, #24]	; (801ded4 <HAL_PCD_SuspendCallback+0x54>)
 801debc:	691b      	ldr	r3, [r3, #16]
 801debe:	4a05      	ldr	r2, [pc, #20]	; (801ded4 <HAL_PCD_SuspendCallback+0x54>)
 801dec0:	f043 0306 	orr.w	r3, r3, #6
 801dec4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801dec6:	bf00      	nop
 801dec8:	3708      	adds	r7, #8
 801deca:	46bd      	mov	sp, r7
 801decc:	bd80      	pop	{r7, pc}
 801dece:	bf00      	nop
 801ded0:	20003435 	.word	0x20003435
 801ded4:	e000ed00 	.word	0xe000ed00

0801ded8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ded8:	b580      	push	{r7, lr}
 801deda:	b082      	sub	sp, #8
 801dedc:	af00      	add	r7, sp, #0
 801dede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
	gv_usb_connected = 1;
 801dee0:	4b06      	ldr	r3, [pc, #24]	; (801defc <HAL_PCD_ResumeCallback+0x24>)
 801dee2:	2201      	movs	r2, #1
 801dee4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801deec:	4618      	mov	r0, r3
 801deee:	f7fb fab6 	bl	801945e <USBD_LL_Resume>
}
 801def2:	bf00      	nop
 801def4:	3708      	adds	r7, #8
 801def6:	46bd      	mov	sp, r7
 801def8:	bd80      	pop	{r7, pc}
 801defa:	bf00      	nop
 801defc:	20003435 	.word	0x20003435

0801df00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df00:	b580      	push	{r7, lr}
 801df02:	b082      	sub	sp, #8
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
 801df08:	460b      	mov	r3, r1
 801df0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801df12:	78fa      	ldrb	r2, [r7, #3]
 801df14:	4611      	mov	r1, r2
 801df16:	4618      	mov	r0, r3
 801df18:	f7fb fb0b 	bl	8019532 <USBD_LL_IsoOUTIncomplete>
}
 801df1c:	bf00      	nop
 801df1e:	3708      	adds	r7, #8
 801df20:	46bd      	mov	sp, r7
 801df22:	bd80      	pop	{r7, pc}

0801df24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b082      	sub	sp, #8
 801df28:	af00      	add	r7, sp, #0
 801df2a:	6078      	str	r0, [r7, #4]
 801df2c:	460b      	mov	r3, r1
 801df2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801df36:	78fa      	ldrb	r2, [r7, #3]
 801df38:	4611      	mov	r1, r2
 801df3a:	4618      	mov	r0, r3
 801df3c:	f7fb fac7 	bl	80194ce <USBD_LL_IsoINIncomplete>
}
 801df40:	bf00      	nop
 801df42:	3708      	adds	r7, #8
 801df44:	46bd      	mov	sp, r7
 801df46:	bd80      	pop	{r7, pc}

0801df48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df48:	b580      	push	{r7, lr}
 801df4a:	b082      	sub	sp, #8
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801df56:	4618      	mov	r0, r3
 801df58:	f7fb fb1d 	bl	8019596 <USBD_LL_DevConnected>
}
 801df5c:	bf00      	nop
 801df5e:	3708      	adds	r7, #8
 801df60:	46bd      	mov	sp, r7
 801df62:	bd80      	pop	{r7, pc}

0801df64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801df64:	b580      	push	{r7, lr}
 801df66:	b082      	sub	sp, #8
 801df68:	af00      	add	r7, sp, #0
 801df6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801df72:	4618      	mov	r0, r3
 801df74:	f7fb fb1a 	bl	80195ac <USBD_LL_DevDisconnected>
}
 801df78:	bf00      	nop
 801df7a:	3708      	adds	r7, #8
 801df7c:	46bd      	mov	sp, r7
 801df7e:	bd80      	pop	{r7, pc}

0801df80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b082      	sub	sp, #8
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	781b      	ldrb	r3, [r3, #0]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d13c      	bne.n	801e00a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801df90:	4a20      	ldr	r2, [pc, #128]	; (801e014 <USBD_LL_Init+0x94>)
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	4a1e      	ldr	r2, [pc, #120]	; (801e014 <USBD_LL_Init+0x94>)
 801df9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801dfa0:	4b1c      	ldr	r3, [pc, #112]	; (801e014 <USBD_LL_Init+0x94>)
 801dfa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801dfa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801dfa8:	4b1a      	ldr	r3, [pc, #104]	; (801e014 <USBD_LL_Init+0x94>)
 801dfaa:	2204      	movs	r2, #4
 801dfac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801dfae:	4b19      	ldr	r3, [pc, #100]	; (801e014 <USBD_LL_Init+0x94>)
 801dfb0:	2202      	movs	r2, #2
 801dfb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801dfb4:	4b17      	ldr	r3, [pc, #92]	; (801e014 <USBD_LL_Init+0x94>)
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801dfba:	4b16      	ldr	r3, [pc, #88]	; (801e014 <USBD_LL_Init+0x94>)
 801dfbc:	2202      	movs	r2, #2
 801dfbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801dfc0:	4b14      	ldr	r3, [pc, #80]	; (801e014 <USBD_LL_Init+0x94>)
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801dfc6:	4b13      	ldr	r3, [pc, #76]	; (801e014 <USBD_LL_Init+0x94>)
 801dfc8:	2200      	movs	r2, #0
 801dfca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801dfcc:	4b11      	ldr	r3, [pc, #68]	; (801e014 <USBD_LL_Init+0x94>)
 801dfce:	2200      	movs	r2, #0
 801dfd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801dfd2:	4b10      	ldr	r3, [pc, #64]	; (801e014 <USBD_LL_Init+0x94>)
 801dfd4:	2200      	movs	r2, #0
 801dfd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801dfd8:	4b0e      	ldr	r3, [pc, #56]	; (801e014 <USBD_LL_Init+0x94>)
 801dfda:	2200      	movs	r2, #0
 801dfdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801dfde:	480d      	ldr	r0, [pc, #52]	; (801e014 <USBD_LL_Init+0x94>)
 801dfe0:	f7f4 f80f 	bl	8012002 <HAL_PCD_Init>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d001      	beq.n	801dfee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801dfea:	f7e5 fdee 	bl	8003bca <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801dfee:	2180      	movs	r1, #128	; 0x80
 801dff0:	4808      	ldr	r0, [pc, #32]	; (801e014 <USBD_LL_Init+0x94>)
 801dff2:	f7f5 fa66 	bl	80134c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801dff6:	2240      	movs	r2, #64	; 0x40
 801dff8:	2100      	movs	r1, #0
 801dffa:	4806      	ldr	r0, [pc, #24]	; (801e014 <USBD_LL_Init+0x94>)
 801dffc:	f7f5 fa1a 	bl	8013434 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801e000:	2280      	movs	r2, #128	; 0x80
 801e002:	2101      	movs	r1, #1
 801e004:	4803      	ldr	r0, [pc, #12]	; (801e014 <USBD_LL_Init+0x94>)
 801e006:	f7f5 fa15 	bl	8013434 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801e00a:	2300      	movs	r3, #0
}
 801e00c:	4618      	mov	r0, r3
 801e00e:	3708      	adds	r7, #8
 801e010:	46bd      	mov	sp, r7
 801e012:	bd80      	pop	{r7, pc}
 801e014:	2000ed64 	.word	0x2000ed64

0801e018 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b084      	sub	sp, #16
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e020:	2300      	movs	r3, #0
 801e022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e024:	2300      	movs	r3, #0
 801e026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e02e:	4618      	mov	r0, r3
 801e030:	f7f4 f904 	bl	801223c <HAL_PCD_Start>
 801e034:	4603      	mov	r3, r0
 801e036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e038:	7bfb      	ldrb	r3, [r7, #15]
 801e03a:	4618      	mov	r0, r3
 801e03c:	f000 f942 	bl	801e2c4 <USBD_Get_USB_Status>
 801e040:	4603      	mov	r3, r0
 801e042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e044:	7bbb      	ldrb	r3, [r7, #14]
}
 801e046:	4618      	mov	r0, r3
 801e048:	3710      	adds	r7, #16
 801e04a:	46bd      	mov	sp, r7
 801e04c:	bd80      	pop	{r7, pc}

0801e04e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e04e:	b580      	push	{r7, lr}
 801e050:	b084      	sub	sp, #16
 801e052:	af00      	add	r7, sp, #0
 801e054:	6078      	str	r0, [r7, #4]
 801e056:	4608      	mov	r0, r1
 801e058:	4611      	mov	r1, r2
 801e05a:	461a      	mov	r2, r3
 801e05c:	4603      	mov	r3, r0
 801e05e:	70fb      	strb	r3, [r7, #3]
 801e060:	460b      	mov	r3, r1
 801e062:	70bb      	strb	r3, [r7, #2]
 801e064:	4613      	mov	r3, r2
 801e066:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e068:	2300      	movs	r3, #0
 801e06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e06c:	2300      	movs	r3, #0
 801e06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e076:	78bb      	ldrb	r3, [r7, #2]
 801e078:	883a      	ldrh	r2, [r7, #0]
 801e07a:	78f9      	ldrb	r1, [r7, #3]
 801e07c:	f7f4 fdd5 	bl	8012c2a <HAL_PCD_EP_Open>
 801e080:	4603      	mov	r3, r0
 801e082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e084:	7bfb      	ldrb	r3, [r7, #15]
 801e086:	4618      	mov	r0, r3
 801e088:	f000 f91c 	bl	801e2c4 <USBD_Get_USB_Status>
 801e08c:	4603      	mov	r3, r0
 801e08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e090:	7bbb      	ldrb	r3, [r7, #14]
}
 801e092:	4618      	mov	r0, r3
 801e094:	3710      	adds	r7, #16
 801e096:	46bd      	mov	sp, r7
 801e098:	bd80      	pop	{r7, pc}

0801e09a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e09a:	b580      	push	{r7, lr}
 801e09c:	b084      	sub	sp, #16
 801e09e:	af00      	add	r7, sp, #0
 801e0a0:	6078      	str	r0, [r7, #4]
 801e0a2:	460b      	mov	r3, r1
 801e0a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e0a6:	2300      	movs	r3, #0
 801e0a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e0aa:	2300      	movs	r3, #0
 801e0ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e0b4:	78fa      	ldrb	r2, [r7, #3]
 801e0b6:	4611      	mov	r1, r2
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	f7f4 fe1e 	bl	8012cfa <HAL_PCD_EP_Close>
 801e0be:	4603      	mov	r3, r0
 801e0c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e0c2:	7bfb      	ldrb	r3, [r7, #15]
 801e0c4:	4618      	mov	r0, r3
 801e0c6:	f000 f8fd 	bl	801e2c4 <USBD_Get_USB_Status>
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e0ce:	7bbb      	ldrb	r3, [r7, #14]
}
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	3710      	adds	r7, #16
 801e0d4:	46bd      	mov	sp, r7
 801e0d6:	bd80      	pop	{r7, pc}

0801e0d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e0d8:	b580      	push	{r7, lr}
 801e0da:	b084      	sub	sp, #16
 801e0dc:	af00      	add	r7, sp, #0
 801e0de:	6078      	str	r0, [r7, #4]
 801e0e0:	460b      	mov	r3, r1
 801e0e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e0f2:	78fa      	ldrb	r2, [r7, #3]
 801e0f4:	4611      	mov	r1, r2
 801e0f6:	4618      	mov	r0, r3
 801e0f8:	f7f4 fef6 	bl	8012ee8 <HAL_PCD_EP_SetStall>
 801e0fc:	4603      	mov	r3, r0
 801e0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e100:	7bfb      	ldrb	r3, [r7, #15]
 801e102:	4618      	mov	r0, r3
 801e104:	f000 f8de 	bl	801e2c4 <USBD_Get_USB_Status>
 801e108:	4603      	mov	r3, r0
 801e10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e10c:	7bbb      	ldrb	r3, [r7, #14]
}
 801e10e:	4618      	mov	r0, r3
 801e110:	3710      	adds	r7, #16
 801e112:	46bd      	mov	sp, r7
 801e114:	bd80      	pop	{r7, pc}

0801e116 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e116:	b580      	push	{r7, lr}
 801e118:	b084      	sub	sp, #16
 801e11a:	af00      	add	r7, sp, #0
 801e11c:	6078      	str	r0, [r7, #4]
 801e11e:	460b      	mov	r3, r1
 801e120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e122:	2300      	movs	r3, #0
 801e124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e126:	2300      	movs	r3, #0
 801e128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e130:	78fa      	ldrb	r2, [r7, #3]
 801e132:	4611      	mov	r1, r2
 801e134:	4618      	mov	r0, r3
 801e136:	f7f4 ff3b 	bl	8012fb0 <HAL_PCD_EP_ClrStall>
 801e13a:	4603      	mov	r3, r0
 801e13c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e13e:	7bfb      	ldrb	r3, [r7, #15]
 801e140:	4618      	mov	r0, r3
 801e142:	f000 f8bf 	bl	801e2c4 <USBD_Get_USB_Status>
 801e146:	4603      	mov	r3, r0
 801e148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e14a:	7bbb      	ldrb	r3, [r7, #14]
}
 801e14c:	4618      	mov	r0, r3
 801e14e:	3710      	adds	r7, #16
 801e150:	46bd      	mov	sp, r7
 801e152:	bd80      	pop	{r7, pc}

0801e154 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e154:	b480      	push	{r7}
 801e156:	b085      	sub	sp, #20
 801e158:	af00      	add	r7, sp, #0
 801e15a:	6078      	str	r0, [r7, #4]
 801e15c:	460b      	mov	r3, r1
 801e15e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e166:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801e168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	da0b      	bge.n	801e188 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801e170:	78fb      	ldrb	r3, [r7, #3]
 801e172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e176:	68f9      	ldr	r1, [r7, #12]
 801e178:	4613      	mov	r3, r2
 801e17a:	00db      	lsls	r3, r3, #3
 801e17c:	4413      	add	r3, r2
 801e17e:	009b      	lsls	r3, r3, #2
 801e180:	440b      	add	r3, r1
 801e182:	333e      	adds	r3, #62	; 0x3e
 801e184:	781b      	ldrb	r3, [r3, #0]
 801e186:	e00b      	b.n	801e1a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801e188:	78fb      	ldrb	r3, [r7, #3]
 801e18a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e18e:	68f9      	ldr	r1, [r7, #12]
 801e190:	4613      	mov	r3, r2
 801e192:	00db      	lsls	r3, r3, #3
 801e194:	4413      	add	r3, r2
 801e196:	009b      	lsls	r3, r3, #2
 801e198:	440b      	add	r3, r1
 801e19a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801e19e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	3714      	adds	r7, #20
 801e1a4:	46bd      	mov	sp, r7
 801e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1aa:	4770      	bx	lr

0801e1ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e1ac:	b580      	push	{r7, lr}
 801e1ae:	b084      	sub	sp, #16
 801e1b0:	af00      	add	r7, sp, #0
 801e1b2:	6078      	str	r0, [r7, #4]
 801e1b4:	460b      	mov	r3, r1
 801e1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e1bc:	2300      	movs	r3, #0
 801e1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e1c6:	78fa      	ldrb	r2, [r7, #3]
 801e1c8:	4611      	mov	r1, r2
 801e1ca:	4618      	mov	r0, r3
 801e1cc:	f7f4 fd08 	bl	8012be0 <HAL_PCD_SetAddress>
 801e1d0:	4603      	mov	r3, r0
 801e1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e1d4:	7bfb      	ldrb	r3, [r7, #15]
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	f000 f874 	bl	801e2c4 <USBD_Get_USB_Status>
 801e1dc:	4603      	mov	r3, r0
 801e1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 801e1e2:	4618      	mov	r0, r3
 801e1e4:	3710      	adds	r7, #16
 801e1e6:	46bd      	mov	sp, r7
 801e1e8:	bd80      	pop	{r7, pc}

0801e1ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e1ea:	b580      	push	{r7, lr}
 801e1ec:	b086      	sub	sp, #24
 801e1ee:	af00      	add	r7, sp, #0
 801e1f0:	60f8      	str	r0, [r7, #12]
 801e1f2:	607a      	str	r2, [r7, #4]
 801e1f4:	603b      	str	r3, [r7, #0]
 801e1f6:	460b      	mov	r3, r1
 801e1f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e1fe:	2300      	movs	r3, #0
 801e200:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e208:	7af9      	ldrb	r1, [r7, #11]
 801e20a:	683b      	ldr	r3, [r7, #0]
 801e20c:	687a      	ldr	r2, [r7, #4]
 801e20e:	f7f4 fe21 	bl	8012e54 <HAL_PCD_EP_Transmit>
 801e212:	4603      	mov	r3, r0
 801e214:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e216:	7dfb      	ldrb	r3, [r7, #23]
 801e218:	4618      	mov	r0, r3
 801e21a:	f000 f853 	bl	801e2c4 <USBD_Get_USB_Status>
 801e21e:	4603      	mov	r3, r0
 801e220:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e222:	7dbb      	ldrb	r3, [r7, #22]
}
 801e224:	4618      	mov	r0, r3
 801e226:	3718      	adds	r7, #24
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd80      	pop	{r7, pc}

0801e22c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e22c:	b580      	push	{r7, lr}
 801e22e:	b086      	sub	sp, #24
 801e230:	af00      	add	r7, sp, #0
 801e232:	60f8      	str	r0, [r7, #12]
 801e234:	607a      	str	r2, [r7, #4]
 801e236:	603b      	str	r3, [r7, #0]
 801e238:	460b      	mov	r3, r1
 801e23a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e23c:	2300      	movs	r3, #0
 801e23e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e240:	2300      	movs	r3, #0
 801e242:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801e24a:	7af9      	ldrb	r1, [r7, #11]
 801e24c:	683b      	ldr	r3, [r7, #0]
 801e24e:	687a      	ldr	r2, [r7, #4]
 801e250:	f7f4 fd9d 	bl	8012d8e <HAL_PCD_EP_Receive>
 801e254:	4603      	mov	r3, r0
 801e256:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e258:	7dfb      	ldrb	r3, [r7, #23]
 801e25a:	4618      	mov	r0, r3
 801e25c:	f000 f832 	bl	801e2c4 <USBD_Get_USB_Status>
 801e260:	4603      	mov	r3, r0
 801e262:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e264:	7dbb      	ldrb	r3, [r7, #22]
}
 801e266:	4618      	mov	r0, r3
 801e268:	3718      	adds	r7, #24
 801e26a:	46bd      	mov	sp, r7
 801e26c:	bd80      	pop	{r7, pc}

0801e26e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e26e:	b580      	push	{r7, lr}
 801e270:	b082      	sub	sp, #8
 801e272:	af00      	add	r7, sp, #0
 801e274:	6078      	str	r0, [r7, #4]
 801e276:	460b      	mov	r3, r1
 801e278:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801e280:	78fa      	ldrb	r2, [r7, #3]
 801e282:	4611      	mov	r1, r2
 801e284:	4618      	mov	r0, r3
 801e286:	f7f4 fdcd 	bl	8012e24 <HAL_PCD_EP_GetRxCount>
 801e28a:	4603      	mov	r3, r0
}
 801e28c:	4618      	mov	r0, r3
 801e28e:	3708      	adds	r7, #8
 801e290:	46bd      	mov	sp, r7
 801e292:	bd80      	pop	{r7, pc}

0801e294 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801e294:	b480      	push	{r7}
 801e296:	b083      	sub	sp, #12
 801e298:	af00      	add	r7, sp, #0
 801e29a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801e29c:	4b03      	ldr	r3, [pc, #12]	; (801e2ac <USBD_static_malloc+0x18>)
}
 801e29e:	4618      	mov	r0, r3
 801e2a0:	370c      	adds	r7, #12
 801e2a2:	46bd      	mov	sp, r7
 801e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2a8:	4770      	bx	lr
 801e2aa:	bf00      	nop
 801e2ac:	2000f270 	.word	0x2000f270

0801e2b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801e2b0:	b480      	push	{r7}
 801e2b2:	b083      	sub	sp, #12
 801e2b4:	af00      	add	r7, sp, #0
 801e2b6:	6078      	str	r0, [r7, #4]

}
 801e2b8:	bf00      	nop
 801e2ba:	370c      	adds	r7, #12
 801e2bc:	46bd      	mov	sp, r7
 801e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c2:	4770      	bx	lr

0801e2c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e2c4:	b480      	push	{r7}
 801e2c6:	b085      	sub	sp, #20
 801e2c8:	af00      	add	r7, sp, #0
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e2d2:	79fb      	ldrb	r3, [r7, #7]
 801e2d4:	2b03      	cmp	r3, #3
 801e2d6:	d817      	bhi.n	801e308 <USBD_Get_USB_Status+0x44>
 801e2d8:	a201      	add	r2, pc, #4	; (adr r2, 801e2e0 <USBD_Get_USB_Status+0x1c>)
 801e2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e2de:	bf00      	nop
 801e2e0:	0801e2f1 	.word	0x0801e2f1
 801e2e4:	0801e2f7 	.word	0x0801e2f7
 801e2e8:	0801e2fd 	.word	0x0801e2fd
 801e2ec:	0801e303 	.word	0x0801e303
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	73fb      	strb	r3, [r7, #15]
    break;
 801e2f4:	e00b      	b.n	801e30e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e2f6:	2303      	movs	r3, #3
 801e2f8:	73fb      	strb	r3, [r7, #15]
    break;
 801e2fa:	e008      	b.n	801e30e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e2fc:	2301      	movs	r3, #1
 801e2fe:	73fb      	strb	r3, [r7, #15]
    break;
 801e300:	e005      	b.n	801e30e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e302:	2303      	movs	r3, #3
 801e304:	73fb      	strb	r3, [r7, #15]
    break;
 801e306:	e002      	b.n	801e30e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e308:	2303      	movs	r3, #3
 801e30a:	73fb      	strb	r3, [r7, #15]
    break;
 801e30c:	bf00      	nop
  }
  return usb_status;
 801e30e:	7bfb      	ldrb	r3, [r7, #15]
}
 801e310:	4618      	mov	r0, r3
 801e312:	3714      	adds	r7, #20
 801e314:	46bd      	mov	sp, r7
 801e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e31a:	4770      	bx	lr

0801e31c <std>:
 801e31c:	2300      	movs	r3, #0
 801e31e:	b510      	push	{r4, lr}
 801e320:	4604      	mov	r4, r0
 801e322:	e9c0 3300 	strd	r3, r3, [r0]
 801e326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e32a:	6083      	str	r3, [r0, #8]
 801e32c:	8181      	strh	r1, [r0, #12]
 801e32e:	6643      	str	r3, [r0, #100]	; 0x64
 801e330:	81c2      	strh	r2, [r0, #14]
 801e332:	6183      	str	r3, [r0, #24]
 801e334:	4619      	mov	r1, r3
 801e336:	2208      	movs	r2, #8
 801e338:	305c      	adds	r0, #92	; 0x5c
 801e33a:	f000 f91a 	bl	801e572 <memset>
 801e33e:	4b05      	ldr	r3, [pc, #20]	; (801e354 <std+0x38>)
 801e340:	6263      	str	r3, [r4, #36]	; 0x24
 801e342:	4b05      	ldr	r3, [pc, #20]	; (801e358 <std+0x3c>)
 801e344:	62a3      	str	r3, [r4, #40]	; 0x28
 801e346:	4b05      	ldr	r3, [pc, #20]	; (801e35c <std+0x40>)
 801e348:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e34a:	4b05      	ldr	r3, [pc, #20]	; (801e360 <std+0x44>)
 801e34c:	6224      	str	r4, [r4, #32]
 801e34e:	6323      	str	r3, [r4, #48]	; 0x30
 801e350:	bd10      	pop	{r4, pc}
 801e352:	bf00      	nop
 801e354:	0801f549 	.word	0x0801f549
 801e358:	0801f56b 	.word	0x0801f56b
 801e35c:	0801f5a3 	.word	0x0801f5a3
 801e360:	0801f5c7 	.word	0x0801f5c7

0801e364 <_cleanup_r>:
 801e364:	4901      	ldr	r1, [pc, #4]	; (801e36c <_cleanup_r+0x8>)
 801e366:	f000 b8af 	b.w	801e4c8 <_fwalk_reent>
 801e36a:	bf00      	nop
 801e36c:	0802117d 	.word	0x0802117d

0801e370 <__sfmoreglue>:
 801e370:	b570      	push	{r4, r5, r6, lr}
 801e372:	2268      	movs	r2, #104	; 0x68
 801e374:	1e4d      	subs	r5, r1, #1
 801e376:	4355      	muls	r5, r2
 801e378:	460e      	mov	r6, r1
 801e37a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e37e:	f000 f921 	bl	801e5c4 <_malloc_r>
 801e382:	4604      	mov	r4, r0
 801e384:	b140      	cbz	r0, 801e398 <__sfmoreglue+0x28>
 801e386:	2100      	movs	r1, #0
 801e388:	e9c0 1600 	strd	r1, r6, [r0]
 801e38c:	300c      	adds	r0, #12
 801e38e:	60a0      	str	r0, [r4, #8]
 801e390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e394:	f000 f8ed 	bl	801e572 <memset>
 801e398:	4620      	mov	r0, r4
 801e39a:	bd70      	pop	{r4, r5, r6, pc}

0801e39c <__sfp_lock_acquire>:
 801e39c:	4801      	ldr	r0, [pc, #4]	; (801e3a4 <__sfp_lock_acquire+0x8>)
 801e39e:	f000 b8d8 	b.w	801e552 <__retarget_lock_acquire_recursive>
 801e3a2:	bf00      	nop
 801e3a4:	2000f491 	.word	0x2000f491

0801e3a8 <__sfp_lock_release>:
 801e3a8:	4801      	ldr	r0, [pc, #4]	; (801e3b0 <__sfp_lock_release+0x8>)
 801e3aa:	f000 b8d3 	b.w	801e554 <__retarget_lock_release_recursive>
 801e3ae:	bf00      	nop
 801e3b0:	2000f491 	.word	0x2000f491

0801e3b4 <__sinit_lock_acquire>:
 801e3b4:	4801      	ldr	r0, [pc, #4]	; (801e3bc <__sinit_lock_acquire+0x8>)
 801e3b6:	f000 b8cc 	b.w	801e552 <__retarget_lock_acquire_recursive>
 801e3ba:	bf00      	nop
 801e3bc:	2000f492 	.word	0x2000f492

0801e3c0 <__sinit_lock_release>:
 801e3c0:	4801      	ldr	r0, [pc, #4]	; (801e3c8 <__sinit_lock_release+0x8>)
 801e3c2:	f000 b8c7 	b.w	801e554 <__retarget_lock_release_recursive>
 801e3c6:	bf00      	nop
 801e3c8:	2000f492 	.word	0x2000f492

0801e3cc <__sinit>:
 801e3cc:	b510      	push	{r4, lr}
 801e3ce:	4604      	mov	r4, r0
 801e3d0:	f7ff fff0 	bl	801e3b4 <__sinit_lock_acquire>
 801e3d4:	69a3      	ldr	r3, [r4, #24]
 801e3d6:	b11b      	cbz	r3, 801e3e0 <__sinit+0x14>
 801e3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3dc:	f7ff bff0 	b.w	801e3c0 <__sinit_lock_release>
 801e3e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e3e4:	6523      	str	r3, [r4, #80]	; 0x50
 801e3e6:	4b13      	ldr	r3, [pc, #76]	; (801e434 <__sinit+0x68>)
 801e3e8:	4a13      	ldr	r2, [pc, #76]	; (801e438 <__sinit+0x6c>)
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	62a2      	str	r2, [r4, #40]	; 0x28
 801e3ee:	42a3      	cmp	r3, r4
 801e3f0:	bf04      	itt	eq
 801e3f2:	2301      	moveq	r3, #1
 801e3f4:	61a3      	streq	r3, [r4, #24]
 801e3f6:	4620      	mov	r0, r4
 801e3f8:	f000 f820 	bl	801e43c <__sfp>
 801e3fc:	6060      	str	r0, [r4, #4]
 801e3fe:	4620      	mov	r0, r4
 801e400:	f000 f81c 	bl	801e43c <__sfp>
 801e404:	60a0      	str	r0, [r4, #8]
 801e406:	4620      	mov	r0, r4
 801e408:	f000 f818 	bl	801e43c <__sfp>
 801e40c:	2200      	movs	r2, #0
 801e40e:	60e0      	str	r0, [r4, #12]
 801e410:	2104      	movs	r1, #4
 801e412:	6860      	ldr	r0, [r4, #4]
 801e414:	f7ff ff82 	bl	801e31c <std>
 801e418:	68a0      	ldr	r0, [r4, #8]
 801e41a:	2201      	movs	r2, #1
 801e41c:	2109      	movs	r1, #9
 801e41e:	f7ff ff7d 	bl	801e31c <std>
 801e422:	68e0      	ldr	r0, [r4, #12]
 801e424:	2202      	movs	r2, #2
 801e426:	2112      	movs	r1, #18
 801e428:	f7ff ff78 	bl	801e31c <std>
 801e42c:	2301      	movs	r3, #1
 801e42e:	61a3      	str	r3, [r4, #24]
 801e430:	e7d2      	b.n	801e3d8 <__sinit+0xc>
 801e432:	bf00      	nop
 801e434:	08025f1c 	.word	0x08025f1c
 801e438:	0801e365 	.word	0x0801e365

0801e43c <__sfp>:
 801e43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e43e:	4607      	mov	r7, r0
 801e440:	f7ff ffac 	bl	801e39c <__sfp_lock_acquire>
 801e444:	4b1e      	ldr	r3, [pc, #120]	; (801e4c0 <__sfp+0x84>)
 801e446:	681e      	ldr	r6, [r3, #0]
 801e448:	69b3      	ldr	r3, [r6, #24]
 801e44a:	b913      	cbnz	r3, 801e452 <__sfp+0x16>
 801e44c:	4630      	mov	r0, r6
 801e44e:	f7ff ffbd 	bl	801e3cc <__sinit>
 801e452:	3648      	adds	r6, #72	; 0x48
 801e454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e458:	3b01      	subs	r3, #1
 801e45a:	d503      	bpl.n	801e464 <__sfp+0x28>
 801e45c:	6833      	ldr	r3, [r6, #0]
 801e45e:	b30b      	cbz	r3, 801e4a4 <__sfp+0x68>
 801e460:	6836      	ldr	r6, [r6, #0]
 801e462:	e7f7      	b.n	801e454 <__sfp+0x18>
 801e464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e468:	b9d5      	cbnz	r5, 801e4a0 <__sfp+0x64>
 801e46a:	4b16      	ldr	r3, [pc, #88]	; (801e4c4 <__sfp+0x88>)
 801e46c:	60e3      	str	r3, [r4, #12]
 801e46e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e472:	6665      	str	r5, [r4, #100]	; 0x64
 801e474:	f000 f86c 	bl	801e550 <__retarget_lock_init_recursive>
 801e478:	f7ff ff96 	bl	801e3a8 <__sfp_lock_release>
 801e47c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e484:	6025      	str	r5, [r4, #0]
 801e486:	61a5      	str	r5, [r4, #24]
 801e488:	2208      	movs	r2, #8
 801e48a:	4629      	mov	r1, r5
 801e48c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e490:	f000 f86f 	bl	801e572 <memset>
 801e494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e49c:	4620      	mov	r0, r4
 801e49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4a0:	3468      	adds	r4, #104	; 0x68
 801e4a2:	e7d9      	b.n	801e458 <__sfp+0x1c>
 801e4a4:	2104      	movs	r1, #4
 801e4a6:	4638      	mov	r0, r7
 801e4a8:	f7ff ff62 	bl	801e370 <__sfmoreglue>
 801e4ac:	4604      	mov	r4, r0
 801e4ae:	6030      	str	r0, [r6, #0]
 801e4b0:	2800      	cmp	r0, #0
 801e4b2:	d1d5      	bne.n	801e460 <__sfp+0x24>
 801e4b4:	f7ff ff78 	bl	801e3a8 <__sfp_lock_release>
 801e4b8:	230c      	movs	r3, #12
 801e4ba:	603b      	str	r3, [r7, #0]
 801e4bc:	e7ee      	b.n	801e49c <__sfp+0x60>
 801e4be:	bf00      	nop
 801e4c0:	08025f1c 	.word	0x08025f1c
 801e4c4:	ffff0001 	.word	0xffff0001

0801e4c8 <_fwalk_reent>:
 801e4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4cc:	4606      	mov	r6, r0
 801e4ce:	4688      	mov	r8, r1
 801e4d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e4d4:	2700      	movs	r7, #0
 801e4d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e4da:	f1b9 0901 	subs.w	r9, r9, #1
 801e4de:	d505      	bpl.n	801e4ec <_fwalk_reent+0x24>
 801e4e0:	6824      	ldr	r4, [r4, #0]
 801e4e2:	2c00      	cmp	r4, #0
 801e4e4:	d1f7      	bne.n	801e4d6 <_fwalk_reent+0xe>
 801e4e6:	4638      	mov	r0, r7
 801e4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e4ec:	89ab      	ldrh	r3, [r5, #12]
 801e4ee:	2b01      	cmp	r3, #1
 801e4f0:	d907      	bls.n	801e502 <_fwalk_reent+0x3a>
 801e4f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e4f6:	3301      	adds	r3, #1
 801e4f8:	d003      	beq.n	801e502 <_fwalk_reent+0x3a>
 801e4fa:	4629      	mov	r1, r5
 801e4fc:	4630      	mov	r0, r6
 801e4fe:	47c0      	blx	r8
 801e500:	4307      	orrs	r7, r0
 801e502:	3568      	adds	r5, #104	; 0x68
 801e504:	e7e9      	b.n	801e4da <_fwalk_reent+0x12>
	...

0801e508 <__libc_init_array>:
 801e508:	b570      	push	{r4, r5, r6, lr}
 801e50a:	4d0d      	ldr	r5, [pc, #52]	; (801e540 <__libc_init_array+0x38>)
 801e50c:	4c0d      	ldr	r4, [pc, #52]	; (801e544 <__libc_init_array+0x3c>)
 801e50e:	1b64      	subs	r4, r4, r5
 801e510:	10a4      	asrs	r4, r4, #2
 801e512:	2600      	movs	r6, #0
 801e514:	42a6      	cmp	r6, r4
 801e516:	d109      	bne.n	801e52c <__libc_init_array+0x24>
 801e518:	4d0b      	ldr	r5, [pc, #44]	; (801e548 <__libc_init_array+0x40>)
 801e51a:	4c0c      	ldr	r4, [pc, #48]	; (801e54c <__libc_init_array+0x44>)
 801e51c:	f007 f8c6 	bl	80256ac <_init>
 801e520:	1b64      	subs	r4, r4, r5
 801e522:	10a4      	asrs	r4, r4, #2
 801e524:	2600      	movs	r6, #0
 801e526:	42a6      	cmp	r6, r4
 801e528:	d105      	bne.n	801e536 <__libc_init_array+0x2e>
 801e52a:	bd70      	pop	{r4, r5, r6, pc}
 801e52c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e530:	4798      	blx	r3
 801e532:	3601      	adds	r6, #1
 801e534:	e7ee      	b.n	801e514 <__libc_init_array+0xc>
 801e536:	f855 3b04 	ldr.w	r3, [r5], #4
 801e53a:	4798      	blx	r3
 801e53c:	3601      	adds	r6, #1
 801e53e:	e7f2      	b.n	801e526 <__libc_init_array+0x1e>
 801e540:	080265e8 	.word	0x080265e8
 801e544:	080265e8 	.word	0x080265e8
 801e548:	080265e8 	.word	0x080265e8
 801e54c:	080265ec 	.word	0x080265ec

0801e550 <__retarget_lock_init_recursive>:
 801e550:	4770      	bx	lr

0801e552 <__retarget_lock_acquire_recursive>:
 801e552:	4770      	bx	lr

0801e554 <__retarget_lock_release_recursive>:
 801e554:	4770      	bx	lr

0801e556 <memcpy>:
 801e556:	440a      	add	r2, r1
 801e558:	4291      	cmp	r1, r2
 801e55a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801e55e:	d100      	bne.n	801e562 <memcpy+0xc>
 801e560:	4770      	bx	lr
 801e562:	b510      	push	{r4, lr}
 801e564:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e568:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e56c:	4291      	cmp	r1, r2
 801e56e:	d1f9      	bne.n	801e564 <memcpy+0xe>
 801e570:	bd10      	pop	{r4, pc}

0801e572 <memset>:
 801e572:	4402      	add	r2, r0
 801e574:	4603      	mov	r3, r0
 801e576:	4293      	cmp	r3, r2
 801e578:	d100      	bne.n	801e57c <memset+0xa>
 801e57a:	4770      	bx	lr
 801e57c:	f803 1b01 	strb.w	r1, [r3], #1
 801e580:	e7f9      	b.n	801e576 <memset+0x4>
	...

0801e584 <sbrk_aligned>:
 801e584:	b570      	push	{r4, r5, r6, lr}
 801e586:	4e0e      	ldr	r6, [pc, #56]	; (801e5c0 <sbrk_aligned+0x3c>)
 801e588:	460c      	mov	r4, r1
 801e58a:	6831      	ldr	r1, [r6, #0]
 801e58c:	4605      	mov	r5, r0
 801e58e:	b911      	cbnz	r1, 801e596 <sbrk_aligned+0x12>
 801e590:	f000 ff70 	bl	801f474 <_sbrk_r>
 801e594:	6030      	str	r0, [r6, #0]
 801e596:	4621      	mov	r1, r4
 801e598:	4628      	mov	r0, r5
 801e59a:	f000 ff6b 	bl	801f474 <_sbrk_r>
 801e59e:	1c43      	adds	r3, r0, #1
 801e5a0:	d00a      	beq.n	801e5b8 <sbrk_aligned+0x34>
 801e5a2:	1cc4      	adds	r4, r0, #3
 801e5a4:	f024 0403 	bic.w	r4, r4, #3
 801e5a8:	42a0      	cmp	r0, r4
 801e5aa:	d007      	beq.n	801e5bc <sbrk_aligned+0x38>
 801e5ac:	1a21      	subs	r1, r4, r0
 801e5ae:	4628      	mov	r0, r5
 801e5b0:	f000 ff60 	bl	801f474 <_sbrk_r>
 801e5b4:	3001      	adds	r0, #1
 801e5b6:	d101      	bne.n	801e5bc <sbrk_aligned+0x38>
 801e5b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e5bc:	4620      	mov	r0, r4
 801e5be:	bd70      	pop	{r4, r5, r6, pc}
 801e5c0:	2000f498 	.word	0x2000f498

0801e5c4 <_malloc_r>:
 801e5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5c8:	1ccd      	adds	r5, r1, #3
 801e5ca:	f025 0503 	bic.w	r5, r5, #3
 801e5ce:	3508      	adds	r5, #8
 801e5d0:	2d0c      	cmp	r5, #12
 801e5d2:	bf38      	it	cc
 801e5d4:	250c      	movcc	r5, #12
 801e5d6:	2d00      	cmp	r5, #0
 801e5d8:	4607      	mov	r7, r0
 801e5da:	db01      	blt.n	801e5e0 <_malloc_r+0x1c>
 801e5dc:	42a9      	cmp	r1, r5
 801e5de:	d905      	bls.n	801e5ec <_malloc_r+0x28>
 801e5e0:	230c      	movs	r3, #12
 801e5e2:	603b      	str	r3, [r7, #0]
 801e5e4:	2600      	movs	r6, #0
 801e5e6:	4630      	mov	r0, r6
 801e5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5ec:	4e2e      	ldr	r6, [pc, #184]	; (801e6a8 <_malloc_r+0xe4>)
 801e5ee:	f003 f9a1 	bl	8021934 <__malloc_lock>
 801e5f2:	6833      	ldr	r3, [r6, #0]
 801e5f4:	461c      	mov	r4, r3
 801e5f6:	bb34      	cbnz	r4, 801e646 <_malloc_r+0x82>
 801e5f8:	4629      	mov	r1, r5
 801e5fa:	4638      	mov	r0, r7
 801e5fc:	f7ff ffc2 	bl	801e584 <sbrk_aligned>
 801e600:	1c43      	adds	r3, r0, #1
 801e602:	4604      	mov	r4, r0
 801e604:	d14d      	bne.n	801e6a2 <_malloc_r+0xde>
 801e606:	6834      	ldr	r4, [r6, #0]
 801e608:	4626      	mov	r6, r4
 801e60a:	2e00      	cmp	r6, #0
 801e60c:	d140      	bne.n	801e690 <_malloc_r+0xcc>
 801e60e:	6823      	ldr	r3, [r4, #0]
 801e610:	4631      	mov	r1, r6
 801e612:	4638      	mov	r0, r7
 801e614:	eb04 0803 	add.w	r8, r4, r3
 801e618:	f000 ff2c 	bl	801f474 <_sbrk_r>
 801e61c:	4580      	cmp	r8, r0
 801e61e:	d13a      	bne.n	801e696 <_malloc_r+0xd2>
 801e620:	6821      	ldr	r1, [r4, #0]
 801e622:	3503      	adds	r5, #3
 801e624:	1a6d      	subs	r5, r5, r1
 801e626:	f025 0503 	bic.w	r5, r5, #3
 801e62a:	3508      	adds	r5, #8
 801e62c:	2d0c      	cmp	r5, #12
 801e62e:	bf38      	it	cc
 801e630:	250c      	movcc	r5, #12
 801e632:	4629      	mov	r1, r5
 801e634:	4638      	mov	r0, r7
 801e636:	f7ff ffa5 	bl	801e584 <sbrk_aligned>
 801e63a:	3001      	adds	r0, #1
 801e63c:	d02b      	beq.n	801e696 <_malloc_r+0xd2>
 801e63e:	6823      	ldr	r3, [r4, #0]
 801e640:	442b      	add	r3, r5
 801e642:	6023      	str	r3, [r4, #0]
 801e644:	e00e      	b.n	801e664 <_malloc_r+0xa0>
 801e646:	6822      	ldr	r2, [r4, #0]
 801e648:	1b52      	subs	r2, r2, r5
 801e64a:	d41e      	bmi.n	801e68a <_malloc_r+0xc6>
 801e64c:	2a0b      	cmp	r2, #11
 801e64e:	d916      	bls.n	801e67e <_malloc_r+0xba>
 801e650:	1961      	adds	r1, r4, r5
 801e652:	42a3      	cmp	r3, r4
 801e654:	6025      	str	r5, [r4, #0]
 801e656:	bf18      	it	ne
 801e658:	6059      	strne	r1, [r3, #4]
 801e65a:	6863      	ldr	r3, [r4, #4]
 801e65c:	bf08      	it	eq
 801e65e:	6031      	streq	r1, [r6, #0]
 801e660:	5162      	str	r2, [r4, r5]
 801e662:	604b      	str	r3, [r1, #4]
 801e664:	4638      	mov	r0, r7
 801e666:	f104 060b 	add.w	r6, r4, #11
 801e66a:	f003 f969 	bl	8021940 <__malloc_unlock>
 801e66e:	f026 0607 	bic.w	r6, r6, #7
 801e672:	1d23      	adds	r3, r4, #4
 801e674:	1af2      	subs	r2, r6, r3
 801e676:	d0b6      	beq.n	801e5e6 <_malloc_r+0x22>
 801e678:	1b9b      	subs	r3, r3, r6
 801e67a:	50a3      	str	r3, [r4, r2]
 801e67c:	e7b3      	b.n	801e5e6 <_malloc_r+0x22>
 801e67e:	6862      	ldr	r2, [r4, #4]
 801e680:	42a3      	cmp	r3, r4
 801e682:	bf0c      	ite	eq
 801e684:	6032      	streq	r2, [r6, #0]
 801e686:	605a      	strne	r2, [r3, #4]
 801e688:	e7ec      	b.n	801e664 <_malloc_r+0xa0>
 801e68a:	4623      	mov	r3, r4
 801e68c:	6864      	ldr	r4, [r4, #4]
 801e68e:	e7b2      	b.n	801e5f6 <_malloc_r+0x32>
 801e690:	4634      	mov	r4, r6
 801e692:	6876      	ldr	r6, [r6, #4]
 801e694:	e7b9      	b.n	801e60a <_malloc_r+0x46>
 801e696:	230c      	movs	r3, #12
 801e698:	603b      	str	r3, [r7, #0]
 801e69a:	4638      	mov	r0, r7
 801e69c:	f003 f950 	bl	8021940 <__malloc_unlock>
 801e6a0:	e7a1      	b.n	801e5e6 <_malloc_r+0x22>
 801e6a2:	6025      	str	r5, [r4, #0]
 801e6a4:	e7de      	b.n	801e664 <_malloc_r+0xa0>
 801e6a6:	bf00      	nop
 801e6a8:	2000f494 	.word	0x2000f494

0801e6ac <__cvt>:
 801e6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e6b0:	ec55 4b10 	vmov	r4, r5, d0
 801e6b4:	2d00      	cmp	r5, #0
 801e6b6:	460e      	mov	r6, r1
 801e6b8:	4619      	mov	r1, r3
 801e6ba:	462b      	mov	r3, r5
 801e6bc:	bfbb      	ittet	lt
 801e6be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e6c2:	461d      	movlt	r5, r3
 801e6c4:	2300      	movge	r3, #0
 801e6c6:	232d      	movlt	r3, #45	; 0x2d
 801e6c8:	700b      	strb	r3, [r1, #0]
 801e6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e6cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e6d0:	4691      	mov	r9, r2
 801e6d2:	f023 0820 	bic.w	r8, r3, #32
 801e6d6:	bfbc      	itt	lt
 801e6d8:	4622      	movlt	r2, r4
 801e6da:	4614      	movlt	r4, r2
 801e6dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e6e0:	d005      	beq.n	801e6ee <__cvt+0x42>
 801e6e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e6e6:	d100      	bne.n	801e6ea <__cvt+0x3e>
 801e6e8:	3601      	adds	r6, #1
 801e6ea:	2102      	movs	r1, #2
 801e6ec:	e000      	b.n	801e6f0 <__cvt+0x44>
 801e6ee:	2103      	movs	r1, #3
 801e6f0:	ab03      	add	r3, sp, #12
 801e6f2:	9301      	str	r3, [sp, #4]
 801e6f4:	ab02      	add	r3, sp, #8
 801e6f6:	9300      	str	r3, [sp, #0]
 801e6f8:	ec45 4b10 	vmov	d0, r4, r5
 801e6fc:	4653      	mov	r3, sl
 801e6fe:	4632      	mov	r2, r6
 801e700:	f001 fec2 	bl	8020488 <_dtoa_r>
 801e704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e708:	4607      	mov	r7, r0
 801e70a:	d102      	bne.n	801e712 <__cvt+0x66>
 801e70c:	f019 0f01 	tst.w	r9, #1
 801e710:	d022      	beq.n	801e758 <__cvt+0xac>
 801e712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e716:	eb07 0906 	add.w	r9, r7, r6
 801e71a:	d110      	bne.n	801e73e <__cvt+0x92>
 801e71c:	783b      	ldrb	r3, [r7, #0]
 801e71e:	2b30      	cmp	r3, #48	; 0x30
 801e720:	d10a      	bne.n	801e738 <__cvt+0x8c>
 801e722:	2200      	movs	r2, #0
 801e724:	2300      	movs	r3, #0
 801e726:	4620      	mov	r0, r4
 801e728:	4629      	mov	r1, r5
 801e72a:	f7e2 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 801e72e:	b918      	cbnz	r0, 801e738 <__cvt+0x8c>
 801e730:	f1c6 0601 	rsb	r6, r6, #1
 801e734:	f8ca 6000 	str.w	r6, [sl]
 801e738:	f8da 3000 	ldr.w	r3, [sl]
 801e73c:	4499      	add	r9, r3
 801e73e:	2200      	movs	r2, #0
 801e740:	2300      	movs	r3, #0
 801e742:	4620      	mov	r0, r4
 801e744:	4629      	mov	r1, r5
 801e746:	f7e2 f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 801e74a:	b108      	cbz	r0, 801e750 <__cvt+0xa4>
 801e74c:	f8cd 900c 	str.w	r9, [sp, #12]
 801e750:	2230      	movs	r2, #48	; 0x30
 801e752:	9b03      	ldr	r3, [sp, #12]
 801e754:	454b      	cmp	r3, r9
 801e756:	d307      	bcc.n	801e768 <__cvt+0xbc>
 801e758:	9b03      	ldr	r3, [sp, #12]
 801e75a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e75c:	1bdb      	subs	r3, r3, r7
 801e75e:	4638      	mov	r0, r7
 801e760:	6013      	str	r3, [r2, #0]
 801e762:	b004      	add	sp, #16
 801e764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e768:	1c59      	adds	r1, r3, #1
 801e76a:	9103      	str	r1, [sp, #12]
 801e76c:	701a      	strb	r2, [r3, #0]
 801e76e:	e7f0      	b.n	801e752 <__cvt+0xa6>

0801e770 <__exponent>:
 801e770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e772:	4603      	mov	r3, r0
 801e774:	2900      	cmp	r1, #0
 801e776:	bfb8      	it	lt
 801e778:	4249      	neglt	r1, r1
 801e77a:	f803 2b02 	strb.w	r2, [r3], #2
 801e77e:	bfb4      	ite	lt
 801e780:	222d      	movlt	r2, #45	; 0x2d
 801e782:	222b      	movge	r2, #43	; 0x2b
 801e784:	2909      	cmp	r1, #9
 801e786:	7042      	strb	r2, [r0, #1]
 801e788:	dd2a      	ble.n	801e7e0 <__exponent+0x70>
 801e78a:	f10d 0407 	add.w	r4, sp, #7
 801e78e:	46a4      	mov	ip, r4
 801e790:	270a      	movs	r7, #10
 801e792:	46a6      	mov	lr, r4
 801e794:	460a      	mov	r2, r1
 801e796:	fb91 f6f7 	sdiv	r6, r1, r7
 801e79a:	fb07 1516 	mls	r5, r7, r6, r1
 801e79e:	3530      	adds	r5, #48	; 0x30
 801e7a0:	2a63      	cmp	r2, #99	; 0x63
 801e7a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801e7a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e7aa:	4631      	mov	r1, r6
 801e7ac:	dcf1      	bgt.n	801e792 <__exponent+0x22>
 801e7ae:	3130      	adds	r1, #48	; 0x30
 801e7b0:	f1ae 0502 	sub.w	r5, lr, #2
 801e7b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e7b8:	1c44      	adds	r4, r0, #1
 801e7ba:	4629      	mov	r1, r5
 801e7bc:	4561      	cmp	r1, ip
 801e7be:	d30a      	bcc.n	801e7d6 <__exponent+0x66>
 801e7c0:	f10d 0209 	add.w	r2, sp, #9
 801e7c4:	eba2 020e 	sub.w	r2, r2, lr
 801e7c8:	4565      	cmp	r5, ip
 801e7ca:	bf88      	it	hi
 801e7cc:	2200      	movhi	r2, #0
 801e7ce:	4413      	add	r3, r2
 801e7d0:	1a18      	subs	r0, r3, r0
 801e7d2:	b003      	add	sp, #12
 801e7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e7da:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e7de:	e7ed      	b.n	801e7bc <__exponent+0x4c>
 801e7e0:	2330      	movs	r3, #48	; 0x30
 801e7e2:	3130      	adds	r1, #48	; 0x30
 801e7e4:	7083      	strb	r3, [r0, #2]
 801e7e6:	70c1      	strb	r1, [r0, #3]
 801e7e8:	1d03      	adds	r3, r0, #4
 801e7ea:	e7f1      	b.n	801e7d0 <__exponent+0x60>

0801e7ec <_printf_float>:
 801e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7f0:	ed2d 8b02 	vpush	{d8}
 801e7f4:	b08d      	sub	sp, #52	; 0x34
 801e7f6:	460c      	mov	r4, r1
 801e7f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e7fc:	4616      	mov	r6, r2
 801e7fe:	461f      	mov	r7, r3
 801e800:	4605      	mov	r5, r0
 801e802:	f003 f867 	bl	80218d4 <_localeconv_r>
 801e806:	f8d0 a000 	ldr.w	sl, [r0]
 801e80a:	4650      	mov	r0, sl
 801e80c:	f7e1 fce0 	bl	80001d0 <strlen>
 801e810:	2300      	movs	r3, #0
 801e812:	930a      	str	r3, [sp, #40]	; 0x28
 801e814:	6823      	ldr	r3, [r4, #0]
 801e816:	9305      	str	r3, [sp, #20]
 801e818:	f8d8 3000 	ldr.w	r3, [r8]
 801e81c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e820:	3307      	adds	r3, #7
 801e822:	f023 0307 	bic.w	r3, r3, #7
 801e826:	f103 0208 	add.w	r2, r3, #8
 801e82a:	f8c8 2000 	str.w	r2, [r8]
 801e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e832:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e836:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e83a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e83e:	9307      	str	r3, [sp, #28]
 801e840:	f8cd 8018 	str.w	r8, [sp, #24]
 801e844:	ee08 0a10 	vmov	s16, r0
 801e848:	4b9f      	ldr	r3, [pc, #636]	; (801eac8 <_printf_float+0x2dc>)
 801e84a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e84e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e852:	f7e2 f96b 	bl	8000b2c <__aeabi_dcmpun>
 801e856:	bb88      	cbnz	r0, 801e8bc <_printf_float+0xd0>
 801e858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e85c:	4b9a      	ldr	r3, [pc, #616]	; (801eac8 <_printf_float+0x2dc>)
 801e85e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e862:	f7e2 f945 	bl	8000af0 <__aeabi_dcmple>
 801e866:	bb48      	cbnz	r0, 801e8bc <_printf_float+0xd0>
 801e868:	2200      	movs	r2, #0
 801e86a:	2300      	movs	r3, #0
 801e86c:	4640      	mov	r0, r8
 801e86e:	4649      	mov	r1, r9
 801e870:	f7e2 f934 	bl	8000adc <__aeabi_dcmplt>
 801e874:	b110      	cbz	r0, 801e87c <_printf_float+0x90>
 801e876:	232d      	movs	r3, #45	; 0x2d
 801e878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e87c:	4b93      	ldr	r3, [pc, #588]	; (801eacc <_printf_float+0x2e0>)
 801e87e:	4894      	ldr	r0, [pc, #592]	; (801ead0 <_printf_float+0x2e4>)
 801e880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e884:	bf94      	ite	ls
 801e886:	4698      	movls	r8, r3
 801e888:	4680      	movhi	r8, r0
 801e88a:	2303      	movs	r3, #3
 801e88c:	6123      	str	r3, [r4, #16]
 801e88e:	9b05      	ldr	r3, [sp, #20]
 801e890:	f023 0204 	bic.w	r2, r3, #4
 801e894:	6022      	str	r2, [r4, #0]
 801e896:	f04f 0900 	mov.w	r9, #0
 801e89a:	9700      	str	r7, [sp, #0]
 801e89c:	4633      	mov	r3, r6
 801e89e:	aa0b      	add	r2, sp, #44	; 0x2c
 801e8a0:	4621      	mov	r1, r4
 801e8a2:	4628      	mov	r0, r5
 801e8a4:	f000 f9d8 	bl	801ec58 <_printf_common>
 801e8a8:	3001      	adds	r0, #1
 801e8aa:	f040 8090 	bne.w	801e9ce <_printf_float+0x1e2>
 801e8ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e8b2:	b00d      	add	sp, #52	; 0x34
 801e8b4:	ecbd 8b02 	vpop	{d8}
 801e8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8bc:	4642      	mov	r2, r8
 801e8be:	464b      	mov	r3, r9
 801e8c0:	4640      	mov	r0, r8
 801e8c2:	4649      	mov	r1, r9
 801e8c4:	f7e2 f932 	bl	8000b2c <__aeabi_dcmpun>
 801e8c8:	b140      	cbz	r0, 801e8dc <_printf_float+0xf0>
 801e8ca:	464b      	mov	r3, r9
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	bfbc      	itt	lt
 801e8d0:	232d      	movlt	r3, #45	; 0x2d
 801e8d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e8d6:	487f      	ldr	r0, [pc, #508]	; (801ead4 <_printf_float+0x2e8>)
 801e8d8:	4b7f      	ldr	r3, [pc, #508]	; (801ead8 <_printf_float+0x2ec>)
 801e8da:	e7d1      	b.n	801e880 <_printf_float+0x94>
 801e8dc:	6863      	ldr	r3, [r4, #4]
 801e8de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e8e2:	9206      	str	r2, [sp, #24]
 801e8e4:	1c5a      	adds	r2, r3, #1
 801e8e6:	d13f      	bne.n	801e968 <_printf_float+0x17c>
 801e8e8:	2306      	movs	r3, #6
 801e8ea:	6063      	str	r3, [r4, #4]
 801e8ec:	9b05      	ldr	r3, [sp, #20]
 801e8ee:	6861      	ldr	r1, [r4, #4]
 801e8f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e8f4:	2300      	movs	r3, #0
 801e8f6:	9303      	str	r3, [sp, #12]
 801e8f8:	ab0a      	add	r3, sp, #40	; 0x28
 801e8fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e8fe:	ab09      	add	r3, sp, #36	; 0x24
 801e900:	ec49 8b10 	vmov	d0, r8, r9
 801e904:	9300      	str	r3, [sp, #0]
 801e906:	6022      	str	r2, [r4, #0]
 801e908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e90c:	4628      	mov	r0, r5
 801e90e:	f7ff fecd 	bl	801e6ac <__cvt>
 801e912:	9b06      	ldr	r3, [sp, #24]
 801e914:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e916:	2b47      	cmp	r3, #71	; 0x47
 801e918:	4680      	mov	r8, r0
 801e91a:	d108      	bne.n	801e92e <_printf_float+0x142>
 801e91c:	1cc8      	adds	r0, r1, #3
 801e91e:	db02      	blt.n	801e926 <_printf_float+0x13a>
 801e920:	6863      	ldr	r3, [r4, #4]
 801e922:	4299      	cmp	r1, r3
 801e924:	dd41      	ble.n	801e9aa <_printf_float+0x1be>
 801e926:	f1ab 0b02 	sub.w	fp, fp, #2
 801e92a:	fa5f fb8b 	uxtb.w	fp, fp
 801e92e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e932:	d820      	bhi.n	801e976 <_printf_float+0x18a>
 801e934:	3901      	subs	r1, #1
 801e936:	465a      	mov	r2, fp
 801e938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e93c:	9109      	str	r1, [sp, #36]	; 0x24
 801e93e:	f7ff ff17 	bl	801e770 <__exponent>
 801e942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e944:	1813      	adds	r3, r2, r0
 801e946:	2a01      	cmp	r2, #1
 801e948:	4681      	mov	r9, r0
 801e94a:	6123      	str	r3, [r4, #16]
 801e94c:	dc02      	bgt.n	801e954 <_printf_float+0x168>
 801e94e:	6822      	ldr	r2, [r4, #0]
 801e950:	07d2      	lsls	r2, r2, #31
 801e952:	d501      	bpl.n	801e958 <_printf_float+0x16c>
 801e954:	3301      	adds	r3, #1
 801e956:	6123      	str	r3, [r4, #16]
 801e958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d09c      	beq.n	801e89a <_printf_float+0xae>
 801e960:	232d      	movs	r3, #45	; 0x2d
 801e962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e966:	e798      	b.n	801e89a <_printf_float+0xae>
 801e968:	9a06      	ldr	r2, [sp, #24]
 801e96a:	2a47      	cmp	r2, #71	; 0x47
 801e96c:	d1be      	bne.n	801e8ec <_printf_float+0x100>
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d1bc      	bne.n	801e8ec <_printf_float+0x100>
 801e972:	2301      	movs	r3, #1
 801e974:	e7b9      	b.n	801e8ea <_printf_float+0xfe>
 801e976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e97a:	d118      	bne.n	801e9ae <_printf_float+0x1c2>
 801e97c:	2900      	cmp	r1, #0
 801e97e:	6863      	ldr	r3, [r4, #4]
 801e980:	dd0b      	ble.n	801e99a <_printf_float+0x1ae>
 801e982:	6121      	str	r1, [r4, #16]
 801e984:	b913      	cbnz	r3, 801e98c <_printf_float+0x1a0>
 801e986:	6822      	ldr	r2, [r4, #0]
 801e988:	07d0      	lsls	r0, r2, #31
 801e98a:	d502      	bpl.n	801e992 <_printf_float+0x1a6>
 801e98c:	3301      	adds	r3, #1
 801e98e:	440b      	add	r3, r1
 801e990:	6123      	str	r3, [r4, #16]
 801e992:	65a1      	str	r1, [r4, #88]	; 0x58
 801e994:	f04f 0900 	mov.w	r9, #0
 801e998:	e7de      	b.n	801e958 <_printf_float+0x16c>
 801e99a:	b913      	cbnz	r3, 801e9a2 <_printf_float+0x1b6>
 801e99c:	6822      	ldr	r2, [r4, #0]
 801e99e:	07d2      	lsls	r2, r2, #31
 801e9a0:	d501      	bpl.n	801e9a6 <_printf_float+0x1ba>
 801e9a2:	3302      	adds	r3, #2
 801e9a4:	e7f4      	b.n	801e990 <_printf_float+0x1a4>
 801e9a6:	2301      	movs	r3, #1
 801e9a8:	e7f2      	b.n	801e990 <_printf_float+0x1a4>
 801e9aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9b0:	4299      	cmp	r1, r3
 801e9b2:	db05      	blt.n	801e9c0 <_printf_float+0x1d4>
 801e9b4:	6823      	ldr	r3, [r4, #0]
 801e9b6:	6121      	str	r1, [r4, #16]
 801e9b8:	07d8      	lsls	r0, r3, #31
 801e9ba:	d5ea      	bpl.n	801e992 <_printf_float+0x1a6>
 801e9bc:	1c4b      	adds	r3, r1, #1
 801e9be:	e7e7      	b.n	801e990 <_printf_float+0x1a4>
 801e9c0:	2900      	cmp	r1, #0
 801e9c2:	bfd4      	ite	le
 801e9c4:	f1c1 0202 	rsble	r2, r1, #2
 801e9c8:	2201      	movgt	r2, #1
 801e9ca:	4413      	add	r3, r2
 801e9cc:	e7e0      	b.n	801e990 <_printf_float+0x1a4>
 801e9ce:	6823      	ldr	r3, [r4, #0]
 801e9d0:	055a      	lsls	r2, r3, #21
 801e9d2:	d407      	bmi.n	801e9e4 <_printf_float+0x1f8>
 801e9d4:	6923      	ldr	r3, [r4, #16]
 801e9d6:	4642      	mov	r2, r8
 801e9d8:	4631      	mov	r1, r6
 801e9da:	4628      	mov	r0, r5
 801e9dc:	47b8      	blx	r7
 801e9de:	3001      	adds	r0, #1
 801e9e0:	d12c      	bne.n	801ea3c <_printf_float+0x250>
 801e9e2:	e764      	b.n	801e8ae <_printf_float+0xc2>
 801e9e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e9e8:	f240 80e0 	bls.w	801ebac <_printf_float+0x3c0>
 801e9ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e9f0:	2200      	movs	r2, #0
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	f7e2 f868 	bl	8000ac8 <__aeabi_dcmpeq>
 801e9f8:	2800      	cmp	r0, #0
 801e9fa:	d034      	beq.n	801ea66 <_printf_float+0x27a>
 801e9fc:	4a37      	ldr	r2, [pc, #220]	; (801eadc <_printf_float+0x2f0>)
 801e9fe:	2301      	movs	r3, #1
 801ea00:	4631      	mov	r1, r6
 801ea02:	4628      	mov	r0, r5
 801ea04:	47b8      	blx	r7
 801ea06:	3001      	adds	r0, #1
 801ea08:	f43f af51 	beq.w	801e8ae <_printf_float+0xc2>
 801ea0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ea10:	429a      	cmp	r2, r3
 801ea12:	db02      	blt.n	801ea1a <_printf_float+0x22e>
 801ea14:	6823      	ldr	r3, [r4, #0]
 801ea16:	07d8      	lsls	r0, r3, #31
 801ea18:	d510      	bpl.n	801ea3c <_printf_float+0x250>
 801ea1a:	ee18 3a10 	vmov	r3, s16
 801ea1e:	4652      	mov	r2, sl
 801ea20:	4631      	mov	r1, r6
 801ea22:	4628      	mov	r0, r5
 801ea24:	47b8      	blx	r7
 801ea26:	3001      	adds	r0, #1
 801ea28:	f43f af41 	beq.w	801e8ae <_printf_float+0xc2>
 801ea2c:	f04f 0800 	mov.w	r8, #0
 801ea30:	f104 091a 	add.w	r9, r4, #26
 801ea34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea36:	3b01      	subs	r3, #1
 801ea38:	4543      	cmp	r3, r8
 801ea3a:	dc09      	bgt.n	801ea50 <_printf_float+0x264>
 801ea3c:	6823      	ldr	r3, [r4, #0]
 801ea3e:	079b      	lsls	r3, r3, #30
 801ea40:	f100 8105 	bmi.w	801ec4e <_printf_float+0x462>
 801ea44:	68e0      	ldr	r0, [r4, #12]
 801ea46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea48:	4298      	cmp	r0, r3
 801ea4a:	bfb8      	it	lt
 801ea4c:	4618      	movlt	r0, r3
 801ea4e:	e730      	b.n	801e8b2 <_printf_float+0xc6>
 801ea50:	2301      	movs	r3, #1
 801ea52:	464a      	mov	r2, r9
 801ea54:	4631      	mov	r1, r6
 801ea56:	4628      	mov	r0, r5
 801ea58:	47b8      	blx	r7
 801ea5a:	3001      	adds	r0, #1
 801ea5c:	f43f af27 	beq.w	801e8ae <_printf_float+0xc2>
 801ea60:	f108 0801 	add.w	r8, r8, #1
 801ea64:	e7e6      	b.n	801ea34 <_printf_float+0x248>
 801ea66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	dc39      	bgt.n	801eae0 <_printf_float+0x2f4>
 801ea6c:	4a1b      	ldr	r2, [pc, #108]	; (801eadc <_printf_float+0x2f0>)
 801ea6e:	2301      	movs	r3, #1
 801ea70:	4631      	mov	r1, r6
 801ea72:	4628      	mov	r0, r5
 801ea74:	47b8      	blx	r7
 801ea76:	3001      	adds	r0, #1
 801ea78:	f43f af19 	beq.w	801e8ae <_printf_float+0xc2>
 801ea7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ea80:	4313      	orrs	r3, r2
 801ea82:	d102      	bne.n	801ea8a <_printf_float+0x29e>
 801ea84:	6823      	ldr	r3, [r4, #0]
 801ea86:	07d9      	lsls	r1, r3, #31
 801ea88:	d5d8      	bpl.n	801ea3c <_printf_float+0x250>
 801ea8a:	ee18 3a10 	vmov	r3, s16
 801ea8e:	4652      	mov	r2, sl
 801ea90:	4631      	mov	r1, r6
 801ea92:	4628      	mov	r0, r5
 801ea94:	47b8      	blx	r7
 801ea96:	3001      	adds	r0, #1
 801ea98:	f43f af09 	beq.w	801e8ae <_printf_float+0xc2>
 801ea9c:	f04f 0900 	mov.w	r9, #0
 801eaa0:	f104 0a1a 	add.w	sl, r4, #26
 801eaa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaa6:	425b      	negs	r3, r3
 801eaa8:	454b      	cmp	r3, r9
 801eaaa:	dc01      	bgt.n	801eab0 <_printf_float+0x2c4>
 801eaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eaae:	e792      	b.n	801e9d6 <_printf_float+0x1ea>
 801eab0:	2301      	movs	r3, #1
 801eab2:	4652      	mov	r2, sl
 801eab4:	4631      	mov	r1, r6
 801eab6:	4628      	mov	r0, r5
 801eab8:	47b8      	blx	r7
 801eaba:	3001      	adds	r0, #1
 801eabc:	f43f aef7 	beq.w	801e8ae <_printf_float+0xc2>
 801eac0:	f109 0901 	add.w	r9, r9, #1
 801eac4:	e7ee      	b.n	801eaa4 <_printf_float+0x2b8>
 801eac6:	bf00      	nop
 801eac8:	7fefffff 	.word	0x7fefffff
 801eacc:	08025f20 	.word	0x08025f20
 801ead0:	08025f24 	.word	0x08025f24
 801ead4:	08025f2c 	.word	0x08025f2c
 801ead8:	08025f28 	.word	0x08025f28
 801eadc:	08025f30 	.word	0x08025f30
 801eae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eae4:	429a      	cmp	r2, r3
 801eae6:	bfa8      	it	ge
 801eae8:	461a      	movge	r2, r3
 801eaea:	2a00      	cmp	r2, #0
 801eaec:	4691      	mov	r9, r2
 801eaee:	dc37      	bgt.n	801eb60 <_printf_float+0x374>
 801eaf0:	f04f 0b00 	mov.w	fp, #0
 801eaf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801eaf8:	f104 021a 	add.w	r2, r4, #26
 801eafc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801eafe:	9305      	str	r3, [sp, #20]
 801eb00:	eba3 0309 	sub.w	r3, r3, r9
 801eb04:	455b      	cmp	r3, fp
 801eb06:	dc33      	bgt.n	801eb70 <_printf_float+0x384>
 801eb08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801eb0c:	429a      	cmp	r2, r3
 801eb0e:	db3b      	blt.n	801eb88 <_printf_float+0x39c>
 801eb10:	6823      	ldr	r3, [r4, #0]
 801eb12:	07da      	lsls	r2, r3, #31
 801eb14:	d438      	bmi.n	801eb88 <_printf_float+0x39c>
 801eb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb18:	9a05      	ldr	r2, [sp, #20]
 801eb1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eb1c:	1a9a      	subs	r2, r3, r2
 801eb1e:	eba3 0901 	sub.w	r9, r3, r1
 801eb22:	4591      	cmp	r9, r2
 801eb24:	bfa8      	it	ge
 801eb26:	4691      	movge	r9, r2
 801eb28:	f1b9 0f00 	cmp.w	r9, #0
 801eb2c:	dc35      	bgt.n	801eb9a <_printf_float+0x3ae>
 801eb2e:	f04f 0800 	mov.w	r8, #0
 801eb32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801eb36:	f104 0a1a 	add.w	sl, r4, #26
 801eb3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801eb3e:	1a9b      	subs	r3, r3, r2
 801eb40:	eba3 0309 	sub.w	r3, r3, r9
 801eb44:	4543      	cmp	r3, r8
 801eb46:	f77f af79 	ble.w	801ea3c <_printf_float+0x250>
 801eb4a:	2301      	movs	r3, #1
 801eb4c:	4652      	mov	r2, sl
 801eb4e:	4631      	mov	r1, r6
 801eb50:	4628      	mov	r0, r5
 801eb52:	47b8      	blx	r7
 801eb54:	3001      	adds	r0, #1
 801eb56:	f43f aeaa 	beq.w	801e8ae <_printf_float+0xc2>
 801eb5a:	f108 0801 	add.w	r8, r8, #1
 801eb5e:	e7ec      	b.n	801eb3a <_printf_float+0x34e>
 801eb60:	4613      	mov	r3, r2
 801eb62:	4631      	mov	r1, r6
 801eb64:	4642      	mov	r2, r8
 801eb66:	4628      	mov	r0, r5
 801eb68:	47b8      	blx	r7
 801eb6a:	3001      	adds	r0, #1
 801eb6c:	d1c0      	bne.n	801eaf0 <_printf_float+0x304>
 801eb6e:	e69e      	b.n	801e8ae <_printf_float+0xc2>
 801eb70:	2301      	movs	r3, #1
 801eb72:	4631      	mov	r1, r6
 801eb74:	4628      	mov	r0, r5
 801eb76:	9205      	str	r2, [sp, #20]
 801eb78:	47b8      	blx	r7
 801eb7a:	3001      	adds	r0, #1
 801eb7c:	f43f ae97 	beq.w	801e8ae <_printf_float+0xc2>
 801eb80:	9a05      	ldr	r2, [sp, #20]
 801eb82:	f10b 0b01 	add.w	fp, fp, #1
 801eb86:	e7b9      	b.n	801eafc <_printf_float+0x310>
 801eb88:	ee18 3a10 	vmov	r3, s16
 801eb8c:	4652      	mov	r2, sl
 801eb8e:	4631      	mov	r1, r6
 801eb90:	4628      	mov	r0, r5
 801eb92:	47b8      	blx	r7
 801eb94:	3001      	adds	r0, #1
 801eb96:	d1be      	bne.n	801eb16 <_printf_float+0x32a>
 801eb98:	e689      	b.n	801e8ae <_printf_float+0xc2>
 801eb9a:	9a05      	ldr	r2, [sp, #20]
 801eb9c:	464b      	mov	r3, r9
 801eb9e:	4442      	add	r2, r8
 801eba0:	4631      	mov	r1, r6
 801eba2:	4628      	mov	r0, r5
 801eba4:	47b8      	blx	r7
 801eba6:	3001      	adds	r0, #1
 801eba8:	d1c1      	bne.n	801eb2e <_printf_float+0x342>
 801ebaa:	e680      	b.n	801e8ae <_printf_float+0xc2>
 801ebac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ebae:	2a01      	cmp	r2, #1
 801ebb0:	dc01      	bgt.n	801ebb6 <_printf_float+0x3ca>
 801ebb2:	07db      	lsls	r3, r3, #31
 801ebb4:	d538      	bpl.n	801ec28 <_printf_float+0x43c>
 801ebb6:	2301      	movs	r3, #1
 801ebb8:	4642      	mov	r2, r8
 801ebba:	4631      	mov	r1, r6
 801ebbc:	4628      	mov	r0, r5
 801ebbe:	47b8      	blx	r7
 801ebc0:	3001      	adds	r0, #1
 801ebc2:	f43f ae74 	beq.w	801e8ae <_printf_float+0xc2>
 801ebc6:	ee18 3a10 	vmov	r3, s16
 801ebca:	4652      	mov	r2, sl
 801ebcc:	4631      	mov	r1, r6
 801ebce:	4628      	mov	r0, r5
 801ebd0:	47b8      	blx	r7
 801ebd2:	3001      	adds	r0, #1
 801ebd4:	f43f ae6b 	beq.w	801e8ae <_printf_float+0xc2>
 801ebd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ebdc:	2200      	movs	r2, #0
 801ebde:	2300      	movs	r3, #0
 801ebe0:	f7e1 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 801ebe4:	b9d8      	cbnz	r0, 801ec1e <_printf_float+0x432>
 801ebe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebe8:	f108 0201 	add.w	r2, r8, #1
 801ebec:	3b01      	subs	r3, #1
 801ebee:	4631      	mov	r1, r6
 801ebf0:	4628      	mov	r0, r5
 801ebf2:	47b8      	blx	r7
 801ebf4:	3001      	adds	r0, #1
 801ebf6:	d10e      	bne.n	801ec16 <_printf_float+0x42a>
 801ebf8:	e659      	b.n	801e8ae <_printf_float+0xc2>
 801ebfa:	2301      	movs	r3, #1
 801ebfc:	4652      	mov	r2, sl
 801ebfe:	4631      	mov	r1, r6
 801ec00:	4628      	mov	r0, r5
 801ec02:	47b8      	blx	r7
 801ec04:	3001      	adds	r0, #1
 801ec06:	f43f ae52 	beq.w	801e8ae <_printf_float+0xc2>
 801ec0a:	f108 0801 	add.w	r8, r8, #1
 801ec0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec10:	3b01      	subs	r3, #1
 801ec12:	4543      	cmp	r3, r8
 801ec14:	dcf1      	bgt.n	801ebfa <_printf_float+0x40e>
 801ec16:	464b      	mov	r3, r9
 801ec18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ec1c:	e6dc      	b.n	801e9d8 <_printf_float+0x1ec>
 801ec1e:	f04f 0800 	mov.w	r8, #0
 801ec22:	f104 0a1a 	add.w	sl, r4, #26
 801ec26:	e7f2      	b.n	801ec0e <_printf_float+0x422>
 801ec28:	2301      	movs	r3, #1
 801ec2a:	4642      	mov	r2, r8
 801ec2c:	e7df      	b.n	801ebee <_printf_float+0x402>
 801ec2e:	2301      	movs	r3, #1
 801ec30:	464a      	mov	r2, r9
 801ec32:	4631      	mov	r1, r6
 801ec34:	4628      	mov	r0, r5
 801ec36:	47b8      	blx	r7
 801ec38:	3001      	adds	r0, #1
 801ec3a:	f43f ae38 	beq.w	801e8ae <_printf_float+0xc2>
 801ec3e:	f108 0801 	add.w	r8, r8, #1
 801ec42:	68e3      	ldr	r3, [r4, #12]
 801ec44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ec46:	1a5b      	subs	r3, r3, r1
 801ec48:	4543      	cmp	r3, r8
 801ec4a:	dcf0      	bgt.n	801ec2e <_printf_float+0x442>
 801ec4c:	e6fa      	b.n	801ea44 <_printf_float+0x258>
 801ec4e:	f04f 0800 	mov.w	r8, #0
 801ec52:	f104 0919 	add.w	r9, r4, #25
 801ec56:	e7f4      	b.n	801ec42 <_printf_float+0x456>

0801ec58 <_printf_common>:
 801ec58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec5c:	4616      	mov	r6, r2
 801ec5e:	4699      	mov	r9, r3
 801ec60:	688a      	ldr	r2, [r1, #8]
 801ec62:	690b      	ldr	r3, [r1, #16]
 801ec64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ec68:	4293      	cmp	r3, r2
 801ec6a:	bfb8      	it	lt
 801ec6c:	4613      	movlt	r3, r2
 801ec6e:	6033      	str	r3, [r6, #0]
 801ec70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ec74:	4607      	mov	r7, r0
 801ec76:	460c      	mov	r4, r1
 801ec78:	b10a      	cbz	r2, 801ec7e <_printf_common+0x26>
 801ec7a:	3301      	adds	r3, #1
 801ec7c:	6033      	str	r3, [r6, #0]
 801ec7e:	6823      	ldr	r3, [r4, #0]
 801ec80:	0699      	lsls	r1, r3, #26
 801ec82:	bf42      	ittt	mi
 801ec84:	6833      	ldrmi	r3, [r6, #0]
 801ec86:	3302      	addmi	r3, #2
 801ec88:	6033      	strmi	r3, [r6, #0]
 801ec8a:	6825      	ldr	r5, [r4, #0]
 801ec8c:	f015 0506 	ands.w	r5, r5, #6
 801ec90:	d106      	bne.n	801eca0 <_printf_common+0x48>
 801ec92:	f104 0a19 	add.w	sl, r4, #25
 801ec96:	68e3      	ldr	r3, [r4, #12]
 801ec98:	6832      	ldr	r2, [r6, #0]
 801ec9a:	1a9b      	subs	r3, r3, r2
 801ec9c:	42ab      	cmp	r3, r5
 801ec9e:	dc26      	bgt.n	801ecee <_printf_common+0x96>
 801eca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801eca4:	1e13      	subs	r3, r2, #0
 801eca6:	6822      	ldr	r2, [r4, #0]
 801eca8:	bf18      	it	ne
 801ecaa:	2301      	movne	r3, #1
 801ecac:	0692      	lsls	r2, r2, #26
 801ecae:	d42b      	bmi.n	801ed08 <_printf_common+0xb0>
 801ecb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ecb4:	4649      	mov	r1, r9
 801ecb6:	4638      	mov	r0, r7
 801ecb8:	47c0      	blx	r8
 801ecba:	3001      	adds	r0, #1
 801ecbc:	d01e      	beq.n	801ecfc <_printf_common+0xa4>
 801ecbe:	6823      	ldr	r3, [r4, #0]
 801ecc0:	68e5      	ldr	r5, [r4, #12]
 801ecc2:	6832      	ldr	r2, [r6, #0]
 801ecc4:	f003 0306 	and.w	r3, r3, #6
 801ecc8:	2b04      	cmp	r3, #4
 801ecca:	bf08      	it	eq
 801eccc:	1aad      	subeq	r5, r5, r2
 801ecce:	68a3      	ldr	r3, [r4, #8]
 801ecd0:	6922      	ldr	r2, [r4, #16]
 801ecd2:	bf0c      	ite	eq
 801ecd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ecd8:	2500      	movne	r5, #0
 801ecda:	4293      	cmp	r3, r2
 801ecdc:	bfc4      	itt	gt
 801ecde:	1a9b      	subgt	r3, r3, r2
 801ece0:	18ed      	addgt	r5, r5, r3
 801ece2:	2600      	movs	r6, #0
 801ece4:	341a      	adds	r4, #26
 801ece6:	42b5      	cmp	r5, r6
 801ece8:	d11a      	bne.n	801ed20 <_printf_common+0xc8>
 801ecea:	2000      	movs	r0, #0
 801ecec:	e008      	b.n	801ed00 <_printf_common+0xa8>
 801ecee:	2301      	movs	r3, #1
 801ecf0:	4652      	mov	r2, sl
 801ecf2:	4649      	mov	r1, r9
 801ecf4:	4638      	mov	r0, r7
 801ecf6:	47c0      	blx	r8
 801ecf8:	3001      	adds	r0, #1
 801ecfa:	d103      	bne.n	801ed04 <_printf_common+0xac>
 801ecfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ed00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed04:	3501      	adds	r5, #1
 801ed06:	e7c6      	b.n	801ec96 <_printf_common+0x3e>
 801ed08:	18e1      	adds	r1, r4, r3
 801ed0a:	1c5a      	adds	r2, r3, #1
 801ed0c:	2030      	movs	r0, #48	; 0x30
 801ed0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ed12:	4422      	add	r2, r4
 801ed14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ed18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ed1c:	3302      	adds	r3, #2
 801ed1e:	e7c7      	b.n	801ecb0 <_printf_common+0x58>
 801ed20:	2301      	movs	r3, #1
 801ed22:	4622      	mov	r2, r4
 801ed24:	4649      	mov	r1, r9
 801ed26:	4638      	mov	r0, r7
 801ed28:	47c0      	blx	r8
 801ed2a:	3001      	adds	r0, #1
 801ed2c:	d0e6      	beq.n	801ecfc <_printf_common+0xa4>
 801ed2e:	3601      	adds	r6, #1
 801ed30:	e7d9      	b.n	801ece6 <_printf_common+0x8e>
	...

0801ed34 <_printf_i>:
 801ed34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ed38:	7e0f      	ldrb	r7, [r1, #24]
 801ed3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ed3c:	2f78      	cmp	r7, #120	; 0x78
 801ed3e:	4691      	mov	r9, r2
 801ed40:	4680      	mov	r8, r0
 801ed42:	460c      	mov	r4, r1
 801ed44:	469a      	mov	sl, r3
 801ed46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ed4a:	d807      	bhi.n	801ed5c <_printf_i+0x28>
 801ed4c:	2f62      	cmp	r7, #98	; 0x62
 801ed4e:	d80a      	bhi.n	801ed66 <_printf_i+0x32>
 801ed50:	2f00      	cmp	r7, #0
 801ed52:	f000 80d8 	beq.w	801ef06 <_printf_i+0x1d2>
 801ed56:	2f58      	cmp	r7, #88	; 0x58
 801ed58:	f000 80a3 	beq.w	801eea2 <_printf_i+0x16e>
 801ed5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ed60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ed64:	e03a      	b.n	801eddc <_printf_i+0xa8>
 801ed66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ed6a:	2b15      	cmp	r3, #21
 801ed6c:	d8f6      	bhi.n	801ed5c <_printf_i+0x28>
 801ed6e:	a101      	add	r1, pc, #4	; (adr r1, 801ed74 <_printf_i+0x40>)
 801ed70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ed74:	0801edcd 	.word	0x0801edcd
 801ed78:	0801ede1 	.word	0x0801ede1
 801ed7c:	0801ed5d 	.word	0x0801ed5d
 801ed80:	0801ed5d 	.word	0x0801ed5d
 801ed84:	0801ed5d 	.word	0x0801ed5d
 801ed88:	0801ed5d 	.word	0x0801ed5d
 801ed8c:	0801ede1 	.word	0x0801ede1
 801ed90:	0801ed5d 	.word	0x0801ed5d
 801ed94:	0801ed5d 	.word	0x0801ed5d
 801ed98:	0801ed5d 	.word	0x0801ed5d
 801ed9c:	0801ed5d 	.word	0x0801ed5d
 801eda0:	0801eeed 	.word	0x0801eeed
 801eda4:	0801ee11 	.word	0x0801ee11
 801eda8:	0801eecf 	.word	0x0801eecf
 801edac:	0801ed5d 	.word	0x0801ed5d
 801edb0:	0801ed5d 	.word	0x0801ed5d
 801edb4:	0801ef0f 	.word	0x0801ef0f
 801edb8:	0801ed5d 	.word	0x0801ed5d
 801edbc:	0801ee11 	.word	0x0801ee11
 801edc0:	0801ed5d 	.word	0x0801ed5d
 801edc4:	0801ed5d 	.word	0x0801ed5d
 801edc8:	0801eed7 	.word	0x0801eed7
 801edcc:	682b      	ldr	r3, [r5, #0]
 801edce:	1d1a      	adds	r2, r3, #4
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	602a      	str	r2, [r5, #0]
 801edd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801edd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eddc:	2301      	movs	r3, #1
 801edde:	e0a3      	b.n	801ef28 <_printf_i+0x1f4>
 801ede0:	6820      	ldr	r0, [r4, #0]
 801ede2:	6829      	ldr	r1, [r5, #0]
 801ede4:	0606      	lsls	r6, r0, #24
 801ede6:	f101 0304 	add.w	r3, r1, #4
 801edea:	d50a      	bpl.n	801ee02 <_printf_i+0xce>
 801edec:	680e      	ldr	r6, [r1, #0]
 801edee:	602b      	str	r3, [r5, #0]
 801edf0:	2e00      	cmp	r6, #0
 801edf2:	da03      	bge.n	801edfc <_printf_i+0xc8>
 801edf4:	232d      	movs	r3, #45	; 0x2d
 801edf6:	4276      	negs	r6, r6
 801edf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801edfc:	485e      	ldr	r0, [pc, #376]	; (801ef78 <_printf_i+0x244>)
 801edfe:	230a      	movs	r3, #10
 801ee00:	e019      	b.n	801ee36 <_printf_i+0x102>
 801ee02:	680e      	ldr	r6, [r1, #0]
 801ee04:	602b      	str	r3, [r5, #0]
 801ee06:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ee0a:	bf18      	it	ne
 801ee0c:	b236      	sxthne	r6, r6
 801ee0e:	e7ef      	b.n	801edf0 <_printf_i+0xbc>
 801ee10:	682b      	ldr	r3, [r5, #0]
 801ee12:	6820      	ldr	r0, [r4, #0]
 801ee14:	1d19      	adds	r1, r3, #4
 801ee16:	6029      	str	r1, [r5, #0]
 801ee18:	0601      	lsls	r1, r0, #24
 801ee1a:	d501      	bpl.n	801ee20 <_printf_i+0xec>
 801ee1c:	681e      	ldr	r6, [r3, #0]
 801ee1e:	e002      	b.n	801ee26 <_printf_i+0xf2>
 801ee20:	0646      	lsls	r6, r0, #25
 801ee22:	d5fb      	bpl.n	801ee1c <_printf_i+0xe8>
 801ee24:	881e      	ldrh	r6, [r3, #0]
 801ee26:	4854      	ldr	r0, [pc, #336]	; (801ef78 <_printf_i+0x244>)
 801ee28:	2f6f      	cmp	r7, #111	; 0x6f
 801ee2a:	bf0c      	ite	eq
 801ee2c:	2308      	moveq	r3, #8
 801ee2e:	230a      	movne	r3, #10
 801ee30:	2100      	movs	r1, #0
 801ee32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ee36:	6865      	ldr	r5, [r4, #4]
 801ee38:	60a5      	str	r5, [r4, #8]
 801ee3a:	2d00      	cmp	r5, #0
 801ee3c:	bfa2      	ittt	ge
 801ee3e:	6821      	ldrge	r1, [r4, #0]
 801ee40:	f021 0104 	bicge.w	r1, r1, #4
 801ee44:	6021      	strge	r1, [r4, #0]
 801ee46:	b90e      	cbnz	r6, 801ee4c <_printf_i+0x118>
 801ee48:	2d00      	cmp	r5, #0
 801ee4a:	d04d      	beq.n	801eee8 <_printf_i+0x1b4>
 801ee4c:	4615      	mov	r5, r2
 801ee4e:	fbb6 f1f3 	udiv	r1, r6, r3
 801ee52:	fb03 6711 	mls	r7, r3, r1, r6
 801ee56:	5dc7      	ldrb	r7, [r0, r7]
 801ee58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ee5c:	4637      	mov	r7, r6
 801ee5e:	42bb      	cmp	r3, r7
 801ee60:	460e      	mov	r6, r1
 801ee62:	d9f4      	bls.n	801ee4e <_printf_i+0x11a>
 801ee64:	2b08      	cmp	r3, #8
 801ee66:	d10b      	bne.n	801ee80 <_printf_i+0x14c>
 801ee68:	6823      	ldr	r3, [r4, #0]
 801ee6a:	07de      	lsls	r6, r3, #31
 801ee6c:	d508      	bpl.n	801ee80 <_printf_i+0x14c>
 801ee6e:	6923      	ldr	r3, [r4, #16]
 801ee70:	6861      	ldr	r1, [r4, #4]
 801ee72:	4299      	cmp	r1, r3
 801ee74:	bfde      	ittt	le
 801ee76:	2330      	movle	r3, #48	; 0x30
 801ee78:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ee7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ee80:	1b52      	subs	r2, r2, r5
 801ee82:	6122      	str	r2, [r4, #16]
 801ee84:	f8cd a000 	str.w	sl, [sp]
 801ee88:	464b      	mov	r3, r9
 801ee8a:	aa03      	add	r2, sp, #12
 801ee8c:	4621      	mov	r1, r4
 801ee8e:	4640      	mov	r0, r8
 801ee90:	f7ff fee2 	bl	801ec58 <_printf_common>
 801ee94:	3001      	adds	r0, #1
 801ee96:	d14c      	bne.n	801ef32 <_printf_i+0x1fe>
 801ee98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ee9c:	b004      	add	sp, #16
 801ee9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eea2:	4835      	ldr	r0, [pc, #212]	; (801ef78 <_printf_i+0x244>)
 801eea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801eea8:	6829      	ldr	r1, [r5, #0]
 801eeaa:	6823      	ldr	r3, [r4, #0]
 801eeac:	f851 6b04 	ldr.w	r6, [r1], #4
 801eeb0:	6029      	str	r1, [r5, #0]
 801eeb2:	061d      	lsls	r5, r3, #24
 801eeb4:	d514      	bpl.n	801eee0 <_printf_i+0x1ac>
 801eeb6:	07df      	lsls	r7, r3, #31
 801eeb8:	bf44      	itt	mi
 801eeba:	f043 0320 	orrmi.w	r3, r3, #32
 801eebe:	6023      	strmi	r3, [r4, #0]
 801eec0:	b91e      	cbnz	r6, 801eeca <_printf_i+0x196>
 801eec2:	6823      	ldr	r3, [r4, #0]
 801eec4:	f023 0320 	bic.w	r3, r3, #32
 801eec8:	6023      	str	r3, [r4, #0]
 801eeca:	2310      	movs	r3, #16
 801eecc:	e7b0      	b.n	801ee30 <_printf_i+0xfc>
 801eece:	6823      	ldr	r3, [r4, #0]
 801eed0:	f043 0320 	orr.w	r3, r3, #32
 801eed4:	6023      	str	r3, [r4, #0]
 801eed6:	2378      	movs	r3, #120	; 0x78
 801eed8:	4828      	ldr	r0, [pc, #160]	; (801ef7c <_printf_i+0x248>)
 801eeda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801eede:	e7e3      	b.n	801eea8 <_printf_i+0x174>
 801eee0:	0659      	lsls	r1, r3, #25
 801eee2:	bf48      	it	mi
 801eee4:	b2b6      	uxthmi	r6, r6
 801eee6:	e7e6      	b.n	801eeb6 <_printf_i+0x182>
 801eee8:	4615      	mov	r5, r2
 801eeea:	e7bb      	b.n	801ee64 <_printf_i+0x130>
 801eeec:	682b      	ldr	r3, [r5, #0]
 801eeee:	6826      	ldr	r6, [r4, #0]
 801eef0:	6961      	ldr	r1, [r4, #20]
 801eef2:	1d18      	adds	r0, r3, #4
 801eef4:	6028      	str	r0, [r5, #0]
 801eef6:	0635      	lsls	r5, r6, #24
 801eef8:	681b      	ldr	r3, [r3, #0]
 801eefa:	d501      	bpl.n	801ef00 <_printf_i+0x1cc>
 801eefc:	6019      	str	r1, [r3, #0]
 801eefe:	e002      	b.n	801ef06 <_printf_i+0x1d2>
 801ef00:	0670      	lsls	r0, r6, #25
 801ef02:	d5fb      	bpl.n	801eefc <_printf_i+0x1c8>
 801ef04:	8019      	strh	r1, [r3, #0]
 801ef06:	2300      	movs	r3, #0
 801ef08:	6123      	str	r3, [r4, #16]
 801ef0a:	4615      	mov	r5, r2
 801ef0c:	e7ba      	b.n	801ee84 <_printf_i+0x150>
 801ef0e:	682b      	ldr	r3, [r5, #0]
 801ef10:	1d1a      	adds	r2, r3, #4
 801ef12:	602a      	str	r2, [r5, #0]
 801ef14:	681d      	ldr	r5, [r3, #0]
 801ef16:	6862      	ldr	r2, [r4, #4]
 801ef18:	2100      	movs	r1, #0
 801ef1a:	4628      	mov	r0, r5
 801ef1c:	f7e1 f960 	bl	80001e0 <memchr>
 801ef20:	b108      	cbz	r0, 801ef26 <_printf_i+0x1f2>
 801ef22:	1b40      	subs	r0, r0, r5
 801ef24:	6060      	str	r0, [r4, #4]
 801ef26:	6863      	ldr	r3, [r4, #4]
 801ef28:	6123      	str	r3, [r4, #16]
 801ef2a:	2300      	movs	r3, #0
 801ef2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ef30:	e7a8      	b.n	801ee84 <_printf_i+0x150>
 801ef32:	6923      	ldr	r3, [r4, #16]
 801ef34:	462a      	mov	r2, r5
 801ef36:	4649      	mov	r1, r9
 801ef38:	4640      	mov	r0, r8
 801ef3a:	47d0      	blx	sl
 801ef3c:	3001      	adds	r0, #1
 801ef3e:	d0ab      	beq.n	801ee98 <_printf_i+0x164>
 801ef40:	6823      	ldr	r3, [r4, #0]
 801ef42:	079b      	lsls	r3, r3, #30
 801ef44:	d413      	bmi.n	801ef6e <_printf_i+0x23a>
 801ef46:	68e0      	ldr	r0, [r4, #12]
 801ef48:	9b03      	ldr	r3, [sp, #12]
 801ef4a:	4298      	cmp	r0, r3
 801ef4c:	bfb8      	it	lt
 801ef4e:	4618      	movlt	r0, r3
 801ef50:	e7a4      	b.n	801ee9c <_printf_i+0x168>
 801ef52:	2301      	movs	r3, #1
 801ef54:	4632      	mov	r2, r6
 801ef56:	4649      	mov	r1, r9
 801ef58:	4640      	mov	r0, r8
 801ef5a:	47d0      	blx	sl
 801ef5c:	3001      	adds	r0, #1
 801ef5e:	d09b      	beq.n	801ee98 <_printf_i+0x164>
 801ef60:	3501      	adds	r5, #1
 801ef62:	68e3      	ldr	r3, [r4, #12]
 801ef64:	9903      	ldr	r1, [sp, #12]
 801ef66:	1a5b      	subs	r3, r3, r1
 801ef68:	42ab      	cmp	r3, r5
 801ef6a:	dcf2      	bgt.n	801ef52 <_printf_i+0x21e>
 801ef6c:	e7eb      	b.n	801ef46 <_printf_i+0x212>
 801ef6e:	2500      	movs	r5, #0
 801ef70:	f104 0619 	add.w	r6, r4, #25
 801ef74:	e7f5      	b.n	801ef62 <_printf_i+0x22e>
 801ef76:	bf00      	nop
 801ef78:	08025f32 	.word	0x08025f32
 801ef7c:	08025f43 	.word	0x08025f43

0801ef80 <_scanf_float>:
 801ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef84:	b087      	sub	sp, #28
 801ef86:	4617      	mov	r7, r2
 801ef88:	9303      	str	r3, [sp, #12]
 801ef8a:	688b      	ldr	r3, [r1, #8]
 801ef8c:	1e5a      	subs	r2, r3, #1
 801ef8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ef92:	bf83      	ittte	hi
 801ef94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ef98:	195b      	addhi	r3, r3, r5
 801ef9a:	9302      	strhi	r3, [sp, #8]
 801ef9c:	2300      	movls	r3, #0
 801ef9e:	bf86      	itte	hi
 801efa0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801efa4:	608b      	strhi	r3, [r1, #8]
 801efa6:	9302      	strls	r3, [sp, #8]
 801efa8:	680b      	ldr	r3, [r1, #0]
 801efaa:	468b      	mov	fp, r1
 801efac:	2500      	movs	r5, #0
 801efae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801efb2:	f84b 3b1c 	str.w	r3, [fp], #28
 801efb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801efba:	4680      	mov	r8, r0
 801efbc:	460c      	mov	r4, r1
 801efbe:	465e      	mov	r6, fp
 801efc0:	46aa      	mov	sl, r5
 801efc2:	46a9      	mov	r9, r5
 801efc4:	9501      	str	r5, [sp, #4]
 801efc6:	68a2      	ldr	r2, [r4, #8]
 801efc8:	b152      	cbz	r2, 801efe0 <_scanf_float+0x60>
 801efca:	683b      	ldr	r3, [r7, #0]
 801efcc:	781b      	ldrb	r3, [r3, #0]
 801efce:	2b4e      	cmp	r3, #78	; 0x4e
 801efd0:	d864      	bhi.n	801f09c <_scanf_float+0x11c>
 801efd2:	2b40      	cmp	r3, #64	; 0x40
 801efd4:	d83c      	bhi.n	801f050 <_scanf_float+0xd0>
 801efd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801efda:	b2c8      	uxtb	r0, r1
 801efdc:	280e      	cmp	r0, #14
 801efde:	d93a      	bls.n	801f056 <_scanf_float+0xd6>
 801efe0:	f1b9 0f00 	cmp.w	r9, #0
 801efe4:	d003      	beq.n	801efee <_scanf_float+0x6e>
 801efe6:	6823      	ldr	r3, [r4, #0]
 801efe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801efec:	6023      	str	r3, [r4, #0]
 801efee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801eff2:	f1ba 0f01 	cmp.w	sl, #1
 801eff6:	f200 8113 	bhi.w	801f220 <_scanf_float+0x2a0>
 801effa:	455e      	cmp	r6, fp
 801effc:	f200 8105 	bhi.w	801f20a <_scanf_float+0x28a>
 801f000:	2501      	movs	r5, #1
 801f002:	4628      	mov	r0, r5
 801f004:	b007      	add	sp, #28
 801f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f00a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f00e:	2a0d      	cmp	r2, #13
 801f010:	d8e6      	bhi.n	801efe0 <_scanf_float+0x60>
 801f012:	a101      	add	r1, pc, #4	; (adr r1, 801f018 <_scanf_float+0x98>)
 801f014:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f018:	0801f157 	.word	0x0801f157
 801f01c:	0801efe1 	.word	0x0801efe1
 801f020:	0801efe1 	.word	0x0801efe1
 801f024:	0801efe1 	.word	0x0801efe1
 801f028:	0801f1b7 	.word	0x0801f1b7
 801f02c:	0801f18f 	.word	0x0801f18f
 801f030:	0801efe1 	.word	0x0801efe1
 801f034:	0801efe1 	.word	0x0801efe1
 801f038:	0801f165 	.word	0x0801f165
 801f03c:	0801efe1 	.word	0x0801efe1
 801f040:	0801efe1 	.word	0x0801efe1
 801f044:	0801efe1 	.word	0x0801efe1
 801f048:	0801efe1 	.word	0x0801efe1
 801f04c:	0801f11d 	.word	0x0801f11d
 801f050:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f054:	e7db      	b.n	801f00e <_scanf_float+0x8e>
 801f056:	290e      	cmp	r1, #14
 801f058:	d8c2      	bhi.n	801efe0 <_scanf_float+0x60>
 801f05a:	a001      	add	r0, pc, #4	; (adr r0, 801f060 <_scanf_float+0xe0>)
 801f05c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f060:	0801f10f 	.word	0x0801f10f
 801f064:	0801efe1 	.word	0x0801efe1
 801f068:	0801f10f 	.word	0x0801f10f
 801f06c:	0801f1a3 	.word	0x0801f1a3
 801f070:	0801efe1 	.word	0x0801efe1
 801f074:	0801f0bd 	.word	0x0801f0bd
 801f078:	0801f0f9 	.word	0x0801f0f9
 801f07c:	0801f0f9 	.word	0x0801f0f9
 801f080:	0801f0f9 	.word	0x0801f0f9
 801f084:	0801f0f9 	.word	0x0801f0f9
 801f088:	0801f0f9 	.word	0x0801f0f9
 801f08c:	0801f0f9 	.word	0x0801f0f9
 801f090:	0801f0f9 	.word	0x0801f0f9
 801f094:	0801f0f9 	.word	0x0801f0f9
 801f098:	0801f0f9 	.word	0x0801f0f9
 801f09c:	2b6e      	cmp	r3, #110	; 0x6e
 801f09e:	d809      	bhi.n	801f0b4 <_scanf_float+0x134>
 801f0a0:	2b60      	cmp	r3, #96	; 0x60
 801f0a2:	d8b2      	bhi.n	801f00a <_scanf_float+0x8a>
 801f0a4:	2b54      	cmp	r3, #84	; 0x54
 801f0a6:	d077      	beq.n	801f198 <_scanf_float+0x218>
 801f0a8:	2b59      	cmp	r3, #89	; 0x59
 801f0aa:	d199      	bne.n	801efe0 <_scanf_float+0x60>
 801f0ac:	2d07      	cmp	r5, #7
 801f0ae:	d197      	bne.n	801efe0 <_scanf_float+0x60>
 801f0b0:	2508      	movs	r5, #8
 801f0b2:	e029      	b.n	801f108 <_scanf_float+0x188>
 801f0b4:	2b74      	cmp	r3, #116	; 0x74
 801f0b6:	d06f      	beq.n	801f198 <_scanf_float+0x218>
 801f0b8:	2b79      	cmp	r3, #121	; 0x79
 801f0ba:	e7f6      	b.n	801f0aa <_scanf_float+0x12a>
 801f0bc:	6821      	ldr	r1, [r4, #0]
 801f0be:	05c8      	lsls	r0, r1, #23
 801f0c0:	d51a      	bpl.n	801f0f8 <_scanf_float+0x178>
 801f0c2:	9b02      	ldr	r3, [sp, #8]
 801f0c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f0c8:	6021      	str	r1, [r4, #0]
 801f0ca:	f109 0901 	add.w	r9, r9, #1
 801f0ce:	b11b      	cbz	r3, 801f0d8 <_scanf_float+0x158>
 801f0d0:	3b01      	subs	r3, #1
 801f0d2:	3201      	adds	r2, #1
 801f0d4:	9302      	str	r3, [sp, #8]
 801f0d6:	60a2      	str	r2, [r4, #8]
 801f0d8:	68a3      	ldr	r3, [r4, #8]
 801f0da:	3b01      	subs	r3, #1
 801f0dc:	60a3      	str	r3, [r4, #8]
 801f0de:	6923      	ldr	r3, [r4, #16]
 801f0e0:	3301      	adds	r3, #1
 801f0e2:	6123      	str	r3, [r4, #16]
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	3b01      	subs	r3, #1
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	607b      	str	r3, [r7, #4]
 801f0ec:	f340 8084 	ble.w	801f1f8 <_scanf_float+0x278>
 801f0f0:	683b      	ldr	r3, [r7, #0]
 801f0f2:	3301      	adds	r3, #1
 801f0f4:	603b      	str	r3, [r7, #0]
 801f0f6:	e766      	b.n	801efc6 <_scanf_float+0x46>
 801f0f8:	eb1a 0f05 	cmn.w	sl, r5
 801f0fc:	f47f af70 	bne.w	801efe0 <_scanf_float+0x60>
 801f100:	6822      	ldr	r2, [r4, #0]
 801f102:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801f106:	6022      	str	r2, [r4, #0]
 801f108:	f806 3b01 	strb.w	r3, [r6], #1
 801f10c:	e7e4      	b.n	801f0d8 <_scanf_float+0x158>
 801f10e:	6822      	ldr	r2, [r4, #0]
 801f110:	0610      	lsls	r0, r2, #24
 801f112:	f57f af65 	bpl.w	801efe0 <_scanf_float+0x60>
 801f116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801f11a:	e7f4      	b.n	801f106 <_scanf_float+0x186>
 801f11c:	f1ba 0f00 	cmp.w	sl, #0
 801f120:	d10e      	bne.n	801f140 <_scanf_float+0x1c0>
 801f122:	f1b9 0f00 	cmp.w	r9, #0
 801f126:	d10e      	bne.n	801f146 <_scanf_float+0x1c6>
 801f128:	6822      	ldr	r2, [r4, #0]
 801f12a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f12e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f132:	d108      	bne.n	801f146 <_scanf_float+0x1c6>
 801f134:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f138:	6022      	str	r2, [r4, #0]
 801f13a:	f04f 0a01 	mov.w	sl, #1
 801f13e:	e7e3      	b.n	801f108 <_scanf_float+0x188>
 801f140:	f1ba 0f02 	cmp.w	sl, #2
 801f144:	d055      	beq.n	801f1f2 <_scanf_float+0x272>
 801f146:	2d01      	cmp	r5, #1
 801f148:	d002      	beq.n	801f150 <_scanf_float+0x1d0>
 801f14a:	2d04      	cmp	r5, #4
 801f14c:	f47f af48 	bne.w	801efe0 <_scanf_float+0x60>
 801f150:	3501      	adds	r5, #1
 801f152:	b2ed      	uxtb	r5, r5
 801f154:	e7d8      	b.n	801f108 <_scanf_float+0x188>
 801f156:	f1ba 0f01 	cmp.w	sl, #1
 801f15a:	f47f af41 	bne.w	801efe0 <_scanf_float+0x60>
 801f15e:	f04f 0a02 	mov.w	sl, #2
 801f162:	e7d1      	b.n	801f108 <_scanf_float+0x188>
 801f164:	b97d      	cbnz	r5, 801f186 <_scanf_float+0x206>
 801f166:	f1b9 0f00 	cmp.w	r9, #0
 801f16a:	f47f af3c 	bne.w	801efe6 <_scanf_float+0x66>
 801f16e:	6822      	ldr	r2, [r4, #0]
 801f170:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f174:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f178:	f47f af39 	bne.w	801efee <_scanf_float+0x6e>
 801f17c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f180:	6022      	str	r2, [r4, #0]
 801f182:	2501      	movs	r5, #1
 801f184:	e7c0      	b.n	801f108 <_scanf_float+0x188>
 801f186:	2d03      	cmp	r5, #3
 801f188:	d0e2      	beq.n	801f150 <_scanf_float+0x1d0>
 801f18a:	2d05      	cmp	r5, #5
 801f18c:	e7de      	b.n	801f14c <_scanf_float+0x1cc>
 801f18e:	2d02      	cmp	r5, #2
 801f190:	f47f af26 	bne.w	801efe0 <_scanf_float+0x60>
 801f194:	2503      	movs	r5, #3
 801f196:	e7b7      	b.n	801f108 <_scanf_float+0x188>
 801f198:	2d06      	cmp	r5, #6
 801f19a:	f47f af21 	bne.w	801efe0 <_scanf_float+0x60>
 801f19e:	2507      	movs	r5, #7
 801f1a0:	e7b2      	b.n	801f108 <_scanf_float+0x188>
 801f1a2:	6822      	ldr	r2, [r4, #0]
 801f1a4:	0591      	lsls	r1, r2, #22
 801f1a6:	f57f af1b 	bpl.w	801efe0 <_scanf_float+0x60>
 801f1aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f1ae:	6022      	str	r2, [r4, #0]
 801f1b0:	f8cd 9004 	str.w	r9, [sp, #4]
 801f1b4:	e7a8      	b.n	801f108 <_scanf_float+0x188>
 801f1b6:	6822      	ldr	r2, [r4, #0]
 801f1b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f1bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f1c0:	d006      	beq.n	801f1d0 <_scanf_float+0x250>
 801f1c2:	0550      	lsls	r0, r2, #21
 801f1c4:	f57f af0c 	bpl.w	801efe0 <_scanf_float+0x60>
 801f1c8:	f1b9 0f00 	cmp.w	r9, #0
 801f1cc:	f43f af0f 	beq.w	801efee <_scanf_float+0x6e>
 801f1d0:	0591      	lsls	r1, r2, #22
 801f1d2:	bf58      	it	pl
 801f1d4:	9901      	ldrpl	r1, [sp, #4]
 801f1d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f1da:	bf58      	it	pl
 801f1dc:	eba9 0101 	subpl.w	r1, r9, r1
 801f1e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f1e4:	bf58      	it	pl
 801f1e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f1ea:	6022      	str	r2, [r4, #0]
 801f1ec:	f04f 0900 	mov.w	r9, #0
 801f1f0:	e78a      	b.n	801f108 <_scanf_float+0x188>
 801f1f2:	f04f 0a03 	mov.w	sl, #3
 801f1f6:	e787      	b.n	801f108 <_scanf_float+0x188>
 801f1f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f1fc:	4639      	mov	r1, r7
 801f1fe:	4640      	mov	r0, r8
 801f200:	4798      	blx	r3
 801f202:	2800      	cmp	r0, #0
 801f204:	f43f aedf 	beq.w	801efc6 <_scanf_float+0x46>
 801f208:	e6ea      	b.n	801efe0 <_scanf_float+0x60>
 801f20a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f20e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f212:	463a      	mov	r2, r7
 801f214:	4640      	mov	r0, r8
 801f216:	4798      	blx	r3
 801f218:	6923      	ldr	r3, [r4, #16]
 801f21a:	3b01      	subs	r3, #1
 801f21c:	6123      	str	r3, [r4, #16]
 801f21e:	e6ec      	b.n	801effa <_scanf_float+0x7a>
 801f220:	1e6b      	subs	r3, r5, #1
 801f222:	2b06      	cmp	r3, #6
 801f224:	d825      	bhi.n	801f272 <_scanf_float+0x2f2>
 801f226:	2d02      	cmp	r5, #2
 801f228:	d836      	bhi.n	801f298 <_scanf_float+0x318>
 801f22a:	455e      	cmp	r6, fp
 801f22c:	f67f aee8 	bls.w	801f000 <_scanf_float+0x80>
 801f230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f234:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f238:	463a      	mov	r2, r7
 801f23a:	4640      	mov	r0, r8
 801f23c:	4798      	blx	r3
 801f23e:	6923      	ldr	r3, [r4, #16]
 801f240:	3b01      	subs	r3, #1
 801f242:	6123      	str	r3, [r4, #16]
 801f244:	e7f1      	b.n	801f22a <_scanf_float+0x2aa>
 801f246:	9802      	ldr	r0, [sp, #8]
 801f248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f24c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f250:	9002      	str	r0, [sp, #8]
 801f252:	463a      	mov	r2, r7
 801f254:	4640      	mov	r0, r8
 801f256:	4798      	blx	r3
 801f258:	6923      	ldr	r3, [r4, #16]
 801f25a:	3b01      	subs	r3, #1
 801f25c:	6123      	str	r3, [r4, #16]
 801f25e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f262:	fa5f fa8a 	uxtb.w	sl, sl
 801f266:	f1ba 0f02 	cmp.w	sl, #2
 801f26a:	d1ec      	bne.n	801f246 <_scanf_float+0x2c6>
 801f26c:	3d03      	subs	r5, #3
 801f26e:	b2ed      	uxtb	r5, r5
 801f270:	1b76      	subs	r6, r6, r5
 801f272:	6823      	ldr	r3, [r4, #0]
 801f274:	05da      	lsls	r2, r3, #23
 801f276:	d52f      	bpl.n	801f2d8 <_scanf_float+0x358>
 801f278:	055b      	lsls	r3, r3, #21
 801f27a:	d510      	bpl.n	801f29e <_scanf_float+0x31e>
 801f27c:	455e      	cmp	r6, fp
 801f27e:	f67f aebf 	bls.w	801f000 <_scanf_float+0x80>
 801f282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f28a:	463a      	mov	r2, r7
 801f28c:	4640      	mov	r0, r8
 801f28e:	4798      	blx	r3
 801f290:	6923      	ldr	r3, [r4, #16]
 801f292:	3b01      	subs	r3, #1
 801f294:	6123      	str	r3, [r4, #16]
 801f296:	e7f1      	b.n	801f27c <_scanf_float+0x2fc>
 801f298:	46aa      	mov	sl, r5
 801f29a:	9602      	str	r6, [sp, #8]
 801f29c:	e7df      	b.n	801f25e <_scanf_float+0x2de>
 801f29e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f2a2:	6923      	ldr	r3, [r4, #16]
 801f2a4:	2965      	cmp	r1, #101	; 0x65
 801f2a6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801f2aa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801f2ae:	6123      	str	r3, [r4, #16]
 801f2b0:	d00c      	beq.n	801f2cc <_scanf_float+0x34c>
 801f2b2:	2945      	cmp	r1, #69	; 0x45
 801f2b4:	d00a      	beq.n	801f2cc <_scanf_float+0x34c>
 801f2b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f2ba:	463a      	mov	r2, r7
 801f2bc:	4640      	mov	r0, r8
 801f2be:	4798      	blx	r3
 801f2c0:	6923      	ldr	r3, [r4, #16]
 801f2c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f2c6:	3b01      	subs	r3, #1
 801f2c8:	1eb5      	subs	r5, r6, #2
 801f2ca:	6123      	str	r3, [r4, #16]
 801f2cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f2d0:	463a      	mov	r2, r7
 801f2d2:	4640      	mov	r0, r8
 801f2d4:	4798      	blx	r3
 801f2d6:	462e      	mov	r6, r5
 801f2d8:	6825      	ldr	r5, [r4, #0]
 801f2da:	f015 0510 	ands.w	r5, r5, #16
 801f2de:	d159      	bne.n	801f394 <_scanf_float+0x414>
 801f2e0:	7035      	strb	r5, [r6, #0]
 801f2e2:	6823      	ldr	r3, [r4, #0]
 801f2e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801f2e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f2ec:	d11b      	bne.n	801f326 <_scanf_float+0x3a6>
 801f2ee:	9b01      	ldr	r3, [sp, #4]
 801f2f0:	454b      	cmp	r3, r9
 801f2f2:	eba3 0209 	sub.w	r2, r3, r9
 801f2f6:	d123      	bne.n	801f340 <_scanf_float+0x3c0>
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	4659      	mov	r1, fp
 801f2fc:	4640      	mov	r0, r8
 801f2fe:	f000 ff89 	bl	8020214 <_strtod_r>
 801f302:	6822      	ldr	r2, [r4, #0]
 801f304:	9b03      	ldr	r3, [sp, #12]
 801f306:	f012 0f02 	tst.w	r2, #2
 801f30a:	ec57 6b10 	vmov	r6, r7, d0
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	d021      	beq.n	801f356 <_scanf_float+0x3d6>
 801f312:	9903      	ldr	r1, [sp, #12]
 801f314:	1d1a      	adds	r2, r3, #4
 801f316:	600a      	str	r2, [r1, #0]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	e9c3 6700 	strd	r6, r7, [r3]
 801f31e:	68e3      	ldr	r3, [r4, #12]
 801f320:	3301      	adds	r3, #1
 801f322:	60e3      	str	r3, [r4, #12]
 801f324:	e66d      	b.n	801f002 <_scanf_float+0x82>
 801f326:	9b04      	ldr	r3, [sp, #16]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d0e5      	beq.n	801f2f8 <_scanf_float+0x378>
 801f32c:	9905      	ldr	r1, [sp, #20]
 801f32e:	230a      	movs	r3, #10
 801f330:	462a      	mov	r2, r5
 801f332:	3101      	adds	r1, #1
 801f334:	4640      	mov	r0, r8
 801f336:	f000 fff5 	bl	8020324 <_strtol_r>
 801f33a:	9b04      	ldr	r3, [sp, #16]
 801f33c:	9e05      	ldr	r6, [sp, #20]
 801f33e:	1ac2      	subs	r2, r0, r3
 801f340:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801f344:	429e      	cmp	r6, r3
 801f346:	bf28      	it	cs
 801f348:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801f34c:	4912      	ldr	r1, [pc, #72]	; (801f398 <_scanf_float+0x418>)
 801f34e:	4630      	mov	r0, r6
 801f350:	f000 f8da 	bl	801f508 <siprintf>
 801f354:	e7d0      	b.n	801f2f8 <_scanf_float+0x378>
 801f356:	9903      	ldr	r1, [sp, #12]
 801f358:	f012 0f04 	tst.w	r2, #4
 801f35c:	f103 0204 	add.w	r2, r3, #4
 801f360:	600a      	str	r2, [r1, #0]
 801f362:	d1d9      	bne.n	801f318 <_scanf_float+0x398>
 801f364:	f8d3 8000 	ldr.w	r8, [r3]
 801f368:	ee10 2a10 	vmov	r2, s0
 801f36c:	ee10 0a10 	vmov	r0, s0
 801f370:	463b      	mov	r3, r7
 801f372:	4639      	mov	r1, r7
 801f374:	f7e1 fbda 	bl	8000b2c <__aeabi_dcmpun>
 801f378:	b128      	cbz	r0, 801f386 <_scanf_float+0x406>
 801f37a:	4808      	ldr	r0, [pc, #32]	; (801f39c <_scanf_float+0x41c>)
 801f37c:	f000 f88a 	bl	801f494 <nanf>
 801f380:	ed88 0a00 	vstr	s0, [r8]
 801f384:	e7cb      	b.n	801f31e <_scanf_float+0x39e>
 801f386:	4630      	mov	r0, r6
 801f388:	4639      	mov	r1, r7
 801f38a:	f7e1 fc2d 	bl	8000be8 <__aeabi_d2f>
 801f38e:	f8c8 0000 	str.w	r0, [r8]
 801f392:	e7c4      	b.n	801f31e <_scanf_float+0x39e>
 801f394:	2500      	movs	r5, #0
 801f396:	e634      	b.n	801f002 <_scanf_float+0x82>
 801f398:	08025f54 	.word	0x08025f54
 801f39c:	08026360 	.word	0x08026360

0801f3a0 <cleanup_glue>:
 801f3a0:	b538      	push	{r3, r4, r5, lr}
 801f3a2:	460c      	mov	r4, r1
 801f3a4:	6809      	ldr	r1, [r1, #0]
 801f3a6:	4605      	mov	r5, r0
 801f3a8:	b109      	cbz	r1, 801f3ae <cleanup_glue+0xe>
 801f3aa:	f7ff fff9 	bl	801f3a0 <cleanup_glue>
 801f3ae:	4621      	mov	r1, r4
 801f3b0:	4628      	mov	r0, r5
 801f3b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f3b6:	f002 bfa1 	b.w	80222fc <_free_r>
	...

0801f3bc <_reclaim_reent>:
 801f3bc:	4b2c      	ldr	r3, [pc, #176]	; (801f470 <_reclaim_reent+0xb4>)
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	4283      	cmp	r3, r0
 801f3c2:	b570      	push	{r4, r5, r6, lr}
 801f3c4:	4604      	mov	r4, r0
 801f3c6:	d051      	beq.n	801f46c <_reclaim_reent+0xb0>
 801f3c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f3ca:	b143      	cbz	r3, 801f3de <_reclaim_reent+0x22>
 801f3cc:	68db      	ldr	r3, [r3, #12]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d14a      	bne.n	801f468 <_reclaim_reent+0xac>
 801f3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f3d4:	6819      	ldr	r1, [r3, #0]
 801f3d6:	b111      	cbz	r1, 801f3de <_reclaim_reent+0x22>
 801f3d8:	4620      	mov	r0, r4
 801f3da:	f002 ff8f 	bl	80222fc <_free_r>
 801f3de:	6961      	ldr	r1, [r4, #20]
 801f3e0:	b111      	cbz	r1, 801f3e8 <_reclaim_reent+0x2c>
 801f3e2:	4620      	mov	r0, r4
 801f3e4:	f002 ff8a 	bl	80222fc <_free_r>
 801f3e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f3ea:	b111      	cbz	r1, 801f3f2 <_reclaim_reent+0x36>
 801f3ec:	4620      	mov	r0, r4
 801f3ee:	f002 ff85 	bl	80222fc <_free_r>
 801f3f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f3f4:	b111      	cbz	r1, 801f3fc <_reclaim_reent+0x40>
 801f3f6:	4620      	mov	r0, r4
 801f3f8:	f002 ff80 	bl	80222fc <_free_r>
 801f3fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f3fe:	b111      	cbz	r1, 801f406 <_reclaim_reent+0x4a>
 801f400:	4620      	mov	r0, r4
 801f402:	f002 ff7b 	bl	80222fc <_free_r>
 801f406:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f408:	b111      	cbz	r1, 801f410 <_reclaim_reent+0x54>
 801f40a:	4620      	mov	r0, r4
 801f40c:	f002 ff76 	bl	80222fc <_free_r>
 801f410:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f412:	b111      	cbz	r1, 801f41a <_reclaim_reent+0x5e>
 801f414:	4620      	mov	r0, r4
 801f416:	f002 ff71 	bl	80222fc <_free_r>
 801f41a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f41c:	b111      	cbz	r1, 801f424 <_reclaim_reent+0x68>
 801f41e:	4620      	mov	r0, r4
 801f420:	f002 ff6c 	bl	80222fc <_free_r>
 801f424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f426:	b111      	cbz	r1, 801f42e <_reclaim_reent+0x72>
 801f428:	4620      	mov	r0, r4
 801f42a:	f002 ff67 	bl	80222fc <_free_r>
 801f42e:	69a3      	ldr	r3, [r4, #24]
 801f430:	b1e3      	cbz	r3, 801f46c <_reclaim_reent+0xb0>
 801f432:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f434:	4620      	mov	r0, r4
 801f436:	4798      	blx	r3
 801f438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f43a:	b1b9      	cbz	r1, 801f46c <_reclaim_reent+0xb0>
 801f43c:	4620      	mov	r0, r4
 801f43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f442:	f7ff bfad 	b.w	801f3a0 <cleanup_glue>
 801f446:	5949      	ldr	r1, [r1, r5]
 801f448:	b941      	cbnz	r1, 801f45c <_reclaim_reent+0xa0>
 801f44a:	3504      	adds	r5, #4
 801f44c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f44e:	2d80      	cmp	r5, #128	; 0x80
 801f450:	68d9      	ldr	r1, [r3, #12]
 801f452:	d1f8      	bne.n	801f446 <_reclaim_reent+0x8a>
 801f454:	4620      	mov	r0, r4
 801f456:	f002 ff51 	bl	80222fc <_free_r>
 801f45a:	e7ba      	b.n	801f3d2 <_reclaim_reent+0x16>
 801f45c:	680e      	ldr	r6, [r1, #0]
 801f45e:	4620      	mov	r0, r4
 801f460:	f002 ff4c 	bl	80222fc <_free_r>
 801f464:	4631      	mov	r1, r6
 801f466:	e7ef      	b.n	801f448 <_reclaim_reent+0x8c>
 801f468:	2500      	movs	r5, #0
 801f46a:	e7ef      	b.n	801f44c <_reclaim_reent+0x90>
 801f46c:	bd70      	pop	{r4, r5, r6, pc}
 801f46e:	bf00      	nop
 801f470:	20000148 	.word	0x20000148

0801f474 <_sbrk_r>:
 801f474:	b538      	push	{r3, r4, r5, lr}
 801f476:	4d06      	ldr	r5, [pc, #24]	; (801f490 <_sbrk_r+0x1c>)
 801f478:	2300      	movs	r3, #0
 801f47a:	4604      	mov	r4, r0
 801f47c:	4608      	mov	r0, r1
 801f47e:	602b      	str	r3, [r5, #0]
 801f480:	f006 f8fc 	bl	802567c <_sbrk>
 801f484:	1c43      	adds	r3, r0, #1
 801f486:	d102      	bne.n	801f48e <_sbrk_r+0x1a>
 801f488:	682b      	ldr	r3, [r5, #0]
 801f48a:	b103      	cbz	r3, 801f48e <_sbrk_r+0x1a>
 801f48c:	6023      	str	r3, [r4, #0]
 801f48e:	bd38      	pop	{r3, r4, r5, pc}
 801f490:	2000f49c 	.word	0x2000f49c

0801f494 <nanf>:
 801f494:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f49c <nanf+0x8>
 801f498:	4770      	bx	lr
 801f49a:	bf00      	nop
 801f49c:	7fc00000 	.word	0x7fc00000

0801f4a0 <sniprintf>:
 801f4a0:	b40c      	push	{r2, r3}
 801f4a2:	b530      	push	{r4, r5, lr}
 801f4a4:	4b17      	ldr	r3, [pc, #92]	; (801f504 <sniprintf+0x64>)
 801f4a6:	1e0c      	subs	r4, r1, #0
 801f4a8:	681d      	ldr	r5, [r3, #0]
 801f4aa:	b09d      	sub	sp, #116	; 0x74
 801f4ac:	da08      	bge.n	801f4c0 <sniprintf+0x20>
 801f4ae:	238b      	movs	r3, #139	; 0x8b
 801f4b0:	602b      	str	r3, [r5, #0]
 801f4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f4b6:	b01d      	add	sp, #116	; 0x74
 801f4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f4bc:	b002      	add	sp, #8
 801f4be:	4770      	bx	lr
 801f4c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f4c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f4c8:	bf14      	ite	ne
 801f4ca:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801f4ce:	4623      	moveq	r3, r4
 801f4d0:	9304      	str	r3, [sp, #16]
 801f4d2:	9307      	str	r3, [sp, #28]
 801f4d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f4d8:	9002      	str	r0, [sp, #8]
 801f4da:	9006      	str	r0, [sp, #24]
 801f4dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f4e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f4e2:	ab21      	add	r3, sp, #132	; 0x84
 801f4e4:	a902      	add	r1, sp, #8
 801f4e6:	4628      	mov	r0, r5
 801f4e8:	9301      	str	r3, [sp, #4]
 801f4ea:	f002 ffaf 	bl	802244c <_svfiprintf_r>
 801f4ee:	1c43      	adds	r3, r0, #1
 801f4f0:	bfbc      	itt	lt
 801f4f2:	238b      	movlt	r3, #139	; 0x8b
 801f4f4:	602b      	strlt	r3, [r5, #0]
 801f4f6:	2c00      	cmp	r4, #0
 801f4f8:	d0dd      	beq.n	801f4b6 <sniprintf+0x16>
 801f4fa:	9b02      	ldr	r3, [sp, #8]
 801f4fc:	2200      	movs	r2, #0
 801f4fe:	701a      	strb	r2, [r3, #0]
 801f500:	e7d9      	b.n	801f4b6 <sniprintf+0x16>
 801f502:	bf00      	nop
 801f504:	20000148 	.word	0x20000148

0801f508 <siprintf>:
 801f508:	b40e      	push	{r1, r2, r3}
 801f50a:	b500      	push	{lr}
 801f50c:	b09c      	sub	sp, #112	; 0x70
 801f50e:	ab1d      	add	r3, sp, #116	; 0x74
 801f510:	9002      	str	r0, [sp, #8]
 801f512:	9006      	str	r0, [sp, #24]
 801f514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f518:	4809      	ldr	r0, [pc, #36]	; (801f540 <siprintf+0x38>)
 801f51a:	9107      	str	r1, [sp, #28]
 801f51c:	9104      	str	r1, [sp, #16]
 801f51e:	4909      	ldr	r1, [pc, #36]	; (801f544 <siprintf+0x3c>)
 801f520:	f853 2b04 	ldr.w	r2, [r3], #4
 801f524:	9105      	str	r1, [sp, #20]
 801f526:	6800      	ldr	r0, [r0, #0]
 801f528:	9301      	str	r3, [sp, #4]
 801f52a:	a902      	add	r1, sp, #8
 801f52c:	f002 ff8e 	bl	802244c <_svfiprintf_r>
 801f530:	9b02      	ldr	r3, [sp, #8]
 801f532:	2200      	movs	r2, #0
 801f534:	701a      	strb	r2, [r3, #0]
 801f536:	b01c      	add	sp, #112	; 0x70
 801f538:	f85d eb04 	ldr.w	lr, [sp], #4
 801f53c:	b003      	add	sp, #12
 801f53e:	4770      	bx	lr
 801f540:	20000148 	.word	0x20000148
 801f544:	ffff0208 	.word	0xffff0208

0801f548 <__sread>:
 801f548:	b510      	push	{r4, lr}
 801f54a:	460c      	mov	r4, r1
 801f54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f550:	f003 f87c 	bl	802264c <_read_r>
 801f554:	2800      	cmp	r0, #0
 801f556:	bfab      	itete	ge
 801f558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f55a:	89a3      	ldrhlt	r3, [r4, #12]
 801f55c:	181b      	addge	r3, r3, r0
 801f55e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f562:	bfac      	ite	ge
 801f564:	6563      	strge	r3, [r4, #84]	; 0x54
 801f566:	81a3      	strhlt	r3, [r4, #12]
 801f568:	bd10      	pop	{r4, pc}

0801f56a <__swrite>:
 801f56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f56e:	461f      	mov	r7, r3
 801f570:	898b      	ldrh	r3, [r1, #12]
 801f572:	05db      	lsls	r3, r3, #23
 801f574:	4605      	mov	r5, r0
 801f576:	460c      	mov	r4, r1
 801f578:	4616      	mov	r6, r2
 801f57a:	d505      	bpl.n	801f588 <__swrite+0x1e>
 801f57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f580:	2302      	movs	r3, #2
 801f582:	2200      	movs	r2, #0
 801f584:	f002 f9aa 	bl	80218dc <_lseek_r>
 801f588:	89a3      	ldrh	r3, [r4, #12]
 801f58a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f58e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f592:	81a3      	strh	r3, [r4, #12]
 801f594:	4632      	mov	r2, r6
 801f596:	463b      	mov	r3, r7
 801f598:	4628      	mov	r0, r5
 801f59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f59e:	f000 bec3 	b.w	8020328 <_write_r>

0801f5a2 <__sseek>:
 801f5a2:	b510      	push	{r4, lr}
 801f5a4:	460c      	mov	r4, r1
 801f5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f5aa:	f002 f997 	bl	80218dc <_lseek_r>
 801f5ae:	1c43      	adds	r3, r0, #1
 801f5b0:	89a3      	ldrh	r3, [r4, #12]
 801f5b2:	bf15      	itete	ne
 801f5b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f5b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f5ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f5be:	81a3      	strheq	r3, [r4, #12]
 801f5c0:	bf18      	it	ne
 801f5c2:	81a3      	strhne	r3, [r4, #12]
 801f5c4:	bd10      	pop	{r4, pc}

0801f5c6 <__sclose>:
 801f5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f5ca:	f000 bebf 	b.w	802034c <_close_r>

0801f5ce <sulp>:
 801f5ce:	b570      	push	{r4, r5, r6, lr}
 801f5d0:	4604      	mov	r4, r0
 801f5d2:	460d      	mov	r5, r1
 801f5d4:	ec45 4b10 	vmov	d0, r4, r5
 801f5d8:	4616      	mov	r6, r2
 801f5da:	f002 fd29 	bl	8022030 <__ulp>
 801f5de:	ec51 0b10 	vmov	r0, r1, d0
 801f5e2:	b17e      	cbz	r6, 801f604 <sulp+0x36>
 801f5e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f5e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	dd09      	ble.n	801f604 <sulp+0x36>
 801f5f0:	051b      	lsls	r3, r3, #20
 801f5f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f5f6:	2400      	movs	r4, #0
 801f5f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f5fc:	4622      	mov	r2, r4
 801f5fe:	462b      	mov	r3, r5
 801f600:	f7e0 fffa 	bl	80005f8 <__aeabi_dmul>
 801f604:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f608 <_strtod_l>:
 801f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f60c:	ed2d 8b02 	vpush	{d8}
 801f610:	b09d      	sub	sp, #116	; 0x74
 801f612:	461f      	mov	r7, r3
 801f614:	2300      	movs	r3, #0
 801f616:	9318      	str	r3, [sp, #96]	; 0x60
 801f618:	4ba2      	ldr	r3, [pc, #648]	; (801f8a4 <_strtod_l+0x29c>)
 801f61a:	9213      	str	r2, [sp, #76]	; 0x4c
 801f61c:	681b      	ldr	r3, [r3, #0]
 801f61e:	9305      	str	r3, [sp, #20]
 801f620:	4604      	mov	r4, r0
 801f622:	4618      	mov	r0, r3
 801f624:	4688      	mov	r8, r1
 801f626:	f7e0 fdd3 	bl	80001d0 <strlen>
 801f62a:	f04f 0a00 	mov.w	sl, #0
 801f62e:	4605      	mov	r5, r0
 801f630:	f04f 0b00 	mov.w	fp, #0
 801f634:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801f638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f63a:	781a      	ldrb	r2, [r3, #0]
 801f63c:	2a2b      	cmp	r2, #43	; 0x2b
 801f63e:	d04e      	beq.n	801f6de <_strtod_l+0xd6>
 801f640:	d83b      	bhi.n	801f6ba <_strtod_l+0xb2>
 801f642:	2a0d      	cmp	r2, #13
 801f644:	d834      	bhi.n	801f6b0 <_strtod_l+0xa8>
 801f646:	2a08      	cmp	r2, #8
 801f648:	d834      	bhi.n	801f6b4 <_strtod_l+0xac>
 801f64a:	2a00      	cmp	r2, #0
 801f64c:	d03e      	beq.n	801f6cc <_strtod_l+0xc4>
 801f64e:	2300      	movs	r3, #0
 801f650:	930a      	str	r3, [sp, #40]	; 0x28
 801f652:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801f654:	7833      	ldrb	r3, [r6, #0]
 801f656:	2b30      	cmp	r3, #48	; 0x30
 801f658:	f040 80b0 	bne.w	801f7bc <_strtod_l+0x1b4>
 801f65c:	7873      	ldrb	r3, [r6, #1]
 801f65e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f662:	2b58      	cmp	r3, #88	; 0x58
 801f664:	d168      	bne.n	801f738 <_strtod_l+0x130>
 801f666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f668:	9301      	str	r3, [sp, #4]
 801f66a:	ab18      	add	r3, sp, #96	; 0x60
 801f66c:	9702      	str	r7, [sp, #8]
 801f66e:	9300      	str	r3, [sp, #0]
 801f670:	4a8d      	ldr	r2, [pc, #564]	; (801f8a8 <_strtod_l+0x2a0>)
 801f672:	ab19      	add	r3, sp, #100	; 0x64
 801f674:	a917      	add	r1, sp, #92	; 0x5c
 801f676:	4620      	mov	r0, r4
 801f678:	f001 fe24 	bl	80212c4 <__gethex>
 801f67c:	f010 0707 	ands.w	r7, r0, #7
 801f680:	4605      	mov	r5, r0
 801f682:	d005      	beq.n	801f690 <_strtod_l+0x88>
 801f684:	2f06      	cmp	r7, #6
 801f686:	d12c      	bne.n	801f6e2 <_strtod_l+0xda>
 801f688:	3601      	adds	r6, #1
 801f68a:	2300      	movs	r3, #0
 801f68c:	9617      	str	r6, [sp, #92]	; 0x5c
 801f68e:	930a      	str	r3, [sp, #40]	; 0x28
 801f690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f692:	2b00      	cmp	r3, #0
 801f694:	f040 8590 	bne.w	80201b8 <_strtod_l+0xbb0>
 801f698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f69a:	b1eb      	cbz	r3, 801f6d8 <_strtod_l+0xd0>
 801f69c:	4652      	mov	r2, sl
 801f69e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801f6a2:	ec43 2b10 	vmov	d0, r2, r3
 801f6a6:	b01d      	add	sp, #116	; 0x74
 801f6a8:	ecbd 8b02 	vpop	{d8}
 801f6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6b0:	2a20      	cmp	r2, #32
 801f6b2:	d1cc      	bne.n	801f64e <_strtod_l+0x46>
 801f6b4:	3301      	adds	r3, #1
 801f6b6:	9317      	str	r3, [sp, #92]	; 0x5c
 801f6b8:	e7be      	b.n	801f638 <_strtod_l+0x30>
 801f6ba:	2a2d      	cmp	r2, #45	; 0x2d
 801f6bc:	d1c7      	bne.n	801f64e <_strtod_l+0x46>
 801f6be:	2201      	movs	r2, #1
 801f6c0:	920a      	str	r2, [sp, #40]	; 0x28
 801f6c2:	1c5a      	adds	r2, r3, #1
 801f6c4:	9217      	str	r2, [sp, #92]	; 0x5c
 801f6c6:	785b      	ldrb	r3, [r3, #1]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d1c2      	bne.n	801f652 <_strtod_l+0x4a>
 801f6cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f6ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	f040 856e 	bne.w	80201b4 <_strtod_l+0xbac>
 801f6d8:	4652      	mov	r2, sl
 801f6da:	465b      	mov	r3, fp
 801f6dc:	e7e1      	b.n	801f6a2 <_strtod_l+0x9a>
 801f6de:	2200      	movs	r2, #0
 801f6e0:	e7ee      	b.n	801f6c0 <_strtod_l+0xb8>
 801f6e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f6e4:	b13a      	cbz	r2, 801f6f6 <_strtod_l+0xee>
 801f6e6:	2135      	movs	r1, #53	; 0x35
 801f6e8:	a81a      	add	r0, sp, #104	; 0x68
 801f6ea:	f002 fdac 	bl	8022246 <__copybits>
 801f6ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f6f0:	4620      	mov	r0, r4
 801f6f2:	f002 f96b 	bl	80219cc <_Bfree>
 801f6f6:	3f01      	subs	r7, #1
 801f6f8:	2f04      	cmp	r7, #4
 801f6fa:	d806      	bhi.n	801f70a <_strtod_l+0x102>
 801f6fc:	e8df f007 	tbb	[pc, r7]
 801f700:	1714030a 	.word	0x1714030a
 801f704:	0a          	.byte	0x0a
 801f705:	00          	.byte	0x00
 801f706:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801f70a:	0728      	lsls	r0, r5, #28
 801f70c:	d5c0      	bpl.n	801f690 <_strtod_l+0x88>
 801f70e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801f712:	e7bd      	b.n	801f690 <_strtod_l+0x88>
 801f714:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801f718:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f71a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f71e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f722:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801f726:	e7f0      	b.n	801f70a <_strtod_l+0x102>
 801f728:	f8df b180 	ldr.w	fp, [pc, #384]	; 801f8ac <_strtod_l+0x2a4>
 801f72c:	e7ed      	b.n	801f70a <_strtod_l+0x102>
 801f72e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801f732:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801f736:	e7e8      	b.n	801f70a <_strtod_l+0x102>
 801f738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f73a:	1c5a      	adds	r2, r3, #1
 801f73c:	9217      	str	r2, [sp, #92]	; 0x5c
 801f73e:	785b      	ldrb	r3, [r3, #1]
 801f740:	2b30      	cmp	r3, #48	; 0x30
 801f742:	d0f9      	beq.n	801f738 <_strtod_l+0x130>
 801f744:	2b00      	cmp	r3, #0
 801f746:	d0a3      	beq.n	801f690 <_strtod_l+0x88>
 801f748:	2301      	movs	r3, #1
 801f74a:	f04f 0900 	mov.w	r9, #0
 801f74e:	9304      	str	r3, [sp, #16]
 801f750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f752:	9308      	str	r3, [sp, #32]
 801f754:	f8cd 901c 	str.w	r9, [sp, #28]
 801f758:	464f      	mov	r7, r9
 801f75a:	220a      	movs	r2, #10
 801f75c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f75e:	7806      	ldrb	r6, [r0, #0]
 801f760:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801f764:	b2d9      	uxtb	r1, r3
 801f766:	2909      	cmp	r1, #9
 801f768:	d92a      	bls.n	801f7c0 <_strtod_l+0x1b8>
 801f76a:	9905      	ldr	r1, [sp, #20]
 801f76c:	462a      	mov	r2, r5
 801f76e:	f002 ff87 	bl	8022680 <strncmp>
 801f772:	b398      	cbz	r0, 801f7dc <_strtod_l+0x1d4>
 801f774:	2000      	movs	r0, #0
 801f776:	4632      	mov	r2, r6
 801f778:	463d      	mov	r5, r7
 801f77a:	9005      	str	r0, [sp, #20]
 801f77c:	4603      	mov	r3, r0
 801f77e:	2a65      	cmp	r2, #101	; 0x65
 801f780:	d001      	beq.n	801f786 <_strtod_l+0x17e>
 801f782:	2a45      	cmp	r2, #69	; 0x45
 801f784:	d118      	bne.n	801f7b8 <_strtod_l+0x1b0>
 801f786:	b91d      	cbnz	r5, 801f790 <_strtod_l+0x188>
 801f788:	9a04      	ldr	r2, [sp, #16]
 801f78a:	4302      	orrs	r2, r0
 801f78c:	d09e      	beq.n	801f6cc <_strtod_l+0xc4>
 801f78e:	2500      	movs	r5, #0
 801f790:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801f794:	f108 0201 	add.w	r2, r8, #1
 801f798:	9217      	str	r2, [sp, #92]	; 0x5c
 801f79a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f79e:	2a2b      	cmp	r2, #43	; 0x2b
 801f7a0:	d075      	beq.n	801f88e <_strtod_l+0x286>
 801f7a2:	2a2d      	cmp	r2, #45	; 0x2d
 801f7a4:	d07b      	beq.n	801f89e <_strtod_l+0x296>
 801f7a6:	f04f 0c00 	mov.w	ip, #0
 801f7aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801f7ae:	2909      	cmp	r1, #9
 801f7b0:	f240 8082 	bls.w	801f8b8 <_strtod_l+0x2b0>
 801f7b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801f7b8:	2600      	movs	r6, #0
 801f7ba:	e09d      	b.n	801f8f8 <_strtod_l+0x2f0>
 801f7bc:	2300      	movs	r3, #0
 801f7be:	e7c4      	b.n	801f74a <_strtod_l+0x142>
 801f7c0:	2f08      	cmp	r7, #8
 801f7c2:	bfd8      	it	le
 801f7c4:	9907      	ldrle	r1, [sp, #28]
 801f7c6:	f100 0001 	add.w	r0, r0, #1
 801f7ca:	bfda      	itte	le
 801f7cc:	fb02 3301 	mlale	r3, r2, r1, r3
 801f7d0:	9307      	strle	r3, [sp, #28]
 801f7d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801f7d6:	3701      	adds	r7, #1
 801f7d8:	9017      	str	r0, [sp, #92]	; 0x5c
 801f7da:	e7bf      	b.n	801f75c <_strtod_l+0x154>
 801f7dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f7de:	195a      	adds	r2, r3, r5
 801f7e0:	9217      	str	r2, [sp, #92]	; 0x5c
 801f7e2:	5d5a      	ldrb	r2, [r3, r5]
 801f7e4:	2f00      	cmp	r7, #0
 801f7e6:	d037      	beq.n	801f858 <_strtod_l+0x250>
 801f7e8:	9005      	str	r0, [sp, #20]
 801f7ea:	463d      	mov	r5, r7
 801f7ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801f7f0:	2b09      	cmp	r3, #9
 801f7f2:	d912      	bls.n	801f81a <_strtod_l+0x212>
 801f7f4:	2301      	movs	r3, #1
 801f7f6:	e7c2      	b.n	801f77e <_strtod_l+0x176>
 801f7f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f7fa:	1c5a      	adds	r2, r3, #1
 801f7fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801f7fe:	785a      	ldrb	r2, [r3, #1]
 801f800:	3001      	adds	r0, #1
 801f802:	2a30      	cmp	r2, #48	; 0x30
 801f804:	d0f8      	beq.n	801f7f8 <_strtod_l+0x1f0>
 801f806:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801f80a:	2b08      	cmp	r3, #8
 801f80c:	f200 84d9 	bhi.w	80201c2 <_strtod_l+0xbba>
 801f810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f812:	9005      	str	r0, [sp, #20]
 801f814:	2000      	movs	r0, #0
 801f816:	9308      	str	r3, [sp, #32]
 801f818:	4605      	mov	r5, r0
 801f81a:	3a30      	subs	r2, #48	; 0x30
 801f81c:	f100 0301 	add.w	r3, r0, #1
 801f820:	d014      	beq.n	801f84c <_strtod_l+0x244>
 801f822:	9905      	ldr	r1, [sp, #20]
 801f824:	4419      	add	r1, r3
 801f826:	9105      	str	r1, [sp, #20]
 801f828:	462b      	mov	r3, r5
 801f82a:	eb00 0e05 	add.w	lr, r0, r5
 801f82e:	210a      	movs	r1, #10
 801f830:	4573      	cmp	r3, lr
 801f832:	d113      	bne.n	801f85c <_strtod_l+0x254>
 801f834:	182b      	adds	r3, r5, r0
 801f836:	2b08      	cmp	r3, #8
 801f838:	f105 0501 	add.w	r5, r5, #1
 801f83c:	4405      	add	r5, r0
 801f83e:	dc1c      	bgt.n	801f87a <_strtod_l+0x272>
 801f840:	9907      	ldr	r1, [sp, #28]
 801f842:	230a      	movs	r3, #10
 801f844:	fb03 2301 	mla	r3, r3, r1, r2
 801f848:	9307      	str	r3, [sp, #28]
 801f84a:	2300      	movs	r3, #0
 801f84c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f84e:	1c51      	adds	r1, r2, #1
 801f850:	9117      	str	r1, [sp, #92]	; 0x5c
 801f852:	7852      	ldrb	r2, [r2, #1]
 801f854:	4618      	mov	r0, r3
 801f856:	e7c9      	b.n	801f7ec <_strtod_l+0x1e4>
 801f858:	4638      	mov	r0, r7
 801f85a:	e7d2      	b.n	801f802 <_strtod_l+0x1fa>
 801f85c:	2b08      	cmp	r3, #8
 801f85e:	dc04      	bgt.n	801f86a <_strtod_l+0x262>
 801f860:	9e07      	ldr	r6, [sp, #28]
 801f862:	434e      	muls	r6, r1
 801f864:	9607      	str	r6, [sp, #28]
 801f866:	3301      	adds	r3, #1
 801f868:	e7e2      	b.n	801f830 <_strtod_l+0x228>
 801f86a:	f103 0c01 	add.w	ip, r3, #1
 801f86e:	f1bc 0f10 	cmp.w	ip, #16
 801f872:	bfd8      	it	le
 801f874:	fb01 f909 	mulle.w	r9, r1, r9
 801f878:	e7f5      	b.n	801f866 <_strtod_l+0x25e>
 801f87a:	2d10      	cmp	r5, #16
 801f87c:	bfdc      	itt	le
 801f87e:	230a      	movle	r3, #10
 801f880:	fb03 2909 	mlale	r9, r3, r9, r2
 801f884:	e7e1      	b.n	801f84a <_strtod_l+0x242>
 801f886:	2300      	movs	r3, #0
 801f888:	9305      	str	r3, [sp, #20]
 801f88a:	2301      	movs	r3, #1
 801f88c:	e77c      	b.n	801f788 <_strtod_l+0x180>
 801f88e:	f04f 0c00 	mov.w	ip, #0
 801f892:	f108 0202 	add.w	r2, r8, #2
 801f896:	9217      	str	r2, [sp, #92]	; 0x5c
 801f898:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f89c:	e785      	b.n	801f7aa <_strtod_l+0x1a2>
 801f89e:	f04f 0c01 	mov.w	ip, #1
 801f8a2:	e7f6      	b.n	801f892 <_strtod_l+0x28a>
 801f8a4:	080261a8 	.word	0x080261a8
 801f8a8:	08025f5c 	.word	0x08025f5c
 801f8ac:	7ff00000 	.word	0x7ff00000
 801f8b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f8b2:	1c51      	adds	r1, r2, #1
 801f8b4:	9117      	str	r1, [sp, #92]	; 0x5c
 801f8b6:	7852      	ldrb	r2, [r2, #1]
 801f8b8:	2a30      	cmp	r2, #48	; 0x30
 801f8ba:	d0f9      	beq.n	801f8b0 <_strtod_l+0x2a8>
 801f8bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801f8c0:	2908      	cmp	r1, #8
 801f8c2:	f63f af79 	bhi.w	801f7b8 <_strtod_l+0x1b0>
 801f8c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801f8ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f8cc:	9206      	str	r2, [sp, #24]
 801f8ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f8d0:	1c51      	adds	r1, r2, #1
 801f8d2:	9117      	str	r1, [sp, #92]	; 0x5c
 801f8d4:	7852      	ldrb	r2, [r2, #1]
 801f8d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801f8da:	2e09      	cmp	r6, #9
 801f8dc:	d937      	bls.n	801f94e <_strtod_l+0x346>
 801f8de:	9e06      	ldr	r6, [sp, #24]
 801f8e0:	1b89      	subs	r1, r1, r6
 801f8e2:	2908      	cmp	r1, #8
 801f8e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801f8e8:	dc02      	bgt.n	801f8f0 <_strtod_l+0x2e8>
 801f8ea:	4576      	cmp	r6, lr
 801f8ec:	bfa8      	it	ge
 801f8ee:	4676      	movge	r6, lr
 801f8f0:	f1bc 0f00 	cmp.w	ip, #0
 801f8f4:	d000      	beq.n	801f8f8 <_strtod_l+0x2f0>
 801f8f6:	4276      	negs	r6, r6
 801f8f8:	2d00      	cmp	r5, #0
 801f8fa:	d14d      	bne.n	801f998 <_strtod_l+0x390>
 801f8fc:	9904      	ldr	r1, [sp, #16]
 801f8fe:	4301      	orrs	r1, r0
 801f900:	f47f aec6 	bne.w	801f690 <_strtod_l+0x88>
 801f904:	2b00      	cmp	r3, #0
 801f906:	f47f aee1 	bne.w	801f6cc <_strtod_l+0xc4>
 801f90a:	2a69      	cmp	r2, #105	; 0x69
 801f90c:	d027      	beq.n	801f95e <_strtod_l+0x356>
 801f90e:	dc24      	bgt.n	801f95a <_strtod_l+0x352>
 801f910:	2a49      	cmp	r2, #73	; 0x49
 801f912:	d024      	beq.n	801f95e <_strtod_l+0x356>
 801f914:	2a4e      	cmp	r2, #78	; 0x4e
 801f916:	f47f aed9 	bne.w	801f6cc <_strtod_l+0xc4>
 801f91a:	499f      	ldr	r1, [pc, #636]	; (801fb98 <_strtod_l+0x590>)
 801f91c:	a817      	add	r0, sp, #92	; 0x5c
 801f91e:	f001 ff29 	bl	8021774 <__match>
 801f922:	2800      	cmp	r0, #0
 801f924:	f43f aed2 	beq.w	801f6cc <_strtod_l+0xc4>
 801f928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f92a:	781b      	ldrb	r3, [r3, #0]
 801f92c:	2b28      	cmp	r3, #40	; 0x28
 801f92e:	d12d      	bne.n	801f98c <_strtod_l+0x384>
 801f930:	499a      	ldr	r1, [pc, #616]	; (801fb9c <_strtod_l+0x594>)
 801f932:	aa1a      	add	r2, sp, #104	; 0x68
 801f934:	a817      	add	r0, sp, #92	; 0x5c
 801f936:	f001 ff31 	bl	802179c <__hexnan>
 801f93a:	2805      	cmp	r0, #5
 801f93c:	d126      	bne.n	801f98c <_strtod_l+0x384>
 801f93e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f940:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801f944:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801f948:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801f94c:	e6a0      	b.n	801f690 <_strtod_l+0x88>
 801f94e:	210a      	movs	r1, #10
 801f950:	fb01 2e0e 	mla	lr, r1, lr, r2
 801f954:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801f958:	e7b9      	b.n	801f8ce <_strtod_l+0x2c6>
 801f95a:	2a6e      	cmp	r2, #110	; 0x6e
 801f95c:	e7db      	b.n	801f916 <_strtod_l+0x30e>
 801f95e:	4990      	ldr	r1, [pc, #576]	; (801fba0 <_strtod_l+0x598>)
 801f960:	a817      	add	r0, sp, #92	; 0x5c
 801f962:	f001 ff07 	bl	8021774 <__match>
 801f966:	2800      	cmp	r0, #0
 801f968:	f43f aeb0 	beq.w	801f6cc <_strtod_l+0xc4>
 801f96c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f96e:	498d      	ldr	r1, [pc, #564]	; (801fba4 <_strtod_l+0x59c>)
 801f970:	3b01      	subs	r3, #1
 801f972:	a817      	add	r0, sp, #92	; 0x5c
 801f974:	9317      	str	r3, [sp, #92]	; 0x5c
 801f976:	f001 fefd 	bl	8021774 <__match>
 801f97a:	b910      	cbnz	r0, 801f982 <_strtod_l+0x37a>
 801f97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f97e:	3301      	adds	r3, #1
 801f980:	9317      	str	r3, [sp, #92]	; 0x5c
 801f982:	f8df b230 	ldr.w	fp, [pc, #560]	; 801fbb4 <_strtod_l+0x5ac>
 801f986:	f04f 0a00 	mov.w	sl, #0
 801f98a:	e681      	b.n	801f690 <_strtod_l+0x88>
 801f98c:	4886      	ldr	r0, [pc, #536]	; (801fba8 <_strtod_l+0x5a0>)
 801f98e:	f002 fe6f 	bl	8022670 <nan>
 801f992:	ec5b ab10 	vmov	sl, fp, d0
 801f996:	e67b      	b.n	801f690 <_strtod_l+0x88>
 801f998:	9b05      	ldr	r3, [sp, #20]
 801f99a:	9807      	ldr	r0, [sp, #28]
 801f99c:	1af3      	subs	r3, r6, r3
 801f99e:	2f00      	cmp	r7, #0
 801f9a0:	bf08      	it	eq
 801f9a2:	462f      	moveq	r7, r5
 801f9a4:	2d10      	cmp	r5, #16
 801f9a6:	9306      	str	r3, [sp, #24]
 801f9a8:	46a8      	mov	r8, r5
 801f9aa:	bfa8      	it	ge
 801f9ac:	f04f 0810 	movge.w	r8, #16
 801f9b0:	f7e0 fda8 	bl	8000504 <__aeabi_ui2d>
 801f9b4:	2d09      	cmp	r5, #9
 801f9b6:	4682      	mov	sl, r0
 801f9b8:	468b      	mov	fp, r1
 801f9ba:	dd13      	ble.n	801f9e4 <_strtod_l+0x3dc>
 801f9bc:	4b7b      	ldr	r3, [pc, #492]	; (801fbac <_strtod_l+0x5a4>)
 801f9be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f9c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801f9c6:	f7e0 fe17 	bl	80005f8 <__aeabi_dmul>
 801f9ca:	4682      	mov	sl, r0
 801f9cc:	4648      	mov	r0, r9
 801f9ce:	468b      	mov	fp, r1
 801f9d0:	f7e0 fd98 	bl	8000504 <__aeabi_ui2d>
 801f9d4:	4602      	mov	r2, r0
 801f9d6:	460b      	mov	r3, r1
 801f9d8:	4650      	mov	r0, sl
 801f9da:	4659      	mov	r1, fp
 801f9dc:	f7e0 fc56 	bl	800028c <__adddf3>
 801f9e0:	4682      	mov	sl, r0
 801f9e2:	468b      	mov	fp, r1
 801f9e4:	2d0f      	cmp	r5, #15
 801f9e6:	dc38      	bgt.n	801fa5a <_strtod_l+0x452>
 801f9e8:	9b06      	ldr	r3, [sp, #24]
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	f43f ae50 	beq.w	801f690 <_strtod_l+0x88>
 801f9f0:	dd24      	ble.n	801fa3c <_strtod_l+0x434>
 801f9f2:	2b16      	cmp	r3, #22
 801f9f4:	dc0b      	bgt.n	801fa0e <_strtod_l+0x406>
 801f9f6:	496d      	ldr	r1, [pc, #436]	; (801fbac <_strtod_l+0x5a4>)
 801f9f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa00:	4652      	mov	r2, sl
 801fa02:	465b      	mov	r3, fp
 801fa04:	f7e0 fdf8 	bl	80005f8 <__aeabi_dmul>
 801fa08:	4682      	mov	sl, r0
 801fa0a:	468b      	mov	fp, r1
 801fa0c:	e640      	b.n	801f690 <_strtod_l+0x88>
 801fa0e:	9a06      	ldr	r2, [sp, #24]
 801fa10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801fa14:	4293      	cmp	r3, r2
 801fa16:	db20      	blt.n	801fa5a <_strtod_l+0x452>
 801fa18:	4c64      	ldr	r4, [pc, #400]	; (801fbac <_strtod_l+0x5a4>)
 801fa1a:	f1c5 050f 	rsb	r5, r5, #15
 801fa1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801fa22:	4652      	mov	r2, sl
 801fa24:	465b      	mov	r3, fp
 801fa26:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa2a:	f7e0 fde5 	bl	80005f8 <__aeabi_dmul>
 801fa2e:	9b06      	ldr	r3, [sp, #24]
 801fa30:	1b5d      	subs	r5, r3, r5
 801fa32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801fa36:	e9d4 2300 	ldrd	r2, r3, [r4]
 801fa3a:	e7e3      	b.n	801fa04 <_strtod_l+0x3fc>
 801fa3c:	9b06      	ldr	r3, [sp, #24]
 801fa3e:	3316      	adds	r3, #22
 801fa40:	db0b      	blt.n	801fa5a <_strtod_l+0x452>
 801fa42:	9b05      	ldr	r3, [sp, #20]
 801fa44:	1b9e      	subs	r6, r3, r6
 801fa46:	4b59      	ldr	r3, [pc, #356]	; (801fbac <_strtod_l+0x5a4>)
 801fa48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801fa4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fa50:	4650      	mov	r0, sl
 801fa52:	4659      	mov	r1, fp
 801fa54:	f7e0 fefa 	bl	800084c <__aeabi_ddiv>
 801fa58:	e7d6      	b.n	801fa08 <_strtod_l+0x400>
 801fa5a:	9b06      	ldr	r3, [sp, #24]
 801fa5c:	eba5 0808 	sub.w	r8, r5, r8
 801fa60:	4498      	add	r8, r3
 801fa62:	f1b8 0f00 	cmp.w	r8, #0
 801fa66:	dd74      	ble.n	801fb52 <_strtod_l+0x54a>
 801fa68:	f018 030f 	ands.w	r3, r8, #15
 801fa6c:	d00a      	beq.n	801fa84 <_strtod_l+0x47c>
 801fa6e:	494f      	ldr	r1, [pc, #316]	; (801fbac <_strtod_l+0x5a4>)
 801fa70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fa74:	4652      	mov	r2, sl
 801fa76:	465b      	mov	r3, fp
 801fa78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa7c:	f7e0 fdbc 	bl	80005f8 <__aeabi_dmul>
 801fa80:	4682      	mov	sl, r0
 801fa82:	468b      	mov	fp, r1
 801fa84:	f038 080f 	bics.w	r8, r8, #15
 801fa88:	d04f      	beq.n	801fb2a <_strtod_l+0x522>
 801fa8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801fa8e:	dd22      	ble.n	801fad6 <_strtod_l+0x4ce>
 801fa90:	2500      	movs	r5, #0
 801fa92:	462e      	mov	r6, r5
 801fa94:	9507      	str	r5, [sp, #28]
 801fa96:	9505      	str	r5, [sp, #20]
 801fa98:	2322      	movs	r3, #34	; 0x22
 801fa9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801fbb4 <_strtod_l+0x5ac>
 801fa9e:	6023      	str	r3, [r4, #0]
 801faa0:	f04f 0a00 	mov.w	sl, #0
 801faa4:	9b07      	ldr	r3, [sp, #28]
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	f43f adf2 	beq.w	801f690 <_strtod_l+0x88>
 801faac:	9918      	ldr	r1, [sp, #96]	; 0x60
 801faae:	4620      	mov	r0, r4
 801fab0:	f001 ff8c 	bl	80219cc <_Bfree>
 801fab4:	9905      	ldr	r1, [sp, #20]
 801fab6:	4620      	mov	r0, r4
 801fab8:	f001 ff88 	bl	80219cc <_Bfree>
 801fabc:	4631      	mov	r1, r6
 801fabe:	4620      	mov	r0, r4
 801fac0:	f001 ff84 	bl	80219cc <_Bfree>
 801fac4:	9907      	ldr	r1, [sp, #28]
 801fac6:	4620      	mov	r0, r4
 801fac8:	f001 ff80 	bl	80219cc <_Bfree>
 801facc:	4629      	mov	r1, r5
 801face:	4620      	mov	r0, r4
 801fad0:	f001 ff7c 	bl	80219cc <_Bfree>
 801fad4:	e5dc      	b.n	801f690 <_strtod_l+0x88>
 801fad6:	4b36      	ldr	r3, [pc, #216]	; (801fbb0 <_strtod_l+0x5a8>)
 801fad8:	9304      	str	r3, [sp, #16]
 801fada:	2300      	movs	r3, #0
 801fadc:	ea4f 1828 	mov.w	r8, r8, asr #4
 801fae0:	4650      	mov	r0, sl
 801fae2:	4659      	mov	r1, fp
 801fae4:	4699      	mov	r9, r3
 801fae6:	f1b8 0f01 	cmp.w	r8, #1
 801faea:	dc21      	bgt.n	801fb30 <_strtod_l+0x528>
 801faec:	b10b      	cbz	r3, 801faf2 <_strtod_l+0x4ea>
 801faee:	4682      	mov	sl, r0
 801faf0:	468b      	mov	fp, r1
 801faf2:	4b2f      	ldr	r3, [pc, #188]	; (801fbb0 <_strtod_l+0x5a8>)
 801faf4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801faf8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801fafc:	4652      	mov	r2, sl
 801fafe:	465b      	mov	r3, fp
 801fb00:	e9d9 0100 	ldrd	r0, r1, [r9]
 801fb04:	f7e0 fd78 	bl	80005f8 <__aeabi_dmul>
 801fb08:	4b2a      	ldr	r3, [pc, #168]	; (801fbb4 <_strtod_l+0x5ac>)
 801fb0a:	460a      	mov	r2, r1
 801fb0c:	400b      	ands	r3, r1
 801fb0e:	492a      	ldr	r1, [pc, #168]	; (801fbb8 <_strtod_l+0x5b0>)
 801fb10:	428b      	cmp	r3, r1
 801fb12:	4682      	mov	sl, r0
 801fb14:	d8bc      	bhi.n	801fa90 <_strtod_l+0x488>
 801fb16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801fb1a:	428b      	cmp	r3, r1
 801fb1c:	bf86      	itte	hi
 801fb1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801fbbc <_strtod_l+0x5b4>
 801fb22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801fb26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	9304      	str	r3, [sp, #16]
 801fb2e:	e084      	b.n	801fc3a <_strtod_l+0x632>
 801fb30:	f018 0f01 	tst.w	r8, #1
 801fb34:	d005      	beq.n	801fb42 <_strtod_l+0x53a>
 801fb36:	9b04      	ldr	r3, [sp, #16]
 801fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb3c:	f7e0 fd5c 	bl	80005f8 <__aeabi_dmul>
 801fb40:	2301      	movs	r3, #1
 801fb42:	9a04      	ldr	r2, [sp, #16]
 801fb44:	3208      	adds	r2, #8
 801fb46:	f109 0901 	add.w	r9, r9, #1
 801fb4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801fb4e:	9204      	str	r2, [sp, #16]
 801fb50:	e7c9      	b.n	801fae6 <_strtod_l+0x4de>
 801fb52:	d0ea      	beq.n	801fb2a <_strtod_l+0x522>
 801fb54:	f1c8 0800 	rsb	r8, r8, #0
 801fb58:	f018 020f 	ands.w	r2, r8, #15
 801fb5c:	d00a      	beq.n	801fb74 <_strtod_l+0x56c>
 801fb5e:	4b13      	ldr	r3, [pc, #76]	; (801fbac <_strtod_l+0x5a4>)
 801fb60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fb64:	4650      	mov	r0, sl
 801fb66:	4659      	mov	r1, fp
 801fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb6c:	f7e0 fe6e 	bl	800084c <__aeabi_ddiv>
 801fb70:	4682      	mov	sl, r0
 801fb72:	468b      	mov	fp, r1
 801fb74:	ea5f 1828 	movs.w	r8, r8, asr #4
 801fb78:	d0d7      	beq.n	801fb2a <_strtod_l+0x522>
 801fb7a:	f1b8 0f1f 	cmp.w	r8, #31
 801fb7e:	dd1f      	ble.n	801fbc0 <_strtod_l+0x5b8>
 801fb80:	2500      	movs	r5, #0
 801fb82:	462e      	mov	r6, r5
 801fb84:	9507      	str	r5, [sp, #28]
 801fb86:	9505      	str	r5, [sp, #20]
 801fb88:	2322      	movs	r3, #34	; 0x22
 801fb8a:	f04f 0a00 	mov.w	sl, #0
 801fb8e:	f04f 0b00 	mov.w	fp, #0
 801fb92:	6023      	str	r3, [r4, #0]
 801fb94:	e786      	b.n	801faa4 <_strtod_l+0x49c>
 801fb96:	bf00      	nop
 801fb98:	08025f2d 	.word	0x08025f2d
 801fb9c:	08025f70 	.word	0x08025f70
 801fba0:	08025f25 	.word	0x08025f25
 801fba4:	080260b4 	.word	0x080260b4
 801fba8:	08026360 	.word	0x08026360
 801fbac:	08026240 	.word	0x08026240
 801fbb0:	08026218 	.word	0x08026218
 801fbb4:	7ff00000 	.word	0x7ff00000
 801fbb8:	7ca00000 	.word	0x7ca00000
 801fbbc:	7fefffff 	.word	0x7fefffff
 801fbc0:	f018 0310 	ands.w	r3, r8, #16
 801fbc4:	bf18      	it	ne
 801fbc6:	236a      	movne	r3, #106	; 0x6a
 801fbc8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801ff78 <_strtod_l+0x970>
 801fbcc:	9304      	str	r3, [sp, #16]
 801fbce:	4650      	mov	r0, sl
 801fbd0:	4659      	mov	r1, fp
 801fbd2:	2300      	movs	r3, #0
 801fbd4:	f018 0f01 	tst.w	r8, #1
 801fbd8:	d004      	beq.n	801fbe4 <_strtod_l+0x5dc>
 801fbda:	e9d9 2300 	ldrd	r2, r3, [r9]
 801fbde:	f7e0 fd0b 	bl	80005f8 <__aeabi_dmul>
 801fbe2:	2301      	movs	r3, #1
 801fbe4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801fbe8:	f109 0908 	add.w	r9, r9, #8
 801fbec:	d1f2      	bne.n	801fbd4 <_strtod_l+0x5cc>
 801fbee:	b10b      	cbz	r3, 801fbf4 <_strtod_l+0x5ec>
 801fbf0:	4682      	mov	sl, r0
 801fbf2:	468b      	mov	fp, r1
 801fbf4:	9b04      	ldr	r3, [sp, #16]
 801fbf6:	b1c3      	cbz	r3, 801fc2a <_strtod_l+0x622>
 801fbf8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801fbfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801fc00:	2b00      	cmp	r3, #0
 801fc02:	4659      	mov	r1, fp
 801fc04:	dd11      	ble.n	801fc2a <_strtod_l+0x622>
 801fc06:	2b1f      	cmp	r3, #31
 801fc08:	f340 8124 	ble.w	801fe54 <_strtod_l+0x84c>
 801fc0c:	2b34      	cmp	r3, #52	; 0x34
 801fc0e:	bfde      	ittt	le
 801fc10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801fc14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801fc18:	fa03 f202 	lslle.w	r2, r3, r2
 801fc1c:	f04f 0a00 	mov.w	sl, #0
 801fc20:	bfcc      	ite	gt
 801fc22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801fc26:	ea02 0b01 	andle.w	fp, r2, r1
 801fc2a:	2200      	movs	r2, #0
 801fc2c:	2300      	movs	r3, #0
 801fc2e:	4650      	mov	r0, sl
 801fc30:	4659      	mov	r1, fp
 801fc32:	f7e0 ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 801fc36:	2800      	cmp	r0, #0
 801fc38:	d1a2      	bne.n	801fb80 <_strtod_l+0x578>
 801fc3a:	9b07      	ldr	r3, [sp, #28]
 801fc3c:	9300      	str	r3, [sp, #0]
 801fc3e:	9908      	ldr	r1, [sp, #32]
 801fc40:	462b      	mov	r3, r5
 801fc42:	463a      	mov	r2, r7
 801fc44:	4620      	mov	r0, r4
 801fc46:	f001 ff29 	bl	8021a9c <__s2b>
 801fc4a:	9007      	str	r0, [sp, #28]
 801fc4c:	2800      	cmp	r0, #0
 801fc4e:	f43f af1f 	beq.w	801fa90 <_strtod_l+0x488>
 801fc52:	9b05      	ldr	r3, [sp, #20]
 801fc54:	1b9e      	subs	r6, r3, r6
 801fc56:	9b06      	ldr	r3, [sp, #24]
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	bfb4      	ite	lt
 801fc5c:	4633      	movlt	r3, r6
 801fc5e:	2300      	movge	r3, #0
 801fc60:	930c      	str	r3, [sp, #48]	; 0x30
 801fc62:	9b06      	ldr	r3, [sp, #24]
 801fc64:	2500      	movs	r5, #0
 801fc66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc6a:	9312      	str	r3, [sp, #72]	; 0x48
 801fc6c:	462e      	mov	r6, r5
 801fc6e:	9b07      	ldr	r3, [sp, #28]
 801fc70:	4620      	mov	r0, r4
 801fc72:	6859      	ldr	r1, [r3, #4]
 801fc74:	f001 fe6a 	bl	802194c <_Balloc>
 801fc78:	9005      	str	r0, [sp, #20]
 801fc7a:	2800      	cmp	r0, #0
 801fc7c:	f43f af0c 	beq.w	801fa98 <_strtod_l+0x490>
 801fc80:	9b07      	ldr	r3, [sp, #28]
 801fc82:	691a      	ldr	r2, [r3, #16]
 801fc84:	3202      	adds	r2, #2
 801fc86:	f103 010c 	add.w	r1, r3, #12
 801fc8a:	0092      	lsls	r2, r2, #2
 801fc8c:	300c      	adds	r0, #12
 801fc8e:	f7fe fc62 	bl	801e556 <memcpy>
 801fc92:	ec4b ab10 	vmov	d0, sl, fp
 801fc96:	aa1a      	add	r2, sp, #104	; 0x68
 801fc98:	a919      	add	r1, sp, #100	; 0x64
 801fc9a:	4620      	mov	r0, r4
 801fc9c:	f002 fa44 	bl	8022128 <__d2b>
 801fca0:	ec4b ab18 	vmov	d8, sl, fp
 801fca4:	9018      	str	r0, [sp, #96]	; 0x60
 801fca6:	2800      	cmp	r0, #0
 801fca8:	f43f aef6 	beq.w	801fa98 <_strtod_l+0x490>
 801fcac:	2101      	movs	r1, #1
 801fcae:	4620      	mov	r0, r4
 801fcb0:	f001 ff8e 	bl	8021bd0 <__i2b>
 801fcb4:	4606      	mov	r6, r0
 801fcb6:	2800      	cmp	r0, #0
 801fcb8:	f43f aeee 	beq.w	801fa98 <_strtod_l+0x490>
 801fcbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fcbe:	9904      	ldr	r1, [sp, #16]
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	bfab      	itete	ge
 801fcc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801fcc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801fcc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801fcca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801fcce:	bfac      	ite	ge
 801fcd0:	eb03 0902 	addge.w	r9, r3, r2
 801fcd4:	1ad7      	sublt	r7, r2, r3
 801fcd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801fcd8:	eba3 0801 	sub.w	r8, r3, r1
 801fcdc:	4490      	add	r8, r2
 801fcde:	4ba1      	ldr	r3, [pc, #644]	; (801ff64 <_strtod_l+0x95c>)
 801fce0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801fce4:	4598      	cmp	r8, r3
 801fce6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801fcea:	f280 80c7 	bge.w	801fe7c <_strtod_l+0x874>
 801fcee:	eba3 0308 	sub.w	r3, r3, r8
 801fcf2:	2b1f      	cmp	r3, #31
 801fcf4:	eba2 0203 	sub.w	r2, r2, r3
 801fcf8:	f04f 0101 	mov.w	r1, #1
 801fcfc:	f300 80b1 	bgt.w	801fe62 <_strtod_l+0x85a>
 801fd00:	fa01 f303 	lsl.w	r3, r1, r3
 801fd04:	930d      	str	r3, [sp, #52]	; 0x34
 801fd06:	2300      	movs	r3, #0
 801fd08:	9308      	str	r3, [sp, #32]
 801fd0a:	eb09 0802 	add.w	r8, r9, r2
 801fd0e:	9b04      	ldr	r3, [sp, #16]
 801fd10:	45c1      	cmp	r9, r8
 801fd12:	4417      	add	r7, r2
 801fd14:	441f      	add	r7, r3
 801fd16:	464b      	mov	r3, r9
 801fd18:	bfa8      	it	ge
 801fd1a:	4643      	movge	r3, r8
 801fd1c:	42bb      	cmp	r3, r7
 801fd1e:	bfa8      	it	ge
 801fd20:	463b      	movge	r3, r7
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	bfc2      	ittt	gt
 801fd26:	eba8 0803 	subgt.w	r8, r8, r3
 801fd2a:	1aff      	subgt	r7, r7, r3
 801fd2c:	eba9 0903 	subgt.w	r9, r9, r3
 801fd30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	dd17      	ble.n	801fd66 <_strtod_l+0x75e>
 801fd36:	4631      	mov	r1, r6
 801fd38:	461a      	mov	r2, r3
 801fd3a:	4620      	mov	r0, r4
 801fd3c:	f002 f808 	bl	8021d50 <__pow5mult>
 801fd40:	4606      	mov	r6, r0
 801fd42:	2800      	cmp	r0, #0
 801fd44:	f43f aea8 	beq.w	801fa98 <_strtod_l+0x490>
 801fd48:	4601      	mov	r1, r0
 801fd4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fd4c:	4620      	mov	r0, r4
 801fd4e:	f001 ff55 	bl	8021bfc <__multiply>
 801fd52:	900b      	str	r0, [sp, #44]	; 0x2c
 801fd54:	2800      	cmp	r0, #0
 801fd56:	f43f ae9f 	beq.w	801fa98 <_strtod_l+0x490>
 801fd5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fd5c:	4620      	mov	r0, r4
 801fd5e:	f001 fe35 	bl	80219cc <_Bfree>
 801fd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd64:	9318      	str	r3, [sp, #96]	; 0x60
 801fd66:	f1b8 0f00 	cmp.w	r8, #0
 801fd6a:	f300 808c 	bgt.w	801fe86 <_strtod_l+0x87e>
 801fd6e:	9b06      	ldr	r3, [sp, #24]
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	dd08      	ble.n	801fd86 <_strtod_l+0x77e>
 801fd74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd76:	9905      	ldr	r1, [sp, #20]
 801fd78:	4620      	mov	r0, r4
 801fd7a:	f001 ffe9 	bl	8021d50 <__pow5mult>
 801fd7e:	9005      	str	r0, [sp, #20]
 801fd80:	2800      	cmp	r0, #0
 801fd82:	f43f ae89 	beq.w	801fa98 <_strtod_l+0x490>
 801fd86:	2f00      	cmp	r7, #0
 801fd88:	dd08      	ble.n	801fd9c <_strtod_l+0x794>
 801fd8a:	9905      	ldr	r1, [sp, #20]
 801fd8c:	463a      	mov	r2, r7
 801fd8e:	4620      	mov	r0, r4
 801fd90:	f002 f838 	bl	8021e04 <__lshift>
 801fd94:	9005      	str	r0, [sp, #20]
 801fd96:	2800      	cmp	r0, #0
 801fd98:	f43f ae7e 	beq.w	801fa98 <_strtod_l+0x490>
 801fd9c:	f1b9 0f00 	cmp.w	r9, #0
 801fda0:	dd08      	ble.n	801fdb4 <_strtod_l+0x7ac>
 801fda2:	4631      	mov	r1, r6
 801fda4:	464a      	mov	r2, r9
 801fda6:	4620      	mov	r0, r4
 801fda8:	f002 f82c 	bl	8021e04 <__lshift>
 801fdac:	4606      	mov	r6, r0
 801fdae:	2800      	cmp	r0, #0
 801fdb0:	f43f ae72 	beq.w	801fa98 <_strtod_l+0x490>
 801fdb4:	9a05      	ldr	r2, [sp, #20]
 801fdb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fdb8:	4620      	mov	r0, r4
 801fdba:	f002 f8af 	bl	8021f1c <__mdiff>
 801fdbe:	4605      	mov	r5, r0
 801fdc0:	2800      	cmp	r0, #0
 801fdc2:	f43f ae69 	beq.w	801fa98 <_strtod_l+0x490>
 801fdc6:	68c3      	ldr	r3, [r0, #12]
 801fdc8:	930b      	str	r3, [sp, #44]	; 0x2c
 801fdca:	2300      	movs	r3, #0
 801fdcc:	60c3      	str	r3, [r0, #12]
 801fdce:	4631      	mov	r1, r6
 801fdd0:	f002 f888 	bl	8021ee4 <__mcmp>
 801fdd4:	2800      	cmp	r0, #0
 801fdd6:	da60      	bge.n	801fe9a <_strtod_l+0x892>
 801fdd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdda:	ea53 030a 	orrs.w	r3, r3, sl
 801fdde:	f040 8082 	bne.w	801fee6 <_strtod_l+0x8de>
 801fde2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	d17d      	bne.n	801fee6 <_strtod_l+0x8de>
 801fdea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801fdee:	0d1b      	lsrs	r3, r3, #20
 801fdf0:	051b      	lsls	r3, r3, #20
 801fdf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801fdf6:	d976      	bls.n	801fee6 <_strtod_l+0x8de>
 801fdf8:	696b      	ldr	r3, [r5, #20]
 801fdfa:	b913      	cbnz	r3, 801fe02 <_strtod_l+0x7fa>
 801fdfc:	692b      	ldr	r3, [r5, #16]
 801fdfe:	2b01      	cmp	r3, #1
 801fe00:	dd71      	ble.n	801fee6 <_strtod_l+0x8de>
 801fe02:	4629      	mov	r1, r5
 801fe04:	2201      	movs	r2, #1
 801fe06:	4620      	mov	r0, r4
 801fe08:	f001 fffc 	bl	8021e04 <__lshift>
 801fe0c:	4631      	mov	r1, r6
 801fe0e:	4605      	mov	r5, r0
 801fe10:	f002 f868 	bl	8021ee4 <__mcmp>
 801fe14:	2800      	cmp	r0, #0
 801fe16:	dd66      	ble.n	801fee6 <_strtod_l+0x8de>
 801fe18:	9904      	ldr	r1, [sp, #16]
 801fe1a:	4a53      	ldr	r2, [pc, #332]	; (801ff68 <_strtod_l+0x960>)
 801fe1c:	465b      	mov	r3, fp
 801fe1e:	2900      	cmp	r1, #0
 801fe20:	f000 8081 	beq.w	801ff26 <_strtod_l+0x91e>
 801fe24:	ea02 010b 	and.w	r1, r2, fp
 801fe28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801fe2c:	dc7b      	bgt.n	801ff26 <_strtod_l+0x91e>
 801fe2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801fe32:	f77f aea9 	ble.w	801fb88 <_strtod_l+0x580>
 801fe36:	4b4d      	ldr	r3, [pc, #308]	; (801ff6c <_strtod_l+0x964>)
 801fe38:	4650      	mov	r0, sl
 801fe3a:	4659      	mov	r1, fp
 801fe3c:	2200      	movs	r2, #0
 801fe3e:	f7e0 fbdb 	bl	80005f8 <__aeabi_dmul>
 801fe42:	460b      	mov	r3, r1
 801fe44:	4303      	orrs	r3, r0
 801fe46:	bf08      	it	eq
 801fe48:	2322      	moveq	r3, #34	; 0x22
 801fe4a:	4682      	mov	sl, r0
 801fe4c:	468b      	mov	fp, r1
 801fe4e:	bf08      	it	eq
 801fe50:	6023      	streq	r3, [r4, #0]
 801fe52:	e62b      	b.n	801faac <_strtod_l+0x4a4>
 801fe54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fe58:	fa02 f303 	lsl.w	r3, r2, r3
 801fe5c:	ea03 0a0a 	and.w	sl, r3, sl
 801fe60:	e6e3      	b.n	801fc2a <_strtod_l+0x622>
 801fe62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801fe66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801fe6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801fe6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801fe72:	fa01 f308 	lsl.w	r3, r1, r8
 801fe76:	9308      	str	r3, [sp, #32]
 801fe78:	910d      	str	r1, [sp, #52]	; 0x34
 801fe7a:	e746      	b.n	801fd0a <_strtod_l+0x702>
 801fe7c:	2300      	movs	r3, #0
 801fe7e:	9308      	str	r3, [sp, #32]
 801fe80:	2301      	movs	r3, #1
 801fe82:	930d      	str	r3, [sp, #52]	; 0x34
 801fe84:	e741      	b.n	801fd0a <_strtod_l+0x702>
 801fe86:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fe88:	4642      	mov	r2, r8
 801fe8a:	4620      	mov	r0, r4
 801fe8c:	f001 ffba 	bl	8021e04 <__lshift>
 801fe90:	9018      	str	r0, [sp, #96]	; 0x60
 801fe92:	2800      	cmp	r0, #0
 801fe94:	f47f af6b 	bne.w	801fd6e <_strtod_l+0x766>
 801fe98:	e5fe      	b.n	801fa98 <_strtod_l+0x490>
 801fe9a:	465f      	mov	r7, fp
 801fe9c:	d16e      	bne.n	801ff7c <_strtod_l+0x974>
 801fe9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fea4:	b342      	cbz	r2, 801fef8 <_strtod_l+0x8f0>
 801fea6:	4a32      	ldr	r2, [pc, #200]	; (801ff70 <_strtod_l+0x968>)
 801fea8:	4293      	cmp	r3, r2
 801feaa:	d128      	bne.n	801fefe <_strtod_l+0x8f6>
 801feac:	9b04      	ldr	r3, [sp, #16]
 801feae:	4651      	mov	r1, sl
 801feb0:	b1eb      	cbz	r3, 801feee <_strtod_l+0x8e6>
 801feb2:	4b2d      	ldr	r3, [pc, #180]	; (801ff68 <_strtod_l+0x960>)
 801feb4:	403b      	ands	r3, r7
 801feb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801feba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801febe:	d819      	bhi.n	801fef4 <_strtod_l+0x8ec>
 801fec0:	0d1b      	lsrs	r3, r3, #20
 801fec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fec6:	fa02 f303 	lsl.w	r3, r2, r3
 801feca:	4299      	cmp	r1, r3
 801fecc:	d117      	bne.n	801fefe <_strtod_l+0x8f6>
 801fece:	4b29      	ldr	r3, [pc, #164]	; (801ff74 <_strtod_l+0x96c>)
 801fed0:	429f      	cmp	r7, r3
 801fed2:	d102      	bne.n	801feda <_strtod_l+0x8d2>
 801fed4:	3101      	adds	r1, #1
 801fed6:	f43f addf 	beq.w	801fa98 <_strtod_l+0x490>
 801feda:	4b23      	ldr	r3, [pc, #140]	; (801ff68 <_strtod_l+0x960>)
 801fedc:	403b      	ands	r3, r7
 801fede:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801fee2:	f04f 0a00 	mov.w	sl, #0
 801fee6:	9b04      	ldr	r3, [sp, #16]
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d1a4      	bne.n	801fe36 <_strtod_l+0x82e>
 801feec:	e5de      	b.n	801faac <_strtod_l+0x4a4>
 801feee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fef2:	e7ea      	b.n	801feca <_strtod_l+0x8c2>
 801fef4:	4613      	mov	r3, r2
 801fef6:	e7e8      	b.n	801feca <_strtod_l+0x8c2>
 801fef8:	ea53 030a 	orrs.w	r3, r3, sl
 801fefc:	d08c      	beq.n	801fe18 <_strtod_l+0x810>
 801fefe:	9b08      	ldr	r3, [sp, #32]
 801ff00:	b1db      	cbz	r3, 801ff3a <_strtod_l+0x932>
 801ff02:	423b      	tst	r3, r7
 801ff04:	d0ef      	beq.n	801fee6 <_strtod_l+0x8de>
 801ff06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff08:	9a04      	ldr	r2, [sp, #16]
 801ff0a:	4650      	mov	r0, sl
 801ff0c:	4659      	mov	r1, fp
 801ff0e:	b1c3      	cbz	r3, 801ff42 <_strtod_l+0x93a>
 801ff10:	f7ff fb5d 	bl	801f5ce <sulp>
 801ff14:	4602      	mov	r2, r0
 801ff16:	460b      	mov	r3, r1
 801ff18:	ec51 0b18 	vmov	r0, r1, d8
 801ff1c:	f7e0 f9b6 	bl	800028c <__adddf3>
 801ff20:	4682      	mov	sl, r0
 801ff22:	468b      	mov	fp, r1
 801ff24:	e7df      	b.n	801fee6 <_strtod_l+0x8de>
 801ff26:	4013      	ands	r3, r2
 801ff28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ff2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ff30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ff34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ff38:	e7d5      	b.n	801fee6 <_strtod_l+0x8de>
 801ff3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff3c:	ea13 0f0a 	tst.w	r3, sl
 801ff40:	e7e0      	b.n	801ff04 <_strtod_l+0x8fc>
 801ff42:	f7ff fb44 	bl	801f5ce <sulp>
 801ff46:	4602      	mov	r2, r0
 801ff48:	460b      	mov	r3, r1
 801ff4a:	ec51 0b18 	vmov	r0, r1, d8
 801ff4e:	f7e0 f99b 	bl	8000288 <__aeabi_dsub>
 801ff52:	2200      	movs	r2, #0
 801ff54:	2300      	movs	r3, #0
 801ff56:	4682      	mov	sl, r0
 801ff58:	468b      	mov	fp, r1
 801ff5a:	f7e0 fdb5 	bl	8000ac8 <__aeabi_dcmpeq>
 801ff5e:	2800      	cmp	r0, #0
 801ff60:	d0c1      	beq.n	801fee6 <_strtod_l+0x8de>
 801ff62:	e611      	b.n	801fb88 <_strtod_l+0x580>
 801ff64:	fffffc02 	.word	0xfffffc02
 801ff68:	7ff00000 	.word	0x7ff00000
 801ff6c:	39500000 	.word	0x39500000
 801ff70:	000fffff 	.word	0x000fffff
 801ff74:	7fefffff 	.word	0x7fefffff
 801ff78:	08025f88 	.word	0x08025f88
 801ff7c:	4631      	mov	r1, r6
 801ff7e:	4628      	mov	r0, r5
 801ff80:	f002 f92e 	bl	80221e0 <__ratio>
 801ff84:	ec59 8b10 	vmov	r8, r9, d0
 801ff88:	ee10 0a10 	vmov	r0, s0
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ff92:	4649      	mov	r1, r9
 801ff94:	f7e0 fdac 	bl	8000af0 <__aeabi_dcmple>
 801ff98:	2800      	cmp	r0, #0
 801ff9a:	d07a      	beq.n	8020092 <_strtod_l+0xa8a>
 801ff9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	d04a      	beq.n	8020038 <_strtod_l+0xa30>
 801ffa2:	4b95      	ldr	r3, [pc, #596]	; (80201f8 <_strtod_l+0xbf0>)
 801ffa4:	2200      	movs	r2, #0
 801ffa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ffaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80201f8 <_strtod_l+0xbf0>
 801ffae:	f04f 0800 	mov.w	r8, #0
 801ffb2:	4b92      	ldr	r3, [pc, #584]	; (80201fc <_strtod_l+0xbf4>)
 801ffb4:	403b      	ands	r3, r7
 801ffb6:	930d      	str	r3, [sp, #52]	; 0x34
 801ffb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ffba:	4b91      	ldr	r3, [pc, #580]	; (8020200 <_strtod_l+0xbf8>)
 801ffbc:	429a      	cmp	r2, r3
 801ffbe:	f040 80b0 	bne.w	8020122 <_strtod_l+0xb1a>
 801ffc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ffc6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801ffca:	ec4b ab10 	vmov	d0, sl, fp
 801ffce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ffd2:	f002 f82d 	bl	8022030 <__ulp>
 801ffd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ffda:	ec53 2b10 	vmov	r2, r3, d0
 801ffde:	f7e0 fb0b 	bl	80005f8 <__aeabi_dmul>
 801ffe2:	4652      	mov	r2, sl
 801ffe4:	465b      	mov	r3, fp
 801ffe6:	f7e0 f951 	bl	800028c <__adddf3>
 801ffea:	460b      	mov	r3, r1
 801ffec:	4983      	ldr	r1, [pc, #524]	; (80201fc <_strtod_l+0xbf4>)
 801ffee:	4a85      	ldr	r2, [pc, #532]	; (8020204 <_strtod_l+0xbfc>)
 801fff0:	4019      	ands	r1, r3
 801fff2:	4291      	cmp	r1, r2
 801fff4:	4682      	mov	sl, r0
 801fff6:	d960      	bls.n	80200ba <_strtod_l+0xab2>
 801fff8:	ee18 3a90 	vmov	r3, s17
 801fffc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020000:	4293      	cmp	r3, r2
 8020002:	d104      	bne.n	802000e <_strtod_l+0xa06>
 8020004:	ee18 3a10 	vmov	r3, s16
 8020008:	3301      	adds	r3, #1
 802000a:	f43f ad45 	beq.w	801fa98 <_strtod_l+0x490>
 802000e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8020210 <_strtod_l+0xc08>
 8020012:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020016:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020018:	4620      	mov	r0, r4
 802001a:	f001 fcd7 	bl	80219cc <_Bfree>
 802001e:	9905      	ldr	r1, [sp, #20]
 8020020:	4620      	mov	r0, r4
 8020022:	f001 fcd3 	bl	80219cc <_Bfree>
 8020026:	4631      	mov	r1, r6
 8020028:	4620      	mov	r0, r4
 802002a:	f001 fccf 	bl	80219cc <_Bfree>
 802002e:	4629      	mov	r1, r5
 8020030:	4620      	mov	r0, r4
 8020032:	f001 fccb 	bl	80219cc <_Bfree>
 8020036:	e61a      	b.n	801fc6e <_strtod_l+0x666>
 8020038:	f1ba 0f00 	cmp.w	sl, #0
 802003c:	d11b      	bne.n	8020076 <_strtod_l+0xa6e>
 802003e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020042:	b9f3      	cbnz	r3, 8020082 <_strtod_l+0xa7a>
 8020044:	4b6c      	ldr	r3, [pc, #432]	; (80201f8 <_strtod_l+0xbf0>)
 8020046:	2200      	movs	r2, #0
 8020048:	4640      	mov	r0, r8
 802004a:	4649      	mov	r1, r9
 802004c:	f7e0 fd46 	bl	8000adc <__aeabi_dcmplt>
 8020050:	b9d0      	cbnz	r0, 8020088 <_strtod_l+0xa80>
 8020052:	4640      	mov	r0, r8
 8020054:	4649      	mov	r1, r9
 8020056:	4b6c      	ldr	r3, [pc, #432]	; (8020208 <_strtod_l+0xc00>)
 8020058:	2200      	movs	r2, #0
 802005a:	f7e0 facd 	bl	80005f8 <__aeabi_dmul>
 802005e:	4680      	mov	r8, r0
 8020060:	4689      	mov	r9, r1
 8020062:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020066:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 802006a:	9315      	str	r3, [sp, #84]	; 0x54
 802006c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020070:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020074:	e79d      	b.n	801ffb2 <_strtod_l+0x9aa>
 8020076:	f1ba 0f01 	cmp.w	sl, #1
 802007a:	d102      	bne.n	8020082 <_strtod_l+0xa7a>
 802007c:	2f00      	cmp	r7, #0
 802007e:	f43f ad83 	beq.w	801fb88 <_strtod_l+0x580>
 8020082:	4b62      	ldr	r3, [pc, #392]	; (802020c <_strtod_l+0xc04>)
 8020084:	2200      	movs	r2, #0
 8020086:	e78e      	b.n	801ffa6 <_strtod_l+0x99e>
 8020088:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8020208 <_strtod_l+0xc00>
 802008c:	f04f 0800 	mov.w	r8, #0
 8020090:	e7e7      	b.n	8020062 <_strtod_l+0xa5a>
 8020092:	4b5d      	ldr	r3, [pc, #372]	; (8020208 <_strtod_l+0xc00>)
 8020094:	4640      	mov	r0, r8
 8020096:	4649      	mov	r1, r9
 8020098:	2200      	movs	r2, #0
 802009a:	f7e0 faad 	bl	80005f8 <__aeabi_dmul>
 802009e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200a0:	4680      	mov	r8, r0
 80200a2:	4689      	mov	r9, r1
 80200a4:	b933      	cbnz	r3, 80200b4 <_strtod_l+0xaac>
 80200a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80200aa:	900e      	str	r0, [sp, #56]	; 0x38
 80200ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80200ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80200b2:	e7dd      	b.n	8020070 <_strtod_l+0xa68>
 80200b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80200b8:	e7f9      	b.n	80200ae <_strtod_l+0xaa6>
 80200ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80200be:	9b04      	ldr	r3, [sp, #16]
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	d1a8      	bne.n	8020016 <_strtod_l+0xa0e>
 80200c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80200c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200ca:	0d1b      	lsrs	r3, r3, #20
 80200cc:	051b      	lsls	r3, r3, #20
 80200ce:	429a      	cmp	r2, r3
 80200d0:	d1a1      	bne.n	8020016 <_strtod_l+0xa0e>
 80200d2:	4640      	mov	r0, r8
 80200d4:	4649      	mov	r1, r9
 80200d6:	f7e0 fdef 	bl	8000cb8 <__aeabi_d2lz>
 80200da:	f7e0 fa5f 	bl	800059c <__aeabi_l2d>
 80200de:	4602      	mov	r2, r0
 80200e0:	460b      	mov	r3, r1
 80200e2:	4640      	mov	r0, r8
 80200e4:	4649      	mov	r1, r9
 80200e6:	f7e0 f8cf 	bl	8000288 <__aeabi_dsub>
 80200ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80200ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80200f0:	ea43 030a 	orr.w	r3, r3, sl
 80200f4:	4313      	orrs	r3, r2
 80200f6:	4680      	mov	r8, r0
 80200f8:	4689      	mov	r9, r1
 80200fa:	d055      	beq.n	80201a8 <_strtod_l+0xba0>
 80200fc:	a336      	add	r3, pc, #216	; (adr r3, 80201d8 <_strtod_l+0xbd0>)
 80200fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020102:	f7e0 fceb 	bl	8000adc <__aeabi_dcmplt>
 8020106:	2800      	cmp	r0, #0
 8020108:	f47f acd0 	bne.w	801faac <_strtod_l+0x4a4>
 802010c:	a334      	add	r3, pc, #208	; (adr r3, 80201e0 <_strtod_l+0xbd8>)
 802010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020112:	4640      	mov	r0, r8
 8020114:	4649      	mov	r1, r9
 8020116:	f7e0 fcff 	bl	8000b18 <__aeabi_dcmpgt>
 802011a:	2800      	cmp	r0, #0
 802011c:	f43f af7b 	beq.w	8020016 <_strtod_l+0xa0e>
 8020120:	e4c4      	b.n	801faac <_strtod_l+0x4a4>
 8020122:	9b04      	ldr	r3, [sp, #16]
 8020124:	b333      	cbz	r3, 8020174 <_strtod_l+0xb6c>
 8020126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020128:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802012c:	d822      	bhi.n	8020174 <_strtod_l+0xb6c>
 802012e:	a32e      	add	r3, pc, #184	; (adr r3, 80201e8 <_strtod_l+0xbe0>)
 8020130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020134:	4640      	mov	r0, r8
 8020136:	4649      	mov	r1, r9
 8020138:	f7e0 fcda 	bl	8000af0 <__aeabi_dcmple>
 802013c:	b1a0      	cbz	r0, 8020168 <_strtod_l+0xb60>
 802013e:	4649      	mov	r1, r9
 8020140:	4640      	mov	r0, r8
 8020142:	f7e0 fd31 	bl	8000ba8 <__aeabi_d2uiz>
 8020146:	2801      	cmp	r0, #1
 8020148:	bf38      	it	cc
 802014a:	2001      	movcc	r0, #1
 802014c:	f7e0 f9da 	bl	8000504 <__aeabi_ui2d>
 8020150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020152:	4680      	mov	r8, r0
 8020154:	4689      	mov	r9, r1
 8020156:	bb23      	cbnz	r3, 80201a2 <_strtod_l+0xb9a>
 8020158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802015c:	9010      	str	r0, [sp, #64]	; 0x40
 802015e:	9311      	str	r3, [sp, #68]	; 0x44
 8020160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8020164:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802016a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802016c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020170:	1a9b      	subs	r3, r3, r2
 8020172:	9309      	str	r3, [sp, #36]	; 0x24
 8020174:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020178:	eeb0 0a48 	vmov.f32	s0, s16
 802017c:	eef0 0a68 	vmov.f32	s1, s17
 8020180:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020184:	f001 ff54 	bl	8022030 <__ulp>
 8020188:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802018c:	ec53 2b10 	vmov	r2, r3, d0
 8020190:	f7e0 fa32 	bl	80005f8 <__aeabi_dmul>
 8020194:	ec53 2b18 	vmov	r2, r3, d8
 8020198:	f7e0 f878 	bl	800028c <__adddf3>
 802019c:	4682      	mov	sl, r0
 802019e:	468b      	mov	fp, r1
 80201a0:	e78d      	b.n	80200be <_strtod_l+0xab6>
 80201a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80201a6:	e7db      	b.n	8020160 <_strtod_l+0xb58>
 80201a8:	a311      	add	r3, pc, #68	; (adr r3, 80201f0 <_strtod_l+0xbe8>)
 80201aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201ae:	f7e0 fc95 	bl	8000adc <__aeabi_dcmplt>
 80201b2:	e7b2      	b.n	802011a <_strtod_l+0xb12>
 80201b4:	2300      	movs	r3, #0
 80201b6:	930a      	str	r3, [sp, #40]	; 0x28
 80201b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80201ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80201bc:	6013      	str	r3, [r2, #0]
 80201be:	f7ff ba6b 	b.w	801f698 <_strtod_l+0x90>
 80201c2:	2a65      	cmp	r2, #101	; 0x65
 80201c4:	f43f ab5f 	beq.w	801f886 <_strtod_l+0x27e>
 80201c8:	2a45      	cmp	r2, #69	; 0x45
 80201ca:	f43f ab5c 	beq.w	801f886 <_strtod_l+0x27e>
 80201ce:	2301      	movs	r3, #1
 80201d0:	f7ff bb94 	b.w	801f8fc <_strtod_l+0x2f4>
 80201d4:	f3af 8000 	nop.w
 80201d8:	94a03595 	.word	0x94a03595
 80201dc:	3fdfffff 	.word	0x3fdfffff
 80201e0:	35afe535 	.word	0x35afe535
 80201e4:	3fe00000 	.word	0x3fe00000
 80201e8:	ffc00000 	.word	0xffc00000
 80201ec:	41dfffff 	.word	0x41dfffff
 80201f0:	94a03595 	.word	0x94a03595
 80201f4:	3fcfffff 	.word	0x3fcfffff
 80201f8:	3ff00000 	.word	0x3ff00000
 80201fc:	7ff00000 	.word	0x7ff00000
 8020200:	7fe00000 	.word	0x7fe00000
 8020204:	7c9fffff 	.word	0x7c9fffff
 8020208:	3fe00000 	.word	0x3fe00000
 802020c:	bff00000 	.word	0xbff00000
 8020210:	7fefffff 	.word	0x7fefffff

08020214 <_strtod_r>:
 8020214:	4b01      	ldr	r3, [pc, #4]	; (802021c <_strtod_r+0x8>)
 8020216:	f7ff b9f7 	b.w	801f608 <_strtod_l>
 802021a:	bf00      	nop
 802021c:	200001b0 	.word	0x200001b0

08020220 <_strtol_l.constprop.0>:
 8020220:	2b01      	cmp	r3, #1
 8020222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020226:	d001      	beq.n	802022c <_strtol_l.constprop.0+0xc>
 8020228:	2b24      	cmp	r3, #36	; 0x24
 802022a:	d906      	bls.n	802023a <_strtol_l.constprop.0+0x1a>
 802022c:	f000 ff1a 	bl	8021064 <__errno>
 8020230:	2316      	movs	r3, #22
 8020232:	6003      	str	r3, [r0, #0]
 8020234:	2000      	movs	r0, #0
 8020236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802023a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8020320 <_strtol_l.constprop.0+0x100>
 802023e:	460d      	mov	r5, r1
 8020240:	462e      	mov	r6, r5
 8020242:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020246:	f814 700c 	ldrb.w	r7, [r4, ip]
 802024a:	f017 0708 	ands.w	r7, r7, #8
 802024e:	d1f7      	bne.n	8020240 <_strtol_l.constprop.0+0x20>
 8020250:	2c2d      	cmp	r4, #45	; 0x2d
 8020252:	d132      	bne.n	80202ba <_strtol_l.constprop.0+0x9a>
 8020254:	782c      	ldrb	r4, [r5, #0]
 8020256:	2701      	movs	r7, #1
 8020258:	1cb5      	adds	r5, r6, #2
 802025a:	2b00      	cmp	r3, #0
 802025c:	d05b      	beq.n	8020316 <_strtol_l.constprop.0+0xf6>
 802025e:	2b10      	cmp	r3, #16
 8020260:	d109      	bne.n	8020276 <_strtol_l.constprop.0+0x56>
 8020262:	2c30      	cmp	r4, #48	; 0x30
 8020264:	d107      	bne.n	8020276 <_strtol_l.constprop.0+0x56>
 8020266:	782c      	ldrb	r4, [r5, #0]
 8020268:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802026c:	2c58      	cmp	r4, #88	; 0x58
 802026e:	d14d      	bne.n	802030c <_strtol_l.constprop.0+0xec>
 8020270:	786c      	ldrb	r4, [r5, #1]
 8020272:	2310      	movs	r3, #16
 8020274:	3502      	adds	r5, #2
 8020276:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802027a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802027e:	f04f 0c00 	mov.w	ip, #0
 8020282:	fbb8 f9f3 	udiv	r9, r8, r3
 8020286:	4666      	mov	r6, ip
 8020288:	fb03 8a19 	mls	sl, r3, r9, r8
 802028c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8020290:	f1be 0f09 	cmp.w	lr, #9
 8020294:	d816      	bhi.n	80202c4 <_strtol_l.constprop.0+0xa4>
 8020296:	4674      	mov	r4, lr
 8020298:	42a3      	cmp	r3, r4
 802029a:	dd24      	ble.n	80202e6 <_strtol_l.constprop.0+0xc6>
 802029c:	f1bc 0f00 	cmp.w	ip, #0
 80202a0:	db1e      	blt.n	80202e0 <_strtol_l.constprop.0+0xc0>
 80202a2:	45b1      	cmp	r9, r6
 80202a4:	d31c      	bcc.n	80202e0 <_strtol_l.constprop.0+0xc0>
 80202a6:	d101      	bne.n	80202ac <_strtol_l.constprop.0+0x8c>
 80202a8:	45a2      	cmp	sl, r4
 80202aa:	db19      	blt.n	80202e0 <_strtol_l.constprop.0+0xc0>
 80202ac:	fb06 4603 	mla	r6, r6, r3, r4
 80202b0:	f04f 0c01 	mov.w	ip, #1
 80202b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80202b8:	e7e8      	b.n	802028c <_strtol_l.constprop.0+0x6c>
 80202ba:	2c2b      	cmp	r4, #43	; 0x2b
 80202bc:	bf04      	itt	eq
 80202be:	782c      	ldrbeq	r4, [r5, #0]
 80202c0:	1cb5      	addeq	r5, r6, #2
 80202c2:	e7ca      	b.n	802025a <_strtol_l.constprop.0+0x3a>
 80202c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80202c8:	f1be 0f19 	cmp.w	lr, #25
 80202cc:	d801      	bhi.n	80202d2 <_strtol_l.constprop.0+0xb2>
 80202ce:	3c37      	subs	r4, #55	; 0x37
 80202d0:	e7e2      	b.n	8020298 <_strtol_l.constprop.0+0x78>
 80202d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80202d6:	f1be 0f19 	cmp.w	lr, #25
 80202da:	d804      	bhi.n	80202e6 <_strtol_l.constprop.0+0xc6>
 80202dc:	3c57      	subs	r4, #87	; 0x57
 80202de:	e7db      	b.n	8020298 <_strtol_l.constprop.0+0x78>
 80202e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80202e4:	e7e6      	b.n	80202b4 <_strtol_l.constprop.0+0x94>
 80202e6:	f1bc 0f00 	cmp.w	ip, #0
 80202ea:	da05      	bge.n	80202f8 <_strtol_l.constprop.0+0xd8>
 80202ec:	2322      	movs	r3, #34	; 0x22
 80202ee:	6003      	str	r3, [r0, #0]
 80202f0:	4646      	mov	r6, r8
 80202f2:	b942      	cbnz	r2, 8020306 <_strtol_l.constprop.0+0xe6>
 80202f4:	4630      	mov	r0, r6
 80202f6:	e79e      	b.n	8020236 <_strtol_l.constprop.0+0x16>
 80202f8:	b107      	cbz	r7, 80202fc <_strtol_l.constprop.0+0xdc>
 80202fa:	4276      	negs	r6, r6
 80202fc:	2a00      	cmp	r2, #0
 80202fe:	d0f9      	beq.n	80202f4 <_strtol_l.constprop.0+0xd4>
 8020300:	f1bc 0f00 	cmp.w	ip, #0
 8020304:	d000      	beq.n	8020308 <_strtol_l.constprop.0+0xe8>
 8020306:	1e69      	subs	r1, r5, #1
 8020308:	6011      	str	r1, [r2, #0]
 802030a:	e7f3      	b.n	80202f4 <_strtol_l.constprop.0+0xd4>
 802030c:	2430      	movs	r4, #48	; 0x30
 802030e:	2b00      	cmp	r3, #0
 8020310:	d1b1      	bne.n	8020276 <_strtol_l.constprop.0+0x56>
 8020312:	2308      	movs	r3, #8
 8020314:	e7af      	b.n	8020276 <_strtol_l.constprop.0+0x56>
 8020316:	2c30      	cmp	r4, #48	; 0x30
 8020318:	d0a5      	beq.n	8020266 <_strtol_l.constprop.0+0x46>
 802031a:	230a      	movs	r3, #10
 802031c:	e7ab      	b.n	8020276 <_strtol_l.constprop.0+0x56>
 802031e:	bf00      	nop
 8020320:	08025fb1 	.word	0x08025fb1

08020324 <_strtol_r>:
 8020324:	f7ff bf7c 	b.w	8020220 <_strtol_l.constprop.0>

08020328 <_write_r>:
 8020328:	b538      	push	{r3, r4, r5, lr}
 802032a:	4d07      	ldr	r5, [pc, #28]	; (8020348 <_write_r+0x20>)
 802032c:	4604      	mov	r4, r0
 802032e:	4608      	mov	r0, r1
 8020330:	4611      	mov	r1, r2
 8020332:	2200      	movs	r2, #0
 8020334:	602a      	str	r2, [r5, #0]
 8020336:	461a      	mov	r2, r3
 8020338:	f005 f9ae 	bl	8025698 <_write>
 802033c:	1c43      	adds	r3, r0, #1
 802033e:	d102      	bne.n	8020346 <_write_r+0x1e>
 8020340:	682b      	ldr	r3, [r5, #0]
 8020342:	b103      	cbz	r3, 8020346 <_write_r+0x1e>
 8020344:	6023      	str	r3, [r4, #0]
 8020346:	bd38      	pop	{r3, r4, r5, pc}
 8020348:	2000f49c 	.word	0x2000f49c

0802034c <_close_r>:
 802034c:	b538      	push	{r3, r4, r5, lr}
 802034e:	4d06      	ldr	r5, [pc, #24]	; (8020368 <_close_r+0x1c>)
 8020350:	2300      	movs	r3, #0
 8020352:	4604      	mov	r4, r0
 8020354:	4608      	mov	r0, r1
 8020356:	602b      	str	r3, [r5, #0]
 8020358:	f005 f958 	bl	802560c <_close>
 802035c:	1c43      	adds	r3, r0, #1
 802035e:	d102      	bne.n	8020366 <_close_r+0x1a>
 8020360:	682b      	ldr	r3, [r5, #0]
 8020362:	b103      	cbz	r3, 8020366 <_close_r+0x1a>
 8020364:	6023      	str	r3, [r4, #0]
 8020366:	bd38      	pop	{r3, r4, r5, pc}
 8020368:	2000f49c 	.word	0x2000f49c

0802036c <quorem>:
 802036c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020370:	6903      	ldr	r3, [r0, #16]
 8020372:	690c      	ldr	r4, [r1, #16]
 8020374:	42a3      	cmp	r3, r4
 8020376:	4607      	mov	r7, r0
 8020378:	f2c0 8081 	blt.w	802047e <quorem+0x112>
 802037c:	3c01      	subs	r4, #1
 802037e:	f101 0814 	add.w	r8, r1, #20
 8020382:	f100 0514 	add.w	r5, r0, #20
 8020386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802038a:	9301      	str	r3, [sp, #4]
 802038c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020394:	3301      	adds	r3, #1
 8020396:	429a      	cmp	r2, r3
 8020398:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802039c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80203a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80203a4:	d331      	bcc.n	802040a <quorem+0x9e>
 80203a6:	f04f 0e00 	mov.w	lr, #0
 80203aa:	4640      	mov	r0, r8
 80203ac:	46ac      	mov	ip, r5
 80203ae:	46f2      	mov	sl, lr
 80203b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80203b4:	b293      	uxth	r3, r2
 80203b6:	fb06 e303 	mla	r3, r6, r3, lr
 80203ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80203be:	b29b      	uxth	r3, r3
 80203c0:	ebaa 0303 	sub.w	r3, sl, r3
 80203c4:	f8dc a000 	ldr.w	sl, [ip]
 80203c8:	0c12      	lsrs	r2, r2, #16
 80203ca:	fa13 f38a 	uxtah	r3, r3, sl
 80203ce:	fb06 e202 	mla	r2, r6, r2, lr
 80203d2:	9300      	str	r3, [sp, #0]
 80203d4:	9b00      	ldr	r3, [sp, #0]
 80203d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80203da:	b292      	uxth	r2, r2
 80203dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80203e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80203e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80203e8:	4581      	cmp	r9, r0
 80203ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80203ee:	f84c 3b04 	str.w	r3, [ip], #4
 80203f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80203f6:	d2db      	bcs.n	80203b0 <quorem+0x44>
 80203f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80203fc:	b92b      	cbnz	r3, 802040a <quorem+0x9e>
 80203fe:	9b01      	ldr	r3, [sp, #4]
 8020400:	3b04      	subs	r3, #4
 8020402:	429d      	cmp	r5, r3
 8020404:	461a      	mov	r2, r3
 8020406:	d32e      	bcc.n	8020466 <quorem+0xfa>
 8020408:	613c      	str	r4, [r7, #16]
 802040a:	4638      	mov	r0, r7
 802040c:	f001 fd6a 	bl	8021ee4 <__mcmp>
 8020410:	2800      	cmp	r0, #0
 8020412:	db24      	blt.n	802045e <quorem+0xf2>
 8020414:	3601      	adds	r6, #1
 8020416:	4628      	mov	r0, r5
 8020418:	f04f 0c00 	mov.w	ip, #0
 802041c:	f858 2b04 	ldr.w	r2, [r8], #4
 8020420:	f8d0 e000 	ldr.w	lr, [r0]
 8020424:	b293      	uxth	r3, r2
 8020426:	ebac 0303 	sub.w	r3, ip, r3
 802042a:	0c12      	lsrs	r2, r2, #16
 802042c:	fa13 f38e 	uxtah	r3, r3, lr
 8020430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020438:	b29b      	uxth	r3, r3
 802043a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802043e:	45c1      	cmp	r9, r8
 8020440:	f840 3b04 	str.w	r3, [r0], #4
 8020444:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020448:	d2e8      	bcs.n	802041c <quorem+0xb0>
 802044a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802044e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020452:	b922      	cbnz	r2, 802045e <quorem+0xf2>
 8020454:	3b04      	subs	r3, #4
 8020456:	429d      	cmp	r5, r3
 8020458:	461a      	mov	r2, r3
 802045a:	d30a      	bcc.n	8020472 <quorem+0x106>
 802045c:	613c      	str	r4, [r7, #16]
 802045e:	4630      	mov	r0, r6
 8020460:	b003      	add	sp, #12
 8020462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020466:	6812      	ldr	r2, [r2, #0]
 8020468:	3b04      	subs	r3, #4
 802046a:	2a00      	cmp	r2, #0
 802046c:	d1cc      	bne.n	8020408 <quorem+0x9c>
 802046e:	3c01      	subs	r4, #1
 8020470:	e7c7      	b.n	8020402 <quorem+0x96>
 8020472:	6812      	ldr	r2, [r2, #0]
 8020474:	3b04      	subs	r3, #4
 8020476:	2a00      	cmp	r2, #0
 8020478:	d1f0      	bne.n	802045c <quorem+0xf0>
 802047a:	3c01      	subs	r4, #1
 802047c:	e7eb      	b.n	8020456 <quorem+0xea>
 802047e:	2000      	movs	r0, #0
 8020480:	e7ee      	b.n	8020460 <quorem+0xf4>
 8020482:	0000      	movs	r0, r0
 8020484:	0000      	movs	r0, r0
	...

08020488 <_dtoa_r>:
 8020488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802048c:	ed2d 8b04 	vpush	{d8-d9}
 8020490:	ec57 6b10 	vmov	r6, r7, d0
 8020494:	b093      	sub	sp, #76	; 0x4c
 8020496:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020498:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802049c:	9106      	str	r1, [sp, #24]
 802049e:	ee10 aa10 	vmov	sl, s0
 80204a2:	4604      	mov	r4, r0
 80204a4:	9209      	str	r2, [sp, #36]	; 0x24
 80204a6:	930c      	str	r3, [sp, #48]	; 0x30
 80204a8:	46bb      	mov	fp, r7
 80204aa:	b975      	cbnz	r5, 80204ca <_dtoa_r+0x42>
 80204ac:	2010      	movs	r0, #16
 80204ae:	f001 fa27 	bl	8021900 <malloc>
 80204b2:	4602      	mov	r2, r0
 80204b4:	6260      	str	r0, [r4, #36]	; 0x24
 80204b6:	b920      	cbnz	r0, 80204c2 <_dtoa_r+0x3a>
 80204b8:	4ba7      	ldr	r3, [pc, #668]	; (8020758 <_dtoa_r+0x2d0>)
 80204ba:	21ea      	movs	r1, #234	; 0xea
 80204bc:	48a7      	ldr	r0, [pc, #668]	; (802075c <_dtoa_r+0x2d4>)
 80204be:	f002 f901 	bl	80226c4 <__assert_func>
 80204c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80204c6:	6005      	str	r5, [r0, #0]
 80204c8:	60c5      	str	r5, [r0, #12]
 80204ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80204cc:	6819      	ldr	r1, [r3, #0]
 80204ce:	b151      	cbz	r1, 80204e6 <_dtoa_r+0x5e>
 80204d0:	685a      	ldr	r2, [r3, #4]
 80204d2:	604a      	str	r2, [r1, #4]
 80204d4:	2301      	movs	r3, #1
 80204d6:	4093      	lsls	r3, r2
 80204d8:	608b      	str	r3, [r1, #8]
 80204da:	4620      	mov	r0, r4
 80204dc:	f001 fa76 	bl	80219cc <_Bfree>
 80204e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80204e2:	2200      	movs	r2, #0
 80204e4:	601a      	str	r2, [r3, #0]
 80204e6:	1e3b      	subs	r3, r7, #0
 80204e8:	bfaa      	itet	ge
 80204ea:	2300      	movge	r3, #0
 80204ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80204f0:	f8c8 3000 	strge.w	r3, [r8]
 80204f4:	4b9a      	ldr	r3, [pc, #616]	; (8020760 <_dtoa_r+0x2d8>)
 80204f6:	bfbc      	itt	lt
 80204f8:	2201      	movlt	r2, #1
 80204fa:	f8c8 2000 	strlt.w	r2, [r8]
 80204fe:	ea33 030b 	bics.w	r3, r3, fp
 8020502:	d11b      	bne.n	802053c <_dtoa_r+0xb4>
 8020504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020506:	f242 730f 	movw	r3, #9999	; 0x270f
 802050a:	6013      	str	r3, [r2, #0]
 802050c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020510:	4333      	orrs	r3, r6
 8020512:	f000 8592 	beq.w	802103a <_dtoa_r+0xbb2>
 8020516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020518:	b963      	cbnz	r3, 8020534 <_dtoa_r+0xac>
 802051a:	4b92      	ldr	r3, [pc, #584]	; (8020764 <_dtoa_r+0x2dc>)
 802051c:	e022      	b.n	8020564 <_dtoa_r+0xdc>
 802051e:	4b92      	ldr	r3, [pc, #584]	; (8020768 <_dtoa_r+0x2e0>)
 8020520:	9301      	str	r3, [sp, #4]
 8020522:	3308      	adds	r3, #8
 8020524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020526:	6013      	str	r3, [r2, #0]
 8020528:	9801      	ldr	r0, [sp, #4]
 802052a:	b013      	add	sp, #76	; 0x4c
 802052c:	ecbd 8b04 	vpop	{d8-d9}
 8020530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020534:	4b8b      	ldr	r3, [pc, #556]	; (8020764 <_dtoa_r+0x2dc>)
 8020536:	9301      	str	r3, [sp, #4]
 8020538:	3303      	adds	r3, #3
 802053a:	e7f3      	b.n	8020524 <_dtoa_r+0x9c>
 802053c:	2200      	movs	r2, #0
 802053e:	2300      	movs	r3, #0
 8020540:	4650      	mov	r0, sl
 8020542:	4659      	mov	r1, fp
 8020544:	f7e0 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8020548:	ec4b ab19 	vmov	d9, sl, fp
 802054c:	4680      	mov	r8, r0
 802054e:	b158      	cbz	r0, 8020568 <_dtoa_r+0xe0>
 8020550:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020552:	2301      	movs	r3, #1
 8020554:	6013      	str	r3, [r2, #0]
 8020556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020558:	2b00      	cmp	r3, #0
 802055a:	f000 856b 	beq.w	8021034 <_dtoa_r+0xbac>
 802055e:	4883      	ldr	r0, [pc, #524]	; (802076c <_dtoa_r+0x2e4>)
 8020560:	6018      	str	r0, [r3, #0]
 8020562:	1e43      	subs	r3, r0, #1
 8020564:	9301      	str	r3, [sp, #4]
 8020566:	e7df      	b.n	8020528 <_dtoa_r+0xa0>
 8020568:	ec4b ab10 	vmov	d0, sl, fp
 802056c:	aa10      	add	r2, sp, #64	; 0x40
 802056e:	a911      	add	r1, sp, #68	; 0x44
 8020570:	4620      	mov	r0, r4
 8020572:	f001 fdd9 	bl	8022128 <__d2b>
 8020576:	f3cb 550a 	ubfx	r5, fp, #20, #11
 802057a:	ee08 0a10 	vmov	s16, r0
 802057e:	2d00      	cmp	r5, #0
 8020580:	f000 8084 	beq.w	802068c <_dtoa_r+0x204>
 8020584:	ee19 3a90 	vmov	r3, s19
 8020588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802058c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020590:	4656      	mov	r6, sl
 8020592:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802059a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802059e:	4b74      	ldr	r3, [pc, #464]	; (8020770 <_dtoa_r+0x2e8>)
 80205a0:	2200      	movs	r2, #0
 80205a2:	4630      	mov	r0, r6
 80205a4:	4639      	mov	r1, r7
 80205a6:	f7df fe6f 	bl	8000288 <__aeabi_dsub>
 80205aa:	a365      	add	r3, pc, #404	; (adr r3, 8020740 <_dtoa_r+0x2b8>)
 80205ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205b0:	f7e0 f822 	bl	80005f8 <__aeabi_dmul>
 80205b4:	a364      	add	r3, pc, #400	; (adr r3, 8020748 <_dtoa_r+0x2c0>)
 80205b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ba:	f7df fe67 	bl	800028c <__adddf3>
 80205be:	4606      	mov	r6, r0
 80205c0:	4628      	mov	r0, r5
 80205c2:	460f      	mov	r7, r1
 80205c4:	f7df ffae 	bl	8000524 <__aeabi_i2d>
 80205c8:	a361      	add	r3, pc, #388	; (adr r3, 8020750 <_dtoa_r+0x2c8>)
 80205ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ce:	f7e0 f813 	bl	80005f8 <__aeabi_dmul>
 80205d2:	4602      	mov	r2, r0
 80205d4:	460b      	mov	r3, r1
 80205d6:	4630      	mov	r0, r6
 80205d8:	4639      	mov	r1, r7
 80205da:	f7df fe57 	bl	800028c <__adddf3>
 80205de:	4606      	mov	r6, r0
 80205e0:	460f      	mov	r7, r1
 80205e2:	f7e0 fab9 	bl	8000b58 <__aeabi_d2iz>
 80205e6:	2200      	movs	r2, #0
 80205e8:	9000      	str	r0, [sp, #0]
 80205ea:	2300      	movs	r3, #0
 80205ec:	4630      	mov	r0, r6
 80205ee:	4639      	mov	r1, r7
 80205f0:	f7e0 fa74 	bl	8000adc <__aeabi_dcmplt>
 80205f4:	b150      	cbz	r0, 802060c <_dtoa_r+0x184>
 80205f6:	9800      	ldr	r0, [sp, #0]
 80205f8:	f7df ff94 	bl	8000524 <__aeabi_i2d>
 80205fc:	4632      	mov	r2, r6
 80205fe:	463b      	mov	r3, r7
 8020600:	f7e0 fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8020604:	b910      	cbnz	r0, 802060c <_dtoa_r+0x184>
 8020606:	9b00      	ldr	r3, [sp, #0]
 8020608:	3b01      	subs	r3, #1
 802060a:	9300      	str	r3, [sp, #0]
 802060c:	9b00      	ldr	r3, [sp, #0]
 802060e:	2b16      	cmp	r3, #22
 8020610:	d85a      	bhi.n	80206c8 <_dtoa_r+0x240>
 8020612:	9a00      	ldr	r2, [sp, #0]
 8020614:	4b57      	ldr	r3, [pc, #348]	; (8020774 <_dtoa_r+0x2ec>)
 8020616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802061e:	ec51 0b19 	vmov	r0, r1, d9
 8020622:	f7e0 fa5b 	bl	8000adc <__aeabi_dcmplt>
 8020626:	2800      	cmp	r0, #0
 8020628:	d050      	beq.n	80206cc <_dtoa_r+0x244>
 802062a:	9b00      	ldr	r3, [sp, #0]
 802062c:	3b01      	subs	r3, #1
 802062e:	9300      	str	r3, [sp, #0]
 8020630:	2300      	movs	r3, #0
 8020632:	930b      	str	r3, [sp, #44]	; 0x2c
 8020634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020636:	1b5d      	subs	r5, r3, r5
 8020638:	1e6b      	subs	r3, r5, #1
 802063a:	9305      	str	r3, [sp, #20]
 802063c:	bf45      	ittet	mi
 802063e:	f1c5 0301 	rsbmi	r3, r5, #1
 8020642:	9304      	strmi	r3, [sp, #16]
 8020644:	2300      	movpl	r3, #0
 8020646:	2300      	movmi	r3, #0
 8020648:	bf4c      	ite	mi
 802064a:	9305      	strmi	r3, [sp, #20]
 802064c:	9304      	strpl	r3, [sp, #16]
 802064e:	9b00      	ldr	r3, [sp, #0]
 8020650:	2b00      	cmp	r3, #0
 8020652:	db3d      	blt.n	80206d0 <_dtoa_r+0x248>
 8020654:	9b05      	ldr	r3, [sp, #20]
 8020656:	9a00      	ldr	r2, [sp, #0]
 8020658:	920a      	str	r2, [sp, #40]	; 0x28
 802065a:	4413      	add	r3, r2
 802065c:	9305      	str	r3, [sp, #20]
 802065e:	2300      	movs	r3, #0
 8020660:	9307      	str	r3, [sp, #28]
 8020662:	9b06      	ldr	r3, [sp, #24]
 8020664:	2b09      	cmp	r3, #9
 8020666:	f200 8089 	bhi.w	802077c <_dtoa_r+0x2f4>
 802066a:	2b05      	cmp	r3, #5
 802066c:	bfc4      	itt	gt
 802066e:	3b04      	subgt	r3, #4
 8020670:	9306      	strgt	r3, [sp, #24]
 8020672:	9b06      	ldr	r3, [sp, #24]
 8020674:	f1a3 0302 	sub.w	r3, r3, #2
 8020678:	bfcc      	ite	gt
 802067a:	2500      	movgt	r5, #0
 802067c:	2501      	movle	r5, #1
 802067e:	2b03      	cmp	r3, #3
 8020680:	f200 8087 	bhi.w	8020792 <_dtoa_r+0x30a>
 8020684:	e8df f003 	tbb	[pc, r3]
 8020688:	59383a2d 	.word	0x59383a2d
 802068c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020690:	441d      	add	r5, r3
 8020692:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020696:	2b20      	cmp	r3, #32
 8020698:	bfc1      	itttt	gt
 802069a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802069e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80206a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80206a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80206aa:	bfda      	itte	le
 80206ac:	f1c3 0320 	rsble	r3, r3, #32
 80206b0:	fa06 f003 	lslle.w	r0, r6, r3
 80206b4:	4318      	orrgt	r0, r3
 80206b6:	f7df ff25 	bl	8000504 <__aeabi_ui2d>
 80206ba:	2301      	movs	r3, #1
 80206bc:	4606      	mov	r6, r0
 80206be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80206c2:	3d01      	subs	r5, #1
 80206c4:	930e      	str	r3, [sp, #56]	; 0x38
 80206c6:	e76a      	b.n	802059e <_dtoa_r+0x116>
 80206c8:	2301      	movs	r3, #1
 80206ca:	e7b2      	b.n	8020632 <_dtoa_r+0x1aa>
 80206cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80206ce:	e7b1      	b.n	8020634 <_dtoa_r+0x1ac>
 80206d0:	9b04      	ldr	r3, [sp, #16]
 80206d2:	9a00      	ldr	r2, [sp, #0]
 80206d4:	1a9b      	subs	r3, r3, r2
 80206d6:	9304      	str	r3, [sp, #16]
 80206d8:	4253      	negs	r3, r2
 80206da:	9307      	str	r3, [sp, #28]
 80206dc:	2300      	movs	r3, #0
 80206de:	930a      	str	r3, [sp, #40]	; 0x28
 80206e0:	e7bf      	b.n	8020662 <_dtoa_r+0x1da>
 80206e2:	2300      	movs	r3, #0
 80206e4:	9308      	str	r3, [sp, #32]
 80206e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	dc55      	bgt.n	8020798 <_dtoa_r+0x310>
 80206ec:	2301      	movs	r3, #1
 80206ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80206f2:	461a      	mov	r2, r3
 80206f4:	9209      	str	r2, [sp, #36]	; 0x24
 80206f6:	e00c      	b.n	8020712 <_dtoa_r+0x28a>
 80206f8:	2301      	movs	r3, #1
 80206fa:	e7f3      	b.n	80206e4 <_dtoa_r+0x25c>
 80206fc:	2300      	movs	r3, #0
 80206fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020700:	9308      	str	r3, [sp, #32]
 8020702:	9b00      	ldr	r3, [sp, #0]
 8020704:	4413      	add	r3, r2
 8020706:	9302      	str	r3, [sp, #8]
 8020708:	3301      	adds	r3, #1
 802070a:	2b01      	cmp	r3, #1
 802070c:	9303      	str	r3, [sp, #12]
 802070e:	bfb8      	it	lt
 8020710:	2301      	movlt	r3, #1
 8020712:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020714:	2200      	movs	r2, #0
 8020716:	6042      	str	r2, [r0, #4]
 8020718:	2204      	movs	r2, #4
 802071a:	f102 0614 	add.w	r6, r2, #20
 802071e:	429e      	cmp	r6, r3
 8020720:	6841      	ldr	r1, [r0, #4]
 8020722:	d93d      	bls.n	80207a0 <_dtoa_r+0x318>
 8020724:	4620      	mov	r0, r4
 8020726:	f001 f911 	bl	802194c <_Balloc>
 802072a:	9001      	str	r0, [sp, #4]
 802072c:	2800      	cmp	r0, #0
 802072e:	d13b      	bne.n	80207a8 <_dtoa_r+0x320>
 8020730:	4b11      	ldr	r3, [pc, #68]	; (8020778 <_dtoa_r+0x2f0>)
 8020732:	4602      	mov	r2, r0
 8020734:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020738:	e6c0      	b.n	80204bc <_dtoa_r+0x34>
 802073a:	2301      	movs	r3, #1
 802073c:	e7df      	b.n	80206fe <_dtoa_r+0x276>
 802073e:	bf00      	nop
 8020740:	636f4361 	.word	0x636f4361
 8020744:	3fd287a7 	.word	0x3fd287a7
 8020748:	8b60c8b3 	.word	0x8b60c8b3
 802074c:	3fc68a28 	.word	0x3fc68a28
 8020750:	509f79fb 	.word	0x509f79fb
 8020754:	3fd34413 	.word	0x3fd34413
 8020758:	080260be 	.word	0x080260be
 802075c:	080260d5 	.word	0x080260d5
 8020760:	7ff00000 	.word	0x7ff00000
 8020764:	080260ba 	.word	0x080260ba
 8020768:	080260b1 	.word	0x080260b1
 802076c:	08025f31 	.word	0x08025f31
 8020770:	3ff80000 	.word	0x3ff80000
 8020774:	08026240 	.word	0x08026240
 8020778:	08026130 	.word	0x08026130
 802077c:	2501      	movs	r5, #1
 802077e:	2300      	movs	r3, #0
 8020780:	9306      	str	r3, [sp, #24]
 8020782:	9508      	str	r5, [sp, #32]
 8020784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020788:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802078c:	2200      	movs	r2, #0
 802078e:	2312      	movs	r3, #18
 8020790:	e7b0      	b.n	80206f4 <_dtoa_r+0x26c>
 8020792:	2301      	movs	r3, #1
 8020794:	9308      	str	r3, [sp, #32]
 8020796:	e7f5      	b.n	8020784 <_dtoa_r+0x2fc>
 8020798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802079a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802079e:	e7b8      	b.n	8020712 <_dtoa_r+0x28a>
 80207a0:	3101      	adds	r1, #1
 80207a2:	6041      	str	r1, [r0, #4]
 80207a4:	0052      	lsls	r2, r2, #1
 80207a6:	e7b8      	b.n	802071a <_dtoa_r+0x292>
 80207a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80207aa:	9a01      	ldr	r2, [sp, #4]
 80207ac:	601a      	str	r2, [r3, #0]
 80207ae:	9b03      	ldr	r3, [sp, #12]
 80207b0:	2b0e      	cmp	r3, #14
 80207b2:	f200 809d 	bhi.w	80208f0 <_dtoa_r+0x468>
 80207b6:	2d00      	cmp	r5, #0
 80207b8:	f000 809a 	beq.w	80208f0 <_dtoa_r+0x468>
 80207bc:	9b00      	ldr	r3, [sp, #0]
 80207be:	2b00      	cmp	r3, #0
 80207c0:	dd32      	ble.n	8020828 <_dtoa_r+0x3a0>
 80207c2:	4ab7      	ldr	r2, [pc, #732]	; (8020aa0 <_dtoa_r+0x618>)
 80207c4:	f003 030f 	and.w	r3, r3, #15
 80207c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80207cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80207d0:	9b00      	ldr	r3, [sp, #0]
 80207d2:	05d8      	lsls	r0, r3, #23
 80207d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80207d8:	d516      	bpl.n	8020808 <_dtoa_r+0x380>
 80207da:	4bb2      	ldr	r3, [pc, #712]	; (8020aa4 <_dtoa_r+0x61c>)
 80207dc:	ec51 0b19 	vmov	r0, r1, d9
 80207e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80207e4:	f7e0 f832 	bl	800084c <__aeabi_ddiv>
 80207e8:	f007 070f 	and.w	r7, r7, #15
 80207ec:	4682      	mov	sl, r0
 80207ee:	468b      	mov	fp, r1
 80207f0:	2503      	movs	r5, #3
 80207f2:	4eac      	ldr	r6, [pc, #688]	; (8020aa4 <_dtoa_r+0x61c>)
 80207f4:	b957      	cbnz	r7, 802080c <_dtoa_r+0x384>
 80207f6:	4642      	mov	r2, r8
 80207f8:	464b      	mov	r3, r9
 80207fa:	4650      	mov	r0, sl
 80207fc:	4659      	mov	r1, fp
 80207fe:	f7e0 f825 	bl	800084c <__aeabi_ddiv>
 8020802:	4682      	mov	sl, r0
 8020804:	468b      	mov	fp, r1
 8020806:	e028      	b.n	802085a <_dtoa_r+0x3d2>
 8020808:	2502      	movs	r5, #2
 802080a:	e7f2      	b.n	80207f2 <_dtoa_r+0x36a>
 802080c:	07f9      	lsls	r1, r7, #31
 802080e:	d508      	bpl.n	8020822 <_dtoa_r+0x39a>
 8020810:	4640      	mov	r0, r8
 8020812:	4649      	mov	r1, r9
 8020814:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020818:	f7df feee 	bl	80005f8 <__aeabi_dmul>
 802081c:	3501      	adds	r5, #1
 802081e:	4680      	mov	r8, r0
 8020820:	4689      	mov	r9, r1
 8020822:	107f      	asrs	r7, r7, #1
 8020824:	3608      	adds	r6, #8
 8020826:	e7e5      	b.n	80207f4 <_dtoa_r+0x36c>
 8020828:	f000 809b 	beq.w	8020962 <_dtoa_r+0x4da>
 802082c:	9b00      	ldr	r3, [sp, #0]
 802082e:	4f9d      	ldr	r7, [pc, #628]	; (8020aa4 <_dtoa_r+0x61c>)
 8020830:	425e      	negs	r6, r3
 8020832:	4b9b      	ldr	r3, [pc, #620]	; (8020aa0 <_dtoa_r+0x618>)
 8020834:	f006 020f 	and.w	r2, r6, #15
 8020838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020840:	ec51 0b19 	vmov	r0, r1, d9
 8020844:	f7df fed8 	bl	80005f8 <__aeabi_dmul>
 8020848:	1136      	asrs	r6, r6, #4
 802084a:	4682      	mov	sl, r0
 802084c:	468b      	mov	fp, r1
 802084e:	2300      	movs	r3, #0
 8020850:	2502      	movs	r5, #2
 8020852:	2e00      	cmp	r6, #0
 8020854:	d17a      	bne.n	802094c <_dtoa_r+0x4c4>
 8020856:	2b00      	cmp	r3, #0
 8020858:	d1d3      	bne.n	8020802 <_dtoa_r+0x37a>
 802085a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802085c:	2b00      	cmp	r3, #0
 802085e:	f000 8082 	beq.w	8020966 <_dtoa_r+0x4de>
 8020862:	4b91      	ldr	r3, [pc, #580]	; (8020aa8 <_dtoa_r+0x620>)
 8020864:	2200      	movs	r2, #0
 8020866:	4650      	mov	r0, sl
 8020868:	4659      	mov	r1, fp
 802086a:	f7e0 f937 	bl	8000adc <__aeabi_dcmplt>
 802086e:	2800      	cmp	r0, #0
 8020870:	d079      	beq.n	8020966 <_dtoa_r+0x4de>
 8020872:	9b03      	ldr	r3, [sp, #12]
 8020874:	2b00      	cmp	r3, #0
 8020876:	d076      	beq.n	8020966 <_dtoa_r+0x4de>
 8020878:	9b02      	ldr	r3, [sp, #8]
 802087a:	2b00      	cmp	r3, #0
 802087c:	dd36      	ble.n	80208ec <_dtoa_r+0x464>
 802087e:	9b00      	ldr	r3, [sp, #0]
 8020880:	4650      	mov	r0, sl
 8020882:	4659      	mov	r1, fp
 8020884:	1e5f      	subs	r7, r3, #1
 8020886:	2200      	movs	r2, #0
 8020888:	4b88      	ldr	r3, [pc, #544]	; (8020aac <_dtoa_r+0x624>)
 802088a:	f7df feb5 	bl	80005f8 <__aeabi_dmul>
 802088e:	9e02      	ldr	r6, [sp, #8]
 8020890:	4682      	mov	sl, r0
 8020892:	468b      	mov	fp, r1
 8020894:	3501      	adds	r5, #1
 8020896:	4628      	mov	r0, r5
 8020898:	f7df fe44 	bl	8000524 <__aeabi_i2d>
 802089c:	4652      	mov	r2, sl
 802089e:	465b      	mov	r3, fp
 80208a0:	f7df feaa 	bl	80005f8 <__aeabi_dmul>
 80208a4:	4b82      	ldr	r3, [pc, #520]	; (8020ab0 <_dtoa_r+0x628>)
 80208a6:	2200      	movs	r2, #0
 80208a8:	f7df fcf0 	bl	800028c <__adddf3>
 80208ac:	46d0      	mov	r8, sl
 80208ae:	46d9      	mov	r9, fp
 80208b0:	4682      	mov	sl, r0
 80208b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80208b6:	2e00      	cmp	r6, #0
 80208b8:	d158      	bne.n	802096c <_dtoa_r+0x4e4>
 80208ba:	4b7e      	ldr	r3, [pc, #504]	; (8020ab4 <_dtoa_r+0x62c>)
 80208bc:	2200      	movs	r2, #0
 80208be:	4640      	mov	r0, r8
 80208c0:	4649      	mov	r1, r9
 80208c2:	f7df fce1 	bl	8000288 <__aeabi_dsub>
 80208c6:	4652      	mov	r2, sl
 80208c8:	465b      	mov	r3, fp
 80208ca:	4680      	mov	r8, r0
 80208cc:	4689      	mov	r9, r1
 80208ce:	f7e0 f923 	bl	8000b18 <__aeabi_dcmpgt>
 80208d2:	2800      	cmp	r0, #0
 80208d4:	f040 8295 	bne.w	8020e02 <_dtoa_r+0x97a>
 80208d8:	4652      	mov	r2, sl
 80208da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80208de:	4640      	mov	r0, r8
 80208e0:	4649      	mov	r1, r9
 80208e2:	f7e0 f8fb 	bl	8000adc <__aeabi_dcmplt>
 80208e6:	2800      	cmp	r0, #0
 80208e8:	f040 8289 	bne.w	8020dfe <_dtoa_r+0x976>
 80208ec:	ec5b ab19 	vmov	sl, fp, d9
 80208f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	f2c0 8148 	blt.w	8020b88 <_dtoa_r+0x700>
 80208f8:	9a00      	ldr	r2, [sp, #0]
 80208fa:	2a0e      	cmp	r2, #14
 80208fc:	f300 8144 	bgt.w	8020b88 <_dtoa_r+0x700>
 8020900:	4b67      	ldr	r3, [pc, #412]	; (8020aa0 <_dtoa_r+0x618>)
 8020902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020906:	e9d3 8900 	ldrd	r8, r9, [r3]
 802090a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802090c:	2b00      	cmp	r3, #0
 802090e:	f280 80d5 	bge.w	8020abc <_dtoa_r+0x634>
 8020912:	9b03      	ldr	r3, [sp, #12]
 8020914:	2b00      	cmp	r3, #0
 8020916:	f300 80d1 	bgt.w	8020abc <_dtoa_r+0x634>
 802091a:	f040 826f 	bne.w	8020dfc <_dtoa_r+0x974>
 802091e:	4b65      	ldr	r3, [pc, #404]	; (8020ab4 <_dtoa_r+0x62c>)
 8020920:	2200      	movs	r2, #0
 8020922:	4640      	mov	r0, r8
 8020924:	4649      	mov	r1, r9
 8020926:	f7df fe67 	bl	80005f8 <__aeabi_dmul>
 802092a:	4652      	mov	r2, sl
 802092c:	465b      	mov	r3, fp
 802092e:	f7e0 f8e9 	bl	8000b04 <__aeabi_dcmpge>
 8020932:	9e03      	ldr	r6, [sp, #12]
 8020934:	4637      	mov	r7, r6
 8020936:	2800      	cmp	r0, #0
 8020938:	f040 8245 	bne.w	8020dc6 <_dtoa_r+0x93e>
 802093c:	9d01      	ldr	r5, [sp, #4]
 802093e:	2331      	movs	r3, #49	; 0x31
 8020940:	f805 3b01 	strb.w	r3, [r5], #1
 8020944:	9b00      	ldr	r3, [sp, #0]
 8020946:	3301      	adds	r3, #1
 8020948:	9300      	str	r3, [sp, #0]
 802094a:	e240      	b.n	8020dce <_dtoa_r+0x946>
 802094c:	07f2      	lsls	r2, r6, #31
 802094e:	d505      	bpl.n	802095c <_dtoa_r+0x4d4>
 8020950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020954:	f7df fe50 	bl	80005f8 <__aeabi_dmul>
 8020958:	3501      	adds	r5, #1
 802095a:	2301      	movs	r3, #1
 802095c:	1076      	asrs	r6, r6, #1
 802095e:	3708      	adds	r7, #8
 8020960:	e777      	b.n	8020852 <_dtoa_r+0x3ca>
 8020962:	2502      	movs	r5, #2
 8020964:	e779      	b.n	802085a <_dtoa_r+0x3d2>
 8020966:	9f00      	ldr	r7, [sp, #0]
 8020968:	9e03      	ldr	r6, [sp, #12]
 802096a:	e794      	b.n	8020896 <_dtoa_r+0x40e>
 802096c:	9901      	ldr	r1, [sp, #4]
 802096e:	4b4c      	ldr	r3, [pc, #304]	; (8020aa0 <_dtoa_r+0x618>)
 8020970:	4431      	add	r1, r6
 8020972:	910d      	str	r1, [sp, #52]	; 0x34
 8020974:	9908      	ldr	r1, [sp, #32]
 8020976:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802097a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802097e:	2900      	cmp	r1, #0
 8020980:	d043      	beq.n	8020a0a <_dtoa_r+0x582>
 8020982:	494d      	ldr	r1, [pc, #308]	; (8020ab8 <_dtoa_r+0x630>)
 8020984:	2000      	movs	r0, #0
 8020986:	f7df ff61 	bl	800084c <__aeabi_ddiv>
 802098a:	4652      	mov	r2, sl
 802098c:	465b      	mov	r3, fp
 802098e:	f7df fc7b 	bl	8000288 <__aeabi_dsub>
 8020992:	9d01      	ldr	r5, [sp, #4]
 8020994:	4682      	mov	sl, r0
 8020996:	468b      	mov	fp, r1
 8020998:	4649      	mov	r1, r9
 802099a:	4640      	mov	r0, r8
 802099c:	f7e0 f8dc 	bl	8000b58 <__aeabi_d2iz>
 80209a0:	4606      	mov	r6, r0
 80209a2:	f7df fdbf 	bl	8000524 <__aeabi_i2d>
 80209a6:	4602      	mov	r2, r0
 80209a8:	460b      	mov	r3, r1
 80209aa:	4640      	mov	r0, r8
 80209ac:	4649      	mov	r1, r9
 80209ae:	f7df fc6b 	bl	8000288 <__aeabi_dsub>
 80209b2:	3630      	adds	r6, #48	; 0x30
 80209b4:	f805 6b01 	strb.w	r6, [r5], #1
 80209b8:	4652      	mov	r2, sl
 80209ba:	465b      	mov	r3, fp
 80209bc:	4680      	mov	r8, r0
 80209be:	4689      	mov	r9, r1
 80209c0:	f7e0 f88c 	bl	8000adc <__aeabi_dcmplt>
 80209c4:	2800      	cmp	r0, #0
 80209c6:	d163      	bne.n	8020a90 <_dtoa_r+0x608>
 80209c8:	4642      	mov	r2, r8
 80209ca:	464b      	mov	r3, r9
 80209cc:	4936      	ldr	r1, [pc, #216]	; (8020aa8 <_dtoa_r+0x620>)
 80209ce:	2000      	movs	r0, #0
 80209d0:	f7df fc5a 	bl	8000288 <__aeabi_dsub>
 80209d4:	4652      	mov	r2, sl
 80209d6:	465b      	mov	r3, fp
 80209d8:	f7e0 f880 	bl	8000adc <__aeabi_dcmplt>
 80209dc:	2800      	cmp	r0, #0
 80209de:	f040 80b5 	bne.w	8020b4c <_dtoa_r+0x6c4>
 80209e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209e4:	429d      	cmp	r5, r3
 80209e6:	d081      	beq.n	80208ec <_dtoa_r+0x464>
 80209e8:	4b30      	ldr	r3, [pc, #192]	; (8020aac <_dtoa_r+0x624>)
 80209ea:	2200      	movs	r2, #0
 80209ec:	4650      	mov	r0, sl
 80209ee:	4659      	mov	r1, fp
 80209f0:	f7df fe02 	bl	80005f8 <__aeabi_dmul>
 80209f4:	4b2d      	ldr	r3, [pc, #180]	; (8020aac <_dtoa_r+0x624>)
 80209f6:	4682      	mov	sl, r0
 80209f8:	468b      	mov	fp, r1
 80209fa:	4640      	mov	r0, r8
 80209fc:	4649      	mov	r1, r9
 80209fe:	2200      	movs	r2, #0
 8020a00:	f7df fdfa 	bl	80005f8 <__aeabi_dmul>
 8020a04:	4680      	mov	r8, r0
 8020a06:	4689      	mov	r9, r1
 8020a08:	e7c6      	b.n	8020998 <_dtoa_r+0x510>
 8020a0a:	4650      	mov	r0, sl
 8020a0c:	4659      	mov	r1, fp
 8020a0e:	f7df fdf3 	bl	80005f8 <__aeabi_dmul>
 8020a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a14:	9d01      	ldr	r5, [sp, #4]
 8020a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a18:	4682      	mov	sl, r0
 8020a1a:	468b      	mov	fp, r1
 8020a1c:	4649      	mov	r1, r9
 8020a1e:	4640      	mov	r0, r8
 8020a20:	f7e0 f89a 	bl	8000b58 <__aeabi_d2iz>
 8020a24:	4606      	mov	r6, r0
 8020a26:	f7df fd7d 	bl	8000524 <__aeabi_i2d>
 8020a2a:	3630      	adds	r6, #48	; 0x30
 8020a2c:	4602      	mov	r2, r0
 8020a2e:	460b      	mov	r3, r1
 8020a30:	4640      	mov	r0, r8
 8020a32:	4649      	mov	r1, r9
 8020a34:	f7df fc28 	bl	8000288 <__aeabi_dsub>
 8020a38:	f805 6b01 	strb.w	r6, [r5], #1
 8020a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a3e:	429d      	cmp	r5, r3
 8020a40:	4680      	mov	r8, r0
 8020a42:	4689      	mov	r9, r1
 8020a44:	f04f 0200 	mov.w	r2, #0
 8020a48:	d124      	bne.n	8020a94 <_dtoa_r+0x60c>
 8020a4a:	4b1b      	ldr	r3, [pc, #108]	; (8020ab8 <_dtoa_r+0x630>)
 8020a4c:	4650      	mov	r0, sl
 8020a4e:	4659      	mov	r1, fp
 8020a50:	f7df fc1c 	bl	800028c <__adddf3>
 8020a54:	4602      	mov	r2, r0
 8020a56:	460b      	mov	r3, r1
 8020a58:	4640      	mov	r0, r8
 8020a5a:	4649      	mov	r1, r9
 8020a5c:	f7e0 f85c 	bl	8000b18 <__aeabi_dcmpgt>
 8020a60:	2800      	cmp	r0, #0
 8020a62:	d173      	bne.n	8020b4c <_dtoa_r+0x6c4>
 8020a64:	4652      	mov	r2, sl
 8020a66:	465b      	mov	r3, fp
 8020a68:	4913      	ldr	r1, [pc, #76]	; (8020ab8 <_dtoa_r+0x630>)
 8020a6a:	2000      	movs	r0, #0
 8020a6c:	f7df fc0c 	bl	8000288 <__aeabi_dsub>
 8020a70:	4602      	mov	r2, r0
 8020a72:	460b      	mov	r3, r1
 8020a74:	4640      	mov	r0, r8
 8020a76:	4649      	mov	r1, r9
 8020a78:	f7e0 f830 	bl	8000adc <__aeabi_dcmplt>
 8020a7c:	2800      	cmp	r0, #0
 8020a7e:	f43f af35 	beq.w	80208ec <_dtoa_r+0x464>
 8020a82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020a84:	1e6b      	subs	r3, r5, #1
 8020a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020a8c:	2b30      	cmp	r3, #48	; 0x30
 8020a8e:	d0f8      	beq.n	8020a82 <_dtoa_r+0x5fa>
 8020a90:	9700      	str	r7, [sp, #0]
 8020a92:	e049      	b.n	8020b28 <_dtoa_r+0x6a0>
 8020a94:	4b05      	ldr	r3, [pc, #20]	; (8020aac <_dtoa_r+0x624>)
 8020a96:	f7df fdaf 	bl	80005f8 <__aeabi_dmul>
 8020a9a:	4680      	mov	r8, r0
 8020a9c:	4689      	mov	r9, r1
 8020a9e:	e7bd      	b.n	8020a1c <_dtoa_r+0x594>
 8020aa0:	08026240 	.word	0x08026240
 8020aa4:	08026218 	.word	0x08026218
 8020aa8:	3ff00000 	.word	0x3ff00000
 8020aac:	40240000 	.word	0x40240000
 8020ab0:	401c0000 	.word	0x401c0000
 8020ab4:	40140000 	.word	0x40140000
 8020ab8:	3fe00000 	.word	0x3fe00000
 8020abc:	9d01      	ldr	r5, [sp, #4]
 8020abe:	4656      	mov	r6, sl
 8020ac0:	465f      	mov	r7, fp
 8020ac2:	4642      	mov	r2, r8
 8020ac4:	464b      	mov	r3, r9
 8020ac6:	4630      	mov	r0, r6
 8020ac8:	4639      	mov	r1, r7
 8020aca:	f7df febf 	bl	800084c <__aeabi_ddiv>
 8020ace:	f7e0 f843 	bl	8000b58 <__aeabi_d2iz>
 8020ad2:	4682      	mov	sl, r0
 8020ad4:	f7df fd26 	bl	8000524 <__aeabi_i2d>
 8020ad8:	4642      	mov	r2, r8
 8020ada:	464b      	mov	r3, r9
 8020adc:	f7df fd8c 	bl	80005f8 <__aeabi_dmul>
 8020ae0:	4602      	mov	r2, r0
 8020ae2:	460b      	mov	r3, r1
 8020ae4:	4630      	mov	r0, r6
 8020ae6:	4639      	mov	r1, r7
 8020ae8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8020aec:	f7df fbcc 	bl	8000288 <__aeabi_dsub>
 8020af0:	f805 6b01 	strb.w	r6, [r5], #1
 8020af4:	9e01      	ldr	r6, [sp, #4]
 8020af6:	9f03      	ldr	r7, [sp, #12]
 8020af8:	1bae      	subs	r6, r5, r6
 8020afa:	42b7      	cmp	r7, r6
 8020afc:	4602      	mov	r2, r0
 8020afe:	460b      	mov	r3, r1
 8020b00:	d135      	bne.n	8020b6e <_dtoa_r+0x6e6>
 8020b02:	f7df fbc3 	bl	800028c <__adddf3>
 8020b06:	4642      	mov	r2, r8
 8020b08:	464b      	mov	r3, r9
 8020b0a:	4606      	mov	r6, r0
 8020b0c:	460f      	mov	r7, r1
 8020b0e:	f7e0 f803 	bl	8000b18 <__aeabi_dcmpgt>
 8020b12:	b9d0      	cbnz	r0, 8020b4a <_dtoa_r+0x6c2>
 8020b14:	4642      	mov	r2, r8
 8020b16:	464b      	mov	r3, r9
 8020b18:	4630      	mov	r0, r6
 8020b1a:	4639      	mov	r1, r7
 8020b1c:	f7df ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8020b20:	b110      	cbz	r0, 8020b28 <_dtoa_r+0x6a0>
 8020b22:	f01a 0f01 	tst.w	sl, #1
 8020b26:	d110      	bne.n	8020b4a <_dtoa_r+0x6c2>
 8020b28:	4620      	mov	r0, r4
 8020b2a:	ee18 1a10 	vmov	r1, s16
 8020b2e:	f000 ff4d 	bl	80219cc <_Bfree>
 8020b32:	2300      	movs	r3, #0
 8020b34:	9800      	ldr	r0, [sp, #0]
 8020b36:	702b      	strb	r3, [r5, #0]
 8020b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b3a:	3001      	adds	r0, #1
 8020b3c:	6018      	str	r0, [r3, #0]
 8020b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	f43f acf1 	beq.w	8020528 <_dtoa_r+0xa0>
 8020b46:	601d      	str	r5, [r3, #0]
 8020b48:	e4ee      	b.n	8020528 <_dtoa_r+0xa0>
 8020b4a:	9f00      	ldr	r7, [sp, #0]
 8020b4c:	462b      	mov	r3, r5
 8020b4e:	461d      	mov	r5, r3
 8020b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020b54:	2a39      	cmp	r2, #57	; 0x39
 8020b56:	d106      	bne.n	8020b66 <_dtoa_r+0x6de>
 8020b58:	9a01      	ldr	r2, [sp, #4]
 8020b5a:	429a      	cmp	r2, r3
 8020b5c:	d1f7      	bne.n	8020b4e <_dtoa_r+0x6c6>
 8020b5e:	9901      	ldr	r1, [sp, #4]
 8020b60:	2230      	movs	r2, #48	; 0x30
 8020b62:	3701      	adds	r7, #1
 8020b64:	700a      	strb	r2, [r1, #0]
 8020b66:	781a      	ldrb	r2, [r3, #0]
 8020b68:	3201      	adds	r2, #1
 8020b6a:	701a      	strb	r2, [r3, #0]
 8020b6c:	e790      	b.n	8020a90 <_dtoa_r+0x608>
 8020b6e:	4ba6      	ldr	r3, [pc, #664]	; (8020e08 <_dtoa_r+0x980>)
 8020b70:	2200      	movs	r2, #0
 8020b72:	f7df fd41 	bl	80005f8 <__aeabi_dmul>
 8020b76:	2200      	movs	r2, #0
 8020b78:	2300      	movs	r3, #0
 8020b7a:	4606      	mov	r6, r0
 8020b7c:	460f      	mov	r7, r1
 8020b7e:	f7df ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8020b82:	2800      	cmp	r0, #0
 8020b84:	d09d      	beq.n	8020ac2 <_dtoa_r+0x63a>
 8020b86:	e7cf      	b.n	8020b28 <_dtoa_r+0x6a0>
 8020b88:	9a08      	ldr	r2, [sp, #32]
 8020b8a:	2a00      	cmp	r2, #0
 8020b8c:	f000 80d7 	beq.w	8020d3e <_dtoa_r+0x8b6>
 8020b90:	9a06      	ldr	r2, [sp, #24]
 8020b92:	2a01      	cmp	r2, #1
 8020b94:	f300 80ba 	bgt.w	8020d0c <_dtoa_r+0x884>
 8020b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b9a:	2a00      	cmp	r2, #0
 8020b9c:	f000 80b2 	beq.w	8020d04 <_dtoa_r+0x87c>
 8020ba0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020ba4:	9e07      	ldr	r6, [sp, #28]
 8020ba6:	9d04      	ldr	r5, [sp, #16]
 8020ba8:	9a04      	ldr	r2, [sp, #16]
 8020baa:	441a      	add	r2, r3
 8020bac:	9204      	str	r2, [sp, #16]
 8020bae:	9a05      	ldr	r2, [sp, #20]
 8020bb0:	2101      	movs	r1, #1
 8020bb2:	441a      	add	r2, r3
 8020bb4:	4620      	mov	r0, r4
 8020bb6:	9205      	str	r2, [sp, #20]
 8020bb8:	f001 f80a 	bl	8021bd0 <__i2b>
 8020bbc:	4607      	mov	r7, r0
 8020bbe:	2d00      	cmp	r5, #0
 8020bc0:	dd0c      	ble.n	8020bdc <_dtoa_r+0x754>
 8020bc2:	9b05      	ldr	r3, [sp, #20]
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	dd09      	ble.n	8020bdc <_dtoa_r+0x754>
 8020bc8:	42ab      	cmp	r3, r5
 8020bca:	9a04      	ldr	r2, [sp, #16]
 8020bcc:	bfa8      	it	ge
 8020bce:	462b      	movge	r3, r5
 8020bd0:	1ad2      	subs	r2, r2, r3
 8020bd2:	9204      	str	r2, [sp, #16]
 8020bd4:	9a05      	ldr	r2, [sp, #20]
 8020bd6:	1aed      	subs	r5, r5, r3
 8020bd8:	1ad3      	subs	r3, r2, r3
 8020bda:	9305      	str	r3, [sp, #20]
 8020bdc:	9b07      	ldr	r3, [sp, #28]
 8020bde:	b31b      	cbz	r3, 8020c28 <_dtoa_r+0x7a0>
 8020be0:	9b08      	ldr	r3, [sp, #32]
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	f000 80af 	beq.w	8020d46 <_dtoa_r+0x8be>
 8020be8:	2e00      	cmp	r6, #0
 8020bea:	dd13      	ble.n	8020c14 <_dtoa_r+0x78c>
 8020bec:	4639      	mov	r1, r7
 8020bee:	4632      	mov	r2, r6
 8020bf0:	4620      	mov	r0, r4
 8020bf2:	f001 f8ad 	bl	8021d50 <__pow5mult>
 8020bf6:	ee18 2a10 	vmov	r2, s16
 8020bfa:	4601      	mov	r1, r0
 8020bfc:	4607      	mov	r7, r0
 8020bfe:	4620      	mov	r0, r4
 8020c00:	f000 fffc 	bl	8021bfc <__multiply>
 8020c04:	ee18 1a10 	vmov	r1, s16
 8020c08:	4680      	mov	r8, r0
 8020c0a:	4620      	mov	r0, r4
 8020c0c:	f000 fede 	bl	80219cc <_Bfree>
 8020c10:	ee08 8a10 	vmov	s16, r8
 8020c14:	9b07      	ldr	r3, [sp, #28]
 8020c16:	1b9a      	subs	r2, r3, r6
 8020c18:	d006      	beq.n	8020c28 <_dtoa_r+0x7a0>
 8020c1a:	ee18 1a10 	vmov	r1, s16
 8020c1e:	4620      	mov	r0, r4
 8020c20:	f001 f896 	bl	8021d50 <__pow5mult>
 8020c24:	ee08 0a10 	vmov	s16, r0
 8020c28:	2101      	movs	r1, #1
 8020c2a:	4620      	mov	r0, r4
 8020c2c:	f000 ffd0 	bl	8021bd0 <__i2b>
 8020c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	4606      	mov	r6, r0
 8020c36:	f340 8088 	ble.w	8020d4a <_dtoa_r+0x8c2>
 8020c3a:	461a      	mov	r2, r3
 8020c3c:	4601      	mov	r1, r0
 8020c3e:	4620      	mov	r0, r4
 8020c40:	f001 f886 	bl	8021d50 <__pow5mult>
 8020c44:	9b06      	ldr	r3, [sp, #24]
 8020c46:	2b01      	cmp	r3, #1
 8020c48:	4606      	mov	r6, r0
 8020c4a:	f340 8081 	ble.w	8020d50 <_dtoa_r+0x8c8>
 8020c4e:	f04f 0800 	mov.w	r8, #0
 8020c52:	6933      	ldr	r3, [r6, #16]
 8020c54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020c58:	6918      	ldr	r0, [r3, #16]
 8020c5a:	f000 ff69 	bl	8021b30 <__hi0bits>
 8020c5e:	f1c0 0020 	rsb	r0, r0, #32
 8020c62:	9b05      	ldr	r3, [sp, #20]
 8020c64:	4418      	add	r0, r3
 8020c66:	f010 001f 	ands.w	r0, r0, #31
 8020c6a:	f000 8092 	beq.w	8020d92 <_dtoa_r+0x90a>
 8020c6e:	f1c0 0320 	rsb	r3, r0, #32
 8020c72:	2b04      	cmp	r3, #4
 8020c74:	f340 808a 	ble.w	8020d8c <_dtoa_r+0x904>
 8020c78:	f1c0 001c 	rsb	r0, r0, #28
 8020c7c:	9b04      	ldr	r3, [sp, #16]
 8020c7e:	4403      	add	r3, r0
 8020c80:	9304      	str	r3, [sp, #16]
 8020c82:	9b05      	ldr	r3, [sp, #20]
 8020c84:	4403      	add	r3, r0
 8020c86:	4405      	add	r5, r0
 8020c88:	9305      	str	r3, [sp, #20]
 8020c8a:	9b04      	ldr	r3, [sp, #16]
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	dd07      	ble.n	8020ca0 <_dtoa_r+0x818>
 8020c90:	ee18 1a10 	vmov	r1, s16
 8020c94:	461a      	mov	r2, r3
 8020c96:	4620      	mov	r0, r4
 8020c98:	f001 f8b4 	bl	8021e04 <__lshift>
 8020c9c:	ee08 0a10 	vmov	s16, r0
 8020ca0:	9b05      	ldr	r3, [sp, #20]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	dd05      	ble.n	8020cb2 <_dtoa_r+0x82a>
 8020ca6:	4631      	mov	r1, r6
 8020ca8:	461a      	mov	r2, r3
 8020caa:	4620      	mov	r0, r4
 8020cac:	f001 f8aa 	bl	8021e04 <__lshift>
 8020cb0:	4606      	mov	r6, r0
 8020cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d06e      	beq.n	8020d96 <_dtoa_r+0x90e>
 8020cb8:	ee18 0a10 	vmov	r0, s16
 8020cbc:	4631      	mov	r1, r6
 8020cbe:	f001 f911 	bl	8021ee4 <__mcmp>
 8020cc2:	2800      	cmp	r0, #0
 8020cc4:	da67      	bge.n	8020d96 <_dtoa_r+0x90e>
 8020cc6:	9b00      	ldr	r3, [sp, #0]
 8020cc8:	3b01      	subs	r3, #1
 8020cca:	ee18 1a10 	vmov	r1, s16
 8020cce:	9300      	str	r3, [sp, #0]
 8020cd0:	220a      	movs	r2, #10
 8020cd2:	2300      	movs	r3, #0
 8020cd4:	4620      	mov	r0, r4
 8020cd6:	f000 fe9b 	bl	8021a10 <__multadd>
 8020cda:	9b08      	ldr	r3, [sp, #32]
 8020cdc:	ee08 0a10 	vmov	s16, r0
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	f000 81b1 	beq.w	8021048 <_dtoa_r+0xbc0>
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	4639      	mov	r1, r7
 8020cea:	220a      	movs	r2, #10
 8020cec:	4620      	mov	r0, r4
 8020cee:	f000 fe8f 	bl	8021a10 <__multadd>
 8020cf2:	9b02      	ldr	r3, [sp, #8]
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	4607      	mov	r7, r0
 8020cf8:	f300 808e 	bgt.w	8020e18 <_dtoa_r+0x990>
 8020cfc:	9b06      	ldr	r3, [sp, #24]
 8020cfe:	2b02      	cmp	r3, #2
 8020d00:	dc51      	bgt.n	8020da6 <_dtoa_r+0x91e>
 8020d02:	e089      	b.n	8020e18 <_dtoa_r+0x990>
 8020d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020d0a:	e74b      	b.n	8020ba4 <_dtoa_r+0x71c>
 8020d0c:	9b03      	ldr	r3, [sp, #12]
 8020d0e:	1e5e      	subs	r6, r3, #1
 8020d10:	9b07      	ldr	r3, [sp, #28]
 8020d12:	42b3      	cmp	r3, r6
 8020d14:	bfbf      	itttt	lt
 8020d16:	9b07      	ldrlt	r3, [sp, #28]
 8020d18:	9607      	strlt	r6, [sp, #28]
 8020d1a:	1af2      	sublt	r2, r6, r3
 8020d1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8020d1e:	bfb6      	itet	lt
 8020d20:	189b      	addlt	r3, r3, r2
 8020d22:	1b9e      	subge	r6, r3, r6
 8020d24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020d26:	9b03      	ldr	r3, [sp, #12]
 8020d28:	bfb8      	it	lt
 8020d2a:	2600      	movlt	r6, #0
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	bfb7      	itett	lt
 8020d30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8020d34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020d38:	1a9d      	sublt	r5, r3, r2
 8020d3a:	2300      	movlt	r3, #0
 8020d3c:	e734      	b.n	8020ba8 <_dtoa_r+0x720>
 8020d3e:	9e07      	ldr	r6, [sp, #28]
 8020d40:	9d04      	ldr	r5, [sp, #16]
 8020d42:	9f08      	ldr	r7, [sp, #32]
 8020d44:	e73b      	b.n	8020bbe <_dtoa_r+0x736>
 8020d46:	9a07      	ldr	r2, [sp, #28]
 8020d48:	e767      	b.n	8020c1a <_dtoa_r+0x792>
 8020d4a:	9b06      	ldr	r3, [sp, #24]
 8020d4c:	2b01      	cmp	r3, #1
 8020d4e:	dc18      	bgt.n	8020d82 <_dtoa_r+0x8fa>
 8020d50:	f1ba 0f00 	cmp.w	sl, #0
 8020d54:	d115      	bne.n	8020d82 <_dtoa_r+0x8fa>
 8020d56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020d5a:	b993      	cbnz	r3, 8020d82 <_dtoa_r+0x8fa>
 8020d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020d60:	0d1b      	lsrs	r3, r3, #20
 8020d62:	051b      	lsls	r3, r3, #20
 8020d64:	b183      	cbz	r3, 8020d88 <_dtoa_r+0x900>
 8020d66:	9b04      	ldr	r3, [sp, #16]
 8020d68:	3301      	adds	r3, #1
 8020d6a:	9304      	str	r3, [sp, #16]
 8020d6c:	9b05      	ldr	r3, [sp, #20]
 8020d6e:	3301      	adds	r3, #1
 8020d70:	9305      	str	r3, [sp, #20]
 8020d72:	f04f 0801 	mov.w	r8, #1
 8020d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	f47f af6a 	bne.w	8020c52 <_dtoa_r+0x7ca>
 8020d7e:	2001      	movs	r0, #1
 8020d80:	e76f      	b.n	8020c62 <_dtoa_r+0x7da>
 8020d82:	f04f 0800 	mov.w	r8, #0
 8020d86:	e7f6      	b.n	8020d76 <_dtoa_r+0x8ee>
 8020d88:	4698      	mov	r8, r3
 8020d8a:	e7f4      	b.n	8020d76 <_dtoa_r+0x8ee>
 8020d8c:	f43f af7d 	beq.w	8020c8a <_dtoa_r+0x802>
 8020d90:	4618      	mov	r0, r3
 8020d92:	301c      	adds	r0, #28
 8020d94:	e772      	b.n	8020c7c <_dtoa_r+0x7f4>
 8020d96:	9b03      	ldr	r3, [sp, #12]
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	dc37      	bgt.n	8020e0c <_dtoa_r+0x984>
 8020d9c:	9b06      	ldr	r3, [sp, #24]
 8020d9e:	2b02      	cmp	r3, #2
 8020da0:	dd34      	ble.n	8020e0c <_dtoa_r+0x984>
 8020da2:	9b03      	ldr	r3, [sp, #12]
 8020da4:	9302      	str	r3, [sp, #8]
 8020da6:	9b02      	ldr	r3, [sp, #8]
 8020da8:	b96b      	cbnz	r3, 8020dc6 <_dtoa_r+0x93e>
 8020daa:	4631      	mov	r1, r6
 8020dac:	2205      	movs	r2, #5
 8020dae:	4620      	mov	r0, r4
 8020db0:	f000 fe2e 	bl	8021a10 <__multadd>
 8020db4:	4601      	mov	r1, r0
 8020db6:	4606      	mov	r6, r0
 8020db8:	ee18 0a10 	vmov	r0, s16
 8020dbc:	f001 f892 	bl	8021ee4 <__mcmp>
 8020dc0:	2800      	cmp	r0, #0
 8020dc2:	f73f adbb 	bgt.w	802093c <_dtoa_r+0x4b4>
 8020dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dc8:	9d01      	ldr	r5, [sp, #4]
 8020dca:	43db      	mvns	r3, r3
 8020dcc:	9300      	str	r3, [sp, #0]
 8020dce:	f04f 0800 	mov.w	r8, #0
 8020dd2:	4631      	mov	r1, r6
 8020dd4:	4620      	mov	r0, r4
 8020dd6:	f000 fdf9 	bl	80219cc <_Bfree>
 8020dda:	2f00      	cmp	r7, #0
 8020ddc:	f43f aea4 	beq.w	8020b28 <_dtoa_r+0x6a0>
 8020de0:	f1b8 0f00 	cmp.w	r8, #0
 8020de4:	d005      	beq.n	8020df2 <_dtoa_r+0x96a>
 8020de6:	45b8      	cmp	r8, r7
 8020de8:	d003      	beq.n	8020df2 <_dtoa_r+0x96a>
 8020dea:	4641      	mov	r1, r8
 8020dec:	4620      	mov	r0, r4
 8020dee:	f000 fded 	bl	80219cc <_Bfree>
 8020df2:	4639      	mov	r1, r7
 8020df4:	4620      	mov	r0, r4
 8020df6:	f000 fde9 	bl	80219cc <_Bfree>
 8020dfa:	e695      	b.n	8020b28 <_dtoa_r+0x6a0>
 8020dfc:	2600      	movs	r6, #0
 8020dfe:	4637      	mov	r7, r6
 8020e00:	e7e1      	b.n	8020dc6 <_dtoa_r+0x93e>
 8020e02:	9700      	str	r7, [sp, #0]
 8020e04:	4637      	mov	r7, r6
 8020e06:	e599      	b.n	802093c <_dtoa_r+0x4b4>
 8020e08:	40240000 	.word	0x40240000
 8020e0c:	9b08      	ldr	r3, [sp, #32]
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	f000 80ca 	beq.w	8020fa8 <_dtoa_r+0xb20>
 8020e14:	9b03      	ldr	r3, [sp, #12]
 8020e16:	9302      	str	r3, [sp, #8]
 8020e18:	2d00      	cmp	r5, #0
 8020e1a:	dd05      	ble.n	8020e28 <_dtoa_r+0x9a0>
 8020e1c:	4639      	mov	r1, r7
 8020e1e:	462a      	mov	r2, r5
 8020e20:	4620      	mov	r0, r4
 8020e22:	f000 ffef 	bl	8021e04 <__lshift>
 8020e26:	4607      	mov	r7, r0
 8020e28:	f1b8 0f00 	cmp.w	r8, #0
 8020e2c:	d05b      	beq.n	8020ee6 <_dtoa_r+0xa5e>
 8020e2e:	6879      	ldr	r1, [r7, #4]
 8020e30:	4620      	mov	r0, r4
 8020e32:	f000 fd8b 	bl	802194c <_Balloc>
 8020e36:	4605      	mov	r5, r0
 8020e38:	b928      	cbnz	r0, 8020e46 <_dtoa_r+0x9be>
 8020e3a:	4b87      	ldr	r3, [pc, #540]	; (8021058 <_dtoa_r+0xbd0>)
 8020e3c:	4602      	mov	r2, r0
 8020e3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020e42:	f7ff bb3b 	b.w	80204bc <_dtoa_r+0x34>
 8020e46:	693a      	ldr	r2, [r7, #16]
 8020e48:	3202      	adds	r2, #2
 8020e4a:	0092      	lsls	r2, r2, #2
 8020e4c:	f107 010c 	add.w	r1, r7, #12
 8020e50:	300c      	adds	r0, #12
 8020e52:	f7fd fb80 	bl	801e556 <memcpy>
 8020e56:	2201      	movs	r2, #1
 8020e58:	4629      	mov	r1, r5
 8020e5a:	4620      	mov	r0, r4
 8020e5c:	f000 ffd2 	bl	8021e04 <__lshift>
 8020e60:	9b01      	ldr	r3, [sp, #4]
 8020e62:	f103 0901 	add.w	r9, r3, #1
 8020e66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8020e6a:	4413      	add	r3, r2
 8020e6c:	9305      	str	r3, [sp, #20]
 8020e6e:	f00a 0301 	and.w	r3, sl, #1
 8020e72:	46b8      	mov	r8, r7
 8020e74:	9304      	str	r3, [sp, #16]
 8020e76:	4607      	mov	r7, r0
 8020e78:	4631      	mov	r1, r6
 8020e7a:	ee18 0a10 	vmov	r0, s16
 8020e7e:	f7ff fa75 	bl	802036c <quorem>
 8020e82:	4641      	mov	r1, r8
 8020e84:	9002      	str	r0, [sp, #8]
 8020e86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020e8a:	ee18 0a10 	vmov	r0, s16
 8020e8e:	f001 f829 	bl	8021ee4 <__mcmp>
 8020e92:	463a      	mov	r2, r7
 8020e94:	9003      	str	r0, [sp, #12]
 8020e96:	4631      	mov	r1, r6
 8020e98:	4620      	mov	r0, r4
 8020e9a:	f001 f83f 	bl	8021f1c <__mdiff>
 8020e9e:	68c2      	ldr	r2, [r0, #12]
 8020ea0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8020ea4:	4605      	mov	r5, r0
 8020ea6:	bb02      	cbnz	r2, 8020eea <_dtoa_r+0xa62>
 8020ea8:	4601      	mov	r1, r0
 8020eaa:	ee18 0a10 	vmov	r0, s16
 8020eae:	f001 f819 	bl	8021ee4 <__mcmp>
 8020eb2:	4602      	mov	r2, r0
 8020eb4:	4629      	mov	r1, r5
 8020eb6:	4620      	mov	r0, r4
 8020eb8:	9207      	str	r2, [sp, #28]
 8020eba:	f000 fd87 	bl	80219cc <_Bfree>
 8020ebe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020ec2:	ea43 0102 	orr.w	r1, r3, r2
 8020ec6:	9b04      	ldr	r3, [sp, #16]
 8020ec8:	430b      	orrs	r3, r1
 8020eca:	464d      	mov	r5, r9
 8020ecc:	d10f      	bne.n	8020eee <_dtoa_r+0xa66>
 8020ece:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020ed2:	d02a      	beq.n	8020f2a <_dtoa_r+0xaa2>
 8020ed4:	9b03      	ldr	r3, [sp, #12]
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	dd02      	ble.n	8020ee0 <_dtoa_r+0xa58>
 8020eda:	9b02      	ldr	r3, [sp, #8]
 8020edc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020ee0:	f88b a000 	strb.w	sl, [fp]
 8020ee4:	e775      	b.n	8020dd2 <_dtoa_r+0x94a>
 8020ee6:	4638      	mov	r0, r7
 8020ee8:	e7ba      	b.n	8020e60 <_dtoa_r+0x9d8>
 8020eea:	2201      	movs	r2, #1
 8020eec:	e7e2      	b.n	8020eb4 <_dtoa_r+0xa2c>
 8020eee:	9b03      	ldr	r3, [sp, #12]
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	db04      	blt.n	8020efe <_dtoa_r+0xa76>
 8020ef4:	9906      	ldr	r1, [sp, #24]
 8020ef6:	430b      	orrs	r3, r1
 8020ef8:	9904      	ldr	r1, [sp, #16]
 8020efa:	430b      	orrs	r3, r1
 8020efc:	d122      	bne.n	8020f44 <_dtoa_r+0xabc>
 8020efe:	2a00      	cmp	r2, #0
 8020f00:	ddee      	ble.n	8020ee0 <_dtoa_r+0xa58>
 8020f02:	ee18 1a10 	vmov	r1, s16
 8020f06:	2201      	movs	r2, #1
 8020f08:	4620      	mov	r0, r4
 8020f0a:	f000 ff7b 	bl	8021e04 <__lshift>
 8020f0e:	4631      	mov	r1, r6
 8020f10:	ee08 0a10 	vmov	s16, r0
 8020f14:	f000 ffe6 	bl	8021ee4 <__mcmp>
 8020f18:	2800      	cmp	r0, #0
 8020f1a:	dc03      	bgt.n	8020f24 <_dtoa_r+0xa9c>
 8020f1c:	d1e0      	bne.n	8020ee0 <_dtoa_r+0xa58>
 8020f1e:	f01a 0f01 	tst.w	sl, #1
 8020f22:	d0dd      	beq.n	8020ee0 <_dtoa_r+0xa58>
 8020f24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020f28:	d1d7      	bne.n	8020eda <_dtoa_r+0xa52>
 8020f2a:	2339      	movs	r3, #57	; 0x39
 8020f2c:	f88b 3000 	strb.w	r3, [fp]
 8020f30:	462b      	mov	r3, r5
 8020f32:	461d      	mov	r5, r3
 8020f34:	3b01      	subs	r3, #1
 8020f36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020f3a:	2a39      	cmp	r2, #57	; 0x39
 8020f3c:	d071      	beq.n	8021022 <_dtoa_r+0xb9a>
 8020f3e:	3201      	adds	r2, #1
 8020f40:	701a      	strb	r2, [r3, #0]
 8020f42:	e746      	b.n	8020dd2 <_dtoa_r+0x94a>
 8020f44:	2a00      	cmp	r2, #0
 8020f46:	dd07      	ble.n	8020f58 <_dtoa_r+0xad0>
 8020f48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020f4c:	d0ed      	beq.n	8020f2a <_dtoa_r+0xaa2>
 8020f4e:	f10a 0301 	add.w	r3, sl, #1
 8020f52:	f88b 3000 	strb.w	r3, [fp]
 8020f56:	e73c      	b.n	8020dd2 <_dtoa_r+0x94a>
 8020f58:	9b05      	ldr	r3, [sp, #20]
 8020f5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8020f5e:	4599      	cmp	r9, r3
 8020f60:	d047      	beq.n	8020ff2 <_dtoa_r+0xb6a>
 8020f62:	ee18 1a10 	vmov	r1, s16
 8020f66:	2300      	movs	r3, #0
 8020f68:	220a      	movs	r2, #10
 8020f6a:	4620      	mov	r0, r4
 8020f6c:	f000 fd50 	bl	8021a10 <__multadd>
 8020f70:	45b8      	cmp	r8, r7
 8020f72:	ee08 0a10 	vmov	s16, r0
 8020f76:	f04f 0300 	mov.w	r3, #0
 8020f7a:	f04f 020a 	mov.w	r2, #10
 8020f7e:	4641      	mov	r1, r8
 8020f80:	4620      	mov	r0, r4
 8020f82:	d106      	bne.n	8020f92 <_dtoa_r+0xb0a>
 8020f84:	f000 fd44 	bl	8021a10 <__multadd>
 8020f88:	4680      	mov	r8, r0
 8020f8a:	4607      	mov	r7, r0
 8020f8c:	f109 0901 	add.w	r9, r9, #1
 8020f90:	e772      	b.n	8020e78 <_dtoa_r+0x9f0>
 8020f92:	f000 fd3d 	bl	8021a10 <__multadd>
 8020f96:	4639      	mov	r1, r7
 8020f98:	4680      	mov	r8, r0
 8020f9a:	2300      	movs	r3, #0
 8020f9c:	220a      	movs	r2, #10
 8020f9e:	4620      	mov	r0, r4
 8020fa0:	f000 fd36 	bl	8021a10 <__multadd>
 8020fa4:	4607      	mov	r7, r0
 8020fa6:	e7f1      	b.n	8020f8c <_dtoa_r+0xb04>
 8020fa8:	9b03      	ldr	r3, [sp, #12]
 8020faa:	9302      	str	r3, [sp, #8]
 8020fac:	9d01      	ldr	r5, [sp, #4]
 8020fae:	ee18 0a10 	vmov	r0, s16
 8020fb2:	4631      	mov	r1, r6
 8020fb4:	f7ff f9da 	bl	802036c <quorem>
 8020fb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020fbc:	9b01      	ldr	r3, [sp, #4]
 8020fbe:	f805 ab01 	strb.w	sl, [r5], #1
 8020fc2:	1aea      	subs	r2, r5, r3
 8020fc4:	9b02      	ldr	r3, [sp, #8]
 8020fc6:	4293      	cmp	r3, r2
 8020fc8:	dd09      	ble.n	8020fde <_dtoa_r+0xb56>
 8020fca:	ee18 1a10 	vmov	r1, s16
 8020fce:	2300      	movs	r3, #0
 8020fd0:	220a      	movs	r2, #10
 8020fd2:	4620      	mov	r0, r4
 8020fd4:	f000 fd1c 	bl	8021a10 <__multadd>
 8020fd8:	ee08 0a10 	vmov	s16, r0
 8020fdc:	e7e7      	b.n	8020fae <_dtoa_r+0xb26>
 8020fde:	9b02      	ldr	r3, [sp, #8]
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	bfc8      	it	gt
 8020fe4:	461d      	movgt	r5, r3
 8020fe6:	9b01      	ldr	r3, [sp, #4]
 8020fe8:	bfd8      	it	le
 8020fea:	2501      	movle	r5, #1
 8020fec:	441d      	add	r5, r3
 8020fee:	f04f 0800 	mov.w	r8, #0
 8020ff2:	ee18 1a10 	vmov	r1, s16
 8020ff6:	2201      	movs	r2, #1
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	f000 ff03 	bl	8021e04 <__lshift>
 8020ffe:	4631      	mov	r1, r6
 8021000:	ee08 0a10 	vmov	s16, r0
 8021004:	f000 ff6e 	bl	8021ee4 <__mcmp>
 8021008:	2800      	cmp	r0, #0
 802100a:	dc91      	bgt.n	8020f30 <_dtoa_r+0xaa8>
 802100c:	d102      	bne.n	8021014 <_dtoa_r+0xb8c>
 802100e:	f01a 0f01 	tst.w	sl, #1
 8021012:	d18d      	bne.n	8020f30 <_dtoa_r+0xaa8>
 8021014:	462b      	mov	r3, r5
 8021016:	461d      	mov	r5, r3
 8021018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802101c:	2a30      	cmp	r2, #48	; 0x30
 802101e:	d0fa      	beq.n	8021016 <_dtoa_r+0xb8e>
 8021020:	e6d7      	b.n	8020dd2 <_dtoa_r+0x94a>
 8021022:	9a01      	ldr	r2, [sp, #4]
 8021024:	429a      	cmp	r2, r3
 8021026:	d184      	bne.n	8020f32 <_dtoa_r+0xaaa>
 8021028:	9b00      	ldr	r3, [sp, #0]
 802102a:	3301      	adds	r3, #1
 802102c:	9300      	str	r3, [sp, #0]
 802102e:	2331      	movs	r3, #49	; 0x31
 8021030:	7013      	strb	r3, [r2, #0]
 8021032:	e6ce      	b.n	8020dd2 <_dtoa_r+0x94a>
 8021034:	4b09      	ldr	r3, [pc, #36]	; (802105c <_dtoa_r+0xbd4>)
 8021036:	f7ff ba95 	b.w	8020564 <_dtoa_r+0xdc>
 802103a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802103c:	2b00      	cmp	r3, #0
 802103e:	f47f aa6e 	bne.w	802051e <_dtoa_r+0x96>
 8021042:	4b07      	ldr	r3, [pc, #28]	; (8021060 <_dtoa_r+0xbd8>)
 8021044:	f7ff ba8e 	b.w	8020564 <_dtoa_r+0xdc>
 8021048:	9b02      	ldr	r3, [sp, #8]
 802104a:	2b00      	cmp	r3, #0
 802104c:	dcae      	bgt.n	8020fac <_dtoa_r+0xb24>
 802104e:	9b06      	ldr	r3, [sp, #24]
 8021050:	2b02      	cmp	r3, #2
 8021052:	f73f aea8 	bgt.w	8020da6 <_dtoa_r+0x91e>
 8021056:	e7a9      	b.n	8020fac <_dtoa_r+0xb24>
 8021058:	08026130 	.word	0x08026130
 802105c:	08025f30 	.word	0x08025f30
 8021060:	080260b1 	.word	0x080260b1

08021064 <__errno>:
 8021064:	4b01      	ldr	r3, [pc, #4]	; (802106c <__errno+0x8>)
 8021066:	6818      	ldr	r0, [r3, #0]
 8021068:	4770      	bx	lr
 802106a:	bf00      	nop
 802106c:	20000148 	.word	0x20000148

08021070 <__sflush_r>:
 8021070:	898a      	ldrh	r2, [r1, #12]
 8021072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021076:	4605      	mov	r5, r0
 8021078:	0710      	lsls	r0, r2, #28
 802107a:	460c      	mov	r4, r1
 802107c:	d458      	bmi.n	8021130 <__sflush_r+0xc0>
 802107e:	684b      	ldr	r3, [r1, #4]
 8021080:	2b00      	cmp	r3, #0
 8021082:	dc05      	bgt.n	8021090 <__sflush_r+0x20>
 8021084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021086:	2b00      	cmp	r3, #0
 8021088:	dc02      	bgt.n	8021090 <__sflush_r+0x20>
 802108a:	2000      	movs	r0, #0
 802108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021092:	2e00      	cmp	r6, #0
 8021094:	d0f9      	beq.n	802108a <__sflush_r+0x1a>
 8021096:	2300      	movs	r3, #0
 8021098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802109c:	682f      	ldr	r7, [r5, #0]
 802109e:	602b      	str	r3, [r5, #0]
 80210a0:	d032      	beq.n	8021108 <__sflush_r+0x98>
 80210a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80210a4:	89a3      	ldrh	r3, [r4, #12]
 80210a6:	075a      	lsls	r2, r3, #29
 80210a8:	d505      	bpl.n	80210b6 <__sflush_r+0x46>
 80210aa:	6863      	ldr	r3, [r4, #4]
 80210ac:	1ac0      	subs	r0, r0, r3
 80210ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80210b0:	b10b      	cbz	r3, 80210b6 <__sflush_r+0x46>
 80210b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80210b4:	1ac0      	subs	r0, r0, r3
 80210b6:	2300      	movs	r3, #0
 80210b8:	4602      	mov	r2, r0
 80210ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80210bc:	6a21      	ldr	r1, [r4, #32]
 80210be:	4628      	mov	r0, r5
 80210c0:	47b0      	blx	r6
 80210c2:	1c43      	adds	r3, r0, #1
 80210c4:	89a3      	ldrh	r3, [r4, #12]
 80210c6:	d106      	bne.n	80210d6 <__sflush_r+0x66>
 80210c8:	6829      	ldr	r1, [r5, #0]
 80210ca:	291d      	cmp	r1, #29
 80210cc:	d82c      	bhi.n	8021128 <__sflush_r+0xb8>
 80210ce:	4a2a      	ldr	r2, [pc, #168]	; (8021178 <__sflush_r+0x108>)
 80210d0:	40ca      	lsrs	r2, r1
 80210d2:	07d6      	lsls	r6, r2, #31
 80210d4:	d528      	bpl.n	8021128 <__sflush_r+0xb8>
 80210d6:	2200      	movs	r2, #0
 80210d8:	6062      	str	r2, [r4, #4]
 80210da:	04d9      	lsls	r1, r3, #19
 80210dc:	6922      	ldr	r2, [r4, #16]
 80210de:	6022      	str	r2, [r4, #0]
 80210e0:	d504      	bpl.n	80210ec <__sflush_r+0x7c>
 80210e2:	1c42      	adds	r2, r0, #1
 80210e4:	d101      	bne.n	80210ea <__sflush_r+0x7a>
 80210e6:	682b      	ldr	r3, [r5, #0]
 80210e8:	b903      	cbnz	r3, 80210ec <__sflush_r+0x7c>
 80210ea:	6560      	str	r0, [r4, #84]	; 0x54
 80210ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80210ee:	602f      	str	r7, [r5, #0]
 80210f0:	2900      	cmp	r1, #0
 80210f2:	d0ca      	beq.n	802108a <__sflush_r+0x1a>
 80210f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80210f8:	4299      	cmp	r1, r3
 80210fa:	d002      	beq.n	8021102 <__sflush_r+0x92>
 80210fc:	4628      	mov	r0, r5
 80210fe:	f001 f8fd 	bl	80222fc <_free_r>
 8021102:	2000      	movs	r0, #0
 8021104:	6360      	str	r0, [r4, #52]	; 0x34
 8021106:	e7c1      	b.n	802108c <__sflush_r+0x1c>
 8021108:	6a21      	ldr	r1, [r4, #32]
 802110a:	2301      	movs	r3, #1
 802110c:	4628      	mov	r0, r5
 802110e:	47b0      	blx	r6
 8021110:	1c41      	adds	r1, r0, #1
 8021112:	d1c7      	bne.n	80210a4 <__sflush_r+0x34>
 8021114:	682b      	ldr	r3, [r5, #0]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d0c4      	beq.n	80210a4 <__sflush_r+0x34>
 802111a:	2b1d      	cmp	r3, #29
 802111c:	d001      	beq.n	8021122 <__sflush_r+0xb2>
 802111e:	2b16      	cmp	r3, #22
 8021120:	d101      	bne.n	8021126 <__sflush_r+0xb6>
 8021122:	602f      	str	r7, [r5, #0]
 8021124:	e7b1      	b.n	802108a <__sflush_r+0x1a>
 8021126:	89a3      	ldrh	r3, [r4, #12]
 8021128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802112c:	81a3      	strh	r3, [r4, #12]
 802112e:	e7ad      	b.n	802108c <__sflush_r+0x1c>
 8021130:	690f      	ldr	r7, [r1, #16]
 8021132:	2f00      	cmp	r7, #0
 8021134:	d0a9      	beq.n	802108a <__sflush_r+0x1a>
 8021136:	0793      	lsls	r3, r2, #30
 8021138:	680e      	ldr	r6, [r1, #0]
 802113a:	bf08      	it	eq
 802113c:	694b      	ldreq	r3, [r1, #20]
 802113e:	600f      	str	r7, [r1, #0]
 8021140:	bf18      	it	ne
 8021142:	2300      	movne	r3, #0
 8021144:	eba6 0807 	sub.w	r8, r6, r7
 8021148:	608b      	str	r3, [r1, #8]
 802114a:	f1b8 0f00 	cmp.w	r8, #0
 802114e:	dd9c      	ble.n	802108a <__sflush_r+0x1a>
 8021150:	6a21      	ldr	r1, [r4, #32]
 8021152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021154:	4643      	mov	r3, r8
 8021156:	463a      	mov	r2, r7
 8021158:	4628      	mov	r0, r5
 802115a:	47b0      	blx	r6
 802115c:	2800      	cmp	r0, #0
 802115e:	dc06      	bgt.n	802116e <__sflush_r+0xfe>
 8021160:	89a3      	ldrh	r3, [r4, #12]
 8021162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021166:	81a3      	strh	r3, [r4, #12]
 8021168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802116c:	e78e      	b.n	802108c <__sflush_r+0x1c>
 802116e:	4407      	add	r7, r0
 8021170:	eba8 0800 	sub.w	r8, r8, r0
 8021174:	e7e9      	b.n	802114a <__sflush_r+0xda>
 8021176:	bf00      	nop
 8021178:	20400001 	.word	0x20400001

0802117c <_fflush_r>:
 802117c:	b538      	push	{r3, r4, r5, lr}
 802117e:	690b      	ldr	r3, [r1, #16]
 8021180:	4605      	mov	r5, r0
 8021182:	460c      	mov	r4, r1
 8021184:	b913      	cbnz	r3, 802118c <_fflush_r+0x10>
 8021186:	2500      	movs	r5, #0
 8021188:	4628      	mov	r0, r5
 802118a:	bd38      	pop	{r3, r4, r5, pc}
 802118c:	b118      	cbz	r0, 8021196 <_fflush_r+0x1a>
 802118e:	6983      	ldr	r3, [r0, #24]
 8021190:	b90b      	cbnz	r3, 8021196 <_fflush_r+0x1a>
 8021192:	f7fd f91b 	bl	801e3cc <__sinit>
 8021196:	4b14      	ldr	r3, [pc, #80]	; (80211e8 <_fflush_r+0x6c>)
 8021198:	429c      	cmp	r4, r3
 802119a:	d11b      	bne.n	80211d4 <_fflush_r+0x58>
 802119c:	686c      	ldr	r4, [r5, #4]
 802119e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	d0ef      	beq.n	8021186 <_fflush_r+0xa>
 80211a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80211a8:	07d0      	lsls	r0, r2, #31
 80211aa:	d404      	bmi.n	80211b6 <_fflush_r+0x3a>
 80211ac:	0599      	lsls	r1, r3, #22
 80211ae:	d402      	bmi.n	80211b6 <_fflush_r+0x3a>
 80211b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211b2:	f7fd f9ce 	bl	801e552 <__retarget_lock_acquire_recursive>
 80211b6:	4628      	mov	r0, r5
 80211b8:	4621      	mov	r1, r4
 80211ba:	f7ff ff59 	bl	8021070 <__sflush_r>
 80211be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80211c0:	07da      	lsls	r2, r3, #31
 80211c2:	4605      	mov	r5, r0
 80211c4:	d4e0      	bmi.n	8021188 <_fflush_r+0xc>
 80211c6:	89a3      	ldrh	r3, [r4, #12]
 80211c8:	059b      	lsls	r3, r3, #22
 80211ca:	d4dd      	bmi.n	8021188 <_fflush_r+0xc>
 80211cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211ce:	f7fd f9c1 	bl	801e554 <__retarget_lock_release_recursive>
 80211d2:	e7d9      	b.n	8021188 <_fflush_r+0xc>
 80211d4:	4b05      	ldr	r3, [pc, #20]	; (80211ec <_fflush_r+0x70>)
 80211d6:	429c      	cmp	r4, r3
 80211d8:	d101      	bne.n	80211de <_fflush_r+0x62>
 80211da:	68ac      	ldr	r4, [r5, #8]
 80211dc:	e7df      	b.n	802119e <_fflush_r+0x22>
 80211de:	4b04      	ldr	r3, [pc, #16]	; (80211f0 <_fflush_r+0x74>)
 80211e0:	429c      	cmp	r4, r3
 80211e2:	bf08      	it	eq
 80211e4:	68ec      	ldreq	r4, [r5, #12]
 80211e6:	e7da      	b.n	802119e <_fflush_r+0x22>
 80211e8:	08025edc 	.word	0x08025edc
 80211ec:	08025efc 	.word	0x08025efc
 80211f0:	08025ebc 	.word	0x08025ebc

080211f4 <rshift>:
 80211f4:	6903      	ldr	r3, [r0, #16]
 80211f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80211fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80211fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021202:	f100 0414 	add.w	r4, r0, #20
 8021206:	dd45      	ble.n	8021294 <rshift+0xa0>
 8021208:	f011 011f 	ands.w	r1, r1, #31
 802120c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021210:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021214:	d10c      	bne.n	8021230 <rshift+0x3c>
 8021216:	f100 0710 	add.w	r7, r0, #16
 802121a:	4629      	mov	r1, r5
 802121c:	42b1      	cmp	r1, r6
 802121e:	d334      	bcc.n	802128a <rshift+0x96>
 8021220:	1a9b      	subs	r3, r3, r2
 8021222:	009b      	lsls	r3, r3, #2
 8021224:	1eea      	subs	r2, r5, #3
 8021226:	4296      	cmp	r6, r2
 8021228:	bf38      	it	cc
 802122a:	2300      	movcc	r3, #0
 802122c:	4423      	add	r3, r4
 802122e:	e015      	b.n	802125c <rshift+0x68>
 8021230:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021234:	f1c1 0820 	rsb	r8, r1, #32
 8021238:	40cf      	lsrs	r7, r1
 802123a:	f105 0e04 	add.w	lr, r5, #4
 802123e:	46a1      	mov	r9, r4
 8021240:	4576      	cmp	r6, lr
 8021242:	46f4      	mov	ip, lr
 8021244:	d815      	bhi.n	8021272 <rshift+0x7e>
 8021246:	1a9a      	subs	r2, r3, r2
 8021248:	0092      	lsls	r2, r2, #2
 802124a:	3a04      	subs	r2, #4
 802124c:	3501      	adds	r5, #1
 802124e:	42ae      	cmp	r6, r5
 8021250:	bf38      	it	cc
 8021252:	2200      	movcc	r2, #0
 8021254:	18a3      	adds	r3, r4, r2
 8021256:	50a7      	str	r7, [r4, r2]
 8021258:	b107      	cbz	r7, 802125c <rshift+0x68>
 802125a:	3304      	adds	r3, #4
 802125c:	1b1a      	subs	r2, r3, r4
 802125e:	42a3      	cmp	r3, r4
 8021260:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021264:	bf08      	it	eq
 8021266:	2300      	moveq	r3, #0
 8021268:	6102      	str	r2, [r0, #16]
 802126a:	bf08      	it	eq
 802126c:	6143      	streq	r3, [r0, #20]
 802126e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021272:	f8dc c000 	ldr.w	ip, [ip]
 8021276:	fa0c fc08 	lsl.w	ip, ip, r8
 802127a:	ea4c 0707 	orr.w	r7, ip, r7
 802127e:	f849 7b04 	str.w	r7, [r9], #4
 8021282:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021286:	40cf      	lsrs	r7, r1
 8021288:	e7da      	b.n	8021240 <rshift+0x4c>
 802128a:	f851 cb04 	ldr.w	ip, [r1], #4
 802128e:	f847 cf04 	str.w	ip, [r7, #4]!
 8021292:	e7c3      	b.n	802121c <rshift+0x28>
 8021294:	4623      	mov	r3, r4
 8021296:	e7e1      	b.n	802125c <rshift+0x68>

08021298 <__hexdig_fun>:
 8021298:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802129c:	2b09      	cmp	r3, #9
 802129e:	d802      	bhi.n	80212a6 <__hexdig_fun+0xe>
 80212a0:	3820      	subs	r0, #32
 80212a2:	b2c0      	uxtb	r0, r0
 80212a4:	4770      	bx	lr
 80212a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80212aa:	2b05      	cmp	r3, #5
 80212ac:	d801      	bhi.n	80212b2 <__hexdig_fun+0x1a>
 80212ae:	3847      	subs	r0, #71	; 0x47
 80212b0:	e7f7      	b.n	80212a2 <__hexdig_fun+0xa>
 80212b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80212b6:	2b05      	cmp	r3, #5
 80212b8:	d801      	bhi.n	80212be <__hexdig_fun+0x26>
 80212ba:	3827      	subs	r0, #39	; 0x27
 80212bc:	e7f1      	b.n	80212a2 <__hexdig_fun+0xa>
 80212be:	2000      	movs	r0, #0
 80212c0:	4770      	bx	lr
	...

080212c4 <__gethex>:
 80212c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212c8:	ed2d 8b02 	vpush	{d8}
 80212cc:	b089      	sub	sp, #36	; 0x24
 80212ce:	ee08 0a10 	vmov	s16, r0
 80212d2:	9304      	str	r3, [sp, #16]
 80212d4:	4bb4      	ldr	r3, [pc, #720]	; (80215a8 <__gethex+0x2e4>)
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	9301      	str	r3, [sp, #4]
 80212da:	4618      	mov	r0, r3
 80212dc:	468b      	mov	fp, r1
 80212de:	4690      	mov	r8, r2
 80212e0:	f7de ff76 	bl	80001d0 <strlen>
 80212e4:	9b01      	ldr	r3, [sp, #4]
 80212e6:	f8db 2000 	ldr.w	r2, [fp]
 80212ea:	4403      	add	r3, r0
 80212ec:	4682      	mov	sl, r0
 80212ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80212f2:	9305      	str	r3, [sp, #20]
 80212f4:	1c93      	adds	r3, r2, #2
 80212f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80212fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80212fe:	32fe      	adds	r2, #254	; 0xfe
 8021300:	18d1      	adds	r1, r2, r3
 8021302:	461f      	mov	r7, r3
 8021304:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021308:	9100      	str	r1, [sp, #0]
 802130a:	2830      	cmp	r0, #48	; 0x30
 802130c:	d0f8      	beq.n	8021300 <__gethex+0x3c>
 802130e:	f7ff ffc3 	bl	8021298 <__hexdig_fun>
 8021312:	4604      	mov	r4, r0
 8021314:	2800      	cmp	r0, #0
 8021316:	d13a      	bne.n	802138e <__gethex+0xca>
 8021318:	9901      	ldr	r1, [sp, #4]
 802131a:	4652      	mov	r2, sl
 802131c:	4638      	mov	r0, r7
 802131e:	f001 f9af 	bl	8022680 <strncmp>
 8021322:	4605      	mov	r5, r0
 8021324:	2800      	cmp	r0, #0
 8021326:	d168      	bne.n	80213fa <__gethex+0x136>
 8021328:	f817 000a 	ldrb.w	r0, [r7, sl]
 802132c:	eb07 060a 	add.w	r6, r7, sl
 8021330:	f7ff ffb2 	bl	8021298 <__hexdig_fun>
 8021334:	2800      	cmp	r0, #0
 8021336:	d062      	beq.n	80213fe <__gethex+0x13a>
 8021338:	4633      	mov	r3, r6
 802133a:	7818      	ldrb	r0, [r3, #0]
 802133c:	2830      	cmp	r0, #48	; 0x30
 802133e:	461f      	mov	r7, r3
 8021340:	f103 0301 	add.w	r3, r3, #1
 8021344:	d0f9      	beq.n	802133a <__gethex+0x76>
 8021346:	f7ff ffa7 	bl	8021298 <__hexdig_fun>
 802134a:	2301      	movs	r3, #1
 802134c:	fab0 f480 	clz	r4, r0
 8021350:	0964      	lsrs	r4, r4, #5
 8021352:	4635      	mov	r5, r6
 8021354:	9300      	str	r3, [sp, #0]
 8021356:	463a      	mov	r2, r7
 8021358:	4616      	mov	r6, r2
 802135a:	3201      	adds	r2, #1
 802135c:	7830      	ldrb	r0, [r6, #0]
 802135e:	f7ff ff9b 	bl	8021298 <__hexdig_fun>
 8021362:	2800      	cmp	r0, #0
 8021364:	d1f8      	bne.n	8021358 <__gethex+0x94>
 8021366:	9901      	ldr	r1, [sp, #4]
 8021368:	4652      	mov	r2, sl
 802136a:	4630      	mov	r0, r6
 802136c:	f001 f988 	bl	8022680 <strncmp>
 8021370:	b980      	cbnz	r0, 8021394 <__gethex+0xd0>
 8021372:	b94d      	cbnz	r5, 8021388 <__gethex+0xc4>
 8021374:	eb06 050a 	add.w	r5, r6, sl
 8021378:	462a      	mov	r2, r5
 802137a:	4616      	mov	r6, r2
 802137c:	3201      	adds	r2, #1
 802137e:	7830      	ldrb	r0, [r6, #0]
 8021380:	f7ff ff8a 	bl	8021298 <__hexdig_fun>
 8021384:	2800      	cmp	r0, #0
 8021386:	d1f8      	bne.n	802137a <__gethex+0xb6>
 8021388:	1bad      	subs	r5, r5, r6
 802138a:	00ad      	lsls	r5, r5, #2
 802138c:	e004      	b.n	8021398 <__gethex+0xd4>
 802138e:	2400      	movs	r4, #0
 8021390:	4625      	mov	r5, r4
 8021392:	e7e0      	b.n	8021356 <__gethex+0x92>
 8021394:	2d00      	cmp	r5, #0
 8021396:	d1f7      	bne.n	8021388 <__gethex+0xc4>
 8021398:	7833      	ldrb	r3, [r6, #0]
 802139a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802139e:	2b50      	cmp	r3, #80	; 0x50
 80213a0:	d13b      	bne.n	802141a <__gethex+0x156>
 80213a2:	7873      	ldrb	r3, [r6, #1]
 80213a4:	2b2b      	cmp	r3, #43	; 0x2b
 80213a6:	d02c      	beq.n	8021402 <__gethex+0x13e>
 80213a8:	2b2d      	cmp	r3, #45	; 0x2d
 80213aa:	d02e      	beq.n	802140a <__gethex+0x146>
 80213ac:	1c71      	adds	r1, r6, #1
 80213ae:	f04f 0900 	mov.w	r9, #0
 80213b2:	7808      	ldrb	r0, [r1, #0]
 80213b4:	f7ff ff70 	bl	8021298 <__hexdig_fun>
 80213b8:	1e43      	subs	r3, r0, #1
 80213ba:	b2db      	uxtb	r3, r3
 80213bc:	2b18      	cmp	r3, #24
 80213be:	d82c      	bhi.n	802141a <__gethex+0x156>
 80213c0:	f1a0 0210 	sub.w	r2, r0, #16
 80213c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80213c8:	f7ff ff66 	bl	8021298 <__hexdig_fun>
 80213cc:	1e43      	subs	r3, r0, #1
 80213ce:	b2db      	uxtb	r3, r3
 80213d0:	2b18      	cmp	r3, #24
 80213d2:	d91d      	bls.n	8021410 <__gethex+0x14c>
 80213d4:	f1b9 0f00 	cmp.w	r9, #0
 80213d8:	d000      	beq.n	80213dc <__gethex+0x118>
 80213da:	4252      	negs	r2, r2
 80213dc:	4415      	add	r5, r2
 80213de:	f8cb 1000 	str.w	r1, [fp]
 80213e2:	b1e4      	cbz	r4, 802141e <__gethex+0x15a>
 80213e4:	9b00      	ldr	r3, [sp, #0]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	bf14      	ite	ne
 80213ea:	2700      	movne	r7, #0
 80213ec:	2706      	moveq	r7, #6
 80213ee:	4638      	mov	r0, r7
 80213f0:	b009      	add	sp, #36	; 0x24
 80213f2:	ecbd 8b02 	vpop	{d8}
 80213f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213fa:	463e      	mov	r6, r7
 80213fc:	4625      	mov	r5, r4
 80213fe:	2401      	movs	r4, #1
 8021400:	e7ca      	b.n	8021398 <__gethex+0xd4>
 8021402:	f04f 0900 	mov.w	r9, #0
 8021406:	1cb1      	adds	r1, r6, #2
 8021408:	e7d3      	b.n	80213b2 <__gethex+0xee>
 802140a:	f04f 0901 	mov.w	r9, #1
 802140e:	e7fa      	b.n	8021406 <__gethex+0x142>
 8021410:	230a      	movs	r3, #10
 8021412:	fb03 0202 	mla	r2, r3, r2, r0
 8021416:	3a10      	subs	r2, #16
 8021418:	e7d4      	b.n	80213c4 <__gethex+0x100>
 802141a:	4631      	mov	r1, r6
 802141c:	e7df      	b.n	80213de <__gethex+0x11a>
 802141e:	1bf3      	subs	r3, r6, r7
 8021420:	3b01      	subs	r3, #1
 8021422:	4621      	mov	r1, r4
 8021424:	2b07      	cmp	r3, #7
 8021426:	dc0b      	bgt.n	8021440 <__gethex+0x17c>
 8021428:	ee18 0a10 	vmov	r0, s16
 802142c:	f000 fa8e 	bl	802194c <_Balloc>
 8021430:	4604      	mov	r4, r0
 8021432:	b940      	cbnz	r0, 8021446 <__gethex+0x182>
 8021434:	4b5d      	ldr	r3, [pc, #372]	; (80215ac <__gethex+0x2e8>)
 8021436:	4602      	mov	r2, r0
 8021438:	21de      	movs	r1, #222	; 0xde
 802143a:	485d      	ldr	r0, [pc, #372]	; (80215b0 <__gethex+0x2ec>)
 802143c:	f001 f942 	bl	80226c4 <__assert_func>
 8021440:	3101      	adds	r1, #1
 8021442:	105b      	asrs	r3, r3, #1
 8021444:	e7ee      	b.n	8021424 <__gethex+0x160>
 8021446:	f100 0914 	add.w	r9, r0, #20
 802144a:	f04f 0b00 	mov.w	fp, #0
 802144e:	f1ca 0301 	rsb	r3, sl, #1
 8021452:	f8cd 9008 	str.w	r9, [sp, #8]
 8021456:	f8cd b000 	str.w	fp, [sp]
 802145a:	9306      	str	r3, [sp, #24]
 802145c:	42b7      	cmp	r7, r6
 802145e:	d340      	bcc.n	80214e2 <__gethex+0x21e>
 8021460:	9802      	ldr	r0, [sp, #8]
 8021462:	9b00      	ldr	r3, [sp, #0]
 8021464:	f840 3b04 	str.w	r3, [r0], #4
 8021468:	eba0 0009 	sub.w	r0, r0, r9
 802146c:	1080      	asrs	r0, r0, #2
 802146e:	0146      	lsls	r6, r0, #5
 8021470:	6120      	str	r0, [r4, #16]
 8021472:	4618      	mov	r0, r3
 8021474:	f000 fb5c 	bl	8021b30 <__hi0bits>
 8021478:	1a30      	subs	r0, r6, r0
 802147a:	f8d8 6000 	ldr.w	r6, [r8]
 802147e:	42b0      	cmp	r0, r6
 8021480:	dd63      	ble.n	802154a <__gethex+0x286>
 8021482:	1b87      	subs	r7, r0, r6
 8021484:	4639      	mov	r1, r7
 8021486:	4620      	mov	r0, r4
 8021488:	f000 ff00 	bl	802228c <__any_on>
 802148c:	4682      	mov	sl, r0
 802148e:	b1a8      	cbz	r0, 80214bc <__gethex+0x1f8>
 8021490:	1e7b      	subs	r3, r7, #1
 8021492:	1159      	asrs	r1, r3, #5
 8021494:	f003 021f 	and.w	r2, r3, #31
 8021498:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802149c:	f04f 0a01 	mov.w	sl, #1
 80214a0:	fa0a f202 	lsl.w	r2, sl, r2
 80214a4:	420a      	tst	r2, r1
 80214a6:	d009      	beq.n	80214bc <__gethex+0x1f8>
 80214a8:	4553      	cmp	r3, sl
 80214aa:	dd05      	ble.n	80214b8 <__gethex+0x1f4>
 80214ac:	1eb9      	subs	r1, r7, #2
 80214ae:	4620      	mov	r0, r4
 80214b0:	f000 feec 	bl	802228c <__any_on>
 80214b4:	2800      	cmp	r0, #0
 80214b6:	d145      	bne.n	8021544 <__gethex+0x280>
 80214b8:	f04f 0a02 	mov.w	sl, #2
 80214bc:	4639      	mov	r1, r7
 80214be:	4620      	mov	r0, r4
 80214c0:	f7ff fe98 	bl	80211f4 <rshift>
 80214c4:	443d      	add	r5, r7
 80214c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80214ca:	42ab      	cmp	r3, r5
 80214cc:	da4c      	bge.n	8021568 <__gethex+0x2a4>
 80214ce:	ee18 0a10 	vmov	r0, s16
 80214d2:	4621      	mov	r1, r4
 80214d4:	f000 fa7a 	bl	80219cc <_Bfree>
 80214d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80214da:	2300      	movs	r3, #0
 80214dc:	6013      	str	r3, [r2, #0]
 80214de:	27a3      	movs	r7, #163	; 0xa3
 80214e0:	e785      	b.n	80213ee <__gethex+0x12a>
 80214e2:	1e73      	subs	r3, r6, #1
 80214e4:	9a05      	ldr	r2, [sp, #20]
 80214e6:	9303      	str	r3, [sp, #12]
 80214e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80214ec:	4293      	cmp	r3, r2
 80214ee:	d019      	beq.n	8021524 <__gethex+0x260>
 80214f0:	f1bb 0f20 	cmp.w	fp, #32
 80214f4:	d107      	bne.n	8021506 <__gethex+0x242>
 80214f6:	9b02      	ldr	r3, [sp, #8]
 80214f8:	9a00      	ldr	r2, [sp, #0]
 80214fa:	f843 2b04 	str.w	r2, [r3], #4
 80214fe:	9302      	str	r3, [sp, #8]
 8021500:	2300      	movs	r3, #0
 8021502:	9300      	str	r3, [sp, #0]
 8021504:	469b      	mov	fp, r3
 8021506:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802150a:	f7ff fec5 	bl	8021298 <__hexdig_fun>
 802150e:	9b00      	ldr	r3, [sp, #0]
 8021510:	f000 000f 	and.w	r0, r0, #15
 8021514:	fa00 f00b 	lsl.w	r0, r0, fp
 8021518:	4303      	orrs	r3, r0
 802151a:	9300      	str	r3, [sp, #0]
 802151c:	f10b 0b04 	add.w	fp, fp, #4
 8021520:	9b03      	ldr	r3, [sp, #12]
 8021522:	e00d      	b.n	8021540 <__gethex+0x27c>
 8021524:	9b03      	ldr	r3, [sp, #12]
 8021526:	9a06      	ldr	r2, [sp, #24]
 8021528:	4413      	add	r3, r2
 802152a:	42bb      	cmp	r3, r7
 802152c:	d3e0      	bcc.n	80214f0 <__gethex+0x22c>
 802152e:	4618      	mov	r0, r3
 8021530:	9901      	ldr	r1, [sp, #4]
 8021532:	9307      	str	r3, [sp, #28]
 8021534:	4652      	mov	r2, sl
 8021536:	f001 f8a3 	bl	8022680 <strncmp>
 802153a:	9b07      	ldr	r3, [sp, #28]
 802153c:	2800      	cmp	r0, #0
 802153e:	d1d7      	bne.n	80214f0 <__gethex+0x22c>
 8021540:	461e      	mov	r6, r3
 8021542:	e78b      	b.n	802145c <__gethex+0x198>
 8021544:	f04f 0a03 	mov.w	sl, #3
 8021548:	e7b8      	b.n	80214bc <__gethex+0x1f8>
 802154a:	da0a      	bge.n	8021562 <__gethex+0x29e>
 802154c:	1a37      	subs	r7, r6, r0
 802154e:	4621      	mov	r1, r4
 8021550:	ee18 0a10 	vmov	r0, s16
 8021554:	463a      	mov	r2, r7
 8021556:	f000 fc55 	bl	8021e04 <__lshift>
 802155a:	1bed      	subs	r5, r5, r7
 802155c:	4604      	mov	r4, r0
 802155e:	f100 0914 	add.w	r9, r0, #20
 8021562:	f04f 0a00 	mov.w	sl, #0
 8021566:	e7ae      	b.n	80214c6 <__gethex+0x202>
 8021568:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802156c:	42a8      	cmp	r0, r5
 802156e:	dd72      	ble.n	8021656 <__gethex+0x392>
 8021570:	1b45      	subs	r5, r0, r5
 8021572:	42ae      	cmp	r6, r5
 8021574:	dc36      	bgt.n	80215e4 <__gethex+0x320>
 8021576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802157a:	2b02      	cmp	r3, #2
 802157c:	d02a      	beq.n	80215d4 <__gethex+0x310>
 802157e:	2b03      	cmp	r3, #3
 8021580:	d02c      	beq.n	80215dc <__gethex+0x318>
 8021582:	2b01      	cmp	r3, #1
 8021584:	d11c      	bne.n	80215c0 <__gethex+0x2fc>
 8021586:	42ae      	cmp	r6, r5
 8021588:	d11a      	bne.n	80215c0 <__gethex+0x2fc>
 802158a:	2e01      	cmp	r6, #1
 802158c:	d112      	bne.n	80215b4 <__gethex+0x2f0>
 802158e:	9a04      	ldr	r2, [sp, #16]
 8021590:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021594:	6013      	str	r3, [r2, #0]
 8021596:	2301      	movs	r3, #1
 8021598:	6123      	str	r3, [r4, #16]
 802159a:	f8c9 3000 	str.w	r3, [r9]
 802159e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80215a0:	2762      	movs	r7, #98	; 0x62
 80215a2:	601c      	str	r4, [r3, #0]
 80215a4:	e723      	b.n	80213ee <__gethex+0x12a>
 80215a6:	bf00      	nop
 80215a8:	080261a8 	.word	0x080261a8
 80215ac:	08026130 	.word	0x08026130
 80215b0:	08026141 	.word	0x08026141
 80215b4:	1e71      	subs	r1, r6, #1
 80215b6:	4620      	mov	r0, r4
 80215b8:	f000 fe68 	bl	802228c <__any_on>
 80215bc:	2800      	cmp	r0, #0
 80215be:	d1e6      	bne.n	802158e <__gethex+0x2ca>
 80215c0:	ee18 0a10 	vmov	r0, s16
 80215c4:	4621      	mov	r1, r4
 80215c6:	f000 fa01 	bl	80219cc <_Bfree>
 80215ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80215cc:	2300      	movs	r3, #0
 80215ce:	6013      	str	r3, [r2, #0]
 80215d0:	2750      	movs	r7, #80	; 0x50
 80215d2:	e70c      	b.n	80213ee <__gethex+0x12a>
 80215d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d1f2      	bne.n	80215c0 <__gethex+0x2fc>
 80215da:	e7d8      	b.n	802158e <__gethex+0x2ca>
 80215dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215de:	2b00      	cmp	r3, #0
 80215e0:	d1d5      	bne.n	802158e <__gethex+0x2ca>
 80215e2:	e7ed      	b.n	80215c0 <__gethex+0x2fc>
 80215e4:	1e6f      	subs	r7, r5, #1
 80215e6:	f1ba 0f00 	cmp.w	sl, #0
 80215ea:	d131      	bne.n	8021650 <__gethex+0x38c>
 80215ec:	b127      	cbz	r7, 80215f8 <__gethex+0x334>
 80215ee:	4639      	mov	r1, r7
 80215f0:	4620      	mov	r0, r4
 80215f2:	f000 fe4b 	bl	802228c <__any_on>
 80215f6:	4682      	mov	sl, r0
 80215f8:	117b      	asrs	r3, r7, #5
 80215fa:	2101      	movs	r1, #1
 80215fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021600:	f007 071f 	and.w	r7, r7, #31
 8021604:	fa01 f707 	lsl.w	r7, r1, r7
 8021608:	421f      	tst	r7, r3
 802160a:	4629      	mov	r1, r5
 802160c:	4620      	mov	r0, r4
 802160e:	bf18      	it	ne
 8021610:	f04a 0a02 	orrne.w	sl, sl, #2
 8021614:	1b76      	subs	r6, r6, r5
 8021616:	f7ff fded 	bl	80211f4 <rshift>
 802161a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802161e:	2702      	movs	r7, #2
 8021620:	f1ba 0f00 	cmp.w	sl, #0
 8021624:	d048      	beq.n	80216b8 <__gethex+0x3f4>
 8021626:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802162a:	2b02      	cmp	r3, #2
 802162c:	d015      	beq.n	802165a <__gethex+0x396>
 802162e:	2b03      	cmp	r3, #3
 8021630:	d017      	beq.n	8021662 <__gethex+0x39e>
 8021632:	2b01      	cmp	r3, #1
 8021634:	d109      	bne.n	802164a <__gethex+0x386>
 8021636:	f01a 0f02 	tst.w	sl, #2
 802163a:	d006      	beq.n	802164a <__gethex+0x386>
 802163c:	f8d9 0000 	ldr.w	r0, [r9]
 8021640:	ea4a 0a00 	orr.w	sl, sl, r0
 8021644:	f01a 0f01 	tst.w	sl, #1
 8021648:	d10e      	bne.n	8021668 <__gethex+0x3a4>
 802164a:	f047 0710 	orr.w	r7, r7, #16
 802164e:	e033      	b.n	80216b8 <__gethex+0x3f4>
 8021650:	f04f 0a01 	mov.w	sl, #1
 8021654:	e7d0      	b.n	80215f8 <__gethex+0x334>
 8021656:	2701      	movs	r7, #1
 8021658:	e7e2      	b.n	8021620 <__gethex+0x35c>
 802165a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802165c:	f1c3 0301 	rsb	r3, r3, #1
 8021660:	9315      	str	r3, [sp, #84]	; 0x54
 8021662:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021664:	2b00      	cmp	r3, #0
 8021666:	d0f0      	beq.n	802164a <__gethex+0x386>
 8021668:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802166c:	f104 0314 	add.w	r3, r4, #20
 8021670:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021674:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021678:	f04f 0c00 	mov.w	ip, #0
 802167c:	4618      	mov	r0, r3
 802167e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021682:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8021686:	d01c      	beq.n	80216c2 <__gethex+0x3fe>
 8021688:	3201      	adds	r2, #1
 802168a:	6002      	str	r2, [r0, #0]
 802168c:	2f02      	cmp	r7, #2
 802168e:	f104 0314 	add.w	r3, r4, #20
 8021692:	d13f      	bne.n	8021714 <__gethex+0x450>
 8021694:	f8d8 2000 	ldr.w	r2, [r8]
 8021698:	3a01      	subs	r2, #1
 802169a:	42b2      	cmp	r2, r6
 802169c:	d10a      	bne.n	80216b4 <__gethex+0x3f0>
 802169e:	1171      	asrs	r1, r6, #5
 80216a0:	2201      	movs	r2, #1
 80216a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80216a6:	f006 061f 	and.w	r6, r6, #31
 80216aa:	fa02 f606 	lsl.w	r6, r2, r6
 80216ae:	421e      	tst	r6, r3
 80216b0:	bf18      	it	ne
 80216b2:	4617      	movne	r7, r2
 80216b4:	f047 0720 	orr.w	r7, r7, #32
 80216b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80216ba:	601c      	str	r4, [r3, #0]
 80216bc:	9b04      	ldr	r3, [sp, #16]
 80216be:	601d      	str	r5, [r3, #0]
 80216c0:	e695      	b.n	80213ee <__gethex+0x12a>
 80216c2:	4299      	cmp	r1, r3
 80216c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80216c8:	d8d8      	bhi.n	802167c <__gethex+0x3b8>
 80216ca:	68a3      	ldr	r3, [r4, #8]
 80216cc:	459b      	cmp	fp, r3
 80216ce:	db19      	blt.n	8021704 <__gethex+0x440>
 80216d0:	6861      	ldr	r1, [r4, #4]
 80216d2:	ee18 0a10 	vmov	r0, s16
 80216d6:	3101      	adds	r1, #1
 80216d8:	f000 f938 	bl	802194c <_Balloc>
 80216dc:	4681      	mov	r9, r0
 80216de:	b918      	cbnz	r0, 80216e8 <__gethex+0x424>
 80216e0:	4b1a      	ldr	r3, [pc, #104]	; (802174c <__gethex+0x488>)
 80216e2:	4602      	mov	r2, r0
 80216e4:	2184      	movs	r1, #132	; 0x84
 80216e6:	e6a8      	b.n	802143a <__gethex+0x176>
 80216e8:	6922      	ldr	r2, [r4, #16]
 80216ea:	3202      	adds	r2, #2
 80216ec:	f104 010c 	add.w	r1, r4, #12
 80216f0:	0092      	lsls	r2, r2, #2
 80216f2:	300c      	adds	r0, #12
 80216f4:	f7fc ff2f 	bl	801e556 <memcpy>
 80216f8:	4621      	mov	r1, r4
 80216fa:	ee18 0a10 	vmov	r0, s16
 80216fe:	f000 f965 	bl	80219cc <_Bfree>
 8021702:	464c      	mov	r4, r9
 8021704:	6923      	ldr	r3, [r4, #16]
 8021706:	1c5a      	adds	r2, r3, #1
 8021708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802170c:	6122      	str	r2, [r4, #16]
 802170e:	2201      	movs	r2, #1
 8021710:	615a      	str	r2, [r3, #20]
 8021712:	e7bb      	b.n	802168c <__gethex+0x3c8>
 8021714:	6922      	ldr	r2, [r4, #16]
 8021716:	455a      	cmp	r2, fp
 8021718:	dd0b      	ble.n	8021732 <__gethex+0x46e>
 802171a:	2101      	movs	r1, #1
 802171c:	4620      	mov	r0, r4
 802171e:	f7ff fd69 	bl	80211f4 <rshift>
 8021722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021726:	3501      	adds	r5, #1
 8021728:	42ab      	cmp	r3, r5
 802172a:	f6ff aed0 	blt.w	80214ce <__gethex+0x20a>
 802172e:	2701      	movs	r7, #1
 8021730:	e7c0      	b.n	80216b4 <__gethex+0x3f0>
 8021732:	f016 061f 	ands.w	r6, r6, #31
 8021736:	d0fa      	beq.n	802172e <__gethex+0x46a>
 8021738:	4453      	add	r3, sl
 802173a:	f1c6 0620 	rsb	r6, r6, #32
 802173e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021742:	f000 f9f5 	bl	8021b30 <__hi0bits>
 8021746:	42b0      	cmp	r0, r6
 8021748:	dbe7      	blt.n	802171a <__gethex+0x456>
 802174a:	e7f0      	b.n	802172e <__gethex+0x46a>
 802174c:	08026130 	.word	0x08026130

08021750 <L_shift>:
 8021750:	f1c2 0208 	rsb	r2, r2, #8
 8021754:	0092      	lsls	r2, r2, #2
 8021756:	b570      	push	{r4, r5, r6, lr}
 8021758:	f1c2 0620 	rsb	r6, r2, #32
 802175c:	6843      	ldr	r3, [r0, #4]
 802175e:	6804      	ldr	r4, [r0, #0]
 8021760:	fa03 f506 	lsl.w	r5, r3, r6
 8021764:	432c      	orrs	r4, r5
 8021766:	40d3      	lsrs	r3, r2
 8021768:	6004      	str	r4, [r0, #0]
 802176a:	f840 3f04 	str.w	r3, [r0, #4]!
 802176e:	4288      	cmp	r0, r1
 8021770:	d3f4      	bcc.n	802175c <L_shift+0xc>
 8021772:	bd70      	pop	{r4, r5, r6, pc}

08021774 <__match>:
 8021774:	b530      	push	{r4, r5, lr}
 8021776:	6803      	ldr	r3, [r0, #0]
 8021778:	3301      	adds	r3, #1
 802177a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802177e:	b914      	cbnz	r4, 8021786 <__match+0x12>
 8021780:	6003      	str	r3, [r0, #0]
 8021782:	2001      	movs	r0, #1
 8021784:	bd30      	pop	{r4, r5, pc}
 8021786:	f813 2b01 	ldrb.w	r2, [r3], #1
 802178a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802178e:	2d19      	cmp	r5, #25
 8021790:	bf98      	it	ls
 8021792:	3220      	addls	r2, #32
 8021794:	42a2      	cmp	r2, r4
 8021796:	d0f0      	beq.n	802177a <__match+0x6>
 8021798:	2000      	movs	r0, #0
 802179a:	e7f3      	b.n	8021784 <__match+0x10>

0802179c <__hexnan>:
 802179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217a0:	680b      	ldr	r3, [r1, #0]
 80217a2:	115e      	asrs	r6, r3, #5
 80217a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80217a8:	f013 031f 	ands.w	r3, r3, #31
 80217ac:	b087      	sub	sp, #28
 80217ae:	bf18      	it	ne
 80217b0:	3604      	addne	r6, #4
 80217b2:	2500      	movs	r5, #0
 80217b4:	1f37      	subs	r7, r6, #4
 80217b6:	4690      	mov	r8, r2
 80217b8:	6802      	ldr	r2, [r0, #0]
 80217ba:	9301      	str	r3, [sp, #4]
 80217bc:	4682      	mov	sl, r0
 80217be:	f846 5c04 	str.w	r5, [r6, #-4]
 80217c2:	46b9      	mov	r9, r7
 80217c4:	463c      	mov	r4, r7
 80217c6:	9502      	str	r5, [sp, #8]
 80217c8:	46ab      	mov	fp, r5
 80217ca:	7851      	ldrb	r1, [r2, #1]
 80217cc:	1c53      	adds	r3, r2, #1
 80217ce:	9303      	str	r3, [sp, #12]
 80217d0:	b341      	cbz	r1, 8021824 <__hexnan+0x88>
 80217d2:	4608      	mov	r0, r1
 80217d4:	9205      	str	r2, [sp, #20]
 80217d6:	9104      	str	r1, [sp, #16]
 80217d8:	f7ff fd5e 	bl	8021298 <__hexdig_fun>
 80217dc:	2800      	cmp	r0, #0
 80217de:	d14f      	bne.n	8021880 <__hexnan+0xe4>
 80217e0:	9904      	ldr	r1, [sp, #16]
 80217e2:	9a05      	ldr	r2, [sp, #20]
 80217e4:	2920      	cmp	r1, #32
 80217e6:	d818      	bhi.n	802181a <__hexnan+0x7e>
 80217e8:	9b02      	ldr	r3, [sp, #8]
 80217ea:	459b      	cmp	fp, r3
 80217ec:	dd13      	ble.n	8021816 <__hexnan+0x7a>
 80217ee:	454c      	cmp	r4, r9
 80217f0:	d206      	bcs.n	8021800 <__hexnan+0x64>
 80217f2:	2d07      	cmp	r5, #7
 80217f4:	dc04      	bgt.n	8021800 <__hexnan+0x64>
 80217f6:	462a      	mov	r2, r5
 80217f8:	4649      	mov	r1, r9
 80217fa:	4620      	mov	r0, r4
 80217fc:	f7ff ffa8 	bl	8021750 <L_shift>
 8021800:	4544      	cmp	r4, r8
 8021802:	d950      	bls.n	80218a6 <__hexnan+0x10a>
 8021804:	2300      	movs	r3, #0
 8021806:	f1a4 0904 	sub.w	r9, r4, #4
 802180a:	f844 3c04 	str.w	r3, [r4, #-4]
 802180e:	f8cd b008 	str.w	fp, [sp, #8]
 8021812:	464c      	mov	r4, r9
 8021814:	461d      	mov	r5, r3
 8021816:	9a03      	ldr	r2, [sp, #12]
 8021818:	e7d7      	b.n	80217ca <__hexnan+0x2e>
 802181a:	2929      	cmp	r1, #41	; 0x29
 802181c:	d156      	bne.n	80218cc <__hexnan+0x130>
 802181e:	3202      	adds	r2, #2
 8021820:	f8ca 2000 	str.w	r2, [sl]
 8021824:	f1bb 0f00 	cmp.w	fp, #0
 8021828:	d050      	beq.n	80218cc <__hexnan+0x130>
 802182a:	454c      	cmp	r4, r9
 802182c:	d206      	bcs.n	802183c <__hexnan+0xa0>
 802182e:	2d07      	cmp	r5, #7
 8021830:	dc04      	bgt.n	802183c <__hexnan+0xa0>
 8021832:	462a      	mov	r2, r5
 8021834:	4649      	mov	r1, r9
 8021836:	4620      	mov	r0, r4
 8021838:	f7ff ff8a 	bl	8021750 <L_shift>
 802183c:	4544      	cmp	r4, r8
 802183e:	d934      	bls.n	80218aa <__hexnan+0x10e>
 8021840:	f1a8 0204 	sub.w	r2, r8, #4
 8021844:	4623      	mov	r3, r4
 8021846:	f853 1b04 	ldr.w	r1, [r3], #4
 802184a:	f842 1f04 	str.w	r1, [r2, #4]!
 802184e:	429f      	cmp	r7, r3
 8021850:	d2f9      	bcs.n	8021846 <__hexnan+0xaa>
 8021852:	1b3b      	subs	r3, r7, r4
 8021854:	f023 0303 	bic.w	r3, r3, #3
 8021858:	3304      	adds	r3, #4
 802185a:	3401      	adds	r4, #1
 802185c:	3e03      	subs	r6, #3
 802185e:	42b4      	cmp	r4, r6
 8021860:	bf88      	it	hi
 8021862:	2304      	movhi	r3, #4
 8021864:	4443      	add	r3, r8
 8021866:	2200      	movs	r2, #0
 8021868:	f843 2b04 	str.w	r2, [r3], #4
 802186c:	429f      	cmp	r7, r3
 802186e:	d2fb      	bcs.n	8021868 <__hexnan+0xcc>
 8021870:	683b      	ldr	r3, [r7, #0]
 8021872:	b91b      	cbnz	r3, 802187c <__hexnan+0xe0>
 8021874:	4547      	cmp	r7, r8
 8021876:	d127      	bne.n	80218c8 <__hexnan+0x12c>
 8021878:	2301      	movs	r3, #1
 802187a:	603b      	str	r3, [r7, #0]
 802187c:	2005      	movs	r0, #5
 802187e:	e026      	b.n	80218ce <__hexnan+0x132>
 8021880:	3501      	adds	r5, #1
 8021882:	2d08      	cmp	r5, #8
 8021884:	f10b 0b01 	add.w	fp, fp, #1
 8021888:	dd06      	ble.n	8021898 <__hexnan+0xfc>
 802188a:	4544      	cmp	r4, r8
 802188c:	d9c3      	bls.n	8021816 <__hexnan+0x7a>
 802188e:	2300      	movs	r3, #0
 8021890:	f844 3c04 	str.w	r3, [r4, #-4]
 8021894:	2501      	movs	r5, #1
 8021896:	3c04      	subs	r4, #4
 8021898:	6822      	ldr	r2, [r4, #0]
 802189a:	f000 000f 	and.w	r0, r0, #15
 802189e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80218a2:	6022      	str	r2, [r4, #0]
 80218a4:	e7b7      	b.n	8021816 <__hexnan+0x7a>
 80218a6:	2508      	movs	r5, #8
 80218a8:	e7b5      	b.n	8021816 <__hexnan+0x7a>
 80218aa:	9b01      	ldr	r3, [sp, #4]
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d0df      	beq.n	8021870 <__hexnan+0xd4>
 80218b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80218b4:	f1c3 0320 	rsb	r3, r3, #32
 80218b8:	fa22 f303 	lsr.w	r3, r2, r3
 80218bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80218c0:	401a      	ands	r2, r3
 80218c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80218c6:	e7d3      	b.n	8021870 <__hexnan+0xd4>
 80218c8:	3f04      	subs	r7, #4
 80218ca:	e7d1      	b.n	8021870 <__hexnan+0xd4>
 80218cc:	2004      	movs	r0, #4
 80218ce:	b007      	add	sp, #28
 80218d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218d4 <_localeconv_r>:
 80218d4:	4800      	ldr	r0, [pc, #0]	; (80218d8 <_localeconv_r+0x4>)
 80218d6:	4770      	bx	lr
 80218d8:	200002a0 	.word	0x200002a0

080218dc <_lseek_r>:
 80218dc:	b538      	push	{r3, r4, r5, lr}
 80218de:	4d07      	ldr	r5, [pc, #28]	; (80218fc <_lseek_r+0x20>)
 80218e0:	4604      	mov	r4, r0
 80218e2:	4608      	mov	r0, r1
 80218e4:	4611      	mov	r1, r2
 80218e6:	2200      	movs	r2, #0
 80218e8:	602a      	str	r2, [r5, #0]
 80218ea:	461a      	mov	r2, r3
 80218ec:	f003 feb6 	bl	802565c <_lseek>
 80218f0:	1c43      	adds	r3, r0, #1
 80218f2:	d102      	bne.n	80218fa <_lseek_r+0x1e>
 80218f4:	682b      	ldr	r3, [r5, #0]
 80218f6:	b103      	cbz	r3, 80218fa <_lseek_r+0x1e>
 80218f8:	6023      	str	r3, [r4, #0]
 80218fa:	bd38      	pop	{r3, r4, r5, pc}
 80218fc:	2000f49c 	.word	0x2000f49c

08021900 <malloc>:
 8021900:	4b02      	ldr	r3, [pc, #8]	; (802190c <malloc+0xc>)
 8021902:	4601      	mov	r1, r0
 8021904:	6818      	ldr	r0, [r3, #0]
 8021906:	f7fc be5d 	b.w	801e5c4 <_malloc_r>
 802190a:	bf00      	nop
 802190c:	20000148 	.word	0x20000148

08021910 <__ascii_mbtowc>:
 8021910:	b082      	sub	sp, #8
 8021912:	b901      	cbnz	r1, 8021916 <__ascii_mbtowc+0x6>
 8021914:	a901      	add	r1, sp, #4
 8021916:	b142      	cbz	r2, 802192a <__ascii_mbtowc+0x1a>
 8021918:	b14b      	cbz	r3, 802192e <__ascii_mbtowc+0x1e>
 802191a:	7813      	ldrb	r3, [r2, #0]
 802191c:	600b      	str	r3, [r1, #0]
 802191e:	7812      	ldrb	r2, [r2, #0]
 8021920:	1e10      	subs	r0, r2, #0
 8021922:	bf18      	it	ne
 8021924:	2001      	movne	r0, #1
 8021926:	b002      	add	sp, #8
 8021928:	4770      	bx	lr
 802192a:	4610      	mov	r0, r2
 802192c:	e7fb      	b.n	8021926 <__ascii_mbtowc+0x16>
 802192e:	f06f 0001 	mvn.w	r0, #1
 8021932:	e7f8      	b.n	8021926 <__ascii_mbtowc+0x16>

08021934 <__malloc_lock>:
 8021934:	4801      	ldr	r0, [pc, #4]	; (802193c <__malloc_lock+0x8>)
 8021936:	f7fc be0c 	b.w	801e552 <__retarget_lock_acquire_recursive>
 802193a:	bf00      	nop
 802193c:	2000f490 	.word	0x2000f490

08021940 <__malloc_unlock>:
 8021940:	4801      	ldr	r0, [pc, #4]	; (8021948 <__malloc_unlock+0x8>)
 8021942:	f7fc be07 	b.w	801e554 <__retarget_lock_release_recursive>
 8021946:	bf00      	nop
 8021948:	2000f490 	.word	0x2000f490

0802194c <_Balloc>:
 802194c:	b570      	push	{r4, r5, r6, lr}
 802194e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021950:	4604      	mov	r4, r0
 8021952:	460d      	mov	r5, r1
 8021954:	b976      	cbnz	r6, 8021974 <_Balloc+0x28>
 8021956:	2010      	movs	r0, #16
 8021958:	f7ff ffd2 	bl	8021900 <malloc>
 802195c:	4602      	mov	r2, r0
 802195e:	6260      	str	r0, [r4, #36]	; 0x24
 8021960:	b920      	cbnz	r0, 802196c <_Balloc+0x20>
 8021962:	4b18      	ldr	r3, [pc, #96]	; (80219c4 <_Balloc+0x78>)
 8021964:	4818      	ldr	r0, [pc, #96]	; (80219c8 <_Balloc+0x7c>)
 8021966:	2166      	movs	r1, #102	; 0x66
 8021968:	f000 feac 	bl	80226c4 <__assert_func>
 802196c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021970:	6006      	str	r6, [r0, #0]
 8021972:	60c6      	str	r6, [r0, #12]
 8021974:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021976:	68f3      	ldr	r3, [r6, #12]
 8021978:	b183      	cbz	r3, 802199c <_Balloc+0x50>
 802197a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802197c:	68db      	ldr	r3, [r3, #12]
 802197e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021982:	b9b8      	cbnz	r0, 80219b4 <_Balloc+0x68>
 8021984:	2101      	movs	r1, #1
 8021986:	fa01 f605 	lsl.w	r6, r1, r5
 802198a:	1d72      	adds	r2, r6, #5
 802198c:	0092      	lsls	r2, r2, #2
 802198e:	4620      	mov	r0, r4
 8021990:	f000 fc9d 	bl	80222ce <_calloc_r>
 8021994:	b160      	cbz	r0, 80219b0 <_Balloc+0x64>
 8021996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802199a:	e00e      	b.n	80219ba <_Balloc+0x6e>
 802199c:	2221      	movs	r2, #33	; 0x21
 802199e:	2104      	movs	r1, #4
 80219a0:	4620      	mov	r0, r4
 80219a2:	f000 fc94 	bl	80222ce <_calloc_r>
 80219a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80219a8:	60f0      	str	r0, [r6, #12]
 80219aa:	68db      	ldr	r3, [r3, #12]
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d1e4      	bne.n	802197a <_Balloc+0x2e>
 80219b0:	2000      	movs	r0, #0
 80219b2:	bd70      	pop	{r4, r5, r6, pc}
 80219b4:	6802      	ldr	r2, [r0, #0]
 80219b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80219ba:	2300      	movs	r3, #0
 80219bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80219c0:	e7f7      	b.n	80219b2 <_Balloc+0x66>
 80219c2:	bf00      	nop
 80219c4:	080260be 	.word	0x080260be
 80219c8:	080261bc 	.word	0x080261bc

080219cc <_Bfree>:
 80219cc:	b570      	push	{r4, r5, r6, lr}
 80219ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80219d0:	4605      	mov	r5, r0
 80219d2:	460c      	mov	r4, r1
 80219d4:	b976      	cbnz	r6, 80219f4 <_Bfree+0x28>
 80219d6:	2010      	movs	r0, #16
 80219d8:	f7ff ff92 	bl	8021900 <malloc>
 80219dc:	4602      	mov	r2, r0
 80219de:	6268      	str	r0, [r5, #36]	; 0x24
 80219e0:	b920      	cbnz	r0, 80219ec <_Bfree+0x20>
 80219e2:	4b09      	ldr	r3, [pc, #36]	; (8021a08 <_Bfree+0x3c>)
 80219e4:	4809      	ldr	r0, [pc, #36]	; (8021a0c <_Bfree+0x40>)
 80219e6:	218a      	movs	r1, #138	; 0x8a
 80219e8:	f000 fe6c 	bl	80226c4 <__assert_func>
 80219ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80219f0:	6006      	str	r6, [r0, #0]
 80219f2:	60c6      	str	r6, [r0, #12]
 80219f4:	b13c      	cbz	r4, 8021a06 <_Bfree+0x3a>
 80219f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80219f8:	6862      	ldr	r2, [r4, #4]
 80219fa:	68db      	ldr	r3, [r3, #12]
 80219fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021a00:	6021      	str	r1, [r4, #0]
 8021a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021a06:	bd70      	pop	{r4, r5, r6, pc}
 8021a08:	080260be 	.word	0x080260be
 8021a0c:	080261bc 	.word	0x080261bc

08021a10 <__multadd>:
 8021a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a14:	690d      	ldr	r5, [r1, #16]
 8021a16:	4607      	mov	r7, r0
 8021a18:	460c      	mov	r4, r1
 8021a1a:	461e      	mov	r6, r3
 8021a1c:	f101 0c14 	add.w	ip, r1, #20
 8021a20:	2000      	movs	r0, #0
 8021a22:	f8dc 3000 	ldr.w	r3, [ip]
 8021a26:	b299      	uxth	r1, r3
 8021a28:	fb02 6101 	mla	r1, r2, r1, r6
 8021a2c:	0c1e      	lsrs	r6, r3, #16
 8021a2e:	0c0b      	lsrs	r3, r1, #16
 8021a30:	fb02 3306 	mla	r3, r2, r6, r3
 8021a34:	b289      	uxth	r1, r1
 8021a36:	3001      	adds	r0, #1
 8021a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021a3c:	4285      	cmp	r5, r0
 8021a3e:	f84c 1b04 	str.w	r1, [ip], #4
 8021a42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021a46:	dcec      	bgt.n	8021a22 <__multadd+0x12>
 8021a48:	b30e      	cbz	r6, 8021a8e <__multadd+0x7e>
 8021a4a:	68a3      	ldr	r3, [r4, #8]
 8021a4c:	42ab      	cmp	r3, r5
 8021a4e:	dc19      	bgt.n	8021a84 <__multadd+0x74>
 8021a50:	6861      	ldr	r1, [r4, #4]
 8021a52:	4638      	mov	r0, r7
 8021a54:	3101      	adds	r1, #1
 8021a56:	f7ff ff79 	bl	802194c <_Balloc>
 8021a5a:	4680      	mov	r8, r0
 8021a5c:	b928      	cbnz	r0, 8021a6a <__multadd+0x5a>
 8021a5e:	4602      	mov	r2, r0
 8021a60:	4b0c      	ldr	r3, [pc, #48]	; (8021a94 <__multadd+0x84>)
 8021a62:	480d      	ldr	r0, [pc, #52]	; (8021a98 <__multadd+0x88>)
 8021a64:	21b5      	movs	r1, #181	; 0xb5
 8021a66:	f000 fe2d 	bl	80226c4 <__assert_func>
 8021a6a:	6922      	ldr	r2, [r4, #16]
 8021a6c:	3202      	adds	r2, #2
 8021a6e:	f104 010c 	add.w	r1, r4, #12
 8021a72:	0092      	lsls	r2, r2, #2
 8021a74:	300c      	adds	r0, #12
 8021a76:	f7fc fd6e 	bl	801e556 <memcpy>
 8021a7a:	4621      	mov	r1, r4
 8021a7c:	4638      	mov	r0, r7
 8021a7e:	f7ff ffa5 	bl	80219cc <_Bfree>
 8021a82:	4644      	mov	r4, r8
 8021a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021a88:	3501      	adds	r5, #1
 8021a8a:	615e      	str	r6, [r3, #20]
 8021a8c:	6125      	str	r5, [r4, #16]
 8021a8e:	4620      	mov	r0, r4
 8021a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a94:	08026130 	.word	0x08026130
 8021a98:	080261bc 	.word	0x080261bc

08021a9c <__s2b>:
 8021a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021aa0:	460c      	mov	r4, r1
 8021aa2:	4615      	mov	r5, r2
 8021aa4:	461f      	mov	r7, r3
 8021aa6:	2209      	movs	r2, #9
 8021aa8:	3308      	adds	r3, #8
 8021aaa:	4606      	mov	r6, r0
 8021aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8021ab0:	2100      	movs	r1, #0
 8021ab2:	2201      	movs	r2, #1
 8021ab4:	429a      	cmp	r2, r3
 8021ab6:	db09      	blt.n	8021acc <__s2b+0x30>
 8021ab8:	4630      	mov	r0, r6
 8021aba:	f7ff ff47 	bl	802194c <_Balloc>
 8021abe:	b940      	cbnz	r0, 8021ad2 <__s2b+0x36>
 8021ac0:	4602      	mov	r2, r0
 8021ac2:	4b19      	ldr	r3, [pc, #100]	; (8021b28 <__s2b+0x8c>)
 8021ac4:	4819      	ldr	r0, [pc, #100]	; (8021b2c <__s2b+0x90>)
 8021ac6:	21ce      	movs	r1, #206	; 0xce
 8021ac8:	f000 fdfc 	bl	80226c4 <__assert_func>
 8021acc:	0052      	lsls	r2, r2, #1
 8021ace:	3101      	adds	r1, #1
 8021ad0:	e7f0      	b.n	8021ab4 <__s2b+0x18>
 8021ad2:	9b08      	ldr	r3, [sp, #32]
 8021ad4:	6143      	str	r3, [r0, #20]
 8021ad6:	2d09      	cmp	r5, #9
 8021ad8:	f04f 0301 	mov.w	r3, #1
 8021adc:	6103      	str	r3, [r0, #16]
 8021ade:	dd16      	ble.n	8021b0e <__s2b+0x72>
 8021ae0:	f104 0909 	add.w	r9, r4, #9
 8021ae4:	46c8      	mov	r8, r9
 8021ae6:	442c      	add	r4, r5
 8021ae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021aec:	4601      	mov	r1, r0
 8021aee:	3b30      	subs	r3, #48	; 0x30
 8021af0:	220a      	movs	r2, #10
 8021af2:	4630      	mov	r0, r6
 8021af4:	f7ff ff8c 	bl	8021a10 <__multadd>
 8021af8:	45a0      	cmp	r8, r4
 8021afa:	d1f5      	bne.n	8021ae8 <__s2b+0x4c>
 8021afc:	f1a5 0408 	sub.w	r4, r5, #8
 8021b00:	444c      	add	r4, r9
 8021b02:	1b2d      	subs	r5, r5, r4
 8021b04:	1963      	adds	r3, r4, r5
 8021b06:	42bb      	cmp	r3, r7
 8021b08:	db04      	blt.n	8021b14 <__s2b+0x78>
 8021b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b0e:	340a      	adds	r4, #10
 8021b10:	2509      	movs	r5, #9
 8021b12:	e7f6      	b.n	8021b02 <__s2b+0x66>
 8021b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021b18:	4601      	mov	r1, r0
 8021b1a:	3b30      	subs	r3, #48	; 0x30
 8021b1c:	220a      	movs	r2, #10
 8021b1e:	4630      	mov	r0, r6
 8021b20:	f7ff ff76 	bl	8021a10 <__multadd>
 8021b24:	e7ee      	b.n	8021b04 <__s2b+0x68>
 8021b26:	bf00      	nop
 8021b28:	08026130 	.word	0x08026130
 8021b2c:	080261bc 	.word	0x080261bc

08021b30 <__hi0bits>:
 8021b30:	0c03      	lsrs	r3, r0, #16
 8021b32:	041b      	lsls	r3, r3, #16
 8021b34:	b9d3      	cbnz	r3, 8021b6c <__hi0bits+0x3c>
 8021b36:	0400      	lsls	r0, r0, #16
 8021b38:	2310      	movs	r3, #16
 8021b3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021b3e:	bf04      	itt	eq
 8021b40:	0200      	lsleq	r0, r0, #8
 8021b42:	3308      	addeq	r3, #8
 8021b44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021b48:	bf04      	itt	eq
 8021b4a:	0100      	lsleq	r0, r0, #4
 8021b4c:	3304      	addeq	r3, #4
 8021b4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021b52:	bf04      	itt	eq
 8021b54:	0080      	lsleq	r0, r0, #2
 8021b56:	3302      	addeq	r3, #2
 8021b58:	2800      	cmp	r0, #0
 8021b5a:	db05      	blt.n	8021b68 <__hi0bits+0x38>
 8021b5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021b60:	f103 0301 	add.w	r3, r3, #1
 8021b64:	bf08      	it	eq
 8021b66:	2320      	moveq	r3, #32
 8021b68:	4618      	mov	r0, r3
 8021b6a:	4770      	bx	lr
 8021b6c:	2300      	movs	r3, #0
 8021b6e:	e7e4      	b.n	8021b3a <__hi0bits+0xa>

08021b70 <__lo0bits>:
 8021b70:	6803      	ldr	r3, [r0, #0]
 8021b72:	f013 0207 	ands.w	r2, r3, #7
 8021b76:	4601      	mov	r1, r0
 8021b78:	d00b      	beq.n	8021b92 <__lo0bits+0x22>
 8021b7a:	07da      	lsls	r2, r3, #31
 8021b7c:	d423      	bmi.n	8021bc6 <__lo0bits+0x56>
 8021b7e:	0798      	lsls	r0, r3, #30
 8021b80:	bf49      	itett	mi
 8021b82:	085b      	lsrmi	r3, r3, #1
 8021b84:	089b      	lsrpl	r3, r3, #2
 8021b86:	2001      	movmi	r0, #1
 8021b88:	600b      	strmi	r3, [r1, #0]
 8021b8a:	bf5c      	itt	pl
 8021b8c:	600b      	strpl	r3, [r1, #0]
 8021b8e:	2002      	movpl	r0, #2
 8021b90:	4770      	bx	lr
 8021b92:	b298      	uxth	r0, r3
 8021b94:	b9a8      	cbnz	r0, 8021bc2 <__lo0bits+0x52>
 8021b96:	0c1b      	lsrs	r3, r3, #16
 8021b98:	2010      	movs	r0, #16
 8021b9a:	b2da      	uxtb	r2, r3
 8021b9c:	b90a      	cbnz	r2, 8021ba2 <__lo0bits+0x32>
 8021b9e:	3008      	adds	r0, #8
 8021ba0:	0a1b      	lsrs	r3, r3, #8
 8021ba2:	071a      	lsls	r2, r3, #28
 8021ba4:	bf04      	itt	eq
 8021ba6:	091b      	lsreq	r3, r3, #4
 8021ba8:	3004      	addeq	r0, #4
 8021baa:	079a      	lsls	r2, r3, #30
 8021bac:	bf04      	itt	eq
 8021bae:	089b      	lsreq	r3, r3, #2
 8021bb0:	3002      	addeq	r0, #2
 8021bb2:	07da      	lsls	r2, r3, #31
 8021bb4:	d403      	bmi.n	8021bbe <__lo0bits+0x4e>
 8021bb6:	085b      	lsrs	r3, r3, #1
 8021bb8:	f100 0001 	add.w	r0, r0, #1
 8021bbc:	d005      	beq.n	8021bca <__lo0bits+0x5a>
 8021bbe:	600b      	str	r3, [r1, #0]
 8021bc0:	4770      	bx	lr
 8021bc2:	4610      	mov	r0, r2
 8021bc4:	e7e9      	b.n	8021b9a <__lo0bits+0x2a>
 8021bc6:	2000      	movs	r0, #0
 8021bc8:	4770      	bx	lr
 8021bca:	2020      	movs	r0, #32
 8021bcc:	4770      	bx	lr
	...

08021bd0 <__i2b>:
 8021bd0:	b510      	push	{r4, lr}
 8021bd2:	460c      	mov	r4, r1
 8021bd4:	2101      	movs	r1, #1
 8021bd6:	f7ff feb9 	bl	802194c <_Balloc>
 8021bda:	4602      	mov	r2, r0
 8021bdc:	b928      	cbnz	r0, 8021bea <__i2b+0x1a>
 8021bde:	4b05      	ldr	r3, [pc, #20]	; (8021bf4 <__i2b+0x24>)
 8021be0:	4805      	ldr	r0, [pc, #20]	; (8021bf8 <__i2b+0x28>)
 8021be2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021be6:	f000 fd6d 	bl	80226c4 <__assert_func>
 8021bea:	2301      	movs	r3, #1
 8021bec:	6144      	str	r4, [r0, #20]
 8021bee:	6103      	str	r3, [r0, #16]
 8021bf0:	bd10      	pop	{r4, pc}
 8021bf2:	bf00      	nop
 8021bf4:	08026130 	.word	0x08026130
 8021bf8:	080261bc 	.word	0x080261bc

08021bfc <__multiply>:
 8021bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c00:	4691      	mov	r9, r2
 8021c02:	690a      	ldr	r2, [r1, #16]
 8021c04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021c08:	429a      	cmp	r2, r3
 8021c0a:	bfb8      	it	lt
 8021c0c:	460b      	movlt	r3, r1
 8021c0e:	460c      	mov	r4, r1
 8021c10:	bfbc      	itt	lt
 8021c12:	464c      	movlt	r4, r9
 8021c14:	4699      	movlt	r9, r3
 8021c16:	6927      	ldr	r7, [r4, #16]
 8021c18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021c1c:	68a3      	ldr	r3, [r4, #8]
 8021c1e:	6861      	ldr	r1, [r4, #4]
 8021c20:	eb07 060a 	add.w	r6, r7, sl
 8021c24:	42b3      	cmp	r3, r6
 8021c26:	b085      	sub	sp, #20
 8021c28:	bfb8      	it	lt
 8021c2a:	3101      	addlt	r1, #1
 8021c2c:	f7ff fe8e 	bl	802194c <_Balloc>
 8021c30:	b930      	cbnz	r0, 8021c40 <__multiply+0x44>
 8021c32:	4602      	mov	r2, r0
 8021c34:	4b44      	ldr	r3, [pc, #272]	; (8021d48 <__multiply+0x14c>)
 8021c36:	4845      	ldr	r0, [pc, #276]	; (8021d4c <__multiply+0x150>)
 8021c38:	f240 115d 	movw	r1, #349	; 0x15d
 8021c3c:	f000 fd42 	bl	80226c4 <__assert_func>
 8021c40:	f100 0514 	add.w	r5, r0, #20
 8021c44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021c48:	462b      	mov	r3, r5
 8021c4a:	2200      	movs	r2, #0
 8021c4c:	4543      	cmp	r3, r8
 8021c4e:	d321      	bcc.n	8021c94 <__multiply+0x98>
 8021c50:	f104 0314 	add.w	r3, r4, #20
 8021c54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021c58:	f109 0314 	add.w	r3, r9, #20
 8021c5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021c60:	9202      	str	r2, [sp, #8]
 8021c62:	1b3a      	subs	r2, r7, r4
 8021c64:	3a15      	subs	r2, #21
 8021c66:	f022 0203 	bic.w	r2, r2, #3
 8021c6a:	3204      	adds	r2, #4
 8021c6c:	f104 0115 	add.w	r1, r4, #21
 8021c70:	428f      	cmp	r7, r1
 8021c72:	bf38      	it	cc
 8021c74:	2204      	movcc	r2, #4
 8021c76:	9201      	str	r2, [sp, #4]
 8021c78:	9a02      	ldr	r2, [sp, #8]
 8021c7a:	9303      	str	r3, [sp, #12]
 8021c7c:	429a      	cmp	r2, r3
 8021c7e:	d80c      	bhi.n	8021c9a <__multiply+0x9e>
 8021c80:	2e00      	cmp	r6, #0
 8021c82:	dd03      	ble.n	8021c8c <__multiply+0x90>
 8021c84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d05a      	beq.n	8021d42 <__multiply+0x146>
 8021c8c:	6106      	str	r6, [r0, #16]
 8021c8e:	b005      	add	sp, #20
 8021c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c94:	f843 2b04 	str.w	r2, [r3], #4
 8021c98:	e7d8      	b.n	8021c4c <__multiply+0x50>
 8021c9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8021c9e:	f1ba 0f00 	cmp.w	sl, #0
 8021ca2:	d024      	beq.n	8021cee <__multiply+0xf2>
 8021ca4:	f104 0e14 	add.w	lr, r4, #20
 8021ca8:	46a9      	mov	r9, r5
 8021caa:	f04f 0c00 	mov.w	ip, #0
 8021cae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021cb2:	f8d9 1000 	ldr.w	r1, [r9]
 8021cb6:	fa1f fb82 	uxth.w	fp, r2
 8021cba:	b289      	uxth	r1, r1
 8021cbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8021cc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8021cc8:	4461      	add	r1, ip
 8021cca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021cce:	fb0a c20b 	mla	r2, sl, fp, ip
 8021cd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021cd6:	b289      	uxth	r1, r1
 8021cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021cdc:	4577      	cmp	r7, lr
 8021cde:	f849 1b04 	str.w	r1, [r9], #4
 8021ce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021ce6:	d8e2      	bhi.n	8021cae <__multiply+0xb2>
 8021ce8:	9a01      	ldr	r2, [sp, #4]
 8021cea:	f845 c002 	str.w	ip, [r5, r2]
 8021cee:	9a03      	ldr	r2, [sp, #12]
 8021cf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021cf4:	3304      	adds	r3, #4
 8021cf6:	f1b9 0f00 	cmp.w	r9, #0
 8021cfa:	d020      	beq.n	8021d3e <__multiply+0x142>
 8021cfc:	6829      	ldr	r1, [r5, #0]
 8021cfe:	f104 0c14 	add.w	ip, r4, #20
 8021d02:	46ae      	mov	lr, r5
 8021d04:	f04f 0a00 	mov.w	sl, #0
 8021d08:	f8bc b000 	ldrh.w	fp, [ip]
 8021d0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021d10:	fb09 220b 	mla	r2, r9, fp, r2
 8021d14:	4492      	add	sl, r2
 8021d16:	b289      	uxth	r1, r1
 8021d18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021d1c:	f84e 1b04 	str.w	r1, [lr], #4
 8021d20:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021d24:	f8be 1000 	ldrh.w	r1, [lr]
 8021d28:	0c12      	lsrs	r2, r2, #16
 8021d2a:	fb09 1102 	mla	r1, r9, r2, r1
 8021d2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021d32:	4567      	cmp	r7, ip
 8021d34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021d38:	d8e6      	bhi.n	8021d08 <__multiply+0x10c>
 8021d3a:	9a01      	ldr	r2, [sp, #4]
 8021d3c:	50a9      	str	r1, [r5, r2]
 8021d3e:	3504      	adds	r5, #4
 8021d40:	e79a      	b.n	8021c78 <__multiply+0x7c>
 8021d42:	3e01      	subs	r6, #1
 8021d44:	e79c      	b.n	8021c80 <__multiply+0x84>
 8021d46:	bf00      	nop
 8021d48:	08026130 	.word	0x08026130
 8021d4c:	080261bc 	.word	0x080261bc

08021d50 <__pow5mult>:
 8021d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d54:	4615      	mov	r5, r2
 8021d56:	f012 0203 	ands.w	r2, r2, #3
 8021d5a:	4606      	mov	r6, r0
 8021d5c:	460f      	mov	r7, r1
 8021d5e:	d007      	beq.n	8021d70 <__pow5mult+0x20>
 8021d60:	4c25      	ldr	r4, [pc, #148]	; (8021df8 <__pow5mult+0xa8>)
 8021d62:	3a01      	subs	r2, #1
 8021d64:	2300      	movs	r3, #0
 8021d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021d6a:	f7ff fe51 	bl	8021a10 <__multadd>
 8021d6e:	4607      	mov	r7, r0
 8021d70:	10ad      	asrs	r5, r5, #2
 8021d72:	d03d      	beq.n	8021df0 <__pow5mult+0xa0>
 8021d74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021d76:	b97c      	cbnz	r4, 8021d98 <__pow5mult+0x48>
 8021d78:	2010      	movs	r0, #16
 8021d7a:	f7ff fdc1 	bl	8021900 <malloc>
 8021d7e:	4602      	mov	r2, r0
 8021d80:	6270      	str	r0, [r6, #36]	; 0x24
 8021d82:	b928      	cbnz	r0, 8021d90 <__pow5mult+0x40>
 8021d84:	4b1d      	ldr	r3, [pc, #116]	; (8021dfc <__pow5mult+0xac>)
 8021d86:	481e      	ldr	r0, [pc, #120]	; (8021e00 <__pow5mult+0xb0>)
 8021d88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021d8c:	f000 fc9a 	bl	80226c4 <__assert_func>
 8021d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021d94:	6004      	str	r4, [r0, #0]
 8021d96:	60c4      	str	r4, [r0, #12]
 8021d98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021da0:	b94c      	cbnz	r4, 8021db6 <__pow5mult+0x66>
 8021da2:	f240 2171 	movw	r1, #625	; 0x271
 8021da6:	4630      	mov	r0, r6
 8021da8:	f7ff ff12 	bl	8021bd0 <__i2b>
 8021dac:	2300      	movs	r3, #0
 8021dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8021db2:	4604      	mov	r4, r0
 8021db4:	6003      	str	r3, [r0, #0]
 8021db6:	f04f 0900 	mov.w	r9, #0
 8021dba:	07eb      	lsls	r3, r5, #31
 8021dbc:	d50a      	bpl.n	8021dd4 <__pow5mult+0x84>
 8021dbe:	4639      	mov	r1, r7
 8021dc0:	4622      	mov	r2, r4
 8021dc2:	4630      	mov	r0, r6
 8021dc4:	f7ff ff1a 	bl	8021bfc <__multiply>
 8021dc8:	4639      	mov	r1, r7
 8021dca:	4680      	mov	r8, r0
 8021dcc:	4630      	mov	r0, r6
 8021dce:	f7ff fdfd 	bl	80219cc <_Bfree>
 8021dd2:	4647      	mov	r7, r8
 8021dd4:	106d      	asrs	r5, r5, #1
 8021dd6:	d00b      	beq.n	8021df0 <__pow5mult+0xa0>
 8021dd8:	6820      	ldr	r0, [r4, #0]
 8021dda:	b938      	cbnz	r0, 8021dec <__pow5mult+0x9c>
 8021ddc:	4622      	mov	r2, r4
 8021dde:	4621      	mov	r1, r4
 8021de0:	4630      	mov	r0, r6
 8021de2:	f7ff ff0b 	bl	8021bfc <__multiply>
 8021de6:	6020      	str	r0, [r4, #0]
 8021de8:	f8c0 9000 	str.w	r9, [r0]
 8021dec:	4604      	mov	r4, r0
 8021dee:	e7e4      	b.n	8021dba <__pow5mult+0x6a>
 8021df0:	4638      	mov	r0, r7
 8021df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021df6:	bf00      	nop
 8021df8:	08026308 	.word	0x08026308
 8021dfc:	080260be 	.word	0x080260be
 8021e00:	080261bc 	.word	0x080261bc

08021e04 <__lshift>:
 8021e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e08:	460c      	mov	r4, r1
 8021e0a:	6849      	ldr	r1, [r1, #4]
 8021e0c:	6923      	ldr	r3, [r4, #16]
 8021e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021e12:	68a3      	ldr	r3, [r4, #8]
 8021e14:	4607      	mov	r7, r0
 8021e16:	4691      	mov	r9, r2
 8021e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021e1c:	f108 0601 	add.w	r6, r8, #1
 8021e20:	42b3      	cmp	r3, r6
 8021e22:	db0b      	blt.n	8021e3c <__lshift+0x38>
 8021e24:	4638      	mov	r0, r7
 8021e26:	f7ff fd91 	bl	802194c <_Balloc>
 8021e2a:	4605      	mov	r5, r0
 8021e2c:	b948      	cbnz	r0, 8021e42 <__lshift+0x3e>
 8021e2e:	4602      	mov	r2, r0
 8021e30:	4b2a      	ldr	r3, [pc, #168]	; (8021edc <__lshift+0xd8>)
 8021e32:	482b      	ldr	r0, [pc, #172]	; (8021ee0 <__lshift+0xdc>)
 8021e34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021e38:	f000 fc44 	bl	80226c4 <__assert_func>
 8021e3c:	3101      	adds	r1, #1
 8021e3e:	005b      	lsls	r3, r3, #1
 8021e40:	e7ee      	b.n	8021e20 <__lshift+0x1c>
 8021e42:	2300      	movs	r3, #0
 8021e44:	f100 0114 	add.w	r1, r0, #20
 8021e48:	f100 0210 	add.w	r2, r0, #16
 8021e4c:	4618      	mov	r0, r3
 8021e4e:	4553      	cmp	r3, sl
 8021e50:	db37      	blt.n	8021ec2 <__lshift+0xbe>
 8021e52:	6920      	ldr	r0, [r4, #16]
 8021e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021e58:	f104 0314 	add.w	r3, r4, #20
 8021e5c:	f019 091f 	ands.w	r9, r9, #31
 8021e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021e64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021e68:	d02f      	beq.n	8021eca <__lshift+0xc6>
 8021e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8021e6e:	468a      	mov	sl, r1
 8021e70:	f04f 0c00 	mov.w	ip, #0
 8021e74:	681a      	ldr	r2, [r3, #0]
 8021e76:	fa02 f209 	lsl.w	r2, r2, r9
 8021e7a:	ea42 020c 	orr.w	r2, r2, ip
 8021e7e:	f84a 2b04 	str.w	r2, [sl], #4
 8021e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e86:	4298      	cmp	r0, r3
 8021e88:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021e8c:	d8f2      	bhi.n	8021e74 <__lshift+0x70>
 8021e8e:	1b03      	subs	r3, r0, r4
 8021e90:	3b15      	subs	r3, #21
 8021e92:	f023 0303 	bic.w	r3, r3, #3
 8021e96:	3304      	adds	r3, #4
 8021e98:	f104 0215 	add.w	r2, r4, #21
 8021e9c:	4290      	cmp	r0, r2
 8021e9e:	bf38      	it	cc
 8021ea0:	2304      	movcc	r3, #4
 8021ea2:	f841 c003 	str.w	ip, [r1, r3]
 8021ea6:	f1bc 0f00 	cmp.w	ip, #0
 8021eaa:	d001      	beq.n	8021eb0 <__lshift+0xac>
 8021eac:	f108 0602 	add.w	r6, r8, #2
 8021eb0:	3e01      	subs	r6, #1
 8021eb2:	4638      	mov	r0, r7
 8021eb4:	612e      	str	r6, [r5, #16]
 8021eb6:	4621      	mov	r1, r4
 8021eb8:	f7ff fd88 	bl	80219cc <_Bfree>
 8021ebc:	4628      	mov	r0, r5
 8021ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ec2:	f842 0f04 	str.w	r0, [r2, #4]!
 8021ec6:	3301      	adds	r3, #1
 8021ec8:	e7c1      	b.n	8021e4e <__lshift+0x4a>
 8021eca:	3904      	subs	r1, #4
 8021ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8021ed0:	f841 2f04 	str.w	r2, [r1, #4]!
 8021ed4:	4298      	cmp	r0, r3
 8021ed6:	d8f9      	bhi.n	8021ecc <__lshift+0xc8>
 8021ed8:	e7ea      	b.n	8021eb0 <__lshift+0xac>
 8021eda:	bf00      	nop
 8021edc:	08026130 	.word	0x08026130
 8021ee0:	080261bc 	.word	0x080261bc

08021ee4 <__mcmp>:
 8021ee4:	b530      	push	{r4, r5, lr}
 8021ee6:	6902      	ldr	r2, [r0, #16]
 8021ee8:	690c      	ldr	r4, [r1, #16]
 8021eea:	1b12      	subs	r2, r2, r4
 8021eec:	d10e      	bne.n	8021f0c <__mcmp+0x28>
 8021eee:	f100 0314 	add.w	r3, r0, #20
 8021ef2:	3114      	adds	r1, #20
 8021ef4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021ef8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021efc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021f00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021f04:	42a5      	cmp	r5, r4
 8021f06:	d003      	beq.n	8021f10 <__mcmp+0x2c>
 8021f08:	d305      	bcc.n	8021f16 <__mcmp+0x32>
 8021f0a:	2201      	movs	r2, #1
 8021f0c:	4610      	mov	r0, r2
 8021f0e:	bd30      	pop	{r4, r5, pc}
 8021f10:	4283      	cmp	r3, r0
 8021f12:	d3f3      	bcc.n	8021efc <__mcmp+0x18>
 8021f14:	e7fa      	b.n	8021f0c <__mcmp+0x28>
 8021f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021f1a:	e7f7      	b.n	8021f0c <__mcmp+0x28>

08021f1c <__mdiff>:
 8021f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f20:	460c      	mov	r4, r1
 8021f22:	4606      	mov	r6, r0
 8021f24:	4611      	mov	r1, r2
 8021f26:	4620      	mov	r0, r4
 8021f28:	4690      	mov	r8, r2
 8021f2a:	f7ff ffdb 	bl	8021ee4 <__mcmp>
 8021f2e:	1e05      	subs	r5, r0, #0
 8021f30:	d110      	bne.n	8021f54 <__mdiff+0x38>
 8021f32:	4629      	mov	r1, r5
 8021f34:	4630      	mov	r0, r6
 8021f36:	f7ff fd09 	bl	802194c <_Balloc>
 8021f3a:	b930      	cbnz	r0, 8021f4a <__mdiff+0x2e>
 8021f3c:	4b3a      	ldr	r3, [pc, #232]	; (8022028 <__mdiff+0x10c>)
 8021f3e:	4602      	mov	r2, r0
 8021f40:	f240 2132 	movw	r1, #562	; 0x232
 8021f44:	4839      	ldr	r0, [pc, #228]	; (802202c <__mdiff+0x110>)
 8021f46:	f000 fbbd 	bl	80226c4 <__assert_func>
 8021f4a:	2301      	movs	r3, #1
 8021f4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f54:	bfa4      	itt	ge
 8021f56:	4643      	movge	r3, r8
 8021f58:	46a0      	movge	r8, r4
 8021f5a:	4630      	mov	r0, r6
 8021f5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021f60:	bfa6      	itte	ge
 8021f62:	461c      	movge	r4, r3
 8021f64:	2500      	movge	r5, #0
 8021f66:	2501      	movlt	r5, #1
 8021f68:	f7ff fcf0 	bl	802194c <_Balloc>
 8021f6c:	b920      	cbnz	r0, 8021f78 <__mdiff+0x5c>
 8021f6e:	4b2e      	ldr	r3, [pc, #184]	; (8022028 <__mdiff+0x10c>)
 8021f70:	4602      	mov	r2, r0
 8021f72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021f76:	e7e5      	b.n	8021f44 <__mdiff+0x28>
 8021f78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021f7c:	6926      	ldr	r6, [r4, #16]
 8021f7e:	60c5      	str	r5, [r0, #12]
 8021f80:	f104 0914 	add.w	r9, r4, #20
 8021f84:	f108 0514 	add.w	r5, r8, #20
 8021f88:	f100 0e14 	add.w	lr, r0, #20
 8021f8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021f90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021f94:	f108 0210 	add.w	r2, r8, #16
 8021f98:	46f2      	mov	sl, lr
 8021f9a:	2100      	movs	r1, #0
 8021f9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8021fa0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021fa4:	fa1f f883 	uxth.w	r8, r3
 8021fa8:	fa11 f18b 	uxtah	r1, r1, fp
 8021fac:	0c1b      	lsrs	r3, r3, #16
 8021fae:	eba1 0808 	sub.w	r8, r1, r8
 8021fb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021fb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021fba:	fa1f f888 	uxth.w	r8, r8
 8021fbe:	1419      	asrs	r1, r3, #16
 8021fc0:	454e      	cmp	r6, r9
 8021fc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021fc6:	f84a 3b04 	str.w	r3, [sl], #4
 8021fca:	d8e7      	bhi.n	8021f9c <__mdiff+0x80>
 8021fcc:	1b33      	subs	r3, r6, r4
 8021fce:	3b15      	subs	r3, #21
 8021fd0:	f023 0303 	bic.w	r3, r3, #3
 8021fd4:	3304      	adds	r3, #4
 8021fd6:	3415      	adds	r4, #21
 8021fd8:	42a6      	cmp	r6, r4
 8021fda:	bf38      	it	cc
 8021fdc:	2304      	movcc	r3, #4
 8021fde:	441d      	add	r5, r3
 8021fe0:	4473      	add	r3, lr
 8021fe2:	469e      	mov	lr, r3
 8021fe4:	462e      	mov	r6, r5
 8021fe6:	4566      	cmp	r6, ip
 8021fe8:	d30e      	bcc.n	8022008 <__mdiff+0xec>
 8021fea:	f10c 0203 	add.w	r2, ip, #3
 8021fee:	1b52      	subs	r2, r2, r5
 8021ff0:	f022 0203 	bic.w	r2, r2, #3
 8021ff4:	3d03      	subs	r5, #3
 8021ff6:	45ac      	cmp	ip, r5
 8021ff8:	bf38      	it	cc
 8021ffa:	2200      	movcc	r2, #0
 8021ffc:	441a      	add	r2, r3
 8021ffe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022002:	b17b      	cbz	r3, 8022024 <__mdiff+0x108>
 8022004:	6107      	str	r7, [r0, #16]
 8022006:	e7a3      	b.n	8021f50 <__mdiff+0x34>
 8022008:	f856 8b04 	ldr.w	r8, [r6], #4
 802200c:	fa11 f288 	uxtah	r2, r1, r8
 8022010:	1414      	asrs	r4, r2, #16
 8022012:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022016:	b292      	uxth	r2, r2
 8022018:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802201c:	f84e 2b04 	str.w	r2, [lr], #4
 8022020:	1421      	asrs	r1, r4, #16
 8022022:	e7e0      	b.n	8021fe6 <__mdiff+0xca>
 8022024:	3f01      	subs	r7, #1
 8022026:	e7ea      	b.n	8021ffe <__mdiff+0xe2>
 8022028:	08026130 	.word	0x08026130
 802202c:	080261bc 	.word	0x080261bc

08022030 <__ulp>:
 8022030:	b082      	sub	sp, #8
 8022032:	ed8d 0b00 	vstr	d0, [sp]
 8022036:	9b01      	ldr	r3, [sp, #4]
 8022038:	4912      	ldr	r1, [pc, #72]	; (8022084 <__ulp+0x54>)
 802203a:	4019      	ands	r1, r3
 802203c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022040:	2900      	cmp	r1, #0
 8022042:	dd05      	ble.n	8022050 <__ulp+0x20>
 8022044:	2200      	movs	r2, #0
 8022046:	460b      	mov	r3, r1
 8022048:	ec43 2b10 	vmov	d0, r2, r3
 802204c:	b002      	add	sp, #8
 802204e:	4770      	bx	lr
 8022050:	4249      	negs	r1, r1
 8022052:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8022056:	ea4f 5021 	mov.w	r0, r1, asr #20
 802205a:	f04f 0200 	mov.w	r2, #0
 802205e:	f04f 0300 	mov.w	r3, #0
 8022062:	da04      	bge.n	802206e <__ulp+0x3e>
 8022064:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8022068:	fa41 f300 	asr.w	r3, r1, r0
 802206c:	e7ec      	b.n	8022048 <__ulp+0x18>
 802206e:	f1a0 0114 	sub.w	r1, r0, #20
 8022072:	291e      	cmp	r1, #30
 8022074:	bfda      	itte	le
 8022076:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802207a:	fa20 f101 	lsrle.w	r1, r0, r1
 802207e:	2101      	movgt	r1, #1
 8022080:	460a      	mov	r2, r1
 8022082:	e7e1      	b.n	8022048 <__ulp+0x18>
 8022084:	7ff00000 	.word	0x7ff00000

08022088 <__b2d>:
 8022088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802208a:	6905      	ldr	r5, [r0, #16]
 802208c:	f100 0714 	add.w	r7, r0, #20
 8022090:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022094:	1f2e      	subs	r6, r5, #4
 8022096:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802209a:	4620      	mov	r0, r4
 802209c:	f7ff fd48 	bl	8021b30 <__hi0bits>
 80220a0:	f1c0 0320 	rsb	r3, r0, #32
 80220a4:	280a      	cmp	r0, #10
 80220a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022124 <__b2d+0x9c>
 80220aa:	600b      	str	r3, [r1, #0]
 80220ac:	dc14      	bgt.n	80220d8 <__b2d+0x50>
 80220ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80220b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80220b6:	42b7      	cmp	r7, r6
 80220b8:	ea41 030c 	orr.w	r3, r1, ip
 80220bc:	bf34      	ite	cc
 80220be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80220c2:	2100      	movcs	r1, #0
 80220c4:	3015      	adds	r0, #21
 80220c6:	fa04 f000 	lsl.w	r0, r4, r0
 80220ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80220ce:	ea40 0201 	orr.w	r2, r0, r1
 80220d2:	ec43 2b10 	vmov	d0, r2, r3
 80220d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220d8:	42b7      	cmp	r7, r6
 80220da:	bf3a      	itte	cc
 80220dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80220e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80220e4:	2100      	movcs	r1, #0
 80220e6:	380b      	subs	r0, #11
 80220e8:	d017      	beq.n	802211a <__b2d+0x92>
 80220ea:	f1c0 0c20 	rsb	ip, r0, #32
 80220ee:	fa04 f500 	lsl.w	r5, r4, r0
 80220f2:	42be      	cmp	r6, r7
 80220f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80220f8:	ea45 0504 	orr.w	r5, r5, r4
 80220fc:	bf8c      	ite	hi
 80220fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022102:	2400      	movls	r4, #0
 8022104:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022108:	fa01 f000 	lsl.w	r0, r1, r0
 802210c:	fa24 f40c 	lsr.w	r4, r4, ip
 8022110:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022114:	ea40 0204 	orr.w	r2, r0, r4
 8022118:	e7db      	b.n	80220d2 <__b2d+0x4a>
 802211a:	ea44 030c 	orr.w	r3, r4, ip
 802211e:	460a      	mov	r2, r1
 8022120:	e7d7      	b.n	80220d2 <__b2d+0x4a>
 8022122:	bf00      	nop
 8022124:	3ff00000 	.word	0x3ff00000

08022128 <__d2b>:
 8022128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802212c:	4689      	mov	r9, r1
 802212e:	2101      	movs	r1, #1
 8022130:	ec57 6b10 	vmov	r6, r7, d0
 8022134:	4690      	mov	r8, r2
 8022136:	f7ff fc09 	bl	802194c <_Balloc>
 802213a:	4604      	mov	r4, r0
 802213c:	b930      	cbnz	r0, 802214c <__d2b+0x24>
 802213e:	4602      	mov	r2, r0
 8022140:	4b25      	ldr	r3, [pc, #148]	; (80221d8 <__d2b+0xb0>)
 8022142:	4826      	ldr	r0, [pc, #152]	; (80221dc <__d2b+0xb4>)
 8022144:	f240 310a 	movw	r1, #778	; 0x30a
 8022148:	f000 fabc 	bl	80226c4 <__assert_func>
 802214c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022154:	bb35      	cbnz	r5, 80221a4 <__d2b+0x7c>
 8022156:	2e00      	cmp	r6, #0
 8022158:	9301      	str	r3, [sp, #4]
 802215a:	d028      	beq.n	80221ae <__d2b+0x86>
 802215c:	4668      	mov	r0, sp
 802215e:	9600      	str	r6, [sp, #0]
 8022160:	f7ff fd06 	bl	8021b70 <__lo0bits>
 8022164:	9900      	ldr	r1, [sp, #0]
 8022166:	b300      	cbz	r0, 80221aa <__d2b+0x82>
 8022168:	9a01      	ldr	r2, [sp, #4]
 802216a:	f1c0 0320 	rsb	r3, r0, #32
 802216e:	fa02 f303 	lsl.w	r3, r2, r3
 8022172:	430b      	orrs	r3, r1
 8022174:	40c2      	lsrs	r2, r0
 8022176:	6163      	str	r3, [r4, #20]
 8022178:	9201      	str	r2, [sp, #4]
 802217a:	9b01      	ldr	r3, [sp, #4]
 802217c:	61a3      	str	r3, [r4, #24]
 802217e:	2b00      	cmp	r3, #0
 8022180:	bf14      	ite	ne
 8022182:	2202      	movne	r2, #2
 8022184:	2201      	moveq	r2, #1
 8022186:	6122      	str	r2, [r4, #16]
 8022188:	b1d5      	cbz	r5, 80221c0 <__d2b+0x98>
 802218a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802218e:	4405      	add	r5, r0
 8022190:	f8c9 5000 	str.w	r5, [r9]
 8022194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022198:	f8c8 0000 	str.w	r0, [r8]
 802219c:	4620      	mov	r0, r4
 802219e:	b003      	add	sp, #12
 80221a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80221a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80221a8:	e7d5      	b.n	8022156 <__d2b+0x2e>
 80221aa:	6161      	str	r1, [r4, #20]
 80221ac:	e7e5      	b.n	802217a <__d2b+0x52>
 80221ae:	a801      	add	r0, sp, #4
 80221b0:	f7ff fcde 	bl	8021b70 <__lo0bits>
 80221b4:	9b01      	ldr	r3, [sp, #4]
 80221b6:	6163      	str	r3, [r4, #20]
 80221b8:	2201      	movs	r2, #1
 80221ba:	6122      	str	r2, [r4, #16]
 80221bc:	3020      	adds	r0, #32
 80221be:	e7e3      	b.n	8022188 <__d2b+0x60>
 80221c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80221c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80221c8:	f8c9 0000 	str.w	r0, [r9]
 80221cc:	6918      	ldr	r0, [r3, #16]
 80221ce:	f7ff fcaf 	bl	8021b30 <__hi0bits>
 80221d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80221d6:	e7df      	b.n	8022198 <__d2b+0x70>
 80221d8:	08026130 	.word	0x08026130
 80221dc:	080261bc 	.word	0x080261bc

080221e0 <__ratio>:
 80221e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221e4:	4688      	mov	r8, r1
 80221e6:	4669      	mov	r1, sp
 80221e8:	4681      	mov	r9, r0
 80221ea:	f7ff ff4d 	bl	8022088 <__b2d>
 80221ee:	a901      	add	r1, sp, #4
 80221f0:	4640      	mov	r0, r8
 80221f2:	ec55 4b10 	vmov	r4, r5, d0
 80221f6:	f7ff ff47 	bl	8022088 <__b2d>
 80221fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80221fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022202:	eba3 0c02 	sub.w	ip, r3, r2
 8022206:	e9dd 3200 	ldrd	r3, r2, [sp]
 802220a:	1a9b      	subs	r3, r3, r2
 802220c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022210:	ec51 0b10 	vmov	r0, r1, d0
 8022214:	2b00      	cmp	r3, #0
 8022216:	bfd6      	itet	le
 8022218:	460a      	movle	r2, r1
 802221a:	462a      	movgt	r2, r5
 802221c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022220:	468b      	mov	fp, r1
 8022222:	462f      	mov	r7, r5
 8022224:	bfd4      	ite	le
 8022226:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802222a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802222e:	4620      	mov	r0, r4
 8022230:	ee10 2a10 	vmov	r2, s0
 8022234:	465b      	mov	r3, fp
 8022236:	4639      	mov	r1, r7
 8022238:	f7de fb08 	bl	800084c <__aeabi_ddiv>
 802223c:	ec41 0b10 	vmov	d0, r0, r1
 8022240:	b003      	add	sp, #12
 8022242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022246 <__copybits>:
 8022246:	3901      	subs	r1, #1
 8022248:	b570      	push	{r4, r5, r6, lr}
 802224a:	1149      	asrs	r1, r1, #5
 802224c:	6914      	ldr	r4, [r2, #16]
 802224e:	3101      	adds	r1, #1
 8022250:	f102 0314 	add.w	r3, r2, #20
 8022254:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022258:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802225c:	1f05      	subs	r5, r0, #4
 802225e:	42a3      	cmp	r3, r4
 8022260:	d30c      	bcc.n	802227c <__copybits+0x36>
 8022262:	1aa3      	subs	r3, r4, r2
 8022264:	3b11      	subs	r3, #17
 8022266:	f023 0303 	bic.w	r3, r3, #3
 802226a:	3211      	adds	r2, #17
 802226c:	42a2      	cmp	r2, r4
 802226e:	bf88      	it	hi
 8022270:	2300      	movhi	r3, #0
 8022272:	4418      	add	r0, r3
 8022274:	2300      	movs	r3, #0
 8022276:	4288      	cmp	r0, r1
 8022278:	d305      	bcc.n	8022286 <__copybits+0x40>
 802227a:	bd70      	pop	{r4, r5, r6, pc}
 802227c:	f853 6b04 	ldr.w	r6, [r3], #4
 8022280:	f845 6f04 	str.w	r6, [r5, #4]!
 8022284:	e7eb      	b.n	802225e <__copybits+0x18>
 8022286:	f840 3b04 	str.w	r3, [r0], #4
 802228a:	e7f4      	b.n	8022276 <__copybits+0x30>

0802228c <__any_on>:
 802228c:	f100 0214 	add.w	r2, r0, #20
 8022290:	6900      	ldr	r0, [r0, #16]
 8022292:	114b      	asrs	r3, r1, #5
 8022294:	4298      	cmp	r0, r3
 8022296:	b510      	push	{r4, lr}
 8022298:	db11      	blt.n	80222be <__any_on+0x32>
 802229a:	dd0a      	ble.n	80222b2 <__any_on+0x26>
 802229c:	f011 011f 	ands.w	r1, r1, #31
 80222a0:	d007      	beq.n	80222b2 <__any_on+0x26>
 80222a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80222a6:	fa24 f001 	lsr.w	r0, r4, r1
 80222aa:	fa00 f101 	lsl.w	r1, r0, r1
 80222ae:	428c      	cmp	r4, r1
 80222b0:	d10b      	bne.n	80222ca <__any_on+0x3e>
 80222b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80222b6:	4293      	cmp	r3, r2
 80222b8:	d803      	bhi.n	80222c2 <__any_on+0x36>
 80222ba:	2000      	movs	r0, #0
 80222bc:	bd10      	pop	{r4, pc}
 80222be:	4603      	mov	r3, r0
 80222c0:	e7f7      	b.n	80222b2 <__any_on+0x26>
 80222c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80222c6:	2900      	cmp	r1, #0
 80222c8:	d0f5      	beq.n	80222b6 <__any_on+0x2a>
 80222ca:	2001      	movs	r0, #1
 80222cc:	e7f6      	b.n	80222bc <__any_on+0x30>

080222ce <_calloc_r>:
 80222ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80222d0:	fba1 2402 	umull	r2, r4, r1, r2
 80222d4:	b94c      	cbnz	r4, 80222ea <_calloc_r+0x1c>
 80222d6:	4611      	mov	r1, r2
 80222d8:	9201      	str	r2, [sp, #4]
 80222da:	f7fc f973 	bl	801e5c4 <_malloc_r>
 80222de:	9a01      	ldr	r2, [sp, #4]
 80222e0:	4605      	mov	r5, r0
 80222e2:	b930      	cbnz	r0, 80222f2 <_calloc_r+0x24>
 80222e4:	4628      	mov	r0, r5
 80222e6:	b003      	add	sp, #12
 80222e8:	bd30      	pop	{r4, r5, pc}
 80222ea:	220c      	movs	r2, #12
 80222ec:	6002      	str	r2, [r0, #0]
 80222ee:	2500      	movs	r5, #0
 80222f0:	e7f8      	b.n	80222e4 <_calloc_r+0x16>
 80222f2:	4621      	mov	r1, r4
 80222f4:	f7fc f93d 	bl	801e572 <memset>
 80222f8:	e7f4      	b.n	80222e4 <_calloc_r+0x16>
	...

080222fc <_free_r>:
 80222fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80222fe:	2900      	cmp	r1, #0
 8022300:	d044      	beq.n	802238c <_free_r+0x90>
 8022302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022306:	9001      	str	r0, [sp, #4]
 8022308:	2b00      	cmp	r3, #0
 802230a:	f1a1 0404 	sub.w	r4, r1, #4
 802230e:	bfb8      	it	lt
 8022310:	18e4      	addlt	r4, r4, r3
 8022312:	f7ff fb0f 	bl	8021934 <__malloc_lock>
 8022316:	4a1e      	ldr	r2, [pc, #120]	; (8022390 <_free_r+0x94>)
 8022318:	9801      	ldr	r0, [sp, #4]
 802231a:	6813      	ldr	r3, [r2, #0]
 802231c:	b933      	cbnz	r3, 802232c <_free_r+0x30>
 802231e:	6063      	str	r3, [r4, #4]
 8022320:	6014      	str	r4, [r2, #0]
 8022322:	b003      	add	sp, #12
 8022324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022328:	f7ff bb0a 	b.w	8021940 <__malloc_unlock>
 802232c:	42a3      	cmp	r3, r4
 802232e:	d908      	bls.n	8022342 <_free_r+0x46>
 8022330:	6825      	ldr	r5, [r4, #0]
 8022332:	1961      	adds	r1, r4, r5
 8022334:	428b      	cmp	r3, r1
 8022336:	bf01      	itttt	eq
 8022338:	6819      	ldreq	r1, [r3, #0]
 802233a:	685b      	ldreq	r3, [r3, #4]
 802233c:	1949      	addeq	r1, r1, r5
 802233e:	6021      	streq	r1, [r4, #0]
 8022340:	e7ed      	b.n	802231e <_free_r+0x22>
 8022342:	461a      	mov	r2, r3
 8022344:	685b      	ldr	r3, [r3, #4]
 8022346:	b10b      	cbz	r3, 802234c <_free_r+0x50>
 8022348:	42a3      	cmp	r3, r4
 802234a:	d9fa      	bls.n	8022342 <_free_r+0x46>
 802234c:	6811      	ldr	r1, [r2, #0]
 802234e:	1855      	adds	r5, r2, r1
 8022350:	42a5      	cmp	r5, r4
 8022352:	d10b      	bne.n	802236c <_free_r+0x70>
 8022354:	6824      	ldr	r4, [r4, #0]
 8022356:	4421      	add	r1, r4
 8022358:	1854      	adds	r4, r2, r1
 802235a:	42a3      	cmp	r3, r4
 802235c:	6011      	str	r1, [r2, #0]
 802235e:	d1e0      	bne.n	8022322 <_free_r+0x26>
 8022360:	681c      	ldr	r4, [r3, #0]
 8022362:	685b      	ldr	r3, [r3, #4]
 8022364:	6053      	str	r3, [r2, #4]
 8022366:	4421      	add	r1, r4
 8022368:	6011      	str	r1, [r2, #0]
 802236a:	e7da      	b.n	8022322 <_free_r+0x26>
 802236c:	d902      	bls.n	8022374 <_free_r+0x78>
 802236e:	230c      	movs	r3, #12
 8022370:	6003      	str	r3, [r0, #0]
 8022372:	e7d6      	b.n	8022322 <_free_r+0x26>
 8022374:	6825      	ldr	r5, [r4, #0]
 8022376:	1961      	adds	r1, r4, r5
 8022378:	428b      	cmp	r3, r1
 802237a:	bf04      	itt	eq
 802237c:	6819      	ldreq	r1, [r3, #0]
 802237e:	685b      	ldreq	r3, [r3, #4]
 8022380:	6063      	str	r3, [r4, #4]
 8022382:	bf04      	itt	eq
 8022384:	1949      	addeq	r1, r1, r5
 8022386:	6021      	streq	r1, [r4, #0]
 8022388:	6054      	str	r4, [r2, #4]
 802238a:	e7ca      	b.n	8022322 <_free_r+0x26>
 802238c:	b003      	add	sp, #12
 802238e:	bd30      	pop	{r4, r5, pc}
 8022390:	2000f494 	.word	0x2000f494

08022394 <__ssputs_r>:
 8022394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022398:	688e      	ldr	r6, [r1, #8]
 802239a:	429e      	cmp	r6, r3
 802239c:	4682      	mov	sl, r0
 802239e:	460c      	mov	r4, r1
 80223a0:	4690      	mov	r8, r2
 80223a2:	461f      	mov	r7, r3
 80223a4:	d838      	bhi.n	8022418 <__ssputs_r+0x84>
 80223a6:	898a      	ldrh	r2, [r1, #12]
 80223a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80223ac:	d032      	beq.n	8022414 <__ssputs_r+0x80>
 80223ae:	6825      	ldr	r5, [r4, #0]
 80223b0:	6909      	ldr	r1, [r1, #16]
 80223b2:	eba5 0901 	sub.w	r9, r5, r1
 80223b6:	6965      	ldr	r5, [r4, #20]
 80223b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80223bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80223c0:	3301      	adds	r3, #1
 80223c2:	444b      	add	r3, r9
 80223c4:	106d      	asrs	r5, r5, #1
 80223c6:	429d      	cmp	r5, r3
 80223c8:	bf38      	it	cc
 80223ca:	461d      	movcc	r5, r3
 80223cc:	0553      	lsls	r3, r2, #21
 80223ce:	d531      	bpl.n	8022434 <__ssputs_r+0xa0>
 80223d0:	4629      	mov	r1, r5
 80223d2:	f7fc f8f7 	bl	801e5c4 <_malloc_r>
 80223d6:	4606      	mov	r6, r0
 80223d8:	b950      	cbnz	r0, 80223f0 <__ssputs_r+0x5c>
 80223da:	230c      	movs	r3, #12
 80223dc:	f8ca 3000 	str.w	r3, [sl]
 80223e0:	89a3      	ldrh	r3, [r4, #12]
 80223e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80223e6:	81a3      	strh	r3, [r4, #12]
 80223e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80223ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223f0:	6921      	ldr	r1, [r4, #16]
 80223f2:	464a      	mov	r2, r9
 80223f4:	f7fc f8af 	bl	801e556 <memcpy>
 80223f8:	89a3      	ldrh	r3, [r4, #12]
 80223fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80223fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022402:	81a3      	strh	r3, [r4, #12]
 8022404:	6126      	str	r6, [r4, #16]
 8022406:	6165      	str	r5, [r4, #20]
 8022408:	444e      	add	r6, r9
 802240a:	eba5 0509 	sub.w	r5, r5, r9
 802240e:	6026      	str	r6, [r4, #0]
 8022410:	60a5      	str	r5, [r4, #8]
 8022412:	463e      	mov	r6, r7
 8022414:	42be      	cmp	r6, r7
 8022416:	d900      	bls.n	802241a <__ssputs_r+0x86>
 8022418:	463e      	mov	r6, r7
 802241a:	6820      	ldr	r0, [r4, #0]
 802241c:	4632      	mov	r2, r6
 802241e:	4641      	mov	r1, r8
 8022420:	f000 f980 	bl	8022724 <memmove>
 8022424:	68a3      	ldr	r3, [r4, #8]
 8022426:	1b9b      	subs	r3, r3, r6
 8022428:	60a3      	str	r3, [r4, #8]
 802242a:	6823      	ldr	r3, [r4, #0]
 802242c:	4433      	add	r3, r6
 802242e:	6023      	str	r3, [r4, #0]
 8022430:	2000      	movs	r0, #0
 8022432:	e7db      	b.n	80223ec <__ssputs_r+0x58>
 8022434:	462a      	mov	r2, r5
 8022436:	f000 f98f 	bl	8022758 <_realloc_r>
 802243a:	4606      	mov	r6, r0
 802243c:	2800      	cmp	r0, #0
 802243e:	d1e1      	bne.n	8022404 <__ssputs_r+0x70>
 8022440:	6921      	ldr	r1, [r4, #16]
 8022442:	4650      	mov	r0, sl
 8022444:	f7ff ff5a 	bl	80222fc <_free_r>
 8022448:	e7c7      	b.n	80223da <__ssputs_r+0x46>
	...

0802244c <_svfiprintf_r>:
 802244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022450:	4698      	mov	r8, r3
 8022452:	898b      	ldrh	r3, [r1, #12]
 8022454:	061b      	lsls	r3, r3, #24
 8022456:	b09d      	sub	sp, #116	; 0x74
 8022458:	4607      	mov	r7, r0
 802245a:	460d      	mov	r5, r1
 802245c:	4614      	mov	r4, r2
 802245e:	d50e      	bpl.n	802247e <_svfiprintf_r+0x32>
 8022460:	690b      	ldr	r3, [r1, #16]
 8022462:	b963      	cbnz	r3, 802247e <_svfiprintf_r+0x32>
 8022464:	2140      	movs	r1, #64	; 0x40
 8022466:	f7fc f8ad 	bl	801e5c4 <_malloc_r>
 802246a:	6028      	str	r0, [r5, #0]
 802246c:	6128      	str	r0, [r5, #16]
 802246e:	b920      	cbnz	r0, 802247a <_svfiprintf_r+0x2e>
 8022470:	230c      	movs	r3, #12
 8022472:	603b      	str	r3, [r7, #0]
 8022474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022478:	e0d1      	b.n	802261e <_svfiprintf_r+0x1d2>
 802247a:	2340      	movs	r3, #64	; 0x40
 802247c:	616b      	str	r3, [r5, #20]
 802247e:	2300      	movs	r3, #0
 8022480:	9309      	str	r3, [sp, #36]	; 0x24
 8022482:	2320      	movs	r3, #32
 8022484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022488:	f8cd 800c 	str.w	r8, [sp, #12]
 802248c:	2330      	movs	r3, #48	; 0x30
 802248e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022638 <_svfiprintf_r+0x1ec>
 8022492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022496:	f04f 0901 	mov.w	r9, #1
 802249a:	4623      	mov	r3, r4
 802249c:	469a      	mov	sl, r3
 802249e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80224a2:	b10a      	cbz	r2, 80224a8 <_svfiprintf_r+0x5c>
 80224a4:	2a25      	cmp	r2, #37	; 0x25
 80224a6:	d1f9      	bne.n	802249c <_svfiprintf_r+0x50>
 80224a8:	ebba 0b04 	subs.w	fp, sl, r4
 80224ac:	d00b      	beq.n	80224c6 <_svfiprintf_r+0x7a>
 80224ae:	465b      	mov	r3, fp
 80224b0:	4622      	mov	r2, r4
 80224b2:	4629      	mov	r1, r5
 80224b4:	4638      	mov	r0, r7
 80224b6:	f7ff ff6d 	bl	8022394 <__ssputs_r>
 80224ba:	3001      	adds	r0, #1
 80224bc:	f000 80aa 	beq.w	8022614 <_svfiprintf_r+0x1c8>
 80224c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80224c2:	445a      	add	r2, fp
 80224c4:	9209      	str	r2, [sp, #36]	; 0x24
 80224c6:	f89a 3000 	ldrb.w	r3, [sl]
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	f000 80a2 	beq.w	8022614 <_svfiprintf_r+0x1c8>
 80224d0:	2300      	movs	r3, #0
 80224d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80224d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80224da:	f10a 0a01 	add.w	sl, sl, #1
 80224de:	9304      	str	r3, [sp, #16]
 80224e0:	9307      	str	r3, [sp, #28]
 80224e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80224e6:	931a      	str	r3, [sp, #104]	; 0x68
 80224e8:	4654      	mov	r4, sl
 80224ea:	2205      	movs	r2, #5
 80224ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80224f0:	4851      	ldr	r0, [pc, #324]	; (8022638 <_svfiprintf_r+0x1ec>)
 80224f2:	f7dd fe75 	bl	80001e0 <memchr>
 80224f6:	9a04      	ldr	r2, [sp, #16]
 80224f8:	b9d8      	cbnz	r0, 8022532 <_svfiprintf_r+0xe6>
 80224fa:	06d0      	lsls	r0, r2, #27
 80224fc:	bf44      	itt	mi
 80224fe:	2320      	movmi	r3, #32
 8022500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022504:	0711      	lsls	r1, r2, #28
 8022506:	bf44      	itt	mi
 8022508:	232b      	movmi	r3, #43	; 0x2b
 802250a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802250e:	f89a 3000 	ldrb.w	r3, [sl]
 8022512:	2b2a      	cmp	r3, #42	; 0x2a
 8022514:	d015      	beq.n	8022542 <_svfiprintf_r+0xf6>
 8022516:	9a07      	ldr	r2, [sp, #28]
 8022518:	4654      	mov	r4, sl
 802251a:	2000      	movs	r0, #0
 802251c:	f04f 0c0a 	mov.w	ip, #10
 8022520:	4621      	mov	r1, r4
 8022522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022526:	3b30      	subs	r3, #48	; 0x30
 8022528:	2b09      	cmp	r3, #9
 802252a:	d94e      	bls.n	80225ca <_svfiprintf_r+0x17e>
 802252c:	b1b0      	cbz	r0, 802255c <_svfiprintf_r+0x110>
 802252e:	9207      	str	r2, [sp, #28]
 8022530:	e014      	b.n	802255c <_svfiprintf_r+0x110>
 8022532:	eba0 0308 	sub.w	r3, r0, r8
 8022536:	fa09 f303 	lsl.w	r3, r9, r3
 802253a:	4313      	orrs	r3, r2
 802253c:	9304      	str	r3, [sp, #16]
 802253e:	46a2      	mov	sl, r4
 8022540:	e7d2      	b.n	80224e8 <_svfiprintf_r+0x9c>
 8022542:	9b03      	ldr	r3, [sp, #12]
 8022544:	1d19      	adds	r1, r3, #4
 8022546:	681b      	ldr	r3, [r3, #0]
 8022548:	9103      	str	r1, [sp, #12]
 802254a:	2b00      	cmp	r3, #0
 802254c:	bfbb      	ittet	lt
 802254e:	425b      	neglt	r3, r3
 8022550:	f042 0202 	orrlt.w	r2, r2, #2
 8022554:	9307      	strge	r3, [sp, #28]
 8022556:	9307      	strlt	r3, [sp, #28]
 8022558:	bfb8      	it	lt
 802255a:	9204      	strlt	r2, [sp, #16]
 802255c:	7823      	ldrb	r3, [r4, #0]
 802255e:	2b2e      	cmp	r3, #46	; 0x2e
 8022560:	d10c      	bne.n	802257c <_svfiprintf_r+0x130>
 8022562:	7863      	ldrb	r3, [r4, #1]
 8022564:	2b2a      	cmp	r3, #42	; 0x2a
 8022566:	d135      	bne.n	80225d4 <_svfiprintf_r+0x188>
 8022568:	9b03      	ldr	r3, [sp, #12]
 802256a:	1d1a      	adds	r2, r3, #4
 802256c:	681b      	ldr	r3, [r3, #0]
 802256e:	9203      	str	r2, [sp, #12]
 8022570:	2b00      	cmp	r3, #0
 8022572:	bfb8      	it	lt
 8022574:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022578:	3402      	adds	r4, #2
 802257a:	9305      	str	r3, [sp, #20]
 802257c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022648 <_svfiprintf_r+0x1fc>
 8022580:	7821      	ldrb	r1, [r4, #0]
 8022582:	2203      	movs	r2, #3
 8022584:	4650      	mov	r0, sl
 8022586:	f7dd fe2b 	bl	80001e0 <memchr>
 802258a:	b140      	cbz	r0, 802259e <_svfiprintf_r+0x152>
 802258c:	2340      	movs	r3, #64	; 0x40
 802258e:	eba0 000a 	sub.w	r0, r0, sl
 8022592:	fa03 f000 	lsl.w	r0, r3, r0
 8022596:	9b04      	ldr	r3, [sp, #16]
 8022598:	4303      	orrs	r3, r0
 802259a:	3401      	adds	r4, #1
 802259c:	9304      	str	r3, [sp, #16]
 802259e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80225a2:	4826      	ldr	r0, [pc, #152]	; (802263c <_svfiprintf_r+0x1f0>)
 80225a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80225a8:	2206      	movs	r2, #6
 80225aa:	f7dd fe19 	bl	80001e0 <memchr>
 80225ae:	2800      	cmp	r0, #0
 80225b0:	d038      	beq.n	8022624 <_svfiprintf_r+0x1d8>
 80225b2:	4b23      	ldr	r3, [pc, #140]	; (8022640 <_svfiprintf_r+0x1f4>)
 80225b4:	bb1b      	cbnz	r3, 80225fe <_svfiprintf_r+0x1b2>
 80225b6:	9b03      	ldr	r3, [sp, #12]
 80225b8:	3307      	adds	r3, #7
 80225ba:	f023 0307 	bic.w	r3, r3, #7
 80225be:	3308      	adds	r3, #8
 80225c0:	9303      	str	r3, [sp, #12]
 80225c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225c4:	4433      	add	r3, r6
 80225c6:	9309      	str	r3, [sp, #36]	; 0x24
 80225c8:	e767      	b.n	802249a <_svfiprintf_r+0x4e>
 80225ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80225ce:	460c      	mov	r4, r1
 80225d0:	2001      	movs	r0, #1
 80225d2:	e7a5      	b.n	8022520 <_svfiprintf_r+0xd4>
 80225d4:	2300      	movs	r3, #0
 80225d6:	3401      	adds	r4, #1
 80225d8:	9305      	str	r3, [sp, #20]
 80225da:	4619      	mov	r1, r3
 80225dc:	f04f 0c0a 	mov.w	ip, #10
 80225e0:	4620      	mov	r0, r4
 80225e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80225e6:	3a30      	subs	r2, #48	; 0x30
 80225e8:	2a09      	cmp	r2, #9
 80225ea:	d903      	bls.n	80225f4 <_svfiprintf_r+0x1a8>
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d0c5      	beq.n	802257c <_svfiprintf_r+0x130>
 80225f0:	9105      	str	r1, [sp, #20]
 80225f2:	e7c3      	b.n	802257c <_svfiprintf_r+0x130>
 80225f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80225f8:	4604      	mov	r4, r0
 80225fa:	2301      	movs	r3, #1
 80225fc:	e7f0      	b.n	80225e0 <_svfiprintf_r+0x194>
 80225fe:	ab03      	add	r3, sp, #12
 8022600:	9300      	str	r3, [sp, #0]
 8022602:	462a      	mov	r2, r5
 8022604:	4b0f      	ldr	r3, [pc, #60]	; (8022644 <_svfiprintf_r+0x1f8>)
 8022606:	a904      	add	r1, sp, #16
 8022608:	4638      	mov	r0, r7
 802260a:	f7fc f8ef 	bl	801e7ec <_printf_float>
 802260e:	1c42      	adds	r2, r0, #1
 8022610:	4606      	mov	r6, r0
 8022612:	d1d6      	bne.n	80225c2 <_svfiprintf_r+0x176>
 8022614:	89ab      	ldrh	r3, [r5, #12]
 8022616:	065b      	lsls	r3, r3, #25
 8022618:	f53f af2c 	bmi.w	8022474 <_svfiprintf_r+0x28>
 802261c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802261e:	b01d      	add	sp, #116	; 0x74
 8022620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022624:	ab03      	add	r3, sp, #12
 8022626:	9300      	str	r3, [sp, #0]
 8022628:	462a      	mov	r2, r5
 802262a:	4b06      	ldr	r3, [pc, #24]	; (8022644 <_svfiprintf_r+0x1f8>)
 802262c:	a904      	add	r1, sp, #16
 802262e:	4638      	mov	r0, r7
 8022630:	f7fc fb80 	bl	801ed34 <_printf_i>
 8022634:	e7eb      	b.n	802260e <_svfiprintf_r+0x1c2>
 8022636:	bf00      	nop
 8022638:	08026314 	.word	0x08026314
 802263c:	0802631e 	.word	0x0802631e
 8022640:	0801e7ed 	.word	0x0801e7ed
 8022644:	08022395 	.word	0x08022395
 8022648:	0802631a 	.word	0x0802631a

0802264c <_read_r>:
 802264c:	b538      	push	{r3, r4, r5, lr}
 802264e:	4d07      	ldr	r5, [pc, #28]	; (802266c <_read_r+0x20>)
 8022650:	4604      	mov	r4, r0
 8022652:	4608      	mov	r0, r1
 8022654:	4611      	mov	r1, r2
 8022656:	2200      	movs	r2, #0
 8022658:	602a      	str	r2, [r5, #0]
 802265a:	461a      	mov	r2, r3
 802265c:	f003 f806 	bl	802566c <_read>
 8022660:	1c43      	adds	r3, r0, #1
 8022662:	d102      	bne.n	802266a <_read_r+0x1e>
 8022664:	682b      	ldr	r3, [r5, #0]
 8022666:	b103      	cbz	r3, 802266a <_read_r+0x1e>
 8022668:	6023      	str	r3, [r4, #0]
 802266a:	bd38      	pop	{r3, r4, r5, pc}
 802266c:	2000f49c 	.word	0x2000f49c

08022670 <nan>:
 8022670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022678 <nan+0x8>
 8022674:	4770      	bx	lr
 8022676:	bf00      	nop
 8022678:	00000000 	.word	0x00000000
 802267c:	7ff80000 	.word	0x7ff80000

08022680 <strncmp>:
 8022680:	b510      	push	{r4, lr}
 8022682:	b17a      	cbz	r2, 80226a4 <strncmp+0x24>
 8022684:	4603      	mov	r3, r0
 8022686:	3901      	subs	r1, #1
 8022688:	1884      	adds	r4, r0, r2
 802268a:	f813 0b01 	ldrb.w	r0, [r3], #1
 802268e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022692:	4290      	cmp	r0, r2
 8022694:	d101      	bne.n	802269a <strncmp+0x1a>
 8022696:	42a3      	cmp	r3, r4
 8022698:	d101      	bne.n	802269e <strncmp+0x1e>
 802269a:	1a80      	subs	r0, r0, r2
 802269c:	bd10      	pop	{r4, pc}
 802269e:	2800      	cmp	r0, #0
 80226a0:	d1f3      	bne.n	802268a <strncmp+0xa>
 80226a2:	e7fa      	b.n	802269a <strncmp+0x1a>
 80226a4:	4610      	mov	r0, r2
 80226a6:	e7f9      	b.n	802269c <strncmp+0x1c>

080226a8 <__ascii_wctomb>:
 80226a8:	b149      	cbz	r1, 80226be <__ascii_wctomb+0x16>
 80226aa:	2aff      	cmp	r2, #255	; 0xff
 80226ac:	bf85      	ittet	hi
 80226ae:	238a      	movhi	r3, #138	; 0x8a
 80226b0:	6003      	strhi	r3, [r0, #0]
 80226b2:	700a      	strbls	r2, [r1, #0]
 80226b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80226b8:	bf98      	it	ls
 80226ba:	2001      	movls	r0, #1
 80226bc:	4770      	bx	lr
 80226be:	4608      	mov	r0, r1
 80226c0:	4770      	bx	lr
	...

080226c4 <__assert_func>:
 80226c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80226c6:	4614      	mov	r4, r2
 80226c8:	461a      	mov	r2, r3
 80226ca:	4b09      	ldr	r3, [pc, #36]	; (80226f0 <__assert_func+0x2c>)
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	4605      	mov	r5, r0
 80226d0:	68d8      	ldr	r0, [r3, #12]
 80226d2:	b14c      	cbz	r4, 80226e8 <__assert_func+0x24>
 80226d4:	4b07      	ldr	r3, [pc, #28]	; (80226f4 <__assert_func+0x30>)
 80226d6:	9100      	str	r1, [sp, #0]
 80226d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80226dc:	4906      	ldr	r1, [pc, #24]	; (80226f8 <__assert_func+0x34>)
 80226de:	462b      	mov	r3, r5
 80226e0:	f000 f80e 	bl	8022700 <fiprintf>
 80226e4:	f000 fa80 	bl	8022be8 <abort>
 80226e8:	4b04      	ldr	r3, [pc, #16]	; (80226fc <__assert_func+0x38>)
 80226ea:	461c      	mov	r4, r3
 80226ec:	e7f3      	b.n	80226d6 <__assert_func+0x12>
 80226ee:	bf00      	nop
 80226f0:	20000148 	.word	0x20000148
 80226f4:	08026325 	.word	0x08026325
 80226f8:	08026332 	.word	0x08026332
 80226fc:	08026360 	.word	0x08026360

08022700 <fiprintf>:
 8022700:	b40e      	push	{r1, r2, r3}
 8022702:	b503      	push	{r0, r1, lr}
 8022704:	4601      	mov	r1, r0
 8022706:	ab03      	add	r3, sp, #12
 8022708:	4805      	ldr	r0, [pc, #20]	; (8022720 <fiprintf+0x20>)
 802270a:	f853 2b04 	ldr.w	r2, [r3], #4
 802270e:	6800      	ldr	r0, [r0, #0]
 8022710:	9301      	str	r3, [sp, #4]
 8022712:	f000 f879 	bl	8022808 <_vfiprintf_r>
 8022716:	b002      	add	sp, #8
 8022718:	f85d eb04 	ldr.w	lr, [sp], #4
 802271c:	b003      	add	sp, #12
 802271e:	4770      	bx	lr
 8022720:	20000148 	.word	0x20000148

08022724 <memmove>:
 8022724:	4288      	cmp	r0, r1
 8022726:	b510      	push	{r4, lr}
 8022728:	eb01 0402 	add.w	r4, r1, r2
 802272c:	d902      	bls.n	8022734 <memmove+0x10>
 802272e:	4284      	cmp	r4, r0
 8022730:	4623      	mov	r3, r4
 8022732:	d807      	bhi.n	8022744 <memmove+0x20>
 8022734:	1e43      	subs	r3, r0, #1
 8022736:	42a1      	cmp	r1, r4
 8022738:	d008      	beq.n	802274c <memmove+0x28>
 802273a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802273e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022742:	e7f8      	b.n	8022736 <memmove+0x12>
 8022744:	4402      	add	r2, r0
 8022746:	4601      	mov	r1, r0
 8022748:	428a      	cmp	r2, r1
 802274a:	d100      	bne.n	802274e <memmove+0x2a>
 802274c:	bd10      	pop	{r4, pc}
 802274e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022756:	e7f7      	b.n	8022748 <memmove+0x24>

08022758 <_realloc_r>:
 8022758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802275c:	4680      	mov	r8, r0
 802275e:	4614      	mov	r4, r2
 8022760:	460e      	mov	r6, r1
 8022762:	b921      	cbnz	r1, 802276e <_realloc_r+0x16>
 8022764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022768:	4611      	mov	r1, r2
 802276a:	f7fb bf2b 	b.w	801e5c4 <_malloc_r>
 802276e:	b92a      	cbnz	r2, 802277c <_realloc_r+0x24>
 8022770:	f7ff fdc4 	bl	80222fc <_free_r>
 8022774:	4625      	mov	r5, r4
 8022776:	4628      	mov	r0, r5
 8022778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802277c:	f000 faa0 	bl	8022cc0 <_malloc_usable_size_r>
 8022780:	4284      	cmp	r4, r0
 8022782:	4607      	mov	r7, r0
 8022784:	d802      	bhi.n	802278c <_realloc_r+0x34>
 8022786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802278a:	d812      	bhi.n	80227b2 <_realloc_r+0x5a>
 802278c:	4621      	mov	r1, r4
 802278e:	4640      	mov	r0, r8
 8022790:	f7fb ff18 	bl	801e5c4 <_malloc_r>
 8022794:	4605      	mov	r5, r0
 8022796:	2800      	cmp	r0, #0
 8022798:	d0ed      	beq.n	8022776 <_realloc_r+0x1e>
 802279a:	42bc      	cmp	r4, r7
 802279c:	4622      	mov	r2, r4
 802279e:	4631      	mov	r1, r6
 80227a0:	bf28      	it	cs
 80227a2:	463a      	movcs	r2, r7
 80227a4:	f7fb fed7 	bl	801e556 <memcpy>
 80227a8:	4631      	mov	r1, r6
 80227aa:	4640      	mov	r0, r8
 80227ac:	f7ff fda6 	bl	80222fc <_free_r>
 80227b0:	e7e1      	b.n	8022776 <_realloc_r+0x1e>
 80227b2:	4635      	mov	r5, r6
 80227b4:	e7df      	b.n	8022776 <_realloc_r+0x1e>

080227b6 <__sfputc_r>:
 80227b6:	6893      	ldr	r3, [r2, #8]
 80227b8:	3b01      	subs	r3, #1
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	b410      	push	{r4}
 80227be:	6093      	str	r3, [r2, #8]
 80227c0:	da08      	bge.n	80227d4 <__sfputc_r+0x1e>
 80227c2:	6994      	ldr	r4, [r2, #24]
 80227c4:	42a3      	cmp	r3, r4
 80227c6:	db01      	blt.n	80227cc <__sfputc_r+0x16>
 80227c8:	290a      	cmp	r1, #10
 80227ca:	d103      	bne.n	80227d4 <__sfputc_r+0x1e>
 80227cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80227d0:	f000 b94a 	b.w	8022a68 <__swbuf_r>
 80227d4:	6813      	ldr	r3, [r2, #0]
 80227d6:	1c58      	adds	r0, r3, #1
 80227d8:	6010      	str	r0, [r2, #0]
 80227da:	7019      	strb	r1, [r3, #0]
 80227dc:	4608      	mov	r0, r1
 80227de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80227e2:	4770      	bx	lr

080227e4 <__sfputs_r>:
 80227e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227e6:	4606      	mov	r6, r0
 80227e8:	460f      	mov	r7, r1
 80227ea:	4614      	mov	r4, r2
 80227ec:	18d5      	adds	r5, r2, r3
 80227ee:	42ac      	cmp	r4, r5
 80227f0:	d101      	bne.n	80227f6 <__sfputs_r+0x12>
 80227f2:	2000      	movs	r0, #0
 80227f4:	e007      	b.n	8022806 <__sfputs_r+0x22>
 80227f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227fa:	463a      	mov	r2, r7
 80227fc:	4630      	mov	r0, r6
 80227fe:	f7ff ffda 	bl	80227b6 <__sfputc_r>
 8022802:	1c43      	adds	r3, r0, #1
 8022804:	d1f3      	bne.n	80227ee <__sfputs_r+0xa>
 8022806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022808 <_vfiprintf_r>:
 8022808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802280c:	460d      	mov	r5, r1
 802280e:	b09d      	sub	sp, #116	; 0x74
 8022810:	4614      	mov	r4, r2
 8022812:	4698      	mov	r8, r3
 8022814:	4606      	mov	r6, r0
 8022816:	b118      	cbz	r0, 8022820 <_vfiprintf_r+0x18>
 8022818:	6983      	ldr	r3, [r0, #24]
 802281a:	b90b      	cbnz	r3, 8022820 <_vfiprintf_r+0x18>
 802281c:	f7fb fdd6 	bl	801e3cc <__sinit>
 8022820:	4b89      	ldr	r3, [pc, #548]	; (8022a48 <_vfiprintf_r+0x240>)
 8022822:	429d      	cmp	r5, r3
 8022824:	d11b      	bne.n	802285e <_vfiprintf_r+0x56>
 8022826:	6875      	ldr	r5, [r6, #4]
 8022828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802282a:	07d9      	lsls	r1, r3, #31
 802282c:	d405      	bmi.n	802283a <_vfiprintf_r+0x32>
 802282e:	89ab      	ldrh	r3, [r5, #12]
 8022830:	059a      	lsls	r2, r3, #22
 8022832:	d402      	bmi.n	802283a <_vfiprintf_r+0x32>
 8022834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022836:	f7fb fe8c 	bl	801e552 <__retarget_lock_acquire_recursive>
 802283a:	89ab      	ldrh	r3, [r5, #12]
 802283c:	071b      	lsls	r3, r3, #28
 802283e:	d501      	bpl.n	8022844 <_vfiprintf_r+0x3c>
 8022840:	692b      	ldr	r3, [r5, #16]
 8022842:	b9eb      	cbnz	r3, 8022880 <_vfiprintf_r+0x78>
 8022844:	4629      	mov	r1, r5
 8022846:	4630      	mov	r0, r6
 8022848:	f000 f960 	bl	8022b0c <__swsetup_r>
 802284c:	b1c0      	cbz	r0, 8022880 <_vfiprintf_r+0x78>
 802284e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022850:	07dc      	lsls	r4, r3, #31
 8022852:	d50e      	bpl.n	8022872 <_vfiprintf_r+0x6a>
 8022854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022858:	b01d      	add	sp, #116	; 0x74
 802285a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802285e:	4b7b      	ldr	r3, [pc, #492]	; (8022a4c <_vfiprintf_r+0x244>)
 8022860:	429d      	cmp	r5, r3
 8022862:	d101      	bne.n	8022868 <_vfiprintf_r+0x60>
 8022864:	68b5      	ldr	r5, [r6, #8]
 8022866:	e7df      	b.n	8022828 <_vfiprintf_r+0x20>
 8022868:	4b79      	ldr	r3, [pc, #484]	; (8022a50 <_vfiprintf_r+0x248>)
 802286a:	429d      	cmp	r5, r3
 802286c:	bf08      	it	eq
 802286e:	68f5      	ldreq	r5, [r6, #12]
 8022870:	e7da      	b.n	8022828 <_vfiprintf_r+0x20>
 8022872:	89ab      	ldrh	r3, [r5, #12]
 8022874:	0598      	lsls	r0, r3, #22
 8022876:	d4ed      	bmi.n	8022854 <_vfiprintf_r+0x4c>
 8022878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802287a:	f7fb fe6b 	bl	801e554 <__retarget_lock_release_recursive>
 802287e:	e7e9      	b.n	8022854 <_vfiprintf_r+0x4c>
 8022880:	2300      	movs	r3, #0
 8022882:	9309      	str	r3, [sp, #36]	; 0x24
 8022884:	2320      	movs	r3, #32
 8022886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802288a:	f8cd 800c 	str.w	r8, [sp, #12]
 802288e:	2330      	movs	r3, #48	; 0x30
 8022890:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022a54 <_vfiprintf_r+0x24c>
 8022894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022898:	f04f 0901 	mov.w	r9, #1
 802289c:	4623      	mov	r3, r4
 802289e:	469a      	mov	sl, r3
 80228a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80228a4:	b10a      	cbz	r2, 80228aa <_vfiprintf_r+0xa2>
 80228a6:	2a25      	cmp	r2, #37	; 0x25
 80228a8:	d1f9      	bne.n	802289e <_vfiprintf_r+0x96>
 80228aa:	ebba 0b04 	subs.w	fp, sl, r4
 80228ae:	d00b      	beq.n	80228c8 <_vfiprintf_r+0xc0>
 80228b0:	465b      	mov	r3, fp
 80228b2:	4622      	mov	r2, r4
 80228b4:	4629      	mov	r1, r5
 80228b6:	4630      	mov	r0, r6
 80228b8:	f7ff ff94 	bl	80227e4 <__sfputs_r>
 80228bc:	3001      	adds	r0, #1
 80228be:	f000 80aa 	beq.w	8022a16 <_vfiprintf_r+0x20e>
 80228c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228c4:	445a      	add	r2, fp
 80228c6:	9209      	str	r2, [sp, #36]	; 0x24
 80228c8:	f89a 3000 	ldrb.w	r3, [sl]
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	f000 80a2 	beq.w	8022a16 <_vfiprintf_r+0x20e>
 80228d2:	2300      	movs	r3, #0
 80228d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80228d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80228dc:	f10a 0a01 	add.w	sl, sl, #1
 80228e0:	9304      	str	r3, [sp, #16]
 80228e2:	9307      	str	r3, [sp, #28]
 80228e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80228e8:	931a      	str	r3, [sp, #104]	; 0x68
 80228ea:	4654      	mov	r4, sl
 80228ec:	2205      	movs	r2, #5
 80228ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228f2:	4858      	ldr	r0, [pc, #352]	; (8022a54 <_vfiprintf_r+0x24c>)
 80228f4:	f7dd fc74 	bl	80001e0 <memchr>
 80228f8:	9a04      	ldr	r2, [sp, #16]
 80228fa:	b9d8      	cbnz	r0, 8022934 <_vfiprintf_r+0x12c>
 80228fc:	06d1      	lsls	r1, r2, #27
 80228fe:	bf44      	itt	mi
 8022900:	2320      	movmi	r3, #32
 8022902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022906:	0713      	lsls	r3, r2, #28
 8022908:	bf44      	itt	mi
 802290a:	232b      	movmi	r3, #43	; 0x2b
 802290c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022910:	f89a 3000 	ldrb.w	r3, [sl]
 8022914:	2b2a      	cmp	r3, #42	; 0x2a
 8022916:	d015      	beq.n	8022944 <_vfiprintf_r+0x13c>
 8022918:	9a07      	ldr	r2, [sp, #28]
 802291a:	4654      	mov	r4, sl
 802291c:	2000      	movs	r0, #0
 802291e:	f04f 0c0a 	mov.w	ip, #10
 8022922:	4621      	mov	r1, r4
 8022924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022928:	3b30      	subs	r3, #48	; 0x30
 802292a:	2b09      	cmp	r3, #9
 802292c:	d94e      	bls.n	80229cc <_vfiprintf_r+0x1c4>
 802292e:	b1b0      	cbz	r0, 802295e <_vfiprintf_r+0x156>
 8022930:	9207      	str	r2, [sp, #28]
 8022932:	e014      	b.n	802295e <_vfiprintf_r+0x156>
 8022934:	eba0 0308 	sub.w	r3, r0, r8
 8022938:	fa09 f303 	lsl.w	r3, r9, r3
 802293c:	4313      	orrs	r3, r2
 802293e:	9304      	str	r3, [sp, #16]
 8022940:	46a2      	mov	sl, r4
 8022942:	e7d2      	b.n	80228ea <_vfiprintf_r+0xe2>
 8022944:	9b03      	ldr	r3, [sp, #12]
 8022946:	1d19      	adds	r1, r3, #4
 8022948:	681b      	ldr	r3, [r3, #0]
 802294a:	9103      	str	r1, [sp, #12]
 802294c:	2b00      	cmp	r3, #0
 802294e:	bfbb      	ittet	lt
 8022950:	425b      	neglt	r3, r3
 8022952:	f042 0202 	orrlt.w	r2, r2, #2
 8022956:	9307      	strge	r3, [sp, #28]
 8022958:	9307      	strlt	r3, [sp, #28]
 802295a:	bfb8      	it	lt
 802295c:	9204      	strlt	r2, [sp, #16]
 802295e:	7823      	ldrb	r3, [r4, #0]
 8022960:	2b2e      	cmp	r3, #46	; 0x2e
 8022962:	d10c      	bne.n	802297e <_vfiprintf_r+0x176>
 8022964:	7863      	ldrb	r3, [r4, #1]
 8022966:	2b2a      	cmp	r3, #42	; 0x2a
 8022968:	d135      	bne.n	80229d6 <_vfiprintf_r+0x1ce>
 802296a:	9b03      	ldr	r3, [sp, #12]
 802296c:	1d1a      	adds	r2, r3, #4
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	9203      	str	r2, [sp, #12]
 8022972:	2b00      	cmp	r3, #0
 8022974:	bfb8      	it	lt
 8022976:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802297a:	3402      	adds	r4, #2
 802297c:	9305      	str	r3, [sp, #20]
 802297e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022a64 <_vfiprintf_r+0x25c>
 8022982:	7821      	ldrb	r1, [r4, #0]
 8022984:	2203      	movs	r2, #3
 8022986:	4650      	mov	r0, sl
 8022988:	f7dd fc2a 	bl	80001e0 <memchr>
 802298c:	b140      	cbz	r0, 80229a0 <_vfiprintf_r+0x198>
 802298e:	2340      	movs	r3, #64	; 0x40
 8022990:	eba0 000a 	sub.w	r0, r0, sl
 8022994:	fa03 f000 	lsl.w	r0, r3, r0
 8022998:	9b04      	ldr	r3, [sp, #16]
 802299a:	4303      	orrs	r3, r0
 802299c:	3401      	adds	r4, #1
 802299e:	9304      	str	r3, [sp, #16]
 80229a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80229a4:	482c      	ldr	r0, [pc, #176]	; (8022a58 <_vfiprintf_r+0x250>)
 80229a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80229aa:	2206      	movs	r2, #6
 80229ac:	f7dd fc18 	bl	80001e0 <memchr>
 80229b0:	2800      	cmp	r0, #0
 80229b2:	d03f      	beq.n	8022a34 <_vfiprintf_r+0x22c>
 80229b4:	4b29      	ldr	r3, [pc, #164]	; (8022a5c <_vfiprintf_r+0x254>)
 80229b6:	bb1b      	cbnz	r3, 8022a00 <_vfiprintf_r+0x1f8>
 80229b8:	9b03      	ldr	r3, [sp, #12]
 80229ba:	3307      	adds	r3, #7
 80229bc:	f023 0307 	bic.w	r3, r3, #7
 80229c0:	3308      	adds	r3, #8
 80229c2:	9303      	str	r3, [sp, #12]
 80229c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229c6:	443b      	add	r3, r7
 80229c8:	9309      	str	r3, [sp, #36]	; 0x24
 80229ca:	e767      	b.n	802289c <_vfiprintf_r+0x94>
 80229cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80229d0:	460c      	mov	r4, r1
 80229d2:	2001      	movs	r0, #1
 80229d4:	e7a5      	b.n	8022922 <_vfiprintf_r+0x11a>
 80229d6:	2300      	movs	r3, #0
 80229d8:	3401      	adds	r4, #1
 80229da:	9305      	str	r3, [sp, #20]
 80229dc:	4619      	mov	r1, r3
 80229de:	f04f 0c0a 	mov.w	ip, #10
 80229e2:	4620      	mov	r0, r4
 80229e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80229e8:	3a30      	subs	r2, #48	; 0x30
 80229ea:	2a09      	cmp	r2, #9
 80229ec:	d903      	bls.n	80229f6 <_vfiprintf_r+0x1ee>
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d0c5      	beq.n	802297e <_vfiprintf_r+0x176>
 80229f2:	9105      	str	r1, [sp, #20]
 80229f4:	e7c3      	b.n	802297e <_vfiprintf_r+0x176>
 80229f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80229fa:	4604      	mov	r4, r0
 80229fc:	2301      	movs	r3, #1
 80229fe:	e7f0      	b.n	80229e2 <_vfiprintf_r+0x1da>
 8022a00:	ab03      	add	r3, sp, #12
 8022a02:	9300      	str	r3, [sp, #0]
 8022a04:	462a      	mov	r2, r5
 8022a06:	4b16      	ldr	r3, [pc, #88]	; (8022a60 <_vfiprintf_r+0x258>)
 8022a08:	a904      	add	r1, sp, #16
 8022a0a:	4630      	mov	r0, r6
 8022a0c:	f7fb feee 	bl	801e7ec <_printf_float>
 8022a10:	4607      	mov	r7, r0
 8022a12:	1c78      	adds	r0, r7, #1
 8022a14:	d1d6      	bne.n	80229c4 <_vfiprintf_r+0x1bc>
 8022a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022a18:	07d9      	lsls	r1, r3, #31
 8022a1a:	d405      	bmi.n	8022a28 <_vfiprintf_r+0x220>
 8022a1c:	89ab      	ldrh	r3, [r5, #12]
 8022a1e:	059a      	lsls	r2, r3, #22
 8022a20:	d402      	bmi.n	8022a28 <_vfiprintf_r+0x220>
 8022a22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022a24:	f7fb fd96 	bl	801e554 <__retarget_lock_release_recursive>
 8022a28:	89ab      	ldrh	r3, [r5, #12]
 8022a2a:	065b      	lsls	r3, r3, #25
 8022a2c:	f53f af12 	bmi.w	8022854 <_vfiprintf_r+0x4c>
 8022a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022a32:	e711      	b.n	8022858 <_vfiprintf_r+0x50>
 8022a34:	ab03      	add	r3, sp, #12
 8022a36:	9300      	str	r3, [sp, #0]
 8022a38:	462a      	mov	r2, r5
 8022a3a:	4b09      	ldr	r3, [pc, #36]	; (8022a60 <_vfiprintf_r+0x258>)
 8022a3c:	a904      	add	r1, sp, #16
 8022a3e:	4630      	mov	r0, r6
 8022a40:	f7fc f978 	bl	801ed34 <_printf_i>
 8022a44:	e7e4      	b.n	8022a10 <_vfiprintf_r+0x208>
 8022a46:	bf00      	nop
 8022a48:	08025edc 	.word	0x08025edc
 8022a4c:	08025efc 	.word	0x08025efc
 8022a50:	08025ebc 	.word	0x08025ebc
 8022a54:	08026314 	.word	0x08026314
 8022a58:	0802631e 	.word	0x0802631e
 8022a5c:	0801e7ed 	.word	0x0801e7ed
 8022a60:	080227e5 	.word	0x080227e5
 8022a64:	0802631a 	.word	0x0802631a

08022a68 <__swbuf_r>:
 8022a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a6a:	460e      	mov	r6, r1
 8022a6c:	4614      	mov	r4, r2
 8022a6e:	4605      	mov	r5, r0
 8022a70:	b118      	cbz	r0, 8022a7a <__swbuf_r+0x12>
 8022a72:	6983      	ldr	r3, [r0, #24]
 8022a74:	b90b      	cbnz	r3, 8022a7a <__swbuf_r+0x12>
 8022a76:	f7fb fca9 	bl	801e3cc <__sinit>
 8022a7a:	4b21      	ldr	r3, [pc, #132]	; (8022b00 <__swbuf_r+0x98>)
 8022a7c:	429c      	cmp	r4, r3
 8022a7e:	d12b      	bne.n	8022ad8 <__swbuf_r+0x70>
 8022a80:	686c      	ldr	r4, [r5, #4]
 8022a82:	69a3      	ldr	r3, [r4, #24]
 8022a84:	60a3      	str	r3, [r4, #8]
 8022a86:	89a3      	ldrh	r3, [r4, #12]
 8022a88:	071a      	lsls	r2, r3, #28
 8022a8a:	d52f      	bpl.n	8022aec <__swbuf_r+0x84>
 8022a8c:	6923      	ldr	r3, [r4, #16]
 8022a8e:	b36b      	cbz	r3, 8022aec <__swbuf_r+0x84>
 8022a90:	6923      	ldr	r3, [r4, #16]
 8022a92:	6820      	ldr	r0, [r4, #0]
 8022a94:	1ac0      	subs	r0, r0, r3
 8022a96:	6963      	ldr	r3, [r4, #20]
 8022a98:	b2f6      	uxtb	r6, r6
 8022a9a:	4283      	cmp	r3, r0
 8022a9c:	4637      	mov	r7, r6
 8022a9e:	dc04      	bgt.n	8022aaa <__swbuf_r+0x42>
 8022aa0:	4621      	mov	r1, r4
 8022aa2:	4628      	mov	r0, r5
 8022aa4:	f7fe fb6a 	bl	802117c <_fflush_r>
 8022aa8:	bb30      	cbnz	r0, 8022af8 <__swbuf_r+0x90>
 8022aaa:	68a3      	ldr	r3, [r4, #8]
 8022aac:	3b01      	subs	r3, #1
 8022aae:	60a3      	str	r3, [r4, #8]
 8022ab0:	6823      	ldr	r3, [r4, #0]
 8022ab2:	1c5a      	adds	r2, r3, #1
 8022ab4:	6022      	str	r2, [r4, #0]
 8022ab6:	701e      	strb	r6, [r3, #0]
 8022ab8:	6963      	ldr	r3, [r4, #20]
 8022aba:	3001      	adds	r0, #1
 8022abc:	4283      	cmp	r3, r0
 8022abe:	d004      	beq.n	8022aca <__swbuf_r+0x62>
 8022ac0:	89a3      	ldrh	r3, [r4, #12]
 8022ac2:	07db      	lsls	r3, r3, #31
 8022ac4:	d506      	bpl.n	8022ad4 <__swbuf_r+0x6c>
 8022ac6:	2e0a      	cmp	r6, #10
 8022ac8:	d104      	bne.n	8022ad4 <__swbuf_r+0x6c>
 8022aca:	4621      	mov	r1, r4
 8022acc:	4628      	mov	r0, r5
 8022ace:	f7fe fb55 	bl	802117c <_fflush_r>
 8022ad2:	b988      	cbnz	r0, 8022af8 <__swbuf_r+0x90>
 8022ad4:	4638      	mov	r0, r7
 8022ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ad8:	4b0a      	ldr	r3, [pc, #40]	; (8022b04 <__swbuf_r+0x9c>)
 8022ada:	429c      	cmp	r4, r3
 8022adc:	d101      	bne.n	8022ae2 <__swbuf_r+0x7a>
 8022ade:	68ac      	ldr	r4, [r5, #8]
 8022ae0:	e7cf      	b.n	8022a82 <__swbuf_r+0x1a>
 8022ae2:	4b09      	ldr	r3, [pc, #36]	; (8022b08 <__swbuf_r+0xa0>)
 8022ae4:	429c      	cmp	r4, r3
 8022ae6:	bf08      	it	eq
 8022ae8:	68ec      	ldreq	r4, [r5, #12]
 8022aea:	e7ca      	b.n	8022a82 <__swbuf_r+0x1a>
 8022aec:	4621      	mov	r1, r4
 8022aee:	4628      	mov	r0, r5
 8022af0:	f000 f80c 	bl	8022b0c <__swsetup_r>
 8022af4:	2800      	cmp	r0, #0
 8022af6:	d0cb      	beq.n	8022a90 <__swbuf_r+0x28>
 8022af8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8022afc:	e7ea      	b.n	8022ad4 <__swbuf_r+0x6c>
 8022afe:	bf00      	nop
 8022b00:	08025edc 	.word	0x08025edc
 8022b04:	08025efc 	.word	0x08025efc
 8022b08:	08025ebc 	.word	0x08025ebc

08022b0c <__swsetup_r>:
 8022b0c:	4b32      	ldr	r3, [pc, #200]	; (8022bd8 <__swsetup_r+0xcc>)
 8022b0e:	b570      	push	{r4, r5, r6, lr}
 8022b10:	681d      	ldr	r5, [r3, #0]
 8022b12:	4606      	mov	r6, r0
 8022b14:	460c      	mov	r4, r1
 8022b16:	b125      	cbz	r5, 8022b22 <__swsetup_r+0x16>
 8022b18:	69ab      	ldr	r3, [r5, #24]
 8022b1a:	b913      	cbnz	r3, 8022b22 <__swsetup_r+0x16>
 8022b1c:	4628      	mov	r0, r5
 8022b1e:	f7fb fc55 	bl	801e3cc <__sinit>
 8022b22:	4b2e      	ldr	r3, [pc, #184]	; (8022bdc <__swsetup_r+0xd0>)
 8022b24:	429c      	cmp	r4, r3
 8022b26:	d10f      	bne.n	8022b48 <__swsetup_r+0x3c>
 8022b28:	686c      	ldr	r4, [r5, #4]
 8022b2a:	89a3      	ldrh	r3, [r4, #12]
 8022b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022b30:	0719      	lsls	r1, r3, #28
 8022b32:	d42c      	bmi.n	8022b8e <__swsetup_r+0x82>
 8022b34:	06dd      	lsls	r5, r3, #27
 8022b36:	d411      	bmi.n	8022b5c <__swsetup_r+0x50>
 8022b38:	2309      	movs	r3, #9
 8022b3a:	6033      	str	r3, [r6, #0]
 8022b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022b40:	81a3      	strh	r3, [r4, #12]
 8022b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022b46:	e03e      	b.n	8022bc6 <__swsetup_r+0xba>
 8022b48:	4b25      	ldr	r3, [pc, #148]	; (8022be0 <__swsetup_r+0xd4>)
 8022b4a:	429c      	cmp	r4, r3
 8022b4c:	d101      	bne.n	8022b52 <__swsetup_r+0x46>
 8022b4e:	68ac      	ldr	r4, [r5, #8]
 8022b50:	e7eb      	b.n	8022b2a <__swsetup_r+0x1e>
 8022b52:	4b24      	ldr	r3, [pc, #144]	; (8022be4 <__swsetup_r+0xd8>)
 8022b54:	429c      	cmp	r4, r3
 8022b56:	bf08      	it	eq
 8022b58:	68ec      	ldreq	r4, [r5, #12]
 8022b5a:	e7e6      	b.n	8022b2a <__swsetup_r+0x1e>
 8022b5c:	0758      	lsls	r0, r3, #29
 8022b5e:	d512      	bpl.n	8022b86 <__swsetup_r+0x7a>
 8022b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022b62:	b141      	cbz	r1, 8022b76 <__swsetup_r+0x6a>
 8022b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022b68:	4299      	cmp	r1, r3
 8022b6a:	d002      	beq.n	8022b72 <__swsetup_r+0x66>
 8022b6c:	4630      	mov	r0, r6
 8022b6e:	f7ff fbc5 	bl	80222fc <_free_r>
 8022b72:	2300      	movs	r3, #0
 8022b74:	6363      	str	r3, [r4, #52]	; 0x34
 8022b76:	89a3      	ldrh	r3, [r4, #12]
 8022b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022b7c:	81a3      	strh	r3, [r4, #12]
 8022b7e:	2300      	movs	r3, #0
 8022b80:	6063      	str	r3, [r4, #4]
 8022b82:	6923      	ldr	r3, [r4, #16]
 8022b84:	6023      	str	r3, [r4, #0]
 8022b86:	89a3      	ldrh	r3, [r4, #12]
 8022b88:	f043 0308 	orr.w	r3, r3, #8
 8022b8c:	81a3      	strh	r3, [r4, #12]
 8022b8e:	6923      	ldr	r3, [r4, #16]
 8022b90:	b94b      	cbnz	r3, 8022ba6 <__swsetup_r+0x9a>
 8022b92:	89a3      	ldrh	r3, [r4, #12]
 8022b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022b9c:	d003      	beq.n	8022ba6 <__swsetup_r+0x9a>
 8022b9e:	4621      	mov	r1, r4
 8022ba0:	4630      	mov	r0, r6
 8022ba2:	f000 f84d 	bl	8022c40 <__smakebuf_r>
 8022ba6:	89a0      	ldrh	r0, [r4, #12]
 8022ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022bac:	f010 0301 	ands.w	r3, r0, #1
 8022bb0:	d00a      	beq.n	8022bc8 <__swsetup_r+0xbc>
 8022bb2:	2300      	movs	r3, #0
 8022bb4:	60a3      	str	r3, [r4, #8]
 8022bb6:	6963      	ldr	r3, [r4, #20]
 8022bb8:	425b      	negs	r3, r3
 8022bba:	61a3      	str	r3, [r4, #24]
 8022bbc:	6923      	ldr	r3, [r4, #16]
 8022bbe:	b943      	cbnz	r3, 8022bd2 <__swsetup_r+0xc6>
 8022bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022bc4:	d1ba      	bne.n	8022b3c <__swsetup_r+0x30>
 8022bc6:	bd70      	pop	{r4, r5, r6, pc}
 8022bc8:	0781      	lsls	r1, r0, #30
 8022bca:	bf58      	it	pl
 8022bcc:	6963      	ldrpl	r3, [r4, #20]
 8022bce:	60a3      	str	r3, [r4, #8]
 8022bd0:	e7f4      	b.n	8022bbc <__swsetup_r+0xb0>
 8022bd2:	2000      	movs	r0, #0
 8022bd4:	e7f7      	b.n	8022bc6 <__swsetup_r+0xba>
 8022bd6:	bf00      	nop
 8022bd8:	20000148 	.word	0x20000148
 8022bdc:	08025edc 	.word	0x08025edc
 8022be0:	08025efc 	.word	0x08025efc
 8022be4:	08025ebc 	.word	0x08025ebc

08022be8 <abort>:
 8022be8:	b508      	push	{r3, lr}
 8022bea:	2006      	movs	r0, #6
 8022bec:	f000 f898 	bl	8022d20 <raise>
 8022bf0:	2001      	movs	r0, #1
 8022bf2:	f002 fd59 	bl	80256a8 <_exit>

08022bf6 <__swhatbuf_r>:
 8022bf6:	b570      	push	{r4, r5, r6, lr}
 8022bf8:	460e      	mov	r6, r1
 8022bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022bfe:	2900      	cmp	r1, #0
 8022c00:	b096      	sub	sp, #88	; 0x58
 8022c02:	4614      	mov	r4, r2
 8022c04:	461d      	mov	r5, r3
 8022c06:	da08      	bge.n	8022c1a <__swhatbuf_r+0x24>
 8022c08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022c0c:	2200      	movs	r2, #0
 8022c0e:	602a      	str	r2, [r5, #0]
 8022c10:	061a      	lsls	r2, r3, #24
 8022c12:	d410      	bmi.n	8022c36 <__swhatbuf_r+0x40>
 8022c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022c18:	e00e      	b.n	8022c38 <__swhatbuf_r+0x42>
 8022c1a:	466a      	mov	r2, sp
 8022c1c:	f000 f89c 	bl	8022d58 <_fstat_r>
 8022c20:	2800      	cmp	r0, #0
 8022c22:	dbf1      	blt.n	8022c08 <__swhatbuf_r+0x12>
 8022c24:	9a01      	ldr	r2, [sp, #4]
 8022c26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022c2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022c2e:	425a      	negs	r2, r3
 8022c30:	415a      	adcs	r2, r3
 8022c32:	602a      	str	r2, [r5, #0]
 8022c34:	e7ee      	b.n	8022c14 <__swhatbuf_r+0x1e>
 8022c36:	2340      	movs	r3, #64	; 0x40
 8022c38:	2000      	movs	r0, #0
 8022c3a:	6023      	str	r3, [r4, #0]
 8022c3c:	b016      	add	sp, #88	; 0x58
 8022c3e:	bd70      	pop	{r4, r5, r6, pc}

08022c40 <__smakebuf_r>:
 8022c40:	898b      	ldrh	r3, [r1, #12]
 8022c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022c44:	079d      	lsls	r5, r3, #30
 8022c46:	4606      	mov	r6, r0
 8022c48:	460c      	mov	r4, r1
 8022c4a:	d507      	bpl.n	8022c5c <__smakebuf_r+0x1c>
 8022c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022c50:	6023      	str	r3, [r4, #0]
 8022c52:	6123      	str	r3, [r4, #16]
 8022c54:	2301      	movs	r3, #1
 8022c56:	6163      	str	r3, [r4, #20]
 8022c58:	b002      	add	sp, #8
 8022c5a:	bd70      	pop	{r4, r5, r6, pc}
 8022c5c:	ab01      	add	r3, sp, #4
 8022c5e:	466a      	mov	r2, sp
 8022c60:	f7ff ffc9 	bl	8022bf6 <__swhatbuf_r>
 8022c64:	9900      	ldr	r1, [sp, #0]
 8022c66:	4605      	mov	r5, r0
 8022c68:	4630      	mov	r0, r6
 8022c6a:	f7fb fcab 	bl	801e5c4 <_malloc_r>
 8022c6e:	b948      	cbnz	r0, 8022c84 <__smakebuf_r+0x44>
 8022c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c74:	059a      	lsls	r2, r3, #22
 8022c76:	d4ef      	bmi.n	8022c58 <__smakebuf_r+0x18>
 8022c78:	f023 0303 	bic.w	r3, r3, #3
 8022c7c:	f043 0302 	orr.w	r3, r3, #2
 8022c80:	81a3      	strh	r3, [r4, #12]
 8022c82:	e7e3      	b.n	8022c4c <__smakebuf_r+0xc>
 8022c84:	4b0d      	ldr	r3, [pc, #52]	; (8022cbc <__smakebuf_r+0x7c>)
 8022c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8022c88:	89a3      	ldrh	r3, [r4, #12]
 8022c8a:	6020      	str	r0, [r4, #0]
 8022c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022c90:	81a3      	strh	r3, [r4, #12]
 8022c92:	9b00      	ldr	r3, [sp, #0]
 8022c94:	6163      	str	r3, [r4, #20]
 8022c96:	9b01      	ldr	r3, [sp, #4]
 8022c98:	6120      	str	r0, [r4, #16]
 8022c9a:	b15b      	cbz	r3, 8022cb4 <__smakebuf_r+0x74>
 8022c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022ca0:	4630      	mov	r0, r6
 8022ca2:	f000 f86b 	bl	8022d7c <_isatty_r>
 8022ca6:	b128      	cbz	r0, 8022cb4 <__smakebuf_r+0x74>
 8022ca8:	89a3      	ldrh	r3, [r4, #12]
 8022caa:	f023 0303 	bic.w	r3, r3, #3
 8022cae:	f043 0301 	orr.w	r3, r3, #1
 8022cb2:	81a3      	strh	r3, [r4, #12]
 8022cb4:	89a0      	ldrh	r0, [r4, #12]
 8022cb6:	4305      	orrs	r5, r0
 8022cb8:	81a5      	strh	r5, [r4, #12]
 8022cba:	e7cd      	b.n	8022c58 <__smakebuf_r+0x18>
 8022cbc:	0801e365 	.word	0x0801e365

08022cc0 <_malloc_usable_size_r>:
 8022cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022cc4:	1f18      	subs	r0, r3, #4
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	bfbc      	itt	lt
 8022cca:	580b      	ldrlt	r3, [r1, r0]
 8022ccc:	18c0      	addlt	r0, r0, r3
 8022cce:	4770      	bx	lr

08022cd0 <_raise_r>:
 8022cd0:	291f      	cmp	r1, #31
 8022cd2:	b538      	push	{r3, r4, r5, lr}
 8022cd4:	4604      	mov	r4, r0
 8022cd6:	460d      	mov	r5, r1
 8022cd8:	d904      	bls.n	8022ce4 <_raise_r+0x14>
 8022cda:	2316      	movs	r3, #22
 8022cdc:	6003      	str	r3, [r0, #0]
 8022cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ce2:	bd38      	pop	{r3, r4, r5, pc}
 8022ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022ce6:	b112      	cbz	r2, 8022cee <_raise_r+0x1e>
 8022ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022cec:	b94b      	cbnz	r3, 8022d02 <_raise_r+0x32>
 8022cee:	4620      	mov	r0, r4
 8022cf0:	f000 f830 	bl	8022d54 <_getpid_r>
 8022cf4:	462a      	mov	r2, r5
 8022cf6:	4601      	mov	r1, r0
 8022cf8:	4620      	mov	r0, r4
 8022cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022cfe:	f000 b817 	b.w	8022d30 <_kill_r>
 8022d02:	2b01      	cmp	r3, #1
 8022d04:	d00a      	beq.n	8022d1c <_raise_r+0x4c>
 8022d06:	1c59      	adds	r1, r3, #1
 8022d08:	d103      	bne.n	8022d12 <_raise_r+0x42>
 8022d0a:	2316      	movs	r3, #22
 8022d0c:	6003      	str	r3, [r0, #0]
 8022d0e:	2001      	movs	r0, #1
 8022d10:	e7e7      	b.n	8022ce2 <_raise_r+0x12>
 8022d12:	2400      	movs	r4, #0
 8022d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022d18:	4628      	mov	r0, r5
 8022d1a:	4798      	blx	r3
 8022d1c:	2000      	movs	r0, #0
 8022d1e:	e7e0      	b.n	8022ce2 <_raise_r+0x12>

08022d20 <raise>:
 8022d20:	4b02      	ldr	r3, [pc, #8]	; (8022d2c <raise+0xc>)
 8022d22:	4601      	mov	r1, r0
 8022d24:	6818      	ldr	r0, [r3, #0]
 8022d26:	f7ff bfd3 	b.w	8022cd0 <_raise_r>
 8022d2a:	bf00      	nop
 8022d2c:	20000148 	.word	0x20000148

08022d30 <_kill_r>:
 8022d30:	b538      	push	{r3, r4, r5, lr}
 8022d32:	4d07      	ldr	r5, [pc, #28]	; (8022d50 <_kill_r+0x20>)
 8022d34:	2300      	movs	r3, #0
 8022d36:	4604      	mov	r4, r0
 8022d38:	4608      	mov	r0, r1
 8022d3a:	4611      	mov	r1, r2
 8022d3c:	602b      	str	r3, [r5, #0]
 8022d3e:	f002 fc85 	bl	802564c <_kill>
 8022d42:	1c43      	adds	r3, r0, #1
 8022d44:	d102      	bne.n	8022d4c <_kill_r+0x1c>
 8022d46:	682b      	ldr	r3, [r5, #0]
 8022d48:	b103      	cbz	r3, 8022d4c <_kill_r+0x1c>
 8022d4a:	6023      	str	r3, [r4, #0]
 8022d4c:	bd38      	pop	{r3, r4, r5, pc}
 8022d4e:	bf00      	nop
 8022d50:	2000f49c 	.word	0x2000f49c

08022d54 <_getpid_r>:
 8022d54:	f002 bc6a 	b.w	802562c <_getpid>

08022d58 <_fstat_r>:
 8022d58:	b538      	push	{r3, r4, r5, lr}
 8022d5a:	4d07      	ldr	r5, [pc, #28]	; (8022d78 <_fstat_r+0x20>)
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	4604      	mov	r4, r0
 8022d60:	4608      	mov	r0, r1
 8022d62:	4611      	mov	r1, r2
 8022d64:	602b      	str	r3, [r5, #0]
 8022d66:	f002 fc59 	bl	802561c <_fstat>
 8022d6a:	1c43      	adds	r3, r0, #1
 8022d6c:	d102      	bne.n	8022d74 <_fstat_r+0x1c>
 8022d6e:	682b      	ldr	r3, [r5, #0]
 8022d70:	b103      	cbz	r3, 8022d74 <_fstat_r+0x1c>
 8022d72:	6023      	str	r3, [r4, #0]
 8022d74:	bd38      	pop	{r3, r4, r5, pc}
 8022d76:	bf00      	nop
 8022d78:	2000f49c 	.word	0x2000f49c

08022d7c <_isatty_r>:
 8022d7c:	b538      	push	{r3, r4, r5, lr}
 8022d7e:	4d06      	ldr	r5, [pc, #24]	; (8022d98 <_isatty_r+0x1c>)
 8022d80:	2300      	movs	r3, #0
 8022d82:	4604      	mov	r4, r0
 8022d84:	4608      	mov	r0, r1
 8022d86:	602b      	str	r3, [r5, #0]
 8022d88:	f002 fc58 	bl	802563c <_isatty>
 8022d8c:	1c43      	adds	r3, r0, #1
 8022d8e:	d102      	bne.n	8022d96 <_isatty_r+0x1a>
 8022d90:	682b      	ldr	r3, [r5, #0]
 8022d92:	b103      	cbz	r3, 8022d96 <_isatty_r+0x1a>
 8022d94:	6023      	str	r3, [r4, #0]
 8022d96:	bd38      	pop	{r3, r4, r5, pc}
 8022d98:	2000f49c 	.word	0x2000f49c
 8022d9c:	00000000 	.word	0x00000000

08022da0 <atan>:
 8022da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022da4:	ec55 4b10 	vmov	r4, r5, d0
 8022da8:	4bc3      	ldr	r3, [pc, #780]	; (80230b8 <atan+0x318>)
 8022daa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8022dae:	429e      	cmp	r6, r3
 8022db0:	46ab      	mov	fp, r5
 8022db2:	dd18      	ble.n	8022de6 <atan+0x46>
 8022db4:	4bc1      	ldr	r3, [pc, #772]	; (80230bc <atan+0x31c>)
 8022db6:	429e      	cmp	r6, r3
 8022db8:	dc01      	bgt.n	8022dbe <atan+0x1e>
 8022dba:	d109      	bne.n	8022dd0 <atan+0x30>
 8022dbc:	b144      	cbz	r4, 8022dd0 <atan+0x30>
 8022dbe:	4622      	mov	r2, r4
 8022dc0:	462b      	mov	r3, r5
 8022dc2:	4620      	mov	r0, r4
 8022dc4:	4629      	mov	r1, r5
 8022dc6:	f7dd fa61 	bl	800028c <__adddf3>
 8022dca:	4604      	mov	r4, r0
 8022dcc:	460d      	mov	r5, r1
 8022dce:	e006      	b.n	8022dde <atan+0x3e>
 8022dd0:	f1bb 0f00 	cmp.w	fp, #0
 8022dd4:	f300 8131 	bgt.w	802303a <atan+0x29a>
 8022dd8:	a59b      	add	r5, pc, #620	; (adr r5, 8023048 <atan+0x2a8>)
 8022dda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8022dde:	ec45 4b10 	vmov	d0, r4, r5
 8022de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022de6:	4bb6      	ldr	r3, [pc, #728]	; (80230c0 <atan+0x320>)
 8022de8:	429e      	cmp	r6, r3
 8022dea:	dc14      	bgt.n	8022e16 <atan+0x76>
 8022dec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8022df0:	429e      	cmp	r6, r3
 8022df2:	dc0d      	bgt.n	8022e10 <atan+0x70>
 8022df4:	a396      	add	r3, pc, #600	; (adr r3, 8023050 <atan+0x2b0>)
 8022df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dfa:	ee10 0a10 	vmov	r0, s0
 8022dfe:	4629      	mov	r1, r5
 8022e00:	f7dd fa44 	bl	800028c <__adddf3>
 8022e04:	4baf      	ldr	r3, [pc, #700]	; (80230c4 <atan+0x324>)
 8022e06:	2200      	movs	r2, #0
 8022e08:	f7dd fe86 	bl	8000b18 <__aeabi_dcmpgt>
 8022e0c:	2800      	cmp	r0, #0
 8022e0e:	d1e6      	bne.n	8022dde <atan+0x3e>
 8022e10:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8022e14:	e02b      	b.n	8022e6e <atan+0xce>
 8022e16:	f000 f9b7 	bl	8023188 <fabs>
 8022e1a:	4bab      	ldr	r3, [pc, #684]	; (80230c8 <atan+0x328>)
 8022e1c:	429e      	cmp	r6, r3
 8022e1e:	ec55 4b10 	vmov	r4, r5, d0
 8022e22:	f300 80bf 	bgt.w	8022fa4 <atan+0x204>
 8022e26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8022e2a:	429e      	cmp	r6, r3
 8022e2c:	f300 80a0 	bgt.w	8022f70 <atan+0x1d0>
 8022e30:	ee10 2a10 	vmov	r2, s0
 8022e34:	ee10 0a10 	vmov	r0, s0
 8022e38:	462b      	mov	r3, r5
 8022e3a:	4629      	mov	r1, r5
 8022e3c:	f7dd fa26 	bl	800028c <__adddf3>
 8022e40:	4ba0      	ldr	r3, [pc, #640]	; (80230c4 <atan+0x324>)
 8022e42:	2200      	movs	r2, #0
 8022e44:	f7dd fa20 	bl	8000288 <__aeabi_dsub>
 8022e48:	2200      	movs	r2, #0
 8022e4a:	4606      	mov	r6, r0
 8022e4c:	460f      	mov	r7, r1
 8022e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022e52:	4620      	mov	r0, r4
 8022e54:	4629      	mov	r1, r5
 8022e56:	f7dd fa19 	bl	800028c <__adddf3>
 8022e5a:	4602      	mov	r2, r0
 8022e5c:	460b      	mov	r3, r1
 8022e5e:	4630      	mov	r0, r6
 8022e60:	4639      	mov	r1, r7
 8022e62:	f7dd fcf3 	bl	800084c <__aeabi_ddiv>
 8022e66:	f04f 0a00 	mov.w	sl, #0
 8022e6a:	4604      	mov	r4, r0
 8022e6c:	460d      	mov	r5, r1
 8022e6e:	4622      	mov	r2, r4
 8022e70:	462b      	mov	r3, r5
 8022e72:	4620      	mov	r0, r4
 8022e74:	4629      	mov	r1, r5
 8022e76:	f7dd fbbf 	bl	80005f8 <__aeabi_dmul>
 8022e7a:	4602      	mov	r2, r0
 8022e7c:	460b      	mov	r3, r1
 8022e7e:	4680      	mov	r8, r0
 8022e80:	4689      	mov	r9, r1
 8022e82:	f7dd fbb9 	bl	80005f8 <__aeabi_dmul>
 8022e86:	a374      	add	r3, pc, #464	; (adr r3, 8023058 <atan+0x2b8>)
 8022e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e8c:	4606      	mov	r6, r0
 8022e8e:	460f      	mov	r7, r1
 8022e90:	f7dd fbb2 	bl	80005f8 <__aeabi_dmul>
 8022e94:	a372      	add	r3, pc, #456	; (adr r3, 8023060 <atan+0x2c0>)
 8022e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e9a:	f7dd f9f7 	bl	800028c <__adddf3>
 8022e9e:	4632      	mov	r2, r6
 8022ea0:	463b      	mov	r3, r7
 8022ea2:	f7dd fba9 	bl	80005f8 <__aeabi_dmul>
 8022ea6:	a370      	add	r3, pc, #448	; (adr r3, 8023068 <atan+0x2c8>)
 8022ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eac:	f7dd f9ee 	bl	800028c <__adddf3>
 8022eb0:	4632      	mov	r2, r6
 8022eb2:	463b      	mov	r3, r7
 8022eb4:	f7dd fba0 	bl	80005f8 <__aeabi_dmul>
 8022eb8:	a36d      	add	r3, pc, #436	; (adr r3, 8023070 <atan+0x2d0>)
 8022eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ebe:	f7dd f9e5 	bl	800028c <__adddf3>
 8022ec2:	4632      	mov	r2, r6
 8022ec4:	463b      	mov	r3, r7
 8022ec6:	f7dd fb97 	bl	80005f8 <__aeabi_dmul>
 8022eca:	a36b      	add	r3, pc, #428	; (adr r3, 8023078 <atan+0x2d8>)
 8022ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ed0:	f7dd f9dc 	bl	800028c <__adddf3>
 8022ed4:	4632      	mov	r2, r6
 8022ed6:	463b      	mov	r3, r7
 8022ed8:	f7dd fb8e 	bl	80005f8 <__aeabi_dmul>
 8022edc:	a368      	add	r3, pc, #416	; (adr r3, 8023080 <atan+0x2e0>)
 8022ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ee2:	f7dd f9d3 	bl	800028c <__adddf3>
 8022ee6:	4642      	mov	r2, r8
 8022ee8:	464b      	mov	r3, r9
 8022eea:	f7dd fb85 	bl	80005f8 <__aeabi_dmul>
 8022eee:	a366      	add	r3, pc, #408	; (adr r3, 8023088 <atan+0x2e8>)
 8022ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef4:	4680      	mov	r8, r0
 8022ef6:	4689      	mov	r9, r1
 8022ef8:	4630      	mov	r0, r6
 8022efa:	4639      	mov	r1, r7
 8022efc:	f7dd fb7c 	bl	80005f8 <__aeabi_dmul>
 8022f00:	a363      	add	r3, pc, #396	; (adr r3, 8023090 <atan+0x2f0>)
 8022f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f06:	f7dd f9bf 	bl	8000288 <__aeabi_dsub>
 8022f0a:	4632      	mov	r2, r6
 8022f0c:	463b      	mov	r3, r7
 8022f0e:	f7dd fb73 	bl	80005f8 <__aeabi_dmul>
 8022f12:	a361      	add	r3, pc, #388	; (adr r3, 8023098 <atan+0x2f8>)
 8022f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f18:	f7dd f9b6 	bl	8000288 <__aeabi_dsub>
 8022f1c:	4632      	mov	r2, r6
 8022f1e:	463b      	mov	r3, r7
 8022f20:	f7dd fb6a 	bl	80005f8 <__aeabi_dmul>
 8022f24:	a35e      	add	r3, pc, #376	; (adr r3, 80230a0 <atan+0x300>)
 8022f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f2a:	f7dd f9ad 	bl	8000288 <__aeabi_dsub>
 8022f2e:	4632      	mov	r2, r6
 8022f30:	463b      	mov	r3, r7
 8022f32:	f7dd fb61 	bl	80005f8 <__aeabi_dmul>
 8022f36:	a35c      	add	r3, pc, #368	; (adr r3, 80230a8 <atan+0x308>)
 8022f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f3c:	f7dd f9a4 	bl	8000288 <__aeabi_dsub>
 8022f40:	4632      	mov	r2, r6
 8022f42:	463b      	mov	r3, r7
 8022f44:	f7dd fb58 	bl	80005f8 <__aeabi_dmul>
 8022f48:	4602      	mov	r2, r0
 8022f4a:	460b      	mov	r3, r1
 8022f4c:	4640      	mov	r0, r8
 8022f4e:	4649      	mov	r1, r9
 8022f50:	f7dd f99c 	bl	800028c <__adddf3>
 8022f54:	4622      	mov	r2, r4
 8022f56:	462b      	mov	r3, r5
 8022f58:	f7dd fb4e 	bl	80005f8 <__aeabi_dmul>
 8022f5c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8022f60:	4602      	mov	r2, r0
 8022f62:	460b      	mov	r3, r1
 8022f64:	d14b      	bne.n	8022ffe <atan+0x25e>
 8022f66:	4620      	mov	r0, r4
 8022f68:	4629      	mov	r1, r5
 8022f6a:	f7dd f98d 	bl	8000288 <__aeabi_dsub>
 8022f6e:	e72c      	b.n	8022dca <atan+0x2a>
 8022f70:	ee10 0a10 	vmov	r0, s0
 8022f74:	4b53      	ldr	r3, [pc, #332]	; (80230c4 <atan+0x324>)
 8022f76:	2200      	movs	r2, #0
 8022f78:	4629      	mov	r1, r5
 8022f7a:	f7dd f985 	bl	8000288 <__aeabi_dsub>
 8022f7e:	4b51      	ldr	r3, [pc, #324]	; (80230c4 <atan+0x324>)
 8022f80:	4606      	mov	r6, r0
 8022f82:	460f      	mov	r7, r1
 8022f84:	2200      	movs	r2, #0
 8022f86:	4620      	mov	r0, r4
 8022f88:	4629      	mov	r1, r5
 8022f8a:	f7dd f97f 	bl	800028c <__adddf3>
 8022f8e:	4602      	mov	r2, r0
 8022f90:	460b      	mov	r3, r1
 8022f92:	4630      	mov	r0, r6
 8022f94:	4639      	mov	r1, r7
 8022f96:	f7dd fc59 	bl	800084c <__aeabi_ddiv>
 8022f9a:	f04f 0a01 	mov.w	sl, #1
 8022f9e:	4604      	mov	r4, r0
 8022fa0:	460d      	mov	r5, r1
 8022fa2:	e764      	b.n	8022e6e <atan+0xce>
 8022fa4:	4b49      	ldr	r3, [pc, #292]	; (80230cc <atan+0x32c>)
 8022fa6:	429e      	cmp	r6, r3
 8022fa8:	da1d      	bge.n	8022fe6 <atan+0x246>
 8022faa:	ee10 0a10 	vmov	r0, s0
 8022fae:	4b48      	ldr	r3, [pc, #288]	; (80230d0 <atan+0x330>)
 8022fb0:	2200      	movs	r2, #0
 8022fb2:	4629      	mov	r1, r5
 8022fb4:	f7dd f968 	bl	8000288 <__aeabi_dsub>
 8022fb8:	4b45      	ldr	r3, [pc, #276]	; (80230d0 <atan+0x330>)
 8022fba:	4606      	mov	r6, r0
 8022fbc:	460f      	mov	r7, r1
 8022fbe:	2200      	movs	r2, #0
 8022fc0:	4620      	mov	r0, r4
 8022fc2:	4629      	mov	r1, r5
 8022fc4:	f7dd fb18 	bl	80005f8 <__aeabi_dmul>
 8022fc8:	4b3e      	ldr	r3, [pc, #248]	; (80230c4 <atan+0x324>)
 8022fca:	2200      	movs	r2, #0
 8022fcc:	f7dd f95e 	bl	800028c <__adddf3>
 8022fd0:	4602      	mov	r2, r0
 8022fd2:	460b      	mov	r3, r1
 8022fd4:	4630      	mov	r0, r6
 8022fd6:	4639      	mov	r1, r7
 8022fd8:	f7dd fc38 	bl	800084c <__aeabi_ddiv>
 8022fdc:	f04f 0a02 	mov.w	sl, #2
 8022fe0:	4604      	mov	r4, r0
 8022fe2:	460d      	mov	r5, r1
 8022fe4:	e743      	b.n	8022e6e <atan+0xce>
 8022fe6:	462b      	mov	r3, r5
 8022fe8:	ee10 2a10 	vmov	r2, s0
 8022fec:	4939      	ldr	r1, [pc, #228]	; (80230d4 <atan+0x334>)
 8022fee:	2000      	movs	r0, #0
 8022ff0:	f7dd fc2c 	bl	800084c <__aeabi_ddiv>
 8022ff4:	f04f 0a03 	mov.w	sl, #3
 8022ff8:	4604      	mov	r4, r0
 8022ffa:	460d      	mov	r5, r1
 8022ffc:	e737      	b.n	8022e6e <atan+0xce>
 8022ffe:	4b36      	ldr	r3, [pc, #216]	; (80230d8 <atan+0x338>)
 8023000:	4e36      	ldr	r6, [pc, #216]	; (80230dc <atan+0x33c>)
 8023002:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8023006:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 802300a:	e9da 2300 	ldrd	r2, r3, [sl]
 802300e:	f7dd f93b 	bl	8000288 <__aeabi_dsub>
 8023012:	4622      	mov	r2, r4
 8023014:	462b      	mov	r3, r5
 8023016:	f7dd f937 	bl	8000288 <__aeabi_dsub>
 802301a:	4602      	mov	r2, r0
 802301c:	460b      	mov	r3, r1
 802301e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8023022:	f7dd f931 	bl	8000288 <__aeabi_dsub>
 8023026:	f1bb 0f00 	cmp.w	fp, #0
 802302a:	4604      	mov	r4, r0
 802302c:	460d      	mov	r5, r1
 802302e:	f6bf aed6 	bge.w	8022dde <atan+0x3e>
 8023032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023036:	461d      	mov	r5, r3
 8023038:	e6d1      	b.n	8022dde <atan+0x3e>
 802303a:	a51d      	add	r5, pc, #116	; (adr r5, 80230b0 <atan+0x310>)
 802303c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023040:	e6cd      	b.n	8022dde <atan+0x3e>
 8023042:	bf00      	nop
 8023044:	f3af 8000 	nop.w
 8023048:	54442d18 	.word	0x54442d18
 802304c:	bff921fb 	.word	0xbff921fb
 8023050:	8800759c 	.word	0x8800759c
 8023054:	7e37e43c 	.word	0x7e37e43c
 8023058:	e322da11 	.word	0xe322da11
 802305c:	3f90ad3a 	.word	0x3f90ad3a
 8023060:	24760deb 	.word	0x24760deb
 8023064:	3fa97b4b 	.word	0x3fa97b4b
 8023068:	a0d03d51 	.word	0xa0d03d51
 802306c:	3fb10d66 	.word	0x3fb10d66
 8023070:	c54c206e 	.word	0xc54c206e
 8023074:	3fb745cd 	.word	0x3fb745cd
 8023078:	920083ff 	.word	0x920083ff
 802307c:	3fc24924 	.word	0x3fc24924
 8023080:	5555550d 	.word	0x5555550d
 8023084:	3fd55555 	.word	0x3fd55555
 8023088:	2c6a6c2f 	.word	0x2c6a6c2f
 802308c:	bfa2b444 	.word	0xbfa2b444
 8023090:	52defd9a 	.word	0x52defd9a
 8023094:	3fadde2d 	.word	0x3fadde2d
 8023098:	af749a6d 	.word	0xaf749a6d
 802309c:	3fb3b0f2 	.word	0x3fb3b0f2
 80230a0:	fe231671 	.word	0xfe231671
 80230a4:	3fbc71c6 	.word	0x3fbc71c6
 80230a8:	9998ebc4 	.word	0x9998ebc4
 80230ac:	3fc99999 	.word	0x3fc99999
 80230b0:	54442d18 	.word	0x54442d18
 80230b4:	3ff921fb 	.word	0x3ff921fb
 80230b8:	440fffff 	.word	0x440fffff
 80230bc:	7ff00000 	.word	0x7ff00000
 80230c0:	3fdbffff 	.word	0x3fdbffff
 80230c4:	3ff00000 	.word	0x3ff00000
 80230c8:	3ff2ffff 	.word	0x3ff2ffff
 80230cc:	40038000 	.word	0x40038000
 80230d0:	3ff80000 	.word	0x3ff80000
 80230d4:	bff00000 	.word	0xbff00000
 80230d8:	08026388 	.word	0x08026388
 80230dc:	08026368 	.word	0x08026368

080230e0 <cos>:
 80230e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80230e2:	ec53 2b10 	vmov	r2, r3, d0
 80230e6:	4826      	ldr	r0, [pc, #152]	; (8023180 <cos+0xa0>)
 80230e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80230ec:	4281      	cmp	r1, r0
 80230ee:	dc06      	bgt.n	80230fe <cos+0x1e>
 80230f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8023178 <cos+0x98>
 80230f4:	b005      	add	sp, #20
 80230f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80230fa:	f001 bced 	b.w	8024ad8 <__kernel_cos>
 80230fe:	4821      	ldr	r0, [pc, #132]	; (8023184 <cos+0xa4>)
 8023100:	4281      	cmp	r1, r0
 8023102:	dd09      	ble.n	8023118 <cos+0x38>
 8023104:	ee10 0a10 	vmov	r0, s0
 8023108:	4619      	mov	r1, r3
 802310a:	f7dd f8bd 	bl	8000288 <__aeabi_dsub>
 802310e:	ec41 0b10 	vmov	d0, r0, r1
 8023112:	b005      	add	sp, #20
 8023114:	f85d fb04 	ldr.w	pc, [sp], #4
 8023118:	4668      	mov	r0, sp
 802311a:	f001 fa19 	bl	8024550 <__ieee754_rem_pio2>
 802311e:	f000 0003 	and.w	r0, r0, #3
 8023122:	2801      	cmp	r0, #1
 8023124:	d00b      	beq.n	802313e <cos+0x5e>
 8023126:	2802      	cmp	r0, #2
 8023128:	d016      	beq.n	8023158 <cos+0x78>
 802312a:	b9e0      	cbnz	r0, 8023166 <cos+0x86>
 802312c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023130:	ed9d 0b00 	vldr	d0, [sp]
 8023134:	f001 fcd0 	bl	8024ad8 <__kernel_cos>
 8023138:	ec51 0b10 	vmov	r0, r1, d0
 802313c:	e7e7      	b.n	802310e <cos+0x2e>
 802313e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023142:	ed9d 0b00 	vldr	d0, [sp]
 8023146:	f002 f8df 	bl	8025308 <__kernel_sin>
 802314a:	ec53 2b10 	vmov	r2, r3, d0
 802314e:	ee10 0a10 	vmov	r0, s0
 8023152:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023156:	e7da      	b.n	802310e <cos+0x2e>
 8023158:	ed9d 1b02 	vldr	d1, [sp, #8]
 802315c:	ed9d 0b00 	vldr	d0, [sp]
 8023160:	f001 fcba 	bl	8024ad8 <__kernel_cos>
 8023164:	e7f1      	b.n	802314a <cos+0x6a>
 8023166:	ed9d 1b02 	vldr	d1, [sp, #8]
 802316a:	ed9d 0b00 	vldr	d0, [sp]
 802316e:	2001      	movs	r0, #1
 8023170:	f002 f8ca 	bl	8025308 <__kernel_sin>
 8023174:	e7e0      	b.n	8023138 <cos+0x58>
 8023176:	bf00      	nop
	...
 8023180:	3fe921fb 	.word	0x3fe921fb
 8023184:	7fefffff 	.word	0x7fefffff

08023188 <fabs>:
 8023188:	ec51 0b10 	vmov	r0, r1, d0
 802318c:	ee10 2a10 	vmov	r2, s0
 8023190:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023194:	ec43 2b10 	vmov	d0, r2, r3
 8023198:	4770      	bx	lr
 802319a:	0000      	movs	r0, r0
 802319c:	0000      	movs	r0, r0
	...

080231a0 <floor>:
 80231a0:	ec51 0b10 	vmov	r0, r1, d0
 80231a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80231ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80231b0:	2e13      	cmp	r6, #19
 80231b2:	ee10 5a10 	vmov	r5, s0
 80231b6:	ee10 8a10 	vmov	r8, s0
 80231ba:	460c      	mov	r4, r1
 80231bc:	dc32      	bgt.n	8023224 <floor+0x84>
 80231be:	2e00      	cmp	r6, #0
 80231c0:	da14      	bge.n	80231ec <floor+0x4c>
 80231c2:	a333      	add	r3, pc, #204	; (adr r3, 8023290 <floor+0xf0>)
 80231c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c8:	f7dd f860 	bl	800028c <__adddf3>
 80231cc:	2200      	movs	r2, #0
 80231ce:	2300      	movs	r3, #0
 80231d0:	f7dd fca2 	bl	8000b18 <__aeabi_dcmpgt>
 80231d4:	b138      	cbz	r0, 80231e6 <floor+0x46>
 80231d6:	2c00      	cmp	r4, #0
 80231d8:	da57      	bge.n	802328a <floor+0xea>
 80231da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80231de:	431d      	orrs	r5, r3
 80231e0:	d001      	beq.n	80231e6 <floor+0x46>
 80231e2:	4c2d      	ldr	r4, [pc, #180]	; (8023298 <floor+0xf8>)
 80231e4:	2500      	movs	r5, #0
 80231e6:	4621      	mov	r1, r4
 80231e8:	4628      	mov	r0, r5
 80231ea:	e025      	b.n	8023238 <floor+0x98>
 80231ec:	4f2b      	ldr	r7, [pc, #172]	; (802329c <floor+0xfc>)
 80231ee:	4137      	asrs	r7, r6
 80231f0:	ea01 0307 	and.w	r3, r1, r7
 80231f4:	4303      	orrs	r3, r0
 80231f6:	d01f      	beq.n	8023238 <floor+0x98>
 80231f8:	a325      	add	r3, pc, #148	; (adr r3, 8023290 <floor+0xf0>)
 80231fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231fe:	f7dd f845 	bl	800028c <__adddf3>
 8023202:	2200      	movs	r2, #0
 8023204:	2300      	movs	r3, #0
 8023206:	f7dd fc87 	bl	8000b18 <__aeabi_dcmpgt>
 802320a:	2800      	cmp	r0, #0
 802320c:	d0eb      	beq.n	80231e6 <floor+0x46>
 802320e:	2c00      	cmp	r4, #0
 8023210:	bfbe      	ittt	lt
 8023212:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8023216:	fa43 f606 	asrlt.w	r6, r3, r6
 802321a:	19a4      	addlt	r4, r4, r6
 802321c:	ea24 0407 	bic.w	r4, r4, r7
 8023220:	2500      	movs	r5, #0
 8023222:	e7e0      	b.n	80231e6 <floor+0x46>
 8023224:	2e33      	cmp	r6, #51	; 0x33
 8023226:	dd0b      	ble.n	8023240 <floor+0xa0>
 8023228:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802322c:	d104      	bne.n	8023238 <floor+0x98>
 802322e:	ee10 2a10 	vmov	r2, s0
 8023232:	460b      	mov	r3, r1
 8023234:	f7dd f82a 	bl	800028c <__adddf3>
 8023238:	ec41 0b10 	vmov	d0, r0, r1
 802323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023240:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023248:	fa23 f707 	lsr.w	r7, r3, r7
 802324c:	4207      	tst	r7, r0
 802324e:	d0f3      	beq.n	8023238 <floor+0x98>
 8023250:	a30f      	add	r3, pc, #60	; (adr r3, 8023290 <floor+0xf0>)
 8023252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023256:	f7dd f819 	bl	800028c <__adddf3>
 802325a:	2200      	movs	r2, #0
 802325c:	2300      	movs	r3, #0
 802325e:	f7dd fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8023262:	2800      	cmp	r0, #0
 8023264:	d0bf      	beq.n	80231e6 <floor+0x46>
 8023266:	2c00      	cmp	r4, #0
 8023268:	da02      	bge.n	8023270 <floor+0xd0>
 802326a:	2e14      	cmp	r6, #20
 802326c:	d103      	bne.n	8023276 <floor+0xd6>
 802326e:	3401      	adds	r4, #1
 8023270:	ea25 0507 	bic.w	r5, r5, r7
 8023274:	e7b7      	b.n	80231e6 <floor+0x46>
 8023276:	2301      	movs	r3, #1
 8023278:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802327c:	fa03 f606 	lsl.w	r6, r3, r6
 8023280:	4435      	add	r5, r6
 8023282:	4545      	cmp	r5, r8
 8023284:	bf38      	it	cc
 8023286:	18e4      	addcc	r4, r4, r3
 8023288:	e7f2      	b.n	8023270 <floor+0xd0>
 802328a:	2500      	movs	r5, #0
 802328c:	462c      	mov	r4, r5
 802328e:	e7aa      	b.n	80231e6 <floor+0x46>
 8023290:	8800759c 	.word	0x8800759c
 8023294:	7e37e43c 	.word	0x7e37e43c
 8023298:	bff00000 	.word	0xbff00000
 802329c:	000fffff 	.word	0x000fffff

080232a0 <sin>:
 80232a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80232a2:	ec53 2b10 	vmov	r2, r3, d0
 80232a6:	4828      	ldr	r0, [pc, #160]	; (8023348 <sin+0xa8>)
 80232a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80232ac:	4281      	cmp	r1, r0
 80232ae:	dc07      	bgt.n	80232c0 <sin+0x20>
 80232b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023340 <sin+0xa0>
 80232b4:	2000      	movs	r0, #0
 80232b6:	b005      	add	sp, #20
 80232b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80232bc:	f002 b824 	b.w	8025308 <__kernel_sin>
 80232c0:	4822      	ldr	r0, [pc, #136]	; (802334c <sin+0xac>)
 80232c2:	4281      	cmp	r1, r0
 80232c4:	dd09      	ble.n	80232da <sin+0x3a>
 80232c6:	ee10 0a10 	vmov	r0, s0
 80232ca:	4619      	mov	r1, r3
 80232cc:	f7dc ffdc 	bl	8000288 <__aeabi_dsub>
 80232d0:	ec41 0b10 	vmov	d0, r0, r1
 80232d4:	b005      	add	sp, #20
 80232d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80232da:	4668      	mov	r0, sp
 80232dc:	f001 f938 	bl	8024550 <__ieee754_rem_pio2>
 80232e0:	f000 0003 	and.w	r0, r0, #3
 80232e4:	2801      	cmp	r0, #1
 80232e6:	d00c      	beq.n	8023302 <sin+0x62>
 80232e8:	2802      	cmp	r0, #2
 80232ea:	d011      	beq.n	8023310 <sin+0x70>
 80232ec:	b9f0      	cbnz	r0, 802332c <sin+0x8c>
 80232ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80232f2:	ed9d 0b00 	vldr	d0, [sp]
 80232f6:	2001      	movs	r0, #1
 80232f8:	f002 f806 	bl	8025308 <__kernel_sin>
 80232fc:	ec51 0b10 	vmov	r0, r1, d0
 8023300:	e7e6      	b.n	80232d0 <sin+0x30>
 8023302:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023306:	ed9d 0b00 	vldr	d0, [sp]
 802330a:	f001 fbe5 	bl	8024ad8 <__kernel_cos>
 802330e:	e7f5      	b.n	80232fc <sin+0x5c>
 8023310:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023314:	ed9d 0b00 	vldr	d0, [sp]
 8023318:	2001      	movs	r0, #1
 802331a:	f001 fff5 	bl	8025308 <__kernel_sin>
 802331e:	ec53 2b10 	vmov	r2, r3, d0
 8023322:	ee10 0a10 	vmov	r0, s0
 8023326:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802332a:	e7d1      	b.n	80232d0 <sin+0x30>
 802332c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023330:	ed9d 0b00 	vldr	d0, [sp]
 8023334:	f001 fbd0 	bl	8024ad8 <__kernel_cos>
 8023338:	e7f1      	b.n	802331e <sin+0x7e>
 802333a:	bf00      	nop
 802333c:	f3af 8000 	nop.w
	...
 8023348:	3fe921fb 	.word	0x3fe921fb
 802334c:	7fefffff 	.word	0x7fefffff

08023350 <asin>:
 8023350:	b538      	push	{r3, r4, r5, lr}
 8023352:	ed2d 8b02 	vpush	{d8}
 8023356:	ec55 4b10 	vmov	r4, r5, d0
 802335a:	f000 f8e9 	bl	8023530 <__ieee754_asin>
 802335e:	4622      	mov	r2, r4
 8023360:	462b      	mov	r3, r5
 8023362:	4620      	mov	r0, r4
 8023364:	4629      	mov	r1, r5
 8023366:	eeb0 8a40 	vmov.f32	s16, s0
 802336a:	eef0 8a60 	vmov.f32	s17, s1
 802336e:	f7dd fbdd 	bl	8000b2c <__aeabi_dcmpun>
 8023372:	b9a8      	cbnz	r0, 80233a0 <asin+0x50>
 8023374:	ec45 4b10 	vmov	d0, r4, r5
 8023378:	f7ff ff06 	bl	8023188 <fabs>
 802337c:	4b0c      	ldr	r3, [pc, #48]	; (80233b0 <asin+0x60>)
 802337e:	ec51 0b10 	vmov	r0, r1, d0
 8023382:	2200      	movs	r2, #0
 8023384:	f7dd fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8023388:	b150      	cbz	r0, 80233a0 <asin+0x50>
 802338a:	f7fd fe6b 	bl	8021064 <__errno>
 802338e:	ecbd 8b02 	vpop	{d8}
 8023392:	2321      	movs	r3, #33	; 0x21
 8023394:	6003      	str	r3, [r0, #0]
 8023396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802339a:	4806      	ldr	r0, [pc, #24]	; (80233b4 <asin+0x64>)
 802339c:	f7ff b968 	b.w	8022670 <nan>
 80233a0:	eeb0 0a48 	vmov.f32	s0, s16
 80233a4:	eef0 0a68 	vmov.f32	s1, s17
 80233a8:	ecbd 8b02 	vpop	{d8}
 80233ac:	bd38      	pop	{r3, r4, r5, pc}
 80233ae:	bf00      	nop
 80233b0:	3ff00000 	.word	0x3ff00000
 80233b4:	08026360 	.word	0x08026360

080233b8 <atan2>:
 80233b8:	f000 bace 	b.w	8023958 <__ieee754_atan2>

080233bc <pow>:
 80233bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233be:	ed2d 8b02 	vpush	{d8}
 80233c2:	eeb0 8a40 	vmov.f32	s16, s0
 80233c6:	eef0 8a60 	vmov.f32	s17, s1
 80233ca:	ec55 4b11 	vmov	r4, r5, d1
 80233ce:	f000 fb8f 	bl	8023af0 <__ieee754_pow>
 80233d2:	4622      	mov	r2, r4
 80233d4:	462b      	mov	r3, r5
 80233d6:	4620      	mov	r0, r4
 80233d8:	4629      	mov	r1, r5
 80233da:	ec57 6b10 	vmov	r6, r7, d0
 80233de:	f7dd fba5 	bl	8000b2c <__aeabi_dcmpun>
 80233e2:	2800      	cmp	r0, #0
 80233e4:	d13b      	bne.n	802345e <pow+0xa2>
 80233e6:	ec51 0b18 	vmov	r0, r1, d8
 80233ea:	2200      	movs	r2, #0
 80233ec:	2300      	movs	r3, #0
 80233ee:	f7dd fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80233f2:	b1b8      	cbz	r0, 8023424 <pow+0x68>
 80233f4:	2200      	movs	r2, #0
 80233f6:	2300      	movs	r3, #0
 80233f8:	4620      	mov	r0, r4
 80233fa:	4629      	mov	r1, r5
 80233fc:	f7dd fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8023400:	2800      	cmp	r0, #0
 8023402:	d146      	bne.n	8023492 <pow+0xd6>
 8023404:	ec45 4b10 	vmov	d0, r4, r5
 8023408:	f002 f86c 	bl	80254e4 <finite>
 802340c:	b338      	cbz	r0, 802345e <pow+0xa2>
 802340e:	2200      	movs	r2, #0
 8023410:	2300      	movs	r3, #0
 8023412:	4620      	mov	r0, r4
 8023414:	4629      	mov	r1, r5
 8023416:	f7dd fb61 	bl	8000adc <__aeabi_dcmplt>
 802341a:	b300      	cbz	r0, 802345e <pow+0xa2>
 802341c:	f7fd fe22 	bl	8021064 <__errno>
 8023420:	2322      	movs	r3, #34	; 0x22
 8023422:	e01b      	b.n	802345c <pow+0xa0>
 8023424:	ec47 6b10 	vmov	d0, r6, r7
 8023428:	f002 f85c 	bl	80254e4 <finite>
 802342c:	b9e0      	cbnz	r0, 8023468 <pow+0xac>
 802342e:	eeb0 0a48 	vmov.f32	s0, s16
 8023432:	eef0 0a68 	vmov.f32	s1, s17
 8023436:	f002 f855 	bl	80254e4 <finite>
 802343a:	b1a8      	cbz	r0, 8023468 <pow+0xac>
 802343c:	ec45 4b10 	vmov	d0, r4, r5
 8023440:	f002 f850 	bl	80254e4 <finite>
 8023444:	b180      	cbz	r0, 8023468 <pow+0xac>
 8023446:	4632      	mov	r2, r6
 8023448:	463b      	mov	r3, r7
 802344a:	4630      	mov	r0, r6
 802344c:	4639      	mov	r1, r7
 802344e:	f7dd fb6d 	bl	8000b2c <__aeabi_dcmpun>
 8023452:	2800      	cmp	r0, #0
 8023454:	d0e2      	beq.n	802341c <pow+0x60>
 8023456:	f7fd fe05 	bl	8021064 <__errno>
 802345a:	2321      	movs	r3, #33	; 0x21
 802345c:	6003      	str	r3, [r0, #0]
 802345e:	ecbd 8b02 	vpop	{d8}
 8023462:	ec47 6b10 	vmov	d0, r6, r7
 8023466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023468:	2200      	movs	r2, #0
 802346a:	2300      	movs	r3, #0
 802346c:	4630      	mov	r0, r6
 802346e:	4639      	mov	r1, r7
 8023470:	f7dd fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8023474:	2800      	cmp	r0, #0
 8023476:	d0f2      	beq.n	802345e <pow+0xa2>
 8023478:	eeb0 0a48 	vmov.f32	s0, s16
 802347c:	eef0 0a68 	vmov.f32	s1, s17
 8023480:	f002 f830 	bl	80254e4 <finite>
 8023484:	2800      	cmp	r0, #0
 8023486:	d0ea      	beq.n	802345e <pow+0xa2>
 8023488:	ec45 4b10 	vmov	d0, r4, r5
 802348c:	f002 f82a 	bl	80254e4 <finite>
 8023490:	e7c3      	b.n	802341a <pow+0x5e>
 8023492:	4f01      	ldr	r7, [pc, #4]	; (8023498 <pow+0xdc>)
 8023494:	2600      	movs	r6, #0
 8023496:	e7e2      	b.n	802345e <pow+0xa2>
 8023498:	3ff00000 	.word	0x3ff00000

0802349c <sqrt>:
 802349c:	b538      	push	{r3, r4, r5, lr}
 802349e:	ed2d 8b02 	vpush	{d8}
 80234a2:	ec55 4b10 	vmov	r4, r5, d0
 80234a6:	f001 fa5f 	bl	8024968 <__ieee754_sqrt>
 80234aa:	4622      	mov	r2, r4
 80234ac:	462b      	mov	r3, r5
 80234ae:	4620      	mov	r0, r4
 80234b0:	4629      	mov	r1, r5
 80234b2:	eeb0 8a40 	vmov.f32	s16, s0
 80234b6:	eef0 8a60 	vmov.f32	s17, s1
 80234ba:	f7dd fb37 	bl	8000b2c <__aeabi_dcmpun>
 80234be:	b990      	cbnz	r0, 80234e6 <sqrt+0x4a>
 80234c0:	2200      	movs	r2, #0
 80234c2:	2300      	movs	r3, #0
 80234c4:	4620      	mov	r0, r4
 80234c6:	4629      	mov	r1, r5
 80234c8:	f7dd fb08 	bl	8000adc <__aeabi_dcmplt>
 80234cc:	b158      	cbz	r0, 80234e6 <sqrt+0x4a>
 80234ce:	f7fd fdc9 	bl	8021064 <__errno>
 80234d2:	2321      	movs	r3, #33	; 0x21
 80234d4:	6003      	str	r3, [r0, #0]
 80234d6:	2200      	movs	r2, #0
 80234d8:	2300      	movs	r3, #0
 80234da:	4610      	mov	r0, r2
 80234dc:	4619      	mov	r1, r3
 80234de:	f7dd f9b5 	bl	800084c <__aeabi_ddiv>
 80234e2:	ec41 0b18 	vmov	d8, r0, r1
 80234e6:	eeb0 0a48 	vmov.f32	s0, s16
 80234ea:	eef0 0a68 	vmov.f32	s1, s17
 80234ee:	ecbd 8b02 	vpop	{d8}
 80234f2:	bd38      	pop	{r3, r4, r5, pc}

080234f4 <sqrtf>:
 80234f4:	b508      	push	{r3, lr}
 80234f6:	ed2d 8b02 	vpush	{d8}
 80234fa:	eeb0 8a40 	vmov.f32	s16, s0
 80234fe:	f001 fae5 	bl	8024acc <__ieee754_sqrtf>
 8023502:	eeb4 8a48 	vcmp.f32	s16, s16
 8023506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802350a:	d60c      	bvs.n	8023526 <sqrtf+0x32>
 802350c:	eddf 8a07 	vldr	s17, [pc, #28]	; 802352c <sqrtf+0x38>
 8023510:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023518:	d505      	bpl.n	8023526 <sqrtf+0x32>
 802351a:	f7fd fda3 	bl	8021064 <__errno>
 802351e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023522:	2321      	movs	r3, #33	; 0x21
 8023524:	6003      	str	r3, [r0, #0]
 8023526:	ecbd 8b02 	vpop	{d8}
 802352a:	bd08      	pop	{r3, pc}
 802352c:	00000000 	.word	0x00000000

08023530 <__ieee754_asin>:
 8023530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023534:	ed2d 8b04 	vpush	{d8-d9}
 8023538:	ec55 4b10 	vmov	r4, r5, d0
 802353c:	4bcc      	ldr	r3, [pc, #816]	; (8023870 <__ieee754_asin+0x340>)
 802353e:	b083      	sub	sp, #12
 8023540:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023544:	4598      	cmp	r8, r3
 8023546:	9501      	str	r5, [sp, #4]
 8023548:	dd35      	ble.n	80235b6 <__ieee754_asin+0x86>
 802354a:	ee10 3a10 	vmov	r3, s0
 802354e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8023552:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8023556:	ea58 0303 	orrs.w	r3, r8, r3
 802355a:	d117      	bne.n	802358c <__ieee754_asin+0x5c>
 802355c:	a3aa      	add	r3, pc, #680	; (adr r3, 8023808 <__ieee754_asin+0x2d8>)
 802355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023562:	ee10 0a10 	vmov	r0, s0
 8023566:	4629      	mov	r1, r5
 8023568:	f7dd f846 	bl	80005f8 <__aeabi_dmul>
 802356c:	a3a8      	add	r3, pc, #672	; (adr r3, 8023810 <__ieee754_asin+0x2e0>)
 802356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023572:	4606      	mov	r6, r0
 8023574:	460f      	mov	r7, r1
 8023576:	4620      	mov	r0, r4
 8023578:	4629      	mov	r1, r5
 802357a:	f7dd f83d 	bl	80005f8 <__aeabi_dmul>
 802357e:	4602      	mov	r2, r0
 8023580:	460b      	mov	r3, r1
 8023582:	4630      	mov	r0, r6
 8023584:	4639      	mov	r1, r7
 8023586:	f7dc fe81 	bl	800028c <__adddf3>
 802358a:	e00b      	b.n	80235a4 <__ieee754_asin+0x74>
 802358c:	ee10 2a10 	vmov	r2, s0
 8023590:	462b      	mov	r3, r5
 8023592:	ee10 0a10 	vmov	r0, s0
 8023596:	4629      	mov	r1, r5
 8023598:	f7dc fe76 	bl	8000288 <__aeabi_dsub>
 802359c:	4602      	mov	r2, r0
 802359e:	460b      	mov	r3, r1
 80235a0:	f7dd f954 	bl	800084c <__aeabi_ddiv>
 80235a4:	4604      	mov	r4, r0
 80235a6:	460d      	mov	r5, r1
 80235a8:	ec45 4b10 	vmov	d0, r4, r5
 80235ac:	b003      	add	sp, #12
 80235ae:	ecbd 8b04 	vpop	{d8-d9}
 80235b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235b6:	4baf      	ldr	r3, [pc, #700]	; (8023874 <__ieee754_asin+0x344>)
 80235b8:	4598      	cmp	r8, r3
 80235ba:	dc11      	bgt.n	80235e0 <__ieee754_asin+0xb0>
 80235bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80235c0:	f280 80ae 	bge.w	8023720 <__ieee754_asin+0x1f0>
 80235c4:	a394      	add	r3, pc, #592	; (adr r3, 8023818 <__ieee754_asin+0x2e8>)
 80235c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235ca:	ee10 0a10 	vmov	r0, s0
 80235ce:	4629      	mov	r1, r5
 80235d0:	f7dc fe5c 	bl	800028c <__adddf3>
 80235d4:	4ba8      	ldr	r3, [pc, #672]	; (8023878 <__ieee754_asin+0x348>)
 80235d6:	2200      	movs	r2, #0
 80235d8:	f7dd fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 80235dc:	2800      	cmp	r0, #0
 80235de:	d1e3      	bne.n	80235a8 <__ieee754_asin+0x78>
 80235e0:	ec45 4b10 	vmov	d0, r4, r5
 80235e4:	f7ff fdd0 	bl	8023188 <fabs>
 80235e8:	49a3      	ldr	r1, [pc, #652]	; (8023878 <__ieee754_asin+0x348>)
 80235ea:	ec53 2b10 	vmov	r2, r3, d0
 80235ee:	2000      	movs	r0, #0
 80235f0:	f7dc fe4a 	bl	8000288 <__aeabi_dsub>
 80235f4:	4ba1      	ldr	r3, [pc, #644]	; (802387c <__ieee754_asin+0x34c>)
 80235f6:	2200      	movs	r2, #0
 80235f8:	f7dc fffe 	bl	80005f8 <__aeabi_dmul>
 80235fc:	a388      	add	r3, pc, #544	; (adr r3, 8023820 <__ieee754_asin+0x2f0>)
 80235fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023602:	4604      	mov	r4, r0
 8023604:	460d      	mov	r5, r1
 8023606:	f7dc fff7 	bl	80005f8 <__aeabi_dmul>
 802360a:	a387      	add	r3, pc, #540	; (adr r3, 8023828 <__ieee754_asin+0x2f8>)
 802360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023610:	f7dc fe3c 	bl	800028c <__adddf3>
 8023614:	4622      	mov	r2, r4
 8023616:	462b      	mov	r3, r5
 8023618:	f7dc ffee 	bl	80005f8 <__aeabi_dmul>
 802361c:	a384      	add	r3, pc, #528	; (adr r3, 8023830 <__ieee754_asin+0x300>)
 802361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023622:	f7dc fe31 	bl	8000288 <__aeabi_dsub>
 8023626:	4622      	mov	r2, r4
 8023628:	462b      	mov	r3, r5
 802362a:	f7dc ffe5 	bl	80005f8 <__aeabi_dmul>
 802362e:	a382      	add	r3, pc, #520	; (adr r3, 8023838 <__ieee754_asin+0x308>)
 8023630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023634:	f7dc fe2a 	bl	800028c <__adddf3>
 8023638:	4622      	mov	r2, r4
 802363a:	462b      	mov	r3, r5
 802363c:	f7dc ffdc 	bl	80005f8 <__aeabi_dmul>
 8023640:	a37f      	add	r3, pc, #508	; (adr r3, 8023840 <__ieee754_asin+0x310>)
 8023642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023646:	f7dc fe1f 	bl	8000288 <__aeabi_dsub>
 802364a:	4622      	mov	r2, r4
 802364c:	462b      	mov	r3, r5
 802364e:	f7dc ffd3 	bl	80005f8 <__aeabi_dmul>
 8023652:	a37d      	add	r3, pc, #500	; (adr r3, 8023848 <__ieee754_asin+0x318>)
 8023654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023658:	f7dc fe18 	bl	800028c <__adddf3>
 802365c:	4622      	mov	r2, r4
 802365e:	462b      	mov	r3, r5
 8023660:	f7dc ffca 	bl	80005f8 <__aeabi_dmul>
 8023664:	a37a      	add	r3, pc, #488	; (adr r3, 8023850 <__ieee754_asin+0x320>)
 8023666:	e9d3 2300 	ldrd	r2, r3, [r3]
 802366a:	ec41 0b18 	vmov	d8, r0, r1
 802366e:	4620      	mov	r0, r4
 8023670:	4629      	mov	r1, r5
 8023672:	f7dc ffc1 	bl	80005f8 <__aeabi_dmul>
 8023676:	a378      	add	r3, pc, #480	; (adr r3, 8023858 <__ieee754_asin+0x328>)
 8023678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802367c:	f7dc fe04 	bl	8000288 <__aeabi_dsub>
 8023680:	4622      	mov	r2, r4
 8023682:	462b      	mov	r3, r5
 8023684:	f7dc ffb8 	bl	80005f8 <__aeabi_dmul>
 8023688:	a375      	add	r3, pc, #468	; (adr r3, 8023860 <__ieee754_asin+0x330>)
 802368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802368e:	f7dc fdfd 	bl	800028c <__adddf3>
 8023692:	4622      	mov	r2, r4
 8023694:	462b      	mov	r3, r5
 8023696:	f7dc ffaf 	bl	80005f8 <__aeabi_dmul>
 802369a:	a373      	add	r3, pc, #460	; (adr r3, 8023868 <__ieee754_asin+0x338>)
 802369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236a0:	f7dc fdf2 	bl	8000288 <__aeabi_dsub>
 80236a4:	4622      	mov	r2, r4
 80236a6:	462b      	mov	r3, r5
 80236a8:	f7dc ffa6 	bl	80005f8 <__aeabi_dmul>
 80236ac:	4b72      	ldr	r3, [pc, #456]	; (8023878 <__ieee754_asin+0x348>)
 80236ae:	2200      	movs	r2, #0
 80236b0:	f7dc fdec 	bl	800028c <__adddf3>
 80236b4:	ec45 4b10 	vmov	d0, r4, r5
 80236b8:	4606      	mov	r6, r0
 80236ba:	460f      	mov	r7, r1
 80236bc:	f001 f954 	bl	8024968 <__ieee754_sqrt>
 80236c0:	4b6f      	ldr	r3, [pc, #444]	; (8023880 <__ieee754_asin+0x350>)
 80236c2:	4598      	cmp	r8, r3
 80236c4:	ec5b ab10 	vmov	sl, fp, d0
 80236c8:	f340 80dc 	ble.w	8023884 <__ieee754_asin+0x354>
 80236cc:	4632      	mov	r2, r6
 80236ce:	463b      	mov	r3, r7
 80236d0:	ec51 0b18 	vmov	r0, r1, d8
 80236d4:	f7dd f8ba 	bl	800084c <__aeabi_ddiv>
 80236d8:	4652      	mov	r2, sl
 80236da:	465b      	mov	r3, fp
 80236dc:	f7dc ff8c 	bl	80005f8 <__aeabi_dmul>
 80236e0:	4652      	mov	r2, sl
 80236e2:	465b      	mov	r3, fp
 80236e4:	f7dc fdd2 	bl	800028c <__adddf3>
 80236e8:	4602      	mov	r2, r0
 80236ea:	460b      	mov	r3, r1
 80236ec:	f7dc fdce 	bl	800028c <__adddf3>
 80236f0:	a347      	add	r3, pc, #284	; (adr r3, 8023810 <__ieee754_asin+0x2e0>)
 80236f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236f6:	f7dc fdc7 	bl	8000288 <__aeabi_dsub>
 80236fa:	4602      	mov	r2, r0
 80236fc:	460b      	mov	r3, r1
 80236fe:	a142      	add	r1, pc, #264	; (adr r1, 8023808 <__ieee754_asin+0x2d8>)
 8023700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023704:	f7dc fdc0 	bl	8000288 <__aeabi_dsub>
 8023708:	9b01      	ldr	r3, [sp, #4]
 802370a:	2b00      	cmp	r3, #0
 802370c:	bfdc      	itt	le
 802370e:	4602      	movle	r2, r0
 8023710:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8023714:	4604      	mov	r4, r0
 8023716:	460d      	mov	r5, r1
 8023718:	bfdc      	itt	le
 802371a:	4614      	movle	r4, r2
 802371c:	461d      	movle	r5, r3
 802371e:	e743      	b.n	80235a8 <__ieee754_asin+0x78>
 8023720:	ee10 2a10 	vmov	r2, s0
 8023724:	ee10 0a10 	vmov	r0, s0
 8023728:	462b      	mov	r3, r5
 802372a:	4629      	mov	r1, r5
 802372c:	f7dc ff64 	bl	80005f8 <__aeabi_dmul>
 8023730:	a33b      	add	r3, pc, #236	; (adr r3, 8023820 <__ieee754_asin+0x2f0>)
 8023732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023736:	4606      	mov	r6, r0
 8023738:	460f      	mov	r7, r1
 802373a:	f7dc ff5d 	bl	80005f8 <__aeabi_dmul>
 802373e:	a33a      	add	r3, pc, #232	; (adr r3, 8023828 <__ieee754_asin+0x2f8>)
 8023740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023744:	f7dc fda2 	bl	800028c <__adddf3>
 8023748:	4632      	mov	r2, r6
 802374a:	463b      	mov	r3, r7
 802374c:	f7dc ff54 	bl	80005f8 <__aeabi_dmul>
 8023750:	a337      	add	r3, pc, #220	; (adr r3, 8023830 <__ieee754_asin+0x300>)
 8023752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023756:	f7dc fd97 	bl	8000288 <__aeabi_dsub>
 802375a:	4632      	mov	r2, r6
 802375c:	463b      	mov	r3, r7
 802375e:	f7dc ff4b 	bl	80005f8 <__aeabi_dmul>
 8023762:	a335      	add	r3, pc, #212	; (adr r3, 8023838 <__ieee754_asin+0x308>)
 8023764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023768:	f7dc fd90 	bl	800028c <__adddf3>
 802376c:	4632      	mov	r2, r6
 802376e:	463b      	mov	r3, r7
 8023770:	f7dc ff42 	bl	80005f8 <__aeabi_dmul>
 8023774:	a332      	add	r3, pc, #200	; (adr r3, 8023840 <__ieee754_asin+0x310>)
 8023776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802377a:	f7dc fd85 	bl	8000288 <__aeabi_dsub>
 802377e:	4632      	mov	r2, r6
 8023780:	463b      	mov	r3, r7
 8023782:	f7dc ff39 	bl	80005f8 <__aeabi_dmul>
 8023786:	a330      	add	r3, pc, #192	; (adr r3, 8023848 <__ieee754_asin+0x318>)
 8023788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802378c:	f7dc fd7e 	bl	800028c <__adddf3>
 8023790:	4632      	mov	r2, r6
 8023792:	463b      	mov	r3, r7
 8023794:	f7dc ff30 	bl	80005f8 <__aeabi_dmul>
 8023798:	a32d      	add	r3, pc, #180	; (adr r3, 8023850 <__ieee754_asin+0x320>)
 802379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802379e:	4680      	mov	r8, r0
 80237a0:	4689      	mov	r9, r1
 80237a2:	4630      	mov	r0, r6
 80237a4:	4639      	mov	r1, r7
 80237a6:	f7dc ff27 	bl	80005f8 <__aeabi_dmul>
 80237aa:	a32b      	add	r3, pc, #172	; (adr r3, 8023858 <__ieee754_asin+0x328>)
 80237ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237b0:	f7dc fd6a 	bl	8000288 <__aeabi_dsub>
 80237b4:	4632      	mov	r2, r6
 80237b6:	463b      	mov	r3, r7
 80237b8:	f7dc ff1e 	bl	80005f8 <__aeabi_dmul>
 80237bc:	a328      	add	r3, pc, #160	; (adr r3, 8023860 <__ieee754_asin+0x330>)
 80237be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237c2:	f7dc fd63 	bl	800028c <__adddf3>
 80237c6:	4632      	mov	r2, r6
 80237c8:	463b      	mov	r3, r7
 80237ca:	f7dc ff15 	bl	80005f8 <__aeabi_dmul>
 80237ce:	a326      	add	r3, pc, #152	; (adr r3, 8023868 <__ieee754_asin+0x338>)
 80237d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237d4:	f7dc fd58 	bl	8000288 <__aeabi_dsub>
 80237d8:	4632      	mov	r2, r6
 80237da:	463b      	mov	r3, r7
 80237dc:	f7dc ff0c 	bl	80005f8 <__aeabi_dmul>
 80237e0:	4b25      	ldr	r3, [pc, #148]	; (8023878 <__ieee754_asin+0x348>)
 80237e2:	2200      	movs	r2, #0
 80237e4:	f7dc fd52 	bl	800028c <__adddf3>
 80237e8:	4602      	mov	r2, r0
 80237ea:	460b      	mov	r3, r1
 80237ec:	4640      	mov	r0, r8
 80237ee:	4649      	mov	r1, r9
 80237f0:	f7dd f82c 	bl	800084c <__aeabi_ddiv>
 80237f4:	4622      	mov	r2, r4
 80237f6:	462b      	mov	r3, r5
 80237f8:	f7dc fefe 	bl	80005f8 <__aeabi_dmul>
 80237fc:	4602      	mov	r2, r0
 80237fe:	460b      	mov	r3, r1
 8023800:	4620      	mov	r0, r4
 8023802:	4629      	mov	r1, r5
 8023804:	e6bf      	b.n	8023586 <__ieee754_asin+0x56>
 8023806:	bf00      	nop
 8023808:	54442d18 	.word	0x54442d18
 802380c:	3ff921fb 	.word	0x3ff921fb
 8023810:	33145c07 	.word	0x33145c07
 8023814:	3c91a626 	.word	0x3c91a626
 8023818:	8800759c 	.word	0x8800759c
 802381c:	7e37e43c 	.word	0x7e37e43c
 8023820:	0dfdf709 	.word	0x0dfdf709
 8023824:	3f023de1 	.word	0x3f023de1
 8023828:	7501b288 	.word	0x7501b288
 802382c:	3f49efe0 	.word	0x3f49efe0
 8023830:	b5688f3b 	.word	0xb5688f3b
 8023834:	3fa48228 	.word	0x3fa48228
 8023838:	0e884455 	.word	0x0e884455
 802383c:	3fc9c155 	.word	0x3fc9c155
 8023840:	03eb6f7d 	.word	0x03eb6f7d
 8023844:	3fd4d612 	.word	0x3fd4d612
 8023848:	55555555 	.word	0x55555555
 802384c:	3fc55555 	.word	0x3fc55555
 8023850:	b12e9282 	.word	0xb12e9282
 8023854:	3fb3b8c5 	.word	0x3fb3b8c5
 8023858:	1b8d0159 	.word	0x1b8d0159
 802385c:	3fe6066c 	.word	0x3fe6066c
 8023860:	9c598ac8 	.word	0x9c598ac8
 8023864:	40002ae5 	.word	0x40002ae5
 8023868:	1c8a2d4b 	.word	0x1c8a2d4b
 802386c:	40033a27 	.word	0x40033a27
 8023870:	3fefffff 	.word	0x3fefffff
 8023874:	3fdfffff 	.word	0x3fdfffff
 8023878:	3ff00000 	.word	0x3ff00000
 802387c:	3fe00000 	.word	0x3fe00000
 8023880:	3fef3332 	.word	0x3fef3332
 8023884:	ee10 2a10 	vmov	r2, s0
 8023888:	ee10 0a10 	vmov	r0, s0
 802388c:	465b      	mov	r3, fp
 802388e:	4659      	mov	r1, fp
 8023890:	f7dc fcfc 	bl	800028c <__adddf3>
 8023894:	4632      	mov	r2, r6
 8023896:	463b      	mov	r3, r7
 8023898:	ec41 0b19 	vmov	d9, r0, r1
 802389c:	ec51 0b18 	vmov	r0, r1, d8
 80238a0:	f7dc ffd4 	bl	800084c <__aeabi_ddiv>
 80238a4:	4602      	mov	r2, r0
 80238a6:	460b      	mov	r3, r1
 80238a8:	ec51 0b19 	vmov	r0, r1, d9
 80238ac:	f7dc fea4 	bl	80005f8 <__aeabi_dmul>
 80238b0:	f04f 0800 	mov.w	r8, #0
 80238b4:	4606      	mov	r6, r0
 80238b6:	460f      	mov	r7, r1
 80238b8:	4642      	mov	r2, r8
 80238ba:	465b      	mov	r3, fp
 80238bc:	4640      	mov	r0, r8
 80238be:	4659      	mov	r1, fp
 80238c0:	f7dc fe9a 	bl	80005f8 <__aeabi_dmul>
 80238c4:	4602      	mov	r2, r0
 80238c6:	460b      	mov	r3, r1
 80238c8:	4620      	mov	r0, r4
 80238ca:	4629      	mov	r1, r5
 80238cc:	f7dc fcdc 	bl	8000288 <__aeabi_dsub>
 80238d0:	4642      	mov	r2, r8
 80238d2:	4604      	mov	r4, r0
 80238d4:	460d      	mov	r5, r1
 80238d6:	465b      	mov	r3, fp
 80238d8:	4650      	mov	r0, sl
 80238da:	4659      	mov	r1, fp
 80238dc:	f7dc fcd6 	bl	800028c <__adddf3>
 80238e0:	4602      	mov	r2, r0
 80238e2:	460b      	mov	r3, r1
 80238e4:	4620      	mov	r0, r4
 80238e6:	4629      	mov	r1, r5
 80238e8:	f7dc ffb0 	bl	800084c <__aeabi_ddiv>
 80238ec:	4602      	mov	r2, r0
 80238ee:	460b      	mov	r3, r1
 80238f0:	f7dc fccc 	bl	800028c <__adddf3>
 80238f4:	4602      	mov	r2, r0
 80238f6:	460b      	mov	r3, r1
 80238f8:	a113      	add	r1, pc, #76	; (adr r1, 8023948 <__ieee754_asin+0x418>)
 80238fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80238fe:	f7dc fcc3 	bl	8000288 <__aeabi_dsub>
 8023902:	4602      	mov	r2, r0
 8023904:	460b      	mov	r3, r1
 8023906:	4630      	mov	r0, r6
 8023908:	4639      	mov	r1, r7
 802390a:	f7dc fcbd 	bl	8000288 <__aeabi_dsub>
 802390e:	4642      	mov	r2, r8
 8023910:	4604      	mov	r4, r0
 8023912:	460d      	mov	r5, r1
 8023914:	465b      	mov	r3, fp
 8023916:	4640      	mov	r0, r8
 8023918:	4659      	mov	r1, fp
 802391a:	f7dc fcb7 	bl	800028c <__adddf3>
 802391e:	4602      	mov	r2, r0
 8023920:	460b      	mov	r3, r1
 8023922:	a10b      	add	r1, pc, #44	; (adr r1, 8023950 <__ieee754_asin+0x420>)
 8023924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023928:	f7dc fcae 	bl	8000288 <__aeabi_dsub>
 802392c:	4602      	mov	r2, r0
 802392e:	460b      	mov	r3, r1
 8023930:	4620      	mov	r0, r4
 8023932:	4629      	mov	r1, r5
 8023934:	f7dc fca8 	bl	8000288 <__aeabi_dsub>
 8023938:	4602      	mov	r2, r0
 802393a:	460b      	mov	r3, r1
 802393c:	a104      	add	r1, pc, #16	; (adr r1, 8023950 <__ieee754_asin+0x420>)
 802393e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023942:	e6df      	b.n	8023704 <__ieee754_asin+0x1d4>
 8023944:	f3af 8000 	nop.w
 8023948:	33145c07 	.word	0x33145c07
 802394c:	3c91a626 	.word	0x3c91a626
 8023950:	54442d18 	.word	0x54442d18
 8023954:	3fe921fb 	.word	0x3fe921fb

08023958 <__ieee754_atan2>:
 8023958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802395c:	ec57 6b11 	vmov	r6, r7, d1
 8023960:	4273      	negs	r3, r6
 8023962:	f8df e184 	ldr.w	lr, [pc, #388]	; 8023ae8 <__ieee754_atan2+0x190>
 8023966:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 802396a:	4333      	orrs	r3, r6
 802396c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8023970:	4573      	cmp	r3, lr
 8023972:	ec51 0b10 	vmov	r0, r1, d0
 8023976:	ee11 8a10 	vmov	r8, s2
 802397a:	d80a      	bhi.n	8023992 <__ieee754_atan2+0x3a>
 802397c:	4244      	negs	r4, r0
 802397e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023982:	4304      	orrs	r4, r0
 8023984:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8023988:	4574      	cmp	r4, lr
 802398a:	ee10 9a10 	vmov	r9, s0
 802398e:	468c      	mov	ip, r1
 8023990:	d907      	bls.n	80239a2 <__ieee754_atan2+0x4a>
 8023992:	4632      	mov	r2, r6
 8023994:	463b      	mov	r3, r7
 8023996:	f7dc fc79 	bl	800028c <__adddf3>
 802399a:	ec41 0b10 	vmov	d0, r0, r1
 802399e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80239a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80239a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80239aa:	4334      	orrs	r4, r6
 80239ac:	d103      	bne.n	80239b6 <__ieee754_atan2+0x5e>
 80239ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239b2:	f7ff b9f5 	b.w	8022da0 <atan>
 80239b6:	17bc      	asrs	r4, r7, #30
 80239b8:	f004 0402 	and.w	r4, r4, #2
 80239bc:	ea53 0909 	orrs.w	r9, r3, r9
 80239c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80239c4:	d107      	bne.n	80239d6 <__ieee754_atan2+0x7e>
 80239c6:	2c02      	cmp	r4, #2
 80239c8:	d060      	beq.n	8023a8c <__ieee754_atan2+0x134>
 80239ca:	2c03      	cmp	r4, #3
 80239cc:	d1e5      	bne.n	802399a <__ieee754_atan2+0x42>
 80239ce:	a142      	add	r1, pc, #264	; (adr r1, 8023ad8 <__ieee754_atan2+0x180>)
 80239d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239d4:	e7e1      	b.n	802399a <__ieee754_atan2+0x42>
 80239d6:	ea52 0808 	orrs.w	r8, r2, r8
 80239da:	d106      	bne.n	80239ea <__ieee754_atan2+0x92>
 80239dc:	f1bc 0f00 	cmp.w	ip, #0
 80239e0:	da5f      	bge.n	8023aa2 <__ieee754_atan2+0x14a>
 80239e2:	a13f      	add	r1, pc, #252	; (adr r1, 8023ae0 <__ieee754_atan2+0x188>)
 80239e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239e8:	e7d7      	b.n	802399a <__ieee754_atan2+0x42>
 80239ea:	4572      	cmp	r2, lr
 80239ec:	d10f      	bne.n	8023a0e <__ieee754_atan2+0xb6>
 80239ee:	4293      	cmp	r3, r2
 80239f0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80239f4:	d107      	bne.n	8023a06 <__ieee754_atan2+0xae>
 80239f6:	2c02      	cmp	r4, #2
 80239f8:	d84c      	bhi.n	8023a94 <__ieee754_atan2+0x13c>
 80239fa:	4b35      	ldr	r3, [pc, #212]	; (8023ad0 <__ieee754_atan2+0x178>)
 80239fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8023a00:	e9d4 0100 	ldrd	r0, r1, [r4]
 8023a04:	e7c9      	b.n	802399a <__ieee754_atan2+0x42>
 8023a06:	2c02      	cmp	r4, #2
 8023a08:	d848      	bhi.n	8023a9c <__ieee754_atan2+0x144>
 8023a0a:	4b32      	ldr	r3, [pc, #200]	; (8023ad4 <__ieee754_atan2+0x17c>)
 8023a0c:	e7f6      	b.n	80239fc <__ieee754_atan2+0xa4>
 8023a0e:	4573      	cmp	r3, lr
 8023a10:	d0e4      	beq.n	80239dc <__ieee754_atan2+0x84>
 8023a12:	1a9b      	subs	r3, r3, r2
 8023a14:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8023a18:	ea4f 5223 	mov.w	r2, r3, asr #20
 8023a1c:	da1e      	bge.n	8023a5c <__ieee754_atan2+0x104>
 8023a1e:	2f00      	cmp	r7, #0
 8023a20:	da01      	bge.n	8023a26 <__ieee754_atan2+0xce>
 8023a22:	323c      	adds	r2, #60	; 0x3c
 8023a24:	db1e      	blt.n	8023a64 <__ieee754_atan2+0x10c>
 8023a26:	4632      	mov	r2, r6
 8023a28:	463b      	mov	r3, r7
 8023a2a:	f7dc ff0f 	bl	800084c <__aeabi_ddiv>
 8023a2e:	ec41 0b10 	vmov	d0, r0, r1
 8023a32:	f7ff fba9 	bl	8023188 <fabs>
 8023a36:	f7ff f9b3 	bl	8022da0 <atan>
 8023a3a:	ec51 0b10 	vmov	r0, r1, d0
 8023a3e:	2c01      	cmp	r4, #1
 8023a40:	d013      	beq.n	8023a6a <__ieee754_atan2+0x112>
 8023a42:	2c02      	cmp	r4, #2
 8023a44:	d015      	beq.n	8023a72 <__ieee754_atan2+0x11a>
 8023a46:	2c00      	cmp	r4, #0
 8023a48:	d0a7      	beq.n	802399a <__ieee754_atan2+0x42>
 8023a4a:	a319      	add	r3, pc, #100	; (adr r3, 8023ab0 <__ieee754_atan2+0x158>)
 8023a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a50:	f7dc fc1a 	bl	8000288 <__aeabi_dsub>
 8023a54:	a318      	add	r3, pc, #96	; (adr r3, 8023ab8 <__ieee754_atan2+0x160>)
 8023a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a5a:	e014      	b.n	8023a86 <__ieee754_atan2+0x12e>
 8023a5c:	a118      	add	r1, pc, #96	; (adr r1, 8023ac0 <__ieee754_atan2+0x168>)
 8023a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a62:	e7ec      	b.n	8023a3e <__ieee754_atan2+0xe6>
 8023a64:	2000      	movs	r0, #0
 8023a66:	2100      	movs	r1, #0
 8023a68:	e7e9      	b.n	8023a3e <__ieee754_atan2+0xe6>
 8023a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023a6e:	4619      	mov	r1, r3
 8023a70:	e793      	b.n	802399a <__ieee754_atan2+0x42>
 8023a72:	a30f      	add	r3, pc, #60	; (adr r3, 8023ab0 <__ieee754_atan2+0x158>)
 8023a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a78:	f7dc fc06 	bl	8000288 <__aeabi_dsub>
 8023a7c:	4602      	mov	r2, r0
 8023a7e:	460b      	mov	r3, r1
 8023a80:	a10d      	add	r1, pc, #52	; (adr r1, 8023ab8 <__ieee754_atan2+0x160>)
 8023a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a86:	f7dc fbff 	bl	8000288 <__aeabi_dsub>
 8023a8a:	e786      	b.n	802399a <__ieee754_atan2+0x42>
 8023a8c:	a10a      	add	r1, pc, #40	; (adr r1, 8023ab8 <__ieee754_atan2+0x160>)
 8023a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a92:	e782      	b.n	802399a <__ieee754_atan2+0x42>
 8023a94:	a10c      	add	r1, pc, #48	; (adr r1, 8023ac8 <__ieee754_atan2+0x170>)
 8023a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a9a:	e77e      	b.n	802399a <__ieee754_atan2+0x42>
 8023a9c:	2000      	movs	r0, #0
 8023a9e:	2100      	movs	r1, #0
 8023aa0:	e77b      	b.n	802399a <__ieee754_atan2+0x42>
 8023aa2:	a107      	add	r1, pc, #28	; (adr r1, 8023ac0 <__ieee754_atan2+0x168>)
 8023aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023aa8:	e777      	b.n	802399a <__ieee754_atan2+0x42>
 8023aaa:	bf00      	nop
 8023aac:	f3af 8000 	nop.w
 8023ab0:	33145c07 	.word	0x33145c07
 8023ab4:	3ca1a626 	.word	0x3ca1a626
 8023ab8:	54442d18 	.word	0x54442d18
 8023abc:	400921fb 	.word	0x400921fb
 8023ac0:	54442d18 	.word	0x54442d18
 8023ac4:	3ff921fb 	.word	0x3ff921fb
 8023ac8:	54442d18 	.word	0x54442d18
 8023acc:	3fe921fb 	.word	0x3fe921fb
 8023ad0:	080263a8 	.word	0x080263a8
 8023ad4:	080263c0 	.word	0x080263c0
 8023ad8:	54442d18 	.word	0x54442d18
 8023adc:	c00921fb 	.word	0xc00921fb
 8023ae0:	54442d18 	.word	0x54442d18
 8023ae4:	bff921fb 	.word	0xbff921fb
 8023ae8:	7ff00000 	.word	0x7ff00000
 8023aec:	00000000 	.word	0x00000000

08023af0 <__ieee754_pow>:
 8023af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023af4:	ed2d 8b06 	vpush	{d8-d10}
 8023af8:	b089      	sub	sp, #36	; 0x24
 8023afa:	ed8d 1b00 	vstr	d1, [sp]
 8023afe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8023b02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8023b06:	ea58 0102 	orrs.w	r1, r8, r2
 8023b0a:	ec57 6b10 	vmov	r6, r7, d0
 8023b0e:	d115      	bne.n	8023b3c <__ieee754_pow+0x4c>
 8023b10:	19b3      	adds	r3, r6, r6
 8023b12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8023b16:	4152      	adcs	r2, r2
 8023b18:	4299      	cmp	r1, r3
 8023b1a:	4b89      	ldr	r3, [pc, #548]	; (8023d40 <__ieee754_pow+0x250>)
 8023b1c:	4193      	sbcs	r3, r2
 8023b1e:	f080 84d2 	bcs.w	80244c6 <__ieee754_pow+0x9d6>
 8023b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023b26:	4630      	mov	r0, r6
 8023b28:	4639      	mov	r1, r7
 8023b2a:	f7dc fbaf 	bl	800028c <__adddf3>
 8023b2e:	ec41 0b10 	vmov	d0, r0, r1
 8023b32:	b009      	add	sp, #36	; 0x24
 8023b34:	ecbd 8b06 	vpop	{d8-d10}
 8023b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b3c:	4b81      	ldr	r3, [pc, #516]	; (8023d44 <__ieee754_pow+0x254>)
 8023b3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8023b42:	429c      	cmp	r4, r3
 8023b44:	ee10 aa10 	vmov	sl, s0
 8023b48:	463d      	mov	r5, r7
 8023b4a:	dc06      	bgt.n	8023b5a <__ieee754_pow+0x6a>
 8023b4c:	d101      	bne.n	8023b52 <__ieee754_pow+0x62>
 8023b4e:	2e00      	cmp	r6, #0
 8023b50:	d1e7      	bne.n	8023b22 <__ieee754_pow+0x32>
 8023b52:	4598      	cmp	r8, r3
 8023b54:	dc01      	bgt.n	8023b5a <__ieee754_pow+0x6a>
 8023b56:	d10f      	bne.n	8023b78 <__ieee754_pow+0x88>
 8023b58:	b172      	cbz	r2, 8023b78 <__ieee754_pow+0x88>
 8023b5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8023b5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8023b62:	ea55 050a 	orrs.w	r5, r5, sl
 8023b66:	d1dc      	bne.n	8023b22 <__ieee754_pow+0x32>
 8023b68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023b6c:	18db      	adds	r3, r3, r3
 8023b6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8023b72:	4152      	adcs	r2, r2
 8023b74:	429d      	cmp	r5, r3
 8023b76:	e7d0      	b.n	8023b1a <__ieee754_pow+0x2a>
 8023b78:	2d00      	cmp	r5, #0
 8023b7a:	da3b      	bge.n	8023bf4 <__ieee754_pow+0x104>
 8023b7c:	4b72      	ldr	r3, [pc, #456]	; (8023d48 <__ieee754_pow+0x258>)
 8023b7e:	4598      	cmp	r8, r3
 8023b80:	dc51      	bgt.n	8023c26 <__ieee754_pow+0x136>
 8023b82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8023b86:	4598      	cmp	r8, r3
 8023b88:	f340 84ac 	ble.w	80244e4 <__ieee754_pow+0x9f4>
 8023b8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023b90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023b94:	2b14      	cmp	r3, #20
 8023b96:	dd0f      	ble.n	8023bb8 <__ieee754_pow+0xc8>
 8023b98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8023b9c:	fa22 f103 	lsr.w	r1, r2, r3
 8023ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8023ba4:	4293      	cmp	r3, r2
 8023ba6:	f040 849d 	bne.w	80244e4 <__ieee754_pow+0x9f4>
 8023baa:	f001 0101 	and.w	r1, r1, #1
 8023bae:	f1c1 0302 	rsb	r3, r1, #2
 8023bb2:	9304      	str	r3, [sp, #16]
 8023bb4:	b182      	cbz	r2, 8023bd8 <__ieee754_pow+0xe8>
 8023bb6:	e05f      	b.n	8023c78 <__ieee754_pow+0x188>
 8023bb8:	2a00      	cmp	r2, #0
 8023bba:	d15b      	bne.n	8023c74 <__ieee754_pow+0x184>
 8023bbc:	f1c3 0314 	rsb	r3, r3, #20
 8023bc0:	fa48 f103 	asr.w	r1, r8, r3
 8023bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8023bc8:	4543      	cmp	r3, r8
 8023bca:	f040 8488 	bne.w	80244de <__ieee754_pow+0x9ee>
 8023bce:	f001 0101 	and.w	r1, r1, #1
 8023bd2:	f1c1 0302 	rsb	r3, r1, #2
 8023bd6:	9304      	str	r3, [sp, #16]
 8023bd8:	4b5c      	ldr	r3, [pc, #368]	; (8023d4c <__ieee754_pow+0x25c>)
 8023bda:	4598      	cmp	r8, r3
 8023bdc:	d132      	bne.n	8023c44 <__ieee754_pow+0x154>
 8023bde:	f1b9 0f00 	cmp.w	r9, #0
 8023be2:	f280 8478 	bge.w	80244d6 <__ieee754_pow+0x9e6>
 8023be6:	4959      	ldr	r1, [pc, #356]	; (8023d4c <__ieee754_pow+0x25c>)
 8023be8:	4632      	mov	r2, r6
 8023bea:	463b      	mov	r3, r7
 8023bec:	2000      	movs	r0, #0
 8023bee:	f7dc fe2d 	bl	800084c <__aeabi_ddiv>
 8023bf2:	e79c      	b.n	8023b2e <__ieee754_pow+0x3e>
 8023bf4:	2300      	movs	r3, #0
 8023bf6:	9304      	str	r3, [sp, #16]
 8023bf8:	2a00      	cmp	r2, #0
 8023bfa:	d13d      	bne.n	8023c78 <__ieee754_pow+0x188>
 8023bfc:	4b51      	ldr	r3, [pc, #324]	; (8023d44 <__ieee754_pow+0x254>)
 8023bfe:	4598      	cmp	r8, r3
 8023c00:	d1ea      	bne.n	8023bd8 <__ieee754_pow+0xe8>
 8023c02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8023c06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8023c0a:	ea53 030a 	orrs.w	r3, r3, sl
 8023c0e:	f000 845a 	beq.w	80244c6 <__ieee754_pow+0x9d6>
 8023c12:	4b4f      	ldr	r3, [pc, #316]	; (8023d50 <__ieee754_pow+0x260>)
 8023c14:	429c      	cmp	r4, r3
 8023c16:	dd08      	ble.n	8023c2a <__ieee754_pow+0x13a>
 8023c18:	f1b9 0f00 	cmp.w	r9, #0
 8023c1c:	f2c0 8457 	blt.w	80244ce <__ieee754_pow+0x9de>
 8023c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023c24:	e783      	b.n	8023b2e <__ieee754_pow+0x3e>
 8023c26:	2302      	movs	r3, #2
 8023c28:	e7e5      	b.n	8023bf6 <__ieee754_pow+0x106>
 8023c2a:	f1b9 0f00 	cmp.w	r9, #0
 8023c2e:	f04f 0000 	mov.w	r0, #0
 8023c32:	f04f 0100 	mov.w	r1, #0
 8023c36:	f6bf af7a 	bge.w	8023b2e <__ieee754_pow+0x3e>
 8023c3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8023c3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023c42:	e774      	b.n	8023b2e <__ieee754_pow+0x3e>
 8023c44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8023c48:	d106      	bne.n	8023c58 <__ieee754_pow+0x168>
 8023c4a:	4632      	mov	r2, r6
 8023c4c:	463b      	mov	r3, r7
 8023c4e:	4630      	mov	r0, r6
 8023c50:	4639      	mov	r1, r7
 8023c52:	f7dc fcd1 	bl	80005f8 <__aeabi_dmul>
 8023c56:	e76a      	b.n	8023b2e <__ieee754_pow+0x3e>
 8023c58:	4b3e      	ldr	r3, [pc, #248]	; (8023d54 <__ieee754_pow+0x264>)
 8023c5a:	4599      	cmp	r9, r3
 8023c5c:	d10c      	bne.n	8023c78 <__ieee754_pow+0x188>
 8023c5e:	2d00      	cmp	r5, #0
 8023c60:	db0a      	blt.n	8023c78 <__ieee754_pow+0x188>
 8023c62:	ec47 6b10 	vmov	d0, r6, r7
 8023c66:	b009      	add	sp, #36	; 0x24
 8023c68:	ecbd 8b06 	vpop	{d8-d10}
 8023c6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c70:	f000 be7a 	b.w	8024968 <__ieee754_sqrt>
 8023c74:	2300      	movs	r3, #0
 8023c76:	9304      	str	r3, [sp, #16]
 8023c78:	ec47 6b10 	vmov	d0, r6, r7
 8023c7c:	f7ff fa84 	bl	8023188 <fabs>
 8023c80:	ec51 0b10 	vmov	r0, r1, d0
 8023c84:	f1ba 0f00 	cmp.w	sl, #0
 8023c88:	d129      	bne.n	8023cde <__ieee754_pow+0x1ee>
 8023c8a:	b124      	cbz	r4, 8023c96 <__ieee754_pow+0x1a6>
 8023c8c:	4b2f      	ldr	r3, [pc, #188]	; (8023d4c <__ieee754_pow+0x25c>)
 8023c8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8023c92:	429a      	cmp	r2, r3
 8023c94:	d123      	bne.n	8023cde <__ieee754_pow+0x1ee>
 8023c96:	f1b9 0f00 	cmp.w	r9, #0
 8023c9a:	da05      	bge.n	8023ca8 <__ieee754_pow+0x1b8>
 8023c9c:	4602      	mov	r2, r0
 8023c9e:	460b      	mov	r3, r1
 8023ca0:	2000      	movs	r0, #0
 8023ca2:	492a      	ldr	r1, [pc, #168]	; (8023d4c <__ieee754_pow+0x25c>)
 8023ca4:	f7dc fdd2 	bl	800084c <__aeabi_ddiv>
 8023ca8:	2d00      	cmp	r5, #0
 8023caa:	f6bf af40 	bge.w	8023b2e <__ieee754_pow+0x3e>
 8023cae:	9b04      	ldr	r3, [sp, #16]
 8023cb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023cb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8023cb8:	4323      	orrs	r3, r4
 8023cba:	d108      	bne.n	8023cce <__ieee754_pow+0x1de>
 8023cbc:	4602      	mov	r2, r0
 8023cbe:	460b      	mov	r3, r1
 8023cc0:	4610      	mov	r0, r2
 8023cc2:	4619      	mov	r1, r3
 8023cc4:	f7dc fae0 	bl	8000288 <__aeabi_dsub>
 8023cc8:	4602      	mov	r2, r0
 8023cca:	460b      	mov	r3, r1
 8023ccc:	e78f      	b.n	8023bee <__ieee754_pow+0xfe>
 8023cce:	9b04      	ldr	r3, [sp, #16]
 8023cd0:	2b01      	cmp	r3, #1
 8023cd2:	f47f af2c 	bne.w	8023b2e <__ieee754_pow+0x3e>
 8023cd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023cda:	4619      	mov	r1, r3
 8023cdc:	e727      	b.n	8023b2e <__ieee754_pow+0x3e>
 8023cde:	0feb      	lsrs	r3, r5, #31
 8023ce0:	3b01      	subs	r3, #1
 8023ce2:	9306      	str	r3, [sp, #24]
 8023ce4:	9a06      	ldr	r2, [sp, #24]
 8023ce6:	9b04      	ldr	r3, [sp, #16]
 8023ce8:	4313      	orrs	r3, r2
 8023cea:	d102      	bne.n	8023cf2 <__ieee754_pow+0x202>
 8023cec:	4632      	mov	r2, r6
 8023cee:	463b      	mov	r3, r7
 8023cf0:	e7e6      	b.n	8023cc0 <__ieee754_pow+0x1d0>
 8023cf2:	4b19      	ldr	r3, [pc, #100]	; (8023d58 <__ieee754_pow+0x268>)
 8023cf4:	4598      	cmp	r8, r3
 8023cf6:	f340 80fb 	ble.w	8023ef0 <__ieee754_pow+0x400>
 8023cfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023cfe:	4598      	cmp	r8, r3
 8023d00:	4b13      	ldr	r3, [pc, #76]	; (8023d50 <__ieee754_pow+0x260>)
 8023d02:	dd0c      	ble.n	8023d1e <__ieee754_pow+0x22e>
 8023d04:	429c      	cmp	r4, r3
 8023d06:	dc0f      	bgt.n	8023d28 <__ieee754_pow+0x238>
 8023d08:	f1b9 0f00 	cmp.w	r9, #0
 8023d0c:	da0f      	bge.n	8023d2e <__ieee754_pow+0x23e>
 8023d0e:	2000      	movs	r0, #0
 8023d10:	b009      	add	sp, #36	; 0x24
 8023d12:	ecbd 8b06 	vpop	{d8-d10}
 8023d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d1a:	f001 bbda 	b.w	80254d2 <__math_oflow>
 8023d1e:	429c      	cmp	r4, r3
 8023d20:	dbf2      	blt.n	8023d08 <__ieee754_pow+0x218>
 8023d22:	4b0a      	ldr	r3, [pc, #40]	; (8023d4c <__ieee754_pow+0x25c>)
 8023d24:	429c      	cmp	r4, r3
 8023d26:	dd19      	ble.n	8023d5c <__ieee754_pow+0x26c>
 8023d28:	f1b9 0f00 	cmp.w	r9, #0
 8023d2c:	dcef      	bgt.n	8023d0e <__ieee754_pow+0x21e>
 8023d2e:	2000      	movs	r0, #0
 8023d30:	b009      	add	sp, #36	; 0x24
 8023d32:	ecbd 8b06 	vpop	{d8-d10}
 8023d36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d3a:	f001 bbc1 	b.w	80254c0 <__math_uflow>
 8023d3e:	bf00      	nop
 8023d40:	fff00000 	.word	0xfff00000
 8023d44:	7ff00000 	.word	0x7ff00000
 8023d48:	433fffff 	.word	0x433fffff
 8023d4c:	3ff00000 	.word	0x3ff00000
 8023d50:	3fefffff 	.word	0x3fefffff
 8023d54:	3fe00000 	.word	0x3fe00000
 8023d58:	41e00000 	.word	0x41e00000
 8023d5c:	4b60      	ldr	r3, [pc, #384]	; (8023ee0 <__ieee754_pow+0x3f0>)
 8023d5e:	2200      	movs	r2, #0
 8023d60:	f7dc fa92 	bl	8000288 <__aeabi_dsub>
 8023d64:	a354      	add	r3, pc, #336	; (adr r3, 8023eb8 <__ieee754_pow+0x3c8>)
 8023d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d6a:	4604      	mov	r4, r0
 8023d6c:	460d      	mov	r5, r1
 8023d6e:	f7dc fc43 	bl	80005f8 <__aeabi_dmul>
 8023d72:	a353      	add	r3, pc, #332	; (adr r3, 8023ec0 <__ieee754_pow+0x3d0>)
 8023d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d78:	4606      	mov	r6, r0
 8023d7a:	460f      	mov	r7, r1
 8023d7c:	4620      	mov	r0, r4
 8023d7e:	4629      	mov	r1, r5
 8023d80:	f7dc fc3a 	bl	80005f8 <__aeabi_dmul>
 8023d84:	4b57      	ldr	r3, [pc, #348]	; (8023ee4 <__ieee754_pow+0x3f4>)
 8023d86:	4682      	mov	sl, r0
 8023d88:	468b      	mov	fp, r1
 8023d8a:	2200      	movs	r2, #0
 8023d8c:	4620      	mov	r0, r4
 8023d8e:	4629      	mov	r1, r5
 8023d90:	f7dc fc32 	bl	80005f8 <__aeabi_dmul>
 8023d94:	4602      	mov	r2, r0
 8023d96:	460b      	mov	r3, r1
 8023d98:	a14b      	add	r1, pc, #300	; (adr r1, 8023ec8 <__ieee754_pow+0x3d8>)
 8023d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d9e:	f7dc fa73 	bl	8000288 <__aeabi_dsub>
 8023da2:	4622      	mov	r2, r4
 8023da4:	462b      	mov	r3, r5
 8023da6:	f7dc fc27 	bl	80005f8 <__aeabi_dmul>
 8023daa:	4602      	mov	r2, r0
 8023dac:	460b      	mov	r3, r1
 8023dae:	2000      	movs	r0, #0
 8023db0:	494d      	ldr	r1, [pc, #308]	; (8023ee8 <__ieee754_pow+0x3f8>)
 8023db2:	f7dc fa69 	bl	8000288 <__aeabi_dsub>
 8023db6:	4622      	mov	r2, r4
 8023db8:	4680      	mov	r8, r0
 8023dba:	4689      	mov	r9, r1
 8023dbc:	462b      	mov	r3, r5
 8023dbe:	4620      	mov	r0, r4
 8023dc0:	4629      	mov	r1, r5
 8023dc2:	f7dc fc19 	bl	80005f8 <__aeabi_dmul>
 8023dc6:	4602      	mov	r2, r0
 8023dc8:	460b      	mov	r3, r1
 8023dca:	4640      	mov	r0, r8
 8023dcc:	4649      	mov	r1, r9
 8023dce:	f7dc fc13 	bl	80005f8 <__aeabi_dmul>
 8023dd2:	a33f      	add	r3, pc, #252	; (adr r3, 8023ed0 <__ieee754_pow+0x3e0>)
 8023dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dd8:	f7dc fc0e 	bl	80005f8 <__aeabi_dmul>
 8023ddc:	4602      	mov	r2, r0
 8023dde:	460b      	mov	r3, r1
 8023de0:	4650      	mov	r0, sl
 8023de2:	4659      	mov	r1, fp
 8023de4:	f7dc fa50 	bl	8000288 <__aeabi_dsub>
 8023de8:	4602      	mov	r2, r0
 8023dea:	460b      	mov	r3, r1
 8023dec:	4680      	mov	r8, r0
 8023dee:	4689      	mov	r9, r1
 8023df0:	4630      	mov	r0, r6
 8023df2:	4639      	mov	r1, r7
 8023df4:	f7dc fa4a 	bl	800028c <__adddf3>
 8023df8:	2000      	movs	r0, #0
 8023dfa:	4632      	mov	r2, r6
 8023dfc:	463b      	mov	r3, r7
 8023dfe:	4604      	mov	r4, r0
 8023e00:	460d      	mov	r5, r1
 8023e02:	f7dc fa41 	bl	8000288 <__aeabi_dsub>
 8023e06:	4602      	mov	r2, r0
 8023e08:	460b      	mov	r3, r1
 8023e0a:	4640      	mov	r0, r8
 8023e0c:	4649      	mov	r1, r9
 8023e0e:	f7dc fa3b 	bl	8000288 <__aeabi_dsub>
 8023e12:	9b04      	ldr	r3, [sp, #16]
 8023e14:	9a06      	ldr	r2, [sp, #24]
 8023e16:	3b01      	subs	r3, #1
 8023e18:	4313      	orrs	r3, r2
 8023e1a:	4682      	mov	sl, r0
 8023e1c:	468b      	mov	fp, r1
 8023e1e:	f040 81e7 	bne.w	80241f0 <__ieee754_pow+0x700>
 8023e22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8023ed8 <__ieee754_pow+0x3e8>
 8023e26:	eeb0 8a47 	vmov.f32	s16, s14
 8023e2a:	eef0 8a67 	vmov.f32	s17, s15
 8023e2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8023e32:	2600      	movs	r6, #0
 8023e34:	4632      	mov	r2, r6
 8023e36:	463b      	mov	r3, r7
 8023e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023e3c:	f7dc fa24 	bl	8000288 <__aeabi_dsub>
 8023e40:	4622      	mov	r2, r4
 8023e42:	462b      	mov	r3, r5
 8023e44:	f7dc fbd8 	bl	80005f8 <__aeabi_dmul>
 8023e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023e4c:	4680      	mov	r8, r0
 8023e4e:	4689      	mov	r9, r1
 8023e50:	4650      	mov	r0, sl
 8023e52:	4659      	mov	r1, fp
 8023e54:	f7dc fbd0 	bl	80005f8 <__aeabi_dmul>
 8023e58:	4602      	mov	r2, r0
 8023e5a:	460b      	mov	r3, r1
 8023e5c:	4640      	mov	r0, r8
 8023e5e:	4649      	mov	r1, r9
 8023e60:	f7dc fa14 	bl	800028c <__adddf3>
 8023e64:	4632      	mov	r2, r6
 8023e66:	463b      	mov	r3, r7
 8023e68:	4680      	mov	r8, r0
 8023e6a:	4689      	mov	r9, r1
 8023e6c:	4620      	mov	r0, r4
 8023e6e:	4629      	mov	r1, r5
 8023e70:	f7dc fbc2 	bl	80005f8 <__aeabi_dmul>
 8023e74:	460b      	mov	r3, r1
 8023e76:	4604      	mov	r4, r0
 8023e78:	460d      	mov	r5, r1
 8023e7a:	4602      	mov	r2, r0
 8023e7c:	4649      	mov	r1, r9
 8023e7e:	4640      	mov	r0, r8
 8023e80:	f7dc fa04 	bl	800028c <__adddf3>
 8023e84:	4b19      	ldr	r3, [pc, #100]	; (8023eec <__ieee754_pow+0x3fc>)
 8023e86:	4299      	cmp	r1, r3
 8023e88:	ec45 4b19 	vmov	d9, r4, r5
 8023e8c:	4606      	mov	r6, r0
 8023e8e:	460f      	mov	r7, r1
 8023e90:	468b      	mov	fp, r1
 8023e92:	f340 82f1 	ble.w	8024478 <__ieee754_pow+0x988>
 8023e96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023e9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023e9e:	4303      	orrs	r3, r0
 8023ea0:	f000 81e4 	beq.w	802426c <__ieee754_pow+0x77c>
 8023ea4:	ec51 0b18 	vmov	r0, r1, d8
 8023ea8:	2200      	movs	r2, #0
 8023eaa:	2300      	movs	r3, #0
 8023eac:	f7dc fe16 	bl	8000adc <__aeabi_dcmplt>
 8023eb0:	3800      	subs	r0, #0
 8023eb2:	bf18      	it	ne
 8023eb4:	2001      	movne	r0, #1
 8023eb6:	e72b      	b.n	8023d10 <__ieee754_pow+0x220>
 8023eb8:	60000000 	.word	0x60000000
 8023ebc:	3ff71547 	.word	0x3ff71547
 8023ec0:	f85ddf44 	.word	0xf85ddf44
 8023ec4:	3e54ae0b 	.word	0x3e54ae0b
 8023ec8:	55555555 	.word	0x55555555
 8023ecc:	3fd55555 	.word	0x3fd55555
 8023ed0:	652b82fe 	.word	0x652b82fe
 8023ed4:	3ff71547 	.word	0x3ff71547
 8023ed8:	00000000 	.word	0x00000000
 8023edc:	bff00000 	.word	0xbff00000
 8023ee0:	3ff00000 	.word	0x3ff00000
 8023ee4:	3fd00000 	.word	0x3fd00000
 8023ee8:	3fe00000 	.word	0x3fe00000
 8023eec:	408fffff 	.word	0x408fffff
 8023ef0:	4bd5      	ldr	r3, [pc, #852]	; (8024248 <__ieee754_pow+0x758>)
 8023ef2:	402b      	ands	r3, r5
 8023ef4:	2200      	movs	r2, #0
 8023ef6:	b92b      	cbnz	r3, 8023f04 <__ieee754_pow+0x414>
 8023ef8:	4bd4      	ldr	r3, [pc, #848]	; (802424c <__ieee754_pow+0x75c>)
 8023efa:	f7dc fb7d 	bl	80005f8 <__aeabi_dmul>
 8023efe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8023f02:	460c      	mov	r4, r1
 8023f04:	1523      	asrs	r3, r4, #20
 8023f06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023f0a:	4413      	add	r3, r2
 8023f0c:	9305      	str	r3, [sp, #20]
 8023f0e:	4bd0      	ldr	r3, [pc, #832]	; (8024250 <__ieee754_pow+0x760>)
 8023f10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023f14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8023f18:	429c      	cmp	r4, r3
 8023f1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023f1e:	dd08      	ble.n	8023f32 <__ieee754_pow+0x442>
 8023f20:	4bcc      	ldr	r3, [pc, #816]	; (8024254 <__ieee754_pow+0x764>)
 8023f22:	429c      	cmp	r4, r3
 8023f24:	f340 8162 	ble.w	80241ec <__ieee754_pow+0x6fc>
 8023f28:	9b05      	ldr	r3, [sp, #20]
 8023f2a:	3301      	adds	r3, #1
 8023f2c:	9305      	str	r3, [sp, #20]
 8023f2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023f32:	2400      	movs	r4, #0
 8023f34:	00e3      	lsls	r3, r4, #3
 8023f36:	9307      	str	r3, [sp, #28]
 8023f38:	4bc7      	ldr	r3, [pc, #796]	; (8024258 <__ieee754_pow+0x768>)
 8023f3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023f3e:	ed93 7b00 	vldr	d7, [r3]
 8023f42:	4629      	mov	r1, r5
 8023f44:	ec53 2b17 	vmov	r2, r3, d7
 8023f48:	eeb0 9a47 	vmov.f32	s18, s14
 8023f4c:	eef0 9a67 	vmov.f32	s19, s15
 8023f50:	4682      	mov	sl, r0
 8023f52:	f7dc f999 	bl	8000288 <__aeabi_dsub>
 8023f56:	4652      	mov	r2, sl
 8023f58:	4606      	mov	r6, r0
 8023f5a:	460f      	mov	r7, r1
 8023f5c:	462b      	mov	r3, r5
 8023f5e:	ec51 0b19 	vmov	r0, r1, d9
 8023f62:	f7dc f993 	bl	800028c <__adddf3>
 8023f66:	4602      	mov	r2, r0
 8023f68:	460b      	mov	r3, r1
 8023f6a:	2000      	movs	r0, #0
 8023f6c:	49bb      	ldr	r1, [pc, #748]	; (802425c <__ieee754_pow+0x76c>)
 8023f6e:	f7dc fc6d 	bl	800084c <__aeabi_ddiv>
 8023f72:	ec41 0b1a 	vmov	d10, r0, r1
 8023f76:	4602      	mov	r2, r0
 8023f78:	460b      	mov	r3, r1
 8023f7a:	4630      	mov	r0, r6
 8023f7c:	4639      	mov	r1, r7
 8023f7e:	f7dc fb3b 	bl	80005f8 <__aeabi_dmul>
 8023f82:	2300      	movs	r3, #0
 8023f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023f88:	9302      	str	r3, [sp, #8]
 8023f8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8023f8e:	46ab      	mov	fp, r5
 8023f90:	106d      	asrs	r5, r5, #1
 8023f92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023f96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023f9a:	ec41 0b18 	vmov	d8, r0, r1
 8023f9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8023fa2:	2200      	movs	r2, #0
 8023fa4:	4640      	mov	r0, r8
 8023fa6:	4649      	mov	r1, r9
 8023fa8:	4614      	mov	r4, r2
 8023faa:	461d      	mov	r5, r3
 8023fac:	f7dc fb24 	bl	80005f8 <__aeabi_dmul>
 8023fb0:	4602      	mov	r2, r0
 8023fb2:	460b      	mov	r3, r1
 8023fb4:	4630      	mov	r0, r6
 8023fb6:	4639      	mov	r1, r7
 8023fb8:	f7dc f966 	bl	8000288 <__aeabi_dsub>
 8023fbc:	ec53 2b19 	vmov	r2, r3, d9
 8023fc0:	4606      	mov	r6, r0
 8023fc2:	460f      	mov	r7, r1
 8023fc4:	4620      	mov	r0, r4
 8023fc6:	4629      	mov	r1, r5
 8023fc8:	f7dc f95e 	bl	8000288 <__aeabi_dsub>
 8023fcc:	4602      	mov	r2, r0
 8023fce:	460b      	mov	r3, r1
 8023fd0:	4650      	mov	r0, sl
 8023fd2:	4659      	mov	r1, fp
 8023fd4:	f7dc f958 	bl	8000288 <__aeabi_dsub>
 8023fd8:	4642      	mov	r2, r8
 8023fda:	464b      	mov	r3, r9
 8023fdc:	f7dc fb0c 	bl	80005f8 <__aeabi_dmul>
 8023fe0:	4602      	mov	r2, r0
 8023fe2:	460b      	mov	r3, r1
 8023fe4:	4630      	mov	r0, r6
 8023fe6:	4639      	mov	r1, r7
 8023fe8:	f7dc f94e 	bl	8000288 <__aeabi_dsub>
 8023fec:	ec53 2b1a 	vmov	r2, r3, d10
 8023ff0:	f7dc fb02 	bl	80005f8 <__aeabi_dmul>
 8023ff4:	ec53 2b18 	vmov	r2, r3, d8
 8023ff8:	ec41 0b19 	vmov	d9, r0, r1
 8023ffc:	ec51 0b18 	vmov	r0, r1, d8
 8024000:	f7dc fafa 	bl	80005f8 <__aeabi_dmul>
 8024004:	a37c      	add	r3, pc, #496	; (adr r3, 80241f8 <__ieee754_pow+0x708>)
 8024006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802400a:	4604      	mov	r4, r0
 802400c:	460d      	mov	r5, r1
 802400e:	f7dc faf3 	bl	80005f8 <__aeabi_dmul>
 8024012:	a37b      	add	r3, pc, #492	; (adr r3, 8024200 <__ieee754_pow+0x710>)
 8024014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024018:	f7dc f938 	bl	800028c <__adddf3>
 802401c:	4622      	mov	r2, r4
 802401e:	462b      	mov	r3, r5
 8024020:	f7dc faea 	bl	80005f8 <__aeabi_dmul>
 8024024:	a378      	add	r3, pc, #480	; (adr r3, 8024208 <__ieee754_pow+0x718>)
 8024026:	e9d3 2300 	ldrd	r2, r3, [r3]
 802402a:	f7dc f92f 	bl	800028c <__adddf3>
 802402e:	4622      	mov	r2, r4
 8024030:	462b      	mov	r3, r5
 8024032:	f7dc fae1 	bl	80005f8 <__aeabi_dmul>
 8024036:	a376      	add	r3, pc, #472	; (adr r3, 8024210 <__ieee754_pow+0x720>)
 8024038:	e9d3 2300 	ldrd	r2, r3, [r3]
 802403c:	f7dc f926 	bl	800028c <__adddf3>
 8024040:	4622      	mov	r2, r4
 8024042:	462b      	mov	r3, r5
 8024044:	f7dc fad8 	bl	80005f8 <__aeabi_dmul>
 8024048:	a373      	add	r3, pc, #460	; (adr r3, 8024218 <__ieee754_pow+0x728>)
 802404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802404e:	f7dc f91d 	bl	800028c <__adddf3>
 8024052:	4622      	mov	r2, r4
 8024054:	462b      	mov	r3, r5
 8024056:	f7dc facf 	bl	80005f8 <__aeabi_dmul>
 802405a:	a371      	add	r3, pc, #452	; (adr r3, 8024220 <__ieee754_pow+0x730>)
 802405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024060:	f7dc f914 	bl	800028c <__adddf3>
 8024064:	4622      	mov	r2, r4
 8024066:	4606      	mov	r6, r0
 8024068:	460f      	mov	r7, r1
 802406a:	462b      	mov	r3, r5
 802406c:	4620      	mov	r0, r4
 802406e:	4629      	mov	r1, r5
 8024070:	f7dc fac2 	bl	80005f8 <__aeabi_dmul>
 8024074:	4602      	mov	r2, r0
 8024076:	460b      	mov	r3, r1
 8024078:	4630      	mov	r0, r6
 802407a:	4639      	mov	r1, r7
 802407c:	f7dc fabc 	bl	80005f8 <__aeabi_dmul>
 8024080:	4642      	mov	r2, r8
 8024082:	4604      	mov	r4, r0
 8024084:	460d      	mov	r5, r1
 8024086:	464b      	mov	r3, r9
 8024088:	ec51 0b18 	vmov	r0, r1, d8
 802408c:	f7dc f8fe 	bl	800028c <__adddf3>
 8024090:	ec53 2b19 	vmov	r2, r3, d9
 8024094:	f7dc fab0 	bl	80005f8 <__aeabi_dmul>
 8024098:	4622      	mov	r2, r4
 802409a:	462b      	mov	r3, r5
 802409c:	f7dc f8f6 	bl	800028c <__adddf3>
 80240a0:	4642      	mov	r2, r8
 80240a2:	4682      	mov	sl, r0
 80240a4:	468b      	mov	fp, r1
 80240a6:	464b      	mov	r3, r9
 80240a8:	4640      	mov	r0, r8
 80240aa:	4649      	mov	r1, r9
 80240ac:	f7dc faa4 	bl	80005f8 <__aeabi_dmul>
 80240b0:	4b6b      	ldr	r3, [pc, #428]	; (8024260 <__ieee754_pow+0x770>)
 80240b2:	2200      	movs	r2, #0
 80240b4:	4606      	mov	r6, r0
 80240b6:	460f      	mov	r7, r1
 80240b8:	f7dc f8e8 	bl	800028c <__adddf3>
 80240bc:	4652      	mov	r2, sl
 80240be:	465b      	mov	r3, fp
 80240c0:	f7dc f8e4 	bl	800028c <__adddf3>
 80240c4:	2000      	movs	r0, #0
 80240c6:	4604      	mov	r4, r0
 80240c8:	460d      	mov	r5, r1
 80240ca:	4602      	mov	r2, r0
 80240cc:	460b      	mov	r3, r1
 80240ce:	4640      	mov	r0, r8
 80240d0:	4649      	mov	r1, r9
 80240d2:	f7dc fa91 	bl	80005f8 <__aeabi_dmul>
 80240d6:	4b62      	ldr	r3, [pc, #392]	; (8024260 <__ieee754_pow+0x770>)
 80240d8:	4680      	mov	r8, r0
 80240da:	4689      	mov	r9, r1
 80240dc:	2200      	movs	r2, #0
 80240de:	4620      	mov	r0, r4
 80240e0:	4629      	mov	r1, r5
 80240e2:	f7dc f8d1 	bl	8000288 <__aeabi_dsub>
 80240e6:	4632      	mov	r2, r6
 80240e8:	463b      	mov	r3, r7
 80240ea:	f7dc f8cd 	bl	8000288 <__aeabi_dsub>
 80240ee:	4602      	mov	r2, r0
 80240f0:	460b      	mov	r3, r1
 80240f2:	4650      	mov	r0, sl
 80240f4:	4659      	mov	r1, fp
 80240f6:	f7dc f8c7 	bl	8000288 <__aeabi_dsub>
 80240fa:	ec53 2b18 	vmov	r2, r3, d8
 80240fe:	f7dc fa7b 	bl	80005f8 <__aeabi_dmul>
 8024102:	4622      	mov	r2, r4
 8024104:	4606      	mov	r6, r0
 8024106:	460f      	mov	r7, r1
 8024108:	462b      	mov	r3, r5
 802410a:	ec51 0b19 	vmov	r0, r1, d9
 802410e:	f7dc fa73 	bl	80005f8 <__aeabi_dmul>
 8024112:	4602      	mov	r2, r0
 8024114:	460b      	mov	r3, r1
 8024116:	4630      	mov	r0, r6
 8024118:	4639      	mov	r1, r7
 802411a:	f7dc f8b7 	bl	800028c <__adddf3>
 802411e:	4606      	mov	r6, r0
 8024120:	460f      	mov	r7, r1
 8024122:	4602      	mov	r2, r0
 8024124:	460b      	mov	r3, r1
 8024126:	4640      	mov	r0, r8
 8024128:	4649      	mov	r1, r9
 802412a:	f7dc f8af 	bl	800028c <__adddf3>
 802412e:	a33e      	add	r3, pc, #248	; (adr r3, 8024228 <__ieee754_pow+0x738>)
 8024130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024134:	2000      	movs	r0, #0
 8024136:	4604      	mov	r4, r0
 8024138:	460d      	mov	r5, r1
 802413a:	f7dc fa5d 	bl	80005f8 <__aeabi_dmul>
 802413e:	4642      	mov	r2, r8
 8024140:	ec41 0b18 	vmov	d8, r0, r1
 8024144:	464b      	mov	r3, r9
 8024146:	4620      	mov	r0, r4
 8024148:	4629      	mov	r1, r5
 802414a:	f7dc f89d 	bl	8000288 <__aeabi_dsub>
 802414e:	4602      	mov	r2, r0
 8024150:	460b      	mov	r3, r1
 8024152:	4630      	mov	r0, r6
 8024154:	4639      	mov	r1, r7
 8024156:	f7dc f897 	bl	8000288 <__aeabi_dsub>
 802415a:	a335      	add	r3, pc, #212	; (adr r3, 8024230 <__ieee754_pow+0x740>)
 802415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024160:	f7dc fa4a 	bl	80005f8 <__aeabi_dmul>
 8024164:	a334      	add	r3, pc, #208	; (adr r3, 8024238 <__ieee754_pow+0x748>)
 8024166:	e9d3 2300 	ldrd	r2, r3, [r3]
 802416a:	4606      	mov	r6, r0
 802416c:	460f      	mov	r7, r1
 802416e:	4620      	mov	r0, r4
 8024170:	4629      	mov	r1, r5
 8024172:	f7dc fa41 	bl	80005f8 <__aeabi_dmul>
 8024176:	4602      	mov	r2, r0
 8024178:	460b      	mov	r3, r1
 802417a:	4630      	mov	r0, r6
 802417c:	4639      	mov	r1, r7
 802417e:	f7dc f885 	bl	800028c <__adddf3>
 8024182:	9a07      	ldr	r2, [sp, #28]
 8024184:	4b37      	ldr	r3, [pc, #220]	; (8024264 <__ieee754_pow+0x774>)
 8024186:	4413      	add	r3, r2
 8024188:	e9d3 2300 	ldrd	r2, r3, [r3]
 802418c:	f7dc f87e 	bl	800028c <__adddf3>
 8024190:	4682      	mov	sl, r0
 8024192:	9805      	ldr	r0, [sp, #20]
 8024194:	468b      	mov	fp, r1
 8024196:	f7dc f9c5 	bl	8000524 <__aeabi_i2d>
 802419a:	9a07      	ldr	r2, [sp, #28]
 802419c:	4b32      	ldr	r3, [pc, #200]	; (8024268 <__ieee754_pow+0x778>)
 802419e:	4413      	add	r3, r2
 80241a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80241a4:	4606      	mov	r6, r0
 80241a6:	460f      	mov	r7, r1
 80241a8:	4652      	mov	r2, sl
 80241aa:	465b      	mov	r3, fp
 80241ac:	ec51 0b18 	vmov	r0, r1, d8
 80241b0:	f7dc f86c 	bl	800028c <__adddf3>
 80241b4:	4642      	mov	r2, r8
 80241b6:	464b      	mov	r3, r9
 80241b8:	f7dc f868 	bl	800028c <__adddf3>
 80241bc:	4632      	mov	r2, r6
 80241be:	463b      	mov	r3, r7
 80241c0:	f7dc f864 	bl	800028c <__adddf3>
 80241c4:	2000      	movs	r0, #0
 80241c6:	4632      	mov	r2, r6
 80241c8:	463b      	mov	r3, r7
 80241ca:	4604      	mov	r4, r0
 80241cc:	460d      	mov	r5, r1
 80241ce:	f7dc f85b 	bl	8000288 <__aeabi_dsub>
 80241d2:	4642      	mov	r2, r8
 80241d4:	464b      	mov	r3, r9
 80241d6:	f7dc f857 	bl	8000288 <__aeabi_dsub>
 80241da:	ec53 2b18 	vmov	r2, r3, d8
 80241de:	f7dc f853 	bl	8000288 <__aeabi_dsub>
 80241e2:	4602      	mov	r2, r0
 80241e4:	460b      	mov	r3, r1
 80241e6:	4650      	mov	r0, sl
 80241e8:	4659      	mov	r1, fp
 80241ea:	e610      	b.n	8023e0e <__ieee754_pow+0x31e>
 80241ec:	2401      	movs	r4, #1
 80241ee:	e6a1      	b.n	8023f34 <__ieee754_pow+0x444>
 80241f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8024240 <__ieee754_pow+0x750>
 80241f4:	e617      	b.n	8023e26 <__ieee754_pow+0x336>
 80241f6:	bf00      	nop
 80241f8:	4a454eef 	.word	0x4a454eef
 80241fc:	3fca7e28 	.word	0x3fca7e28
 8024200:	93c9db65 	.word	0x93c9db65
 8024204:	3fcd864a 	.word	0x3fcd864a
 8024208:	a91d4101 	.word	0xa91d4101
 802420c:	3fd17460 	.word	0x3fd17460
 8024210:	518f264d 	.word	0x518f264d
 8024214:	3fd55555 	.word	0x3fd55555
 8024218:	db6fabff 	.word	0xdb6fabff
 802421c:	3fdb6db6 	.word	0x3fdb6db6
 8024220:	33333303 	.word	0x33333303
 8024224:	3fe33333 	.word	0x3fe33333
 8024228:	e0000000 	.word	0xe0000000
 802422c:	3feec709 	.word	0x3feec709
 8024230:	dc3a03fd 	.word	0xdc3a03fd
 8024234:	3feec709 	.word	0x3feec709
 8024238:	145b01f5 	.word	0x145b01f5
 802423c:	be3e2fe0 	.word	0xbe3e2fe0
 8024240:	00000000 	.word	0x00000000
 8024244:	3ff00000 	.word	0x3ff00000
 8024248:	7ff00000 	.word	0x7ff00000
 802424c:	43400000 	.word	0x43400000
 8024250:	0003988e 	.word	0x0003988e
 8024254:	000bb679 	.word	0x000bb679
 8024258:	080263d8 	.word	0x080263d8
 802425c:	3ff00000 	.word	0x3ff00000
 8024260:	40080000 	.word	0x40080000
 8024264:	080263f8 	.word	0x080263f8
 8024268:	080263e8 	.word	0x080263e8
 802426c:	a3b5      	add	r3, pc, #724	; (adr r3, 8024544 <__ieee754_pow+0xa54>)
 802426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024272:	4640      	mov	r0, r8
 8024274:	4649      	mov	r1, r9
 8024276:	f7dc f809 	bl	800028c <__adddf3>
 802427a:	4622      	mov	r2, r4
 802427c:	ec41 0b1a 	vmov	d10, r0, r1
 8024280:	462b      	mov	r3, r5
 8024282:	4630      	mov	r0, r6
 8024284:	4639      	mov	r1, r7
 8024286:	f7db ffff 	bl	8000288 <__aeabi_dsub>
 802428a:	4602      	mov	r2, r0
 802428c:	460b      	mov	r3, r1
 802428e:	ec51 0b1a 	vmov	r0, r1, d10
 8024292:	f7dc fc41 	bl	8000b18 <__aeabi_dcmpgt>
 8024296:	2800      	cmp	r0, #0
 8024298:	f47f ae04 	bne.w	8023ea4 <__ieee754_pow+0x3b4>
 802429c:	4aa4      	ldr	r2, [pc, #656]	; (8024530 <__ieee754_pow+0xa40>)
 802429e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80242a2:	4293      	cmp	r3, r2
 80242a4:	f340 8108 	ble.w	80244b8 <__ieee754_pow+0x9c8>
 80242a8:	151b      	asrs	r3, r3, #20
 80242aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80242ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80242b2:	fa4a f303 	asr.w	r3, sl, r3
 80242b6:	445b      	add	r3, fp
 80242b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80242bc:	4e9d      	ldr	r6, [pc, #628]	; (8024534 <__ieee754_pow+0xa44>)
 80242be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80242c2:	4116      	asrs	r6, r2
 80242c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80242c8:	2000      	movs	r0, #0
 80242ca:	ea23 0106 	bic.w	r1, r3, r6
 80242ce:	f1c2 0214 	rsb	r2, r2, #20
 80242d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80242d6:	fa4a fa02 	asr.w	sl, sl, r2
 80242da:	f1bb 0f00 	cmp.w	fp, #0
 80242de:	4602      	mov	r2, r0
 80242e0:	460b      	mov	r3, r1
 80242e2:	4620      	mov	r0, r4
 80242e4:	4629      	mov	r1, r5
 80242e6:	bfb8      	it	lt
 80242e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80242ec:	f7db ffcc 	bl	8000288 <__aeabi_dsub>
 80242f0:	ec41 0b19 	vmov	d9, r0, r1
 80242f4:	4642      	mov	r2, r8
 80242f6:	464b      	mov	r3, r9
 80242f8:	ec51 0b19 	vmov	r0, r1, d9
 80242fc:	f7db ffc6 	bl	800028c <__adddf3>
 8024300:	a37b      	add	r3, pc, #492	; (adr r3, 80244f0 <__ieee754_pow+0xa00>)
 8024302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024306:	2000      	movs	r0, #0
 8024308:	4604      	mov	r4, r0
 802430a:	460d      	mov	r5, r1
 802430c:	f7dc f974 	bl	80005f8 <__aeabi_dmul>
 8024310:	ec53 2b19 	vmov	r2, r3, d9
 8024314:	4606      	mov	r6, r0
 8024316:	460f      	mov	r7, r1
 8024318:	4620      	mov	r0, r4
 802431a:	4629      	mov	r1, r5
 802431c:	f7db ffb4 	bl	8000288 <__aeabi_dsub>
 8024320:	4602      	mov	r2, r0
 8024322:	460b      	mov	r3, r1
 8024324:	4640      	mov	r0, r8
 8024326:	4649      	mov	r1, r9
 8024328:	f7db ffae 	bl	8000288 <__aeabi_dsub>
 802432c:	a372      	add	r3, pc, #456	; (adr r3, 80244f8 <__ieee754_pow+0xa08>)
 802432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024332:	f7dc f961 	bl	80005f8 <__aeabi_dmul>
 8024336:	a372      	add	r3, pc, #456	; (adr r3, 8024500 <__ieee754_pow+0xa10>)
 8024338:	e9d3 2300 	ldrd	r2, r3, [r3]
 802433c:	4680      	mov	r8, r0
 802433e:	4689      	mov	r9, r1
 8024340:	4620      	mov	r0, r4
 8024342:	4629      	mov	r1, r5
 8024344:	f7dc f958 	bl	80005f8 <__aeabi_dmul>
 8024348:	4602      	mov	r2, r0
 802434a:	460b      	mov	r3, r1
 802434c:	4640      	mov	r0, r8
 802434e:	4649      	mov	r1, r9
 8024350:	f7db ff9c 	bl	800028c <__adddf3>
 8024354:	4604      	mov	r4, r0
 8024356:	460d      	mov	r5, r1
 8024358:	4602      	mov	r2, r0
 802435a:	460b      	mov	r3, r1
 802435c:	4630      	mov	r0, r6
 802435e:	4639      	mov	r1, r7
 8024360:	f7db ff94 	bl	800028c <__adddf3>
 8024364:	4632      	mov	r2, r6
 8024366:	463b      	mov	r3, r7
 8024368:	4680      	mov	r8, r0
 802436a:	4689      	mov	r9, r1
 802436c:	f7db ff8c 	bl	8000288 <__aeabi_dsub>
 8024370:	4602      	mov	r2, r0
 8024372:	460b      	mov	r3, r1
 8024374:	4620      	mov	r0, r4
 8024376:	4629      	mov	r1, r5
 8024378:	f7db ff86 	bl	8000288 <__aeabi_dsub>
 802437c:	4642      	mov	r2, r8
 802437e:	4606      	mov	r6, r0
 8024380:	460f      	mov	r7, r1
 8024382:	464b      	mov	r3, r9
 8024384:	4640      	mov	r0, r8
 8024386:	4649      	mov	r1, r9
 8024388:	f7dc f936 	bl	80005f8 <__aeabi_dmul>
 802438c:	a35e      	add	r3, pc, #376	; (adr r3, 8024508 <__ieee754_pow+0xa18>)
 802438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024392:	4604      	mov	r4, r0
 8024394:	460d      	mov	r5, r1
 8024396:	f7dc f92f 	bl	80005f8 <__aeabi_dmul>
 802439a:	a35d      	add	r3, pc, #372	; (adr r3, 8024510 <__ieee754_pow+0xa20>)
 802439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a0:	f7db ff72 	bl	8000288 <__aeabi_dsub>
 80243a4:	4622      	mov	r2, r4
 80243a6:	462b      	mov	r3, r5
 80243a8:	f7dc f926 	bl	80005f8 <__aeabi_dmul>
 80243ac:	a35a      	add	r3, pc, #360	; (adr r3, 8024518 <__ieee754_pow+0xa28>)
 80243ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243b2:	f7db ff6b 	bl	800028c <__adddf3>
 80243b6:	4622      	mov	r2, r4
 80243b8:	462b      	mov	r3, r5
 80243ba:	f7dc f91d 	bl	80005f8 <__aeabi_dmul>
 80243be:	a358      	add	r3, pc, #352	; (adr r3, 8024520 <__ieee754_pow+0xa30>)
 80243c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243c4:	f7db ff60 	bl	8000288 <__aeabi_dsub>
 80243c8:	4622      	mov	r2, r4
 80243ca:	462b      	mov	r3, r5
 80243cc:	f7dc f914 	bl	80005f8 <__aeabi_dmul>
 80243d0:	a355      	add	r3, pc, #340	; (adr r3, 8024528 <__ieee754_pow+0xa38>)
 80243d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243d6:	f7db ff59 	bl	800028c <__adddf3>
 80243da:	4622      	mov	r2, r4
 80243dc:	462b      	mov	r3, r5
 80243de:	f7dc f90b 	bl	80005f8 <__aeabi_dmul>
 80243e2:	4602      	mov	r2, r0
 80243e4:	460b      	mov	r3, r1
 80243e6:	4640      	mov	r0, r8
 80243e8:	4649      	mov	r1, r9
 80243ea:	f7db ff4d 	bl	8000288 <__aeabi_dsub>
 80243ee:	4604      	mov	r4, r0
 80243f0:	460d      	mov	r5, r1
 80243f2:	4602      	mov	r2, r0
 80243f4:	460b      	mov	r3, r1
 80243f6:	4640      	mov	r0, r8
 80243f8:	4649      	mov	r1, r9
 80243fa:	f7dc f8fd 	bl	80005f8 <__aeabi_dmul>
 80243fe:	2200      	movs	r2, #0
 8024400:	ec41 0b19 	vmov	d9, r0, r1
 8024404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024408:	4620      	mov	r0, r4
 802440a:	4629      	mov	r1, r5
 802440c:	f7db ff3c 	bl	8000288 <__aeabi_dsub>
 8024410:	4602      	mov	r2, r0
 8024412:	460b      	mov	r3, r1
 8024414:	ec51 0b19 	vmov	r0, r1, d9
 8024418:	f7dc fa18 	bl	800084c <__aeabi_ddiv>
 802441c:	4632      	mov	r2, r6
 802441e:	4604      	mov	r4, r0
 8024420:	460d      	mov	r5, r1
 8024422:	463b      	mov	r3, r7
 8024424:	4640      	mov	r0, r8
 8024426:	4649      	mov	r1, r9
 8024428:	f7dc f8e6 	bl	80005f8 <__aeabi_dmul>
 802442c:	4632      	mov	r2, r6
 802442e:	463b      	mov	r3, r7
 8024430:	f7db ff2c 	bl	800028c <__adddf3>
 8024434:	4602      	mov	r2, r0
 8024436:	460b      	mov	r3, r1
 8024438:	4620      	mov	r0, r4
 802443a:	4629      	mov	r1, r5
 802443c:	f7db ff24 	bl	8000288 <__aeabi_dsub>
 8024440:	4642      	mov	r2, r8
 8024442:	464b      	mov	r3, r9
 8024444:	f7db ff20 	bl	8000288 <__aeabi_dsub>
 8024448:	460b      	mov	r3, r1
 802444a:	4602      	mov	r2, r0
 802444c:	493a      	ldr	r1, [pc, #232]	; (8024538 <__ieee754_pow+0xa48>)
 802444e:	2000      	movs	r0, #0
 8024450:	f7db ff1a 	bl	8000288 <__aeabi_dsub>
 8024454:	ec41 0b10 	vmov	d0, r0, r1
 8024458:	ee10 3a90 	vmov	r3, s1
 802445c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8024460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024464:	da2b      	bge.n	80244be <__ieee754_pow+0x9ce>
 8024466:	4650      	mov	r0, sl
 8024468:	f001 f84a 	bl	8025500 <scalbn>
 802446c:	ec51 0b10 	vmov	r0, r1, d0
 8024470:	ec53 2b18 	vmov	r2, r3, d8
 8024474:	f7ff bbed 	b.w	8023c52 <__ieee754_pow+0x162>
 8024478:	4b30      	ldr	r3, [pc, #192]	; (802453c <__ieee754_pow+0xa4c>)
 802447a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802447e:	429e      	cmp	r6, r3
 8024480:	f77f af0c 	ble.w	802429c <__ieee754_pow+0x7ac>
 8024484:	4b2e      	ldr	r3, [pc, #184]	; (8024540 <__ieee754_pow+0xa50>)
 8024486:	440b      	add	r3, r1
 8024488:	4303      	orrs	r3, r0
 802448a:	d009      	beq.n	80244a0 <__ieee754_pow+0x9b0>
 802448c:	ec51 0b18 	vmov	r0, r1, d8
 8024490:	2200      	movs	r2, #0
 8024492:	2300      	movs	r3, #0
 8024494:	f7dc fb22 	bl	8000adc <__aeabi_dcmplt>
 8024498:	3800      	subs	r0, #0
 802449a:	bf18      	it	ne
 802449c:	2001      	movne	r0, #1
 802449e:	e447      	b.n	8023d30 <__ieee754_pow+0x240>
 80244a0:	4622      	mov	r2, r4
 80244a2:	462b      	mov	r3, r5
 80244a4:	f7db fef0 	bl	8000288 <__aeabi_dsub>
 80244a8:	4642      	mov	r2, r8
 80244aa:	464b      	mov	r3, r9
 80244ac:	f7dc fb2a 	bl	8000b04 <__aeabi_dcmpge>
 80244b0:	2800      	cmp	r0, #0
 80244b2:	f43f aef3 	beq.w	802429c <__ieee754_pow+0x7ac>
 80244b6:	e7e9      	b.n	802448c <__ieee754_pow+0x99c>
 80244b8:	f04f 0a00 	mov.w	sl, #0
 80244bc:	e71a      	b.n	80242f4 <__ieee754_pow+0x804>
 80244be:	ec51 0b10 	vmov	r0, r1, d0
 80244c2:	4619      	mov	r1, r3
 80244c4:	e7d4      	b.n	8024470 <__ieee754_pow+0x980>
 80244c6:	491c      	ldr	r1, [pc, #112]	; (8024538 <__ieee754_pow+0xa48>)
 80244c8:	2000      	movs	r0, #0
 80244ca:	f7ff bb30 	b.w	8023b2e <__ieee754_pow+0x3e>
 80244ce:	2000      	movs	r0, #0
 80244d0:	2100      	movs	r1, #0
 80244d2:	f7ff bb2c 	b.w	8023b2e <__ieee754_pow+0x3e>
 80244d6:	4630      	mov	r0, r6
 80244d8:	4639      	mov	r1, r7
 80244da:	f7ff bb28 	b.w	8023b2e <__ieee754_pow+0x3e>
 80244de:	9204      	str	r2, [sp, #16]
 80244e0:	f7ff bb7a 	b.w	8023bd8 <__ieee754_pow+0xe8>
 80244e4:	2300      	movs	r3, #0
 80244e6:	f7ff bb64 	b.w	8023bb2 <__ieee754_pow+0xc2>
 80244ea:	bf00      	nop
 80244ec:	f3af 8000 	nop.w
 80244f0:	00000000 	.word	0x00000000
 80244f4:	3fe62e43 	.word	0x3fe62e43
 80244f8:	fefa39ef 	.word	0xfefa39ef
 80244fc:	3fe62e42 	.word	0x3fe62e42
 8024500:	0ca86c39 	.word	0x0ca86c39
 8024504:	be205c61 	.word	0xbe205c61
 8024508:	72bea4d0 	.word	0x72bea4d0
 802450c:	3e663769 	.word	0x3e663769
 8024510:	c5d26bf1 	.word	0xc5d26bf1
 8024514:	3ebbbd41 	.word	0x3ebbbd41
 8024518:	af25de2c 	.word	0xaf25de2c
 802451c:	3f11566a 	.word	0x3f11566a
 8024520:	16bebd93 	.word	0x16bebd93
 8024524:	3f66c16c 	.word	0x3f66c16c
 8024528:	5555553e 	.word	0x5555553e
 802452c:	3fc55555 	.word	0x3fc55555
 8024530:	3fe00000 	.word	0x3fe00000
 8024534:	000fffff 	.word	0x000fffff
 8024538:	3ff00000 	.word	0x3ff00000
 802453c:	4090cbff 	.word	0x4090cbff
 8024540:	3f6f3400 	.word	0x3f6f3400
 8024544:	652b82fe 	.word	0x652b82fe
 8024548:	3c971547 	.word	0x3c971547
 802454c:	00000000 	.word	0x00000000

08024550 <__ieee754_rem_pio2>:
 8024550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024554:	ed2d 8b02 	vpush	{d8}
 8024558:	ec55 4b10 	vmov	r4, r5, d0
 802455c:	4bca      	ldr	r3, [pc, #808]	; (8024888 <__ieee754_rem_pio2+0x338>)
 802455e:	b08b      	sub	sp, #44	; 0x2c
 8024560:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8024564:	4598      	cmp	r8, r3
 8024566:	4682      	mov	sl, r0
 8024568:	9502      	str	r5, [sp, #8]
 802456a:	dc08      	bgt.n	802457e <__ieee754_rem_pio2+0x2e>
 802456c:	2200      	movs	r2, #0
 802456e:	2300      	movs	r3, #0
 8024570:	ed80 0b00 	vstr	d0, [r0]
 8024574:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8024578:	f04f 0b00 	mov.w	fp, #0
 802457c:	e028      	b.n	80245d0 <__ieee754_rem_pio2+0x80>
 802457e:	4bc3      	ldr	r3, [pc, #780]	; (802488c <__ieee754_rem_pio2+0x33c>)
 8024580:	4598      	cmp	r8, r3
 8024582:	dc78      	bgt.n	8024676 <__ieee754_rem_pio2+0x126>
 8024584:	9b02      	ldr	r3, [sp, #8]
 8024586:	4ec2      	ldr	r6, [pc, #776]	; (8024890 <__ieee754_rem_pio2+0x340>)
 8024588:	2b00      	cmp	r3, #0
 802458a:	ee10 0a10 	vmov	r0, s0
 802458e:	a3b0      	add	r3, pc, #704	; (adr r3, 8024850 <__ieee754_rem_pio2+0x300>)
 8024590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024594:	4629      	mov	r1, r5
 8024596:	dd39      	ble.n	802460c <__ieee754_rem_pio2+0xbc>
 8024598:	f7db fe76 	bl	8000288 <__aeabi_dsub>
 802459c:	45b0      	cmp	r8, r6
 802459e:	4604      	mov	r4, r0
 80245a0:	460d      	mov	r5, r1
 80245a2:	d01b      	beq.n	80245dc <__ieee754_rem_pio2+0x8c>
 80245a4:	a3ac      	add	r3, pc, #688	; (adr r3, 8024858 <__ieee754_rem_pio2+0x308>)
 80245a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245aa:	f7db fe6d 	bl	8000288 <__aeabi_dsub>
 80245ae:	4602      	mov	r2, r0
 80245b0:	460b      	mov	r3, r1
 80245b2:	e9ca 2300 	strd	r2, r3, [sl]
 80245b6:	4620      	mov	r0, r4
 80245b8:	4629      	mov	r1, r5
 80245ba:	f7db fe65 	bl	8000288 <__aeabi_dsub>
 80245be:	a3a6      	add	r3, pc, #664	; (adr r3, 8024858 <__ieee754_rem_pio2+0x308>)
 80245c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245c4:	f7db fe60 	bl	8000288 <__aeabi_dsub>
 80245c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80245cc:	f04f 0b01 	mov.w	fp, #1
 80245d0:	4658      	mov	r0, fp
 80245d2:	b00b      	add	sp, #44	; 0x2c
 80245d4:	ecbd 8b02 	vpop	{d8}
 80245d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8024860 <__ieee754_rem_pio2+0x310>)
 80245de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245e2:	f7db fe51 	bl	8000288 <__aeabi_dsub>
 80245e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8024868 <__ieee754_rem_pio2+0x318>)
 80245e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245ec:	4604      	mov	r4, r0
 80245ee:	460d      	mov	r5, r1
 80245f0:	f7db fe4a 	bl	8000288 <__aeabi_dsub>
 80245f4:	4602      	mov	r2, r0
 80245f6:	460b      	mov	r3, r1
 80245f8:	e9ca 2300 	strd	r2, r3, [sl]
 80245fc:	4620      	mov	r0, r4
 80245fe:	4629      	mov	r1, r5
 8024600:	f7db fe42 	bl	8000288 <__aeabi_dsub>
 8024604:	a398      	add	r3, pc, #608	; (adr r3, 8024868 <__ieee754_rem_pio2+0x318>)
 8024606:	e9d3 2300 	ldrd	r2, r3, [r3]
 802460a:	e7db      	b.n	80245c4 <__ieee754_rem_pio2+0x74>
 802460c:	f7db fe3e 	bl	800028c <__adddf3>
 8024610:	45b0      	cmp	r8, r6
 8024612:	4604      	mov	r4, r0
 8024614:	460d      	mov	r5, r1
 8024616:	d016      	beq.n	8024646 <__ieee754_rem_pio2+0xf6>
 8024618:	a38f      	add	r3, pc, #572	; (adr r3, 8024858 <__ieee754_rem_pio2+0x308>)
 802461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802461e:	f7db fe35 	bl	800028c <__adddf3>
 8024622:	4602      	mov	r2, r0
 8024624:	460b      	mov	r3, r1
 8024626:	e9ca 2300 	strd	r2, r3, [sl]
 802462a:	4620      	mov	r0, r4
 802462c:	4629      	mov	r1, r5
 802462e:	f7db fe2b 	bl	8000288 <__aeabi_dsub>
 8024632:	a389      	add	r3, pc, #548	; (adr r3, 8024858 <__ieee754_rem_pio2+0x308>)
 8024634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024638:	f7db fe28 	bl	800028c <__adddf3>
 802463c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8024640:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024644:	e7c4      	b.n	80245d0 <__ieee754_rem_pio2+0x80>
 8024646:	a386      	add	r3, pc, #536	; (adr r3, 8024860 <__ieee754_rem_pio2+0x310>)
 8024648:	e9d3 2300 	ldrd	r2, r3, [r3]
 802464c:	f7db fe1e 	bl	800028c <__adddf3>
 8024650:	a385      	add	r3, pc, #532	; (adr r3, 8024868 <__ieee754_rem_pio2+0x318>)
 8024652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024656:	4604      	mov	r4, r0
 8024658:	460d      	mov	r5, r1
 802465a:	f7db fe17 	bl	800028c <__adddf3>
 802465e:	4602      	mov	r2, r0
 8024660:	460b      	mov	r3, r1
 8024662:	e9ca 2300 	strd	r2, r3, [sl]
 8024666:	4620      	mov	r0, r4
 8024668:	4629      	mov	r1, r5
 802466a:	f7db fe0d 	bl	8000288 <__aeabi_dsub>
 802466e:	a37e      	add	r3, pc, #504	; (adr r3, 8024868 <__ieee754_rem_pio2+0x318>)
 8024670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024674:	e7e0      	b.n	8024638 <__ieee754_rem_pio2+0xe8>
 8024676:	4b87      	ldr	r3, [pc, #540]	; (8024894 <__ieee754_rem_pio2+0x344>)
 8024678:	4598      	cmp	r8, r3
 802467a:	f300 80d9 	bgt.w	8024830 <__ieee754_rem_pio2+0x2e0>
 802467e:	f7fe fd83 	bl	8023188 <fabs>
 8024682:	ec55 4b10 	vmov	r4, r5, d0
 8024686:	ee10 0a10 	vmov	r0, s0
 802468a:	a379      	add	r3, pc, #484	; (adr r3, 8024870 <__ieee754_rem_pio2+0x320>)
 802468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024690:	4629      	mov	r1, r5
 8024692:	f7db ffb1 	bl	80005f8 <__aeabi_dmul>
 8024696:	4b80      	ldr	r3, [pc, #512]	; (8024898 <__ieee754_rem_pio2+0x348>)
 8024698:	2200      	movs	r2, #0
 802469a:	f7db fdf7 	bl	800028c <__adddf3>
 802469e:	f7dc fa5b 	bl	8000b58 <__aeabi_d2iz>
 80246a2:	4683      	mov	fp, r0
 80246a4:	f7db ff3e 	bl	8000524 <__aeabi_i2d>
 80246a8:	4602      	mov	r2, r0
 80246aa:	460b      	mov	r3, r1
 80246ac:	ec43 2b18 	vmov	d8, r2, r3
 80246b0:	a367      	add	r3, pc, #412	; (adr r3, 8024850 <__ieee754_rem_pio2+0x300>)
 80246b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246b6:	f7db ff9f 	bl	80005f8 <__aeabi_dmul>
 80246ba:	4602      	mov	r2, r0
 80246bc:	460b      	mov	r3, r1
 80246be:	4620      	mov	r0, r4
 80246c0:	4629      	mov	r1, r5
 80246c2:	f7db fde1 	bl	8000288 <__aeabi_dsub>
 80246c6:	a364      	add	r3, pc, #400	; (adr r3, 8024858 <__ieee754_rem_pio2+0x308>)
 80246c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246cc:	4606      	mov	r6, r0
 80246ce:	460f      	mov	r7, r1
 80246d0:	ec51 0b18 	vmov	r0, r1, d8
 80246d4:	f7db ff90 	bl	80005f8 <__aeabi_dmul>
 80246d8:	f1bb 0f1f 	cmp.w	fp, #31
 80246dc:	4604      	mov	r4, r0
 80246de:	460d      	mov	r5, r1
 80246e0:	dc0d      	bgt.n	80246fe <__ieee754_rem_pio2+0x1ae>
 80246e2:	4b6e      	ldr	r3, [pc, #440]	; (802489c <__ieee754_rem_pio2+0x34c>)
 80246e4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80246e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80246ec:	4543      	cmp	r3, r8
 80246ee:	d006      	beq.n	80246fe <__ieee754_rem_pio2+0x1ae>
 80246f0:	4622      	mov	r2, r4
 80246f2:	462b      	mov	r3, r5
 80246f4:	4630      	mov	r0, r6
 80246f6:	4639      	mov	r1, r7
 80246f8:	f7db fdc6 	bl	8000288 <__aeabi_dsub>
 80246fc:	e00f      	b.n	802471e <__ieee754_rem_pio2+0x1ce>
 80246fe:	462b      	mov	r3, r5
 8024700:	4622      	mov	r2, r4
 8024702:	4630      	mov	r0, r6
 8024704:	4639      	mov	r1, r7
 8024706:	f7db fdbf 	bl	8000288 <__aeabi_dsub>
 802470a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802470e:	9303      	str	r3, [sp, #12]
 8024710:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024714:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8024718:	f1b8 0f10 	cmp.w	r8, #16
 802471c:	dc02      	bgt.n	8024724 <__ieee754_rem_pio2+0x1d4>
 802471e:	e9ca 0100 	strd	r0, r1, [sl]
 8024722:	e039      	b.n	8024798 <__ieee754_rem_pio2+0x248>
 8024724:	a34e      	add	r3, pc, #312	; (adr r3, 8024860 <__ieee754_rem_pio2+0x310>)
 8024726:	e9d3 2300 	ldrd	r2, r3, [r3]
 802472a:	ec51 0b18 	vmov	r0, r1, d8
 802472e:	f7db ff63 	bl	80005f8 <__aeabi_dmul>
 8024732:	4604      	mov	r4, r0
 8024734:	460d      	mov	r5, r1
 8024736:	4602      	mov	r2, r0
 8024738:	460b      	mov	r3, r1
 802473a:	4630      	mov	r0, r6
 802473c:	4639      	mov	r1, r7
 802473e:	f7db fda3 	bl	8000288 <__aeabi_dsub>
 8024742:	4602      	mov	r2, r0
 8024744:	460b      	mov	r3, r1
 8024746:	4680      	mov	r8, r0
 8024748:	4689      	mov	r9, r1
 802474a:	4630      	mov	r0, r6
 802474c:	4639      	mov	r1, r7
 802474e:	f7db fd9b 	bl	8000288 <__aeabi_dsub>
 8024752:	4622      	mov	r2, r4
 8024754:	462b      	mov	r3, r5
 8024756:	f7db fd97 	bl	8000288 <__aeabi_dsub>
 802475a:	a343      	add	r3, pc, #268	; (adr r3, 8024868 <__ieee754_rem_pio2+0x318>)
 802475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024760:	4604      	mov	r4, r0
 8024762:	460d      	mov	r5, r1
 8024764:	ec51 0b18 	vmov	r0, r1, d8
 8024768:	f7db ff46 	bl	80005f8 <__aeabi_dmul>
 802476c:	4622      	mov	r2, r4
 802476e:	462b      	mov	r3, r5
 8024770:	f7db fd8a 	bl	8000288 <__aeabi_dsub>
 8024774:	4602      	mov	r2, r0
 8024776:	460b      	mov	r3, r1
 8024778:	4604      	mov	r4, r0
 802477a:	460d      	mov	r5, r1
 802477c:	4640      	mov	r0, r8
 802477e:	4649      	mov	r1, r9
 8024780:	f7db fd82 	bl	8000288 <__aeabi_dsub>
 8024784:	9a03      	ldr	r2, [sp, #12]
 8024786:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802478a:	1ad3      	subs	r3, r2, r3
 802478c:	2b31      	cmp	r3, #49	; 0x31
 802478e:	dc24      	bgt.n	80247da <__ieee754_rem_pio2+0x28a>
 8024790:	e9ca 0100 	strd	r0, r1, [sl]
 8024794:	4646      	mov	r6, r8
 8024796:	464f      	mov	r7, r9
 8024798:	e9da 8900 	ldrd	r8, r9, [sl]
 802479c:	4630      	mov	r0, r6
 802479e:	4642      	mov	r2, r8
 80247a0:	464b      	mov	r3, r9
 80247a2:	4639      	mov	r1, r7
 80247a4:	f7db fd70 	bl	8000288 <__aeabi_dsub>
 80247a8:	462b      	mov	r3, r5
 80247aa:	4622      	mov	r2, r4
 80247ac:	f7db fd6c 	bl	8000288 <__aeabi_dsub>
 80247b0:	9b02      	ldr	r3, [sp, #8]
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80247b8:	f6bf af0a 	bge.w	80245d0 <__ieee754_rem_pio2+0x80>
 80247bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80247c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80247c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80247c8:	f8ca 8000 	str.w	r8, [sl]
 80247cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80247d0:	f8ca 300c 	str.w	r3, [sl, #12]
 80247d4:	f1cb 0b00 	rsb	fp, fp, #0
 80247d8:	e6fa      	b.n	80245d0 <__ieee754_rem_pio2+0x80>
 80247da:	a327      	add	r3, pc, #156	; (adr r3, 8024878 <__ieee754_rem_pio2+0x328>)
 80247dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247e0:	ec51 0b18 	vmov	r0, r1, d8
 80247e4:	f7db ff08 	bl	80005f8 <__aeabi_dmul>
 80247e8:	4604      	mov	r4, r0
 80247ea:	460d      	mov	r5, r1
 80247ec:	4602      	mov	r2, r0
 80247ee:	460b      	mov	r3, r1
 80247f0:	4640      	mov	r0, r8
 80247f2:	4649      	mov	r1, r9
 80247f4:	f7db fd48 	bl	8000288 <__aeabi_dsub>
 80247f8:	4602      	mov	r2, r0
 80247fa:	460b      	mov	r3, r1
 80247fc:	4606      	mov	r6, r0
 80247fe:	460f      	mov	r7, r1
 8024800:	4640      	mov	r0, r8
 8024802:	4649      	mov	r1, r9
 8024804:	f7db fd40 	bl	8000288 <__aeabi_dsub>
 8024808:	4622      	mov	r2, r4
 802480a:	462b      	mov	r3, r5
 802480c:	f7db fd3c 	bl	8000288 <__aeabi_dsub>
 8024810:	a31b      	add	r3, pc, #108	; (adr r3, 8024880 <__ieee754_rem_pio2+0x330>)
 8024812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024816:	4604      	mov	r4, r0
 8024818:	460d      	mov	r5, r1
 802481a:	ec51 0b18 	vmov	r0, r1, d8
 802481e:	f7db feeb 	bl	80005f8 <__aeabi_dmul>
 8024822:	4622      	mov	r2, r4
 8024824:	462b      	mov	r3, r5
 8024826:	f7db fd2f 	bl	8000288 <__aeabi_dsub>
 802482a:	4604      	mov	r4, r0
 802482c:	460d      	mov	r5, r1
 802482e:	e75f      	b.n	80246f0 <__ieee754_rem_pio2+0x1a0>
 8024830:	4b1b      	ldr	r3, [pc, #108]	; (80248a0 <__ieee754_rem_pio2+0x350>)
 8024832:	4598      	cmp	r8, r3
 8024834:	dd36      	ble.n	80248a4 <__ieee754_rem_pio2+0x354>
 8024836:	ee10 2a10 	vmov	r2, s0
 802483a:	462b      	mov	r3, r5
 802483c:	4620      	mov	r0, r4
 802483e:	4629      	mov	r1, r5
 8024840:	f7db fd22 	bl	8000288 <__aeabi_dsub>
 8024844:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024848:	e9ca 0100 	strd	r0, r1, [sl]
 802484c:	e694      	b.n	8024578 <__ieee754_rem_pio2+0x28>
 802484e:	bf00      	nop
 8024850:	54400000 	.word	0x54400000
 8024854:	3ff921fb 	.word	0x3ff921fb
 8024858:	1a626331 	.word	0x1a626331
 802485c:	3dd0b461 	.word	0x3dd0b461
 8024860:	1a600000 	.word	0x1a600000
 8024864:	3dd0b461 	.word	0x3dd0b461
 8024868:	2e037073 	.word	0x2e037073
 802486c:	3ba3198a 	.word	0x3ba3198a
 8024870:	6dc9c883 	.word	0x6dc9c883
 8024874:	3fe45f30 	.word	0x3fe45f30
 8024878:	2e000000 	.word	0x2e000000
 802487c:	3ba3198a 	.word	0x3ba3198a
 8024880:	252049c1 	.word	0x252049c1
 8024884:	397b839a 	.word	0x397b839a
 8024888:	3fe921fb 	.word	0x3fe921fb
 802488c:	4002d97b 	.word	0x4002d97b
 8024890:	3ff921fb 	.word	0x3ff921fb
 8024894:	413921fb 	.word	0x413921fb
 8024898:	3fe00000 	.word	0x3fe00000
 802489c:	08026408 	.word	0x08026408
 80248a0:	7fefffff 	.word	0x7fefffff
 80248a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80248a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80248ac:	ee10 0a10 	vmov	r0, s0
 80248b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80248b4:	ee10 6a10 	vmov	r6, s0
 80248b8:	460f      	mov	r7, r1
 80248ba:	f7dc f94d 	bl	8000b58 <__aeabi_d2iz>
 80248be:	f7db fe31 	bl	8000524 <__aeabi_i2d>
 80248c2:	4602      	mov	r2, r0
 80248c4:	460b      	mov	r3, r1
 80248c6:	4630      	mov	r0, r6
 80248c8:	4639      	mov	r1, r7
 80248ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80248ce:	f7db fcdb 	bl	8000288 <__aeabi_dsub>
 80248d2:	4b23      	ldr	r3, [pc, #140]	; (8024960 <__ieee754_rem_pio2+0x410>)
 80248d4:	2200      	movs	r2, #0
 80248d6:	f7db fe8f 	bl	80005f8 <__aeabi_dmul>
 80248da:	460f      	mov	r7, r1
 80248dc:	4606      	mov	r6, r0
 80248de:	f7dc f93b 	bl	8000b58 <__aeabi_d2iz>
 80248e2:	f7db fe1f 	bl	8000524 <__aeabi_i2d>
 80248e6:	4602      	mov	r2, r0
 80248e8:	460b      	mov	r3, r1
 80248ea:	4630      	mov	r0, r6
 80248ec:	4639      	mov	r1, r7
 80248ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80248f2:	f7db fcc9 	bl	8000288 <__aeabi_dsub>
 80248f6:	4b1a      	ldr	r3, [pc, #104]	; (8024960 <__ieee754_rem_pio2+0x410>)
 80248f8:	2200      	movs	r2, #0
 80248fa:	f7db fe7d 	bl	80005f8 <__aeabi_dmul>
 80248fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024902:	ad04      	add	r5, sp, #16
 8024904:	f04f 0803 	mov.w	r8, #3
 8024908:	46a9      	mov	r9, r5
 802490a:	2600      	movs	r6, #0
 802490c:	2700      	movs	r7, #0
 802490e:	4632      	mov	r2, r6
 8024910:	463b      	mov	r3, r7
 8024912:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8024916:	46c3      	mov	fp, r8
 8024918:	3d08      	subs	r5, #8
 802491a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802491e:	f7dc f8d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8024922:	2800      	cmp	r0, #0
 8024924:	d1f3      	bne.n	802490e <__ieee754_rem_pio2+0x3be>
 8024926:	4b0f      	ldr	r3, [pc, #60]	; (8024964 <__ieee754_rem_pio2+0x414>)
 8024928:	9301      	str	r3, [sp, #4]
 802492a:	2302      	movs	r3, #2
 802492c:	9300      	str	r3, [sp, #0]
 802492e:	4622      	mov	r2, r4
 8024930:	465b      	mov	r3, fp
 8024932:	4651      	mov	r1, sl
 8024934:	4648      	mov	r0, r9
 8024936:	f000 f997 	bl	8024c68 <__kernel_rem_pio2>
 802493a:	9b02      	ldr	r3, [sp, #8]
 802493c:	2b00      	cmp	r3, #0
 802493e:	4683      	mov	fp, r0
 8024940:	f6bf ae46 	bge.w	80245d0 <__ieee754_rem_pio2+0x80>
 8024944:	e9da 2100 	ldrd	r2, r1, [sl]
 8024948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802494c:	e9ca 2300 	strd	r2, r3, [sl]
 8024950:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8024954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024958:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802495c:	e73a      	b.n	80247d4 <__ieee754_rem_pio2+0x284>
 802495e:	bf00      	nop
 8024960:	41700000 	.word	0x41700000
 8024964:	08026488 	.word	0x08026488

08024968 <__ieee754_sqrt>:
 8024968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802496c:	ec55 4b10 	vmov	r4, r5, d0
 8024970:	4e55      	ldr	r6, [pc, #340]	; (8024ac8 <__ieee754_sqrt+0x160>)
 8024972:	43ae      	bics	r6, r5
 8024974:	ee10 0a10 	vmov	r0, s0
 8024978:	ee10 3a10 	vmov	r3, s0
 802497c:	462a      	mov	r2, r5
 802497e:	4629      	mov	r1, r5
 8024980:	d110      	bne.n	80249a4 <__ieee754_sqrt+0x3c>
 8024982:	ee10 2a10 	vmov	r2, s0
 8024986:	462b      	mov	r3, r5
 8024988:	f7db fe36 	bl	80005f8 <__aeabi_dmul>
 802498c:	4602      	mov	r2, r0
 802498e:	460b      	mov	r3, r1
 8024990:	4620      	mov	r0, r4
 8024992:	4629      	mov	r1, r5
 8024994:	f7db fc7a 	bl	800028c <__adddf3>
 8024998:	4604      	mov	r4, r0
 802499a:	460d      	mov	r5, r1
 802499c:	ec45 4b10 	vmov	d0, r4, r5
 80249a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80249a4:	2d00      	cmp	r5, #0
 80249a6:	dc10      	bgt.n	80249ca <__ieee754_sqrt+0x62>
 80249a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80249ac:	4330      	orrs	r0, r6
 80249ae:	d0f5      	beq.n	802499c <__ieee754_sqrt+0x34>
 80249b0:	b15d      	cbz	r5, 80249ca <__ieee754_sqrt+0x62>
 80249b2:	ee10 2a10 	vmov	r2, s0
 80249b6:	462b      	mov	r3, r5
 80249b8:	ee10 0a10 	vmov	r0, s0
 80249bc:	f7db fc64 	bl	8000288 <__aeabi_dsub>
 80249c0:	4602      	mov	r2, r0
 80249c2:	460b      	mov	r3, r1
 80249c4:	f7db ff42 	bl	800084c <__aeabi_ddiv>
 80249c8:	e7e6      	b.n	8024998 <__ieee754_sqrt+0x30>
 80249ca:	1512      	asrs	r2, r2, #20
 80249cc:	d074      	beq.n	8024ab8 <__ieee754_sqrt+0x150>
 80249ce:	07d4      	lsls	r4, r2, #31
 80249d0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80249d4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80249d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80249dc:	bf5e      	ittt	pl
 80249de:	0fda      	lsrpl	r2, r3, #31
 80249e0:	005b      	lslpl	r3, r3, #1
 80249e2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80249e6:	2400      	movs	r4, #0
 80249e8:	0fda      	lsrs	r2, r3, #31
 80249ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80249ee:	107f      	asrs	r7, r7, #1
 80249f0:	005b      	lsls	r3, r3, #1
 80249f2:	2516      	movs	r5, #22
 80249f4:	4620      	mov	r0, r4
 80249f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80249fa:	1886      	adds	r6, r0, r2
 80249fc:	428e      	cmp	r6, r1
 80249fe:	bfde      	ittt	le
 8024a00:	1b89      	suble	r1, r1, r6
 8024a02:	18b0      	addle	r0, r6, r2
 8024a04:	18a4      	addle	r4, r4, r2
 8024a06:	0049      	lsls	r1, r1, #1
 8024a08:	3d01      	subs	r5, #1
 8024a0a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8024a0e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8024a12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024a16:	d1f0      	bne.n	80249fa <__ieee754_sqrt+0x92>
 8024a18:	462a      	mov	r2, r5
 8024a1a:	f04f 0e20 	mov.w	lr, #32
 8024a1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8024a22:	4281      	cmp	r1, r0
 8024a24:	eb06 0c05 	add.w	ip, r6, r5
 8024a28:	dc02      	bgt.n	8024a30 <__ieee754_sqrt+0xc8>
 8024a2a:	d113      	bne.n	8024a54 <__ieee754_sqrt+0xec>
 8024a2c:	459c      	cmp	ip, r3
 8024a2e:	d811      	bhi.n	8024a54 <__ieee754_sqrt+0xec>
 8024a30:	f1bc 0f00 	cmp.w	ip, #0
 8024a34:	eb0c 0506 	add.w	r5, ip, r6
 8024a38:	da43      	bge.n	8024ac2 <__ieee754_sqrt+0x15a>
 8024a3a:	2d00      	cmp	r5, #0
 8024a3c:	db41      	blt.n	8024ac2 <__ieee754_sqrt+0x15a>
 8024a3e:	f100 0801 	add.w	r8, r0, #1
 8024a42:	1a09      	subs	r1, r1, r0
 8024a44:	459c      	cmp	ip, r3
 8024a46:	bf88      	it	hi
 8024a48:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8024a4c:	eba3 030c 	sub.w	r3, r3, ip
 8024a50:	4432      	add	r2, r6
 8024a52:	4640      	mov	r0, r8
 8024a54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8024a58:	f1be 0e01 	subs.w	lr, lr, #1
 8024a5c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8024a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024a64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024a68:	d1db      	bne.n	8024a22 <__ieee754_sqrt+0xba>
 8024a6a:	430b      	orrs	r3, r1
 8024a6c:	d006      	beq.n	8024a7c <__ieee754_sqrt+0x114>
 8024a6e:	1c50      	adds	r0, r2, #1
 8024a70:	bf13      	iteet	ne
 8024a72:	3201      	addne	r2, #1
 8024a74:	3401      	addeq	r4, #1
 8024a76:	4672      	moveq	r2, lr
 8024a78:	f022 0201 	bicne.w	r2, r2, #1
 8024a7c:	1063      	asrs	r3, r4, #1
 8024a7e:	0852      	lsrs	r2, r2, #1
 8024a80:	07e1      	lsls	r1, r4, #31
 8024a82:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8024a86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8024a8a:	bf48      	it	mi
 8024a8c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8024a90:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8024a94:	4614      	mov	r4, r2
 8024a96:	e781      	b.n	802499c <__ieee754_sqrt+0x34>
 8024a98:	0ad9      	lsrs	r1, r3, #11
 8024a9a:	3815      	subs	r0, #21
 8024a9c:	055b      	lsls	r3, r3, #21
 8024a9e:	2900      	cmp	r1, #0
 8024aa0:	d0fa      	beq.n	8024a98 <__ieee754_sqrt+0x130>
 8024aa2:	02cd      	lsls	r5, r1, #11
 8024aa4:	d50a      	bpl.n	8024abc <__ieee754_sqrt+0x154>
 8024aa6:	f1c2 0420 	rsb	r4, r2, #32
 8024aaa:	fa23 f404 	lsr.w	r4, r3, r4
 8024aae:	1e55      	subs	r5, r2, #1
 8024ab0:	4093      	lsls	r3, r2
 8024ab2:	4321      	orrs	r1, r4
 8024ab4:	1b42      	subs	r2, r0, r5
 8024ab6:	e78a      	b.n	80249ce <__ieee754_sqrt+0x66>
 8024ab8:	4610      	mov	r0, r2
 8024aba:	e7f0      	b.n	8024a9e <__ieee754_sqrt+0x136>
 8024abc:	0049      	lsls	r1, r1, #1
 8024abe:	3201      	adds	r2, #1
 8024ac0:	e7ef      	b.n	8024aa2 <__ieee754_sqrt+0x13a>
 8024ac2:	4680      	mov	r8, r0
 8024ac4:	e7bd      	b.n	8024a42 <__ieee754_sqrt+0xda>
 8024ac6:	bf00      	nop
 8024ac8:	7ff00000 	.word	0x7ff00000

08024acc <__ieee754_sqrtf>:
 8024acc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024ad0:	4770      	bx	lr
 8024ad2:	0000      	movs	r0, r0
 8024ad4:	0000      	movs	r0, r0
	...

08024ad8 <__kernel_cos>:
 8024ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024adc:	ec57 6b10 	vmov	r6, r7, d0
 8024ae0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8024ae4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8024ae8:	ed8d 1b00 	vstr	d1, [sp]
 8024aec:	da07      	bge.n	8024afe <__kernel_cos+0x26>
 8024aee:	ee10 0a10 	vmov	r0, s0
 8024af2:	4639      	mov	r1, r7
 8024af4:	f7dc f830 	bl	8000b58 <__aeabi_d2iz>
 8024af8:	2800      	cmp	r0, #0
 8024afa:	f000 8088 	beq.w	8024c0e <__kernel_cos+0x136>
 8024afe:	4632      	mov	r2, r6
 8024b00:	463b      	mov	r3, r7
 8024b02:	4630      	mov	r0, r6
 8024b04:	4639      	mov	r1, r7
 8024b06:	f7db fd77 	bl	80005f8 <__aeabi_dmul>
 8024b0a:	4b51      	ldr	r3, [pc, #324]	; (8024c50 <__kernel_cos+0x178>)
 8024b0c:	2200      	movs	r2, #0
 8024b0e:	4604      	mov	r4, r0
 8024b10:	460d      	mov	r5, r1
 8024b12:	f7db fd71 	bl	80005f8 <__aeabi_dmul>
 8024b16:	a340      	add	r3, pc, #256	; (adr r3, 8024c18 <__kernel_cos+0x140>)
 8024b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b1c:	4682      	mov	sl, r0
 8024b1e:	468b      	mov	fp, r1
 8024b20:	4620      	mov	r0, r4
 8024b22:	4629      	mov	r1, r5
 8024b24:	f7db fd68 	bl	80005f8 <__aeabi_dmul>
 8024b28:	a33d      	add	r3, pc, #244	; (adr r3, 8024c20 <__kernel_cos+0x148>)
 8024b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b2e:	f7db fbad 	bl	800028c <__adddf3>
 8024b32:	4622      	mov	r2, r4
 8024b34:	462b      	mov	r3, r5
 8024b36:	f7db fd5f 	bl	80005f8 <__aeabi_dmul>
 8024b3a:	a33b      	add	r3, pc, #236	; (adr r3, 8024c28 <__kernel_cos+0x150>)
 8024b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b40:	f7db fba2 	bl	8000288 <__aeabi_dsub>
 8024b44:	4622      	mov	r2, r4
 8024b46:	462b      	mov	r3, r5
 8024b48:	f7db fd56 	bl	80005f8 <__aeabi_dmul>
 8024b4c:	a338      	add	r3, pc, #224	; (adr r3, 8024c30 <__kernel_cos+0x158>)
 8024b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b52:	f7db fb9b 	bl	800028c <__adddf3>
 8024b56:	4622      	mov	r2, r4
 8024b58:	462b      	mov	r3, r5
 8024b5a:	f7db fd4d 	bl	80005f8 <__aeabi_dmul>
 8024b5e:	a336      	add	r3, pc, #216	; (adr r3, 8024c38 <__kernel_cos+0x160>)
 8024b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b64:	f7db fb90 	bl	8000288 <__aeabi_dsub>
 8024b68:	4622      	mov	r2, r4
 8024b6a:	462b      	mov	r3, r5
 8024b6c:	f7db fd44 	bl	80005f8 <__aeabi_dmul>
 8024b70:	a333      	add	r3, pc, #204	; (adr r3, 8024c40 <__kernel_cos+0x168>)
 8024b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b76:	f7db fb89 	bl	800028c <__adddf3>
 8024b7a:	4622      	mov	r2, r4
 8024b7c:	462b      	mov	r3, r5
 8024b7e:	f7db fd3b 	bl	80005f8 <__aeabi_dmul>
 8024b82:	4622      	mov	r2, r4
 8024b84:	462b      	mov	r3, r5
 8024b86:	f7db fd37 	bl	80005f8 <__aeabi_dmul>
 8024b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024b8e:	4604      	mov	r4, r0
 8024b90:	460d      	mov	r5, r1
 8024b92:	4630      	mov	r0, r6
 8024b94:	4639      	mov	r1, r7
 8024b96:	f7db fd2f 	bl	80005f8 <__aeabi_dmul>
 8024b9a:	460b      	mov	r3, r1
 8024b9c:	4602      	mov	r2, r0
 8024b9e:	4629      	mov	r1, r5
 8024ba0:	4620      	mov	r0, r4
 8024ba2:	f7db fb71 	bl	8000288 <__aeabi_dsub>
 8024ba6:	4b2b      	ldr	r3, [pc, #172]	; (8024c54 <__kernel_cos+0x17c>)
 8024ba8:	4598      	cmp	r8, r3
 8024baa:	4606      	mov	r6, r0
 8024bac:	460f      	mov	r7, r1
 8024bae:	dc10      	bgt.n	8024bd2 <__kernel_cos+0xfa>
 8024bb0:	4602      	mov	r2, r0
 8024bb2:	460b      	mov	r3, r1
 8024bb4:	4650      	mov	r0, sl
 8024bb6:	4659      	mov	r1, fp
 8024bb8:	f7db fb66 	bl	8000288 <__aeabi_dsub>
 8024bbc:	460b      	mov	r3, r1
 8024bbe:	4926      	ldr	r1, [pc, #152]	; (8024c58 <__kernel_cos+0x180>)
 8024bc0:	4602      	mov	r2, r0
 8024bc2:	2000      	movs	r0, #0
 8024bc4:	f7db fb60 	bl	8000288 <__aeabi_dsub>
 8024bc8:	ec41 0b10 	vmov	d0, r0, r1
 8024bcc:	b003      	add	sp, #12
 8024bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bd2:	4b22      	ldr	r3, [pc, #136]	; (8024c5c <__kernel_cos+0x184>)
 8024bd4:	4920      	ldr	r1, [pc, #128]	; (8024c58 <__kernel_cos+0x180>)
 8024bd6:	4598      	cmp	r8, r3
 8024bd8:	bfcc      	ite	gt
 8024bda:	4d21      	ldrgt	r5, [pc, #132]	; (8024c60 <__kernel_cos+0x188>)
 8024bdc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8024be0:	2400      	movs	r4, #0
 8024be2:	4622      	mov	r2, r4
 8024be4:	462b      	mov	r3, r5
 8024be6:	2000      	movs	r0, #0
 8024be8:	f7db fb4e 	bl	8000288 <__aeabi_dsub>
 8024bec:	4622      	mov	r2, r4
 8024bee:	4680      	mov	r8, r0
 8024bf0:	4689      	mov	r9, r1
 8024bf2:	462b      	mov	r3, r5
 8024bf4:	4650      	mov	r0, sl
 8024bf6:	4659      	mov	r1, fp
 8024bf8:	f7db fb46 	bl	8000288 <__aeabi_dsub>
 8024bfc:	4632      	mov	r2, r6
 8024bfe:	463b      	mov	r3, r7
 8024c00:	f7db fb42 	bl	8000288 <__aeabi_dsub>
 8024c04:	4602      	mov	r2, r0
 8024c06:	460b      	mov	r3, r1
 8024c08:	4640      	mov	r0, r8
 8024c0a:	4649      	mov	r1, r9
 8024c0c:	e7da      	b.n	8024bc4 <__kernel_cos+0xec>
 8024c0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8024c48 <__kernel_cos+0x170>
 8024c12:	e7db      	b.n	8024bcc <__kernel_cos+0xf4>
 8024c14:	f3af 8000 	nop.w
 8024c18:	be8838d4 	.word	0xbe8838d4
 8024c1c:	bda8fae9 	.word	0xbda8fae9
 8024c20:	bdb4b1c4 	.word	0xbdb4b1c4
 8024c24:	3e21ee9e 	.word	0x3e21ee9e
 8024c28:	809c52ad 	.word	0x809c52ad
 8024c2c:	3e927e4f 	.word	0x3e927e4f
 8024c30:	19cb1590 	.word	0x19cb1590
 8024c34:	3efa01a0 	.word	0x3efa01a0
 8024c38:	16c15177 	.word	0x16c15177
 8024c3c:	3f56c16c 	.word	0x3f56c16c
 8024c40:	5555554c 	.word	0x5555554c
 8024c44:	3fa55555 	.word	0x3fa55555
 8024c48:	00000000 	.word	0x00000000
 8024c4c:	3ff00000 	.word	0x3ff00000
 8024c50:	3fe00000 	.word	0x3fe00000
 8024c54:	3fd33332 	.word	0x3fd33332
 8024c58:	3ff00000 	.word	0x3ff00000
 8024c5c:	3fe90000 	.word	0x3fe90000
 8024c60:	3fd20000 	.word	0x3fd20000
 8024c64:	00000000 	.word	0x00000000

08024c68 <__kernel_rem_pio2>:
 8024c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c6c:	ed2d 8b02 	vpush	{d8}
 8024c70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8024c74:	f112 0f14 	cmn.w	r2, #20
 8024c78:	9308      	str	r3, [sp, #32]
 8024c7a:	9101      	str	r1, [sp, #4]
 8024c7c:	4bc4      	ldr	r3, [pc, #784]	; (8024f90 <__kernel_rem_pio2+0x328>)
 8024c7e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024c80:	900b      	str	r0, [sp, #44]	; 0x2c
 8024c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024c86:	9302      	str	r3, [sp, #8]
 8024c88:	9b08      	ldr	r3, [sp, #32]
 8024c8a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8024c8e:	bfa8      	it	ge
 8024c90:	1ed4      	subge	r4, r2, #3
 8024c92:	9306      	str	r3, [sp, #24]
 8024c94:	bfb2      	itee	lt
 8024c96:	2400      	movlt	r4, #0
 8024c98:	2318      	movge	r3, #24
 8024c9a:	fb94 f4f3 	sdivge	r4, r4, r3
 8024c9e:	f06f 0317 	mvn.w	r3, #23
 8024ca2:	fb04 3303 	mla	r3, r4, r3, r3
 8024ca6:	eb03 0a02 	add.w	sl, r3, r2
 8024caa:	9b02      	ldr	r3, [sp, #8]
 8024cac:	9a06      	ldr	r2, [sp, #24]
 8024cae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024f80 <__kernel_rem_pio2+0x318>
 8024cb2:	eb03 0802 	add.w	r8, r3, r2
 8024cb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024cb8:	1aa7      	subs	r7, r4, r2
 8024cba:	ae22      	add	r6, sp, #136	; 0x88
 8024cbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024cc0:	2500      	movs	r5, #0
 8024cc2:	4545      	cmp	r5, r8
 8024cc4:	dd13      	ble.n	8024cee <__kernel_rem_pio2+0x86>
 8024cc6:	9b08      	ldr	r3, [sp, #32]
 8024cc8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024f80 <__kernel_rem_pio2+0x318>
 8024ccc:	aa22      	add	r2, sp, #136	; 0x88
 8024cce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8024cd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8024cd6:	f04f 0800 	mov.w	r8, #0
 8024cda:	9b02      	ldr	r3, [sp, #8]
 8024cdc:	4598      	cmp	r8, r3
 8024cde:	dc2f      	bgt.n	8024d40 <__kernel_rem_pio2+0xd8>
 8024ce0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8024ce4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024ce8:	462f      	mov	r7, r5
 8024cea:	2600      	movs	r6, #0
 8024cec:	e01b      	b.n	8024d26 <__kernel_rem_pio2+0xbe>
 8024cee:	42ef      	cmn	r7, r5
 8024cf0:	d407      	bmi.n	8024d02 <__kernel_rem_pio2+0x9a>
 8024cf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024cf6:	f7db fc15 	bl	8000524 <__aeabi_i2d>
 8024cfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8024cfe:	3501      	adds	r5, #1
 8024d00:	e7df      	b.n	8024cc2 <__kernel_rem_pio2+0x5a>
 8024d02:	ec51 0b18 	vmov	r0, r1, d8
 8024d06:	e7f8      	b.n	8024cfa <__kernel_rem_pio2+0x92>
 8024d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024d0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024d10:	f7db fc72 	bl	80005f8 <__aeabi_dmul>
 8024d14:	4602      	mov	r2, r0
 8024d16:	460b      	mov	r3, r1
 8024d18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024d1c:	f7db fab6 	bl	800028c <__adddf3>
 8024d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024d24:	3601      	adds	r6, #1
 8024d26:	9b06      	ldr	r3, [sp, #24]
 8024d28:	429e      	cmp	r6, r3
 8024d2a:	f1a7 0708 	sub.w	r7, r7, #8
 8024d2e:	ddeb      	ble.n	8024d08 <__kernel_rem_pio2+0xa0>
 8024d30:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024d34:	f108 0801 	add.w	r8, r8, #1
 8024d38:	ecab 7b02 	vstmia	fp!, {d7}
 8024d3c:	3508      	adds	r5, #8
 8024d3e:	e7cc      	b.n	8024cda <__kernel_rem_pio2+0x72>
 8024d40:	9b02      	ldr	r3, [sp, #8]
 8024d42:	aa0e      	add	r2, sp, #56	; 0x38
 8024d44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024d48:	930d      	str	r3, [sp, #52]	; 0x34
 8024d4a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024d4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024d50:	9c02      	ldr	r4, [sp, #8]
 8024d52:	930c      	str	r3, [sp, #48]	; 0x30
 8024d54:	00e3      	lsls	r3, r4, #3
 8024d56:	930a      	str	r3, [sp, #40]	; 0x28
 8024d58:	ab9a      	add	r3, sp, #616	; 0x268
 8024d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024d5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8024d62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024d66:	ab72      	add	r3, sp, #456	; 0x1c8
 8024d68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8024d6c:	46c3      	mov	fp, r8
 8024d6e:	46a1      	mov	r9, r4
 8024d70:	f1b9 0f00 	cmp.w	r9, #0
 8024d74:	f1a5 0508 	sub.w	r5, r5, #8
 8024d78:	dc77      	bgt.n	8024e6a <__kernel_rem_pio2+0x202>
 8024d7a:	ec47 6b10 	vmov	d0, r6, r7
 8024d7e:	4650      	mov	r0, sl
 8024d80:	f000 fbbe 	bl	8025500 <scalbn>
 8024d84:	ec57 6b10 	vmov	r6, r7, d0
 8024d88:	2200      	movs	r2, #0
 8024d8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8024d8e:	ee10 0a10 	vmov	r0, s0
 8024d92:	4639      	mov	r1, r7
 8024d94:	f7db fc30 	bl	80005f8 <__aeabi_dmul>
 8024d98:	ec41 0b10 	vmov	d0, r0, r1
 8024d9c:	f7fe fa00 	bl	80231a0 <floor>
 8024da0:	4b7c      	ldr	r3, [pc, #496]	; (8024f94 <__kernel_rem_pio2+0x32c>)
 8024da2:	ec51 0b10 	vmov	r0, r1, d0
 8024da6:	2200      	movs	r2, #0
 8024da8:	f7db fc26 	bl	80005f8 <__aeabi_dmul>
 8024dac:	4602      	mov	r2, r0
 8024dae:	460b      	mov	r3, r1
 8024db0:	4630      	mov	r0, r6
 8024db2:	4639      	mov	r1, r7
 8024db4:	f7db fa68 	bl	8000288 <__aeabi_dsub>
 8024db8:	460f      	mov	r7, r1
 8024dba:	4606      	mov	r6, r0
 8024dbc:	f7db fecc 	bl	8000b58 <__aeabi_d2iz>
 8024dc0:	9004      	str	r0, [sp, #16]
 8024dc2:	f7db fbaf 	bl	8000524 <__aeabi_i2d>
 8024dc6:	4602      	mov	r2, r0
 8024dc8:	460b      	mov	r3, r1
 8024dca:	4630      	mov	r0, r6
 8024dcc:	4639      	mov	r1, r7
 8024dce:	f7db fa5b 	bl	8000288 <__aeabi_dsub>
 8024dd2:	f1ba 0f00 	cmp.w	sl, #0
 8024dd6:	4606      	mov	r6, r0
 8024dd8:	460f      	mov	r7, r1
 8024dda:	dd6d      	ble.n	8024eb8 <__kernel_rem_pio2+0x250>
 8024ddc:	1e62      	subs	r2, r4, #1
 8024dde:	ab0e      	add	r3, sp, #56	; 0x38
 8024de0:	9d04      	ldr	r5, [sp, #16]
 8024de2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024de6:	f1ca 0118 	rsb	r1, sl, #24
 8024dea:	fa40 f301 	asr.w	r3, r0, r1
 8024dee:	441d      	add	r5, r3
 8024df0:	408b      	lsls	r3, r1
 8024df2:	1ac0      	subs	r0, r0, r3
 8024df4:	ab0e      	add	r3, sp, #56	; 0x38
 8024df6:	9504      	str	r5, [sp, #16]
 8024df8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8024dfc:	f1ca 0317 	rsb	r3, sl, #23
 8024e00:	fa40 fb03 	asr.w	fp, r0, r3
 8024e04:	f1bb 0f00 	cmp.w	fp, #0
 8024e08:	dd65      	ble.n	8024ed6 <__kernel_rem_pio2+0x26e>
 8024e0a:	9b04      	ldr	r3, [sp, #16]
 8024e0c:	2200      	movs	r2, #0
 8024e0e:	3301      	adds	r3, #1
 8024e10:	9304      	str	r3, [sp, #16]
 8024e12:	4615      	mov	r5, r2
 8024e14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8024e18:	4294      	cmp	r4, r2
 8024e1a:	f300 809c 	bgt.w	8024f56 <__kernel_rem_pio2+0x2ee>
 8024e1e:	f1ba 0f00 	cmp.w	sl, #0
 8024e22:	dd07      	ble.n	8024e34 <__kernel_rem_pio2+0x1cc>
 8024e24:	f1ba 0f01 	cmp.w	sl, #1
 8024e28:	f000 80c0 	beq.w	8024fac <__kernel_rem_pio2+0x344>
 8024e2c:	f1ba 0f02 	cmp.w	sl, #2
 8024e30:	f000 80c6 	beq.w	8024fc0 <__kernel_rem_pio2+0x358>
 8024e34:	f1bb 0f02 	cmp.w	fp, #2
 8024e38:	d14d      	bne.n	8024ed6 <__kernel_rem_pio2+0x26e>
 8024e3a:	4632      	mov	r2, r6
 8024e3c:	463b      	mov	r3, r7
 8024e3e:	4956      	ldr	r1, [pc, #344]	; (8024f98 <__kernel_rem_pio2+0x330>)
 8024e40:	2000      	movs	r0, #0
 8024e42:	f7db fa21 	bl	8000288 <__aeabi_dsub>
 8024e46:	4606      	mov	r6, r0
 8024e48:	460f      	mov	r7, r1
 8024e4a:	2d00      	cmp	r5, #0
 8024e4c:	d043      	beq.n	8024ed6 <__kernel_rem_pio2+0x26e>
 8024e4e:	4650      	mov	r0, sl
 8024e50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024f88 <__kernel_rem_pio2+0x320>
 8024e54:	f000 fb54 	bl	8025500 <scalbn>
 8024e58:	4630      	mov	r0, r6
 8024e5a:	4639      	mov	r1, r7
 8024e5c:	ec53 2b10 	vmov	r2, r3, d0
 8024e60:	f7db fa12 	bl	8000288 <__aeabi_dsub>
 8024e64:	4606      	mov	r6, r0
 8024e66:	460f      	mov	r7, r1
 8024e68:	e035      	b.n	8024ed6 <__kernel_rem_pio2+0x26e>
 8024e6a:	4b4c      	ldr	r3, [pc, #304]	; (8024f9c <__kernel_rem_pio2+0x334>)
 8024e6c:	2200      	movs	r2, #0
 8024e6e:	4630      	mov	r0, r6
 8024e70:	4639      	mov	r1, r7
 8024e72:	f7db fbc1 	bl	80005f8 <__aeabi_dmul>
 8024e76:	f7db fe6f 	bl	8000b58 <__aeabi_d2iz>
 8024e7a:	f7db fb53 	bl	8000524 <__aeabi_i2d>
 8024e7e:	4602      	mov	r2, r0
 8024e80:	460b      	mov	r3, r1
 8024e82:	ec43 2b18 	vmov	d8, r2, r3
 8024e86:	4b46      	ldr	r3, [pc, #280]	; (8024fa0 <__kernel_rem_pio2+0x338>)
 8024e88:	2200      	movs	r2, #0
 8024e8a:	f7db fbb5 	bl	80005f8 <__aeabi_dmul>
 8024e8e:	4602      	mov	r2, r0
 8024e90:	460b      	mov	r3, r1
 8024e92:	4630      	mov	r0, r6
 8024e94:	4639      	mov	r1, r7
 8024e96:	f7db f9f7 	bl	8000288 <__aeabi_dsub>
 8024e9a:	f7db fe5d 	bl	8000b58 <__aeabi_d2iz>
 8024e9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024ea2:	f84b 0b04 	str.w	r0, [fp], #4
 8024ea6:	ec51 0b18 	vmov	r0, r1, d8
 8024eaa:	f7db f9ef 	bl	800028c <__adddf3>
 8024eae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8024eb2:	4606      	mov	r6, r0
 8024eb4:	460f      	mov	r7, r1
 8024eb6:	e75b      	b.n	8024d70 <__kernel_rem_pio2+0x108>
 8024eb8:	d106      	bne.n	8024ec8 <__kernel_rem_pio2+0x260>
 8024eba:	1e63      	subs	r3, r4, #1
 8024ebc:	aa0e      	add	r2, sp, #56	; 0x38
 8024ebe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024ec2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8024ec6:	e79d      	b.n	8024e04 <__kernel_rem_pio2+0x19c>
 8024ec8:	4b36      	ldr	r3, [pc, #216]	; (8024fa4 <__kernel_rem_pio2+0x33c>)
 8024eca:	2200      	movs	r2, #0
 8024ecc:	f7db fe1a 	bl	8000b04 <__aeabi_dcmpge>
 8024ed0:	2800      	cmp	r0, #0
 8024ed2:	d13d      	bne.n	8024f50 <__kernel_rem_pio2+0x2e8>
 8024ed4:	4683      	mov	fp, r0
 8024ed6:	2200      	movs	r2, #0
 8024ed8:	2300      	movs	r3, #0
 8024eda:	4630      	mov	r0, r6
 8024edc:	4639      	mov	r1, r7
 8024ede:	f7db fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8024ee2:	2800      	cmp	r0, #0
 8024ee4:	f000 80c0 	beq.w	8025068 <__kernel_rem_pio2+0x400>
 8024ee8:	1e65      	subs	r5, r4, #1
 8024eea:	462b      	mov	r3, r5
 8024eec:	2200      	movs	r2, #0
 8024eee:	9902      	ldr	r1, [sp, #8]
 8024ef0:	428b      	cmp	r3, r1
 8024ef2:	da6c      	bge.n	8024fce <__kernel_rem_pio2+0x366>
 8024ef4:	2a00      	cmp	r2, #0
 8024ef6:	f000 8089 	beq.w	802500c <__kernel_rem_pio2+0x3a4>
 8024efa:	ab0e      	add	r3, sp, #56	; 0x38
 8024efc:	f1aa 0a18 	sub.w	sl, sl, #24
 8024f00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	f000 80ad 	beq.w	8025064 <__kernel_rem_pio2+0x3fc>
 8024f0a:	4650      	mov	r0, sl
 8024f0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024f88 <__kernel_rem_pio2+0x320>
 8024f10:	f000 faf6 	bl	8025500 <scalbn>
 8024f14:	ab9a      	add	r3, sp, #616	; 0x268
 8024f16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024f1a:	ec57 6b10 	vmov	r6, r7, d0
 8024f1e:	00ec      	lsls	r4, r5, #3
 8024f20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8024f24:	46aa      	mov	sl, r5
 8024f26:	f1ba 0f00 	cmp.w	sl, #0
 8024f2a:	f280 80d6 	bge.w	80250da <__kernel_rem_pio2+0x472>
 8024f2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024f80 <__kernel_rem_pio2+0x318>
 8024f32:	462e      	mov	r6, r5
 8024f34:	2e00      	cmp	r6, #0
 8024f36:	f2c0 8104 	blt.w	8025142 <__kernel_rem_pio2+0x4da>
 8024f3a:	ab72      	add	r3, sp, #456	; 0x1c8
 8024f3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8024f40:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024fa8 <__kernel_rem_pio2+0x340>
 8024f44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8024f48:	f04f 0800 	mov.w	r8, #0
 8024f4c:	1baf      	subs	r7, r5, r6
 8024f4e:	e0ea      	b.n	8025126 <__kernel_rem_pio2+0x4be>
 8024f50:	f04f 0b02 	mov.w	fp, #2
 8024f54:	e759      	b.n	8024e0a <__kernel_rem_pio2+0x1a2>
 8024f56:	f8d8 3000 	ldr.w	r3, [r8]
 8024f5a:	b955      	cbnz	r5, 8024f72 <__kernel_rem_pio2+0x30a>
 8024f5c:	b123      	cbz	r3, 8024f68 <__kernel_rem_pio2+0x300>
 8024f5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8024f62:	f8c8 3000 	str.w	r3, [r8]
 8024f66:	2301      	movs	r3, #1
 8024f68:	3201      	adds	r2, #1
 8024f6a:	f108 0804 	add.w	r8, r8, #4
 8024f6e:	461d      	mov	r5, r3
 8024f70:	e752      	b.n	8024e18 <__kernel_rem_pio2+0x1b0>
 8024f72:	1acb      	subs	r3, r1, r3
 8024f74:	f8c8 3000 	str.w	r3, [r8]
 8024f78:	462b      	mov	r3, r5
 8024f7a:	e7f5      	b.n	8024f68 <__kernel_rem_pio2+0x300>
 8024f7c:	f3af 8000 	nop.w
	...
 8024f8c:	3ff00000 	.word	0x3ff00000
 8024f90:	080265d0 	.word	0x080265d0
 8024f94:	40200000 	.word	0x40200000
 8024f98:	3ff00000 	.word	0x3ff00000
 8024f9c:	3e700000 	.word	0x3e700000
 8024fa0:	41700000 	.word	0x41700000
 8024fa4:	3fe00000 	.word	0x3fe00000
 8024fa8:	08026590 	.word	0x08026590
 8024fac:	1e62      	subs	r2, r4, #1
 8024fae:	ab0e      	add	r3, sp, #56	; 0x38
 8024fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024fb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024fb8:	a90e      	add	r1, sp, #56	; 0x38
 8024fba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8024fbe:	e739      	b.n	8024e34 <__kernel_rem_pio2+0x1cc>
 8024fc0:	1e62      	subs	r2, r4, #1
 8024fc2:	ab0e      	add	r3, sp, #56	; 0x38
 8024fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024fc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8024fcc:	e7f4      	b.n	8024fb8 <__kernel_rem_pio2+0x350>
 8024fce:	a90e      	add	r1, sp, #56	; 0x38
 8024fd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8024fd4:	3b01      	subs	r3, #1
 8024fd6:	430a      	orrs	r2, r1
 8024fd8:	e789      	b.n	8024eee <__kernel_rem_pio2+0x286>
 8024fda:	3301      	adds	r3, #1
 8024fdc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8024fe0:	2900      	cmp	r1, #0
 8024fe2:	d0fa      	beq.n	8024fda <__kernel_rem_pio2+0x372>
 8024fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024fe6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8024fea:	446a      	add	r2, sp
 8024fec:	3a98      	subs	r2, #152	; 0x98
 8024fee:	920a      	str	r2, [sp, #40]	; 0x28
 8024ff0:	9a08      	ldr	r2, [sp, #32]
 8024ff2:	18e3      	adds	r3, r4, r3
 8024ff4:	18a5      	adds	r5, r4, r2
 8024ff6:	aa22      	add	r2, sp, #136	; 0x88
 8024ff8:	f104 0801 	add.w	r8, r4, #1
 8024ffc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8025000:	9304      	str	r3, [sp, #16]
 8025002:	9b04      	ldr	r3, [sp, #16]
 8025004:	4543      	cmp	r3, r8
 8025006:	da04      	bge.n	8025012 <__kernel_rem_pio2+0x3aa>
 8025008:	461c      	mov	r4, r3
 802500a:	e6a3      	b.n	8024d54 <__kernel_rem_pio2+0xec>
 802500c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802500e:	2301      	movs	r3, #1
 8025010:	e7e4      	b.n	8024fdc <__kernel_rem_pio2+0x374>
 8025012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025014:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8025018:	f7db fa84 	bl	8000524 <__aeabi_i2d>
 802501c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8025020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025022:	46ab      	mov	fp, r5
 8025024:	461c      	mov	r4, r3
 8025026:	f04f 0900 	mov.w	r9, #0
 802502a:	2600      	movs	r6, #0
 802502c:	2700      	movs	r7, #0
 802502e:	9b06      	ldr	r3, [sp, #24]
 8025030:	4599      	cmp	r9, r3
 8025032:	dd06      	ble.n	8025042 <__kernel_rem_pio2+0x3da>
 8025034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025036:	e8e3 6702 	strd	r6, r7, [r3], #8
 802503a:	f108 0801 	add.w	r8, r8, #1
 802503e:	930a      	str	r3, [sp, #40]	; 0x28
 8025040:	e7df      	b.n	8025002 <__kernel_rem_pio2+0x39a>
 8025042:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8025046:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802504a:	f7db fad5 	bl	80005f8 <__aeabi_dmul>
 802504e:	4602      	mov	r2, r0
 8025050:	460b      	mov	r3, r1
 8025052:	4630      	mov	r0, r6
 8025054:	4639      	mov	r1, r7
 8025056:	f7db f919 	bl	800028c <__adddf3>
 802505a:	f109 0901 	add.w	r9, r9, #1
 802505e:	4606      	mov	r6, r0
 8025060:	460f      	mov	r7, r1
 8025062:	e7e4      	b.n	802502e <__kernel_rem_pio2+0x3c6>
 8025064:	3d01      	subs	r5, #1
 8025066:	e748      	b.n	8024efa <__kernel_rem_pio2+0x292>
 8025068:	ec47 6b10 	vmov	d0, r6, r7
 802506c:	f1ca 0000 	rsb	r0, sl, #0
 8025070:	f000 fa46 	bl	8025500 <scalbn>
 8025074:	ec57 6b10 	vmov	r6, r7, d0
 8025078:	4ba0      	ldr	r3, [pc, #640]	; (80252fc <__kernel_rem_pio2+0x694>)
 802507a:	ee10 0a10 	vmov	r0, s0
 802507e:	2200      	movs	r2, #0
 8025080:	4639      	mov	r1, r7
 8025082:	f7db fd3f 	bl	8000b04 <__aeabi_dcmpge>
 8025086:	b1f8      	cbz	r0, 80250c8 <__kernel_rem_pio2+0x460>
 8025088:	4b9d      	ldr	r3, [pc, #628]	; (8025300 <__kernel_rem_pio2+0x698>)
 802508a:	2200      	movs	r2, #0
 802508c:	4630      	mov	r0, r6
 802508e:	4639      	mov	r1, r7
 8025090:	f7db fab2 	bl	80005f8 <__aeabi_dmul>
 8025094:	f7db fd60 	bl	8000b58 <__aeabi_d2iz>
 8025098:	4680      	mov	r8, r0
 802509a:	f7db fa43 	bl	8000524 <__aeabi_i2d>
 802509e:	4b97      	ldr	r3, [pc, #604]	; (80252fc <__kernel_rem_pio2+0x694>)
 80250a0:	2200      	movs	r2, #0
 80250a2:	f7db faa9 	bl	80005f8 <__aeabi_dmul>
 80250a6:	460b      	mov	r3, r1
 80250a8:	4602      	mov	r2, r0
 80250aa:	4639      	mov	r1, r7
 80250ac:	4630      	mov	r0, r6
 80250ae:	f7db f8eb 	bl	8000288 <__aeabi_dsub>
 80250b2:	f7db fd51 	bl	8000b58 <__aeabi_d2iz>
 80250b6:	1c65      	adds	r5, r4, #1
 80250b8:	ab0e      	add	r3, sp, #56	; 0x38
 80250ba:	f10a 0a18 	add.w	sl, sl, #24
 80250be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80250c2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80250c6:	e720      	b.n	8024f0a <__kernel_rem_pio2+0x2a2>
 80250c8:	4630      	mov	r0, r6
 80250ca:	4639      	mov	r1, r7
 80250cc:	f7db fd44 	bl	8000b58 <__aeabi_d2iz>
 80250d0:	ab0e      	add	r3, sp, #56	; 0x38
 80250d2:	4625      	mov	r5, r4
 80250d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80250d8:	e717      	b.n	8024f0a <__kernel_rem_pio2+0x2a2>
 80250da:	ab0e      	add	r3, sp, #56	; 0x38
 80250dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80250e0:	f7db fa20 	bl	8000524 <__aeabi_i2d>
 80250e4:	4632      	mov	r2, r6
 80250e6:	463b      	mov	r3, r7
 80250e8:	f7db fa86 	bl	80005f8 <__aeabi_dmul>
 80250ec:	4b84      	ldr	r3, [pc, #528]	; (8025300 <__kernel_rem_pio2+0x698>)
 80250ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80250f2:	2200      	movs	r2, #0
 80250f4:	4630      	mov	r0, r6
 80250f6:	4639      	mov	r1, r7
 80250f8:	f7db fa7e 	bl	80005f8 <__aeabi_dmul>
 80250fc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8025100:	4606      	mov	r6, r0
 8025102:	460f      	mov	r7, r1
 8025104:	e70f      	b.n	8024f26 <__kernel_rem_pio2+0x2be>
 8025106:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802510a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802510e:	f7db fa73 	bl	80005f8 <__aeabi_dmul>
 8025112:	4602      	mov	r2, r0
 8025114:	460b      	mov	r3, r1
 8025116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802511a:	f7db f8b7 	bl	800028c <__adddf3>
 802511e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025122:	f108 0801 	add.w	r8, r8, #1
 8025126:	9b02      	ldr	r3, [sp, #8]
 8025128:	4598      	cmp	r8, r3
 802512a:	dc01      	bgt.n	8025130 <__kernel_rem_pio2+0x4c8>
 802512c:	45b8      	cmp	r8, r7
 802512e:	ddea      	ble.n	8025106 <__kernel_rem_pio2+0x49e>
 8025130:	ed9d 7b06 	vldr	d7, [sp, #24]
 8025134:	ab4a      	add	r3, sp, #296	; 0x128
 8025136:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802513a:	ed87 7b00 	vstr	d7, [r7]
 802513e:	3e01      	subs	r6, #1
 8025140:	e6f8      	b.n	8024f34 <__kernel_rem_pio2+0x2cc>
 8025142:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8025144:	2b02      	cmp	r3, #2
 8025146:	dc0b      	bgt.n	8025160 <__kernel_rem_pio2+0x4f8>
 8025148:	2b00      	cmp	r3, #0
 802514a:	dc35      	bgt.n	80251b8 <__kernel_rem_pio2+0x550>
 802514c:	d059      	beq.n	8025202 <__kernel_rem_pio2+0x59a>
 802514e:	9b04      	ldr	r3, [sp, #16]
 8025150:	f003 0007 	and.w	r0, r3, #7
 8025154:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8025158:	ecbd 8b02 	vpop	{d8}
 802515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025160:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8025162:	2b03      	cmp	r3, #3
 8025164:	d1f3      	bne.n	802514e <__kernel_rem_pio2+0x4e6>
 8025166:	ab4a      	add	r3, sp, #296	; 0x128
 8025168:	4423      	add	r3, r4
 802516a:	9306      	str	r3, [sp, #24]
 802516c:	461c      	mov	r4, r3
 802516e:	469a      	mov	sl, r3
 8025170:	9502      	str	r5, [sp, #8]
 8025172:	9b02      	ldr	r3, [sp, #8]
 8025174:	2b00      	cmp	r3, #0
 8025176:	f1aa 0a08 	sub.w	sl, sl, #8
 802517a:	dc6b      	bgt.n	8025254 <__kernel_rem_pio2+0x5ec>
 802517c:	46aa      	mov	sl, r5
 802517e:	f1ba 0f01 	cmp.w	sl, #1
 8025182:	f1a4 0408 	sub.w	r4, r4, #8
 8025186:	f300 8085 	bgt.w	8025294 <__kernel_rem_pio2+0x62c>
 802518a:	9c06      	ldr	r4, [sp, #24]
 802518c:	2000      	movs	r0, #0
 802518e:	3408      	adds	r4, #8
 8025190:	2100      	movs	r1, #0
 8025192:	2d01      	cmp	r5, #1
 8025194:	f300 809d 	bgt.w	80252d2 <__kernel_rem_pio2+0x66a>
 8025198:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 802519c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80251a0:	f1bb 0f00 	cmp.w	fp, #0
 80251a4:	f040 809b 	bne.w	80252de <__kernel_rem_pio2+0x676>
 80251a8:	9b01      	ldr	r3, [sp, #4]
 80251aa:	e9c3 5600 	strd	r5, r6, [r3]
 80251ae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80251b2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80251b6:	e7ca      	b.n	802514e <__kernel_rem_pio2+0x4e6>
 80251b8:	3408      	adds	r4, #8
 80251ba:	ab4a      	add	r3, sp, #296	; 0x128
 80251bc:	441c      	add	r4, r3
 80251be:	462e      	mov	r6, r5
 80251c0:	2000      	movs	r0, #0
 80251c2:	2100      	movs	r1, #0
 80251c4:	2e00      	cmp	r6, #0
 80251c6:	da36      	bge.n	8025236 <__kernel_rem_pio2+0x5ce>
 80251c8:	f1bb 0f00 	cmp.w	fp, #0
 80251cc:	d039      	beq.n	8025242 <__kernel_rem_pio2+0x5da>
 80251ce:	4602      	mov	r2, r0
 80251d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80251d4:	9c01      	ldr	r4, [sp, #4]
 80251d6:	e9c4 2300 	strd	r2, r3, [r4]
 80251da:	4602      	mov	r2, r0
 80251dc:	460b      	mov	r3, r1
 80251de:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80251e2:	f7db f851 	bl	8000288 <__aeabi_dsub>
 80251e6:	ae4c      	add	r6, sp, #304	; 0x130
 80251e8:	2401      	movs	r4, #1
 80251ea:	42a5      	cmp	r5, r4
 80251ec:	da2c      	bge.n	8025248 <__kernel_rem_pio2+0x5e0>
 80251ee:	f1bb 0f00 	cmp.w	fp, #0
 80251f2:	d002      	beq.n	80251fa <__kernel_rem_pio2+0x592>
 80251f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80251f8:	4619      	mov	r1, r3
 80251fa:	9b01      	ldr	r3, [sp, #4]
 80251fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8025200:	e7a5      	b.n	802514e <__kernel_rem_pio2+0x4e6>
 8025202:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8025206:	eb0d 0403 	add.w	r4, sp, r3
 802520a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802520e:	2000      	movs	r0, #0
 8025210:	2100      	movs	r1, #0
 8025212:	2d00      	cmp	r5, #0
 8025214:	da09      	bge.n	802522a <__kernel_rem_pio2+0x5c2>
 8025216:	f1bb 0f00 	cmp.w	fp, #0
 802521a:	d002      	beq.n	8025222 <__kernel_rem_pio2+0x5ba>
 802521c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025220:	4619      	mov	r1, r3
 8025222:	9b01      	ldr	r3, [sp, #4]
 8025224:	e9c3 0100 	strd	r0, r1, [r3]
 8025228:	e791      	b.n	802514e <__kernel_rem_pio2+0x4e6>
 802522a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802522e:	f7db f82d 	bl	800028c <__adddf3>
 8025232:	3d01      	subs	r5, #1
 8025234:	e7ed      	b.n	8025212 <__kernel_rem_pio2+0x5aa>
 8025236:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802523a:	f7db f827 	bl	800028c <__adddf3>
 802523e:	3e01      	subs	r6, #1
 8025240:	e7c0      	b.n	80251c4 <__kernel_rem_pio2+0x55c>
 8025242:	4602      	mov	r2, r0
 8025244:	460b      	mov	r3, r1
 8025246:	e7c5      	b.n	80251d4 <__kernel_rem_pio2+0x56c>
 8025248:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802524c:	f7db f81e 	bl	800028c <__adddf3>
 8025250:	3401      	adds	r4, #1
 8025252:	e7ca      	b.n	80251ea <__kernel_rem_pio2+0x582>
 8025254:	e9da 8900 	ldrd	r8, r9, [sl]
 8025258:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 802525c:	9b02      	ldr	r3, [sp, #8]
 802525e:	3b01      	subs	r3, #1
 8025260:	9302      	str	r3, [sp, #8]
 8025262:	4632      	mov	r2, r6
 8025264:	463b      	mov	r3, r7
 8025266:	4640      	mov	r0, r8
 8025268:	4649      	mov	r1, r9
 802526a:	f7db f80f 	bl	800028c <__adddf3>
 802526e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025272:	4602      	mov	r2, r0
 8025274:	460b      	mov	r3, r1
 8025276:	4640      	mov	r0, r8
 8025278:	4649      	mov	r1, r9
 802527a:	f7db f805 	bl	8000288 <__aeabi_dsub>
 802527e:	4632      	mov	r2, r6
 8025280:	463b      	mov	r3, r7
 8025282:	f7db f803 	bl	800028c <__adddf3>
 8025286:	ed9d 7b08 	vldr	d7, [sp, #32]
 802528a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802528e:	ed8a 7b00 	vstr	d7, [sl]
 8025292:	e76e      	b.n	8025172 <__kernel_rem_pio2+0x50a>
 8025294:	e9d4 8900 	ldrd	r8, r9, [r4]
 8025298:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 802529c:	4640      	mov	r0, r8
 802529e:	4632      	mov	r2, r6
 80252a0:	463b      	mov	r3, r7
 80252a2:	4649      	mov	r1, r9
 80252a4:	f7da fff2 	bl	800028c <__adddf3>
 80252a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80252ac:	4602      	mov	r2, r0
 80252ae:	460b      	mov	r3, r1
 80252b0:	4640      	mov	r0, r8
 80252b2:	4649      	mov	r1, r9
 80252b4:	f7da ffe8 	bl	8000288 <__aeabi_dsub>
 80252b8:	4632      	mov	r2, r6
 80252ba:	463b      	mov	r3, r7
 80252bc:	f7da ffe6 	bl	800028c <__adddf3>
 80252c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80252c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80252c8:	ed84 7b00 	vstr	d7, [r4]
 80252cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80252d0:	e755      	b.n	802517e <__kernel_rem_pio2+0x516>
 80252d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80252d6:	f7da ffd9 	bl	800028c <__adddf3>
 80252da:	3d01      	subs	r5, #1
 80252dc:	e759      	b.n	8025192 <__kernel_rem_pio2+0x52a>
 80252de:	9b01      	ldr	r3, [sp, #4]
 80252e0:	9a01      	ldr	r2, [sp, #4]
 80252e2:	601d      	str	r5, [r3, #0]
 80252e4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80252e8:	605c      	str	r4, [r3, #4]
 80252ea:	609f      	str	r7, [r3, #8]
 80252ec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80252f0:	60d3      	str	r3, [r2, #12]
 80252f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80252f6:	6110      	str	r0, [r2, #16]
 80252f8:	6153      	str	r3, [r2, #20]
 80252fa:	e728      	b.n	802514e <__kernel_rem_pio2+0x4e6>
 80252fc:	41700000 	.word	0x41700000
 8025300:	3e700000 	.word	0x3e700000
 8025304:	00000000 	.word	0x00000000

08025308 <__kernel_sin>:
 8025308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802530c:	ed2d 8b04 	vpush	{d8-d9}
 8025310:	eeb0 8a41 	vmov.f32	s16, s2
 8025314:	eef0 8a61 	vmov.f32	s17, s3
 8025318:	ec55 4b10 	vmov	r4, r5, d0
 802531c:	b083      	sub	sp, #12
 802531e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025322:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8025326:	9001      	str	r0, [sp, #4]
 8025328:	da06      	bge.n	8025338 <__kernel_sin+0x30>
 802532a:	ee10 0a10 	vmov	r0, s0
 802532e:	4629      	mov	r1, r5
 8025330:	f7db fc12 	bl	8000b58 <__aeabi_d2iz>
 8025334:	2800      	cmp	r0, #0
 8025336:	d051      	beq.n	80253dc <__kernel_sin+0xd4>
 8025338:	4622      	mov	r2, r4
 802533a:	462b      	mov	r3, r5
 802533c:	4620      	mov	r0, r4
 802533e:	4629      	mov	r1, r5
 8025340:	f7db f95a 	bl	80005f8 <__aeabi_dmul>
 8025344:	4682      	mov	sl, r0
 8025346:	468b      	mov	fp, r1
 8025348:	4602      	mov	r2, r0
 802534a:	460b      	mov	r3, r1
 802534c:	4620      	mov	r0, r4
 802534e:	4629      	mov	r1, r5
 8025350:	f7db f952 	bl	80005f8 <__aeabi_dmul>
 8025354:	a341      	add	r3, pc, #260	; (adr r3, 802545c <__kernel_sin+0x154>)
 8025356:	e9d3 2300 	ldrd	r2, r3, [r3]
 802535a:	4680      	mov	r8, r0
 802535c:	4689      	mov	r9, r1
 802535e:	4650      	mov	r0, sl
 8025360:	4659      	mov	r1, fp
 8025362:	f7db f949 	bl	80005f8 <__aeabi_dmul>
 8025366:	a33f      	add	r3, pc, #252	; (adr r3, 8025464 <__kernel_sin+0x15c>)
 8025368:	e9d3 2300 	ldrd	r2, r3, [r3]
 802536c:	f7da ff8c 	bl	8000288 <__aeabi_dsub>
 8025370:	4652      	mov	r2, sl
 8025372:	465b      	mov	r3, fp
 8025374:	f7db f940 	bl	80005f8 <__aeabi_dmul>
 8025378:	a33c      	add	r3, pc, #240	; (adr r3, 802546c <__kernel_sin+0x164>)
 802537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802537e:	f7da ff85 	bl	800028c <__adddf3>
 8025382:	4652      	mov	r2, sl
 8025384:	465b      	mov	r3, fp
 8025386:	f7db f937 	bl	80005f8 <__aeabi_dmul>
 802538a:	a33a      	add	r3, pc, #232	; (adr r3, 8025474 <__kernel_sin+0x16c>)
 802538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025390:	f7da ff7a 	bl	8000288 <__aeabi_dsub>
 8025394:	4652      	mov	r2, sl
 8025396:	465b      	mov	r3, fp
 8025398:	f7db f92e 	bl	80005f8 <__aeabi_dmul>
 802539c:	a337      	add	r3, pc, #220	; (adr r3, 802547c <__kernel_sin+0x174>)
 802539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253a2:	f7da ff73 	bl	800028c <__adddf3>
 80253a6:	9b01      	ldr	r3, [sp, #4]
 80253a8:	4606      	mov	r6, r0
 80253aa:	460f      	mov	r7, r1
 80253ac:	b9eb      	cbnz	r3, 80253ea <__kernel_sin+0xe2>
 80253ae:	4602      	mov	r2, r0
 80253b0:	460b      	mov	r3, r1
 80253b2:	4650      	mov	r0, sl
 80253b4:	4659      	mov	r1, fp
 80253b6:	f7db f91f 	bl	80005f8 <__aeabi_dmul>
 80253ba:	a325      	add	r3, pc, #148	; (adr r3, 8025450 <__kernel_sin+0x148>)
 80253bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253c0:	f7da ff62 	bl	8000288 <__aeabi_dsub>
 80253c4:	4642      	mov	r2, r8
 80253c6:	464b      	mov	r3, r9
 80253c8:	f7db f916 	bl	80005f8 <__aeabi_dmul>
 80253cc:	4602      	mov	r2, r0
 80253ce:	460b      	mov	r3, r1
 80253d0:	4620      	mov	r0, r4
 80253d2:	4629      	mov	r1, r5
 80253d4:	f7da ff5a 	bl	800028c <__adddf3>
 80253d8:	4604      	mov	r4, r0
 80253da:	460d      	mov	r5, r1
 80253dc:	ec45 4b10 	vmov	d0, r4, r5
 80253e0:	b003      	add	sp, #12
 80253e2:	ecbd 8b04 	vpop	{d8-d9}
 80253e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253ea:	4b1b      	ldr	r3, [pc, #108]	; (8025458 <__kernel_sin+0x150>)
 80253ec:	ec51 0b18 	vmov	r0, r1, d8
 80253f0:	2200      	movs	r2, #0
 80253f2:	f7db f901 	bl	80005f8 <__aeabi_dmul>
 80253f6:	4632      	mov	r2, r6
 80253f8:	ec41 0b19 	vmov	d9, r0, r1
 80253fc:	463b      	mov	r3, r7
 80253fe:	4640      	mov	r0, r8
 8025400:	4649      	mov	r1, r9
 8025402:	f7db f8f9 	bl	80005f8 <__aeabi_dmul>
 8025406:	4602      	mov	r2, r0
 8025408:	460b      	mov	r3, r1
 802540a:	ec51 0b19 	vmov	r0, r1, d9
 802540e:	f7da ff3b 	bl	8000288 <__aeabi_dsub>
 8025412:	4652      	mov	r2, sl
 8025414:	465b      	mov	r3, fp
 8025416:	f7db f8ef 	bl	80005f8 <__aeabi_dmul>
 802541a:	ec53 2b18 	vmov	r2, r3, d8
 802541e:	f7da ff33 	bl	8000288 <__aeabi_dsub>
 8025422:	a30b      	add	r3, pc, #44	; (adr r3, 8025450 <__kernel_sin+0x148>)
 8025424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025428:	4606      	mov	r6, r0
 802542a:	460f      	mov	r7, r1
 802542c:	4640      	mov	r0, r8
 802542e:	4649      	mov	r1, r9
 8025430:	f7db f8e2 	bl	80005f8 <__aeabi_dmul>
 8025434:	4602      	mov	r2, r0
 8025436:	460b      	mov	r3, r1
 8025438:	4630      	mov	r0, r6
 802543a:	4639      	mov	r1, r7
 802543c:	f7da ff26 	bl	800028c <__adddf3>
 8025440:	4602      	mov	r2, r0
 8025442:	460b      	mov	r3, r1
 8025444:	4620      	mov	r0, r4
 8025446:	4629      	mov	r1, r5
 8025448:	f7da ff1e 	bl	8000288 <__aeabi_dsub>
 802544c:	e7c4      	b.n	80253d8 <__kernel_sin+0xd0>
 802544e:	bf00      	nop
 8025450:	55555549 	.word	0x55555549
 8025454:	3fc55555 	.word	0x3fc55555
 8025458:	3fe00000 	.word	0x3fe00000
 802545c:	5acfd57c 	.word	0x5acfd57c
 8025460:	3de5d93a 	.word	0x3de5d93a
 8025464:	8a2b9ceb 	.word	0x8a2b9ceb
 8025468:	3e5ae5e6 	.word	0x3e5ae5e6
 802546c:	57b1fe7d 	.word	0x57b1fe7d
 8025470:	3ec71de3 	.word	0x3ec71de3
 8025474:	19c161d5 	.word	0x19c161d5
 8025478:	3f2a01a0 	.word	0x3f2a01a0
 802547c:	1110f8a6 	.word	0x1110f8a6
 8025480:	3f811111 	.word	0x3f811111

08025484 <with_errno>:
 8025484:	b570      	push	{r4, r5, r6, lr}
 8025486:	4604      	mov	r4, r0
 8025488:	460d      	mov	r5, r1
 802548a:	4616      	mov	r6, r2
 802548c:	f7fb fdea 	bl	8021064 <__errno>
 8025490:	4629      	mov	r1, r5
 8025492:	6006      	str	r6, [r0, #0]
 8025494:	4620      	mov	r0, r4
 8025496:	bd70      	pop	{r4, r5, r6, pc}

08025498 <xflow>:
 8025498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802549a:	4614      	mov	r4, r2
 802549c:	461d      	mov	r5, r3
 802549e:	b108      	cbz	r0, 80254a4 <xflow+0xc>
 80254a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80254a4:	e9cd 2300 	strd	r2, r3, [sp]
 80254a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80254ac:	4620      	mov	r0, r4
 80254ae:	4629      	mov	r1, r5
 80254b0:	f7db f8a2 	bl	80005f8 <__aeabi_dmul>
 80254b4:	2222      	movs	r2, #34	; 0x22
 80254b6:	b003      	add	sp, #12
 80254b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80254bc:	f7ff bfe2 	b.w	8025484 <with_errno>

080254c0 <__math_uflow>:
 80254c0:	b508      	push	{r3, lr}
 80254c2:	2200      	movs	r2, #0
 80254c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80254c8:	f7ff ffe6 	bl	8025498 <xflow>
 80254cc:	ec41 0b10 	vmov	d0, r0, r1
 80254d0:	bd08      	pop	{r3, pc}

080254d2 <__math_oflow>:
 80254d2:	b508      	push	{r3, lr}
 80254d4:	2200      	movs	r2, #0
 80254d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80254da:	f7ff ffdd 	bl	8025498 <xflow>
 80254de:	ec41 0b10 	vmov	d0, r0, r1
 80254e2:	bd08      	pop	{r3, pc}

080254e4 <finite>:
 80254e4:	b082      	sub	sp, #8
 80254e6:	ed8d 0b00 	vstr	d0, [sp]
 80254ea:	9801      	ldr	r0, [sp, #4]
 80254ec:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80254f0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80254f4:	0fc0      	lsrs	r0, r0, #31
 80254f6:	b002      	add	sp, #8
 80254f8:	4770      	bx	lr
 80254fa:	0000      	movs	r0, r0
 80254fc:	0000      	movs	r0, r0
	...

08025500 <scalbn>:
 8025500:	b570      	push	{r4, r5, r6, lr}
 8025502:	ec55 4b10 	vmov	r4, r5, d0
 8025506:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802550a:	4606      	mov	r6, r0
 802550c:	462b      	mov	r3, r5
 802550e:	b99a      	cbnz	r2, 8025538 <scalbn+0x38>
 8025510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025514:	4323      	orrs	r3, r4
 8025516:	d036      	beq.n	8025586 <scalbn+0x86>
 8025518:	4b39      	ldr	r3, [pc, #228]	; (8025600 <scalbn+0x100>)
 802551a:	4629      	mov	r1, r5
 802551c:	ee10 0a10 	vmov	r0, s0
 8025520:	2200      	movs	r2, #0
 8025522:	f7db f869 	bl	80005f8 <__aeabi_dmul>
 8025526:	4b37      	ldr	r3, [pc, #220]	; (8025604 <scalbn+0x104>)
 8025528:	429e      	cmp	r6, r3
 802552a:	4604      	mov	r4, r0
 802552c:	460d      	mov	r5, r1
 802552e:	da10      	bge.n	8025552 <scalbn+0x52>
 8025530:	a32b      	add	r3, pc, #172	; (adr r3, 80255e0 <scalbn+0xe0>)
 8025532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025536:	e03a      	b.n	80255ae <scalbn+0xae>
 8025538:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802553c:	428a      	cmp	r2, r1
 802553e:	d10c      	bne.n	802555a <scalbn+0x5a>
 8025540:	ee10 2a10 	vmov	r2, s0
 8025544:	4620      	mov	r0, r4
 8025546:	4629      	mov	r1, r5
 8025548:	f7da fea0 	bl	800028c <__adddf3>
 802554c:	4604      	mov	r4, r0
 802554e:	460d      	mov	r5, r1
 8025550:	e019      	b.n	8025586 <scalbn+0x86>
 8025552:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025556:	460b      	mov	r3, r1
 8025558:	3a36      	subs	r2, #54	; 0x36
 802555a:	4432      	add	r2, r6
 802555c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025560:	428a      	cmp	r2, r1
 8025562:	dd08      	ble.n	8025576 <scalbn+0x76>
 8025564:	2d00      	cmp	r5, #0
 8025566:	a120      	add	r1, pc, #128	; (adr r1, 80255e8 <scalbn+0xe8>)
 8025568:	e9d1 0100 	ldrd	r0, r1, [r1]
 802556c:	da1c      	bge.n	80255a8 <scalbn+0xa8>
 802556e:	a120      	add	r1, pc, #128	; (adr r1, 80255f0 <scalbn+0xf0>)
 8025570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025574:	e018      	b.n	80255a8 <scalbn+0xa8>
 8025576:	2a00      	cmp	r2, #0
 8025578:	dd08      	ble.n	802558c <scalbn+0x8c>
 802557a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802557e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025582:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025586:	ec45 4b10 	vmov	d0, r4, r5
 802558a:	bd70      	pop	{r4, r5, r6, pc}
 802558c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025590:	da19      	bge.n	80255c6 <scalbn+0xc6>
 8025592:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025596:	429e      	cmp	r6, r3
 8025598:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802559c:	dd0a      	ble.n	80255b4 <scalbn+0xb4>
 802559e:	a112      	add	r1, pc, #72	; (adr r1, 80255e8 <scalbn+0xe8>)
 80255a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	d1e2      	bne.n	802556e <scalbn+0x6e>
 80255a8:	a30f      	add	r3, pc, #60	; (adr r3, 80255e8 <scalbn+0xe8>)
 80255aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255ae:	f7db f823 	bl	80005f8 <__aeabi_dmul>
 80255b2:	e7cb      	b.n	802554c <scalbn+0x4c>
 80255b4:	a10a      	add	r1, pc, #40	; (adr r1, 80255e0 <scalbn+0xe0>)
 80255b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80255ba:	2b00      	cmp	r3, #0
 80255bc:	d0b8      	beq.n	8025530 <scalbn+0x30>
 80255be:	a10e      	add	r1, pc, #56	; (adr r1, 80255f8 <scalbn+0xf8>)
 80255c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80255c4:	e7b4      	b.n	8025530 <scalbn+0x30>
 80255c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80255ca:	3236      	adds	r2, #54	; 0x36
 80255cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80255d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80255d4:	4620      	mov	r0, r4
 80255d6:	4b0c      	ldr	r3, [pc, #48]	; (8025608 <scalbn+0x108>)
 80255d8:	2200      	movs	r2, #0
 80255da:	e7e8      	b.n	80255ae <scalbn+0xae>
 80255dc:	f3af 8000 	nop.w
 80255e0:	c2f8f359 	.word	0xc2f8f359
 80255e4:	01a56e1f 	.word	0x01a56e1f
 80255e8:	8800759c 	.word	0x8800759c
 80255ec:	7e37e43c 	.word	0x7e37e43c
 80255f0:	8800759c 	.word	0x8800759c
 80255f4:	fe37e43c 	.word	0xfe37e43c
 80255f8:	c2f8f359 	.word	0xc2f8f359
 80255fc:	81a56e1f 	.word	0x81a56e1f
 8025600:	43500000 	.word	0x43500000
 8025604:	ffff3cb0 	.word	0xffff3cb0
 8025608:	3c900000 	.word	0x3c900000

0802560c <_close>:
 802560c:	4b02      	ldr	r3, [pc, #8]	; (8025618 <_close+0xc>)
 802560e:	2258      	movs	r2, #88	; 0x58
 8025610:	601a      	str	r2, [r3, #0]
 8025612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025616:	4770      	bx	lr
 8025618:	2000f49c 	.word	0x2000f49c

0802561c <_fstat>:
 802561c:	4b02      	ldr	r3, [pc, #8]	; (8025628 <_fstat+0xc>)
 802561e:	2258      	movs	r2, #88	; 0x58
 8025620:	601a      	str	r2, [r3, #0]
 8025622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025626:	4770      	bx	lr
 8025628:	2000f49c 	.word	0x2000f49c

0802562c <_getpid>:
 802562c:	4b02      	ldr	r3, [pc, #8]	; (8025638 <_getpid+0xc>)
 802562e:	2258      	movs	r2, #88	; 0x58
 8025630:	601a      	str	r2, [r3, #0]
 8025632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025636:	4770      	bx	lr
 8025638:	2000f49c 	.word	0x2000f49c

0802563c <_isatty>:
 802563c:	4b02      	ldr	r3, [pc, #8]	; (8025648 <_isatty+0xc>)
 802563e:	2258      	movs	r2, #88	; 0x58
 8025640:	601a      	str	r2, [r3, #0]
 8025642:	2000      	movs	r0, #0
 8025644:	4770      	bx	lr
 8025646:	bf00      	nop
 8025648:	2000f49c 	.word	0x2000f49c

0802564c <_kill>:
 802564c:	4b02      	ldr	r3, [pc, #8]	; (8025658 <_kill+0xc>)
 802564e:	2258      	movs	r2, #88	; 0x58
 8025650:	601a      	str	r2, [r3, #0]
 8025652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025656:	4770      	bx	lr
 8025658:	2000f49c 	.word	0x2000f49c

0802565c <_lseek>:
 802565c:	4b02      	ldr	r3, [pc, #8]	; (8025668 <_lseek+0xc>)
 802565e:	2258      	movs	r2, #88	; 0x58
 8025660:	601a      	str	r2, [r3, #0]
 8025662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025666:	4770      	bx	lr
 8025668:	2000f49c 	.word	0x2000f49c

0802566c <_read>:
 802566c:	4b02      	ldr	r3, [pc, #8]	; (8025678 <_read+0xc>)
 802566e:	2258      	movs	r2, #88	; 0x58
 8025670:	601a      	str	r2, [r3, #0]
 8025672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025676:	4770      	bx	lr
 8025678:	2000f49c 	.word	0x2000f49c

0802567c <_sbrk>:
 802567c:	4a04      	ldr	r2, [pc, #16]	; (8025690 <_sbrk+0x14>)
 802567e:	6811      	ldr	r1, [r2, #0]
 8025680:	4603      	mov	r3, r0
 8025682:	b909      	cbnz	r1, 8025688 <_sbrk+0xc>
 8025684:	4903      	ldr	r1, [pc, #12]	; (8025694 <_sbrk+0x18>)
 8025686:	6011      	str	r1, [r2, #0]
 8025688:	6810      	ldr	r0, [r2, #0]
 802568a:	4403      	add	r3, r0
 802568c:	6013      	str	r3, [r2, #0]
 802568e:	4770      	bx	lr
 8025690:	2000f4a0 	.word	0x2000f4a0
 8025694:	2000f4a8 	.word	0x2000f4a8

08025698 <_write>:
 8025698:	4b02      	ldr	r3, [pc, #8]	; (80256a4 <_write+0xc>)
 802569a:	2258      	movs	r2, #88	; 0x58
 802569c:	601a      	str	r2, [r3, #0]
 802569e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80256a2:	4770      	bx	lr
 80256a4:	2000f49c 	.word	0x2000f49c

080256a8 <_exit>:
 80256a8:	e7fe      	b.n	80256a8 <_exit>
	...

080256ac <_init>:
 80256ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256ae:	bf00      	nop
 80256b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80256b2:	bc08      	pop	{r3}
 80256b4:	469e      	mov	lr, r3
 80256b6:	4770      	bx	lr

080256b8 <_fini>:
 80256b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256ba:	bf00      	nop
 80256bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80256be:	bc08      	pop	{r3}
 80256c0:	469e      	mov	lr, r3
 80256c2:	4770      	bx	lr
