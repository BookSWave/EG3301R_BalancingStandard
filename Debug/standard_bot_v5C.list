
standard_bot_v5C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08022718  08022718  00032718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080235a0  080235a0  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  080235a0  080235a0  000335a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080235a8  080235a8  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080235a8  080235a8  000335a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080235ac  080235ac  000335ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  080235b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eeb8  200002e8  08023894  000402e8  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  2000f1a0  08023894  0004f1a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f4c7  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a38c  00000000  00000000  0007f7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c70  00000000  00000000  00089b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002810  00000000  00000000  0008c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036731  00000000  00000000  0008efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004afc3  00000000  00000000  000c5719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4be9  00000000  00000000  001106dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002052c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cfc0  00000000  00000000  00205318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  002122d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  002123a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080226fc 	.word	0x080226fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	080226fc 	.word	0x080226fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	4613      	mov	r3, r2
 8001004:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8001006:	e00a      	b.n	800101e <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60fa      	str	r2, [r7, #12]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4053      	eors	r3, r2
 8001014:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <get_CRC8_check_sum+0x40>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ef      	bne.n	8001008 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8001028:	79fb      	ldrb	r3, [r7, #7]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	0802286c 	.word	0x0802286c

0800103c <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <verify_CRC8_check_sum+0x1a>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d801      	bhi.n	800105a <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 8001056:	2300      	movs	r3, #0
 8001058:	e013      	b.n	8001082 <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3b01      	subs	r3, #1
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffc8 	bl	8000ff8 <get_CRC8_check_sum>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	429a      	cmp	r2, r3
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <append_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
    unsigned char ucCRC = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d012      	beq.n	80010c4 <append_CRC8_check_sum+0x3a>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d90f      	bls.n	80010c4 <append_CRC8_check_sum+0x3a>
    {
        return;
    }
    ucCRC = get_CRC8_check_sum((unsigned char *)pch_message, dw_length - 1, CRC8_INIT);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	22ff      	movs	r2, #255	; 0xff
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffa3 	bl	8000ff8 <get_CRC8_check_sum>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
    pch_message[dw_length - 1] = ucCRC;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e000      	b.n	80010c6 <append_CRC8_check_sum+0x3c>
        return;
 80010c4:	bf00      	nop
}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d113      	bne.n	8001108 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 80010e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e4:	e016      	b.n	8001114 <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	60fa      	str	r2, [r7, #12]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	88f9      	ldrh	r1, [r7, #6]
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	404b      	eors	r3, r1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <get_CRC16_check_sum+0x54>)
 8001100:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001104:	4053      	eors	r3, r2
 8001106:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e9      	bne.n	80010e6 <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 8001112:	88fb      	ldrh	r3, [r7, #6]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	0802296c 	.word	0x0802296c

08001124 <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <verify_CRC16_check_sum+0x1a>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d801      	bhi.n	8001142 <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e020      	b.n	8001184 <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3b02      	subs	r3, #2
 8001146:	4a11      	ldr	r2, [pc, #68]	; (800118c <verify_CRC16_check_sum+0x68>)
 8001148:	8812      	ldrh	r2, [r2, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffbd 	bl	80010cc <get_CRC16_check_sum>
 8001152:	4603      	mov	r3, r0
 8001154:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	3a02      	subs	r2, #2
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	440a      	add	r2, r1
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4293      	cmp	r3, r2
 8001166:	d10c      	bne.n	8001182 <verify_CRC16_check_sum+0x5e>
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29b      	uxth	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	3a01      	subs	r2, #1
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	440a      	add	r2, r1
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <verify_CRC16_check_sum+0x5e>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <verify_CRC16_check_sum+0x60>
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000

08001190 <append_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC16_check_sum(uint8_t * pchMessage,uint32_t dwLength)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01d      	beq.n	80011e0 <append_CRC16_check_sum+0x50>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d91a      	bls.n	80011e0 <append_CRC16_check_sum+0x50>
    {
        return;
    }
    wCRC = get_CRC16_check_sum ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3b02      	subs	r3, #2
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <append_CRC16_check_sum+0x58>)
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff89 	bl	80010cc <get_CRC16_check_sum>
 80011ba:	4603      	mov	r3, r0
 80011bc:	81fb      	strh	r3, [r7, #14]
    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3b02      	subs	r3, #2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	89fa      	ldrh	r2, [r7, #14]
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b299      	uxth	r1, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e000      	b.n	80011e2 <append_CRC16_check_sum+0x52>
        return;
 80011e0:	bf00      	nop
}
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000

080011ec <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d104      	bne.n	8001206 <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <buzzer+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001204:	e00c      	b.n	8001220 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f24a 4210 	movw	r2, #42000	; 0xa410
 800120c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <buzzer+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
		htim4.Instance->CCR3 = 500;
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <buzzer+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	2000152c 	.word	0x2000152c

08001230 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f003 fe21 	bl	8004e80 <can_ISR>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f003 fe16 	bl	8004e80 <can_ISR>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	2100      	movs	r1, #0
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f00a ff1b 	bl	800c0aa <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	2101      	movs	r1, #1
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f00a ff0a 	bl	800c0aa <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	2228      	movs	r2, #40	; 0x28
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f01a f984 	bl	801b5c2 <memset>
    can_filter_st.FilterActivation = ENABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	0c1b      	lsrs	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <can_start+0xa4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d111      	bne.n	800130c <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f00a fcd8 	bl	800bcac <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f00a fdb5 	bl	800be6c <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001302:	2102      	movs	r1, #2
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f00a ffe2 	bl	800c2ce <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 800130a:	e017      	b.n	800133c <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <can_start+0xa8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d112      	bne.n	800133c <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 800131a:	230e      	movs	r3, #14
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
		can_filter_st.FilterBank = 14;
 800131e:	230e      	movs	r3, #14
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f00a fcbf 	bl	800bcac <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f00a fd9c 	bl	800be6c <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 8001334:	2110      	movs	r1, #16
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f00a ffc9 	bl	800c2ce <HAL_CAN_ActivateNotification>
}
 800133c:	bf00      	nop
 800133e:	3738      	adds	r7, #56	; 0x38
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40006400 	.word	0x40006400
 8001348:	40006800 	.word	0x40006800

0800134c <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8001354:	4b71      	ldr	r3, [pc, #452]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b70      	ldr	r3, [pc, #448]	; (800151c <dbus_remote_ISR+0x1d0>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21b      	sxth	r3, r3
 8001366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b6c      	ldr	r3, [pc, #432]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800136e:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 8001370:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	b29b      	uxth	r3, r3
 8001378:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b67      	ldr	r3, [pc, #412]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001382:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8001384:	4b65      	ldr	r3, [pc, #404]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	b21b      	sxth	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b21b      	sxth	r3, r3
 800139a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013a2:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 80013a4:	4b5e      	ldr	r3, [pc, #376]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013b6:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80013b8:	4b58      	ldr	r3, [pc, #352]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 80013ce:	4b53      	ldr	r3, [pc, #332]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	029b      	lsls	r3, r3, #10
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b21b      	sxth	r3, r3
 80013da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013de:	b21a      	sxth	r2, r3
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013e2:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80013f6:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 80013f8:	4b48      	ldr	r3, [pc, #288]	; (800151c <dbus_remote_ISR+0x1d0>)
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001404:	795b      	ldrb	r3, [r3, #5]
 8001406:	01db      	lsls	r3, r3, #7
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b42      	ldr	r3, [pc, #264]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001416:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800141a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800141e:	b29b      	uxth	r3, r3
 8001420:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800142a:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 800142c:	4b3b      	ldr	r3, [pc, #236]	; (800151c <dbus_remote_ISR+0x1d0>)
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	b2db      	uxtb	r3, r3
 8001434:	109b      	asrs	r3, r3, #2
 8001436:	b25b      	sxtb	r3, r3
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	b25a      	sxtb	r2, r3
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001440:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 8001442:	4b36      	ldr	r3, [pc, #216]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001444:	795b      	ldrb	r3, [r3, #5]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	b2db      	uxtb	r3, r3
 800144a:	b25b      	sxtb	r3, r3
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	b25a      	sxtb	r2, r3
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001454:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <dbus_remote_ISR+0x1d0>)
 800145e:	79db      	ldrb	r3, [r3, #7]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <dbus_remote_ISR+0x1d4>)
 800146a:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <dbus_remote_ISR+0x1d0>)
 800146e:	7a1b      	ldrb	r3, [r3, #8]
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001474:	7a5b      	ldrb	r3, [r3, #9]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001480:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <dbus_remote_ISR+0x1d0>)
 8001484:	7a9b      	ldrb	r3, [r3, #10]
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <dbus_remote_ISR+0x1d0>)
 800148a:	7adb      	ldrb	r3, [r3, #11]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <dbus_remote_ISR+0x1d4>)
 8001496:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <dbus_remote_ISR+0x1d0>)
 800149a:	7b1b      	ldrb	r3, [r3, #12]
 800149c:	b25a      	sxtb	r2, r3
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014a0:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014a4:	7b5b      	ldrb	r3, [r3, #13]
 80014a6:	b25a      	sxtb	r2, r3
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014aa:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014ae:	7b9b      	ldrb	r3, [r3, #14]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014b4:	835a      	strh	r2, [r3, #26]
	remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014b8:	7c1b      	ldrb	r3, [r3, #16]
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <dbus_remote_ISR+0x1d0>)
 80014be:	7c5b      	ldrb	r3, [r3, #17]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014ca:	839a      	strh	r2, [r3, #28]
	remote_cmd.side_dial -= JOYSTICK_OFFSET;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b21a      	sxth	r2, r3
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014de:	839a      	strh	r2, [r3, #28]
	remote_cmd.last_time = HAL_GetTick();
 80014e0:	f00a f856 	bl	800b590 <HAL_GetTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <dbus_remote_ISR+0x1d4>)
 80014e8:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <dbus_remote_ISR+0x1d8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f018 f94f 	bl	801979c <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <dbus_remote_ISR+0x1c8>
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <dbus_remote_ISR+0x1dc>)
 8001506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	f3bf 8f6f 	isb	sy
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000304 	.word	0x20000304
 8001520:	20000318 	.word	0x20000318
 8001524:	20000450 	.word	0x20000450
 8001528:	e000ed04 	.word	0xe000ed04

0800152c <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <dbus_remote_start+0x13c>)
 8001534:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <dbus_remote_start+0x140>)
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	f040 808b 	bne.w	800165e <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <dbus_remote_start+0x26>
			return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e086      	b.n	8001660 <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <dbus_remote_start+0x34>
 800155c:	2302      	movs	r3, #2
 800155e:	e07f      	b.n	8001660 <dbus_remote_start+0x134>
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	2201      	movs	r2, #1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
		huart->pRxBuffPtr = pData;
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	2212      	movs	r2, #18
 8001578:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	2200      	movs	r2, #0
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	2222      	movs	r2, #34	; 0x22
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <dbus_remote_start+0x144>)
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001594:	2200      	movs	r2, #0
 8001596:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3304      	adds	r3, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2312      	movs	r3, #18
 80015b0:	f00b fa90 	bl	800cad4 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 80015ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e0:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001600:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	2b01      	cmp	r3, #1
 8001608:	d125      	bne.n	8001656 <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	330c      	adds	r3, #12
 8001626:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	e853 3f00 	ldrex	r3, [r3]
 800162e:	613b      	str	r3, [r7, #16]
   return(result);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	330c      	adds	r3, #12
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	623a      	str	r2, [r7, #32]
 8001642:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001644:	69f9      	ldr	r1, [r7, #28]
 8001646:	6a3a      	ldr	r2, [r7, #32]
 8001648:	e841 2300 	strex	r3, r2, [r1]
 800164c:	61bb      	str	r3, [r7, #24]
   return(result);
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1e5      	bne.n	8001620 <dbus_remote_start+0xf4>
 8001654:	e001      	b.n	800165a <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e002      	b.n	8001660 <dbus_remote_start+0x134>
		}
		return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 800165e:	2302      	movs	r3, #2
	}
}
 8001660:	4618      	mov	r0, r3
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000304 	.word	0x20000304
 800166c:	20001648 	.word	0x20001648
 8001670:	0800134d 	.word	0x0800134d

08001674 <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	4802      	ldr	r0, [pc, #8]	; (8001688 <laser_on+0x14>)
 8001680:	f00b ff24 	bl	800d4cc <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40020800 	.word	0x40020800

0800168c <laser_off>:

void laser_off()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <laser_off+0x14>)
 8001698:	f00b ff18 	bl	800d4cc <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020800 	.word	0x40020800

080016a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80016a8:	f3bf 8f4f 	dsb	sy
}
 80016ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <__NVIC_SystemReset+0x24>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016b6:	4904      	ldr	r1, [pc, #16]	; (80016c8 <__NVIC_SystemReset+0x24>)
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_SystemReset+0x28>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016be:	f3bf 8f4f 	dsb	sy
}
 80016c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <__NVIC_SystemReset+0x20>
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	05fa0004 	.word	0x05fa0004

080016d0 <inv_sqrt>:
 * @brief  fast inverse square-root, to calculate 1/Sqrt(x)
 * @param  x: the number need to be calculated
 * @retval 1/Sqrt(x)
 * @usage  call in imu_ahrs_update() function
 */
float inv_sqrt(float x) {
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80016da:	edd7 7a01 	vldr	s15, [r7, #4]
 80016de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	105a      	asrs	r2, r3, #1
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <inv_sqrt+0x74>)
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001708:	ed97 7a04 	vldr	s14, [r7, #16]
 800170c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001714:	edd7 7a04 	vldr	s15, [r7, #16]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	ee07 3a90 	vmov	s15, r3
}
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	5f3759df 	.word	0x5f3759df

08001748 <gyro_write_byte>:

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af02      	add	r7, sp, #8
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 8001758:	2200      	movs	r2, #0
 800175a:	2101      	movs	r1, #1
 800175c:	4811      	ldr	r0, [pc, #68]	; (80017a4 <gyro_write_byte+0x5c>)
 800175e:	f00b feb5 	bl	800d4cc <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001766:	f107 020e 	add.w	r2, r7, #14
 800176a:	f107 010f 	add.w	r1, r7, #15
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <gyro_write_byte+0x60>)
 8001776:	f00f fd39 	bl	80111ec <HAL_SPI_TransmitReceive>
	tx = data;
 800177a:	79bb      	ldrb	r3, [r7, #6]
 800177c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800177e:	f107 020e 	add.w	r2, r7, #14
 8001782:	f107 010f 	add.w	r1, r7, #15
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <gyro_write_byte+0x60>)
 800178e:	f00f fd2d 	bl	80111ec <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 8001792:	2201      	movs	r2, #1
 8001794:	2101      	movs	r1, #1
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <gyro_write_byte+0x5c>)
 8001798:	f00b fe98 	bl	800d4cc <HAL_GPIO_WritePin>
	return;
 800179c:	bf00      	nop
}
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40020400 	.word	0x40020400
 80017a8:	2000133c 	.word	0x2000133c

080017ac <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <gyro_read_byte+0x54>)
 80017bc:	f00b fe86 	bl	800d4cc <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017ca:	f107 020f 	add.w	r2, r7, #15
 80017ce:	f107 010e 	add.w	r1, r7, #14
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <gyro_read_byte+0x58>)
 80017da:	f00f fd07 	bl	80111ec <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80017de:	f107 010f 	add.w	r1, r7, #15
 80017e2:	2364      	movs	r3, #100	; 0x64
 80017e4:	2201      	movs	r2, #1
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <gyro_read_byte+0x58>)
 80017e8:	f00f fbef 	bl	8010fca <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 80017ec:	2201      	movs	r2, #1
 80017ee:	2101      	movs	r1, #1
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <gyro_read_byte+0x54>)
 80017f2:	f00b fe6b 	bl	800d4cc <HAL_GPIO_WritePin>
	return rx;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020400 	.word	0x40020400
 8001804:	2000133c 	.word	0x2000133c

08001808 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af02      	add	r7, sp, #8
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001818:	2200      	movs	r2, #0
 800181a:	2101      	movs	r1, #1
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <gyro_read_bytes+0x5c>)
 800181e:	f00b fe55 	bl	800d4cc <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001828:	b2db      	uxtb	r3, r3
 800182a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800182c:	f107 020e 	add.w	r2, r7, #14
 8001830:	f107 010f 	add.w	r1, r7, #15
 8001834:	2364      	movs	r3, #100	; 0x64
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <gyro_read_bytes+0x60>)
 800183c:	f00f fcd6 	bl	80111ec <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	b29a      	uxth	r2, r3
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <gyro_read_bytes+0x60>)
 800184a:	f00f fbbe 	bl	8010fca <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 800184e:	2201      	movs	r2, #1
 8001850:	2101      	movs	r1, #1
 8001852:	4804      	ldr	r0, [pc, #16]	; (8001864 <gyro_read_bytes+0x5c>)
 8001854:	f00b fe3a 	bl	800d4cc <HAL_GPIO_WritePin>
	return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020400 	.word	0x40020400
 8001868:	2000133c 	.word	0x2000133c

0800186c <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af02      	add	r7, sp, #8
 8001872:	4603      	mov	r3, r0
 8001874:	460a      	mov	r2, r1
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	4613      	mov	r3, r2
 800187a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 800187c:	2200      	movs	r2, #0
 800187e:	2110      	movs	r1, #16
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <accel_write_byte+0x5c>)
 8001882:	f00b fe23 	bl	800d4cc <HAL_GPIO_WritePin>
	tx = reg;
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800188a:	f107 020e 	add.w	r2, r7, #14
 800188e:	f107 010f 	add.w	r1, r7, #15
 8001892:	2364      	movs	r3, #100	; 0x64
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <accel_write_byte+0x60>)
 800189a:	f00f fca7 	bl	80111ec <HAL_SPI_TransmitReceive>
	tx = data;
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018a2:	f107 020e 	add.w	r2, r7, #14
 80018a6:	f107 010f 	add.w	r1, r7, #15
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <accel_write_byte+0x60>)
 80018b2:	f00f fc9b 	bl	80111ec <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 80018b6:	2201      	movs	r2, #1
 80018b8:	2110      	movs	r1, #16
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <accel_write_byte+0x5c>)
 80018bc:	f00b fe06 	bl	800d4cc <HAL_GPIO_WritePin>
	return;
 80018c0:	bf00      	nop
}
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000
 80018cc:	2000133c 	.word	0x2000133c

080018d0 <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80018da:	2200      	movs	r2, #0
 80018dc:	2110      	movs	r1, #16
 80018de:	4816      	ldr	r0, [pc, #88]	; (8001938 <accel_read_byte+0x68>)
 80018e0:	f00b fdf4 	bl	800d4cc <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018ee:	f107 020e 	add.w	r2, r7, #14
 80018f2:	f107 010f 	add.w	r1, r7, #15
 80018f6:	2364      	movs	r3, #100	; 0x64
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <accel_read_byte+0x6c>)
 80018fe:	f00f fc75 	bl	80111ec <HAL_SPI_TransmitReceive>
	tx = 0x55;
 8001902:	2355      	movs	r3, #85	; 0x55
 8001904:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001906:	f107 010e 	add.w	r1, r7, #14
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	2201      	movs	r2, #1
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <accel_read_byte+0x6c>)
 8001910:	f00f fb5b 	bl	8010fca <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001914:	f107 010e 	add.w	r1, r7, #14
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	2201      	movs	r2, #1
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <accel_read_byte+0x6c>)
 800191e:	f00f fb54 	bl	8010fca <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001922:	2201      	movs	r2, #1
 8001924:	2110      	movs	r1, #16
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <accel_read_byte+0x68>)
 8001928:	f00b fdd0 	bl	800d4cc <HAL_GPIO_WritePin>
	return rx;
 800192c:	7bbb      	ldrb	r3, [r7, #14]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020000 	.word	0x40020000
 800193c:	2000133c 	.word	0x2000133c

08001940 <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af02      	add	r7, sp, #8
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	4613      	mov	r3, r2
 800194e:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 8001950:	2200      	movs	r2, #0
 8001952:	2110      	movs	r1, #16
 8001954:	4814      	ldr	r0, [pc, #80]	; (80019a8 <accel_read_bytes+0x68>)
 8001956:	f00b fdb9 	bl	800d4cc <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001960:	b2db      	uxtb	r3, r3
 8001962:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001964:	f107 020e 	add.w	r2, r7, #14
 8001968:	f107 010f 	add.w	r1, r7, #15
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	480e      	ldr	r0, [pc, #56]	; (80019ac <accel_read_bytes+0x6c>)
 8001974:	f00f fc3a 	bl	80111ec <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001978:	f107 010e 	add.w	r1, r7, #14
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	2201      	movs	r2, #1
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <accel_read_bytes+0x6c>)
 8001982:	f00f fb22 	bl	8010fca <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	6839      	ldr	r1, [r7, #0]
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <accel_read_bytes+0x6c>)
 8001990:	f00f fb1b 	bl	8010fca <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001994:	2201      	movs	r2, #1
 8001996:	2110      	movs	r1, #16
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <accel_read_bytes+0x68>)
 800199a:	f00b fd97 	bl	800d4cc <HAL_GPIO_WritePin>
	return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40020000 	.word	0x40020000
 80019ac:	2000133c 	.word	0x2000133c

080019b0 <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80019b6:	21b6      	movs	r1, #182	; 0xb6
 80019b8:	2014      	movs	r0, #20
 80019ba:	f7ff fec5 	bl	8001748 <gyro_write_byte>
	HAL_Delay(10);
 80019be:	200a      	movs	r0, #10
 80019c0:	f009 fdf2 	bl	800b5a8 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2011      	movs	r0, #17
 80019c8:	f7ff febe 	bl	8001748 <gyro_write_byte>
	HAL_Delay(2);
 80019cc:	2002      	movs	r0, #2
 80019ce:	f009 fdeb 	bl	800b5a8 <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff feea 	bl	80017ac <gyro_read_byte>
 80019d8:	4603      	mov	r3, r0
 80019da:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 80019dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d001      	beq.n	80019e8 <gyro_init+0x38>
		NVIC_SystemReset();
 80019e4:	f7ff fe5e 	bl	80016a4 <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 80019e8:	2002      	movs	r0, #2
 80019ea:	f009 fddd 	bl	800b5a8 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 80019ee:	2102      	movs	r1, #2
 80019f0:	200f      	movs	r0, #15
 80019f2:	f7ff fea9 	bl	8001748 <gyro_write_byte>
	HAL_Delay(2);
 80019f6:	2002      	movs	r0, #2
 80019f8:	f009 fdd6 	bl	800b5a8 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 80019fc:	2182      	movs	r1, #130	; 0x82
 80019fe:	2010      	movs	r0, #16
 8001a00:	f7ff fea2 	bl	8001748 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_1000_116_HZ));
	HAL_Delay(2);
 8001a04:	2002      	movs	r0, #2
 8001a06:	f009 fdcf 	bl	800b5a8 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2016      	movs	r0, #22
 8001a0e:	f7ff fe9b 	bl	8001748 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f009 fdc8 	bl	800b5a8 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001a18:	2101      	movs	r1, #1
 8001a1a:	2018      	movs	r0, #24
 8001a1c:	f7ff fe94 	bl	8001748 <gyro_write_byte>
	HAL_Delay(2);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f009 fdc1 	bl	800b5a8 <HAL_Delay>

	return 0;
 8001a26:	2300      	movs	r3, #0
	//blah
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <accel_init>:

uint8_t accel_init() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff ff4a 	bl	80018d0 <accel_read_byte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f009 fdb1 	bl	800b5a8 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff ff42 	bl	80018d0 <accel_read_byte>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a50:	2002      	movs	r0, #2
 8001a52:	f009 fda9 	bl	800b5a8 <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001a56:	21b6      	movs	r1, #182	; 0xb6
 8001a58:	207e      	movs	r0, #126	; 0x7e
 8001a5a:	f7ff ff07 	bl	800186c <accel_write_byte>
	HAL_Delay(10);
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f009 fda2 	bl	800b5a8 <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff ff33 	bl	80018d0 <accel_read_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f009 fd9a 	bl	800b5a8 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff ff2b 	bl	80018d0 <accel_read_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f009 fd92 	bl	800b5a8 <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b1e      	cmp	r3, #30
 8001a88:	d001      	beq.n	8001a8e <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e023      	b.n	8001ad6 <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001a8e:	2104      	movs	r1, #4
 8001a90:	207d      	movs	r0, #125	; 0x7d
 8001a92:	f7ff feeb 	bl	800186c <accel_write_byte>
	HAL_Delay(2);
 8001a96:	2002      	movs	r0, #2
 8001a98:	f009 fd86 	bl	800b5a8 <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	207c      	movs	r0, #124	; 0x7c
 8001aa0:	f7ff fee4 	bl	800186c <accel_write_byte>
	HAL_Delay(2);
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f009 fd7f 	bl	800b5a8 <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001aaa:	21a8      	movs	r1, #168	; 0xa8
 8001aac:	2040      	movs	r0, #64	; 0x40
 8001aae:	f7ff fedd 	bl	800186c <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_100_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f009 fd78 	bl	800b5a8 <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001ab8:	2101      	movs	r1, #1
 8001aba:	2041      	movs	r0, #65	; 0x41
 8001abc:	f7ff fed6 	bl	800186c <accel_write_byte>
	HAL_Delay(2);
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f009 fd71 	bl	800b5a8 <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	2053      	movs	r0, #83	; 0x53
 8001aca:	f7ff fecf 	bl	800186c <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f009 fd6a 	bl	800b5a8 <HAL_Delay>
	return 0;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af04      	add	r7, sp, #16
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2305      	movs	r3, #5
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	2301      	movs	r3, #1
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	f107 030f 	add.w	r3, r7, #15
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	211c      	movs	r1, #28
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <mag_read_single_reg+0x34>)
 8001b06:	f00b ff51 	bl	800d9ac <HAL_I2C_Mem_Read>
	return data;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20001218 	.word	0x20001218

08001b18 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af04      	add	r7, sp, #16
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	2301      	movs	r3, #1
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	1dbb      	adds	r3, r7, #6
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	211c      	movs	r1, #28
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <mag_write_single_reg+0x34>)
 8001b3e:	f00b fe3b 	bl	800d7b8 <HAL_I2C_Mem_Write>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20001218 	.word	0x20001218

08001b50 <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	4603      	mov	r3, r0
 8001b58:	603a      	str	r2, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	211c      	movs	r1, #28
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <mag_read_multi_reg_dma+0x30>)
 8001b72:	f00c f941 	bl	800ddf8 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20001218 	.word	0x20001218
 8001b84:	00000000 	.word	0x00000000

08001b88 <gyro_offset_cali>:
void reset_imu_data() {

}

//find the offset of the gyro
void gyro_offset_cali() {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
	int32_t gyro_x_total = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
	int32_t gyro_y_total = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
	int32_t gyro_z_total = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
	for (uint16_t i = 0; i < 100; i++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	807b      	strh	r3, [r7, #2]
 8001b9e:	e031      	b.n	8001c04 <gyro_offset_cali+0x7c>
		gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	4935      	ldr	r1, [pc, #212]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7ff fe2f 	bl	8001808 <gyro_read_bytes>
		gyro_x_total += (int16_t)(gyro_buff[1] << 8 | gyro_buff[0]);
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
		gyro_y_total += (int16_t)(gyro_buff[3] << 8 | gyro_buff[2]);
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bc6:	78db      	ldrb	r3, [r3, #3]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60bb      	str	r3, [r7, #8]
		gyro_z_total += (int16_t)(gyro_buff[5] << 8 | gyro_buff[4]);
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001be0:	795b      	ldrb	r3, [r3, #5]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <gyro_offset_cali+0xf0>)
 8001be8:	791b      	ldrb	r3, [r3, #4]
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	607b      	str	r3, [r7, #4]
		HAL_Delay(2);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f009 fcd5 	bl	800b5a8 <HAL_Delay>
	for (uint16_t i = 0; i < 100; i++) {
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	3301      	adds	r3, #1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	2b63      	cmp	r3, #99	; 0x63
 8001c08:	d9ca      	bls.n	8001ba0 <gyro_offset_cali+0x18>
	}
	imu_data.gx_offset = gyro_x_total / 100 + 0.06;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <gyro_offset_cali+0xf4>)
 8001c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c12:	1152      	asrs	r2, r2, #5
 8001c14:	17db      	asrs	r3, r3, #31
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	a314      	add	r3, pc, #80	; (adr r3, 8001c70 <gyro_offset_cali+0xe8>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb32 	bl	800028c <__adddf3>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7fe ff92 	bl	8000b58 <__aeabi_d2iz>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <gyro_offset_cali+0xf8>)
 8001c3a:	865a      	strh	r2, [r3, #50]	; 0x32
	imu_data.gy_offset = gyro_y_total / 100;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <gyro_offset_cali+0xf4>)
 8001c40:	fb82 1203 	smull	r1, r2, r2, r3
 8001c44:	1152      	asrs	r2, r2, #5
 8001c46:	17db      	asrs	r3, r3, #31
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <gyro_offset_cali+0xf8>)
 8001c4e:	869a      	strh	r2, [r3, #52]	; 0x34
	imu_data.gz_offset = gyro_z_total / 100;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <gyro_offset_cali+0xf4>)
 8001c54:	fb82 1203 	smull	r1, r2, r2, r3
 8001c58:	1152      	asrs	r2, r2, #5
 8001c5a:	17db      	asrs	r3, r3, #31
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <gyro_offset_cali+0xf8>)
 8001c62:	86da      	strh	r2, [r3, #54]	; 0x36

}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	f3af 8000 	nop.w
 8001c70:	eb851eb8 	.word	0xeb851eb8
 8001c74:	3faeb851 	.word	0x3faeb851
 8001c78:	20000344 	.word	0x20000344
 8001c7c:	51eb851f 	.word	0x51eb851f
 8001c80:	20000354 	.word	0x20000354

08001c84 <imu_init>:

void imu_init() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <imu_init+0x48>)
 8001c8e:	f00b fc1d 	bl	800d4cc <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001c92:	2200      	movs	r2, #0
 8001c94:	2101      	movs	r1, #1
 8001c96:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <imu_init+0x4c>)
 8001c98:	f00b fc18 	bl	800d4cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c9c:	2064      	movs	r0, #100	; 0x64
 8001c9e:	f009 fc83 	bl	800b5a8 <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <imu_init+0x48>)
 8001ca8:	f00b fc10 	bl	800d4cc <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001cac:	2201      	movs	r2, #1
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <imu_init+0x4c>)
 8001cb2:	f00b fc0b 	bl	800d4cc <HAL_GPIO_WritePin>
	gyro_init();
 8001cb6:	f7ff fe7b 	bl	80019b0 <gyro_init>
	accel_init();
 8001cba:	f7ff feb9 	bl	8001a30 <accel_init>
	ist8310_init();
 8001cbe:	f000 f907 	bl	8001ed0 <ist8310_init>
	gyro_offset_cali();
 8001cc2:	f7ff ff61 	bl	8001b88 <gyro_offset_cali>

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <imu_start_ints>:

void imu_start_ints() {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	2015      	movs	r0, #21
 8001cdc:	f7ff fd34 	bl	8001748 <gyro_write_byte>
	vTaskDelay(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f016 feff 	bl	8018ae4 <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	2058      	movs	r0, #88	; 0x58
 8001cea:	f7ff fdbf 	bl	800186c <accel_write_byte>
	vTaskDelay(10);
 8001cee:	200a      	movs	r0, #10
 8001cf0:	f016 fef8 	bl	8018ae4 <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001cf4:	2108      	movs	r1, #8
 8001cf6:	200b      	movs	r0, #11
 8001cf8:	f7ff ff0e 	bl	8001b18 <mag_write_single_reg>
	imu_init_status = 1;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <imu_start_ints+0x34>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000038c 	.word	0x2000038c

08001d0c <accel_get_data>:

void accel_get_data() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001d10:	2206      	movs	r2, #6
 8001d12:	4903      	ldr	r1, [pc, #12]	; (8001d20 <accel_get_data+0x14>)
 8001d14:	2012      	movs	r0, #18
 8001d16:	f7ff fe13 	bl	8001940 <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000033c 	.word	0x2000033c

08001d24 <accel_process_data>:

void accel_process_data() {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <accel_process_data+0xa8>)
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <accel_process_data+0xa8>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d48:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001dd0 <accel_process_data+0xac>
 8001d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <accel_process_data+0xb0>)
 8001d52:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <accel_process_data+0xa8>)
 8001d58:	78db      	ldrb	r3, [r3, #3]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <accel_process_data+0xa8>)
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d74:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001dd0 <accel_process_data+0xac>
 8001d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <accel_process_data+0xb0>)
 8001d7e:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <accel_process_data+0xa8>)
 8001d84:	795b      	ldrb	r3, [r3, #5]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <accel_process_data+0xa8>)
 8001d8c:	791b      	ldrb	r3, [r3, #4]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001dd0 <accel_process_data+0xac>
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <accel_process_data+0xb0>)
 8001daa:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001dae:	f009 fbef 	bl	800b590 <HAL_GetTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <accel_process_data+0xb0>)
 8001db6:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <accel_process_data+0xb0>)
 8001dba:	3310      	adds	r3, #16
 8001dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbe:	f006 f81f 	bl	8007e00 <accel_data_ready>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000033c 	.word	0x2000033c
 8001dd0:	3aeb3333 	.word	0x3aeb3333
 8001dd4:	20000354 	.word	0x20000354

08001dd8 <gyro_get_data>:

void gyro_get_data() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001ddc:	2206      	movs	r2, #6
 8001dde:	4903      	ldr	r1, [pc, #12]	; (8001dec <gyro_get_data+0x14>)
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff fd11 	bl	8001808 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000344 	.word	0x20000344

08001df0 <gyro_process_data>:

void gyro_process_data() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001df6:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <gyro_process_data+0xd4>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001e08:	88fa      	ldrh	r2, [r7, #6]
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e0c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001e18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e24:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001ecc <gyro_process_data+0xdc>
 8001e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2c:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e48:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ecc <gyro_process_data+0xdc>
 8001e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e6a:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e70:	795b      	ldrb	r3, [r3, #5]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <gyro_process_data+0xd4>)
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <gyro_process_data+0xd8>)
 8001e84:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ecc <gyro_process_data+0xdc>
 8001ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <gyro_process_data+0xd8>)
 8001ea6:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001eaa:	f009 fb71 	bl	800b590 <HAL_GetTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <gyro_process_data+0xd8>)
 8001eb2:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <gyro_process_data+0xd8>)
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	f005 ff76 	bl	8007da8 <gyro_data_ready>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000344 	.word	0x20000344
 8001ec8:	20000354 	.word	0x20000354
 8001ecc:	398ba058 	.word	0x398ba058

08001ed0 <ist8310_init>:

uint8_t ist8310_init() {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2140      	movs	r1, #64	; 0x40
 8001eda:	481d      	ldr	r0, [pc, #116]	; (8001f50 <ist8310_init+0x80>)
 8001edc:	f00b faf6 	bl	800d4cc <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f009 fb61 	bl	800b5a8 <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	4819      	ldr	r0, [pc, #100]	; (8001f50 <ist8310_init+0x80>)
 8001eec:	f00b faee 	bl	800d4cc <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f009 fb59 	bl	800b5a8 <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fdf2 	bl	8001ae0 <mag_read_single_reg>
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d00a      	beq.n	8001f1c <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <ist8310_init+0x84>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <ist8310_init+0x84>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	845a      	strh	r2, [r3, #34]	; 0x22
		imu_data.mag_data.mz = 0;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <ist8310_init+0x84>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	849a      	strh	r2, [r3, #36]	; 0x24
		return 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e015      	b.n	8001f48 <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f009 fb43 	bl	800b5a8 <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001f22:	2109      	movs	r1, #9
 8001f24:	2041      	movs	r0, #65	; 0x41
 8001f26:	f7ff fdf7 	bl	8001b18 <mag_write_single_reg>
	HAL_Delay(2);
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f009 fb3c 	bl	800b5a8 <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001f30:	21c0      	movs	r1, #192	; 0xc0
 8001f32:	2042      	movs	r0, #66	; 0x42
 8001f34:	f7ff fdf0 	bl	8001b18 <mag_write_single_reg>
	HAL_Delay(2);
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f009 fb35 	bl	800b5a8 <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001f3e:	210b      	movs	r1, #11
 8001f40:	200a      	movs	r0, #10
 8001f42:	f7ff fde9 	bl	8001b18 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021800 	.word	0x40021800
 8001f54:	20000354 	.word	0x20000354

08001f58 <ist8310_get_data>:

void ist8310_get_data() {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <ist8310_get_data+0x1c>)
 8001f5e:	2105      	movs	r1, #5
 8001f60:	2003      	movs	r0, #3
 8001f62:	f7ff fdf5 	bl	8001b50 <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001f66:	f009 fb13 	bl	800b590 <HAL_GetTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a02      	ldr	r2, [pc, #8]	; (8001f78 <ist8310_get_data+0x20>)
 8001f6e:	6293      	str	r3, [r2, #40]	; 0x28

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000034c 	.word	0x2000034c
 8001f78:	20000354 	.word	0x20000354

08001f7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d11e      	bne.n	8001fcc <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10d      	bne.n	8001fb6 <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d103      	bne.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x2c>
				gyro_get_data();
 8001fa0:	f7ff ff1a 	bl	8001dd8 <gyro_get_data>
				gyro_process_data();
 8001fa4:	f7ff ff24 	bl	8001df0 <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d103      	bne.n	8001fb6 <HAL_GPIO_EXTI_Callback+0x3a>
				accel_get_data();
 8001fae:	f7ff fead 	bl	8001d0c <accel_get_data>
				accel_process_data();
 8001fb2:	f7ff feb7 	bl	8001d24 <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d107      	bne.n	8001fcc <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x60>)
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001fc8:	f7ff ffc6 	bl	8001f58 <ist8310_get_data>
			}
		}
	}
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000038c 	.word	0x2000038c
 8001fd8:	2000133c 	.word	0x2000133c
 8001fdc:	20001218 	.word	0x20001218

08001fe0 <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ffe:	78db      	ldrb	r3, [r3, #3]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b21a      	sxth	r2, r3
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8002006:	789b      	ldrb	r3, [r3, #2]
 8002008:	b21b      	sxth	r3, r3
 800200a:	4313      	orrs	r3, r2
 800200c:	b21b      	sxth	r3, r3
 800200e:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 8002012:	795b      	ldrb	r3, [r3, #5]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_I2C_MemRxCpltCallback+0x70>)
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21b      	sxth	r3, r3
 8002022:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8002024:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 800202a:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 800202c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 8002032:	845a      	strh	r2, [r3, #34]	; 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8002034:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 800203a:	849a      	strh	r2, [r3, #36]	; 0x24
	mag_data_ready(imu_data.mag_data);
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_I2C_MemRxCpltCallback+0x74>)
 800203e:	3320      	adds	r3, #32
 8002040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002044:	f005 ff08 	bl	8007e58 <mag_data_ready>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000034c 	.word	0x2000034c
 8002054:	20000354 	.word	0x20000354

08002058 <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <led_green_off+0x18>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20001574 	.word	0x20001574

08002074 <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002078:	2100      	movs	r1, #0
 800207a:	480c      	ldr	r0, [pc, #48]	; (80020ac <led_on+0x38>)
 800207c:	f00f fd58 	bl	8011b30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002080:	2104      	movs	r1, #4
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <led_on+0x38>)
 8002084:	f00f fd54 	bl	8011b30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002088:	2108      	movs	r1, #8
 800208a:	4808      	ldr	r0, [pc, #32]	; (80020ac <led_on+0x38>)
 800208c:	f00f fd50 	bl	8011b30 <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <led_on+0x38>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	22ff      	movs	r2, #255	; 0xff
 8002096:	63da      	str	r2, [r3, #60]	; 0x3c
	htim5.Instance->CCR2 = 255;
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <led_on+0x38>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
	htim5.Instance->CCR1 = 255;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <led_on+0x38>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20001574 	.word	0x20001574

080020b0 <led_toggle>:
void led_toggle(void){
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	460a      	mov	r2, r1
 80020ca:	80fb      	strh	r3, [r7, #6]
 80020cc:	4613      	mov	r3, r2
 80020ce:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 80020d0:	797b      	ldrb	r3, [r7, #5]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 808f 	bne.w	80021f6 <status_led+0x136>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	3b01      	subs	r3, #1
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f200 808c 	bhi.w	80021fa <status_led+0x13a>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <status_led+0x28>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	0800210d 	.word	0x0800210d
 80020ec:	08002127 	.word	0x08002127
 80020f0:	08002141 	.word	0x08002141
 80020f4:	0800215b 	.word	0x0800215b
 80020f8:	08002175 	.word	0x08002175
 80020fc:	0800218f 	.word	0x0800218f
 8002100:	080021a9 	.word	0x080021a9
 8002104:	080021c3 	.word	0x080021c3
 8002108:	080021dd 	.word	0x080021dd
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <status_led+0x148>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	22ff      	movs	r2, #255	; 0xff
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 8002114:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <status_led+0x148>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2200      	movs	r2, #0
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <status_led+0x148>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002124:	e06a      	b.n	80021fc <status_led+0x13c>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <status_led+0x148>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <status_led+0x148>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	22ff      	movs	r2, #255	; 0xff
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <status_led+0x148>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800213e:	e05d      	b.n	80021fc <status_led+0x13c>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <status_led+0x148>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <status_led+0x148>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <status_led+0x148>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002158:	e050      	b.n	80021fc <status_led+0x13c>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <status_led+0x148>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	; 0xff
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <status_led+0x148>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <status_led+0x148>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002172:	e043      	b.n	80021fc <status_led+0x13c>
		case 5:
			htim5.Instance->CCR3 = 0;
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <status_led+0x148>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <status_led+0x148>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2200      	movs	r2, #0
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <status_led+0x148>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800218c:	e036      	b.n	80021fc <status_led+0x13c>
		case 6:
			htim5.Instance->CCR3 = 0;
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <status_led+0x148>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <status_led+0x148>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2200      	movs	r2, #0
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <status_led+0x148>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021a6:	e029      	b.n	80021fc <status_led+0x13c>
		case 7:
			htim5.Instance->CCR3 = 0;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <status_led+0x148>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <status_led+0x148>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <status_led+0x148>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021c0:	e01c      	b.n	80021fc <status_led+0x13c>
		case 8:
			htim5.Instance->CCR3 = 0;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <status_led+0x148>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <status_led+0x148>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <status_led+0x148>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2200      	movs	r2, #0
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021da:	e00f      	b.n	80021fc <status_led+0x13c>
		case 9:
			htim5.Instance->CCR3 = 0;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <status_led+0x148>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
			htim5.Instance->CCR2 = 0;
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <status_led+0x148>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
			htim5.Instance->CCR1 = 0;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <status_led+0x148>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80021f4:	e002      	b.n	80021fc <status_led+0x13c>

		default:
			break;
		}
	}
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <status_led+0x13c>
			break;
 80021fa:	bf00      	nop

}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	20001574 	.word	0x20001574

0800220c <micros_tick>:
#include "robot_config.h"

uint32_t gv_curr_micros = 0;
uint32_t gv_overflow_times = 0;

void micros_tick(){
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	if (gv_curr_micros == 4294967295) //2^32 - 1
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <micros_tick+0x2c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002218:	d104      	bne.n	8002224 <micros_tick+0x18>
		gv_overflow_times ++;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <micros_tick+0x30>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <micros_tick+0x30>)
 8002222:	6013      	str	r3, [r2, #0]
	gv_curr_micros ++;
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <micros_tick+0x2c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	4a03      	ldr	r2, [pc, #12]	; (8002238 <micros_tick+0x2c>)
 800222c:	6013      	str	r3, [r2, #0]
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	20000390 	.word	0x20000390
 800223c:	20000394 	.word	0x20000394

08002240 <start_micros_timer>:

void start_micros_timer()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	configASSERT(TIMER_FREQ <= 1000000);
	__HAL_TIM_SET_AUTORELOAD(&htim3, (999999/TIMER_FREQ) + 1);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <start_micros_timer+0x2c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2264      	movs	r2, #100	; 0x64
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <start_micros_timer+0x2c>)
 800224e:	2264      	movs	r2, #100	; 0x64
 8002250:	60da      	str	r2, [r3, #12]
	htim3.Instance->DIER |= TIM_DIER_UIE; //enable update interrupt
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <start_micros_timer+0x2c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <start_micros_timer+0x2c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim3);
 8002262:	4802      	ldr	r0, [pc, #8]	; (800226c <start_micros_timer+0x2c>)
 8002264:	f00f fae4 	bl	8011830 <HAL_TIM_Base_Start>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200014e4 	.word	0x200014e4

08002270 <get_microseconds>:



uint32_t get_microseconds()
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	return gv_curr_micros;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <get_microseconds+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000390 	.word	0x20000390

08002288 <queue_init>:
#include "bsp_queue.h"
#include <string.h>



QueueOpStat_t queue_init(queue_t* queue){
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	723b      	strb	r3, [r7, #8]
	if (queue == NULL){
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <queue_init+0x1c>
		op_stat.op_status = Q_INVALID;
 800229a:	2304      	movs	r3, #4
 800229c:	723b      	strb	r3, [r7, #8]
		return op_stat;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e015      	b.n	80022d0 <queue_init+0x48>
	}
	queue->curr_byte_pos = 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->last_byte_pos=0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	queue->last_proc = 0;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	queue->last_time=0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->stored_bytes=0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60fb      	str	r3, [r7, #12]
}
 80022d0:	2300      	movs	r3, #0
 80022d2:	89ba      	ldrh	r2, [r7, #12]
 80022d4:	f362 030f 	bfi	r3, r2, #0, #16
 80022d8:	89fa      	ldrh	r2, [r7, #14]
 80022da:	f362 431f 	bfi	r3, r2, #16, #16
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <queue_append_byte>:

/*
 * Adds a byte to the end of the byte_queue
 * Add one byte at a time!
 */
QueueOpStat_t queue_append_byte(queue_t* queue, uint8_t data){
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	70fb      	strb	r3, [r7, #3]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	723b      	strb	r3, [r7, #8]
	queue->last_time = HAL_GetTick();
 80022fa:	f009 f949 	bl	800b590 <HAL_GetTick>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	queue->queue[queue->last_byte_pos] = data;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800230e:	4619      	mov	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	545a      	strb	r2, [r3, r1]
	op_stat.bytes_appended = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	817b      	strh	r3, [r7, #10]
	queue->last_byte_pos = (queue->last_byte_pos >= TQUEUE_SIZE-1) ? 0 : queue->last_byte_pos + 1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8002320:	2bfe      	cmp	r3, #254	; 0xfe
 8002322:	d805      	bhi.n	8002330 <queue_append_byte+0x46>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800232a:	3301      	adds	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	e000      	b.n	8002332 <queue_append_byte+0x48>
 8002330:	2200      	movs	r2, #0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	if (queue->stored_bytes > TQUEUE_SIZE) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800233e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002342:	d918      	bls.n	8002376 <queue_append_byte+0x8c>
		queue->stored_bytes = TQUEUE_SIZE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		queue->curr_byte_pos = (queue->curr_byte_pos == TQUEUE_SIZE-1) ? 0 : queue->curr_byte_pos+1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002354:	2bff      	cmp	r3, #255	; 0xff
 8002356:	d005      	beq.n	8002364 <queue_append_byte+0x7a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800235e:	3301      	adds	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	e000      	b.n	8002366 <queue_append_byte+0x7c>
 8002364:	2200      	movs	r2, #0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		op_stat.op_status = Q_FULL;
 800236c:	2301      	movs	r3, #1
 800236e:	723b      	strb	r3, [r7, #8]
		return op_stat;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e009      	b.n	800238a <queue_append_byte+0xa0>
	}
	queue->stored_bytes+=1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800237c:	3301      	adds	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	return op_stat;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	60fb      	str	r3, [r7, #12]
}
 800238a:	2300      	movs	r3, #0
 800238c:	89ba      	ldrh	r2, [r7, #12]
 800238e:	f362 030f 	bfi	r3, r2, #0, #16
 8002392:	89fa      	ldrh	r2, [r7, #14]
 8002394:	f362 431f 	bfi	r3, r2, #16, #16
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <queue_pop_element>:
	}
	op_stat.bytes_appended = len;
	return op_stat;
}

uint8_t queue_pop_element(queue_t* queue){
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

	if (queue->stored_bytes == 0){
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <queue_pop_element+0x16>
		return 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e024      	b.n	8002400 <queue_pop_element+0x60>
	} else {
		uint8_t temp =queue->queue[queue->curr_byte_pos];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	73fb      	strb	r3, [r7, #15]
		queue->curr_byte_pos +=1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023ca:	3301      	adds	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80023da:	2bff      	cmp	r3, #255	; 0xff
 80023dc:	d803      	bhi.n	80023e6 <queue_pop_element+0x46>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80023e4:	e000      	b.n	80023e8 <queue_pop_element+0x48>
 80023e6:	2200      	movs	r2, #0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
				0:queue->curr_byte_pos;
		queue->stored_bytes -= 1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		return temp;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <queue_pop_elements>:


QueueOpStat_t queue_pop_elements(queue_t* queue, uint8_t* data, uint16_t len){
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
		QueueOpStat_t op_stat;

		op_stat = queue_peek_number(queue, data, len);
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	461a      	mov	r2, r3
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f82d 	bl	8002480 <queue_peek_number>
 8002426:	4603      	mov	r3, r0
 8002428:	61bb      	str	r3, [r7, #24]
		QueueOpStat_t remove_stat;
		remove_stat = queue_remove_number(queue, op_stat.bytes_appended);
 800242a:	8b7b      	ldrh	r3, [r7, #26]
 800242c:	4619      	mov	r1, r3
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f87c 	bl	800252c <queue_remove_number>
 8002434:	4603      	mov	r3, r0
 8002436:	617b      	str	r3, [r7, #20]
	return op_stat;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	2300      	movs	r3, #0
 800243e:	8bba      	ldrh	r2, [r7, #28]
 8002440:	f362 030f 	bfi	r3, r2, #0, #16
 8002444:	8bfa      	ldrh	r2, [r7, #30]
 8002446:	f362 431f 	bfi	r3, r2, #16, #16
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <queue_peek>:

uint8_t queue_peek(queue_t* queue){
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
	if (queue->stored_bytes>0){
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <queue_peek+0x20>
		return queue->queue[queue->curr_byte_pos];
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	e000      	b.n	8002474 <queue_peek+0x22>
	}
	else{
		return 0;
 8002472:	2300      	movs	r3, #0
	}
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <queue_peek_number>:

QueueOpStat_t queue_peek_number(queue_t* queue, uint8_t* buffer,uint16_t size){
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
	QueueOpStat_t op_stat;
	queue->last_time = HAL_GetTick();
 800248e:	f009 f87f 	bl	800b590 <HAL_GetTick>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	op_stat.op_status = Q_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	753b      	strb	r3, [r7, #20]
	uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80024a6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024aa:	83fb      	strh	r3, [r7, #30]
	if (queue->stored_bytes < size){
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d905      	bls.n	80024c4 <queue_peek_number+0x44>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80024b8:	2303      	movs	r3, #3
 80024ba:	753b      	strb	r3, [r7, #20]
		size = queue->stored_bytes;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80024c2:	80fb      	strh	r3, [r7, #6]
	}

	if (bytes_to_end >= size){
 80024c4:	8bfa      	ldrh	r2, [r7, #30]
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d30b      	bcc.n	80024e4 <queue_peek_number+0x64>
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], size);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	4619      	mov	r1, r3
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f019 f862 	bl	801b5a6 <memcpy>
 80024e2:	e014      	b.n	800250e <queue_peek_number+0x8e>
	} else {
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	8bfa      	ldrh	r2, [r7, #30]
 80024f2:	4619      	mov	r1, r3
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f019 f856 	bl	801b5a6 <memcpy>
		memcpy(buffer+bytes_to_end, queue->queue,size-bytes_to_end);
 80024fa:	8bfb      	ldrh	r3, [r7, #30]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	18d0      	adds	r0, r2, r3
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	8bfb      	ldrh	r3, [r7, #30]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	461a      	mov	r2, r3
 800250a:	f019 f84c 	bl	801b5a6 <memcpy>
	}
	op_stat.bytes_appended = size;
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	82fb      	strh	r3, [r7, #22]
	return op_stat;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	2300      	movs	r3, #0
 8002518:	8b3a      	ldrh	r2, [r7, #24]
 800251a:	f362 030f 	bfi	r3, r2, #0, #16
 800251e:	8b7a      	ldrh	r2, [r7, #26]
 8002520:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <queue_remove_number>:

QueueOpStat_t queue_remove_number(queue_t* queue, uint16_t size){
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
//	queue_sanity_check(queue);
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	723b      	strb	r3, [r7, #8]
	if (queue->stored_bytes < size){
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	429a      	cmp	r2, r3
 8002546:	d905      	bls.n	8002554 <queue_remove_number+0x28>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 8002548:	2303      	movs	r3, #3
 800254a:	723b      	strb	r3, [r7, #8]
		size = queue->stored_bytes;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8002552:	807b      	strh	r3, [r7, #2]
	}

	queue->curr_byte_pos += size;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	4413      	add	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	queue->stored_bytes -= size;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d906      	bls.n	8002590 <queue_remove_number+0x64>
			queue->curr_byte_pos-TQUEUE_SIZE : queue->curr_byte_pos;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
	queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 8002588:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800258c:	b29b      	uxth	r3, r3
 800258e:	e002      	b.n	8002596 <queue_remove_number+0x6a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
	op_stat.bytes_appended = size;
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	817b      	strh	r3, [r7, #10]
	return op_stat;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	2300      	movs	r3, #0
 80025a6:	89ba      	ldrh	r2, [r7, #12]
 80025a8:	f362 030f 	bfi	r3, r2, #0, #16
 80025ac:	89fa      	ldrh	r2, [r7, #14]
 80025ae:	f362 431f 	bfi	r3, r2, #16, #16
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <queue_get_size>:

uint16_t queue_get_size(queue_t* queue){
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
	return queue->stored_bytes;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b097      	sub	sp, #92	; 0x5c
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6578      	str	r0, [r7, #84]	; 0x54
 80025e0:	6539      	str	r1, [r7, #80]	; 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 80025e2:	e064      	b.n	80026ae <ref_process_data+0xd6>
		switch(state){
 80025e4:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <ref_process_data+0xec>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <ref_process_data+0x1a>
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d037      	beq.n	8002660 <ref_process_data+0x88>
 80025f0:	e05d      	b.n	80026ae <ref_process_data+0xd6>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 80025f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025f4:	f7ff ffe3 	bl	80025be <queue_get_size>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d801      	bhi.n	8002602 <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 80025fe:	2302      	movs	r3, #2
 8002600:	e05c      	b.n	80026bc <ref_process_data+0xe4>
				}
				if (queue_peek(uart_queue) != 0xA5){
 8002602:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002604:	f7ff ff25 	bl	8002452 <queue_peek>
 8002608:	4603      	mov	r3, r0
 800260a:	2ba5      	cmp	r3, #165	; 0xa5
 800260c:	d003      	beq.n	8002616 <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 800260e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002610:	f7ff fec6 	bl	80023a0 <queue_pop_element>
 8002614:	e04b      	b.n	80026ae <ref_process_data+0xd6>
				}else {
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002616:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002618:	f7ff ffd1 	bl	80025be <queue_get_size>
 800261c:	4603      	mov	r3, r0
 800261e:	2b07      	cmp	r3, #7
 8002620:	d91c      	bls.n	800265c <ref_process_data+0x84>
						header = ref_get_header(uart_queue);
 8002622:	4c29      	ldr	r4, [pc, #164]	; (80026c8 <ref_process_data+0xf0>)
 8002624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f84e 	bl	80026cc <ref_get_header>
 8002630:	4622      	mov	r2, r4
 8002632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	6010      	str	r0, [r2, #0]
 800263a:	8899      	ldrh	r1, [r3, #4]
 800263c:	799b      	ldrb	r3, [r3, #6]
 800263e:	8091      	strh	r1, [r2, #4]
 8002640:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <ref_process_data+0xf0>)
 8002644:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002648:	b29b      	uxth	r3, r3
 800264a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264e:	4293      	cmp	r3, r2
 8002650:	d100      	bne.n	8002654 <ref_process_data+0x7c>
							//invalid data, continue checking
							break;
 8002652:	e02c      	b.n	80026ae <ref_process_data+0xd6>
						}
						//header is valid, remove header bytes and start finding data
						state = DATA;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <ref_process_data+0xec>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e028      	b.n	80026ae <ref_process_data+0xd6>
					} else {
						return INSUFFICIENT_DATA;
 800265c:	2302      	movs	r3, #2
 800265e:	e02d      	b.n	80026bc <ref_process_data+0xe4>
					}
				}
				break;
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 8002660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002662:	f7ff ffac 	bl	80025be <queue_get_size>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <ref_process_data+0xf0>)
 800266c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002670:	b29b      	uxth	r3, r3
 8002672:	3309      	adds	r3, #9
 8002674:	429a      	cmp	r2, r3
 8002676:	dd18      	ble.n	80026aa <ref_process_data+0xd2>
					state = HEADER;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <ref_process_data+0xec>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 800267e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002680:	4638      	mov	r0, r7
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <ref_process_data+0xf0>)
 8002684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002686:	ca06      	ldmia	r2, {r1, r2}
 8002688:	f000 f898 	bl	80027bc <ref_get_msg>
 800268c:	4620      	mov	r0, r4
 800268e:	463b      	mov	r3, r7
 8002690:	2242      	movs	r2, #66	; 0x42
 8002692:	4619      	mov	r1, r3
 8002694:	f018 ff87 	bl	801b5a6 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 8002698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <ref_process_data+0xd6>
						return PROCESS_SUCCESS;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e008      	b.n	80026bc <ref_process_data+0xe4>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 80026aa:	2302      	movs	r3, #2
 80026ac:	e006      	b.n	80026bc <ref_process_data+0xe4>
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE){
 80026ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026b0:	f7ff ff85 	bl	80025be <queue_get_size>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d894      	bhi.n	80025e4 <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 80026ba:	2302      	movs	r3, #2
}
 80026bc:	4618      	mov	r0, r3
 80026be:	375c      	adds	r7, #92	; 0x5c
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	20000398 	.word	0x20000398
 80026c8:	2000039c 	.word	0x2000039c

080026cc <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	2207      	movs	r2, #7
 80026dc:	4619      	mov	r1, r3
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f7ff fece 	bl	8002480 <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 80026e4:	7b3b      	ldrb	r3, [r7, #12]
 80026e6:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 80026e8:	7d3b      	ldrb	r3, [r7, #20]
 80026ea:	2ba5      	cmp	r3, #165	; 0xa5
 80026ec:	d013      	beq.n	8002716 <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f7ff fe56 	bl	80023a0 <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f8:	767b      	strb	r3, [r7, #25]
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026fe:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	461a      	mov	r2, r3
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	6010      	str	r0, [r2, #0]
 800270c:	8899      	ldrh	r1, [r3, #4]
 800270e:	799b      	ldrb	r3, [r3, #6]
 8002710:	8091      	strh	r1, [r2, #4]
 8002712:	7193      	strb	r3, [r2, #6]
 8002714:	e04d      	b.n	80027b2 <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 8002716:	7bbb      	ldrb	r3, [r7, #14]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21a      	sxth	r2, r3
 800271c:	7b7b      	ldrb	r3, [r7, #13]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21b      	sxth	r3, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 800272e:	7c3b      	ldrb	r3, [r7, #16]
 8002730:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	2105      	movs	r1, #5
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fc7f 	bl	800103c <verify_CRC8_check_sum>
 800273e:	4603      	mov	r3, r0
 8002740:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 8002742:	7cbb      	ldrb	r3, [r7, #18]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	b21a      	sxth	r2, r3
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21b      	sxth	r3, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00c      	beq.n	8002776 <ref_get_header+0xaa>
 800275c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d806      	bhi.n	8002776 <ref_get_header+0xaa>
 8002768:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f240 3205 	movw	r2, #773	; 0x305
 8002772:	4293      	cmp	r3, r2
 8002774:	d913      	bls.n	800279e <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277a:	767b      	strb	r3, [r7, #25]
 800277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002780:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f7ff fe0c 	bl	80023a0 <queue_pop_element>
		return ret_header;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	6010      	str	r0, [r2, #0]
 8002794:	8899      	ldrh	r1, [r3, #4]
 8002796:	799b      	ldrb	r3, [r3, #6]
 8002798:	8091      	strh	r1, [r2, #4]
 800279a:	7193      	strb	r3, [r2, #6]
 800279c:	e009      	b.n	80027b2 <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	6010      	str	r0, [r2, #0]
 80027aa:	8899      	ldrh	r1, [r3, #4]
 80027ac:	799b      	ldrb	r3, [r3, #6]
 80027ae:	8091      	strh	r1, [r2, #4]
 80027b0:	7193      	strb	r3, [r2, #6]
}
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b0d8      	sub	sp, #352	; 0x160
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 80027c6:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 80027d0:	f5a0 70ae 	sub.w	r0, r0, #348	; 0x15c
 80027d4:	e880 0006 	stmia.w	r0, {r1, r2}
 80027d8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80027dc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80027e0:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 80027e2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027e6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80027ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3309      	adds	r3, #9
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80027f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80027fc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	f7ff fe03 	bl	800240c <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002806:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800280a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800280e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002812:	b29b      	uxth	r3, r3
 8002814:	3309      	adds	r3, #9
 8002816:	461a      	mov	r2, r3
 8002818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fc80 	bl	8001124 <verify_CRC16_check_sum>
 8002824:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
	if (!crc_test){
 8002828:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d116      	bne.n	800285e <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 8002830:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002834:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283c:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 800283e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002842:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800284c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	2342      	movs	r3, #66	; 0x42
 8002856:	461a      	mov	r2, r3
 8002858:	f018 fea5 	bl	801b5a6 <memcpy>
 800285c:	e19f      	b.n	8002b9e <ref_get_msg+0x3e2>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 800285e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002862:	3307      	adds	r3, #7
 8002864:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	buffer_msg.cmd_id = header.cmd_id;
 8002868:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800286c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002870:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002874:	b29a      	uxth	r2, r3
 8002876:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800287a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800287e:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 8002880:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002884:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002888:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f240 3202 	movw	r2, #770	; 0x302
 8002892:	4293      	cmp	r3, r2
 8002894:	f000 815c 	beq.w	8002b50 <ref_get_msg+0x394>
 8002898:	f240 3202 	movw	r2, #770	; 0x302
 800289c:	4293      	cmp	r3, r2
 800289e:	f300 8167 	bgt.w	8002b70 <ref_get_msg+0x3b4>
 80028a2:	f240 3201 	movw	r2, #769	; 0x301
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f000 8146 	beq.w	8002b38 <ref_get_msg+0x37c>
 80028ac:	f240 3201 	movw	r2, #769	; 0x301
 80028b0:	4293      	cmp	r3, r2
 80028b2:	f300 815d 	bgt.w	8002b70 <ref_get_msg+0x3b4>
 80028b6:	f240 220a 	movw	r2, #522	; 0x20a
 80028ba:	4293      	cmp	r3, r2
 80028bc:	f300 8158 	bgt.w	8002b70 <ref_get_msg+0x3b4>
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c4:	dc04      	bgt.n	80028d0 <ref_get_msg+0x114>
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	dc40      	bgt.n	800294c <ref_get_msg+0x190>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dc2e      	bgt.n	800292c <ref_get_msg+0x170>
 80028ce:	e14f      	b.n	8002b70 <ref_get_msg+0x3b4>
 80028d0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	f200 814b 	bhi.w	8002b70 <ref_get_msg+0x3b4>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <ref_get_msg+0x124>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	08002a35 	.word	0x08002a35
 80028e4:	08002a65 	.word	0x08002a65
 80028e8:	08002a85 	.word	0x08002a85
 80028ec:	08002aa5 	.word	0x08002aa5
 80028f0:	08002ab7 	.word	0x08002ab7
 80028f4:	08002ac9 	.word	0x08002ac9
 80028f8:	08002adb 	.word	0x08002adb
 80028fc:	08002af7 	.word	0x08002af7
 8002900:	08002b0f 	.word	0x08002b0f
 8002904:	08002b25 	.word	0x08002b25
 8002908:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800290c:	2b04      	cmp	r3, #4
 800290e:	f200 812f 	bhi.w	8002b70 <ref_get_msg+0x3b4>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <ref_get_msg+0x15c>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	080029cb 	.word	0x080029cb
 800291c:	080029e1 	.word	0x080029e1
 8002920:	080029f7 	.word	0x080029f7
 8002924:	08002a0f 	.word	0x08002a0f
 8002928:	08002a23 	.word	0x08002a23
 800292c:	3b01      	subs	r3, #1
 800292e:	2b03      	cmp	r3, #3
 8002930:	f200 811e 	bhi.w	8002b70 <ref_get_msg+0x3b4>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <ref_get_msg+0x180>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	0800295d 	.word	0x0800295d
 8002940:	08002975 	.word	0x08002975
 8002944:	08002987 	.word	0x08002987
 8002948:	080029b3 	.word	0x080029b3
 800294c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002950:	f280 810e 	bge.w	8002b70 <ref_get_msg+0x3b4>
 8002954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002958:	dcd6      	bgt.n	8002908 <ref_get_msg+0x14c>
 800295a:	e109      	b.n	8002b70 <ref_get_msg+0x3b4>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 800295c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002960:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002964:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002968:	3302      	adds	r3, #2
 800296a:	8811      	ldrh	r1, [r2, #0]
 800296c:	7892      	ldrb	r2, [r2, #2]
 800296e:	8019      	strh	r1, [r3, #0]
 8002970:	709a      	strb	r2, [r3, #2]
		break;
 8002972:	e105      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002974:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002978:	781a      	ldrb	r2, [r3, #0]
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 800297a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800297e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002982:	709a      	strb	r2, [r3, #2]
		break;
 8002984:	e0fc      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 8002986:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800298a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800298e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002992:	3302      	adds	r3, #2
 8002994:	6814      	ldr	r4, [r2, #0]
 8002996:	6850      	ldr	r0, [r2, #4]
 8002998:	6891      	ldr	r1, [r2, #8]
 800299a:	68d5      	ldr	r5, [r2, #12]
 800299c:	601c      	str	r4, [r3, #0]
 800299e:	6058      	str	r0, [r3, #4]
 80029a0:	6099      	str	r1, [r3, #8]
 80029a2:	60dd      	str	r5, [r3, #12]
 80029a4:	6914      	ldr	r4, [r2, #16]
 80029a6:	6950      	ldr	r0, [r2, #20]
 80029a8:	6991      	ldr	r1, [r2, #24]
 80029aa:	611c      	str	r4, [r3, #16]
 80029ac:	6158      	str	r0, [r3, #20]
 80029ae:	6199      	str	r1, [r3, #24]
		break;
 80029b0:	e0e6      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 80029b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029ba:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80029be:	3302      	adds	r3, #2
 80029c0:	8811      	ldrh	r1, [r2, #0]
 80029c2:	7892      	ldrb	r2, [r2, #2]
 80029c4:	8019      	strh	r1, [r3, #0]
 80029c6:	709a      	strb	r2, [r3, #2]
		break;
 80029c8:	e0da      	b.n	8002b80 <ref_get_msg+0x3c4>
 80029ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 80029d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029da:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 80029de:	e0cf      	b.n	8002b80 <ref_get_msg+0x3c4>
 80029e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 80029e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029f0:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 80029f4:	e0c4      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 80029f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80029fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029fe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a02:	3302      	adds	r3, #2
 8002a04:	8811      	ldrh	r1, [r2, #0]
 8002a06:	7892      	ldrb	r2, [r2, #2]
 8002a08:	8019      	strh	r1, [r3, #0]
 8002a0a:	709a      	strb	r2, [r3, #2]
		break;
 8002a0c:	e0b8      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002a0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 8002a16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a1e:	805a      	strh	r2, [r3, #2]
		break;
 8002a20:	e0ae      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002a22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a26:	781a      	ldrb	r2, [r3, #0]
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 8002a28:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a30:	709a      	strb	r2, [r3, #2]
		break;
 8002a32:	e0a5      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 8002a34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a3c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a40:	3302      	adds	r3, #2
 8002a42:	6810      	ldr	r0, [r2, #0]
 8002a44:	6851      	ldr	r1, [r2, #4]
 8002a46:	6895      	ldr	r5, [r2, #8]
 8002a48:	68d4      	ldr	r4, [r2, #12]
 8002a4a:	6018      	str	r0, [r3, #0]
 8002a4c:	6059      	str	r1, [r3, #4]
 8002a4e:	609d      	str	r5, [r3, #8]
 8002a50:	60dc      	str	r4, [r3, #12]
 8002a52:	6910      	ldr	r0, [r2, #16]
 8002a54:	6951      	ldr	r1, [r2, #20]
 8002a56:	6118      	str	r0, [r3, #16]
 8002a58:	6159      	str	r1, [r3, #20]
 8002a5a:	8b11      	ldrh	r1, [r2, #24]
 8002a5c:	7e92      	ldrb	r2, [r2, #26]
 8002a5e:	8319      	strh	r1, [r3, #24]
 8002a60:	769a      	strb	r2, [r3, #26]
		break;
 8002a62:	e08d      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 8002a64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a6c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a70:	3302      	adds	r3, #2
 8002a72:	6814      	ldr	r4, [r2, #0]
 8002a74:	6850      	ldr	r0, [r2, #4]
 8002a76:	6891      	ldr	r1, [r2, #8]
 8002a78:	601c      	str	r4, [r3, #0]
 8002a7a:	6058      	str	r0, [r3, #4]
 8002a7c:	6099      	str	r1, [r3, #8]
 8002a7e:	8992      	ldrh	r2, [r2, #12]
 8002a80:	819a      	strh	r2, [r3, #12]
		break;
 8002a82:	e07d      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 8002a84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a88:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a8c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002a90:	3302      	adds	r3, #2
 8002a92:	6814      	ldr	r4, [r2, #0]
 8002a94:	6850      	ldr	r0, [r2, #4]
 8002a96:	6891      	ldr	r1, [r2, #8]
 8002a98:	68d2      	ldr	r2, [r2, #12]
 8002a9a:	601c      	str	r4, [r3, #0]
 8002a9c:	6058      	str	r0, [r3, #4]
 8002a9e:	6099      	str	r1, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
		break;
 8002aa2:	e06d      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002aa4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aa8:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 8002aaa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002aae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ab2:	709a      	strb	r2, [r3, #2]
		break;
 8002ab4:	e064      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002ab6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aba:	781a      	ldrb	r2, [r3, #0]
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 8002abc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ac0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ac4:	709a      	strb	r2, [r3, #2]
		break;
 8002ac6:	e05b      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002ac8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002acc:	781a      	ldrb	r2, [r3, #0]
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 8002ace:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ad2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ad6:	709a      	strb	r2, [r3, #2]
		break;
 8002ad8:	e052      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 8002ada:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ade:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ae2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	6019      	str	r1, [r3, #0]
 8002aec:	8891      	ldrh	r1, [r2, #4]
 8002aee:	7992      	ldrb	r2, [r2, #6]
 8002af0:	8099      	strh	r1, [r3, #4]
 8002af2:	719a      	strb	r2, [r3, #6]
		break;
 8002af4:	e044      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002af6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002afa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002afe:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002b02:	3302      	adds	r3, #2
 8002b04:	6811      	ldr	r1, [r2, #0]
 8002b06:	6019      	str	r1, [r3, #0]
 8002b08:	8892      	ldrh	r2, [r2, #4]
 8002b0a:	809a      	strh	r2, [r3, #4]
		break;
 8002b0c:	e038      	b.n	8002b80 <ref_get_msg+0x3c4>
 8002b0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002b16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b1e:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002b22:	e02d      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	3302      	adds	r3, #2
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8002b30:	4618      	mov	r0, r3
 8002b32:	f018 fd38 	bl	801b5a6 <memcpy>
		break;
 8002b36:	e023      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 8002b38:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b3c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b40:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002b44:	3302      	adds	r3, #2
 8002b46:	6811      	ldr	r1, [r2, #0]
 8002b48:	6019      	str	r1, [r3, #0]
 8002b4a:	8892      	ldrh	r2, [r2, #4]
 8002b4c:	809a      	strh	r2, [r3, #4]
		break;
 8002b4e:	e017      	b.n	8002b80 <ref_get_msg+0x3c4>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 8002b50:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b54:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b58:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	6814      	ldr	r4, [r2, #0]
 8002b60:	6850      	ldr	r0, [r2, #4]
 8002b62:	6891      	ldr	r1, [r2, #8]
 8002b64:	601c      	str	r4, [r3, #0]
 8002b66:	6058      	str	r0, [r3, #4]
 8002b68:	6099      	str	r1, [r3, #8]
 8002b6a:	7b12      	ldrb	r2, [r2, #12]
 8002b6c:	731a      	strb	r2, [r3, #12]
		break;
 8002b6e:	e007      	b.n	8002b80 <ref_get_msg+0x3c4>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 8002b70:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b74:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7c:	801a      	strh	r2, [r3, #0]
		break;
 8002b7e:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 8002b80:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b84:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	2342      	movs	r3, #66	; 0x42
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f018 fd04 	bl	801b5a6 <memcpy>
}
 8002b9e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002ba2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bdb0      	pop	{r4, r5, r7, pc}

08002bb0 <init_xvr_usart>:

static queue_t *xvr_UART_queue;
static queue_t *ref_UART_queue;


void init_xvr_usart(uint8_t *pData){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	xvr_usart_start(&SBC_UART, pData, 15, NULL);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	220f      	movs	r2, #15
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4803      	ldr	r0, [pc, #12]	; (8002bcc <init_xvr_usart+0x1c>)
 8002bc0:	f000 f810 	bl	8002be4 <xvr_usart_start>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20001604 	.word	0x20001604

08002bd0 <xvr_full_cplt_isr>:
		queue_append_byte(xvr_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
//	} else {
//		queue_append_byte(xvr_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
void xvr_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	sbc_process_data();
 8002bd8:	f008 facc 	bl	800b174 <sbc_process_data>
};
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <xvr_usart_start>:

HAL_StatusTypeDef xvr_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	xvr_UART_queue = uart_queue;
 8002bf4:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <xvr_usart_start+0xfc>)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6013      	str	r3, [r2, #0]
	queue_init(xvr_UART_queue);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <xvr_usart_start+0xfc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb42 	bl	8002288 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d161      	bne.n	8002cd4 <xvr_usart_start+0xf0>
		if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <xvr_usart_start+0x38>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <xvr_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e05a      	b.n	8002cd6 <xvr_usart_start+0xf2>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <xvr_usart_start+0x4a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e053      	b.n	8002cd6 <xvr_usart_start+0xf2>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2222      	movs	r2, #34	; 0x22
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = xvr_full_cplt_isr;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <xvr_usart_start+0x100>)
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
//		huart->hdmarx->XferHalfCpltCallback = xvr_half_cplt_isr;


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	2200      	movs	r2, #0
 8002c64:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3304      	adds	r3, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	f009 ff29 	bl	800cad4 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cce:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <xvr_usart_start+0xf2>
	} else {
		return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
	}
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200003a4 	.word	0x200003a4
 8002ce4:	08002bd1 	.word	0x08002bd1

08002ce8 <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <ref_usart_start+0xfc>)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <ref_usart_start+0xfc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fac0 	bl	8002288 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d162      	bne.n	8002dda <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <ref_usart_start+0x38>
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e05b      	b.n	8002ddc <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <ref_usart_start+0x4a>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e054      	b.n	8002ddc <ref_usart_start+0xf4>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2222      	movs	r2, #34	; 0x22
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <ref_usart_start+0x100>)
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <ref_usart_start+0x104>)
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2200      	movs	r2, #0
 8002d6a:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	f009 fea6 	bl	800cad4 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db4:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd4:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
	}
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200003a8 	.word	0x200003a8
 8002de8:	08002e19 	.word	0x08002e19
 8002dec:	08002df1 	.word	0x08002df1

08002df0 <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <ref_half_cplt_isr+0x24>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7ff fa6f 	bl	80022ea <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200003a8 	.word	0x200003a8

08002e18 <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <ref_full_cplt_isr+0x28>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f7ff fa5a 	bl	80022ea <queue_append_byte>
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200003a8 	.word	0x200003a8

08002e44 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <MX_ADC3_Init+0x9c>)
 8002e5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002e76:	4b19      	ldr	r3, [pc, #100]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <MX_ADC3_Init+0xa0>)
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <MX_ADC3_Init+0x98>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <MX_ADC3_Init+0x98>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <MX_ADC3_Init+0x98>)
 8002ea6:	f008 fba3 	bl	800b5f0 <HAL_ADC_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002eb0:	f000 fe2b 	bl	8003b0a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <MX_ADC3_Init+0x98>)
 8002ec6:	f008 fbd7 	bl	800b678 <HAL_ADC_ConfigChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002ed0:	f000 fe1b 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200003ac 	.word	0x200003ac
 8002ee0:	40012200 	.word	0x40012200
 8002ee4:	0f000001 	.word	0x0f000001

08002ee8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_ADC_MspInit+0x7c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d128      	bne.n	8002f5c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f30:	f043 0320 	orr.w	r3, r3, #32
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_ADC_MspInit+0x80>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_ADC_MspInit+0x84>)
 8002f58:	f00a f91c 	bl	800d194 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012200 	.word	0x40012200
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40021400 	.word	0x40021400

08002f70 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <MX_CAN1_Init+0x68>)
 8002f78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002f94:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f96:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002f9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002fb4:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002fc0:	4804      	ldr	r0, [pc, #16]	; (8002fd4 <MX_CAN1_Init+0x64>)
 8002fc2:	f008 fd77 	bl	800bab4 <HAL_CAN_Init>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002fcc:	f000 fd9d 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200003f4 	.word	0x200003f4
 8002fd8:	40006400 	.word	0x40006400

08002fdc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <MX_CAN2_Init+0x64>)
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <MX_CAN2_Init+0x68>)
 8002fe4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <MX_CAN2_Init+0x64>)
 8002fe8:	2203      	movs	r2, #3
 8002fea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <MX_CAN2_Init+0x64>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <MX_CAN2_Init+0x64>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_CAN2_Init+0x64>)
 8002ffa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ffe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <MX_CAN2_Init+0x64>)
 8003002:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003006:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <MX_CAN2_Init+0x64>)
 800300a:	2200      	movs	r2, #0
 800300c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <MX_CAN2_Init+0x64>)
 8003010:	2200      	movs	r2, #0
 8003012:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <MX_CAN2_Init+0x64>)
 8003016:	2200      	movs	r2, #0
 8003018:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <MX_CAN2_Init+0x64>)
 800301c:	2200      	movs	r2, #0
 800301e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <MX_CAN2_Init+0x64>)
 8003022:	2200      	movs	r2, #0
 8003024:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <MX_CAN2_Init+0x64>)
 8003028:	2200      	movs	r2, #0
 800302a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800302c:	4804      	ldr	r0, [pc, #16]	; (8003040 <MX_CAN2_Init+0x64>)
 800302e:	f008 fd41 	bl	800bab4 <HAL_CAN_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003038:	f000 fd67 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000041c 	.word	0x2000041c
 8003044:	40006800 	.word	0x40006800

08003048 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_CAN_MspInit+0x168>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d145      	bne.n	80030f6 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800306a:	4b52      	ldr	r3, [pc, #328]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003072:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003074:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10d      	bne.n	8003098 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	4a4c      	ldr	r2, [pc, #304]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308a:	6413      	str	r3, [r2, #64]	; 0x40
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4a45      	ldr	r2, [pc, #276]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	6313      	str	r3, [r2, #48]	; 0x30
 80030a8:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030b4:	2303      	movs	r3, #3
 80030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	2303      	movs	r3, #3
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80030c4:	2309      	movs	r3, #9
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	4619      	mov	r1, r3
 80030ce:	483b      	ldr	r0, [pc, #236]	; (80031bc <HAL_CAN_MspInit+0x174>)
 80030d0:	f00a f860 	bl	800d194 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2105      	movs	r1, #5
 80030d8:	2014      	movs	r0, #20
 80030da:	f009 fc23 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80030de:	2014      	movs	r0, #20
 80030e0:	f009 fc3c 	bl	800c95c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2105      	movs	r1, #5
 80030e8:	2015      	movs	r0, #21
 80030ea:	f009 fc1b 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80030ee:	2015      	movs	r0, #21
 80030f0:	f009 fc34 	bl	800c95c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80030f4:	e057      	b.n	80031a6 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a31      	ldr	r2, [pc, #196]	; (80031c0 <HAL_CAN_MspInit+0x178>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d152      	bne.n	80031a6 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	4a2b      	ldr	r2, [pc, #172]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800310a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800310e:	6413      	str	r3, [r2, #64]	; 0x40
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003124:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003126:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <HAL_CAN_MspInit+0x16c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_CAN_MspInit+0x170>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003166:	2360      	movs	r3, #96	; 0x60
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003176:	2309      	movs	r3, #9
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	4810      	ldr	r0, [pc, #64]	; (80031c4 <HAL_CAN_MspInit+0x17c>)
 8003182:	f00a f807 	bl	800d194 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2105      	movs	r1, #5
 800318a:	2040      	movs	r0, #64	; 0x40
 800318c:	f009 fbca 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003190:	2040      	movs	r0, #64	; 0x40
 8003192:	f009 fbe3 	bl	800c95c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2105      	movs	r1, #5
 800319a:	2041      	movs	r0, #65	; 0x41
 800319c:	f009 fbc2 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80031a0:	2041      	movs	r0, #65	; 0x41
 80031a2:	f009 fbdb 	bl	800c95c <HAL_NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3730      	adds	r7, #48	; 0x30
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40006400 	.word	0x40006400
 80031b4:	20000444 	.word	0x20000444
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40006800 	.word	0x40006800
 80031c4:	40020400 	.word	0x40020400

080031c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <MX_DMA_Init+0xc8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <MX_DMA_Init+0xc8>)
 80031d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <MX_DMA_Init+0xc8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <MX_DMA_Init+0xc8>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a27      	ldr	r2, [pc, #156]	; (8003290 <MX_DMA_Init+0xc8>)
 80031f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <MX_DMA_Init+0xc8>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2105      	movs	r1, #5
 800320a:	200c      	movs	r0, #12
 800320c:	f009 fb8a 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003210:	200c      	movs	r0, #12
 8003212:	f009 fba3 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2105      	movs	r1, #5
 800321a:	200d      	movs	r0, #13
 800321c:	f009 fb82 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003220:	200d      	movs	r0, #13
 8003222:	f009 fb9b 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2105      	movs	r1, #5
 800322a:	200f      	movs	r0, #15
 800322c:	f009 fb7a 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003230:	200f      	movs	r0, #15
 8003232:	f009 fb93 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2105      	movs	r1, #5
 800323a:	2038      	movs	r0, #56	; 0x38
 800323c:	f009 fb72 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003240:	2038      	movs	r0, #56	; 0x38
 8003242:	f009 fb8b 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2105      	movs	r1, #5
 800324a:	2039      	movs	r0, #57	; 0x39
 800324c:	f009 fb6a 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003250:	2039      	movs	r0, #57	; 0x39
 8003252:	f009 fb83 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2105      	movs	r1, #5
 800325a:	203b      	movs	r0, #59	; 0x3b
 800325c:	f009 fb62 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003260:	203b      	movs	r0, #59	; 0x3b
 8003262:	f009 fb7b 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8003266:	2200      	movs	r2, #0
 8003268:	2105      	movs	r1, #5
 800326a:	2044      	movs	r0, #68	; 0x44
 800326c:	f009 fb5a 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003270:	2044      	movs	r0, #68	; 0x44
 8003272:	f009 fb73 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2105      	movs	r1, #5
 800327a:	2045      	movs	r0, #69	; 0x45
 800327c:	f009 fb52 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003280:	2045      	movs	r0, #69	; 0x45
 8003282:	f009 fb6b 	bl	800c95c <HAL_NVIC_EnableIRQ>

}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
	return 0;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80032d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <vApplicationGetIdleTaskMemory+0x30>)
 80032de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e6:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	20000498 	.word	0x20000498
 80032f8:	20000558 	.word	0x20000558

080032fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <vApplicationGetTimerTaskMemory+0x2c>)
 800330c:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <vApplicationGetTimerTaskMemory+0x30>)
 8003312:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	20000958 	.word	0x20000958
 800332c:	20000a18 	.word	0x20000a18

08003330 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af02      	add	r7, sp, #8
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	gimbal_event_group = xEventGroupCreate();
 8003336:	f014 f948 	bl	80175ca <xEventGroupCreate>
 800333a:	4603      	mov	r3, r0
 800333c:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <MX_FREERTOS_Init+0x1b0>)
 800333e:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 8003340:	f014 f943 	bl	80175ca <xEventGroupCreate>
 8003344:	4603      	mov	r3, r0
 8003346:	4a67      	ldr	r2, [pc, #412]	; (80034e4 <MX_FREERTOS_Init+0x1b4>)
 8003348:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 800334a:	f014 f93e 	bl	80175ca <xEventGroupCreate>
 800334e:	4603      	mov	r3, r0
 8003350:	4a65      	ldr	r2, [pc, #404]	; (80034e8 <MX_FREERTOS_Init+0x1b8>)
 8003352:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 8003354:	2203      	movs	r2, #3
 8003356:	2100      	movs	r1, #0
 8003358:	2001      	movs	r0, #1
 800335a:	f014 fcb9 	bl	8017cd0 <xQueueGenericCreate>
 800335e:	4603      	mov	r3, r0
 8003360:	4a62      	ldr	r2, [pc, #392]	; (80034ec <MX_FREERTOS_Init+0x1bc>)
 8003362:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 8003364:	2200      	movs	r2, #0
 8003366:	2110      	movs	r1, #16
 8003368:	2005      	movs	r0, #5
 800336a:	f014 fcb1 	bl	8017cd0 <xQueueGenericCreate>
 800336e:	4603      	mov	r3, r0
 8003370:	4a5f      	ldr	r2, [pc, #380]	; (80034f0 <MX_FREERTOS_Init+0x1c0>)
 8003372:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 8003374:	2200      	movs	r2, #0
 8003376:	2110      	movs	r1, #16
 8003378:	2005      	movs	r0, #5
 800337a:	f014 fca9 	bl	8017cd0 <xQueueGenericCreate>
 800337e:	4603      	mov	r3, r0
 8003380:	4a5c      	ldr	r2, [pc, #368]	; (80034f4 <MX_FREERTOS_Init+0x1c4>)
 8003382:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 8003384:	2200      	movs	r2, #0
 8003386:	210c      	movs	r1, #12
 8003388:	2005      	movs	r0, #5
 800338a:	f014 fca1 	bl	8017cd0 <xQueueGenericCreate>
 800338e:	4603      	mov	r3, r0
 8003390:	4a59      	ldr	r2, [pc, #356]	; (80034f8 <MX_FREERTOS_Init+0x1c8>)
 8003392:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 8003394:	2200      	movs	r2, #0
 8003396:	2101      	movs	r1, #1
 8003398:	2030      	movs	r0, #48	; 0x30
 800339a:	f014 fc99 	bl	8017cd0 <xQueueGenericCreate>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a56      	ldr	r2, [pc, #344]	; (80034fc <MX_FREERTOS_Init+0x1cc>)
 80033a2:	6013      	str	r3, [r2, #0]
	uart_data_queue = xQueueCreate(5, sizeof(ref_msg_t));
 80033a4:	2200      	movs	r2, #0
 80033a6:	2142      	movs	r1, #66	; 0x42
 80033a8:	2005      	movs	r0, #5
 80033aa:	f014 fc91 	bl	8017cd0 <xQueueGenericCreate>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a53      	ldr	r2, [pc, #332]	; (8003500 <MX_FREERTOS_Init+0x1d0>)
 80033b2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80033b4:	4b53      	ldr	r3, [pc, #332]	; (8003504 <MX_FREERTOS_Init+0x1d4>)
 80033b6:	1d3c      	adds	r4, r7, #4
 80033b8:	461d      	mov	r5, r3
 80033ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f014 f89d 	bl	801750a <osThreadCreate>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a4d      	ldr	r2, [pc, #308]	; (8003508 <MX_FREERTOS_Init+0x1d8>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(imu_processing_task, "IMU_task",
 80033d6:	4b4d      	ldr	r3, [pc, #308]	; (800350c <MX_FREERTOS_Init+0x1dc>)
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	230f      	movs	r3, #15
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	2301      	movs	r3, #1
 80033e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e4:	494a      	ldr	r1, [pc, #296]	; (8003510 <MX_FREERTOS_Init+0x1e0>)
 80033e6:	484b      	ldr	r0, [pc, #300]	; (8003514 <MX_FREERTOS_Init+0x1e4>)
 80033e8:	f015 f9a1 	bl	801872e <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 80033ec:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <MX_FREERTOS_Init+0x1e8>)
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	2309      	movs	r3, #9
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fa:	4948      	ldr	r1, [pc, #288]	; (800351c <MX_FREERTOS_Init+0x1ec>)
 80033fc:	4848      	ldr	r0, [pc, #288]	; (8003520 <MX_FREERTOS_Init+0x1f0>)
 80033fe:	f015 f996 	bl	801872e <xTaskCreate>
			&motor_calib_task_handle);

//	if (gimbal_event_group == NULL) {
//		//error handler implement next time!
//	} else {
		xTaskCreate(gimbal_control_task, "gimbal_task",
 8003402:	4b48      	ldr	r3, [pc, #288]	; (8003524 <MX_FREERTOS_Init+0x1f4>)
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2307      	movs	r3, #7
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2301      	movs	r3, #1
 800340c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003410:	4945      	ldr	r1, [pc, #276]	; (8003528 <MX_FREERTOS_Init+0x1f8>)
 8003412:	4846      	ldr	r0, [pc, #280]	; (800352c <MX_FREERTOS_Init+0x1fc>)
 8003414:	f015 f98b 	bl	801872e <xTaskCreate>

	// xTaskCreate(leg_kinematic_task, "leg_kinematic",
	// 		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 8,
	// 				&leg_kinematic_handle);

	xTaskCreate(imu_processing_task, "IMU_task",
 8003418:	4b3c      	ldr	r3, [pc, #240]	; (800350c <MX_FREERTOS_Init+0x1dc>)
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	230f      	movs	r3, #15
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	2301      	movs	r3, #1
 8003422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003426:	493a      	ldr	r1, [pc, #232]	; (8003510 <MX_FREERTOS_Init+0x1e0>)
 8003428:	483a      	ldr	r0, [pc, #232]	; (8003514 <MX_FREERTOS_Init+0x1e4>)
 800342a:	f015 f980 	bl	801872e <xTaskCreate>
	// 	xTaskCreate(movement_control_task, "chassis_task",
	// 	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
	// 			&movement_control_task_handle);
	// }

	if (launcher_event_group == NULL) {
 800342e:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <MX_FREERTOS_Init+0x1b8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <MX_FREERTOS_Init+0x11c>
		//error handler
	} else {
		xTaskCreate(launcher_control_task, "launcher_task",
 8003436:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <MX_FREERTOS_Init+0x200>)
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	2304      	movs	r3, #4
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2301      	movs	r3, #1
 8003440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003444:	493b      	ldr	r1, [pc, #236]	; (8003534 <MX_FREERTOS_Init+0x204>)
 8003446:	483c      	ldr	r0, [pc, #240]	; (8003538 <MX_FREERTOS_Init+0x208>)
 8003448:	f015 f971 	bl	801872e <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&launcher_control_task_handle);
	}

	xTaskCreate(control_input_task, "RC_task",
 800344c:	4b3b      	ldr	r3, [pc, #236]	; (800353c <MX_FREERTOS_Init+0x20c>)
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2304      	movs	r3, #4
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2301      	movs	r3, #1
 8003456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800345a:	4939      	ldr	r1, [pc, #228]	; (8003540 <MX_FREERTOS_Init+0x210>)
 800345c:	4839      	ldr	r0, [pc, #228]	; (8003544 <MX_FREERTOS_Init+0x214>)
 800345e:	f015 f966 	bl	801872e <xTaskCreate>
	1024, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 2048, (void*) 1,
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <MX_FREERTOS_Init+0x218>)
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	2302      	movs	r3, #2
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2301      	movs	r3, #1
 800346c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003470:	4936      	ldr	r1, [pc, #216]	; (800354c <MX_FREERTOS_Init+0x21c>)
 8003472:	4837      	ldr	r0, [pc, #220]	; (8003550 <MX_FREERTOS_Init+0x220>)
 8003474:	f015 f95b 	bl	801872e <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <MX_FREERTOS_Init+0x224>)
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2301      	movs	r3, #1
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2301      	movs	r3, #1
 8003482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003486:	4934      	ldr	r1, [pc, #208]	; (8003558 <MX_FREERTOS_Init+0x228>)
 8003488:	4834      	ldr	r0, [pc, #208]	; (800355c <MX_FREERTOS_Init+0x22c>)
 800348a:	f015 f950 	bl	801872e <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);
	if (usb_continue_semaphore == NULL) {
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <MX_FREERTOS_Init+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <MX_FREERTOS_Init+0x17c>
		//error handler
	} else {
		xTaskCreate(usb_task, "usb_task",
 8003496:	4b32      	ldr	r3, [pc, #200]	; (8003560 <MX_FREERTOS_Init+0x230>)
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	2301      	movs	r3, #1
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2301      	movs	r3, #1
 80034a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a4:	492f      	ldr	r1, [pc, #188]	; (8003564 <MX_FREERTOS_Init+0x234>)
 80034a6:	4830      	ldr	r0, [pc, #192]	; (8003568 <MX_FREERTOS_Init+0x238>)
 80034a8:	f015 f941 	bl	801872e <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &usb_task_handle);
	}

	xTaskCreate(telemetry_task, "telemetry_task", 700, (void*) 1,
 80034ac:	4b2f      	ldr	r3, [pc, #188]	; (800356c <MX_FREERTOS_Init+0x23c>)
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	2305      	movs	r3, #5
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2301      	movs	r3, #1
 80034b6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80034ba:	492d      	ldr	r1, [pc, #180]	; (8003570 <MX_FREERTOS_Init+0x240>)
 80034bc:	482d      	ldr	r0, [pc, #180]	; (8003574 <MX_FREERTOS_Init+0x244>)
 80034be:	f015 f936 	bl	801872e <xTaskCreate>
			(UBaseType_t) 5, &telemetry_task_handle);
	xTaskCreate(hud_task, "hud_task", 500, (void*) 3,
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <MX_FREERTOS_Init+0x248>)
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2305      	movs	r3, #5
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2303      	movs	r3, #3
 80034cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034d0:	492a      	ldr	r1, [pc, #168]	; (800357c <MX_FREERTOS_Init+0x24c>)
 80034d2:	482b      	ldr	r0, [pc, #172]	; (8003580 <MX_FREERTOS_Init+0x250>)
 80034d4:	f015 f92b 	bl	801872e <xTaskCreate>
			(UBaseType_t) 5, &hud_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 80034d8:	bf00      	nop
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bdb0      	pop	{r4, r5, r7, pc}
 80034e0:	20000470 	.word	0x20000470
 80034e4:	20000474 	.word	0x20000474
 80034e8:	20000478 	.word	0x20000478
 80034ec:	2000047c 	.word	0x2000047c
 80034f0:	20000480 	.word	0x20000480
 80034f4:	20000484 	.word	0x20000484
 80034f8:	20000488 	.word	0x20000488
 80034fc:	2000048c 	.word	0x2000048c
 8003500:	20000490 	.word	0x20000490
 8003504:	080227ac 	.word	0x080227ac
 8003508:	20000494 	.word	0x20000494
 800350c:	20000464 	.word	0x20000464
 8003510:	08022724 	.word	0x08022724
 8003514:	08007ea5 	.word	0x08007ea5
 8003518:	2000045c 	.word	0x2000045c
 800351c:	08022730 	.word	0x08022730
 8003520:	0800a525 	.word	0x0800a525
 8003524:	20000448 	.word	0x20000448
 8003528:	08022744 	.word	0x08022744
 800352c:	08006405 	.word	0x08006405
 8003530:	20000454 	.word	0x20000454
 8003534:	08022750 	.word	0x08022750
 8003538:	08008b91 	.word	0x08008b91
 800353c:	20000450 	.word	0x20000450
 8003540:	08022760 	.word	0x08022760
 8003544:	08005569 	.word	0x08005569
 8003548:	2000044c 	.word	0x2000044c
 800354c:	08022768 	.word	0x08022768
 8003550:	0800ad49 	.word	0x0800ad49
 8003554:	20000458 	.word	0x20000458
 8003558:	08022778 	.word	0x08022778
 800355c:	08004c61 	.word	0x08004c61
 8003560:	20000460 	.word	0x20000460
 8003564:	08022784 	.word	0x08022784
 8003568:	0800b515 	.word	0x0800b515
 800356c:	20000468 	.word	0x20000468
 8003570:	08022790 	.word	0x08022790
 8003574:	0800b1e1 	.word	0x0800b1e1
 8003578:	2000046c 	.word	0x2000046c
 800357c:	080227a0 	.word	0x080227a0
 8003580:	080075d9 	.word	0x080075d9

08003584 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800358c:	f017 f9a6 	bl	801a8dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8003590:	2001      	movs	r0, #1
 8003592:	f014 f806 	bl	80175a2 <osDelay>
 8003596:	e7fb      	b.n	8003590 <StartDefaultTask+0xc>

08003598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	4b79      	ldr	r3, [pc, #484]	; (8003798 <MX_GPIO_Init+0x200>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a78      	ldr	r2, [pc, #480]	; (8003798 <MX_GPIO_Init+0x200>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b76      	ldr	r3, [pc, #472]	; (8003798 <MX_GPIO_Init+0x200>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <MX_GPIO_Init+0x200>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a71      	ldr	r2, [pc, #452]	; (8003798 <MX_GPIO_Init+0x200>)
 80035d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <MX_GPIO_Init+0x200>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	4b6b      	ldr	r3, [pc, #428]	; (8003798 <MX_GPIO_Init+0x200>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <MX_GPIO_Init+0x200>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b68      	ldr	r3, [pc, #416]	; (8003798 <MX_GPIO_Init+0x200>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	4b64      	ldr	r3, [pc, #400]	; (8003798 <MX_GPIO_Init+0x200>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a63      	ldr	r2, [pc, #396]	; (8003798 <MX_GPIO_Init+0x200>)
 800360c:	f043 0308 	orr.w	r3, r3, #8
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b61      	ldr	r3, [pc, #388]	; (8003798 <MX_GPIO_Init+0x200>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <MX_GPIO_Init+0x200>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <MX_GPIO_Init+0x200>)
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <MX_GPIO_Init+0x200>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b56      	ldr	r3, [pc, #344]	; (8003798 <MX_GPIO_Init+0x200>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a55      	ldr	r2, [pc, #340]	; (8003798 <MX_GPIO_Init+0x200>)
 8003644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b53      	ldr	r3, [pc, #332]	; (8003798 <MX_GPIO_Init+0x200>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	4b4f      	ldr	r3, [pc, #316]	; (8003798 <MX_GPIO_Init+0x200>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a4e      	ldr	r2, [pc, #312]	; (8003798 <MX_GPIO_Init+0x200>)
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <MX_GPIO_Init+0x200>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	4b48      	ldr	r3, [pc, #288]	; (8003798 <MX_GPIO_Init+0x200>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4a47      	ldr	r2, [pc, #284]	; (8003798 <MX_GPIO_Init+0x200>)
 800367c:	f043 0310 	orr.w	r3, r3, #16
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
 8003682:	4b45      	ldr	r3, [pc, #276]	; (8003798 <MX_GPIO_Init+0x200>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003694:	4841      	ldr	r0, [pc, #260]	; (800379c <MX_GPIO_Init+0x204>)
 8003696:	f009 ff19 	bl	800d4cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 800369a:	2200      	movs	r2, #0
 800369c:	2140      	movs	r1, #64	; 0x40
 800369e:	4840      	ldr	r0, [pc, #256]	; (80037a0 <MX_GPIO_Init+0x208>)
 80036a0:	f009 ff14 	bl	800d4cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80036a4:	2201      	movs	r2, #1
 80036a6:	2110      	movs	r1, #16
 80036a8:	483e      	ldr	r0, [pc, #248]	; (80037a4 <MX_GPIO_Init+0x20c>)
 80036aa:	f009 ff0f 	bl	800d4cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80036ae:	2201      	movs	r2, #1
 80036b0:	2101      	movs	r1, #1
 80036b2:	483d      	ldr	r0, [pc, #244]	; (80037a8 <MX_GPIO_Init+0x210>)
 80036b4:	f009 ff0a 	bl	800d4cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 80036b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036be:	2301      	movs	r3, #1
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 80036ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ce:	4619      	mov	r1, r3
 80036d0:	4832      	ldr	r0, [pc, #200]	; (800379c <MX_GPIO_Init+0x204>)
 80036d2:	f009 fd5f 	bl	800d194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 80036d6:	2340      	movs	r3, #64	; 0x40
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036da:	2301      	movs	r3, #1
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 80036e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ea:	4619      	mov	r1, r3
 80036ec:	482c      	ldr	r0, [pc, #176]	; (80037a0 <MX_GPIO_Init+0x208>)
 80036ee:	f009 fd51 	bl	800d194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80036f2:	2308      	movs	r3, #8
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036fc:	2301      	movs	r3, #1
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 8003700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003704:	4619      	mov	r1, r3
 8003706:	4826      	ldr	r0, [pc, #152]	; (80037a0 <MX_GPIO_Init+0x208>)
 8003708:	f009 fd44 	bl	800d194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800370c:	2310      	movs	r3, #16
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003710:	2301      	movs	r3, #1
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	2300      	movs	r3, #0
 800371a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003720:	4619      	mov	r1, r3
 8003722:	4820      	ldr	r0, [pc, #128]	; (80037a4 <MX_GPIO_Init+0x20c>)
 8003724:	f009 fd36 	bl	800d194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 8003728:	2330      	movs	r3, #48	; 0x30
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800372c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003732:	2301      	movs	r3, #1
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373a:	4619      	mov	r1, r3
 800373c:	4817      	ldr	r0, [pc, #92]	; (800379c <MX_GPIO_Init+0x204>)
 800373e:	f009 fd29 	bl	800d194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003742:	2301      	movs	r3, #1
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003746:	2301      	movs	r3, #1
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003756:	4619      	mov	r1, r3
 8003758:	4813      	ldr	r0, [pc, #76]	; (80037a8 <MX_GPIO_Init+0x210>)
 800375a:	f009 fd1b 	bl	800d194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2105      	movs	r1, #5
 8003762:	2009      	movs	r0, #9
 8003764:	f009 f8de 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003768:	2009      	movs	r0, #9
 800376a:	f009 f8f7 	bl	800c95c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800376e:	2200      	movs	r2, #0
 8003770:	2105      	movs	r1, #5
 8003772:	200a      	movs	r0, #10
 8003774:	f009 f8d6 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003778:	200a      	movs	r0, #10
 800377a:	f009 f8ef 	bl	800c95c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2105      	movs	r1, #5
 8003782:	2017      	movs	r0, #23
 8003784:	f009 f8ce 	bl	800c924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003788:	2017      	movs	r0, #23
 800378a:	f009 f8e7 	bl	800c95c <HAL_NVIC_EnableIRQ>

}
 800378e:	bf00      	nop
 8003790:	3738      	adds	r7, #56	; 0x38
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40020800 	.word	0x40020800
 80037a0:	40021800 	.word	0x40021800
 80037a4:	40020000 	.word	0x40020000
 80037a8:	40020400 	.word	0x40020400

080037ac <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037b0:	4b12      	ldr	r3, [pc, #72]	; (80037fc <MX_I2C3_Init+0x50>)
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <MX_I2C3_Init+0x54>)
 80037b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <MX_I2C3_Init+0x50>)
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <MX_I2C3_Init+0x58>)
 80037ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <MX_I2C3_Init+0x50>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <MX_I2C3_Init+0x50>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <MX_I2C3_Init+0x50>)
 80037ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <MX_I2C3_Init+0x50>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <MX_I2C3_Init+0x50>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <MX_I2C3_Init+0x50>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <MX_I2C3_Init+0x50>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80037e8:	4804      	ldr	r0, [pc, #16]	; (80037fc <MX_I2C3_Init+0x50>)
 80037ea:	f009 fea1 	bl	800d530 <HAL_I2C_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80037f4:	f000 f989 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20001218 	.word	0x20001218
 8003800:	40005c00 	.word	0x40005c00
 8003804:	00061a80 	.word	0x00061a80

08003808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a5b      	ldr	r2, [pc, #364]	; (8003994 <HAL_I2C_MspInit+0x18c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f040 80b0 	bne.w	800398c <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	4b59      	ldr	r3, [pc, #356]	; (8003998 <HAL_I2C_MspInit+0x190>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	4a58      	ldr	r2, [pc, #352]	; (8003998 <HAL_I2C_MspInit+0x190>)
 8003836:	f043 0304 	orr.w	r3, r3, #4
 800383a:	6313      	str	r3, [r2, #48]	; 0x30
 800383c:	4b56      	ldr	r3, [pc, #344]	; (8003998 <HAL_I2C_MspInit+0x190>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	4b52      	ldr	r3, [pc, #328]	; (8003998 <HAL_I2C_MspInit+0x190>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	4a51      	ldr	r2, [pc, #324]	; (8003998 <HAL_I2C_MspInit+0x190>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6313      	str	r3, [r2, #48]	; 0x30
 8003858:	4b4f      	ldr	r3, [pc, #316]	; (8003998 <HAL_I2C_MspInit+0x190>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800386a:	2312      	movs	r3, #18
 800386c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800386e:	2301      	movs	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003876:	2304      	movs	r3, #4
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	4619      	mov	r1, r3
 8003880:	4846      	ldr	r0, [pc, #280]	; (800399c <HAL_I2C_MspInit+0x194>)
 8003882:	f009 fc87 	bl	800d194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388c:	2312      	movs	r3, #18
 800388e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003898:	2304      	movs	r3, #4
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4619      	mov	r1, r3
 80038a2:	483f      	ldr	r0, [pc, #252]	; (80039a0 <HAL_I2C_MspInit+0x198>)
 80038a4:	f009 fc76 	bl	800d194 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <HAL_I2C_MspInit+0x190>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4a39      	ldr	r2, [pc, #228]	; (8003998 <HAL_I2C_MspInit+0x190>)
 80038b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b6:	6413      	str	r3, [r2, #64]	; 0x40
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_I2C_MspInit+0x190>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 80038c4:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038c6:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <HAL_I2C_MspInit+0x1a0>)
 80038c8:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038cc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80038d0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038d2:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038d8:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038e6:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038ec:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80038f2:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038f8:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 8003900:	2200      	movs	r2, #0
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8003904:	4827      	ldr	r0, [pc, #156]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 8003906:	f009 f837 	bl	800c978 <HAL_DMA_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8003910:	f000 f8fb 	bl	8003b0a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
 800391a:	4a22      	ldr	r2, [pc, #136]	; (80039a4 <HAL_I2C_MspInit+0x19c>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003922:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <HAL_I2C_MspInit+0x1a8>)
 8003924:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003928:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800392c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003936:	2200      	movs	r2, #0
 8003938:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 800393c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003940:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003944:	2200      	movs	r2, #0
 8003946:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003950:	2200      	movs	r2, #0
 8003952:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003956:	2200      	movs	r2, #0
 8003958:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 800395c:	2200      	movs	r2, #0
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8003960:	4812      	ldr	r0, [pc, #72]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003962:	f009 f809 	bl	800c978 <HAL_DMA_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 800396c:	f000 f8cd 	bl	8003b0a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003974:	635a      	str	r2, [r3, #52]	; 0x34
 8003976:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <HAL_I2C_MspInit+0x1a4>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 800397c:	2200      	movs	r2, #0
 800397e:	2105      	movs	r1, #5
 8003980:	2049      	movs	r0, #73	; 0x49
 8003982:	f008 ffcf 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003986:	2049      	movs	r0, #73	; 0x49
 8003988:	f008 ffe8 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800398c:	bf00      	nop
 800398e:	3728      	adds	r7, #40	; 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40005c00 	.word	0x40005c00
 8003998:	40023800 	.word	0x40023800
 800399c:	40020800 	.word	0x40020800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	2000126c 	.word	0x2000126c
 80039a8:	40026040 	.word	0x40026040
 80039ac:	200012cc 	.word	0x200012cc
 80039b0:	40026070 	.word	0x40026070

080039b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b8:	f007 fdb4 	bl	800b524 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039bc:	f000 f82c 	bl	8003a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039c0:	f7ff fdea 	bl	8003598 <MX_GPIO_Init>
  MX_DMA_Init();
 80039c4:	f7ff fc00 	bl	80031c8 <MX_DMA_Init>
  MX_CAN1_Init();
 80039c8:	f7ff fad2 	bl	8002f70 <MX_CAN1_Init>
  MX_CAN2_Init();
 80039cc:	f7ff fb06 	bl	8002fdc <MX_CAN2_Init>
  MX_TIM5_Init();
 80039d0:	f000 fcde 	bl	8004390 <MX_TIM5_Init>
  MX_TIM10_Init();
 80039d4:	f000 fd4c 	bl	8004470 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80039d8:	f000 fed8 	bl	800478c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80039dc:	f000 ff00 	bl	80047e0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80039e0:	f000 ff2a 	bl	8004838 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80039e4:	f000 f8cc 	bl	8003b80 <MX_SPI1_Init>
  MX_I2C3_Init();
 80039e8:	f7ff fee0 	bl	80037ac <MX_I2C3_Init>
  MX_ADC3_Init();
 80039ec:	f7ff fa2a 	bl	8002e44 <MX_ADC3_Init>
  MX_TIM3_Init();
 80039f0:	f000 fc02 	bl	80041f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80039f4:	f000 fc72 	bl	80042dc <MX_TIM4_Init>
  MX_TIM1_Init();
 80039f8:	f000 fb6e 	bl	80040d8 <MX_TIM1_Init>
  MX_RNG_Init();
 80039fc:	f000 f88a 	bl	8003b14 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 8003a00:	f007 fbaa 	bl	800b158 <startup_task>
  HAL_TIM_Base_Start(&htim3); //start micros clock
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <main+0x60>)
 8003a06:	f00d ff13 	bl	8011830 <HAL_TIM_Base_Start>
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003a0a:	f7ff fc91 	bl	8003330 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003a0e:	f013 fd75 	bl	80174fc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <main+0x5e>
 8003a14:	200014e4 	.word	0x200014e4

08003a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b094      	sub	sp, #80	; 0x50
 8003a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a1e:	f107 0320 	add.w	r3, r7, #32
 8003a22:	2230      	movs	r2, #48	; 0x30
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f017 fdcb 	bl	801b5c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a2c:	f107 030c 	add.w	r3, r7, #12
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <SystemClock_Config+0xcc>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	4a27      	ldr	r2, [pc, #156]	; (8003ae4 <SystemClock_Config+0xcc>)
 8003a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <SystemClock_Config+0xcc>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <SystemClock_Config+0xd0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <SystemClock_Config+0xd0>)
 8003a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <SystemClock_Config+0xd0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003a88:	2306      	movs	r3, #6
 8003a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a8c:	23a8      	movs	r3, #168	; 0xa8
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a90:	2302      	movs	r3, #2
 8003a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a94:	2307      	movs	r3, #7
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a98:	f107 0320 	add.w	r3, r7, #32
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f00c fd57 	bl	8010550 <HAL_RCC_OscConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003aa8:	f000 f82f 	bl	8003b0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aac:	230f      	movs	r3, #15
 8003aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ac4:	f107 030c 	add.w	r3, r7, #12
 8003ac8:	2105      	movs	r1, #5
 8003aca:	4618      	mov	r0, r3
 8003acc:	f00c ffb8 	bl	8010a40 <HAL_RCC_ClockConfig>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003ad6:	f000 f818 	bl	8003b0a <Error_Handler>
  }
}
 8003ada:	bf00      	nop
 8003adc:	3750      	adds	r7, #80	; 0x50
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	40007000 	.word	0x40007000

08003aec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003afe:	f007 fd33 	bl	800b568 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b0e:	b672      	cpsid	i
}
 8003b10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <Error_Handler+0x8>

08003b14 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <MX_RNG_Init+0x20>)
 8003b1a:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <MX_RNG_Init+0x24>)
 8003b1c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003b1e:	4805      	ldr	r0, [pc, #20]	; (8003b34 <MX_RNG_Init+0x20>)
 8003b20:	f00d f9a0 	bl	8010e64 <HAL_RNG_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003b2a:	f7ff ffee 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000132c 	.word	0x2000132c
 8003b38:	50060800 	.word	0x50060800

08003b3c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <HAL_RNG_MspInit+0x3c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10d      	bne.n	8003b6a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RNG_MspInit+0x40>)
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RNG_MspInit+0x40>)
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	6353      	str	r3, [r2, #52]	; 0x34
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <HAL_RNG_MspInit+0x40>)
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	50060800 	.word	0x50060800
 8003b7c:	40023800 	.word	0x40023800

08003b80 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <MX_SPI1_Init+0x68>)
 8003b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bb4:	2228      	movs	r2, #40	; 0x28
 8003bb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bcc:	220a      	movs	r2, #10
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bd0:	4804      	ldr	r0, [pc, #16]	; (8003be4 <MX_SPI1_Init+0x64>)
 8003bd2:	f00d f971 	bl	8010eb8 <HAL_SPI_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003bdc:	f7ff ff95 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	2000133c 	.word	0x2000133c
 8003be8:	40013000 	.word	0x40013000

08003bec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a56      	ldr	r2, [pc, #344]	; (8003d64 <HAL_SPI_MspInit+0x178>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f040 80a6 	bne.w	8003d5c <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	4b54      	ldr	r3, [pc, #336]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	4a53      	ldr	r2, [pc, #332]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c1e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c20:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	4a4c      	ldr	r2, [pc, #304]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3c:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	4a45      	ldr	r2, [pc, #276]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6313      	str	r3, [r2, #48]	; 0x30
 8003c58:	4b43      	ldr	r3, [pc, #268]	; (8003d68 <HAL_SPI_MspInit+0x17c>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003c64:	2318      	movs	r3, #24
 8003c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c70:	2303      	movs	r3, #3
 8003c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c74:	2305      	movs	r3, #5
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	483b      	ldr	r0, [pc, #236]	; (8003d6c <HAL_SPI_MspInit+0x180>)
 8003c80:	f009 fa88 	bl	800d194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c90:	2303      	movs	r3, #3
 8003c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c94:	2305      	movs	r3, #5
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4834      	ldr	r0, [pc, #208]	; (8003d70 <HAL_SPI_MspInit+0x184>)
 8003ca0:	f009 fa78 	bl	800d194 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <HAL_SPI_MspInit+0x18c>)
 8003ca8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003caa:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cac:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003cb0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cb2:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cbe:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cc4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003cd2:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cd8:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003ce4:	4823      	ldr	r0, [pc, #140]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003ce6:	f008 fe47 	bl	800c978 <HAL_DMA_Init>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8003cf0:	f7ff ff0b 	bl	8003b0a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <HAL_SPI_MspInit+0x188>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003d00:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_SPI_MspInit+0x194>)
 8003d04:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d08:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003d0c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d10:	2240      	movs	r2, #64	; 0x40
 8003d12:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d20:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d22:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d28:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003d40:	480e      	ldr	r0, [pc, #56]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d42:	f008 fe19 	bl	800c978 <HAL_DMA_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003d4c:	f7ff fedd 	bl	8003b0a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d54:	649a      	str	r2, [r3, #72]	; 0x48
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <HAL_SPI_MspInit+0x190>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40013000 	.word	0x40013000
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40020000 	.word	0x40020000
 8003d74:	20001394 	.word	0x20001394
 8003d78:	40026410 	.word	0x40026410
 8003d7c:	200013f4 	.word	0x200013f4
 8003d80:	40026458 	.word	0x40026458

08003d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_MspInit+0x54>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <HAL_MspInit+0x54>)
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d98:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <HAL_MspInit+0x54>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_MspInit+0x54>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_MspInit+0x54>)
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_MspInit+0x54>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	210f      	movs	r1, #15
 8003dc6:	f06f 0001 	mvn.w	r0, #1
 8003dca:	f008 fdab 	bl	800c924 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	; 0x38
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_InitTick+0xe8>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a33      	ldr	r2, [pc, #204]	; (8003ec4 <HAL_InitTick+0xe8>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_InitTick+0xe8>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e08:	f107 0210 	add.w	r2, r7, #16
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	4611      	mov	r1, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00c fff4 	bl	8010e00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003e22:	f00c ffc5 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 8003e26:	6378      	str	r0, [r7, #52]	; 0x34
 8003e28:	e004      	b.n	8003e34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003e2a:	f00c ffc1 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_InitTick+0xec>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	0c9b      	lsrs	r3, r3, #18
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003e42:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e50:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003e52:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003e6a:	4818      	ldr	r0, [pc, #96]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e6c:	f00d fc90 	bl	8011790 <HAL_TIM_Base_Init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003e76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11b      	bne.n	8003eb6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003e7e:	4813      	ldr	r0, [pc, #76]	; (8003ecc <HAL_InitTick+0xf0>)
 8003e80:	f00d fd3e 	bl	8011900 <HAL_TIM_Base_Start_IT>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003e8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d111      	bne.n	8003eb6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e92:	201c      	movs	r0, #28
 8003e94:	f008 fd62 	bl	800c95c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b0f      	cmp	r3, #15
 8003e9c:	d808      	bhi.n	8003eb0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	201c      	movs	r0, #28
 8003ea4:	f008 fd3e 	bl	800c924 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ea8:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_InitTick+0xf4>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e002      	b.n	8003eb6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003eb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3738      	adds	r7, #56	; 0x38
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	431bde83 	.word	0x431bde83
 8003ecc:	20001454 	.word	0x20001454
 8003ed0:	20000014 	.word	0x20000014

08003ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <NMI_Handler+0x4>

08003eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <HardFault_Handler+0x4>

08003ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <MemManage_Handler+0x4>

08003ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <BusFault_Handler+0x4>

08003eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <UsageFault_Handler+0x4>

08003ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003f04:	2008      	movs	r0, #8
 8003f06:	f009 fafb 	bl	800d500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003f12:	2010      	movs	r0, #16
 8003f14:	f009 faf4 	bl	800d500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <DMA1_Stream1_IRQHandler+0x10>)
 8003f22:	f008 fec1 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20001730 	.word	0x20001730

08003f30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <DMA1_Stream2_IRQHandler+0x10>)
 8003f36:	f008 feb7 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000126c 	.word	0x2000126c

08003f44 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <DMA1_Stream4_IRQHandler+0x10>)
 8003f4a:	f008 fead 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200012cc 	.word	0x200012cc

08003f58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <CAN1_RX0_IRQHandler+0x10>)
 8003f5e:	f008 fa03 	bl	800c368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200003f4 	.word	0x200003f4

08003f6c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <CAN1_RX1_IRQHandler+0x10>)
 8003f72:	f008 f9f9 	bl	800c368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200003f4 	.word	0x200003f4

08003f80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003f84:	2020      	movs	r0, #32
 8003f86:	f009 fabb 	bl	800d500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <TIM2_IRQHandler+0x10>)
 8003f96:	f00d fe93 	bl	8011cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20001454 	.word	0x20001454

08003fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003fa8:	4803      	ldr	r0, [pc, #12]	; (8003fb8 <TIM3_IRQHandler+0x14>)
 8003faa:	f00d fe89 	bl	8011cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 8003fae:	f7fe f92d 	bl	800220c <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200014e4 	.word	0x200014e4

08003fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <USART1_IRQHandler+0x10>)
 8003fc2:	f00e ff15 	bl	8012df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20001604 	.word	0x20001604

08003fd0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <USART3_IRQHandler+0x10>)
 8003fd6:	f00e ff0b 	bl	8012df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20001648 	.word	0x20001648

08003fe4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <DMA2_Stream0_IRQHandler+0x10>)
 8003fea:	f008 fe5d 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20001394 	.word	0x20001394

08003ff8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <DMA2_Stream1_IRQHandler+0x10>)
 8003ffe:	f008 fe53 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20001790 	.word	0x20001790

0800400c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <DMA2_Stream3_IRQHandler+0x10>)
 8004012:	f008 fe49 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200013f4 	.word	0x200013f4

08004020 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <CAN2_RX0_IRQHandler+0x10>)
 8004026:	f008 f99f 	bl	800c368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000041c 	.word	0x2000041c

08004034 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <CAN2_RX1_IRQHandler+0x10>)
 800403a:	f008 f995 	bl	800c368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000041c 	.word	0x2000041c

08004048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <OTG_FS_IRQHandler+0x10>)
 800404e:	f00b f952 	bl	800f2f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	2000ea60 	.word	0x2000ea60

0800405c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <DMA2_Stream5_IRQHandler+0x10>)
 8004062:	f008 fe21 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200016d0 	.word	0x200016d0

08004070 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004074:	4802      	ldr	r0, [pc, #8]	; (8004080 <DMA2_Stream6_IRQHandler+0x10>)
 8004076:	f008 fe17 	bl	800cca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	200017f0 	.word	0x200017f0

08004084 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <USART6_IRQHandler+0x10>)
 800408a:	f00e feb1 	bl	8012df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000168c 	.word	0x2000168c

08004098 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <I2C3_ER_IRQHandler+0x10>)
 800409e:	f00a f83f 	bl	800e120 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20001218 	.word	0x20001218

080040ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <SystemInit+0x28>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <SystemInit+0x28>)
 80040b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <SystemInit+0x28>)
 80040c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040c6:	609a      	str	r2, [r3, #8]
#endif
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b092      	sub	sp, #72	; 0x48
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
 80040f8:	615a      	str	r2, [r3, #20]
 80040fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	2220      	movs	r2, #32
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f017 fa5d 	bl	801b5c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004108:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <MX_TIM1_Init+0x118>)
 800410a:	4a3a      	ldr	r2, [pc, #232]	; (80041f4 <MX_TIM1_Init+0x11c>)
 800410c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800410e:	4b38      	ldr	r3, [pc, #224]	; (80041f0 <MX_TIM1_Init+0x118>)
 8004110:	22a7      	movs	r2, #167	; 0xa7
 8004112:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004114:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <MX_TIM1_Init+0x118>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800411a:	4b35      	ldr	r3, [pc, #212]	; (80041f0 <MX_TIM1_Init+0x118>)
 800411c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004120:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004122:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <MX_TIM1_Init+0x118>)
 8004124:	2200      	movs	r2, #0
 8004126:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004128:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <MX_TIM1_Init+0x118>)
 800412a:	2200      	movs	r2, #0
 800412c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <MX_TIM1_Init+0x118>)
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004134:	482e      	ldr	r0, [pc, #184]	; (80041f0 <MX_TIM1_Init+0x118>)
 8004136:	f00d fcac 	bl	8011a92 <HAL_TIM_PWM_Init>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004140:	f7ff fce3 	bl	8003b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004144:	2300      	movs	r3, #0
 8004146:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004148:	2300      	movs	r3, #0
 800414a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800414c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004150:	4619      	mov	r1, r3
 8004152:	4827      	ldr	r0, [pc, #156]	; (80041f0 <MX_TIM1_Init+0x118>)
 8004154:	f00e fbda 	bl	801290c <HAL_TIMEx_MasterConfigSynchronization>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800415e:	f7ff fcd4 	bl	8003b0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004162:	2360      	movs	r3, #96	; 0x60
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800416a:	2300      	movs	r3, #0
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800416e:	2300      	movs	r3, #0
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800417e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004182:	2200      	movs	r2, #0
 8004184:	4619      	mov	r1, r3
 8004186:	481a      	ldr	r0, [pc, #104]	; (80041f0 <MX_TIM1_Init+0x118>)
 8004188:	f00d fefe 	bl	8011f88 <HAL_TIM_PWM_ConfigChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004192:	f7ff fcba 	bl	8003b0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800419a:	2204      	movs	r2, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4814      	ldr	r0, [pc, #80]	; (80041f0 <MX_TIM1_Init+0x118>)
 80041a0:	f00d fef2 	bl	8011f88 <HAL_TIM_PWM_ConfigChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80041aa:	f7ff fcae 	bl	8003b0a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4807      	ldr	r0, [pc, #28]	; (80041f0 <MX_TIM1_Init+0x118>)
 80041d2:	f00e fc17 	bl	8012a04 <HAL_TIMEx_ConfigBreakDeadTime>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80041dc:	f7ff fc95 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80041e0:	4803      	ldr	r0, [pc, #12]	; (80041f0 <MX_TIM1_Init+0x118>)
 80041e2:	f000 fa1f 	bl	8004624 <HAL_TIM_MspPostInit>

}
 80041e6:	bf00      	nop
 80041e8:	3748      	adds	r7, #72	; 0x48
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000149c 	.word	0x2000149c
 80041f4:	40010000 	.word	0x40010000

080041f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	; 0x38
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800420c:	f107 0320 	add.w	r3, r7, #32
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	611a      	str	r2, [r3, #16]
 8004224:	615a      	str	r2, [r3, #20]
 8004226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004228:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <MX_TIM3_Init+0xdc>)
 800422a:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <MX_TIM3_Init+0xe0>)
 800422c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <MX_TIM3_Init+0xdc>)
 8004230:	22a7      	movs	r2, #167	; 0xa7
 8004232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <MX_TIM3_Init+0xdc>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800423a:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <MX_TIM3_Init+0xdc>)
 800423c:	2201      	movs	r2, #1
 800423e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <MX_TIM3_Init+0xdc>)
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <MX_TIM3_Init+0xdc>)
 8004248:	2200      	movs	r2, #0
 800424a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800424c:	4821      	ldr	r0, [pc, #132]	; (80042d4 <MX_TIM3_Init+0xdc>)
 800424e:	f00d fa9f 	bl	8011790 <HAL_TIM_Base_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8004258:	f7ff fc57 	bl	8003b0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800425c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004266:	4619      	mov	r1, r3
 8004268:	481a      	ldr	r0, [pc, #104]	; (80042d4 <MX_TIM3_Init+0xdc>)
 800426a:	f00d ff4f 	bl	801210c <HAL_TIM_ConfigClockSource>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004274:	f7ff fc49 	bl	8003b0a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004278:	4816      	ldr	r0, [pc, #88]	; (80042d4 <MX_TIM3_Init+0xdc>)
 800427a:	f00d fbb1 	bl	80119e0 <HAL_TIM_OC_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004284:	f7ff fc41 	bl	8003b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004290:	f107 0320 	add.w	r3, r7, #32
 8004294:	4619      	mov	r1, r3
 8004296:	480f      	ldr	r0, [pc, #60]	; (80042d4 <MX_TIM3_Init+0xdc>)
 8004298:	f00e fb38 	bl	801290c <HAL_TIMEx_MasterConfigSynchronization>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80042a2:	f7ff fc32 	bl	8003b0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	2200      	movs	r2, #0
 80042ba:	4619      	mov	r1, r3
 80042bc:	4805      	ldr	r0, [pc, #20]	; (80042d4 <MX_TIM3_Init+0xdc>)
 80042be:	f00d fe07 	bl	8011ed0 <HAL_TIM_OC_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80042c8:	f7ff fc1f 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042cc:	bf00      	nop
 80042ce:	3738      	adds	r7, #56	; 0x38
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200014e4 	.word	0x200014e4
 80042d8:	40000400 	.word	0x40000400

080042dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042e2:	f107 0320 	add.w	r3, r7, #32
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	611a      	str	r2, [r3, #16]
 80042fa:	615a      	str	r2, [r3, #20]
 80042fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <MX_TIM4_Init+0xac>)
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <MX_TIM4_Init+0xb0>)
 8004302:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <MX_TIM4_Init+0xac>)
 8004306:	f240 32e7 	movw	r2, #999	; 0x3e7
 800430a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800430c:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <MX_TIM4_Init+0xac>)
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <MX_TIM4_Init+0xac>)
 8004314:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004318:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <MX_TIM4_Init+0xac>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <MX_TIM4_Init+0xac>)
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004326:	4818      	ldr	r0, [pc, #96]	; (8004388 <MX_TIM4_Init+0xac>)
 8004328:	f00d fbb3 	bl	8011a92 <HAL_TIM_PWM_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8004332:	f7ff fbea 	bl	8003b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800433a:	2300      	movs	r3, #0
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800433e:	f107 0320 	add.w	r3, r7, #32
 8004342:	4619      	mov	r1, r3
 8004344:	4810      	ldr	r0, [pc, #64]	; (8004388 <MX_TIM4_Init+0xac>)
 8004346:	f00e fae1 	bl	801290c <HAL_TIMEx_MasterConfigSynchronization>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004350:	f7ff fbdb 	bl	8003b0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004354:	2360      	movs	r3, #96	; 0x60
 8004356:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	2208      	movs	r2, #8
 8004368:	4619      	mov	r1, r3
 800436a:	4807      	ldr	r0, [pc, #28]	; (8004388 <MX_TIM4_Init+0xac>)
 800436c:	f00d fe0c 	bl	8011f88 <HAL_TIM_PWM_ConfigChannel>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8004376:	f7ff fbc8 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800437a:	4803      	ldr	r0, [pc, #12]	; (8004388 <MX_TIM4_Init+0xac>)
 800437c:	f000 f952 	bl	8004624 <HAL_TIM_MspPostInit>

}
 8004380:	bf00      	nop
 8004382:	3728      	adds	r7, #40	; 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	2000152c 	.word	0x2000152c
 800438c:	40000800 	.word	0x40000800

08004390 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004396:	f107 0320 	add.w	r3, r7, #32
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	611a      	str	r2, [r3, #16]
 80043ae:	615a      	str	r2, [r3, #20]
 80043b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80043b2:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043b4:	4a2d      	ldr	r2, [pc, #180]	; (800446c <MX_TIM5_Init+0xdc>)
 80043b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 80043b8:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043ba:	f240 5225 	movw	r2, #1317	; 0x525
 80043be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c0:	4b29      	ldr	r3, [pc, #164]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 80043c6:	4b28      	ldr	r3, [pc, #160]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043c8:	22ff      	movs	r2, #255	; 0xff
 80043ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043cc:	4b26      	ldr	r3, [pc, #152]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043d4:	2280      	movs	r2, #128	; 0x80
 80043d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80043d8:	4823      	ldr	r0, [pc, #140]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043da:	f00d fb5a 	bl	8011a92 <HAL_TIM_PWM_Init>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80043e4:	f7ff fb91 	bl	8003b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80043f0:	f107 0320 	add.w	r3, r7, #32
 80043f4:	4619      	mov	r1, r3
 80043f6:	481c      	ldr	r0, [pc, #112]	; (8004468 <MX_TIM5_Init+0xd8>)
 80043f8:	f00e fa88 	bl	801290c <HAL_TIMEx_MasterConfigSynchronization>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8004402:	f7ff fb82 	bl	8003b0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004406:	2360      	movs	r3, #96	; 0x60
 8004408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800440e:	2302      	movs	r3, #2
 8004410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004412:	2304      	movs	r3, #4
 8004414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	2200      	movs	r2, #0
 800441a:	4619      	mov	r1, r3
 800441c:	4812      	ldr	r0, [pc, #72]	; (8004468 <MX_TIM5_Init+0xd8>)
 800441e:	f00d fdb3 	bl	8011f88 <HAL_TIM_PWM_ConfigChannel>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8004428:	f7ff fb6f 	bl	8003b0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	2204      	movs	r2, #4
 8004430:	4619      	mov	r1, r3
 8004432:	480d      	ldr	r0, [pc, #52]	; (8004468 <MX_TIM5_Init+0xd8>)
 8004434:	f00d fda8 	bl	8011f88 <HAL_TIM_PWM_ConfigChannel>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800443e:	f7ff fb64 	bl	8003b0a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	2208      	movs	r2, #8
 8004446:	4619      	mov	r1, r3
 8004448:	4807      	ldr	r0, [pc, #28]	; (8004468 <MX_TIM5_Init+0xd8>)
 800444a:	f00d fd9d 	bl	8011f88 <HAL_TIM_PWM_ConfigChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8004454:	f7ff fb59 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004458:	4803      	ldr	r0, [pc, #12]	; (8004468 <MX_TIM5_Init+0xd8>)
 800445a:	f000 f8e3 	bl	8004624 <HAL_TIM_MspPostInit>

}
 800445e:	bf00      	nop
 8004460:	3728      	adds	r7, #40	; 0x28
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20001574 	.word	0x20001574
 800446c:	40000c00 	.word	0x40000c00

08004470 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
 8004484:	615a      	str	r2, [r3, #20]
 8004486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <MX_TIM10_Init+0x94>)
 800448a:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <MX_TIM10_Init+0x98>)
 800448c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <MX_TIM10_Init+0x94>)
 8004490:	2200      	movs	r2, #0
 8004492:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <MX_TIM10_Init+0x94>)
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800449a:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <MX_TIM10_Init+0x94>)
 800449c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <MX_TIM10_Init+0x94>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a8:	4b16      	ldr	r3, [pc, #88]	; (8004504 <MX_TIM10_Init+0x94>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80044ae:	4815      	ldr	r0, [pc, #84]	; (8004504 <MX_TIM10_Init+0x94>)
 80044b0:	f00d f96e 	bl	8011790 <HAL_TIM_Base_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80044ba:	f7ff fb26 	bl	8003b0a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80044be:	4811      	ldr	r0, [pc, #68]	; (8004504 <MX_TIM10_Init+0x94>)
 80044c0:	f00d fae7 	bl	8011a92 <HAL_TIM_PWM_Init>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80044ca:	f7ff fb1e 	bl	8003b0a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ce:	2360      	movs	r3, #96	; 0x60
 80044d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	4619      	mov	r1, r3
 80044e4:	4807      	ldr	r0, [pc, #28]	; (8004504 <MX_TIM10_Init+0x94>)
 80044e6:	f00d fd4f 	bl	8011f88 <HAL_TIM_PWM_ConfigChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80044f0:	f7ff fb0b 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80044f4:	4803      	ldr	r0, [pc, #12]	; (8004504 <MX_TIM10_Init+0x94>)
 80044f6:	f000 f895 	bl	8004624 <HAL_TIM_MspPostInit>

}
 80044fa:	bf00      	nop
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200015bc 	.word	0x200015bc
 8004508:	40014400 	.word	0x40014400

0800450c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_TIM_PWM_MspInit+0x8c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10e      	bne.n	800453c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6453      	str	r3, [r2, #68]	; 0x44
 800452e:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800453a:	e026      	b.n	800458a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <HAL_TIM_PWM_MspInit+0x94>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10e      	bne.n	8004564 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	4a13      	ldr	r2, [pc, #76]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	6413      	str	r3, [r2, #64]	; 0x40
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
}
 8004562:	e012      	b.n	800458a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <HAL_TIM_PWM_MspInit+0x98>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10d      	bne.n	800458a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004578:	f043 0308 	orr.w	r3, r3, #8
 800457c:	6413      	str	r3, [r2, #64]	; 0x40
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <HAL_TIM_PWM_MspInit+0x90>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40023800 	.word	0x40023800
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00

080045a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <HAL_TIM_Base_MspInit+0x70>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d116      	bne.n	80045e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b17      	ldr	r3, [pc, #92]	; (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a16      	ldr	r2, [pc, #88]	; (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2105      	movs	r1, #5
 80045da:	201d      	movs	r0, #29
 80045dc:	f008 f9a2 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80045e0:	201d      	movs	r0, #29
 80045e2:	f008 f9bb 	bl	800c95c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80045e6:	e012      	b.n	800460e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <HAL_TIM_Base_MspInit+0x78>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_TIM_Base_MspInit+0x74>)
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	6453      	str	r3, [r2, #68]	; 0x44
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_TIM_Base_MspInit+0x74>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40000400 	.word	0x40000400
 800461c:	40023800 	.word	0x40023800
 8004620:	40014400 	.word	0x40014400

08004624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 031c 	add.w	r3, r7, #28
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a49      	ldr	r2, [pc, #292]	; (8004768 <HAL_TIM_MspPostInit+0x144>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d11f      	bne.n	8004686 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	4b48      	ldr	r3, [pc, #288]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4a47      	ldr	r2, [pc, #284]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 8004650:	f043 0310 	orr.w	r3, r3, #16
 8004654:	6313      	str	r3, [r2, #48]	; 0x30
 8004656:	4b45      	ldr	r3, [pc, #276]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004662:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004668:	2302      	movs	r3, #2
 800466a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004670:	2300      	movs	r3, #0
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004674:	2301      	movs	r3, #1
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004678:	f107 031c 	add.w	r3, r7, #28
 800467c:	4619      	mov	r1, r3
 800467e:	483c      	ldr	r0, [pc, #240]	; (8004770 <HAL_TIM_MspPostInit+0x14c>)
 8004680:	f008 fd88 	bl	800d194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004684:	e06c      	b.n	8004760 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3a      	ldr	r2, [pc, #232]	; (8004774 <HAL_TIM_MspPostInit+0x150>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d11f      	bne.n	80046d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	4a34      	ldr	r2, [pc, #208]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 800469a:	f043 0308 	orr.w	r3, r3, #8
 800469e:	6313      	str	r3, [r2, #48]	; 0x30
 80046a0:	4b32      	ldr	r3, [pc, #200]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80046ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b2:	2302      	movs	r3, #2
 80046b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ba:	2300      	movs	r3, #0
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046be:	2302      	movs	r3, #2
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80046c2:	f107 031c 	add.w	r3, r7, #28
 80046c6:	4619      	mov	r1, r3
 80046c8:	482b      	ldr	r0, [pc, #172]	; (8004778 <HAL_TIM_MspPostInit+0x154>)
 80046ca:	f008 fd63 	bl	800d194 <HAL_GPIO_Init>
}
 80046ce:	e047      	b.n	8004760 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM5)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_TIM_MspPostInit+0x158>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d11f      	bne.n	800471a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	4b23      	ldr	r3, [pc, #140]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a22      	ldr	r2, [pc, #136]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 80046f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80046fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	2302      	movs	r3, #2
 80046fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004700:	2300      	movs	r3, #0
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004704:	2300      	movs	r3, #0
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004708:	2302      	movs	r3, #2
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800470c:	f107 031c 	add.w	r3, r7, #28
 8004710:	4619      	mov	r1, r3
 8004712:	481b      	ldr	r0, [pc, #108]	; (8004780 <HAL_TIM_MspPostInit+0x15c>)
 8004714:	f008 fd3e 	bl	800d194 <HAL_GPIO_Init>
}
 8004718:	e022      	b.n	8004760 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM10)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a19      	ldr	r2, [pc, #100]	; (8004784 <HAL_TIM_MspPostInit+0x160>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d11d      	bne.n	8004760 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	4a0f      	ldr	r2, [pc, #60]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 800472e:	f043 0320 	orr.w	r3, r3, #32
 8004732:	6313      	str	r3, [r2, #48]	; 0x30
 8004734:	4b0d      	ldr	r3, [pc, #52]	; (800476c <HAL_TIM_MspPostInit+0x148>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 8004740:	2340      	movs	r3, #64	; 0x40
 8004742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474c:	2300      	movs	r3, #0
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004750:	2303      	movs	r3, #3
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 8004754:	f107 031c 	add.w	r3, r7, #28
 8004758:	4619      	mov	r1, r3
 800475a:	480b      	ldr	r0, [pc, #44]	; (8004788 <HAL_TIM_MspPostInit+0x164>)
 800475c:	f008 fd1a 	bl	800d194 <HAL_GPIO_Init>
}
 8004760:	bf00      	nop
 8004762:	3730      	adds	r7, #48	; 0x30
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40010000 	.word	0x40010000
 800476c:	40023800 	.word	0x40023800
 8004770:	40021000 	.word	0x40021000
 8004774:	40000800 	.word	0x40000800
 8004778:	40020c00 	.word	0x40020c00
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40021c00 	.word	0x40021c00
 8004784:	40014400 	.word	0x40014400
 8004788:	40021400 	.word	0x40021400

0800478c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <MX_USART1_UART_Init+0x50>)
 8004794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 8004798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800479c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 80047b2:	220c      	movs	r2, #12
 80047b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047c2:	4805      	ldr	r0, [pc, #20]	; (80047d8 <MX_USART1_UART_Init+0x4c>)
 80047c4:	f00e f984 	bl	8012ad0 <HAL_UART_Init>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047ce:	f7ff f99c 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20001604 	.word	0x20001604
 80047dc:	40011000 	.word	0x40011000

080047e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <MX_USART3_UART_Init+0x4c>)
 80047e6:	4a12      	ldr	r2, [pc, #72]	; (8004830 <MX_USART3_UART_Init+0x50>)
 80047e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <MX_USART3_UART_Init+0x4c>)
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <MX_USART3_UART_Init+0x54>)
 80047ee:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <MX_USART3_UART_Init+0x4c>)
 80047f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <MX_USART3_UART_Init+0x4c>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <MX_USART3_UART_Init+0x4c>)
 8004800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004804:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <MX_USART3_UART_Init+0x4c>)
 8004808:	220c      	movs	r2, #12
 800480a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800480c:	4b07      	ldr	r3, [pc, #28]	; (800482c <MX_USART3_UART_Init+0x4c>)
 800480e:	2200      	movs	r2, #0
 8004810:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <MX_USART3_UART_Init+0x4c>)
 8004814:	2200      	movs	r2, #0
 8004816:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004818:	4804      	ldr	r0, [pc, #16]	; (800482c <MX_USART3_UART_Init+0x4c>)
 800481a:	f00e f959 	bl	8012ad0 <HAL_UART_Init>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8004824:	f7ff f971 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004828:	bf00      	nop
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20001648 	.word	0x20001648
 8004830:	40004800 	.word	0x40004800
 8004834:	000186a0 	.word	0x000186a0

08004838 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 800483e:	4a12      	ldr	r2, [pc, #72]	; (8004888 <MX_USART6_UART_Init+0x50>)
 8004840:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 8004844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004848:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 800484c:	2200      	movs	r2, #0
 800484e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 8004858:	2200      	movs	r2, #0
 800485a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 800485e:	220c      	movs	r2, #12
 8004860:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 8004864:	2200      	movs	r2, #0
 8004866:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 800486a:	2200      	movs	r2, #0
 800486c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800486e:	4805      	ldr	r0, [pc, #20]	; (8004884 <MX_USART6_UART_Init+0x4c>)
 8004870:	f00e f92e 	bl	8012ad0 <HAL_UART_Init>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800487a:	f7ff f946 	bl	8003b0a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	2000168c 	.word	0x2000168c
 8004888:	40011400 	.word	0x40011400

0800488c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	; 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a78      	ldr	r2, [pc, #480]	; (8004a8c <HAL_UART_MspInit+0x200>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	f040 8083 	bne.w	80049b6 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048b0:	2300      	movs	r3, #0
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	4b76      	ldr	r3, [pc, #472]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	4a75      	ldr	r2, [pc, #468]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048ba:	f043 0310 	orr.w	r3, r3, #16
 80048be:	6453      	str	r3, [r2, #68]	; 0x44
 80048c0:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	623b      	str	r3, [r7, #32]
 80048ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	4b6f      	ldr	r3, [pc, #444]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	4a6e      	ldr	r2, [pc, #440]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	6313      	str	r3, [r2, #48]	; 0x30
 80048dc:	4b6c      	ldr	r3, [pc, #432]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	4b68      	ldr	r3, [pc, #416]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	4a67      	ldr	r2, [pc, #412]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6313      	str	r3, [r2, #48]	; 0x30
 80048f8:	4b65      	ldr	r3, [pc, #404]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	2302      	movs	r3, #2
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	2300      	movs	r3, #0
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004910:	2303      	movs	r3, #3
 8004912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004914:	2307      	movs	r3, #7
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800491c:	4619      	mov	r1, r3
 800491e:	485d      	ldr	r0, [pc, #372]	; (8004a94 <HAL_UART_MspInit+0x208>)
 8004920:	f008 fc38 	bl	800d194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492a:	2302      	movs	r3, #2
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004932:	2303      	movs	r3, #3
 8004934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004936:	2307      	movs	r3, #7
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800493e:	4619      	mov	r1, r3
 8004940:	4855      	ldr	r0, [pc, #340]	; (8004a98 <HAL_UART_MspInit+0x20c>)
 8004942:	f008 fc27 	bl	800d194 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8004946:	4b55      	ldr	r3, [pc, #340]	; (8004a9c <HAL_UART_MspInit+0x210>)
 8004948:	4a55      	ldr	r2, [pc, #340]	; (8004aa0 <HAL_UART_MspInit+0x214>)
 800494a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_UART_MspInit+0x210>)
 800494e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004952:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004954:	4b51      	ldr	r3, [pc, #324]	; (8004a9c <HAL_UART_MspInit+0x210>)
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800495a:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_UART_MspInit+0x210>)
 800495c:	2200      	movs	r2, #0
 800495e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004960:	4b4e      	ldr	r3, [pc, #312]	; (8004a9c <HAL_UART_MspInit+0x210>)
 8004962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004966:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004968:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <HAL_UART_MspInit+0x210>)
 800496a:	2200      	movs	r2, #0
 800496c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800496e:	4b4b      	ldr	r3, [pc, #300]	; (8004a9c <HAL_UART_MspInit+0x210>)
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004974:	4b49      	ldr	r3, [pc, #292]	; (8004a9c <HAL_UART_MspInit+0x210>)
 8004976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800497a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800497c:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_UART_MspInit+0x210>)
 800497e:	2200      	movs	r2, #0
 8004980:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004982:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_UART_MspInit+0x210>)
 8004984:	2200      	movs	r2, #0
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004988:	4844      	ldr	r0, [pc, #272]	; (8004a9c <HAL_UART_MspInit+0x210>)
 800498a:	f007 fff5 	bl	800c978 <HAL_DMA_Init>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004994:	f7ff f8b9 	bl	8003b0a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <HAL_UART_MspInit+0x210>)
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
 800499e:	4a3f      	ldr	r2, [pc, #252]	; (8004a9c <HAL_UART_MspInit+0x210>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2105      	movs	r1, #5
 80049a8:	2025      	movs	r0, #37	; 0x25
 80049aa:	f007 ffbb 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049ae:	2025      	movs	r0, #37	; 0x25
 80049b0:	f007 ffd4 	bl	800c95c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80049b4:	e116      	b.n	8004be4 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a3a      	ldr	r2, [pc, #232]	; (8004aa4 <HAL_UART_MspInit+0x218>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d179      	bne.n	8004ab4 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	4a31      	ldr	r2, [pc, #196]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80049ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ce:	6413      	str	r3, [r2, #64]	; 0x40
 80049d0:	4b2f      	ldr	r3, [pc, #188]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80049e6:	f043 0304 	orr.w	r3, r3, #4
 80049ea:	6313      	str	r3, [r2, #48]	; 0x30
 80049ec:	4b28      	ldr	r3, [pc, #160]	; (8004a90 <HAL_UART_MspInit+0x204>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80049f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fe:	2302      	movs	r3, #2
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a06:	2303      	movs	r3, #3
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a12:	4619      	mov	r1, r3
 8004a14:	4824      	ldr	r0, [pc, #144]	; (8004aa8 <HAL_UART_MspInit+0x21c>)
 8004a16:	f008 fbbd 	bl	800d194 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a1c:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <HAL_UART_MspInit+0x224>)
 8004a1e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004a20:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a26:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a3a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a4e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a50:	4b16      	ldr	r3, [pc, #88]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004a5c:	4813      	ldr	r0, [pc, #76]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a5e:	f007 ff8b 	bl	800c978 <HAL_DMA_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8004a68:	f7ff f84f 	bl	8003b0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a0f      	ldr	r2, [pc, #60]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <HAL_UART_MspInit+0x220>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2105      	movs	r1, #5
 8004a7c:	2027      	movs	r0, #39	; 0x27
 8004a7e:	f007 ff51 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a82:	2027      	movs	r0, #39	; 0x27
 8004a84:	f007 ff6a 	bl	800c95c <HAL_NVIC_EnableIRQ>
}
 8004a88:	e0ac      	b.n	8004be4 <HAL_UART_MspInit+0x358>
 8004a8a:	bf00      	nop
 8004a8c:	40011000 	.word	0x40011000
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40020400 	.word	0x40020400
 8004a98:	40020000 	.word	0x40020000
 8004a9c:	200016d0 	.word	0x200016d0
 8004aa0:	40026488 	.word	0x40026488
 8004aa4:	40004800 	.word	0x40004800
 8004aa8:	40020800 	.word	0x40020800
 8004aac:	20001730 	.word	0x20001730
 8004ab0:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a4c      	ldr	r2, [pc, #304]	; (8004bec <HAL_UART_MspInit+0x360>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	f040 8092 	bne.w	8004be4 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	4b4a      	ldr	r3, [pc, #296]	; (8004bf0 <HAL_UART_MspInit+0x364>)
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	4a49      	ldr	r2, [pc, #292]	; (8004bf0 <HAL_UART_MspInit+0x364>)
 8004aca:	f043 0320 	orr.w	r3, r3, #32
 8004ace:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad0:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_UART_MspInit+0x364>)
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004adc:	2300      	movs	r3, #0
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	4b43      	ldr	r3, [pc, #268]	; (8004bf0 <HAL_UART_MspInit+0x364>)
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	4a42      	ldr	r2, [pc, #264]	; (8004bf0 <HAL_UART_MspInit+0x364>)
 8004ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aea:	6313      	str	r3, [r2, #48]	; 0x30
 8004aec:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <HAL_UART_MspInit+0x364>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004af8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b06:	2303      	movs	r3, #3
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b12:	4619      	mov	r1, r3
 8004b14:	4837      	ldr	r0, [pc, #220]	; (8004bf4 <HAL_UART_MspInit+0x368>)
 8004b16:	f008 fb3d 	bl	800d194 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004b1a:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b1c:	4a37      	ldr	r2, [pc, #220]	; (8004bfc <HAL_UART_MspInit+0x370>)
 8004b1e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004b20:	4b35      	ldr	r3, [pc, #212]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b22:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004b26:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b28:	4b33      	ldr	r3, [pc, #204]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b2e:	4b32      	ldr	r3, [pc, #200]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b34:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b3a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b3c:	4b2e      	ldr	r3, [pc, #184]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b4e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b50:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b56:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004b5c:	4826      	ldr	r0, [pc, #152]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b5e:	f007 ff0b 	bl	800c978 <HAL_DMA_Init>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8004b68:	f7fe ffcf 	bl	8003b0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_UART_MspInit+0x36c>)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004b7a:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <HAL_UART_MspInit+0x378>)
 8004b7c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004b80:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004b84:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004b88:	2240      	movs	r2, #64	; 0x40
 8004b8a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b92:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b98:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004ba6:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004bb8:	4811      	ldr	r0, [pc, #68]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004bba:	f007 fedd 	bl	800c978 <HAL_DMA_Init>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8004bc4:	f7fe ffa1 	bl	8003b0a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <HAL_UART_MspInit+0x374>)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2105      	movs	r1, #5
 8004bd8:	2047      	movs	r0, #71	; 0x47
 8004bda:	f007 fea3 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004bde:	2047      	movs	r0, #71	; 0x47
 8004be0:	f007 febc 	bl	800c95c <HAL_NVIC_EnableIRQ>
}
 8004be4:	bf00      	nop
 8004be6:	3738      	adds	r7, #56	; 0x38
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40011400 	.word	0x40011400
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40021800 	.word	0x40021800
 8004bf8:	20001790 	.word	0x20001790
 8004bfc:	40026428 	.word	0x40026428
 8004c00:	200017f0 	.word	0x200017f0
 8004c04:	400264a0 	.word	0x400264a0

08004c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
////////////////////////////////////////////////////////////////..
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c40 <LoopFillZerobss+0x14>


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c0e:	e003      	b.n	8004c18 <LoopCopyDataInit>

08004c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c16:	3104      	adds	r1, #4

08004c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c18:	480b      	ldr	r0, [pc, #44]	; (8004c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c20:	d3f6      	bcc.n	8004c10 <CopyDataInit>
  ldr  r2, =_sbss
 8004c22:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c24:	e002      	b.n	8004c2c <LoopFillZerobss>

08004c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c28:	f842 3b04 	str.w	r3, [r2], #4

08004c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c30:	d3f9      	bcc.n	8004c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c32:	f7ff fa3b 	bl	80040ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c36:	f016 fc8f 	bl	801b558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c3a:	f7fe febb 	bl	80039b4 <main>
  bx  lr    
 8004c3e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c44:	080235b0 	.word	0x080235b0
  ldr  r0, =_sdata
 8004c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c4c:	200002e4 	.word	0x200002e4
  ldr  r2, =_sbss
 8004c50:	200002e8 	.word	0x200002e8
  ldr  r3, = _ebss
 8004c54:	2000f1a0 	.word	0x2000f1a0

08004c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c58:	e7fe      	b.n	8004c58 <ADC_IRQHandler>
 8004c5a:	0000      	movs	r0, r0
 8004c5c:	0000      	movs	r0, r0
	...

08004c60 <buzzing_task>:
 4, 3, 1, 8
 };
 */

//fun
void buzzing_task(void *argument) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000 / (4 * TEMPO);
 8004c68:	4b81      	ldr	r3, [pc, #516]	; (8004e70 <buzzing_task+0x210>)
 8004c6a:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004c6c:	4b81      	ldr	r3, [pc, #516]	; (8004e74 <buzzing_task+0x214>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f107 010d 	add.w	r1, r7, #13
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f013 faad 	bl	80181d8 <xQueueReceive>
		switch (buzzing_type) {
 8004c7e:	7b7b      	ldrb	r3, [r7, #13]
 8004c80:	2b0a      	cmp	r3, #10
 8004c82:	f200 80e8 	bhi.w	8004e56 <buzzing_task+0x1f6>
 8004c86:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <buzzing_task+0x2c>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004d41 	.word	0x08004d41
 8004c94:	08004e57 	.word	0x08004e57
 8004c98:	08004da5 	.word	0x08004da5
 8004c9c:	08004d73 	.word	0x08004d73
 8004ca0:	08004ddd 	.word	0x08004ddd
 8004ca4:	08004e37 	.word	0x08004e37
 8004ca8:	08004e47 	.word	0x08004e47
 8004cac:	08004e09 	.word	0x08004e09
 8004cb0:	08004e19 	.word	0x08004e19
 8004cb4:	08004e29 	.word	0x08004e29
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004cb8:	2300      	movs	r3, #0
 8004cba:	82fb      	strh	r3, [r7, #22]
 8004cbc:	e03c      	b.n	8004d38 <buzzing_task+0xd8>
				last_wake_time = xTaskGetTickCount();
 8004cbe:	f014 f861 	bl	8018d84 <xTaskGetTickCount>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 8004cc6:	8afb      	ldrh	r3, [r7, #22]
 8004cc8:	4a6b      	ldr	r2, [pc, #428]	; (8004e78 <buzzing_task+0x218>)
 8004cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc fa8c 	bl	80011ec <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8004cd4:	8afb      	ldrh	r3, [r7, #22]
 8004cd6:	4a69      	ldr	r2, [pc, #420]	; (8004e7c <buzzing_task+0x21c>)
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	ed93 7a00 	vldr	s14, [r3]
 8004ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cec:	ee17 3a90 	vmov	r3, s15
 8004cf0:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time * 0.95);
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fb fc15 	bl	8000524 <__aeabi_i2d>
 8004cfa:	a35b      	add	r3, pc, #364	; (adr r3, 8004e68 <buzzing_task+0x208>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fc7a 	bl	80005f8 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f7fb ff4c 	bl	8000ba8 <__aeabi_d2uiz>
 8004d10:	4602      	mov	r2, r0
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f013 fe65 	bl	80189e8 <vTaskDelayUntil>
				buzzer(0);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f7fc fa64 	bl	80011ec <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time);
 8004d24:	89fa      	ldrh	r2, [r7, #14]
 8004d26:	f107 0308 	add.w	r3, r7, #8
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f013 fe5b 	bl	80189e8 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8004d32:	8afb      	ldrh	r3, [r7, #22]
 8004d34:	3301      	adds	r3, #1
 8004d36:	82fb      	strh	r3, [r7, #22]
 8004d38:	8afb      	ldrh	r3, [r7, #22]
 8004d3a:	2b7c      	cmp	r3, #124	; 0x7c
 8004d3c:	d9bf      	bls.n	8004cbe <buzzing_task+0x5e>
			}
			break;
 8004d3e:	e08a      	b.n	8004e56 <buzzing_task+0x1f6>
		case ok:
			last_wake_time = xTaskGetTickCount();
 8004d40:	f014 f820 	bl	8018d84 <xTaskGetTickCount>
 8004d44:	4603      	mov	r3, r0
 8004d46:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004d48:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004d4c:	f7fc fa4e 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d50:	2064      	movs	r0, #100	; 0x64
 8004d52:	f013 fec7 	bl	8018ae4 <vTaskDelay>
			buzzer(0);
 8004d56:	2000      	movs	r0, #0
 8004d58:	f7fc fa48 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004d5c:	2032      	movs	r0, #50	; 0x32
 8004d5e:	f013 fec1 	bl	8018ae4 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004d62:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004d66:	f7fc fa41 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d6a:	2064      	movs	r0, #100	; 0x64
 8004d6c:	f013 feba 	bl	8018ae4 <vTaskDelay>
			break;
 8004d70:	e071      	b.n	8004e56 <buzzing_task+0x1f6>
//			buzzer(BUZZER_HIGH);
//			vTaskDelay(BUZZ_TIME);
//			buzzer(0);
//			break;
		case control_control:
			last_wake_time = xTaskGetTickCount();
 8004d72:	f014 f807 	bl	8018d84 <xTaskGetTickCount>
 8004d76:	4603      	mov	r3, r0
 8004d78:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8004d7a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004d7e:	f7fc fa35 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d82:	2064      	movs	r0, #100	; 0x64
 8004d84:	f013 feae 	bl	8018ae4 <vTaskDelay>
			buzzer(0);
 8004d88:	2000      	movs	r0, #0
 8004d8a:	f7fc fa2f 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004d8e:	2032      	movs	r0, #50	; 0x32
 8004d90:	f013 fea8 	bl	8018ae4 <vTaskDelay>
			buzzer(BUZZER_LOW);
 8004d94:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004d98:	f7fc fa28 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004d9c:	2064      	movs	r0, #100	; 0x64
 8004d9e:	f013 fea1 	bl	8018ae4 <vTaskDelay>
			break;
 8004da2:	e058      	b.n	8004e56 <buzzing_task+0x1f6>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 8004da4:	f013 ffee 	bl	8018d84 <xTaskGetTickCount>
 8004da8:	4603      	mov	r3, r0
 8004daa:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8004dac:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004db0:	f7fc fa1c 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004db4:	2064      	movs	r0, #100	; 0x64
 8004db6:	f013 fe95 	bl	8018ae4 <vTaskDelay>
			buzzer(0);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fc fa16 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004dc0:	2032      	movs	r0, #50	; 0x32
 8004dc2:	f013 fe8f 	bl	8018ae4 <vTaskDelay>
			buzzer(BUZZER_HIGH);
 8004dc6:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004dca:	f7fc fa0f 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004dce:	2064      	movs	r0, #100	; 0x64
 8004dd0:	f013 fe88 	bl	8018ae4 <vTaskDelay>
			buzzer(BUZZ_TIME);
 8004dd4:	2064      	movs	r0, #100	; 0x64
 8004dd6:	f7fc fa09 	bl	80011ec <buzzer>
			break;
 8004dda:	e03c      	b.n	8004e56 <buzzing_task+0x1f6>

		case control_sbc:
			buzzer(BUZZER_LOW);
 8004ddc:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004de0:	f7fc fa04 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004de4:	2064      	movs	r0, #100	; 0x64
 8004de6:	f013 fe7d 	bl	8018ae4 <vTaskDelay>
			buzzer((BUZZER_HIGH+BUZZER_LOW)/2);
 8004dea:	f240 404c 	movw	r0, #1100	; 0x44c
 8004dee:	f7fc f9fd 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004df2:	2064      	movs	r0, #100	; 0x64
 8004df4:	f013 fe76 	bl	8018ae4 <vTaskDelay>
			buzzer(BUZZER_HIGH);;
 8004df8:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004dfc:	f7fc f9f6 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004e00:	2064      	movs	r0, #100	; 0x64
 8004e02:	f013 fe6f 	bl	8018ae4 <vTaskDelay>
			break;
 8004e06:	e026      	b.n	8004e56 <buzzing_task+0x1f6>


		case bz_debug_low:
			buzzer(DEBUG_LOW_FREQ);
 8004e08:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8004e0c:	f7fc f9ee 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004e10:	2064      	movs	r0, #100	; 0x64
 8004e12:	f013 fe67 	bl	8018ae4 <vTaskDelay>
			break;
 8004e16:	e01e      	b.n	8004e56 <buzzing_task+0x1f6>

		case bz_debug_high:
			buzzer(DEBUG_HIGH_FREQ);
 8004e18:	f640 1082 	movw	r0, #2434	; 0x982
 8004e1c:	f7fc f9e6 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004e20:	2064      	movs	r0, #100	; 0x64
 8004e22:	f013 fe5f 	bl	8018ae4 <vTaskDelay>
			break;
 8004e26:	e016      	b.n	8004e56 <buzzing_task+0x1f6>

		case bz_debug_rest:
			buzzer(0);
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f7fc f9df 	bl	80011ec <buzzer>
			vTaskDelay(GAP_TIME);
 8004e2e:	2032      	movs	r0, #50	; 0x32
 8004e30:	f013 fe58 	bl	8018ae4 <vTaskDelay>
			break;
 8004e34:	e00f      	b.n	8004e56 <buzzing_task+0x1f6>
		case bz_high:
			buzzer(BUZZER_HIGH);
 8004e36:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8004e3a:	f7fc f9d7 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004e3e:	2064      	movs	r0, #100	; 0x64
 8004e40:	f013 fe50 	bl	8018ae4 <vTaskDelay>
			break;
 8004e44:	e007      	b.n	8004e56 <buzzing_task+0x1f6>
		case bz_low:
			buzzer(BUZZER_LOW);
 8004e46:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8004e4a:	f7fc f9cf 	bl	80011ec <buzzer>
			vTaskDelay(BUZZ_TIME);
 8004e4e:	2064      	movs	r0, #100	; 0x64
 8004e50:	f013 fe48 	bl	8018ae4 <vTaskDelay>
			break;
 8004e54:	bf00      	nop
		}
		buzzer(0);
 8004e56:	2000      	movs	r0, #0
 8004e58:	f7fc f9c8 	bl	80011ec <buzzer>
		vTaskDelay(GAP_TIME);
 8004e5c:	2032      	movs	r0, #50	; 0x32
 8004e5e:	f013 fe41 	bl	8018ae4 <vTaskDelay>
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8004e62:	e703      	b.n	8004c6c <buzzing_task+0xc>
 8004e64:	f3af 8000 	nop.w
 8004e68:	66666666 	.word	0x66666666
 8004e6c:	3fee6666 	.word	0x3fee6666
 8004e70:	42fa0000 	.word	0x42fa0000
 8004e74:	2000048c 	.word	0x2000048c
 8004e78:	08022b84 	.word	0x08022b84
 8004e7c:	08022c80 	.word	0x08022c80

08004e80 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	; 0x30
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <can_ISR+0x8c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d118      	bne.n	8004ec4 <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 8004e92:	210e      	movs	r1, #14
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f007 fa40 	bl	800c31a <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8004e9a:	f107 020c 	add.w	r2, r7, #12
 8004e9e:	f107 0314 	add.w	r3, r7, #20
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	481a      	ldr	r0, [pc, #104]	; (8004f10 <can_ISR+0x90>)
 8004ea6:	f7fc f9d9 	bl	800125c <can1_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId, rx_buffer);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f107 020c 	add.w	r2, r7, #12
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4817      	ldr	r0, [pc, #92]	; (8004f14 <can_ISR+0x94>)
 8004eb6:	f000 f833 	bl	8004f20 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004eba:	210e      	movs	r1, #14
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f007 fa06 	bl	800c2ce <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8004ec2:	e01e      	b.n	8004f02 <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <can_ISR+0x98>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d119      	bne.n	8004f02 <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 8004ece:	2170      	movs	r1, #112	; 0x70
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f007 fa22 	bl	800c31a <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8004ed6:	f107 020c 	add.w	r2, r7, #12
 8004eda:	f107 0314 	add.w	r3, r7, #20
 8004ede:	4619      	mov	r1, r3
 8004ee0:	480e      	ldr	r0, [pc, #56]	; (8004f1c <can_ISR+0x9c>)
 8004ee2:	f7fc f9cc 	bl	800127e <can2_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	330c      	adds	r3, #12
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f107 020c 	add.w	r2, r7, #12
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4807      	ldr	r0, [pc, #28]	; (8004f14 <can_ISR+0x94>)
 8004ef6:	f000 f813 	bl	8004f20 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 8004efa:	2170      	movs	r1, #112	; 0x70
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f007 f9e6 	bl	800c2ce <HAL_CAN_ActivateNotification>
}
 8004f02:	bf00      	nop
 8004f04:	3730      	adds	r7, #48	; 0x30
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40006400 	.word	0x40006400
 8004f10:	200003f4 	.word	0x200003f4
 8004f14:	20001850 	.word	0x20001850
 8004f18:	40006800 	.word	0x40006800
 8004f1c:	2000041c 	.word	0x2000041c

08004f20 <convert_raw_can_data>:
 * in the struct for the motor.
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id, uint8_t *rx_buffer) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 8004f2e:	897b      	ldrh	r3, [r7, #10]
 8004f30:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8004f34:	847b      	strh	r3, [r7, #34]	; 0x22

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24)
 8004f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f38:	2b18      	cmp	r3, #24
 8004f3a:	f200 8160 	bhi.w	80051fe <convert_raw_can_data+0x2de>
	{
		return;
	}
	motor_data_t* curr_motor = &can_motor_data[idnum];
 8004f3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	61fb      	str	r3, [r7, #28]
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	789b      	ldrb	r3, [r3, #2]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 814f 	beq.w	80051f8 <convert_raw_can_data+0x2d8>
		//convert the raw data back into the respective values
		curr_motor->id 				= motor_id;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	897a      	ldrh	r2, [r7, #10]
 8004f5e:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b21a      	sxth	r2, r3
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm						=(rx_buffer[2] << 8) | rx_buffer[3];
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3303      	adds	r3, #3
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	833b      	strh	r3, [r7, #24]
		curr_motor->raw_data.rpm 		= curr_motor->raw_data.rpm * SPEED_LPF + temp_rpm * (1-SPEED_LPF);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	8b3a      	ldrh	r2, [r7, #24]
 8004f92:	811a      	strh	r2, [r3, #8]
		curr_motor->raw_data.torque 	= (rx_buffer[4] << 8) | rx_buffer[5];
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	b21a      	sxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3305      	adds	r3, #5
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	b21a      	sxth	r2, r3
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	815a      	strh	r2, [r3, #10]
		curr_motor->raw_data.temp 	= (rx_buffer[6]);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	799a      	ldrb	r2, [r3, #6]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] 		= curr_motor->last_time[0];
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		curr_motor->last_time[0]	 	= get_microseconds();
 8004fc2:	f7fd f955 	bl	8002270 <get_microseconds>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		float rds_passed = (float)(curr_motor->raw_data.angle[0] - curr_motor->raw_data.angle[1]) /8192;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fe6:	eddf 6a88 	vldr	s13, [pc, #544]	; 8005208 <convert_raw_can_data+0x2e8>
 8004fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fee:	edc7 7a05 	vstr	s15, [r7, #20]
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 8004ff2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ff6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800520c <convert_raw_can_data+0x2ec>
 8004ffa:	ee67 6a87 	vmul.f32	s13, s15, s14
				/ curr_motor->last_time[0] - curr_motor->last_time[1]) * 60;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005022:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8005210 <convert_raw_can_data+0x2f0>
 8005026:	ee67 7a87 	vmul.f32	s15, s15, s14
		curr_motor->angle_data.hires_rpm = (rds_passed * TIMER_FREQ
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	789b      	ldrb	r3, [r3, #2]
 8005034:	3b01      	subs	r3, #1
 8005036:	2b08      	cmp	r3, #8
 8005038:	d84e      	bhi.n	80050d8 <convert_raw_can_data+0x1b8>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <convert_raw_can_data+0x120>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005065 	.word	0x08005065
 8005044:	08005077 	.word	0x08005077
 8005048:	08005077 	.word	0x08005077
 800504c:	080050d9 	.word	0x080050d9
 8005050:	0800509d 	.word	0x0800509d
 8005054:	0800509d 	.word	0x0800509d
 8005058:	080050b3 	.word	0x080050b3
 800505c:	080050b3 	.word	0x080050b3
 8005060:	080050b3 	.word	0x080050b3
		case TYPE_GM6020:
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	1d1a      	adds	r2, r3, #4
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	3398      	adds	r3, #152	; 0x98
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 f8d8 	bl	8005224 <angle_offset>
			break;
 8005074:	e031      	b.n	80050da <convert_raw_can_data+0x1ba>
		case TYPE_M2006:
		case TYPE_M3508:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	1d18      	adds	r0, r3, #4
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f103 0198 	add.w	r1, r3, #152	; 0x98
								curr_motor->last_time);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	33e4      	adds	r3, #228	; 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8005084:	461a      	mov	r2, r3
 8005086:	f000 f989 	bl	800539c <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3398      	adds	r3, #152	; 0x98
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f000 f8c5 	bl	8005224 <angle_offset>
			break;
 800509a:	e01e      	b.n	80050da <convert_raw_can_data+0x1ba>
		case TYPE_M2006_STEPS:
		case TYPE_M3508_STEPS:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f103 0198 	add.w	r1, r3, #152	; 0x98
					curr_motor->last_time);
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	33e4      	adds	r3, #228	; 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 f976 	bl	800539c <motor_calc_odometry>
			break;
 80050b0:	e013      	b.n	80050da <convert_raw_can_data+0x1ba>
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1d18      	adds	r0, r3, #4
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f103 0198 	add.w	r1, r3, #152	; 0x98
					curr_motor->last_time);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	33e4      	adds	r3, #228	; 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 80050c0:	461a      	mov	r2, r3
 80050c2:	f000 f96b 	bl	800539c <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1d1a      	adds	r2, r3, #4
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3398      	adds	r3, #152	; 0x98
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 f8a7 	bl	8005224 <angle_offset>
			break;
 80050d6:	e000      	b.n	80050da <convert_raw_can_data+0x1ba>
		default:
			break;
 80050d8:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 80050de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e0:	3301      	adds	r3, #1
 80050e2:	3b01      	subs	r3, #1
 80050e4:	2b16      	cmp	r3, #22
 80050e6:	d877      	bhi.n	80051d8 <convert_raw_can_data+0x2b8>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <convert_raw_can_data+0x1d0>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	0800514d 	.word	0x0800514d
 80050f4:	08005161 	.word	0x08005161
 80050f8:	080051d9 	.word	0x080051d9
 80050fc:	080051d9 	.word	0x080051d9
 8005100:	080051c5 	.word	0x080051c5
 8005104:	080051d9 	.word	0x080051d9
 8005108:	080051d9 	.word	0x080051d9
 800510c:	080051b1 	.word	0x080051b1
 8005110:	080051d9 	.word	0x080051d9
 8005114:	080051d9 	.word	0x080051d9
 8005118:	080051d9 	.word	0x080051d9
 800511c:	080051d9 	.word	0x080051d9
 8005120:	080051d9 	.word	0x080051d9
 8005124:	080051d9 	.word	0x080051d9
 8005128:	080051d9 	.word	0x080051d9
 800512c:	080051d9 	.word	0x080051d9
 8005130:	080051d9 	.word	0x080051d9
 8005134:	0800519d 	.word	0x0800519d
 8005138:	08005189 	.word	0x08005189
 800513c:	080051d9 	.word	0x080051d9
 8005140:	080051d9 	.word	0x080051d9
 8005144:	080051d9 	.word	0x080051d9
 8005148:	08005175 	.word	0x08005175
		#ifndef CHASSIS_MCU
				case Leftwheel_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <convert_raw_can_data+0x2f4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f107 0210 	add.w	r2, r7, #16
 8005154:	2108      	movs	r1, #8
 8005156:	4618      	mov	r0, r3
 8005158:	f012 fc12 	bl	8017980 <xEventGroupSetBitsFromISR>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800515e:	e03c      	b.n	80051da <convert_raw_can_data+0x2ba>
				case Rightwheel_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 8005160:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <convert_raw_can_data+0x2f4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f107 0210 	add.w	r2, r7, #16
 8005168:	2104      	movs	r1, #4
 800516a:	4618      	mov	r0, r3
 800516c:	f012 fc08 	bl	8017980 <xEventGroupSetBitsFromISR>
 8005170:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005172:	e032      	b.n	80051da <convert_raw_can_data+0x2ba>
//					xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
//							&xHigherPriorityTaskWoken);
//					break;
		#endif
				case LFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8005174:	4b28      	ldr	r3, [pc, #160]	; (8005218 <convert_raw_can_data+0x2f8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f107 0210 	add.w	r2, r7, #16
 800517c:	2102      	movs	r1, #2
 800517e:	4618      	mov	r0, r3
 8005180:	f012 fbfe 	bl	8017980 <xEventGroupSetBitsFromISR>
 8005184:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 8005186:	e028      	b.n	80051da <convert_raw_can_data+0x2ba>
				case RFRICTION_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8005188:	4b23      	ldr	r3, [pc, #140]	; (8005218 <convert_raw_can_data+0x2f8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f107 0210 	add.w	r2, r7, #16
 8005190:	2101      	movs	r1, #1
 8005192:	4618      	mov	r0, r3
 8005194:	f012 fbf4 	bl	8017980 <xEventGroupSetBitsFromISR>
 8005198:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 800519a:	e01e      	b.n	80051da <convert_raw_can_data+0x2ba>
				case FEEDER_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 800519c:	4b1e      	ldr	r3, [pc, #120]	; (8005218 <convert_raw_can_data+0x2f8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f107 0210 	add.w	r2, r7, #16
 80051a4:	2104      	movs	r1, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f012 fbea 	bl	8017980 <xEventGroupSetBitsFromISR>
 80051ac:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80051ae:	e014      	b.n	80051da <convert_raw_can_data+0x2ba>
				case L1_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 80051b0:	4b1a      	ldr	r3, [pc, #104]	; (800521c <convert_raw_can_data+0x2fc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f107 0210 	add.w	r2, r7, #16
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f012 fbe0 	bl	8017980 <xEventGroupSetBitsFromISR>
 80051c0:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80051c2:	e00a      	b.n	80051da <convert_raw_can_data+0x2ba>
				case R1_MOTOR_ID:
					xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <convert_raw_can_data+0x2fc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f107 0210 	add.w	r2, r7, #16
 80051cc:	2102      	movs	r1, #2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f012 fbd6 	bl	8017980 <xEventGroupSetBitsFromISR>
 80051d4:	6278      	str	r0, [r7, #36]	; 0x24
							&xHigherPriorityTaskWoken);
					break;
 80051d6:	e000      	b.n	80051da <convert_raw_can_data+0x2ba>
				default:
					idnum = idnum;
					//error handler
					break;
 80051d8:	bf00      	nop
				}

				//switches tasks if a higher priority task is ready.
				//required because the function is in an ISR
				if (xResult != pdFAIL) {
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00f      	beq.n	8005200 <convert_raw_can_data+0x2e0>
					portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <convert_raw_can_data+0x2e0>
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <convert_raw_can_data+0x300>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	e003      	b.n	8005200 <convert_raw_can_data+0x2e0>
				}
			} else {
				//this is a useless statement so that it is possible to set a breakpoint here lol
				uint8_t stopper = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	76fb      	strb	r3, [r7, #27]
 80051fc:	e000      	b.n	8005200 <convert_raw_can_data+0x2e0>
		return;
 80051fe:	bf00      	nop
				//error handler
		}
}
 8005200:	3728      	adds	r7, #40	; 0x28
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	46000000 	.word	0x46000000
 800520c:	461c4000 	.word	0x461c4000
 8005210:	42700000 	.word	0x42700000
 8005214:	20000474 	.word	0x20000474
 8005218:	20000478 	.word	0x20000478
 800521c:	20000470 	.word	0x20000470
 8005220:	e000ed04 	.word	0xe000ed04

08005224 <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]

	//if there's a gearbox, use the ticks after the gearbox.
	//make sure center angle is properly set with respect to the zero-ing angle
	//YOUR ROBOT MUST HAVE A WAY TO ZERO THIS ANGLE AND IMPLEMENT A ZEROING FUNCTION AT STARTUP
	//IF NOT IT WON'T WORK 							-wx
	if (angle_data->gearbox_ratio > 0) {
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005240:	dd69      	ble.n	8005316 <angle_offset+0xf2>
		temp_ang = angle_data->ticks - angle_data->center_ang;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	60fb      	str	r3, [r7, #12]
		if (temp_ang > (4096 * angle_data->gearbox_ratio)) {
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800525e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8005388 <angle_offset+0x164>
 8005262:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	dd13      	ble.n	8005298 <angle_offset+0x74>
			temp_ang -= (8192 * angle_data->gearbox_ratio);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005280:	eddf 6a42 	vldr	s13, [pc, #264]	; 800538c <angle_offset+0x168>
 8005284:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800528c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005290:	ee17 3a90 	vmov	r3, s15
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e023      	b.n	80052e0 <angle_offset+0xbc>
		} else if (temp_ang < (-4096 * angle_data->gearbox_ratio)) {
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80052a8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8005390 <angle_offset+0x16c>
 80052ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80052b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b8:	d512      	bpl.n	80052e0 <angle_offset+0xbc>
			temp_ang += 8192 * angle_data->gearbox_ratio;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80052ca:	eddf 6a30 	vldr	s13, [pc, #192]	; 800538c <angle_offset+0x168>
 80052ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80052d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052da:	ee17 3a90 	vmov	r3, s15
 80052de:	60fb      	str	r3, [r7, #12]
		}
		angle_data->ticks = temp_ang;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	601a      	str	r2, [r3, #0]
		angle_data->adj_ang = (float) temp_ang * 2 *PI / (8192 * angle_data->gearbox_ratio);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052f4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005394 <angle_offset+0x170>
 80052f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005302:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800538c <angle_offset+0x168>
 8005306:	ee27 7a87 	vmul.f32	s14, s15, s14
 800530a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		} else if (temp_ang < -4096) {
			temp_ang += 8192;
		}
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
	}
}
 8005314:	e031      	b.n	800537a <angle_offset+0x156>
		temp_ang = (int32_t) (motor_data->angle[0]) - angle_data->center_ang;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800531c:	461a      	mov	r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	60fb      	str	r3, [r7, #12]
		if (temp_ang > 4096) {
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	dd04      	ble.n	8005338 <angle_offset+0x114>
			temp_ang -= 8192;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e007      	b.n	8005348 <angle_offset+0x124>
		} else if (temp_ang < -4096) {
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800533e:	da03      	bge.n	8005348 <angle_offset+0x124>
			temp_ang += 8192;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005346:	60fb      	str	r3, [r7, #12]
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800534e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005398 <angle_offset+0x174>
 8005352:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005360:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005394 <angle_offset+0x170>
 8005364:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005368:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8005388 <angle_offset+0x164>
 800536c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	45800000 	.word	0x45800000
 800538c:	46000000 	.word	0x46000000
 8005390:	c5800000 	.word	0xc5800000
 8005394:	40490fdb 	.word	0x40490fdb
 8005398:	00000000 	.word	0x00000000

0800539c <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data,
		angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 800539c:	b480      	push	{r7}
 800539e:	b089      	sub	sp, #36	; 0x24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
	int8_t int_round_passed = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	77fb      	strb	r3, [r7, #31]
	//check to make sure it's not the same data point
	if (feedback_times[0] - feedback_times[1] >= 1) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d02e      	beq.n	8005418 <motor_calc_odometry+0x7c>
		float rounds_passed = (((float)(feedback_times[0] - feedback_times[1]) * motor_data->rpm)/(60 * TIMER_FREQ));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3304      	adds	r3, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053e0:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8005554 <motor_calc_odometry+0x1b8>
 80053e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053e8:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fabs(rounds_passed) >= 1) {
 80053ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80053f0:	eef0 7ae7 	vabs.f32	s15, s15
 80053f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005400:	db08      	blt.n	8005414 <motor_calc_odometry+0x78>
			int_round_passed = rounds_passed;
 8005402:	edd7 7a06 	vldr	s15, [r7, #24]
 8005406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800540a:	edc7 7a00 	vstr	s15, [r7]
 800540e:	783b      	ldrb	r3, [r7, #0]
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e001      	b.n	8005418 <motor_calc_odometry+0x7c>
		} else {
			int_round_passed = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	77fb      	strb	r3, [r7, #31]
		}
	}
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005426:	b29b      	uxth	r3, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	b29b      	uxth	r3, r3
 800542c:	83bb      	strh	r3, [r7, #28]
	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 800542e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	dd05      	ble.n	8005444 <motor_calc_odometry+0xa8>
		abs_angle_diff -= 8192;
 8005438:	8bbb      	ldrh	r3, [r7, #28]
 800543a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800543e:	b29b      	uxth	r3, r3
 8005440:	83bb      	strh	r3, [r7, #28]
 8005442:	e009      	b.n	8005458 <motor_calc_odometry+0xbc>
	} else if (abs_angle_diff < -4096) {
 8005444:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005448:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800544c:	da04      	bge.n	8005458 <motor_calc_odometry+0xbc>
		abs_angle_diff += 8192;
 800544e:	8bbb      	ldrh	r3, [r7, #28]
 8005450:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005454:	b29b      	uxth	r3, r3
 8005456:	83bb      	strh	r3, [r7, #28]
	 } else {
	 abs_angle_diff = (8192-motor_data->angle[0]) - motor_data->angle[1];
	 }
	 }
	 */
	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800545e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005558 <motor_calc_odometry+0x1bc>
 8005462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546a:	ee17 3a90 	vmov	r3, s15
 800546e:	82fb      	strh	r3, [r7, #22]
	angle_data->ticks += (int_round_passed * 8192) + abs_angle_diff;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005478:	0359      	lsls	r1, r3, #13
 800547a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800547e:	440b      	add	r3, r1
 8005480:	441a      	add	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	601a      	str	r2, [r3, #0]
	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005498:	ee67 6a27 	vmul.f32	s13, s14, s15
 800549c:	8afb      	ldrh	r3, [r7, #22]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	angle_data->adj_ang = (float) (angle_data->ticks % gear_ticks ) * 2*PI/gear_ticks;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	8afa      	ldrh	r2, [r7, #22]
 80054b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80054ba:	fb01 f202 	mul.w	r2, r1, r2
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80054cc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800555c <motor_calc_odometry+0x1c0>
 80054d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80054d4:	8afb      	ldrh	r3, [r7, #22]
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	angle_data->adj_ang = (angle_data->adj_ang > PI) ? (angle_data->adj_ang - 2*PI) : (angle_data->adj_ang < -PI) ? angle_data->adj_ang+2*PI : angle_data->adj_ang;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80054ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800555c <motor_calc_odometry+0x1c0>
 80054f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fa:	dd07      	ble.n	800550c <motor_calc_odometry+0x170>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005502:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005560 <motor_calc_odometry+0x1c4>
 8005506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800550a:	e014      	b.n	8005536 <motor_calc_odometry+0x19a>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005512:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005564 <motor_calc_odometry+0x1c8>
 8005516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d507      	bpl.n	8005530 <motor_calc_odometry+0x194>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005526:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005560 <motor_calc_odometry+0x1c4>
 800552a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800552e:	e002      	b.n	8005536 <motor_calc_odometry+0x19a>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	motor_data->angle[1] = motor_data->angle[0];
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	805a      	strh	r2, [r3, #2]
}
 8005546:	bf00      	nop
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	49127c00 	.word	0x49127c00
 8005558:	46000000 	.word	0x46000000
 800555c:	40490fdb 	.word	0x40490fdb
 8005560:	40c90fdb 	.word	0x40c90fdb
 8005564:	c0490fdb 	.word	0xc0490fdb

08005568 <control_input_task>:
uint8_t safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;



void control_input_task(void *argument) {
 8005568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 8005572:	f000 f967 	bl	8005844 <control_reset>
	chassis_yaw_pid_init();
 8005576:	f000 fb61 	bl	8005c3c <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 800557a:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <control_input_task+0x200>)
 800557c:	2201      	movs	r2, #1
 800557e:	721a      	strb	r2, [r3, #8]
	aimbot_pid_init();
 8005580:	f000 fee0 	bl	8006344 <aimbot_pid_init>
	dbus_remote_start();
 8005584:	f7fb ffd2 	bl	800152c <dbus_remote_start>
	gear_speed.curr_gear = 3;
 8005588:	4b78      	ldr	r3, [pc, #480]	; (800576c <control_input_task+0x204>)
 800558a:	2203      	movs	r2, #3
 800558c:	701a      	strb	r2, [r3, #0]
	gear_speed.spin_mult = GEAR3_YAW_MULT;
 800558e:	4b77      	ldr	r3, [pc, #476]	; (800576c <control_input_task+0x204>)
 8005590:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005594:	605a      	str	r2, [r3, #4]
	gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005596:	4b75      	ldr	r3, [pc, #468]	; (800576c <control_input_task+0x204>)
 8005598:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800559c:	609a      	str	r2, [r3, #8]
	gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 800559e:	4b73      	ldr	r3, [pc, #460]	; (800576c <control_input_task+0x204>)
 80055a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80055a4:	60da      	str	r2, [r3, #12]
	safety_toggle = 1;
 80055a6:	4b72      	ldr	r3, [pc, #456]	; (8005770 <control_input_task+0x208>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 80055ac:	2064      	movs	r0, #100	; 0x64
 80055ae:	f013 fa99 	bl	8018ae4 <vTaskDelay>
	uint8_t rc_check;
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50 || fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50){
 80055b2:	e01a      	b.n	80055ea <control_input_task+0x82>
		uint8_t temp_msg;
		temp_msg = not_ok;
 80055b4:	2302      	movs	r3, #2
 80055b6:	75fb      	strb	r3, [r7, #23]
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80055b8:	4b6e      	ldr	r3, [pc, #440]	; (8005774 <control_input_task+0x20c>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	f107 0117 	add.w	r1, r7, #23
 80055c0:	2300      	movs	r3, #0
 80055c2:	2200      	movs	r2, #0
 80055c4:	f012 fbe2 	bl	8017d8c <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 80055c8:	21c8      	movs	r1, #200	; 0xc8
 80055ca:	2001      	movs	r0, #1
 80055cc:	f014 f89a 	bl	8019704 <ulTaskNotifyTake>
 80055d0:	4603      	mov	r3, r0
 80055d2:	77fb      	strb	r3, [r7, #31]
		HAL_UART_DMAStop(&DBUS_UART);
 80055d4:	4868      	ldr	r0, [pc, #416]	; (8005778 <control_input_task+0x210>)
 80055d6:	f00d fb8b 	bl	8012cf0 <HAL_UART_DMAStop>
		dbus_remote_start();
 80055da:	f7fb ffa7 	bl	800152c <dbus_remote_start>
		if (rc_check){
 80055de:	7ffb      	ldrb	r3, [r7, #31]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <control_input_task+0x82>
			vTaskDelay(200);
 80055e4:	20c8      	movs	r0, #200	; 0xc8
 80055e6:	f013 fa7d 	bl	8018ae4 <vTaskDelay>
	while (fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50 || fabs(remote_cmd.left_x) > 50 || fabs(remote_cmd.right_x) > 50){
 80055ea:	4b64      	ldr	r3, [pc, #400]	; (800577c <control_input_task+0x214>)
 80055ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fa ff97 	bl	8000524 <__aeabi_i2d>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4690      	mov	r8, r2
 80055fc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	4b5e      	ldr	r3, [pc, #376]	; (8005780 <control_input_task+0x218>)
 8005606:	4640      	mov	r0, r8
 8005608:	4649      	mov	r1, r9
 800560a:	f7fb fa85 	bl	8000b18 <__aeabi_dcmpgt>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1cf      	bne.n	80055b4 <control_input_task+0x4c>
 8005614:	4b59      	ldr	r3, [pc, #356]	; (800577c <control_input_task+0x214>)
 8005616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff82 	bl	8000524 <__aeabi_i2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4692      	mov	sl, r2
 8005626:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	4b54      	ldr	r3, [pc, #336]	; (8005780 <control_input_task+0x218>)
 8005630:	4650      	mov	r0, sl
 8005632:	4659      	mov	r1, fp
 8005634:	f7fb fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ba      	bne.n	80055b4 <control_input_task+0x4c>
 800563e:	4b4f      	ldr	r3, [pc, #316]	; (800577c <control_input_task+0x214>)
 8005640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005644:	4618      	mov	r0, r3
 8005646:	f7fa ff6d 	bl	8000524 <__aeabi_i2d>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	603a      	str	r2, [r7, #0]
 8005650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	4b49      	ldr	r3, [pc, #292]	; (8005780 <control_input_task+0x218>)
 800565c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005660:	f7fb fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1a4      	bne.n	80055b4 <control_input_task+0x4c>
 800566a:	4b44      	ldr	r3, [pc, #272]	; (800577c <control_input_task+0x214>)
 800566c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005670:	4618      	mov	r0, r3
 8005672:	f7fa ff57 	bl	8000524 <__aeabi_i2d>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4614      	mov	r4, r2
 800567c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <control_input_task+0x218>)
 8005686:	4620      	mov	r0, r4
 8005688:	4629      	mov	r1, r5
 800568a:	f7fb fa45 	bl	8000b18 <__aeabi_dcmpgt>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d18f      	bne.n	80055b4 <control_input_task+0x4c>
		}
	}
	safety_toggle = ARM_SWITCH;
 8005694:	4b36      	ldr	r3, [pc, #216]	; (8005770 <control_input_task+0x208>)
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]


	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 800569a:	21c8      	movs	r1, #200	; 0xc8
 800569c:	2001      	movs	r0, #1
 800569e:	f014 f831 	bl	8019704 <ulTaskNotifyTake>
 80056a2:	4603      	mov	r3, r0
 80056a4:	77fb      	strb	r3, [r7, #31]
		if (rc_check) {
 80056a6:	7ffb      	ldrb	r3, [r7, #31]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d039      	beq.n	8005720 <control_input_task+0x1b8>
			status_led(1, on_led);
 80056ac:	2100      	movs	r1, #0
 80056ae:	2001      	movs	r0, #1
 80056b0:	f7fc fd06 	bl	80020c0 <status_led>
			start_time = xTaskGetTickCount();
 80056b4:	f013 fb66 	bl	8018d84 <xTaskGetTickCount>
 80056b8:	4603      	mov	r3, r0
 80056ba:	61bb      	str	r3, [r7, #24]
			if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 80056bc:	4b2f      	ldr	r3, [pc, #188]	; (800577c <control_input_task+0x214>)
 80056be:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d110      	bne.n	80056e8 <control_input_task+0x180>
				laser_on();
 80056c6:	f7fb ffd5 	bl	8001674 <laser_on>
				control_mode_change(remote_cmd.side_dial);
 80056ca:	4b2c      	ldr	r3, [pc, #176]	; (800577c <control_input_task+0x214>)
 80056cc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f8ed 	bl	80058b0 <control_mode_change>
				safety_toggle = 0;
 80056d6:	4b26      	ldr	r3, [pc, #152]	; (8005770 <control_input_task+0x208>)
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 80056dc:	4b29      	ldr	r3, [pc, #164]	; (8005784 <control_input_task+0x21c>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
				control_reset();
 80056e2:	f000 f8af 	bl	8005844 <control_reset>
 80056e6:	e037      	b.n	8005758 <control_input_task+0x1f0>
			} else {

				switch (control_mode) {
 80056e8:	4b27      	ldr	r3, [pc, #156]	; (8005788 <control_input_task+0x220>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <control_input_task+0x18e>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d008      	beq.n	8005706 <control_input_task+0x19e>
					sbc_control_input();
					break;
#endif HAS_SBC

				default:
					break;
 80056f4:	e00f      	b.n	8005716 <control_input_task+0x1ae>
					keyboard_gear_shifter(&gear_speed);
 80056f6:	481d      	ldr	r0, [pc, #116]	; (800576c <control_input_task+0x204>)
 80056f8:	f000 fac4 	bl	8005c84 <keyboard_gear_shifter>
					set_gear();
 80056fc:	f000 fa20 	bl	8005b40 <set_gear>
					keyboard_control_input();
 8005700:	f000 fab6 	bl	8005c70 <keyboard_control_input>
					break;
 8005704:	e007      	b.n	8005716 <control_input_task+0x1ae>
					remote_gear_shifter(&gear_speed);
 8005706:	4819      	ldr	r0, [pc, #100]	; (800576c <control_input_task+0x204>)
 8005708:	f000 fca4 	bl	8006054 <remote_gear_shifter>
					set_gear();
 800570c:	f000 fa18 	bl	8005b40 <set_gear>
					remote_control_input();
 8005710:	f000 fc96 	bl	8006040 <remote_control_input>
					break;
 8005714:	bf00      	nop

				}
				status_led(1, off_led);
 8005716:	2101      	movs	r1, #1
 8005718:	2001      	movs	r0, #1
 800571a:	f7fc fcd1 	bl	80020c0 <status_led>
 800571e:	e01b      	b.n	8005758 <control_input_task+0x1f0>
			}
		} else {
			//restart remote uart
			if (HAL_GetTick() - remote_cmd.last_time > 100) {
 8005720:	f005 ff36 	bl	800b590 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <control_input_task+0x214>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b64      	cmp	r3, #100	; 0x64
 800572e:	d909      	bls.n	8005744 <control_input_task+0x1dc>
				HAL_UART_DMAStop(&DBUS_UART);
 8005730:	4811      	ldr	r0, [pc, #68]	; (8005778 <control_input_task+0x210>)
 8005732:	f00d fadd 	bl	8012cf0 <HAL_UART_DMAStop>
				dbus_remote_start();
 8005736:	f7fb fef9 	bl	800152c <dbus_remote_start>
				remote_cmd.last_time = HAL_GetTick();
 800573a:	f005 ff29 	bl	800b590 <HAL_GetTick>
 800573e:	4603      	mov	r3, r0
 8005740:	4a0e      	ldr	r2, [pc, #56]	; (800577c <control_input_task+0x214>)
 8005742:	6213      	str	r3, [r2, #32]
			}
			kill_can();
 8005744:	f005 fa88 	bl	800ac58 <kill_can>
			control_reset();
 8005748:	f000 f87c 	bl	8005844 <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <control_input_task+0x21c>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
			safety_toggle = ARM_SWITCH;
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <control_input_task+0x208>)
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 8005758:	f107 0318 	add.w	r3, r7, #24
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f013 f942 	bl	80189e8 <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8005764:	e799      	b.n	800569a <control_input_task+0x132>
 8005766:	bf00      	nop
 8005768:	20002ef0 	.word	0x20002ef0
 800576c:	20002f2c 	.word	0x20002f2c
 8005770:	20002f40 	.word	0x20002f40
 8005774:	2000048c 	.word	0x2000048c
 8005778:	20001648 	.word	0x20001648
 800577c:	20000318 	.word	0x20000318
 8005780:	40490000 	.word	0x40490000
 8005784:	20002f41 	.word	0x20002f41
 8005788:	20000008 	.word	0x20000008
 800578c:	00000000 	.word	0x00000000

08005790 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
	speed_pid(0, can_motors[YAW_MOTOR_ID - 1].angle_data.adj_ang,
 8005794:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <chassis_center_yaw+0x40>)
 8005796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579a:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fed2 	bl	8000548 <__aeabi_f2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	480a      	ldr	r0, [pc, #40]	; (80057d4 <chassis_center_yaw+0x44>)
 80057aa:	ec43 2b11 	vmov	d1, r2, r3
 80057ae:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80057c8 <chassis_center_yaw+0x38>
 80057b2:	f004 ff01 	bl	800a5b8 <speed_pid>
			&yaw_pid_data);
	return yaw_pid_data.output;
 80057b6:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <chassis_center_yaw+0x44>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	ee07 3a90 	vmov	s15, r3
}
 80057be:	eeb0 0a67 	vmov.f32	s0, s15
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	f3af 8000 	nop.w
	...
 80057d0:	20001850 	.word	0x20001850
 80057d4:	20002efc 	.word	0x20002efc

080057d8 <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw){
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	ed87 0a03 	vstr	s0, [r7, #12]
 80057e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80057e6:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <chassis_set_ctrl+0x38>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 80057f0:	4a07      	ldr	r2, [pc, #28]	; (8005810 <chassis_set_ctrl+0x38>)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 80057f6:	4a06      	ldr	r2, [pc, #24]	; (8005810 <chassis_set_ctrl+0x38>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = yaw;
 80057fc:	4a04      	ldr	r2, [pc, #16]	; (8005810 <chassis_set_ctrl+0x38>)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6093      	str	r3, [r2, #8]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20002ed0 	.word	0x20002ed0

08005814 <chassis_kill_ctrl>:

void chassis_kill_ctrl(){
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 8005818:	4b09      	ldr	r3, [pc, #36]	; (8005840 <chassis_kill_ctrl+0x2c>)
 800581a:	2200      	movs	r2, #0
 800581c:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <chassis_kill_ctrl+0x2c>)
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <chassis_kill_ctrl+0x2c>)
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 800582e:	4b04      	ldr	r3, [pc, #16]	; (8005840 <chassis_kill_ctrl+0x2c>)
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	609a      	str	r2, [r3, #8]
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20002ed0 	.word	0x20002ed0

08005844 <control_reset>:
		}
	}
	return 0;
}

void control_reset() {
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 8005848:	4b14      	ldr	r3, [pc, #80]	; (800589c <control_reset+0x58>)
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8005850:	4b12      	ldr	r3, [pc, #72]	; (800589c <control_reset+0x58>)
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 8005858:	4b10      	ldr	r3, [pc, #64]	; (800589c <control_reset+0x58>)
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 8005860:	4b0e      	ldr	r3, [pc, #56]	; (800589c <control_reset+0x58>)
 8005862:	2200      	movs	r2, #0
 8005864:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 8005866:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <control_reset+0x5c>)
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 800586e:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <control_reset+0x60>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <control_reset+0x5c>)
 8005874:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <control_reset+0x5c>)
 8005878:	2200      	movs	r2, #0
 800587a:	725a      	strb	r2, [r3, #9]
	launcher_ctrl_data.gun_feeding_speed = 0;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <control_reset+0x64>)
 800587e:	2200      	movs	r2, #0
 8005880:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <control_reset+0x64>)
 8005884:	2200      	movs	r2, #0
 8005886:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <control_reset+0x64>)
 800588a:	2200      	movs	r2, #0
 800588c:	715a      	strb	r2, [r3, #5]
	g_spinspin_mode = 0;
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <control_reset+0x68>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
	laser_off();
 8005894:	f7fb fefa 	bl	800168c <laser_off>
}
 8005898:	bf00      	nop
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20002ed0 	.word	0x20002ed0
 80058a0:	20002ef0 	.word	0x20002ef0
 80058a4:	20003224 	.word	0x20003224
 80058a8:	20002ee8 	.word	0x20002ee8
 80058ac:	20002f3c 	.word	0x20002f3c

080058b0 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
//assume already in shutdown mode here
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (remote_cmd.left_switch == ge_LSW_CONFIG) {
 80058ba:	4b6f      	ldr	r3, [pc, #444]	; (8005a78 <control_mode_change+0x1c8>)
 80058bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d133      	bne.n	800592c <control_mode_change+0x7c>
		if (left_dial_input > 330 || left_dial_input < -330) {
 80058c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c8:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80058cc:	dc04      	bgt.n	80058d8 <control_mode_change+0x28>
 80058ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058d2:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80058d6:	da23      	bge.n	8005920 <control_mode_change+0x70>
			if (HAL_GetTick() - last_trig_time > 1000) {
 80058d8:	f005 fe5a 	bl	800b590 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b67      	ldr	r3, [pc, #412]	; (8005a7c <control_mode_change+0x1cc>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058e8:	d918      	bls.n	800591c <control_mode_change+0x6c>
				switch (control_mode) {
 80058ea:	4b65      	ldr	r3, [pc, #404]	; (8005a80 <control_mode_change+0x1d0>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d80d      	bhi.n	8005910 <control_mode_change+0x60>
				case KEYBOARD_CTRL_MODE:
				case REMOTE_CTRL_MODE:
					control_mode = SBC_CTRL_MODE;
 80058f4:	4b62      	ldr	r3, [pc, #392]	; (8005a80 <control_mode_change+0x1d0>)
 80058f6:	2203      	movs	r2, #3
 80058f8:	701a      	strb	r2, [r3, #0]
					temp_msg = control_sbc;
 80058fa:	2305      	movs	r3, #5
 80058fc:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80058fe:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <control_mode_change+0x1d4>)
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	f107 010f 	add.w	r1, r7, #15
 8005906:	2300      	movs	r3, #0
 8005908:	2200      	movs	r2, #0
 800590a:	f012 fa3f 	bl	8017d8c <xQueueGenericSend>
					break;
 800590e:	e006      	b.n	800591e <control_mode_change+0x6e>
				default:
					last_trig_time = HAL_GetTick();
 8005910:	f005 fe3e 	bl	800b590 <HAL_GetTick>
 8005914:	4603      	mov	r3, r0
 8005916:	4a59      	ldr	r2, [pc, #356]	; (8005a7c <control_mode_change+0x1cc>)
 8005918:	6013      	str	r3, [r2, #0]
					break;
 800591a:	e000      	b.n	800591e <control_mode_change+0x6e>
				}
			}
 800591c:	bf00      	nop
			if (HAL_GetTick() - last_trig_time > 1000) {
 800591e:	e0a7      	b.n	8005a70 <control_mode_change+0x1c0>
		} else {
			last_trig_time = HAL_GetTick();
 8005920:	f005 fe36 	bl	800b590 <HAL_GetTick>
 8005924:	4603      	mov	r3, r0
 8005926:	4a55      	ldr	r2, [pc, #340]	; (8005a7c <control_mode_change+0x1cc>)
 8005928:	6013      	str	r3, [r2, #0]
			break;
		default:
			break;
		}
	}
}
 800592a:	e0a1      	b.n	8005a70 <control_mode_change+0x1c0>
		switch (control_mode) {
 800592c:	4b54      	ldr	r3, [pc, #336]	; (8005a80 <control_mode_change+0x1d0>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d052      	beq.n	80059da <control_mode_change+0x12a>
 8005934:	2b03      	cmp	r3, #3
 8005936:	f300 8094 	bgt.w	8005a62 <control_mode_change+0x1b2>
 800593a:	2b01      	cmp	r3, #1
 800593c:	d002      	beq.n	8005944 <control_mode_change+0x94>
 800593e:	2b02      	cmp	r3, #2
 8005940:	d026      	beq.n	8005990 <control_mode_change+0xe0>
			break;
 8005942:	e08e      	b.n	8005a62 <control_mode_change+0x1b2>
			if (left_dial_input < -330) {
 8005944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005948:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 800594c:	da1a      	bge.n	8005984 <control_mode_change+0xd4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800594e:	f005 fe1f 	bl	800b590 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	4b49      	ldr	r3, [pc, #292]	; (8005a7c <control_mode_change+0x1cc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800595e:	f240 8082 	bls.w	8005a66 <control_mode_change+0x1b6>
					control_mode = REMOTE_CTRL_MODE;
 8005962:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <control_mode_change+0x1d0>)
 8005964:	2202      	movs	r2, #2
 8005966:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8005968:	2304      	movs	r3, #4
 800596a:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800596c:	4b45      	ldr	r3, [pc, #276]	; (8005a84 <control_mode_change+0x1d4>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	f107 010f 	add.w	r1, r7, #15
 8005974:	2300      	movs	r3, #0
 8005976:	2200      	movs	r2, #0
 8005978:	f012 fa08 	bl	8017d8c <xQueueGenericSend>
					launcher_safety_toggle = LAUNCHER_SAFETY;
 800597c:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <control_mode_change+0x1d8>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
			break;
 8005982:	e070      	b.n	8005a66 <control_mode_change+0x1b6>
				last_trig_time = HAL_GetTick();
 8005984:	f005 fe04 	bl	800b590 <HAL_GetTick>
 8005988:	4603      	mov	r3, r0
 800598a:	4a3c      	ldr	r2, [pc, #240]	; (8005a7c <control_mode_change+0x1cc>)
 800598c:	6013      	str	r3, [r2, #0]
			break;
 800598e:	e06a      	b.n	8005a66 <control_mode_change+0x1b6>
			if (left_dial_input > 330) {
 8005990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005994:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005998:	dd19      	ble.n	80059ce <control_mode_change+0x11e>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800599a:	f005 fdf9 	bl	800b590 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <control_mode_change+0x1cc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059aa:	d95e      	bls.n	8005a6a <control_mode_change+0x1ba>
					control_mode = KEYBOARD_CTRL_MODE;
 80059ac:	4b34      	ldr	r3, [pc, #208]	; (8005a80 <control_mode_change+0x1d0>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 80059b2:	2303      	movs	r3, #3
 80059b4:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 80059b6:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <control_mode_change+0x1d8>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80059bc:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <control_mode_change+0x1d4>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	f107 010f 	add.w	r1, r7, #15
 80059c4:	2300      	movs	r3, #0
 80059c6:	2200      	movs	r2, #0
 80059c8:	f012 f9e0 	bl	8017d8c <xQueueGenericSend>
			break;
 80059cc:	e04d      	b.n	8005a6a <control_mode_change+0x1ba>
				last_trig_time = HAL_GetTick();
 80059ce:	f005 fddf 	bl	800b590 <HAL_GetTick>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <control_mode_change+0x1cc>)
 80059d6:	6013      	str	r3, [r2, #0]
			break;
 80059d8:	e047      	b.n	8005a6a <control_mode_change+0x1ba>
			if (left_dial_input < -330) {
 80059da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059de:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80059e2:	da19      	bge.n	8005a18 <control_mode_change+0x168>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80059e4:	f005 fdd4 	bl	800b590 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <control_mode_change+0x1cc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059f4:	d93b      	bls.n	8005a6e <control_mode_change+0x1be>
					control_mode = REMOTE_CTRL_MODE;
 80059f6:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <control_mode_change+0x1d0>)
 80059f8:	2202      	movs	r2, #2
 80059fa:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 80059fc:	2304      	movs	r3, #4
 80059fe:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <control_mode_change+0x1d8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005a06:	4b1f      	ldr	r3, [pc, #124]	; (8005a84 <control_mode_change+0x1d4>)
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f107 010f 	add.w	r1, r7, #15
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2200      	movs	r2, #0
 8005a12:	f012 f9bb 	bl	8017d8c <xQueueGenericSend>
			break;
 8005a16:	e02a      	b.n	8005a6e <control_mode_change+0x1be>
			} else if (left_dial_input > 330) {
 8005a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a1c:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8005a20:	dd19      	ble.n	8005a56 <control_mode_change+0x1a6>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8005a22:	f005 fdb5 	bl	800b590 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <control_mode_change+0x1cc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a32:	d91c      	bls.n	8005a6e <control_mode_change+0x1be>
					control_mode = KEYBOARD_CTRL_MODE;
 8005a34:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <control_mode_change+0x1d0>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <control_mode_change+0x1d8>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <control_mode_change+0x1d4>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	f107 010f 	add.w	r1, r7, #15
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f012 f99c 	bl	8017d8c <xQueueGenericSend>
			break;
 8005a54:	e00b      	b.n	8005a6e <control_mode_change+0x1be>
				last_trig_time = HAL_GetTick();
 8005a56:	f005 fd9b 	bl	800b590 <HAL_GetTick>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <control_mode_change+0x1cc>)
 8005a5e:	6013      	str	r3, [r2, #0]
			break;
 8005a60:	e005      	b.n	8005a6e <control_mode_change+0x1be>
			break;
 8005a62:	bf00      	nop
 8005a64:	e004      	b.n	8005a70 <control_mode_change+0x1c0>
			break;
 8005a66:	bf00      	nop
 8005a68:	e002      	b.n	8005a70 <control_mode_change+0x1c0>
			break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <control_mode_change+0x1c0>
			break;
 8005a6e:	bf00      	nop
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000318 	.word	0x20000318
 8005a7c:	20002f44 	.word	0x20002f44
 8005a80:	20000008 	.word	0x20000008
 8005a84:	2000048c 	.word	0x2000048c
 8005a88:	20002f41 	.word	0x20002f41

08005a8c <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a96:	edc7 0a00 	vstr	s1, [r7]
	yaw_radians += gimbal_ctrl_data.yaw += yaw_radians;
 8005a9a:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <gimbal_turn_ang+0xa4>)
 8005a9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005aa0:	edd7 7a00 	vldr	s15, [r7]
 8005aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <gimbal_turn_ang+0xa4>)
 8005aaa:	edc3 7a01 	vstr	s15, [r3, #4]
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <gimbal_turn_ang+0xa4>)
 8005ab0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ab4:	ed97 7a00 	vldr	s14, [r7]
 8005ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005abc:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005ac0:	e007      	b.n	8005ad2 <gimbal_turn_ang+0x46>
		yaw_radians -= 2 * PI;
 8005ac2:	edd7 7a00 	vldr	s15, [r7]
 8005ac6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005b34 <gimbal_turn_ang+0xa8>
 8005aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ace:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians > PI) {
 8005ad2:	edd7 7a00 	vldr	s15, [r7]
 8005ad6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005b38 <gimbal_turn_ang+0xac>
 8005ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae2:	dcee      	bgt.n	8005ac2 <gimbal_turn_ang+0x36>
	}
	while (yaw_radians < -PI) {
 8005ae4:	e007      	b.n	8005af6 <gimbal_turn_ang+0x6a>
		yaw_radians += 2 * PI;
 8005ae6:	edd7 7a00 	vldr	s15, [r7]
 8005aea:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005b34 <gimbal_turn_ang+0xa8>
 8005aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005af2:	edc7 7a00 	vstr	s15, [r7]
	while (yaw_radians < -PI) {
 8005af6:	edd7 7a00 	vldr	s15, [r7]
 8005afa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005b3c <gimbal_turn_ang+0xb0>
 8005afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b06:	d4ee      	bmi.n	8005ae6 <gimbal_turn_ang+0x5a>
	}
	gimbal_ctrl_data.pitch += pit_radians;
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <gimbal_turn_ang+0xa4>)
 8005b0a:	ed93 7a00 	vldr	s14, [r3]
 8005b0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <gimbal_turn_ang+0xa4>)
 8005b18:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = yaw_radians;
 8005b1c:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <gimbal_turn_ang+0xa4>)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6053      	str	r3, [r2, #4]
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20002ef0 	.word	0x20002ef0
 8005b34:	40c90fdb 	.word	0x40c90fdb
 8005b38:	40490fdb 	.word	0x40490fdb
 8005b3c:	c0490fdb 	.word	0xc0490fdb

08005b40 <set_gear>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void set_gear() {
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	switch (gear_speed.curr_gear) {
 8005b44:	4b35      	ldr	r3, [pc, #212]	; (8005c1c <set_gear+0xdc>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	2b05      	cmp	r3, #5
 8005b4c:	d854      	bhi.n	8005bf8 <set_gear+0xb8>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <set_gear+0x14>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b6d 	.word	0x08005b6d
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	08005b9d 	.word	0x08005b9d
 8005b60:	08005bb7 	.word	0x08005bb7
 8005b64:	08005bcb 	.word	0x08005bcb
 8005b68:	08005be5 	.word	0x08005be5
	case 1:
		gear_speed.spin_mult = GEAR1_YAW_MULT;
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <set_gear+0xdc>)
 8005b6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b72:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR1_SPEED_MULT;
 8005b74:	4b29      	ldr	r3, [pc, #164]	; (8005c1c <set_gear+0xdc>)
 8005b76:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <set_gear+0xe0>)
 8005b78:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR1_ACCEL_MULT;
 8005b7a:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <set_gear+0xdc>)
 8005b7c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b80:	60da      	str	r2, [r3, #12]
		break;
 8005b82:	e046      	b.n	8005c12 <set_gear+0xd2>
	case 2:
		gear_speed.spin_mult = GEAR2_YAW_MULT;
 8005b84:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <set_gear+0xdc>)
 8005b86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b8a:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR2_SPEED_MULT;
 8005b8c:	4b23      	ldr	r3, [pc, #140]	; (8005c1c <set_gear+0xdc>)
 8005b8e:	4a25      	ldr	r2, [pc, #148]	; (8005c24 <set_gear+0xe4>)
 8005b90:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR2_ACCEL_MULT;
 8005b92:	4b22      	ldr	r3, [pc, #136]	; (8005c1c <set_gear+0xdc>)
 8005b94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b98:	60da      	str	r2, [r3, #12]
		break;
 8005b9a:	e03a      	b.n	8005c12 <set_gear+0xd2>
	case 3:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005b9c:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <set_gear+0xdc>)
 8005b9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005ba2:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <set_gear+0xdc>)
 8005ba6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005baa:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <set_gear+0xdc>)
 8005bae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bb2:	60da      	str	r2, [r3, #12]
		break;
 8005bb4:	e02d      	b.n	8005c12 <set_gear+0xd2>
	case 4:
		gear_speed.spin_mult = GEAR4_YAW_MULT;
 8005bb6:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <set_gear+0xdc>)
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <set_gear+0xe8>)
 8005bba:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR4_SPEED_MULT;
 8005bbc:	4b17      	ldr	r3, [pc, #92]	; (8005c1c <set_gear+0xdc>)
 8005bbe:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <set_gear+0xec>)
 8005bc0:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR4_ACCEL_MULT;
 8005bc2:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <set_gear+0xdc>)
 8005bc4:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <set_gear+0xe8>)
 8005bc6:	60da      	str	r2, [r3, #12]
		break;
 8005bc8:	e023      	b.n	8005c12 <set_gear+0xd2>
	case 5:
		gear_speed.spin_mult = GEAR5_YAW_MULT;
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <set_gear+0xdc>)
 8005bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bd0:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR5_SPEED_MULT;
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <set_gear+0xdc>)
 8005bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bd8:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR5_ACCEL_MULT;
 8005bda:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <set_gear+0xdc>)
 8005bdc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005be0:	60da      	str	r2, [r3, #12]
		break;
 8005be2:	e016      	b.n	8005c12 <set_gear+0xd2>
	case 6:
		gear_speed.spin_mult = GEAR6_YAW_MULT;
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <set_gear+0xdc>)
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <set_gear+0xf0>)
 8005be8:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR6_SPEED_MULT;
 8005bea:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <set_gear+0xdc>)
 8005bec:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <set_gear+0xf4>)
 8005bee:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR6_ACCEL_MULT;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <set_gear+0xdc>)
 8005bf2:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <set_gear+0xf8>)
 8005bf4:	60da      	str	r2, [r3, #12]
		break;
 8005bf6:	e00c      	b.n	8005c12 <set_gear+0xd2>
	default:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 8005bf8:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <set_gear+0xdc>)
 8005bfa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bfe:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8005c00:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <set_gear+0xdc>)
 8005c02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c06:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <set_gear+0xdc>)
 8005c0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c0e:	60da      	str	r2, [r3, #12]
		break;
 8005c10:	bf00      	nop
	}

}
 8005c12:	bf00      	nop
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20002f2c 	.word	0x20002f2c
 8005c20:	3ecccccd 	.word	0x3ecccccd
 8005c24:	3f333333 	.word	0x3f333333
 8005c28:	3f99999a 	.word	0x3f99999a
 8005c2c:	3fb33333 	.word	0x3fb33333
 8005c30:	40400000 	.word	0x40400000
 8005c34:	40a00000 	.word	0x40a00000
 8005c38:	41200000 	.word	0x41200000

08005c3c <chassis_yaw_pid_init>:

void chassis_yaw_pid_init() {
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <chassis_yaw_pid_init+0x30>)
 8005c42:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8005c46:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 8005c48:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <chassis_yaw_pid_init+0x30>)
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <chassis_yaw_pid_init+0x30>)
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <chassis_yaw_pid_init+0x30>)
 8005c5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c5e:	61da      	str	r2, [r3, #28]
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20002efc 	.word	0x20002efc

08005c70 <keyboard_control_input>:

extern int g_spinspin_mode;



void keyboard_control_input() {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 8005c74:	f000 f918 	bl	8005ea8 <mouse_gimbal_input>
	keyboard_chassis_input();
 8005c78:	f000 f86a 	bl	8005d50 <keyboard_chassis_input>
	mouse_launcher_control_input();
 8005c7c:	f000 f984 	bl	8005f88 <mouse_launcher_control_input>
}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <keyboard_gear_shifter>:

void keyboard_gear_shifter(speed_shift_t *gear_speed) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if ((remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <keyboard_gear_shifter+0xbc>)
 8005c8e:	8b5b      	ldrh	r3, [r3, #26]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <keyboard_gear_shifter+0x3c>
			&& (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <keyboard_gear_shifter+0xbc>)
 8005c9a:	8b5b      	ldrh	r3, [r3, #26]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <keyboard_gear_shifter+0x3c>
		gear_speed->curr_gear = 3;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005caa:	f005 fc71 	bl	800b590 <HAL_GetTick>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <keyboard_gear_shifter+0xc0>)
 8005cb2:	6013      	str	r3, [r2, #0]
		ctrl_press_time = HAL_GetTick();
 8005cb4:	f005 fc6c 	bl	800b590 <HAL_GetTick>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <keyboard_gear_shifter+0xc4>)
 8005cbc:	6013      	str	r3, [r2, #0]
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
		}
		ctrl_press_time = HAL_GetTick();
	}

}
 8005cbe:	e03a      	b.n	8005d36 <keyboard_gear_shifter+0xb2>
	else if (remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT) {
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <keyboard_gear_shifter+0xbc>)
 8005cc2:	8b5b      	ldrh	r3, [r3, #26]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d017      	beq.n	8005cfc <keyboard_gear_shifter+0x78>
		if (HAL_GetTick() - shift_press_time > 100) {
 8005ccc:	f005 fc60 	bl	800b590 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <keyboard_gear_shifter+0xc0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b64      	cmp	r3, #100	; 0x64
 8005cda:	d909      	bls.n	8005cf0 <keyboard_gear_shifter+0x6c>
					(gear_speed->curr_gear < 5) ? gear_speed->curr_gear + 1 : 5;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	bf28      	it	cs
 8005ce4:	2304      	movcs	r3, #4
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	3301      	adds	r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 8005cf0:	f005 fc4e 	bl	800b590 <HAL_GetTick>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <keyboard_gear_shifter+0xc0>)
 8005cf8:	6013      	str	r3, [r2, #0]
}
 8005cfa:	e01c      	b.n	8005d36 <keyboard_gear_shifter+0xb2>
	else if (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL) {
 8005cfc:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <keyboard_gear_shifter+0xbc>)
 8005cfe:	8b5b      	ldrh	r3, [r3, #26]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d016      	beq.n	8005d36 <keyboard_gear_shifter+0xb2>
		if (HAL_GetTick() - ctrl_press_time > 100) {
 8005d08:	f005 fc42 	bl	800b590 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <keyboard_gear_shifter+0xc4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b64      	cmp	r3, #100	; 0x64
 8005d16:	d909      	bls.n	8005d2c <keyboard_gear_shifter+0xa8>
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	bf38      	it	cc
 8005d20:	2302      	movcc	r3, #2
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	701a      	strb	r2, [r3, #0]
		ctrl_press_time = HAL_GetTick();
 8005d2c:	f005 fc30 	bl	800b590 <HAL_GetTick>
 8005d30:	4603      	mov	r3, r0
 8005d32:	4a05      	ldr	r2, [pc, #20]	; (8005d48 <keyboard_gear_shifter+0xc4>)
 8005d34:	6013      	str	r3, [r2, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000318 	.word	0x20000318
 8005d44:	20002f48 	.word	0x20002f48
 8005d48:	20002f4c 	.word	0x20002f4c
 8005d4c:	00000000 	.word	0x00000000

08005d50 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8005d56:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <keyboard_chassis_input+0x148>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <keyboard_chassis_input+0x18>
 8005d5e:	4b4f      	ldr	r3, [pc, #316]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005d60:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d00f      	beq.n	8005d88 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 8005d68:	4b4d      	ldr	r3, [pc, #308]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 8005d6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8005d76:	4b4a      	ldr	r3, [pc, #296]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 8005d7e:	4b48      	ldr	r3, [pc, #288]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8005d86:	e07f      	b.n	8005e88 <keyboard_chassis_input+0x138>
		if (remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8005d88:	4b44      	ldr	r3, [pc, #272]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005d8a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d17a      	bne.n	8005e88 <keyboard_chassis_input+0x138>
			chassis_ctrl_data.enabled = 1;
 8005d92:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_Q) {
 8005daa:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005dac:	8b5b      	ldrh	r3, [r3, #26]
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <keyboard_chassis_input+0x6e>
				g_spinspin_mode = 1;
 8005db6:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <keyboard_chassis_input+0x154>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e008      	b.n	8005dd0 <keyboard_chassis_input+0x80>
			} else if (remote_cmd.keyboard_keys & KEY_OFFSET_E) {
 8005dbe:	4b37      	ldr	r3, [pc, #220]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005dc0:	8b5b      	ldrh	r3, [r3, #26]
 8005dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <keyboard_chassis_input+0x80>
				g_spinspin_mode = 0;
 8005dca:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <keyboard_chassis_input+0x154>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 8005dd0:	4b32      	ldr	r3, [pc, #200]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005dd2:	8b5b      	ldrh	r3, [r3, #26]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <keyboard_chassis_input+0x9c>
				forward_input += KEYBD_MAX_SPD;
 8005ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005de0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005de8:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 8005dec:	4b2b      	ldr	r3, [pc, #172]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005dee:	8b5b      	ldrh	r3, [r3, #26]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <keyboard_chassis_input+0xb8>
				forward_input -= KEYBD_MAX_SPD;
 8005df8:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e04:	edc7 7a02 	vstr	s15, [r7, #8]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 8005e08:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005e0a:	8b5b      	ldrh	r3, [r3, #26]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <keyboard_chassis_input+0xd4>
				horizontal_input -= KEYBD_MAX_SPD;
 8005e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e20:	edc7 7a03 	vstr	s15, [r7, #12]
			if (remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <keyboard_chassis_input+0x14c>)
 8005e26:	8b5b      	ldrh	r3, [r3, #26]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <keyboard_chassis_input+0xf0>
				horizontal_input += KEYBD_MAX_SPD;
 8005e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e3c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_spinspin_mode) {
 8005e40:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <keyboard_chassis_input+0x154>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d012      	beq.n	8005e6e <keyboard_chassis_input+0x11e>
				yaw_input = g_spinspin_mode * CHASSIS_SPINSPIN_MAX;
 8005e48:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <keyboard_chassis_input+0x154>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fa fb69 	bl	8000524 <__aeabi_i2d>
 8005e52:	a30f      	add	r3, pc, #60	; (adr r3, 8005e90 <keyboard_chassis_input+0x140>)
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa fbce 	bl	80005f8 <__aeabi_dmul>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4610      	mov	r0, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	f7fa fec0 	bl	8000be8 <__aeabi_d2f>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	e003      	b.n	8005e76 <keyboard_chassis_input+0x126>
				yaw_input = chassis_center_yaw();
 8005e6e:	f7ff fc8f 	bl	8005790 <chassis_center_yaw>
 8005e72:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 8005e7c:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 8005e82:	4a07      	ldr	r2, [pc, #28]	; (8005ea0 <keyboard_chassis_input+0x150>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6093      	str	r3, [r2, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	cccccccd 	.word	0xcccccccd
 8005e94:	3feccccc 	.word	0x3feccccc
 8005e98:	20002f40 	.word	0x20002f40
 8005e9c:	20000318 	.word	0x20000318
 8005ea0:	20002ed0 	.word	0x20002ed0
 8005ea4:	20002f3c 	.word	0x20002f3c

08005ea8 <mouse_gimbal_input>:

void mouse_gimbal_input() {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005eae:	4b30      	ldr	r3, [pc, #192]	; (8005f70 <mouse_gimbal_input+0xc8>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <mouse_gimbal_input+0x18>
 8005eb6:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <mouse_gimbal_input+0xcc>)
 8005eb8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d103      	bne.n	8005ec8 <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <mouse_gimbal_input+0xd0>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	725a      	strb	r2, [r3, #9]
 8005ec6:	e04e      	b.n	8005f66 <mouse_gimbal_input+0xbe>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8005ec8:	4b2b      	ldr	r3, [pc, #172]	; (8005f78 <mouse_gimbal_input+0xd0>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	725a      	strb	r2, [r3, #9]
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <mouse_gimbal_input+0xcc>)
 8005ed0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005edc:	ee17 0a90 	vmov	r0, s15
 8005ee0:	f7fa fb32 	bl	8000548 <__aeabi_f2d>
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <mouse_gimbal_input+0xd4>)
 8005eea:	f7fa fb85 	bl	80005f8 <__aeabi_dmul>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <mouse_gimbal_input+0xd8>)
 8005efc:	f7fa fca6 	bl	800084c <__aeabi_ddiv>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
		float pitch_mouse = (float) remote_cmd.mouse_y * MOUSE_Y_INVERT
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	f7fa fe6e 	bl	8000be8 <__aeabi_d2f>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 8005f10:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <mouse_gimbal_input+0xcc>)
 8005f12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 8005f1e:	eef1 7a67 	vneg.f32	s15, s15
 8005f22:	ee17 3a90 	vmov	r3, s15
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fa fb0e 	bl	8000548 <__aeabi_f2d>
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <mouse_gimbal_input+0xdc>)
 8005f32:	f7fa fb61 	bl	80005f8 <__aeabi_dmul>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <mouse_gimbal_input+0xd8>)
 8005f44:	f7fa fc82 	bl	800084c <__aeabi_ddiv>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
		float yaw_mouse = (float) remote_cmd.mouse_x * MOUSE_X_INVERT
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f7fa fe4a 	bl	8000be8 <__aeabi_d2f>
 8005f54:	4603      	mov	r3, r0
 8005f56:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 8005f58:	edd7 0a00 	vldr	s1, [r7]
 8005f5c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005f60:	f7ff fd94 	bl	8005a8c <gimbal_turn_ang>
	}
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20002f40 	.word	0x20002f40
 8005f74:	20000318 	.word	0x20000318
 8005f78:	20002ef0 	.word	0x20002ef0
 8005f7c:	40240000 	.word	0x40240000
 8005f80:	40e00000 	.word	0x40e00000
 8005f84:	40340000 	.word	0x40340000

08005f88 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
	if (safety_toggle || launcher_safety_toggle
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <mouse_launcher_control_input+0xa8>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10d      	bne.n	8005fb0 <mouse_launcher_control_input+0x28>
 8005f94:	4b27      	ldr	r3, [pc, #156]	; (8006034 <mouse_launcher_control_input+0xac>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <mouse_launcher_control_input+0x28>
			|| remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <mouse_launcher_control_input+0xb0>)
 8005f9e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d004      	beq.n	8005fb0 <mouse_launcher_control_input+0x28>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <mouse_launcher_control_input+0xb0>)
 8005fa8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d016      	beq.n	8005fde <mouse_launcher_control_input+0x56>
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8005fb0:	4b21      	ldr	r3, [pc, #132]	; (8006038 <mouse_launcher_control_input+0xb0>)
 8005fb2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d102      	bne.n	8005fc0 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 8005fba:	4b20      	ldr	r3, [pc, #128]	; (800603c <mouse_launcher_control_input+0xb4>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.gun_feeding_speed = 0;
 8005fc0:	4b1e      	ldr	r3, [pc, #120]	; (800603c <mouse_launcher_control_input+0xb4>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <mouse_launcher_control_input+0xb4>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <mouse_launcher_control_input+0xb0>)
 8005fce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d027      	beq.n	8006026 <mouse_launcher_control_input+0x9e>
			launcher_safety_toggle = 0;
 8005fd6:	4b17      	ldr	r3, [pc, #92]	; (8006034 <mouse_launcher_control_input+0xac>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8005fdc:	e023      	b.n	8006026 <mouse_launcher_control_input+0x9e>
		}
	} else {
		launcher_ctrl_data.enabled = 1;
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <mouse_launcher_control_input+0xb4>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 8005fe4:	4b15      	ldr	r3, [pc, #84]	; (800603c <mouse_launcher_control_input+0xb4>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8005fea:	4b13      	ldr	r3, [pc, #76]	; (8006038 <mouse_launcher_control_input+0xb0>)
 8005fec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10b      	bne.n	800600c <mouse_launcher_control_input+0x84>
			if (remote_cmd.mouse_right) {
 8005ff4:	4b10      	ldr	r3, [pc, #64]	; (8006038 <mouse_launcher_control_input+0xb0>)
 8005ff6:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <mouse_launcher_control_input+0x7e>
				launcher_ctrl_data.override = 1;
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <mouse_launcher_control_input+0xb4>)
 8006000:	2201      	movs	r2, #1
 8006002:	711a      	strb	r2, [r3, #4]
 8006004:	e002      	b.n	800600c <mouse_launcher_control_input+0x84>
			} else {
				launcher_ctrl_data.override = 0;
 8006006:	4b0d      	ldr	r3, [pc, #52]	; (800603c <mouse_launcher_control_input+0xb4>)
 8006008:	2200      	movs	r2, #0
 800600a:	711a      	strb	r2, [r3, #4]
			}
		}
		if (remote_cmd.mouse_left) {
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <mouse_launcher_control_input+0xb0>)
 800600e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <mouse_launcher_control_input+0x96>
			launcher_ctrl_data.gun_feeding_speed =1;
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <mouse_launcher_control_input+0xb4>)
 8006018:	2201      	movs	r2, #1
 800601a:	805a      	strh	r2, [r3, #2]

		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}
}
 800601c:	e003      	b.n	8006026 <mouse_launcher_control_input+0x9e>
			launcher_ctrl_data.gun_feeding_speed = 0;
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <mouse_launcher_control_input+0xb4>)
 8006020:	2200      	movs	r2, #0
 8006022:	805a      	strh	r2, [r3, #2]
}
 8006024:	e7ff      	b.n	8006026 <mouse_launcher_control_input+0x9e>
 8006026:	bf00      	nop
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	20002f40 	.word	0x20002f40
 8006034:	20002f41 	.word	0x20002f41
 8006038:	20000318 	.word	0x20000318
 800603c:	20002ee8 	.word	0x20002ee8

08006040 <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 8006044:	f000 f8d0 	bl	80061e8 <remote_gimbal_input>
	remote_chassis_input();
 8006048:	f000 f87e 	bl	8006148 <remote_chassis_input>
	remote_launcher_control_input();
 800604c:	f000 f934 	bl	80062b8 <remote_launcher_control_input>
}
 8006050:	bf00      	nop
 8006052:	bd80      	pop	{r7, pc}

08006054 <remote_gear_shifter>:
void remote_gear_shifter(speed_shift_t* gear_speed){
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if (remote_cmd.left_switch == ge_LSW_CONFIG) {
 800605c:	4b36      	ldr	r3, [pc, #216]	; (8006138 <remote_gear_shifter+0xe4>)
 800605e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006062:	2b03      	cmp	r3, #3
 8006064:	d164      	bne.n	8006130 <remote_gear_shifter+0xdc>
		if (remote_cmd.side_dial > 330) {
 8006066:	4b34      	ldr	r3, [pc, #208]	; (8006138 <remote_gear_shifter+0xe4>)
 8006068:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800606c:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8006070:	dd2c      	ble.n	80060cc <remote_gear_shifter+0x78>
			if (HAL_GetTick() - shift_press_time > 100) {
 8006072:	f005 fa8d 	bl	800b590 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	4b30      	ldr	r3, [pc, #192]	; (800613c <remote_gear_shifter+0xe8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b64      	cmp	r3, #100	; 0x64
 8006080:	d91e      	bls.n	80060c0 <remote_gear_shifter+0x6c>
				gear_speed->curr_gear =
						(gear_speed->curr_gear < 6) ?
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 8006086:	2b05      	cmp	r3, #5
 8006088:	bf28      	it	cs
 800608a:	2305      	movcs	r3, #5
 800608c:	b2db      	uxtb	r3, r3
 800608e:	3301      	adds	r3, #1
 8006090:	b2da      	uxtb	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	701a      	strb	r2, [r3, #0]
								gear_speed->curr_gear + 1 : 6;
				temp_msg = bz_high;
 8006096:	2306      	movs	r3, #6
 8006098:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	e00a      	b.n	80060b6 <remote_gear_shifter+0x62>
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <remote_gear_shifter+0xec>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	f107 010d 	add.w	r1, r7, #13
 80060a8:	2300      	movs	r3, #0
 80060aa:	2200      	movs	r2, #0
 80060ac:	f011 fe6e 	bl	8017d8c <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	3301      	adds	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d3ef      	bcc.n	80060a0 <remote_gear_shifter+0x4c>
				}
			}
			shift_press_time = HAL_GetTick();
 80060c0:	f005 fa66 	bl	800b590 <HAL_GetTick>
 80060c4:	4603      	mov	r3, r0
 80060c6:	4a1d      	ldr	r2, [pc, #116]	; (800613c <remote_gear_shifter+0xe8>)
 80060c8:	6013      	str	r3, [r2, #0]
				}
			}
			ctrl_press_time = HAL_GetTick();
		}
	}
}
 80060ca:	e031      	b.n	8006130 <remote_gear_shifter+0xdc>
		else if (remote_cmd.side_dial < -330) {
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <remote_gear_shifter+0xe4>)
 80060ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80060d2:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 80060d6:	da2b      	bge.n	8006130 <remote_gear_shifter+0xdc>
			if (HAL_GetTick() - ctrl_press_time > 100) {
 80060d8:	f005 fa5a 	bl	800b590 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b19      	ldr	r3, [pc, #100]	; (8006144 <remote_gear_shifter+0xf0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b64      	cmp	r3, #100	; 0x64
 80060e6:	d91e      	bls.n	8006126 <remote_gear_shifter+0xd2>
						(gear_speed->curr_gear > 1) ?
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	bf38      	it	cc
 80060f0:	2302      	movcc	r3, #2
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	701a      	strb	r2, [r3, #0]
				temp_msg = bz_low;
 80060fc:	2307      	movs	r3, #7
 80060fe:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8006100:	2300      	movs	r3, #0
 8006102:	73bb      	strb	r3, [r7, #14]
 8006104:	e00a      	b.n	800611c <remote_gear_shifter+0xc8>
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <remote_gear_shifter+0xec>)
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	f107 010d 	add.w	r1, r7, #13
 800610e:	2300      	movs	r3, #0
 8006110:	2200      	movs	r2, #0
 8006112:	f011 fe3b 	bl	8017d8c <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	3301      	adds	r3, #1
 800611a:	73bb      	strb	r3, [r7, #14]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	7bba      	ldrb	r2, [r7, #14]
 8006122:	429a      	cmp	r2, r3
 8006124:	d3ef      	bcc.n	8006106 <remote_gear_shifter+0xb2>
			ctrl_press_time = HAL_GetTick();
 8006126:	f005 fa33 	bl	800b590 <HAL_GetTick>
 800612a:	4603      	mov	r3, r0
 800612c:	4a05      	ldr	r2, [pc, #20]	; (8006144 <remote_gear_shifter+0xf0>)
 800612e:	6013      	str	r3, [r2, #0]
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000318 	.word	0x20000318
 800613c:	20002f50 	.word	0x20002f50
 8006140:	2000048c 	.word	0x2000048c
 8006144:	20002f54 	.word	0x20002f54

08006148 <remote_chassis_input>:

void remote_chassis_input() {
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch != ge_RSW_ALL_ON) {
 800614e:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <remote_chassis_input+0x8c>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <remote_chassis_input+0x18>
 8006156:	4b20      	ldr	r3, [pc, #128]	; (80061d8 <remote_chassis_input+0x90>)
 8006158:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d002      	beq.n	8006166 <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 8006160:	f7ff fb58 	bl	8005814 <chassis_kill_ctrl>
 8006164:	e032      	b.n	80061cc <remote_chassis_input+0x84>
	} else {
			chassis_ctrl_data.enabled = 1;
 8006166:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <remote_chassis_input+0x94>)
 8006168:	2201      	movs	r2, #1
 800616a:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	607b      	str	r3, [r7, #4]

			forward_input = (float) remote_cmd.left_y / RC_LIMITS;
 800617e:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <remote_chassis_input+0x90>)
 8006180:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800618c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80061e0 <remote_chassis_input+0x98>
 8006190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006194:	edc7 7a02 	vstr	s15, [r7, #8]
			horizontal_input = (float) remote_cmd.left_x / RC_LIMITS;
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <remote_chassis_input+0x90>)
 800619a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061a6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80061e0 <remote_chassis_input+0x98>
 80061aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ae:	edc7 7a03 	vstr	s15, [r7, #12]
			yaw_input = chassis_center_yaw();
 80061b2:	f7ff faed 	bl	8005790 <chassis_center_yaw>
 80061b6:	ed87 0a01 	vstr	s0, [r7, #4]
//yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 80061ba:	ed97 1a01 	vldr	s2, [r7, #4]
 80061be:	edd7 0a03 	vldr	s1, [r7, #12]
 80061c2:	ed97 0a02 	vldr	s0, [r7, #8]
 80061c6:	f7ff fb07 	bl	80057d8 <chassis_set_ctrl>
	}
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20002f40 	.word	0x20002f40
 80061d8:	20000318 	.word	0x20000318
 80061dc:	20002ed0 	.word	0x20002ed0
 80061e0:	44250000 	.word	0x44250000
 80061e4:	00000000 	.word	0x00000000

080061e8 <remote_gimbal_input>:

void remote_gimbal_input() {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 80061ee:	4b2e      	ldr	r3, [pc, #184]	; (80062a8 <remote_gimbal_input+0xc0>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <remote_gimbal_input+0x18>
 80061f6:	4b2d      	ldr	r3, [pc, #180]	; (80062ac <remote_gimbal_input+0xc4>)
 80061f8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d103      	bne.n	8006208 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8006200:	4b2b      	ldr	r3, [pc, #172]	; (80062b0 <remote_gimbal_input+0xc8>)
 8006202:	2200      	movs	r2, #0
 8006204:	725a      	strb	r2, [r3, #9]
 8006206:	e047      	b.n	8006298 <remote_gimbal_input+0xb0>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8006208:	4b29      	ldr	r3, [pc, #164]	; (80062b0 <remote_gimbal_input+0xc8>)
 800620a:	2201      	movs	r2, #1
 800620c:	725a      	strb	r2, [r3, #9]
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <remote_gimbal_input+0xc4>)
 8006210:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800621c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80062b4 <remote_gimbal_input+0xcc>
 8006220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006224:	eef1 7a67 	vneg.f32	s15, s15
 8006228:	ee17 3a90 	vmov	r3, s15
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa f98b 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 8006232:	a31b      	add	r3, pc, #108	; (adr r3, 80062a0 <remote_gimbal_input+0xb8>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f9de 	bl	80005f8 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
		float pitch_remote = ((float) remote_cmd.right_y / 660) * PITCH_INVERT
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	f7fa fcd0 	bl	8000be8 <__aeabi_d2f>
 8006248:	4603      	mov	r3, r0
 800624a:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 800624c:	4b17      	ldr	r3, [pc, #92]	; (80062ac <remote_gimbal_input+0xc4>)
 800624e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800625a:	eddf 6a16 	vldr	s13, [pc, #88]	; 80062b4 <remote_gimbal_input+0xcc>
 800625e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006262:	eef1 7a67 	vneg.f32	s15, s15
 8006266:	ee17 3a90 	vmov	r3, s15
 800626a:	4618      	mov	r0, r3
 800626c:	f7fa f96c 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 8006270:	a30b      	add	r3, pc, #44	; (adr r3, 80062a0 <remote_gimbal_input+0xb8>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f7fa f9bf 	bl	80005f8 <__aeabi_dmul>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
		float yaw_remote = ((float) remote_cmd.right_x / 660) * YAW_INVERT
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	f7fa fcb1 	bl	8000be8 <__aeabi_d2f>
 8006286:	4603      	mov	r3, r0
 8006288:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 800628a:	edd7 0a00 	vldr	s1, [r7]
 800628e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006292:	f7ff fbfb 	bl	8005a8c <gimbal_turn_ang>
	}
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	9999999a 	.word	0x9999999a
 80062a4:	3fa99999 	.word	0x3fa99999
 80062a8:	20002f40 	.word	0x20002f40
 80062ac:	20000318 	.word	0x20000318
 80062b0:	20002ef0 	.word	0x20002ef0
 80062b4:	44250000 	.word	0x44250000

080062b8 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
	if (safety_toggle || remote_cmd.right_switch == ge_RSW_SHUTDOWN
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <remote_launcher_control_input+0x7c>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <remote_launcher_control_input+0x20>
 80062c4:	4b1c      	ldr	r3, [pc, #112]	; (8006338 <remote_launcher_control_input+0x80>)
 80062c6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d004      	beq.n	80062d8 <remote_launcher_control_input+0x20>
			|| remote_cmd.left_switch != ge_LSW_UNSAFE) {
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <remote_launcher_control_input+0x80>)
 80062d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d016      	beq.n	8006306 <remote_launcher_control_input+0x4e>
		if (remote_cmd.left_switch != ge_LSW_UNSAFE) {
 80062d8:	4b17      	ldr	r3, [pc, #92]	; (8006338 <remote_launcher_control_input+0x80>)
 80062da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d002      	beq.n	80062e8 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 80062e2:	4b16      	ldr	r3, [pc, #88]	; (800633c <remote_launcher_control_input+0x84>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
		}
		if (remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 80062e8:	4b13      	ldr	r3, [pc, #76]	; (8006338 <remote_launcher_control_input+0x80>)
 80062ea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d102      	bne.n	80062f8 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <remote_launcher_control_input+0x88>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.gun_feeding_speed = 0;
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <remote_launcher_control_input+0x88>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <remote_launcher_control_input+0x88>)
 8006300:	2200      	movs	r2, #0
 8006302:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.gun_feeding_speed = 0;
		}
	}

}
 8006304:	e011      	b.n	800632a <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 8006306:	4b0e      	ldr	r3, [pc, #56]	; (8006340 <remote_launcher_control_input+0x88>)
 8006308:	2201      	movs	r2, #1
 800630a:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 800630c:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <remote_launcher_control_input+0x88>)
 800630e:	2201      	movs	r2, #1
 8006310:	801a      	strh	r2, [r3, #0]
		if (remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <remote_launcher_control_input+0x80>)
 8006314:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d103      	bne.n	8006324 <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.gun_feeding_speed = 1;
 800631c:	4b08      	ldr	r3, [pc, #32]	; (8006340 <remote_launcher_control_input+0x88>)
 800631e:	2201      	movs	r2, #1
 8006320:	805a      	strh	r2, [r3, #2]
}
 8006322:	e002      	b.n	800632a <remote_launcher_control_input+0x72>
			launcher_ctrl_data.gun_feeding_speed = 0;
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <remote_launcher_control_input+0x88>)
 8006326:	2200      	movs	r2, #0
 8006328:	805a      	strh	r2, [r3, #2]
}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20002f40 	.word	0x20002f40
 8006338:	20000318 	.word	0x20000318
 800633c:	20002f41 	.word	0x20002f41
 8006340:	20002ee8 	.word	0x20002ee8

08006344 <aimbot_pid_init>:
		sbc_new_data = 0;
		control_reset();
	}
}

void aimbot_pid_init() {
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
	aimbot_offset.y_offset = 0;
 8006348:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <aimbot_pid_init+0x70>)
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	605a      	str	r2, [r3, #4]
	aimbot_offset.x_offset = 0;
 8006350:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <aimbot_pid_init+0x70>)
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.kp = AIMBOT_X_KP;
 8006358:	4b17      	ldr	r3, [pc, #92]	; (80063b8 <aimbot_pid_init+0x74>)
 800635a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800635e:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.ki = AIMBOT_X_KI;
 8006360:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <aimbot_pid_init+0x74>)
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	605a      	str	r2, [r3, #4]
	aimbot_x_pid.kd = AIMBOT_X_KD;
 8006368:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <aimbot_pid_init+0x74>)
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	609a      	str	r2, [r3, #8]
	aimbot_x_pid.max_out = 1.5;
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <aimbot_pid_init+0x74>)
 8006372:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8006376:	61da      	str	r2, [r3, #28]
	aimbot_x_pid.int_max = AIMBOT_KI_MAX;
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <aimbot_pid_init+0x74>)
 800637a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800637e:	619a      	str	r2, [r3, #24]

	aimbot_y_pid.kp = AIMBOT_Y_KP;
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <aimbot_pid_init+0x78>)
 8006382:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006386:	601a      	str	r2, [r3, #0]
	aimbot_y_pid.ki = AIMBOT_Y_KI;
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <aimbot_pid_init+0x78>)
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	605a      	str	r2, [r3, #4]
	aimbot_y_pid.kd = AIMBOT_Y_KD;
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <aimbot_pid_init+0x78>)
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	609a      	str	r2, [r3, #8]
	aimbot_y_pid.max_out = 1.5;
 8006398:	4b08      	ldr	r3, [pc, #32]	; (80063bc <aimbot_pid_init+0x78>)
 800639a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800639e:	61da      	str	r2, [r3, #28]
	aimbot_y_pid.int_max = AIMBOT_KI_MAX;
 80063a0:	4b06      	ldr	r3, [pc, #24]	; (80063bc <aimbot_pid_init+0x78>)
 80063a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80063a6:	619a      	str	r2, [r3, #24]
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20002fbc 	.word	0x20002fbc
 80063b8:	20002f88 	.word	0x20002f88
 80063bc:	20002f58 	.word	0x20002f58

080063c0 <joint_motor_init>:
 * FreeRTOS task for gimbal controls
 * Has HIGH2 priority
 *
 */

void joint_motor_init(motor_data_t *motor_data){
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	motor_data[7].id = L1_MOTOR_ID;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80063ce:	2208      	movs	r2, #8
 80063d0:	801a      	strh	r2, [r3, #0]
	motor_data[6].id = L2_MOTOR_ID;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80063d8:	2207      	movs	r2, #7
 80063da:	801a      	strh	r2, [r3, #0]
	motor_data[5].id = R2_MOTOR_ID;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80063e2:	2206      	movs	r2, #6
 80063e4:	801a      	strh	r2, [r3, #0]
	motor_data[4].id = R1_MOTOR_ID;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80063ec:	2205      	movs	r2, #5
 80063ee:	801a      	strh	r2, [r3, #0]
	jointmotor_control_loop(&leg_move);
 80063f0:	4803      	ldr	r0, [pc, #12]	; (8006400 <joint_motor_init+0x40>)
 80063f2:	f000 fe91 	bl	8007118 <jointmotor_control_loop>



}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20002fc4 	.word	0x20002fc4

08006404 <gimbal_control_task>:

void gimbal_control_task(void *argument) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af02      	add	r7, sp, #8
 800640a:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	//initialize
	joint_motor_init(&can_motors[24]);
 800640c:	4817      	ldr	r0, [pc, #92]	; (800646c <gimbal_control_task+0x68>)
 800640e:	f7ff ffd7 	bl	80063c0 <joint_motor_init>

	while (1) {
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <gimbal_control_task+0x6c>)
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	2301      	movs	r3, #1
 800641e:	2201      	movs	r2, #1
 8006420:	2103      	movs	r1, #3
 8006422:	f011 f8ed 	bl	8017600 <xEventGroupWaitBits>
		portMAX_DELAY);
		start_time = xTaskGetTickCount();
 8006426:	f012 fcad 	bl	8018d84 <xTaskGetTickCount>
 800642a:	4603      	mov	r3, r0
 800642c:	60fb      	str	r3, [r7, #12]
//		if (gimbal_ctrl_data.enabled) {
//			if (gimbal_ctrl_data.imu_mode) {
		leg_control(&leg_move);
 800642e:	4811      	ldr	r0, [pc, #68]	; (8006474 <gimbal_control_task+0x70>)
 8006430:	f000 f87a 	bl	8006528 <leg_control>
		jointmotor_control_loop(&leg_move);
 8006434:	480f      	ldr	r0, [pc, #60]	; (8006474 <gimbal_control_task+0x70>)
 8006436:	f000 fe6f 	bl	8007118 <jointmotor_control_loop>
		joint_motor_send_can(&leg_move, R1_MOTOR_ID, R2_MOTOR_ID, L1_MOTOR_ID, L2_MOTOR_ID);
 800643a:	2307      	movs	r3, #7
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2308      	movs	r3, #8
 8006440:	2206      	movs	r2, #6
 8006442:	2105      	movs	r1, #5
 8006444:	480b      	ldr	r0, [pc, #44]	; (8006474 <gimbal_control_task+0x70>)
 8006446:	f000 fdb5 	bl	8006fb4 <joint_motor_send_can>

//		}
		status_led(2, off_led);
 800644a:	2101      	movs	r1, #1
 800644c:	2002      	movs	r0, #2
 800644e:	f7fb fe37 	bl	80020c0 <status_led>
		xEventGroupClearBits(gimbal_event_group, 0b11);
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <gimbal_control_task+0x6c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2103      	movs	r1, #3
 8006458:	4618      	mov	r0, r3
 800645a:	f011 f99f 	bl	801779c <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, GIMBAL_DELAY);
 800645e:	f107 030c 	add.w	r3, r7, #12
 8006462:	2105      	movs	r1, #5
 8006464:	4618      	mov	r0, r3
 8006466:	f012 fabf 	bl	80189e8 <vTaskDelayUntil>
		xEventGroupWaitBits(gimbal_event_group, 0b11, pdTRUE, pdTRUE,
 800646a:	e7d2      	b.n	8006412 <gimbal_control_task+0xe>
 800646c:	20002ed0 	.word	0x20002ed0
 8006470:	20000470 	.word	0x20000470
 8006474:	20002fc4 	.word	0x20002fc4

08006478 <calculate_torque>:
 * @note both pitch and yaw are currently on CAN2 with ID5 and 6.
 * Need to check if having ID4 (i.e. 0x208) + having the launcher motors (ID 1-3, 0x201 to 0x203)
 * still provides a fast enough response
 */

float calculate_torque(float x) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calculate y using the absolute value of x
    float y = (1.2 * fabs(x) + 0.1)/3*16000;
 8006482:	edd7 7a01 	vldr	s15, [r7, #4]
 8006486:	eef0 7ae7 	vabs.f32	s15, s15
 800648a:	ee17 0a90 	vmov	r0, s15
 800648e:	f7fa f85b 	bl	8000548 <__aeabi_f2d>
 8006492:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006496:	4b20      	ldr	r3, [pc, #128]	; (8006518 <calculate_torque+0xa0>)
 8006498:	f7fa f8ae 	bl	80005f8 <__aeabi_dmul>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4610      	mov	r0, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	a31a      	add	r3, pc, #104	; (adr r3, 8006510 <calculate_torque+0x98>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f7f9 feef 	bl	800028c <__adddf3>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4610      	mov	r0, r2
 80064b4:	4619      	mov	r1, r3
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	4b18      	ldr	r3, [pc, #96]	; (800651c <calculate_torque+0xa4>)
 80064bc:	f7fa f9c6 	bl	800084c <__aeabi_ddiv>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	4b14      	ldr	r3, [pc, #80]	; (8006520 <calculate_torque+0xa8>)
 80064ce:	f7fa f893 	bl	80005f8 <__aeabi_dmul>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	f7fa fb85 	bl	8000be8 <__aeabi_d2f>
 80064de:	4603      	mov	r3, r0
 80064e0:	60fb      	str	r3, [r7, #12]

    // Preserve the original sign of x
    if (x < 0) {
 80064e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80064e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ee:	d505      	bpl.n	80064fc <calculate_torque+0x84>
        y = -y;
 80064f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80064f4:	eef1 7a67 	vneg.f32	s15, s15
 80064f8:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return y;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	ee07 3a90 	vmov	s15, r3
}
 8006502:	eeb0 0a67 	vmov.f32	s0, s15
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	f3af 8000 	nop.w
 8006510:	9999999a 	.word	0x9999999a
 8006514:	3fb99999 	.word	0x3fb99999
 8006518:	3ff33333 	.word	0x3ff33333
 800651c:	40080000 	.word	0x40080000
 8006520:	40cf4000 	.word	0x40cf4000
 8006524:	00000000 	.word	0x00000000

08006528 <leg_control>:



void leg_control(leg_move_t *leg_move_update) {
 8006528:	b5b0      	push	{r4, r5, r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

	leg_move_update->joint_motor[0].angle = can_motors[4].angle_data.adj_ang;// R1
 8006530:	4bd9      	ldr	r3, [pc, #868]	; (8006898 <leg_control+0x370>)
 8006532:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	605a      	str	r2, [r3, #4]
	leg_move_update->joint_motor[1].angle = can_motors[5].angle_data.adj_ang;//R2
 800653c:	4bd6      	ldr	r3, [pc, #856]	; (8006898 <leg_control+0x370>)
 800653e:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	619a      	str	r2, [r3, #24]
	leg_move_update->joint_motor[2].angle = can_motors[6].angle_data.adj_ang;//L2
 8006548:	4bd3      	ldr	r3, [pc, #844]	; (8006898 <leg_control+0x370>)
 800654a:	f203 636c 	addw	r3, r3, #1644	; 0x66c
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c
	leg_move_update->joint_motor[3].angle = can_motors[7].angle_data.adj_ang;//L1
 8006554:	4bd0      	ldr	r3, [pc, #832]	; (8006898 <leg_control+0x370>)
 8006556:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	641a      	str	r2, [r3, #64]	; 0x40


	//left and right leg height// todo:find average
	leg_move_update->yR1 = (sqrt(pow(l3,2)-pow(l1-l2*cos(leg_move_update->joint_motor[0].angle),2))-l2*sin(leg_move_update->joint_motor[0].angle));//0 3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	4618      	mov	r0, r3
 8006566:	f7f9 ffef 	bl	8000548 <__aeabi_f2d>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	ec43 2b10 	vmov	d0, r2, r3
 8006572:	f019 fddd 	bl	8020130 <cos>
 8006576:	ec51 0b10 	vmov	r0, r1, d0
 800657a:	a3bf      	add	r3, pc, #764	; (adr r3, 8006878 <leg_control+0x350>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7fa f83a 	bl	80005f8 <__aeabi_dmul>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	a1bd      	add	r1, pc, #756	; (adr r1, 8006880 <leg_control+0x358>)
 800658a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800658e:	f7f9 fe7b 	bl	8000288 <__aeabi_dsub>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	ec43 2b17 	vmov	d7, r2, r3
 800659a:	ed9f 1bbb 	vldr	d1, [pc, #748]	; 8006888 <leg_control+0x360>
 800659e:	eeb0 0a47 	vmov.f32	s0, s14
 80065a2:	eef0 0a67 	vmov.f32	s1, s15
 80065a6:	f019 ff31 	bl	802040c <pow>
 80065aa:	ec53 2b10 	vmov	r2, r3, d0
 80065ae:	a1b8      	add	r1, pc, #736	; (adr r1, 8006890 <leg_control+0x368>)
 80065b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b4:	f7f9 fe68 	bl	8000288 <__aeabi_dsub>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	ec43 2b17 	vmov	d7, r2, r3
 80065c0:	eeb0 0a47 	vmov.f32	s0, s14
 80065c4:	eef0 0a67 	vmov.f32	s1, s15
 80065c8:	f019 ff90 	bl	80204ec <sqrt>
 80065cc:	ec55 4b10 	vmov	r4, r5, d0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7f9 ffb7 	bl	8000548 <__aeabi_f2d>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	ec43 2b10 	vmov	d0, r2, r3
 80065e2:	f019 fe85 	bl	80202f0 <sin>
 80065e6:	ec51 0b10 	vmov	r0, r1, d0
 80065ea:	a3a3      	add	r3, pc, #652	; (adr r3, 8006878 <leg_control+0x350>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7fa f802 	bl	80005f8 <__aeabi_dmul>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	f7f9 fe44 	bl	8000288 <__aeabi_dsub>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4610      	mov	r0, r2
 8006606:	4619      	mov	r1, r3
 8006608:	f7fa faee 	bl	8000be8 <__aeabi_d2f>
 800660c:	4602      	mov	r2, r0
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	665a      	str	r2, [r3, #100]	; 0x64
	leg_move_update->yR2 = (sqrt(pow(l3,2)-pow(l1-l2*cos(-1*leg_move_update->joint_motor[1].angle),2))-l2*sin(-1*leg_move_update->joint_motor[1].angle));//0 3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	edd3 7a06 	vldr	s15, [r3, #24]
 8006618:	eef1 7a67 	vneg.f32	s15, s15
 800661c:	ee17 3a90 	vmov	r3, s15
 8006620:	4618      	mov	r0, r3
 8006622:	f7f9 ff91 	bl	8000548 <__aeabi_f2d>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	ec43 2b10 	vmov	d0, r2, r3
 800662e:	f019 fd7f 	bl	8020130 <cos>
 8006632:	ec51 0b10 	vmov	r0, r1, d0
 8006636:	a390      	add	r3, pc, #576	; (adr r3, 8006878 <leg_control+0x350>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 ffdc 	bl	80005f8 <__aeabi_dmul>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	a18e      	add	r1, pc, #568	; (adr r1, 8006880 <leg_control+0x358>)
 8006646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800664a:	f7f9 fe1d 	bl	8000288 <__aeabi_dsub>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	ec43 2b17 	vmov	d7, r2, r3
 8006656:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8006888 <leg_control+0x360>
 800665a:	eeb0 0a47 	vmov.f32	s0, s14
 800665e:	eef0 0a67 	vmov.f32	s1, s15
 8006662:	f019 fed3 	bl	802040c <pow>
 8006666:	ec53 2b10 	vmov	r2, r3, d0
 800666a:	a189      	add	r1, pc, #548	; (adr r1, 8006890 <leg_control+0x368>)
 800666c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006670:	f7f9 fe0a 	bl	8000288 <__aeabi_dsub>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	ec43 2b17 	vmov	d7, r2, r3
 800667c:	eeb0 0a47 	vmov.f32	s0, s14
 8006680:	eef0 0a67 	vmov.f32	s1, s15
 8006684:	f019 ff32 	bl	80204ec <sqrt>
 8006688:	ec55 4b10 	vmov	r4, r5, d0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	4618      	mov	r0, r3
 8006692:	f7f9 ff59 	bl	8000548 <__aeabi_f2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	ec43 2b10 	vmov	d0, r2, r3
 800669e:	f019 fe27 	bl	80202f0 <sin>
 80066a2:	ec51 0b10 	vmov	r0, r1, d0
 80066a6:	a374      	add	r3, pc, #464	; (adr r3, 8006878 <leg_control+0x350>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f7f9 ffa4 	bl	80005f8 <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4620      	mov	r0, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7f9 fde8 	bl	800028c <__adddf3>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4610      	mov	r0, r2
 80066c2:	4619      	mov	r1, r3
 80066c4:	f7fa fa90 	bl	8000be8 <__aeabi_d2f>
 80066c8:	4602      	mov	r2, r0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	669a      	str	r2, [r3, #104]	; 0x68
	leg_move_update->yR = (leg_move_update->yR2+leg_move_update->yR1)/2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80066da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	leg_move_update->yL2 = (sqrt(pow(l3,2)-pow(l1-l2*cos(leg_move_update->joint_motor[2].angle),2))-l2*sin(leg_move_update->joint_motor[2].angle));// 0 3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7f9 ff29 	bl	8000548 <__aeabi_f2d>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	ec43 2b10 	vmov	d0, r2, r3
 80066fe:	f019 fd17 	bl	8020130 <cos>
 8006702:	ec51 0b10 	vmov	r0, r1, d0
 8006706:	a35c      	add	r3, pc, #368	; (adr r3, 8006878 <leg_control+0x350>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f7f9 ff74 	bl	80005f8 <__aeabi_dmul>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	a15a      	add	r1, pc, #360	; (adr r1, 8006880 <leg_control+0x358>)
 8006716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800671a:	f7f9 fdb5 	bl	8000288 <__aeabi_dsub>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	ec43 2b17 	vmov	d7, r2, r3
 8006726:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8006888 <leg_control+0x360>
 800672a:	eeb0 0a47 	vmov.f32	s0, s14
 800672e:	eef0 0a67 	vmov.f32	s1, s15
 8006732:	f019 fe6b 	bl	802040c <pow>
 8006736:	ec53 2b10 	vmov	r2, r3, d0
 800673a:	a155      	add	r1, pc, #340	; (adr r1, 8006890 <leg_control+0x368>)
 800673c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006740:	f7f9 fda2 	bl	8000288 <__aeabi_dsub>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	ec43 2b17 	vmov	d7, r2, r3
 800674c:	eeb0 0a47 	vmov.f32	s0, s14
 8006750:	eef0 0a67 	vmov.f32	s1, s15
 8006754:	f019 feca 	bl	80204ec <sqrt>
 8006758:	ec55 4b10 	vmov	r4, r5, d0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4618      	mov	r0, r3
 8006762:	f7f9 fef1 	bl	8000548 <__aeabi_f2d>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	ec43 2b10 	vmov	d0, r2, r3
 800676e:	f019 fdbf 	bl	80202f0 <sin>
 8006772:	ec51 0b10 	vmov	r0, r1, d0
 8006776:	a340      	add	r3, pc, #256	; (adr r3, 8006878 <leg_control+0x350>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4620      	mov	r0, r4
 8006786:	4629      	mov	r1, r5
 8006788:	f7f9 fd7e 	bl	8000288 <__aeabi_dsub>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4610      	mov	r0, r2
 8006792:	4619      	mov	r1, r3
 8006794:	f7fa fa28 	bl	8000be8 <__aeabi_d2f>
 8006798:	4602      	mov	r2, r0
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	65da      	str	r2, [r3, #92]	; 0x5c
	leg_move_update->yL1 = (sqrt(pow(l3,2)-pow(l1-l2*cos(-1*leg_move_update->joint_motor[3].angle),2))-l2*sin(-1*leg_move_update->joint_motor[3].angle));// 0 3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80067a4:	eef1 7a67 	vneg.f32	s15, s15
 80067a8:	ee17 3a90 	vmov	r3, s15
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7f9 fecb 	bl	8000548 <__aeabi_f2d>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	ec43 2b10 	vmov	d0, r2, r3
 80067ba:	f019 fcb9 	bl	8020130 <cos>
 80067be:	ec51 0b10 	vmov	r0, r1, d0
 80067c2:	a32d      	add	r3, pc, #180	; (adr r3, 8006878 <leg_control+0x350>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	a12b      	add	r1, pc, #172	; (adr r1, 8006880 <leg_control+0x358>)
 80067d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d6:	f7f9 fd57 	bl	8000288 <__aeabi_dsub>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	ec43 2b17 	vmov	d7, r2, r3
 80067e2:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8006888 <leg_control+0x360>
 80067e6:	eeb0 0a47 	vmov.f32	s0, s14
 80067ea:	eef0 0a67 	vmov.f32	s1, s15
 80067ee:	f019 fe0d 	bl	802040c <pow>
 80067f2:	ec53 2b10 	vmov	r2, r3, d0
 80067f6:	a126      	add	r1, pc, #152	; (adr r1, 8006890 <leg_control+0x368>)
 80067f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067fc:	f7f9 fd44 	bl	8000288 <__aeabi_dsub>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	ec43 2b17 	vmov	d7, r2, r3
 8006808:	eeb0 0a47 	vmov.f32	s0, s14
 800680c:	eef0 0a67 	vmov.f32	s1, s15
 8006810:	f019 fe6c 	bl	80204ec <sqrt>
 8006814:	ec55 4b10 	vmov	r4, r5, d0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 fe93 	bl	8000548 <__aeabi_f2d>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	ec43 2b10 	vmov	d0, r2, r3
 800682a:	f019 fd61 	bl	80202f0 <sin>
 800682e:	ec51 0b10 	vmov	r0, r1, d0
 8006832:	a311      	add	r3, pc, #68	; (adr r3, 8006878 <leg_control+0x350>)
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f7f9 fede 	bl	80005f8 <__aeabi_dmul>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4620      	mov	r0, r4
 8006842:	4629      	mov	r1, r5
 8006844:	f7f9 fd22 	bl	800028c <__adddf3>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4610      	mov	r0, r2
 800684e:	4619      	mov	r1, r3
 8006850:	f7fa f9ca 	bl	8000be8 <__aeabi_d2f>
 8006854:	4602      	mov	r2, r0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	659a      	str	r2, [r3, #88]	; 0x58
	leg_move_update->yL = (leg_move_update->yL2+leg_move_update->yL1)/2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800686a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800686e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	e012      	b.n	800689c <leg_control+0x374>
 8006876:	bf00      	nop
 8006878:	47ae147b 	.word	0x47ae147b
 800687c:	3fb47ae1 	.word	0x3fb47ae1
 8006880:	9999999a 	.word	0x9999999a
 8006884:	3fa99999 	.word	0x3fa99999
 8006888:	00000000 	.word	0x00000000
 800688c:	40000000 	.word	0x40000000
 8006890:	eb1c432d 	.word	0xeb1c432d
 8006894:	3f9a36e2 	.word	0x3f9a36e2
 8006898:	20001850 	.word	0x20001850
 800689c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	leg_move_update->y  = (leg_move_update->yR +leg_move_update->yL)/2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80068ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80068b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	// acc of Z-axis
	leg_move_update->z_accel = imu_data.accel_data.az;
 80068be:	4be0      	ldr	r3, [pc, #896]	; (8006c40 <leg_control+0x718>)
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	66da      	str	r2, [r3, #108]	; 0x6c

	//末端执行力系数
	leg_move_update->vyR1 =0.011 -(l1-l2*cos(leg_move_update->joint_motor[0].angle))*l2*sin(leg_move_update->joint_motor[0].angle)/sqrt(pow(l3,2)-pow(l1-l2*cos(leg_move_update->joint_motor[0].angle),2))-l2*cos(leg_move_update->joint_motor[0].angle);// 0 3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7f9 fe3c 	bl	8000548 <__aeabi_f2d>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	ec43 2b10 	vmov	d0, r2, r3
 80068d8:	f019 fc2a 	bl	8020130 <cos>
 80068dc:	ec51 0b10 	vmov	r0, r1, d0
 80068e0:	a3cd      	add	r3, pc, #820	; (adr r3, 8006c18 <leg_control+0x6f0>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fe87 	bl	80005f8 <__aeabi_dmul>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	a1cc      	add	r1, pc, #816	; (adr r1, 8006c20 <leg_control+0x6f8>)
 80068f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068f4:	f7f9 fcc8 	bl	8000288 <__aeabi_dsub>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	a3c5      	add	r3, pc, #788	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4614      	mov	r4, r2
 8006910:	461d      	mov	r5, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	4618      	mov	r0, r3
 8006918:	f7f9 fe16 	bl	8000548 <__aeabi_f2d>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	ec43 2b10 	vmov	d0, r2, r3
 8006924:	f019 fce4 	bl	80202f0 <sin>
 8006928:	ec53 2b10 	vmov	r2, r3, d0
 800692c:	4620      	mov	r0, r4
 800692e:	4629      	mov	r1, r5
 8006930:	f7f9 fe62 	bl	80005f8 <__aeabi_dmul>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4614      	mov	r4, r2
 800693a:	461d      	mov	r5, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4618      	mov	r0, r3
 8006942:	f7f9 fe01 	bl	8000548 <__aeabi_f2d>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	ec43 2b10 	vmov	d0, r2, r3
 800694e:	f019 fbef 	bl	8020130 <cos>
 8006952:	ec51 0b10 	vmov	r0, r1, d0
 8006956:	a3b0      	add	r3, pc, #704	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f7f9 fe4c 	bl	80005f8 <__aeabi_dmul>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	a1ae      	add	r1, pc, #696	; (adr r1, 8006c20 <leg_control+0x6f8>)
 8006966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800696a:	f7f9 fc8d 	bl	8000288 <__aeabi_dsub>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	ec43 2b17 	vmov	d7, r2, r3
 8006976:	ed9f 1bac 	vldr	d1, [pc, #688]	; 8006c28 <leg_control+0x700>
 800697a:	eeb0 0a47 	vmov.f32	s0, s14
 800697e:	eef0 0a67 	vmov.f32	s1, s15
 8006982:	f019 fd43 	bl	802040c <pow>
 8006986:	ec53 2b10 	vmov	r2, r3, d0
 800698a:	a1a9      	add	r1, pc, #676	; (adr r1, 8006c30 <leg_control+0x708>)
 800698c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006990:	f7f9 fc7a 	bl	8000288 <__aeabi_dsub>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	ec43 2b17 	vmov	d7, r2, r3
 800699c:	eeb0 0a47 	vmov.f32	s0, s14
 80069a0:	eef0 0a67 	vmov.f32	s1, s15
 80069a4:	f019 fda2 	bl	80204ec <sqrt>
 80069a8:	ec53 2b10 	vmov	r2, r3, d0
 80069ac:	4620      	mov	r0, r4
 80069ae:	4629      	mov	r1, r5
 80069b0:	f7f9 ff4c 	bl	800084c <__aeabi_ddiv>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	a19f      	add	r1, pc, #636	; (adr r1, 8006c38 <leg_control+0x710>)
 80069ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069be:	f7f9 fc63 	bl	8000288 <__aeabi_dsub>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4614      	mov	r4, r2
 80069c8:	461d      	mov	r5, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7f9 fdba 	bl	8000548 <__aeabi_f2d>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	ec43 2b10 	vmov	d0, r2, r3
 80069dc:	f019 fba8 	bl	8020130 <cos>
 80069e0:	ec51 0b10 	vmov	r0, r1, d0
 80069e4:	a38c      	add	r3, pc, #560	; (adr r3, 8006c18 <leg_control+0x6f0>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4620      	mov	r0, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	f7f9 fc47 	bl	8000288 <__aeabi_dsub>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4610      	mov	r0, r2
 8006a00:	4619      	mov	r1, r3
 8006a02:	f7fa f8f1 	bl	8000be8 <__aeabi_d2f>
 8006a06:	4602      	mov	r2, r0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	leg_move_update->vyR2 = 0.011-(l1-l2*cos(-1*leg_move_update->joint_motor[1].angle))*l2*sin(-1*leg_move_update->joint_motor[1].angle)/sqrt(pow(l3,2)-pow(l1-l2*cos(-1*leg_move_update->joint_motor[1].angle),2))-l2*cos(-1*leg_move_update->joint_motor[1].angle);// 0 3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	edd3 7a06 	vldr	s15, [r3, #24]
 8006a14:	eef1 7a67 	vneg.f32	s15, s15
 8006a18:	ee17 3a90 	vmov	r3, s15
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7f9 fd93 	bl	8000548 <__aeabi_f2d>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	ec43 2b10 	vmov	d0, r2, r3
 8006a2a:	f019 fb81 	bl	8020130 <cos>
 8006a2e:	ec51 0b10 	vmov	r0, r1, d0
 8006a32:	a379      	add	r3, pc, #484	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fdde 	bl	80005f8 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	a177      	add	r1, pc, #476	; (adr r1, 8006c20 <leg_control+0x6f8>)
 8006a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a46:	f7f9 fc1f 	bl	8000288 <__aeabi_dsub>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	a371      	add	r3, pc, #452	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f7f9 fdce 	bl	80005f8 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7f9 fd6d 	bl	8000548 <__aeabi_f2d>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	ec43 2b10 	vmov	d0, r2, r3
 8006a76:	f019 fc3b 	bl	80202f0 <sin>
 8006a7a:	ec53 2b10 	vmov	r2, r3, d0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7f9 fdb9 	bl	80005f8 <__aeabi_dmul>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4614      	mov	r4, r2
 8006a8c:	461d      	mov	r5, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	edd3 7a06 	vldr	s15, [r3, #24]
 8006a94:	eef1 7a67 	vneg.f32	s15, s15
 8006a98:	ee17 3a90 	vmov	r3, s15
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7f9 fd53 	bl	8000548 <__aeabi_f2d>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	ec43 2b10 	vmov	d0, r2, r3
 8006aaa:	f019 fb41 	bl	8020130 <cos>
 8006aae:	ec51 0b10 	vmov	r0, r1, d0
 8006ab2:	a359      	add	r3, pc, #356	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	a157      	add	r1, pc, #348	; (adr r1, 8006c20 <leg_control+0x6f8>)
 8006ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac6:	f7f9 fbdf 	bl	8000288 <__aeabi_dsub>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	ec43 2b17 	vmov	d7, r2, r3
 8006ad2:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8006c28 <leg_control+0x700>
 8006ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8006ada:	eef0 0a67 	vmov.f32	s1, s15
 8006ade:	f019 fc95 	bl	802040c <pow>
 8006ae2:	ec53 2b10 	vmov	r2, r3, d0
 8006ae6:	a152      	add	r1, pc, #328	; (adr r1, 8006c30 <leg_control+0x708>)
 8006ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aec:	f7f9 fbcc 	bl	8000288 <__aeabi_dsub>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	ec43 2b17 	vmov	d7, r2, r3
 8006af8:	eeb0 0a47 	vmov.f32	s0, s14
 8006afc:	eef0 0a67 	vmov.f32	s1, s15
 8006b00:	f019 fcf4 	bl	80204ec <sqrt>
 8006b04:	ec53 2b10 	vmov	r2, r3, d0
 8006b08:	4620      	mov	r0, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	f7f9 fe9e 	bl	800084c <__aeabi_ddiv>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	a347      	add	r3, pc, #284	; (adr r3, 8006c38 <leg_control+0x710>)
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	f7f9 fbb5 	bl	800028c <__adddf3>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4614      	mov	r4, r2
 8006b28:	461d      	mov	r5, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006b30:	eef1 7a67 	vneg.f32	s15, s15
 8006b34:	ee17 3a90 	vmov	r3, s15
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7f9 fd05 	bl	8000548 <__aeabi_f2d>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	ec43 2b10 	vmov	d0, r2, r3
 8006b46:	f019 faf3 	bl	8020130 <cos>
 8006b4a:	ec51 0b10 	vmov	r0, r1, d0
 8006b4e:	a332      	add	r3, pc, #200	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 fb92 	bl	8000288 <__aeabi_dsub>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f7fa f83c 	bl	8000be8 <__aeabi_d2f>
 8006b70:	4602      	mov	r2, r0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	leg_move_update ->vyR = (leg_move_update->vyR1-leg_move_update->vyR2)/2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8006b84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	leg_move_update->vyL2 = 0.011-(l1-l2*cos(leg_move_update->joint_motor[2].angle))*l2*sin(leg_move_update->joint_motor[2].angle)/sqrt(pow(l3,2)-pow(l1-l2*cos(leg_move_update->joint_motor[2].angle),2))-l2*cos(leg_move_update->joint_motor[2].angle);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7f9 fcd4 	bl	8000548 <__aeabi_f2d>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	ec43 2b10 	vmov	d0, r2, r3
 8006ba8:	f019 fac2 	bl	8020130 <cos>
 8006bac:	ec51 0b10 	vmov	r0, r1, d0
 8006bb0:	a319      	add	r3, pc, #100	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f7f9 fd1f 	bl	80005f8 <__aeabi_dmul>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	a118      	add	r1, pc, #96	; (adr r1, 8006c20 <leg_control+0x6f8>)
 8006bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc4:	f7f9 fb60 	bl	8000288 <__aeabi_dsub>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	a311      	add	r3, pc, #68	; (adr r3, 8006c18 <leg_control+0x6f0>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fd0f 	bl	80005f8 <__aeabi_dmul>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4614      	mov	r4, r2
 8006be0:	461d      	mov	r5, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7f9 fcae 	bl	8000548 <__aeabi_f2d>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	ec43 2b10 	vmov	d0, r2, r3
 8006bf4:	f019 fb7c 	bl	80202f0 <sin>
 8006bf8:	ec53 2b10 	vmov	r2, r3, d0
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f7f9 fcfa 	bl	80005f8 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4614      	mov	r4, r2
 8006c0a:	461d      	mov	r5, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	4618      	mov	r0, r3
 8006c12:	e017      	b.n	8006c44 <leg_control+0x71c>
 8006c14:	f3af 8000 	nop.w
 8006c18:	47ae147b 	.word	0x47ae147b
 8006c1c:	3fb47ae1 	.word	0x3fb47ae1
 8006c20:	9999999a 	.word	0x9999999a
 8006c24:	3fa99999 	.word	0x3fa99999
 8006c28:	00000000 	.word	0x00000000
 8006c2c:	40000000 	.word	0x40000000
 8006c30:	eb1c432d 	.word	0xeb1c432d
 8006c34:	3f9a36e2 	.word	0x3f9a36e2
 8006c38:	020c49ba 	.word	0x020c49ba
 8006c3c:	3f86872b 	.word	0x3f86872b
 8006c40:	20000354 	.word	0x20000354
 8006c44:	f7f9 fc80 	bl	8000548 <__aeabi_f2d>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	ec43 2b10 	vmov	d0, r2, r3
 8006c50:	f019 fa6e 	bl	8020130 <cos>
 8006c54:	ec51 0b10 	vmov	r0, r1, d0
 8006c58:	a3ce      	add	r3, pc, #824	; (adr r3, 8006f94 <leg_control+0xa6c>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fccb 	bl	80005f8 <__aeabi_dmul>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	a1cd      	add	r1, pc, #820	; (adr r1, 8006f9c <leg_control+0xa74>)
 8006c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c6c:	f7f9 fb0c 	bl	8000288 <__aeabi_dsub>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	ec43 2b17 	vmov	d7, r2, r3
 8006c78:	ed9f 1bc1 	vldr	d1, [pc, #772]	; 8006f80 <leg_control+0xa58>
 8006c7c:	eeb0 0a47 	vmov.f32	s0, s14
 8006c80:	eef0 0a67 	vmov.f32	s1, s15
 8006c84:	f019 fbc2 	bl	802040c <pow>
 8006c88:	ec53 2b10 	vmov	r2, r3, d0
 8006c8c:	a1c5      	add	r1, pc, #788	; (adr r1, 8006fa4 <leg_control+0xa7c>)
 8006c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c92:	f7f9 faf9 	bl	8000288 <__aeabi_dsub>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	ec43 2b17 	vmov	d7, r2, r3
 8006c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8006ca2:	eef0 0a67 	vmov.f32	s1, s15
 8006ca6:	f019 fc21 	bl	80204ec <sqrt>
 8006caa:	ec53 2b10 	vmov	r2, r3, d0
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f7f9 fdcb 	bl	800084c <__aeabi_ddiv>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	a1bc      	add	r1, pc, #752	; (adr r1, 8006fac <leg_control+0xa84>)
 8006cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cc0:	f7f9 fae2 	bl	8000288 <__aeabi_dsub>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	461d      	mov	r5, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7f9 fc39 	bl	8000548 <__aeabi_f2d>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	ec43 2b10 	vmov	d0, r2, r3
 8006cde:	f019 fa27 	bl	8020130 <cos>
 8006ce2:	ec51 0b10 	vmov	r0, r1, d0
 8006ce6:	a3ab      	add	r3, pc, #684	; (adr r3, 8006f94 <leg_control+0xa6c>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fc84 	bl	80005f8 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	f7f9 fac6 	bl	8000288 <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	f7f9 ff70 	bl	8000be8 <__aeabi_d2f>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	679a      	str	r2, [r3, #120]	; 0x78
	leg_move_update->vyL1 = 0.011-(l1-l2*cos(-1*leg_move_update->joint_motor[3].angle))*l2*sin(-1*leg_move_update->joint_motor[3].angle)/sqrt(pow(l3,2)-pow(l1-l2*cos(-1*leg_move_update->joint_motor[3].angle),2))-l2*cos(-1*leg_move_update->joint_motor[3].angle);	leg_move_update ->vyL = (abs(leg_move_update->vyL1)+leg_move_update->vyL2)/2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006d14:	eef1 7a67 	vneg.f32	s15, s15
 8006d18:	ee17 3a90 	vmov	r3, s15
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7f9 fc13 	bl	8000548 <__aeabi_f2d>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	ec43 2b10 	vmov	d0, r2, r3
 8006d2a:	f019 fa01 	bl	8020130 <cos>
 8006d2e:	ec51 0b10 	vmov	r0, r1, d0
 8006d32:	a398      	add	r3, pc, #608	; (adr r3, 8006f94 <leg_control+0xa6c>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fc5e 	bl	80005f8 <__aeabi_dmul>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	a196      	add	r1, pc, #600	; (adr r1, 8006f9c <leg_control+0xa74>)
 8006d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d46:	f7f9 fa9f 	bl	8000288 <__aeabi_dsub>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	a390      	add	r3, pc, #576	; (adr r3, 8006f94 <leg_control+0xa6c>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fc4e 	bl	80005f8 <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4614      	mov	r4, r2
 8006d62:	461d      	mov	r5, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7f9 fbed 	bl	8000548 <__aeabi_f2d>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	ec43 2b10 	vmov	d0, r2, r3
 8006d76:	f019 fabb 	bl	80202f0 <sin>
 8006d7a:	ec53 2b10 	vmov	r2, r3, d0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4614      	mov	r4, r2
 8006d8c:	461d      	mov	r5, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006d94:	eef1 7a67 	vneg.f32	s15, s15
 8006d98:	ee17 3a90 	vmov	r3, s15
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7f9 fbd3 	bl	8000548 <__aeabi_f2d>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	ec43 2b10 	vmov	d0, r2, r3
 8006daa:	f019 f9c1 	bl	8020130 <cos>
 8006dae:	ec51 0b10 	vmov	r0, r1, d0
 8006db2:	a378      	add	r3, pc, #480	; (adr r3, 8006f94 <leg_control+0xa6c>)
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f7f9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	a176      	add	r1, pc, #472	; (adr r1, 8006f9c <leg_control+0xa74>)
 8006dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dc6:	f7f9 fa5f 	bl	8000288 <__aeabi_dsub>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	ec43 2b17 	vmov	d7, r2, r3
 8006dd2:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8006f80 <leg_control+0xa58>
 8006dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8006dda:	eef0 0a67 	vmov.f32	s1, s15
 8006dde:	f019 fb15 	bl	802040c <pow>
 8006de2:	ec53 2b10 	vmov	r2, r3, d0
 8006de6:	a16f      	add	r1, pc, #444	; (adr r1, 8006fa4 <leg_control+0xa7c>)
 8006de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dec:	f7f9 fa4c 	bl	8000288 <__aeabi_dsub>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	ec43 2b17 	vmov	d7, r2, r3
 8006df8:	eeb0 0a47 	vmov.f32	s0, s14
 8006dfc:	eef0 0a67 	vmov.f32	s1, s15
 8006e00:	f019 fb74 	bl	80204ec <sqrt>
 8006e04:	ec53 2b10 	vmov	r2, r3, d0
 8006e08:	4620      	mov	r0, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f7f9 fd1e 	bl	800084c <__aeabi_ddiv>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	a364      	add	r3, pc, #400	; (adr r3, 8006fac <leg_control+0xa84>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 fa35 	bl	800028c <__adddf3>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4614      	mov	r4, r2
 8006e28:	461d      	mov	r5, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006e30:	eef1 7a67 	vneg.f32	s15, s15
 8006e34:	ee17 3a90 	vmov	r3, s15
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7f9 fb85 	bl	8000548 <__aeabi_f2d>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	ec43 2b10 	vmov	d0, r2, r3
 8006e46:	f019 f973 	bl	8020130 <cos>
 8006e4a:	ec51 0b10 	vmov	r0, r1, d0
 8006e4e:	a351      	add	r3, pc, #324	; (adr r3, 8006f94 <leg_control+0xa6c>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fbd0 	bl	80005f8 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 fa12 	bl	8000288 <__aeabi_dsub>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f7f9 febc 	bl	8000be8 <__aeabi_d2f>
 8006e70:	4602      	mov	r2, r0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	675a      	str	r2, [r3, #116]	; 0x74
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8006e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e80:	ee17 3a90 	vmov	r3, s15
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bfb8      	it	lt
 8006e88:	425b      	neglt	r3, r3
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8006e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	leg_move_update->vyL = (-leg_move_update->vyL1+leg_move_update->vyL2)/2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8006eb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006eba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	//	Z-axis speed
	leg_move_update->vy  =  leg_move_update->vy + 0;//leg_move_update->y_accel * JOINTMOTOR_CONTROL_TIME_S;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8006ece:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006f88 <leg_control+0xa60>
 8006ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	//chassis euler angle
	leg_move_update->chassis_yaw = imu_heading.yaw;
 8006edc:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <leg_control+0xa64>)
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	leg_move_update->chassis_pitch=imu_heading.pit;
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <leg_control+0xa64>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	leg_move_update->chassis_roll = imu_heading.rol;
 8006ef0:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <leg_control+0xa64>)
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4




	// chassis angle speed
	leg_move_update->chassis_yaw_speed = (leg_move_update->chassis_yaw-leg_move_update->chassis_yaw_prev)/dt;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8006f06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f0a:	4b21      	ldr	r3, [pc, #132]	; (8006f90 <leg_control+0xa68>)
 8006f0c:	ed93 7a00 	vldr	s14, [r3]
 8006f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	leg_move_update->chassis_pitch_speed =(leg_move_update->chassis_pitch-leg_move_update->chassis_pitch_prev)/dt;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8006f26:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f2a:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <leg_control+0xa68>)
 8006f2c:	ed93 7a00 	vldr	s14, [r3]
 8006f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	leg_move_update->chassis_roll_speed = (leg_move_update->chassis_roll-leg_move_update->chassis_roll_prev)/dt;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8006f46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <leg_control+0xa68>)
 8006f4c:	ed93 7a00 	vldr	s14, [r3]
 8006f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

	leg_move_update->chassis_yaw_prev = imu_heading.yaw;
 8006f5a:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <leg_control+0xa64>)
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	leg_move_update ->chassis_pitch_prev =imu_heading.pit;
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <leg_control+0xa64>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	leg_move_update->chassis_roll_prev = imu_heading.rol;
 8006f6e:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <leg_control+0xa64>)
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0



}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f80:	00000000 	.word	0x00000000
 8006f84:	40000000 	.word	0x40000000
 8006f88:	00000000 	.word	0x00000000
 8006f8c:	20003224 	.word	0x20003224
 8006f90:	2000000c 	.word	0x2000000c
 8006f94:	47ae147b 	.word	0x47ae147b
 8006f98:	3fb47ae1 	.word	0x3fb47ae1
 8006f9c:	9999999a 	.word	0x9999999a
 8006fa0:	3fa99999 	.word	0x3fa99999
 8006fa4:	eb1c432d 	.word	0xeb1c432d
 8006fa8:	3f9a36e2 	.word	0x3f9a36e2
 8006fac:	020c49ba 	.word	0x020c49ba
 8006fb0:	3f86872b 	.word	0x3f86872b

08006fb4 <joint_motor_send_can>:
void joint_motor_send_can(leg_move_t *leg_move,uint8_t id_one,uint8_t id_two,uint8_t id_three,uint8_t id_four) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08e      	sub	sp, #56	; 0x38
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	70fb      	strb	r3, [r7, #3]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70bb      	strb	r3, [r7, #2]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 8006fda:	2308      	movs	r3, #8
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	2b18      	cmp	r3, #24
 8006fe2:	d80b      	bhi.n	8006ffc <joint_motor_send_can+0x48>
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d008      	beq.n	8006ffc <joint_motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	2201      	movs	r2, #1
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 8006ffc:	78bb      	ldrb	r3, [r7, #2]
 8006ffe:	2b18      	cmp	r3, #24
 8007000:	d80b      	bhi.n	800701a <joint_motor_send_can+0x66>
 8007002:	78bb      	ldrb	r3, [r7, #2]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <joint_motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 8007008:	78bb      	ldrb	r3, [r7, #2]
 800700a:	3b01      	subs	r3, #1
 800700c:	2201      	movs	r2, #1
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	461a      	mov	r2, r3
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	4313      	orrs	r3, r2
 8007018:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 800701a:	787b      	ldrb	r3, [r7, #1]
 800701c:	2b18      	cmp	r3, #24
 800701e:	d80b      	bhi.n	8007038 <joint_motor_send_can+0x84>
 8007020:	787b      	ldrb	r3, [r7, #1]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d008      	beq.n	8007038 <joint_motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 8007026:	787b      	ldrb	r3, [r7, #1]
 8007028:	3b01      	subs	r3, #1
 800702a:	2201      	movs	r2, #1
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	461a      	mov	r2, r3
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	4313      	orrs	r3, r2
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 8007038:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800703c:	2b18      	cmp	r3, #24
 800703e:	d80d      	bhi.n	800705c <joint_motor_send_can+0xa8>
 8007040:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <joint_motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 8007048:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800704c:	3b01      	subs	r3, #1
 800704e:	2201      	movs	r2, #1
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	461a      	mov	r2, r3
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007058:	4313      	orrs	r3, r2
 800705a:	637b      	str	r3, [r7, #52]	; 0x34
	}


	if (temp_checker & 0x0000F0) {
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d04f      	beq.n	8007106 <joint_motor_send_can+0x152>
		CAN_tx_message.StdId = 0x1FF;
 8007066:	f240 13ff 	movw	r3, #511	; 0x1ff
 800706a:	61bb      	str	r3, [r7, #24]
		temp_converter = leg_move->joint_motor[0].torque_set;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007076:	ee17 3a90 	vmov	r3, s15
 800707a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800707c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8007080:	121b      	asrs	r3, r3, #8
 8007082:	b21b      	sxth	r3, r3
 8007084:	b2db      	uxtb	r3, r3
 8007086:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8007088:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800708a:	b2db      	uxtb	r3, r3
 800708c:	747b      	strb	r3, [r7, #17]
		temp_converter = leg_move->joint_motor[1].torque_set;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	edd3 7a07 	vldr	s15, [r3, #28]
 8007094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007098:	ee17 3a90 	vmov	r3, s15
 800709c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800709e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80070a2:	121b      	asrs	r3, r3, #8
 80070a4:	b21b      	sxth	r3, r3
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 80070aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	74fb      	strb	r3, [r7, #19]
		temp_converter = leg_move->joint_motor[2].torque_set;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80070b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ba:	ee17 3a90 	vmov	r3, s15
 80070be:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 80070c0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80070c4:	121b      	asrs	r3, r3, #8
 80070c6:	b21b      	sxth	r3, r3
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 80070cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	757b      	strb	r3, [r7, #21]
		temp_converter = leg_move->joint_motor[3].torque_set;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80070d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070dc:	ee17 3a90 	vmov	r3, s15
 80070e0:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 80070e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80070e6:	121b      	asrs	r3, r3, #8
 80070e8:	b21b      	sxth	r3, r3
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 80070ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 80070f4:	f107 030c 	add.w	r3, r7, #12
 80070f8:	f107 0210 	add.w	r2, r7, #16
 80070fc:	f107 0118 	add.w	r1, r7, #24
 8007100:	4803      	ldr	r0, [pc, #12]	; (8007110 <joint_motor_send_can+0x15c>)
 8007102:	f004 fef7 	bl	800bef4 <HAL_CAN_AddTxMessage>
	}
}
 8007106:	bf00      	nop
 8007108:	3738      	adds	r7, #56	; 0x38
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	200003f4 	.word	0x200003f4
 8007114:	00000000 	.word	0x00000000

08007118 <jointmotor_control_loop>:
}


void jointmotor_control_loop(leg_move_t *leg_move_control_loop)

{
 8007118:	b5b0      	push	{r4, r5, r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	leg_move_control_loop->y_set = 0.2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4ae1      	ldr	r2, [pc, #900]	; (80074a8 <jointmotor_control_loop+0x390>)
 8007124:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	//计算y方向和ROLL方向设定值与反馈值的偏差
	leg_move_control_loop->delta_yL1 = leg_move_control_loop->y_set - leg_move_control_loop->yL1;//leg_move_control_loop->y_set
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	leg_move_control_loop->delta_yL2 = leg_move_control_loop->y_set - leg_move_control_loop->yL2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800714a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	leg_move_control_loop->delta_yR1 = leg_move_control_loop->y_set - leg_move_control_loop->yR1;//leg_move_control_loop->y_set
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8007160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	leg_move_control_loop->delta_yR2 = leg_move_control_loop->y_set - leg_move_control_loop->yR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8007176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

	leg_move_control_loop->delta_roll = leg_move_control_loop->roll_set - leg_move_control_loop->chassis_roll;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 800718c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	//计算左腿和右腿的末端执行力
	leg_move_control_loop->FL1 = (KP_Y * leg_move_control_loop->delta_yL1 - KD_Y * leg_move_control_loop->vyL1 + G)/2 + (KP_ROLL * leg_move_control_loop->delta_roll - KD_ROLL * leg_move_control_loop->chassis_roll_speed)/D;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800719c:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80074ac <jointmotor_control_loop+0x394>
 80071a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80071aa:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80074b0 <jointmotor_control_loop+0x398>
 80071ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071b6:	ee17 0a90 	vmov	r0, s15
 80071ba:	f7f9 f9c5 	bl	8000548 <__aeabi_f2d>
 80071be:	a3b6      	add	r3, pc, #728	; (adr r3, 8007498 <jointmotor_control_loop+0x380>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 f862 	bl	800028c <__adddf3>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4610      	mov	r0, r2
 80071ce:	4619      	mov	r1, r3
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071d8:	f7f9 fb38 	bl	800084c <__aeabi_ddiv>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	461d      	mov	r5, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80071ea:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80074b4 <jointmotor_control_loop+0x39c>
 80071ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80071f8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80071fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007204:	ee17 0a90 	vmov	r0, s15
 8007208:	f7f9 f99e 	bl	8000548 <__aeabi_f2d>
 800720c:	a3a4      	add	r3, pc, #656	; (adr r3, 80074a0 <jointmotor_control_loop+0x388>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 fb1b 	bl	800084c <__aeabi_ddiv>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f835 	bl	800028c <__adddf3>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	f7f9 fcdd 	bl	8000be8 <__aeabi_d2f>
 800722e:	4602      	mov	r2, r0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	leg_move_control_loop->FL2 = (KP_Y * leg_move_control_loop->delta_yL2 - KD_Y * leg_move_control_loop->vyL2 + G)/2 + (KP_ROLL * leg_move_control_loop->delta_roll - KD_ROLL * leg_move_control_loop->chassis_roll_speed)/D;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800723c:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80074ac <jointmotor_control_loop+0x394>
 8007240:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800724a:	eddf 6a99 	vldr	s13, [pc, #612]	; 80074b0 <jointmotor_control_loop+0x398>
 800724e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007256:	ee17 0a90 	vmov	r0, s15
 800725a:	f7f9 f975 	bl	8000548 <__aeabi_f2d>
 800725e:	a38e      	add	r3, pc, #568	; (adr r3, 8007498 <jointmotor_control_loop+0x380>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 f812 	bl	800028c <__adddf3>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007278:	f7f9 fae8 	bl	800084c <__aeabi_ddiv>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4614      	mov	r4, r2
 8007282:	461d      	mov	r5, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800728a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80074b4 <jointmotor_control_loop+0x39c>
 800728e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007298:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800729c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072a4:	ee17 0a90 	vmov	r0, s15
 80072a8:	f7f9 f94e 	bl	8000548 <__aeabi_f2d>
 80072ac:	a37c      	add	r3, pc, #496	; (adr r3, 80074a0 <jointmotor_control_loop+0x388>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	f7f9 facb 	bl	800084c <__aeabi_ddiv>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4620      	mov	r0, r4
 80072bc:	4629      	mov	r1, r5
 80072be:	f7f8 ffe5 	bl	800028c <__adddf3>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4610      	mov	r0, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	f7f9 fc8d 	bl	8000be8 <__aeabi_d2f>
 80072ce:	4602      	mov	r2, r0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	leg_move_control_loop->FR1 = (KP_Y * leg_move_control_loop->delta_yR1 - KD_Y * leg_move_control_loop->vyR1 + G)/2 - (KP_ROLL * leg_move_control_loop->delta_roll - KD_ROLL * leg_move_control_loop->chassis_roll_speed)/D;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80072dc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80074ac <jointmotor_control_loop+0x394>
 80072e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80072ea:	eddf 6a71 	vldr	s13, [pc, #452]	; 80074b0 <jointmotor_control_loop+0x398>
 80072ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072f6:	ee17 0a90 	vmov	r0, s15
 80072fa:	f7f9 f925 	bl	8000548 <__aeabi_f2d>
 80072fe:	a366      	add	r3, pc, #408	; (adr r3, 8007498 <jointmotor_control_loop+0x380>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f7f8 ffc2 	bl	800028c <__adddf3>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4610      	mov	r0, r2
 800730e:	4619      	mov	r1, r3
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007318:	f7f9 fa98 	bl	800084c <__aeabi_ddiv>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4614      	mov	r4, r2
 8007322:	461d      	mov	r5, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800732a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80074b4 <jointmotor_control_loop+0x39c>
 800732e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8007338:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800733c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007344:	ee17 0a90 	vmov	r0, s15
 8007348:	f7f9 f8fe 	bl	8000548 <__aeabi_f2d>
 800734c:	a354      	add	r3, pc, #336	; (adr r3, 80074a0 <jointmotor_control_loop+0x388>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f9 fa7b 	bl	800084c <__aeabi_ddiv>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f8 ff93 	bl	8000288 <__aeabi_dsub>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4610      	mov	r0, r2
 8007368:	4619      	mov	r1, r3
 800736a:	f7f9 fc3d 	bl	8000be8 <__aeabi_d2f>
 800736e:	4602      	mov	r2, r0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	leg_move_control_loop->FR2 = (KP_Y * leg_move_control_loop->delta_yR2 - KD_Y * leg_move_control_loop->vyR2 + G)/2 - (KP_ROLL * leg_move_control_loop->delta_roll - KD_ROLL * leg_move_control_loop->chassis_roll_speed)/D;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800737c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80074ac <jointmotor_control_loop+0x394>
 8007380:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800738a:	eddf 6a49 	vldr	s13, [pc, #292]	; 80074b0 <jointmotor_control_loop+0x398>
 800738e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007396:	ee17 0a90 	vmov	r0, s15
 800739a:	f7f9 f8d5 	bl	8000548 <__aeabi_f2d>
 800739e:	a33e      	add	r3, pc, #248	; (adr r3, 8007498 <jointmotor_control_loop+0x380>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 ff72 	bl	800028c <__adddf3>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4610      	mov	r0, r2
 80073ae:	4619      	mov	r1, r3
 80073b0:	f04f 0200 	mov.w	r2, #0
 80073b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073b8:	f7f9 fa48 	bl	800084c <__aeabi_ddiv>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	461d      	mov	r5, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80073ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80074b4 <jointmotor_control_loop+0x39c>
 80073ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80073d8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80073dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073e4:	ee17 0a90 	vmov	r0, s15
 80073e8:	f7f9 f8ae 	bl	8000548 <__aeabi_f2d>
 80073ec:	a32c      	add	r3, pc, #176	; (adr r3, 80074a0 <jointmotor_control_loop+0x388>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f9 fa2b 	bl	800084c <__aeabi_ddiv>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4620      	mov	r0, r4
 80073fc:	4629      	mov	r1, r5
 80073fe:	f7f8 ff43 	bl	8000288 <__aeabi_dsub>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4610      	mov	r0, r2
 8007408:	4619      	mov	r1, r3
 800740a:	f7f9 fbed 	bl	8000be8 <__aeabi_d2f>
 800740e:	4602      	mov	r2, r0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	//计算每个关节电机的控制力矩
	leg_move_control_loop->joint_motor[0].torque_set = calculate_torque(0.5*leg_move_control_loop->FR1*leg_move_control_loop->vyR1); //R1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800741c:	4618      	mov	r0, r3
 800741e:	f7f9 f893 	bl	8000548 <__aeabi_f2d>
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <jointmotor_control_loop+0x3a0>)
 8007428:	f7f9 f8e6 	bl	80005f8 <__aeabi_dmul>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4614      	mov	r4, r2
 8007432:	461d      	mov	r5, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800743a:	4618      	mov	r0, r3
 800743c:	f7f9 f884 	bl	8000548 <__aeabi_f2d>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 f8d6 	bl	80005f8 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4610      	mov	r0, r2
 8007452:	4619      	mov	r1, r3
 8007454:	f7f9 fbc8 	bl	8000be8 <__aeabi_d2f>
 8007458:	4603      	mov	r3, r0
 800745a:	ee00 3a10 	vmov	s0, r3
 800745e:	f7ff f80b 	bl	8006478 <calculate_torque>
 8007462:	eef0 7a40 	vmov.f32	s15, s0
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	edc3 7a02 	vstr	s15, [r3, #8]
	leg_move_control_loop->joint_motor[1].torque_set = calculate_torque(-0.5*leg_move_control_loop->FR2*leg_move_control_loop->vyR2);//R2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007472:	4618      	mov	r0, r3
 8007474:	f7f9 f868 	bl	8000548 <__aeabi_f2d>
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <jointmotor_control_loop+0x3a4>)
 800747e:	f7f9 f8bb 	bl	80005f8 <__aeabi_dmul>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4614      	mov	r4, r2
 8007488:	461d      	mov	r5, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007490:	e016      	b.n	80074c0 <jointmotor_control_loop+0x3a8>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	66666666 	.word	0x66666666
 800749c:	404d6666 	.word	0x404d6666
 80074a0:	66666666 	.word	0x66666666
 80074a4:	3fd66666 	.word	0x3fd66666
 80074a8:	3e4ccccd 	.word	0x3e4ccccd
 80074ac:	447a0000 	.word	0x447a0000
 80074b0:	43c80000 	.word	0x43c80000
 80074b4:	42200000 	.word	0x42200000
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	bfe00000 	.word	0xbfe00000
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7f9 f841 	bl	8000548 <__aeabi_f2d>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4620      	mov	r0, r4
 80074cc:	4629      	mov	r1, r5
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	f7f9 fb85 	bl	8000be8 <__aeabi_d2f>
 80074de:	4603      	mov	r3, r0
 80074e0:	ee00 3a10 	vmov	s0, r3
 80074e4:	f7fe ffc8 	bl	8006478 <calculate_torque>
 80074e8:	eef0 7a40 	vmov.f32	s15, s0
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	edc3 7a07 	vstr	s15, [r3, #28]
	leg_move_control_loop->joint_motor[2].torque_set = calculate_torque(0.5*leg_move_control_loop->FL2*leg_move_control_loop->vyL2);//L1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7f9 f825 	bl	8000548 <__aeabi_f2d>
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	4b32      	ldr	r3, [pc, #200]	; (80075cc <jointmotor_control_loop+0x4b4>)
 8007504:	f7f9 f878 	bl	80005f8 <__aeabi_dmul>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4614      	mov	r4, r2
 800750e:	461d      	mov	r5, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007514:	4618      	mov	r0, r3
 8007516:	f7f9 f817 	bl	8000548 <__aeabi_f2d>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4620      	mov	r0, r4
 8007520:	4629      	mov	r1, r5
 8007522:	f7f9 f869 	bl	80005f8 <__aeabi_dmul>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4610      	mov	r0, r2
 800752c:	4619      	mov	r1, r3
 800752e:	f7f9 fb5b 	bl	8000be8 <__aeabi_d2f>
 8007532:	4603      	mov	r3, r0
 8007534:	ee00 3a10 	vmov	s0, r3
 8007538:	f7fe ff9e 	bl	8006478 <calculate_torque>
 800753c:	eef0 7a40 	vmov.f32	s15, s0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	leg_move_control_loop->joint_motor[3].torque_set = calculate_torque(-0.5*leg_move_control_loop->FL1*leg_move_control_loop->vyL1);//L2
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800754c:	4618      	mov	r0, r3
 800754e:	f7f8 fffb 	bl	8000548 <__aeabi_f2d>
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <jointmotor_control_loop+0x4b8>)
 8007558:	f7f9 f84e 	bl	80005f8 <__aeabi_dmul>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4614      	mov	r4, r2
 8007562:	461d      	mov	r5, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007568:	4618      	mov	r0, r3
 800756a:	f7f8 ffed 	bl	8000548 <__aeabi_f2d>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4620      	mov	r0, r4
 8007574:	4629      	mov	r1, r5
 8007576:	f7f9 f83f 	bl	80005f8 <__aeabi_dmul>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4610      	mov	r0, r2
 8007580:	4619      	mov	r1, r3
 8007582:	f7f9 fb31 	bl	8000be8 <__aeabi_d2f>
 8007586:	4603      	mov	r3, r0
 8007588:	ee00 3a10 	vmov	s0, r3
 800758c:	f7fe ff74 	bl	8006478 <calculate_torque>
 8007590:	eef0 7a40 	vmov.f32	s15, s0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//	leg_move_control_loop->joint_motor[0].id = can_motors[4].id;
//	leg_move_control_loop->joint_motor[1].id = can_motors[5].id;
//	leg_move_control_loop->joint_motor[2].id = can_motors[6].id;
//	leg_move_control_loop->joint_motor[3].id = can_motors[7].id;
	leg_move_control_loop->joint_motor[0].raw_angle = can_motors[4].raw_data.angle[0];
 800759a:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <jointmotor_control_loop+0x4bc>)
 800759c:	f9b3 23c4 	ldrsh.w	r2, [r3, #964]	; 0x3c4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	805a      	strh	r2, [r3, #2]
	leg_move_control_loop->joint_motor[1].raw_angle = can_motors[5].raw_data.angle[0];
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <jointmotor_control_loop+0x4bc>)
 80075a6:	f9b3 24b4 	ldrsh.w	r2, [r3, #1204]	; 0x4b4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	82da      	strh	r2, [r3, #22]
	leg_move_control_loop->joint_motor[2].raw_angle = can_motors[6].raw_data.angle[0];
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <jointmotor_control_loop+0x4bc>)
 80075b0:	f9b3 25a4 	ldrsh.w	r2, [r3, #1444]	; 0x5a4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	855a      	strh	r2, [r3, #42]	; 0x2a
	leg_move_control_loop->joint_motor[3].raw_angle = can_motors[7].raw_data.angle[0];
 80075b8:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <jointmotor_control_loop+0x4bc>)
 80075ba:	f9b3 2694 	ldrsh.w	r2, [r3, #1684]	; 0x694
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	87da      	strh	r2, [r3, #62]	; 0x3e

}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bdb0      	pop	{r4, r5, r7, pc}
 80075ca:	bf00      	nop
 80075cc:	3fe00000 	.word	0x3fe00000
 80075d0:	bfe00000 	.word	0xbfe00000
 80075d4:	20001850 	.word	0x20001850

080075d8 <hud_task>:
ref_inter_robot_data_t graphic_header;
graphic_data_struct_t graphic_data;
ref_frame_header_t send_header;
uint8_t char_buffer[30];

void hud_task(void *argument) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

	enum drawings {
		spinspin, gearing, robot_state, motor_fault, refresh

	};
	while (ref_robot_data.robot_id == 0) {
 80075e0:	e002      	b.n	80075e8 <hud_task+0x10>
		vTaskDelay(10);
 80075e2:	200a      	movs	r0, #10
 80075e4:	f011 fa7e 	bl	8018ae4 <vTaskDelay>
	while (ref_robot_data.robot_id == 0) {
 80075e8:	4b69      	ldr	r3, [pc, #420]	; (8007790 <hud_task+0x1b8>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0f8      	beq.n	80075e2 <hud_task+0xa>
	}
	uint32_t refresh_timer = HAL_GetTick();
 80075f0:	f003 ffce 	bl	800b590 <HAL_GetTick>
 80075f4:	60f8      	str	r0, [r7, #12]

	uint8_t draw_state = spinspin;
 80075f6:	2300      	movs	r3, #0
 80075f8:	72fb      	strb	r3, [r7, #11]
	//draw all images
	vTaskDelay(1000);
 80075fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075fe:	f011 fa71 	bl	8018ae4 <vTaskDelay>
	clear_hud();
 8007602:	f000 fb29 	bl	8007c58 <clear_hud>
	vTaskDelay(150);
 8007606:	2096      	movs	r0, #150	; 0x96
 8007608:	f011 fa6c 	bl	8018ae4 <vTaskDelay>
	draw_spinspin(0);
 800760c:	2000      	movs	r0, #0
 800760e:	f000 f8c3 	bl	8007798 <draw_spinspin>
	vTaskDelay(150);
 8007612:	2096      	movs	r0, #150	; 0x96
 8007614:	f011 fa66 	bl	8018ae4 <vTaskDelay>
	draw_gearing(0);
 8007618:	2000      	movs	r0, #0
 800761a:	f000 f9f5 	bl	8007a08 <draw_gearing>
	vTaskDelay(150);
 800761e:	2096      	movs	r0, #150	; 0x96
 8007620:	f011 fa60 	bl	8018ae4 <vTaskDelay>
	while (1) {
		if (HAL_GetTick() - refresh_timer > 5000){
 8007624:	f003 ffb4 	bl	800b590 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007632:	4293      	cmp	r3, r2
 8007634:	d904      	bls.n	8007640 <hud_task+0x68>
			draw_state = refresh;
 8007636:	2304      	movs	r3, #4
 8007638:	72fb      	strb	r3, [r7, #11]
			refresh_timer = HAL_GetTick();
 800763a:	f003 ffa9 	bl	800b590 <HAL_GetTick>
 800763e:	60f8      	str	r0, [r7, #12]
		}
		switch (ref_robot_data.robot_id) {
 8007640:	4b53      	ldr	r3, [pc, #332]	; (8007790 <hud_task+0x1b8>)
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b06      	cmp	r3, #6
 8007646:	dc27      	bgt.n	8007698 <hud_task+0xc0>
 8007648:	2b00      	cmp	r3, #0
 800764a:	dc13      	bgt.n	8007674 <hud_task+0x9c>
 800764c:	e065      	b.n	800771a <hud_task+0x142>
 800764e:	3b65      	subs	r3, #101	; 0x65
 8007650:	2b05      	cmp	r3, #5
 8007652:	d862      	bhi.n	800771a <hud_task+0x142>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <hud_task+0x84>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	080076df 	.word	0x080076df
 8007660:	080076e9 	.word	0x080076e9
 8007664:	080076f3 	.word	0x080076f3
 8007668:	080076fd 	.word	0x080076fd
 800766c:	08007707 	.word	0x08007707
 8007670:	08007711 	.word	0x08007711
 8007674:	3b01      	subs	r3, #1
 8007676:	2b05      	cmp	r3, #5
 8007678:	d84f      	bhi.n	800771a <hud_task+0x142>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <hud_task+0xa8>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	080076a3 	.word	0x080076a3
 8007684:	080076ad 	.word	0x080076ad
 8007688:	080076b7 	.word	0x080076b7
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076cb 	.word	0x080076cb
 8007694:	080076d5 	.word	0x080076d5
 8007698:	2b6a      	cmp	r3, #106	; 0x6a
 800769a:	dc3e      	bgt.n	800771a <hud_task+0x142>
 800769c:	2b65      	cmp	r3, #101	; 0x65
 800769e:	dad6      	bge.n	800764e <hud_task+0x76>
 80076a0:	e03b      	b.n	800771a <hud_task+0x142>
		case 1:
			g_client_id = 0x101;
 80076a2:	4b3c      	ldr	r3, [pc, #240]	; (8007794 <hud_task+0x1bc>)
 80076a4:	f240 1201 	movw	r2, #257	; 0x101
 80076a8:	801a      	strh	r2, [r3, #0]
			break;
 80076aa:	e03a      	b.n	8007722 <hud_task+0x14a>
		case 2:
			g_client_id = 0x102;
 80076ac:	4b39      	ldr	r3, [pc, #228]	; (8007794 <hud_task+0x1bc>)
 80076ae:	f44f 7281 	mov.w	r2, #258	; 0x102
 80076b2:	801a      	strh	r2, [r3, #0]
			break;
 80076b4:	e035      	b.n	8007722 <hud_task+0x14a>
		case 3:
			g_client_id = 0x103;
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <hud_task+0x1bc>)
 80076b8:	f240 1203 	movw	r2, #259	; 0x103
 80076bc:	801a      	strh	r2, [r3, #0]
			break;
 80076be:	e030      	b.n	8007722 <hud_task+0x14a>
		case 4:
			g_client_id = 0x104;
 80076c0:	4b34      	ldr	r3, [pc, #208]	; (8007794 <hud_task+0x1bc>)
 80076c2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80076c6:	801a      	strh	r2, [r3, #0]
			break;
 80076c8:	e02b      	b.n	8007722 <hud_task+0x14a>
		case 5:
			g_client_id = 0x105;
 80076ca:	4b32      	ldr	r3, [pc, #200]	; (8007794 <hud_task+0x1bc>)
 80076cc:	f240 1205 	movw	r2, #261	; 0x105
 80076d0:	801a      	strh	r2, [r3, #0]
			break;
 80076d2:	e026      	b.n	8007722 <hud_task+0x14a>
		case 6:
			g_client_id = 0x106;
 80076d4:	4b2f      	ldr	r3, [pc, #188]	; (8007794 <hud_task+0x1bc>)
 80076d6:	f44f 7283 	mov.w	r2, #262	; 0x106
 80076da:	801a      	strh	r2, [r3, #0]
			break;
 80076dc:	e021      	b.n	8007722 <hud_task+0x14a>

		case 101:
			g_client_id = 0x165;
 80076de:	4b2d      	ldr	r3, [pc, #180]	; (8007794 <hud_task+0x1bc>)
 80076e0:	f240 1265 	movw	r2, #357	; 0x165
 80076e4:	801a      	strh	r2, [r3, #0]
			break;
 80076e6:	e01c      	b.n	8007722 <hud_task+0x14a>
		case 102:
			g_client_id = 0x166;
 80076e8:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <hud_task+0x1bc>)
 80076ea:	f44f 72b3 	mov.w	r2, #358	; 0x166
 80076ee:	801a      	strh	r2, [r3, #0]
			break;
 80076f0:	e017      	b.n	8007722 <hud_task+0x14a>
		case 103:
			g_client_id = 0x167;
 80076f2:	4b28      	ldr	r3, [pc, #160]	; (8007794 <hud_task+0x1bc>)
 80076f4:	f240 1267 	movw	r2, #359	; 0x167
 80076f8:	801a      	strh	r2, [r3, #0]
			break;
 80076fa:	e012      	b.n	8007722 <hud_task+0x14a>
		case 104:
			g_client_id = 0x168;
 80076fc:	4b25      	ldr	r3, [pc, #148]	; (8007794 <hud_task+0x1bc>)
 80076fe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007702:	801a      	strh	r2, [r3, #0]
			break;
 8007704:	e00d      	b.n	8007722 <hud_task+0x14a>
		case 105:
			g_client_id = 0x169;
 8007706:	4b23      	ldr	r3, [pc, #140]	; (8007794 <hud_task+0x1bc>)
 8007708:	f240 1269 	movw	r2, #361	; 0x169
 800770c:	801a      	strh	r2, [r3, #0]
			break;
 800770e:	e008      	b.n	8007722 <hud_task+0x14a>
		case 106:
			g_client_id = 0x16A;
 8007710:	4b20      	ldr	r3, [pc, #128]	; (8007794 <hud_task+0x1bc>)
 8007712:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007716:	801a      	strh	r2, [r3, #0]
			break;
 8007718:	e003      	b.n	8007722 <hud_task+0x14a>
		default:
			g_client_id = 0;
 800771a:	4b1e      	ldr	r3, [pc, #120]	; (8007794 <hud_task+0x1bc>)
 800771c:	2200      	movs	r2, #0
 800771e:	801a      	strh	r2, [r3, #0]
			break;
 8007720:	bf00      	nop

		}



		switch (draw_state) {
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	2b04      	cmp	r3, #4
 8007726:	d82d      	bhi.n	8007784 <hud_task+0x1ac>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <hud_task+0x158>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007745 	.word	0x08007745
 8007734:	08007751 	.word	0x08007751
 8007738:	08007785 	.word	0x08007785
 800773c:	08007785 	.word	0x08007785
 8007740:	0800775d 	.word	0x0800775d
		case spinspin:
			draw_spinspin(1);
 8007744:	2001      	movs	r0, #1
 8007746:	f000 f827 	bl	8007798 <draw_spinspin>
			draw_state = gearing;
 800774a:	2301      	movs	r3, #1
 800774c:	72fb      	strb	r3, [r7, #11]
			break;
 800774e:	e01a      	b.n	8007786 <hud_task+0x1ae>
		case gearing:
			draw_gearing(1);
 8007750:	2001      	movs	r0, #1
 8007752:	f000 f959 	bl	8007a08 <draw_gearing>
			draw_state = spinspin;
 8007756:	2300      	movs	r3, #0
 8007758:	72fb      	strb	r3, [r7, #11]
			break;
 800775a:	e014      	b.n	8007786 <hud_task+0x1ae>
		case robot_state:
			break;
		case motor_fault:
			break;
		case refresh:
			clear_hud();
 800775c:	f000 fa7c 	bl	8007c58 <clear_hud>
			vTaskDelay(150);
 8007760:	2096      	movs	r0, #150	; 0x96
 8007762:	f011 f9bf 	bl	8018ae4 <vTaskDelay>
			draw_spinspin(0);
 8007766:	2000      	movs	r0, #0
 8007768:	f000 f816 	bl	8007798 <draw_spinspin>
			vTaskDelay(150);
 800776c:	2096      	movs	r0, #150	; 0x96
 800776e:	f011 f9b9 	bl	8018ae4 <vTaskDelay>
			draw_gearing(0);
 8007772:	2000      	movs	r0, #0
 8007774:	f000 f948 	bl	8007a08 <draw_gearing>
			vTaskDelay(150);
 8007778:	2096      	movs	r0, #150	; 0x96
 800777a:	f011 f9b3 	bl	8018ae4 <vTaskDelay>
			draw_state = spinspin;
 800777e:	2300      	movs	r3, #0
 8007780:	72fb      	strb	r3, [r7, #11]
			break;
 8007782:	e000      	b.n	8007786 <hud_task+0x1ae>
		default:
			break;
 8007784:	bf00      	nop
		}
		vTaskDelay(150);
 8007786:	2096      	movs	r0, #150	; 0x96
 8007788:	f011 f9ac 	bl	8018ae4 <vTaskDelay>
		if (HAL_GetTick() - refresh_timer > 5000){
 800778c:	e74a      	b.n	8007624 <hud_task+0x4c>
 800778e:	bf00      	nop
 8007790:	20003324 	.word	0x20003324
 8007794:	200030a4 	.word	0x200030a4

08007798 <draw_spinspin>:
	}
}

void draw_spinspin(uint8_t modify) {
 8007798:	b590      	push	{r4, r7, lr}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
	uint8_t char_len = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
	curr_pos = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]
	if (g_spinspin_mode == 0) {
 80077ae:	4b8a      	ldr	r3, [pc, #552]	; (80079d8 <draw_spinspin+0x240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10d      	bne.n	80077d2 <draw_spinspin+0x3a>
		graphic_data.color = 4; //orange
 80077b6:	4a89      	ldr	r2, [pc, #548]	; (80079dc <draw_spinspin+0x244>)
 80077b8:	7913      	ldrb	r3, [r2, #4]
 80077ba:	2104      	movs	r1, #4
 80077bc:	f361 0385 	bfi	r3, r1, #2, #4
 80077c0:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN OFF");
 80077c2:	4a87      	ldr	r2, [pc, #540]	; (80079e0 <draw_spinspin+0x248>)
 80077c4:	211e      	movs	r1, #30
 80077c6:	4887      	ldr	r0, [pc, #540]	; (80079e4 <draw_spinspin+0x24c>)
 80077c8:	f014 fe92 	bl	801c4f0 <sniprintf>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	e00c      	b.n	80077ec <draw_spinspin+0x54>
	} else {
		graphic_data.color = 3; //orange
 80077d2:	4a82      	ldr	r2, [pc, #520]	; (80079dc <draw_spinspin+0x244>)
 80077d4:	7913      	ldrb	r3, [r2, #4]
 80077d6:	2103      	movs	r1, #3
 80077d8:	f361 0385 	bfi	r3, r1, #2, #4
 80077dc:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN ON");
 80077de:	4a82      	ldr	r2, [pc, #520]	; (80079e8 <draw_spinspin+0x250>)
 80077e0:	211e      	movs	r1, #30
 80077e2:	4880      	ldr	r0, [pc, #512]	; (80079e4 <draw_spinspin+0x24c>)
 80077e4:	f014 fe84 	bl	801c4f0 <sniprintf>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]
	}
	send_header.start_frame = 0xA5;
 80077ec:	4b7f      	ldr	r3, [pc, #508]	; (80079ec <draw_spinspin+0x254>)
 80077ee:	22a5      	movs	r2, #165	; 0xa5
 80077f0:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 80077f2:	4b7e      	ldr	r3, [pc, #504]	; (80079ec <draw_spinspin+0x254>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	715a      	strb	r2, [r3, #5]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f042 0203 	orr.w	r2, r2, #3
 8007802:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8007804:	4b7a      	ldr	r3, [pc, #488]	; (80079f0 <draw_spinspin+0x258>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	b2d1      	uxtb	r1, r2
 800780c:	4a78      	ldr	r2, [pc, #480]	; (80079f0 <draw_spinspin+0x258>)
 800780e:	7011      	strb	r1, [r2, #0]
 8007810:	4a76      	ldr	r2, [pc, #472]	; (80079ec <draw_spinspin+0x254>)
 8007812:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	b29b      	uxth	r3, r3
 8007818:	3315      	adds	r3, #21
 800781a:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 800781c:	4b73      	ldr	r3, [pc, #460]	; (80079ec <draw_spinspin+0x254>)
 800781e:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8007822:	4b73      	ldr	r3, [pc, #460]	; (80079f0 <draw_spinspin+0x258>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	b2d1      	uxtb	r1, r2
 800782a:	4a71      	ldr	r2, [pc, #452]	; (80079f0 <draw_spinspin+0x258>)
 800782c:	7011      	strb	r1, [r2, #0]
 800782e:	4a6f      	ldr	r2, [pc, #444]	; (80079ec <draw_spinspin+0x254>)
 8007830:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	4a6f      	ldr	r2, [pc, #444]	; (80079f4 <draw_spinspin+0x25c>)
 8007836:	4413      	add	r3, r2
 8007838:	4a6c      	ldr	r2, [pc, #432]	; (80079ec <draw_spinspin+0x254>)
 800783a:	6810      	ldr	r0, [r2, #0]
 800783c:	6018      	str	r0, [r3, #0]
 800783e:	8891      	ldrh	r1, [r2, #4]
 8007840:	7992      	ldrb	r2, [r2, #6]
 8007842:	8099      	strh	r1, [r3, #4]
 8007844:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	3307      	adds	r3, #7
 800784a:	60bb      	str	r3, [r7, #8]
	append_CRC8_check_sum(tx_buffer, 5);
 800784c:	2105      	movs	r1, #5
 800784e:	4869      	ldr	r0, [pc, #420]	; (80079f4 <draw_spinspin+0x25c>)
 8007850:	f7f9 fc1b 	bl	800108a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 8007854:	4b68      	ldr	r3, [pc, #416]	; (80079f8 <draw_spinspin+0x260>)
 8007856:	f44f 7288 	mov.w	r2, #272	; 0x110
 800785a:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 800785c:	4b67      	ldr	r3, [pc, #412]	; (80079fc <draw_spinspin+0x264>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	b29a      	uxth	r2, r3
 8007862:	4b65      	ldr	r3, [pc, #404]	; (80079f8 <draw_spinspin+0x260>)
 8007864:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 8007866:	4b66      	ldr	r3, [pc, #408]	; (8007a00 <draw_spinspin+0x268>)
 8007868:	881a      	ldrh	r2, [r3, #0]
 800786a:	4b63      	ldr	r3, [pc, #396]	; (80079f8 <draw_spinspin+0x260>)
 800786c:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a60      	ldr	r2, [pc, #384]	; (80079f4 <draw_spinspin+0x25c>)
 8007872:	4413      	add	r3, r2
 8007874:	4a60      	ldr	r2, [pc, #384]	; (80079f8 <draw_spinspin+0x260>)
 8007876:	6810      	ldr	r0, [r2, #0]
 8007878:	6018      	str	r0, [r3, #0]
 800787a:	8892      	ldrh	r2, [r2, #4]
 800787c:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	3306      	adds	r3, #6
 8007882:	60bb      	str	r3, [r7, #8]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 8007884:	4b55      	ldr	r3, [pc, #340]	; (80079dc <draw_spinspin+0x244>)
 8007886:	2200      	movs	r2, #0
 8007888:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 800788a:	4b54      	ldr	r3, [pc, #336]	; (80079dc <draw_spinspin+0x244>)
 800788c:	2200      	movs	r2, #0
 800788e:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 1;
 8007890:	4b52      	ldr	r3, [pc, #328]	; (80079dc <draw_spinspin+0x244>)
 8007892:	2201      	movs	r2, #1
 8007894:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 8007896:	4b51      	ldr	r3, [pc, #324]	; (80079dc <draw_spinspin+0x244>)
 8007898:	78da      	ldrb	r2, [r3, #3]
 800789a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800789e:	70da      	strb	r2, [r3, #3]
 80078a0:	791a      	ldrb	r2, [r3, #4]
 80078a2:	f022 0203 	bic.w	r2, r2, #3
 80078a6:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d106      	bne.n	80078bc <draw_spinspin+0x124>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 80078ae:	4a4b      	ldr	r2, [pc, #300]	; (80079dc <draw_spinspin+0x244>)
 80078b0:	78d3      	ldrb	r3, [r2, #3]
 80078b2:	2102      	movs	r1, #2
 80078b4:	f361 0302 	bfi	r3, r1, #0, #3
 80078b8:	70d3      	strb	r3, [r2, #3]
 80078ba:	e005      	b.n	80078c8 <draw_spinspin+0x130>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 80078bc:	4a47      	ldr	r2, [pc, #284]	; (80079dc <draw_spinspin+0x244>)
 80078be:	78d3      	ldrb	r3, [r2, #3]
 80078c0:	2101      	movs	r1, #1
 80078c2:	f361 0302 	bfi	r3, r1, #0, #3
 80078c6:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 80078c8:	4a44      	ldr	r2, [pc, #272]	; (80079dc <draw_spinspin+0x244>)
 80078ca:	78d3      	ldrb	r3, [r2, #3]
 80078cc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80078d0:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 80078d2:	4b42      	ldr	r3, [pc, #264]	; (80079dc <draw_spinspin+0x244>)
 80078d4:	791a      	ldrb	r2, [r3, #4]
 80078d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80078da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078de:	711a      	strb	r2, [r3, #4]
 80078e0:	795a      	ldrb	r2, [r3, #5]
 80078e2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80078e6:	f042 0207 	orr.w	r2, r2, #7
 80078ea:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	4b39      	ldr	r3, [pc, #228]	; (80079dc <draw_spinspin+0x244>)
 80078f6:	f002 0101 	and.w	r1, r2, #1
 80078fa:	01cc      	lsls	r4, r1, #7
 80078fc:	7959      	ldrb	r1, [r3, #5]
 80078fe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007902:	4608      	mov	r0, r1
 8007904:	4621      	mov	r1, r4
 8007906:	4301      	orrs	r1, r0
 8007908:	7159      	strb	r1, [r3, #5]
 800790a:	0852      	lsrs	r2, r2, #1
 800790c:	b292      	uxth	r2, r2
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	2100      	movs	r1, #0
 8007912:	430a      	orrs	r2, r1
 8007914:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 8007916:	4b31      	ldr	r3, [pc, #196]	; (80079dc <draw_spinspin+0x244>)
 8007918:	2200      	movs	r2, #0
 800791a:	f042 0207 	orr.w	r2, r2, #7
 800791e:	71da      	strb	r2, [r3, #7]
 8007920:	7a1a      	ldrb	r2, [r3, #8]
 8007922:	f022 0203 	bic.w	r2, r2, #3
 8007926:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8007928:	4b2c      	ldr	r3, [pc, #176]	; (80079dc <draw_spinspin+0x244>)
 800792a:	78da      	ldrb	r2, [r3, #3]
 800792c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007930:	70da      	strb	r2, [r3, #3]
 8007932:	791a      	ldrb	r2, [r3, #4]
 8007934:	f022 0203 	bic.w	r2, r2, #3
 8007938:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 800793a:	4b28      	ldr	r3, [pc, #160]	; (80079dc <draw_spinspin+0x244>)
 800793c:	7a1a      	ldrb	r2, [r3, #8]
 800793e:	f002 0203 	and.w	r2, r2, #3
 8007942:	f062 0237 	orn	r2, r2, #55	; 0x37
 8007946:	721a      	strb	r2, [r3, #8]
 8007948:	7a5a      	ldrb	r2, [r3, #9]
 800794a:	f022 021f 	bic.w	r2, r2, #31
 800794e:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 600;
 8007950:	4b22      	ldr	r3, [pc, #136]	; (80079dc <draw_spinspin+0x244>)
 8007952:	7a5a      	ldrb	r2, [r3, #9]
 8007954:	f002 021f 	and.w	r2, r2, #31
 8007958:	725a      	strb	r2, [r3, #9]
 800795a:	2200      	movs	r2, #0
 800795c:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 8007960:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4a23      	ldr	r2, [pc, #140]	; (80079f4 <draw_spinspin+0x25c>)
 8007966:	4413      	add	r3, r2
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <draw_spinspin+0x244>)
 800796a:	461c      	mov	r4, r3
 800796c:	4613      	mov	r3, r2
 800796e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007970:	6020      	str	r0, [r4, #0]
 8007972:	6061      	str	r1, [r4, #4]
 8007974:	60a2      	str	r2, [r4, #8]
 8007976:	881a      	ldrh	r2, [r3, #0]
 8007978:	789b      	ldrb	r3, [r3, #2]
 800797a:	81a2      	strh	r2, [r4, #12]
 800797c:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	330f      	adds	r3, #15
 8007982:	60bb      	str	r3, [r7, #8]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <draw_spinspin+0x25c>)
 8007988:	4413      	add	r3, r2
 800798a:	7bfa      	ldrb	r2, [r7, #15]
 800798c:	4915      	ldr	r1, [pc, #84]	; (80079e4 <draw_spinspin+0x24c>)
 800798e:	4618      	mov	r0, r3
 8007990:	f013 fe09 	bl	801b5a6 <memcpy>
	curr_pos += char_len;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	3302      	adds	r3, #2
 80079a0:	4619      	mov	r1, r3
 80079a2:	4814      	ldr	r0, [pc, #80]	; (80079f4 <draw_spinspin+0x25c>)
 80079a4:	f7f9 fbf4 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 80079a8:	e002      	b.n	80079b0 <draw_spinspin+0x218>
		vTaskDelay(1);
 80079aa:	2001      	movs	r0, #1
 80079ac:	f011 f89a 	bl	8018ae4 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 80079b0:	4b14      	ldr	r3, [pc, #80]	; (8007a04 <draw_spinspin+0x26c>)
 80079b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d1f6      	bne.n	80079aa <draw_spinspin+0x212>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3302      	adds	r3, #2
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	490b      	ldr	r1, [pc, #44]	; (80079f4 <draw_spinspin+0x25c>)
 80079c8:	480e      	ldr	r0, [pc, #56]	; (8007a04 <draw_spinspin+0x26c>)
 80079ca:	f00b f913 	bl	8012bf4 <HAL_UART_Transmit_DMA>
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd90      	pop	{r4, r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20002f3c 	.word	0x20002f3c
 80079dc:	200031b0 	.word	0x200031b0
 80079e0:	080227c8 	.word	0x080227c8
 80079e4:	200031c8 	.word	0x200031c8
 80079e8:	080227d4 	.word	0x080227d4
 80079ec:	200031c0 	.word	0x200031c0
 80079f0:	2000338c 	.word	0x2000338c
 80079f4:	200030a8 	.word	0x200030a8
 80079f8:	200031a8 	.word	0x200031a8
 80079fc:	20003324 	.word	0x20003324
 8007a00:	200030a4 	.word	0x200030a4
 8007a04:	2000168c 	.word	0x2000168c

08007a08 <draw_gearing>:

void draw_gearing(uint8_t modify) {
 8007a08:	b590      	push	{r4, r7, lr}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
	graphic_data.color = 6; //CYAN
 8007a1e:	4a83      	ldr	r2, [pc, #524]	; (8007c2c <draw_gearing+0x224>)
 8007a20:	7913      	ldrb	r3, [r2, #4]
 8007a22:	2106      	movs	r1, #6
 8007a24:	f361 0385 	bfi	r3, r1, #2, #4
 8007a28:	7113      	strb	r3, [r2, #4]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 8007a2a:	4b81      	ldr	r3, [pc, #516]	; (8007c30 <draw_gearing+0x228>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	4a81      	ldr	r2, [pc, #516]	; (8007c34 <draw_gearing+0x22c>)
 8007a30:	211e      	movs	r1, #30
 8007a32:	4881      	ldr	r0, [pc, #516]	; (8007c38 <draw_gearing+0x230>)
 8007a34:	f014 fd5c 	bl	801c4f0 <sniprintf>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	72fb      	strb	r3, [r7, #11]
	send_header.start_frame = 0xA5;
 8007a3c:	4b7f      	ldr	r3, [pc, #508]	; (8007c3c <draw_gearing+0x234>)
 8007a3e:	22a5      	movs	r2, #165	; 0xa5
 8007a40:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8007a42:	4b7e      	ldr	r3, [pc, #504]	; (8007c3c <draw_gearing+0x234>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	715a      	strb	r2, [r3, #5]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f042 0203 	orr.w	r2, r2, #3
 8007a52:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8007a54:	4b7a      	ldr	r3, [pc, #488]	; (8007c40 <draw_gearing+0x238>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	b2d1      	uxtb	r1, r2
 8007a5c:	4a78      	ldr	r2, [pc, #480]	; (8007c40 <draw_gearing+0x238>)
 8007a5e:	7011      	strb	r1, [r2, #0]
 8007a60:	4a76      	ldr	r2, [pc, #472]	; (8007c3c <draw_gearing+0x234>)
 8007a62:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3315      	adds	r3, #21
 8007a6a:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 8007a6c:	4b73      	ldr	r3, [pc, #460]	; (8007c3c <draw_gearing+0x234>)
 8007a6e:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8007a72:	4b73      	ldr	r3, [pc, #460]	; (8007c40 <draw_gearing+0x238>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	b2d1      	uxtb	r1, r2
 8007a7a:	4a71      	ldr	r2, [pc, #452]	; (8007c40 <draw_gearing+0x238>)
 8007a7c:	7011      	strb	r1, [r2, #0]
 8007a7e:	4a6f      	ldr	r2, [pc, #444]	; (8007c3c <draw_gearing+0x234>)
 8007a80:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a6f      	ldr	r2, [pc, #444]	; (8007c44 <draw_gearing+0x23c>)
 8007a86:	4413      	add	r3, r2
 8007a88:	4a6c      	ldr	r2, [pc, #432]	; (8007c3c <draw_gearing+0x234>)
 8007a8a:	6810      	ldr	r0, [r2, #0]
 8007a8c:	6018      	str	r0, [r3, #0]
 8007a8e:	8891      	ldrh	r1, [r2, #4]
 8007a90:	7992      	ldrb	r2, [r2, #6]
 8007a92:	8099      	strh	r1, [r3, #4]
 8007a94:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3307      	adds	r3, #7
 8007a9a:	60fb      	str	r3, [r7, #12]
	append_CRC8_check_sum(tx_buffer, 5);
 8007a9c:	2105      	movs	r1, #5
 8007a9e:	4869      	ldr	r0, [pc, #420]	; (8007c44 <draw_gearing+0x23c>)
 8007aa0:	f7f9 faf3 	bl	800108a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 8007aa4:	4b68      	ldr	r3, [pc, #416]	; (8007c48 <draw_gearing+0x240>)
 8007aa6:	f44f 7288 	mov.w	r2, #272	; 0x110
 8007aaa:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 8007aac:	4b67      	ldr	r3, [pc, #412]	; (8007c4c <draw_gearing+0x244>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	4b65      	ldr	r3, [pc, #404]	; (8007c48 <draw_gearing+0x240>)
 8007ab4:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 8007ab6:	4b66      	ldr	r3, [pc, #408]	; (8007c50 <draw_gearing+0x248>)
 8007ab8:	881a      	ldrh	r2, [r3, #0]
 8007aba:	4b63      	ldr	r3, [pc, #396]	; (8007c48 <draw_gearing+0x240>)
 8007abc:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a60      	ldr	r2, [pc, #384]	; (8007c44 <draw_gearing+0x23c>)
 8007ac2:	4413      	add	r3, r2
 8007ac4:	4a60      	ldr	r2, [pc, #384]	; (8007c48 <draw_gearing+0x240>)
 8007ac6:	6810      	ldr	r0, [r2, #0]
 8007ac8:	6018      	str	r0, [r3, #0]
 8007aca:	8892      	ldrh	r2, [r2, #4]
 8007acc:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3306      	adds	r3, #6
 8007ad2:	60fb      	str	r3, [r7, #12]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 8007ad4:	4b55      	ldr	r3, [pc, #340]	; (8007c2c <draw_gearing+0x224>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 8007ada:	4b54      	ldr	r3, [pc, #336]	; (8007c2c <draw_gearing+0x224>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 2;
 8007ae0:	4b52      	ldr	r3, [pc, #328]	; (8007c2c <draw_gearing+0x224>)
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 8007ae6:	4b51      	ldr	r3, [pc, #324]	; (8007c2c <draw_gearing+0x224>)
 8007ae8:	78da      	ldrb	r2, [r3, #3]
 8007aea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007aee:	70da      	strb	r2, [r3, #3]
 8007af0:	791a      	ldrb	r2, [r3, #4]
 8007af2:	f022 0203 	bic.w	r2, r2, #3
 8007af6:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d106      	bne.n	8007b0c <draw_gearing+0x104>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007afe:	4a4b      	ldr	r2, [pc, #300]	; (8007c2c <draw_gearing+0x224>)
 8007b00:	78d3      	ldrb	r3, [r2, #3]
 8007b02:	2102      	movs	r1, #2
 8007b04:	f361 0302 	bfi	r3, r1, #0, #3
 8007b08:	70d3      	strb	r3, [r2, #3]
 8007b0a:	e005      	b.n	8007b18 <draw_gearing+0x110>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007b0c:	4a47      	ldr	r2, [pc, #284]	; (8007c2c <draw_gearing+0x224>)
 8007b0e:	78d3      	ldrb	r3, [r2, #3]
 8007b10:	2101      	movs	r1, #1
 8007b12:	f361 0302 	bfi	r3, r1, #0, #3
 8007b16:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8007b18:	4a44      	ldr	r2, [pc, #272]	; (8007c2c <draw_gearing+0x224>)
 8007b1a:	78d3      	ldrb	r3, [r2, #3]
 8007b1c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8007b20:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8007b22:	4b42      	ldr	r3, [pc, #264]	; (8007c2c <draw_gearing+0x224>)
 8007b24:	791a      	ldrb	r2, [r3, #4]
 8007b26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b2e:	711a      	strb	r2, [r3, #4]
 8007b30:	795a      	ldrb	r2, [r3, #5]
 8007b32:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007b36:	f042 0207 	orr.w	r2, r2, #7
 8007b3a:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <draw_gearing+0x224>)
 8007b46:	f002 0101 	and.w	r1, r2, #1
 8007b4a:	01cc      	lsls	r4, r1, #7
 8007b4c:	7959      	ldrb	r1, [r3, #5]
 8007b4e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007b52:	4608      	mov	r0, r1
 8007b54:	4621      	mov	r1, r4
 8007b56:	4301      	orrs	r1, r0
 8007b58:	7159      	strb	r1, [r3, #5]
 8007b5a:	0852      	lsrs	r2, r2, #1
 8007b5c:	b292      	uxth	r2, r2
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	2100      	movs	r1, #0
 8007b62:	430a      	orrs	r2, r1
 8007b64:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 8007b66:	4b31      	ldr	r3, [pc, #196]	; (8007c2c <draw_gearing+0x224>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f042 0207 	orr.w	r2, r2, #7
 8007b6e:	71da      	strb	r2, [r3, #7]
 8007b70:	7a1a      	ldrb	r2, [r3, #8]
 8007b72:	f022 0203 	bic.w	r2, r2, #3
 8007b76:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8007b78:	4b2c      	ldr	r3, [pc, #176]	; (8007c2c <draw_gearing+0x224>)
 8007b7a:	78da      	ldrb	r2, [r3, #3]
 8007b7c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007b80:	70da      	strb	r2, [r3, #3]
 8007b82:	791a      	ldrb	r2, [r3, #4]
 8007b84:	f022 0203 	bic.w	r2, r2, #3
 8007b88:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 8007b8a:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <draw_gearing+0x224>)
 8007b8c:	7a1a      	ldrb	r2, [r3, #8]
 8007b8e:	f002 0203 	and.w	r2, r2, #3
 8007b92:	f062 0237 	orn	r2, r2, #55	; 0x37
 8007b96:	721a      	strb	r2, [r3, #8]
 8007b98:	7a5a      	ldrb	r2, [r3, #9]
 8007b9a:	f022 021f 	bic.w	r2, r2, #31
 8007b9e:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 650;
 8007ba0:	4b22      	ldr	r3, [pc, #136]	; (8007c2c <draw_gearing+0x224>)
 8007ba2:	7a5a      	ldrb	r2, [r3, #9]
 8007ba4:	f002 021f 	and.w	r2, r2, #31
 8007ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bac:	725a      	strb	r2, [r3, #9]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8007bb4:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a22      	ldr	r2, [pc, #136]	; (8007c44 <draw_gearing+0x23c>)
 8007bba:	4413      	add	r3, r2
 8007bbc:	4a1b      	ldr	r2, [pc, #108]	; (8007c2c <draw_gearing+0x224>)
 8007bbe:	461c      	mov	r4, r3
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007bc4:	6020      	str	r0, [r4, #0]
 8007bc6:	6061      	str	r1, [r4, #4]
 8007bc8:	60a2      	str	r2, [r4, #8]
 8007bca:	881a      	ldrh	r2, [r3, #0]
 8007bcc:	789b      	ldrb	r3, [r3, #2]
 8007bce:	81a2      	strh	r2, [r4, #12]
 8007bd0:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	330f      	adds	r3, #15
 8007bd6:	60fb      	str	r3, [r7, #12]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4a1a      	ldr	r2, [pc, #104]	; (8007c44 <draw_gearing+0x23c>)
 8007bdc:	4413      	add	r3, r2
 8007bde:	7afa      	ldrb	r2, [r7, #11]
 8007be0:	4915      	ldr	r1, [pc, #84]	; (8007c38 <draw_gearing+0x230>)
 8007be2:	4618      	mov	r0, r3
 8007be4:	f013 fcdf 	bl	801b5a6 <memcpy>
	curr_pos += char_len;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4813      	ldr	r0, [pc, #76]	; (8007c44 <draw_gearing+0x23c>)
 8007bf8:	f7f9 faca 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007bfc:	e002      	b.n	8007c04 <draw_gearing+0x1fc>
		vTaskDelay(1);
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f010 ff70 	bl	8018ae4 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007c04:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <draw_gearing+0x24c>)
 8007c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d1f6      	bne.n	8007bfe <draw_gearing+0x1f6>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3302      	adds	r3, #2
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	490a      	ldr	r1, [pc, #40]	; (8007c44 <draw_gearing+0x23c>)
 8007c1c:	480d      	ldr	r0, [pc, #52]	; (8007c54 <draw_gearing+0x24c>)
 8007c1e:	f00a ffe9 	bl	8012bf4 <HAL_UART_Transmit_DMA>
}
 8007c22:	bf00      	nop
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd90      	pop	{r4, r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200031b0 	.word	0x200031b0
 8007c30:	20002f2c 	.word	0x20002f2c
 8007c34:	080227dc 	.word	0x080227dc
 8007c38:	200031c8 	.word	0x200031c8
 8007c3c:	200031c0 	.word	0x200031c0
 8007c40:	2000338c 	.word	0x2000338c
 8007c44:	200030a8 	.word	0x200030a8
 8007c48:	200031a8 	.word	0x200031a8
 8007c4c:	20003324 	.word	0x20003324
 8007c50:	200030a4 	.word	0x200030a4
 8007c54:	2000168c 	.word	0x2000168c

08007c58 <clear_hud>:


void clear_hud(){
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
	uint32_t curr_pos = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 8007c6a:	4b34      	ldr	r3, [pc, #208]	; (8007d3c <clear_hud+0xe4>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	4a34      	ldr	r2, [pc, #208]	; (8007d40 <clear_hud+0xe8>)
 8007c70:	211e      	movs	r1, #30
 8007c72:	4834      	ldr	r0, [pc, #208]	; (8007d44 <clear_hud+0xec>)
 8007c74:	f014 fc3c 	bl	801c4f0 <sniprintf>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	72fb      	strb	r3, [r7, #11]

	send_header.start_frame = 0xA5;
 8007c7c:	4b32      	ldr	r3, [pc, #200]	; (8007d48 <clear_hud+0xf0>)
 8007c7e:	22a5      	movs	r2, #165	; 0xa5
 8007c80:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8007c82:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <clear_hud+0xf0>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	715a      	strb	r2, [r3, #5]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f042 0203 	orr.w	r2, r2, #3
 8007c92:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8007c94:	4b2d      	ldr	r3, [pc, #180]	; (8007d4c <clear_hud+0xf4>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	b2d1      	uxtb	r1, r2
 8007c9c:	4a2b      	ldr	r2, [pc, #172]	; (8007d4c <clear_hud+0xf4>)
 8007c9e:	7011      	strb	r1, [r2, #0]
 8007ca0:	4a29      	ldr	r2, [pc, #164]	; (8007d48 <clear_hud+0xf0>)
 8007ca2:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_delete_graphic_t);
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <clear_hud+0xf0>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f042 0208 	orr.w	r2, r2, #8
 8007cac:	705a      	strb	r2, [r3, #1]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	709a      	strb	r2, [r3, #2]
	send_header.seq = g_ref_tx_seq++;
 8007cb2:	4b26      	ldr	r3, [pc, #152]	; (8007d4c <clear_hud+0xf4>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	b2d1      	uxtb	r1, r2
 8007cba:	4a24      	ldr	r2, [pc, #144]	; (8007d4c <clear_hud+0xf4>)
 8007cbc:	7011      	strb	r1, [r2, #0]
 8007cbe:	4a22      	ldr	r2, [pc, #136]	; (8007d48 <clear_hud+0xf0>)
 8007cc0:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4a22      	ldr	r2, [pc, #136]	; (8007d50 <clear_hud+0xf8>)
 8007cc6:	4413      	add	r3, r2
 8007cc8:	4a1f      	ldr	r2, [pc, #124]	; (8007d48 <clear_hud+0xf0>)
 8007cca:	6810      	ldr	r0, [r2, #0]
 8007ccc:	6018      	str	r0, [r3, #0]
 8007cce:	8891      	ldrh	r1, [r2, #4]
 8007cd0:	7992      	ldrb	r2, [r2, #6]
 8007cd2:	8099      	strh	r1, [r3, #4]
 8007cd4:	719a      	strb	r2, [r3, #6]
	ref_delete_graphic_t ref_delete;
	ref_delete.cmd_ID = 0x100;
 8007cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cda:	803b      	strh	r3, [r7, #0]
	ref_delete.graphic_layer = 9;
 8007cdc:	2309      	movs	r3, #9
 8007cde:	71fb      	strb	r3, [r7, #7]
	ref_delete.graphic_operation = 2;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	71bb      	strb	r3, [r7, #6]
	ref_delete.receiver_ID = g_client_id;
 8007ce4:	4b1b      	ldr	r3, [pc, #108]	; (8007d54 <clear_hud+0xfc>)
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	80bb      	strh	r3, [r7, #4]
	ref_delete.send_ID = ref_robot_data.robot_id;
 8007cea:	4b1b      	ldr	r3, [pc, #108]	; (8007d58 <clear_hud+0x100>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	807b      	strh	r3, [r7, #2]
	memcpy(tx_buffer + curr_pos, &ref_delete, sizeof(ref_delete_graphic_t));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <clear_hud+0xf8>)
 8007cf6:	4413      	add	r3, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	cb03      	ldmia	r3!, {r0, r1}
 8007cfe:	6010      	str	r0, [r2, #0]
 8007d00:	6051      	str	r1, [r2, #4]
	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3302      	adds	r3, #2
 8007d06:	4619      	mov	r1, r3
 8007d08:	4811      	ldr	r0, [pc, #68]	; (8007d50 <clear_hud+0xf8>)
 8007d0a:	f7f9 fa41 	bl	8001190 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007d0e:	e002      	b.n	8007d16 <clear_hud+0xbe>
		vTaskDelay(1);
 8007d10:	2001      	movs	r0, #1
 8007d12:	f010 fee7 	bl	8018ae4 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <clear_hud+0x104>)
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	d1f6      	bne.n	8007d10 <clear_hud+0xb8>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3302      	adds	r3, #2
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4908      	ldr	r1, [pc, #32]	; (8007d50 <clear_hud+0xf8>)
 8007d2e:	480b      	ldr	r0, [pc, #44]	; (8007d5c <clear_hud+0x104>)
 8007d30:	f00a ff60 	bl	8012bf4 <HAL_UART_Transmit_DMA>

}
 8007d34:	bf00      	nop
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20002f2c 	.word	0x20002f2c
 8007d40:	080227dc 	.word	0x080227dc
 8007d44:	200031c8 	.word	0x200031c8
 8007d48:	200031c0 	.word	0x200031c0
 8007d4c:	2000338c 	.word	0x2000338c
 8007d50:	200030a8 	.word	0x200030a8
 8007d54:	200030a4 	.word	0x200030a4
 8007d58:	20003324 	.word	0x20003324
 8007d5c:	2000168c 	.word	0x2000168c

08007d60 <imu_proc_task_notif>:
extern QueueHandle_t mag_data_queue;
extern TaskHandle_t imu_processing_task_handle;
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;

void imu_proc_task_notif() {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 8007d66:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <imu_proc_task_notif+0x3c>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8007d70:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <imu_proc_task_notif+0x40>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	1d3a      	adds	r2, r7, #4
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f011 fd0f 	bl	801979c <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <imu_proc_task_notif+0x34>
 8007d84:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <imu_proc_task_notif+0x44>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20003280 	.word	0x20003280
 8007da0:	20000464 	.word	0x20000464
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 8007da8:	b590      	push	{r4, r7, lr}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	463c      	mov	r4, r7
 8007db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gyro_proc_data.gx = gyro_data.gx;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	4a10      	ldr	r2, [pc, #64]	; (8007df8 <gyro_data_ready+0x50>)
 8007db8:	6013      	str	r3, [r2, #0]
	gyro_proc_data.gy = gyro_data.gy;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a0e      	ldr	r2, [pc, #56]	; (8007df8 <gyro_data_ready+0x50>)
 8007dbe:	6053      	str	r3, [r2, #4]
	gyro_proc_data.gz = gyro_data.gz;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4a0d      	ldr	r2, [pc, #52]	; (8007df8 <gyro_data_ready+0x50>)
 8007dc4:	6093      	str	r3, [r2, #8]
	if (IMU_ORIENTATION == 2) {		// swap gyro inputs for vertically mounted devboard
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a0b      	ldr	r2, [pc, #44]	; (8007df8 <gyro_data_ready+0x50>)
 8007dca:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <gyro_data_ready+0x54>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <gyro_data_ready+0x54>)
 8007dd8:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 8007dda:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <gyro_data_ready+0x54>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b07      	cmp	r3, #7
 8007de0:	d003      	beq.n	8007dea <gyro_data_ready+0x42>
 8007de2:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <gyro_data_ready+0x54>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d101      	bne.n	8007dee <gyro_data_ready+0x46>
		imu_proc_task_notif();
 8007dea:	f7ff ffb9 	bl	8007d60 <imu_proc_task_notif>
	}
}
 8007dee:	bf00      	nop
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd90      	pop	{r4, r7, pc}
 8007df6:	bf00      	nop
 8007df8:	2000325c 	.word	0x2000325c
 8007dfc:	20003280 	.word	0x20003280

08007e00 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	463c      	mov	r4, r7
 8007e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel_proc_data.ax = accel_data.ax;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4a10      	ldr	r2, [pc, #64]	; (8007e50 <accel_data_ready+0x50>)
 8007e10:	6013      	str	r3, [r2, #0]
	accel_proc_data.ay = accel_data.ay;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a0e      	ldr	r2, [pc, #56]	; (8007e50 <accel_data_ready+0x50>)
 8007e16:	6053      	str	r3, [r2, #4]
	accel_proc_data.az = accel_data.az;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4a0d      	ldr	r2, [pc, #52]	; (8007e50 <accel_data_ready+0x50>)
 8007e1c:	6093      	str	r3, [r2, #8]
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4a0b      	ldr	r2, [pc, #44]	; (8007e50 <accel_data_ready+0x50>)
 8007e22:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <accel_data_ready+0x54>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f043 0302 	orr.w	r3, r3, #2
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <accel_data_ready+0x54>)
 8007e30:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 8007e32:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <accel_data_ready+0x54>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b07      	cmp	r3, #7
 8007e38:	d003      	beq.n	8007e42 <accel_data_ready+0x42>
 8007e3a:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <accel_data_ready+0x54>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d101      	bne.n	8007e46 <accel_data_ready+0x46>
		imu_proc_task_notif();
 8007e42:	f7ff ff8d 	bl	8007d60 <imu_proc_task_notif>
	}
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd90      	pop	{r4, r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	2000324c 	.word	0x2000324c
 8007e54:	20003280 	.word	0x20003280

08007e58 <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	1d3b      	adds	r3, r7, #4
 8007e60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 8007e64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007e68:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <mag_data_ready+0x44>)
 8007e6a:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 8007e6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e70:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <mag_data_ready+0x44>)
 8007e72:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 8007e74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007e78:	4b08      	ldr	r3, [pc, #32]	; (8007e9c <mag_data_ready+0x44>)
 8007e7a:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4a07      	ldr	r2, [pc, #28]	; (8007e9c <mag_data_ready+0x44>)
 8007e80:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 8007e82:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <mag_data_ready+0x48>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f043 0304 	orr.w	r3, r3, #4
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <mag_data_ready+0x48>)
 8007e8e:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	2000326c 	.word	0x2000326c
 8007ea0:	20003280 	.word	0x20003280

08007ea4 <imu_processing_task>:

void imu_processing_task(void *argument) {
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 8007eac:	f7f9 ff12 	bl	8001cd4 <imu_start_ints>
	init_quaternion();
 8007eb0:	f000 f80a 	bl	8007ec8 <init_quaternion>
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f011 fc23 	bl	8019704 <ulTaskNotifyTake>
		imu_ahrs_update();
 8007ebe:	f000 f93f 	bl	8008140 <imu_ahrs_update>
		imu_attitude_update();
 8007ec2:	f000 fd91 	bl	80089e8 <imu_attitude_update>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007ec6:	e7f5      	b.n	8007eb4 <imu_processing_task+0x10>

08007ec8 <init_quaternion>:
	}
}

void init_quaternion(void) {
 8007ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
	int16_t hx, hy; //hz;

	hx = mag_proc_data.mx;
 8007ed0:	4b79      	ldr	r3, [pc, #484]	; (80080b8 <init_quaternion+0x1f0>)
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	81fb      	strh	r3, [r7, #14]
	hy = mag_proc_data.my;
 8007ed6:	4b78      	ldr	r3, [pc, #480]	; (80080b8 <init_quaternion+0x1f0>)
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
	if (hx < 0 && hy < 0) {
 8007edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da36      	bge.n	8007f52 <init_quaternion+0x8a>
 8007ee4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da32      	bge.n	8007f52 <init_quaternion+0x8a>
		if (fabs(hx / hy) >= 1) {
 8007eec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007ef0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7f8 fb13 	bl	8000524 <__aeabi_i2d>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	603a      	str	r2, [r7, #0]
 8007f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f08:	607b      	str	r3, [r7, #4]
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	4b6b      	ldr	r3, [pc, #428]	; (80080bc <init_quaternion+0x1f4>)
 8007f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f14:	f7f8 fdf6 	bl	8000b04 <__aeabi_dcmpge>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <init_quaternion+0x70>
			q0 = 0.195;
 8007f1e:	4b68      	ldr	r3, [pc, #416]	; (80080c0 <init_quaternion+0x1f8>)
 8007f20:	4a68      	ldr	r2, [pc, #416]	; (80080c4 <init_quaternion+0x1fc>)
 8007f22:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8007f24:	4b68      	ldr	r3, [pc, #416]	; (80080c8 <init_quaternion+0x200>)
 8007f26:	4a69      	ldr	r2, [pc, #420]	; (80080cc <init_quaternion+0x204>)
 8007f28:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 8007f2a:	4b69      	ldr	r3, [pc, #420]	; (80080d0 <init_quaternion+0x208>)
 8007f2c:	4a69      	ldr	r2, [pc, #420]	; (80080d4 <init_quaternion+0x20c>)
 8007f2e:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8007f30:	4b69      	ldr	r3, [pc, #420]	; (80080d8 <init_quaternion+0x210>)
 8007f32:	4a6a      	ldr	r2, [pc, #424]	; (80080dc <init_quaternion+0x214>)
 8007f34:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007f36:	e0ba      	b.n	80080ae <init_quaternion+0x1e6>
		} else {
			q0 = 0.555;
 8007f38:	4b61      	ldr	r3, [pc, #388]	; (80080c0 <init_quaternion+0x1f8>)
 8007f3a:	4a69      	ldr	r2, [pc, #420]	; (80080e0 <init_quaternion+0x218>)
 8007f3c:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8007f3e:	4b62      	ldr	r3, [pc, #392]	; (80080c8 <init_quaternion+0x200>)
 8007f40:	4a62      	ldr	r2, [pc, #392]	; (80080cc <init_quaternion+0x204>)
 8007f42:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 8007f44:	4b62      	ldr	r3, [pc, #392]	; (80080d0 <init_quaternion+0x208>)
 8007f46:	4a67      	ldr	r2, [pc, #412]	; (80080e4 <init_quaternion+0x21c>)
 8007f48:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 8007f4a:	4b63      	ldr	r3, [pc, #396]	; (80080d8 <init_quaternion+0x210>)
 8007f4c:	4a66      	ldr	r2, [pc, #408]	; (80080e8 <init_quaternion+0x220>)
 8007f4e:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007f50:	e0ad      	b.n	80080ae <init_quaternion+0x1e6>
		}

	} else if (hx < 0 && hy > 0) {
 8007f52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	da35      	bge.n	8007fc6 <init_quaternion+0xfe>
 8007f5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dd31      	ble.n	8007fc6 <init_quaternion+0xfe>
		if (fabs(hx / hy) >= 1) {
 8007f62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007f66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f8 fad8 	bl	8000524 <__aeabi_i2d>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4692      	mov	sl, r2
 8007f7a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	4b4e      	ldr	r3, [pc, #312]	; (80080bc <init_quaternion+0x1f4>)
 8007f84:	4650      	mov	r0, sl
 8007f86:	4659      	mov	r1, fp
 8007f88:	f7f8 fdbc 	bl	8000b04 <__aeabi_dcmpge>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00c      	beq.n	8007fac <init_quaternion+0xe4>
			q0 = -0.193;
 8007f92:	4b4b      	ldr	r3, [pc, #300]	; (80080c0 <init_quaternion+0x1f8>)
 8007f94:	4a55      	ldr	r2, [pc, #340]	; (80080ec <init_quaternion+0x224>)
 8007f96:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 8007f98:	4b4b      	ldr	r3, [pc, #300]	; (80080c8 <init_quaternion+0x200>)
 8007f9a:	4a55      	ldr	r2, [pc, #340]	; (80080f0 <init_quaternion+0x228>)
 8007f9c:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 8007f9e:	4b4c      	ldr	r3, [pc, #304]	; (80080d0 <init_quaternion+0x208>)
 8007fa0:	4a54      	ldr	r2, [pc, #336]	; (80080f4 <init_quaternion+0x22c>)
 8007fa2:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8007fa4:	4b4c      	ldr	r3, [pc, #304]	; (80080d8 <init_quaternion+0x210>)
 8007fa6:	4a4d      	ldr	r2, [pc, #308]	; (80080dc <init_quaternion+0x214>)
 8007fa8:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007faa:	e080      	b.n	80080ae <init_quaternion+0x1e6>
		} else {
			q0 = -0.552;
 8007fac:	4b44      	ldr	r3, [pc, #272]	; (80080c0 <init_quaternion+0x1f8>)
 8007fae:	4a52      	ldr	r2, [pc, #328]	; (80080f8 <init_quaternion+0x230>)
 8007fb0:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 8007fb2:	4b45      	ldr	r3, [pc, #276]	; (80080c8 <init_quaternion+0x200>)
 8007fb4:	4a51      	ldr	r2, [pc, #324]	; (80080fc <init_quaternion+0x234>)
 8007fb6:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 8007fb8:	4b45      	ldr	r3, [pc, #276]	; (80080d0 <init_quaternion+0x208>)
 8007fba:	4a51      	ldr	r2, [pc, #324]	; (8008100 <init_quaternion+0x238>)
 8007fbc:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 8007fbe:	4b46      	ldr	r3, [pc, #280]	; (80080d8 <init_quaternion+0x210>)
 8007fc0:	4a50      	ldr	r2, [pc, #320]	; (8008104 <init_quaternion+0x23c>)
 8007fc2:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8007fc4:	e073      	b.n	80080ae <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy > 0) {
 8007fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dd35      	ble.n	800803a <init_quaternion+0x172>
 8007fce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dd31      	ble.n	800803a <init_quaternion+0x172>
		if (fabs(hx / hy) >= 1) {
 8007fd6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007fda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7f8 fa9e 	bl	8000524 <__aeabi_i2d>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4690      	mov	r8, r2
 8007fee:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007ff2:	f04f 0200 	mov.w	r2, #0
 8007ff6:	4b31      	ldr	r3, [pc, #196]	; (80080bc <init_quaternion+0x1f4>)
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	f7f8 fd82 	bl	8000b04 <__aeabi_dcmpge>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00c      	beq.n	8008020 <init_quaternion+0x158>
			q0 = -0.9785;
 8008006:	4b2e      	ldr	r3, [pc, #184]	; (80080c0 <init_quaternion+0x1f8>)
 8008008:	4a3f      	ldr	r2, [pc, #252]	; (8008108 <init_quaternion+0x240>)
 800800a:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 800800c:	4b2e      	ldr	r3, [pc, #184]	; (80080c8 <init_quaternion+0x200>)
 800800e:	4a3f      	ldr	r2, [pc, #252]	; (800810c <init_quaternion+0x244>)
 8008010:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 8008012:	4b2f      	ldr	r3, [pc, #188]	; (80080d0 <init_quaternion+0x208>)
 8008014:	4a3e      	ldr	r2, [pc, #248]	; (8008110 <init_quaternion+0x248>)
 8008016:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 8008018:	4b2f      	ldr	r3, [pc, #188]	; (80080d8 <init_quaternion+0x210>)
 800801a:	4a2a      	ldr	r2, [pc, #168]	; (80080c4 <init_quaternion+0x1fc>)
 800801c:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800801e:	e046      	b.n	80080ae <init_quaternion+0x1e6>
		} else {
			q0 = -0.9828;
 8008020:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <init_quaternion+0x1f8>)
 8008022:	4a3c      	ldr	r2, [pc, #240]	; (8008114 <init_quaternion+0x24c>)
 8008024:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 8008026:	4b28      	ldr	r3, [pc, #160]	; (80080c8 <init_quaternion+0x200>)
 8008028:	4a3b      	ldr	r2, [pc, #236]	; (8008118 <init_quaternion+0x250>)
 800802a:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 800802c:	4b28      	ldr	r3, [pc, #160]	; (80080d0 <init_quaternion+0x208>)
 800802e:	4a3b      	ldr	r2, [pc, #236]	; (800811c <init_quaternion+0x254>)
 8008030:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 8008032:	4b29      	ldr	r3, [pc, #164]	; (80080d8 <init_quaternion+0x210>)
 8008034:	4a3a      	ldr	r2, [pc, #232]	; (8008120 <init_quaternion+0x258>)
 8008036:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8008038:	e039      	b.n	80080ae <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy < 0) {
 800803a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dd35      	ble.n	80080ae <init_quaternion+0x1e6>
 8008042:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	da31      	bge.n	80080ae <init_quaternion+0x1e6>
		if (fabs(hx / hy) >= 1) {
 800804a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800804e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008052:	fb92 f3f3 	sdiv	r3, r2, r3
 8008056:	4618      	mov	r0, r3
 8008058:	f7f8 fa64 	bl	8000524 <__aeabi_i2d>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4614      	mov	r4, r2
 8008062:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	4b14      	ldr	r3, [pc, #80]	; (80080bc <init_quaternion+0x1f4>)
 800806c:	4620      	mov	r0, r4
 800806e:	4629      	mov	r1, r5
 8008070:	f7f8 fd48 	bl	8000b04 <__aeabi_dcmpge>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00c      	beq.n	8008094 <init_quaternion+0x1cc>
			q0 = -0.979;
 800807a:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <init_quaternion+0x1f8>)
 800807c:	4a29      	ldr	r2, [pc, #164]	; (8008124 <init_quaternion+0x25c>)
 800807e:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <init_quaternion+0x200>)
 8008082:	4a29      	ldr	r2, [pc, #164]	; (8008128 <init_quaternion+0x260>)
 8008084:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <init_quaternion+0x208>)
 8008088:	4a24      	ldr	r2, [pc, #144]	; (800811c <init_quaternion+0x254>)
 800808a:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <init_quaternion+0x210>)
 800808e:	4a27      	ldr	r2, [pc, #156]	; (800812c <init_quaternion+0x264>)
 8008090:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}
	}
#endif
}
 8008092:	e00c      	b.n	80080ae <init_quaternion+0x1e6>
			q0 = -0.83;
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <init_quaternion+0x1f8>)
 8008096:	4a26      	ldr	r2, [pc, #152]	; (8008130 <init_quaternion+0x268>)
 8008098:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 800809a:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <init_quaternion+0x200>)
 800809c:	4a25      	ldr	r2, [pc, #148]	; (8008134 <init_quaternion+0x26c>)
 800809e:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <init_quaternion+0x208>)
 80080a2:	4a25      	ldr	r2, [pc, #148]	; (8008138 <init_quaternion+0x270>)
 80080a4:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 80080a6:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <init_quaternion+0x210>)
 80080a8:	4a24      	ldr	r2, [pc, #144]	; (800813c <init_quaternion+0x274>)
 80080aa:	601a      	str	r2, [r3, #0]
}
 80080ac:	e7ff      	b.n	80080ae <init_quaternion+0x1e6>
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080b8:	2000326c 	.word	0x2000326c
 80080bc:	3ff00000 	.word	0x3ff00000
 80080c0:	20000010 	.word	0x20000010
 80080c4:	3e47ae14 	.word	0x3e47ae14
 80080c8:	200031e8 	.word	0x200031e8
 80080cc:	bc75c28f 	.word	0xbc75c28f
 80080d0:	200031ec 	.word	0x200031ec
 80080d4:	3b8ce704 	.word	0x3b8ce704
 80080d8:	200031f0 	.word	0x200031f0
 80080dc:	3f7a9fbe 	.word	0x3f7a9fbe
 80080e0:	3f0e147b 	.word	0x3f0e147b
 80080e4:	3bc49ba6 	.word	0x3bc49ba6
 80080e8:	3f543958 	.word	0x3f543958
 80080ec:	be45a1cb 	.word	0xbe45a1cb
 80080f0:	bc1374bc 	.word	0xbc1374bc
 80080f4:	bbc49ba6 	.word	0xbbc49ba6
 80080f8:	bf0d4fdf 	.word	0xbf0d4fdf
 80080fc:	bb9d4952 	.word	0xbb9d4952
 8008100:	bc3c6a7f 	.word	0xbc3c6a7f
 8008104:	3f54d014 	.word	0x3f54d014
 8008108:	bf7a7efa 	.word	0xbf7a7efa
 800810c:	3c03126f 	.word	0x3c03126f
 8008110:	bca3d70a 	.word	0xbca3d70a
 8008114:	bf7b98c8 	.word	0xbf7b98c8
 8008118:	3b03126f 	.word	0x3b03126f
 800811c:	bc88ce70 	.word	0xbc88ce70
 8008120:	3f0e425b 	.word	0x3f0e425b
 8008124:	bf7a9fbe 	.word	0xbf7a9fbe
 8008128:	3c3e0ded 	.word	0x3c3e0ded
 800812c:	be47ae14 	.word	0xbe47ae14
 8008130:	bf547ae1 	.word	0xbf547ae1
 8008134:	3c656042 	.word	0x3c656042
 8008138:	bc449ba6 	.word	0xbc449ba6
 800813c:	bf0e5604 	.word	0xbf0e5604

08008140 <imu_ahrs_update>:
	q1 = tempq1 * norm;
	q2 = tempq2 * norm;
	q3 = tempq3 * norm;
}

void imu_ahrs_update(void) {
 8008140:	b580      	push	{r7, lr}
 8008142:	b09e      	sub	sp, #120	; 0x78
 8008144:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0, tempq1, tempq2, tempq3;

	float q0q0 = q0 * q0;
 8008146:	4bd3      	ldr	r3, [pc, #844]	; (8008494 <imu_ahrs_update+0x354>)
 8008148:	ed93 7a00 	vldr	s14, [r3]
 800814c:	4bd1      	ldr	r3, [pc, #836]	; (8008494 <imu_ahrs_update+0x354>)
 800814e:	edd3 7a00 	vldr	s15, [r3]
 8008152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008156:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0 * q1;
 800815a:	4bce      	ldr	r3, [pc, #824]	; (8008494 <imu_ahrs_update+0x354>)
 800815c:	ed93 7a00 	vldr	s14, [r3]
 8008160:	4bcd      	ldr	r3, [pc, #820]	; (8008498 <imu_ahrs_update+0x358>)
 8008162:	edd3 7a00 	vldr	s15, [r3]
 8008166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0 * q2;
 800816e:	4bc9      	ldr	r3, [pc, #804]	; (8008494 <imu_ahrs_update+0x354>)
 8008170:	ed93 7a00 	vldr	s14, [r3]
 8008174:	4bc9      	ldr	r3, [pc, #804]	; (800849c <imu_ahrs_update+0x35c>)
 8008176:	edd3 7a00 	vldr	s15, [r3]
 800817a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0 * q3;
 8008182:	4bc4      	ldr	r3, [pc, #784]	; (8008494 <imu_ahrs_update+0x354>)
 8008184:	ed93 7a00 	vldr	s14, [r3]
 8008188:	4bc5      	ldr	r3, [pc, #788]	; (80084a0 <imu_ahrs_update+0x360>)
 800818a:	edd3 7a00 	vldr	s15, [r3]
 800818e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008192:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1 * q1;
 8008196:	4bc0      	ldr	r3, [pc, #768]	; (8008498 <imu_ahrs_update+0x358>)
 8008198:	ed93 7a00 	vldr	s14, [r3]
 800819c:	4bbe      	ldr	r3, [pc, #760]	; (8008498 <imu_ahrs_update+0x358>)
 800819e:	edd3 7a00 	vldr	s15, [r3]
 80081a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1 * q2;
 80081aa:	4bbb      	ldr	r3, [pc, #748]	; (8008498 <imu_ahrs_update+0x358>)
 80081ac:	ed93 7a00 	vldr	s14, [r3]
 80081b0:	4bba      	ldr	r3, [pc, #744]	; (800849c <imu_ahrs_update+0x35c>)
 80081b2:	edd3 7a00 	vldr	s15, [r3]
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1 * q3;
 80081be:	4bb6      	ldr	r3, [pc, #728]	; (8008498 <imu_ahrs_update+0x358>)
 80081c0:	ed93 7a00 	vldr	s14, [r3]
 80081c4:	4bb6      	ldr	r3, [pc, #728]	; (80084a0 <imu_ahrs_update+0x360>)
 80081c6:	edd3 7a00 	vldr	s15, [r3]
 80081ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ce:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2 * q2;
 80081d2:	4bb2      	ldr	r3, [pc, #712]	; (800849c <imu_ahrs_update+0x35c>)
 80081d4:	ed93 7a00 	vldr	s14, [r3]
 80081d8:	4bb0      	ldr	r3, [pc, #704]	; (800849c <imu_ahrs_update+0x35c>)
 80081da:	edd3 7a00 	vldr	s15, [r3]
 80081de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2 * q3;
 80081e6:	4bad      	ldr	r3, [pc, #692]	; (800849c <imu_ahrs_update+0x35c>)
 80081e8:	ed93 7a00 	vldr	s14, [r3]
 80081ec:	4bac      	ldr	r3, [pc, #688]	; (80084a0 <imu_ahrs_update+0x360>)
 80081ee:	edd3 7a00 	vldr	s15, [r3]
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3 * q3;
 80081fa:	4ba9      	ldr	r3, [pc, #676]	; (80084a0 <imu_ahrs_update+0x360>)
 80081fc:	ed93 7a00 	vldr	s14, [r3]
 8008200:	4ba7      	ldr	r3, [pc, #668]	; (80084a0 <imu_ahrs_update+0x360>)
 8008202:	edd3 7a00 	vldr	s15, [r3]
 8008206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = gyro_proc_data.gx;
 800820e:	4ba5      	ldr	r3, [pc, #660]	; (80084a4 <imu_ahrs_update+0x364>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4aa5      	ldr	r2, [pc, #660]	; (80084a8 <imu_ahrs_update+0x368>)
 8008214:	6013      	str	r3, [r2, #0]
	gy = gyro_proc_data.gy;
 8008216:	4ba3      	ldr	r3, [pc, #652]	; (80084a4 <imu_ahrs_update+0x364>)
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	4aa4      	ldr	r2, [pc, #656]	; (80084ac <imu_ahrs_update+0x36c>)
 800821c:	6013      	str	r3, [r2, #0]
	gz = gyro_proc_data.gz;
 800821e:	4ba1      	ldr	r3, [pc, #644]	; (80084a4 <imu_ahrs_update+0x364>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	4aa3      	ldr	r2, [pc, #652]	; (80084b0 <imu_ahrs_update+0x370>)
 8008224:	6013      	str	r3, [r2, #0]
	ax = accel_proc_data.ax;
 8008226:	4ba3      	ldr	r3, [pc, #652]	; (80084b4 <imu_ahrs_update+0x374>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4aa3      	ldr	r2, [pc, #652]	; (80084b8 <imu_ahrs_update+0x378>)
 800822c:	6013      	str	r3, [r2, #0]
	ay = accel_proc_data.ay;
 800822e:	4ba1      	ldr	r3, [pc, #644]	; (80084b4 <imu_ahrs_update+0x374>)
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	4aa2      	ldr	r2, [pc, #648]	; (80084bc <imu_ahrs_update+0x37c>)
 8008234:	6013      	str	r3, [r2, #0]
	az = accel_proc_data.az;
 8008236:	4b9f      	ldr	r3, [pc, #636]	; (80084b4 <imu_ahrs_update+0x374>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	4aa1      	ldr	r2, [pc, #644]	; (80084c0 <imu_ahrs_update+0x380>)
 800823c:	6013      	str	r3, [r2, #0]
	mx = mag_proc_data.mx;
 800823e:	4ba1      	ldr	r3, [pc, #644]	; (80084c4 <imu_ahrs_update+0x384>)
 8008240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800824c:	4b9e      	ldr	r3, [pc, #632]	; (80084c8 <imu_ahrs_update+0x388>)
 800824e:	edc3 7a00 	vstr	s15, [r3]
	my = mag_proc_data.my;
 8008252:	4b9c      	ldr	r3, [pc, #624]	; (80084c4 <imu_ahrs_update+0x384>)
 8008254:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008260:	4b9a      	ldr	r3, [pc, #616]	; (80084cc <imu_ahrs_update+0x38c>)
 8008262:	edc3 7a00 	vstr	s15, [r3]
	mz = mag_proc_data.mz;
 8008266:	4b97      	ldr	r3, [pc, #604]	; (80084c4 <imu_ahrs_update+0x384>)
 8008268:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008274:	4b96      	ldr	r3, [pc, #600]	; (80084d0 <imu_ahrs_update+0x390>)
 8008276:	edc3 7a00 	vstr	s15, [r3]

	last_proc_times[0] = HAL_GetTick(); //ms
 800827a:	f003 f989 	bl	800b590 <HAL_GetTick>
 800827e:	4603      	mov	r3, r0
 8008280:	4a94      	ldr	r2, [pc, #592]	; (80084d4 <imu_ahrs_update+0x394>)
 8008282:	6013      	str	r3, [r2, #0]
	halfT = ((float) (last_proc_times[0] - last_proc_times[1]) / 2000.0f);
 8008284:	4b93      	ldr	r3, [pc, #588]	; (80084d4 <imu_ahrs_update+0x394>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	4b92      	ldr	r3, [pc, #584]	; (80084d4 <imu_ahrs_update+0x394>)
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008296:	eddf 6a90 	vldr	s13, [pc, #576]	; 80084d8 <imu_ahrs_update+0x398>
 800829a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800829e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_proc_times[1] = last_proc_times[0];
 80082a2:	4b8c      	ldr	r3, [pc, #560]	; (80084d4 <imu_ahrs_update+0x394>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a8b      	ldr	r2, [pc, #556]	; (80084d4 <imu_ahrs_update+0x394>)
 80082a8:	6053      	str	r3, [r2, #4]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax * ax + ay * ay + az * az);
 80082aa:	4b83      	ldr	r3, [pc, #524]	; (80084b8 <imu_ahrs_update+0x378>)
 80082ac:	ed93 7a00 	vldr	s14, [r3]
 80082b0:	4b81      	ldr	r3, [pc, #516]	; (80084b8 <imu_ahrs_update+0x378>)
 80082b2:	edd3 7a00 	vldr	s15, [r3]
 80082b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082ba:	4b80      	ldr	r3, [pc, #512]	; (80084bc <imu_ahrs_update+0x37c>)
 80082bc:	edd3 6a00 	vldr	s13, [r3]
 80082c0:	4b7e      	ldr	r3, [pc, #504]	; (80084bc <imu_ahrs_update+0x37c>)
 80082c2:	edd3 7a00 	vldr	s15, [r3]
 80082c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082ce:	4b7c      	ldr	r3, [pc, #496]	; (80084c0 <imu_ahrs_update+0x380>)
 80082d0:	edd3 6a00 	vldr	s13, [r3]
 80082d4:	4b7a      	ldr	r3, [pc, #488]	; (80084c0 <imu_ahrs_update+0x380>)
 80082d6:	edd3 7a00 	vldr	s15, [r3]
 80082da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082e2:	eeb0 0a67 	vmov.f32	s0, s15
 80082e6:	f7f9 f9f3 	bl	80016d0 <inv_sqrt>
 80082ea:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 80082ee:	4b72      	ldr	r3, [pc, #456]	; (80084b8 <imu_ahrs_update+0x378>)
 80082f0:	ed93 7a00 	vldr	s14, [r3]
 80082f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80082f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fc:	4b6e      	ldr	r3, [pc, #440]	; (80084b8 <imu_ahrs_update+0x378>)
 80082fe:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 8008302:	4b6e      	ldr	r3, [pc, #440]	; (80084bc <imu_ahrs_update+0x37c>)
 8008304:	ed93 7a00 	vldr	s14, [r3]
 8008308:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800830c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008310:	4b6a      	ldr	r3, [pc, #424]	; (80084bc <imu_ahrs_update+0x37c>)
 8008312:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 8008316:	4b6a      	ldr	r3, [pc, #424]	; (80084c0 <imu_ahrs_update+0x380>)
 8008318:	ed93 7a00 	vldr	s14, [r3]
 800831c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008324:	4b66      	ldr	r3, [pc, #408]	; (80084c0 <imu_ahrs_update+0x380>)
 8008326:	edc3 7a00 	vstr	s15, [r3]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
		mx = mx * norm;
		my = my * norm;
		mz = mz * norm;
	#else
	mx = 0;
 800832a:	4b67      	ldr	r3, [pc, #412]	; (80084c8 <imu_ahrs_update+0x388>)
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
	my = 0;
 8008332:	4b66      	ldr	r3, [pc, #408]	; (80084cc <imu_ahrs_update+0x38c>)
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
	mz = 0;
 800833a:	4b65      	ldr	r3, [pc, #404]	; (80084d0 <imu_ahrs_update+0x390>)
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	601a      	str	r2, [r3, #0]
#endif
	/* compute reference direction of flux */
	hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 8008342:	4b61      	ldr	r3, [pc, #388]	; (80084c8 <imu_ahrs_update+0x388>)
 8008344:	edd3 7a00 	vldr	s15, [r3]
 8008348:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800834c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008350:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008354:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008358:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800835c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008364:	4b59      	ldr	r3, [pc, #356]	; (80084cc <imu_ahrs_update+0x38c>)
 8008366:	edd3 7a00 	vldr	s15, [r3]
 800836a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800836e:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8008372:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8008376:	ee76 7a67 	vsub.f32	s15, s12, s15
 800837a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800837e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008382:	4b53      	ldr	r3, [pc, #332]	; (80084d0 <imu_ahrs_update+0x390>)
 8008384:	edd3 7a00 	vldr	s15, [r3]
 8008388:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800838c:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8008390:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8008394:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800839c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083a0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 80083a4:	4b48      	ldr	r3, [pc, #288]	; (80084c8 <imu_ahrs_update+0x388>)
 80083a6:	edd3 7a00 	vldr	s15, [r3]
 80083aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80083ae:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80083b2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80083b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083be:	4b43      	ldr	r3, [pc, #268]	; (80084cc <imu_ahrs_update+0x38c>)
 80083c0:	edd3 7a00 	vldr	s15, [r3]
 80083c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80083c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80083cc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80083d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80083d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80083d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80083dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083e4:	4b3a      	ldr	r3, [pc, #232]	; (80084d0 <imu_ahrs_update+0x390>)
 80083e6:	edd3 7a00 	vldr	s15, [r3]
 80083ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80083ee:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80083f2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80083f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80083fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008402:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 8008406:	4b30      	ldr	r3, [pc, #192]	; (80084c8 <imu_ahrs_update+0x388>)
 8008408:	edd3 7a00 	vldr	s15, [r3]
 800840c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008410:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8008414:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8008418:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800841c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008420:	4b2a      	ldr	r3, [pc, #168]	; (80084cc <imu_ahrs_update+0x38c>)
 8008422:	edd3 7a00 	vldr	s15, [r3]
 8008426:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800842a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800842e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008432:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800843a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800843e:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <imu_ahrs_update+0x390>)
 8008440:	edd3 7a00 	vldr	s15, [r3]
 8008444:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008448:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800844c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008450:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008454:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008458:	ee76 7a67 	vsub.f32	s15, s12, s15
 800845c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008464:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx * hx) + (hy * hy));
 8008468:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800846c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008470:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008474:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800847c:	ee17 0a90 	vmov	r0, s15
 8008480:	f7f8 f862 	bl	8000548 <__aeabi_f2d>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	ec43 2b10 	vmov	d0, r2, r3
 800848c:	f018 f82e 	bl	80204ec <sqrt>
 8008490:	e024      	b.n	80084dc <imu_ahrs_update+0x39c>
 8008492:	bf00      	nop
 8008494:	20000010 	.word	0x20000010
 8008498:	200031e8 	.word	0x200031e8
 800849c:	200031ec 	.word	0x200031ec
 80084a0:	200031f0 	.word	0x200031f0
 80084a4:	2000325c 	.word	0x2000325c
 80084a8:	20003200 	.word	0x20003200
 80084ac:	20003204 	.word	0x20003204
 80084b0:	20003208 	.word	0x20003208
 80084b4:	2000324c 	.word	0x2000324c
 80084b8:	2000320c 	.word	0x2000320c
 80084bc:	20003210 	.word	0x20003210
 80084c0:	20003214 	.word	0x20003214
 80084c4:	2000326c 	.word	0x2000326c
 80084c8:	20003218 	.word	0x20003218
 80084cc:	2000321c 	.word	0x2000321c
 80084d0:	20003220 	.word	0x20003220
 80084d4:	20003278 	.word	0x20003278
 80084d8:	44fa0000 	.word	0x44fa0000
 80084dc:	ec53 2b10 	vmov	r2, r3, d0
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	f7f8 fb80 	bl	8000be8 <__aeabi_d2f>
 80084e8:	4603      	mov	r3, r0
 80084ea:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 80084ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f * (q1q3 - q0q2);
 80084f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80084f4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80084f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008500:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f * (q0q1 + q2q3);
 8008504:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8008508:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800850c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008510:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008514:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8008518:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800851c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008524:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800852c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008534:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 8008538:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800853c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008540:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008544:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008548:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800854c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008550:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008558:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800855c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008560:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8008564:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8008568:	ee76 7a67 	vsub.f32	s15, s12, s15
 800856c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008574:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 8008578:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800857c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008580:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8008584:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8008588:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800858c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008590:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008594:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008598:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800859c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80085a0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80085a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ac:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 80085b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80085b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80085b8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80085bc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80085c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80085cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80085d0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80085d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80085d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80085dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80085e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80085e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ec:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 80085f0:	4bde      	ldr	r3, [pc, #888]	; (800896c <imu_ahrs_update+0x82c>)
 80085f2:	ed93 7a00 	vldr	s14, [r3]
 80085f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80085fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085fe:	4bdc      	ldr	r3, [pc, #880]	; (8008970 <imu_ahrs_update+0x830>)
 8008600:	edd3 6a00 	vldr	s13, [r3]
 8008604:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800860c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008610:	4bd8      	ldr	r3, [pc, #864]	; (8008974 <imu_ahrs_update+0x834>)
 8008612:	edd3 6a00 	vldr	s13, [r3]
 8008616:	edd7 7a07 	vldr	s15, [r7, #28]
 800861a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800861e:	4bd6      	ldr	r3, [pc, #856]	; (8008978 <imu_ahrs_update+0x838>)
 8008620:	ed93 6a00 	vldr	s12, [r3]
 8008624:	edd7 7a08 	vldr	s15, [r7, #32]
 8008628:	ee66 7a27 	vmul.f32	s15, s12, s15
 800862c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008634:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8008638:	4bcd      	ldr	r3, [pc, #820]	; (8008970 <imu_ahrs_update+0x830>)
 800863a:	ed93 7a00 	vldr	s14, [r3]
 800863e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008646:	4bcd      	ldr	r3, [pc, #820]	; (800897c <imu_ahrs_update+0x83c>)
 8008648:	edd3 6a00 	vldr	s13, [r3]
 800864c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008654:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008658:	4bc7      	ldr	r3, [pc, #796]	; (8008978 <imu_ahrs_update+0x838>)
 800865a:	edd3 6a00 	vldr	s13, [r3]
 800865e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008662:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008666:	4bc6      	ldr	r3, [pc, #792]	; (8008980 <imu_ahrs_update+0x840>)
 8008668:	ed93 6a00 	vldr	s12, [r3]
 800866c:	edd7 7a07 	vldr	s15, [r7, #28]
 8008670:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008674:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800867c:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8008680:	4bbe      	ldr	r3, [pc, #760]	; (800897c <imu_ahrs_update+0x83c>)
 8008682:	ed93 7a00 	vldr	s14, [r3]
 8008686:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800868a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800868e:	4bb7      	ldr	r3, [pc, #732]	; (800896c <imu_ahrs_update+0x82c>)
 8008690:	edd3 6a00 	vldr	s13, [r3]
 8008694:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800869c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086a0:	4bb7      	ldr	r3, [pc, #732]	; (8008980 <imu_ahrs_update+0x840>)
 80086a2:	edd3 6a00 	vldr	s13, [r3]
 80086a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80086aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80086ae:	4bb1      	ldr	r3, [pc, #708]	; (8008974 <imu_ahrs_update+0x834>)
 80086b0:	ed93 6a00 	vldr	s12, [r3]
 80086b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80086bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80086c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086c4:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if (ex != 0.0f && ey != 0.0f && ez != 0.0f) {
 80086c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80086cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	d07c      	beq.n	80087d0 <imu_ahrs_update+0x690>
 80086d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80086da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e2:	d075      	beq.n	80087d0 <imu_ahrs_update+0x690>
 80086e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80086e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f0:	d06e      	beq.n	80087d0 <imu_ahrs_update+0x690>
		exInt = exInt + ex * AHRSKi * halfT;
 80086f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80086f6:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8008984 <imu_ahrs_update+0x844>
 80086fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80086fe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008706:	4ba0      	ldr	r3, [pc, #640]	; (8008988 <imu_ahrs_update+0x848>)
 8008708:	edd3 7a00 	vldr	s15, [r3]
 800870c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008710:	4b9d      	ldr	r3, [pc, #628]	; (8008988 <imu_ahrs_update+0x848>)
 8008712:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * AHRSKi * halfT;
 8008716:	edd7 7a05 	vldr	s15, [r7, #20]
 800871a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8008984 <imu_ahrs_update+0x844>
 800871e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008722:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800872a:	4b98      	ldr	r3, [pc, #608]	; (800898c <imu_ahrs_update+0x84c>)
 800872c:	edd3 7a00 	vldr	s15, [r3]
 8008730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008734:	4b95      	ldr	r3, [pc, #596]	; (800898c <imu_ahrs_update+0x84c>)
 8008736:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * AHRSKi * halfT;
 800873a:	edd7 7a04 	vldr	s15, [r7, #16]
 800873e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8008984 <imu_ahrs_update+0x844>
 8008742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008746:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800874a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800874e:	4b90      	ldr	r3, [pc, #576]	; (8008990 <imu_ahrs_update+0x850>)
 8008750:	edd3 7a00 	vldr	s15, [r3]
 8008754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008758:	4b8d      	ldr	r3, [pc, #564]	; (8008990 <imu_ahrs_update+0x850>)
 800875a:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + AHRSKp * ex + exInt;
 800875e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008762:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8008994 <imu_ahrs_update+0x854>
 8008766:	ee27 7a87 	vmul.f32	s14, s15, s14
 800876a:	4b8b      	ldr	r3, [pc, #556]	; (8008998 <imu_ahrs_update+0x858>)
 800876c:	edd3 7a00 	vldr	s15, [r3]
 8008770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008774:	4b84      	ldr	r3, [pc, #528]	; (8008988 <imu_ahrs_update+0x848>)
 8008776:	edd3 7a00 	vldr	s15, [r3]
 800877a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800877e:	4b86      	ldr	r3, [pc, #536]	; (8008998 <imu_ahrs_update+0x858>)
 8008780:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + AHRSKp * ey + eyInt;
 8008784:	edd7 7a05 	vldr	s15, [r7, #20]
 8008788:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8008994 <imu_ahrs_update+0x854>
 800878c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008790:	4b82      	ldr	r3, [pc, #520]	; (800899c <imu_ahrs_update+0x85c>)
 8008792:	edd3 7a00 	vldr	s15, [r3]
 8008796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800879a:	4b7c      	ldr	r3, [pc, #496]	; (800898c <imu_ahrs_update+0x84c>)
 800879c:	edd3 7a00 	vldr	s15, [r3]
 80087a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087a4:	4b7d      	ldr	r3, [pc, #500]	; (800899c <imu_ahrs_update+0x85c>)
 80087a6:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + AHRSKp * ez + ezInt;
 80087aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80087ae:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8008994 <imu_ahrs_update+0x854>
 80087b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80087b6:	4b7a      	ldr	r3, [pc, #488]	; (80089a0 <imu_ahrs_update+0x860>)
 80087b8:	edd3 7a00 	vldr	s15, [r3]
 80087bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087c0:	4b73      	ldr	r3, [pc, #460]	; (8008990 <imu_ahrs_update+0x850>)
 80087c2:	edd3 7a00 	vldr	s15, [r3]
 80087c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ca:	4b75      	ldr	r3, [pc, #468]	; (80089a0 <imu_ahrs_update+0x860>)
 80087cc:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 80087d0:	4b74      	ldr	r3, [pc, #464]	; (80089a4 <imu_ahrs_update+0x864>)
 80087d2:	edd3 7a00 	vldr	s15, [r3]
 80087d6:	eeb1 7a67 	vneg.f32	s14, s15
 80087da:	4b6f      	ldr	r3, [pc, #444]	; (8008998 <imu_ahrs_update+0x858>)
 80087dc:	edd3 7a00 	vldr	s15, [r3]
 80087e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087e4:	4b70      	ldr	r3, [pc, #448]	; (80089a8 <imu_ahrs_update+0x868>)
 80087e6:	edd3 6a00 	vldr	s13, [r3]
 80087ea:	4b6c      	ldr	r3, [pc, #432]	; (800899c <imu_ahrs_update+0x85c>)
 80087ec:	edd3 7a00 	vldr	s15, [r3]
 80087f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087f8:	4b6c      	ldr	r3, [pc, #432]	; (80089ac <imu_ahrs_update+0x86c>)
 80087fa:	edd3 6a00 	vldr	s13, [r3]
 80087fe:	4b68      	ldr	r3, [pc, #416]	; (80089a0 <imu_ahrs_update+0x860>)
 8008800:	edd3 7a00 	vldr	s15, [r3]
 8008804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008808:	ee37 7a67 	vsub.f32	s14, s14, s15
 800880c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008814:	4b66      	ldr	r3, [pc, #408]	; (80089b0 <imu_ahrs_update+0x870>)
 8008816:	edd3 7a00 	vldr	s15, [r3]
 800881a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800881e:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 8008822:	4b63      	ldr	r3, [pc, #396]	; (80089b0 <imu_ahrs_update+0x870>)
 8008824:	ed93 7a00 	vldr	s14, [r3]
 8008828:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <imu_ahrs_update+0x858>)
 800882a:	edd3 7a00 	vldr	s15, [r3]
 800882e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008832:	4b5d      	ldr	r3, [pc, #372]	; (80089a8 <imu_ahrs_update+0x868>)
 8008834:	edd3 6a00 	vldr	s13, [r3]
 8008838:	4b59      	ldr	r3, [pc, #356]	; (80089a0 <imu_ahrs_update+0x860>)
 800883a:	edd3 7a00 	vldr	s15, [r3]
 800883e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008846:	4b59      	ldr	r3, [pc, #356]	; (80089ac <imu_ahrs_update+0x86c>)
 8008848:	edd3 6a00 	vldr	s13, [r3]
 800884c:	4b53      	ldr	r3, [pc, #332]	; (800899c <imu_ahrs_update+0x85c>)
 800884e:	edd3 7a00 	vldr	s15, [r3]
 8008852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800885a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800885e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008862:	4b50      	ldr	r3, [pc, #320]	; (80089a4 <imu_ahrs_update+0x864>)
 8008864:	edd3 7a00 	vldr	s15, [r3]
 8008868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800886c:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 8008870:	4b4f      	ldr	r3, [pc, #316]	; (80089b0 <imu_ahrs_update+0x870>)
 8008872:	ed93 7a00 	vldr	s14, [r3]
 8008876:	4b49      	ldr	r3, [pc, #292]	; (800899c <imu_ahrs_update+0x85c>)
 8008878:	edd3 7a00 	vldr	s15, [r3]
 800887c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008880:	4b48      	ldr	r3, [pc, #288]	; (80089a4 <imu_ahrs_update+0x864>)
 8008882:	edd3 6a00 	vldr	s13, [r3]
 8008886:	4b46      	ldr	r3, [pc, #280]	; (80089a0 <imu_ahrs_update+0x860>)
 8008888:	edd3 7a00 	vldr	s15, [r3]
 800888c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008894:	4b45      	ldr	r3, [pc, #276]	; (80089ac <imu_ahrs_update+0x86c>)
 8008896:	edd3 6a00 	vldr	s13, [r3]
 800889a:	4b3f      	ldr	r3, [pc, #252]	; (8008998 <imu_ahrs_update+0x858>)
 800889c:	edd3 7a00 	vldr	s15, [r3]
 80088a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80088ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088b0:	4b3d      	ldr	r3, [pc, #244]	; (80089a8 <imu_ahrs_update+0x868>)
 80088b2:	edd3 7a00 	vldr	s15, [r3]
 80088b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088ba:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 80088be:	4b3c      	ldr	r3, [pc, #240]	; (80089b0 <imu_ahrs_update+0x870>)
 80088c0:	ed93 7a00 	vldr	s14, [r3]
 80088c4:	4b36      	ldr	r3, [pc, #216]	; (80089a0 <imu_ahrs_update+0x860>)
 80088c6:	edd3 7a00 	vldr	s15, [r3]
 80088ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088ce:	4b35      	ldr	r3, [pc, #212]	; (80089a4 <imu_ahrs_update+0x864>)
 80088d0:	edd3 6a00 	vldr	s13, [r3]
 80088d4:	4b31      	ldr	r3, [pc, #196]	; (800899c <imu_ahrs_update+0x85c>)
 80088d6:	edd3 7a00 	vldr	s15, [r3]
 80088da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088e2:	4b31      	ldr	r3, [pc, #196]	; (80089a8 <imu_ahrs_update+0x868>)
 80088e4:	edd3 6a00 	vldr	s13, [r3]
 80088e8:	4b2b      	ldr	r3, [pc, #172]	; (8008998 <imu_ahrs_update+0x858>)
 80088ea:	edd3 7a00 	vldr	s15, [r3]
 80088ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088f6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80088fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088fe:	4b2b      	ldr	r3, [pc, #172]	; (80089ac <imu_ahrs_update+0x86c>)
 8008900:	edd3 7a00 	vldr	s15, [r3]
 8008904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008908:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 800890c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008910:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008914:	edd7 7a02 	vldr	s15, [r7, #8]
 8008918:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800891c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008920:	edd7 7a01 	vldr	s15, [r7, #4]
 8008924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800892c:	edd7 7a00 	vldr	s15, [r7]
 8008930:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008938:	eeb0 0a67 	vmov.f32	s0, s15
 800893c:	f7f8 fec8 	bl	80016d0 <inv_sqrt>
 8008940:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 8008944:	ed97 7a03 	vldr	s14, [r7, #12]
 8008948:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800894c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008950:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <imu_ahrs_update+0x870>)
 8008952:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 8008956:	ed97 7a02 	vldr	s14, [r7, #8]
 800895a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800895e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008962:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <imu_ahrs_update+0x864>)
 8008964:	edc3 7a00 	vstr	s15, [r3]
 8008968:	e024      	b.n	80089b4 <imu_ahrs_update+0x874>
 800896a:	bf00      	nop
 800896c:	20003210 	.word	0x20003210
 8008970:	20003214 	.word	0x20003214
 8008974:	2000321c 	.word	0x2000321c
 8008978:	20003220 	.word	0x20003220
 800897c:	2000320c 	.word	0x2000320c
 8008980:	20003218 	.word	0x20003218
 8008984:	00000000 	.word	0x00000000
 8008988:	200031f4 	.word	0x200031f4
 800898c:	200031f8 	.word	0x200031f8
 8008990:	200031fc 	.word	0x200031fc
 8008994:	3e19999a 	.word	0x3e19999a
 8008998:	20003200 	.word	0x20003200
 800899c:	20003204 	.word	0x20003204
 80089a0:	20003208 	.word	0x20003208
 80089a4:	200031e8 	.word	0x200031e8
 80089a8:	200031ec 	.word	0x200031ec
 80089ac:	200031f0 	.word	0x200031f0
 80089b0:	20000010 	.word	0x20000010
	q2 = tempq2 * norm;
 80089b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80089b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80089bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <imu_ahrs_update+0x8a0>)
 80089c2:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 80089c6:	ed97 7a00 	vldr	s14, [r7]
 80089ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80089ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d2:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <imu_ahrs_update+0x8a4>)
 80089d4:	edc3 7a00 	vstr	s15, [r3]
}
 80089d8:	bf00      	nop
 80089da:	3778      	adds	r7, #120	; 0x78
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	200031ec 	.word	0x200031ec
 80089e4:	200031f0 	.word	0x200031f0

080089e8 <imu_attitude_update>:

void imu_attitude_update(void) {
 80089e8:	b5b0      	push	{r4, r5, r7, lr}
 80089ea:	af00      	add	r7, sp, #0
	if (IMU_ORIENTATION == 0) {
		/* yaw    -pi----pi */
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 80089ec:	4b63      	ldr	r3, [pc, #396]	; (8008b7c <imu_attitude_update+0x194>)
 80089ee:	edd3 7a00 	vldr	s15, [r3]
 80089f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80089f6:	4b62      	ldr	r3, [pc, #392]	; (8008b80 <imu_attitude_update+0x198>)
 80089f8:	edd3 7a00 	vldr	s15, [r3]
 80089fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a00:	4b60      	ldr	r3, [pc, #384]	; (8008b84 <imu_attitude_update+0x19c>)
 8008a02:	edd3 7a00 	vldr	s15, [r3]
 8008a06:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008a0a:	4b5f      	ldr	r3, [pc, #380]	; (8008b88 <imu_attitude_update+0x1a0>)
 8008a0c:	edd3 7a00 	vldr	s15, [r3]
 8008a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a14:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q2 * q2 - 2 * q3 * q3 + 1) * IMU_YAW_INVERT;
 8008a18:	ee17 0a90 	vmov	r0, s15
 8008a1c:	f7f7 fd94 	bl	8000548 <__aeabi_f2d>
 8008a20:	4604      	mov	r4, r0
 8008a22:	460d      	mov	r5, r1
 8008a24:	4b56      	ldr	r3, [pc, #344]	; (8008b80 <imu_attitude_update+0x198>)
 8008a26:	edd3 7a00 	vldr	s15, [r3]
 8008a2a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008a2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008a32:	4b53      	ldr	r3, [pc, #332]	; (8008b80 <imu_attitude_update+0x198>)
 8008a34:	edd3 7a00 	vldr	s15, [r3]
 8008a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a3c:	4b52      	ldr	r3, [pc, #328]	; (8008b88 <imu_attitude_update+0x1a0>)
 8008a3e:	edd3 7a00 	vldr	s15, [r3]
 8008a42:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008a46:	4b50      	ldr	r3, [pc, #320]	; (8008b88 <imu_attitude_update+0x1a0>)
 8008a48:	edd3 7a00 	vldr	s15, [r3]
 8008a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a5c:	ee17 0a90 	vmov	r0, s15
 8008a60:	f7f7 fd72 	bl	8000548 <__aeabi_f2d>
 8008a64:	4602      	mov	r2, r0
 8008a66:	460b      	mov	r3, r1
 8008a68:	ec43 2b11 	vmov	d1, r2, r3
 8008a6c:	ec45 4b10 	vmov	d0, r4, r5
 8008a70:	f017 fcca 	bl	8020408 <atan2>
 8008a74:	ec53 2b10 	vmov	r2, r3, d0
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	f7f8 f8b4 	bl	8000be8 <__aeabi_d2f>
 8008a80:	4603      	mov	r3, r0
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 8008a82:	4a42      	ldr	r2, [pc, #264]	; (8008b8c <imu_attitude_update+0x1a4>)
 8008a84:	6093      	str	r3, [r2, #8]
		/* pitch  -pi/2----pi/2 */
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
 8008a86:	4b3d      	ldr	r3, [pc, #244]	; (8008b7c <imu_attitude_update+0x194>)
 8008a88:	edd3 7a00 	vldr	s15, [r3]
 8008a8c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008a90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008a94:	4b3c      	ldr	r3, [pc, #240]	; (8008b88 <imu_attitude_update+0x1a0>)
 8008a96:	edd3 7a00 	vldr	s15, [r3]
 8008a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a9e:	4b39      	ldr	r3, [pc, #228]	; (8008b84 <imu_attitude_update+0x19c>)
 8008aa0:	edd3 7a00 	vldr	s15, [r3]
 8008aa4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008aa8:	4b35      	ldr	r3, [pc, #212]	; (8008b80 <imu_attitude_update+0x198>)
 8008aaa:	edd3 7a00 	vldr	s15, [r3]
 8008aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ab6:	ee17 0a90 	vmov	r0, s15
 8008aba:	f7f7 fd45 	bl	8000548 <__aeabi_f2d>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	ec43 2b10 	vmov	d0, r2, r3
 8008ac6:	f017 fc6b 	bl	80203a0 <asin>
 8008aca:	ec53 2b10 	vmov	r2, r3, d0
 8008ace:	4610      	mov	r0, r2
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f7f8 f889 	bl	8000be8 <__aeabi_d2f>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	4a2c      	ldr	r2, [pc, #176]	; (8008b8c <imu_attitude_update+0x1a4>)
 8008ada:	6013      	str	r3, [r2, #0]
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8008adc:	4b28      	ldr	r3, [pc, #160]	; (8008b80 <imu_attitude_update+0x198>)
 8008ade:	edd3 7a00 	vldr	s15, [r3]
 8008ae2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008ae6:	4b28      	ldr	r3, [pc, #160]	; (8008b88 <imu_attitude_update+0x1a0>)
 8008ae8:	edd3 7a00 	vldr	s15, [r3]
 8008aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008af0:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <imu_attitude_update+0x19c>)
 8008af2:	edd3 7a00 	vldr	s15, [r3]
 8008af6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008afa:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <imu_attitude_update+0x194>)
 8008afc:	edd3 7a00 	vldr	s15, [r3]
 8008b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b04:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
 8008b08:	ee17 0a90 	vmov	r0, s15
 8008b0c:	f7f7 fd1c 	bl	8000548 <__aeabi_f2d>
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <imu_attitude_update+0x194>)
 8008b16:	edd3 7a00 	vldr	s15, [r3]
 8008b1a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008b1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008b22:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <imu_attitude_update+0x194>)
 8008b24:	edd3 7a00 	vldr	s15, [r3]
 8008b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008b2c:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <imu_attitude_update+0x198>)
 8008b2e:	edd3 7a00 	vldr	s15, [r3]
 8008b32:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <imu_attitude_update+0x198>)
 8008b38:	edd3 7a00 	vldr	s15, [r3]
 8008b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b4c:	ee17 0a90 	vmov	r0, s15
 8008b50:	f7f7 fcfa 	bl	8000548 <__aeabi_f2d>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	ec43 2b11 	vmov	d1, r2, r3
 8008b5c:	ec45 4b10 	vmov	d0, r4, r5
 8008b60:	f017 fc52 	bl	8020408 <atan2>
 8008b64:	ec53 2b10 	vmov	r2, r3, d0
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	f7f8 f83c 	bl	8000be8 <__aeabi_d2f>
 8008b70:	4603      	mov	r3, r0
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8008b72:	4a06      	ldr	r2, [pc, #24]	; (8008b8c <imu_attitude_update+0x1a4>)
 8008b74:	6053      	str	r3, [r2, #4]
		imu_heading.pit = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_PITCH_INVERT;
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
	}
}
 8008b76:	bf00      	nop
 8008b78:	bdb0      	pop	{r4, r5, r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200031e8 	.word	0x200031e8
 8008b80:	200031ec 	.word	0x200031ec
 8008b84:	20000010 	.word	0x20000010
 8008b88:	200031f0 	.word	0x200031f0
 8008b8c:	20003224 	.word	0x20003224

08008b90 <launcher_control_task>:
extern ref_magazine_data_t ref_mag_data;
extern uint32_t ref_mag_data_txno;
static uint32_t prev_power_data_no = 0;
static uint32_t prev_mag_data_no = 0;

void launcher_control_task(void *argument) {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		//event flags!
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8008b98:	4b26      	ldr	r3, [pc, #152]	; (8008c34 <launcher_control_task+0xa4>)
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	2107      	movs	r1, #7
 8008ba8:	f00e fd2a 	bl	8017600 <xEventGroupWaitBits>
		portMAX_DELAY);
		status_led(4, on_led);
 8008bac:	2100      	movs	r1, #0
 8008bae:	2004      	movs	r0, #4
 8008bb0:	f7f9 fa86 	bl	80020c0 <status_led>
		start_time = xTaskGetTickCount();
 8008bb4:	f010 f8e6 	bl	8018d84 <xTaskGetTickCount>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	60fb      	str	r3, [r7, #12]

		if (launcher_ctrl_data.enabled) {
 8008bbc:	4b1e      	ldr	r3, [pc, #120]	; (8008c38 <launcher_control_task+0xa8>)
 8008bbe:	795b      	ldrb	r3, [r3, #5]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d006      	beq.n	8008bd2 <launcher_control_task+0x42>
			launcher_control(can_motors + LFRICTION_MOTOR_ID - 1,
 8008bc4:	4b1d      	ldr	r3, [pc, #116]	; (8008c3c <launcher_control_task+0xac>)
 8008bc6:	491e      	ldr	r1, [pc, #120]	; (8008c40 <launcher_control_task+0xb0>)
 8008bc8:	4a1e      	ldr	r2, [pc, #120]	; (8008c44 <launcher_control_task+0xb4>)
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f840 	bl	8008c50 <launcher_control>
 8008bd0:	e01e      	b.n	8008c10 <launcher_control_task+0x80>
					can_motors + RFRICTION_MOTOR_ID - 1,
					can_motors + FEEDER_MOTOR_ID - 1);

		} else {
			can_motors[LFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8008bd2:	4b1d      	ldr	r3, [pc, #116]	; (8008c48 <launcher_control_task+0xb8>)
 8008bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd8:	f503 639f 	add.w	r3, r3, #1272	; 0x4f8
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
			can_motors[RFRICTION_MOTOR_ID - 1].rpm_pid.output = 0;
 8008be2:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <launcher_control_task+0xb8>)
 8008be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be8:	461a      	mov	r2, r3
 8008bea:	f04f 0300 	mov.w	r3, #0
 8008bee:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
			can_motors[FEEDER_MOTOR_ID - 1].rpm_pid.output = 0;
 8008bf2:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <launcher_control_task+0xb8>)
 8008bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f04f 0300 	mov.w	r3, #0
 8008bfe:	6493      	str	r3, [r2, #72]	; 0x48
			motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 8008c00:	2300      	movs	r3, #0
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2313      	movs	r3, #19
 8008c06:	2217      	movs	r2, #23
 8008c08:	2112      	movs	r1, #18
 8008c0a:	480f      	ldr	r0, [pc, #60]	; (8008c48 <launcher_control_task+0xb8>)
 8008c0c:	f001 fd96 	bl	800a73c <motor_send_can>
			RFRICTION_MOTOR_ID, 0);
		}
		status_led(4, off_led);
 8008c10:	2101      	movs	r1, #1
 8008c12:	2004      	movs	r0, #4
 8008c14:	f7f9 fa54 	bl	80020c0 <status_led>
		//vTaskDelay(CHASSIS_DELAY);
		xEventGroupClearBits(launcher_event_group, 0b111);
 8008c18:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <launcher_control_task+0xa4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2107      	movs	r1, #7
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f00e fdbc 	bl	801779c <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 8008c24:	f107 030c 	add.w	r3, r7, #12
 8008c28:	210a      	movs	r1, #10
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f00f fedc 	bl	80189e8 <vTaskDelayUntil>
		xEventGroupWaitBits(launcher_event_group, 0b111, pdTRUE, pdTRUE,
 8008c30:	e7b2      	b.n	8008b98 <launcher_control_task+0x8>
 8008c32:	bf00      	nop
 8008c34:	20000478 	.word	0x20000478
 8008c38:	20002ee8 	.word	0x20002ee8
 8008c3c:	20002cf0 	.word	0x20002cf0
 8008c40:	20002930 	.word	0x20002930
 8008c44:	20002840 	.word	0x20002840
 8008c48:	20001850 	.word	0x20001850
 8008c4c:	00000000 	.word	0x00000000

08008c50 <launcher_control>:
	}

}

void launcher_control(motor_data_t *left_friction_motor,
		motor_data_t *right_friction_motor, motor_data_t *feeder) {
 8008c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c54:	b094      	sub	sp, #80	; 0x50
 8008c56:	af02      	add	r7, sp, #8
 8008c58:	6378      	str	r0, [r7, #52]	; 0x34
 8008c5a:	6339      	str	r1, [r7, #48]	; 0x30
 8008c5c:	62fa      	str	r2, [r7, #44]	; 0x2c

	int16_t feeder_output = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static uint32_t overheat_time;
	static float target_ang;
	uint32_t curr_time = HAL_GetTick();
 8008c64:	f002 fc94 	bl	800b590 <HAL_GetTick>
 8008c68:	63f8      	str	r0, [r7, #60]	; 0x3c
	static uint32_t overheat_start;
	static uint32_t last_fire;
	static uint8_t fired;
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8008c6a:	4bb5      	ldr	r3, [pc, #724]	; (8008f40 <launcher_control+0x2f0>)
 8008c6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008c70:	461a      	mov	r2, r3
			* referee_limiters.feeding_speed / FEEDER_SPEED_RATIO;
 8008c72:	4bb4      	ldr	r3, [pc, #720]	; (8008f44 <launcher_control+0x2f4>)
 8008c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c78:	fb02 f303 	mul.w	r3, r2, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da00      	bge.n	8008c82 <launcher_control+0x32>
 8008c80:	3307      	adds	r3, #7
 8008c82:	10db      	asrs	r3, r3, #3
	int16_t firing_speed = launcher_ctrl_data.gun_feeding_speed
 8008c84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	if (launcher_ctrl_data.gun_feeding_speed == 0) {
 8008c88:	4bad      	ldr	r3, [pc, #692]	; (8008f40 <launcher_control+0x2f0>)
 8008c8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 80e7 	bne.w	8008e62 <launcher_control+0x212>
		feeder_output = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if (launcher_ctrl_data.override == 1) {
 8008c9a:	4ba9      	ldr	r3, [pc, #676]	; (8008f40 <launcher_control+0x2f0>)
 8008c9c:	791b      	ldrb	r3, [r3, #4]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d13b      	bne.n	8008d1a <launcher_control+0xca>
			speed_pid(
					referee_limiters.projectile_speed * FRICTION_INVERT
 8008ca2:	4ba8      	ldr	r3, [pc, #672]	; (8008f44 <launcher_control+0x2f4>)
 8008ca4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ca8:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8008caa:	4ba7      	ldr	r3, [pc, #668]	; (8008f48 <launcher_control+0x2f8>)
 8008cac:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f7 fc37 	bl	8000524 <__aeabi_i2d>
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
					left_friction_motor->raw_data.rpm,
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f7 fc2f 	bl	8000524 <__aeabi_i2d>
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4689      	mov	r9, r1
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ccc:	3338      	adds	r3, #56	; 0x38
 8008cce:	4618      	mov	r0, r3
 8008cd0:	ec49 8b11 	vmov	d1, r8, r9
 8008cd4:	ec45 4b10 	vmov	d0, r4, r5
 8008cd8:	f001 fc6e 	bl	800a5b8 <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-referee_limiters.projectile_speed * FRICTION_INVERT
 8008cdc:	4b99      	ldr	r3, [pc, #612]	; (8008f44 <launcher_control+0x2f4>)
 8008cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ce2:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8008ce4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7f7 fc19 	bl	8000524 <__aeabi_i2d>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	460d      	mov	r5, r1
					right_friction_motor->raw_data.rpm,
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7f7 fc11 	bl	8000524 <__aeabi_i2d>
 8008d02:	4680      	mov	r8, r0
 8008d04:	4689      	mov	r9, r1
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	3338      	adds	r3, #56	; 0x38
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	ec49 8b11 	vmov	d1, r8, r9
 8008d10:	ec45 4b10 	vmov	d0, r4, r5
 8008d14:	f001 fc50 	bl	800a5b8 <speed_pid>
 8008d18:	e09a      	b.n	8008e50 <launcher_control+0x200>
					&right_friction_motor->rpm_pid);

		} else if (clear_time + CLEAR_DELAY > HAL_GetTick()) {
 8008d1a:	4b8c      	ldr	r3, [pc, #560]	; (8008f4c <launcher_control+0x2fc>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8008d22:	f002 fc35 	bl	800b590 <HAL_GetTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	d95f      	bls.n	8008dec <launcher_control+0x19c>
			speed_pid(
					referee_limiters.projectile_speed * FRICTION_INVERT
 8008d2c:	4b85      	ldr	r3, [pc, #532]	; (8008f44 <launcher_control+0x2f4>)
 8008d2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d32:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8008d34:	4b84      	ldr	r3, [pc, #528]	; (8008f48 <launcher_control+0x2f8>)
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f7 fbf2 	bl	8000524 <__aeabi_i2d>
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
					left_friction_motor->raw_data.rpm,
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f7 fbea 	bl	8000524 <__aeabi_i2d>
 8008d50:	4680      	mov	r8, r0
 8008d52:	4689      	mov	r9, r1
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d56:	3338      	adds	r3, #56	; 0x38
 8008d58:	4618      	mov	r0, r3
 8008d5a:	ec49 8b11 	vmov	d1, r8, r9
 8008d5e:	ec45 4b10 	vmov	d0, r4, r5
 8008d62:	f001 fc29 	bl	800a5b8 <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-referee_limiters.projectile_speed * FRICTION_INVERT
 8008d66:	4b77      	ldr	r3, [pc, #476]	; (8008f44 <launcher_control+0x2f4>)
 8008d68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d6c:	461a      	mov	r2, r3
							* PROJECTILE_SPEED_RATIO,
 8008d6e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8008d72:	fb02 f303 	mul.w	r3, r2, r3
			speed_pid(
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7f7 fbd4 	bl	8000524 <__aeabi_i2d>
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	460d      	mov	r5, r1
					right_friction_motor->raw_data.rpm,
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f7 fbcc 	bl	8000524 <__aeabi_i2d>
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4689      	mov	r9, r1
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	3338      	adds	r3, #56	; 0x38
 8008d94:	4618      	mov	r0, r3
 8008d96:	ec49 8b11 	vmov	d1, r8, r9
 8008d9a:	ec45 4b10 	vmov	d0, r4, r5
 8008d9e:	f001 fc0b 	bl	800a5b8 <speed_pid>
					&right_friction_motor->rpm_pid);
			if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 8008da2:	4b6b      	ldr	r3, [pc, #428]	; (8008f50 <launcher_control+0x300>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d11b      	bne.n	8008de2 <launcher_control+0x192>
				if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 8008daa:	4b6a      	ldr	r3, [pc, #424]	; (8008f54 <launcher_control+0x304>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8008db2:	f002 fbed 	bl	800b590 <HAL_GetTick>
 8008db6:	4603      	mov	r3, r0
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d305      	bcc.n	8008dc8 <launcher_control+0x178>
						|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008dc2:	4a65      	ldr	r2, [pc, #404]	; (8008f58 <launcher_control+0x308>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	da07      	bge.n	8008dd8 <launcher_control+0x188>
					unjamming = 0;
 8008dc8:	4b61      	ldr	r3, [pc, #388]	; (8008f50 <launcher_control+0x300>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	701a      	strb	r2, [r3, #0]
#ifndef ANGLE_FEEDER
					feeder_output = firing_speed;
 8008dce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008dd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008dd6:	e03b      	b.n	8008e50 <launcher_control+0x200>
#endif
				} else {
					feeder_output = FEEDER_UNJAM_SPD;
 8008dd8:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 8008ddc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008de0:	e036      	b.n	8008e50 <launcher_control+0x200>
				}
			} else {
#ifndef ANGLE_FEEDER
				feeder_output = firing_speed;
 8008de2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008de6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008dea:	e031      	b.n	8008e50 <launcher_control+0x200>
;
#endif
			}

		} else if (ref_game_state.game_progress == 4){
 8008dec:	4b5b      	ldr	r3, [pc, #364]	; (8008f5c <launcher_control+0x30c>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f023 030f 	bic.w	r3, r3, #15
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d122      	bne.n	8008e40 <launcher_control+0x1f0>

			speed_pid(FRICTION_SB_SPIN * FRICTION_INVERT,
					left_friction_motor->raw_data.rpm,
 8008dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(FRICTION_SB_SPIN * FRICTION_INVERT,
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f7 fb8f 	bl	8000524 <__aeabi_i2d>
 8008e06:	4604      	mov	r4, r0
 8008e08:	460d      	mov	r5, r1
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0c:	3338      	adds	r3, #56	; 0x38
 8008e0e:	4618      	mov	r0, r3
 8008e10:	ec45 4b11 	vmov	d1, r4, r5
 8008e14:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8008f30 <launcher_control+0x2e0>
 8008e18:	f001 fbce 	bl	800a5b8 <speed_pid>
					&left_friction_motor->rpm_pid);
			speed_pid(
					-FRICTION_SB_SPIN * FRICTION_INVERT,
					right_friction_motor->raw_data.rpm,
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
			speed_pid(
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f7 fb7e 	bl	8000524 <__aeabi_i2d>
 8008e28:	4604      	mov	r4, r0
 8008e2a:	460d      	mov	r5, r1
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	3338      	adds	r3, #56	; 0x38
 8008e30:	4618      	mov	r0, r3
 8008e32:	ec45 4b11 	vmov	d1, r4, r5
 8008e36:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8008f38 <launcher_control+0x2e8>
 8008e3a:	f001 fbbd 	bl	800a5b8 <speed_pid>
 8008e3e:	e007      	b.n	8008e50 <launcher_control+0x200>
					&right_friction_motor->rpm_pid);

		}else {
			left_friction_motor->rpm_pid.output = 0;
 8008e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	659a      	str	r2, [r3, #88]	; 0x58
			right_friction_motor->rpm_pid.output = 0;
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	659a      	str	r2, [r3, #88]	; 0x58
		}
		overheat_time = curr_time + 1000;
 8008e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e52:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008e56:	4a42      	ldr	r2, [pc, #264]	; (8008f60 <launcher_control+0x310>)
 8008e58:	6013      	str	r3, [r2, #0]
		overheat = 0;
 8008e5a:	4b42      	ldr	r3, [pc, #264]	; (8008f64 <launcher_control+0x314>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	e1fe      	b.n	8009260 <launcher_control+0x610>
	} else {

#ifdef OVERHEAT_PROTECTION
		if (overheat == 1) {
 8008e62:	4b40      	ldr	r3, [pc, #256]	; (8008f64 <launcher_control+0x314>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d108      	bne.n	8008e7c <launcher_control+0x22c>
			if (curr_time - overheat_start >= OVERHEAT_TIME) {
 8008e6a:	4b3f      	ldr	r3, [pc, #252]	; (8008f68 <launcher_control+0x318>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b63      	cmp	r3, #99	; 0x63
 8008e74:	d902      	bls.n	8008e7c <launcher_control+0x22c>
				overheat = 0;
 8008e76:	4a3b      	ldr	r2, [pc, #236]	; (8008f64 <launcher_control+0x314>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	7013      	strb	r3, [r2, #0]
			}
		}
		if (prev_power_data_no != ref_power_data_txno) {
 8008e7c:	4b3b      	ldr	r3, [pc, #236]	; (8008f6c <launcher_control+0x31c>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	4b3b      	ldr	r3, [pc, #236]	; (8008f70 <launcher_control+0x320>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	f000 80c9 	beq.w	800901c <launcher_control+0x3cc>
			prev_power_data_no = ref_power_data_txno;
 8008e8a:	4b39      	ldr	r3, [pc, #228]	; (8008f70 <launcher_control+0x320>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a37      	ldr	r2, [pc, #220]	; (8008f6c <launcher_control+0x31c>)
 8008e90:	6013      	str	r3, [r2, #0]
//			int16_t cur_fire_rate = fabs(launcher_ctrl_data.gun_feeding_speed* referee_limiters.feeding_speed);
			int16_t ammo_remaining;

#ifdef BULLET_17
			uint8_t active_feeder = 2;
 8008e92:	2302      	movs	r3, #2
 8008e94:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			if (ref_robot_data.shooter17_heat1_cooling_limit == 0
 8008e98:	4b36      	ldr	r3, [pc, #216]	; (8008f74 <launcher_control+0x324>)
 8008e9a:	89db      	ldrh	r3, [r3, #14]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d108      	bne.n	8008eb4 <launcher_control+0x264>
					&& ref_robot_data.shooter17_heat0_cooling_limit == 0) {
 8008ea2:	4b34      	ldr	r3, [pc, #208]	; (8008f74 <launcher_control+0x324>)
 8008ea4:	891b      	ldrh	r3, [r3, #8]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <launcher_control+0x264>
				active_feeder = 3;
 8008eac:	2303      	movs	r3, #3
 8008eae:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008eb2:	e010      	b.n	8008ed6 <launcher_control+0x286>
			} else if (ref_robot_data.shooter17_heat0_cooling_limit == 0) {
 8008eb4:	4b2f      	ldr	r3, [pc, #188]	; (8008f74 <launcher_control+0x324>)
 8008eb6:	891b      	ldrh	r3, [r3, #8]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <launcher_control+0x276>
				active_feeder = 1;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008ec4:	e007      	b.n	8008ed6 <launcher_control+0x286>
			} else if (ref_robot_data.shooter17_heat1_cooling_limit == 0) {
 8008ec6:	4b2b      	ldr	r3, [pc, #172]	; (8008f74 <launcher_control+0x324>)
 8008ec8:	89db      	ldrh	r3, [r3, #14]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <launcher_control+0x286>
				active_feeder = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			}

			if (active_feeder == 2) {
 8008ed6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d10e      	bne.n	8008efc <launcher_control+0x2ac>
				if (ref_power_data.shooter_heat0
 8008ede:	4b26      	ldr	r3, [pc, #152]	; (8008f78 <launcher_control+0x328>)
 8008ee0:	895b      	ldrh	r3, [r3, #10]
 8008ee2:	b29a      	uxth	r2, r3
						>= ref_power_data.shooter_heat1) {
 8008ee4:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <launcher_control+0x328>)
 8008ee6:	899b      	ldrh	r3, [r3, #12]
 8008ee8:	b29b      	uxth	r3, r3
				if (ref_power_data.shooter_heat0
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d303      	bcc.n	8008ef6 <launcher_control+0x2a6>
					active_feeder = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008ef4:	e002      	b.n	8008efc <launcher_control+0x2ac>
				} else {
					active_feeder = 1;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				}

			}

			if (active_feeder == 0) {
 8008efc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d13d      	bne.n	8008f80 <launcher_control+0x330>
				ammo_remaining =
						((((int16_t) ref_robot_data.shooter17_heat0_cooling_limit
 8008f04:	4b1b      	ldr	r3, [pc, #108]	; (8008f74 <launcher_control+0x324>)
 8008f06:	891b      	ldrh	r3, [r3, #8]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	461a      	mov	r2, r3
								- (int16_t) ref_power_data.shooter_heat0))
 8008f0e:	4b1a      	ldr	r3, [pc, #104]	; (8008f78 <launcher_control+0x328>)
 8008f10:	895b      	ldrh	r3, [r3, #10]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	b21b      	sxth	r3, r3
 8008f16:	1ad1      	subs	r1, r2, r3
								/ BULLET_17_HEAT) - 2;
 8008f18:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <launcher_control+0x32c>)
 8008f1a:	fb83 2301 	smull	r2, r3, r3, r1
 8008f1e:	109a      	asrs	r2, r3, #2
 8008f20:	17cb      	asrs	r3, r1, #31
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b02      	subs	r3, #2
 8008f28:	b29b      	uxth	r3, r3
				ammo_remaining =
 8008f2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008f2e:	e040      	b.n	8008fb2 <launcher_control+0x362>
 8008f30:	00000000 	.word	0x00000000
 8008f34:	c08f4000 	.word	0xc08f4000
 8008f38:	00000000 	.word	0x00000000
 8008f3c:	408f4000 	.word	0x408f4000
 8008f40:	20002ee8 	.word	0x20002ee8
 8008f44:	200032a0 	.word	0x200032a0
 8008f48:	fffffe98 	.word	0xfffffe98
 8008f4c:	20003288 	.word	0x20003288
 8008f50:	2000328c 	.word	0x2000328c
 8008f54:	20003284 	.word	0x20003284
 8008f58:	ffffd9b8 	.word	0xffffd9b8
 8008f5c:	200032fc 	.word	0x200032fc
 8008f60:	20003294 	.word	0x20003294
 8008f64:	2000328d 	.word	0x2000328d
 8008f68:	20003298 	.word	0x20003298
 8008f6c:	20003290 	.word	0x20003290
 8008f70:	20003354 	.word	0x20003354
 8008f74:	20003324 	.word	0x20003324
 8008f78:	20003344 	.word	0x20003344
 8008f7c:	66666667 	.word	0x66666667
			} else if (active_feeder == 1) {
 8008f80:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d114      	bne.n	8008fb2 <launcher_control+0x362>
				ammo_remaining =
						((((int16_t) ref_robot_data.shooter17_heat1_cooling_limit
 8008f88:	4ba5      	ldr	r3, [pc, #660]	; (8009220 <launcher_control+0x5d0>)
 8008f8a:	89db      	ldrh	r3, [r3, #14]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	b21b      	sxth	r3, r3
 8008f90:	461a      	mov	r2, r3
								- (int16_t) ref_power_data.shooter_heat1))
 8008f92:	4ba4      	ldr	r3, [pc, #656]	; (8009224 <launcher_control+0x5d4>)
 8008f94:	899b      	ldrh	r3, [r3, #12]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	b21b      	sxth	r3, r3
 8008f9a:	1ad1      	subs	r1, r2, r3
								/ BULLET_17_HEAT) - 2;
 8008f9c:	4ba2      	ldr	r3, [pc, #648]	; (8009228 <launcher_control+0x5d8>)
 8008f9e:	fb83 2301 	smull	r2, r3, r3, r1
 8008fa2:	109a      	asrs	r2, r3, #2
 8008fa4:	17cb      	asrs	r3, r1, #31
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b02      	subs	r3, #2
 8008fac:	b29b      	uxth	r3, r3
				ammo_remaining =
 8008fae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			}
			if (active_feeder == 3) {
 8008fb2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d103      	bne.n	8008fc2 <launcher_control+0x372>
				ammo_remaining = 1000;
 8008fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008fbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			}
#endif

#endif

			if (ammo_remaining < 3) {
 8008fc2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	dc06      	bgt.n	8008fd8 <launcher_control+0x388>
				overheat = 1;
 8008fca:	4a98      	ldr	r2, [pc, #608]	; (800922c <launcher_control+0x5dc>)
 8008fcc:	2301      	movs	r3, #1
 8008fce:	7013      	strb	r3, [r2, #0]
				overheat_start = curr_time;
 8008fd0:	4a97      	ldr	r2, [pc, #604]	; (8009230 <launcher_control+0x5e0>)
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e011      	b.n	8008ffc <launcher_control+0x3ac>
			} else {
				if (ammo_remaining < 10){
 8008fd8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	dc0d      	bgt.n	8008ffc <launcher_control+0x3ac>
					firing_speed = firing_speed * ammo_remaining/10;
 8008fe0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008fe4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8008fe8:	fb02 f103 	mul.w	r1, r2, r3
 8008fec:	4b8e      	ldr	r3, [pc, #568]	; (8009228 <launcher_control+0x5d8>)
 8008fee:	fb83 2301 	smull	r2, r3, r3, r1
 8008ff2:	109a      	asrs	r2, r3, #2
 8008ff4:	17cb      	asrs	r3, r1, #31
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				}
			}
			overheat_time = curr_time
					+ (ammo_remaining * 60 * 1000) / (firing_speed) - 50;
 8008ffc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8009000:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009004:	fb03 f202 	mul.w	r2, r3, r2
 8009008:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800900c:	fb92 f3f3 	sdiv	r3, r2, r3
 8009010:	461a      	mov	r2, r3
 8009012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009014:	4413      	add	r3, r2
 8009016:	3b32      	subs	r3, #50	; 0x32
			overheat_time = curr_time
 8009018:	4a86      	ldr	r2, [pc, #536]	; (8009234 <launcher_control+0x5e4>)
 800901a:	6013      	str	r3, [r2, #0]
		}
#endif

		//TODO: add in speed checks and shtuffasdwqwe
		clear_time = HAL_GetTick();
 800901c:	f002 fab8 	bl	800b590 <HAL_GetTick>
 8009020:	4603      	mov	r3, r0
 8009022:	4a85      	ldr	r2, [pc, #532]	; (8009238 <launcher_control+0x5e8>)
 8009024:	6013      	str	r3, [r2, #0]
		speed_pid(
				referee_limiters.projectile_speed * FRICTION_INVERT
 8009026:	4b85      	ldr	r3, [pc, #532]	; (800923c <launcher_control+0x5ec>)
 8009028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800902c:	461a      	mov	r2, r3
						* PROJECTILE_SPEED_RATIO,
 800902e:	4b84      	ldr	r3, [pc, #528]	; (8009240 <launcher_control+0x5f0>)
 8009030:	fb02 f303 	mul.w	r3, r2, r3
		speed_pid(
 8009034:	4618      	mov	r0, r3
 8009036:	f7f7 fa75 	bl	8000524 <__aeabi_i2d>
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
				left_friction_motor->raw_data.rpm,
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(
 8009044:	4618      	mov	r0, r3
 8009046:	f7f7 fa6d 	bl	8000524 <__aeabi_i2d>
 800904a:	4604      	mov	r4, r0
 800904c:	460d      	mov	r5, r1
 800904e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009050:	3338      	adds	r3, #56	; 0x38
 8009052:	4618      	mov	r0, r3
 8009054:	ec45 4b11 	vmov	d1, r4, r5
 8009058:	ec49 8b10 	vmov	d0, r8, r9
 800905c:	f001 faac 	bl	800a5b8 <speed_pid>
				&left_friction_motor->rpm_pid);
		speed_pid(
				-referee_limiters.projectile_speed * FRICTION_INVERT
 8009060:	4b76      	ldr	r3, [pc, #472]	; (800923c <launcher_control+0x5ec>)
 8009062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009066:	461a      	mov	r2, r3
						* PROJECTILE_SPEED_RATIO,
 8009068:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800906c:	fb02 f303 	mul.w	r3, r2, r3
		speed_pid(
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 fa57 	bl	8000524 <__aeabi_i2d>
 8009076:	4680      	mov	r8, r0
 8009078:	4689      	mov	r9, r1
				right_friction_motor->raw_data.rpm,
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(
 8009080:	4618      	mov	r0, r3
 8009082:	f7f7 fa4f 	bl	8000524 <__aeabi_i2d>
 8009086:	4604      	mov	r4, r0
 8009088:	460d      	mov	r5, r1
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	3338      	adds	r3, #56	; 0x38
 800908e:	4618      	mov	r0, r3
 8009090:	ec45 4b11 	vmov	d1, r4, r5
 8009094:	ec49 8b10 	vmov	d0, r8, r9
 8009098:	f001 fa8e 	bl	800a5b8 <speed_pid>

		}
		last_fire = curr_time;
#endif

		if (((((fabs(left_friction_motor->raw_data.rpm)
 800909c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7f7 fa3e 	bl	8000524 <__aeabi_i2d>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4692      	mov	sl, r2
 80090ae:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
				- fabs(
						(launcher_ctrl_data.projectile_speed
 80090b2:	4b64      	ldr	r3, [pc, #400]	; (8009244 <launcher_control+0x5f4>)
 80090b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090b8:	461a      	mov	r2, r3
								* PROJECTILE_SPEED_RATIO
								* referee_limiters.projectile_speed))
 80090ba:	4b60      	ldr	r3, [pc, #384]	; (800923c <launcher_control+0x5ec>)
 80090bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
 80090c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80090c8:	fb02 f303 	mul.w	r3, r2, r3
				- fabs(
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7f7 fa29 	bl	8000524 <__aeabi_i2d>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	623a      	str	r2, [r7, #32]
 80090d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24
 80090de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090e2:	4650      	mov	r0, sl
 80090e4:	4659      	mov	r1, fp
 80090e6:	f7f7 f8cf 	bl	8000288 <__aeabi_dsub>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4610      	mov	r0, r2
 80090f0:	4619      	mov	r1, r3
		if (((((fabs(left_friction_motor->raw_data.rpm)
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	4b54      	ldr	r3, [pc, #336]	; (8009248 <launcher_control+0x5f8>)
 80090f8:	f7f7 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 80ae 	beq.w	8009260 <launcher_control+0x610>
				< LAUNCHER_MARGIN)))
				&& ((fabs(right_friction_motor->raw_data.rpm)
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800910a:	4618      	mov	r0, r3
 800910c:	f7f7 fa0a 	bl	8000524 <__aeabi_i2d>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	61ba      	str	r2, [r7, #24]
 8009116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800911a:	61fb      	str	r3, [r7, #28]
						- fabs(
								(launcher_ctrl_data.projectile_speed
 800911c:	4b49      	ldr	r3, [pc, #292]	; (8009244 <launcher_control+0x5f4>)
 800911e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009122:	461a      	mov	r2, r3
										* PROJECTILE_SPEED_RATIO
										* referee_limiters.projectile_speed))
 8009124:	4b45      	ldr	r3, [pc, #276]	; (800923c <launcher_control+0x5ec>)
 8009126:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800912a:	fb02 f303 	mul.w	r3, r2, r3
 800912e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009132:	fb02 f303 	mul.w	r3, r2, r3
						- fabs(
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 f9f4 	bl	8000524 <__aeabi_i2d>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	613a      	str	r2, [r7, #16]
 8009142:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800914c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009150:	f7f7 f89a 	bl	8000288 <__aeabi_dsub>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4610      	mov	r0, r2
 800915a:	4619      	mov	r1, r3
				&& ((fabs(right_friction_motor->raw_data.rpm)
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	4b39      	ldr	r3, [pc, #228]	; (8009248 <launcher_control+0x5f8>)
 8009162:	f7f7 fcbb 	bl	8000adc <__aeabi_dcmplt>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d079      	beq.n	8009260 <launcher_control+0x610>
						< LAUNCHER_MARGIN)))
				&& ((fabs(right_friction_motor->raw_data.rpm)
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009172:	4618      	mov	r0, r3
 8009174:	f7f7 f9d6 	bl	8000524 <__aeabi_i2d>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	60ba      	str	r2, [r7, #8]
 800917e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009182:	60fb      	str	r3, [r7, #12]
						- fabs(left_friction_motor->raw_data.rpm))
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800918a:	4618      	mov	r0, r3
 800918c:	f7f7 f9ca 	bl	8000524 <__aeabi_i2d>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	603a      	str	r2, [r7, #0]
 8009196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800919a:	607b      	str	r3, [r7, #4]
 800919c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091a4:	f7f7 f870 	bl	8000288 <__aeabi_dsub>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4610      	mov	r0, r2
 80091ae:	4619      	mov	r1, r3
				&& ((fabs(right_friction_motor->raw_data.rpm)
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	4b24      	ldr	r3, [pc, #144]	; (8009248 <launcher_control+0x5f8>)
 80091b6:	f7f7 fc91 	bl	8000adc <__aeabi_dcmplt>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d04f      	beq.n	8009260 <launcher_control+0x610>
						< LAUNCHER_DIFF_MARGIN)) {

			if ((feeder->raw_data.torque > FEEDER_JAM_TORQUE)) {
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80091c6:	f242 6248 	movw	r2, #9800	; 0x2648
 80091ca:	4293      	cmp	r3, r2
 80091cc:	dd07      	ble.n	80091de <launcher_control+0x58e>
				unjamming = 1;
 80091ce:	4b1f      	ldr	r3, [pc, #124]	; (800924c <launcher_control+0x5fc>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	701a      	strb	r2, [r3, #0]
				start_time = HAL_GetTick();
 80091d4:	f002 f9dc 	bl	800b590 <HAL_GetTick>
 80091d8:	4603      	mov	r3, r0
 80091da:	4a1d      	ldr	r2, [pc, #116]	; (8009250 <launcher_control+0x600>)
 80091dc:	6013      	str	r3, [r2, #0]
			}

			if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 80091de:	4b1b      	ldr	r3, [pc, #108]	; (800924c <launcher_control+0x5fc>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d138      	bne.n	8009258 <launcher_control+0x608>
				if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 80091e6:	4b1a      	ldr	r3, [pc, #104]	; (8009250 <launcher_control+0x600>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 80091ee:	f002 f9cf 	bl	800b590 <HAL_GetTick>
 80091f2:	4603      	mov	r3, r0
 80091f4:	429c      	cmp	r4, r3
 80091f6:	d305      	bcc.n	8009204 <launcher_control+0x5b4>
						|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80091fe:	4a15      	ldr	r2, [pc, #84]	; (8009254 <launcher_control+0x604>)
 8009200:	4293      	cmp	r3, r2
 8009202:	da07      	bge.n	8009214 <launcher_control+0x5c4>
					unjamming = 0;
 8009204:	4b11      	ldr	r3, [pc, #68]	; (800924c <launcher_control+0x5fc>)
 8009206:	2200      	movs	r2, #0
 8009208:	701a      	strb	r2, [r3, #0]
#ifndef ANGLE_FEEDER
					feeder_output = firing_speed;
 800920a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800920e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009212:	e025      	b.n	8009260 <launcher_control+0x610>
#endif
				} else {
					feeder_output = FEEDER_UNJAM_SPD;
 8009214:	f64f 73c4 	movw	r3, #65476	; 0xffc4
 8009218:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800921c:	e020      	b.n	8009260 <launcher_control+0x610>
 800921e:	bf00      	nop
 8009220:	20003324 	.word	0x20003324
 8009224:	20003344 	.word	0x20003344
 8009228:	66666667 	.word	0x66666667
 800922c:	2000328d 	.word	0x2000328d
 8009230:	20003298 	.word	0x20003298
 8009234:	20003294 	.word	0x20003294
 8009238:	20003288 	.word	0x20003288
 800923c:	200032a0 	.word	0x200032a0
 8009240:	fffffe98 	.word	0xfffffe98
 8009244:	20002ee8 	.word	0x20002ee8
 8009248:	40590000 	.word	0x40590000
 800924c:	2000328c 	.word	0x2000328c
 8009250:	20003284 	.word	0x20003284
 8009254:	ffffd9b8 	.word	0xffffd9b8
				}
			} else {
#ifndef ANGLE_FEEDER
				feeder_output = firing_speed;
 8009258:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800925c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}

		}
	}

	if ((overheat == 1) && launcher_ctrl_data.override == 0) {
 8009260:	4b35      	ldr	r3, [pc, #212]	; (8009338 <launcher_control+0x6e8>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d106      	bne.n	8009276 <launcher_control+0x626>
 8009268:	4b34      	ldr	r3, [pc, #208]	; (800933c <launcher_control+0x6ec>)
 800926a:	791b      	ldrb	r3, [r3, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <launcher_control+0x626>
		feeder_output = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}

	if (unjamming == 1) { // if unjam time reached, or jam on reverse torque
 8009276:	4b32      	ldr	r3, [pc, #200]	; (8009340 <launcher_control+0x6f0>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d111      	bne.n	80092a2 <launcher_control+0x652>
		if ((start_time + FEEDER_UNJAM_TIME < HAL_GetTick())
 800927e:	4b31      	ldr	r3, [pc, #196]	; (8009344 <launcher_control+0x6f4>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8009286:	f002 f983 	bl	800b590 <HAL_GetTick>
 800928a:	4603      	mov	r3, r0
 800928c:	429c      	cmp	r4, r3
 800928e:	d305      	bcc.n	800929c <launcher_control+0x64c>
				|| (feeder->raw_data.torque < -FEEDER_JAM_TORQUE)) {
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009296:	4a2c      	ldr	r2, [pc, #176]	; (8009348 <launcher_control+0x6f8>)
 8009298:	4293      	cmp	r3, r2
 800929a:	da02      	bge.n	80092a2 <launcher_control+0x652>
			unjamming = 0;
 800929c:	4b28      	ldr	r3, [pc, #160]	; (8009340 <launcher_control+0x6f0>)
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
				(feeder_output < -FEEDER_MAX_RPM) ?
						-FEEDER_MAX_RPM : feeder_output;
	}
#endif

	if (feeder_output == 0) {
 80092a2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d111      	bne.n	80092ce <launcher_control+0x67e>
//		feeder->rpm_pid.output = 0;
		speed_pid(0, feeder->raw_data.rpm, &feeder->rpm_pid);
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7f7 f937 	bl	8000524 <__aeabi_i2d>
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	3338      	adds	r3, #56	; 0x38
 80092be:	4618      	mov	r0, r3
 80092c0:	ec45 4b11 	vmov	d1, r4, r5
 80092c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009330 <launcher_control+0x6e0>
 80092c8:	f001 f976 	bl	800a5b8 <speed_pid>
 80092cc:	e021      	b.n	8009312 <launcher_control+0x6c2>
	} else {
		speed_pid(feeder_output * feeder->angle_data.gearbox_ratio,
 80092ce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80092e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e4:	ee17 0a90 	vmov	r0, s15
 80092e8:	f7f7 f92e 	bl	8000548 <__aeabi_f2d>
 80092ec:	4604      	mov	r4, r0
 80092ee:	460d      	mov	r5, r1
				feeder->raw_data.rpm, &feeder->rpm_pid);
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		speed_pid(feeder_output * feeder->angle_data.gearbox_ratio,
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f7 f914 	bl	8000524 <__aeabi_i2d>
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	3338      	adds	r3, #56	; 0x38
 8009304:	4618      	mov	r0, r3
 8009306:	ec49 8b11 	vmov	d1, r8, r9
 800930a:	ec45 4b10 	vmov	d0, r4, r5
 800930e:	f001 f953 	bl	800a5b8 <speed_pid>
		//speed_pid(feeder_output * 36,feeder->raw_data.rpm, &feeder->rpm_pid);
	}

	motor_send_can(can_motors, FEEDER_MOTOR_ID, LFRICTION_MOTOR_ID,
 8009312:	2300      	movs	r3, #0
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	2313      	movs	r3, #19
 8009318:	2217      	movs	r2, #23
 800931a:	2112      	movs	r1, #18
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <launcher_control+0x6fc>)
 800931e:	f001 fa0d 	bl	800a73c <motor_send_can>
	RFRICTION_MOTOR_ID, 0);
}
 8009322:	bf00      	nop
 8009324:	3748      	adds	r7, #72	; 0x48
 8009326:	46bd      	mov	sp, r7
 8009328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800932c:	f3af 8000 	nop.w
	...
 8009338:	2000328d 	.word	0x2000328d
 800933c:	20002ee8 	.word	0x20002ee8
 8009340:	2000328c 	.word	0x2000328c
 8009344:	20003284 	.word	0x20003284
 8009348:	ffffd9b8 	.word	0xffffd9b8
 800934c:	20001850 	.word	0x20001850

08009350 <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t* motor){
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	//general config:
		switch(motor->motor_type){
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	789b      	ldrb	r3, [r3, #2]
 800935c:	3b01      	subs	r3, #1
 800935e:	2b08      	cmp	r3, #8
 8009360:	d849      	bhi.n	80093f6 <set_motor_config+0xa6>
 8009362:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <set_motor_config+0x18>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093c3 	.word	0x080093c3
 800936c:	080093dd 	.word	0x080093dd
 8009370:	0800938d 	.word	0x0800938d
 8009374:	080093a7 	.word	0x080093a7
 8009378:	0800938d 	.word	0x0800938d
 800937c:	080093dd 	.word	0x080093dd
 8009380:	080093dd 	.word	0x080093dd
 8009384:	0800938d 	.word	0x0800938d
 8009388:	080093c3 	.word	0x080093c3
		case TYPE_M3508_ANGLE:
		case TYPE_M3508_STEPS:
		case TYPE_M3508:
			motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1d      	ldr	r2, [pc, #116]	; (8009404 <set_motor_config+0xb4>)
 8009390:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <set_motor_config+0xb8>)
 8009398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80093a2:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 80093a4:	e028      	b.n	80093f8 <set_motor_config+0xa8>
		case TYPE_M3508_NGEARBOX:
			motor->angle_data.gearbox_ratio = 1;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = M3508_MAX_RPM;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a15      	ldr	r2, [pc, #84]	; (8009408 <set_motor_config+0xb8>)
 80093b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80093be:	65da      	str	r2, [r3, #92]	; 0x5c

		break;
 80093c0:	e01a      	b.n	80093f8 <set_motor_config+0xa8>
		case TYPE_GM6020:
		case TYPE_GM6020_720:
			motor->angle_data.gearbox_ratio = 0;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = GM6020_MAX_RPM;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a0f      	ldr	r2, [pc, #60]	; (800940c <set_motor_config+0xbc>)
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a0e      	ldr	r2, [pc, #56]	; (8009410 <set_motor_config+0xc0>)
 80093d8:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 80093da:	e00d      	b.n	80093f8 <set_motor_config+0xa8>
		case TYPE_M2006:
		case TYPE_M2006_STEPS:
		case TYPE_M2006_ANGLE:
			motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a0d      	ldr	r2, [pc, #52]	; (8009414 <set_motor_config+0xc4>)
 80093e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			motor->angle_pid.physical_max = M2006_MAX_RPM;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a0c      	ldr	r2, [pc, #48]	; (8009418 <set_motor_config+0xc8>)
 80093e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80093f2:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 80093f4:	e000      	b.n	80093f8 <set_motor_config+0xa8>
		default:
			break;
 80093f6:	bf00      	nop
		}

}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	4199999a 	.word	0x4199999a
 8009408:	460ca000 	.word	0x460ca000
 800940c:	43c80000 	.word	0x43c80000
 8009410:	469c4000 	.word	0x469c4000
 8009414:	42100000 	.word	0x42100000
 8009418:	466a6000 	.word	0x466a6000

0800941c <config_motors>:

extern motor_data_t can_motors[24];
void config_motors() {
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 24; i++) {
 8009422:	2300      	movs	r3, #0
 8009424:	71fb      	strb	r3, [r7, #7]
 8009426:	e042      	b.n	80094ae <config_motors+0x92>
		//reset all the values to 0
		can_motors[i].motor_type = 0;
 8009428:	79fa      	ldrb	r2, [r7, #7]
 800942a:	49c2      	ldr	r1, [pc, #776]	; (8009734 <config_motors+0x318>)
 800942c:	4613      	mov	r3, r2
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	440b      	add	r3, r1
 8009436:	3302      	adds	r3, #2
 8009438:	2200      	movs	r2, #0
 800943a:	701a      	strb	r2, [r3, #0]
		can_motors[i].rpm_pid.output = 0;
 800943c:	79fa      	ldrb	r2, [r7, #7]
 800943e:	49bd      	ldr	r1, [pc, #756]	; (8009734 <config_motors+0x318>)
 8009440:	4613      	mov	r3, r2
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	1a9b      	subs	r3, r3, r2
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	440b      	add	r3, r1
 800944a:	3358      	adds	r3, #88	; 0x58
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
		can_motors[i].rpm_pid.integral = 0;
 8009452:	79fa      	ldrb	r2, [r7, #7]
 8009454:	49b7      	ldr	r1, [pc, #732]	; (8009734 <config_motors+0x318>)
 8009456:	4613      	mov	r3, r2
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	440b      	add	r3, r1
 8009460:	334c      	adds	r3, #76	; 0x4c
 8009462:	f04f 0200 	mov.w	r2, #0
 8009466:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.output = 0;
 8009468:	79fa      	ldrb	r2, [r7, #7]
 800946a:	49b2      	ldr	r1, [pc, #712]	; (8009734 <config_motors+0x318>)
 800946c:	4613      	mov	r3, r2
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	011b      	lsls	r3, r3, #4
 8009474:	440b      	add	r3, r1
 8009476:	3388      	adds	r3, #136	; 0x88
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.integral = 0;
 800947e:	79fa      	ldrb	r2, [r7, #7]
 8009480:	49ac      	ldr	r1, [pc, #688]	; (8009734 <config_motors+0x318>)
 8009482:	4613      	mov	r3, r2
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	440b      	add	r3, r1
 800948c:	337c      	adds	r3, #124	; 0x7c
 800948e:	f04f 0200 	mov.w	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_data.ticks = 0;
 8009494:	79fa      	ldrb	r2, [r7, #7]
 8009496:	49a7      	ldr	r1, [pc, #668]	; (8009734 <config_motors+0x318>)
 8009498:	4613      	mov	r3, r2
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	440b      	add	r3, r1
 80094a2:	3398      	adds	r3, #152	; 0x98
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i <= 24; i++) {
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	3301      	adds	r3, #1
 80094ac:	71fb      	strb	r3, [r7, #7]
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b18      	cmp	r3, #24
 80094b2:	d9b9      	bls.n	8009428 <config_motors+0xc>
	}

	//initialise motor data
#ifdef Leftwheel_MOTOR_ID
	uint8_t motor_id = Leftwheel_MOTOR_ID - 1;
 80094b4:	2300      	movs	r3, #0
 80094b6:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 80094b8:	79ba      	ldrb	r2, [r7, #6]
 80094ba:	499e      	ldr	r1, [pc, #632]	; (8009734 <config_motors+0x318>)
 80094bc:	4613      	mov	r3, r2
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	011b      	lsls	r3, r3, #4
 80094c4:	440b      	add	r3, r1
 80094c6:	3302      	adds	r3, #2
 80094c8:	2203      	movs	r2, #3
 80094ca:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80094cc:	79ba      	ldrb	r2, [r7, #6]
 80094ce:	4613      	mov	r3, r2
 80094d0:	011b      	lsls	r3, r3, #4
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	4a97      	ldr	r2, [pc, #604]	; (8009734 <config_motors+0x318>)
 80094d8:	4413      	add	r3, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff ff38 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 80094e0:	79ba      	ldrb	r2, [r7, #6]
 80094e2:	4994      	ldr	r1, [pc, #592]	; (8009734 <config_motors+0x318>)
 80094e4:	4613      	mov	r3, r2
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	440b      	add	r3, r1
 80094ee:	339c      	adds	r3, #156	; 0x9c
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80094f4:	79ba      	ldrb	r2, [r7, #6]
 80094f6:	498f      	ldr	r1, [pc, #572]	; (8009734 <config_motors+0x318>)
 80094f8:	4613      	mov	r3, r2
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	440b      	add	r3, r1
 8009502:	33b8      	adds	r3, #184	; 0xb8
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800950a:	79ba      	ldrb	r2, [r7, #6]
 800950c:	4989      	ldr	r1, [pc, #548]	; (8009734 <config_motors+0x318>)
 800950e:	4613      	mov	r3, r2
 8009510:	011b      	lsls	r3, r3, #4
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	011b      	lsls	r3, r3, #4
 8009516:	440b      	add	r3, r1
 8009518:	33b4      	adds	r3, #180	; 0xb4
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8009520:	79ba      	ldrb	r2, [r7, #6]
 8009522:	4984      	ldr	r1, [pc, #528]	; (8009734 <config_motors+0x318>)
 8009524:	4613      	mov	r3, r2
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	011b      	lsls	r3, r3, #4
 800952c:	440b      	add	r3, r1
 800952e:	3338      	adds	r3, #56	; 0x38
 8009530:	4a81      	ldr	r2, [pc, #516]	; (8009738 <config_motors+0x31c>)
 8009532:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8009534:	79ba      	ldrb	r2, [r7, #6]
 8009536:	497f      	ldr	r1, [pc, #508]	; (8009734 <config_motors+0x318>)
 8009538:	4613      	mov	r3, r2
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	1a9b      	subs	r3, r3, r2
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	440b      	add	r3, r1
 8009542:	333c      	adds	r3, #60	; 0x3c
 8009544:	4a7d      	ldr	r2, [pc, #500]	; (800973c <config_motors+0x320>)
 8009546:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8009548:	79ba      	ldrb	r2, [r7, #6]
 800954a:	497a      	ldr	r1, [pc, #488]	; (8009734 <config_motors+0x318>)
 800954c:	4613      	mov	r3, r2
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	1a9b      	subs	r3, r3, r2
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	440b      	add	r3, r1
 8009556:	3340      	adds	r3, #64	; 0x40
 8009558:	4a79      	ldr	r2, [pc, #484]	; (8009740 <config_motors+0x324>)
 800955a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800955c:	79ba      	ldrb	r2, [r7, #6]
 800955e:	4975      	ldr	r1, [pc, #468]	; (8009734 <config_motors+0x318>)
 8009560:	4613      	mov	r3, r2
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	011b      	lsls	r3, r3, #4
 8009568:	440b      	add	r3, r1
 800956a:	33d4      	adds	r3, #212	; 0xd4
 800956c:	4a75      	ldr	r2, [pc, #468]	; (8009744 <config_motors+0x328>)
 800956e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8009570:	79ba      	ldrb	r2, [r7, #6]
 8009572:	4970      	ldr	r1, [pc, #448]	; (8009734 <config_motors+0x318>)
 8009574:	4613      	mov	r3, r2
 8009576:	011b      	lsls	r3, r3, #4
 8009578:	1a9b      	subs	r3, r3, r2
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	440b      	add	r3, r1
 800957e:	3350      	adds	r3, #80	; 0x50
 8009580:	4a71      	ldr	r2, [pc, #452]	; (8009748 <config_motors+0x32c>)
 8009582:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8009584:	79ba      	ldrb	r2, [r7, #6]
 8009586:	496b      	ldr	r1, [pc, #428]	; (8009734 <config_motors+0x318>)
 8009588:	4613      	mov	r3, r2
 800958a:	011b      	lsls	r3, r3, #4
 800958c:	1a9b      	subs	r3, r3, r2
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	440b      	add	r3, r1
 8009592:	3354      	adds	r3, #84	; 0x54
 8009594:	4a6d      	ldr	r2, [pc, #436]	; (800974c <config_motors+0x330>)
 8009596:	601a      	str	r2, [r3, #0]
#endif

#ifdef Rightwheel_MOTOR_ID
	motor_id =Rightwheel_MOTOR_ID - 1;
 8009598:	2301      	movs	r3, #1
 800959a:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 800959c:	79ba      	ldrb	r2, [r7, #6]
 800959e:	4965      	ldr	r1, [pc, #404]	; (8009734 <config_motors+0x318>)
 80095a0:	4613      	mov	r3, r2
 80095a2:	011b      	lsls	r3, r3, #4
 80095a4:	1a9b      	subs	r3, r3, r2
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	440b      	add	r3, r1
 80095aa:	3302      	adds	r3, #2
 80095ac:	2203      	movs	r2, #3
 80095ae:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80095b0:	79ba      	ldrb	r2, [r7, #6]
 80095b2:	4613      	mov	r3, r2
 80095b4:	011b      	lsls	r3, r3, #4
 80095b6:	1a9b      	subs	r3, r3, r2
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	4a5e      	ldr	r2, [pc, #376]	; (8009734 <config_motors+0x318>)
 80095bc:	4413      	add	r3, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fec6 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 80095c4:	79ba      	ldrb	r2, [r7, #6]
 80095c6:	495b      	ldr	r1, [pc, #364]	; (8009734 <config_motors+0x318>)
 80095c8:	4613      	mov	r3, r2
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	440b      	add	r3, r1
 80095d2:	339c      	adds	r3, #156	; 0x9c
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80095d8:	79ba      	ldrb	r2, [r7, #6]
 80095da:	4956      	ldr	r1, [pc, #344]	; (8009734 <config_motors+0x318>)
 80095dc:	4613      	mov	r3, r2
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	011b      	lsls	r3, r3, #4
 80095e4:	440b      	add	r3, r1
 80095e6:	33b8      	adds	r3, #184	; 0xb8
 80095e8:	f04f 0200 	mov.w	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 80095ee:	79ba      	ldrb	r2, [r7, #6]
 80095f0:	4950      	ldr	r1, [pc, #320]	; (8009734 <config_motors+0x318>)
 80095f2:	4613      	mov	r3, r2
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	1a9b      	subs	r3, r3, r2
 80095f8:	011b      	lsls	r3, r3, #4
 80095fa:	440b      	add	r3, r1
 80095fc:	33b4      	adds	r3, #180	; 0xb4
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8009604:	79ba      	ldrb	r2, [r7, #6]
 8009606:	494b      	ldr	r1, [pc, #300]	; (8009734 <config_motors+0x318>)
 8009608:	4613      	mov	r3, r2
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	440b      	add	r3, r1
 8009612:	33c4      	adds	r3, #196	; 0xc4
 8009614:	4a4e      	ldr	r2, [pc, #312]	; (8009750 <config_motors+0x334>)
 8009616:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8009618:	79ba      	ldrb	r2, [r7, #6]
 800961a:	4946      	ldr	r1, [pc, #280]	; (8009734 <config_motors+0x318>)
 800961c:	4613      	mov	r3, r2
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	1a9b      	subs	r3, r3, r2
 8009622:	011b      	lsls	r3, r3, #4
 8009624:	440b      	add	r3, r1
 8009626:	33c0      	adds	r3, #192	; 0xc0
 8009628:	4a4a      	ldr	r2, [pc, #296]	; (8009754 <config_motors+0x338>)
 800962a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800962c:	79ba      	ldrb	r2, [r7, #6]
 800962e:	4941      	ldr	r1, [pc, #260]	; (8009734 <config_motors+0x318>)
 8009630:	4613      	mov	r3, r2
 8009632:	011b      	lsls	r3, r3, #4
 8009634:	1a9b      	subs	r3, r3, r2
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	440b      	add	r3, r1
 800963a:	33d4      	adds	r3, #212	; 0xd4
 800963c:	4a41      	ldr	r2, [pc, #260]	; (8009744 <config_motors+0x328>)
 800963e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 8009640:	79ba      	ldrb	r2, [r7, #6]
 8009642:	493c      	ldr	r1, [pc, #240]	; (8009734 <config_motors+0x318>)
 8009644:	4613      	mov	r3, r2
 8009646:	011b      	lsls	r3, r3, #4
 8009648:	1a9b      	subs	r3, r3, r2
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	440b      	add	r3, r1
 800964e:	3338      	adds	r3, #56	; 0x38
 8009650:	4a39      	ldr	r2, [pc, #228]	; (8009738 <config_motors+0x31c>)
 8009652:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8009654:	79ba      	ldrb	r2, [r7, #6]
 8009656:	4937      	ldr	r1, [pc, #220]	; (8009734 <config_motors+0x318>)
 8009658:	4613      	mov	r3, r2
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	1a9b      	subs	r3, r3, r2
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	440b      	add	r3, r1
 8009662:	333c      	adds	r3, #60	; 0x3c
 8009664:	4a35      	ldr	r2, [pc, #212]	; (800973c <config_motors+0x320>)
 8009666:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8009668:	79ba      	ldrb	r2, [r7, #6]
 800966a:	4932      	ldr	r1, [pc, #200]	; (8009734 <config_motors+0x318>)
 800966c:	4613      	mov	r3, r2
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	440b      	add	r3, r1
 8009676:	3340      	adds	r3, #64	; 0x40
 8009678:	4a31      	ldr	r2, [pc, #196]	; (8009740 <config_motors+0x324>)
 800967a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800967c:	79ba      	ldrb	r2, [r7, #6]
 800967e:	492d      	ldr	r1, [pc, #180]	; (8009734 <config_motors+0x318>)
 8009680:	4613      	mov	r3, r2
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	440b      	add	r3, r1
 800968a:	3350      	adds	r3, #80	; 0x50
 800968c:	4a2e      	ldr	r2, [pc, #184]	; (8009748 <config_motors+0x32c>)
 800968e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8009690:	79ba      	ldrb	r2, [r7, #6]
 8009692:	4928      	ldr	r1, [pc, #160]	; (8009734 <config_motors+0x318>)
 8009694:	4613      	mov	r3, r2
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	1a9b      	subs	r3, r3, r2
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	440b      	add	r3, r1
 800969e:	3354      	adds	r3, #84	; 0x54
 80096a0:	4a2a      	ldr	r2, [pc, #168]	; (800974c <config_motors+0x330>)
 80096a2:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 80096a4:	230e      	movs	r3, #14
 80096a6:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 80096a8:	79ba      	ldrb	r2, [r7, #6]
 80096aa:	4922      	ldr	r1, [pc, #136]	; (8009734 <config_motors+0x318>)
 80096ac:	4613      	mov	r3, r2
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	440b      	add	r3, r1
 80096b6:	3302      	adds	r3, #2
 80096b8:	2203      	movs	r2, #3
 80096ba:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80096bc:	79ba      	ldrb	r2, [r7, #6]
 80096be:	4613      	mov	r3, r2
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	1a9b      	subs	r3, r3, r2
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	4a1b      	ldr	r2, [pc, #108]	; (8009734 <config_motors+0x318>)
 80096c8:	4413      	add	r3, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff fe40 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 80096d0:	79ba      	ldrb	r2, [r7, #6]
 80096d2:	4918      	ldr	r1, [pc, #96]	; (8009734 <config_motors+0x318>)
 80096d4:	4613      	mov	r3, r2
 80096d6:	011b      	lsls	r3, r3, #4
 80096d8:	1a9b      	subs	r3, r3, r2
 80096da:	011b      	lsls	r3, r3, #4
 80096dc:	440b      	add	r3, r1
 80096de:	339c      	adds	r3, #156	; 0x9c
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 80096e4:	79ba      	ldrb	r2, [r7, #6]
 80096e6:	4913      	ldr	r1, [pc, #76]	; (8009734 <config_motors+0x318>)
 80096e8:	4613      	mov	r3, r2
 80096ea:	011b      	lsls	r3, r3, #4
 80096ec:	1a9b      	subs	r3, r3, r2
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	440b      	add	r3, r1
 80096f2:	33b8      	adds	r3, #184	; 0xb8
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 80096fa:	79ba      	ldrb	r2, [r7, #6]
 80096fc:	490d      	ldr	r1, [pc, #52]	; (8009734 <config_motors+0x318>)
 80096fe:	4613      	mov	r3, r2
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	440b      	add	r3, r1
 8009708:	33b4      	adds	r3, #180	; 0xb4
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8009710:	79ba      	ldrb	r2, [r7, #6]
 8009712:	4908      	ldr	r1, [pc, #32]	; (8009734 <config_motors+0x318>)
 8009714:	4613      	mov	r3, r2
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	440b      	add	r3, r1
 800971e:	33c4      	adds	r3, #196	; 0xc4
 8009720:	4a0b      	ldr	r2, [pc, #44]	; (8009750 <config_motors+0x334>)
 8009722:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8009724:	79ba      	ldrb	r2, [r7, #6]
 8009726:	4903      	ldr	r1, [pc, #12]	; (8009734 <config_motors+0x318>)
 8009728:	4613      	mov	r3, r2
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	1a9b      	subs	r3, r3, r2
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	e012      	b.n	8009758 <config_motors+0x33c>
 8009732:	bf00      	nop
 8009734:	20001850 	.word	0x20001850
 8009738:	41200000 	.word	0x41200000
 800973c:	3dcccccd 	.word	0x3dcccccd
 8009740:	40a00000 	.word	0x40a00000
 8009744:	40f40000 	.word	0x40f40000
 8009748:	461c4000 	.word	0x461c4000
 800974c:	457a0000 	.word	0x457a0000
 8009750:	40c90fdb 	.word	0x40c90fdb
 8009754:	c0c90fdb 	.word	0xc0c90fdb
 8009758:	440b      	add	r3, r1
 800975a:	33c0      	adds	r3, #192	; 0xc0
 800975c:	4abe      	ldr	r2, [pc, #760]	; (8009a58 <config_motors+0x63c>)
 800975e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 8009760:	79ba      	ldrb	r2, [r7, #6]
 8009762:	49be      	ldr	r1, [pc, #760]	; (8009a5c <config_motors+0x640>)
 8009764:	4613      	mov	r3, r2
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	440b      	add	r3, r1
 800976e:	33d4      	adds	r3, #212	; 0xd4
 8009770:	4abb      	ldr	r2, [pc, #748]	; (8009a60 <config_motors+0x644>)
 8009772:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 8009774:	79ba      	ldrb	r2, [r7, #6]
 8009776:	49b9      	ldr	r1, [pc, #740]	; (8009a5c <config_motors+0x640>)
 8009778:	4613      	mov	r3, r2
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	440b      	add	r3, r1
 8009782:	3368      	adds	r3, #104	; 0x68
 8009784:	f04f 0200 	mov.w	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 800978a:	79ba      	ldrb	r2, [r7, #6]
 800978c:	49b3      	ldr	r1, [pc, #716]	; (8009a5c <config_motors+0x640>)
 800978e:	4613      	mov	r3, r2
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	011b      	lsls	r3, r3, #4
 8009796:	440b      	add	r3, r1
 8009798:	336c      	adds	r3, #108	; 0x6c
 800979a:	f04f 0200 	mov.w	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 80097a0:	79ba      	ldrb	r2, [r7, #6]
 80097a2:	49ae      	ldr	r1, [pc, #696]	; (8009a5c <config_motors+0x640>)
 80097a4:	4613      	mov	r3, r2
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	1a9b      	subs	r3, r3, r2
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	440b      	add	r3, r1
 80097ae:	3370      	adds	r3, #112	; 0x70
 80097b0:	f04f 0200 	mov.w	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 80097b6:	79ba      	ldrb	r2, [r7, #6]
 80097b8:	49a8      	ldr	r1, [pc, #672]	; (8009a5c <config_motors+0x640>)
 80097ba:	4613      	mov	r3, r2
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	440b      	add	r3, r1
 80097c4:	3380      	adds	r3, #128	; 0x80
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 80097cc:	79ba      	ldrb	r2, [r7, #6]
 80097ce:	49a3      	ldr	r1, [pc, #652]	; (8009a5c <config_motors+0x640>)
 80097d0:	4613      	mov	r3, r2
 80097d2:	011b      	lsls	r3, r3, #4
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	440b      	add	r3, r1
 80097da:	3384      	adds	r3, #132	; 0x84
 80097dc:	f04f 0200 	mov.w	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 80097e2:	79ba      	ldrb	r2, [r7, #6]
 80097e4:	499d      	ldr	r1, [pc, #628]	; (8009a5c <config_motors+0x640>)
 80097e6:	4613      	mov	r3, r2
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	011b      	lsls	r3, r3, #4
 80097ee:	440b      	add	r3, r1
 80097f0:	3338      	adds	r3, #56	; 0x38
 80097f2:	4a9c      	ldr	r2, [pc, #624]	; (8009a64 <config_motors+0x648>)
 80097f4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 80097f6:	79ba      	ldrb	r2, [r7, #6]
 80097f8:	4998      	ldr	r1, [pc, #608]	; (8009a5c <config_motors+0x640>)
 80097fa:	4613      	mov	r3, r2
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	440b      	add	r3, r1
 8009804:	333c      	adds	r3, #60	; 0x3c
 8009806:	4a98      	ldr	r2, [pc, #608]	; (8009a68 <config_motors+0x64c>)
 8009808:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800980a:	79ba      	ldrb	r2, [r7, #6]
 800980c:	4993      	ldr	r1, [pc, #588]	; (8009a5c <config_motors+0x640>)
 800980e:	4613      	mov	r3, r2
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	011b      	lsls	r3, r3, #4
 8009816:	440b      	add	r3, r1
 8009818:	3340      	adds	r3, #64	; 0x40
 800981a:	4a94      	ldr	r2, [pc, #592]	; (8009a6c <config_motors+0x650>)
 800981c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800981e:	79ba      	ldrb	r2, [r7, #6]
 8009820:	498e      	ldr	r1, [pc, #568]	; (8009a5c <config_motors+0x640>)
 8009822:	4613      	mov	r3, r2
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	011b      	lsls	r3, r3, #4
 800982a:	440b      	add	r3, r1
 800982c:	3350      	adds	r3, #80	; 0x50
 800982e:	4a90      	ldr	r2, [pc, #576]	; (8009a70 <config_motors+0x654>)
 8009830:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 8009832:	79ba      	ldrb	r2, [r7, #6]
 8009834:	4989      	ldr	r1, [pc, #548]	; (8009a5c <config_motors+0x640>)
 8009836:	4613      	mov	r3, r2
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	1a9b      	subs	r3, r3, r2
 800983c:	011b      	lsls	r3, r3, #4
 800983e:	440b      	add	r3, r1
 8009840:	3354      	adds	r3, #84	; 0x54
 8009842:	4a8c      	ldr	r2, [pc, #560]	; (8009a74 <config_motors+0x658>)
 8009844:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 8009846:	230f      	movs	r3, #15
 8009848:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 800984a:	79ba      	ldrb	r2, [r7, #6]
 800984c:	4983      	ldr	r1, [pc, #524]	; (8009a5c <config_motors+0x640>)
 800984e:	4613      	mov	r3, r2
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	440b      	add	r3, r1
 8009858:	3302      	adds	r3, #2
 800985a:	2203      	movs	r2, #3
 800985c:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800985e:	79ba      	ldrb	r2, [r7, #6]
 8009860:	4613      	mov	r3, r2
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	4a7c      	ldr	r2, [pc, #496]	; (8009a5c <config_motors+0x640>)
 800986a:	4413      	add	r3, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7ff fd6f 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.center_ang = 0;
 8009872:	79ba      	ldrb	r2, [r7, #6]
 8009874:	4979      	ldr	r1, [pc, #484]	; (8009a5c <config_motors+0x640>)
 8009876:	4613      	mov	r3, r2
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	440b      	add	r3, r1
 8009880:	339c      	adds	r3, #156	; 0x9c
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = 0;
 8009886:	79ba      	ldrb	r2, [r7, #6]
 8009888:	4974      	ldr	r1, [pc, #464]	; (8009a5c <config_motors+0x640>)
 800988a:	4613      	mov	r3, r2
 800988c:	011b      	lsls	r3, r3, #4
 800988e:	1a9b      	subs	r3, r3, r2
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	440b      	add	r3, r1
 8009894:	33b8      	adds	r3, #184	; 0xb8
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = 0;
 800989c:	79ba      	ldrb	r2, [r7, #6]
 800989e:	496f      	ldr	r1, [pc, #444]	; (8009a5c <config_motors+0x640>)
 80098a0:	4613      	mov	r3, r2
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	440b      	add	r3, r1
 80098aa:	33b4      	adds	r3, #180	; 0xb4
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 80098b2:	79ba      	ldrb	r2, [r7, #6]
 80098b4:	4969      	ldr	r1, [pc, #420]	; (8009a5c <config_motors+0x640>)
 80098b6:	4613      	mov	r3, r2
 80098b8:	011b      	lsls	r3, r3, #4
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	440b      	add	r3, r1
 80098c0:	33c4      	adds	r3, #196	; 0xc4
 80098c2:	4a6d      	ldr	r2, [pc, #436]	; (8009a78 <config_motors+0x65c>)
 80098c4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80098c6:	79ba      	ldrb	r2, [r7, #6]
 80098c8:	4964      	ldr	r1, [pc, #400]	; (8009a5c <config_motors+0x640>)
 80098ca:	4613      	mov	r3, r2
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	1a9b      	subs	r3, r3, r2
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	440b      	add	r3, r1
 80098d4:	33c0      	adds	r3, #192	; 0xc0
 80098d6:	4a60      	ldr	r2, [pc, #384]	; (8009a58 <config_motors+0x63c>)
 80098d8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 80098da:	79ba      	ldrb	r2, [r7, #6]
 80098dc:	495f      	ldr	r1, [pc, #380]	; (8009a5c <config_motors+0x640>)
 80098de:	4613      	mov	r3, r2
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	1a9b      	subs	r3, r3, r2
 80098e4:	011b      	lsls	r3, r3, #4
 80098e6:	440b      	add	r3, r1
 80098e8:	33d4      	adds	r3, #212	; 0xd4
 80098ea:	4a5d      	ldr	r2, [pc, #372]	; (8009a60 <config_motors+0x644>)
 80098ec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = 0;
 80098ee:	79ba      	ldrb	r2, [r7, #6]
 80098f0:	495a      	ldr	r1, [pc, #360]	; (8009a5c <config_motors+0x640>)
 80098f2:	4613      	mov	r3, r2
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	1a9b      	subs	r3, r3, r2
 80098f8:	011b      	lsls	r3, r3, #4
 80098fa:	440b      	add	r3, r1
 80098fc:	3368      	adds	r3, #104	; 0x68
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = 0;
 8009904:	79ba      	ldrb	r2, [r7, #6]
 8009906:	4955      	ldr	r1, [pc, #340]	; (8009a5c <config_motors+0x640>)
 8009908:	4613      	mov	r3, r2
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	440b      	add	r3, r1
 8009912:	336c      	adds	r3, #108	; 0x6c
 8009914:	f04f 0200 	mov.w	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = 0;
 800991a:	79ba      	ldrb	r2, [r7, #6]
 800991c:	494f      	ldr	r1, [pc, #316]	; (8009a5c <config_motors+0x640>)
 800991e:	4613      	mov	r3, r2
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	011b      	lsls	r3, r3, #4
 8009926:	440b      	add	r3, r1
 8009928:	3370      	adds	r3, #112	; 0x70
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = 0;
 8009930:	79ba      	ldrb	r2, [r7, #6]
 8009932:	494a      	ldr	r1, [pc, #296]	; (8009a5c <config_motors+0x640>)
 8009934:	4613      	mov	r3, r2
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	440b      	add	r3, r1
 800993e:	3380      	adds	r3, #128	; 0x80
 8009940:	f04f 0200 	mov.w	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = 0;
 8009946:	79ba      	ldrb	r2, [r7, #6]
 8009948:	4944      	ldr	r1, [pc, #272]	; (8009a5c <config_motors+0x640>)
 800994a:	4613      	mov	r3, r2
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	011b      	lsls	r3, r3, #4
 8009952:	440b      	add	r3, r1
 8009954:	3384      	adds	r3, #132	; 0x84
 8009956:	f04f 0200 	mov.w	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800995c:	79ba      	ldrb	r2, [r7, #6]
 800995e:	493f      	ldr	r1, [pc, #252]	; (8009a5c <config_motors+0x640>)
 8009960:	4613      	mov	r3, r2
 8009962:	011b      	lsls	r3, r3, #4
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	440b      	add	r3, r1
 800996a:	3338      	adds	r3, #56	; 0x38
 800996c:	4a3d      	ldr	r2, [pc, #244]	; (8009a64 <config_motors+0x648>)
 800996e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 8009970:	79ba      	ldrb	r2, [r7, #6]
 8009972:	493a      	ldr	r1, [pc, #232]	; (8009a5c <config_motors+0x640>)
 8009974:	4613      	mov	r3, r2
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	440b      	add	r3, r1
 800997e:	333c      	adds	r3, #60	; 0x3c
 8009980:	4a39      	ldr	r2, [pc, #228]	; (8009a68 <config_motors+0x64c>)
 8009982:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 8009984:	79ba      	ldrb	r2, [r7, #6]
 8009986:	4935      	ldr	r1, [pc, #212]	; (8009a5c <config_motors+0x640>)
 8009988:	4613      	mov	r3, r2
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	440b      	add	r3, r1
 8009992:	3340      	adds	r3, #64	; 0x40
 8009994:	4a35      	ldr	r2, [pc, #212]	; (8009a6c <config_motors+0x650>)
 8009996:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 8009998:	79ba      	ldrb	r2, [r7, #6]
 800999a:	4930      	ldr	r1, [pc, #192]	; (8009a5c <config_motors+0x640>)
 800999c:	4613      	mov	r3, r2
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	440b      	add	r3, r1
 80099a6:	3350      	adds	r3, #80	; 0x50
 80099a8:	4a31      	ldr	r2, [pc, #196]	; (8009a70 <config_motors+0x654>)
 80099aa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 80099ac:	79ba      	ldrb	r2, [r7, #6]
 80099ae:	492b      	ldr	r1, [pc, #172]	; (8009a5c <config_motors+0x640>)
 80099b0:	4613      	mov	r3, r2
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	440b      	add	r3, r1
 80099ba:	3354      	adds	r3, #84	; 0x54
 80099bc:	4a2d      	ldr	r2, [pc, #180]	; (8009a74 <config_motors+0x658>)
 80099be:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 80099c0:	2316      	movs	r3, #22
 80099c2:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 80099c4:	79ba      	ldrb	r2, [r7, #6]
 80099c6:	4925      	ldr	r1, [pc, #148]	; (8009a5c <config_motors+0x640>)
 80099c8:	4613      	mov	r3, r2
 80099ca:	011b      	lsls	r3, r3, #4
 80099cc:	1a9b      	subs	r3, r3, r2
 80099ce:	011b      	lsls	r3, r3, #4
 80099d0:	440b      	add	r3, r1
 80099d2:	3302      	adds	r3, #2
 80099d4:	2204      	movs	r2, #4
 80099d6:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 80099d8:	79ba      	ldrb	r2, [r7, #6]
 80099da:	4613      	mov	r3, r2
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	011b      	lsls	r3, r3, #4
 80099e2:	4a1e      	ldr	r2, [pc, #120]	; (8009a5c <config_motors+0x640>)
 80099e4:	4413      	add	r3, r2
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff fcb2 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 80099ec:	79ba      	ldrb	r2, [r7, #6]
 80099ee:	491b      	ldr	r1, [pc, #108]	; (8009a5c <config_motors+0x640>)
 80099f0:	4613      	mov	r3, r2
 80099f2:	011b      	lsls	r3, r3, #4
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	011b      	lsls	r3, r3, #4
 80099f8:	440b      	add	r3, r1
 80099fa:	33c8      	adds	r3, #200	; 0xc8
 80099fc:	4a1f      	ldr	r2, [pc, #124]	; (8009a7c <config_motors+0x660>)
 80099fe:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 8009a00:	79ba      	ldrb	r2, [r7, #6]
 8009a02:	4916      	ldr	r1, [pc, #88]	; (8009a5c <config_motors+0x640>)
 8009a04:	4613      	mov	r3, r2
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	1a9b      	subs	r3, r3, r2
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	440b      	add	r3, r1
 8009a0e:	338c      	adds	r3, #140	; 0x8c
 8009a10:	4a1b      	ldr	r2, [pc, #108]	; (8009a80 <config_motors+0x664>)
 8009a12:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 8009a14:	79ba      	ldrb	r2, [r7, #6]
 8009a16:	4911      	ldr	r1, [pc, #68]	; (8009a5c <config_motors+0x640>)
 8009a18:	4613      	mov	r3, r2
 8009a1a:	011b      	lsls	r3, r3, #4
 8009a1c:	1a9b      	subs	r3, r3, r2
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	440b      	add	r3, r1
 8009a22:	3338      	adds	r3, #56	; 0x38
 8009a24:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8009a28:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 8009a2a:	79ba      	ldrb	r2, [r7, #6]
 8009a2c:	490b      	ldr	r1, [pc, #44]	; (8009a5c <config_motors+0x640>)
 8009a2e:	4613      	mov	r3, r2
 8009a30:	011b      	lsls	r3, r3, #4
 8009a32:	1a9b      	subs	r3, r3, r2
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	440b      	add	r3, r1
 8009a38:	333c      	adds	r3, #60	; 0x3c
 8009a3a:	4a12      	ldr	r2, [pc, #72]	; (8009a84 <config_motors+0x668>)
 8009a3c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 8009a3e:	79ba      	ldrb	r2, [r7, #6]
 8009a40:	4906      	ldr	r1, [pc, #24]	; (8009a5c <config_motors+0x640>)
 8009a42:	4613      	mov	r3, r2
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	440b      	add	r3, r1
 8009a4c:	3340      	adds	r3, #64	; 0x40
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 8009a54:	79ba      	ldrb	r2, [r7, #6]
 8009a56:	e017      	b.n	8009a88 <config_motors+0x66c>
 8009a58:	c0c90fdb 	.word	0xc0c90fdb
 8009a5c:	20001850 	.word	0x20001850
 8009a60:	40f40000 	.word	0x40f40000
 8009a64:	41200000 	.word	0x41200000
 8009a68:	3dcccccd 	.word	0x3dcccccd
 8009a6c:	40a00000 	.word	0x40a00000
 8009a70:	461c4000 	.word	0x461c4000
 8009a74:	457a0000 	.word	0x457a0000
 8009a78:	40c90fdb 	.word	0x40c90fdb
 8009a7c:	4199999a 	.word	0x4199999a
 8009a80:	460ca000 	.word	0x460ca000
 8009a84:	3b03126f 	.word	0x3b03126f
 8009a88:	49c1      	ldr	r1, [pc, #772]	; (8009d90 <config_motors+0x974>)
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	440b      	add	r3, r1
 8009a94:	3350      	adds	r3, #80	; 0x50
 8009a96:	4abf      	ldr	r2, [pc, #764]	; (8009d94 <config_motors+0x978>)
 8009a98:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8009a9a:	79ba      	ldrb	r2, [r7, #6]
 8009a9c:	49bc      	ldr	r1, [pc, #752]	; (8009d90 <config_motors+0x974>)
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	1a9b      	subs	r3, r3, r2
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	440b      	add	r3, r1
 8009aa8:	3354      	adds	r3, #84	; 0x54
 8009aaa:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8009aae:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 8009ab0:	2312      	movs	r3, #18
 8009ab2:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 8009ab4:	79ba      	ldrb	r2, [r7, #6]
 8009ab6:	49b6      	ldr	r1, [pc, #728]	; (8009d90 <config_motors+0x974>)
 8009ab8:	4613      	mov	r3, r2
 8009aba:	011b      	lsls	r3, r3, #4
 8009abc:	1a9b      	subs	r3, r3, r2
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	440b      	add	r3, r1
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 8009ac8:	79ba      	ldrb	r2, [r7, #6]
 8009aca:	49b1      	ldr	r1, [pc, #708]	; (8009d90 <config_motors+0x974>)
 8009acc:	4613      	mov	r3, r2
 8009ace:	011b      	lsls	r3, r3, #4
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	440b      	add	r3, r1
 8009ad6:	338c      	adds	r3, #140	; 0x8c
 8009ad8:	4aaf      	ldr	r2, [pc, #700]	; (8009d98 <config_motors+0x97c>)
 8009ada:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 8009adc:	79ba      	ldrb	r2, [r7, #6]
 8009ade:	49ac      	ldr	r1, [pc, #688]	; (8009d90 <config_motors+0x974>)
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	1a9b      	subs	r3, r3, r2
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	440b      	add	r3, r1
 8009aea:	3338      	adds	r3, #56	; 0x38
 8009aec:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8009af0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 8009af2:	79ba      	ldrb	r2, [r7, #6]
 8009af4:	49a6      	ldr	r1, [pc, #664]	; (8009d90 <config_motors+0x974>)
 8009af6:	4613      	mov	r3, r2
 8009af8:	011b      	lsls	r3, r3, #4
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	011b      	lsls	r3, r3, #4
 8009afe:	440b      	add	r3, r1
 8009b00:	333c      	adds	r3, #60	; 0x3c
 8009b02:	4aa6      	ldr	r2, [pc, #664]	; (8009d9c <config_motors+0x980>)
 8009b04:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 8009b06:	79ba      	ldrb	r2, [r7, #6]
 8009b08:	49a1      	ldr	r1, [pc, #644]	; (8009d90 <config_motors+0x974>)
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	011b      	lsls	r3, r3, #4
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	011b      	lsls	r3, r3, #4
 8009b12:	440b      	add	r3, r1
 8009b14:	3340      	adds	r3, #64	; 0x40
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 8009b1c:	79ba      	ldrb	r2, [r7, #6]
 8009b1e:	499c      	ldr	r1, [pc, #624]	; (8009d90 <config_motors+0x974>)
 8009b20:	4613      	mov	r3, r2
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	1a9b      	subs	r3, r3, r2
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	440b      	add	r3, r1
 8009b2a:	3350      	adds	r3, #80	; 0x50
 8009b2c:	4a99      	ldr	r2, [pc, #612]	; (8009d94 <config_motors+0x978>)
 8009b2e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 8009b30:	79ba      	ldrb	r2, [r7, #6]
 8009b32:	4997      	ldr	r1, [pc, #604]	; (8009d90 <config_motors+0x974>)
 8009b34:	4613      	mov	r3, r2
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	1a9b      	subs	r3, r3, r2
 8009b3a:	011b      	lsls	r3, r3, #4
 8009b3c:	440b      	add	r3, r1
 8009b3e:	3354      	adds	r3, #84	; 0x54
 8009b40:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8009b44:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 8009b46:	79ba      	ldrb	r2, [r7, #6]
 8009b48:	4991      	ldr	r1, [pc, #580]	; (8009d90 <config_motors+0x974>)
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	1a9b      	subs	r3, r3, r2
 8009b50:	011b      	lsls	r3, r3, #4
 8009b52:	440b      	add	r3, r1
 8009b54:	335c      	adds	r3, #92	; 0x5c
 8009b56:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8009b5a:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 8009b5c:	2311      	movs	r3, #17
 8009b5e:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	can_motors[motor_id].motor_type = TYPE_M2006;
 8009b60:	79ba      	ldrb	r2, [r7, #6]
 8009b62:	498b      	ldr	r1, [pc, #556]	; (8009d90 <config_motors+0x974>)
 8009b64:	4613      	mov	r3, r2
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	1a9b      	subs	r3, r3, r2
 8009b6a:	011b      	lsls	r3, r3, #4
 8009b6c:	440b      	add	r3, r1
 8009b6e:	3302      	adds	r3, #2
 8009b70:	2202      	movs	r2, #2
 8009b72:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&can_motors[motor_id]);
 8009b74:	79ba      	ldrb	r2, [r7, #6]
 8009b76:	4613      	mov	r3, r2
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	4a84      	ldr	r2, [pc, #528]	; (8009d90 <config_motors+0x974>)
 8009b80:	4413      	add	r3, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff fbe4 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.max_ang = PI * 5000; //so it can rotate 5000 times oops
 8009b88:	79ba      	ldrb	r2, [r7, #6]
 8009b8a:	4981      	ldr	r1, [pc, #516]	; (8009d90 <config_motors+0x974>)
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	1a9b      	subs	r3, r3, r2
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	440b      	add	r3, r1
 8009b96:	33b8      	adds	r3, #184	; 0xb8
 8009b98:	4a81      	ldr	r2, [pc, #516]	; (8009da0 <config_motors+0x984>)
 8009b9a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = -PI * 5000;
 8009b9c:	79ba      	ldrb	r2, [r7, #6]
 8009b9e:	497c      	ldr	r1, [pc, #496]	; (8009d90 <config_motors+0x974>)
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	011b      	lsls	r3, r3, #4
 8009ba8:	440b      	add	r3, r1
 8009baa:	33b4      	adds	r3, #180	; 0xb4
 8009bac:	4a7d      	ldr	r2, [pc, #500]	; (8009da4 <config_motors+0x988>)
 8009bae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8009bb0:	79ba      	ldrb	r2, [r7, #6]
 8009bb2:	4977      	ldr	r1, [pc, #476]	; (8009d90 <config_motors+0x974>)
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	440b      	add	r3, r1
 8009bbe:	33c4      	adds	r3, #196	; 0xc4
 8009bc0:	4a79      	ldr	r2, [pc, #484]	; (8009da8 <config_motors+0x98c>)
 8009bc2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8009bc4:	79ba      	ldrb	r2, [r7, #6]
 8009bc6:	4972      	ldr	r1, [pc, #456]	; (8009d90 <config_motors+0x974>)
 8009bc8:	4613      	mov	r3, r2
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	1a9b      	subs	r3, r3, r2
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	440b      	add	r3, r1
 8009bd2:	33c0      	adds	r3, #192	; 0xc0
 8009bd4:	4a75      	ldr	r2, [pc, #468]	; (8009dac <config_motors+0x990>)
 8009bd6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8009bd8:	79ba      	ldrb	r2, [r7, #6]
 8009bda:	496d      	ldr	r1, [pc, #436]	; (8009d90 <config_motors+0x974>)
 8009bdc:	4613      	mov	r3, r2
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	440b      	add	r3, r1
 8009be6:	33d4      	adds	r3, #212	; 0xd4
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 8009bee:	79ba      	ldrb	r2, [r7, #6]
 8009bf0:	4967      	ldr	r1, [pc, #412]	; (8009d90 <config_motors+0x974>)
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	1a9b      	subs	r3, r3, r2
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3368      	adds	r3, #104	; 0x68
 8009bfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009c02:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 8009c04:	79ba      	ldrb	r2, [r7, #6]
 8009c06:	4962      	ldr	r1, [pc, #392]	; (8009d90 <config_motors+0x974>)
 8009c08:	4613      	mov	r3, r2
 8009c0a:	011b      	lsls	r3, r3, #4
 8009c0c:	1a9b      	subs	r3, r3, r2
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	440b      	add	r3, r1
 8009c12:	336c      	adds	r3, #108	; 0x6c
 8009c14:	f04f 0200 	mov.w	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 8009c1a:	79ba      	ldrb	r2, [r7, #6]
 8009c1c:	495c      	ldr	r1, [pc, #368]	; (8009d90 <config_motors+0x974>)
 8009c1e:	4613      	mov	r3, r2
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	440b      	add	r3, r1
 8009c28:	3370      	adds	r3, #112	; 0x70
 8009c2a:	f04f 0200 	mov.w	r2, #0
 8009c2e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 8009c30:	79ba      	ldrb	r2, [r7, #6]
 8009c32:	4957      	ldr	r1, [pc, #348]	; (8009d90 <config_motors+0x974>)
 8009c34:	4613      	mov	r3, r2
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	011b      	lsls	r3, r3, #4
 8009c3c:	440b      	add	r3, r1
 8009c3e:	3380      	adds	r3, #128	; 0x80
 8009c40:	f04f 0200 	mov.w	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 8009c46:	79ba      	ldrb	r2, [r7, #6]
 8009c48:	4951      	ldr	r1, [pc, #324]	; (8009d90 <config_motors+0x974>)
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	011b      	lsls	r3, r3, #4
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	011b      	lsls	r3, r3, #4
 8009c52:	440b      	add	r3, r1
 8009c54:	3384      	adds	r3, #132	; 0x84
 8009c56:	4a56      	ldr	r2, [pc, #344]	; (8009db0 <config_motors+0x994>)
 8009c58:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 8009c5a:	79ba      	ldrb	r2, [r7, #6]
 8009c5c:	494c      	ldr	r1, [pc, #304]	; (8009d90 <config_motors+0x974>)
 8009c5e:	4613      	mov	r3, r2
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	440b      	add	r3, r1
 8009c68:	3338      	adds	r3, #56	; 0x38
 8009c6a:	4a52      	ldr	r2, [pc, #328]	; (8009db4 <config_motors+0x998>)
 8009c6c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 8009c6e:	79ba      	ldrb	r2, [r7, #6]
 8009c70:	4947      	ldr	r1, [pc, #284]	; (8009d90 <config_motors+0x974>)
 8009c72:	4613      	mov	r3, r2
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	440b      	add	r3, r1
 8009c7c:	333c      	adds	r3, #60	; 0x3c
 8009c7e:	4a4e      	ldr	r2, [pc, #312]	; (8009db8 <config_motors+0x99c>)
 8009c80:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 8009c82:	79ba      	ldrb	r2, [r7, #6]
 8009c84:	4942      	ldr	r1, [pc, #264]	; (8009d90 <config_motors+0x974>)
 8009c86:	4613      	mov	r3, r2
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	011b      	lsls	r3, r3, #4
 8009c8e:	440b      	add	r3, r1
 8009c90:	3340      	adds	r3, #64	; 0x40
 8009c92:	4a4a      	ldr	r2, [pc, #296]	; (8009dbc <config_motors+0x9a0>)
 8009c94:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 8009c96:	79ba      	ldrb	r2, [r7, #6]
 8009c98:	493d      	ldr	r1, [pc, #244]	; (8009d90 <config_motors+0x974>)
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	1a9b      	subs	r3, r3, r2
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3350      	adds	r3, #80	; 0x50
 8009ca6:	4a3b      	ldr	r2, [pc, #236]	; (8009d94 <config_motors+0x978>)
 8009ca8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 8009caa:	79ba      	ldrb	r2, [r7, #6]
 8009cac:	4938      	ldr	r1, [pc, #224]	; (8009d90 <config_motors+0x974>)
 8009cae:	4613      	mov	r3, r2
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	1a9b      	subs	r3, r3, r2
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	440b      	add	r3, r1
 8009cb8:	3354      	adds	r3, #84	; 0x54
 8009cba:	4a36      	ldr	r2, [pc, #216]	; (8009d94 <config_motors+0x978>)
 8009cbc:	601a      	str	r2, [r3, #0]
#endif

#ifdef L1_MOTOR_ID
	motor_id = L1_MOTOR_ID - 1;
 8009cbe:	2307      	movs	r3, #7
 8009cc0:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8009cc2:	79ba      	ldrb	r2, [r7, #6]
 8009cc4:	4932      	ldr	r1, [pc, #200]	; (8009d90 <config_motors+0x974>)
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	011b      	lsls	r3, r3, #4
 8009cca:	1a9b      	subs	r3, r3, r2
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	440b      	add	r3, r1
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8009cd6:	79ba      	ldrb	r2, [r7, #6]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	4a2b      	ldr	r2, [pc, #172]	; (8009d90 <config_motors+0x974>)
 8009ce2:	4413      	add	r3, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff fb33 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 8009cea:	79ba      	ldrb	r2, [r7, #6]
 8009cec:	4928      	ldr	r1, [pc, #160]	; (8009d90 <config_motors+0x974>)
 8009cee:	4613      	mov	r3, r2
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	1a9b      	subs	r3, r3, r2
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	440b      	add	r3, r1
 8009cf8:	33c8      	adds	r3, #200	; 0xc8
 8009cfa:	f04f 0200 	mov.w	r2, #0
 8009cfe:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = L1_CENTER;
 8009d00:	79ba      	ldrb	r2, [r7, #6]
 8009d02:	4923      	ldr	r1, [pc, #140]	; (8009d90 <config_motors+0x974>)
 8009d04:	4613      	mov	r3, r2
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	440b      	add	r3, r1
 8009d0e:	339c      	adds	r3, #156	; 0x9c
 8009d10:	f641 42d9 	movw	r2, #7385	; 0x1cd9
 8009d14:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = L1_MAX_ANG;
 8009d16:	79ba      	ldrb	r2, [r7, #6]
 8009d18:	491d      	ldr	r1, [pc, #116]	; (8009d90 <config_motors+0x974>)
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	1a9b      	subs	r3, r3, r2
 8009d20:	011b      	lsls	r3, r3, #4
 8009d22:	440b      	add	r3, r1
 8009d24:	33b8      	adds	r3, #184	; 0xb8
 8009d26:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8009d2a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = L1_MIN_ANG;
 8009d2c:	79ba      	ldrb	r2, [r7, #6]
 8009d2e:	4918      	ldr	r1, [pc, #96]	; (8009d90 <config_motors+0x974>)
 8009d30:	4613      	mov	r3, r2
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	1a9b      	subs	r3, r3, r2
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	440b      	add	r3, r1
 8009d3a:	33b4      	adds	r3, #180	; 0xb4
 8009d3c:	4a20      	ldr	r2, [pc, #128]	; (8009dc0 <config_motors+0x9a4>)
 8009d3e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8009d40:	79ba      	ldrb	r2, [r7, #6]
 8009d42:	4913      	ldr	r1, [pc, #76]	; (8009d90 <config_motors+0x974>)
 8009d44:	4613      	mov	r3, r2
 8009d46:	011b      	lsls	r3, r3, #4
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	440b      	add	r3, r1
 8009d4e:	33c4      	adds	r3, #196	; 0xc4
 8009d50:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <config_motors+0x98c>)
 8009d52:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8009d54:	79ba      	ldrb	r2, [r7, #6]
 8009d56:	490e      	ldr	r1, [pc, #56]	; (8009d90 <config_motors+0x974>)
 8009d58:	4613      	mov	r3, r2
 8009d5a:	011b      	lsls	r3, r3, #4
 8009d5c:	1a9b      	subs	r3, r3, r2
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	440b      	add	r3, r1
 8009d62:	33c0      	adds	r3, #192	; 0xc0
 8009d64:	4a11      	ldr	r2, [pc, #68]	; (8009dac <config_motors+0x990>)
 8009d66:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8009d68:	79ba      	ldrb	r2, [r7, #6]
 8009d6a:	4909      	ldr	r1, [pc, #36]	; (8009d90 <config_motors+0x974>)
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	011b      	lsls	r3, r3, #4
 8009d74:	440b      	add	r3, r1
 8009d76:	33d4      	adds	r3, #212	; 0xd4
 8009d78:	f04f 0200 	mov.w	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 8009d7e:	79ba      	ldrb	r2, [r7, #6]
 8009d80:	4903      	ldr	r1, [pc, #12]	; (8009d90 <config_motors+0x974>)
 8009d82:	4613      	mov	r3, r2
 8009d84:	011b      	lsls	r3, r3, #4
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3368      	adds	r3, #104	; 0x68
 8009d8e:	e019      	b.n	8009dc4 <config_motors+0x9a8>
 8009d90:	20001850 	.word	0x20001850
 8009d94:	461c4000 	.word	0x461c4000
 8009d98:	460ca000 	.word	0x460ca000
 8009d9c:	3b03126f 	.word	0x3b03126f
 8009da0:	46756fdb 	.word	0x46756fdb
 8009da4:	c6756fdb 	.word	0xc6756fdb
 8009da8:	40c90fdb 	.word	0x40c90fdb
 8009dac:	c0c90fdb 	.word	0xc0c90fdb
 8009db0:	42c80000 	.word	0x42c80000
 8009db4:	40e00000 	.word	0x40e00000
 8009db8:	3ca3d70a 	.word	0x3ca3d70a
 8009dbc:	40400000 	.word	0x40400000
 8009dc0:	bfc00000 	.word	0xbfc00000
 8009dc4:	4abe      	ldr	r2, [pc, #760]	; (800a0c0 <config_motors+0xca4>)
 8009dc6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 8009dc8:	79ba      	ldrb	r2, [r7, #6]
 8009dca:	49be      	ldr	r1, [pc, #760]	; (800a0c4 <config_motors+0xca8>)
 8009dcc:	4613      	mov	r3, r2
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	1a9b      	subs	r3, r3, r2
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	440b      	add	r3, r1
 8009dd6:	336c      	adds	r3, #108	; 0x6c
 8009dd8:	f04f 0200 	mov.w	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 8009dde:	79ba      	ldrb	r2, [r7, #6]
 8009de0:	49b8      	ldr	r1, [pc, #736]	; (800a0c4 <config_motors+0xca8>)
 8009de2:	4613      	mov	r3, r2
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	1a9b      	subs	r3, r3, r2
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	440b      	add	r3, r1
 8009dec:	3370      	adds	r3, #112	; 0x70
 8009dee:	f04f 0200 	mov.w	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 8009df4:	79ba      	ldrb	r2, [r7, #6]
 8009df6:	49b3      	ldr	r1, [pc, #716]	; (800a0c4 <config_motors+0xca8>)
 8009df8:	4613      	mov	r3, r2
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	440b      	add	r3, r1
 8009e02:	3380      	adds	r3, #128	; 0x80
 8009e04:	4ab0      	ldr	r2, [pc, #704]	; (800a0c8 <config_motors+0xcac>)
 8009e06:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 8009e08:	79ba      	ldrb	r2, [r7, #6]
 8009e0a:	49ae      	ldr	r1, [pc, #696]	; (800a0c4 <config_motors+0xca8>)
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	1a9b      	subs	r3, r3, r2
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	440b      	add	r3, r1
 8009e16:	3384      	adds	r3, #132	; 0x84
 8009e18:	4aa9      	ldr	r2, [pc, #676]	; (800a0c0 <config_motors+0xca4>)
 8009e1a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 8009e1c:	79ba      	ldrb	r2, [r7, #6]
 8009e1e:	49a9      	ldr	r1, [pc, #676]	; (800a0c4 <config_motors+0xca8>)
 8009e20:	4613      	mov	r3, r2
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	440b      	add	r3, r1
 8009e2a:	3338      	adds	r3, #56	; 0x38
 8009e2c:	4aa4      	ldr	r2, [pc, #656]	; (800a0c0 <config_motors+0xca4>)
 8009e2e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 8009e30:	79ba      	ldrb	r2, [r7, #6]
 8009e32:	49a4      	ldr	r1, [pc, #656]	; (800a0c4 <config_motors+0xca8>)
 8009e34:	4613      	mov	r3, r2
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	440b      	add	r3, r1
 8009e3e:	333c      	adds	r3, #60	; 0x3c
 8009e40:	4aa2      	ldr	r2, [pc, #648]	; (800a0cc <config_motors+0xcb0>)
 8009e42:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 8009e44:	79ba      	ldrb	r2, [r7, #6]
 8009e46:	499f      	ldr	r1, [pc, #636]	; (800a0c4 <config_motors+0xca8>)
 8009e48:	4613      	mov	r3, r2
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	440b      	add	r3, r1
 8009e52:	3340      	adds	r3, #64	; 0x40
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 8009e5a:	79ba      	ldrb	r2, [r7, #6]
 8009e5c:	4999      	ldr	r1, [pc, #612]	; (800a0c4 <config_motors+0xca8>)
 8009e5e:	4613      	mov	r3, r2
 8009e60:	011b      	lsls	r3, r3, #4
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	011b      	lsls	r3, r3, #4
 8009e66:	440b      	add	r3, r1
 8009e68:	3350      	adds	r3, #80	; 0x50
 8009e6a:	4a99      	ldr	r2, [pc, #612]	; (800a0d0 <config_motors+0xcb4>)
 8009e6c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 8009e6e:	79ba      	ldrb	r2, [r7, #6]
 8009e70:	4994      	ldr	r1, [pc, #592]	; (800a0c4 <config_motors+0xca8>)
 8009e72:	4613      	mov	r3, r2
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	1a9b      	subs	r3, r3, r2
 8009e78:	011b      	lsls	r3, r3, #4
 8009e7a:	440b      	add	r3, r1
 8009e7c:	3354      	adds	r3, #84	; 0x54
 8009e7e:	4a95      	ldr	r2, [pc, #596]	; (800a0d4 <config_motors+0xcb8>)
 8009e80:	601a      	str	r2, [r3, #0]
#endif

#ifdef L2_MOTOR_ID
	motor_id = L2_MOTOR_ID - 1;
 8009e82:	2306      	movs	r3, #6
 8009e84:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8009e86:	79ba      	ldrb	r2, [r7, #6]
 8009e88:	498e      	ldr	r1, [pc, #568]	; (800a0c4 <config_motors+0xca8>)
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	440b      	add	r3, r1
 8009e94:	3302      	adds	r3, #2
 8009e96:	2201      	movs	r2, #1
 8009e98:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 8009e9a:	79ba      	ldrb	r2, [r7, #6]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	011b      	lsls	r3, r3, #4
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	011b      	lsls	r3, r3, #4
 8009ea4:	4a87      	ldr	r2, [pc, #540]	; (800a0c4 <config_motors+0xca8>)
 8009ea6:	4413      	add	r3, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff fa51 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 8009eae:	79ba      	ldrb	r2, [r7, #6]
 8009eb0:	4984      	ldr	r1, [pc, #528]	; (800a0c4 <config_motors+0xca8>)
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	440b      	add	r3, r1
 8009ebc:	33c8      	adds	r3, #200	; 0xc8
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = L2_CENTER;
 8009ec4:	79ba      	ldrb	r2, [r7, #6]
 8009ec6:	497f      	ldr	r1, [pc, #508]	; (800a0c4 <config_motors+0xca8>)
 8009ec8:	4613      	mov	r3, r2
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	1a9b      	subs	r3, r3, r2
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	440b      	add	r3, r1
 8009ed2:	339c      	adds	r3, #156	; 0x9c
 8009ed4:	f641 0297 	movw	r2, #6295	; 0x1897
 8009ed8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = L2_MAX_ANG;
 8009eda:	79ba      	ldrb	r2, [r7, #6]
 8009edc:	4979      	ldr	r1, [pc, #484]	; (800a0c4 <config_motors+0xca8>)
 8009ede:	4613      	mov	r3, r2
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	1a9b      	subs	r3, r3, r2
 8009ee4:	011b      	lsls	r3, r3, #4
 8009ee6:	440b      	add	r3, r1
 8009ee8:	33b8      	adds	r3, #184	; 0xb8
 8009eea:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8009eee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = L2_MIN_ANG;
 8009ef0:	79ba      	ldrb	r2, [r7, #6]
 8009ef2:	4974      	ldr	r1, [pc, #464]	; (800a0c4 <config_motors+0xca8>)
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	1a9b      	subs	r3, r3, r2
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	440b      	add	r3, r1
 8009efe:	33b4      	adds	r3, #180	; 0xb4
 8009f00:	4a75      	ldr	r2, [pc, #468]	; (800a0d8 <config_motors+0xcbc>)
 8009f02:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 8009f04:	79ba      	ldrb	r2, [r7, #6]
 8009f06:	496f      	ldr	r1, [pc, #444]	; (800a0c4 <config_motors+0xca8>)
 8009f08:	4613      	mov	r3, r2
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	1a9b      	subs	r3, r3, r2
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	440b      	add	r3, r1
 8009f12:	33c4      	adds	r3, #196	; 0xc4
 8009f14:	4a71      	ldr	r2, [pc, #452]	; (800a0dc <config_motors+0xcc0>)
 8009f16:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8009f18:	79ba      	ldrb	r2, [r7, #6]
 8009f1a:	496a      	ldr	r1, [pc, #424]	; (800a0c4 <config_motors+0xca8>)
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	440b      	add	r3, r1
 8009f26:	33c0      	adds	r3, #192	; 0xc0
 8009f28:	4a6d      	ldr	r2, [pc, #436]	; (800a0e0 <config_motors+0xcc4>)
 8009f2a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 8009f2c:	79ba      	ldrb	r2, [r7, #6]
 8009f2e:	4965      	ldr	r1, [pc, #404]	; (800a0c4 <config_motors+0xca8>)
 8009f30:	4613      	mov	r3, r2
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	440b      	add	r3, r1
 8009f3a:	33d4      	adds	r3, #212	; 0xd4
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 8009f42:	79ba      	ldrb	r2, [r7, #6]
 8009f44:	495f      	ldr	r1, [pc, #380]	; (800a0c4 <config_motors+0xca8>)
 8009f46:	4613      	mov	r3, r2
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	011b      	lsls	r3, r3, #4
 8009f4e:	440b      	add	r3, r1
 8009f50:	3368      	adds	r3, #104	; 0x68
 8009f52:	4a5b      	ldr	r2, [pc, #364]	; (800a0c0 <config_motors+0xca4>)
 8009f54:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 8009f56:	79ba      	ldrb	r2, [r7, #6]
 8009f58:	495a      	ldr	r1, [pc, #360]	; (800a0c4 <config_motors+0xca8>)
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	440b      	add	r3, r1
 8009f64:	336c      	adds	r3, #108	; 0x6c
 8009f66:	f04f 0200 	mov.w	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 8009f6c:	79ba      	ldrb	r2, [r7, #6]
 8009f6e:	4955      	ldr	r1, [pc, #340]	; (800a0c4 <config_motors+0xca8>)
 8009f70:	4613      	mov	r3, r2
 8009f72:	011b      	lsls	r3, r3, #4
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	440b      	add	r3, r1
 8009f7a:	3370      	adds	r3, #112	; 0x70
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 8009f82:	79ba      	ldrb	r2, [r7, #6]
 8009f84:	494f      	ldr	r1, [pc, #316]	; (800a0c4 <config_motors+0xca8>)
 8009f86:	4613      	mov	r3, r2
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	440b      	add	r3, r1
 8009f90:	3380      	adds	r3, #128	; 0x80
 8009f92:	4a4d      	ldr	r2, [pc, #308]	; (800a0c8 <config_motors+0xcac>)
 8009f94:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 8009f96:	79ba      	ldrb	r2, [r7, #6]
 8009f98:	494a      	ldr	r1, [pc, #296]	; (800a0c4 <config_motors+0xca8>)
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	011b      	lsls	r3, r3, #4
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3384      	adds	r3, #132	; 0x84
 8009fa6:	4a46      	ldr	r2, [pc, #280]	; (800a0c0 <config_motors+0xca4>)
 8009fa8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 8009faa:	79ba      	ldrb	r2, [r7, #6]
 8009fac:	4945      	ldr	r1, [pc, #276]	; (800a0c4 <config_motors+0xca8>)
 8009fae:	4613      	mov	r3, r2
 8009fb0:	011b      	lsls	r3, r3, #4
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	011b      	lsls	r3, r3, #4
 8009fb6:	440b      	add	r3, r1
 8009fb8:	3338      	adds	r3, #56	; 0x38
 8009fba:	4a41      	ldr	r2, [pc, #260]	; (800a0c0 <config_motors+0xca4>)
 8009fbc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 8009fbe:	79ba      	ldrb	r2, [r7, #6]
 8009fc0:	4940      	ldr	r1, [pc, #256]	; (800a0c4 <config_motors+0xca8>)
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	440b      	add	r3, r1
 8009fcc:	333c      	adds	r3, #60	; 0x3c
 8009fce:	4a3f      	ldr	r2, [pc, #252]	; (800a0cc <config_motors+0xcb0>)
 8009fd0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 8009fd2:	79ba      	ldrb	r2, [r7, #6]
 8009fd4:	493b      	ldr	r1, [pc, #236]	; (800a0c4 <config_motors+0xca8>)
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	1a9b      	subs	r3, r3, r2
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	440b      	add	r3, r1
 8009fe0:	3340      	adds	r3, #64	; 0x40
 8009fe2:	f04f 0200 	mov.w	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 8009fe8:	79ba      	ldrb	r2, [r7, #6]
 8009fea:	4936      	ldr	r1, [pc, #216]	; (800a0c4 <config_motors+0xca8>)
 8009fec:	4613      	mov	r3, r2
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	1a9b      	subs	r3, r3, r2
 8009ff2:	011b      	lsls	r3, r3, #4
 8009ff4:	440b      	add	r3, r1
 8009ff6:	3350      	adds	r3, #80	; 0x50
 8009ff8:	4a35      	ldr	r2, [pc, #212]	; (800a0d0 <config_motors+0xcb4>)
 8009ffa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 8009ffc:	79ba      	ldrb	r2, [r7, #6]
 8009ffe:	4931      	ldr	r1, [pc, #196]	; (800a0c4 <config_motors+0xca8>)
 800a000:	4613      	mov	r3, r2
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	011b      	lsls	r3, r3, #4
 800a008:	440b      	add	r3, r1
 800a00a:	3354      	adds	r3, #84	; 0x54
 800a00c:	4a31      	ldr	r2, [pc, #196]	; (800a0d4 <config_motors+0xcb8>)
 800a00e:	601a      	str	r2, [r3, #0]
#endif

#ifdef R1_MOTOR_ID
	motor_id = R1_MOTOR_ID - 1;
 800a010:	2304      	movs	r3, #4
 800a012:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 800a014:	79ba      	ldrb	r2, [r7, #6]
 800a016:	492b      	ldr	r1, [pc, #172]	; (800a0c4 <config_motors+0xca8>)
 800a018:	4613      	mov	r3, r2
 800a01a:	011b      	lsls	r3, r3, #4
 800a01c:	1a9b      	subs	r3, r3, r2
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	440b      	add	r3, r1
 800a022:	3302      	adds	r3, #2
 800a024:	2201      	movs	r2, #1
 800a026:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800a028:	79ba      	ldrb	r2, [r7, #6]
 800a02a:	4613      	mov	r3, r2
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	1a9b      	subs	r3, r3, r2
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	4a24      	ldr	r2, [pc, #144]	; (800a0c4 <config_motors+0xca8>)
 800a034:	4413      	add	r3, r2
 800a036:	4618      	mov	r0, r3
 800a038:	f7ff f98a 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;	//1;
 800a03c:	79ba      	ldrb	r2, [r7, #6]
 800a03e:	4921      	ldr	r1, [pc, #132]	; (800a0c4 <config_motors+0xca8>)
 800a040:	4613      	mov	r3, r2
 800a042:	011b      	lsls	r3, r3, #4
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	440b      	add	r3, r1
 800a04a:	33c8      	adds	r3, #200	; 0xc8
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = R1_CENTER;
 800a052:	79ba      	ldrb	r2, [r7, #6]
 800a054:	491b      	ldr	r1, [pc, #108]	; (800a0c4 <config_motors+0xca8>)
 800a056:	4613      	mov	r3, r2
 800a058:	011b      	lsls	r3, r3, #4
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	440b      	add	r3, r1
 800a060:	339c      	adds	r3, #156	; 0x9c
 800a062:	f640 023a 	movw	r2, #2106	; 0x83a
 800a066:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = R1_MAX_ANG;
 800a068:	79ba      	ldrb	r2, [r7, #6]
 800a06a:	4916      	ldr	r1, [pc, #88]	; (800a0c4 <config_motors+0xca8>)
 800a06c:	4613      	mov	r3, r2
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	011b      	lsls	r3, r3, #4
 800a074:	440b      	add	r3, r1
 800a076:	33b8      	adds	r3, #184	; 0xb8
 800a078:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800a07c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = R1_MIN_ANG;
 800a07e:	79ba      	ldrb	r2, [r7, #6]
 800a080:	4910      	ldr	r1, [pc, #64]	; (800a0c4 <config_motors+0xca8>)
 800a082:	4613      	mov	r3, r2
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	011b      	lsls	r3, r3, #4
 800a08a:	440b      	add	r3, r1
 800a08c:	33b4      	adds	r3, #180	; 0xb4
 800a08e:	4a12      	ldr	r2, [pc, #72]	; (800a0d8 <config_motors+0xcbc>)
 800a090:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a092:	79ba      	ldrb	r2, [r7, #6]
 800a094:	490b      	ldr	r1, [pc, #44]	; (800a0c4 <config_motors+0xca8>)
 800a096:	4613      	mov	r3, r2
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	1a9b      	subs	r3, r3, r2
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	440b      	add	r3, r1
 800a0a0:	33c4      	adds	r3, #196	; 0xc4
 800a0a2:	4a0e      	ldr	r2, [pc, #56]	; (800a0dc <config_motors+0xcc0>)
 800a0a4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI; //angle before it overflows
 800a0a6:	79ba      	ldrb	r2, [r7, #6]
 800a0a8:	4906      	ldr	r1, [pc, #24]	; (800a0c4 <config_motors+0xca8>)
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	011b      	lsls	r3, r3, #4
 800a0b2:	440b      	add	r3, r1
 800a0b4:	33c0      	adds	r3, #192	; 0xc0
 800a0b6:	4a0a      	ldr	r2, [pc, #40]	; (800a0e0 <config_motors+0xcc4>)
 800a0b8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 800a0ba:	79ba      	ldrb	r2, [r7, #6]
 800a0bc:	e012      	b.n	800a0e4 <config_motors+0xcc8>
 800a0be:	bf00      	nop
 800a0c0:	43480000 	.word	0x43480000
 800a0c4:	20001850 	.word	0x20001850
 800a0c8:	447a0000 	.word	0x447a0000
 800a0cc:	3dcccccd 	.word	0x3dcccccd
 800a0d0:	461c4000 	.word	0x461c4000
 800a0d4:	469c4000 	.word	0x469c4000
 800a0d8:	bfc00000 	.word	0xbfc00000
 800a0dc:	40c90fdb 	.word	0x40c90fdb
 800a0e0:	c0c90fdb 	.word	0xc0c90fdb
 800a0e4:	499d      	ldr	r1, [pc, #628]	; (800a35c <config_motors+0xf40>)
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	011b      	lsls	r3, r3, #4
 800a0ea:	1a9b      	subs	r3, r3, r2
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	440b      	add	r3, r1
 800a0f0:	33d4      	adds	r3, #212	; 0xd4
 800a0f2:	f04f 0200 	mov.w	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 800a0f8:	79ba      	ldrb	r2, [r7, #6]
 800a0fa:	4998      	ldr	r1, [pc, #608]	; (800a35c <config_motors+0xf40>)
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	440b      	add	r3, r1
 800a106:	3368      	adds	r3, #104	; 0x68
 800a108:	4a95      	ldr	r2, [pc, #596]	; (800a360 <config_motors+0xf44>)
 800a10a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 800a10c:	79ba      	ldrb	r2, [r7, #6]
 800a10e:	4993      	ldr	r1, [pc, #588]	; (800a35c <config_motors+0xf40>)
 800a110:	4613      	mov	r3, r2
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	440b      	add	r3, r1
 800a11a:	336c      	adds	r3, #108	; 0x6c
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 800a122:	79ba      	ldrb	r2, [r7, #6]
 800a124:	498d      	ldr	r1, [pc, #564]	; (800a35c <config_motors+0xf40>)
 800a126:	4613      	mov	r3, r2
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	011b      	lsls	r3, r3, #4
 800a12e:	440b      	add	r3, r1
 800a130:	3370      	adds	r3, #112	; 0x70
 800a132:	f04f 0200 	mov.w	r2, #0
 800a136:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 800a138:	79ba      	ldrb	r2, [r7, #6]
 800a13a:	4988      	ldr	r1, [pc, #544]	; (800a35c <config_motors+0xf40>)
 800a13c:	4613      	mov	r3, r2
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	1a9b      	subs	r3, r3, r2
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	440b      	add	r3, r1
 800a146:	3380      	adds	r3, #128	; 0x80
 800a148:	4a86      	ldr	r2, [pc, #536]	; (800a364 <config_motors+0xf48>)
 800a14a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 800a14c:	79ba      	ldrb	r2, [r7, #6]
 800a14e:	4983      	ldr	r1, [pc, #524]	; (800a35c <config_motors+0xf40>)
 800a150:	4613      	mov	r3, r2
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	1a9b      	subs	r3, r3, r2
 800a156:	011b      	lsls	r3, r3, #4
 800a158:	440b      	add	r3, r1
 800a15a:	3384      	adds	r3, #132	; 0x84
 800a15c:	4a82      	ldr	r2, [pc, #520]	; (800a368 <config_motors+0xf4c>)
 800a15e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 800a160:	79ba      	ldrb	r2, [r7, #6]
 800a162:	497e      	ldr	r1, [pc, #504]	; (800a35c <config_motors+0xf40>)
 800a164:	4613      	mov	r3, r2
 800a166:	011b      	lsls	r3, r3, #4
 800a168:	1a9b      	subs	r3, r3, r2
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	440b      	add	r3, r1
 800a16e:	3338      	adds	r3, #56	; 0x38
 800a170:	4a7c      	ldr	r2, [pc, #496]	; (800a364 <config_motors+0xf48>)
 800a172:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 800a174:	79ba      	ldrb	r2, [r7, #6]
 800a176:	4979      	ldr	r1, [pc, #484]	; (800a35c <config_motors+0xf40>)
 800a178:	4613      	mov	r3, r2
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	1a9b      	subs	r3, r3, r2
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	440b      	add	r3, r1
 800a182:	333c      	adds	r3, #60	; 0x3c
 800a184:	4a79      	ldr	r2, [pc, #484]	; (800a36c <config_motors+0xf50>)
 800a186:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 800a188:	79ba      	ldrb	r2, [r7, #6]
 800a18a:	4974      	ldr	r1, [pc, #464]	; (800a35c <config_motors+0xf40>)
 800a18c:	4613      	mov	r3, r2
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	1a9b      	subs	r3, r3, r2
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	440b      	add	r3, r1
 800a196:	3340      	adds	r3, #64	; 0x40
 800a198:	4a72      	ldr	r2, [pc, #456]	; (800a364 <config_motors+0xf48>)
 800a19a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 800a19c:	79ba      	ldrb	r2, [r7, #6]
 800a19e:	496f      	ldr	r1, [pc, #444]	; (800a35c <config_motors+0xf40>)
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	440b      	add	r3, r1
 800a1aa:	3350      	adds	r3, #80	; 0x50
 800a1ac:	4a70      	ldr	r2, [pc, #448]	; (800a370 <config_motors+0xf54>)
 800a1ae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 800a1b0:	79ba      	ldrb	r2, [r7, #6]
 800a1b2:	496a      	ldr	r1, [pc, #424]	; (800a35c <config_motors+0xf40>)
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	1a9b      	subs	r3, r3, r2
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	440b      	add	r3, r1
 800a1be:	3354      	adds	r3, #84	; 0x54
 800a1c0:	4a6c      	ldr	r2, [pc, #432]	; (800a374 <config_motors+0xf58>)
 800a1c2:	601a      	str	r2, [r3, #0]
#endif



#ifdef R2_MOTOR_ID
	motor_id = R2_MOTOR_ID - 1;
 800a1c4:	2305      	movs	r3, #5
 800a1c6:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 800a1c8:	79ba      	ldrb	r2, [r7, #6]
 800a1ca:	4964      	ldr	r1, [pc, #400]	; (800a35c <config_motors+0xf40>)
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	011b      	lsls	r3, r3, #4
 800a1d4:	440b      	add	r3, r1
 800a1d6:	3302      	adds	r3, #2
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
	set_motor_config(&can_motors[motor_id]);
 800a1dc:	79ba      	ldrb	r2, [r7, #6]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	1a9b      	subs	r3, r3, r2
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	4a5d      	ldr	r2, [pc, #372]	; (800a35c <config_motors+0xf40>)
 800a1e8:	4413      	add	r3, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff f8b0 	bl	8009350 <set_motor_config>
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 800a1f0:	79ba      	ldrb	r2, [r7, #6]
 800a1f2:	495a      	ldr	r1, [pc, #360]	; (800a35c <config_motors+0xf40>)
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	1a9b      	subs	r3, r3, r2
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	440b      	add	r3, r1
 800a1fe:	33c8      	adds	r3, #200	; 0xc8
 800a200:	f04f 0200 	mov.w	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang = R2_CENTER;
 800a206:	79ba      	ldrb	r2, [r7, #6]
 800a208:	4954      	ldr	r1, [pc, #336]	; (800a35c <config_motors+0xf40>)
 800a20a:	4613      	mov	r3, r2
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	1a9b      	subs	r3, r3, r2
 800a210:	011b      	lsls	r3, r3, #4
 800a212:	440b      	add	r3, r1
 800a214:	339c      	adds	r3, #156	; 0x9c
 800a216:	f641 5281 	movw	r2, #7553	; 0x1d81
 800a21a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang = R2_MAX_ANG;
 800a21c:	79ba      	ldrb	r2, [r7, #6]
 800a21e:	494f      	ldr	r1, [pc, #316]	; (800a35c <config_motors+0xf40>)
 800a220:	4613      	mov	r3, r2
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	1a9b      	subs	r3, r3, r2
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	440b      	add	r3, r1
 800a22a:	33b8      	adds	r3, #184	; 0xb8
 800a22c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800a230:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang = R2_MIN_ANG;
 800a232:	79ba      	ldrb	r2, [r7, #6]
 800a234:	4949      	ldr	r1, [pc, #292]	; (800a35c <config_motors+0xf40>)
 800a236:	4613      	mov	r3, r2
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	1a9b      	subs	r3, r3, r2
 800a23c:	011b      	lsls	r3, r3, #4
 800a23e:	440b      	add	r3, r1
 800a240:	33b4      	adds	r3, #180	; 0xb4
 800a242:	4a4d      	ldr	r2, [pc, #308]	; (800a378 <config_motors+0xf5c>)
 800a244:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800a246:	79ba      	ldrb	r2, [r7, #6]
 800a248:	4944      	ldr	r1, [pc, #272]	; (800a35c <config_motors+0xf40>)
 800a24a:	4613      	mov	r3, r2
 800a24c:	011b      	lsls	r3, r3, #4
 800a24e:	1a9b      	subs	r3, r3, r2
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	440b      	add	r3, r1
 800a254:	33c4      	adds	r3, #196	; 0xc4
 800a256:	4a49      	ldr	r2, [pc, #292]	; (800a37c <config_motors+0xf60>)
 800a258:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800a25a:	79ba      	ldrb	r2, [r7, #6]
 800a25c:	493f      	ldr	r1, [pc, #252]	; (800a35c <config_motors+0xf40>)
 800a25e:	4613      	mov	r3, r2
 800a260:	011b      	lsls	r3, r3, #4
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	440b      	add	r3, r1
 800a268:	33c0      	adds	r3, #192	; 0xc0
 800a26a:	4a45      	ldr	r2, [pc, #276]	; (800a380 <config_motors+0xf64>)
 800a26c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.wheel_circ = 0;
 800a26e:	79ba      	ldrb	r2, [r7, #6]
 800a270:	493a      	ldr	r1, [pc, #232]	; (800a35c <config_motors+0xf40>)
 800a272:	4613      	mov	r3, r2
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	1a9b      	subs	r3, r3, r2
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	440b      	add	r3, r1
 800a27c:	33d4      	adds	r3, #212	; 0xd4
 800a27e:	f04f 0200 	mov.w	r2, #0
 800a282:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 800a284:	79ba      	ldrb	r2, [r7, #6]
 800a286:	4935      	ldr	r1, [pc, #212]	; (800a35c <config_motors+0xf40>)
 800a288:	4613      	mov	r3, r2
 800a28a:	011b      	lsls	r3, r3, #4
 800a28c:	1a9b      	subs	r3, r3, r2
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	440b      	add	r3, r1
 800a292:	3368      	adds	r3, #104	; 0x68
 800a294:	4a32      	ldr	r2, [pc, #200]	; (800a360 <config_motors+0xf44>)
 800a296:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800a298:	79ba      	ldrb	r2, [r7, #6]
 800a29a:	4930      	ldr	r1, [pc, #192]	; (800a35c <config_motors+0xf40>)
 800a29c:	4613      	mov	r3, r2
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	1a9b      	subs	r3, r3, r2
 800a2a2:	011b      	lsls	r3, r3, #4
 800a2a4:	440b      	add	r3, r1
 800a2a6:	336c      	adds	r3, #108	; 0x6c
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 800a2ae:	79ba      	ldrb	r2, [r7, #6]
 800a2b0:	492a      	ldr	r1, [pc, #168]	; (800a35c <config_motors+0xf40>)
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	011b      	lsls	r3, r3, #4
 800a2b6:	1a9b      	subs	r3, r3, r2
 800a2b8:	011b      	lsls	r3, r3, #4
 800a2ba:	440b      	add	r3, r1
 800a2bc:	3370      	adds	r3, #112	; 0x70
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 800a2c4:	79ba      	ldrb	r2, [r7, #6]
 800a2c6:	4925      	ldr	r1, [pc, #148]	; (800a35c <config_motors+0xf40>)
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	1a9b      	subs	r3, r3, r2
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	440b      	add	r3, r1
 800a2d2:	3380      	adds	r3, #128	; 0x80
 800a2d4:	4a2b      	ldr	r2, [pc, #172]	; (800a384 <config_motors+0xf68>)
 800a2d6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 800a2d8:	79ba      	ldrb	r2, [r7, #6]
 800a2da:	4920      	ldr	r1, [pc, #128]	; (800a35c <config_motors+0xf40>)
 800a2dc:	4613      	mov	r3, r2
 800a2de:	011b      	lsls	r3, r3, #4
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	011b      	lsls	r3, r3, #4
 800a2e4:	440b      	add	r3, r1
 800a2e6:	3384      	adds	r3, #132	; 0x84
 800a2e8:	4a1d      	ldr	r2, [pc, #116]	; (800a360 <config_motors+0xf44>)
 800a2ea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 800a2ec:	79ba      	ldrb	r2, [r7, #6]
 800a2ee:	491b      	ldr	r1, [pc, #108]	; (800a35c <config_motors+0xf40>)
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	011b      	lsls	r3, r3, #4
 800a2f4:	1a9b      	subs	r3, r3, r2
 800a2f6:	011b      	lsls	r3, r3, #4
 800a2f8:	440b      	add	r3, r1
 800a2fa:	3338      	adds	r3, #56	; 0x38
 800a2fc:	4a18      	ldr	r2, [pc, #96]	; (800a360 <config_motors+0xf44>)
 800a2fe:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 800a300:	79ba      	ldrb	r2, [r7, #6]
 800a302:	4916      	ldr	r1, [pc, #88]	; (800a35c <config_motors+0xf40>)
 800a304:	4613      	mov	r3, r2
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	1a9b      	subs	r3, r3, r2
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	440b      	add	r3, r1
 800a30e:	333c      	adds	r3, #60	; 0x3c
 800a310:	4a1d      	ldr	r2, [pc, #116]	; (800a388 <config_motors+0xf6c>)
 800a312:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 800a314:	79ba      	ldrb	r2, [r7, #6]
 800a316:	4911      	ldr	r1, [pc, #68]	; (800a35c <config_motors+0xf40>)
 800a318:	4613      	mov	r3, r2
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	440b      	add	r3, r1
 800a322:	3340      	adds	r3, #64	; 0x40
 800a324:	f04f 0200 	mov.w	r2, #0
 800a328:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 800a32a:	79ba      	ldrb	r2, [r7, #6]
 800a32c:	490b      	ldr	r1, [pc, #44]	; (800a35c <config_motors+0xf40>)
 800a32e:	4613      	mov	r3, r2
 800a330:	011b      	lsls	r3, r3, #4
 800a332:	1a9b      	subs	r3, r3, r2
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	440b      	add	r3, r1
 800a338:	3350      	adds	r3, #80	; 0x50
 800a33a:	4a14      	ldr	r2, [pc, #80]	; (800a38c <config_motors+0xf70>)
 800a33c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 800a33e:	79ba      	ldrb	r2, [r7, #6]
 800a340:	4906      	ldr	r1, [pc, #24]	; (800a35c <config_motors+0xf40>)
 800a342:	4613      	mov	r3, r2
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	440b      	add	r3, r1
 800a34c:	3354      	adds	r3, #84	; 0x54
 800a34e:	4a09      	ldr	r2, [pc, #36]	; (800a374 <config_motors+0xf58>)
 800a350:	601a      	str	r2, [r3, #0]
#endif

}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20001850 	.word	0x20001850
 800a360:	43480000 	.word	0x43480000
 800a364:	42c80000 	.word	0x42c80000
 800a368:	43c80000 	.word	0x43c80000
 800a36c:	3ba3d70a 	.word	0x3ba3d70a
 800a370:	459c4000 	.word	0x459c4000
 800a374:	469c4000 	.word	0x469c4000
 800a378:	bfc00000 	.word	0xbfc00000
 800a37c:	40c90fdb 	.word	0x40c90fdb
 800a380:	c0c90fdb 	.word	0xc0c90fdb
 800a384:	447a0000 	.word	0x447a0000
 800a388:	3dcccccd 	.word	0x3dcccccd
 800a38c:	461c4000 	.word	0x461c4000

0800a390 <bz_buzzer>:
void bz_buzzer(uint8_t high, uint8_t low) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	460a      	mov	r2, r1
 800a39a:	71fb      	strb	r3, [r7, #7]
 800a39c:	4613      	mov	r3, r2
 800a39e:	71bb      	strb	r3, [r7, #6]
	int8_t temp_msg = bz_debug_high;
 800a3a0:	2309      	movs	r3, #9
 800a3a2:	737b      	strb	r3, [r7, #13]
	for (int8_t i = 0; i < high; i++) {
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
 800a3a8:	e00d      	b.n	800a3c6 <bz_buzzer+0x36>
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800a3aa:	4b1c      	ldr	r3, [pc, #112]	; (800a41c <bz_buzzer+0x8c>)
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	f107 010d 	add.w	r1, r7, #13
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f00d fce9 	bl	8017d8c <xQueueGenericSend>
	for (int8_t i = 0; i < high; i++) {
 800a3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	73fb      	strb	r3, [r7, #15]
 800a3c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	dbec      	blt.n	800a3aa <bz_buzzer+0x1a>
	}
	temp_msg = bz_debug_low;
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	737b      	strb	r3, [r7, #13]
	for (int8_t i = 0; i < low; i++) {
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73bb      	strb	r3, [r7, #14]
 800a3d8:	e00d      	b.n	800a3f6 <bz_buzzer+0x66>
		xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800a3da:	4b10      	ldr	r3, [pc, #64]	; (800a41c <bz_buzzer+0x8c>)
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	f107 010d 	add.w	r1, r7, #13
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f00d fcd1 	bl	8017d8c <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 800a3ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	73bb      	strb	r3, [r7, #14]
 800a3f6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800a3fa:	79bb      	ldrb	r3, [r7, #6]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	dbec      	blt.n	800a3da <bz_buzzer+0x4a>
	}
	temp_msg = bz_debug_rest;
 800a400:	230a      	movs	r3, #10
 800a402:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800a404:	4b05      	ldr	r3, [pc, #20]	; (800a41c <bz_buzzer+0x8c>)
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	f107 010d 	add.w	r1, r7, #13
 800a40c:	2300      	movs	r3, #0
 800a40e:	2200      	movs	r2, #0
 800a410:	f00d fcbc 	bl	8017d8c <xQueueGenericSend>
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	2000048c 	.word	0x2000048c

0800a420 <check_motors>:

uint16_t check_motors() {
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 800a42a:	f7f7 ff21 	bl	8002270 <get_microseconds>
 800a42e:	6038      	str	r0, [r7, #0]
	if (curr_time - can_motors[FR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a430:	4b3b      	ldr	r3, [pc, #236]	; (800a520 <check_motors+0x100>)
 800a432:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a43e:	d903      	bls.n	800a448 <check_motors+0x28>
		error |= 1 << (0);
 800a440:	88fb      	ldrh	r3, [r7, #6]
 800a442:	f043 0301 	orr.w	r3, r3, #1
 800a446:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[FL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a448:	4b35      	ldr	r3, [pc, #212]	; (800a520 <check_motors+0x100>)
 800a44a:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a456:	d903      	bls.n	800a460 <check_motors+0x40>
		error |= 1 << (1);
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	f043 0302 	orr.w	r3, r3, #2
 800a45e:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BL_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a460:	4b2f      	ldr	r3, [pc, #188]	; (800a520 <check_motors+0x100>)
 800a462:	f8d3 3e04 	ldr.w	r3, [r3, #3588]	; 0xe04
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a46e:	d903      	bls.n	800a478 <check_motors+0x58>
		error |= 1 << (2);
 800a470:	88fb      	ldrh	r3, [r7, #6]
 800a472:	f043 0304 	orr.w	r3, r3, #4
 800a476:	80fb      	strh	r3, [r7, #6]
	}
	if (curr_time - can_motors[BR_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a478:	4b29      	ldr	r3, [pc, #164]	; (800a520 <check_motors+0x100>)
 800a47a:	f8d3 3ef4 	ldr.w	r3, [r3, #3828]	; 0xef4
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a486:	d903      	bls.n	800a490 <check_motors+0x70>
		error |= 1 << (3);
 800a488:	88fb      	ldrh	r3, [r7, #6]
 800a48a:	f043 0308 	orr.w	r3, r3, #8
 800a48e:	80fb      	strh	r3, [r7, #6]
	}

	if (curr_time - can_motors[LFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a490:	4b23      	ldr	r3, [pc, #140]	; (800a520 <check_motors+0x100>)
 800a492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a496:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4a2:	d903      	bls.n	800a4ac <check_motors+0x8c>
		error |= 1 << (4);
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	f043 0310 	orr.w	r3, r3, #16
 800a4aa:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[RFRICTION_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a4ac:	4b1c      	ldr	r3, [pc, #112]	; (800a520 <check_motors+0x100>)
 800a4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4be:	d903      	bls.n	800a4c8 <check_motors+0xa8>
		error |= 1 << (5);
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	f043 0320 	orr.w	r3, r3, #32
 800a4c6:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[FEEDER_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a4c8:	4b15      	ldr	r3, [pc, #84]	; (800a520 <check_motors+0x100>)
 800a4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4da:	d903      	bls.n	800a4e4 <check_motors+0xc4>
		error |= 1 << 6;
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e2:	80fb      	strh	r3, [r7, #6]

	}

	if (curr_time - can_motors[L1_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <check_motors+0x100>)
 800a4e6:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4f2:	d903      	bls.n	800a4fc <check_motors+0xdc>
		error |= 1 << 7;
 800a4f4:	88fb      	ldrh	r3, [r7, #6]
 800a4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4fa:	80fb      	strh	r3, [r7, #6]

	}
	if (curr_time - can_motors[R1_MOTOR_ID - 1].last_time[0] > MOTOR_TIMEOUT_MAX) {
 800a4fc:	4b08      	ldr	r3, [pc, #32]	; (800a520 <check_motors+0x100>)
 800a4fe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a50a:	d903      	bls.n	800a514 <check_motors+0xf4>
		error |= 1 << 8;
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a512:	80fb      	strh	r3, [r7, #6]

	}
	return error;
 800a514:	88fb      	ldrh	r3, [r7, #6]

}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20001850 	.word	0x20001850

0800a524 <motor_calib_task>:

void motor_calib_task(void *argument) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 800a52c:	2200      	movs	r2, #0
 800a52e:	2100      	movs	r1, #0
 800a530:	481d      	ldr	r0, [pc, #116]	; (800a5a8 <motor_calib_task+0x84>)
 800a532:	f7f6 feb5 	bl	80012a0 <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	481c      	ldr	r0, [pc, #112]	; (800a5ac <motor_calib_task+0x88>)
 800a53c:	f7f6 feb0 	bl	80012a0 <can_start>
	config_motors();
 800a540:	f7fe ff6c 	bl	800941c <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 800a544:	f240 13ff 	movw	r3, #511	; 0x1ff
 800a548:	81fb      	strh	r3, [r7, #14]
	vTaskDelay(50);
 800a54a:	2032      	movs	r0, #50	; 0x32
 800a54c:	f00e faca 	bl	8018ae4 <vTaskDelay>
	uint8_t startup = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	737b      	strb	r3, [r7, #13]
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0){
 800a554:	89fb      	ldrh	r3, [r7, #14]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d102      	bne.n	800a560 <motor_calib_task+0x3c>
		temp_msg = ok;
 800a55a:	2301      	movs	r3, #1
 800a55c:	733b      	strb	r3, [r7, #12]
 800a55e:	e001      	b.n	800a564 <motor_calib_task+0x40>
	} else {
		temp_msg = not_ok;
 800a560:	2302      	movs	r3, #2
 800a562:	733b      	strb	r3, [r7, #12]
	}
	xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 800a564:	4b12      	ldr	r3, [pc, #72]	; (800a5b0 <motor_calib_task+0x8c>)
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	f107 010c 	add.w	r1, r7, #12
 800a56c:	2300      	movs	r3, #0
 800a56e:	2200      	movs	r2, #0
 800a570:	f00d fc0c 	bl	8017d8c <xQueueGenericSend>

	while (1) {
		error = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	81fb      	strh	r3, [r7, #14]

		error = check_motors();
 800a578:	f7ff ff52 	bl	800a420 <check_motors>
 800a57c:	4603      	mov	r3, r0
 800a57e:	81fb      	strh	r3, [r7, #14]
		g_motor_fault = error;
 800a580:	4a0c      	ldr	r2, [pc, #48]	; (800a5b4 <motor_calib_task+0x90>)
 800a582:	89fb      	ldrh	r3, [r7, #14]
 800a584:	8013      	strh	r3, [r2, #0]
			}
			vTaskDelay(5000);
			continue;
		}
		else if (MOTOR_ONLINE_CHECK == 0) {
			if(error != 0) {
 800a586:	89fb      	ldrh	r3, [r7, #14]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <motor_calib_task+0x7a>
			bz_buzzer(0, 2);
 800a58c:	2102      	movs	r1, #2
 800a58e:	2000      	movs	r0, #0
 800a590:	f7ff fefe 	bl	800a390 <bz_buzzer>
			vTaskDelay(5000);
 800a594:	f241 3088 	movw	r0, #5000	; 0x1388
 800a598:	f00e faa4 	bl	8018ae4 <vTaskDelay>
			continue;
 800a59c:	e003      	b.n	800a5a6 <motor_calib_task+0x82>
			}
		}
		vTaskDelay(10000);
 800a59e:	f242 7010 	movw	r0, #10000	; 0x2710
 800a5a2:	f00e fa9f 	bl	8018ae4 <vTaskDelay>
		error = 0;
 800a5a6:	e7e5      	b.n	800a574 <motor_calib_task+0x50>
 800a5a8:	200003f4 	.word	0x200003f4
 800a5ac:	2000041c 	.word	0x2000041c
 800a5b0:	2000048c 	.word	0x2000048c
 800a5b4:	2000329c 	.word	0x2000329c

0800a5b8 <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08e      	sub	sp, #56	; 0x38
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	ed87 0b04 	vstr	d0, [r7, #16]
 800a5c2:	ed87 1b02 	vstr	d1, [r7, #8]
 800a5c6:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->last_time[0] = get_microseconds();
 800a5d0:	f7f7 fe4e 	bl	8002270 <get_microseconds>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	629a      	str	r2, [r3, #40]	; 0x28
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 800a5da:	2301      	movs	r3, #1
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 800a5ea:	f04f 0200 	mov.w	r2, #0
 800a5ee:	f04f 0300 	mov.w	r3, #0
 800a5f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 800a5f6:	f04f 0200 	mov.w	r2, #0
 800a5fa:	f04f 0300 	mov.w	r3, #0
 800a5fe:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[1] = pid->error[0];
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68da      	ldr	r2, [r3, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 800a60a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a60e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a612:	f7f5 fe39 	bl	8000288 <__aeabi_dsub>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4610      	mov	r0, r2
 800a61c:	4619      	mov	r1, r3
 800a61e:	f7f6 fae3 	bl	8000be8 <__aeabi_d2f>
 800a622:	4602      	mov	r2, r0
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	ed93 7a03 	vldr	s14, [r3, #12]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	edd3 7a00 	vldr	s15, [r3]
 800a634:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a646:	ee17 0a90 	vmov	r0, s15
 800a64a:	f7f5 ff7d 	bl	8000548 <__aeabi_f2d>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	ed93 7a03 	vldr	s14, [r3, #12]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	edd3 7a04 	vldr	s15, [r3, #16]
 800a662:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	edd3 7a02 	vldr	s15, [r3, #8]
 800a66c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a672:	ee07 3a90 	vmov	s15, r3
 800a676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67e:	ee17 0a90 	vmov	r0, s15
 800a682:	f7f5 ff61 	bl	8000548 <__aeabi_f2d>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	ed93 7a05 	vldr	s14, [r3, #20]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	edd3 6a03 	vldr	s13, [r3, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a6a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a6:	ee07 3a90 	vmov	s15, r3
 800a6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f103 0214 	add.w	r2, r3, #20
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	edd3 7a06 	vldr	s15, [r3, #24]
 800a6c8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a738 <speed_pid+0x180>
 800a6cc:	eeb0 0a67 	vmov.f32	s0, s15
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f000 fad4 	bl	800ac7e <float_minmax>
	Iout = pid->integral;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7f5 ff34 	bl	8000548 <__aeabi_f2d>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout + Dout;
 800a6e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a6f0:	f7f5 fdcc 	bl	800028c <__adddf3>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a700:	f7f5 fdc4 	bl	800028c <__adddf3>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4610      	mov	r0, r2
 800a70a:	4619      	mov	r1, r3
 800a70c:	f7f6 fa6c 	bl	8000be8 <__aeabi_d2f>
 800a710:	4602      	mov	r2, r0
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	621a      	str	r2, [r3, #32]
	float_minmax(&pid->output, pid->max_out, 0);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f103 0220 	add.w	r2, r3, #32
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	edd3 7a07 	vldr	s15, [r3, #28]
 800a722:	eddf 0a05 	vldr	s1, [pc, #20]	; 800a738 <speed_pid+0x180>
 800a726:	eeb0 0a67 	vmov.f32	s0, s15
 800a72a:	4610      	mov	r0, r2
 800a72c:	f000 faa7 	bl	800ac7e <float_minmax>
}
 800a730:	bf00      	nop
 800a732:	3738      	adds	r7, #56	; 0x38
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	00000000 	.word	0x00000000

0800a73c <motor_send_can>:
		motor_send_can(can_motors, Leftwheel_MOTOR_ID, Rightwheel_MOTOR_ID, 0, 0);
		vTaskDelayUntil(&xLastWakeTime, 4);
	}
}

void motor_send_can(motor_data_t motor_all[], uint8_t id_one, uint8_t id_two, uint8_t id_three, uint8_t id_four) {
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08e      	sub	sp, #56	; 0x38
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	461a      	mov	r2, r3
 800a74a:	4603      	mov	r3, r0
 800a74c:	70fb      	strb	r3, [r7, #3]
 800a74e:	460b      	mov	r3, r1
 800a750:	70bb      	strb	r3, [r7, #2]
 800a752:	4613      	mov	r3, r2
 800a754:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 800a75a:	2300      	movs	r3, #0
 800a75c:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 800a75e:	2300      	movs	r3, #0
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 800a762:	2308      	movs	r3, #8
 800a764:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	2b18      	cmp	r3, #24
 800a76a:	d80b      	bhi.n	800a784 <motor_send_can+0x48>
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 800a772:	78fb      	ldrb	r3, [r7, #3]
 800a774:	3b01      	subs	r3, #1
 800a776:	2201      	movs	r2, #1
 800a778:	fa02 f303 	lsl.w	r3, r2, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a780:	4313      	orrs	r3, r2
 800a782:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 800a784:	78bb      	ldrb	r3, [r7, #2]
 800a786:	2b18      	cmp	r3, #24
 800a788:	d80b      	bhi.n	800a7a2 <motor_send_can+0x66>
 800a78a:	78bb      	ldrb	r3, [r7, #2]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d008      	beq.n	800a7a2 <motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 800a790:	78bb      	ldrb	r3, [r7, #2]
 800a792:	3b01      	subs	r3, #1
 800a794:	2201      	movs	r2, #1
 800a796:	fa02 f303 	lsl.w	r3, r2, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 800a7a2:	787b      	ldrb	r3, [r7, #1]
 800a7a4:	2b18      	cmp	r3, #24
 800a7a6:	d80b      	bhi.n	800a7c0 <motor_send_can+0x84>
 800a7a8:	787b      	ldrb	r3, [r7, #1]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 800a7ae:	787b      	ldrb	r3, [r7, #1]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 800a7c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7c4:	2b18      	cmp	r3, #24
 800a7c6:	d80d      	bhi.n	800a7e4 <motor_send_can+0xa8>
 800a7c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d009      	beq.n	800a7e4 <motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 800a7d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (temp_checker & 0x00000F) {
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e6:	f003 030f 	and.w	r3, r3, #15
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d054      	beq.n	800a898 <motor_send_can+0x15c>
		CAN_tx_message.StdId = 0x200;
 800a7ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f2:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0].rpm_pid.output;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a7fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7fe:	ee17 3a90 	vmov	r3, s15
 800a802:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800a804:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a808:	121b      	asrs	r3, r3, #8
 800a80a:	b21b      	sxth	r3, r3
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800a810:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a812:	b2db      	uxtb	r3, r3
 800a814:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1].rpm_pid.output;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	33f0      	adds	r3, #240	; 0xf0
 800a81a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a81e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a822:	ee17 3a90 	vmov	r3, s15
 800a826:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800a828:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a82c:	121b      	asrs	r3, r3, #8
 800a82e:	b21b      	sxth	r3, r3
 800a830:	b2db      	uxtb	r3, r3
 800a832:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800a834:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a836:	b2db      	uxtb	r3, r3
 800a838:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2].rpm_pid.output;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800a840:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a848:	ee17 3a90 	vmov	r3, s15
 800a84c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800a84e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a852:	121b      	asrs	r3, r3, #8
 800a854:	b21b      	sxth	r3, r3
 800a856:	b2db      	uxtb	r3, r3
 800a858:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800a85a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3].rpm_pid.output;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800a866:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a86a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a86e:	ee17 3a90 	vmov	r3, s15
 800a872:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800a874:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a878:	121b      	asrs	r3, r3, #8
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800a880:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a882:	b2db      	uxtb	r3, r3
 800a884:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800a886:	f107 030c 	add.w	r3, r7, #12
 800a88a:	f107 0210 	add.w	r2, r7, #16
 800a88e:	f107 0118 	add.w	r1, r7, #24
 800a892:	48bc      	ldr	r0, [pc, #752]	; (800ab84 <motor_send_can+0x448>)
 800a894:	f001 fb2e 	bl	800bef4 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0000F0) {
 800a898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d057      	beq.n	800a952 <motor_send_can+0x216>
		CAN_tx_message.StdId = 0x1FF;
 800a8a2:	f240 13ff 	movw	r3, #511	; 0x1ff
 800a8a6:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4].rpm_pid.output;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800a8ae:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a8b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8b6:	ee17 3a90 	vmov	r3, s15
 800a8ba:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800a8bc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a8c0:	121b      	asrs	r3, r3, #8
 800a8c2:	b21b      	sxth	r3, r3
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800a8c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5].rpm_pid.output;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a8d4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a8d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8dc:	ee17 3a90 	vmov	r3, s15
 800a8e0:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800a8e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a8e6:	121b      	asrs	r3, r3, #8
 800a8e8:	b21b      	sxth	r3, r3
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800a8ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6].rpm_pid.output;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800a8fa:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a8fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a902:	ee17 3a90 	vmov	r3, s15
 800a906:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800a908:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a90c:	121b      	asrs	r3, r3, #8
 800a90e:	b21b      	sxth	r3, r3
 800a910:	b2db      	uxtb	r3, r3
 800a912:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800a914:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a916:	b2db      	uxtb	r3, r3
 800a918:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7].rpm_pid.output;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800a920:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a928:	ee17 3a90 	vmov	r3, s15
 800a92c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800a92e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a932:	121b      	asrs	r3, r3, #8
 800a934:	b21b      	sxth	r3, r3
 800a936:	b2db      	uxtb	r3, r3
 800a938:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800a93a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800a940:	f107 030c 	add.w	r3, r7, #12
 800a944:	f107 0210 	add.w	r2, r7, #16
 800a948:	f107 0118 	add.w	r1, r7, #24
 800a94c:	488d      	ldr	r0, [pc, #564]	; (800ab84 <motor_send_can+0x448>)
 800a94e:	f001 fad1 	bl	800bef4 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x000F00) {
 800a952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a954:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d057      	beq.n	800aa0c <motor_send_can+0x2d0>
		CAN_tx_message.StdId = 0x2FF;
 800a95c:	f240 23ff 	movw	r3, #767	; 0x2ff
 800a960:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8].rpm_pid.output;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800a968:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a96c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a970:	ee17 3a90 	vmov	r3, s15
 800a974:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800a976:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a97a:	121b      	asrs	r3, r3, #8
 800a97c:	b21b      	sxth	r3, r3
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800a982:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a984:	b2db      	uxtb	r3, r3
 800a986:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9].rpm_pid.output;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 800a98e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a996:	ee17 3a90 	vmov	r3, s15
 800a99a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800a99c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a9a0:	121b      	asrs	r3, r3, #8
 800a9a2:	b21b      	sxth	r3, r3
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800a9a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA].rpm_pid.output;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800a9b4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a9b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9bc:	ee17 3a90 	vmov	r3, s15
 800a9c0:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800a9c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a9c6:	121b      	asrs	r3, r3, #8
 800a9c8:	b21b      	sxth	r3, r3
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800a9ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB].rpm_pid.output;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f503 6325 	add.w	r3, r3, #2640	; 0xa50
 800a9da:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a9de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9e2:	ee17 3a90 	vmov	r3, s15
 800a9e6:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800a9e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800a9ec:	121b      	asrs	r3, r3, #8
 800a9ee:	b21b      	sxth	r3, r3
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800a9f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	f107 0210 	add.w	r2, r7, #16
 800aa02:	f107 0118 	add.w	r1, r7, #24
 800aa06:	485f      	ldr	r0, [pc, #380]	; (800ab84 <motor_send_can+0x448>)
 800aa08:	f001 fa74 	bl	800bef4 <HAL_CAN_AddTxMessage>
	}
#ifndef CHASSIS_MCU
	if (temp_checker & 0x00F000) {
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d057      	beq.n	800aac6 <motor_send_can+0x38a>
		CAN_tx_message.StdId = 0x200;
 800aa16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa1a:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0 + 12].rpm_pid.output;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800aa22:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aa26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa2a:	ee17 3a90 	vmov	r3, s15
 800aa2e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800aa30:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800aa34:	121b      	asrs	r3, r3, #8
 800aa36:	b21b      	sxth	r3, r3
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800aa3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1 + 12].rpm_pid.output;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800aa48:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aa4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa50:	ee17 3a90 	vmov	r3, s15
 800aa54:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800aa56:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800aa5a:	121b      	asrs	r3, r3, #8
 800aa5c:	b21b      	sxth	r3, r3
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800aa62:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2 + 12].rpm_pid.output;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800aa6e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aa72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa76:	ee17 3a90 	vmov	r3, s15
 800aa7a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800aa7c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800aa80:	121b      	asrs	r3, r3, #8
 800aa82:	b21b      	sxth	r3, r3
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800aa88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3 + 12].rpm_pid.output;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800aa94:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aa98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa9c:	ee17 3a90 	vmov	r3, s15
 800aaa0:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800aaa2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800aaa6:	121b      	asrs	r3, r3, #8
 800aaa8:	b21b      	sxth	r3, r3
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800aaae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	f107 0210 	add.w	r2, r7, #16
 800aabc:	f107 0118 	add.w	r1, r7, #24
 800aac0:	4831      	ldr	r0, [pc, #196]	; (800ab88 <motor_send_can+0x44c>)
 800aac2:	f001 fa17 	bl	800bef4 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0F0000) {
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d05d      	beq.n	800ab8c <motor_send_can+0x450>
		CAN_tx_message.StdId = 0x1FF;
 800aad0:	f240 13ff 	movw	r3, #511	; 0x1ff
 800aad4:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4 + 12].rpm_pid.output;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800aadc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aae4:	ee17 3a90 	vmov	r3, s15
 800aae8:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800aaea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800aaee:	121b      	asrs	r3, r3, #8
 800aaf0:	b21b      	sxth	r3, r3
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800aaf6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5 + 12].rpm_pid.output;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 800ab02:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ab06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab0a:	ee17 3a90 	vmov	r3, s15
 800ab0e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800ab10:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ab14:	121b      	asrs	r3, r3, #8
 800ab16:	b21b      	sxth	r3, r3
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800ab1c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6 + 12].rpm_pid.output;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800ab28:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ab2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab30:	ee17 3a90 	vmov	r3, s15
 800ab34:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800ab36:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ab3a:	121b      	asrs	r3, r3, #8
 800ab3c:	b21b      	sxth	r3, r3
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800ab42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7 + 12].rpm_pid.output;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800ab4e:	3310      	adds	r3, #16
 800ab50:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ab54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab58:	ee17 3a90 	vmov	r3, s15
 800ab5c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800ab5e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ab62:	121b      	asrs	r3, r3, #8
 800ab64:	b21b      	sxth	r3, r3
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800ab6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	f107 0210 	add.w	r2, r7, #16
 800ab78:	f107 0118 	add.w	r1, r7, #24
 800ab7c:	4802      	ldr	r0, [pc, #8]	; (800ab88 <motor_send_can+0x44c>)
 800ab7e:	f001 f9b9 	bl	800bef4 <HAL_CAN_AddTxMessage>
 800ab82:	e003      	b.n	800ab8c <motor_send_can+0x450>
 800ab84:	200003f4 	.word	0x200003f4
 800ab88:	2000041c 	.word	0x2000041c
	}
	if (temp_checker & 0xF00000) {
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d059      	beq.n	800ac4a <motor_send_can+0x50e>
		CAN_tx_message.StdId = 0x2FF;
 800ab96:	f240 23ff 	movw	r3, #767	; 0x2ff
 800ab9a:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8 + 12].rpm_pid.output;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 800aba2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abaa:	ee17 3a90 	vmov	r3, s15
 800abae:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 800abb0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800abb4:	121b      	asrs	r3, r3, #8
 800abb6:	b21b      	sxth	r3, r3
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 800abbc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9 + 12].rpm_pid.output;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800abc8:	3310      	adds	r3, #16
 800abca:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800abce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abd2:	ee17 3a90 	vmov	r3, s15
 800abd6:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 800abd8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800abdc:	121b      	asrs	r3, r3, #8
 800abde:	b21b      	sxth	r3, r3
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 800abe4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA + 12].rpm_pid.output;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 800abf0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800abf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abf8:	ee17 3a90 	vmov	r3, s15
 800abfc:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 800abfe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ac02:	121b      	asrs	r3, r3, #8
 800ac04:	b21b      	sxth	r3, r3
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 800ac0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB + 12].rpm_pid.output;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800ac16:	3310      	adds	r3, #16
 800ac18:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ac1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac20:	ee17 3a90 	vmov	r3, s15
 800ac24:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 800ac26:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ac2a:	121b      	asrs	r3, r3, #8
 800ac2c:	b21b      	sxth	r3, r3
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 800ac32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	f107 0210 	add.w	r2, r7, #16
 800ac40:	f107 0118 	add.w	r1, r7, #24
 800ac44:	4803      	ldr	r0, [pc, #12]	; (800ac54 <motor_send_can+0x518>)
 800ac46:	f001 f955 	bl	800bef4 <HAL_CAN_AddTxMessage>
	}
#endif
}
 800ac4a:	bf00      	nop
 800ac4c:	3738      	adds	r7, #56	; 0x38
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	2000041c 	.word	0x2000041c

0800ac58 <kill_can>:

void kill_can() {
 800ac58:	b480      	push	{r7}
 800ac5a:	b089      	sub	sp, #36	; 0x24
 800ac5c:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8] = { 0, };
 800ac5e:	2300      	movs	r3, #0
 800ac60:	603b      	str	r3, [r7, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	607b      	str	r3, [r7, #4]
	uint32_t send_mail_box;
	CAN_tx_message.IDE = CAN_ID_STD;
 800ac66:	2300      	movs	r3, #0
 800ac68:	613b      	str	r3, [r7, #16]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]
	CAN_tx_message.DLC = 0x08;
 800ac6e:	2308      	movs	r3, #8
 800ac70:	61bb      	str	r3, [r7, #24]
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//	CAN_tx_message.StdId = 0x2FF;
//	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
//
//#endif
}
 800ac72:	bf00      	nop
 800ac74:	3724      	adds	r7, #36	; 0x24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	ed87 0a02 	vstr	s0, [r7, #8]
 800ac8a:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	edd3 7a00 	vldr	s15, [r3]
 800ac94:	ed97 7a02 	vldr	s14, [r7, #8]
 800ac98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca0:	d503      	bpl.n	800acaa <float_minmax+0x2c>
		*motor_in = motor_max;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	e012      	b.n	800acd0 <float_minmax+0x52>
	} else if (*motor_in < -motor_max) {
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	ed93 7a00 	vldr	s14, [r3]
 800acb0:	edd7 7a02 	vldr	s15, [r7, #8]
 800acb4:	eef1 7a67 	vneg.f32	s15, s15
 800acb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc0:	d506      	bpl.n	800acd0 <float_minmax+0x52>
		*motor_in = -motor_max;
 800acc2:	edd7 7a02 	vldr	s15, [r7, #8]
 800acc6:	eef1 7a67 	vneg.f32	s15, s15
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabs(*motor_in) < motor_min) {
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	edd3 7a00 	vldr	s15, [r3]
 800acd6:	eef0 7ae7 	vabs.f32	s15, s15
 800acda:	ed97 7a01 	vldr	s14, [r7, #4]
 800acde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ace2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace6:	dc00      	bgt.n	800acea <float_minmax+0x6c>
		*motor_in = 0;
	}

}
 800ace8:	e003      	b.n	800acf2 <float_minmax+0x74>
		*motor_in = 0;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
}
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	ed87 0a01 	vstr	s0, [r7, #4]
 800ad08:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800ad0a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad16:	db0a      	blt.n	800ad2e <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800ad18:	ed97 0a01 	vldr	s0, [r7, #4]
 800ad1c:	f015 fc12 	bl	8020544 <sqrtf>
 800ad20:	eef0 7a40 	vmov.f32	s15, s0
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e005      	b.n	800ad3a <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	f04f 0200 	mov.w	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800ad36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	0000      	movs	r0, r0
 800ad44:	0000      	movs	r0, r0
	...

0800ad48 <referee_processing_task>:
ref_magazine_data_t ref_mag_data;
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;


void referee_processing_task(void *argument) {
 800ad48:	b5b0      	push	{r4, r5, r7, lr}
 800ad4a:	b0ca      	sub	sp, #296	; 0x128
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800ad52:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800ad56:	6018      	str	r0, [r3, #0]
	referee_limiters.robot_level = 0;
 800ad58:	4ba0      	ldr	r3, [pc, #640]	; (800afdc <referee_processing_task+0x294>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	731a      	strb	r2, [r3, #12]
	queue_t referee_uart_q;
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	referee_limiters.feeding_speed = LV1_FEEDER;
 800ad5e:	4b9f      	ldr	r3, [pc, #636]	; (800afdc <referee_processing_task+0x294>)
 800ad60:	f44f 7252 	mov.w	r2, #840	; 0x348
 800ad64:	801a      	strh	r2, [r3, #0]
	referee_limiters.projectile_speed = LV1_PROJECTILE;
 800ad66:	4b9d      	ldr	r3, [pc, #628]	; (800afdc <referee_processing_task+0x294>)
 800ad68:	220d      	movs	r2, #13
 800ad6a:	805a      	strh	r2, [r3, #2]
	referee_limiters.wheel_power_limit = LV1_POWER * CHASSIS_POWER_MULT;
 800ad6c:	4b9b      	ldr	r3, [pc, #620]	; (800afdc <referee_processing_task+0x294>)
 800ad6e:	4a9c      	ldr	r2, [pc, #624]	; (800afe0 <referee_processing_task+0x298>)
 800ad70:	605a      	str	r2, [r3, #4]
	referee_limiters.robot_level = 1;
 800ad72:	4b9a      	ldr	r3, [pc, #616]	; (800afdc <referee_processing_task+0x294>)
 800ad74:	2201      	movs	r2, #1
 800ad76:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 800ad78:	2100      	movs	r1, #0
 800ad7a:	2007      	movs	r0, #7
 800ad7c:	f7f7 f9a0 	bl	80020c0 <status_led>
	status_led(8, off_led);
 800ad80:	2101      	movs	r1, #1
 800ad82:	2008      	movs	r0, #8
 800ad84:	f7f7 f99c 	bl	80020c0 <status_led>
	uint8_t graphic_sent = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	ref_robot_data.robot_id = 0;
 800ad8e:	4b95      	ldr	r3, [pc, #596]	; (800afe4 <referee_processing_task+0x29c>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800ad94:	f107 030c 	add.w	r3, r7, #12
 800ad98:	f107 0108 	add.w	r1, r7, #8
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	4892      	ldr	r0, [pc, #584]	; (800afe8 <referee_processing_task+0x2a0>)
 800ada0:	f7f7 ffa2 	bl	8002ce8 <ref_usart_start>
	while (1) {
//			uint32_t ref_check = ulTaskNotifyTake(pdTRUE, 5);
		status_led(5, on_led);
 800ada4:	2100      	movs	r1, #0
 800ada6:	2005      	movs	r0, #5
 800ada8:	f7f7 f98a 	bl	80020c0 <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 800adac:	f107 030c 	add.w	r3, r7, #12
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7f7 fc04 	bl	80025be <queue_get_size>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b07      	cmp	r3, #7
 800adba:	f240 80c1 	bls.w	800af40 <referee_processing_task+0x1f8>
			while (queue_get_size(&referee_uart_q) > 7) {
 800adbe:	e0b4      	b.n	800af2a <referee_processing_task+0x1e2>
				proc_status = ref_process_data(&referee_uart_q, &msg_buffer);
 800adc0:	f107 030c 	add.w	r3, r7, #12
 800adc4:	4989      	ldr	r1, [pc, #548]	; (800afec <referee_processing_task+0x2a4>)
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7f7 fc06 	bl	80025d8 <ref_process_data>
 800adcc:	4603      	mov	r3, r0
 800adce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				if (proc_status == PROCESS_SUCCESS) {
 800add2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800add6:	2b00      	cmp	r3, #0
 800add8:	f040 80a3 	bne.w	800af22 <referee_processing_task+0x1da>
					switch (msg_buffer.cmd_id) {
 800addc:	4b83      	ldr	r3, [pc, #524]	; (800afec <referee_processing_task+0x2a4>)
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ade4:	f300 809b 	bgt.w	800af1e <referee_processing_task+0x1d6>
 800ade8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adec:	dc04      	bgt.n	800adf8 <referee_processing_task+0xb0>
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d029      	beq.n	800ae46 <referee_processing_task+0xfe>
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d073      	beq.n	800aede <referee_processing_task+0x196>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 800adf6:	e092      	b.n	800af1e <referee_processing_task+0x1d6>
					switch (msg_buffer.cmd_id) {
 800adf8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800adfc:	2b07      	cmp	r3, #7
 800adfe:	f200 808e 	bhi.w	800af1e <referee_processing_task+0x1d6>
 800ae02:	a201      	add	r2, pc, #4	; (adr r2, 800ae08 <referee_processing_task+0xc0>)
 800ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae08:	0800ae61 	.word	0x0800ae61
 800ae0c:	0800aead 	.word	0x0800aead
 800ae10:	0800ae8f 	.word	0x0800ae8f
 800ae14:	0800af1f 	.word	0x0800af1f
 800ae18:	0800af1f 	.word	0x0800af1f
 800ae1c:	0800aecb 	.word	0x0800aecb
 800ae20:	0800ae29 	.word	0x0800ae29
 800ae24:	0800af05 	.word	0x0800af05
						memcpy(&ref_shoot_data, &msg_buffer.data,
 800ae28:	4a71      	ldr	r2, [pc, #452]	; (800aff0 <referee_processing_task+0x2a8>)
 800ae2a:	4b70      	ldr	r3, [pc, #448]	; (800afec <referee_processing_task+0x2a4>)
 800ae2c:	3302      	adds	r3, #2
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	6010      	str	r0, [r2, #0]
 800ae32:	8899      	ldrh	r1, [r3, #4]
 800ae34:	799b      	ldrb	r3, [r3, #6]
 800ae36:	8091      	strh	r1, [r2, #4]
 800ae38:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 800ae3a:	4b6e      	ldr	r3, [pc, #440]	; (800aff4 <referee_processing_task+0x2ac>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	4a6c      	ldr	r2, [pc, #432]	; (800aff4 <referee_processing_task+0x2ac>)
 800ae42:	6013      	str	r3, [r2, #0]
						break;
 800ae44:	e071      	b.n	800af2a <referee_processing_task+0x1e2>
							memcpy(&ref_game_state, &msg_buffer.data,
 800ae46:	4a6c      	ldr	r2, [pc, #432]	; (800aff8 <referee_processing_task+0x2b0>)
 800ae48:	4b68      	ldr	r3, [pc, #416]	; (800afec <referee_processing_task+0x2a4>)
 800ae4a:	3302      	adds	r3, #2
 800ae4c:	8819      	ldrh	r1, [r3, #0]
 800ae4e:	789b      	ldrb	r3, [r3, #2]
 800ae50:	8011      	strh	r1, [r2, #0]
 800ae52:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 800ae54:	4b69      	ldr	r3, [pc, #420]	; (800affc <referee_processing_task+0x2b4>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	4a68      	ldr	r2, [pc, #416]	; (800affc <referee_processing_task+0x2b4>)
 800ae5c:	6013      	str	r3, [r2, #0]
							break;
 800ae5e:	e064      	b.n	800af2a <referee_processing_task+0x1e2>
						memcpy(&ref_robot_data, &msg_buffer.data,
 800ae60:	4a60      	ldr	r2, [pc, #384]	; (800afe4 <referee_processing_task+0x29c>)
 800ae62:	4b62      	ldr	r3, [pc, #392]	; (800afec <referee_processing_task+0x2a4>)
 800ae64:	4614      	mov	r4, r2
 800ae66:	1c9d      	adds	r5, r3, #2
 800ae68:	6828      	ldr	r0, [r5, #0]
 800ae6a:	6869      	ldr	r1, [r5, #4]
 800ae6c:	68aa      	ldr	r2, [r5, #8]
 800ae6e:	68eb      	ldr	r3, [r5, #12]
 800ae70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae72:	6928      	ldr	r0, [r5, #16]
 800ae74:	6969      	ldr	r1, [r5, #20]
 800ae76:	c403      	stmia	r4!, {r0, r1}
 800ae78:	8b2b      	ldrh	r3, [r5, #24]
 800ae7a:	7eaa      	ldrb	r2, [r5, #26]
 800ae7c:	8023      	strh	r3, [r4, #0]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800ae82:	4b5f      	ldr	r3, [pc, #380]	; (800b000 <referee_processing_task+0x2b8>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3301      	adds	r3, #1
 800ae88:	4a5d      	ldr	r2, [pc, #372]	; (800b000 <referee_processing_task+0x2b8>)
 800ae8a:	6013      	str	r3, [r2, #0]
						break;
 800ae8c:	e04d      	b.n	800af2a <referee_processing_task+0x1e2>
						memcpy(&ref_robot_pos, &msg_buffer.data,
 800ae8e:	4a5d      	ldr	r2, [pc, #372]	; (800b004 <referee_processing_task+0x2bc>)
 800ae90:	4b56      	ldr	r3, [pc, #344]	; (800afec <referee_processing_task+0x2a4>)
 800ae92:	4614      	mov	r4, r2
 800ae94:	3302      	adds	r3, #2
 800ae96:	6818      	ldr	r0, [r3, #0]
 800ae98:	6859      	ldr	r1, [r3, #4]
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_robot_pos_txno++;
 800aea0:	4b59      	ldr	r3, [pc, #356]	; (800b008 <referee_processing_task+0x2c0>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3301      	adds	r3, #1
 800aea6:	4a58      	ldr	r2, [pc, #352]	; (800b008 <referee_processing_task+0x2c0>)
 800aea8:	6013      	str	r3, [r2, #0]
						break;
 800aeaa:	e03e      	b.n	800af2a <referee_processing_task+0x1e2>
						memcpy(&ref_power_data, &msg_buffer.data,
 800aeac:	4b57      	ldr	r3, [pc, #348]	; (800b00c <referee_processing_task+0x2c4>)
 800aeae:	4a4f      	ldr	r2, [pc, #316]	; (800afec <referee_processing_task+0x2a4>)
 800aeb0:	1c94      	adds	r4, r2, #2
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	6861      	ldr	r1, [r4, #4]
 800aeb6:	68a2      	ldr	r2, [r4, #8]
 800aeb8:	c307      	stmia	r3!, {r0, r1, r2}
 800aeba:	89a2      	ldrh	r2, [r4, #12]
 800aebc:	801a      	strh	r2, [r3, #0]
						ref_power_data_txno++;
 800aebe:	4b54      	ldr	r3, [pc, #336]	; (800b010 <referee_processing_task+0x2c8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3301      	adds	r3, #1
 800aec4:	4a52      	ldr	r2, [pc, #328]	; (800b010 <referee_processing_task+0x2c8>)
 800aec6:	6013      	str	r3, [r2, #0]
						break;
 800aec8:	e02f      	b.n	800af2a <referee_processing_task+0x1e2>
 800aeca:	4b48      	ldr	r3, [pc, #288]	; (800afec <referee_processing_task+0x2a4>)
 800aecc:	789a      	ldrb	r2, [r3, #2]
						memcpy(&ref_dmg_data, &msg_buffer.data,
 800aece:	4b51      	ldr	r3, [pc, #324]	; (800b014 <referee_processing_task+0x2cc>)
 800aed0:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 800aed2:	4b51      	ldr	r3, [pc, #324]	; (800b018 <referee_processing_task+0x2d0>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3301      	adds	r3, #1
 800aed8:	4a4f      	ldr	r2, [pc, #316]	; (800b018 <referee_processing_task+0x2d0>)
 800aeda:	6013      	str	r3, [r2, #0]
						break;
 800aedc:	e025      	b.n	800af2a <referee_processing_task+0x1e2>
						memcpy(&ref_robot_hp, &msg_buffer.data,
 800aede:	4a4f      	ldr	r2, [pc, #316]	; (800b01c <referee_processing_task+0x2d4>)
 800aee0:	4b42      	ldr	r3, [pc, #264]	; (800afec <referee_processing_task+0x2a4>)
 800aee2:	4614      	mov	r4, r2
 800aee4:	1c9d      	adds	r5, r3, #2
 800aee6:	6828      	ldr	r0, [r5, #0]
 800aee8:	6869      	ldr	r1, [r5, #4]
 800aeea:	68aa      	ldr	r2, [r5, #8]
 800aeec:	68eb      	ldr	r3, [r5, #12]
 800aeee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aef0:	6928      	ldr	r0, [r5, #16]
 800aef2:	6969      	ldr	r1, [r5, #20]
 800aef4:	69aa      	ldr	r2, [r5, #24]
 800aef6:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 800aef8:	4b49      	ldr	r3, [pc, #292]	; (800b020 <referee_processing_task+0x2d8>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3301      	adds	r3, #1
 800aefe:	4a48      	ldr	r2, [pc, #288]	; (800b020 <referee_processing_task+0x2d8>)
 800af00:	6013      	str	r3, [r2, #0]
						break;
 800af02:	e012      	b.n	800af2a <referee_processing_task+0x1e2>
						memcpy(&ref_mag_data, &msg_buffer.data,
 800af04:	4a47      	ldr	r2, [pc, #284]	; (800b024 <referee_processing_task+0x2dc>)
 800af06:	4b39      	ldr	r3, [pc, #228]	; (800afec <referee_processing_task+0x2a4>)
 800af08:	3302      	adds	r3, #2
 800af0a:	6818      	ldr	r0, [r3, #0]
 800af0c:	6010      	str	r0, [r2, #0]
 800af0e:	889b      	ldrh	r3, [r3, #4]
 800af10:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 800af12:	4b45      	ldr	r3, [pc, #276]	; (800b028 <referee_processing_task+0x2e0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3301      	adds	r3, #1
 800af18:	4a43      	ldr	r2, [pc, #268]	; (800b028 <referee_processing_task+0x2e0>)
 800af1a:	6013      	str	r3, [r2, #0]
						break;
 800af1c:	e005      	b.n	800af2a <referee_processing_task+0x1e2>
						break;
 800af1e:	bf00      	nop
 800af20:	e003      	b.n	800af2a <referee_processing_task+0x1e2>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 800af22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800af26:	2b02      	cmp	r3, #2
 800af28:	d009      	beq.n	800af3e <referee_processing_task+0x1f6>
			while (queue_get_size(&referee_uart_q) > 7) {
 800af2a:	f107 030c 	add.w	r3, r7, #12
 800af2e:	4618      	mov	r0, r3
 800af30:	f7f7 fb45 	bl	80025be <queue_get_size>
 800af34:	4603      	mov	r3, r0
 800af36:	2b07      	cmp	r3, #7
 800af38:	f63f af42 	bhi.w	800adc0 <referee_processing_task+0x78>
 800af3c:	e000      	b.n	800af40 <referee_processing_task+0x1f8>
					break;
 800af3e:	bf00      	nop
				}
			}
		}

		status_led(5, off_led);
 800af40:	2101      	movs	r1, #1
 800af42:	2005      	movs	r0, #5
 800af44:	f7f7 f8bc 	bl	80020c0 <status_led>
		static uint32_t last_sent;

		status_led(5, on_led);
 800af48:	2100      	movs	r1, #0
 800af4a:	2005      	movs	r0, #5
 800af4c:	f7f7 f8b8 	bl	80020c0 <status_led>
		if (ref_robot_data.robot_level == 1) {
 800af50:	4b24      	ldr	r3, [pc, #144]	; (800afe4 <referee_processing_task+0x29c>)
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d112      	bne.n	800af7e <referee_processing_task+0x236>
			referee_limiters.feeding_speed = LV1_FEEDER;
 800af58:	4b20      	ldr	r3, [pc, #128]	; (800afdc <referee_processing_task+0x294>)
 800af5a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800af5e:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 800af60:	4b1e      	ldr	r3, [pc, #120]	; (800afdc <referee_processing_task+0x294>)
 800af62:	220d      	movs	r2, #13
 800af64:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 1;
 800af66:	4b1d      	ldr	r3, [pc, #116]	; (800afdc <referee_processing_task+0x294>)
 800af68:	2201      	movs	r2, #1
 800af6a:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800af6c:	2100      	movs	r1, #0
 800af6e:	2007      	movs	r0, #7
 800af70:	f7f7 f8a6 	bl	80020c0 <status_led>
			status_led(8, off_led);
 800af74:	2101      	movs	r1, #1
 800af76:	2008      	movs	r0, #8
 800af78:	f7f7 f8a2 	bl	80020c0 <status_led>
 800af7c:	e05d      	b.n	800b03a <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 2) {
 800af7e:	4b19      	ldr	r3, [pc, #100]	; (800afe4 <referee_processing_task+0x29c>)
 800af80:	785b      	ldrb	r3, [r3, #1]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d112      	bne.n	800afac <referee_processing_task+0x264>
			referee_limiters.feeding_speed = LV2_FEEDER;
 800af86:	4b15      	ldr	r3, [pc, #84]	; (800afdc <referee_processing_task+0x294>)
 800af88:	f44f 7252 	mov.w	r2, #840	; 0x348
 800af8c:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV2_PROJECTILE;
 800af8e:	4b13      	ldr	r3, [pc, #76]	; (800afdc <referee_processing_task+0x294>)
 800af90:	220d      	movs	r2, #13
 800af92:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 2;
 800af94:	4b11      	ldr	r3, [pc, #68]	; (800afdc <referee_processing_task+0x294>)
 800af96:	2202      	movs	r2, #2
 800af98:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 800af9a:	2101      	movs	r1, #1
 800af9c:	2007      	movs	r0, #7
 800af9e:	f7f7 f88f 	bl	80020c0 <status_led>
			status_led(8, on_led);
 800afa2:	2100      	movs	r1, #0
 800afa4:	2008      	movs	r0, #8
 800afa6:	f7f7 f88b 	bl	80020c0 <status_led>
 800afaa:	e046      	b.n	800b03a <referee_processing_task+0x2f2>
		} else if (ref_robot_data.robot_level == 3) {
 800afac:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <referee_processing_task+0x29c>)
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d13b      	bne.n	800b02c <referee_processing_task+0x2e4>
			referee_limiters.feeding_speed = LV3_FEEDER;
 800afb4:	4b09      	ldr	r3, [pc, #36]	; (800afdc <referee_processing_task+0x294>)
 800afb6:	f44f 7252 	mov.w	r2, #840	; 0x348
 800afba:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV3_PROJECTILE;
 800afbc:	4b07      	ldr	r3, [pc, #28]	; (800afdc <referee_processing_task+0x294>)
 800afbe:	220d      	movs	r2, #13
 800afc0:	805a      	strh	r2, [r3, #2]
			referee_limiters.robot_level = 3;
 800afc2:	4b06      	ldr	r3, [pc, #24]	; (800afdc <referee_processing_task+0x294>)
 800afc4:	2203      	movs	r2, #3
 800afc6:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800afc8:	2100      	movs	r1, #0
 800afca:	2007      	movs	r0, #7
 800afcc:	f7f7 f878 	bl	80020c0 <status_led>
			status_led(8, on_led);
 800afd0:	2100      	movs	r1, #0
 800afd2:	2008      	movs	r0, #8
 800afd4:	f7f7 f874 	bl	80020c0 <status_led>
 800afd8:	e02f      	b.n	800b03a <referee_processing_task+0x2f2>
 800afda:	bf00      	nop
 800afdc:	200032a0 	.word	0x200032a0
 800afe0:	42700000 	.word	0x42700000
 800afe4:	20003324 	.word	0x20003324
 800afe8:	2000168c 	.word	0x2000168c
 800afec:	200032b8 	.word	0x200032b8
 800aff0:	20003374 	.word	0x20003374
 800aff4:	2000337c 	.word	0x2000337c
 800aff8:	200032fc 	.word	0x200032fc
 800affc:	20003300 	.word	0x20003300
 800b000:	20003340 	.word	0x20003340
 800b004:	20003358 	.word	0x20003358
 800b008:	20003368 	.word	0x20003368
 800b00c:	20003344 	.word	0x20003344
 800b010:	20003354 	.word	0x20003354
 800b014:	2000336c 	.word	0x2000336c
 800b018:	20003370 	.word	0x20003370
 800b01c:	20003304 	.word	0x20003304
 800b020:	20003320 	.word	0x20003320
 800b024:	20003380 	.word	0x20003380
 800b028:	20003388 	.word	0x20003388
		} else {
			referee_limiters.feeding_speed = LV1_FEEDER;
 800b02c:	4b44      	ldr	r3, [pc, #272]	; (800b140 <referee_processing_task+0x3f8>)
 800b02e:	f44f 7252 	mov.w	r2, #840	; 0x348
 800b032:	801a      	strh	r2, [r3, #0]
			referee_limiters.projectile_speed = LV1_PROJECTILE;
 800b034:	4b42      	ldr	r3, [pc, #264]	; (800b140 <referee_processing_task+0x3f8>)
 800b036:	220d      	movs	r2, #13
 800b038:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 800b03a:	4b42      	ldr	r3, [pc, #264]	; (800b144 <referee_processing_task+0x3fc>)
 800b03c:	785b      	ldrb	r3, [r3, #1]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d06e      	beq.n	800b120 <referee_processing_task+0x3d8>
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 800b042:	4b41      	ldr	r3, [pc, #260]	; (800b148 <referee_processing_task+0x400>)
 800b044:	891b      	ldrh	r3, [r3, #8]
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
					/ 40) + 0.01);
 800b04e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b14c <referee_processing_task+0x404>
 800b052:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b056:	ee16 0a90 	vmov	r0, s13
 800b05a:	f7f5 fa75 	bl	8000548 <__aeabi_f2d>
 800b05e:	a336      	add	r3, pc, #216	; (adr r3, 800b138 <referee_processing_task+0x3f0>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 f912 	bl	800028c <__adddf3>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
			float temp_buffer = ((((float) ref_power_data.chassis_power_buffer)
 800b06c:	4610      	mov	r0, r2
 800b06e:	4619      	mov	r1, r3
 800b070:	f7f5 fdba 	bl	8000be8 <__aeabi_d2f>
 800b074:	4603      	mov	r3, r0
 800b076:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 800b07a:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800b07e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b082:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08a:	dd02      	ble.n	800b092 <referee_processing_task+0x34a>
 800b08c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b090:	e001      	b.n	800b096 <referee_processing_task+0x34e>
 800b092:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b096:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 800b09a:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800b09e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0a2:	4b27      	ldr	r3, [pc, #156]	; (800b140 <referee_processing_task+0x3f8>)
 800b0a4:	edc3 7a02 	vstr	s15, [r3, #8]
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800b0a8:	4b27      	ldr	r3, [pc, #156]	; (800b148 <referee_processing_task+0x400>)
 800b0aa:	ed93 7a01 	vldr	s14, [r3, #4]
 800b0ae:	4b25      	ldr	r3, [pc, #148]	; (800b144 <referee_processing_task+0x3fc>)
 800b0b0:	8b1b      	ldrh	r3, [r3, #24]
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b0be:	ee16 0a90 	vmov	r0, s13
 800b0c2:	f7f5 fa41 	bl	8000548 <__aeabi_f2d>
					) * 0.5) + 0.5;
 800b0c6:	f04f 0200 	mov.w	r2, #0
 800b0ca:	4b21      	ldr	r3, [pc, #132]	; (800b150 <referee_processing_task+0x408>)
 800b0cc:	f7f5 fa94 	bl	80005f8 <__aeabi_dmul>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <referee_processing_task+0x408>)
 800b0de:	f7f5 f8d5 	bl	800028c <__adddf3>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
			float temp_power = ((((float) ref_power_data.chassis_power/(float) ref_robot_data.chassis_power_limit)
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f7f5 fd7d 	bl	8000be8 <__aeabi_d2f>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			temp_power = (temp_power > 1) ? 1 : temp_power;
 800b0f4:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800b0f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b104:	dd02      	ble.n	800b10c <referee_processing_task+0x3c4>
 800b106:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b10a:	e001      	b.n	800b110 <referee_processing_task+0x3c8>
 800b10c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b110:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
 800b114:	480f      	ldr	r0, [pc, #60]	; (800b154 <referee_processing_task+0x40c>)
 800b116:	ed97 0a47 	vldr	s0, [r7, #284]	; 0x11c
 800b11a:	f7ff fdf0 	bl	800acfe <arm_sqrt_f32>
 800b11e:	e007      	b.n	800b130 <referee_processing_task+0x3e8>
		} else {
			referee_limiters.wheel_buffer_limit = 1;
 800b120:	4b07      	ldr	r3, [pc, #28]	; (800b140 <referee_processing_task+0x3f8>)
 800b122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b126:	609a      	str	r2, [r3, #8]
			referee_limiters.wheel_power_limit = 1;
 800b128:	4b05      	ldr	r3, [pc, #20]	; (800b140 <referee_processing_task+0x3f8>)
 800b12a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b12e:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(10);
 800b130:	200a      	movs	r0, #10
 800b132:	f00d fcd7 	bl	8018ae4 <vTaskDelay>
	while (1) {
 800b136:	e635      	b.n	800ada4 <referee_processing_task+0x5c>
 800b138:	47ae147b 	.word	0x47ae147b
 800b13c:	3f847ae1 	.word	0x3f847ae1
 800b140:	200032a0 	.word	0x200032a0
 800b144:	20003324 	.word	0x20003324
 800b148:	20003344 	.word	0x20003344
 800b14c:	42200000 	.word	0x42200000
 800b150:	3fe00000 	.word	0x3fe00000
 800b154:	200032a4 	.word	0x200032a4

0800b158 <startup_task>:
extern remote_cmd_t remote_cmd;
extern float pitch;
extern float yaw;
uint16_t error = 0b111111111;

void startup_task() {
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 800b15c:	f7f6 ff8a 	bl	8002074 <led_on>
	//buzzer_init();
	imu_init();
 800b160:	f7f6 fd90 	bl	8001c84 <imu_init>
	led_green_off();
 800b164:	f7f6 ff78 	bl	8002058 <led_green_off>
	start_micros_timer();
 800b168:	f7f7 f86a 	bl	8002240 <start_micros_timer>
	led_toggle();
 800b16c:	f7f6 ffa0 	bl	80020b0 <led_toggle>

}
 800b170:	bf00      	nop
 800b172:	bd80      	pop	{r7, pc}

0800b174 <sbc_process_data>:
sbc_data_t sbc_data;
uint8_t sbc_new_data = 0;
uint8_t sbc_dma_buffer[20];
static uint8_t sbc_error;

void sbc_process_data() {
 800b174:	b580      	push	{r7, lr}
 800b176:	af00      	add	r7, sp, #0
	if (sbc_dma_buffer[0] == 0xa5 && sbc_dma_buffer[14] == 0x5a){
 800b178:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <sbc_process_data+0x54>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2ba5      	cmp	r3, #165	; 0xa5
 800b17e:	d119      	bne.n	800b1b4 <sbc_process_data+0x40>
 800b180:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <sbc_process_data+0x54>)
 800b182:	7b9b      	ldrb	r3, [r3, #14]
 800b184:	2b5a      	cmp	r3, #90	; 0x5a
 800b186:	d115      	bne.n	800b1b4 <sbc_process_data+0x40>
		sbc_data.cmd_id = sbc_dma_buffer[1];
 800b188:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <sbc_process_data+0x54>)
 800b18a:	785a      	ldrb	r2, [r3, #1]
 800b18c:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <sbc_process_data+0x58>)
 800b18e:	701a      	strb	r2, [r3, #0]
		memcpy(&sbc_data.data, sbc_dma_buffer+2,12);
 800b190:	4a0f      	ldr	r2, [pc, #60]	; (800b1d0 <sbc_process_data+0x5c>)
 800b192:	4b0e      	ldr	r3, [pc, #56]	; (800b1cc <sbc_process_data+0x58>)
 800b194:	3301      	adds	r3, #1
 800b196:	6810      	ldr	r0, [r2, #0]
 800b198:	6851      	ldr	r1, [r2, #4]
 800b19a:	6892      	ldr	r2, [r2, #8]
 800b19c:	6018      	str	r0, [r3, #0]
 800b19e:	6059      	str	r1, [r3, #4]
 800b1a0:	609a      	str	r2, [r3, #8]
		sbc_new_data = 1;
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	; (800b1d4 <sbc_process_data+0x60>)
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	701a      	strb	r2, [r3, #0]
		sbc_last_time = HAL_GetTick();
 800b1a8:	f000 f9f2 	bl	800b590 <HAL_GetTick>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <sbc_process_data+0x64>)
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	e006      	b.n	800b1c2 <sbc_process_data+0x4e>
	} else {
		sbc_error +=1;
 800b1b4:	4b09      	ldr	r3, [pc, #36]	; (800b1dc <sbc_process_data+0x68>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	4b07      	ldr	r3, [pc, #28]	; (800b1dc <sbc_process_data+0x68>)
 800b1be:	701a      	strb	r2, [r3, #0]
//	queue_append_bytes(&g_sbc_queue, sbc_dma_buffer, 15);
//	BaseType_t xHigherPriorityTaskWoken;
//	xHigherPriorityTaskWoken = pdFALSE;
//	vTaskNotifyGiveFromISR(telemetry_task_handle, &xHigherPriorityTaskWoken);
//	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	200034b0 	.word	0x200034b0
 800b1cc:	200034a0 	.word	0x200034a0
 800b1d0:	200034b2 	.word	0x200034b2
 800b1d4:	200034ad 	.word	0x200034ad
 800b1d8:	20002fb8 	.word	0x20002fb8
 800b1dc:	200034c4 	.word	0x200034c4

0800b1e0 <telemetry_task>:

//lol more stuff to add
void telemetry_task(void *argument) {
 800b1e0:	b590      	push	{r4, r7, lr}
 800b1e2:	b0d3      	sub	sp, #332	; 0x14c
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b1ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b1ee:	6018      	str	r0, [r3, #0]

	uint8_t send_buffer[256];
	uint32_t curr_time = HAL_GetTick();
 800b1f0:	f000 f9ce 	bl	800b590 <HAL_GetTick>
 800b1f4:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	uint32_t game_data_time = curr_time;
 800b1f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b1fc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint32_t imu_data_time = curr_time;
 800b200:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b204:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	sbc_game_data_t sbc_game_tx;
	queue_init(&g_sbc_queue);
 800b208:	4888      	ldr	r0, [pc, #544]	; (800b42c <telemetry_task+0x24c>)
 800b20a:	f7f7 f83d 	bl	8002288 <queue_init>

	sbc_game_tx.header = 0xA5;
 800b20e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b212:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b216:	22a5      	movs	r2, #165	; 0xa5
 800b218:	701a      	strb	r2, [r3, #0]
	sbc_game_tx.cmd_id = 0x80;
 800b21a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b21e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b222:	2280      	movs	r2, #128	; 0x80
 800b224:	705a      	strb	r2, [r3, #1]
	sbc_game_tx.team = 1;
 800b226:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b22a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b22e:	2201      	movs	r2, #1
 800b230:	709a      	strb	r2, [r3, #2]
	sbc_game_tx.robot_id = 1;
 800b232:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b236:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b23a:	2201      	movs	r2, #1
 800b23c:	70da      	strb	r2, [r3, #3]
	sbc_game_tx.robot_level = 1;
 800b23e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b242:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b246:	2201      	movs	r2, #1
 800b248:	711a      	strb	r2, [r3, #4]
	sbc_game_tx.remaining_time = 1000;
 800b24a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b24e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b252:	2200      	movs	r2, #0
 800b254:	f062 0217 	orn	r2, r2, #23
 800b258:	715a      	strb	r2, [r3, #5]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f042 0203 	orr.w	r2, r2, #3
 800b260:	719a      	strb	r2, [r3, #6]
	sbc_game_tx.ammo = 10;
 800b262:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b266:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b26a:	2200      	movs	r2, #0
 800b26c:	f042 020a 	orr.w	r2, r2, #10
 800b270:	71da      	strb	r2, [r3, #7]
 800b272:	2200      	movs	r2, #0
 800b274:	721a      	strb	r2, [r3, #8]
	sbc_game_tx.end_byte = 0x5A;
 800b276:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b27a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b27e:	225a      	movs	r2, #90	; 0x5a
 800b280:	739a      	strb	r2, [r3, #14]
	sbc_game_tx.padding[0] = 0;
 800b282:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b286:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b28a:	2200      	movs	r2, #0
 800b28c:	725a      	strb	r2, [r3, #9]
	sbc_game_tx.padding[1] = 0;
 800b28e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b292:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b296:	2200      	movs	r2, #0
 800b298:	729a      	strb	r2, [r3, #10]
	sbc_game_tx.padding[2] = 0;
 800b29a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b29e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	72da      	strb	r2, [r3, #11]
	sbc_game_tx.padding[3] = 0;
 800b2a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b2aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	731a      	strb	r2, [r3, #12]
	sbc_game_tx.padding[4] = 0;
 800b2b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b2b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	735a      	strb	r2, [r3, #13]

	//insert sbc control here, end byte 0x5B
	sbc_imu_data_t sbc_imu_tx;
	sbc_imu_tx.cmd_id = 0x82;
 800b2be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b2c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b2c6:	2282      	movs	r2, #130	; 0x82
 800b2c8:	705a      	strb	r2, [r3, #1]
	sbc_imu_tx.end_byte = 0x5C;
 800b2ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b2ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b2d2:	225c      	movs	r2, #92	; 0x5c
 800b2d4:	739a      	strb	r2, [r3, #14]
	sbc_imu_tx.header = 0xA5;
 800b2d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b2da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b2de:	22a5      	movs	r2, #165	; 0xa5
 800b2e0:	701a      	strb	r2, [r3, #0]
	uint8_t tx_buffer[15];;
				init_xvr_usart(sbc_dma_buffer);
 800b2e2:	4853      	ldr	r0, [pc, #332]	; (800b430 <telemetry_task+0x250>)
 800b2e4:	f7f7 fc64 	bl	8002bb0 <init_xvr_usart>
//					break;
//				}
//			}
//		}

		if (ref_robot_data.robot_id != 0){
 800b2e8:	4b52      	ldr	r3, [pc, #328]	; (800b434 <telemetry_task+0x254>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d047      	beq.n	800b380 <telemetry_task+0x1a0>
			sbc_game_tx.team = (ref_robot_data.robot_id < 100) ? 1 : 0;
 800b2f0:	4b50      	ldr	r3, [pc, #320]	; (800b434 <telemetry_task+0x254>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b63      	cmp	r3, #99	; 0x63
 800b2f6:	bf94      	ite	ls
 800b2f8:	2301      	movls	r3, #1
 800b2fa:	2300      	movhi	r3, #0
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b304:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b308:	709a      	strb	r2, [r3, #2]
			sbc_game_tx.robot_id = ref_robot_data.robot_id;
 800b30a:	4b4a      	ldr	r3, [pc, #296]	; (800b434 <telemetry_task+0x254>)
 800b30c:	781a      	ldrb	r2, [r3, #0]
 800b30e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b312:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b316:	70da      	strb	r2, [r3, #3]
			sbc_game_tx.remaining_time = ref_game_state.stage_remain_time;
 800b318:	4b47      	ldr	r3, [pc, #284]	; (800b438 <telemetry_task+0x258>)
 800b31a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b31e:	b29a      	uxth	r2, r3
 800b320:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b324:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b328:	f8a3 2005 	strh.w	r2, [r3, #5]
			sbc_game_tx.ammo = ref_mag_data.magazine_17mm;
 800b32c:	4b43      	ldr	r3, [pc, #268]	; (800b43c <telemetry_task+0x25c>)
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	b29a      	uxth	r2, r3
 800b332:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b336:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b33a:	f8a3 2007 	strh.w	r2, [r3, #7]
			memcpy(send_buffer, &sbc_game_tx, 15);
 800b33e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b342:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800b346:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b34a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b34e:	4614      	mov	r4, r2
 800b350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b352:	c407      	stmia	r4!, {r0, r1, r2}
 800b354:	8023      	strh	r3, [r4, #0]
 800b356:	3402      	adds	r4, #2
 800b358:	0c1b      	lsrs	r3, r3, #16
 800b35a:	7023      	strb	r3, [r4, #0]
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800b35c:	e002      	b.n	800b364 <telemetry_task+0x184>
				vTaskDelay(1);
 800b35e:	2001      	movs	r0, #1
 800b360:	f00d fbc0 	bl	8018ae4 <vTaskDelay>
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800b364:	4b36      	ldr	r3, [pc, #216]	; (800b440 <telemetry_task+0x260>)
 800b366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b21      	cmp	r3, #33	; 0x21
 800b36e:	d0f6      	beq.n	800b35e <telemetry_task+0x17e>
			}
			HAL_UART_Transmit_IT(&SBC_UART, send_buffer, 15);
 800b370:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b374:	220f      	movs	r2, #15
 800b376:	4619      	mov	r1, r3
 800b378:	4831      	ldr	r0, [pc, #196]	; (800b440 <telemetry_task+0x260>)
 800b37a:	f007 fbf6 	bl	8012b6a <HAL_UART_Transmit_IT>
 800b37e:	e043      	b.n	800b408 <telemetry_task+0x228>
		} else {
			sbc_game_tx.team = 1;
 800b380:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b384:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b388:	2201      	movs	r2, #1
 800b38a:	709a      	strb	r2, [r3, #2]
			sbc_game_tx.robot_id = 0;
 800b38c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b390:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b394:	2200      	movs	r2, #0
 800b396:	70da      	strb	r2, [r3, #3]
			sbc_game_tx.remaining_time = 999;
 800b398:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b39c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f062 0218 	orn	r2, r2, #24
 800b3a6:	715a      	strb	r2, [r3, #5]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f042 0203 	orr.w	r2, r2, #3
 800b3ae:	719a      	strb	r2, [r3, #6]
			sbc_game_tx.ammo = 999;
 800b3b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b3b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f062 0218 	orn	r2, r2, #24
 800b3be:	71da      	strb	r2, [r3, #7]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f042 0203 	orr.w	r2, r2, #3
 800b3c6:	721a      	strb	r2, [r3, #8]
			memcpy(send_buffer, &sbc_game_tx, 15);
 800b3c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b3cc:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800b3d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b3d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800b3d8:	4614      	mov	r4, r2
 800b3da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b3dc:	c407      	stmia	r4!, {r0, r1, r2}
 800b3de:	8023      	strh	r3, [r4, #0]
 800b3e0:	3402      	adds	r4, #2
 800b3e2:	0c1b      	lsrs	r3, r3, #16
 800b3e4:	7023      	strb	r3, [r4, #0]
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800b3e6:	e002      	b.n	800b3ee <telemetry_task+0x20e>
				vTaskDelay(1);
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	f00d fb7b 	bl	8018ae4 <vTaskDelay>
			while (SBC_UART.gState == HAL_UART_STATE_BUSY_TX){
 800b3ee:	4b14      	ldr	r3, [pc, #80]	; (800b440 <telemetry_task+0x260>)
 800b3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b21      	cmp	r3, #33	; 0x21
 800b3f8:	d0f6      	beq.n	800b3e8 <telemetry_task+0x208>
			}
			HAL_UART_Transmit_IT(&SBC_UART, send_buffer, 15);
 800b3fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b3fe:	220f      	movs	r2, #15
 800b400:	4619      	mov	r1, r3
 800b402:	480f      	ldr	r0, [pc, #60]	; (800b440 <telemetry_task+0x260>)
 800b404:	f007 fbb1 	bl	8012b6a <HAL_UART_Transmit_IT>
		}

		if (sbc_error >= 1){
 800b408:	4b0e      	ldr	r3, [pc, #56]	; (800b444 <telemetry_task+0x264>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d008      	beq.n	800b422 <telemetry_task+0x242>
			HAL_UART_DMAStop(&SBC_UART);
 800b410:	480b      	ldr	r0, [pc, #44]	; (800b440 <telemetry_task+0x260>)
 800b412:	f007 fc6d 	bl	8012cf0 <HAL_UART_DMAStop>
			init_xvr_usart(sbc_dma_buffer);
 800b416:	4806      	ldr	r0, [pc, #24]	; (800b430 <telemetry_task+0x250>)
 800b418:	f7f7 fbca 	bl	8002bb0 <init_xvr_usart>
			sbc_error = 0;
 800b41c:	4b09      	ldr	r3, [pc, #36]	; (800b444 <telemetry_task+0x264>)
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(1000);
 800b422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b426:	f00d fb5d 	bl	8018ae4 <vTaskDelay>
		if (ref_robot_data.robot_id != 0){
 800b42a:	e75d      	b.n	800b2e8 <telemetry_task+0x108>
 800b42c:	20003390 	.word	0x20003390
 800b430:	200034b0 	.word	0x200034b0
 800b434:	20003324 	.word	0x20003324
 800b438:	200032fc 	.word	0x200032fc
 800b43c:	20003380 	.word	0x20003380
 800b440:	20001604 	.word	0x20001604
 800b444:	200034c4 	.word	0x200034c4

0800b448 <usb_vcp_processing>:
uint8_t usb_waiting = 0;

//#define DATA_OUTPUT_MODE
#define USB_CONFIG_MODE

void usb_vcp_processing(uint8_t *buffer, uint32_t *len) {
 800b448:	b580      	push	{r7, lr}
 800b44a:	b0c4      	sub	sp, #272	; 0x110
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b452:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b456:	6018      	str	r0, [r3, #0]
 800b458:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b45c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b460:	6019      	str	r1, [r3, #0]
	uint8_t blank_buffer[MAX_CHAR_SIZE] = { 0 };
 800b462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b466:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	3304      	adds	r3, #4
 800b470:	22fc      	movs	r2, #252	; 0xfc
 800b472:	2100      	movs	r1, #0
 800b474:	4618      	mov	r0, r3
 800b476:	f010 f8a4 	bl	801b5c2 <memset>
	memcpy(blank_buffer, buffer, *len);
 800b47a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b47e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b48a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800b48e:	f107 0010 	add.w	r0, r7, #16
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	f010 f887 	bl	801b5a6 <memcpy>
	memcpy(usb_input_buffer, blank_buffer, MAX_CHAR_SIZE);
 800b498:	4a1a      	ldr	r2, [pc, #104]	; (800b504 <usb_vcp_processing+0xbc>)
 800b49a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b49e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f010 f87b 	bl	801b5a6 <memcpy>
	usb_input_len = *len;
 800b4b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a12      	ldr	r2, [pc, #72]	; (800b508 <usb_vcp_processing+0xc0>)
 800b4be:	6013      	str	r3, [r2, #0]

	//Check if the currently running task needs to yield
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b4c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR(usb_continue_semaphore, &xHigherPriorityTaskWoken);
 800b4cc:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <usb_vcp_processing+0xc4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f107 020c 	add.w	r2, r7, #12
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f00c fdf1 	bl	80180be <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b4dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <usb_vcp_processing+0xb2>
 800b4ea:	4b09      	ldr	r3, [pc, #36]	; (800b510 <usb_vcp_processing+0xc8>)
 800b4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	f3bf 8f6f 	isb	sy
}
 800b4fa:	bf00      	nop
 800b4fc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	200034c8 	.word	0x200034c8
 800b508:	200035c8 	.word	0x200035c8
 800b50c:	2000047c 	.word	0x2000047c
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <usb_task>:
	return 0;

}


void usb_task(void *argument) {
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
//						CDC_Transmit_FS(usb_input_buffer, len);
//					}
//				}
//			}
//		}
		vTaskDelay(100);
 800b51c:	2064      	movs	r0, #100	; 0x64
 800b51e:	f00d fae1 	bl	8018ae4 <vTaskDelay>
 800b522:	e7fb      	b.n	800b51c <usb_task+0x8>

0800b524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b528:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <HAL_Init+0x40>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a0d      	ldr	r2, [pc, #52]	; (800b564 <HAL_Init+0x40>)
 800b52e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b534:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <HAL_Init+0x40>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a0a      	ldr	r2, [pc, #40]	; (800b564 <HAL_Init+0x40>)
 800b53a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b53e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b540:	4b08      	ldr	r3, [pc, #32]	; (800b564 <HAL_Init+0x40>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a07      	ldr	r2, [pc, #28]	; (800b564 <HAL_Init+0x40>)
 800b546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b54a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b54c:	2003      	movs	r0, #3
 800b54e:	f001 f9de 	bl	800c90e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b552:	2000      	movs	r0, #0
 800b554:	f7f8 fc42 	bl	8003ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b558:	f7f8 fc14 	bl	8003d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	40023c00 	.word	0x40023c00

0800b568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b56c:	4b06      	ldr	r3, [pc, #24]	; (800b588 <HAL_IncTick+0x20>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	461a      	mov	r2, r3
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <HAL_IncTick+0x24>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4413      	add	r3, r2
 800b578:	4a04      	ldr	r2, [pc, #16]	; (800b58c <HAL_IncTick+0x24>)
 800b57a:	6013      	str	r3, [r2, #0]
}
 800b57c:	bf00      	nop
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	20000018 	.word	0x20000018
 800b58c:	200035cc 	.word	0x200035cc

0800b590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
  return uwTick;
 800b594:	4b03      	ldr	r3, [pc, #12]	; (800b5a4 <HAL_GetTick+0x14>)
 800b596:	681b      	ldr	r3, [r3, #0]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	200035cc 	.word	0x200035cc

0800b5a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b5b0:	f7ff ffee 	bl	800b590 <HAL_GetTick>
 800b5b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5c0:	d005      	beq.n	800b5ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b5c2:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <HAL_Delay+0x44>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b5ce:	bf00      	nop
 800b5d0:	f7ff ffde 	bl	800b590 <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d8f7      	bhi.n	800b5d0 <HAL_Delay+0x28>
  {
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20000018 	.word	0x20000018

0800b5f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e033      	b.n	800b66e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d109      	bne.n	800b622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7f7 fc6a 	bl	8002ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b626:	f003 0310 	and.w	r3, r3, #16
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d118      	bne.n	800b660 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b636:	f023 0302 	bic.w	r3, r3, #2
 800b63a:	f043 0202 	orr.w	r2, r3, #2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f93a 	bl	800b8bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	f023 0303 	bic.w	r3, r3, #3
 800b656:	f043 0201 	orr.w	r2, r3, #1
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	641a      	str	r2, [r3, #64]	; 0x40
 800b65e:	e001      	b.n	800b664 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_ADC_ConfigChannel+0x1c>
 800b690:	2302      	movs	r3, #2
 800b692:	e105      	b.n	800b8a0 <HAL_ADC_ConfigChannel+0x228>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b09      	cmp	r3, #9
 800b6a2:	d925      	bls.n	800b6f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68d9      	ldr	r1, [r3, #12]
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	4413      	add	r3, r2
 800b6b8:	3b1e      	subs	r3, #30
 800b6ba:	2207      	movs	r2, #7
 800b6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c0:	43da      	mvns	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	400a      	ands	r2, r1
 800b6c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68d9      	ldr	r1, [r3, #12]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	689a      	ldr	r2, [r3, #8]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	4618      	mov	r0, r3
 800b6dc:	4603      	mov	r3, r0
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	4403      	add	r3, r0
 800b6e2:	3b1e      	subs	r3, #30
 800b6e4:	409a      	lsls	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	60da      	str	r2, [r3, #12]
 800b6ee:	e022      	b.n	800b736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6919      	ldr	r1, [r3, #16]
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4613      	mov	r3, r2
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	4413      	add	r3, r2
 800b704:	2207      	movs	r2, #7
 800b706:	fa02 f303 	lsl.w	r3, r2, r3
 800b70a:	43da      	mvns	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	400a      	ands	r2, r1
 800b712:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6919      	ldr	r1, [r3, #16]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	b29b      	uxth	r3, r3
 800b724:	4618      	mov	r0, r3
 800b726:	4603      	mov	r3, r0
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	4403      	add	r3, r0
 800b72c:	409a      	lsls	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	2b06      	cmp	r3, #6
 800b73c:	d824      	bhi.n	800b788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	4613      	mov	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	3b05      	subs	r3, #5
 800b750:	221f      	movs	r2, #31
 800b752:	fa02 f303 	lsl.w	r3, r2, r3
 800b756:	43da      	mvns	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	400a      	ands	r2, r1
 800b75e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4618      	mov	r0, r3
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	4613      	mov	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4413      	add	r3, r2
 800b778:	3b05      	subs	r3, #5
 800b77a:	fa00 f203 	lsl.w	r2, r0, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	430a      	orrs	r2, r1
 800b784:	635a      	str	r2, [r3, #52]	; 0x34
 800b786:	e04c      	b.n	800b822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	2b0c      	cmp	r3, #12
 800b78e:	d824      	bhi.n	800b7da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	3b23      	subs	r3, #35	; 0x23
 800b7a2:	221f      	movs	r2, #31
 800b7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a8:	43da      	mvns	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	400a      	ands	r2, r1
 800b7b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	4618      	mov	r0, r3
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	3b23      	subs	r3, #35	; 0x23
 800b7cc:	fa00 f203 	lsl.w	r2, r0, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	631a      	str	r2, [r3, #48]	; 0x30
 800b7d8:	e023      	b.n	800b822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	3b41      	subs	r3, #65	; 0x41
 800b7ec:	221f      	movs	r2, #31
 800b7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f2:	43da      	mvns	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	400a      	ands	r2, r1
 800b7fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	b29b      	uxth	r3, r3
 800b808:	4618      	mov	r0, r3
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	3b41      	subs	r3, #65	; 0x41
 800b816:	fa00 f203 	lsl.w	r2, r0, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b822:	4b22      	ldr	r3, [pc, #136]	; (800b8ac <HAL_ADC_ConfigChannel+0x234>)
 800b824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a21      	ldr	r2, [pc, #132]	; (800b8b0 <HAL_ADC_ConfigChannel+0x238>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d109      	bne.n	800b844 <HAL_ADC_ConfigChannel+0x1cc>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b12      	cmp	r3, #18
 800b836:	d105      	bne.n	800b844 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a19      	ldr	r2, [pc, #100]	; (800b8b0 <HAL_ADC_ConfigChannel+0x238>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d123      	bne.n	800b896 <HAL_ADC_ConfigChannel+0x21e>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b10      	cmp	r3, #16
 800b854:	d003      	beq.n	800b85e <HAL_ADC_ConfigChannel+0x1e6>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b11      	cmp	r3, #17
 800b85c:	d11b      	bne.n	800b896 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b10      	cmp	r3, #16
 800b870:	d111      	bne.n	800b896 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b872:	4b10      	ldr	r3, [pc, #64]	; (800b8b4 <HAL_ADC_ConfigChannel+0x23c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a10      	ldr	r2, [pc, #64]	; (800b8b8 <HAL_ADC_ConfigChannel+0x240>)
 800b878:	fba2 2303 	umull	r2, r3, r2, r3
 800b87c:	0c9a      	lsrs	r2, r3, #18
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b888:	e002      	b.n	800b890 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1f9      	bne.n	800b88a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	40012300 	.word	0x40012300
 800b8b0:	40012000 	.word	0x40012000
 800b8b4:	20000004 	.word	0x20000004
 800b8b8:	431bde83 	.word	0x431bde83

0800b8bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b8c4:	4b79      	ldr	r3, [pc, #484]	; (800baac <ADC_Init+0x1f0>)
 800b8c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	431a      	orrs	r2, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6859      	ldr	r1, [r3, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	021a      	lsls	r2, r3, #8
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6859      	ldr	r1, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	689a      	ldr	r2, [r3, #8]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6899      	ldr	r1, [r3, #8]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94e:	4a58      	ldr	r2, [pc, #352]	; (800bab0 <ADC_Init+0x1f4>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d022      	beq.n	800b99a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	689a      	ldr	r2, [r3, #8]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b962:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6899      	ldr	r1, [r3, #8]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689a      	ldr	r2, [r3, #8]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6899      	ldr	r1, [r3, #8]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	609a      	str	r2, [r3, #8]
 800b998:	e00f      	b.n	800b9ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b9a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	689a      	ldr	r2, [r3, #8]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b9b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 0202 	bic.w	r2, r2, #2
 800b9c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6899      	ldr	r1, [r3, #8]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	7e1b      	ldrb	r3, [r3, #24]
 800b9d4:	005a      	lsls	r2, r3, #1
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01b      	beq.n	800ba20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ba06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6859      	ldr	r1, [r3, #4]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	3b01      	subs	r3, #1
 800ba14:	035a      	lsls	r2, r3, #13
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	605a      	str	r2, [r3, #4]
 800ba1e:	e007      	b.n	800ba30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ba3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	051a      	lsls	r2, r3, #20
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	689a      	ldr	r2, [r3, #8]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6899      	ldr	r1, [r3, #8]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba72:	025a      	lsls	r2, r3, #9
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	430a      	orrs	r2, r1
 800ba7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6899      	ldr	r1, [r3, #8]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	029a      	lsls	r2, r3, #10
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	430a      	orrs	r2, r1
 800ba9e:	609a      	str	r2, [r3, #8]
}
 800baa0:	bf00      	nop
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	40012300 	.word	0x40012300
 800bab0:	0f000001 	.word	0x0f000001

0800bab4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e0ed      	b.n	800bca2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d102      	bne.n	800bad8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7f7 fab8 	bl	8003048 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0201 	orr.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bae8:	f7ff fd52 	bl	800b590 <HAL_GetTick>
 800baec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800baee:	e012      	b.n	800bb16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800baf0:	f7ff fd4e 	bl	800b590 <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	2b0a      	cmp	r3, #10
 800bafc:	d90b      	bls.n	800bb16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2205      	movs	r2, #5
 800bb0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e0c5      	b.n	800bca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0e5      	beq.n	800baf0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f022 0202 	bic.w	r2, r2, #2
 800bb32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bb34:	f7ff fd2c 	bl	800b590 <HAL_GetTick>
 800bb38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800bb3a:	e012      	b.n	800bb62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800bb3c:	f7ff fd28 	bl	800b590 <HAL_GetTick>
 800bb40:	4602      	mov	r2, r0
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	2b0a      	cmp	r3, #10
 800bb48:	d90b      	bls.n	800bb62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2205      	movs	r2, #5
 800bb5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e09f      	b.n	800bca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	f003 0302 	and.w	r3, r3, #2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1e5      	bne.n	800bb3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	7e1b      	ldrb	r3, [r3, #24]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d108      	bne.n	800bb8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	e007      	b.n	800bb9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7e5b      	ldrb	r3, [r3, #25]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d108      	bne.n	800bbb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	e007      	b.n	800bbc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	7e9b      	ldrb	r3, [r3, #26]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d108      	bne.n	800bbde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 0220 	orr.w	r2, r2, #32
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	e007      	b.n	800bbee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f022 0220 	bic.w	r2, r2, #32
 800bbec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	7edb      	ldrb	r3, [r3, #27]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d108      	bne.n	800bc08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f022 0210 	bic.w	r2, r2, #16
 800bc04:	601a      	str	r2, [r3, #0]
 800bc06:	e007      	b.n	800bc18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0210 	orr.w	r2, r2, #16
 800bc16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	7f1b      	ldrb	r3, [r3, #28]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d108      	bne.n	800bc32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f042 0208 	orr.w	r2, r2, #8
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	e007      	b.n	800bc42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f022 0208 	bic.w	r2, r2, #8
 800bc40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7f5b      	ldrb	r3, [r3, #29]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d108      	bne.n	800bc5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f042 0204 	orr.w	r2, r2, #4
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	e007      	b.n	800bc6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 0204 	bic.w	r2, r2, #4
 800bc6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	689a      	ldr	r2, [r3, #8]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	431a      	orrs	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	ea42 0103 	orr.w	r1, r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	1e5a      	subs	r2, r3, #1
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bcc2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800bcc4:	7cfb      	ldrb	r3, [r7, #19]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d003      	beq.n	800bcd2 <HAL_CAN_ConfigFilter+0x26>
 800bcca:	7cfb      	ldrb	r3, [r7, #19]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	f040 80be 	bne.w	800be4e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800bcd2:	4b65      	ldr	r3, [pc, #404]	; (800be68 <HAL_CAN_ConfigFilter+0x1bc>)
 800bcd4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcdc:	f043 0201 	orr.w	r2, r3, #1
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	021b      	lsls	r3, r3, #8
 800bd02:	431a      	orrs	r2, r3
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	f003 031f 	and.w	r3, r3, #31
 800bd12:	2201      	movs	r2, #1
 800bd14:	fa02 f303 	lsl.w	r3, r2, r3
 800bd18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	43db      	mvns	r3, r3
 800bd24:	401a      	ands	r2, r3
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d123      	bne.n	800bd7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	43db      	mvns	r3, r3
 800bd3e:	401a      	ands	r2, r3
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800bd56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	3248      	adds	r2, #72	; 0x48
 800bd5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800bd70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800bd72:	6979      	ldr	r1, [r7, #20]
 800bd74:	3348      	adds	r3, #72	; 0x48
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	440b      	add	r3, r1
 800bd7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	69db      	ldr	r3, [r3, #28]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d122      	bne.n	800bdca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	431a      	orrs	r2, r3
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800bda4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	3248      	adds	r2, #72	; 0x48
 800bdaa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800bdbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800bdc0:	6979      	ldr	r1, [r7, #20]
 800bdc2:	3348      	adds	r3, #72	; 0x48
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	440b      	add	r3, r1
 800bdc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d109      	bne.n	800bde6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	43db      	mvns	r3, r3
 800bddc:	401a      	ands	r2, r3
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800bde4:	e007      	b.n	800bdf6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	431a      	orrs	r2, r3
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d109      	bne.n	800be12 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	43db      	mvns	r3, r3
 800be08:	401a      	ands	r2, r3
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800be10:	e007      	b.n	800be22 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	431a      	orrs	r2, r3
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d107      	bne.n	800be3a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	431a      	orrs	r2, r3
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be40:	f023 0201 	bic.w	r2, r3, #1
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	e006      	b.n	800be5c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
  }
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	371c      	adds	r7, #28
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr
 800be68:	40006400 	.word	0x40006400

0800be6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d12e      	bne.n	800bede <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2202      	movs	r2, #2
 800be84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f022 0201 	bic.w	r2, r2, #1
 800be96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be98:	f7ff fb7a 	bl	800b590 <HAL_GetTick>
 800be9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800be9e:	e012      	b.n	800bec6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800bea0:	f7ff fb76 	bl	800b590 <HAL_GetTick>
 800bea4:	4602      	mov	r2, r0
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	2b0a      	cmp	r3, #10
 800beac:	d90b      	bls.n	800bec6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2205      	movs	r2, #5
 800bebe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e012      	b.n	800beec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	f003 0301 	and.w	r3, r3, #1
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e5      	bne.n	800bea0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	e006      	b.n	800beec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
  }
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b089      	sub	sp, #36	; 0x24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800bf12:	7ffb      	ldrb	r3, [r7, #31]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d003      	beq.n	800bf20 <HAL_CAN_AddTxMessage+0x2c>
 800bf18:	7ffb      	ldrb	r3, [r7, #31]
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	f040 80b8 	bne.w	800c090 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10a      	bne.n	800bf40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d105      	bne.n	800bf40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 80a0 	beq.w	800c080 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	0e1b      	lsrs	r3, r3, #24
 800bf44:	f003 0303 	and.w	r3, r3, #3
 800bf48:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d907      	bls.n	800bf60 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e09e      	b.n	800c09e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800bf60:	2201      	movs	r2, #1
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	409a      	lsls	r2, r3
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10d      	bne.n	800bf8e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bf7c:	68f9      	ldr	r1, [r7, #12]
 800bf7e:	6809      	ldr	r1, [r1, #0]
 800bf80:	431a      	orrs	r2, r3
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	3318      	adds	r3, #24
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	440b      	add	r3, r1
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	e00f      	b.n	800bfae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bf98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bf9e:	68f9      	ldr	r1, [r7, #12]
 800bfa0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800bfa2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	3318      	adds	r3, #24
 800bfa8:	011b      	lsls	r3, r3, #4
 800bfaa:	440b      	add	r3, r1
 800bfac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6819      	ldr	r1, [r3, #0]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	691a      	ldr	r2, [r3, #16]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	3318      	adds	r3, #24
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	440b      	add	r3, r1
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	7d1b      	ldrb	r3, [r3, #20]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d111      	bne.n	800bfee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	3318      	adds	r3, #24
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	4413      	add	r3, r2
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	6811      	ldr	r1, [r2, #0]
 800bfde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	3318      	adds	r3, #24
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	440b      	add	r3, r1
 800bfea:	3304      	adds	r3, #4
 800bfec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	3307      	adds	r3, #7
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	061a      	lsls	r2, r3, #24
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	3306      	adds	r3, #6
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	041b      	lsls	r3, r3, #16
 800bffe:	431a      	orrs	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	3305      	adds	r3, #5
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	021b      	lsls	r3, r3, #8
 800c008:	4313      	orrs	r3, r2
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	3204      	adds	r2, #4
 800c00e:	7812      	ldrb	r2, [r2, #0]
 800c010:	4610      	mov	r0, r2
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	6811      	ldr	r1, [r2, #0]
 800c016:	ea43 0200 	orr.w	r2, r3, r0
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	440b      	add	r3, r1
 800c020:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800c024:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3303      	adds	r3, #3
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	061a      	lsls	r2, r3, #24
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3302      	adds	r3, #2
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	041b      	lsls	r3, r3, #16
 800c036:	431a      	orrs	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3301      	adds	r3, #1
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	4313      	orrs	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	7812      	ldrb	r2, [r2, #0]
 800c046:	4610      	mov	r0, r2
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	6811      	ldr	r1, [r2, #0]
 800c04c:	ea43 0200 	orr.w	r2, r3, r0
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	011b      	lsls	r3, r3, #4
 800c054:	440b      	add	r3, r1
 800c056:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800c05a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	3318      	adds	r3, #24
 800c064:	011b      	lsls	r3, r3, #4
 800c066:	4413      	add	r3, r2
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	6811      	ldr	r1, [r2, #0]
 800c06e:	f043 0201 	orr.w	r2, r3, #1
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	3318      	adds	r3, #24
 800c076:	011b      	lsls	r3, r3, #4
 800c078:	440b      	add	r3, r1
 800c07a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	e00e      	b.n	800c09e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e006      	b.n	800c09e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
  }
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3724      	adds	r7, #36	; 0x24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b087      	sub	sp, #28
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	60f8      	str	r0, [r7, #12]
 800c0b2:	60b9      	str	r1, [r7, #8]
 800c0b4:	607a      	str	r2, [r7, #4]
 800c0b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c0be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d003      	beq.n	800c0ce <HAL_CAN_GetRxMessage+0x24>
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	f040 80f3 	bne.w	800c2b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10e      	bne.n	800c0f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	f003 0303 	and.w	r3, r3, #3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d116      	bne.n	800c110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e0e7      	b.n	800c2c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	f003 0303 	and.w	r3, r3, #3
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d107      	bne.n	800c110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e0d8      	b.n	800c2c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	331b      	adds	r3, #27
 800c118:	011b      	lsls	r3, r3, #4
 800c11a:	4413      	add	r3, r2
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0204 	and.w	r2, r3, #4
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10c      	bne.n	800c148 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	331b      	adds	r3, #27
 800c136:	011b      	lsls	r3, r3, #4
 800c138:	4413      	add	r3, r2
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	0d5b      	lsrs	r3, r3, #21
 800c13e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	e00b      	b.n	800c160 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	331b      	adds	r3, #27
 800c150:	011b      	lsls	r3, r3, #4
 800c152:	4413      	add	r3, r2
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	08db      	lsrs	r3, r3, #3
 800c158:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	331b      	adds	r3, #27
 800c168:	011b      	lsls	r3, r3, #4
 800c16a:	4413      	add	r3, r2
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0202 	and.w	r2, r3, #2
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	331b      	adds	r3, #27
 800c17e:	011b      	lsls	r3, r3, #4
 800c180:	4413      	add	r3, r2
 800c182:	3304      	adds	r3, #4
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 020f 	and.w	r2, r3, #15
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	331b      	adds	r3, #27
 800c196:	011b      	lsls	r3, r3, #4
 800c198:	4413      	add	r3, r2
 800c19a:	3304      	adds	r3, #4
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	0a1b      	lsrs	r3, r3, #8
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	331b      	adds	r3, #27
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	4413      	add	r3, r2
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	0c1b      	lsrs	r3, r3, #16
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	011b      	lsls	r3, r3, #4
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	0a1a      	lsrs	r2, r3, #8
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	0c1a      	lsrs	r2, r3, #16
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	3302      	adds	r3, #2
 800c204:	b2d2      	uxtb	r2, r2
 800c206:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	011b      	lsls	r3, r3, #4
 800c210:	4413      	add	r3, r2
 800c212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	0e1a      	lsrs	r2, r3, #24
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	3303      	adds	r3, #3
 800c21e:	b2d2      	uxtb	r2, r2
 800c220:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	011b      	lsls	r3, r3, #4
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	3304      	adds	r3, #4
 800c236:	b2d2      	uxtb	r2, r2
 800c238:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	011b      	lsls	r3, r3, #4
 800c242:	4413      	add	r3, r2
 800c244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	0a1a      	lsrs	r2, r3, #8
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	3305      	adds	r3, #5
 800c250:	b2d2      	uxtb	r2, r2
 800c252:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	011b      	lsls	r3, r3, #4
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	0c1a      	lsrs	r2, r3, #16
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	3306      	adds	r3, #6
 800c26a:	b2d2      	uxtb	r2, r2
 800c26c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	4413      	add	r3, r2
 800c278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	0e1a      	lsrs	r2, r3, #24
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	3307      	adds	r3, #7
 800c284:	b2d2      	uxtb	r2, r2
 800c286:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d108      	bne.n	800c2a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68da      	ldr	r2, [r3, #12]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f042 0220 	orr.w	r2, r2, #32
 800c29c:	60da      	str	r2, [r3, #12]
 800c29e:	e007      	b.n	800c2b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691a      	ldr	r2, [r3, #16]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f042 0220 	orr.w	r2, r2, #32
 800c2ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e006      	b.n	800c2c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
  }
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	371c      	adds	r7, #28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d002      	beq.n	800c2ec <HAL_CAN_ActivateNotification+0x1e>
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d109      	bne.n	800c300 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6959      	ldr	r1, [r3, #20]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e006      	b.n	800c30e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c304:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
  }
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b085      	sub	sp, #20
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c32a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d002      	beq.n	800c338 <HAL_CAN_DeactivateNotification+0x1e>
 800c332:	7bfb      	ldrb	r3, [r7, #15]
 800c334:	2b02      	cmp	r3, #2
 800c336:	d10a      	bne.n	800c34e <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6959      	ldr	r1, [r3, #20]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	43da      	mvns	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	400a      	ands	r2, r1
 800c348:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	e006      	b.n	800c35c <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c352:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
  }
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08a      	sub	sp, #40	; 0x28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800c370:	2300      	movs	r3, #0
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d07c      	beq.n	800c4a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	f003 0301 	and.w	r3, r3, #1
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d023      	beq.n	800c400 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	f003 0302 	and.w	r3, r3, #2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f983 	bl	800c6d6 <HAL_CAN_TxMailbox0CompleteCallback>
 800c3d0:	e016      	b.n	800c400 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d004      	beq.n	800c3e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c3e4:	e00c      	b.n	800c400 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	f003 0308 	and.w	r3, r3, #8
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c3f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c3f8:	e002      	b.n	800c400 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f989 	bl	800c712 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c406:	2b00      	cmp	r3, #0
 800c408:	d024      	beq.n	800c454 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d003      	beq.n	800c426 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f963 	bl	800c6ea <HAL_CAN_TxMailbox1CompleteCallback>
 800c424:	e016      	b.n	800c454 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d004      	beq.n	800c43a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c436:	627b      	str	r3, [r7, #36]	; 0x24
 800c438:	e00c      	b.n	800c454 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c440:	2b00      	cmp	r3, #0
 800c442:	d004      	beq.n	800c44e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c44a:	627b      	str	r3, [r7, #36]	; 0x24
 800c44c:	e002      	b.n	800c454 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f969 	bl	800c726 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d024      	beq.n	800c4a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c466:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f943 	bl	800c6fe <HAL_CAN_TxMailbox2CompleteCallback>
 800c478:	e016      	b.n	800c4a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c48a:	627b      	str	r3, [r7, #36]	; 0x24
 800c48c:	e00c      	b.n	800c4a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c49e:	627b      	str	r3, [r7, #36]	; 0x24
 800c4a0:	e002      	b.n	800c4a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f949 	bl	800c73a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	f003 0308 	and.w	r3, r3, #8
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00c      	beq.n	800c4cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	f003 0310 	and.w	r3, r3, #16
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d007      	beq.n	800c4cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2210      	movs	r2, #16
 800c4ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	f003 0304 	and.w	r3, r3, #4
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00b      	beq.n	800c4ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	f003 0308 	and.w	r3, r3, #8
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f930 	bl	800c74e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	f003 0302 	and.w	r3, r3, #2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f003 0303 	and.w	r3, r3, #3
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7f4 fe92 	bl	8001230 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00c      	beq.n	800c530 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f003 0310 	and.w	r3, r3, #16
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d007      	beq.n	800c530 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c526:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2210      	movs	r2, #16
 800c52e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	f003 0320 	and.w	r3, r3, #32
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00b      	beq.n	800c552 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f003 0308 	and.w	r3, r3, #8
 800c540:	2b00      	cmp	r3, #0
 800c542:	d006      	beq.n	800c552 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2208      	movs	r2, #8
 800c54a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f908 	bl	800c762 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800c552:	6a3b      	ldr	r3, [r7, #32]
 800c554:	f003 0310 	and.w	r3, r3, #16
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d009      	beq.n	800c570 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	f003 0303 	and.w	r3, r3, #3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d002      	beq.n	800c570 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7f4 fe6b 	bl	8001246 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00b      	beq.n	800c592 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	f003 0310 	and.w	r3, r3, #16
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2210      	movs	r2, #16
 800c58a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f8f2 	bl	800c776 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	f003 0308 	and.w	r3, r3, #8
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d006      	beq.n	800c5b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f8eb 	bl	800c78a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d07b      	beq.n	800c6b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d072      	beq.n	800c6ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d008      	beq.n	800c5e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d003      	beq.n	800c5e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	f043 0301 	orr.w	r3, r3, #1
 800c5e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d008      	beq.n	800c600 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d003      	beq.n	800c600 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fa:	f043 0302 	orr.w	r3, r3, #2
 800c5fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c600:	6a3b      	ldr	r3, [r7, #32]
 800c602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c606:	2b00      	cmp	r3, #0
 800c608:	d008      	beq.n	800c61c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c610:	2b00      	cmp	r3, #0
 800c612:	d003      	beq.n	800c61c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	f043 0304 	orr.w	r3, r3, #4
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c622:	2b00      	cmp	r3, #0
 800c624:	d043      	beq.n	800c6ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d03e      	beq.n	800c6ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c636:	2b60      	cmp	r3, #96	; 0x60
 800c638:	d02b      	beq.n	800c692 <HAL_CAN_IRQHandler+0x32a>
 800c63a:	2b60      	cmp	r3, #96	; 0x60
 800c63c:	d82e      	bhi.n	800c69c <HAL_CAN_IRQHandler+0x334>
 800c63e:	2b50      	cmp	r3, #80	; 0x50
 800c640:	d022      	beq.n	800c688 <HAL_CAN_IRQHandler+0x320>
 800c642:	2b50      	cmp	r3, #80	; 0x50
 800c644:	d82a      	bhi.n	800c69c <HAL_CAN_IRQHandler+0x334>
 800c646:	2b40      	cmp	r3, #64	; 0x40
 800c648:	d019      	beq.n	800c67e <HAL_CAN_IRQHandler+0x316>
 800c64a:	2b40      	cmp	r3, #64	; 0x40
 800c64c:	d826      	bhi.n	800c69c <HAL_CAN_IRQHandler+0x334>
 800c64e:	2b30      	cmp	r3, #48	; 0x30
 800c650:	d010      	beq.n	800c674 <HAL_CAN_IRQHandler+0x30c>
 800c652:	2b30      	cmp	r3, #48	; 0x30
 800c654:	d822      	bhi.n	800c69c <HAL_CAN_IRQHandler+0x334>
 800c656:	2b10      	cmp	r3, #16
 800c658:	d002      	beq.n	800c660 <HAL_CAN_IRQHandler+0x2f8>
 800c65a:	2b20      	cmp	r3, #32
 800c65c:	d005      	beq.n	800c66a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800c65e:	e01d      	b.n	800c69c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	f043 0308 	orr.w	r3, r3, #8
 800c666:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c668:	e019      	b.n	800c69e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	f043 0310 	orr.w	r3, r3, #16
 800c670:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c672:	e014      	b.n	800c69e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	f043 0320 	orr.w	r3, r3, #32
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c67c:	e00f      	b.n	800c69e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c684:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c686:	e00a      	b.n	800c69e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800c688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c68e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c690:	e005      	b.n	800c69e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c69a:	e000      	b.n	800c69e <HAL_CAN_IRQHandler+0x336>
            break;
 800c69c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	699a      	ldr	r2, [r3, #24]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c6ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2204      	movs	r2, #4
 800c6b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d008      	beq.n	800c6ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	431a      	orrs	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f868 	bl	800c79e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800c6ce:	bf00      	nop
 800c6d0:	3728      	adds	r7, #40	; 0x28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800c6f2:	bf00      	nop
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b083      	sub	sp, #12
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800c706:	bf00      	nop
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800c71a:	bf00      	nop
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c726:	b480      	push	{r7}
 800c728:	b083      	sub	sp, #12
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800c72e:	bf00      	nop
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b083      	sub	sp, #12
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800c762:	b480      	push	{r7}
 800c764:	b083      	sub	sp, #12
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800c76a:	bf00      	nop
 800c76c:	370c      	adds	r7, #12
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800c776:	b480      	push	{r7}
 800c778:	b083      	sub	sp, #12
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800c77e:	bf00      	nop
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr

0800c78a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800c78a:	b480      	push	{r7}
 800c78c:	b083      	sub	sp, #12
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800c792:	bf00      	nop
 800c794:	370c      	adds	r7, #12
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800c79e:	b480      	push	{r7}
 800c7a0:	b083      	sub	sp, #12
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800c7a6:	bf00      	nop
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
	...

0800c7b4 <__NVIC_SetPriorityGrouping>:
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f003 0307 	and.w	r3, r3, #7
 800c7c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c7c4:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <__NVIC_SetPriorityGrouping+0x44>)
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c7dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c7e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c7e6:	4a04      	ldr	r2, [pc, #16]	; (800c7f8 <__NVIC_SetPriorityGrouping+0x44>)
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	60d3      	str	r3, [r2, #12]
}
 800c7ec:	bf00      	nop
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	e000ed00 	.word	0xe000ed00

0800c7fc <__NVIC_GetPriorityGrouping>:
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c800:	4b04      	ldr	r3, [pc, #16]	; (800c814 <__NVIC_GetPriorityGrouping+0x18>)
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	0a1b      	lsrs	r3, r3, #8
 800c806:	f003 0307 	and.w	r3, r3, #7
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	e000ed00 	.word	0xe000ed00

0800c818 <__NVIC_EnableIRQ>:
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c826:	2b00      	cmp	r3, #0
 800c828:	db0b      	blt.n	800c842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	f003 021f 	and.w	r2, r3, #31
 800c830:	4907      	ldr	r1, [pc, #28]	; (800c850 <__NVIC_EnableIRQ+0x38>)
 800c832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c836:	095b      	lsrs	r3, r3, #5
 800c838:	2001      	movs	r0, #1
 800c83a:	fa00 f202 	lsl.w	r2, r0, r2
 800c83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c842:	bf00      	nop
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	e000e100 	.word	0xe000e100

0800c854 <__NVIC_SetPriority>:
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	6039      	str	r1, [r7, #0]
 800c85e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c864:	2b00      	cmp	r3, #0
 800c866:	db0a      	blt.n	800c87e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	490c      	ldr	r1, [pc, #48]	; (800c8a0 <__NVIC_SetPriority+0x4c>)
 800c86e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c872:	0112      	lsls	r2, r2, #4
 800c874:	b2d2      	uxtb	r2, r2
 800c876:	440b      	add	r3, r1
 800c878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c87c:	e00a      	b.n	800c894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	b2da      	uxtb	r2, r3
 800c882:	4908      	ldr	r1, [pc, #32]	; (800c8a4 <__NVIC_SetPriority+0x50>)
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	f003 030f 	and.w	r3, r3, #15
 800c88a:	3b04      	subs	r3, #4
 800c88c:	0112      	lsls	r2, r2, #4
 800c88e:	b2d2      	uxtb	r2, r2
 800c890:	440b      	add	r3, r1
 800c892:	761a      	strb	r2, [r3, #24]
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	e000e100 	.word	0xe000e100
 800c8a4:	e000ed00 	.word	0xe000ed00

0800c8a8 <NVIC_EncodePriority>:
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b089      	sub	sp, #36	; 0x24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	f1c3 0307 	rsb	r3, r3, #7
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	bf28      	it	cs
 800c8c6:	2304      	movcs	r3, #4
 800c8c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	2b06      	cmp	r3, #6
 800c8d0:	d902      	bls.n	800c8d8 <NVIC_EncodePriority+0x30>
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	3b03      	subs	r3, #3
 800c8d6:	e000      	b.n	800c8da <NVIC_EncodePriority+0x32>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c8dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e6:	43da      	mvns	r2, r3
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	401a      	ands	r2, r3
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c8f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c8fa:	43d9      	mvns	r1, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c900:	4313      	orrs	r3, r2
}
 800c902:	4618      	mov	r0, r3
 800c904:	3724      	adds	r7, #36	; 0x24
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b082      	sub	sp, #8
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff ff4c 	bl	800c7b4 <__NVIC_SetPriorityGrouping>
}
 800c91c:	bf00      	nop
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	4603      	mov	r3, r0
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c932:	2300      	movs	r3, #0
 800c934:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c936:	f7ff ff61 	bl	800c7fc <__NVIC_GetPriorityGrouping>
 800c93a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	68b9      	ldr	r1, [r7, #8]
 800c940:	6978      	ldr	r0, [r7, #20]
 800c942:	f7ff ffb1 	bl	800c8a8 <NVIC_EncodePriority>
 800c946:	4602      	mov	r2, r0
 800c948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c94c:	4611      	mov	r1, r2
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff ff80 	bl	800c854 <__NVIC_SetPriority>
}
 800c954:	bf00      	nop
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	4603      	mov	r3, r0
 800c964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff ff54 	bl	800c818 <__NVIC_EnableIRQ>
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c980:	2300      	movs	r3, #0
 800c982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c984:	f7fe fe04 	bl	800b590 <HAL_GetTick>
 800c988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	e099      	b.n	800cac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2202      	movs	r2, #2
 800c998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 0201 	bic.w	r2, r2, #1
 800c9b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c9b4:	e00f      	b.n	800c9d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c9b6:	f7fe fdeb 	bl	800b590 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	2b05      	cmp	r3, #5
 800c9c2:	d908      	bls.n	800c9d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2203      	movs	r2, #3
 800c9ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e078      	b.n	800cac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0301 	and.w	r3, r3, #1
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1e8      	bne.n	800c9b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	4b38      	ldr	r3, [pc, #224]	; (800cad0 <HAL_DMA_Init+0x158>)
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685a      	ldr	r2, [r3, #4]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ca02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	d107      	bne.n	800ca40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	697a      	ldr	r2, [r7, #20]
 800ca46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	695b      	ldr	r3, [r3, #20]
 800ca4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f023 0307 	bic.w	r3, r3, #7
 800ca56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5c:	697a      	ldr	r2, [r7, #20]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	d117      	bne.n	800ca9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00e      	beq.n	800ca9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fb0d 	bl	800d09c <DMA_CheckFifoParam>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d008      	beq.n	800ca9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2240      	movs	r2, #64	; 0x40
 800ca8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ca96:	2301      	movs	r3, #1
 800ca98:	e016      	b.n	800cac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fac4 	bl	800d030 <DMA_CalcBaseAndBitshift>
 800caa8:	4603      	mov	r3, r0
 800caaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cab0:	223f      	movs	r2, #63	; 0x3f
 800cab2:	409a      	lsls	r2, r3
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3718      	adds	r7, #24
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	f010803f 	.word	0xf010803f

0800cad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cae2:	2300      	movs	r3, #0
 800cae4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d101      	bne.n	800cafa <HAL_DMA_Start_IT+0x26>
 800caf6:	2302      	movs	r3, #2
 800caf8:	e040      	b.n	800cb7c <HAL_DMA_Start_IT+0xa8>
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2201      	movs	r2, #1
 800cafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d12f      	bne.n	800cb6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2202      	movs	r2, #2
 800cb12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	68b9      	ldr	r1, [r7, #8]
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 fa56 	bl	800cfd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb2c:	223f      	movs	r2, #63	; 0x3f
 800cb2e:	409a      	lsls	r2, r3
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f042 0216 	orr.w	r2, r2, #22
 800cb42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d007      	beq.n	800cb5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f042 0208 	orr.w	r2, r2, #8
 800cb5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f042 0201 	orr.w	r2, r2, #1
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	e005      	b.n	800cb7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800cb76:	2302      	movs	r3, #2
 800cb78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3718      	adds	r7, #24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800cb92:	f7fe fcfd 	bl	800b590 <HAL_GetTick>
 800cb96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d008      	beq.n	800cbb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2280      	movs	r2, #128	; 0x80
 800cba8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e052      	b.n	800cc5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0216 	bic.w	r2, r2, #22
 800cbc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	695a      	ldr	r2, [r3, #20]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d103      	bne.n	800cbe6 <HAL_DMA_Abort+0x62>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d007      	beq.n	800cbf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f022 0208 	bic.w	r2, r2, #8
 800cbf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f022 0201 	bic.w	r2, r2, #1
 800cc04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cc06:	e013      	b.n	800cc30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cc08:	f7fe fcc2 	bl	800b590 <HAL_GetTick>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	2b05      	cmp	r3, #5
 800cc14:	d90c      	bls.n	800cc30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2220      	movs	r2, #32
 800cc1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2203      	movs	r2, #3
 800cc20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e015      	b.n	800cc5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1e4      	bne.n	800cc08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc42:	223f      	movs	r2, #63	; 0x3f
 800cc44:	409a      	lsls	r2, r3
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d004      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2280      	movs	r2, #128	; 0x80
 800cc7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e00c      	b.n	800cc9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2205      	movs	r2, #5
 800cc86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f022 0201 	bic.w	r2, r2, #1
 800cc98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ccb4:	4b8e      	ldr	r3, [pc, #568]	; (800cef0 <HAL_DMA_IRQHandler+0x248>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a8e      	ldr	r2, [pc, #568]	; (800cef4 <HAL_DMA_IRQHandler+0x24c>)
 800ccba:	fba2 2303 	umull	r2, r3, r2, r3
 800ccbe:	0a9b      	lsrs	r3, r3, #10
 800ccc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccd2:	2208      	movs	r2, #8
 800ccd4:	409a      	lsls	r2, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	4013      	ands	r3, r2
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d01a      	beq.n	800cd14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f003 0304 	and.w	r3, r3, #4
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d013      	beq.n	800cd14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f022 0204 	bic.w	r2, r2, #4
 800ccfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd00:	2208      	movs	r2, #8
 800cd02:	409a      	lsls	r2, r3
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd0c:	f043 0201 	orr.w	r2, r3, #1
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd18:	2201      	movs	r2, #1
 800cd1a:	409a      	lsls	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4013      	ands	r3, r2
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d012      	beq.n	800cd4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	695b      	ldr	r3, [r3, #20]
 800cd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00b      	beq.n	800cd4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd36:	2201      	movs	r2, #1
 800cd38:	409a      	lsls	r2, r3
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd42:	f043 0202 	orr.w	r2, r3, #2
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd4e:	2204      	movs	r2, #4
 800cd50:	409a      	lsls	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	4013      	ands	r3, r2
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d012      	beq.n	800cd80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0302 	and.w	r3, r3, #2
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00b      	beq.n	800cd80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd6c:	2204      	movs	r2, #4
 800cd6e:	409a      	lsls	r2, r3
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd78:	f043 0204 	orr.w	r2, r3, #4
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd84:	2210      	movs	r2, #16
 800cd86:	409a      	lsls	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d043      	beq.n	800ce18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 0308 	and.w	r3, r3, #8
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d03c      	beq.n	800ce18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cda2:	2210      	movs	r2, #16
 800cda4:	409a      	lsls	r2, r3
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d018      	beq.n	800cdea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d108      	bne.n	800cdd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d024      	beq.n	800ce18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	4798      	blx	r3
 800cdd6:	e01f      	b.n	800ce18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01b      	beq.n	800ce18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	4798      	blx	r3
 800cde8:	e016      	b.n	800ce18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d107      	bne.n	800ce08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f022 0208 	bic.w	r2, r2, #8
 800ce06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d003      	beq.n	800ce18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce1c:	2220      	movs	r2, #32
 800ce1e:	409a      	lsls	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4013      	ands	r3, r2
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 808f 	beq.w	800cf48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 0310 	and.w	r3, r3, #16
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 8087 	beq.w	800cf48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce3e:	2220      	movs	r2, #32
 800ce40:	409a      	lsls	r2, r3
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	2b05      	cmp	r3, #5
 800ce50:	d136      	bne.n	800cec0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f022 0216 	bic.w	r2, r2, #22
 800ce60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	695a      	ldr	r2, [r3, #20]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d103      	bne.n	800ce82 <HAL_DMA_IRQHandler+0x1da>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d007      	beq.n	800ce92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f022 0208 	bic.w	r2, r2, #8
 800ce90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce96:	223f      	movs	r2, #63	; 0x3f
 800ce98:	409a      	lsls	r2, r3
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d07e      	beq.n	800cfb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	4798      	blx	r3
        }
        return;
 800cebe:	e079      	b.n	800cfb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d01d      	beq.n	800cf0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10d      	bne.n	800cef8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d031      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	4798      	blx	r3
 800ceec:	e02c      	b.n	800cf48 <HAL_DMA_IRQHandler+0x2a0>
 800ceee:	bf00      	nop
 800cef0:	20000004 	.word	0x20000004
 800cef4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d023      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	4798      	blx	r3
 800cf08:	e01e      	b.n	800cf48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10f      	bne.n	800cf38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f022 0210 	bic.w	r2, r2, #16
 800cf26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d032      	beq.n	800cfb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf54:	f003 0301 	and.w	r3, r3, #1
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d022      	beq.n	800cfa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2205      	movs	r2, #5
 800cf60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f022 0201 	bic.w	r2, r2, #1
 800cf72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	3301      	adds	r3, #1
 800cf78:	60bb      	str	r3, [r7, #8]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d307      	bcc.n	800cf90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f003 0301 	and.w	r3, r3, #1
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1f2      	bne.n	800cf74 <HAL_DMA_IRQHandler+0x2cc>
 800cf8e:	e000      	b.n	800cf92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800cf90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d005      	beq.n	800cfb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	4798      	blx	r3
 800cfb2:	e000      	b.n	800cfb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 800cfb4:	bf00      	nop
    }
  }
}
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cff0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	2b40      	cmp	r3, #64	; 0x40
 800d000:	d108      	bne.n	800d014 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d012:	e007      	b.n	800d024 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	60da      	str	r2, [r3, #12]
}
 800d024:	bf00      	nop
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	3b10      	subs	r3, #16
 800d040:	4a14      	ldr	r2, [pc, #80]	; (800d094 <DMA_CalcBaseAndBitshift+0x64>)
 800d042:	fba2 2303 	umull	r2, r3, r2, r3
 800d046:	091b      	lsrs	r3, r3, #4
 800d048:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d04a:	4a13      	ldr	r2, [pc, #76]	; (800d098 <DMA_CalcBaseAndBitshift+0x68>)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	461a      	mov	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b03      	cmp	r3, #3
 800d05c:	d909      	bls.n	800d072 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d066:	f023 0303 	bic.w	r3, r3, #3
 800d06a:	1d1a      	adds	r2, r3, #4
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	659a      	str	r2, [r3, #88]	; 0x58
 800d070:	e007      	b.n	800d082 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d07a:	f023 0303 	bic.w	r3, r3, #3
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d086:	4618      	mov	r0, r3
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	aaaaaaab 	.word	0xaaaaaaab
 800d098:	08022e74 	.word	0x08022e74

0800d09c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d11f      	bne.n	800d0f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	d856      	bhi.n	800d16a <DMA_CheckFifoParam+0xce>
 800d0bc:	a201      	add	r2, pc, #4	; (adr r2, 800d0c4 <DMA_CheckFifoParam+0x28>)
 800d0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c2:	bf00      	nop
 800d0c4:	0800d0d5 	.word	0x0800d0d5
 800d0c8:	0800d0e7 	.word	0x0800d0e7
 800d0cc:	0800d0d5 	.word	0x0800d0d5
 800d0d0:	0800d16b 	.word	0x0800d16b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d046      	beq.n	800d16e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d0e4:	e043      	b.n	800d16e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d0ee:	d140      	bne.n	800d172 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d0f4:	e03d      	b.n	800d172 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	699b      	ldr	r3, [r3, #24]
 800d0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0fe:	d121      	bne.n	800d144 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b03      	cmp	r3, #3
 800d104:	d837      	bhi.n	800d176 <DMA_CheckFifoParam+0xda>
 800d106:	a201      	add	r2, pc, #4	; (adr r2, 800d10c <DMA_CheckFifoParam+0x70>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d11d 	.word	0x0800d11d
 800d110:	0800d123 	.word	0x0800d123
 800d114:	0800d11d 	.word	0x0800d11d
 800d118:	0800d135 	.word	0x0800d135
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	73fb      	strb	r3, [r7, #15]
      break;
 800d120:	e030      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d025      	beq.n	800d17a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d132:	e022      	b.n	800d17a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d13c:	d11f      	bne.n	800d17e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d142:	e01c      	b.n	800d17e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	2b02      	cmp	r3, #2
 800d148:	d903      	bls.n	800d152 <DMA_CheckFifoParam+0xb6>
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b03      	cmp	r3, #3
 800d14e:	d003      	beq.n	800d158 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d150:	e018      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	73fb      	strb	r3, [r7, #15]
      break;
 800d156:	e015      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00e      	beq.n	800d182 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	73fb      	strb	r3, [r7, #15]
      break;
 800d168:	e00b      	b.n	800d182 <DMA_CheckFifoParam+0xe6>
      break;
 800d16a:	bf00      	nop
 800d16c:	e00a      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      break;
 800d16e:	bf00      	nop
 800d170:	e008      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      break;
 800d172:	bf00      	nop
 800d174:	e006      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      break;
 800d176:	bf00      	nop
 800d178:	e004      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      break;
 800d17a:	bf00      	nop
 800d17c:	e002      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      break;   
 800d17e:	bf00      	nop
 800d180:	e000      	b.n	800d184 <DMA_CheckFifoParam+0xe8>
      break;
 800d182:	bf00      	nop
    }
  } 
  
  return status; 
 800d184:	7bfb      	ldrb	r3, [r7, #15]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop

0800d194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d194:	b480      	push	{r7}
 800d196:	b089      	sub	sp, #36	; 0x24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61fb      	str	r3, [r7, #28]
 800d1ae:	e16b      	b.n	800d488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	f040 815a 	bne.w	800d482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d005      	beq.n	800d1e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	d130      	bne.n	800d248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	2203      	movs	r2, #3
 800d1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f6:	43db      	mvns	r3, r3
 800d1f8:	69ba      	ldr	r2, [r7, #24]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	68da      	ldr	r2, [r3, #12]
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	fa02 f303 	lsl.w	r3, r2, r3
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	69ba      	ldr	r2, [r7, #24]
 800d214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d21c:	2201      	movs	r2, #1
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	fa02 f303 	lsl.w	r3, r2, r3
 800d224:	43db      	mvns	r3, r3
 800d226:	69ba      	ldr	r2, [r7, #24]
 800d228:	4013      	ands	r3, r2
 800d22a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	091b      	lsrs	r3, r3, #4
 800d232:	f003 0201 	and.w	r2, r3, #1
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	fa02 f303 	lsl.w	r3, r2, r3
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	4313      	orrs	r3, r2
 800d240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	69ba      	ldr	r2, [r7, #24]
 800d246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	f003 0303 	and.w	r3, r3, #3
 800d250:	2b03      	cmp	r3, #3
 800d252:	d017      	beq.n	800d284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	2203      	movs	r2, #3
 800d260:	fa02 f303 	lsl.w	r3, r2, r3
 800d264:	43db      	mvns	r3, r3
 800d266:	69ba      	ldr	r2, [r7, #24]
 800d268:	4013      	ands	r3, r2
 800d26a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	689a      	ldr	r2, [r3, #8]
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	fa02 f303 	lsl.w	r3, r2, r3
 800d278:	69ba      	ldr	r2, [r7, #24]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	69ba      	ldr	r2, [r7, #24]
 800d282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f003 0303 	and.w	r3, r3, #3
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d123      	bne.n	800d2d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	08da      	lsrs	r2, r3, #3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3208      	adds	r2, #8
 800d298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d29c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	f003 0307 	and.w	r3, r3, #7
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	220f      	movs	r2, #15
 800d2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ac:	43db      	mvns	r3, r3
 800d2ae:	69ba      	ldr	r2, [r7, #24]
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	691a      	ldr	r2, [r3, #16]
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	f003 0307 	and.w	r3, r3, #7
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c4:	69ba      	ldr	r2, [r7, #24]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	08da      	lsrs	r2, r3, #3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3208      	adds	r2, #8
 800d2d2:	69b9      	ldr	r1, [r7, #24]
 800d2d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	2203      	movs	r2, #3
 800d2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e8:	43db      	mvns	r3, r3
 800d2ea:	69ba      	ldr	r2, [r7, #24]
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	f003 0203 	and.w	r2, r3, #3
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d300:	69ba      	ldr	r2, [r7, #24]
 800d302:	4313      	orrs	r3, r2
 800d304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	69ba      	ldr	r2, [r7, #24]
 800d30a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d314:	2b00      	cmp	r3, #0
 800d316:	f000 80b4 	beq.w	800d482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d31a:	2300      	movs	r3, #0
 800d31c:	60fb      	str	r3, [r7, #12]
 800d31e:	4b60      	ldr	r3, [pc, #384]	; (800d4a0 <HAL_GPIO_Init+0x30c>)
 800d320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d322:	4a5f      	ldr	r2, [pc, #380]	; (800d4a0 <HAL_GPIO_Init+0x30c>)
 800d324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d328:	6453      	str	r3, [r2, #68]	; 0x44
 800d32a:	4b5d      	ldr	r3, [pc, #372]	; (800d4a0 <HAL_GPIO_Init+0x30c>)
 800d32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d336:	4a5b      	ldr	r2, [pc, #364]	; (800d4a4 <HAL_GPIO_Init+0x310>)
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	089b      	lsrs	r3, r3, #2
 800d33c:	3302      	adds	r3, #2
 800d33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	f003 0303 	and.w	r3, r3, #3
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	220f      	movs	r2, #15
 800d34e:	fa02 f303 	lsl.w	r3, r2, r3
 800d352:	43db      	mvns	r3, r3
 800d354:	69ba      	ldr	r2, [r7, #24]
 800d356:	4013      	ands	r3, r2
 800d358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a52      	ldr	r2, [pc, #328]	; (800d4a8 <HAL_GPIO_Init+0x314>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d02b      	beq.n	800d3ba <HAL_GPIO_Init+0x226>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a51      	ldr	r2, [pc, #324]	; (800d4ac <HAL_GPIO_Init+0x318>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d025      	beq.n	800d3b6 <HAL_GPIO_Init+0x222>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a50      	ldr	r2, [pc, #320]	; (800d4b0 <HAL_GPIO_Init+0x31c>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d01f      	beq.n	800d3b2 <HAL_GPIO_Init+0x21e>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a4f      	ldr	r2, [pc, #316]	; (800d4b4 <HAL_GPIO_Init+0x320>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d019      	beq.n	800d3ae <HAL_GPIO_Init+0x21a>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a4e      	ldr	r2, [pc, #312]	; (800d4b8 <HAL_GPIO_Init+0x324>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d013      	beq.n	800d3aa <HAL_GPIO_Init+0x216>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a4d      	ldr	r2, [pc, #308]	; (800d4bc <HAL_GPIO_Init+0x328>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d00d      	beq.n	800d3a6 <HAL_GPIO_Init+0x212>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4a4c      	ldr	r2, [pc, #304]	; (800d4c0 <HAL_GPIO_Init+0x32c>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d007      	beq.n	800d3a2 <HAL_GPIO_Init+0x20e>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a4b      	ldr	r2, [pc, #300]	; (800d4c4 <HAL_GPIO_Init+0x330>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d101      	bne.n	800d39e <HAL_GPIO_Init+0x20a>
 800d39a:	2307      	movs	r3, #7
 800d39c:	e00e      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d39e:	2308      	movs	r3, #8
 800d3a0:	e00c      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d3a2:	2306      	movs	r3, #6
 800d3a4:	e00a      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d3a6:	2305      	movs	r3, #5
 800d3a8:	e008      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d3aa:	2304      	movs	r3, #4
 800d3ac:	e006      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	e004      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	e002      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <HAL_GPIO_Init+0x228>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	69fa      	ldr	r2, [r7, #28]
 800d3be:	f002 0203 	and.w	r2, r2, #3
 800d3c2:	0092      	lsls	r2, r2, #2
 800d3c4:	4093      	lsls	r3, r2
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d3cc:	4935      	ldr	r1, [pc, #212]	; (800d4a4 <HAL_GPIO_Init+0x310>)
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	089b      	lsrs	r3, r3, #2
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	69ba      	ldr	r2, [r7, #24]
 800d3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d3da:	4b3b      	ldr	r3, [pc, #236]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	43db      	mvns	r3, r3
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d3f6:	69ba      	ldr	r2, [r7, #24]
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d3fe:	4a32      	ldr	r2, [pc, #200]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d404:	4b30      	ldr	r3, [pc, #192]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	43db      	mvns	r3, r3
 800d40e:	69ba      	ldr	r2, [r7, #24]
 800d410:	4013      	ands	r3, r2
 800d412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d003      	beq.n	800d428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d420:	69ba      	ldr	r2, [r7, #24]
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	4313      	orrs	r3, r2
 800d426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d428:	4a27      	ldr	r2, [pc, #156]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d42e:	4b26      	ldr	r3, [pc, #152]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	43db      	mvns	r3, r3
 800d438:	69ba      	ldr	r2, [r7, #24]
 800d43a:	4013      	ands	r3, r2
 800d43c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d44a:	69ba      	ldr	r2, [r7, #24]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	4313      	orrs	r3, r2
 800d450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d452:	4a1d      	ldr	r2, [pc, #116]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d458:	4b1b      	ldr	r3, [pc, #108]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	43db      	mvns	r3, r3
 800d462:	69ba      	ldr	r2, [r7, #24]
 800d464:	4013      	ands	r3, r2
 800d466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d474:	69ba      	ldr	r2, [r7, #24]
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	4313      	orrs	r3, r2
 800d47a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d47c:	4a12      	ldr	r2, [pc, #72]	; (800d4c8 <HAL_GPIO_Init+0x334>)
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	3301      	adds	r3, #1
 800d486:	61fb      	str	r3, [r7, #28]
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	2b0f      	cmp	r3, #15
 800d48c:	f67f ae90 	bls.w	800d1b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d490:	bf00      	nop
 800d492:	bf00      	nop
 800d494:	3724      	adds	r7, #36	; 0x24
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	40023800 	.word	0x40023800
 800d4a4:	40013800 	.word	0x40013800
 800d4a8:	40020000 	.word	0x40020000
 800d4ac:	40020400 	.word	0x40020400
 800d4b0:	40020800 	.word	0x40020800
 800d4b4:	40020c00 	.word	0x40020c00
 800d4b8:	40021000 	.word	0x40021000
 800d4bc:	40021400 	.word	0x40021400
 800d4c0:	40021800 	.word	0x40021800
 800d4c4:	40021c00 	.word	0x40021c00
 800d4c8:	40013c00 	.word	0x40013c00

0800d4cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	807b      	strh	r3, [r7, #2]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d4dc:	787b      	ldrb	r3, [r7, #1]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d4e2:	887a      	ldrh	r2, [r7, #2]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d4e8:	e003      	b.n	800d4f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d4ea:	887b      	ldrh	r3, [r7, #2]
 800d4ec:	041a      	lsls	r2, r3, #16
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	619a      	str	r2, [r3, #24]
}
 800d4f2:	bf00      	nop
 800d4f4:	370c      	adds	r7, #12
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
	...

0800d500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d50a:	4b08      	ldr	r3, [pc, #32]	; (800d52c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d50c:	695a      	ldr	r2, [r3, #20]
 800d50e:	88fb      	ldrh	r3, [r7, #6]
 800d510:	4013      	ands	r3, r2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d006      	beq.n	800d524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d516:	4a05      	ldr	r2, [pc, #20]	; (800d52c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d518:	88fb      	ldrh	r3, [r7, #6]
 800d51a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d51c:	88fb      	ldrh	r3, [r7, #6]
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f4 fd2c 	bl	8001f7c <HAL_GPIO_EXTI_Callback>
  }
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	40013c00 	.word	0x40013c00

0800d530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	e12b      	b.n	800d79a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d106      	bne.n	800d55c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7f6 f956 	bl	8003808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2224      	movs	r2, #36	; 0x24
 800d560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0201 	bic.w	r2, r2, #1
 800d572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d594:	f003 fc0c 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 800d598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	4a81      	ldr	r2, [pc, #516]	; (800d7a4 <HAL_I2C_Init+0x274>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d807      	bhi.n	800d5b4 <HAL_I2C_Init+0x84>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	4a80      	ldr	r2, [pc, #512]	; (800d7a8 <HAL_I2C_Init+0x278>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	bf94      	ite	ls
 800d5ac:	2301      	movls	r3, #1
 800d5ae:	2300      	movhi	r3, #0
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	e006      	b.n	800d5c2 <HAL_I2C_Init+0x92>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	4a7d      	ldr	r2, [pc, #500]	; (800d7ac <HAL_I2C_Init+0x27c>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	bf94      	ite	ls
 800d5bc:	2301      	movls	r3, #1
 800d5be:	2300      	movhi	r3, #0
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e0e7      	b.n	800d79a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	4a78      	ldr	r2, [pc, #480]	; (800d7b0 <HAL_I2C_Init+0x280>)
 800d5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d5d2:	0c9b      	lsrs	r3, r3, #18
 800d5d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	4a6a      	ldr	r2, [pc, #424]	; (800d7a4 <HAL_I2C_Init+0x274>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d802      	bhi.n	800d604 <HAL_I2C_Init+0xd4>
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	3301      	adds	r3, #1
 800d602:	e009      	b.n	800d618 <HAL_I2C_Init+0xe8>
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d60a:	fb02 f303 	mul.w	r3, r2, r3
 800d60e:	4a69      	ldr	r2, [pc, #420]	; (800d7b4 <HAL_I2C_Init+0x284>)
 800d610:	fba2 2303 	umull	r2, r3, r2, r3
 800d614:	099b      	lsrs	r3, r3, #6
 800d616:	3301      	adds	r3, #1
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	6812      	ldr	r2, [r2, #0]
 800d61c:	430b      	orrs	r3, r1
 800d61e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	69db      	ldr	r3, [r3, #28]
 800d626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d62a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	495c      	ldr	r1, [pc, #368]	; (800d7a4 <HAL_I2C_Init+0x274>)
 800d634:	428b      	cmp	r3, r1
 800d636:	d819      	bhi.n	800d66c <HAL_I2C_Init+0x13c>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	1e59      	subs	r1, r3, #1
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	fbb1 f3f3 	udiv	r3, r1, r3
 800d646:	1c59      	adds	r1, r3, #1
 800d648:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d64c:	400b      	ands	r3, r1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00a      	beq.n	800d668 <HAL_I2C_Init+0x138>
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	1e59      	subs	r1, r3, #1
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	fbb1 f3f3 	udiv	r3, r1, r3
 800d660:	3301      	adds	r3, #1
 800d662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d666:	e051      	b.n	800d70c <HAL_I2C_Init+0x1dc>
 800d668:	2304      	movs	r3, #4
 800d66a:	e04f      	b.n	800d70c <HAL_I2C_Init+0x1dc>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d111      	bne.n	800d698 <HAL_I2C_Init+0x168>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	1e58      	subs	r0, r3, #1
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6859      	ldr	r1, [r3, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	440b      	add	r3, r1
 800d682:	fbb0 f3f3 	udiv	r3, r0, r3
 800d686:	3301      	adds	r3, #1
 800d688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	bf0c      	ite	eq
 800d690:	2301      	moveq	r3, #1
 800d692:	2300      	movne	r3, #0
 800d694:	b2db      	uxtb	r3, r3
 800d696:	e012      	b.n	800d6be <HAL_I2C_Init+0x18e>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	1e58      	subs	r0, r3, #1
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6859      	ldr	r1, [r3, #4]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	440b      	add	r3, r1
 800d6a6:	0099      	lsls	r1, r3, #2
 800d6a8:	440b      	add	r3, r1
 800d6aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	bf0c      	ite	eq
 800d6b8:	2301      	moveq	r3, #1
 800d6ba:	2300      	movne	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <HAL_I2C_Init+0x196>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e022      	b.n	800d70c <HAL_I2C_Init+0x1dc>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10e      	bne.n	800d6ec <HAL_I2C_Init+0x1bc>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	1e58      	subs	r0, r3, #1
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6859      	ldr	r1, [r3, #4]
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	440b      	add	r3, r1
 800d6dc:	fbb0 f3f3 	udiv	r3, r0, r3
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6ea:	e00f      	b.n	800d70c <HAL_I2C_Init+0x1dc>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	1e58      	subs	r0, r3, #1
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6859      	ldr	r1, [r3, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	440b      	add	r3, r1
 800d6fa:	0099      	lsls	r1, r3, #2
 800d6fc:	440b      	add	r3, r1
 800d6fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800d702:	3301      	adds	r3, #1
 800d704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	6809      	ldr	r1, [r1, #0]
 800d710:	4313      	orrs	r3, r2
 800d712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	69da      	ldr	r2, [r3, #28]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6a1b      	ldr	r3, [r3, #32]
 800d726:	431a      	orrs	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	430a      	orrs	r2, r1
 800d72e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d73a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	6911      	ldr	r1, [r2, #16]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	68d2      	ldr	r2, [r2, #12]
 800d746:	4311      	orrs	r1, r2
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	6812      	ldr	r2, [r2, #0]
 800d74c:	430b      	orrs	r3, r1
 800d74e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	695a      	ldr	r2, [r3, #20]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	431a      	orrs	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	430a      	orrs	r2, r1
 800d76a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f042 0201 	orr.w	r2, r2, #1
 800d77a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2220      	movs	r2, #32
 800d786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	000186a0 	.word	0x000186a0
 800d7a8:	001e847f 	.word	0x001e847f
 800d7ac:	003d08ff 	.word	0x003d08ff
 800d7b0:	431bde83 	.word	0x431bde83
 800d7b4:	10624dd3 	.word	0x10624dd3

0800d7b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af02      	add	r7, sp, #8
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	4608      	mov	r0, r1
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	817b      	strh	r3, [r7, #10]
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	813b      	strh	r3, [r7, #8]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d7d2:	f7fd fedd 	bl	800b590 <HAL_GetTick>
 800d7d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	2b20      	cmp	r3, #32
 800d7e2:	f040 80d9 	bne.w	800d998 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	2319      	movs	r3, #25
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	496d      	ldr	r1, [pc, #436]	; (800d9a4 <HAL_I2C_Mem_Write+0x1ec>)
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f001 fa53 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d7fc:	2302      	movs	r3, #2
 800d7fe:	e0cc      	b.n	800d99a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d806:	2b01      	cmp	r3, #1
 800d808:	d101      	bne.n	800d80e <HAL_I2C_Mem_Write+0x56>
 800d80a:	2302      	movs	r3, #2
 800d80c:	e0c5      	b.n	800d99a <HAL_I2C_Mem_Write+0x1e2>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b01      	cmp	r3, #1
 800d822:	d007      	beq.n	800d834 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f042 0201 	orr.w	r2, r2, #1
 800d832:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d842:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2221      	movs	r2, #33	; 0x21
 800d848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2240      	movs	r2, #64	; 0x40
 800d850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6a3a      	ldr	r2, [r7, #32]
 800d85e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d864:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	4a4d      	ldr	r2, [pc, #308]	; (800d9a8 <HAL_I2C_Mem_Write+0x1f0>)
 800d874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d876:	88f8      	ldrh	r0, [r7, #6]
 800d878:	893a      	ldrh	r2, [r7, #8]
 800d87a:	8979      	ldrh	r1, [r7, #10]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	9301      	str	r3, [sp, #4]
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	4603      	mov	r3, r0
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 fed0 	bl	800e62c <I2C_RequestMemoryWrite>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d052      	beq.n	800d938 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d892:	2301      	movs	r3, #1
 800d894:	e081      	b.n	800d99a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	f001 fad4 	bl	800ee48 <I2C_WaitOnTXEFlagUntilTimeout>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00d      	beq.n	800d8c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8aa:	2b04      	cmp	r3, #4
 800d8ac:	d107      	bne.n	800d8be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e06b      	b.n	800d99a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c6:	781a      	ldrb	r2, [r3, #0]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	f003 0304 	and.w	r3, r3, #4
 800d8fc:	2b04      	cmp	r3, #4
 800d8fe:	d11b      	bne.n	800d938 <HAL_I2C_Mem_Write+0x180>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d904:	2b00      	cmp	r3, #0
 800d906:	d017      	beq.n	800d938 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90c:	781a      	ldrb	r2, [r3, #0]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d918:	1c5a      	adds	r2, r3, #1
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d922:	3b01      	subs	r3, #1
 800d924:	b29a      	uxth	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d92e:	b29b      	uxth	r3, r3
 800d930:	3b01      	subs	r3, #1
 800d932:	b29a      	uxth	r2, r3
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1aa      	bne.n	800d896 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f001 fac0 	bl	800eeca <I2C_WaitOnBTFFlagUntilTimeout>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00d      	beq.n	800d96c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d954:	2b04      	cmp	r3, #4
 800d956:	d107      	bne.n	800d968 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d966:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	e016      	b.n	800d99a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d97a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2220      	movs	r2, #32
 800d980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d994:	2300      	movs	r3, #0
 800d996:	e000      	b.n	800d99a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d998:	2302      	movs	r3, #2
  }
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3718      	adds	r7, #24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	00100002 	.word	0x00100002
 800d9a8:	ffff0000 	.word	0xffff0000

0800d9ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08c      	sub	sp, #48	; 0x30
 800d9b0:	af02      	add	r7, sp, #8
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	817b      	strh	r3, [r7, #10]
 800d9be:	460b      	mov	r3, r1
 800d9c0:	813b      	strh	r3, [r7, #8]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d9c6:	f7fd fde3 	bl	800b590 <HAL_GetTick>
 800d9ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	2b20      	cmp	r3, #32
 800d9d6:	f040 8208 	bne.w	800ddea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	9300      	str	r3, [sp, #0]
 800d9de:	2319      	movs	r3, #25
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	497b      	ldr	r1, [pc, #492]	; (800dbd0 <HAL_I2C_Mem_Read+0x224>)
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f001 f959 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	e1fb      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d101      	bne.n	800da02 <HAL_I2C_Mem_Read+0x56>
 800d9fe:	2302      	movs	r3, #2
 800da00:	e1f4      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2201      	movs	r2, #1
 800da06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	2b01      	cmp	r3, #1
 800da16:	d007      	beq.n	800da28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f042 0201 	orr.w	r2, r2, #1
 800da26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2222      	movs	r2, #34	; 0x22
 800da3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2240      	movs	r2, #64	; 0x40
 800da44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800da58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da5e:	b29a      	uxth	r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4a5b      	ldr	r2, [pc, #364]	; (800dbd4 <HAL_I2C_Mem_Read+0x228>)
 800da68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800da6a:	88f8      	ldrh	r0, [r7, #6]
 800da6c:	893a      	ldrh	r2, [r7, #8]
 800da6e:	8979      	ldrh	r1, [r7, #10]
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	4603      	mov	r3, r0
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f000 fe6c 	bl	800e758 <I2C_RequestMemoryRead>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800da86:	2301      	movs	r3, #1
 800da88:	e1b0      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d113      	bne.n	800daba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da92:	2300      	movs	r3, #0
 800da94:	623b      	str	r3, [r7, #32]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	623b      	str	r3, [r7, #32]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	623b      	str	r3, [r7, #32]
 800daa6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	e184      	b.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d11b      	bne.n	800dafa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dad2:	2300      	movs	r3, #0
 800dad4:	61fb      	str	r3, [r7, #28]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	695b      	ldr	r3, [r3, #20]
 800dadc:	61fb      	str	r3, [r7, #28]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	61fb      	str	r3, [r7, #28]
 800dae6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	e164      	b.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d11b      	bne.n	800db3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db22:	2300      	movs	r3, #0
 800db24:	61bb      	str	r3, [r7, #24]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	695b      	ldr	r3, [r3, #20]
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	699b      	ldr	r3, [r3, #24]
 800db34:	61bb      	str	r3, [r7, #24]
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	e144      	b.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db3a:	2300      	movs	r3, #0
 800db3c:	617b      	str	r3, [r7, #20]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	617b      	str	r3, [r7, #20]
 800db4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800db50:	e138      	b.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db56:	2b03      	cmp	r3, #3
 800db58:	f200 80f1 	bhi.w	800dd3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db60:	2b01      	cmp	r3, #1
 800db62:	d123      	bne.n	800dbac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f001 f9ef 	bl	800ef4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800db74:	2301      	movs	r3, #1
 800db76:	e139      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	691a      	ldr	r2, [r3, #16]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db82:	b2d2      	uxtb	r2, r2
 800db84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8a:	1c5a      	adds	r2, r3, #1
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db94:	3b01      	subs	r3, #1
 800db96:	b29a      	uxth	r2, r3
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	3b01      	subs	r3, #1
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dbaa:	e10b      	b.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d14e      	bne.n	800dc52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbba:	2200      	movs	r2, #0
 800dbbc:	4906      	ldr	r1, [pc, #24]	; (800dbd8 <HAL_I2C_Mem_Read+0x22c>)
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f001 f86c 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d008      	beq.n	800dbdc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e10e      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
 800dbce:	bf00      	nop
 800dbd0:	00100002 	.word	0x00100002
 800dbd4:	ffff0000 	.word	0xffff0000
 800dbd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	691a      	ldr	r2, [r3, #16]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf6:	b2d2      	uxtb	r2, r2
 800dbf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfe:	1c5a      	adds	r2, r3, #1
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	3b01      	subs	r3, #1
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	691a      	ldr	r2, [r3, #16]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	b2d2      	uxtb	r2, r2
 800dc2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dc50:	e0b8      	b.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	2200      	movs	r2, #0
 800dc5a:	4966      	ldr	r1, [pc, #408]	; (800ddf4 <HAL_I2C_Mem_Read+0x448>)
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f001 f81d 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e0bf      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	691a      	ldr	r2, [r3, #16]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc98:	3b01      	subs	r3, #1
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	3b01      	subs	r3, #1
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	494f      	ldr	r1, [pc, #316]	; (800ddf4 <HAL_I2C_Mem_Read+0x448>)
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f000 ffef 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d001      	beq.n	800dcc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e091      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	691a      	ldr	r2, [r3, #16]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	b2d2      	uxtb	r2, r2
 800dce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	3b01      	subs	r3, #1
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	691a      	ldr	r2, [r3, #16]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd14:	b2d2      	uxtb	r2, r2
 800dd16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1c:	1c5a      	adds	r2, r3, #1
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd26:	3b01      	subs	r3, #1
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	3b01      	subs	r3, #1
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd3c:	e042      	b.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f001 f902 	bl	800ef4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d001      	beq.n	800dd52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e04c      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	691a      	ldr	r2, [r3, #16]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5c:	b2d2      	uxtb	r2, r2
 800dd5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	3b01      	subs	r3, #1
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	f003 0304 	and.w	r3, r3, #4
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d118      	bne.n	800ddc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	691a      	ldr	r2, [r3, #16]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9c:	b2d2      	uxtb	r2, r2
 800dd9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda4:	1c5a      	adds	r2, r3, #1
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f47f aec2 	bne.w	800db52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2220      	movs	r2, #32
 800ddd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	e000      	b.n	800ddec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ddea:	2302      	movs	r3, #2
  }
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3728      	adds	r7, #40	; 0x28
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	00010004 	.word	0x00010004

0800ddf8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b08c      	sub	sp, #48	; 0x30
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	4608      	mov	r0, r1
 800de02:	4611      	mov	r1, r2
 800de04:	461a      	mov	r2, r3
 800de06:	4603      	mov	r3, r0
 800de08:	817b      	strh	r3, [r7, #10]
 800de0a:	460b      	mov	r3, r1
 800de0c:	813b      	strh	r3, [r7, #8]
 800de0e:	4613      	mov	r3, r2
 800de10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800de12:	f7fd fbbd 	bl	800b590 <HAL_GetTick>
 800de16:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800de18:	2300      	movs	r3, #0
 800de1a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de22:	b2db      	uxtb	r3, r3
 800de24:	2b20      	cmp	r3, #32
 800de26:	f040 8176 	bne.w	800e116 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800de2a:	4b95      	ldr	r3, [pc, #596]	; (800e080 <HAL_I2C_Mem_Read_DMA+0x288>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	08db      	lsrs	r3, r3, #3
 800de30:	4a94      	ldr	r2, [pc, #592]	; (800e084 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800de32:	fba2 2303 	umull	r2, r3, r2, r3
 800de36:	0a1a      	lsrs	r2, r3, #8
 800de38:	4613      	mov	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	009a      	lsls	r2, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	3b01      	subs	r3, #1
 800de48:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d116      	bne.n	800de7e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2200      	movs	r2, #0
 800de54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2220      	movs	r2, #32
 800de5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de6a:	f043 0220 	orr.w	r2, r3, #32
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	e14c      	b.n	800e118 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	699b      	ldr	r3, [r3, #24]
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d0db      	beq.n	800de44 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de92:	2b01      	cmp	r3, #1
 800de94:	d101      	bne.n	800de9a <HAL_I2C_Mem_Read_DMA+0xa2>
 800de96:	2302      	movs	r3, #2
 800de98:	e13e      	b.n	800e118 <HAL_I2C_Mem_Read_DMA+0x320>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b01      	cmp	r3, #1
 800deae:	d007      	beq.n	800dec0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f042 0201 	orr.w	r2, r2, #1
 800debe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2222      	movs	r2, #34	; 0x22
 800ded4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2240      	movs	r2, #64	; 0x40
 800dedc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800def0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800def6:	b29a      	uxth	r2, r3
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	4a62      	ldr	r2, [pc, #392]	; (800e088 <HAL_I2C_Mem_Read_DMA+0x290>)
 800df00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800df02:	897a      	ldrh	r2, [r7, #10]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800df08:	893a      	ldrh	r2, [r7, #8]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800df0e:	88fa      	ldrh	r2, [r7, #6]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2200      	movs	r2, #0
 800df18:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f000 80cc 	beq.w	800e0bc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d02d      	beq.n	800df88 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df30:	4a56      	ldr	r2, [pc, #344]	; (800e08c <HAL_I2C_Mem_Read_DMA+0x294>)
 800df32:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df38:	4a55      	ldr	r2, [pc, #340]	; (800e090 <HAL_I2C_Mem_Read_DMA+0x298>)
 800df3a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df40:	2200      	movs	r2, #0
 800df42:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df48:	2200      	movs	r2, #0
 800df4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	2200      	movs	r2, #0
 800df52:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df58:	2200      	movs	r2, #0
 800df5a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	3310      	adds	r3, #16
 800df66:	4619      	mov	r1, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6c:	461a      	mov	r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df72:	f7fe fdaf 	bl	800cad4 <HAL_DMA_Start_IT>
 800df76:	4603      	mov	r3, r0
 800df78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800df7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df80:	2b00      	cmp	r3, #0
 800df82:	f040 8087 	bne.w	800e094 <HAL_I2C_Mem_Read_DMA+0x29c>
 800df86:	e013      	b.n	800dfb0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2220      	movs	r2, #32
 800df8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	e0b3      	b.n	800e118 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800dfb0:	88f8      	ldrh	r0, [r7, #6]
 800dfb2:	893a      	ldrh	r2, [r7, #8]
 800dfb4:	8979      	ldrh	r1, [r7, #10]
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	9301      	str	r3, [sp, #4]
 800dfba:	2323      	movs	r3, #35	; 0x23
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f000 fbc9 	bl	800e758 <I2C_RequestMemoryRead>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d023      	beq.n	800e014 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fe47 	bl	800cc64 <HAL_DMA_Abort_IT>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dff2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2200      	movs	r2, #0
 800dff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f022 0201 	bic.w	r2, r2, #1
 800e00e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800e010:	2301      	movs	r3, #1
 800e012:	e081      	b.n	800e118 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d108      	bne.n	800e02e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	e007      	b.n	800e03e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e03c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e03e:	2300      	movs	r3, #0
 800e040:	61bb      	str	r3, [r7, #24]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	695b      	ldr	r3, [r3, #20]
 800e048:	61bb      	str	r3, [r7, #24]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	61bb      	str	r3, [r7, #24]
 800e052:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2200      	movs	r2, #0
 800e058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e06a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e07a:	605a      	str	r2, [r3, #4]
 800e07c:	e049      	b.n	800e112 <HAL_I2C_Mem_Read_DMA+0x31a>
 800e07e:	bf00      	nop
 800e080:	20000004 	.word	0x20000004
 800e084:	14f8b589 	.word	0x14f8b589
 800e088:	ffff0000 	.word	0xffff0000
 800e08c:	0800e929 	.word	0x0800e929
 800e090:	0800ead3 	.word	0x0800ead3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2220      	movs	r2, #32
 800e098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0a8:	f043 0210 	orr.w	r2, r3, #16
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e02d      	b.n	800e118 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800e0bc:	88f8      	ldrh	r0, [r7, #6]
 800e0be:	893a      	ldrh	r2, [r7, #8]
 800e0c0:	8979      	ldrh	r1, [r7, #10]
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c4:	9301      	str	r3, [sp, #4]
 800e0c6:	2323      	movs	r3, #35	; 0x23
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f000 fb43 	bl	800e758 <I2C_RequestMemoryRead>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e01d      	b.n	800e118 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e0dc:	2300      	movs	r3, #0
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	617b      	str	r3, [r7, #20]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	699b      	ldr	r3, [r3, #24]
 800e0ee:	617b      	str	r3, [r7, #20]
 800e0f0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e100:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2220      	movs	r2, #32
 800e106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800e112:	2300      	movs	r3, #0
 800e114:	e000      	b.n	800e118 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800e116:	2302      	movs	r3, #2
  }
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3728      	adds	r7, #40	; 0x28
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b08a      	sub	sp, #40	; 0x28
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	695b      	ldr	r3, [r3, #20]
 800e12e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800e138:	2300      	movs	r3, #0
 800e13a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e142:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800e144:	6a3b      	ldr	r3, [r7, #32]
 800e146:	0a1b      	lsrs	r3, r3, #8
 800e148:	f003 0301 	and.w	r3, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00e      	beq.n	800e16e <HAL_I2C_ER_IRQHandler+0x4e>
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	0a1b      	lsrs	r3, r3, #8
 800e154:	f003 0301 	and.w	r3, r3, #1
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d008      	beq.n	800e16e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	f043 0301 	orr.w	r3, r3, #1
 800e162:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e16c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800e16e:	6a3b      	ldr	r3, [r7, #32]
 800e170:	0a5b      	lsrs	r3, r3, #9
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00e      	beq.n	800e198 <HAL_I2C_ER_IRQHandler+0x78>
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	0a1b      	lsrs	r3, r3, #8
 800e17e:	f003 0301 	and.w	r3, r3, #1
 800e182:	2b00      	cmp	r3, #0
 800e184:	d008      	beq.n	800e198 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	f043 0302 	orr.w	r3, r3, #2
 800e18c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800e196:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800e198:	6a3b      	ldr	r3, [r7, #32]
 800e19a:	0a9b      	lsrs	r3, r3, #10
 800e19c:	f003 0301 	and.w	r3, r3, #1
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d03f      	beq.n	800e224 <HAL_I2C_ER_IRQHandler+0x104>
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	0a1b      	lsrs	r3, r3, #8
 800e1a8:	f003 0301 	and.w	r3, r3, #1
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d039      	beq.n	800e224 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800e1b0:	7efb      	ldrb	r3, [r7, #27]
 800e1b2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1c2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1c8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800e1ca:	7ebb      	ldrb	r3, [r7, #26]
 800e1cc:	2b20      	cmp	r3, #32
 800e1ce:	d112      	bne.n	800e1f6 <HAL_I2C_ER_IRQHandler+0xd6>
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10f      	bne.n	800e1f6 <HAL_I2C_ER_IRQHandler+0xd6>
 800e1d6:	7cfb      	ldrb	r3, [r7, #19]
 800e1d8:	2b21      	cmp	r3, #33	; 0x21
 800e1da:	d008      	beq.n	800e1ee <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800e1dc:	7cfb      	ldrb	r3, [r7, #19]
 800e1de:	2b29      	cmp	r3, #41	; 0x29
 800e1e0:	d005      	beq.n	800e1ee <HAL_I2C_ER_IRQHandler+0xce>
 800e1e2:	7cfb      	ldrb	r3, [r7, #19]
 800e1e4:	2b28      	cmp	r3, #40	; 0x28
 800e1e6:	d106      	bne.n	800e1f6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b21      	cmp	r3, #33	; 0x21
 800e1ec:	d103      	bne.n	800e1f6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f87a 	bl	800e2e8 <I2C_Slave_AF>
 800e1f4:	e016      	b.n	800e224 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e1fe:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	f043 0304 	orr.w	r3, r3, #4
 800e206:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800e208:	7efb      	ldrb	r3, [r7, #27]
 800e20a:	2b10      	cmp	r3, #16
 800e20c:	d002      	beq.n	800e214 <HAL_I2C_ER_IRQHandler+0xf4>
 800e20e:	7efb      	ldrb	r3, [r7, #27]
 800e210:	2b40      	cmp	r3, #64	; 0x40
 800e212:	d107      	bne.n	800e224 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e222:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	0adb      	lsrs	r3, r3, #11
 800e228:	f003 0301 	and.w	r3, r3, #1
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00e      	beq.n	800e24e <HAL_I2C_ER_IRQHandler+0x12e>
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	0a1b      	lsrs	r3, r3, #8
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d008      	beq.n	800e24e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	f043 0308 	orr.w	r3, r3, #8
 800e242:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800e24c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800e24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e250:	2b00      	cmp	r3, #0
 800e252:	d008      	beq.n	800e266 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	431a      	orrs	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 f8b1 	bl	800e3c8 <I2C_ITError>
  }
}
 800e266:	bf00      	nop
 800e268:	3728      	adds	r7, #40	; 0x28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e26e:	b480      	push	{r7}
 800e270:	b083      	sub	sp, #12
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800e276:	bf00      	nop
 800e278:	370c      	adds	r7, #12
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e282:	b480      	push	{r7}
 800e284:	b083      	sub	sp, #12
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800e28a:	bf00      	nop
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e296:	b480      	push	{r7}
 800e298:	b083      	sub	sp, #12
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800e29e:	bf00      	nop
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	b083      	sub	sp, #12
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800e2b2:	bf00      	nop
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e2be:	b480      	push	{r7}
 800e2c0:	b083      	sub	sp, #12
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800e2c6:	bf00      	nop
 800e2c8:	370c      	adds	r7, #12
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr

0800e2d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e2d2:	b480      	push	{r7}
 800e2d4:	b083      	sub	sp, #12
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800e2da:	bf00      	nop
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
	...

0800e2e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b08      	cmp	r3, #8
 800e302:	d002      	beq.n	800e30a <I2C_Slave_AF+0x22>
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	2b20      	cmp	r3, #32
 800e308:	d129      	bne.n	800e35e <I2C_Slave_AF+0x76>
 800e30a:	7bfb      	ldrb	r3, [r7, #15]
 800e30c:	2b28      	cmp	r3, #40	; 0x28
 800e30e:	d126      	bne.n	800e35e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a2c      	ldr	r2, [pc, #176]	; (800e3c4 <I2C_Slave_AF+0xdc>)
 800e314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e324:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e32e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e33e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2220      	movs	r2, #32
 800e34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7ff ffa7 	bl	800e2aa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e35c:	e02e      	b.n	800e3bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
 800e360:	2b21      	cmp	r3, #33	; 0x21
 800e362:	d126      	bne.n	800e3b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4a17      	ldr	r2, [pc, #92]	; (800e3c4 <I2C_Slave_AF+0xdc>)
 800e368:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2221      	movs	r2, #33	; 0x21
 800e36e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2220      	movs	r2, #32
 800e374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	685a      	ldr	r2, [r3, #4]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e38e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e398:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7ff ff69 	bl	800e282 <HAL_I2C_SlaveTxCpltCallback>
}
 800e3b0:	e004      	b.n	800e3bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3ba:	615a      	str	r2, [r3, #20]
}
 800e3bc:	bf00      	nop
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	ffff0000 	.word	0xffff0000

0800e3c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e3de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e3e0:	7bbb      	ldrb	r3, [r7, #14]
 800e3e2:	2b10      	cmp	r3, #16
 800e3e4:	d002      	beq.n	800e3ec <I2C_ITError+0x24>
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
 800e3e8:	2b40      	cmp	r3, #64	; 0x40
 800e3ea:	d10a      	bne.n	800e402 <I2C_ITError+0x3a>
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	2b22      	cmp	r3, #34	; 0x22
 800e3f0:	d107      	bne.n	800e402 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e400:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e402:	7bfb      	ldrb	r3, [r7, #15]
 800e404:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e408:	2b28      	cmp	r3, #40	; 0x28
 800e40a:	d107      	bne.n	800e41c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2228      	movs	r2, #40	; 0x28
 800e416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e41a:	e015      	b.n	800e448 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e42a:	d00a      	beq.n	800e442 <I2C_ITError+0x7a>
 800e42c:	7bfb      	ldrb	r3, [r7, #15]
 800e42e:	2b60      	cmp	r3, #96	; 0x60
 800e430:	d007      	beq.n	800e442 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2220      	movs	r2, #32
 800e436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e456:	d162      	bne.n	800e51e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	685a      	ldr	r2, [r3, #4]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e466:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e46c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b01      	cmp	r3, #1
 800e474:	d020      	beq.n	800e4b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e47a:	4a6a      	ldr	r2, [pc, #424]	; (800e624 <I2C_ITError+0x25c>)
 800e47c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e482:	4618      	mov	r0, r3
 800e484:	f7fe fbee 	bl	800cc64 <HAL_DMA_Abort_IT>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f000 8089 	beq.w	800e5a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f022 0201 	bic.w	r2, r2, #1
 800e49e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2220      	movs	r2, #32
 800e4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	4798      	blx	r3
 800e4b6:	e074      	b.n	800e5a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4bc:	4a59      	ldr	r2, [pc, #356]	; (800e624 <I2C_ITError+0x25c>)
 800e4be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fe fbcd 	bl	800cc64 <HAL_DMA_Abort_IT>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d068      	beq.n	800e5a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	695b      	ldr	r3, [r3, #20]
 800e4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4da:	2b40      	cmp	r3, #64	; 0x40
 800e4dc:	d10b      	bne.n	800e4f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	691a      	ldr	r2, [r3, #16]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e8:	b2d2      	uxtb	r2, r2
 800e4ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f022 0201 	bic.w	r2, r2, #1
 800e504:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2220      	movs	r2, #32
 800e50a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e518:	4610      	mov	r0, r2
 800e51a:	4798      	blx	r3
 800e51c:	e041      	b.n	800e5a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e524:	b2db      	uxtb	r3, r3
 800e526:	2b60      	cmp	r3, #96	; 0x60
 800e528:	d125      	bne.n	800e576 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2220      	movs	r2, #32
 800e52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e542:	2b40      	cmp	r3, #64	; 0x40
 800e544:	d10b      	bne.n	800e55e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	691a      	ldr	r2, [r3, #16]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e550:	b2d2      	uxtb	r2, r2
 800e552:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f022 0201 	bic.w	r2, r2, #1
 800e56c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff feaf 	bl	800e2d2 <HAL_I2C_AbortCpltCallback>
 800e574:	e015      	b.n	800e5a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	695b      	ldr	r3, [r3, #20]
 800e57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e580:	2b40      	cmp	r3, #64	; 0x40
 800e582:	d10b      	bne.n	800e59c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	691a      	ldr	r2, [r3, #16]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58e:	b2d2      	uxtb	r2, r2
 800e590:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e596:	1c5a      	adds	r2, r3, #1
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff fe8e 	bl	800e2be <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	f003 0301 	and.w	r3, r3, #1
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10e      	bne.n	800e5d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d109      	bne.n	800e5d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d104      	bne.n	800e5d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d007      	beq.n	800e5e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e5de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b04      	cmp	r3, #4
 800e5f2:	d113      	bne.n	800e61c <I2C_ITError+0x254>
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
 800e5f6:	2b28      	cmp	r3, #40	; 0x28
 800e5f8:	d110      	bne.n	800e61c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	4a0a      	ldr	r2, [pc, #40]	; (800e628 <I2C_ITError+0x260>)
 800e5fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2220      	movs	r2, #32
 800e60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f7ff fe47 	bl	800e2aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e61c:	bf00      	nop
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	0800eb4d 	.word	0x0800eb4d
 800e628:	ffff0000 	.word	0xffff0000

0800e62c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af02      	add	r7, sp, #8
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	4608      	mov	r0, r1
 800e636:	4611      	mov	r1, r2
 800e638:	461a      	mov	r2, r3
 800e63a:	4603      	mov	r3, r0
 800e63c:	817b      	strh	r3, [r7, #10]
 800e63e:	460b      	mov	r3, r1
 800e640:	813b      	strh	r3, [r7, #8]
 800e642:	4613      	mov	r3, r2
 800e644:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	6a3b      	ldr	r3, [r7, #32]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f000 fb1a 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00d      	beq.n	800e68a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e67c:	d103      	bne.n	800e686 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e686:	2303      	movs	r3, #3
 800e688:	e05f      	b.n	800e74a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e68a:	897b      	ldrh	r3, [r7, #10]
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	461a      	mov	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	6a3a      	ldr	r2, [r7, #32]
 800e69e:	492d      	ldr	r1, [pc, #180]	; (800e754 <I2C_RequestMemoryWrite+0x128>)
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f000 fb52 	bl	800ed4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d001      	beq.n	800e6b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e04c      	b.n	800e74a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	617b      	str	r3, [r7, #20]
 800e6c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c8:	6a39      	ldr	r1, [r7, #32]
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f000 fbbc 	bl	800ee48 <I2C_WaitOnTXEFlagUntilTimeout>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00d      	beq.n	800e6f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6da:	2b04      	cmp	r3, #4
 800e6dc:	d107      	bne.n	800e6ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e02b      	b.n	800e74a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e6f2:	88fb      	ldrh	r3, [r7, #6]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d105      	bne.n	800e704 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e6f8:	893b      	ldrh	r3, [r7, #8]
 800e6fa:	b2da      	uxtb	r2, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	611a      	str	r2, [r3, #16]
 800e702:	e021      	b.n	800e748 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e704:	893b      	ldrh	r3, [r7, #8]
 800e706:	0a1b      	lsrs	r3, r3, #8
 800e708:	b29b      	uxth	r3, r3
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e714:	6a39      	ldr	r1, [r7, #32]
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f000 fb96 	bl	800ee48 <I2C_WaitOnTXEFlagUntilTimeout>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00d      	beq.n	800e73e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e726:	2b04      	cmp	r3, #4
 800e728:	d107      	bne.n	800e73a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e73a:	2301      	movs	r3, #1
 800e73c:	e005      	b.n	800e74a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e73e:	893b      	ldrh	r3, [r7, #8]
 800e740:	b2da      	uxtb	r2, r3
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3718      	adds	r7, #24
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	00010002 	.word	0x00010002

0800e758 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b088      	sub	sp, #32
 800e75c:	af02      	add	r7, sp, #8
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	4608      	mov	r0, r1
 800e762:	4611      	mov	r1, r2
 800e764:	461a      	mov	r2, r3
 800e766:	4603      	mov	r3, r0
 800e768:	817b      	strh	r3, [r7, #10]
 800e76a:	460b      	mov	r3, r1
 800e76c:	813b      	strh	r3, [r7, #8]
 800e76e:	4613      	mov	r3, r2
 800e770:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e780:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	2200      	movs	r2, #0
 800e79a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f000 fa7c 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00d      	beq.n	800e7c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7b8:	d103      	bne.n	800e7c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	e0aa      	b.n	800e91c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e7c6:	897b      	ldrh	r3, [r7, #10]
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e7d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	6a3a      	ldr	r2, [r7, #32]
 800e7da:	4952      	ldr	r1, [pc, #328]	; (800e924 <I2C_RequestMemoryRead+0x1cc>)
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 fab4 	bl	800ed4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e097      	b.n	800e91c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	617b      	str	r3, [r7, #20]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	695b      	ldr	r3, [r3, #20]
 800e7f6:	617b      	str	r3, [r7, #20]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	699b      	ldr	r3, [r3, #24]
 800e7fe:	617b      	str	r3, [r7, #20]
 800e800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e804:	6a39      	ldr	r1, [r7, #32]
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f000 fb1e 	bl	800ee48 <I2C_WaitOnTXEFlagUntilTimeout>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00d      	beq.n	800e82e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e816:	2b04      	cmp	r3, #4
 800e818:	d107      	bne.n	800e82a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e076      	b.n	800e91c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e82e:	88fb      	ldrh	r3, [r7, #6]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d105      	bne.n	800e840 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e834:	893b      	ldrh	r3, [r7, #8]
 800e836:	b2da      	uxtb	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	611a      	str	r2, [r3, #16]
 800e83e:	e021      	b.n	800e884 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e840:	893b      	ldrh	r3, [r7, #8]
 800e842:	0a1b      	lsrs	r3, r3, #8
 800e844:	b29b      	uxth	r3, r3
 800e846:	b2da      	uxtb	r2, r3
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e850:	6a39      	ldr	r1, [r7, #32]
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f000 faf8 	bl	800ee48 <I2C_WaitOnTXEFlagUntilTimeout>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00d      	beq.n	800e87a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e862:	2b04      	cmp	r3, #4
 800e864:	d107      	bne.n	800e876 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	e050      	b.n	800e91c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e87a:	893b      	ldrh	r3, [r7, #8]
 800e87c:	b2da      	uxtb	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e886:	6a39      	ldr	r1, [r7, #32]
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f000 fadd 	bl	800ee48 <I2C_WaitOnTXEFlagUntilTimeout>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00d      	beq.n	800e8b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e898:	2b04      	cmp	r3, #4
 800e89a:	d107      	bne.n	800e8ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e035      	b.n	800e91c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e8be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f000 f9e5 	bl	800ec9c <I2C_WaitOnFlagUntilTimeout>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00d      	beq.n	800e8f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8e6:	d103      	bne.n	800e8f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	e013      	b.n	800e91c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e8f4:	897b      	ldrh	r3, [r7, #10]
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	f043 0301 	orr.w	r3, r3, #1
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e906:	6a3a      	ldr	r2, [r7, #32]
 800e908:	4906      	ldr	r1, [pc, #24]	; (800e924 <I2C_RequestMemoryRead+0x1cc>)
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f000 fa1d 	bl	800ed4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d001      	beq.n	800e91a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	e000      	b.n	800e91c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3718      	adds	r7, #24
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	00010002 	.word	0x00010002

0800e928 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b086      	sub	sp, #24
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e934:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e93c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e944:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e94a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	685a      	ldr	r2, [r3, #4]
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e95a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e960:	2b00      	cmp	r3, #0
 800e962:	d003      	beq.n	800e96c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e968:	2200      	movs	r2, #0
 800e96a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e970:	2b00      	cmp	r3, #0
 800e972:	d003      	beq.n	800e97c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e978:	2200      	movs	r2, #0
 800e97a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800e97c:	7cfb      	ldrb	r3, [r7, #19]
 800e97e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800e982:	2b21      	cmp	r3, #33	; 0x21
 800e984:	d007      	beq.n	800e996 <I2C_DMAXferCplt+0x6e>
 800e986:	7cfb      	ldrb	r3, [r7, #19]
 800e988:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e98c:	2b22      	cmp	r3, #34	; 0x22
 800e98e:	d131      	bne.n	800e9f4 <I2C_DMAXferCplt+0xcc>
 800e990:	7cbb      	ldrb	r3, [r7, #18]
 800e992:	2b20      	cmp	r3, #32
 800e994:	d12e      	bne.n	800e9f4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e9a4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e9ac:	7cfb      	ldrb	r3, [r7, #19]
 800e9ae:	2b29      	cmp	r3, #41	; 0x29
 800e9b0:	d10a      	bne.n	800e9c8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2221      	movs	r2, #33	; 0x21
 800e9b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2228      	movs	r2, #40	; 0x28
 800e9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e9c0:	6978      	ldr	r0, [r7, #20]
 800e9c2:	f7ff fc5e 	bl	800e282 <HAL_I2C_SlaveTxCpltCallback>
 800e9c6:	e00c      	b.n	800e9e2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e9c8:	7cfb      	ldrb	r3, [r7, #19]
 800e9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800e9cc:	d109      	bne.n	800e9e2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	2222      	movs	r2, #34	; 0x22
 800e9d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	2228      	movs	r2, #40	; 0x28
 800e9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e9dc:	6978      	ldr	r0, [r7, #20]
 800e9de:	f7ff fc5a 	bl	800e296 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	685a      	ldr	r2, [r3, #4]
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e9f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800e9f2:	e06a      	b.n	800eaca <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d064      	beq.n	800eaca <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d107      	bne.n	800ea1a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea18:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ea28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ea30:	d009      	beq.n	800ea46 <I2C_DMAXferCplt+0x11e>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2b08      	cmp	r3, #8
 800ea36:	d006      	beq.n	800ea46 <I2C_DMAXferCplt+0x11e>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ea3e:	d002      	beq.n	800ea46 <I2C_DMAXferCplt+0x11e>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2b20      	cmp	r3, #32
 800ea44:	d107      	bne.n	800ea56 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea54:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ea64:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea74:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d003      	beq.n	800ea8c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800ea84:	6978      	ldr	r0, [r7, #20]
 800ea86:	f7ff fc1a 	bl	800e2be <HAL_I2C_ErrorCallback>
}
 800ea8a:	e01e      	b.n	800eaca <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2220      	movs	r2, #32
 800ea90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b40      	cmp	r3, #64	; 0x40
 800ea9e:	d10a      	bne.n	800eab6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800eaae:	6978      	ldr	r0, [r7, #20]
 800eab0:	f7f3 fa96 	bl	8001fe0 <HAL_I2C_MemRxCpltCallback>
}
 800eab4:	e009      	b.n	800eaca <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	2200      	movs	r2, #0
 800eaba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	2212      	movs	r2, #18
 800eac2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800eac4:	6978      	ldr	r0, [r7, #20]
 800eac6:	f7ff fbd2 	bl	800e26e <HAL_I2C_MasterRxCpltCallback>
}
 800eaca:	bf00      	nop
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eade:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d003      	beq.n	800eaf0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaec:	2200      	movs	r2, #0
 800eaee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d003      	beq.n	800eb00 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eafc:	2200      	movs	r2, #0
 800eafe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7fe fa5b 	bl	800cfbc <HAL_DMA_GetError>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	d01b      	beq.n	800eb44 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb1a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2220      	movs	r2, #32
 800eb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb36:	f043 0210 	orr.w	r2, r3, #16
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7ff fbbd 	bl	800e2be <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800eb44:	bf00      	nop
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eb54:	2300      	movs	r3, #0
 800eb56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800eb66:	4b4b      	ldr	r3, [pc, #300]	; (800ec94 <I2C_DMAAbort+0x148>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	08db      	lsrs	r3, r3, #3
 800eb6c:	4a4a      	ldr	r2, [pc, #296]	; (800ec98 <I2C_DMAAbort+0x14c>)
 800eb6e:	fba2 2303 	umull	r2, r3, r2, r3
 800eb72:	0a1a      	lsrs	r2, r3, #8
 800eb74:	4613      	mov	r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	00da      	lsls	r2, r3, #3
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d106      	bne.n	800eb94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb8a:	f043 0220 	orr.w	r2, r3, #32
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800eb92:	e00a      	b.n	800ebaa <I2C_DMAAbort+0x5e>
    }
    count--;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	3b01      	subs	r3, #1
 800eb98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eba8:	d0ea      	beq.n	800eb80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d003      	beq.n	800ebba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d003      	beq.n	800ebca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d003      	beq.n	800ebf0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebec:	2200      	movs	r2, #0
 800ebee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d003      	beq.n	800ec00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f022 0201 	bic.w	r2, r2, #1
 800ec0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b60      	cmp	r3, #96	; 0x60
 800ec1a:	d10e      	bne.n	800ec3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2220      	movs	r2, #32
 800ec20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ec32:	6978      	ldr	r0, [r7, #20]
 800ec34:	f7ff fb4d 	bl	800e2d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ec38:	e027      	b.n	800ec8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ec3a:	7cfb      	ldrb	r3, [r7, #19]
 800ec3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ec40:	2b28      	cmp	r3, #40	; 0x28
 800ec42:	d117      	bne.n	800ec74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f042 0201 	orr.w	r2, r2, #1
 800ec52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ec62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	2200      	movs	r2, #0
 800ec68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	2228      	movs	r2, #40	; 0x28
 800ec6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ec72:	e007      	b.n	800ec84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	2220      	movs	r2, #32
 800ec78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800ec84:	6978      	ldr	r0, [r7, #20]
 800ec86:	f7ff fb1a 	bl	800e2be <HAL_I2C_ErrorCallback>
}
 800ec8a:	bf00      	nop
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20000004 	.word	0x20000004
 800ec98:	14f8b589 	.word	0x14f8b589

0800ec9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	603b      	str	r3, [r7, #0]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ecac:	e025      	b.n	800ecfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecb4:	d021      	beq.n	800ecfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecb6:	f7fc fc6b 	bl	800b590 <HAL_GetTick>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	683a      	ldr	r2, [r7, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d302      	bcc.n	800eccc <I2C_WaitOnFlagUntilTimeout+0x30>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d116      	bne.n	800ecfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece6:	f043 0220 	orr.w	r2, r3, #32
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e023      	b.n	800ed42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	0c1b      	lsrs	r3, r3, #16
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d10d      	bne.n	800ed20 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	43da      	mvns	r2, r3
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	4013      	ands	r3, r2
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	bf0c      	ite	eq
 800ed16:	2301      	moveq	r3, #1
 800ed18:	2300      	movne	r3, #0
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	e00c      	b.n	800ed3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	43da      	mvns	r2, r3
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	4013      	ands	r3, r2
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	bf0c      	ite	eq
 800ed32:	2301      	moveq	r3, #1
 800ed34:	2300      	movne	r3, #0
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	461a      	mov	r2, r3
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d0b6      	beq.n	800ecae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b084      	sub	sp, #16
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	60f8      	str	r0, [r7, #12]
 800ed52:	60b9      	str	r1, [r7, #8]
 800ed54:	607a      	str	r2, [r7, #4]
 800ed56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ed58:	e051      	b.n	800edfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	695b      	ldr	r3, [r3, #20]
 800ed60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed68:	d123      	bne.n	800edb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ed82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2220      	movs	r2, #32
 800ed8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9e:	f043 0204 	orr.w	r2, r3, #4
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800edae:	2301      	movs	r3, #1
 800edb0:	e046      	b.n	800ee40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edb8:	d021      	beq.n	800edfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800edba:	f7fc fbe9 	bl	800b590 <HAL_GetTick>
 800edbe:	4602      	mov	r2, r0
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d302      	bcc.n	800edd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d116      	bne.n	800edfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2220      	movs	r2, #32
 800edda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edea:	f043 0220 	orr.w	r2, r3, #32
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	e020      	b.n	800ee40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	0c1b      	lsrs	r3, r3, #16
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d10c      	bne.n	800ee22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	43da      	mvns	r2, r3
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	4013      	ands	r3, r2
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	bf14      	ite	ne
 800ee1a:	2301      	movne	r3, #1
 800ee1c:	2300      	moveq	r3, #0
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	e00b      	b.n	800ee3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	43da      	mvns	r2, r3
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	4013      	ands	r3, r2
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	bf14      	ite	ne
 800ee34:	2301      	movne	r3, #1
 800ee36:	2300      	moveq	r3, #0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d18d      	bne.n	800ed5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ee3e:	2300      	movs	r3, #0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ee54:	e02d      	b.n	800eeb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f000 f8ce 	bl	800eff8 <I2C_IsAcknowledgeFailed>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d001      	beq.n	800ee66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	e02d      	b.n	800eec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee6c:	d021      	beq.n	800eeb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee6e:	f7fc fb8f 	bl	800b590 <HAL_GetTick>
 800ee72:	4602      	mov	r2, r0
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d302      	bcc.n	800ee84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d116      	bne.n	800eeb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2200      	movs	r2, #0
 800ee88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2220      	movs	r2, #32
 800ee8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee9e:	f043 0220 	orr.w	r2, r3, #32
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e007      	b.n	800eec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	695b      	ldr	r3, [r3, #20]
 800eeb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eebc:	2b80      	cmp	r3, #128	; 0x80
 800eebe:	d1ca      	bne.n	800ee56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	60f8      	str	r0, [r7, #12]
 800eed2:	60b9      	str	r1, [r7, #8]
 800eed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800eed6:	e02d      	b.n	800ef34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f000 f88d 	bl	800eff8 <I2C_IsAcknowledgeFailed>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	e02d      	b.n	800ef44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeee:	d021      	beq.n	800ef34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eef0:	f7fc fb4e 	bl	800b590 <HAL_GetTick>
 800eef4:	4602      	mov	r2, r0
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d302      	bcc.n	800ef06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d116      	bne.n	800ef34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2220      	movs	r2, #32
 800ef10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef20:	f043 0220 	orr.w	r2, r3, #32
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ef30:	2301      	movs	r3, #1
 800ef32:	e007      	b.n	800ef44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	695b      	ldr	r3, [r3, #20]
 800ef3a:	f003 0304 	and.w	r3, r3, #4
 800ef3e:	2b04      	cmp	r3, #4
 800ef40:	d1ca      	bne.n	800eed8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ef58:	e042      	b.n	800efe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	695b      	ldr	r3, [r3, #20]
 800ef60:	f003 0310 	and.w	r3, r3, #16
 800ef64:	2b10      	cmp	r3, #16
 800ef66:	d119      	bne.n	800ef9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f06f 0210 	mvn.w	r2, #16
 800ef70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2200      	movs	r2, #0
 800ef76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2220      	movs	r2, #32
 800ef7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e029      	b.n	800eff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef9c:	f7fc faf8 	bl	800b590 <HAL_GetTick>
 800efa0:	4602      	mov	r2, r0
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d302      	bcc.n	800efb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d116      	bne.n	800efe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2200      	movs	r2, #0
 800efb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2220      	movs	r2, #32
 800efbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efcc:	f043 0220 	orr.w	r2, r3, #32
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800efdc:	2301      	movs	r3, #1
 800efde:	e007      	b.n	800eff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	695b      	ldr	r3, [r3, #20]
 800efe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efea:	2b40      	cmp	r3, #64	; 0x40
 800efec:	d1b5      	bne.n	800ef5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f00a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f00e:	d11b      	bne.n	800f048 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f018:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2220      	movs	r2, #32
 800f024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f034:	f043 0204 	orr.w	r2, r3, #4
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f044:	2301      	movs	r3, #1
 800f046:	e000      	b.n	800f04a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f056:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f058:	b08f      	sub	sp, #60	; 0x3c
 800f05a:	af0a      	add	r7, sp, #40	; 0x28
 800f05c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d101      	bne.n	800f068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f064:	2301      	movs	r3, #1
 800f066:	e10f      	b.n	800f288 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800f074:	b2db      	uxtb	r3, r3
 800f076:	2b00      	cmp	r3, #0
 800f078:	d106      	bne.n	800f088 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f00b fe52 	bl	801ad2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2203      	movs	r2, #3
 800f08c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d102      	bne.n	800f0a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f004 ff55 	bl	8013f56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	603b      	str	r3, [r7, #0]
 800f0b2:	687e      	ldr	r6, [r7, #4]
 800f0b4:	466d      	mov	r5, sp
 800f0b6:	f106 0410 	add.w	r4, r6, #16
 800f0ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f0c6:	e885 0003 	stmia.w	r5, {r0, r1}
 800f0ca:	1d33      	adds	r3, r6, #4
 800f0cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f0ce:	6838      	ldr	r0, [r7, #0]
 800f0d0:	f004 fe2c 	bl	8013d2c <USB_CoreInit>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d005      	beq.n	800f0e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2202      	movs	r2, #2
 800f0de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e0d0      	b.n	800f288 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f004 ff43 	bl	8013f78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73fb      	strb	r3, [r7, #15]
 800f0f6:	e04a      	b.n	800f18e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f0f8:	7bfa      	ldrb	r2, [r7, #15]
 800f0fa:	6879      	ldr	r1, [r7, #4]
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	4413      	add	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	440b      	add	r3, r1
 800f106:	333d      	adds	r3, #61	; 0x3d
 800f108:	2201      	movs	r2, #1
 800f10a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f10c:	7bfa      	ldrb	r2, [r7, #15]
 800f10e:	6879      	ldr	r1, [r7, #4]
 800f110:	4613      	mov	r3, r2
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	4413      	add	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	440b      	add	r3, r1
 800f11a:	333c      	adds	r3, #60	; 0x3c
 800f11c:	7bfa      	ldrb	r2, [r7, #15]
 800f11e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f120:	7bfa      	ldrb	r2, [r7, #15]
 800f122:	7bfb      	ldrb	r3, [r7, #15]
 800f124:	b298      	uxth	r0, r3
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	4613      	mov	r3, r2
 800f12a:	00db      	lsls	r3, r3, #3
 800f12c:	4413      	add	r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	440b      	add	r3, r1
 800f132:	3344      	adds	r3, #68	; 0x44
 800f134:	4602      	mov	r2, r0
 800f136:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f138:	7bfa      	ldrb	r2, [r7, #15]
 800f13a:	6879      	ldr	r1, [r7, #4]
 800f13c:	4613      	mov	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	4413      	add	r3, r2
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	440b      	add	r3, r1
 800f146:	3340      	adds	r3, #64	; 0x40
 800f148:	2200      	movs	r2, #0
 800f14a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f14c:	7bfa      	ldrb	r2, [r7, #15]
 800f14e:	6879      	ldr	r1, [r7, #4]
 800f150:	4613      	mov	r3, r2
 800f152:	00db      	lsls	r3, r3, #3
 800f154:	4413      	add	r3, r2
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	440b      	add	r3, r1
 800f15a:	3348      	adds	r3, #72	; 0x48
 800f15c:	2200      	movs	r2, #0
 800f15e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f160:	7bfa      	ldrb	r2, [r7, #15]
 800f162:	6879      	ldr	r1, [r7, #4]
 800f164:	4613      	mov	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	4413      	add	r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	440b      	add	r3, r1
 800f16e:	334c      	adds	r3, #76	; 0x4c
 800f170:	2200      	movs	r2, #0
 800f172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f174:	7bfa      	ldrb	r2, [r7, #15]
 800f176:	6879      	ldr	r1, [r7, #4]
 800f178:	4613      	mov	r3, r2
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	4413      	add	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	440b      	add	r3, r1
 800f182:	3354      	adds	r3, #84	; 0x54
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f188:	7bfb      	ldrb	r3, [r7, #15]
 800f18a:	3301      	adds	r3, #1
 800f18c:	73fb      	strb	r3, [r7, #15]
 800f18e:	7bfa      	ldrb	r2, [r7, #15]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	429a      	cmp	r2, r3
 800f196:	d3af      	bcc.n	800f0f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f198:	2300      	movs	r3, #0
 800f19a:	73fb      	strb	r3, [r7, #15]
 800f19c:	e044      	b.n	800f228 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f19e:	7bfa      	ldrb	r2, [r7, #15]
 800f1a0:	6879      	ldr	r1, [r7, #4]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	4413      	add	r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	440b      	add	r3, r1
 800f1ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f1b4:	7bfa      	ldrb	r2, [r7, #15]
 800f1b6:	6879      	ldr	r1, [r7, #4]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	4413      	add	r3, r2
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	440b      	add	r3, r1
 800f1c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800f1c6:	7bfa      	ldrb	r2, [r7, #15]
 800f1c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f1ca:	7bfa      	ldrb	r2, [r7, #15]
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	4413      	add	r3, r2
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	440b      	add	r3, r1
 800f1d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f1dc:	2200      	movs	r2, #0
 800f1de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f1e0:	7bfa      	ldrb	r2, [r7, #15]
 800f1e2:	6879      	ldr	r1, [r7, #4]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	4413      	add	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	440b      	add	r3, r1
 800f1ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f1f6:	7bfa      	ldrb	r2, [r7, #15]
 800f1f8:	6879      	ldr	r1, [r7, #4]
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	00db      	lsls	r3, r3, #3
 800f1fe:	4413      	add	r3, r2
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	440b      	add	r3, r1
 800f204:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f208:	2200      	movs	r2, #0
 800f20a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f20c:	7bfa      	ldrb	r2, [r7, #15]
 800f20e:	6879      	ldr	r1, [r7, #4]
 800f210:	4613      	mov	r3, r2
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	4413      	add	r3, r2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	440b      	add	r3, r1
 800f21a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f21e:	2200      	movs	r2, #0
 800f220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f222:	7bfb      	ldrb	r3, [r7, #15]
 800f224:	3301      	adds	r3, #1
 800f226:	73fb      	strb	r3, [r7, #15]
 800f228:	7bfa      	ldrb	r2, [r7, #15]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d3b5      	bcc.n	800f19e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	603b      	str	r3, [r7, #0]
 800f238:	687e      	ldr	r6, [r7, #4]
 800f23a:	466d      	mov	r5, sp
 800f23c:	f106 0410 	add.w	r4, r6, #16
 800f240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f24c:	e885 0003 	stmia.w	r5, {r0, r1}
 800f250:	1d33      	adds	r3, r6, #4
 800f252:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f254:	6838      	ldr	r0, [r7, #0]
 800f256:	f004 fedb 	bl	8014010 <USB_DevInit>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d005      	beq.n	800f26c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2202      	movs	r2, #2
 800f264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f268:	2301      	movs	r3, #1
 800f26a:	e00d      	b.n	800f288 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4618      	mov	r0, r3
 800f282:	f006 f82a 	bl	80152da <USB_DevDisconnect>

  return HAL_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3714      	adds	r7, #20
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f290 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d101      	bne.n	800f2ac <HAL_PCD_Start+0x1c>
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	e020      	b.n	800f2ee <HAL_PCD_Start+0x5e>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d109      	bne.n	800f2d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d005      	beq.n	800f2d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f004 fe2d 	bl	8013f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f005 ffda 	bl	8015298 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f2f6:	b590      	push	{r4, r7, lr}
 800f2f8:	b08d      	sub	sp, #52	; 0x34
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f304:	6a3b      	ldr	r3, [r7, #32]
 800f306:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4618      	mov	r0, r3
 800f30e:	f006 f898 	bl	8015442 <USB_GetMode>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	f040 848a 	bne.w	800fc2e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4618      	mov	r0, r3
 800f320:	f005 fffc 	bl	801531c <USB_ReadInterrupts>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	f000 8480 	beq.w	800fc2c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	0a1b      	lsrs	r3, r3, #8
 800f336:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4618      	mov	r0, r3
 800f346:	f005 ffe9 	bl	801531c <USB_ReadInterrupts>
 800f34a:	4603      	mov	r3, r0
 800f34c:	f003 0302 	and.w	r3, r3, #2
 800f350:	2b02      	cmp	r3, #2
 800f352:	d107      	bne.n	800f364 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	695a      	ldr	r2, [r3, #20]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f002 0202 	and.w	r2, r2, #2
 800f362:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4618      	mov	r0, r3
 800f36a:	f005 ffd7 	bl	801531c <USB_ReadInterrupts>
 800f36e:	4603      	mov	r3, r0
 800f370:	f003 0310 	and.w	r3, r3, #16
 800f374:	2b10      	cmp	r3, #16
 800f376:	d161      	bne.n	800f43c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	699a      	ldr	r2, [r3, #24]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f022 0210 	bic.w	r2, r2, #16
 800f386:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800f388:	6a3b      	ldr	r3, [r7, #32]
 800f38a:	6a1b      	ldr	r3, [r3, #32]
 800f38c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	f003 020f 	and.w	r2, r3, #15
 800f394:	4613      	mov	r3, r2
 800f396:	00db      	lsls	r3, r3, #3
 800f398:	4413      	add	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	0c5b      	lsrs	r3, r3, #17
 800f3ac:	f003 030f 	and.w	r3, r3, #15
 800f3b0:	2b02      	cmp	r3, #2
 800f3b2:	d124      	bne.n	800f3fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f3b4:	69ba      	ldr	r2, [r7, #24]
 800f3b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d035      	beq.n	800f42c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	091b      	lsrs	r3, r3, #4
 800f3c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f3ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	6a38      	ldr	r0, [r7, #32]
 800f3d4:	f005 fe0e 	bl	8014ff4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	691a      	ldr	r2, [r3, #16]
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	091b      	lsrs	r3, r3, #4
 800f3e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f3e4:	441a      	add	r2, r3
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	6a1a      	ldr	r2, [r3, #32]
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	091b      	lsrs	r3, r3, #4
 800f3f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f3f6:	441a      	add	r2, r3
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	621a      	str	r2, [r3, #32]
 800f3fc:	e016      	b.n	800f42c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	0c5b      	lsrs	r3, r3, #17
 800f402:	f003 030f 	and.w	r3, r3, #15
 800f406:	2b06      	cmp	r3, #6
 800f408:	d110      	bne.n	800f42c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f410:	2208      	movs	r2, #8
 800f412:	4619      	mov	r1, r3
 800f414:	6a38      	ldr	r0, [r7, #32]
 800f416:	f005 fded 	bl	8014ff4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	6a1a      	ldr	r2, [r3, #32]
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	091b      	lsrs	r3, r3, #4
 800f422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f426:	441a      	add	r2, r3
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	699a      	ldr	r2, [r3, #24]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f042 0210 	orr.w	r2, r2, #16
 800f43a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4618      	mov	r0, r3
 800f442:	f005 ff6b 	bl	801531c <USB_ReadInterrupts>
 800f446:	4603      	mov	r3, r0
 800f448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f44c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f450:	f040 80a7 	bne.w	800f5a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800f454:	2300      	movs	r3, #0
 800f456:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f005 ff70 	bl	8015342 <USB_ReadDevAllOutEpInterrupt>
 800f462:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f464:	e099      	b.n	800f59a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	f003 0301 	and.w	r3, r3, #1
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f000 808e 	beq.w	800f58e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f478:	b2d2      	uxtb	r2, r2
 800f47a:	4611      	mov	r1, r2
 800f47c:	4618      	mov	r0, r3
 800f47e:	f005 ff94 	bl	80153aa <USB_ReadDevOutEPInterrupt>
 800f482:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00c      	beq.n	800f4a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	015a      	lsls	r2, r3, #5
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	4413      	add	r3, r2
 800f496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f49a:	461a      	mov	r2, r3
 800f49c:	2301      	movs	r3, #1
 800f49e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f4a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 fec2 	bl	801022c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	f003 0308 	and.w	r3, r3, #8
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00c      	beq.n	800f4cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	015a      	lsls	r2, r3, #5
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4be:	461a      	mov	r2, r3
 800f4c0:	2308      	movs	r3, #8
 800f4c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f4c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 ff98 	bl	80103fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	f003 0310 	and.w	r3, r3, #16
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d008      	beq.n	800f4e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	015a      	lsls	r2, r3, #5
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	4413      	add	r3, r2
 800f4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	2310      	movs	r3, #16
 800f4e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	f003 0302 	and.w	r3, r3, #2
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d030      	beq.n	800f554 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f4f2:	6a3b      	ldr	r3, [r7, #32]
 800f4f4:	695b      	ldr	r3, [r3, #20]
 800f4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4fa:	2b80      	cmp	r3, #128	; 0x80
 800f4fc:	d109      	bne.n	800f512 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	69fa      	ldr	r2, [r7, #28]
 800f508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f50c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f510:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f514:	4613      	mov	r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	4413      	add	r3, r2
 800f524:	3304      	adds	r3, #4
 800f526:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	78db      	ldrb	r3, [r3, #3]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d108      	bne.n	800f542 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	2200      	movs	r2, #0
 800f534:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	4619      	mov	r1, r3
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f00b fd07 	bl	801af50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f544:	015a      	lsls	r2, r3, #5
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	4413      	add	r3, r2
 800f54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f54e:	461a      	mov	r2, r3
 800f550:	2302      	movs	r3, #2
 800f552:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	f003 0320 	and.w	r3, r3, #32
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d008      	beq.n	800f570 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	015a      	lsls	r2, r3, #5
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	4413      	add	r3, r2
 800f566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f56a:	461a      	mov	r2, r3
 800f56c:	2320      	movs	r3, #32
 800f56e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f576:	2b00      	cmp	r3, #0
 800f578:	d009      	beq.n	800f58e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	015a      	lsls	r2, r3, #5
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	4413      	add	r3, r2
 800f582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f586:	461a      	mov	r2, r3
 800f588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f58c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f590:	3301      	adds	r3, #1
 800f592:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	085b      	lsrs	r3, r3, #1
 800f598:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f47f af62 	bne.w	800f466 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f005 feb8 	bl	801531c <USB_ReadInterrupts>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f5b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5b6:	f040 80db 	bne.w	800f770 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f005 fed9 	bl	8015376 <USB_ReadDevAllInEpInterrupt>
 800f5c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f5ca:	e0cd      	b.n	800f768 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	f003 0301 	and.w	r3, r3, #1
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f000 80c2 	beq.w	800f75c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5de:	b2d2      	uxtb	r2, r2
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f005 feff 	bl	80153e6 <USB_ReadDevInEPInterrupt>
 800f5e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	f003 0301 	and.w	r3, r3, #1
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d057      	beq.n	800f6a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	f003 030f 	and.w	r3, r3, #15
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f600:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	43db      	mvns	r3, r3
 800f60e:	69f9      	ldr	r1, [r7, #28]
 800f610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f614:	4013      	ands	r3, r2
 800f616:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	015a      	lsls	r2, r3, #5
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	4413      	add	r3, r2
 800f620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f624:	461a      	mov	r2, r3
 800f626:	2301      	movs	r3, #1
 800f628:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d132      	bne.n	800f698 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f632:	6879      	ldr	r1, [r7, #4]
 800f634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f636:	4613      	mov	r3, r2
 800f638:	00db      	lsls	r3, r3, #3
 800f63a:	4413      	add	r3, r2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	440b      	add	r3, r1
 800f640:	334c      	adds	r3, #76	; 0x4c
 800f642:	6819      	ldr	r1, [r3, #0]
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f648:	4613      	mov	r3, r2
 800f64a:	00db      	lsls	r3, r3, #3
 800f64c:	4413      	add	r3, r2
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4403      	add	r3, r0
 800f652:	3348      	adds	r3, #72	; 0x48
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4419      	add	r1, r3
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f65c:	4613      	mov	r3, r2
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	4413      	add	r3, r2
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	4403      	add	r3, r0
 800f666:	334c      	adds	r3, #76	; 0x4c
 800f668:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d113      	bne.n	800f698 <HAL_PCD_IRQHandler+0x3a2>
 800f670:	6879      	ldr	r1, [r7, #4]
 800f672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f674:	4613      	mov	r3, r2
 800f676:	00db      	lsls	r3, r3, #3
 800f678:	4413      	add	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	440b      	add	r3, r1
 800f67e:	3354      	adds	r3, #84	; 0x54
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d108      	bne.n	800f698 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f690:	461a      	mov	r2, r3
 800f692:	2101      	movs	r1, #1
 800f694:	f005 ff06 	bl	80154a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	4619      	mov	r1, r3
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f00b fbc5 	bl	801ae2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	f003 0308 	and.w	r3, r3, #8
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d008      	beq.n	800f6c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b0:	015a      	lsls	r2, r3, #5
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	2308      	movs	r3, #8
 800f6be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	f003 0310 	and.w	r3, r3, #16
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d008      	beq.n	800f6dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6cc:	015a      	lsls	r2, r3, #5
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	2310      	movs	r3, #16
 800f6da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d008      	beq.n	800f6f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	015a      	lsls	r2, r3, #5
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	2340      	movs	r3, #64	; 0x40
 800f6f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	f003 0302 	and.w	r3, r3, #2
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d023      	beq.n	800f74a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800f702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f704:	6a38      	ldr	r0, [r7, #32]
 800f706:	f004 fde7 	bl	80142d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800f70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f70c:	4613      	mov	r3, r2
 800f70e:	00db      	lsls	r3, r3, #3
 800f710:	4413      	add	r3, r2
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	3338      	adds	r3, #56	; 0x38
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	4413      	add	r3, r2
 800f71a:	3304      	adds	r3, #4
 800f71c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	78db      	ldrb	r3, [r3, #3]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d108      	bne.n	800f738 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	2200      	movs	r2, #0
 800f72a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	4619      	mov	r1, r3
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f00b fc1e 	bl	801af74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73a:	015a      	lsls	r2, r3, #5
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	4413      	add	r3, r2
 800f740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f744:	461a      	mov	r2, r3
 800f746:	2302      	movs	r3, #2
 800f748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f750:	2b00      	cmp	r3, #0
 800f752:	d003      	beq.n	800f75c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fcdb 	bl	8010112 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	3301      	adds	r3, #1
 800f760:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	085b      	lsrs	r3, r3, #1
 800f766:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f47f af2e 	bne.w	800f5cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4618      	mov	r0, r3
 800f776:	f005 fdd1 	bl	801531c <USB_ReadInterrupts>
 800f77a:	4603      	mov	r3, r0
 800f77c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f784:	d122      	bne.n	800f7cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	69fa      	ldr	r2, [r7, #28]
 800f790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f794:	f023 0301 	bic.w	r3, r3, #1
 800f798:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d108      	bne.n	800f7b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 fec2 	bl	8010538 <HAL_PCDEx_LPM_Callback>
 800f7b4:	e002      	b.n	800f7bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f00b fbb6 	bl	801af28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	695a      	ldr	r2, [r3, #20]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f7ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f005 fda3 	bl	801531c <USB_ReadInterrupts>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f7dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7e0:	d112      	bne.n	800f808 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	f003 0301 	and.w	r3, r3, #1
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d102      	bne.n	800f7f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f00b fb6c 	bl	801aed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	695a      	ldr	r2, [r3, #20]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f806:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4618      	mov	r0, r3
 800f80e:	f005 fd85 	bl	801531c <USB_ReadInterrupts>
 800f812:	4603      	mov	r3, r0
 800f814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f81c:	f040 80b7 	bne.w	800f98e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	69fa      	ldr	r2, [r7, #28]
 800f82a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f82e:	f023 0301 	bic.w	r3, r3, #1
 800f832:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2110      	movs	r1, #16
 800f83a:	4618      	mov	r0, r3
 800f83c:	f004 fd4c 	bl	80142d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f840:	2300      	movs	r3, #0
 800f842:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f844:	e046      	b.n	800f8d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f848:	015a      	lsls	r2, r3, #5
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	4413      	add	r3, r2
 800f84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f852:	461a      	mov	r2, r3
 800f854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f858:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f86a:	0151      	lsls	r1, r2, #5
 800f86c:	69fa      	ldr	r2, [r7, #28]
 800f86e:	440a      	add	r2, r1
 800f870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f878:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87c:	015a      	lsls	r2, r3, #5
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	4413      	add	r3, r2
 800f882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f886:	461a      	mov	r2, r3
 800f888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f88c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f890:	015a      	lsls	r2, r3, #5
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	4413      	add	r3, r2
 800f896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f89e:	0151      	lsls	r1, r2, #5
 800f8a0:	69fa      	ldr	r2, [r7, #28]
 800f8a2:	440a      	add	r2, r1
 800f8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b0:	015a      	lsls	r2, r3, #5
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8be:	0151      	lsls	r1, r2, #5
 800f8c0:	69fa      	ldr	r2, [r7, #28]
 800f8c2:	440a      	add	r2, r1
 800f8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f8cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d3b3      	bcc.n	800f846 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	69fa      	ldr	r2, [r7, #28]
 800f8e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f8f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d016      	beq.n	800f928 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f904:	69fa      	ldr	r2, [r7, #28]
 800f906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f90a:	f043 030b 	orr.w	r3, r3, #11
 800f90e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f920:	f043 030b 	orr.w	r3, r3, #11
 800f924:	6453      	str	r3, [r2, #68]	; 0x44
 800f926:	e015      	b.n	800f954 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f92e:	695b      	ldr	r3, [r3, #20]
 800f930:	69fa      	ldr	r2, [r7, #28]
 800f932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f936:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f93a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f93e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f946:	691b      	ldr	r3, [r3, #16]
 800f948:	69fa      	ldr	r2, [r7, #28]
 800f94a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f94e:	f043 030b 	orr.w	r3, r3, #11
 800f952:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	69fa      	ldr	r2, [r7, #28]
 800f95e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f962:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f966:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6818      	ldr	r0, [r3, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f978:	461a      	mov	r2, r3
 800f97a:	f005 fd93 	bl	80154a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	695a      	ldr	r2, [r3, #20]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f98c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4618      	mov	r0, r3
 800f994:	f005 fcc2 	bl	801531c <USB_ReadInterrupts>
 800f998:	4603      	mov	r3, r0
 800f99a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f99e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9a2:	d124      	bne.n	800f9ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f005 fd58 	bl	801545e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f004 fd0d 	bl	80143d2 <USB_GetDevSpeed>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681c      	ldr	r4, [r3, #0]
 800f9c4:	f001 f9e8 	bl	8010d98 <HAL_RCC_GetHCLKFreq>
 800f9c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	f004 fa0c 	bl	8013df0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f00b fa50 	bl	801ae7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	695a      	ldr	r2, [r3, #20]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f9ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f005 fc92 	bl	801531c <USB_ReadInterrupts>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	f003 0308 	and.w	r3, r3, #8
 800f9fe:	2b08      	cmp	r3, #8
 800fa00:	d10a      	bne.n	800fa18 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f00b fa2d 	bl	801ae62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	695a      	ldr	r2, [r3, #20]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f002 0208 	and.w	r2, r2, #8
 800fa16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f005 fc7d 	bl	801531c <USB_ReadInterrupts>
 800fa22:	4603      	mov	r3, r0
 800fa24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa28:	2b80      	cmp	r3, #128	; 0x80
 800fa2a:	d122      	bne.n	800fa72 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800fa2c:	6a3b      	ldr	r3, [r7, #32]
 800fa2e:	699b      	ldr	r3, [r3, #24]
 800fa30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fa34:	6a3b      	ldr	r3, [r7, #32]
 800fa36:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fa38:	2301      	movs	r3, #1
 800fa3a:	627b      	str	r3, [r7, #36]	; 0x24
 800fa3c:	e014      	b.n	800fa68 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800fa3e:	6879      	ldr	r1, [r7, #4]
 800fa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa42:	4613      	mov	r3, r2
 800fa44:	00db      	lsls	r3, r3, #3
 800fa46:	4413      	add	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	440b      	add	r3, r1
 800fa4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	d105      	bne.n	800fa62 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800fa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 fb27 	bl	80100b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa64:	3301      	adds	r3, #1
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d3e5      	bcc.n	800fa3e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f005 fc50 	bl	801531c <USB_ReadInterrupts>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa86:	d13b      	bne.n	800fb00 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fa88:	2301      	movs	r3, #1
 800fa8a:	627b      	str	r3, [r7, #36]	; 0x24
 800fa8c:	e02b      	b.n	800fae6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	015a      	lsls	r2, r3, #5
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	4413      	add	r3, r2
 800fa96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fa9e:	6879      	ldr	r1, [r7, #4]
 800faa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faa2:	4613      	mov	r3, r2
 800faa4:	00db      	lsls	r3, r3, #3
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	440b      	add	r3, r1
 800faac:	3340      	adds	r3, #64	; 0x40
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d115      	bne.n	800fae0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800fab4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	da12      	bge.n	800fae0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800faba:	6879      	ldr	r1, [r7, #4]
 800fabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fabe:	4613      	mov	r3, r2
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	4413      	add	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	440b      	add	r3, r1
 800fac8:	333f      	adds	r3, #63	; 0x3f
 800faca:	2201      	movs	r2, #1
 800facc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800face:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	4619      	mov	r1, r3
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 fae8 	bl	80100b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae2:	3301      	adds	r3, #1
 800fae4:	627b      	str	r3, [r7, #36]	; 0x24
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faec:	429a      	cmp	r2, r3
 800faee:	d3ce      	bcc.n	800fa8e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	695a      	ldr	r2, [r3, #20]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800fafe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4618      	mov	r0, r3
 800fb06:	f005 fc09 	bl	801531c <USB_ReadInterrupts>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb14:	d155      	bne.n	800fbc2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fb16:	2301      	movs	r3, #1
 800fb18:	627b      	str	r3, [r7, #36]	; 0x24
 800fb1a:	e045      	b.n	800fba8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1e:	015a      	lsls	r2, r3, #5
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	4413      	add	r3, r2
 800fb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800fb2c:	6879      	ldr	r1, [r7, #4]
 800fb2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb30:	4613      	mov	r3, r2
 800fb32:	00db      	lsls	r3, r3, #3
 800fb34:	4413      	add	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	440b      	add	r3, r1
 800fb3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d12e      	bne.n	800fba2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800fb44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	da2b      	bge.n	800fba2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800fb56:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d121      	bne.n	800fba2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800fb5e:	6879      	ldr	r1, [r7, #4]
 800fb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb62:	4613      	mov	r3, r2
 800fb64:	00db      	lsls	r3, r3, #3
 800fb66:	4413      	add	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	440b      	add	r3, r1
 800fb6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800fb70:	2201      	movs	r2, #1
 800fb72:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800fb74:	6a3b      	ldr	r3, [r7, #32]
 800fb76:	699b      	ldr	r3, [r3, #24]
 800fb78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb7c:	6a3b      	ldr	r3, [r7, #32]
 800fb7e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800fb80:	6a3b      	ldr	r3, [r7, #32]
 800fb82:	695b      	ldr	r3, [r3, #20]
 800fb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d10a      	bne.n	800fba2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	69fa      	ldr	r2, [r7, #28]
 800fb96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fb9e:	6053      	str	r3, [r2, #4]
            break;
 800fba0:	e007      	b.n	800fbb2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba4:	3301      	adds	r3, #1
 800fba6:	627b      	str	r3, [r7, #36]	; 0x24
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d3b4      	bcc.n	800fb1c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	695a      	ldr	r2, [r3, #20]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fbc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f005 fba8 	bl	801531c <USB_ReadInterrupts>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbd6:	d10a      	bne.n	800fbee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f00b f9dd 	bl	801af98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	695a      	ldr	r2, [r3, #20]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800fbec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f005 fb92 	bl	801531c <USB_ReadInterrupts>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	f003 0304 	and.w	r3, r3, #4
 800fbfe:	2b04      	cmp	r3, #4
 800fc00:	d115      	bne.n	800fc2e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	f003 0304 	and.w	r3, r3, #4
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f00b f9cd 	bl	801afb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	6859      	ldr	r1, [r3, #4]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	69ba      	ldr	r2, [r7, #24]
 800fc26:	430a      	orrs	r2, r1
 800fc28:	605a      	str	r2, [r3, #4]
 800fc2a:	e000      	b.n	800fc2e <HAL_PCD_IRQHandler+0x938>
      return;
 800fc2c:	bf00      	nop
    }
  }
}
 800fc2e:	3734      	adds	r7, #52	; 0x34
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd90      	pop	{r4, r7, pc}

0800fc34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d101      	bne.n	800fc4e <HAL_PCD_SetAddress+0x1a>
 800fc4a:	2302      	movs	r3, #2
 800fc4c:	e013      	b.n	800fc76 <HAL_PCD_SetAddress+0x42>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2201      	movs	r2, #1
 800fc52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	78fa      	ldrb	r2, [r7, #3]
 800fc5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	78fa      	ldrb	r2, [r7, #3]
 800fc64:	4611      	mov	r1, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f005 faf0 	bl	801524c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b084      	sub	sp, #16
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	4608      	mov	r0, r1
 800fc88:	4611      	mov	r1, r2
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	70fb      	strb	r3, [r7, #3]
 800fc90:	460b      	mov	r3, r1
 800fc92:	803b      	strh	r3, [r7, #0]
 800fc94:	4613      	mov	r3, r2
 800fc96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fc9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	da0f      	bge.n	800fcc4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fca4:	78fb      	ldrb	r3, [r7, #3]
 800fca6:	f003 020f 	and.w	r2, r3, #15
 800fcaa:	4613      	mov	r3, r2
 800fcac:	00db      	lsls	r3, r3, #3
 800fcae:	4413      	add	r3, r2
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	3338      	adds	r3, #56	; 0x38
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	3304      	adds	r3, #4
 800fcba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	705a      	strb	r2, [r3, #1]
 800fcc2:	e00f      	b.n	800fce4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fcc4:	78fb      	ldrb	r3, [r7, #3]
 800fcc6:	f003 020f 	and.w	r2, r3, #15
 800fcca:	4613      	mov	r3, r2
 800fccc:	00db      	lsls	r3, r3, #3
 800fcce:	4413      	add	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	4413      	add	r3, r2
 800fcda:	3304      	adds	r3, #4
 800fcdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800fce4:	78fb      	ldrb	r3, [r7, #3]
 800fce6:	f003 030f 	and.w	r3, r3, #15
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800fcf0:	883a      	ldrh	r2, [r7, #0]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	78ba      	ldrb	r2, [r7, #2]
 800fcfa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	785b      	ldrb	r3, [r3, #1]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d004      	beq.n	800fd0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800fd0e:	78bb      	ldrb	r3, [r7, #2]
 800fd10:	2b02      	cmp	r3, #2
 800fd12:	d102      	bne.n	800fd1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2200      	movs	r2, #0
 800fd18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d101      	bne.n	800fd28 <HAL_PCD_EP_Open+0xaa>
 800fd24:	2302      	movs	r3, #2
 800fd26:	e00e      	b.n	800fd46 <HAL_PCD_EP_Open+0xc8>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	68f9      	ldr	r1, [r7, #12]
 800fd36:	4618      	mov	r0, r3
 800fd38:	f004 fb70 	bl	801441c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800fd44:	7afb      	ldrb	r3, [r7, #11]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b084      	sub	sp, #16
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
 800fd56:	460b      	mov	r3, r1
 800fd58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fd5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	da0f      	bge.n	800fd82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd62:	78fb      	ldrb	r3, [r7, #3]
 800fd64:	f003 020f 	and.w	r2, r3, #15
 800fd68:	4613      	mov	r3, r2
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	4413      	add	r3, r2
 800fd6e:	009b      	lsls	r3, r3, #2
 800fd70:	3338      	adds	r3, #56	; 0x38
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	4413      	add	r3, r2
 800fd76:	3304      	adds	r3, #4
 800fd78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	705a      	strb	r2, [r3, #1]
 800fd80:	e00f      	b.n	800fda2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fd82:	78fb      	ldrb	r3, [r7, #3]
 800fd84:	f003 020f 	and.w	r2, r3, #15
 800fd88:	4613      	mov	r3, r2
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	4413      	add	r3, r2
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	4413      	add	r3, r2
 800fd98:	3304      	adds	r3, #4
 800fd9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800fda2:	78fb      	ldrb	r3, [r7, #3]
 800fda4:	f003 030f 	and.w	r3, r3, #15
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d101      	bne.n	800fdbc <HAL_PCD_EP_Close+0x6e>
 800fdb8:	2302      	movs	r3, #2
 800fdba:	e00e      	b.n	800fdda <HAL_PCD_EP_Close+0x8c>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	68f9      	ldr	r1, [r7, #12]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f004 fbae 	bl	801452c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800fdd8:	2300      	movs	r3, #0
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3710      	adds	r7, #16
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b086      	sub	sp, #24
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	60f8      	str	r0, [r7, #12]
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	603b      	str	r3, [r7, #0]
 800fdee:	460b      	mov	r3, r1
 800fdf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdf2:	7afb      	ldrb	r3, [r7, #11]
 800fdf4:	f003 020f 	and.w	r2, r3, #15
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	00db      	lsls	r3, r3, #3
 800fdfc:	4413      	add	r3, r2
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	4413      	add	r3, r2
 800fe08:	3304      	adds	r3, #4
 800fe0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	2200      	movs	r2, #0
 800fe22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fe24:	7afb      	ldrb	r3, [r7, #11]
 800fe26:	f003 030f 	and.w	r3, r3, #15
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d102      	bne.n	800fe3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fe3e:	7afb      	ldrb	r3, [r7, #11]
 800fe40:	f003 030f 	and.w	r3, r3, #15
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d109      	bne.n	800fe5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6818      	ldr	r0, [r3, #0]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	691b      	ldr	r3, [r3, #16]
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	461a      	mov	r2, r3
 800fe54:	6979      	ldr	r1, [r7, #20]
 800fe56:	f004 fe8d 	bl	8014b74 <USB_EP0StartXfer>
 800fe5a:	e008      	b.n	800fe6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6818      	ldr	r0, [r3, #0]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	691b      	ldr	r3, [r3, #16]
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	461a      	mov	r2, r3
 800fe68:	6979      	ldr	r1, [r7, #20]
 800fe6a:	f004 fc3b 	bl	80146e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800fe6e:	2300      	movs	r3, #0
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	460b      	mov	r3, r1
 800fe82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800fe84:	78fb      	ldrb	r3, [r7, #3]
 800fe86:	f003 020f 	and.w	r2, r3, #15
 800fe8a:	6879      	ldr	r1, [r7, #4]
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	00db      	lsls	r3, r3, #3
 800fe90:	4413      	add	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	440b      	add	r3, r1
 800fe96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800fe9a:	681b      	ldr	r3, [r3, #0]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b086      	sub	sp, #24
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	607a      	str	r2, [r7, #4]
 800feb2:	603b      	str	r3, [r7, #0]
 800feb4:	460b      	mov	r3, r1
 800feb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800feb8:	7afb      	ldrb	r3, [r7, #11]
 800feba:	f003 020f 	and.w	r2, r3, #15
 800febe:	4613      	mov	r3, r2
 800fec0:	00db      	lsls	r3, r3, #3
 800fec2:	4413      	add	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	3338      	adds	r3, #56	; 0x38
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	4413      	add	r3, r2
 800fecc:	3304      	adds	r3, #4
 800fece:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	2200      	movs	r2, #0
 800fee0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	2201      	movs	r2, #1
 800fee6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fee8:	7afb      	ldrb	r3, [r7, #11]
 800feea:	f003 030f 	and.w	r3, r3, #15
 800feee:	b2da      	uxtb	r2, r3
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d102      	bne.n	800ff02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ff02:	7afb      	ldrb	r3, [r7, #11]
 800ff04:	f003 030f 	and.w	r3, r3, #15
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d109      	bne.n	800ff20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	6818      	ldr	r0, [r3, #0]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	691b      	ldr	r3, [r3, #16]
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	461a      	mov	r2, r3
 800ff18:	6979      	ldr	r1, [r7, #20]
 800ff1a:	f004 fe2b 	bl	8014b74 <USB_EP0StartXfer>
 800ff1e:	e008      	b.n	800ff32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6818      	ldr	r0, [r3, #0]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	b2db      	uxtb	r3, r3
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	6979      	ldr	r1, [r7, #20]
 800ff2e:	f004 fbd9 	bl	80146e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ff32:	2300      	movs	r3, #0
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3718      	adds	r7, #24
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	460b      	mov	r3, r1
 800ff46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ff48:	78fb      	ldrb	r3, [r7, #3]
 800ff4a:	f003 020f 	and.w	r2, r3, #15
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d901      	bls.n	800ff5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e050      	b.n	800fffc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ff5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	da0f      	bge.n	800ff82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ff62:	78fb      	ldrb	r3, [r7, #3]
 800ff64:	f003 020f 	and.w	r2, r3, #15
 800ff68:	4613      	mov	r3, r2
 800ff6a:	00db      	lsls	r3, r3, #3
 800ff6c:	4413      	add	r3, r2
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	3338      	adds	r3, #56	; 0x38
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	4413      	add	r3, r2
 800ff76:	3304      	adds	r3, #4
 800ff78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	705a      	strb	r2, [r3, #1]
 800ff80:	e00d      	b.n	800ff9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ff82:	78fa      	ldrb	r2, [r7, #3]
 800ff84:	4613      	mov	r3, r2
 800ff86:	00db      	lsls	r3, r3, #3
 800ff88:	4413      	add	r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	4413      	add	r3, r2
 800ff94:	3304      	adds	r3, #4
 800ff96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ffa4:	78fb      	ldrb	r3, [r7, #3]
 800ffa6:	f003 030f 	and.w	r3, r3, #15
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d101      	bne.n	800ffbe <HAL_PCD_EP_SetStall+0x82>
 800ffba:	2302      	movs	r3, #2
 800ffbc:	e01e      	b.n	800fffc <HAL_PCD_EP_SetStall+0xc0>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	68f9      	ldr	r1, [r7, #12]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f005 f869 	bl	80150a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ffd2:	78fb      	ldrb	r3, [r7, #3]
 800ffd4:	f003 030f 	and.w	r3, r3, #15
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d10a      	bne.n	800fff2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6818      	ldr	r0, [r3, #0]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	b2d9      	uxtb	r1, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ffec:	461a      	mov	r2, r3
 800ffee:	f005 fa59 	bl	80154a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	460b      	mov	r3, r1
 801000e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010010:	78fb      	ldrb	r3, [r7, #3]
 8010012:	f003 020f 	and.w	r2, r3, #15
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	429a      	cmp	r2, r3
 801001c:	d901      	bls.n	8010022 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	e042      	b.n	80100a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010026:	2b00      	cmp	r3, #0
 8010028:	da0f      	bge.n	801004a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801002a:	78fb      	ldrb	r3, [r7, #3]
 801002c:	f003 020f 	and.w	r2, r3, #15
 8010030:	4613      	mov	r3, r2
 8010032:	00db      	lsls	r3, r3, #3
 8010034:	4413      	add	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	3338      	adds	r3, #56	; 0x38
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	4413      	add	r3, r2
 801003e:	3304      	adds	r3, #4
 8010040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	705a      	strb	r2, [r3, #1]
 8010048:	e00f      	b.n	801006a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801004a:	78fb      	ldrb	r3, [r7, #3]
 801004c:	f003 020f 	and.w	r2, r3, #15
 8010050:	4613      	mov	r3, r2
 8010052:	00db      	lsls	r3, r3, #3
 8010054:	4413      	add	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	4413      	add	r3, r2
 8010060:	3304      	adds	r3, #4
 8010062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2200      	movs	r2, #0
 8010068:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2200      	movs	r2, #0
 801006e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010070:	78fb      	ldrb	r3, [r7, #3]
 8010072:	f003 030f 	and.w	r3, r3, #15
 8010076:	b2da      	uxtb	r2, r3
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010082:	2b01      	cmp	r3, #1
 8010084:	d101      	bne.n	801008a <HAL_PCD_EP_ClrStall+0x86>
 8010086:	2302      	movs	r3, #2
 8010088:	e00e      	b.n	80100a8 <HAL_PCD_EP_ClrStall+0xa4>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2201      	movs	r2, #1
 801008e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	68f9      	ldr	r1, [r7, #12]
 8010098:	4618      	mov	r0, r3
 801009a:	f005 f871 	bl	8015180 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3710      	adds	r7, #16
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80100bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	da0c      	bge.n	80100de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80100c4:	78fb      	ldrb	r3, [r7, #3]
 80100c6:	f003 020f 	and.w	r2, r3, #15
 80100ca:	4613      	mov	r3, r2
 80100cc:	00db      	lsls	r3, r3, #3
 80100ce:	4413      	add	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	3338      	adds	r3, #56	; 0x38
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	4413      	add	r3, r2
 80100d8:	3304      	adds	r3, #4
 80100da:	60fb      	str	r3, [r7, #12]
 80100dc:	e00c      	b.n	80100f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80100de:	78fb      	ldrb	r3, [r7, #3]
 80100e0:	f003 020f 	and.w	r2, r3, #15
 80100e4:	4613      	mov	r3, r2
 80100e6:	00db      	lsls	r3, r3, #3
 80100e8:	4413      	add	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	4413      	add	r3, r2
 80100f4:	3304      	adds	r3, #4
 80100f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	68f9      	ldr	r1, [r7, #12]
 80100fe:	4618      	mov	r0, r3
 8010100:	f004 fe90 	bl	8014e24 <USB_EPStopXfer>
 8010104:	4603      	mov	r3, r0
 8010106:	72fb      	strb	r3, [r7, #11]

  return ret;
 8010108:	7afb      	ldrb	r3, [r7, #11]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}

08010112 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b08a      	sub	sp, #40	; 0x28
 8010116:	af02      	add	r7, sp, #8
 8010118:	6078      	str	r0, [r7, #4]
 801011a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8010126:	683a      	ldr	r2, [r7, #0]
 8010128:	4613      	mov	r3, r2
 801012a:	00db      	lsls	r3, r3, #3
 801012c:	4413      	add	r3, r2
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	3338      	adds	r3, #56	; 0x38
 8010132:	687a      	ldr	r2, [r7, #4]
 8010134:	4413      	add	r3, r2
 8010136:	3304      	adds	r3, #4
 8010138:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6a1a      	ldr	r2, [r3, #32]
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	429a      	cmp	r2, r3
 8010144:	d901      	bls.n	801014a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8010146:	2301      	movs	r3, #1
 8010148:	e06c      	b.n	8010224 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	699a      	ldr	r2, [r3, #24]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	1ad3      	subs	r3, r2, r3
 8010154:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	69fa      	ldr	r2, [r7, #28]
 801015c:	429a      	cmp	r2, r3
 801015e:	d902      	bls.n	8010166 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	3303      	adds	r3, #3
 801016a:	089b      	lsrs	r3, r3, #2
 801016c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801016e:	e02b      	b.n	80101c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	699a      	ldr	r2, [r3, #24]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6a1b      	ldr	r3, [r3, #32]
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	69fa      	ldr	r2, [r7, #28]
 8010182:	429a      	cmp	r2, r3
 8010184:	d902      	bls.n	801018c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	3303      	adds	r3, #3
 8010190:	089b      	lsrs	r3, r3, #2
 8010192:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	6919      	ldr	r1, [r3, #16]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	b2da      	uxtb	r2, r3
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	4603      	mov	r3, r0
 80101aa:	6978      	ldr	r0, [r7, #20]
 80101ac:	f004 fee4 	bl	8014f78 <USB_WritePacket>

    ep->xfer_buff  += len;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	691a      	ldr	r2, [r3, #16]
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	441a      	add	r2, r3
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	6a1a      	ldr	r2, [r3, #32]
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	441a      	add	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	015a      	lsls	r2, r3, #5
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	4413      	add	r3, r2
 80101d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101d4:	699b      	ldr	r3, [r3, #24]
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	69ba      	ldr	r2, [r7, #24]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d809      	bhi.n	80101f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6a1a      	ldr	r2, [r3, #32]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d203      	bcs.n	80101f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	699b      	ldr	r3, [r3, #24]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1be      	bne.n	8010170 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	699a      	ldr	r2, [r3, #24]
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	6a1b      	ldr	r3, [r3, #32]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d811      	bhi.n	8010222 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	f003 030f 	and.w	r3, r3, #15
 8010204:	2201      	movs	r2, #1
 8010206:	fa02 f303 	lsl.w	r3, r2, r3
 801020a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	43db      	mvns	r3, r3
 8010218:	6939      	ldr	r1, [r7, #16]
 801021a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801021e:	4013      	ands	r3, r2
 8010220:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8010222:	2300      	movs	r3, #0
}
 8010224:	4618      	mov	r0, r3
 8010226:	3720      	adds	r7, #32
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b088      	sub	sp, #32
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	333c      	adds	r3, #60	; 0x3c
 8010244:	3304      	adds	r3, #4
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	015a      	lsls	r2, r3, #5
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	4413      	add	r3, r2
 8010252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d17b      	bne.n	801035a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	f003 0308 	and.w	r3, r3, #8
 8010268:	2b00      	cmp	r3, #0
 801026a:	d015      	beq.n	8010298 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	4a61      	ldr	r2, [pc, #388]	; (80103f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8010270:	4293      	cmp	r3, r2
 8010272:	f240 80b9 	bls.w	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801027c:	2b00      	cmp	r3, #0
 801027e:	f000 80b3 	beq.w	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	015a      	lsls	r2, r3, #5
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	4413      	add	r3, r2
 801028a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801028e:	461a      	mov	r2, r3
 8010290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010294:	6093      	str	r3, [r2, #8]
 8010296:	e0a7      	b.n	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	f003 0320 	and.w	r3, r3, #32
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d009      	beq.n	80102b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	015a      	lsls	r2, r3, #5
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	4413      	add	r3, r2
 80102aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ae:	461a      	mov	r2, r3
 80102b0:	2320      	movs	r3, #32
 80102b2:	6093      	str	r3, [r2, #8]
 80102b4:	e098      	b.n	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80102bc:	2b00      	cmp	r3, #0
 80102be:	f040 8093 	bne.w	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	4a4b      	ldr	r2, [pc, #300]	; (80103f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d90f      	bls.n	80102ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00a      	beq.n	80102ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	015a      	lsls	r2, r3, #5
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	4413      	add	r3, r2
 80102dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102e0:	461a      	mov	r2, r3
 80102e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102e6:	6093      	str	r3, [r2, #8]
 80102e8:	e07e      	b.n	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	4613      	mov	r3, r2
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	4413      	add	r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	4413      	add	r3, r2
 80102fc:	3304      	adds	r3, #4
 80102fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	69da      	ldr	r2, [r3, #28]
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	0159      	lsls	r1, r3, #5
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	440b      	add	r3, r1
 801030c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010310:	691b      	ldr	r3, [r3, #16]
 8010312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010316:	1ad2      	subs	r2, r2, r3
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d114      	bne.n	801034c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	699b      	ldr	r3, [r3, #24]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d109      	bne.n	801033e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6818      	ldr	r0, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010334:	461a      	mov	r2, r3
 8010336:	2101      	movs	r1, #1
 8010338:	f005 f8b4 	bl	80154a4 <USB_EP0_OutStart>
 801033c:	e006      	b.n	801034c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	691a      	ldr	r2, [r3, #16]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6a1b      	ldr	r3, [r3, #32]
 8010346:	441a      	add	r2, r3
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	b2db      	uxtb	r3, r3
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f00a fd50 	bl	801adf8 <HAL_PCD_DataOutStageCallback>
 8010358:	e046      	b.n	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	4a26      	ldr	r2, [pc, #152]	; (80103f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d124      	bne.n	80103ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00a      	beq.n	8010382 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	015a      	lsls	r2, r3, #5
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	4413      	add	r3, r2
 8010374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010378:	461a      	mov	r2, r3
 801037a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801037e:	6093      	str	r3, [r2, #8]
 8010380:	e032      	b.n	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	f003 0320 	and.w	r3, r3, #32
 8010388:	2b00      	cmp	r3, #0
 801038a:	d008      	beq.n	801039e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	015a      	lsls	r2, r3, #5
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	4413      	add	r3, r2
 8010394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010398:	461a      	mov	r2, r3
 801039a:	2320      	movs	r3, #32
 801039c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	4619      	mov	r1, r3
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f00a fd27 	bl	801adf8 <HAL_PCD_DataOutStageCallback>
 80103aa:	e01d      	b.n	80103e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d114      	bne.n	80103dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80103b2:	6879      	ldr	r1, [r7, #4]
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	4613      	mov	r3, r2
 80103b8:	00db      	lsls	r3, r3, #3
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	440b      	add	r3, r1
 80103c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d108      	bne.n	80103dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6818      	ldr	r0, [r3, #0]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80103d4:	461a      	mov	r2, r3
 80103d6:	2100      	movs	r1, #0
 80103d8:	f005 f864 	bl	80154a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f00a fd08 	bl	801adf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3720      	adds	r7, #32
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	4f54300a 	.word	0x4f54300a
 80103f8:	4f54310a 	.word	0x4f54310a

080103fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b086      	sub	sp, #24
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	333c      	adds	r3, #60	; 0x3c
 8010414:	3304      	adds	r3, #4
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	015a      	lsls	r2, r3, #5
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	4413      	add	r3, r2
 8010422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	4a15      	ldr	r2, [pc, #84]	; (8010484 <PCD_EP_OutSetupPacket_int+0x88>)
 801042e:	4293      	cmp	r3, r2
 8010430:	d90e      	bls.n	8010450 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010438:	2b00      	cmp	r3, #0
 801043a:	d009      	beq.n	8010450 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	4413      	add	r3, r2
 8010444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010448:	461a      	mov	r2, r3
 801044a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801044e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f00a fcbf 	bl	801add4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	4a0a      	ldr	r2, [pc, #40]	; (8010484 <PCD_EP_OutSetupPacket_int+0x88>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d90c      	bls.n	8010478 <PCD_EP_OutSetupPacket_int+0x7c>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	2b01      	cmp	r3, #1
 8010464:	d108      	bne.n	8010478 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6818      	ldr	r0, [r3, #0]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010470:	461a      	mov	r2, r3
 8010472:	2101      	movs	r1, #1
 8010474:	f005 f816 	bl	80154a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8010478:	2300      	movs	r3, #0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3718      	adds	r7, #24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	4f54300a 	.word	0x4f54300a

08010488 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
 8010494:	4613      	mov	r3, r2
 8010496:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80104a0:	78fb      	ldrb	r3, [r7, #3]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d107      	bne.n	80104b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80104a6:	883b      	ldrh	r3, [r7, #0]
 80104a8:	0419      	lsls	r1, r3, #16
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	430a      	orrs	r2, r1
 80104b2:	629a      	str	r2, [r3, #40]	; 0x28
 80104b4:	e028      	b.n	8010508 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104bc:	0c1b      	lsrs	r3, r3, #16
 80104be:	68ba      	ldr	r2, [r7, #8]
 80104c0:	4413      	add	r3, r2
 80104c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80104c4:	2300      	movs	r3, #0
 80104c6:	73fb      	strb	r3, [r7, #15]
 80104c8:	e00d      	b.n	80104e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	3340      	adds	r3, #64	; 0x40
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	0c1b      	lsrs	r3, r3, #16
 80104da:	68ba      	ldr	r2, [r7, #8]
 80104dc:	4413      	add	r3, r2
 80104de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80104e0:	7bfb      	ldrb	r3, [r7, #15]
 80104e2:	3301      	adds	r3, #1
 80104e4:	73fb      	strb	r3, [r7, #15]
 80104e6:	7bfa      	ldrb	r2, [r7, #15]
 80104e8:	78fb      	ldrb	r3, [r7, #3]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d3ec      	bcc.n	80104ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80104f0:	883b      	ldrh	r3, [r7, #0]
 80104f2:	0418      	lsls	r0, r3, #16
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6819      	ldr	r1, [r3, #0]
 80104f8:	78fb      	ldrb	r3, [r7, #3]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	68ba      	ldr	r2, [r7, #8]
 80104fe:	4302      	orrs	r2, r0
 8010500:	3340      	adds	r3, #64	; 0x40
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	440b      	add	r3, r1
 8010506:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3714      	adds	r7, #20
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr

08010516 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8010516:	b480      	push	{r7}
 8010518:	b083      	sub	sp, #12
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
 801051e:	460b      	mov	r3, r1
 8010520:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	887a      	ldrh	r2, [r7, #2]
 8010528:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801052a:	2300      	movs	r3, #0
}
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	460b      	mov	r3, r1
 8010542:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8010544:	bf00      	nop
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr

08010550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b086      	sub	sp, #24
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d101      	bne.n	8010562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801055e:	2301      	movs	r3, #1
 8010560:	e267      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f003 0301 	and.w	r3, r3, #1
 801056a:	2b00      	cmp	r3, #0
 801056c:	d075      	beq.n	801065a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801056e:	4b88      	ldr	r3, [pc, #544]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f003 030c 	and.w	r3, r3, #12
 8010576:	2b04      	cmp	r3, #4
 8010578:	d00c      	beq.n	8010594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801057a:	4b85      	ldr	r3, [pc, #532]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010582:	2b08      	cmp	r3, #8
 8010584:	d112      	bne.n	80105ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010586:	4b82      	ldr	r3, [pc, #520]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801058e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010592:	d10b      	bne.n	80105ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010594:	4b7e      	ldr	r3, [pc, #504]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801059c:	2b00      	cmp	r3, #0
 801059e:	d05b      	beq.n	8010658 <HAL_RCC_OscConfig+0x108>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d157      	bne.n	8010658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	e242      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105b4:	d106      	bne.n	80105c4 <HAL_RCC_OscConfig+0x74>
 80105b6:	4b76      	ldr	r3, [pc, #472]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	4a75      	ldr	r2, [pc, #468]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105c0:	6013      	str	r3, [r2, #0]
 80105c2:	e01d      	b.n	8010600 <HAL_RCC_OscConfig+0xb0>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105cc:	d10c      	bne.n	80105e8 <HAL_RCC_OscConfig+0x98>
 80105ce:	4b70      	ldr	r3, [pc, #448]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	4a6f      	ldr	r2, [pc, #444]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80105d8:	6013      	str	r3, [r2, #0]
 80105da:	4b6d      	ldr	r3, [pc, #436]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a6c      	ldr	r2, [pc, #432]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105e4:	6013      	str	r3, [r2, #0]
 80105e6:	e00b      	b.n	8010600 <HAL_RCC_OscConfig+0xb0>
 80105e8:	4b69      	ldr	r3, [pc, #420]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a68      	ldr	r2, [pc, #416]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80105f2:	6013      	str	r3, [r2, #0]
 80105f4:	4b66      	ldr	r3, [pc, #408]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	4a65      	ldr	r2, [pc, #404]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80105fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80105fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d013      	beq.n	8010630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010608:	f7fa ffc2 	bl	800b590 <HAL_GetTick>
 801060c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801060e:	e008      	b.n	8010622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010610:	f7fa ffbe 	bl	800b590 <HAL_GetTick>
 8010614:	4602      	mov	r2, r0
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	2b64      	cmp	r3, #100	; 0x64
 801061c:	d901      	bls.n	8010622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801061e:	2303      	movs	r3, #3
 8010620:	e207      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010622:	4b5b      	ldr	r3, [pc, #364]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801062a:	2b00      	cmp	r3, #0
 801062c:	d0f0      	beq.n	8010610 <HAL_RCC_OscConfig+0xc0>
 801062e:	e014      	b.n	801065a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010630:	f7fa ffae 	bl	800b590 <HAL_GetTick>
 8010634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010636:	e008      	b.n	801064a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010638:	f7fa ffaa 	bl	800b590 <HAL_GetTick>
 801063c:	4602      	mov	r2, r0
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	2b64      	cmp	r3, #100	; 0x64
 8010644:	d901      	bls.n	801064a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010646:	2303      	movs	r3, #3
 8010648:	e1f3      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801064a:	4b51      	ldr	r3, [pc, #324]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010652:	2b00      	cmp	r3, #0
 8010654:	d1f0      	bne.n	8010638 <HAL_RCC_OscConfig+0xe8>
 8010656:	e000      	b.n	801065a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f003 0302 	and.w	r3, r3, #2
 8010662:	2b00      	cmp	r3, #0
 8010664:	d063      	beq.n	801072e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010666:	4b4a      	ldr	r3, [pc, #296]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010668:	689b      	ldr	r3, [r3, #8]
 801066a:	f003 030c 	and.w	r3, r3, #12
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00b      	beq.n	801068a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010672:	4b47      	ldr	r3, [pc, #284]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010674:	689b      	ldr	r3, [r3, #8]
 8010676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801067a:	2b08      	cmp	r3, #8
 801067c:	d11c      	bne.n	80106b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801067e:	4b44      	ldr	r3, [pc, #272]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d116      	bne.n	80106b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801068a:	4b41      	ldr	r3, [pc, #260]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f003 0302 	and.w	r3, r3, #2
 8010692:	2b00      	cmp	r3, #0
 8010694:	d005      	beq.n	80106a2 <HAL_RCC_OscConfig+0x152>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	2b01      	cmp	r3, #1
 801069c:	d001      	beq.n	80106a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801069e:	2301      	movs	r3, #1
 80106a0:	e1c7      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80106a2:	4b3b      	ldr	r3, [pc, #236]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	00db      	lsls	r3, r3, #3
 80106b0:	4937      	ldr	r1, [pc, #220]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80106b2:	4313      	orrs	r3, r2
 80106b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80106b6:	e03a      	b.n	801072e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	68db      	ldr	r3, [r3, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d020      	beq.n	8010702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80106c0:	4b34      	ldr	r3, [pc, #208]	; (8010794 <HAL_RCC_OscConfig+0x244>)
 80106c2:	2201      	movs	r2, #1
 80106c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106c6:	f7fa ff63 	bl	800b590 <HAL_GetTick>
 80106ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80106cc:	e008      	b.n	80106e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80106ce:	f7fa ff5f 	bl	800b590 <HAL_GetTick>
 80106d2:	4602      	mov	r2, r0
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	2b02      	cmp	r3, #2
 80106da:	d901      	bls.n	80106e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80106dc:	2303      	movs	r3, #3
 80106de:	e1a8      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80106e0:	4b2b      	ldr	r3, [pc, #172]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f003 0302 	and.w	r3, r3, #2
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d0f0      	beq.n	80106ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80106ec:	4b28      	ldr	r3, [pc, #160]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	691b      	ldr	r3, [r3, #16]
 80106f8:	00db      	lsls	r3, r3, #3
 80106fa:	4925      	ldr	r1, [pc, #148]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 80106fc:	4313      	orrs	r3, r2
 80106fe:	600b      	str	r3, [r1, #0]
 8010700:	e015      	b.n	801072e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010702:	4b24      	ldr	r3, [pc, #144]	; (8010794 <HAL_RCC_OscConfig+0x244>)
 8010704:	2200      	movs	r2, #0
 8010706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010708:	f7fa ff42 	bl	800b590 <HAL_GetTick>
 801070c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801070e:	e008      	b.n	8010722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010710:	f7fa ff3e 	bl	800b590 <HAL_GetTick>
 8010714:	4602      	mov	r2, r0
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	1ad3      	subs	r3, r2, r3
 801071a:	2b02      	cmp	r3, #2
 801071c:	d901      	bls.n	8010722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801071e:	2303      	movs	r3, #3
 8010720:	e187      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010722:	4b1b      	ldr	r3, [pc, #108]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f003 0302 	and.w	r3, r3, #2
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1f0      	bne.n	8010710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f003 0308 	and.w	r3, r3, #8
 8010736:	2b00      	cmp	r3, #0
 8010738:	d036      	beq.n	80107a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	695b      	ldr	r3, [r3, #20]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d016      	beq.n	8010770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010742:	4b15      	ldr	r3, [pc, #84]	; (8010798 <HAL_RCC_OscConfig+0x248>)
 8010744:	2201      	movs	r2, #1
 8010746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010748:	f7fa ff22 	bl	800b590 <HAL_GetTick>
 801074c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801074e:	e008      	b.n	8010762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010750:	f7fa ff1e 	bl	800b590 <HAL_GetTick>
 8010754:	4602      	mov	r2, r0
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	2b02      	cmp	r3, #2
 801075c:	d901      	bls.n	8010762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801075e:	2303      	movs	r3, #3
 8010760:	e167      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010762:	4b0b      	ldr	r3, [pc, #44]	; (8010790 <HAL_RCC_OscConfig+0x240>)
 8010764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010766:	f003 0302 	and.w	r3, r3, #2
 801076a:	2b00      	cmp	r3, #0
 801076c:	d0f0      	beq.n	8010750 <HAL_RCC_OscConfig+0x200>
 801076e:	e01b      	b.n	80107a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010770:	4b09      	ldr	r3, [pc, #36]	; (8010798 <HAL_RCC_OscConfig+0x248>)
 8010772:	2200      	movs	r2, #0
 8010774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010776:	f7fa ff0b 	bl	800b590 <HAL_GetTick>
 801077a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801077c:	e00e      	b.n	801079c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801077e:	f7fa ff07 	bl	800b590 <HAL_GetTick>
 8010782:	4602      	mov	r2, r0
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	2b02      	cmp	r3, #2
 801078a:	d907      	bls.n	801079c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801078c:	2303      	movs	r3, #3
 801078e:	e150      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
 8010790:	40023800 	.word	0x40023800
 8010794:	42470000 	.word	0x42470000
 8010798:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801079c:	4b88      	ldr	r3, [pc, #544]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 801079e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107a0:	f003 0302 	and.w	r3, r3, #2
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d1ea      	bne.n	801077e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f003 0304 	and.w	r3, r3, #4
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 8097 	beq.w	80108e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80107b6:	2300      	movs	r3, #0
 80107b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80107ba:	4b81      	ldr	r3, [pc, #516]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80107bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d10f      	bne.n	80107e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80107c6:	2300      	movs	r3, #0
 80107c8:	60bb      	str	r3, [r7, #8]
 80107ca:	4b7d      	ldr	r3, [pc, #500]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80107cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ce:	4a7c      	ldr	r2, [pc, #496]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80107d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107d4:	6413      	str	r3, [r2, #64]	; 0x40
 80107d6:	4b7a      	ldr	r3, [pc, #488]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80107d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107de:	60bb      	str	r3, [r7, #8]
 80107e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80107e2:	2301      	movs	r3, #1
 80107e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80107e6:	4b77      	ldr	r3, [pc, #476]	; (80109c4 <HAL_RCC_OscConfig+0x474>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d118      	bne.n	8010824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80107f2:	4b74      	ldr	r3, [pc, #464]	; (80109c4 <HAL_RCC_OscConfig+0x474>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4a73      	ldr	r2, [pc, #460]	; (80109c4 <HAL_RCC_OscConfig+0x474>)
 80107f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80107fe:	f7fa fec7 	bl	800b590 <HAL_GetTick>
 8010802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010804:	e008      	b.n	8010818 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010806:	f7fa fec3 	bl	800b590 <HAL_GetTick>
 801080a:	4602      	mov	r2, r0
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	2b02      	cmp	r3, #2
 8010812:	d901      	bls.n	8010818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8010814:	2303      	movs	r3, #3
 8010816:	e10c      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010818:	4b6a      	ldr	r3, [pc, #424]	; (80109c4 <HAL_RCC_OscConfig+0x474>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010820:	2b00      	cmp	r3, #0
 8010822:	d0f0      	beq.n	8010806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	2b01      	cmp	r3, #1
 801082a:	d106      	bne.n	801083a <HAL_RCC_OscConfig+0x2ea>
 801082c:	4b64      	ldr	r3, [pc, #400]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 801082e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010830:	4a63      	ldr	r2, [pc, #396]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010832:	f043 0301 	orr.w	r3, r3, #1
 8010836:	6713      	str	r3, [r2, #112]	; 0x70
 8010838:	e01c      	b.n	8010874 <HAL_RCC_OscConfig+0x324>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	2b05      	cmp	r3, #5
 8010840:	d10c      	bne.n	801085c <HAL_RCC_OscConfig+0x30c>
 8010842:	4b5f      	ldr	r3, [pc, #380]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010846:	4a5e      	ldr	r2, [pc, #376]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010848:	f043 0304 	orr.w	r3, r3, #4
 801084c:	6713      	str	r3, [r2, #112]	; 0x70
 801084e:	4b5c      	ldr	r3, [pc, #368]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010852:	4a5b      	ldr	r2, [pc, #364]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010854:	f043 0301 	orr.w	r3, r3, #1
 8010858:	6713      	str	r3, [r2, #112]	; 0x70
 801085a:	e00b      	b.n	8010874 <HAL_RCC_OscConfig+0x324>
 801085c:	4b58      	ldr	r3, [pc, #352]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 801085e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010860:	4a57      	ldr	r2, [pc, #348]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010862:	f023 0301 	bic.w	r3, r3, #1
 8010866:	6713      	str	r3, [r2, #112]	; 0x70
 8010868:	4b55      	ldr	r3, [pc, #340]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 801086a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801086c:	4a54      	ldr	r2, [pc, #336]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 801086e:	f023 0304 	bic.w	r3, r3, #4
 8010872:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d015      	beq.n	80108a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801087c:	f7fa fe88 	bl	800b590 <HAL_GetTick>
 8010880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010882:	e00a      	b.n	801089a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010884:	f7fa fe84 	bl	800b590 <HAL_GetTick>
 8010888:	4602      	mov	r2, r0
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	1ad3      	subs	r3, r2, r3
 801088e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010892:	4293      	cmp	r3, r2
 8010894:	d901      	bls.n	801089a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8010896:	2303      	movs	r3, #3
 8010898:	e0cb      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801089a:	4b49      	ldr	r3, [pc, #292]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 801089c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801089e:	f003 0302 	and.w	r3, r3, #2
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d0ee      	beq.n	8010884 <HAL_RCC_OscConfig+0x334>
 80108a6:	e014      	b.n	80108d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80108a8:	f7fa fe72 	bl	800b590 <HAL_GetTick>
 80108ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80108ae:	e00a      	b.n	80108c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80108b0:	f7fa fe6e 	bl	800b590 <HAL_GetTick>
 80108b4:	4602      	mov	r2, r0
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80108be:	4293      	cmp	r3, r2
 80108c0:	d901      	bls.n	80108c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80108c2:	2303      	movs	r3, #3
 80108c4:	e0b5      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80108c6:	4b3e      	ldr	r3, [pc, #248]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80108c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108ca:	f003 0302 	and.w	r3, r3, #2
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1ee      	bne.n	80108b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80108d2:	7dfb      	ldrb	r3, [r7, #23]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d105      	bne.n	80108e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80108d8:	4b39      	ldr	r3, [pc, #228]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80108da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108dc:	4a38      	ldr	r2, [pc, #224]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80108de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80108e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	699b      	ldr	r3, [r3, #24]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f000 80a1 	beq.w	8010a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80108ee:	4b34      	ldr	r3, [pc, #208]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	f003 030c 	and.w	r3, r3, #12
 80108f6:	2b08      	cmp	r3, #8
 80108f8:	d05c      	beq.n	80109b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	2b02      	cmp	r3, #2
 8010900:	d141      	bne.n	8010986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010902:	4b31      	ldr	r3, [pc, #196]	; (80109c8 <HAL_RCC_OscConfig+0x478>)
 8010904:	2200      	movs	r2, #0
 8010906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010908:	f7fa fe42 	bl	800b590 <HAL_GetTick>
 801090c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801090e:	e008      	b.n	8010922 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010910:	f7fa fe3e 	bl	800b590 <HAL_GetTick>
 8010914:	4602      	mov	r2, r0
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	2b02      	cmp	r3, #2
 801091c:	d901      	bls.n	8010922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801091e:	2303      	movs	r3, #3
 8010920:	e087      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010922:	4b27      	ldr	r3, [pc, #156]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1f0      	bne.n	8010910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	69da      	ldr	r2, [r3, #28]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6a1b      	ldr	r3, [r3, #32]
 8010936:	431a      	orrs	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093c:	019b      	lsls	r3, r3, #6
 801093e:	431a      	orrs	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010944:	085b      	lsrs	r3, r3, #1
 8010946:	3b01      	subs	r3, #1
 8010948:	041b      	lsls	r3, r3, #16
 801094a:	431a      	orrs	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010950:	061b      	lsls	r3, r3, #24
 8010952:	491b      	ldr	r1, [pc, #108]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 8010954:	4313      	orrs	r3, r2
 8010956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010958:	4b1b      	ldr	r3, [pc, #108]	; (80109c8 <HAL_RCC_OscConfig+0x478>)
 801095a:	2201      	movs	r2, #1
 801095c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801095e:	f7fa fe17 	bl	800b590 <HAL_GetTick>
 8010962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010964:	e008      	b.n	8010978 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010966:	f7fa fe13 	bl	800b590 <HAL_GetTick>
 801096a:	4602      	mov	r2, r0
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	2b02      	cmp	r3, #2
 8010972:	d901      	bls.n	8010978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010974:	2303      	movs	r3, #3
 8010976:	e05c      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010978:	4b11      	ldr	r3, [pc, #68]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010980:	2b00      	cmp	r3, #0
 8010982:	d0f0      	beq.n	8010966 <HAL_RCC_OscConfig+0x416>
 8010984:	e054      	b.n	8010a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010986:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <HAL_RCC_OscConfig+0x478>)
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801098c:	f7fa fe00 	bl	800b590 <HAL_GetTick>
 8010990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010992:	e008      	b.n	80109a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010994:	f7fa fdfc 	bl	800b590 <HAL_GetTick>
 8010998:	4602      	mov	r2, r0
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	1ad3      	subs	r3, r2, r3
 801099e:	2b02      	cmp	r3, #2
 80109a0:	d901      	bls.n	80109a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80109a2:	2303      	movs	r3, #3
 80109a4:	e045      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109a6:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <HAL_RCC_OscConfig+0x470>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1f0      	bne.n	8010994 <HAL_RCC_OscConfig+0x444>
 80109b2:	e03d      	b.n	8010a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	699b      	ldr	r3, [r3, #24]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d107      	bne.n	80109cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80109bc:	2301      	movs	r3, #1
 80109be:	e038      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
 80109c0:	40023800 	.word	0x40023800
 80109c4:	40007000 	.word	0x40007000
 80109c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80109cc:	4b1b      	ldr	r3, [pc, #108]	; (8010a3c <HAL_RCC_OscConfig+0x4ec>)
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	699b      	ldr	r3, [r3, #24]
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d028      	beq.n	8010a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d121      	bne.n	8010a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d11a      	bne.n	8010a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80109fc:	4013      	ands	r3, r2
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d111      	bne.n	8010a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a12:	085b      	lsrs	r3, r3, #1
 8010a14:	3b01      	subs	r3, #1
 8010a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d107      	bne.n	8010a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d001      	beq.n	8010a30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e000      	b.n	8010a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3718      	adds	r7, #24
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	40023800 	.word	0x40023800

08010a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d101      	bne.n	8010a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010a50:	2301      	movs	r3, #1
 8010a52:	e0cc      	b.n	8010bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010a54:	4b68      	ldr	r3, [pc, #416]	; (8010bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f003 0307 	and.w	r3, r3, #7
 8010a5c:	683a      	ldr	r2, [r7, #0]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d90c      	bls.n	8010a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a62:	4b65      	ldr	r3, [pc, #404]	; (8010bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8010a64:	683a      	ldr	r2, [r7, #0]
 8010a66:	b2d2      	uxtb	r2, r2
 8010a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010a6a:	4b63      	ldr	r3, [pc, #396]	; (8010bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f003 0307 	and.w	r3, r3, #7
 8010a72:	683a      	ldr	r2, [r7, #0]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d001      	beq.n	8010a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e0b8      	b.n	8010bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f003 0302 	and.w	r3, r3, #2
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d020      	beq.n	8010aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f003 0304 	and.w	r3, r3, #4
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d005      	beq.n	8010aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010a94:	4b59      	ldr	r3, [pc, #356]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	4a58      	ldr	r2, [pc, #352]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f003 0308 	and.w	r3, r3, #8
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d005      	beq.n	8010ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010aac:	4b53      	ldr	r3, [pc, #332]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	4a52      	ldr	r2, [pc, #328]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010ab8:	4b50      	ldr	r3, [pc, #320]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	494d      	ldr	r1, [pc, #308]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f003 0301 	and.w	r3, r3, #1
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d044      	beq.n	8010b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	2b01      	cmp	r3, #1
 8010adc:	d107      	bne.n	8010aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ade:	4b47      	ldr	r3, [pc, #284]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d119      	bne.n	8010b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010aea:	2301      	movs	r3, #1
 8010aec:	e07f      	b.n	8010bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	d003      	beq.n	8010afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010afa:	2b03      	cmp	r3, #3
 8010afc:	d107      	bne.n	8010b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010afe:	4b3f      	ldr	r3, [pc, #252]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d109      	bne.n	8010b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e06f      	b.n	8010bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010b0e:	4b3b      	ldr	r3, [pc, #236]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f003 0302 	and.w	r3, r3, #2
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d101      	bne.n	8010b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e067      	b.n	8010bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010b1e:	4b37      	ldr	r3, [pc, #220]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	f023 0203 	bic.w	r2, r3, #3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	4934      	ldr	r1, [pc, #208]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010b2c:	4313      	orrs	r3, r2
 8010b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010b30:	f7fa fd2e 	bl	800b590 <HAL_GetTick>
 8010b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b36:	e00a      	b.n	8010b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010b38:	f7fa fd2a 	bl	800b590 <HAL_GetTick>
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	1ad3      	subs	r3, r2, r3
 8010b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d901      	bls.n	8010b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	e04f      	b.n	8010bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010b4e:	4b2b      	ldr	r3, [pc, #172]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	f003 020c 	and.w	r2, r3, #12
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d1eb      	bne.n	8010b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010b60:	4b25      	ldr	r3, [pc, #148]	; (8010bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f003 0307 	and.w	r3, r3, #7
 8010b68:	683a      	ldr	r2, [r7, #0]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d20c      	bcs.n	8010b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b6e:	4b22      	ldr	r3, [pc, #136]	; (8010bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8010b70:	683a      	ldr	r2, [r7, #0]
 8010b72:	b2d2      	uxtb	r2, r2
 8010b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b76:	4b20      	ldr	r3, [pc, #128]	; (8010bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f003 0307 	and.w	r3, r3, #7
 8010b7e:	683a      	ldr	r2, [r7, #0]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d001      	beq.n	8010b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010b84:	2301      	movs	r3, #1
 8010b86:	e032      	b.n	8010bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f003 0304 	and.w	r3, r3, #4
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d008      	beq.n	8010ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010b94:	4b19      	ldr	r3, [pc, #100]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	4916      	ldr	r1, [pc, #88]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f003 0308 	and.w	r3, r3, #8
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d009      	beq.n	8010bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010bb2:	4b12      	ldr	r3, [pc, #72]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	00db      	lsls	r3, r3, #3
 8010bc0:	490e      	ldr	r1, [pc, #56]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010bc6:	f000 f821 	bl	8010c0c <HAL_RCC_GetSysClockFreq>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	4b0b      	ldr	r3, [pc, #44]	; (8010bfc <HAL_RCC_ClockConfig+0x1bc>)
 8010bce:	689b      	ldr	r3, [r3, #8]
 8010bd0:	091b      	lsrs	r3, r3, #4
 8010bd2:	f003 030f 	and.w	r3, r3, #15
 8010bd6:	490a      	ldr	r1, [pc, #40]	; (8010c00 <HAL_RCC_ClockConfig+0x1c0>)
 8010bd8:	5ccb      	ldrb	r3, [r1, r3]
 8010bda:	fa22 f303 	lsr.w	r3, r2, r3
 8010bde:	4a09      	ldr	r2, [pc, #36]	; (8010c04 <HAL_RCC_ClockConfig+0x1c4>)
 8010be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010be2:	4b09      	ldr	r3, [pc, #36]	; (8010c08 <HAL_RCC_ClockConfig+0x1c8>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7f3 f8f8 	bl	8003ddc <HAL_InitTick>

  return HAL_OK;
 8010bec:	2300      	movs	r3, #0
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3710      	adds	r7, #16
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	40023c00 	.word	0x40023c00
 8010bfc:	40023800 	.word	0x40023800
 8010c00:	08022b6c 	.word	0x08022b6c
 8010c04:	20000004 	.word	0x20000004
 8010c08:	20000014 	.word	0x20000014

08010c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c10:	b090      	sub	sp, #64	; 0x40
 8010c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010c14:	2300      	movs	r3, #0
 8010c16:	637b      	str	r3, [r7, #52]	; 0x34
 8010c18:	2300      	movs	r3, #0
 8010c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8010c20:	2300      	movs	r3, #0
 8010c22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010c24:	4b59      	ldr	r3, [pc, #356]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	f003 030c 	and.w	r3, r3, #12
 8010c2c:	2b08      	cmp	r3, #8
 8010c2e:	d00d      	beq.n	8010c4c <HAL_RCC_GetSysClockFreq+0x40>
 8010c30:	2b08      	cmp	r3, #8
 8010c32:	f200 80a1 	bhi.w	8010d78 <HAL_RCC_GetSysClockFreq+0x16c>
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d002      	beq.n	8010c40 <HAL_RCC_GetSysClockFreq+0x34>
 8010c3a:	2b04      	cmp	r3, #4
 8010c3c:	d003      	beq.n	8010c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8010c3e:	e09b      	b.n	8010d78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010c40:	4b53      	ldr	r3, [pc, #332]	; (8010d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8010c42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8010c44:	e09b      	b.n	8010d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010c46:	4b53      	ldr	r3, [pc, #332]	; (8010d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8010c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010c4a:	e098      	b.n	8010d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010c4c:	4b4f      	ldr	r3, [pc, #316]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010c56:	4b4d      	ldr	r3, [pc, #308]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d028      	beq.n	8010cb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010c62:	4b4a      	ldr	r3, [pc, #296]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	099b      	lsrs	r3, r3, #6
 8010c68:	2200      	movs	r2, #0
 8010c6a:	623b      	str	r3, [r7, #32]
 8010c6c:	627a      	str	r2, [r7, #36]	; 0x24
 8010c6e:	6a3b      	ldr	r3, [r7, #32]
 8010c70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8010c74:	2100      	movs	r1, #0
 8010c76:	4b47      	ldr	r3, [pc, #284]	; (8010d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8010c78:	fb03 f201 	mul.w	r2, r3, r1
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	fb00 f303 	mul.w	r3, r0, r3
 8010c82:	4413      	add	r3, r2
 8010c84:	4a43      	ldr	r2, [pc, #268]	; (8010d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8010c86:	fba0 1202 	umull	r1, r2, r0, r2
 8010c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010c8c:	460a      	mov	r2, r1
 8010c8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8010c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c92:	4413      	add	r3, r2
 8010c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c98:	2200      	movs	r2, #0
 8010c9a:	61bb      	str	r3, [r7, #24]
 8010c9c:	61fa      	str	r2, [r7, #28]
 8010c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010ca2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010ca6:	f7ef ffef 	bl	8000c88 <__aeabi_uldivmod>
 8010caa:	4602      	mov	r2, r0
 8010cac:	460b      	mov	r3, r1
 8010cae:	4613      	mov	r3, r2
 8010cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb2:	e053      	b.n	8010d5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010cb4:	4b35      	ldr	r3, [pc, #212]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	099b      	lsrs	r3, r3, #6
 8010cba:	2200      	movs	r2, #0
 8010cbc:	613b      	str	r3, [r7, #16]
 8010cbe:	617a      	str	r2, [r7, #20]
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8010cc6:	f04f 0b00 	mov.w	fp, #0
 8010cca:	4652      	mov	r2, sl
 8010ccc:	465b      	mov	r3, fp
 8010cce:	f04f 0000 	mov.w	r0, #0
 8010cd2:	f04f 0100 	mov.w	r1, #0
 8010cd6:	0159      	lsls	r1, r3, #5
 8010cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010cdc:	0150      	lsls	r0, r2, #5
 8010cde:	4602      	mov	r2, r0
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	ebb2 080a 	subs.w	r8, r2, sl
 8010ce6:	eb63 090b 	sbc.w	r9, r3, fp
 8010cea:	f04f 0200 	mov.w	r2, #0
 8010cee:	f04f 0300 	mov.w	r3, #0
 8010cf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8010cf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8010cfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8010cfe:	ebb2 0408 	subs.w	r4, r2, r8
 8010d02:	eb63 0509 	sbc.w	r5, r3, r9
 8010d06:	f04f 0200 	mov.w	r2, #0
 8010d0a:	f04f 0300 	mov.w	r3, #0
 8010d0e:	00eb      	lsls	r3, r5, #3
 8010d10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010d14:	00e2      	lsls	r2, r4, #3
 8010d16:	4614      	mov	r4, r2
 8010d18:	461d      	mov	r5, r3
 8010d1a:	eb14 030a 	adds.w	r3, r4, sl
 8010d1e:	603b      	str	r3, [r7, #0]
 8010d20:	eb45 030b 	adc.w	r3, r5, fp
 8010d24:	607b      	str	r3, [r7, #4]
 8010d26:	f04f 0200 	mov.w	r2, #0
 8010d2a:	f04f 0300 	mov.w	r3, #0
 8010d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010d32:	4629      	mov	r1, r5
 8010d34:	028b      	lsls	r3, r1, #10
 8010d36:	4621      	mov	r1, r4
 8010d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010d3c:	4621      	mov	r1, r4
 8010d3e:	028a      	lsls	r2, r1, #10
 8010d40:	4610      	mov	r0, r2
 8010d42:	4619      	mov	r1, r3
 8010d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d46:	2200      	movs	r2, #0
 8010d48:	60bb      	str	r3, [r7, #8]
 8010d4a:	60fa      	str	r2, [r7, #12]
 8010d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010d50:	f7ef ff9a 	bl	8000c88 <__aeabi_uldivmod>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	4613      	mov	r3, r2
 8010d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010d5c:	4b0b      	ldr	r3, [pc, #44]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	0c1b      	lsrs	r3, r3, #16
 8010d62:	f003 0303 	and.w	r3, r3, #3
 8010d66:	3301      	adds	r3, #1
 8010d68:	005b      	lsls	r3, r3, #1
 8010d6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8010d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010d76:	e002      	b.n	8010d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8010d7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8010d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3740      	adds	r7, #64	; 0x40
 8010d84:	46bd      	mov	sp, r7
 8010d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010d8a:	bf00      	nop
 8010d8c:	40023800 	.word	0x40023800
 8010d90:	00f42400 	.word	0x00f42400
 8010d94:	00b71b00 	.word	0x00b71b00

08010d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010d9c:	4b03      	ldr	r3, [pc, #12]	; (8010dac <HAL_RCC_GetHCLKFreq+0x14>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	20000004 	.word	0x20000004

08010db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010db4:	f7ff fff0 	bl	8010d98 <HAL_RCC_GetHCLKFreq>
 8010db8:	4602      	mov	r2, r0
 8010dba:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	0a9b      	lsrs	r3, r3, #10
 8010dc0:	f003 0307 	and.w	r3, r3, #7
 8010dc4:	4903      	ldr	r1, [pc, #12]	; (8010dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010dc6:	5ccb      	ldrb	r3, [r1, r3]
 8010dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	40023800 	.word	0x40023800
 8010dd4:	08022b7c 	.word	0x08022b7c

08010dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010ddc:	f7ff ffdc 	bl	8010d98 <HAL_RCC_GetHCLKFreq>
 8010de0:	4602      	mov	r2, r0
 8010de2:	4b05      	ldr	r3, [pc, #20]	; (8010df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	0b5b      	lsrs	r3, r3, #13
 8010de8:	f003 0307 	and.w	r3, r3, #7
 8010dec:	4903      	ldr	r1, [pc, #12]	; (8010dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8010dee:	5ccb      	ldrb	r3, [r1, r3]
 8010df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	40023800 	.word	0x40023800
 8010dfc:	08022b7c 	.word	0x08022b7c

08010e00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	220f      	movs	r2, #15
 8010e0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010e10:	4b12      	ldr	r3, [pc, #72]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e12:	689b      	ldr	r3, [r3, #8]
 8010e14:	f003 0203 	and.w	r2, r3, #3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010e1c:	4b0f      	ldr	r3, [pc, #60]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e1e:	689b      	ldr	r3, [r3, #8]
 8010e20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010e28:	4b0c      	ldr	r3, [pc, #48]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010e34:	4b09      	ldr	r3, [pc, #36]	; (8010e5c <HAL_RCC_GetClockConfig+0x5c>)
 8010e36:	689b      	ldr	r3, [r3, #8]
 8010e38:	08db      	lsrs	r3, r3, #3
 8010e3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010e42:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <HAL_RCC_GetClockConfig+0x60>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f003 0207 	and.w	r2, r3, #7
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	601a      	str	r2, [r3, #0]
}
 8010e4e:	bf00      	nop
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	40023800 	.word	0x40023800
 8010e60:	40023c00 	.word	0x40023c00

08010e64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d101      	bne.n	8010e76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8010e72:	2301      	movs	r3, #1
 8010e74:	e01c      	b.n	8010eb0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	795b      	ldrb	r3, [r3, #5]
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d105      	bne.n	8010e8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f7f2 fe58 	bl	8003b3c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2202      	movs	r2, #2
 8010e90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f042 0204 	orr.w	r2, r2, #4
 8010ea0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8010eae:	2300      	movs	r3, #0
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e07b      	b.n	8010fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d108      	bne.n	8010ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010eda:	d009      	beq.n	8010ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	61da      	str	r2, [r3, #28]
 8010ee2:	e005      	b.n	8010ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d106      	bne.n	8010f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f7f2 fe6e 	bl	8003bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2202      	movs	r2, #2
 8010f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	689b      	ldr	r3, [r3, #8]
 8010f34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010f38:	431a      	orrs	r2, r3
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f42:	431a      	orrs	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	f003 0302 	and.w	r3, r3, #2
 8010f4c:	431a      	orrs	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	f003 0301 	and.w	r3, r3, #1
 8010f56:	431a      	orrs	r2, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	699b      	ldr	r3, [r3, #24]
 8010f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f60:	431a      	orrs	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	69db      	ldr	r3, [r3, #28]
 8010f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f6a:	431a      	orrs	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6a1b      	ldr	r3, [r3, #32]
 8010f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f74:	ea42 0103 	orr.w	r1, r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	430a      	orrs	r2, r1
 8010f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	699b      	ldr	r3, [r3, #24]
 8010f8c:	0c1b      	lsrs	r3, r3, #16
 8010f8e:	f003 0104 	and.w	r1, r3, #4
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f96:	f003 0210 	and.w	r2, r3, #16
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	430a      	orrs	r2, r1
 8010fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	69da      	ldr	r2, [r3, #28]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3708      	adds	r7, #8
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b088      	sub	sp, #32
 8010fce:	af02      	add	r7, sp, #8
 8010fd0:	60f8      	str	r0, [r7, #12]
 8010fd2:	60b9      	str	r1, [r7, #8]
 8010fd4:	603b      	str	r3, [r7, #0]
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010fe6:	d112      	bne.n	801100e <HAL_SPI_Receive+0x44>
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10e      	bne.n	801100e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2204      	movs	r2, #4
 8010ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010ff8:	88fa      	ldrh	r2, [r7, #6]
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	4613      	mov	r3, r2
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	68b9      	ldr	r1, [r7, #8]
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f000 f8f1 	bl	80111ec <HAL_SPI_TransmitReceive>
 801100a:	4603      	mov	r3, r0
 801100c:	e0ea      	b.n	80111e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011014:	2b01      	cmp	r3, #1
 8011016:	d101      	bne.n	801101c <HAL_SPI_Receive+0x52>
 8011018:	2302      	movs	r3, #2
 801101a:	e0e3      	b.n	80111e4 <HAL_SPI_Receive+0x21a>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011024:	f7fa fab4 	bl	800b590 <HAL_GetTick>
 8011028:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011030:	b2db      	uxtb	r3, r3
 8011032:	2b01      	cmp	r3, #1
 8011034:	d002      	beq.n	801103c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8011036:	2302      	movs	r3, #2
 8011038:	75fb      	strb	r3, [r7, #23]
    goto error;
 801103a:	e0ca      	b.n	80111d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d002      	beq.n	8011048 <HAL_SPI_Receive+0x7e>
 8011042:	88fb      	ldrh	r3, [r7, #6]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d102      	bne.n	801104e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8011048:	2301      	movs	r3, #1
 801104a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801104c:	e0c1      	b.n	80111d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	2204      	movs	r2, #4
 8011052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2200      	movs	r2, #0
 801105a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	68ba      	ldr	r2, [r7, #8]
 8011060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	88fa      	ldrh	r2, [r7, #6]
 8011066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	88fa      	ldrh	r2, [r7, #6]
 801106c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2200      	movs	r2, #0
 8011072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2200      	movs	r2, #0
 8011078:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2200      	movs	r2, #0
 801107e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2200      	movs	r2, #0
 8011084:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2200      	movs	r2, #0
 801108a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	689b      	ldr	r3, [r3, #8]
 8011090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011094:	d10f      	bne.n	80110b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80110a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80110b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110c0:	2b40      	cmp	r3, #64	; 0x40
 80110c2:	d007      	beq.n	80110d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d162      	bne.n	80111a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80110dc:	e02e      	b.n	801113c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	689b      	ldr	r3, [r3, #8]
 80110e4:	f003 0301 	and.w	r3, r3, #1
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d115      	bne.n	8011118 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f103 020c 	add.w	r2, r3, #12
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f8:	7812      	ldrb	r2, [r2, #0]
 80110fa:	b2d2      	uxtb	r2, r2
 80110fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011102:	1c5a      	adds	r2, r3, #1
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801110c:	b29b      	uxth	r3, r3
 801110e:	3b01      	subs	r3, #1
 8011110:	b29a      	uxth	r2, r3
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011116:	e011      	b.n	801113c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011118:	f7fa fa3a 	bl	800b590 <HAL_GetTick>
 801111c:	4602      	mov	r2, r0
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	683a      	ldr	r2, [r7, #0]
 8011124:	429a      	cmp	r2, r3
 8011126:	d803      	bhi.n	8011130 <HAL_SPI_Receive+0x166>
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801112e:	d102      	bne.n	8011136 <HAL_SPI_Receive+0x16c>
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d102      	bne.n	801113c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8011136:	2303      	movs	r3, #3
 8011138:	75fb      	strb	r3, [r7, #23]
          goto error;
 801113a:	e04a      	b.n	80111d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011140:	b29b      	uxth	r3, r3
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1cb      	bne.n	80110de <HAL_SPI_Receive+0x114>
 8011146:	e031      	b.n	80111ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	f003 0301 	and.w	r3, r3, #1
 8011152:	2b01      	cmp	r3, #1
 8011154:	d113      	bne.n	801117e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	68da      	ldr	r2, [r3, #12]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011160:	b292      	uxth	r2, r2
 8011162:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011168:	1c9a      	adds	r2, r3, #2
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011172:	b29b      	uxth	r3, r3
 8011174:	3b01      	subs	r3, #1
 8011176:	b29a      	uxth	r2, r3
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801117c:	e011      	b.n	80111a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801117e:	f7fa fa07 	bl	800b590 <HAL_GetTick>
 8011182:	4602      	mov	r2, r0
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	683a      	ldr	r2, [r7, #0]
 801118a:	429a      	cmp	r2, r3
 801118c:	d803      	bhi.n	8011196 <HAL_SPI_Receive+0x1cc>
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011194:	d102      	bne.n	801119c <HAL_SPI_Receive+0x1d2>
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d102      	bne.n	80111a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801119c:	2303      	movs	r3, #3
 801119e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80111a0:	e017      	b.n	80111d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1cd      	bne.n	8011148 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80111ac:	693a      	ldr	r2, [r7, #16]
 80111ae:	6839      	ldr	r1, [r7, #0]
 80111b0:	68f8      	ldr	r0, [r7, #12]
 80111b2:	f000 fa45 	bl	8011640 <SPI_EndRxTransaction>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d002      	beq.n	80111c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2220      	movs	r2, #32
 80111c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d002      	beq.n	80111d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80111ca:	2301      	movs	r3, #1
 80111cc:	75fb      	strb	r3, [r7, #23]
 80111ce:	e000      	b.n	80111d2 <HAL_SPI_Receive+0x208>
  }

error :
 80111d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2201      	movs	r2, #1
 80111d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80111e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3718      	adds	r7, #24
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b08c      	sub	sp, #48	; 0x30
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80111fa:	2301      	movs	r3, #1
 80111fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80111fe:	2300      	movs	r3, #0
 8011200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801120a:	2b01      	cmp	r3, #1
 801120c:	d101      	bne.n	8011212 <HAL_SPI_TransmitReceive+0x26>
 801120e:	2302      	movs	r3, #2
 8011210:	e18a      	b.n	8011528 <HAL_SPI_TransmitReceive+0x33c>
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2201      	movs	r2, #1
 8011216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801121a:	f7fa f9b9 	bl	800b590 <HAL_GetTick>
 801121e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011230:	887b      	ldrh	r3, [r7, #2]
 8011232:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011238:	2b01      	cmp	r3, #1
 801123a:	d00f      	beq.n	801125c <HAL_SPI_TransmitReceive+0x70>
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011242:	d107      	bne.n	8011254 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d103      	bne.n	8011254 <HAL_SPI_TransmitReceive+0x68>
 801124c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011250:	2b04      	cmp	r3, #4
 8011252:	d003      	beq.n	801125c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011254:	2302      	movs	r3, #2
 8011256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801125a:	e15b      	b.n	8011514 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d005      	beq.n	801126e <HAL_SPI_TransmitReceive+0x82>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d002      	beq.n	801126e <HAL_SPI_TransmitReceive+0x82>
 8011268:	887b      	ldrh	r3, [r7, #2]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d103      	bne.n	8011276 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801126e:	2301      	movs	r3, #1
 8011270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011274:	e14e      	b.n	8011514 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801127c:	b2db      	uxtb	r3, r3
 801127e:	2b04      	cmp	r3, #4
 8011280:	d003      	beq.n	801128a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2205      	movs	r2, #5
 8011286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2200      	movs	r2, #0
 801128e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	887a      	ldrh	r2, [r7, #2]
 801129a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	887a      	ldrh	r2, [r7, #2]
 80112a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	68ba      	ldr	r2, [r7, #8]
 80112a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	887a      	ldrh	r2, [r7, #2]
 80112ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	887a      	ldrh	r2, [r7, #2]
 80112b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2200      	movs	r2, #0
 80112b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112ca:	2b40      	cmp	r3, #64	; 0x40
 80112cc:	d007      	beq.n	80112de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80112e6:	d178      	bne.n	80113da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d002      	beq.n	80112f6 <HAL_SPI_TransmitReceive+0x10a>
 80112f0:	8b7b      	ldrh	r3, [r7, #26]
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d166      	bne.n	80113c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fa:	881a      	ldrh	r2, [r3, #0]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011306:	1c9a      	adds	r2, r3, #2
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011310:	b29b      	uxth	r3, r3
 8011312:	3b01      	subs	r3, #1
 8011314:	b29a      	uxth	r2, r3
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801131a:	e053      	b.n	80113c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	689b      	ldr	r3, [r3, #8]
 8011322:	f003 0302 	and.w	r3, r3, #2
 8011326:	2b02      	cmp	r3, #2
 8011328:	d11b      	bne.n	8011362 <HAL_SPI_TransmitReceive+0x176>
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801132e:	b29b      	uxth	r3, r3
 8011330:	2b00      	cmp	r3, #0
 8011332:	d016      	beq.n	8011362 <HAL_SPI_TransmitReceive+0x176>
 8011334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011336:	2b01      	cmp	r3, #1
 8011338:	d113      	bne.n	8011362 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801133e:	881a      	ldrh	r2, [r3, #0]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134a:	1c9a      	adds	r2, r3, #2
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011354:	b29b      	uxth	r3, r3
 8011356:	3b01      	subs	r3, #1
 8011358:	b29a      	uxth	r2, r3
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801135e:	2300      	movs	r3, #0
 8011360:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	f003 0301 	and.w	r3, r3, #1
 801136c:	2b01      	cmp	r3, #1
 801136e:	d119      	bne.n	80113a4 <HAL_SPI_TransmitReceive+0x1b8>
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011374:	b29b      	uxth	r3, r3
 8011376:	2b00      	cmp	r3, #0
 8011378:	d014      	beq.n	80113a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	68da      	ldr	r2, [r3, #12]
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011384:	b292      	uxth	r2, r2
 8011386:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801138c:	1c9a      	adds	r2, r3, #2
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011396:	b29b      	uxth	r3, r3
 8011398:	3b01      	subs	r3, #1
 801139a:	b29a      	uxth	r2, r3
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80113a0:	2301      	movs	r3, #1
 80113a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80113a4:	f7fa f8f4 	bl	800b590 <HAL_GetTick>
 80113a8:	4602      	mov	r2, r0
 80113aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d807      	bhi.n	80113c4 <HAL_SPI_TransmitReceive+0x1d8>
 80113b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113ba:	d003      	beq.n	80113c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80113bc:	2303      	movs	r3, #3
 80113be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80113c2:	e0a7      	b.n	8011514 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1a6      	bne.n	801131c <HAL_SPI_TransmitReceive+0x130>
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1a1      	bne.n	801131c <HAL_SPI_TransmitReceive+0x130>
 80113d8:	e07c      	b.n	80114d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d002      	beq.n	80113e8 <HAL_SPI_TransmitReceive+0x1fc>
 80113e2:	8b7b      	ldrh	r3, [r7, #26]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d16b      	bne.n	80114c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	330c      	adds	r3, #12
 80113f2:	7812      	ldrb	r2, [r2, #0]
 80113f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113fa:	1c5a      	adds	r2, r3, #1
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011404:	b29b      	uxth	r3, r3
 8011406:	3b01      	subs	r3, #1
 8011408:	b29a      	uxth	r2, r3
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801140e:	e057      	b.n	80114c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	689b      	ldr	r3, [r3, #8]
 8011416:	f003 0302 	and.w	r3, r3, #2
 801141a:	2b02      	cmp	r3, #2
 801141c:	d11c      	bne.n	8011458 <HAL_SPI_TransmitReceive+0x26c>
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011422:	b29b      	uxth	r3, r3
 8011424:	2b00      	cmp	r3, #0
 8011426:	d017      	beq.n	8011458 <HAL_SPI_TransmitReceive+0x26c>
 8011428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142a:	2b01      	cmp	r3, #1
 801142c:	d114      	bne.n	8011458 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	330c      	adds	r3, #12
 8011438:	7812      	ldrb	r2, [r2, #0]
 801143a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011440:	1c5a      	adds	r2, r3, #1
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801144a:	b29b      	uxth	r3, r3
 801144c:	3b01      	subs	r3, #1
 801144e:	b29a      	uxth	r2, r3
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011454:	2300      	movs	r3, #0
 8011456:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	689b      	ldr	r3, [r3, #8]
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	2b01      	cmp	r3, #1
 8011464:	d119      	bne.n	801149a <HAL_SPI_TransmitReceive+0x2ae>
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801146a:	b29b      	uxth	r3, r3
 801146c:	2b00      	cmp	r3, #0
 801146e:	d014      	beq.n	801149a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	68da      	ldr	r2, [r3, #12]
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801147a:	b2d2      	uxtb	r2, r2
 801147c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011482:	1c5a      	adds	r2, r3, #1
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801148c:	b29b      	uxth	r3, r3
 801148e:	3b01      	subs	r3, #1
 8011490:	b29a      	uxth	r2, r3
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011496:	2301      	movs	r3, #1
 8011498:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801149a:	f7fa f879 	bl	800b590 <HAL_GetTick>
 801149e:	4602      	mov	r2, r0
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	1ad3      	subs	r3, r2, r3
 80114a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d803      	bhi.n	80114b2 <HAL_SPI_TransmitReceive+0x2c6>
 80114aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114b0:	d102      	bne.n	80114b8 <HAL_SPI_TransmitReceive+0x2cc>
 80114b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d103      	bne.n	80114c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80114b8:	2303      	movs	r3, #3
 80114ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80114be:	e029      	b.n	8011514 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d1a2      	bne.n	8011410 <HAL_SPI_TransmitReceive+0x224>
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d19d      	bne.n	8011410 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80114d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f000 f917 	bl	801170c <SPI_EndRxTxTransaction>
 80114de:	4603      	mov	r3, r0
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d006      	beq.n	80114f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80114e4:	2301      	movs	r3, #1
 80114e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2220      	movs	r2, #32
 80114ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80114f0:	e010      	b.n	8011514 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	689b      	ldr	r3, [r3, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d10b      	bne.n	8011512 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80114fa:	2300      	movs	r3, #0
 80114fc:	617b      	str	r3, [r7, #20]
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	617b      	str	r3, [r7, #20]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	689b      	ldr	r3, [r3, #8]
 801150c:	617b      	str	r3, [r7, #20]
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	e000      	b.n	8011514 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011512:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2201      	movs	r2, #1
 8011518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2200      	movs	r2, #0
 8011520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011528:	4618      	mov	r0, r3
 801152a:	3730      	adds	r7, #48	; 0x30
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	603b      	str	r3, [r7, #0]
 801153c:	4613      	mov	r3, r2
 801153e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011540:	f7fa f826 	bl	800b590 <HAL_GetTick>
 8011544:	4602      	mov	r2, r0
 8011546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011548:	1a9b      	subs	r3, r3, r2
 801154a:	683a      	ldr	r2, [r7, #0]
 801154c:	4413      	add	r3, r2
 801154e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011550:	f7fa f81e 	bl	800b590 <HAL_GetTick>
 8011554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011556:	4b39      	ldr	r3, [pc, #228]	; (801163c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	015b      	lsls	r3, r3, #5
 801155c:	0d1b      	lsrs	r3, r3, #20
 801155e:	69fa      	ldr	r2, [r7, #28]
 8011560:	fb02 f303 	mul.w	r3, r2, r3
 8011564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011566:	e054      	b.n	8011612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801156e:	d050      	beq.n	8011612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011570:	f7fa f80e 	bl	800b590 <HAL_GetTick>
 8011574:	4602      	mov	r2, r0
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	1ad3      	subs	r3, r2, r3
 801157a:	69fa      	ldr	r2, [r7, #28]
 801157c:	429a      	cmp	r2, r3
 801157e:	d902      	bls.n	8011586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d13d      	bne.n	8011602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	685a      	ldr	r2, [r3, #4]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801159e:	d111      	bne.n	80115c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	689b      	ldr	r3, [r3, #8]
 80115a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115a8:	d004      	beq.n	80115b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115b2:	d107      	bne.n	80115c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	681a      	ldr	r2, [r3, #0]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80115c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115cc:	d10f      	bne.n	80115ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80115ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2201      	movs	r2, #1
 80115f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2200      	movs	r2, #0
 80115fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80115fe:	2303      	movs	r3, #3
 8011600:	e017      	b.n	8011632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d101      	bne.n	801160c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011608:	2300      	movs	r3, #0
 801160a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	3b01      	subs	r3, #1
 8011610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	689a      	ldr	r2, [r3, #8]
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	4013      	ands	r3, r2
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	429a      	cmp	r2, r3
 8011620:	bf0c      	ite	eq
 8011622:	2301      	moveq	r3, #1
 8011624:	2300      	movne	r3, #0
 8011626:	b2db      	uxtb	r3, r3
 8011628:	461a      	mov	r2, r3
 801162a:	79fb      	ldrb	r3, [r7, #7]
 801162c:	429a      	cmp	r2, r3
 801162e:	d19b      	bne.n	8011568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011630:	2300      	movs	r3, #0
}
 8011632:	4618      	mov	r0, r3
 8011634:	3720      	adds	r7, #32
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	20000004 	.word	0x20000004

08011640 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b086      	sub	sp, #24
 8011644:	af02      	add	r7, sp, #8
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011654:	d111      	bne.n	801167a <SPI_EndRxTransaction+0x3a>
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	689b      	ldr	r3, [r3, #8]
 801165a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801165e:	d004      	beq.n	801166a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011668:	d107      	bne.n	801167a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011678:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011682:	d12a      	bne.n	80116da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801168c:	d012      	beq.n	80116b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	2200      	movs	r2, #0
 8011696:	2180      	movs	r1, #128	; 0x80
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f7ff ff49 	bl	8011530 <SPI_WaitFlagStateUntilTimeout>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d02d      	beq.n	8011700 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116a8:	f043 0220 	orr.w	r2, r3, #32
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80116b0:	2303      	movs	r3, #3
 80116b2:	e026      	b.n	8011702 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	2200      	movs	r2, #0
 80116bc:	2101      	movs	r1, #1
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	f7ff ff36 	bl	8011530 <SPI_WaitFlagStateUntilTimeout>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d01a      	beq.n	8011700 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116ce:	f043 0220 	orr.w	r2, r3, #32
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80116d6:	2303      	movs	r3, #3
 80116d8:	e013      	b.n	8011702 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	2200      	movs	r2, #0
 80116e2:	2101      	movs	r1, #1
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f7ff ff23 	bl	8011530 <SPI_WaitFlagStateUntilTimeout>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d007      	beq.n	8011700 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116f4:	f043 0220 	orr.w	r2, r3, #32
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80116fc:	2303      	movs	r3, #3
 80116fe:	e000      	b.n	8011702 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
	...

0801170c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b088      	sub	sp, #32
 8011710:	af02      	add	r7, sp, #8
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011718:	4b1b      	ldr	r3, [pc, #108]	; (8011788 <SPI_EndRxTxTransaction+0x7c>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a1b      	ldr	r2, [pc, #108]	; (801178c <SPI_EndRxTxTransaction+0x80>)
 801171e:	fba2 2303 	umull	r2, r3, r2, r3
 8011722:	0d5b      	lsrs	r3, r3, #21
 8011724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011728:	fb02 f303 	mul.w	r3, r2, r3
 801172c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011736:	d112      	bne.n	801175e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	2200      	movs	r2, #0
 8011740:	2180      	movs	r1, #128	; 0x80
 8011742:	68f8      	ldr	r0, [r7, #12]
 8011744:	f7ff fef4 	bl	8011530 <SPI_WaitFlagStateUntilTimeout>
 8011748:	4603      	mov	r3, r0
 801174a:	2b00      	cmp	r3, #0
 801174c:	d016      	beq.n	801177c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011752:	f043 0220 	orr.w	r2, r3, #32
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801175a:	2303      	movs	r3, #3
 801175c:	e00f      	b.n	801177e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00a      	beq.n	801177a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	3b01      	subs	r3, #1
 8011768:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011774:	2b80      	cmp	r3, #128	; 0x80
 8011776:	d0f2      	beq.n	801175e <SPI_EndRxTxTransaction+0x52>
 8011778:	e000      	b.n	801177c <SPI_EndRxTxTransaction+0x70>
        break;
 801177a:	bf00      	nop
  }

  return HAL_OK;
 801177c:	2300      	movs	r3, #0
}
 801177e:	4618      	mov	r0, r3
 8011780:	3718      	adds	r7, #24
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	20000004 	.word	0x20000004
 801178c:	165e9f81 	.word	0x165e9f81

08011790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d101      	bne.n	80117a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801179e:	2301      	movs	r3, #1
 80117a0:	e041      	b.n	8011826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d106      	bne.n	80117bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7f2 fef6 	bl	80045a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2202      	movs	r2, #2
 80117c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	3304      	adds	r3, #4
 80117cc:	4619      	mov	r1, r3
 80117ce:	4610      	mov	r0, r2
 80117d0:	f000 fd8c 	bl	80122ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2201      	movs	r2, #1
 80117d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2201      	movs	r2, #1
 80117e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2201      	movs	r2, #1
 80117f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2201      	movs	r2, #1
 80117f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2201      	movs	r2, #1
 8011800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2201      	movs	r2, #1
 8011808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2201      	movs	r2, #1
 8011810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2201      	movs	r2, #1
 8011818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2201      	movs	r2, #1
 8011820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	3708      	adds	r7, #8
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
	...

08011830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801183e:	b2db      	uxtb	r3, r3
 8011840:	2b01      	cmp	r3, #1
 8011842:	d001      	beq.n	8011848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8011844:	2301      	movs	r3, #1
 8011846:	e046      	b.n	80118d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2202      	movs	r2, #2
 801184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a23      	ldr	r2, [pc, #140]	; (80118e4 <HAL_TIM_Base_Start+0xb4>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d022      	beq.n	80118a0 <HAL_TIM_Base_Start+0x70>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011862:	d01d      	beq.n	80118a0 <HAL_TIM_Base_Start+0x70>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4a1f      	ldr	r2, [pc, #124]	; (80118e8 <HAL_TIM_Base_Start+0xb8>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d018      	beq.n	80118a0 <HAL_TIM_Base_Start+0x70>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	4a1e      	ldr	r2, [pc, #120]	; (80118ec <HAL_TIM_Base_Start+0xbc>)
 8011874:	4293      	cmp	r3, r2
 8011876:	d013      	beq.n	80118a0 <HAL_TIM_Base_Start+0x70>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a1c      	ldr	r2, [pc, #112]	; (80118f0 <HAL_TIM_Base_Start+0xc0>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d00e      	beq.n	80118a0 <HAL_TIM_Base_Start+0x70>
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	4a1b      	ldr	r2, [pc, #108]	; (80118f4 <HAL_TIM_Base_Start+0xc4>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d009      	beq.n	80118a0 <HAL_TIM_Base_Start+0x70>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	4a19      	ldr	r2, [pc, #100]	; (80118f8 <HAL_TIM_Base_Start+0xc8>)
 8011892:	4293      	cmp	r3, r2
 8011894:	d004      	beq.n	80118a0 <HAL_TIM_Base_Start+0x70>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4a18      	ldr	r2, [pc, #96]	; (80118fc <HAL_TIM_Base_Start+0xcc>)
 801189c:	4293      	cmp	r3, r2
 801189e:	d111      	bne.n	80118c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	f003 0307 	and.w	r3, r3, #7
 80118aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2b06      	cmp	r3, #6
 80118b0:	d010      	beq.n	80118d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f042 0201 	orr.w	r2, r2, #1
 80118c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118c2:	e007      	b.n	80118d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f042 0201 	orr.w	r2, r2, #1
 80118d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80118d4:	2300      	movs	r3, #0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3714      	adds	r7, #20
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	40010000 	.word	0x40010000
 80118e8:	40000400 	.word	0x40000400
 80118ec:	40000800 	.word	0x40000800
 80118f0:	40000c00 	.word	0x40000c00
 80118f4:	40010400 	.word	0x40010400
 80118f8:	40014000 	.word	0x40014000
 80118fc:	40001800 	.word	0x40001800

08011900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801190e:	b2db      	uxtb	r3, r3
 8011910:	2b01      	cmp	r3, #1
 8011912:	d001      	beq.n	8011918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011914:	2301      	movs	r3, #1
 8011916:	e04e      	b.n	80119b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2202      	movs	r2, #2
 801191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	68da      	ldr	r2, [r3, #12]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	f042 0201 	orr.w	r2, r2, #1
 801192e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	4a23      	ldr	r2, [pc, #140]	; (80119c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d022      	beq.n	8011980 <HAL_TIM_Base_Start_IT+0x80>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011942:	d01d      	beq.n	8011980 <HAL_TIM_Base_Start_IT+0x80>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4a1f      	ldr	r2, [pc, #124]	; (80119c8 <HAL_TIM_Base_Start_IT+0xc8>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d018      	beq.n	8011980 <HAL_TIM_Base_Start_IT+0x80>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	4a1e      	ldr	r2, [pc, #120]	; (80119cc <HAL_TIM_Base_Start_IT+0xcc>)
 8011954:	4293      	cmp	r3, r2
 8011956:	d013      	beq.n	8011980 <HAL_TIM_Base_Start_IT+0x80>
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4a1c      	ldr	r2, [pc, #112]	; (80119d0 <HAL_TIM_Base_Start_IT+0xd0>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d00e      	beq.n	8011980 <HAL_TIM_Base_Start_IT+0x80>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4a1b      	ldr	r2, [pc, #108]	; (80119d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8011968:	4293      	cmp	r3, r2
 801196a:	d009      	beq.n	8011980 <HAL_TIM_Base_Start_IT+0x80>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a19      	ldr	r2, [pc, #100]	; (80119d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8011972:	4293      	cmp	r3, r2
 8011974:	d004      	beq.n	8011980 <HAL_TIM_Base_Start_IT+0x80>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4a18      	ldr	r2, [pc, #96]	; (80119dc <HAL_TIM_Base_Start_IT+0xdc>)
 801197c:	4293      	cmp	r3, r2
 801197e:	d111      	bne.n	80119a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	689b      	ldr	r3, [r3, #8]
 8011986:	f003 0307 	and.w	r3, r3, #7
 801198a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2b06      	cmp	r3, #6
 8011990:	d010      	beq.n	80119b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f042 0201 	orr.w	r2, r2, #1
 80119a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119a2:	e007      	b.n	80119b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f042 0201 	orr.w	r2, r2, #1
 80119b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3714      	adds	r7, #20
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop
 80119c4:	40010000 	.word	0x40010000
 80119c8:	40000400 	.word	0x40000400
 80119cc:	40000800 	.word	0x40000800
 80119d0:	40000c00 	.word	0x40000c00
 80119d4:	40010400 	.word	0x40010400
 80119d8:	40014000 	.word	0x40014000
 80119dc:	40001800 	.word	0x40001800

080119e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80119ee:	2301      	movs	r3, #1
 80119f0:	e041      	b.n	8011a76 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d106      	bne.n	8011a0c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 f839 	bl	8011a7e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2202      	movs	r2, #2
 8011a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	3304      	adds	r3, #4
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	4610      	mov	r0, r2
 8011a20:	f000 fc64 	bl	80122ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2201      	movs	r2, #1
 8011a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2201      	movs	r2, #1
 8011a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2201      	movs	r2, #1
 8011a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2201      	movs	r2, #1
 8011a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2201      	movs	r2, #1
 8011a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8011a7e:	b480      	push	{r7}
 8011a80:	b083      	sub	sp, #12
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8011a86:	bf00      	nop
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr

08011a92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b082      	sub	sp, #8
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d101      	bne.n	8011aa4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	e041      	b.n	8011b28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d106      	bne.n	8011abe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7f2 fd27 	bl	800450c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2202      	movs	r2, #2
 8011ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681a      	ldr	r2, [r3, #0]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	3304      	adds	r3, #4
 8011ace:	4619      	mov	r1, r3
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	f000 fc0b 	bl	80122ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2201      	movs	r2, #1
 8011af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2201      	movs	r2, #1
 8011afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2201      	movs	r2, #1
 8011b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2201      	movs	r2, #1
 8011b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2201      	movs	r2, #1
 8011b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d109      	bne.n	8011b54 <HAL_TIM_PWM_Start+0x24>
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b01      	cmp	r3, #1
 8011b4a:	bf14      	ite	ne
 8011b4c:	2301      	movne	r3, #1
 8011b4e:	2300      	moveq	r3, #0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	e022      	b.n	8011b9a <HAL_TIM_PWM_Start+0x6a>
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	2b04      	cmp	r3, #4
 8011b58:	d109      	bne.n	8011b6e <HAL_TIM_PWM_Start+0x3e>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	bf14      	ite	ne
 8011b66:	2301      	movne	r3, #1
 8011b68:	2300      	moveq	r3, #0
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	e015      	b.n	8011b9a <HAL_TIM_PWM_Start+0x6a>
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	2b08      	cmp	r3, #8
 8011b72:	d109      	bne.n	8011b88 <HAL_TIM_PWM_Start+0x58>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	bf14      	ite	ne
 8011b80:	2301      	movne	r3, #1
 8011b82:	2300      	moveq	r3, #0
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	e008      	b.n	8011b9a <HAL_TIM_PWM_Start+0x6a>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	bf14      	ite	ne
 8011b94:	2301      	movne	r3, #1
 8011b96:	2300      	moveq	r3, #0
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d001      	beq.n	8011ba2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e07c      	b.n	8011c9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d104      	bne.n	8011bb2 <HAL_TIM_PWM_Start+0x82>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2202      	movs	r2, #2
 8011bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011bb0:	e013      	b.n	8011bda <HAL_TIM_PWM_Start+0xaa>
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	2b04      	cmp	r3, #4
 8011bb6:	d104      	bne.n	8011bc2 <HAL_TIM_PWM_Start+0x92>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2202      	movs	r2, #2
 8011bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011bc0:	e00b      	b.n	8011bda <HAL_TIM_PWM_Start+0xaa>
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	2b08      	cmp	r3, #8
 8011bc6:	d104      	bne.n	8011bd2 <HAL_TIM_PWM_Start+0xa2>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2202      	movs	r2, #2
 8011bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011bd0:	e003      	b.n	8011bda <HAL_TIM_PWM_Start+0xaa>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2202      	movs	r2, #2
 8011bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2201      	movs	r2, #1
 8011be0:	6839      	ldr	r1, [r7, #0]
 8011be2:	4618      	mov	r0, r3
 8011be4:	f000 fe6c 	bl	80128c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4a2d      	ldr	r2, [pc, #180]	; (8011ca4 <HAL_TIM_PWM_Start+0x174>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d004      	beq.n	8011bfc <HAL_TIM_PWM_Start+0xcc>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4a2c      	ldr	r2, [pc, #176]	; (8011ca8 <HAL_TIM_PWM_Start+0x178>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d101      	bne.n	8011c00 <HAL_TIM_PWM_Start+0xd0>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	e000      	b.n	8011c02 <HAL_TIM_PWM_Start+0xd2>
 8011c00:	2300      	movs	r3, #0
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d007      	beq.n	8011c16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4a22      	ldr	r2, [pc, #136]	; (8011ca4 <HAL_TIM_PWM_Start+0x174>)
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d022      	beq.n	8011c66 <HAL_TIM_PWM_Start+0x136>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c28:	d01d      	beq.n	8011c66 <HAL_TIM_PWM_Start+0x136>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	4a1f      	ldr	r2, [pc, #124]	; (8011cac <HAL_TIM_PWM_Start+0x17c>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d018      	beq.n	8011c66 <HAL_TIM_PWM_Start+0x136>
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4a1d      	ldr	r2, [pc, #116]	; (8011cb0 <HAL_TIM_PWM_Start+0x180>)
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d013      	beq.n	8011c66 <HAL_TIM_PWM_Start+0x136>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4a1c      	ldr	r2, [pc, #112]	; (8011cb4 <HAL_TIM_PWM_Start+0x184>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d00e      	beq.n	8011c66 <HAL_TIM_PWM_Start+0x136>
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4a16      	ldr	r2, [pc, #88]	; (8011ca8 <HAL_TIM_PWM_Start+0x178>)
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d009      	beq.n	8011c66 <HAL_TIM_PWM_Start+0x136>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	4a18      	ldr	r2, [pc, #96]	; (8011cb8 <HAL_TIM_PWM_Start+0x188>)
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d004      	beq.n	8011c66 <HAL_TIM_PWM_Start+0x136>
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a16      	ldr	r2, [pc, #88]	; (8011cbc <HAL_TIM_PWM_Start+0x18c>)
 8011c62:	4293      	cmp	r3, r2
 8011c64:	d111      	bne.n	8011c8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	f003 0307 	and.w	r3, r3, #7
 8011c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2b06      	cmp	r3, #6
 8011c76:	d010      	beq.n	8011c9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f042 0201 	orr.w	r2, r2, #1
 8011c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c88:	e007      	b.n	8011c9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f042 0201 	orr.w	r2, r2, #1
 8011c98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011c9a:	2300      	movs	r3, #0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	40010000 	.word	0x40010000
 8011ca8:	40010400 	.word	0x40010400
 8011cac:	40000400 	.word	0x40000400
 8011cb0:	40000800 	.word	0x40000800
 8011cb4:	40000c00 	.word	0x40000c00
 8011cb8:	40014000 	.word	0x40014000
 8011cbc:	40001800 	.word	0x40001800

08011cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	691b      	ldr	r3, [r3, #16]
 8011cce:	f003 0302 	and.w	r3, r3, #2
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	d122      	bne.n	8011d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	f003 0302 	and.w	r3, r3, #2
 8011ce0:	2b02      	cmp	r3, #2
 8011ce2:	d11b      	bne.n	8011d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f06f 0202 	mvn.w	r2, #2
 8011cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	699b      	ldr	r3, [r3, #24]
 8011cfa:	f003 0303 	and.w	r3, r3, #3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d003      	beq.n	8011d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 fad3 	bl	80122ae <HAL_TIM_IC_CaptureCallback>
 8011d08:	e005      	b.n	8011d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 fac5 	bl	801229a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f000 fad6 	bl	80122c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	691b      	ldr	r3, [r3, #16]
 8011d22:	f003 0304 	and.w	r3, r3, #4
 8011d26:	2b04      	cmp	r3, #4
 8011d28:	d122      	bne.n	8011d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	f003 0304 	and.w	r3, r3, #4
 8011d34:	2b04      	cmp	r3, #4
 8011d36:	d11b      	bne.n	8011d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f06f 0204 	mvn.w	r2, #4
 8011d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2202      	movs	r2, #2
 8011d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	699b      	ldr	r3, [r3, #24]
 8011d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d003      	beq.n	8011d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 faa9 	bl	80122ae <HAL_TIM_IC_CaptureCallback>
 8011d5c:	e005      	b.n	8011d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f000 fa9b 	bl	801229a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 faac 	bl	80122c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	691b      	ldr	r3, [r3, #16]
 8011d76:	f003 0308 	and.w	r3, r3, #8
 8011d7a:	2b08      	cmp	r3, #8
 8011d7c:	d122      	bne.n	8011dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	f003 0308 	and.w	r3, r3, #8
 8011d88:	2b08      	cmp	r3, #8
 8011d8a:	d11b      	bne.n	8011dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	f06f 0208 	mvn.w	r2, #8
 8011d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2204      	movs	r2, #4
 8011d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	69db      	ldr	r3, [r3, #28]
 8011da2:	f003 0303 	and.w	r3, r3, #3
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d003      	beq.n	8011db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 fa7f 	bl	80122ae <HAL_TIM_IC_CaptureCallback>
 8011db0:	e005      	b.n	8011dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f000 fa71 	bl	801229a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f000 fa82 	bl	80122c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	691b      	ldr	r3, [r3, #16]
 8011dca:	f003 0310 	and.w	r3, r3, #16
 8011dce:	2b10      	cmp	r3, #16
 8011dd0:	d122      	bne.n	8011e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	f003 0310 	and.w	r3, r3, #16
 8011ddc:	2b10      	cmp	r3, #16
 8011dde:	d11b      	bne.n	8011e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f06f 0210 	mvn.w	r2, #16
 8011de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2208      	movs	r2, #8
 8011dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	69db      	ldr	r3, [r3, #28]
 8011df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d003      	beq.n	8011e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f000 fa55 	bl	80122ae <HAL_TIM_IC_CaptureCallback>
 8011e04:	e005      	b.n	8011e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 fa47 	bl	801229a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f000 fa58 	bl	80122c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	691b      	ldr	r3, [r3, #16]
 8011e1e:	f003 0301 	and.w	r3, r3, #1
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d10e      	bne.n	8011e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	f003 0301 	and.w	r3, r3, #1
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d107      	bne.n	8011e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f06f 0201 	mvn.w	r2, #1
 8011e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7f1 fe54 	bl	8003aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	691b      	ldr	r3, [r3, #16]
 8011e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e4e:	2b80      	cmp	r3, #128	; 0x80
 8011e50:	d10e      	bne.n	8011e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e5c:	2b80      	cmp	r3, #128	; 0x80
 8011e5e:	d107      	bne.n	8011e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 fe26 	bl	8012abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	691b      	ldr	r3, [r3, #16]
 8011e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e7a:	2b40      	cmp	r3, #64	; 0x40
 8011e7c:	d10e      	bne.n	8011e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e88:	2b40      	cmp	r3, #64	; 0x40
 8011e8a:	d107      	bne.n	8011e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 fa1d 	bl	80122d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	f003 0320 	and.w	r3, r3, #32
 8011ea6:	2b20      	cmp	r3, #32
 8011ea8:	d10e      	bne.n	8011ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	f003 0320 	and.w	r3, r3, #32
 8011eb4:	2b20      	cmp	r3, #32
 8011eb6:	d107      	bne.n	8011ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f06f 0220 	mvn.w	r2, #32
 8011ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 fdf0 	bl	8012aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011ec8:	bf00      	nop
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b086      	sub	sp, #24
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	60f8      	str	r0, [r7, #12]
 8011ed8:	60b9      	str	r1, [r7, #8]
 8011eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011edc:	2300      	movs	r3, #0
 8011ede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d101      	bne.n	8011eee <HAL_TIM_OC_ConfigChannel+0x1e>
 8011eea:	2302      	movs	r3, #2
 8011eec:	e048      	b.n	8011f80 <HAL_TIM_OC_ConfigChannel+0xb0>
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2b0c      	cmp	r3, #12
 8011efa:	d839      	bhi.n	8011f70 <HAL_TIM_OC_ConfigChannel+0xa0>
 8011efc:	a201      	add	r2, pc, #4	; (adr r2, 8011f04 <HAL_TIM_OC_ConfigChannel+0x34>)
 8011efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f02:	bf00      	nop
 8011f04:	08011f39 	.word	0x08011f39
 8011f08:	08011f71 	.word	0x08011f71
 8011f0c:	08011f71 	.word	0x08011f71
 8011f10:	08011f71 	.word	0x08011f71
 8011f14:	08011f47 	.word	0x08011f47
 8011f18:	08011f71 	.word	0x08011f71
 8011f1c:	08011f71 	.word	0x08011f71
 8011f20:	08011f71 	.word	0x08011f71
 8011f24:	08011f55 	.word	0x08011f55
 8011f28:	08011f71 	.word	0x08011f71
 8011f2c:	08011f71 	.word	0x08011f71
 8011f30:	08011f71 	.word	0x08011f71
 8011f34:	08011f63 	.word	0x08011f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	68b9      	ldr	r1, [r7, #8]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f000 fa74 	bl	801242c <TIM_OC1_SetConfig>
      break;
 8011f44:	e017      	b.n	8011f76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	68b9      	ldr	r1, [r7, #8]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f000 fadd 	bl	801250c <TIM_OC2_SetConfig>
      break;
 8011f52:	e010      	b.n	8011f76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	68b9      	ldr	r1, [r7, #8]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f000 fb4c 	bl	80125f8 <TIM_OC3_SetConfig>
      break;
 8011f60:	e009      	b.n	8011f76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	68b9      	ldr	r1, [r7, #8]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f000 fbb9 	bl	80126e0 <TIM_OC4_SetConfig>
      break;
 8011f6e:	e002      	b.n	8011f76 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8011f70:	2301      	movs	r3, #1
 8011f72:	75fb      	strb	r3, [r7, #23]
      break;
 8011f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3718      	adds	r7, #24
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f94:	2300      	movs	r3, #0
 8011f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d101      	bne.n	8011fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011fa2:	2302      	movs	r3, #2
 8011fa4:	e0ae      	b.n	8012104 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2201      	movs	r2, #1
 8011faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2b0c      	cmp	r3, #12
 8011fb2:	f200 809f 	bhi.w	80120f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8011fb6:	a201      	add	r2, pc, #4	; (adr r2, 8011fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbc:	08011ff1 	.word	0x08011ff1
 8011fc0:	080120f5 	.word	0x080120f5
 8011fc4:	080120f5 	.word	0x080120f5
 8011fc8:	080120f5 	.word	0x080120f5
 8011fcc:	08012031 	.word	0x08012031
 8011fd0:	080120f5 	.word	0x080120f5
 8011fd4:	080120f5 	.word	0x080120f5
 8011fd8:	080120f5 	.word	0x080120f5
 8011fdc:	08012073 	.word	0x08012073
 8011fe0:	080120f5 	.word	0x080120f5
 8011fe4:	080120f5 	.word	0x080120f5
 8011fe8:	080120f5 	.word	0x080120f5
 8011fec:	080120b3 	.word	0x080120b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	68b9      	ldr	r1, [r7, #8]
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f000 fa18 	bl	801242c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	699a      	ldr	r2, [r3, #24]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f042 0208 	orr.w	r2, r2, #8
 801200a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	699a      	ldr	r2, [r3, #24]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f022 0204 	bic.w	r2, r2, #4
 801201a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	6999      	ldr	r1, [r3, #24]
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	691a      	ldr	r2, [r3, #16]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	430a      	orrs	r2, r1
 801202c:	619a      	str	r2, [r3, #24]
      break;
 801202e:	e064      	b.n	80120fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	68b9      	ldr	r1, [r7, #8]
 8012036:	4618      	mov	r0, r3
 8012038:	f000 fa68 	bl	801250c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	699a      	ldr	r2, [r3, #24]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801204a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	699a      	ldr	r2, [r3, #24]
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801205a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	6999      	ldr	r1, [r3, #24]
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	691b      	ldr	r3, [r3, #16]
 8012066:	021a      	lsls	r2, r3, #8
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	430a      	orrs	r2, r1
 801206e:	619a      	str	r2, [r3, #24]
      break;
 8012070:	e043      	b.n	80120fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68b9      	ldr	r1, [r7, #8]
 8012078:	4618      	mov	r0, r3
 801207a:	f000 fabd 	bl	80125f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	69da      	ldr	r2, [r3, #28]
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	f042 0208 	orr.w	r2, r2, #8
 801208c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	69da      	ldr	r2, [r3, #28]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f022 0204 	bic.w	r2, r2, #4
 801209c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	69d9      	ldr	r1, [r3, #28]
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	691a      	ldr	r2, [r3, #16]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	430a      	orrs	r2, r1
 80120ae:	61da      	str	r2, [r3, #28]
      break;
 80120b0:	e023      	b.n	80120fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	68b9      	ldr	r1, [r7, #8]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f000 fb11 	bl	80126e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	69da      	ldr	r2, [r3, #28]
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	69da      	ldr	r2, [r3, #28]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80120dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	69d9      	ldr	r1, [r3, #28]
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	691b      	ldr	r3, [r3, #16]
 80120e8:	021a      	lsls	r2, r3, #8
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	430a      	orrs	r2, r1
 80120f0:	61da      	str	r2, [r3, #28]
      break;
 80120f2:	e002      	b.n	80120fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80120f4:	2301      	movs	r3, #1
 80120f6:	75fb      	strb	r3, [r7, #23]
      break;
 80120f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012102:	7dfb      	ldrb	r3, [r7, #23]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3718      	adds	r7, #24
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012116:	2300      	movs	r3, #0
 8012118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012120:	2b01      	cmp	r3, #1
 8012122:	d101      	bne.n	8012128 <HAL_TIM_ConfigClockSource+0x1c>
 8012124:	2302      	movs	r3, #2
 8012126:	e0b4      	b.n	8012292 <HAL_TIM_ConfigClockSource+0x186>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2201      	movs	r2, #1
 801212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2202      	movs	r2, #2
 8012134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801214e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	68ba      	ldr	r2, [r7, #8]
 8012156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012160:	d03e      	beq.n	80121e0 <HAL_TIM_ConfigClockSource+0xd4>
 8012162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012166:	f200 8087 	bhi.w	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 801216a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801216e:	f000 8086 	beq.w	801227e <HAL_TIM_ConfigClockSource+0x172>
 8012172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012176:	d87f      	bhi.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 8012178:	2b70      	cmp	r3, #112	; 0x70
 801217a:	d01a      	beq.n	80121b2 <HAL_TIM_ConfigClockSource+0xa6>
 801217c:	2b70      	cmp	r3, #112	; 0x70
 801217e:	d87b      	bhi.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 8012180:	2b60      	cmp	r3, #96	; 0x60
 8012182:	d050      	beq.n	8012226 <HAL_TIM_ConfigClockSource+0x11a>
 8012184:	2b60      	cmp	r3, #96	; 0x60
 8012186:	d877      	bhi.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 8012188:	2b50      	cmp	r3, #80	; 0x50
 801218a:	d03c      	beq.n	8012206 <HAL_TIM_ConfigClockSource+0xfa>
 801218c:	2b50      	cmp	r3, #80	; 0x50
 801218e:	d873      	bhi.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 8012190:	2b40      	cmp	r3, #64	; 0x40
 8012192:	d058      	beq.n	8012246 <HAL_TIM_ConfigClockSource+0x13a>
 8012194:	2b40      	cmp	r3, #64	; 0x40
 8012196:	d86f      	bhi.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 8012198:	2b30      	cmp	r3, #48	; 0x30
 801219a:	d064      	beq.n	8012266 <HAL_TIM_ConfigClockSource+0x15a>
 801219c:	2b30      	cmp	r3, #48	; 0x30
 801219e:	d86b      	bhi.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 80121a0:	2b20      	cmp	r3, #32
 80121a2:	d060      	beq.n	8012266 <HAL_TIM_ConfigClockSource+0x15a>
 80121a4:	2b20      	cmp	r3, #32
 80121a6:	d867      	bhi.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d05c      	beq.n	8012266 <HAL_TIM_ConfigClockSource+0x15a>
 80121ac:	2b10      	cmp	r3, #16
 80121ae:	d05a      	beq.n	8012266 <HAL_TIM_ConfigClockSource+0x15a>
 80121b0:	e062      	b.n	8012278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6818      	ldr	r0, [r3, #0]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	6899      	ldr	r1, [r3, #8]
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	685a      	ldr	r2, [r3, #4]
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	f000 fb5d 	bl	8012880 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	689b      	ldr	r3, [r3, #8]
 80121cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80121d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	68ba      	ldr	r2, [r7, #8]
 80121dc:	609a      	str	r2, [r3, #8]
      break;
 80121de:	e04f      	b.n	8012280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6818      	ldr	r0, [r3, #0]
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	6899      	ldr	r1, [r3, #8]
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	685a      	ldr	r2, [r3, #4]
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	68db      	ldr	r3, [r3, #12]
 80121f0:	f000 fb46 	bl	8012880 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	689a      	ldr	r2, [r3, #8]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012202:	609a      	str	r2, [r3, #8]
      break;
 8012204:	e03c      	b.n	8012280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6818      	ldr	r0, [r3, #0]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	6859      	ldr	r1, [r3, #4]
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	461a      	mov	r2, r3
 8012214:	f000 faba 	bl	801278c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2150      	movs	r1, #80	; 0x50
 801221e:	4618      	mov	r0, r3
 8012220:	f000 fb13 	bl	801284a <TIM_ITRx_SetConfig>
      break;
 8012224:	e02c      	b.n	8012280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6818      	ldr	r0, [r3, #0]
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	6859      	ldr	r1, [r3, #4]
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	461a      	mov	r2, r3
 8012234:	f000 fad9 	bl	80127ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2160      	movs	r1, #96	; 0x60
 801223e:	4618      	mov	r0, r3
 8012240:	f000 fb03 	bl	801284a <TIM_ITRx_SetConfig>
      break;
 8012244:	e01c      	b.n	8012280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6818      	ldr	r0, [r3, #0]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	6859      	ldr	r1, [r3, #4]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	461a      	mov	r2, r3
 8012254:	f000 fa9a 	bl	801278c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2140      	movs	r1, #64	; 0x40
 801225e:	4618      	mov	r0, r3
 8012260:	f000 faf3 	bl	801284a <TIM_ITRx_SetConfig>
      break;
 8012264:	e00c      	b.n	8012280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4619      	mov	r1, r3
 8012270:	4610      	mov	r0, r2
 8012272:	f000 faea 	bl	801284a <TIM_ITRx_SetConfig>
      break;
 8012276:	e003      	b.n	8012280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8012278:	2301      	movs	r3, #1
 801227a:	73fb      	strb	r3, [r7, #15]
      break;
 801227c:	e000      	b.n	8012280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801227e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2201      	movs	r2, #1
 8012284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012290:	7bfb      	ldrb	r3, [r7, #15]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801229a:	b480      	push	{r7}
 801229c:	b083      	sub	sp, #12
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80122a2:	bf00      	nop
 80122a4:	370c      	adds	r7, #12
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr

080122ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80122ae:	b480      	push	{r7}
 80122b0:	b083      	sub	sp, #12
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80122b6:	bf00      	nop
 80122b8:	370c      	adds	r7, #12
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr

080122c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80122c2:	b480      	push	{r7}
 80122c4:	b083      	sub	sp, #12
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80122ca:	bf00      	nop
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80122d6:	b480      	push	{r7}
 80122d8:	b083      	sub	sp, #12
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80122de:	bf00      	nop
 80122e0:	370c      	adds	r7, #12
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr
	...

080122ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	4a40      	ldr	r2, [pc, #256]	; (8012400 <TIM_Base_SetConfig+0x114>)
 8012300:	4293      	cmp	r3, r2
 8012302:	d013      	beq.n	801232c <TIM_Base_SetConfig+0x40>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801230a:	d00f      	beq.n	801232c <TIM_Base_SetConfig+0x40>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4a3d      	ldr	r2, [pc, #244]	; (8012404 <TIM_Base_SetConfig+0x118>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d00b      	beq.n	801232c <TIM_Base_SetConfig+0x40>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	4a3c      	ldr	r2, [pc, #240]	; (8012408 <TIM_Base_SetConfig+0x11c>)
 8012318:	4293      	cmp	r3, r2
 801231a:	d007      	beq.n	801232c <TIM_Base_SetConfig+0x40>
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4a3b      	ldr	r2, [pc, #236]	; (801240c <TIM_Base_SetConfig+0x120>)
 8012320:	4293      	cmp	r3, r2
 8012322:	d003      	beq.n	801232c <TIM_Base_SetConfig+0x40>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	4a3a      	ldr	r2, [pc, #232]	; (8012410 <TIM_Base_SetConfig+0x124>)
 8012328:	4293      	cmp	r3, r2
 801232a:	d108      	bne.n	801233e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	4313      	orrs	r3, r2
 801233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	4a2f      	ldr	r2, [pc, #188]	; (8012400 <TIM_Base_SetConfig+0x114>)
 8012342:	4293      	cmp	r3, r2
 8012344:	d02b      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801234c:	d027      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4a2c      	ldr	r2, [pc, #176]	; (8012404 <TIM_Base_SetConfig+0x118>)
 8012352:	4293      	cmp	r3, r2
 8012354:	d023      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4a2b      	ldr	r2, [pc, #172]	; (8012408 <TIM_Base_SetConfig+0x11c>)
 801235a:	4293      	cmp	r3, r2
 801235c:	d01f      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4a2a      	ldr	r2, [pc, #168]	; (801240c <TIM_Base_SetConfig+0x120>)
 8012362:	4293      	cmp	r3, r2
 8012364:	d01b      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	4a29      	ldr	r2, [pc, #164]	; (8012410 <TIM_Base_SetConfig+0x124>)
 801236a:	4293      	cmp	r3, r2
 801236c:	d017      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4a28      	ldr	r2, [pc, #160]	; (8012414 <TIM_Base_SetConfig+0x128>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d013      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4a27      	ldr	r2, [pc, #156]	; (8012418 <TIM_Base_SetConfig+0x12c>)
 801237a:	4293      	cmp	r3, r2
 801237c:	d00f      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4a26      	ldr	r2, [pc, #152]	; (801241c <TIM_Base_SetConfig+0x130>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d00b      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4a25      	ldr	r2, [pc, #148]	; (8012420 <TIM_Base_SetConfig+0x134>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d007      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4a24      	ldr	r2, [pc, #144]	; (8012424 <TIM_Base_SetConfig+0x138>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d003      	beq.n	801239e <TIM_Base_SetConfig+0xb2>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4a23      	ldr	r2, [pc, #140]	; (8012428 <TIM_Base_SetConfig+0x13c>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d108      	bne.n	80123b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	4313      	orrs	r3, r2
 80123ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	695b      	ldr	r3, [r3, #20]
 80123ba:	4313      	orrs	r3, r2
 80123bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	68fa      	ldr	r2, [r7, #12]
 80123c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	689a      	ldr	r2, [r3, #8]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	4a0a      	ldr	r2, [pc, #40]	; (8012400 <TIM_Base_SetConfig+0x114>)
 80123d8:	4293      	cmp	r3, r2
 80123da:	d003      	beq.n	80123e4 <TIM_Base_SetConfig+0xf8>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4a0c      	ldr	r2, [pc, #48]	; (8012410 <TIM_Base_SetConfig+0x124>)
 80123e0:	4293      	cmp	r3, r2
 80123e2:	d103      	bne.n	80123ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	691a      	ldr	r2, [r3, #16]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2201      	movs	r2, #1
 80123f0:	615a      	str	r2, [r3, #20]
}
 80123f2:	bf00      	nop
 80123f4:	3714      	adds	r7, #20
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	40010000 	.word	0x40010000
 8012404:	40000400 	.word	0x40000400
 8012408:	40000800 	.word	0x40000800
 801240c:	40000c00 	.word	0x40000c00
 8012410:	40010400 	.word	0x40010400
 8012414:	40014000 	.word	0x40014000
 8012418:	40014400 	.word	0x40014400
 801241c:	40014800 	.word	0x40014800
 8012420:	40001800 	.word	0x40001800
 8012424:	40001c00 	.word	0x40001c00
 8012428:	40002000 	.word	0x40002000

0801242c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801242c:	b480      	push	{r7}
 801242e:	b087      	sub	sp, #28
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6a1b      	ldr	r3, [r3, #32]
 801243a:	f023 0201 	bic.w	r2, r3, #1
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6a1b      	ldr	r3, [r3, #32]
 8012446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	699b      	ldr	r3, [r3, #24]
 8012452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801245a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f023 0303 	bic.w	r3, r3, #3
 8012462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	68fa      	ldr	r2, [r7, #12]
 801246a:	4313      	orrs	r3, r2
 801246c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	f023 0302 	bic.w	r3, r3, #2
 8012474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	697a      	ldr	r2, [r7, #20]
 801247c:	4313      	orrs	r3, r2
 801247e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	4a20      	ldr	r2, [pc, #128]	; (8012504 <TIM_OC1_SetConfig+0xd8>)
 8012484:	4293      	cmp	r3, r2
 8012486:	d003      	beq.n	8012490 <TIM_OC1_SetConfig+0x64>
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	4a1f      	ldr	r2, [pc, #124]	; (8012508 <TIM_OC1_SetConfig+0xdc>)
 801248c:	4293      	cmp	r3, r2
 801248e:	d10c      	bne.n	80124aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	f023 0308 	bic.w	r3, r3, #8
 8012496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	697a      	ldr	r2, [r7, #20]
 801249e:	4313      	orrs	r3, r2
 80124a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	f023 0304 	bic.w	r3, r3, #4
 80124a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4a15      	ldr	r2, [pc, #84]	; (8012504 <TIM_OC1_SetConfig+0xd8>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d003      	beq.n	80124ba <TIM_OC1_SetConfig+0x8e>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a14      	ldr	r2, [pc, #80]	; (8012508 <TIM_OC1_SetConfig+0xdc>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d111      	bne.n	80124de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80124c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	695b      	ldr	r3, [r3, #20]
 80124ce:	693a      	ldr	r2, [r7, #16]
 80124d0:	4313      	orrs	r3, r2
 80124d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	699b      	ldr	r3, [r3, #24]
 80124d8:	693a      	ldr	r2, [r7, #16]
 80124da:	4313      	orrs	r3, r2
 80124dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	693a      	ldr	r2, [r7, #16]
 80124e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	685a      	ldr	r2, [r3, #4]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	697a      	ldr	r2, [r7, #20]
 80124f6:	621a      	str	r2, [r3, #32]
}
 80124f8:	bf00      	nop
 80124fa:	371c      	adds	r7, #28
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr
 8012504:	40010000 	.word	0x40010000
 8012508:	40010400 	.word	0x40010400

0801250c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801250c:	b480      	push	{r7}
 801250e:	b087      	sub	sp, #28
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6a1b      	ldr	r3, [r3, #32]
 801251a:	f023 0210 	bic.w	r2, r3, #16
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6a1b      	ldr	r3, [r3, #32]
 8012526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	699b      	ldr	r3, [r3, #24]
 8012532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801253a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	021b      	lsls	r3, r3, #8
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	4313      	orrs	r3, r2
 801254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	f023 0320 	bic.w	r3, r3, #32
 8012556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	011b      	lsls	r3, r3, #4
 801255e:	697a      	ldr	r2, [r7, #20]
 8012560:	4313      	orrs	r3, r2
 8012562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4a22      	ldr	r2, [pc, #136]	; (80125f0 <TIM_OC2_SetConfig+0xe4>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d003      	beq.n	8012574 <TIM_OC2_SetConfig+0x68>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	4a21      	ldr	r2, [pc, #132]	; (80125f4 <TIM_OC2_SetConfig+0xe8>)
 8012570:	4293      	cmp	r3, r2
 8012572:	d10d      	bne.n	8012590 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801257a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	011b      	lsls	r3, r3, #4
 8012582:	697a      	ldr	r2, [r7, #20]
 8012584:	4313      	orrs	r3, r2
 8012586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801258e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	4a17      	ldr	r2, [pc, #92]	; (80125f0 <TIM_OC2_SetConfig+0xe4>)
 8012594:	4293      	cmp	r3, r2
 8012596:	d003      	beq.n	80125a0 <TIM_OC2_SetConfig+0x94>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4a16      	ldr	r2, [pc, #88]	; (80125f4 <TIM_OC2_SetConfig+0xe8>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d113      	bne.n	80125c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80125a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80125ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	695b      	ldr	r3, [r3, #20]
 80125b4:	009b      	lsls	r3, r3, #2
 80125b6:	693a      	ldr	r2, [r7, #16]
 80125b8:	4313      	orrs	r3, r2
 80125ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	699b      	ldr	r3, [r3, #24]
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	693a      	ldr	r2, [r7, #16]
 80125c4:	4313      	orrs	r3, r2
 80125c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	693a      	ldr	r2, [r7, #16]
 80125cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	621a      	str	r2, [r3, #32]
}
 80125e2:	bf00      	nop
 80125e4:	371c      	adds	r7, #28
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	40010000 	.word	0x40010000
 80125f4:	40010400 	.word	0x40010400

080125f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80125f8:	b480      	push	{r7}
 80125fa:	b087      	sub	sp, #28
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6a1b      	ldr	r3, [r3, #32]
 8012606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a1b      	ldr	r3, [r3, #32]
 8012612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	69db      	ldr	r3, [r3, #28]
 801261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	f023 0303 	bic.w	r3, r3, #3
 801262e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68fa      	ldr	r2, [r7, #12]
 8012636:	4313      	orrs	r3, r2
 8012638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	689b      	ldr	r3, [r3, #8]
 8012646:	021b      	lsls	r3, r3, #8
 8012648:	697a      	ldr	r2, [r7, #20]
 801264a:	4313      	orrs	r3, r2
 801264c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	4a21      	ldr	r2, [pc, #132]	; (80126d8 <TIM_OC3_SetConfig+0xe0>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d003      	beq.n	801265e <TIM_OC3_SetConfig+0x66>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	4a20      	ldr	r2, [pc, #128]	; (80126dc <TIM_OC3_SetConfig+0xe4>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d10d      	bne.n	801267a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	021b      	lsls	r3, r3, #8
 801266c:	697a      	ldr	r2, [r7, #20]
 801266e:	4313      	orrs	r3, r2
 8012670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4a16      	ldr	r2, [pc, #88]	; (80126d8 <TIM_OC3_SetConfig+0xe0>)
 801267e:	4293      	cmp	r3, r2
 8012680:	d003      	beq.n	801268a <TIM_OC3_SetConfig+0x92>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4a15      	ldr	r2, [pc, #84]	; (80126dc <TIM_OC3_SetConfig+0xe4>)
 8012686:	4293      	cmp	r3, r2
 8012688:	d113      	bne.n	80126b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	695b      	ldr	r3, [r3, #20]
 801269e:	011b      	lsls	r3, r3, #4
 80126a0:	693a      	ldr	r2, [r7, #16]
 80126a2:	4313      	orrs	r3, r2
 80126a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	699b      	ldr	r3, [r3, #24]
 80126aa:	011b      	lsls	r3, r3, #4
 80126ac:	693a      	ldr	r2, [r7, #16]
 80126ae:	4313      	orrs	r3, r2
 80126b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	693a      	ldr	r2, [r7, #16]
 80126b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	68fa      	ldr	r2, [r7, #12]
 80126bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	685a      	ldr	r2, [r3, #4]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	697a      	ldr	r2, [r7, #20]
 80126ca:	621a      	str	r2, [r3, #32]
}
 80126cc:	bf00      	nop
 80126ce:	371c      	adds	r7, #28
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr
 80126d8:	40010000 	.word	0x40010000
 80126dc:	40010400 	.word	0x40010400

080126e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b087      	sub	sp, #28
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6a1b      	ldr	r3, [r3, #32]
 80126ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a1b      	ldr	r3, [r3, #32]
 80126fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	69db      	ldr	r3, [r3, #28]
 8012706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	021b      	lsls	r3, r3, #8
 801271e:	68fa      	ldr	r2, [r7, #12]
 8012720:	4313      	orrs	r3, r2
 8012722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801272a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	689b      	ldr	r3, [r3, #8]
 8012730:	031b      	lsls	r3, r3, #12
 8012732:	693a      	ldr	r2, [r7, #16]
 8012734:	4313      	orrs	r3, r2
 8012736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4a12      	ldr	r2, [pc, #72]	; (8012784 <TIM_OC4_SetConfig+0xa4>)
 801273c:	4293      	cmp	r3, r2
 801273e:	d003      	beq.n	8012748 <TIM_OC4_SetConfig+0x68>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	4a11      	ldr	r2, [pc, #68]	; (8012788 <TIM_OC4_SetConfig+0xa8>)
 8012744:	4293      	cmp	r3, r2
 8012746:	d109      	bne.n	801275c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012748:	697b      	ldr	r3, [r7, #20]
 801274a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801274e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	695b      	ldr	r3, [r3, #20]
 8012754:	019b      	lsls	r3, r3, #6
 8012756:	697a      	ldr	r2, [r7, #20]
 8012758:	4313      	orrs	r3, r2
 801275a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	697a      	ldr	r2, [r7, #20]
 8012760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	68fa      	ldr	r2, [r7, #12]
 8012766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	685a      	ldr	r2, [r3, #4]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	693a      	ldr	r2, [r7, #16]
 8012774:	621a      	str	r2, [r3, #32]
}
 8012776:	bf00      	nop
 8012778:	371c      	adds	r7, #28
 801277a:	46bd      	mov	sp, r7
 801277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012780:	4770      	bx	lr
 8012782:	bf00      	nop
 8012784:	40010000 	.word	0x40010000
 8012788:	40010400 	.word	0x40010400

0801278c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801278c:	b480      	push	{r7}
 801278e:	b087      	sub	sp, #28
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6a1b      	ldr	r3, [r3, #32]
 801279c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6a1b      	ldr	r3, [r3, #32]
 80127a2:	f023 0201 	bic.w	r2, r3, #1
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	699b      	ldr	r3, [r3, #24]
 80127ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80127b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	011b      	lsls	r3, r3, #4
 80127bc:	693a      	ldr	r2, [r7, #16]
 80127be:	4313      	orrs	r3, r2
 80127c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	f023 030a 	bic.w	r3, r3, #10
 80127c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80127ca:	697a      	ldr	r2, [r7, #20]
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	4313      	orrs	r3, r2
 80127d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	693a      	ldr	r2, [r7, #16]
 80127d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	697a      	ldr	r2, [r7, #20]
 80127dc:	621a      	str	r2, [r3, #32]
}
 80127de:	bf00      	nop
 80127e0:	371c      	adds	r7, #28
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr

080127ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80127ea:	b480      	push	{r7}
 80127ec:	b087      	sub	sp, #28
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	60f8      	str	r0, [r7, #12]
 80127f2:	60b9      	str	r1, [r7, #8]
 80127f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	6a1b      	ldr	r3, [r3, #32]
 80127fa:	f023 0210 	bic.w	r2, r3, #16
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	699b      	ldr	r3, [r3, #24]
 8012806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	6a1b      	ldr	r3, [r3, #32]
 801280c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	031b      	lsls	r3, r3, #12
 801281a:	697a      	ldr	r2, [r7, #20]
 801281c:	4313      	orrs	r3, r2
 801281e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	011b      	lsls	r3, r3, #4
 801282c:	693a      	ldr	r2, [r7, #16]
 801282e:	4313      	orrs	r3, r2
 8012830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	697a      	ldr	r2, [r7, #20]
 8012836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	693a      	ldr	r2, [r7, #16]
 801283c:	621a      	str	r2, [r3, #32]
}
 801283e:	bf00      	nop
 8012840:	371c      	adds	r7, #28
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr

0801284a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801284a:	b480      	push	{r7}
 801284c:	b085      	sub	sp, #20
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
 8012852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012862:	683a      	ldr	r2, [r7, #0]
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	4313      	orrs	r3, r2
 8012868:	f043 0307 	orr.w	r3, r3, #7
 801286c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	68fa      	ldr	r2, [r7, #12]
 8012872:	609a      	str	r2, [r3, #8]
}
 8012874:	bf00      	nop
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012880:	b480      	push	{r7}
 8012882:	b087      	sub	sp, #28
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
 801288c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	689b      	ldr	r3, [r3, #8]
 8012892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801289a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	021a      	lsls	r2, r3, #8
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	431a      	orrs	r2, r3
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	4313      	orrs	r3, r2
 80128a8:	697a      	ldr	r2, [r7, #20]
 80128aa:	4313      	orrs	r3, r2
 80128ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	697a      	ldr	r2, [r7, #20]
 80128b2:	609a      	str	r2, [r3, #8]
}
 80128b4:	bf00      	nop
 80128b6:	371c      	adds	r7, #28
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b087      	sub	sp, #28
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	f003 031f 	and.w	r3, r3, #31
 80128d2:	2201      	movs	r2, #1
 80128d4:	fa02 f303 	lsl.w	r3, r2, r3
 80128d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6a1a      	ldr	r2, [r3, #32]
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	43db      	mvns	r3, r3
 80128e2:	401a      	ands	r2, r3
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	6a1a      	ldr	r2, [r3, #32]
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	f003 031f 	and.w	r3, r3, #31
 80128f2:	6879      	ldr	r1, [r7, #4]
 80128f4:	fa01 f303 	lsl.w	r3, r1, r3
 80128f8:	431a      	orrs	r2, r3
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	621a      	str	r2, [r3, #32]
}
 80128fe:	bf00      	nop
 8012900:	371c      	adds	r7, #28
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr
	...

0801290c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801290c:	b480      	push	{r7}
 801290e:	b085      	sub	sp, #20
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801291c:	2b01      	cmp	r3, #1
 801291e:	d101      	bne.n	8012924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012920:	2302      	movs	r3, #2
 8012922:	e05a      	b.n	80129da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2201      	movs	r2, #1
 8012928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2202      	movs	r2, #2
 8012930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801294a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	68fa      	ldr	r2, [r7, #12]
 8012952:	4313      	orrs	r3, r2
 8012954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	68fa      	ldr	r2, [r7, #12]
 801295c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4a21      	ldr	r2, [pc, #132]	; (80129e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012964:	4293      	cmp	r3, r2
 8012966:	d022      	beq.n	80129ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012970:	d01d      	beq.n	80129ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4a1d      	ldr	r2, [pc, #116]	; (80129ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012978:	4293      	cmp	r3, r2
 801297a:	d018      	beq.n	80129ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a1b      	ldr	r2, [pc, #108]	; (80129f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012982:	4293      	cmp	r3, r2
 8012984:	d013      	beq.n	80129ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	4a1a      	ldr	r2, [pc, #104]	; (80129f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d00e      	beq.n	80129ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4a18      	ldr	r2, [pc, #96]	; (80129f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012996:	4293      	cmp	r3, r2
 8012998:	d009      	beq.n	80129ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4a17      	ldr	r2, [pc, #92]	; (80129fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d004      	beq.n	80129ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a15      	ldr	r2, [pc, #84]	; (8012a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d10c      	bne.n	80129c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80129b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	4313      	orrs	r3, r2
 80129be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	68ba      	ldr	r2, [r7, #8]
 80129c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2201      	movs	r2, #1
 80129cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2200      	movs	r2, #0
 80129d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80129d8:	2300      	movs	r3, #0
}
 80129da:	4618      	mov	r0, r3
 80129dc:	3714      	adds	r7, #20
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr
 80129e6:	bf00      	nop
 80129e8:	40010000 	.word	0x40010000
 80129ec:	40000400 	.word	0x40000400
 80129f0:	40000800 	.word	0x40000800
 80129f4:	40000c00 	.word	0x40000c00
 80129f8:	40010400 	.word	0x40010400
 80129fc:	40014000 	.word	0x40014000
 8012a00:	40001800 	.word	0x40001800

08012a04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d101      	bne.n	8012a20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012a1c:	2302      	movs	r3, #2
 8012a1e:	e03d      	b.n	8012a9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2201      	movs	r2, #1
 8012a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	4313      	orrs	r3, r2
 8012a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	4313      	orrs	r3, r2
 8012a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4313      	orrs	r3, r2
 8012a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	691b      	ldr	r3, [r3, #16]
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	695b      	ldr	r3, [r3, #20]
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	69db      	ldr	r3, [r3, #28]
 8012a86:	4313      	orrs	r3, r2
 8012a88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2200      	movs	r2, #0
 8012a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012a9a:	2300      	movs	r3, #0
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3714      	adds	r7, #20
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr

08012aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012ab0:	bf00      	nop
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr

08012abc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012ac4:	bf00      	nop
 8012ac6:	370c      	adds	r7, #12
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr

08012ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d101      	bne.n	8012ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	e03f      	b.n	8012b62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d106      	bne.n	8012afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2200      	movs	r2, #0
 8012af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7f1 fec8 	bl	800488c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2224      	movs	r2, #36	; 0x24
 8012b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	68da      	ldr	r2, [r3, #12]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f000 fe95 	bl	8013844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	691a      	ldr	r2, [r3, #16]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	695a      	ldr	r2, [r3, #20]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	68da      	ldr	r2, [r3, #12]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2220      	movs	r2, #32
 8012b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2220      	movs	r2, #32
 8012b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012b60:	2300      	movs	r3, #0
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	3708      	adds	r7, #8
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012b6a:	b480      	push	{r7}
 8012b6c:	b085      	sub	sp, #20
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	60f8      	str	r0, [r7, #12]
 8012b72:	60b9      	str	r1, [r7, #8]
 8012b74:	4613      	mov	r3, r2
 8012b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b20      	cmp	r3, #32
 8012b82:	d130      	bne.n	8012be6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d002      	beq.n	8012b90 <HAL_UART_Transmit_IT+0x26>
 8012b8a:	88fb      	ldrh	r3, [r7, #6]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d101      	bne.n	8012b94 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8012b90:	2301      	movs	r3, #1
 8012b92:	e029      	b.n	8012be8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b9a:	2b01      	cmp	r3, #1
 8012b9c:	d101      	bne.n	8012ba2 <HAL_UART_Transmit_IT+0x38>
 8012b9e:	2302      	movs	r3, #2
 8012ba0:	e022      	b.n	8012be8 <HAL_UART_Transmit_IT+0x7e>
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	2201      	movs	r2, #1
 8012ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	68ba      	ldr	r2, [r7, #8]
 8012bae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	88fa      	ldrh	r2, [r7, #6]
 8012bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	88fa      	ldrh	r2, [r7, #6]
 8012bba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2221      	movs	r2, #33	; 0x21
 8012bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	68da      	ldr	r2, [r3, #12]
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012be0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8012be2:	2300      	movs	r3, #0
 8012be4:	e000      	b.n	8012be8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8012be6:	2302      	movs	r3, #2
  }
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3714      	adds	r7, #20
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b08c      	sub	sp, #48	; 0x30
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	4613      	mov	r3, r2
 8012c00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	2b20      	cmp	r3, #32
 8012c0c:	d165      	bne.n	8012cda <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d002      	beq.n	8012c1a <HAL_UART_Transmit_DMA+0x26>
 8012c14:	88fb      	ldrh	r3, [r7, #6]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d101      	bne.n	8012c1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	e05e      	b.n	8012cdc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d101      	bne.n	8012c2c <HAL_UART_Transmit_DMA+0x38>
 8012c28:	2302      	movs	r3, #2
 8012c2a:	e057      	b.n	8012cdc <HAL_UART_Transmit_DMA+0xe8>
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	88fa      	ldrh	r2, [r7, #6]
 8012c3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	88fa      	ldrh	r2, [r7, #6]
 8012c44:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2221      	movs	r2, #33	; 0x21
 8012c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c58:	4a22      	ldr	r2, [pc, #136]	; (8012ce4 <HAL_UART_Transmit_DMA+0xf0>)
 8012c5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c60:	4a21      	ldr	r2, [pc, #132]	; (8012ce8 <HAL_UART_Transmit_DMA+0xf4>)
 8012c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c68:	4a20      	ldr	r2, [pc, #128]	; (8012cec <HAL_UART_Transmit_DMA+0xf8>)
 8012c6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c70:	2200      	movs	r2, #0
 8012c72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8012c74:	f107 0308 	add.w	r3, r7, #8
 8012c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c80:	6819      	ldr	r1, [r3, #0]
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	3304      	adds	r3, #4
 8012c88:	461a      	mov	r2, r3
 8012c8a:	88fb      	ldrh	r3, [r7, #6]
 8012c8c:	f7f9 ff22 	bl	800cad4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012c98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	3314      	adds	r3, #20
 8012ca8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	e853 3f00 	ldrex	r3, [r3]
 8012cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	3314      	adds	r3, #20
 8012cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cc2:	627a      	str	r2, [r7, #36]	; 0x24
 8012cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cc6:	6a39      	ldr	r1, [r7, #32]
 8012cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cca:	e841 2300 	strex	r3, r2, [r1]
 8012cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d1e5      	bne.n	8012ca2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	e000      	b.n	8012cdc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8012cda:	2302      	movs	r3, #2
  }
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3730      	adds	r7, #48	; 0x30
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	08013375 	.word	0x08013375
 8012ce8:	0801340f 	.word	0x0801340f
 8012cec:	0801342b 	.word	0x0801342b

08012cf0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b090      	sub	sp, #64	; 0x40
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	695b      	ldr	r3, [r3, #20]
 8012d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d06:	2b80      	cmp	r3, #128	; 0x80
 8012d08:	bf0c      	ite	eq
 8012d0a:	2301      	moveq	r3, #1
 8012d0c:	2300      	movne	r3, #0
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d18:	b2db      	uxtb	r3, r3
 8012d1a:	2b21      	cmp	r3, #33	; 0x21
 8012d1c:	d128      	bne.n	8012d70 <HAL_UART_DMAStop+0x80>
 8012d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d025      	beq.n	8012d70 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	3314      	adds	r3, #20
 8012d2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	e853 3f00 	ldrex	r3, [r3]
 8012d32:	623b      	str	r3, [r7, #32]
   return(result);
 8012d34:	6a3b      	ldr	r3, [r7, #32]
 8012d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	3314      	adds	r3, #20
 8012d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d44:	633a      	str	r2, [r7, #48]	; 0x30
 8012d46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d4c:	e841 2300 	strex	r3, r2, [r1]
 8012d50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d1e5      	bne.n	8012d24 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d004      	beq.n	8012d6a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7f9 ff0d 	bl	800cb84 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 fba7 	bl	80134be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	695b      	ldr	r3, [r3, #20]
 8012d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d7a:	2b40      	cmp	r3, #64	; 0x40
 8012d7c:	bf0c      	ite	eq
 8012d7e:	2301      	moveq	r3, #1
 8012d80:	2300      	movne	r3, #0
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	2b22      	cmp	r3, #34	; 0x22
 8012d90:	d128      	bne.n	8012de4 <HAL_UART_DMAStop+0xf4>
 8012d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d025      	beq.n	8012de4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	3314      	adds	r3, #20
 8012d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	e853 3f00 	ldrex	r3, [r3]
 8012da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012dae:	637b      	str	r3, [r7, #52]	; 0x34
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	3314      	adds	r3, #20
 8012db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012db8:	61fa      	str	r2, [r7, #28]
 8012dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dbc:	69b9      	ldr	r1, [r7, #24]
 8012dbe:	69fa      	ldr	r2, [r7, #28]
 8012dc0:	e841 2300 	strex	r3, r2, [r1]
 8012dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1e5      	bne.n	8012d98 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d004      	beq.n	8012dde <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7f9 fed3 	bl	800cb84 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 fb95 	bl	801350e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3740      	adds	r7, #64	; 0x40
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
	...

08012df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b0ba      	sub	sp, #232	; 0xe8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	695b      	ldr	r3, [r3, #20]
 8012e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8012e16:	2300      	movs	r3, #0
 8012e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8012e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e26:	f003 030f 	and.w	r3, r3, #15
 8012e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8012e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d10f      	bne.n	8012e56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e3a:	f003 0320 	and.w	r3, r3, #32
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d009      	beq.n	8012e56 <HAL_UART_IRQHandler+0x66>
 8012e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e46:	f003 0320 	and.w	r3, r3, #32
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d003      	beq.n	8012e56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8012e4e:	6878      	ldr	r0, [r7, #4]
 8012e50:	f000 fc3c 	bl	80136cc <UART_Receive_IT>
      return;
 8012e54:	e256      	b.n	8013304 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8012e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	f000 80de 	beq.w	801301c <HAL_UART_IRQHandler+0x22c>
 8012e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012e64:	f003 0301 	and.w	r3, r3, #1
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d106      	bne.n	8012e7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f000 80d1 	beq.w	801301c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e7e:	f003 0301 	and.w	r3, r3, #1
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00b      	beq.n	8012e9e <HAL_UART_IRQHandler+0xae>
 8012e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d005      	beq.n	8012e9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e96:	f043 0201 	orr.w	r2, r3, #1
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ea2:	f003 0304 	and.w	r3, r3, #4
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00b      	beq.n	8012ec2 <HAL_UART_IRQHandler+0xd2>
 8012eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012eae:	f003 0301 	and.w	r3, r3, #1
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d005      	beq.n	8012ec2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eba:	f043 0202 	orr.w	r2, r3, #2
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ec6:	f003 0302 	and.w	r3, r3, #2
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d00b      	beq.n	8012ee6 <HAL_UART_IRQHandler+0xf6>
 8012ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ed2:	f003 0301 	and.w	r3, r3, #1
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d005      	beq.n	8012ee6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ede:	f043 0204 	orr.w	r2, r3, #4
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8012ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012eea:	f003 0308 	and.w	r3, r3, #8
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d011      	beq.n	8012f16 <HAL_UART_IRQHandler+0x126>
 8012ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ef6:	f003 0320 	and.w	r3, r3, #32
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d105      	bne.n	8012f0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8012efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f02:	f003 0301 	and.w	r3, r3, #1
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d005      	beq.n	8012f16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f0e:	f043 0208 	orr.w	r2, r3, #8
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	f000 81ed 	beq.w	80132fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012f24:	f003 0320 	and.w	r3, r3, #32
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d008      	beq.n	8012f3e <HAL_UART_IRQHandler+0x14e>
 8012f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012f30:	f003 0320 	and.w	r3, r3, #32
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d002      	beq.n	8012f3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f000 fbc7 	bl	80136cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	695b      	ldr	r3, [r3, #20]
 8012f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f48:	2b40      	cmp	r3, #64	; 0x40
 8012f4a:	bf0c      	ite	eq
 8012f4c:	2301      	moveq	r3, #1
 8012f4e:	2300      	movne	r3, #0
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f5a:	f003 0308 	and.w	r3, r3, #8
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d103      	bne.n	8012f6a <HAL_UART_IRQHandler+0x17a>
 8012f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d04f      	beq.n	801300a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 facf 	bl	801350e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	695b      	ldr	r3, [r3, #20]
 8012f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f7a:	2b40      	cmp	r3, #64	; 0x40
 8012f7c:	d141      	bne.n	8013002 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	3314      	adds	r3, #20
 8012f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012f8c:	e853 3f00 	ldrex	r3, [r3]
 8012f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	3314      	adds	r3, #20
 8012fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012faa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012fba:	e841 2300 	strex	r3, r2, [r1]
 8012fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d1d9      	bne.n	8012f7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d013      	beq.n	8012ffa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd6:	4a7d      	ldr	r2, [pc, #500]	; (80131cc <HAL_UART_IRQHandler+0x3dc>)
 8012fd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7f9 fe40 	bl	800cc64 <HAL_DMA_Abort_IT>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d016      	beq.n	8013018 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012ff4:	4610      	mov	r0, r2
 8012ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ff8:	e00e      	b.n	8013018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 f9a4 	bl	8013348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013000:	e00a      	b.n	8013018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f000 f9a0 	bl	8013348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013008:	e006      	b.n	8013018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f000 f99c 	bl	8013348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2200      	movs	r2, #0
 8013014:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8013016:	e170      	b.n	80132fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013018:	bf00      	nop
    return;
 801301a:	e16e      	b.n	80132fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013020:	2b01      	cmp	r3, #1
 8013022:	f040 814a 	bne.w	80132ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8013026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801302a:	f003 0310 	and.w	r3, r3, #16
 801302e:	2b00      	cmp	r3, #0
 8013030:	f000 8143 	beq.w	80132ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8013034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013038:	f003 0310 	and.w	r3, r3, #16
 801303c:	2b00      	cmp	r3, #0
 801303e:	f000 813c 	beq.w	80132ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013042:	2300      	movs	r3, #0
 8013044:	60bb      	str	r3, [r7, #8]
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	60bb      	str	r3, [r7, #8]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	60bb      	str	r3, [r7, #8]
 8013056:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	695b      	ldr	r3, [r3, #20]
 801305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013062:	2b40      	cmp	r3, #64	; 0x40
 8013064:	f040 80b4 	bne.w	80131d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013078:	2b00      	cmp	r3, #0
 801307a:	f000 8140 	beq.w	80132fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013086:	429a      	cmp	r2, r3
 8013088:	f080 8139 	bcs.w	80132fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013092:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013098:	69db      	ldr	r3, [r3, #28]
 801309a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801309e:	f000 8088 	beq.w	80131b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	330c      	adds	r3, #12
 80130a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80130b0:	e853 3f00 	ldrex	r3, [r3]
 80130b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80130b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80130bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	330c      	adds	r3, #12
 80130ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80130ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80130d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80130da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80130de:	e841 2300 	strex	r3, r2, [r1]
 80130e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80130e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d1d9      	bne.n	80130a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	3314      	adds	r3, #20
 80130f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80130f8:	e853 3f00 	ldrex	r3, [r3]
 80130fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80130fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013100:	f023 0301 	bic.w	r3, r3, #1
 8013104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	3314      	adds	r3, #20
 801310e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013112:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013116:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013118:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801311a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801311e:	e841 2300 	strex	r3, r2, [r1]
 8013122:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013126:	2b00      	cmp	r3, #0
 8013128:	d1e1      	bne.n	80130ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	3314      	adds	r3, #20
 8013130:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013134:	e853 3f00 	ldrex	r3, [r3]
 8013138:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801313a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801313c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	3314      	adds	r3, #20
 801314a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801314e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013152:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013156:	e841 2300 	strex	r3, r2, [r1]
 801315a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801315c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801315e:	2b00      	cmp	r3, #0
 8013160:	d1e3      	bne.n	801312a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2220      	movs	r2, #32
 8013166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2200      	movs	r2, #0
 801316e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	330c      	adds	r3, #12
 8013176:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801317a:	e853 3f00 	ldrex	r3, [r3]
 801317e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013182:	f023 0310 	bic.w	r3, r3, #16
 8013186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	330c      	adds	r3, #12
 8013190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013194:	65ba      	str	r2, [r7, #88]	; 0x58
 8013196:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801319a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801319c:	e841 2300 	strex	r3, r2, [r1]
 80131a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80131a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d1e3      	bne.n	8013170 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7f9 fce9 	bl	800cb84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	1ad3      	subs	r3, r2, r3
 80131be:	b29b      	uxth	r3, r3
 80131c0:	4619      	mov	r1, r3
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f000 f8ca 	bl	801335c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80131c8:	e099      	b.n	80132fe <HAL_UART_IRQHandler+0x50e>
 80131ca:	bf00      	nop
 80131cc:	080135d5 	.word	0x080135d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80131d8:	b29b      	uxth	r3, r3
 80131da:	1ad3      	subs	r3, r2, r3
 80131dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f000 808b 	beq.w	8013302 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80131ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	f000 8086 	beq.w	8013302 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	330c      	adds	r3, #12
 80131fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013200:	e853 3f00 	ldrex	r3, [r3]
 8013204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801320c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	330c      	adds	r3, #12
 8013216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801321a:	647a      	str	r2, [r7, #68]	; 0x44
 801321c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801321e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013222:	e841 2300 	strex	r3, r2, [r1]
 8013226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801322a:	2b00      	cmp	r3, #0
 801322c:	d1e3      	bne.n	80131f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	3314      	adds	r3, #20
 8013234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013238:	e853 3f00 	ldrex	r3, [r3]
 801323c:	623b      	str	r3, [r7, #32]
   return(result);
 801323e:	6a3b      	ldr	r3, [r7, #32]
 8013240:	f023 0301 	bic.w	r3, r3, #1
 8013244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	3314      	adds	r3, #20
 801324e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013252:	633a      	str	r2, [r7, #48]	; 0x30
 8013254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801325a:	e841 2300 	strex	r3, r2, [r1]
 801325e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013262:	2b00      	cmp	r3, #0
 8013264:	d1e3      	bne.n	801322e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2220      	movs	r2, #32
 801326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2200      	movs	r2, #0
 8013272:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	330c      	adds	r3, #12
 801327a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	e853 3f00 	ldrex	r3, [r3]
 8013282:	60fb      	str	r3, [r7, #12]
   return(result);
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f023 0310 	bic.w	r3, r3, #16
 801328a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	330c      	adds	r3, #12
 8013294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013298:	61fa      	str	r2, [r7, #28]
 801329a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801329c:	69b9      	ldr	r1, [r7, #24]
 801329e:	69fa      	ldr	r2, [r7, #28]
 80132a0:	e841 2300 	strex	r3, r2, [r1]
 80132a4:	617b      	str	r3, [r7, #20]
   return(result);
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d1e3      	bne.n	8013274 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80132ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80132b0:	4619      	mov	r1, r3
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f000 f852 	bl	801335c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80132b8:	e023      	b.n	8013302 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80132ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80132be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d009      	beq.n	80132da <HAL_UART_IRQHandler+0x4ea>
 80132c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f000 f992 	bl	80135fc <UART_Transmit_IT>
    return;
 80132d8:	e014      	b.n	8013304 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80132da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80132de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d00e      	beq.n	8013304 <HAL_UART_IRQHandler+0x514>
 80132e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d008      	beq.n	8013304 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 f9d2 	bl	801369c <UART_EndTransmit_IT>
    return;
 80132f8:	e004      	b.n	8013304 <HAL_UART_IRQHandler+0x514>
    return;
 80132fa:	bf00      	nop
 80132fc:	e002      	b.n	8013304 <HAL_UART_IRQHandler+0x514>
      return;
 80132fe:	bf00      	nop
 8013300:	e000      	b.n	8013304 <HAL_UART_IRQHandler+0x514>
      return;
 8013302:	bf00      	nop
  }
}
 8013304:	37e8      	adds	r7, #232	; 0xe8
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
 801330a:	bf00      	nop

0801330c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8013314:	bf00      	nop
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr

08013320 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8013328:	bf00      	nop
 801332a:	370c      	adds	r7, #12
 801332c:	46bd      	mov	sp, r7
 801332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013332:	4770      	bx	lr

08013334 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801333c:	bf00      	nop
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013346:	4770      	bx	lr

08013348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013348:	b480      	push	{r7}
 801334a:	b083      	sub	sp, #12
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8013350:	bf00      	nop
 8013352:	370c      	adds	r7, #12
 8013354:	46bd      	mov	sp, r7
 8013356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335a:	4770      	bx	lr

0801335c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801335c:	b480      	push	{r7}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	460b      	mov	r3, r1
 8013366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013368:	bf00      	nop
 801336a:	370c      	adds	r7, #12
 801336c:	46bd      	mov	sp, r7
 801336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013372:	4770      	bx	lr

08013374 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b090      	sub	sp, #64	; 0x40
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013380:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801338c:	2b00      	cmp	r3, #0
 801338e:	d137      	bne.n	8013400 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8013390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013392:	2200      	movs	r2, #0
 8013394:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	3314      	adds	r3, #20
 801339c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a0:	e853 3f00 	ldrex	r3, [r3]
 80133a4:	623b      	str	r3, [r7, #32]
   return(result);
 80133a6:	6a3b      	ldr	r3, [r7, #32]
 80133a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80133ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80133ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	3314      	adds	r3, #20
 80133b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133b6:	633a      	str	r2, [r7, #48]	; 0x30
 80133b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133be:	e841 2300 	strex	r3, r2, [r1]
 80133c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80133c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d1e5      	bne.n	8013396 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80133ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	330c      	adds	r3, #12
 80133d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	e853 3f00 	ldrex	r3, [r3]
 80133d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133e0:	637b      	str	r3, [r7, #52]	; 0x34
 80133e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	330c      	adds	r3, #12
 80133e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133ea:	61fa      	str	r2, [r7, #28]
 80133ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133ee:	69b9      	ldr	r1, [r7, #24]
 80133f0:	69fa      	ldr	r2, [r7, #28]
 80133f2:	e841 2300 	strex	r3, r2, [r1]
 80133f6:	617b      	str	r3, [r7, #20]
   return(result);
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d1e5      	bne.n	80133ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80133fe:	e002      	b.n	8013406 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8013400:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013402:	f7ff ff83 	bl	801330c <HAL_UART_TxCpltCallback>
}
 8013406:	bf00      	nop
 8013408:	3740      	adds	r7, #64	; 0x40
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801340e:	b580      	push	{r7, lr}
 8013410:	b084      	sub	sp, #16
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801341a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801341c:	68f8      	ldr	r0, [r7, #12]
 801341e:	f7ff ff7f 	bl	8013320 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013422:	bf00      	nop
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}

0801342a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b084      	sub	sp, #16
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013432:	2300      	movs	r3, #0
 8013434:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801343a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	695b      	ldr	r3, [r3, #20]
 8013442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013446:	2b80      	cmp	r3, #128	; 0x80
 8013448:	bf0c      	ite	eq
 801344a:	2301      	moveq	r3, #1
 801344c:	2300      	movne	r3, #0
 801344e:	b2db      	uxtb	r3, r3
 8013450:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013458:	b2db      	uxtb	r3, r3
 801345a:	2b21      	cmp	r3, #33	; 0x21
 801345c:	d108      	bne.n	8013470 <UART_DMAError+0x46>
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d005      	beq.n	8013470 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	2200      	movs	r2, #0
 8013468:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801346a:	68b8      	ldr	r0, [r7, #8]
 801346c:	f000 f827 	bl	80134be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	695b      	ldr	r3, [r3, #20]
 8013476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801347a:	2b40      	cmp	r3, #64	; 0x40
 801347c:	bf0c      	ite	eq
 801347e:	2301      	moveq	r3, #1
 8013480:	2300      	movne	r3, #0
 8013482:	b2db      	uxtb	r3, r3
 8013484:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801348c:	b2db      	uxtb	r3, r3
 801348e:	2b22      	cmp	r3, #34	; 0x22
 8013490:	d108      	bne.n	80134a4 <UART_DMAError+0x7a>
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d005      	beq.n	80134a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	2200      	movs	r2, #0
 801349c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801349e:	68b8      	ldr	r0, [r7, #8]
 80134a0:	f000 f835 	bl	801350e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134a8:	f043 0210 	orr.w	r2, r3, #16
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80134b0:	68b8      	ldr	r0, [r7, #8]
 80134b2:	f7ff ff49 	bl	8013348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80134b6:	bf00      	nop
 80134b8:	3710      	adds	r7, #16
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80134be:	b480      	push	{r7}
 80134c0:	b089      	sub	sp, #36	; 0x24
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	330c      	adds	r3, #12
 80134cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	e853 3f00 	ldrex	r3, [r3]
 80134d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80134dc:	61fb      	str	r3, [r7, #28]
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	330c      	adds	r3, #12
 80134e4:	69fa      	ldr	r2, [r7, #28]
 80134e6:	61ba      	str	r2, [r7, #24]
 80134e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ea:	6979      	ldr	r1, [r7, #20]
 80134ec:	69ba      	ldr	r2, [r7, #24]
 80134ee:	e841 2300 	strex	r3, r2, [r1]
 80134f2:	613b      	str	r3, [r7, #16]
   return(result);
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d1e5      	bne.n	80134c6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2220      	movs	r2, #32
 80134fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8013502:	bf00      	nop
 8013504:	3724      	adds	r7, #36	; 0x24
 8013506:	46bd      	mov	sp, r7
 8013508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350c:	4770      	bx	lr

0801350e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801350e:	b480      	push	{r7}
 8013510:	b095      	sub	sp, #84	; 0x54
 8013512:	af00      	add	r7, sp, #0
 8013514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	330c      	adds	r3, #12
 801351c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013520:	e853 3f00 	ldrex	r3, [r3]
 8013524:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801352c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	330c      	adds	r3, #12
 8013534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013536:	643a      	str	r2, [r7, #64]	; 0x40
 8013538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801353a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801353c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801353e:	e841 2300 	strex	r3, r2, [r1]
 8013542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013546:	2b00      	cmp	r3, #0
 8013548:	d1e5      	bne.n	8013516 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	3314      	adds	r3, #20
 8013550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013552:	6a3b      	ldr	r3, [r7, #32]
 8013554:	e853 3f00 	ldrex	r3, [r3]
 8013558:	61fb      	str	r3, [r7, #28]
   return(result);
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	f023 0301 	bic.w	r3, r3, #1
 8013560:	64bb      	str	r3, [r7, #72]	; 0x48
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	3314      	adds	r3, #20
 8013568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801356a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801356c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801356e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013572:	e841 2300 	strex	r3, r2, [r1]
 8013576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357a:	2b00      	cmp	r3, #0
 801357c:	d1e5      	bne.n	801354a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013582:	2b01      	cmp	r3, #1
 8013584:	d119      	bne.n	80135ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	330c      	adds	r3, #12
 801358c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	e853 3f00 	ldrex	r3, [r3]
 8013594:	60bb      	str	r3, [r7, #8]
   return(result);
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	f023 0310 	bic.w	r3, r3, #16
 801359c:	647b      	str	r3, [r7, #68]	; 0x44
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	330c      	adds	r3, #12
 80135a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135a6:	61ba      	str	r2, [r7, #24]
 80135a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135aa:	6979      	ldr	r1, [r7, #20]
 80135ac:	69ba      	ldr	r2, [r7, #24]
 80135ae:	e841 2300 	strex	r3, r2, [r1]
 80135b2:	613b      	str	r3, [r7, #16]
   return(result);
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d1e5      	bne.n	8013586 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2220      	movs	r2, #32
 80135be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2200      	movs	r2, #0
 80135c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80135c8:	bf00      	nop
 80135ca:	3754      	adds	r7, #84	; 0x54
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr

080135d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2200      	movs	r2, #0
 80135e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	2200      	movs	r2, #0
 80135ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	f7ff feaa 	bl	8013348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80135f4:	bf00      	nop
 80135f6:	3710      	adds	r7, #16
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801360a:	b2db      	uxtb	r3, r3
 801360c:	2b21      	cmp	r3, #33	; 0x21
 801360e:	d13e      	bne.n	801368e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013618:	d114      	bne.n	8013644 <UART_Transmit_IT+0x48>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	691b      	ldr	r3, [r3, #16]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d110      	bne.n	8013644 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6a1b      	ldr	r3, [r3, #32]
 8013626:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	881b      	ldrh	r3, [r3, #0]
 801362c:	461a      	mov	r2, r3
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013636:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6a1b      	ldr	r3, [r3, #32]
 801363c:	1c9a      	adds	r2, r3, #2
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	621a      	str	r2, [r3, #32]
 8013642:	e008      	b.n	8013656 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6a1b      	ldr	r3, [r3, #32]
 8013648:	1c59      	adds	r1, r3, #1
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	6211      	str	r1, [r2, #32]
 801364e:	781a      	ldrb	r2, [r3, #0]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801365a:	b29b      	uxth	r3, r3
 801365c:	3b01      	subs	r3, #1
 801365e:	b29b      	uxth	r3, r3
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	4619      	mov	r1, r3
 8013664:	84d1      	strh	r1, [r2, #38]	; 0x26
 8013666:	2b00      	cmp	r3, #0
 8013668:	d10f      	bne.n	801368a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	68da      	ldr	r2, [r3, #12]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013678:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	68da      	ldr	r2, [r3, #12]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013688:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801368a:	2300      	movs	r3, #0
 801368c:	e000      	b.n	8013690 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801368e:	2302      	movs	r3, #2
  }
}
 8013690:	4618      	mov	r0, r3
 8013692:	3714      	adds	r7, #20
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr

0801369c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	68da      	ldr	r2, [r3, #12]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80136b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2220      	movs	r2, #32
 80136b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f7ff fe25 	bl	801330c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80136c2:	2300      	movs	r3, #0
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3708      	adds	r7, #8
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b08c      	sub	sp, #48	; 0x30
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	2b22      	cmp	r3, #34	; 0x22
 80136de:	f040 80ab 	bne.w	8013838 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	689b      	ldr	r3, [r3, #8]
 80136e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80136ea:	d117      	bne.n	801371c <UART_Receive_IT+0x50>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	691b      	ldr	r3, [r3, #16]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d113      	bne.n	801371c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80136f4:	2300      	movs	r3, #0
 80136f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136fc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	b29b      	uxth	r3, r3
 8013706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801370a:	b29a      	uxth	r2, r3
 801370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013714:	1c9a      	adds	r2, r3, #2
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	629a      	str	r2, [r3, #40]	; 0x28
 801371a:	e026      	b.n	801376a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013720:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8013722:	2300      	movs	r3, #0
 8013724:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	689b      	ldr	r3, [r3, #8]
 801372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801372e:	d007      	beq.n	8013740 <UART_Receive_IT+0x74>
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	689b      	ldr	r3, [r3, #8]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10a      	bne.n	801374e <UART_Receive_IT+0x82>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	691b      	ldr	r3, [r3, #16]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d106      	bne.n	801374e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	b2da      	uxtb	r2, r3
 8013748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374a:	701a      	strb	r2, [r3, #0]
 801374c:	e008      	b.n	8013760 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	b2db      	uxtb	r3, r3
 8013756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801375a:	b2da      	uxtb	r2, r3
 801375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013764:	1c5a      	adds	r2, r3, #1
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801376e:	b29b      	uxth	r3, r3
 8013770:	3b01      	subs	r3, #1
 8013772:	b29b      	uxth	r3, r3
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	4619      	mov	r1, r3
 8013778:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801377a:	2b00      	cmp	r3, #0
 801377c:	d15a      	bne.n	8013834 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	68da      	ldr	r2, [r3, #12]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f022 0220 	bic.w	r2, r2, #32
 801378c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	68da      	ldr	r2, [r3, #12]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801379c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	695a      	ldr	r2, [r3, #20]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f022 0201 	bic.w	r2, r2, #1
 80137ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2220      	movs	r2, #32
 80137b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137ba:	2b01      	cmp	r3, #1
 80137bc:	d135      	bne.n	801382a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2200      	movs	r2, #0
 80137c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	330c      	adds	r3, #12
 80137ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	e853 3f00 	ldrex	r3, [r3]
 80137d2:	613b      	str	r3, [r7, #16]
   return(result);
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	f023 0310 	bic.w	r3, r3, #16
 80137da:	627b      	str	r3, [r7, #36]	; 0x24
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	330c      	adds	r3, #12
 80137e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137e4:	623a      	str	r2, [r7, #32]
 80137e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137e8:	69f9      	ldr	r1, [r7, #28]
 80137ea:	6a3a      	ldr	r2, [r7, #32]
 80137ec:	e841 2300 	strex	r3, r2, [r1]
 80137f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1e5      	bne.n	80137c4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	f003 0310 	and.w	r3, r3, #16
 8013802:	2b10      	cmp	r3, #16
 8013804:	d10a      	bne.n	801381c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013806:	2300      	movs	r3, #0
 8013808:	60fb      	str	r3, [r7, #12]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	60fb      	str	r3, [r7, #12]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	60fb      	str	r3, [r7, #12]
 801381a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013820:	4619      	mov	r1, r3
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f7ff fd9a 	bl	801335c <HAL_UARTEx_RxEventCallback>
 8013828:	e002      	b.n	8013830 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f7ff fd82 	bl	8013334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8013830:	2300      	movs	r3, #0
 8013832:	e002      	b.n	801383a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8013834:	2300      	movs	r3, #0
 8013836:	e000      	b.n	801383a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8013838:	2302      	movs	r3, #2
  }
}
 801383a:	4618      	mov	r0, r3
 801383c:	3730      	adds	r7, #48	; 0x30
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
	...

08013844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013848:	b0c0      	sub	sp, #256	; 0x100
 801384a:	af00      	add	r7, sp, #0
 801384c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	691b      	ldr	r3, [r3, #16]
 8013858:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013860:	68d9      	ldr	r1, [r3, #12]
 8013862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	ea40 0301 	orr.w	r3, r0, r1
 801386c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013872:	689a      	ldr	r2, [r3, #8]
 8013874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013878:	691b      	ldr	r3, [r3, #16]
 801387a:	431a      	orrs	r2, r3
 801387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013880:	695b      	ldr	r3, [r3, #20]
 8013882:	431a      	orrs	r2, r3
 8013884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013888:	69db      	ldr	r3, [r3, #28]
 801388a:	4313      	orrs	r3, r2
 801388c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8013890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801389c:	f021 010c 	bic.w	r1, r1, #12
 80138a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80138aa:	430b      	orrs	r3, r1
 80138ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80138ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	695b      	ldr	r3, [r3, #20]
 80138b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80138ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138be:	6999      	ldr	r1, [r3, #24]
 80138c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138c4:	681a      	ldr	r2, [r3, #0]
 80138c6:	ea40 0301 	orr.w	r3, r0, r1
 80138ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80138cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	4b8f      	ldr	r3, [pc, #572]	; (8013b10 <UART_SetConfig+0x2cc>)
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d005      	beq.n	80138e4 <UART_SetConfig+0xa0>
 80138d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	4b8d      	ldr	r3, [pc, #564]	; (8013b14 <UART_SetConfig+0x2d0>)
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d104      	bne.n	80138ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80138e4:	f7fd fa78 	bl	8010dd8 <HAL_RCC_GetPCLK2Freq>
 80138e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80138ec:	e003      	b.n	80138f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80138ee:	f7fd fa5f 	bl	8010db0 <HAL_RCC_GetPCLK1Freq>
 80138f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80138f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138fa:	69db      	ldr	r3, [r3, #28]
 80138fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013900:	f040 810c 	bne.w	8013b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013908:	2200      	movs	r2, #0
 801390a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801390e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8013916:	4622      	mov	r2, r4
 8013918:	462b      	mov	r3, r5
 801391a:	1891      	adds	r1, r2, r2
 801391c:	65b9      	str	r1, [r7, #88]	; 0x58
 801391e:	415b      	adcs	r3, r3
 8013920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8013926:	4621      	mov	r1, r4
 8013928:	eb12 0801 	adds.w	r8, r2, r1
 801392c:	4629      	mov	r1, r5
 801392e:	eb43 0901 	adc.w	r9, r3, r1
 8013932:	f04f 0200 	mov.w	r2, #0
 8013936:	f04f 0300 	mov.w	r3, #0
 801393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013946:	4690      	mov	r8, r2
 8013948:	4699      	mov	r9, r3
 801394a:	4623      	mov	r3, r4
 801394c:	eb18 0303 	adds.w	r3, r8, r3
 8013950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013954:	462b      	mov	r3, r5
 8013956:	eb49 0303 	adc.w	r3, r9, r3
 801395a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013962:	685b      	ldr	r3, [r3, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801396a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801396e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8013972:	460b      	mov	r3, r1
 8013974:	18db      	adds	r3, r3, r3
 8013976:	653b      	str	r3, [r7, #80]	; 0x50
 8013978:	4613      	mov	r3, r2
 801397a:	eb42 0303 	adc.w	r3, r2, r3
 801397e:	657b      	str	r3, [r7, #84]	; 0x54
 8013980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8013984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8013988:	f7ed f97e 	bl	8000c88 <__aeabi_uldivmod>
 801398c:	4602      	mov	r2, r0
 801398e:	460b      	mov	r3, r1
 8013990:	4b61      	ldr	r3, [pc, #388]	; (8013b18 <UART_SetConfig+0x2d4>)
 8013992:	fba3 2302 	umull	r2, r3, r3, r2
 8013996:	095b      	lsrs	r3, r3, #5
 8013998:	011c      	lsls	r4, r3, #4
 801399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801399e:	2200      	movs	r2, #0
 80139a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80139a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80139a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80139ac:	4642      	mov	r2, r8
 80139ae:	464b      	mov	r3, r9
 80139b0:	1891      	adds	r1, r2, r2
 80139b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80139b4:	415b      	adcs	r3, r3
 80139b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80139b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80139bc:	4641      	mov	r1, r8
 80139be:	eb12 0a01 	adds.w	sl, r2, r1
 80139c2:	4649      	mov	r1, r9
 80139c4:	eb43 0b01 	adc.w	fp, r3, r1
 80139c8:	f04f 0200 	mov.w	r2, #0
 80139cc:	f04f 0300 	mov.w	r3, #0
 80139d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80139d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80139d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80139dc:	4692      	mov	sl, r2
 80139de:	469b      	mov	fp, r3
 80139e0:	4643      	mov	r3, r8
 80139e2:	eb1a 0303 	adds.w	r3, sl, r3
 80139e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80139ea:	464b      	mov	r3, r9
 80139ec:	eb4b 0303 	adc.w	r3, fp, r3
 80139f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80139f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013a00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8013a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8013a08:	460b      	mov	r3, r1
 8013a0a:	18db      	adds	r3, r3, r3
 8013a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8013a0e:	4613      	mov	r3, r2
 8013a10:	eb42 0303 	adc.w	r3, r2, r3
 8013a14:	647b      	str	r3, [r7, #68]	; 0x44
 8013a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8013a1e:	f7ed f933 	bl	8000c88 <__aeabi_uldivmod>
 8013a22:	4602      	mov	r2, r0
 8013a24:	460b      	mov	r3, r1
 8013a26:	4611      	mov	r1, r2
 8013a28:	4b3b      	ldr	r3, [pc, #236]	; (8013b18 <UART_SetConfig+0x2d4>)
 8013a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8013a2e:	095b      	lsrs	r3, r3, #5
 8013a30:	2264      	movs	r2, #100	; 0x64
 8013a32:	fb02 f303 	mul.w	r3, r2, r3
 8013a36:	1acb      	subs	r3, r1, r3
 8013a38:	00db      	lsls	r3, r3, #3
 8013a3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8013a3e:	4b36      	ldr	r3, [pc, #216]	; (8013b18 <UART_SetConfig+0x2d4>)
 8013a40:	fba3 2302 	umull	r2, r3, r3, r2
 8013a44:	095b      	lsrs	r3, r3, #5
 8013a46:	005b      	lsls	r3, r3, #1
 8013a48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013a4c:	441c      	add	r4, r3
 8013a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013a52:	2200      	movs	r2, #0
 8013a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013a58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8013a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8013a60:	4642      	mov	r2, r8
 8013a62:	464b      	mov	r3, r9
 8013a64:	1891      	adds	r1, r2, r2
 8013a66:	63b9      	str	r1, [r7, #56]	; 0x38
 8013a68:	415b      	adcs	r3, r3
 8013a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8013a70:	4641      	mov	r1, r8
 8013a72:	1851      	adds	r1, r2, r1
 8013a74:	6339      	str	r1, [r7, #48]	; 0x30
 8013a76:	4649      	mov	r1, r9
 8013a78:	414b      	adcs	r3, r1
 8013a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8013a7c:	f04f 0200 	mov.w	r2, #0
 8013a80:	f04f 0300 	mov.w	r3, #0
 8013a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8013a88:	4659      	mov	r1, fp
 8013a8a:	00cb      	lsls	r3, r1, #3
 8013a8c:	4651      	mov	r1, sl
 8013a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013a92:	4651      	mov	r1, sl
 8013a94:	00ca      	lsls	r2, r1, #3
 8013a96:	4610      	mov	r0, r2
 8013a98:	4619      	mov	r1, r3
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	4642      	mov	r2, r8
 8013a9e:	189b      	adds	r3, r3, r2
 8013aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013aa4:	464b      	mov	r3, r9
 8013aa6:	460a      	mov	r2, r1
 8013aa8:	eb42 0303 	adc.w	r3, r2, r3
 8013aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013abc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	18db      	adds	r3, r3, r3
 8013ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8013aca:	4613      	mov	r3, r2
 8013acc:	eb42 0303 	adc.w	r3, r2, r3
 8013ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013ada:	f7ed f8d5 	bl	8000c88 <__aeabi_uldivmod>
 8013ade:	4602      	mov	r2, r0
 8013ae0:	460b      	mov	r3, r1
 8013ae2:	4b0d      	ldr	r3, [pc, #52]	; (8013b18 <UART_SetConfig+0x2d4>)
 8013ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8013ae8:	095b      	lsrs	r3, r3, #5
 8013aea:	2164      	movs	r1, #100	; 0x64
 8013aec:	fb01 f303 	mul.w	r3, r1, r3
 8013af0:	1ad3      	subs	r3, r2, r3
 8013af2:	00db      	lsls	r3, r3, #3
 8013af4:	3332      	adds	r3, #50	; 0x32
 8013af6:	4a08      	ldr	r2, [pc, #32]	; (8013b18 <UART_SetConfig+0x2d4>)
 8013af8:	fba2 2303 	umull	r2, r3, r2, r3
 8013afc:	095b      	lsrs	r3, r3, #5
 8013afe:	f003 0207 	and.w	r2, r3, #7
 8013b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4422      	add	r2, r4
 8013b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8013b0c:	e105      	b.n	8013d1a <UART_SetConfig+0x4d6>
 8013b0e:	bf00      	nop
 8013b10:	40011000 	.word	0x40011000
 8013b14:	40011400 	.word	0x40011400
 8013b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013b20:	2200      	movs	r2, #0
 8013b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013b26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8013b2e:	4642      	mov	r2, r8
 8013b30:	464b      	mov	r3, r9
 8013b32:	1891      	adds	r1, r2, r2
 8013b34:	6239      	str	r1, [r7, #32]
 8013b36:	415b      	adcs	r3, r3
 8013b38:	627b      	str	r3, [r7, #36]	; 0x24
 8013b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013b3e:	4641      	mov	r1, r8
 8013b40:	1854      	adds	r4, r2, r1
 8013b42:	4649      	mov	r1, r9
 8013b44:	eb43 0501 	adc.w	r5, r3, r1
 8013b48:	f04f 0200 	mov.w	r2, #0
 8013b4c:	f04f 0300 	mov.w	r3, #0
 8013b50:	00eb      	lsls	r3, r5, #3
 8013b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013b56:	00e2      	lsls	r2, r4, #3
 8013b58:	4614      	mov	r4, r2
 8013b5a:	461d      	mov	r5, r3
 8013b5c:	4643      	mov	r3, r8
 8013b5e:	18e3      	adds	r3, r4, r3
 8013b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013b64:	464b      	mov	r3, r9
 8013b66:	eb45 0303 	adc.w	r3, r5, r3
 8013b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	2200      	movs	r2, #0
 8013b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013b7e:	f04f 0200 	mov.w	r2, #0
 8013b82:	f04f 0300 	mov.w	r3, #0
 8013b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013b8a:	4629      	mov	r1, r5
 8013b8c:	008b      	lsls	r3, r1, #2
 8013b8e:	4621      	mov	r1, r4
 8013b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013b94:	4621      	mov	r1, r4
 8013b96:	008a      	lsls	r2, r1, #2
 8013b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013b9c:	f7ed f874 	bl	8000c88 <__aeabi_uldivmod>
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	4b60      	ldr	r3, [pc, #384]	; (8013d28 <UART_SetConfig+0x4e4>)
 8013ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8013baa:	095b      	lsrs	r3, r3, #5
 8013bac:	011c      	lsls	r4, r3, #4
 8013bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013bb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8013bc0:	4642      	mov	r2, r8
 8013bc2:	464b      	mov	r3, r9
 8013bc4:	1891      	adds	r1, r2, r2
 8013bc6:	61b9      	str	r1, [r7, #24]
 8013bc8:	415b      	adcs	r3, r3
 8013bca:	61fb      	str	r3, [r7, #28]
 8013bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013bd0:	4641      	mov	r1, r8
 8013bd2:	1851      	adds	r1, r2, r1
 8013bd4:	6139      	str	r1, [r7, #16]
 8013bd6:	4649      	mov	r1, r9
 8013bd8:	414b      	adcs	r3, r1
 8013bda:	617b      	str	r3, [r7, #20]
 8013bdc:	f04f 0200 	mov.w	r2, #0
 8013be0:	f04f 0300 	mov.w	r3, #0
 8013be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013be8:	4659      	mov	r1, fp
 8013bea:	00cb      	lsls	r3, r1, #3
 8013bec:	4651      	mov	r1, sl
 8013bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013bf2:	4651      	mov	r1, sl
 8013bf4:	00ca      	lsls	r2, r1, #3
 8013bf6:	4610      	mov	r0, r2
 8013bf8:	4619      	mov	r1, r3
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	4642      	mov	r2, r8
 8013bfe:	189b      	adds	r3, r3, r2
 8013c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013c04:	464b      	mov	r3, r9
 8013c06:	460a      	mov	r2, r1
 8013c08:	eb42 0303 	adc.w	r3, r2, r3
 8013c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	2200      	movs	r2, #0
 8013c18:	67bb      	str	r3, [r7, #120]	; 0x78
 8013c1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013c1c:	f04f 0200 	mov.w	r2, #0
 8013c20:	f04f 0300 	mov.w	r3, #0
 8013c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8013c28:	4649      	mov	r1, r9
 8013c2a:	008b      	lsls	r3, r1, #2
 8013c2c:	4641      	mov	r1, r8
 8013c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013c32:	4641      	mov	r1, r8
 8013c34:	008a      	lsls	r2, r1, #2
 8013c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8013c3a:	f7ed f825 	bl	8000c88 <__aeabi_uldivmod>
 8013c3e:	4602      	mov	r2, r0
 8013c40:	460b      	mov	r3, r1
 8013c42:	4b39      	ldr	r3, [pc, #228]	; (8013d28 <UART_SetConfig+0x4e4>)
 8013c44:	fba3 1302 	umull	r1, r3, r3, r2
 8013c48:	095b      	lsrs	r3, r3, #5
 8013c4a:	2164      	movs	r1, #100	; 0x64
 8013c4c:	fb01 f303 	mul.w	r3, r1, r3
 8013c50:	1ad3      	subs	r3, r2, r3
 8013c52:	011b      	lsls	r3, r3, #4
 8013c54:	3332      	adds	r3, #50	; 0x32
 8013c56:	4a34      	ldr	r2, [pc, #208]	; (8013d28 <UART_SetConfig+0x4e4>)
 8013c58:	fba2 2303 	umull	r2, r3, r2, r3
 8013c5c:	095b      	lsrs	r3, r3, #5
 8013c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c62:	441c      	add	r4, r3
 8013c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013c68:	2200      	movs	r2, #0
 8013c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8013c6c:	677a      	str	r2, [r7, #116]	; 0x74
 8013c6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013c72:	4642      	mov	r2, r8
 8013c74:	464b      	mov	r3, r9
 8013c76:	1891      	adds	r1, r2, r2
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	415b      	adcs	r3, r3
 8013c7c:	60fb      	str	r3, [r7, #12]
 8013c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013c82:	4641      	mov	r1, r8
 8013c84:	1851      	adds	r1, r2, r1
 8013c86:	6039      	str	r1, [r7, #0]
 8013c88:	4649      	mov	r1, r9
 8013c8a:	414b      	adcs	r3, r1
 8013c8c:	607b      	str	r3, [r7, #4]
 8013c8e:	f04f 0200 	mov.w	r2, #0
 8013c92:	f04f 0300 	mov.w	r3, #0
 8013c96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013c9a:	4659      	mov	r1, fp
 8013c9c:	00cb      	lsls	r3, r1, #3
 8013c9e:	4651      	mov	r1, sl
 8013ca0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013ca4:	4651      	mov	r1, sl
 8013ca6:	00ca      	lsls	r2, r1, #3
 8013ca8:	4610      	mov	r0, r2
 8013caa:	4619      	mov	r1, r3
 8013cac:	4603      	mov	r3, r0
 8013cae:	4642      	mov	r2, r8
 8013cb0:	189b      	adds	r3, r3, r2
 8013cb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8013cb4:	464b      	mov	r3, r9
 8013cb6:	460a      	mov	r2, r1
 8013cb8:	eb42 0303 	adc.w	r3, r2, r3
 8013cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8013cc8:	667a      	str	r2, [r7, #100]	; 0x64
 8013cca:	f04f 0200 	mov.w	r2, #0
 8013cce:	f04f 0300 	mov.w	r3, #0
 8013cd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013cd6:	4649      	mov	r1, r9
 8013cd8:	008b      	lsls	r3, r1, #2
 8013cda:	4641      	mov	r1, r8
 8013cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013ce0:	4641      	mov	r1, r8
 8013ce2:	008a      	lsls	r2, r1, #2
 8013ce4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013ce8:	f7ec ffce 	bl	8000c88 <__aeabi_uldivmod>
 8013cec:	4602      	mov	r2, r0
 8013cee:	460b      	mov	r3, r1
 8013cf0:	4b0d      	ldr	r3, [pc, #52]	; (8013d28 <UART_SetConfig+0x4e4>)
 8013cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8013cf6:	095b      	lsrs	r3, r3, #5
 8013cf8:	2164      	movs	r1, #100	; 0x64
 8013cfa:	fb01 f303 	mul.w	r3, r1, r3
 8013cfe:	1ad3      	subs	r3, r2, r3
 8013d00:	011b      	lsls	r3, r3, #4
 8013d02:	3332      	adds	r3, #50	; 0x32
 8013d04:	4a08      	ldr	r2, [pc, #32]	; (8013d28 <UART_SetConfig+0x4e4>)
 8013d06:	fba2 2303 	umull	r2, r3, r2, r3
 8013d0a:	095b      	lsrs	r3, r3, #5
 8013d0c:	f003 020f 	and.w	r2, r3, #15
 8013d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4422      	add	r2, r4
 8013d18:	609a      	str	r2, [r3, #8]
}
 8013d1a:	bf00      	nop
 8013d1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8013d20:	46bd      	mov	sp, r7
 8013d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013d26:	bf00      	nop
 8013d28:	51eb851f 	.word	0x51eb851f

08013d2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013d2c:	b084      	sub	sp, #16
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b084      	sub	sp, #16
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
 8013d36:	f107 001c 	add.w	r0, r7, #28
 8013d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d122      	bne.n	8013d8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8013d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013d5c:	687a      	ldr	r2, [r7, #4]
 8013d5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d105      	bne.n	8013d7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	68db      	ldr	r3, [r3, #12]
 8013d76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f001 fbee 	bl	8015560 <USB_CoreReset>
 8013d84:	4603      	mov	r3, r0
 8013d86:	73fb      	strb	r3, [r7, #15]
 8013d88:	e01a      	b.n	8013dc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f001 fbe2 	bl	8015560 <USB_CoreReset>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d106      	bne.n	8013db4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	639a      	str	r2, [r3, #56]	; 0x38
 8013db2:	e005      	b.n	8013dc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d10b      	bne.n	8013dde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	689b      	ldr	r3, [r3, #8]
 8013dca:	f043 0206 	orr.w	r2, r3, #6
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	689b      	ldr	r3, [r3, #8]
 8013dd6:	f043 0220 	orr.w	r2, r3, #32
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3710      	adds	r7, #16
 8013de4:	46bd      	mov	sp, r7
 8013de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013dea:	b004      	add	sp, #16
 8013dec:	4770      	bx	lr
	...

08013df0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013df0:	b480      	push	{r7}
 8013df2:	b087      	sub	sp, #28
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	60f8      	str	r0, [r7, #12]
 8013df8:	60b9      	str	r1, [r7, #8]
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013dfe:	79fb      	ldrb	r3, [r7, #7]
 8013e00:	2b02      	cmp	r3, #2
 8013e02:	d165      	bne.n	8013ed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	4a41      	ldr	r2, [pc, #260]	; (8013f0c <USB_SetTurnaroundTime+0x11c>)
 8013e08:	4293      	cmp	r3, r2
 8013e0a:	d906      	bls.n	8013e1a <USB_SetTurnaroundTime+0x2a>
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	4a40      	ldr	r2, [pc, #256]	; (8013f10 <USB_SetTurnaroundTime+0x120>)
 8013e10:	4293      	cmp	r3, r2
 8013e12:	d202      	bcs.n	8013e1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013e14:	230f      	movs	r3, #15
 8013e16:	617b      	str	r3, [r7, #20]
 8013e18:	e062      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	4a3c      	ldr	r2, [pc, #240]	; (8013f10 <USB_SetTurnaroundTime+0x120>)
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	d306      	bcc.n	8013e30 <USB_SetTurnaroundTime+0x40>
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	4a3b      	ldr	r2, [pc, #236]	; (8013f14 <USB_SetTurnaroundTime+0x124>)
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d202      	bcs.n	8013e30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013e2a:	230e      	movs	r3, #14
 8013e2c:	617b      	str	r3, [r7, #20]
 8013e2e:	e057      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	4a38      	ldr	r2, [pc, #224]	; (8013f14 <USB_SetTurnaroundTime+0x124>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d306      	bcc.n	8013e46 <USB_SetTurnaroundTime+0x56>
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	4a37      	ldr	r2, [pc, #220]	; (8013f18 <USB_SetTurnaroundTime+0x128>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d202      	bcs.n	8013e46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013e40:	230d      	movs	r3, #13
 8013e42:	617b      	str	r3, [r7, #20]
 8013e44:	e04c      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	4a33      	ldr	r2, [pc, #204]	; (8013f18 <USB_SetTurnaroundTime+0x128>)
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	d306      	bcc.n	8013e5c <USB_SetTurnaroundTime+0x6c>
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	4a32      	ldr	r2, [pc, #200]	; (8013f1c <USB_SetTurnaroundTime+0x12c>)
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d802      	bhi.n	8013e5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013e56:	230c      	movs	r3, #12
 8013e58:	617b      	str	r3, [r7, #20]
 8013e5a:	e041      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	4a2f      	ldr	r2, [pc, #188]	; (8013f1c <USB_SetTurnaroundTime+0x12c>)
 8013e60:	4293      	cmp	r3, r2
 8013e62:	d906      	bls.n	8013e72 <USB_SetTurnaroundTime+0x82>
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	4a2e      	ldr	r2, [pc, #184]	; (8013f20 <USB_SetTurnaroundTime+0x130>)
 8013e68:	4293      	cmp	r3, r2
 8013e6a:	d802      	bhi.n	8013e72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013e6c:	230b      	movs	r3, #11
 8013e6e:	617b      	str	r3, [r7, #20]
 8013e70:	e036      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	4a2a      	ldr	r2, [pc, #168]	; (8013f20 <USB_SetTurnaroundTime+0x130>)
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d906      	bls.n	8013e88 <USB_SetTurnaroundTime+0x98>
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	4a29      	ldr	r2, [pc, #164]	; (8013f24 <USB_SetTurnaroundTime+0x134>)
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	d802      	bhi.n	8013e88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013e82:	230a      	movs	r3, #10
 8013e84:	617b      	str	r3, [r7, #20]
 8013e86:	e02b      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	4a26      	ldr	r2, [pc, #152]	; (8013f24 <USB_SetTurnaroundTime+0x134>)
 8013e8c:	4293      	cmp	r3, r2
 8013e8e:	d906      	bls.n	8013e9e <USB_SetTurnaroundTime+0xae>
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	4a25      	ldr	r2, [pc, #148]	; (8013f28 <USB_SetTurnaroundTime+0x138>)
 8013e94:	4293      	cmp	r3, r2
 8013e96:	d202      	bcs.n	8013e9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013e98:	2309      	movs	r3, #9
 8013e9a:	617b      	str	r3, [r7, #20]
 8013e9c:	e020      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	4a21      	ldr	r2, [pc, #132]	; (8013f28 <USB_SetTurnaroundTime+0x138>)
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	d306      	bcc.n	8013eb4 <USB_SetTurnaroundTime+0xc4>
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	4a20      	ldr	r2, [pc, #128]	; (8013f2c <USB_SetTurnaroundTime+0x13c>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d802      	bhi.n	8013eb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013eae:	2308      	movs	r3, #8
 8013eb0:	617b      	str	r3, [r7, #20]
 8013eb2:	e015      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	4a1d      	ldr	r2, [pc, #116]	; (8013f2c <USB_SetTurnaroundTime+0x13c>)
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	d906      	bls.n	8013eca <USB_SetTurnaroundTime+0xda>
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	4a1c      	ldr	r2, [pc, #112]	; (8013f30 <USB_SetTurnaroundTime+0x140>)
 8013ec0:	4293      	cmp	r3, r2
 8013ec2:	d202      	bcs.n	8013eca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013ec4:	2307      	movs	r3, #7
 8013ec6:	617b      	str	r3, [r7, #20]
 8013ec8:	e00a      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013eca:	2306      	movs	r3, #6
 8013ecc:	617b      	str	r3, [r7, #20]
 8013ece:	e007      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013ed0:	79fb      	ldrb	r3, [r7, #7]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d102      	bne.n	8013edc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013ed6:	2309      	movs	r3, #9
 8013ed8:	617b      	str	r3, [r7, #20]
 8013eda:	e001      	b.n	8013ee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013edc:	2309      	movs	r3, #9
 8013ede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	68db      	ldr	r3, [r3, #12]
 8013ee4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	68da      	ldr	r2, [r3, #12]
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	029b      	lsls	r3, r3, #10
 8013ef4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013ef8:	431a      	orrs	r2, r3
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013efe:	2300      	movs	r3, #0
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	371c      	adds	r7, #28
 8013f04:	46bd      	mov	sp, r7
 8013f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0a:	4770      	bx	lr
 8013f0c:	00d8acbf 	.word	0x00d8acbf
 8013f10:	00e4e1c0 	.word	0x00e4e1c0
 8013f14:	00f42400 	.word	0x00f42400
 8013f18:	01067380 	.word	0x01067380
 8013f1c:	011a499f 	.word	0x011a499f
 8013f20:	01312cff 	.word	0x01312cff
 8013f24:	014ca43f 	.word	0x014ca43f
 8013f28:	016e3600 	.word	0x016e3600
 8013f2c:	01a6ab1f 	.word	0x01a6ab1f
 8013f30:	01e84800 	.word	0x01e84800

08013f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f34:	b480      	push	{r7}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	f043 0201 	orr.w	r2, r3, #1
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013f48:	2300      	movs	r3, #0
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	370c      	adds	r7, #12
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr

08013f56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f56:	b480      	push	{r7}
 8013f58:	b083      	sub	sp, #12
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	689b      	ldr	r3, [r3, #8]
 8013f62:	f023 0201 	bic.w	r2, r3, #1
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013f6a:	2300      	movs	r3, #0
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	370c      	adds	r7, #12
 8013f70:	46bd      	mov	sp, r7
 8013f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f76:	4770      	bx	lr

08013f78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	460b      	mov	r3, r1
 8013f82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013f84:	2300      	movs	r3, #0
 8013f86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	68db      	ldr	r3, [r3, #12]
 8013f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013f94:	78fb      	ldrb	r3, [r7, #3]
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d115      	bne.n	8013fc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013fa6:	2001      	movs	r0, #1
 8013fa8:	f7f7 fafe 	bl	800b5a8 <HAL_Delay>
      ms++;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	3301      	adds	r3, #1
 8013fb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f001 fa45 	bl	8015442 <USB_GetMode>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	2b01      	cmp	r3, #1
 8013fbc:	d01e      	beq.n	8013ffc <USB_SetCurrentMode+0x84>
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	2b31      	cmp	r3, #49	; 0x31
 8013fc2:	d9f0      	bls.n	8013fa6 <USB_SetCurrentMode+0x2e>
 8013fc4:	e01a      	b.n	8013ffc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013fc6:	78fb      	ldrb	r3, [r7, #3]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d115      	bne.n	8013ff8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013fd8:	2001      	movs	r0, #1
 8013fda:	f7f7 fae5 	bl	800b5a8 <HAL_Delay>
      ms++;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f001 fa2c 	bl	8015442 <USB_GetMode>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d005      	beq.n	8013ffc <USB_SetCurrentMode+0x84>
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2b31      	cmp	r3, #49	; 0x31
 8013ff4:	d9f0      	bls.n	8013fd8 <USB_SetCurrentMode+0x60>
 8013ff6:	e001      	b.n	8013ffc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	e005      	b.n	8014008 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2b32      	cmp	r3, #50	; 0x32
 8014000:	d101      	bne.n	8014006 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014002:	2301      	movs	r3, #1
 8014004:	e000      	b.n	8014008 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014006:	2300      	movs	r3, #0
}
 8014008:	4618      	mov	r0, r3
 801400a:	3710      	adds	r7, #16
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014010:	b084      	sub	sp, #16
 8014012:	b580      	push	{r7, lr}
 8014014:	b086      	sub	sp, #24
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
 801401a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801401e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014022:	2300      	movs	r3, #0
 8014024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801402a:	2300      	movs	r3, #0
 801402c:	613b      	str	r3, [r7, #16]
 801402e:	e009      	b.n	8014044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	693b      	ldr	r3, [r7, #16]
 8014034:	3340      	adds	r3, #64	; 0x40
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4413      	add	r3, r2
 801403a:	2200      	movs	r2, #0
 801403c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	3301      	adds	r3, #1
 8014042:	613b      	str	r3, [r7, #16]
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	2b0e      	cmp	r3, #14
 8014048:	d9f2      	bls.n	8014030 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801404a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801404c:	2b00      	cmp	r3, #0
 801404e:	d11c      	bne.n	801408a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801405e:	f043 0302 	orr.w	r3, r3, #2
 8014062:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014074:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014080:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	639a      	str	r2, [r3, #56]	; 0x38
 8014088:	e00b      	b.n	80140a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801408e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801409a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80140a8:	461a      	mov	r2, r3
 80140aa:	2300      	movs	r3, #0
 80140ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140b4:	4619      	mov	r1, r3
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140bc:	461a      	mov	r2, r3
 80140be:	680b      	ldr	r3, [r1, #0]
 80140c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80140c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d10c      	bne.n	80140e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80140c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d104      	bne.n	80140d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80140ce:	2100      	movs	r1, #0
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f000 f965 	bl	80143a0 <USB_SetDevSpeed>
 80140d6:	e008      	b.n	80140ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80140d8:	2101      	movs	r1, #1
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f000 f960 	bl	80143a0 <USB_SetDevSpeed>
 80140e0:	e003      	b.n	80140ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80140e2:	2103      	movs	r1, #3
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f000 f95b 	bl	80143a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80140ea:	2110      	movs	r1, #16
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f000 f8f3 	bl	80142d8 <USB_FlushTxFifo>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d001      	beq.n	80140fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80140f8:	2301      	movs	r3, #1
 80140fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f000 f91f 	bl	8014340 <USB_FlushRxFifo>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d001      	beq.n	801410c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8014108:	2301      	movs	r3, #1
 801410a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014112:	461a      	mov	r2, r3
 8014114:	2300      	movs	r3, #0
 8014116:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801411e:	461a      	mov	r2, r3
 8014120:	2300      	movs	r3, #0
 8014122:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801412a:	461a      	mov	r2, r3
 801412c:	2300      	movs	r3, #0
 801412e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014130:	2300      	movs	r3, #0
 8014132:	613b      	str	r3, [r7, #16]
 8014134:	e043      	b.n	80141be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	015a      	lsls	r2, r3, #5
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	4413      	add	r3, r2
 801413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801414c:	d118      	bne.n	8014180 <USB_DevInit+0x170>
    {
      if (i == 0U)
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d10a      	bne.n	801416a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	015a      	lsls	r2, r3, #5
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	4413      	add	r3, r2
 801415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014160:	461a      	mov	r2, r3
 8014162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014166:	6013      	str	r3, [r2, #0]
 8014168:	e013      	b.n	8014192 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	015a      	lsls	r2, r3, #5
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	4413      	add	r3, r2
 8014172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014176:	461a      	mov	r2, r3
 8014178:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801417c:	6013      	str	r3, [r2, #0]
 801417e:	e008      	b.n	8014192 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	015a      	lsls	r2, r3, #5
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	4413      	add	r3, r2
 8014188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801418c:	461a      	mov	r2, r3
 801418e:	2300      	movs	r3, #0
 8014190:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014192:	693b      	ldr	r3, [r7, #16]
 8014194:	015a      	lsls	r2, r3, #5
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	4413      	add	r3, r2
 801419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801419e:	461a      	mov	r2, r3
 80141a0:	2300      	movs	r3, #0
 80141a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	015a      	lsls	r2, r3, #5
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	4413      	add	r3, r2
 80141ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141b0:	461a      	mov	r2, r3
 80141b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80141b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	3301      	adds	r3, #1
 80141bc:	613b      	str	r3, [r7, #16]
 80141be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c0:	693a      	ldr	r2, [r7, #16]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d3b7      	bcc.n	8014136 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80141c6:	2300      	movs	r3, #0
 80141c8:	613b      	str	r3, [r7, #16]
 80141ca:	e043      	b.n	8014254 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	015a      	lsls	r2, r3, #5
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	4413      	add	r3, r2
 80141d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80141e2:	d118      	bne.n	8014216 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80141e4:	693b      	ldr	r3, [r7, #16]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d10a      	bne.n	8014200 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80141ea:	693b      	ldr	r3, [r7, #16]
 80141ec:	015a      	lsls	r2, r3, #5
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	4413      	add	r3, r2
 80141f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141f6:	461a      	mov	r2, r3
 80141f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80141fc:	6013      	str	r3, [r2, #0]
 80141fe:	e013      	b.n	8014228 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	015a      	lsls	r2, r3, #5
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	4413      	add	r3, r2
 8014208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801420c:	461a      	mov	r2, r3
 801420e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014212:	6013      	str	r3, [r2, #0]
 8014214:	e008      	b.n	8014228 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	015a      	lsls	r2, r3, #5
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	4413      	add	r3, r2
 801421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014222:	461a      	mov	r2, r3
 8014224:	2300      	movs	r3, #0
 8014226:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	015a      	lsls	r2, r3, #5
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	4413      	add	r3, r2
 8014230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014234:	461a      	mov	r2, r3
 8014236:	2300      	movs	r3, #0
 8014238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	015a      	lsls	r2, r3, #5
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	4413      	add	r3, r2
 8014242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014246:	461a      	mov	r2, r3
 8014248:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801424c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	3301      	adds	r3, #1
 8014252:	613b      	str	r3, [r7, #16]
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	693a      	ldr	r2, [r7, #16]
 8014258:	429a      	cmp	r2, r3
 801425a:	d3b7      	bcc.n	80141cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014262:	691b      	ldr	r3, [r3, #16]
 8014264:	68fa      	ldr	r2, [r7, #12]
 8014266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801426a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801426e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801427c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014280:	2b00      	cmp	r3, #0
 8014282:	d105      	bne.n	8014290 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	699b      	ldr	r3, [r3, #24]
 8014288:	f043 0210 	orr.w	r2, r3, #16
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	699a      	ldr	r2, [r3, #24]
 8014294:	4b0f      	ldr	r3, [pc, #60]	; (80142d4 <USB_DevInit+0x2c4>)
 8014296:	4313      	orrs	r3, r2
 8014298:	687a      	ldr	r2, [r7, #4]
 801429a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801429c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d005      	beq.n	80142ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	699b      	ldr	r3, [r3, #24]
 80142a6:	f043 0208 	orr.w	r2, r3, #8
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80142ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d107      	bne.n	80142c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	699b      	ldr	r3, [r3, #24]
 80142b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80142bc:	f043 0304 	orr.w	r3, r3, #4
 80142c0:	687a      	ldr	r2, [r7, #4]
 80142c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80142c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3718      	adds	r7, #24
 80142ca:	46bd      	mov	sp, r7
 80142cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80142d0:	b004      	add	sp, #16
 80142d2:	4770      	bx	lr
 80142d4:	803c3800 	.word	0x803c3800

080142d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80142d8:	b480      	push	{r7}
 80142da:	b085      	sub	sp, #20
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80142e2:	2300      	movs	r3, #0
 80142e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	3301      	adds	r3, #1
 80142ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	4a13      	ldr	r2, [pc, #76]	; (801433c <USB_FlushTxFifo+0x64>)
 80142f0:	4293      	cmp	r3, r2
 80142f2:	d901      	bls.n	80142f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80142f4:	2303      	movs	r3, #3
 80142f6:	e01b      	b.n	8014330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	691b      	ldr	r3, [r3, #16]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	daf2      	bge.n	80142e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014300:	2300      	movs	r3, #0
 8014302:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	019b      	lsls	r3, r3, #6
 8014308:	f043 0220 	orr.w	r2, r3, #32
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	3301      	adds	r3, #1
 8014314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	4a08      	ldr	r2, [pc, #32]	; (801433c <USB_FlushTxFifo+0x64>)
 801431a:	4293      	cmp	r3, r2
 801431c:	d901      	bls.n	8014322 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801431e:	2303      	movs	r3, #3
 8014320:	e006      	b.n	8014330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	691b      	ldr	r3, [r3, #16]
 8014326:	f003 0320 	and.w	r3, r3, #32
 801432a:	2b20      	cmp	r3, #32
 801432c:	d0f0      	beq.n	8014310 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801432e:	2300      	movs	r3, #0
}
 8014330:	4618      	mov	r0, r3
 8014332:	3714      	adds	r7, #20
 8014334:	46bd      	mov	sp, r7
 8014336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433a:	4770      	bx	lr
 801433c:	00030d40 	.word	0x00030d40

08014340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014340:	b480      	push	{r7}
 8014342:	b085      	sub	sp, #20
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014348:	2300      	movs	r3, #0
 801434a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	3301      	adds	r3, #1
 8014350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	4a11      	ldr	r2, [pc, #68]	; (801439c <USB_FlushRxFifo+0x5c>)
 8014356:	4293      	cmp	r3, r2
 8014358:	d901      	bls.n	801435e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801435a:	2303      	movs	r3, #3
 801435c:	e018      	b.n	8014390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	691b      	ldr	r3, [r3, #16]
 8014362:	2b00      	cmp	r3, #0
 8014364:	daf2      	bge.n	801434c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014366:	2300      	movs	r3, #0
 8014368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2210      	movs	r2, #16
 801436e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	3301      	adds	r3, #1
 8014374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	4a08      	ldr	r2, [pc, #32]	; (801439c <USB_FlushRxFifo+0x5c>)
 801437a:	4293      	cmp	r3, r2
 801437c:	d901      	bls.n	8014382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801437e:	2303      	movs	r3, #3
 8014380:	e006      	b.n	8014390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	691b      	ldr	r3, [r3, #16]
 8014386:	f003 0310 	and.w	r3, r3, #16
 801438a:	2b10      	cmp	r3, #16
 801438c:	d0f0      	beq.n	8014370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801438e:	2300      	movs	r3, #0
}
 8014390:	4618      	mov	r0, r3
 8014392:	3714      	adds	r7, #20
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr
 801439c:	00030d40 	.word	0x00030d40

080143a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80143a0:	b480      	push	{r7}
 80143a2:	b085      	sub	sp, #20
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	460b      	mov	r3, r1
 80143aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	78fb      	ldrb	r3, [r7, #3]
 80143ba:	68f9      	ldr	r1, [r7, #12]
 80143bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80143c0:	4313      	orrs	r3, r2
 80143c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3714      	adds	r7, #20
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b087      	sub	sp, #28
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143e4:	689b      	ldr	r3, [r3, #8]
 80143e6:	f003 0306 	and.w	r3, r3, #6
 80143ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d102      	bne.n	80143f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80143f2:	2300      	movs	r3, #0
 80143f4:	75fb      	strb	r3, [r7, #23]
 80143f6:	e00a      	b.n	801440e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2b02      	cmp	r3, #2
 80143fc:	d002      	beq.n	8014404 <USB_GetDevSpeed+0x32>
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2b06      	cmp	r3, #6
 8014402:	d102      	bne.n	801440a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014404:	2302      	movs	r3, #2
 8014406:	75fb      	strb	r3, [r7, #23]
 8014408:	e001      	b.n	801440e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801440a:	230f      	movs	r3, #15
 801440c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801440e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014410:	4618      	mov	r0, r3
 8014412:	371c      	adds	r7, #28
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr

0801441c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801441c:	b480      	push	{r7}
 801441e:	b085      	sub	sp, #20
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	785b      	ldrb	r3, [r3, #1]
 8014434:	2b01      	cmp	r3, #1
 8014436:	d13a      	bne.n	80144ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801443e:	69da      	ldr	r2, [r3, #28]
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	f003 030f 	and.w	r3, r3, #15
 8014448:	2101      	movs	r1, #1
 801444a:	fa01 f303 	lsl.w	r3, r1, r3
 801444e:	b29b      	uxth	r3, r3
 8014450:	68f9      	ldr	r1, [r7, #12]
 8014452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014456:	4313      	orrs	r3, r2
 8014458:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	015a      	lsls	r2, r3, #5
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	4413      	add	r3, r2
 8014462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801446c:	2b00      	cmp	r3, #0
 801446e:	d155      	bne.n	801451c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	015a      	lsls	r2, r3, #5
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	4413      	add	r3, r2
 8014478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	68db      	ldr	r3, [r3, #12]
 8014482:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	791b      	ldrb	r3, [r3, #4]
 801448a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801448c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	059b      	lsls	r3, r3, #22
 8014492:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014494:	4313      	orrs	r3, r2
 8014496:	68ba      	ldr	r2, [r7, #8]
 8014498:	0151      	lsls	r1, r2, #5
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	440a      	add	r2, r1
 801449e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80144a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80144aa:	6013      	str	r3, [r2, #0]
 80144ac:	e036      	b.n	801451c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144b4:	69da      	ldr	r2, [r3, #28]
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	f003 030f 	and.w	r3, r3, #15
 80144be:	2101      	movs	r1, #1
 80144c0:	fa01 f303 	lsl.w	r3, r1, r3
 80144c4:	041b      	lsls	r3, r3, #16
 80144c6:	68f9      	ldr	r1, [r7, #12]
 80144c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144cc:	4313      	orrs	r3, r2
 80144ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	015a      	lsls	r2, r3, #5
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	4413      	add	r3, r2
 80144d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d11a      	bne.n	801451c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	015a      	lsls	r2, r3, #5
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	4413      	add	r3, r2
 80144ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144f2:	681a      	ldr	r2, [r3, #0]
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	791b      	ldrb	r3, [r3, #4]
 8014500:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014502:	430b      	orrs	r3, r1
 8014504:	4313      	orrs	r3, r2
 8014506:	68ba      	ldr	r2, [r7, #8]
 8014508:	0151      	lsls	r1, r2, #5
 801450a:	68fa      	ldr	r2, [r7, #12]
 801450c:	440a      	add	r2, r1
 801450e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801451a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3714      	adds	r7, #20
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr
	...

0801452c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	785b      	ldrb	r3, [r3, #1]
 8014544:	2b01      	cmp	r3, #1
 8014546:	d161      	bne.n	801460c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	015a      	lsls	r2, r3, #5
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	4413      	add	r3, r2
 8014550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801455a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801455e:	d11f      	bne.n	80145a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	015a      	lsls	r2, r3, #5
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	4413      	add	r3, r2
 8014568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	68ba      	ldr	r2, [r7, #8]
 8014570:	0151      	lsls	r1, r2, #5
 8014572:	68fa      	ldr	r2, [r7, #12]
 8014574:	440a      	add	r2, r1
 8014576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801457a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801457e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	015a      	lsls	r2, r3, #5
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	4413      	add	r3, r2
 8014588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	68ba      	ldr	r2, [r7, #8]
 8014590:	0151      	lsls	r1, r2, #5
 8014592:	68fa      	ldr	r2, [r7, #12]
 8014594:	440a      	add	r2, r1
 8014596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801459a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801459e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	781b      	ldrb	r3, [r3, #0]
 80145ac:	f003 030f 	and.w	r3, r3, #15
 80145b0:	2101      	movs	r1, #1
 80145b2:	fa01 f303 	lsl.w	r3, r1, r3
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	43db      	mvns	r3, r3
 80145ba:	68f9      	ldr	r1, [r7, #12]
 80145bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80145c0:	4013      	ands	r3, r2
 80145c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145ca:	69da      	ldr	r2, [r3, #28]
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	f003 030f 	and.w	r3, r3, #15
 80145d4:	2101      	movs	r1, #1
 80145d6:	fa01 f303 	lsl.w	r3, r1, r3
 80145da:	b29b      	uxth	r3, r3
 80145dc:	43db      	mvns	r3, r3
 80145de:	68f9      	ldr	r1, [r7, #12]
 80145e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80145e4:	4013      	ands	r3, r2
 80145e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	015a      	lsls	r2, r3, #5
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	4413      	add	r3, r2
 80145f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	0159      	lsls	r1, r3, #5
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	440b      	add	r3, r1
 80145fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014602:	4619      	mov	r1, r3
 8014604:	4b35      	ldr	r3, [pc, #212]	; (80146dc <USB_DeactivateEndpoint+0x1b0>)
 8014606:	4013      	ands	r3, r2
 8014608:	600b      	str	r3, [r1, #0]
 801460a:	e060      	b.n	80146ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	015a      	lsls	r2, r3, #5
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	4413      	add	r3, r2
 8014614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801461e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014622:	d11f      	bne.n	8014664 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	015a      	lsls	r2, r3, #5
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	4413      	add	r3, r2
 801462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	68ba      	ldr	r2, [r7, #8]
 8014634:	0151      	lsls	r1, r2, #5
 8014636:	68fa      	ldr	r2, [r7, #12]
 8014638:	440a      	add	r2, r1
 801463a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801463e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014642:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	015a      	lsls	r2, r3, #5
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	4413      	add	r3, r2
 801464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	68ba      	ldr	r2, [r7, #8]
 8014654:	0151      	lsls	r1, r2, #5
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	440a      	add	r2, r1
 801465a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801465e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801466a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	f003 030f 	and.w	r3, r3, #15
 8014674:	2101      	movs	r1, #1
 8014676:	fa01 f303 	lsl.w	r3, r1, r3
 801467a:	041b      	lsls	r3, r3, #16
 801467c:	43db      	mvns	r3, r3
 801467e:	68f9      	ldr	r1, [r7, #12]
 8014680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014684:	4013      	ands	r3, r2
 8014686:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801468e:	69da      	ldr	r2, [r3, #28]
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	f003 030f 	and.w	r3, r3, #15
 8014698:	2101      	movs	r1, #1
 801469a:	fa01 f303 	lsl.w	r3, r1, r3
 801469e:	041b      	lsls	r3, r3, #16
 80146a0:	43db      	mvns	r3, r3
 80146a2:	68f9      	ldr	r1, [r7, #12]
 80146a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80146a8:	4013      	ands	r3, r2
 80146aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	015a      	lsls	r2, r3, #5
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	4413      	add	r3, r2
 80146b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	0159      	lsls	r1, r3, #5
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	440b      	add	r3, r1
 80146c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146c6:	4619      	mov	r1, r3
 80146c8:	4b05      	ldr	r3, [pc, #20]	; (80146e0 <USB_DeactivateEndpoint+0x1b4>)
 80146ca:	4013      	ands	r3, r2
 80146cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80146ce:	2300      	movs	r3, #0
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3714      	adds	r7, #20
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr
 80146dc:	ec337800 	.word	0xec337800
 80146e0:	eff37800 	.word	0xeff37800

080146e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b08a      	sub	sp, #40	; 0x28
 80146e8:	af02      	add	r7, sp, #8
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	60b9      	str	r1, [r7, #8]
 80146ee:	4613      	mov	r3, r2
 80146f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	785b      	ldrb	r3, [r3, #1]
 8014700:	2b01      	cmp	r3, #1
 8014702:	f040 815c 	bne.w	80149be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	699b      	ldr	r3, [r3, #24]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d132      	bne.n	8014774 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	015a      	lsls	r2, r3, #5
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	4413      	add	r3, r2
 8014716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801471a:	691b      	ldr	r3, [r3, #16]
 801471c:	69ba      	ldr	r2, [r7, #24]
 801471e:	0151      	lsls	r1, r2, #5
 8014720:	69fa      	ldr	r2, [r7, #28]
 8014722:	440a      	add	r2, r1
 8014724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801472c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014732:	69bb      	ldr	r3, [r7, #24]
 8014734:	015a      	lsls	r2, r3, #5
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	4413      	add	r3, r2
 801473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801473e:	691b      	ldr	r3, [r3, #16]
 8014740:	69ba      	ldr	r2, [r7, #24]
 8014742:	0151      	lsls	r1, r2, #5
 8014744:	69fa      	ldr	r2, [r7, #28]
 8014746:	440a      	add	r2, r1
 8014748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801474c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014752:	69bb      	ldr	r3, [r7, #24]
 8014754:	015a      	lsls	r2, r3, #5
 8014756:	69fb      	ldr	r3, [r7, #28]
 8014758:	4413      	add	r3, r2
 801475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801475e:	691b      	ldr	r3, [r3, #16]
 8014760:	69ba      	ldr	r2, [r7, #24]
 8014762:	0151      	lsls	r1, r2, #5
 8014764:	69fa      	ldr	r2, [r7, #28]
 8014766:	440a      	add	r2, r1
 8014768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801476c:	0cdb      	lsrs	r3, r3, #19
 801476e:	04db      	lsls	r3, r3, #19
 8014770:	6113      	str	r3, [r2, #16]
 8014772:	e074      	b.n	801485e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014774:	69bb      	ldr	r3, [r7, #24]
 8014776:	015a      	lsls	r2, r3, #5
 8014778:	69fb      	ldr	r3, [r7, #28]
 801477a:	4413      	add	r3, r2
 801477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	69ba      	ldr	r2, [r7, #24]
 8014784:	0151      	lsls	r1, r2, #5
 8014786:	69fa      	ldr	r2, [r7, #28]
 8014788:	440a      	add	r2, r1
 801478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801478e:	0cdb      	lsrs	r3, r3, #19
 8014790:	04db      	lsls	r3, r3, #19
 8014792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	015a      	lsls	r2, r3, #5
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	4413      	add	r3, r2
 801479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	69ba      	ldr	r2, [r7, #24]
 80147a4:	0151      	lsls	r1, r2, #5
 80147a6:	69fa      	ldr	r2, [r7, #28]
 80147a8:	440a      	add	r2, r1
 80147aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80147b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80147b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	015a      	lsls	r2, r3, #5
 80147bc:	69fb      	ldr	r3, [r7, #28]
 80147be:	4413      	add	r3, r2
 80147c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	6999      	ldr	r1, [r3, #24]
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	68db      	ldr	r3, [r3, #12]
 80147ce:	440b      	add	r3, r1
 80147d0:	1e59      	subs	r1, r3, #1
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80147da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80147dc:	4b9d      	ldr	r3, [pc, #628]	; (8014a54 <USB_EPStartXfer+0x370>)
 80147de:	400b      	ands	r3, r1
 80147e0:	69b9      	ldr	r1, [r7, #24]
 80147e2:	0148      	lsls	r0, r1, #5
 80147e4:	69f9      	ldr	r1, [r7, #28]
 80147e6:	4401      	add	r1, r0
 80147e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80147ec:	4313      	orrs	r3, r2
 80147ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	015a      	lsls	r2, r3, #5
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	4413      	add	r3, r2
 80147f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147fc:	691a      	ldr	r2, [r3, #16]
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	699b      	ldr	r3, [r3, #24]
 8014802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014806:	69b9      	ldr	r1, [r7, #24]
 8014808:	0148      	lsls	r0, r1, #5
 801480a:	69f9      	ldr	r1, [r7, #28]
 801480c:	4401      	add	r1, r0
 801480e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014812:	4313      	orrs	r3, r2
 8014814:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	791b      	ldrb	r3, [r3, #4]
 801481a:	2b01      	cmp	r3, #1
 801481c:	d11f      	bne.n	801485e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801481e:	69bb      	ldr	r3, [r7, #24]
 8014820:	015a      	lsls	r2, r3, #5
 8014822:	69fb      	ldr	r3, [r7, #28]
 8014824:	4413      	add	r3, r2
 8014826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801482a:	691b      	ldr	r3, [r3, #16]
 801482c:	69ba      	ldr	r2, [r7, #24]
 801482e:	0151      	lsls	r1, r2, #5
 8014830:	69fa      	ldr	r2, [r7, #28]
 8014832:	440a      	add	r2, r1
 8014834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014838:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801483c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801483e:	69bb      	ldr	r3, [r7, #24]
 8014840:	015a      	lsls	r2, r3, #5
 8014842:	69fb      	ldr	r3, [r7, #28]
 8014844:	4413      	add	r3, r2
 8014846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801484a:	691b      	ldr	r3, [r3, #16]
 801484c:	69ba      	ldr	r2, [r7, #24]
 801484e:	0151      	lsls	r1, r2, #5
 8014850:	69fa      	ldr	r2, [r7, #28]
 8014852:	440a      	add	r2, r1
 8014854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014858:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801485c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801485e:	79fb      	ldrb	r3, [r7, #7]
 8014860:	2b01      	cmp	r3, #1
 8014862:	d14b      	bne.n	80148fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	695b      	ldr	r3, [r3, #20]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d009      	beq.n	8014880 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	015a      	lsls	r2, r3, #5
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	4413      	add	r3, r2
 8014874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014878:	461a      	mov	r2, r3
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	695b      	ldr	r3, [r3, #20]
 801487e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	791b      	ldrb	r3, [r3, #4]
 8014884:	2b01      	cmp	r3, #1
 8014886:	d128      	bne.n	80148da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014888:	69fb      	ldr	r3, [r7, #28]
 801488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801488e:	689b      	ldr	r3, [r3, #8]
 8014890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014894:	2b00      	cmp	r3, #0
 8014896:	d110      	bne.n	80148ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	015a      	lsls	r2, r3, #5
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	4413      	add	r3, r2
 80148a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	69ba      	ldr	r2, [r7, #24]
 80148a8:	0151      	lsls	r1, r2, #5
 80148aa:	69fa      	ldr	r2, [r7, #28]
 80148ac:	440a      	add	r2, r1
 80148ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80148b6:	6013      	str	r3, [r2, #0]
 80148b8:	e00f      	b.n	80148da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	015a      	lsls	r2, r3, #5
 80148be:	69fb      	ldr	r3, [r7, #28]
 80148c0:	4413      	add	r3, r2
 80148c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	69ba      	ldr	r2, [r7, #24]
 80148ca:	0151      	lsls	r1, r2, #5
 80148cc:	69fa      	ldr	r2, [r7, #28]
 80148ce:	440a      	add	r2, r1
 80148d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80148d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	015a      	lsls	r2, r3, #5
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	4413      	add	r3, r2
 80148e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	69ba      	ldr	r2, [r7, #24]
 80148ea:	0151      	lsls	r1, r2, #5
 80148ec:	69fa      	ldr	r2, [r7, #28]
 80148ee:	440a      	add	r2, r1
 80148f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80148f8:	6013      	str	r3, [r2, #0]
 80148fa:	e133      	b.n	8014b64 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80148fc:	69bb      	ldr	r3, [r7, #24]
 80148fe:	015a      	lsls	r2, r3, #5
 8014900:	69fb      	ldr	r3, [r7, #28]
 8014902:	4413      	add	r3, r2
 8014904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	69ba      	ldr	r2, [r7, #24]
 801490c:	0151      	lsls	r1, r2, #5
 801490e:	69fa      	ldr	r2, [r7, #28]
 8014910:	440a      	add	r2, r1
 8014912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801491a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	791b      	ldrb	r3, [r3, #4]
 8014920:	2b01      	cmp	r3, #1
 8014922:	d015      	beq.n	8014950 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	699b      	ldr	r3, [r3, #24]
 8014928:	2b00      	cmp	r3, #0
 801492a:	f000 811b 	beq.w	8014b64 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	f003 030f 	and.w	r3, r3, #15
 801493e:	2101      	movs	r1, #1
 8014940:	fa01 f303 	lsl.w	r3, r1, r3
 8014944:	69f9      	ldr	r1, [r7, #28]
 8014946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801494a:	4313      	orrs	r3, r2
 801494c:	634b      	str	r3, [r1, #52]	; 0x34
 801494e:	e109      	b.n	8014b64 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014956:	689b      	ldr	r3, [r3, #8]
 8014958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801495c:	2b00      	cmp	r3, #0
 801495e:	d110      	bne.n	8014982 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014960:	69bb      	ldr	r3, [r7, #24]
 8014962:	015a      	lsls	r2, r3, #5
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	4413      	add	r3, r2
 8014968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	69ba      	ldr	r2, [r7, #24]
 8014970:	0151      	lsls	r1, r2, #5
 8014972:	69fa      	ldr	r2, [r7, #28]
 8014974:	440a      	add	r2, r1
 8014976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801497a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801497e:	6013      	str	r3, [r2, #0]
 8014980:	e00f      	b.n	80149a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	015a      	lsls	r2, r3, #5
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	4413      	add	r3, r2
 801498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	69ba      	ldr	r2, [r7, #24]
 8014992:	0151      	lsls	r1, r2, #5
 8014994:	69fa      	ldr	r2, [r7, #28]
 8014996:	440a      	add	r2, r1
 8014998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80149a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80149a2:	68bb      	ldr	r3, [r7, #8]
 80149a4:	6919      	ldr	r1, [r3, #16]
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	781a      	ldrb	r2, [r3, #0]
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	699b      	ldr	r3, [r3, #24]
 80149ae:	b298      	uxth	r0, r3
 80149b0:	79fb      	ldrb	r3, [r7, #7]
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	4603      	mov	r3, r0
 80149b6:	68f8      	ldr	r0, [r7, #12]
 80149b8:	f000 fade 	bl	8014f78 <USB_WritePacket>
 80149bc:	e0d2      	b.n	8014b64 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80149be:	69bb      	ldr	r3, [r7, #24]
 80149c0:	015a      	lsls	r2, r3, #5
 80149c2:	69fb      	ldr	r3, [r7, #28]
 80149c4:	4413      	add	r3, r2
 80149c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149ca:	691b      	ldr	r3, [r3, #16]
 80149cc:	69ba      	ldr	r2, [r7, #24]
 80149ce:	0151      	lsls	r1, r2, #5
 80149d0:	69fa      	ldr	r2, [r7, #28]
 80149d2:	440a      	add	r2, r1
 80149d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149d8:	0cdb      	lsrs	r3, r3, #19
 80149da:	04db      	lsls	r3, r3, #19
 80149dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80149de:	69bb      	ldr	r3, [r7, #24]
 80149e0:	015a      	lsls	r2, r3, #5
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	4413      	add	r3, r2
 80149e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149ea:	691b      	ldr	r3, [r3, #16]
 80149ec:	69ba      	ldr	r2, [r7, #24]
 80149ee:	0151      	lsls	r1, r2, #5
 80149f0:	69fa      	ldr	r2, [r7, #28]
 80149f2:	440a      	add	r2, r1
 80149f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80149fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014a00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	699b      	ldr	r3, [r3, #24]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d126      	bne.n	8014a58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	015a      	lsls	r2, r3, #5
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	4413      	add	r3, r2
 8014a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a16:	691a      	ldr	r2, [r3, #16]
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	68db      	ldr	r3, [r3, #12]
 8014a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014a20:	69b9      	ldr	r1, [r7, #24]
 8014a22:	0148      	lsls	r0, r1, #5
 8014a24:	69f9      	ldr	r1, [r7, #28]
 8014a26:	4401      	add	r1, r0
 8014a28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014a2c:	4313      	orrs	r3, r2
 8014a2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	015a      	lsls	r2, r3, #5
 8014a34:	69fb      	ldr	r3, [r7, #28]
 8014a36:	4413      	add	r3, r2
 8014a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a3c:	691b      	ldr	r3, [r3, #16]
 8014a3e:	69ba      	ldr	r2, [r7, #24]
 8014a40:	0151      	lsls	r1, r2, #5
 8014a42:	69fa      	ldr	r2, [r7, #28]
 8014a44:	440a      	add	r2, r1
 8014a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014a4e:	6113      	str	r3, [r2, #16]
 8014a50:	e03a      	b.n	8014ac8 <USB_EPStartXfer+0x3e4>
 8014a52:	bf00      	nop
 8014a54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	699a      	ldr	r2, [r3, #24]
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	68db      	ldr	r3, [r3, #12]
 8014a60:	4413      	add	r3, r2
 8014a62:	1e5a      	subs	r2, r3, #1
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	68db      	ldr	r3, [r3, #12]
 8014a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a6c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	8afa      	ldrh	r2, [r7, #22]
 8014a74:	fb03 f202 	mul.w	r2, r3, r2
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	015a      	lsls	r2, r3, #5
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	4413      	add	r3, r2
 8014a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a88:	691a      	ldr	r2, [r3, #16]
 8014a8a:	8afb      	ldrh	r3, [r7, #22]
 8014a8c:	04d9      	lsls	r1, r3, #19
 8014a8e:	4b38      	ldr	r3, [pc, #224]	; (8014b70 <USB_EPStartXfer+0x48c>)
 8014a90:	400b      	ands	r3, r1
 8014a92:	69b9      	ldr	r1, [r7, #24]
 8014a94:	0148      	lsls	r0, r1, #5
 8014a96:	69f9      	ldr	r1, [r7, #28]
 8014a98:	4401      	add	r1, r0
 8014a9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014a9e:	4313      	orrs	r3, r2
 8014aa0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	015a      	lsls	r2, r3, #5
 8014aa6:	69fb      	ldr	r3, [r7, #28]
 8014aa8:	4413      	add	r3, r2
 8014aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014aae:	691a      	ldr	r2, [r3, #16]
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	69db      	ldr	r3, [r3, #28]
 8014ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ab8:	69b9      	ldr	r1, [r7, #24]
 8014aba:	0148      	lsls	r0, r1, #5
 8014abc:	69f9      	ldr	r1, [r7, #28]
 8014abe:	4401      	add	r1, r0
 8014ac0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014ac4:	4313      	orrs	r3, r2
 8014ac6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014ac8:	79fb      	ldrb	r3, [r7, #7]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d10d      	bne.n	8014aea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	691b      	ldr	r3, [r3, #16]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d009      	beq.n	8014aea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	6919      	ldr	r1, [r3, #16]
 8014ada:	69bb      	ldr	r3, [r7, #24]
 8014adc:	015a      	lsls	r2, r3, #5
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ae6:	460a      	mov	r2, r1
 8014ae8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	791b      	ldrb	r3, [r3, #4]
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d128      	bne.n	8014b44 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014af8:	689b      	ldr	r3, [r3, #8]
 8014afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d110      	bne.n	8014b24 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	015a      	lsls	r2, r3, #5
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	4413      	add	r3, r2
 8014b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	69ba      	ldr	r2, [r7, #24]
 8014b12:	0151      	lsls	r1, r2, #5
 8014b14:	69fa      	ldr	r2, [r7, #28]
 8014b16:	440a      	add	r2, r1
 8014b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014b20:	6013      	str	r3, [r2, #0]
 8014b22:	e00f      	b.n	8014b44 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	015a      	lsls	r2, r3, #5
 8014b28:	69fb      	ldr	r3, [r7, #28]
 8014b2a:	4413      	add	r3, r2
 8014b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	69ba      	ldr	r2, [r7, #24]
 8014b34:	0151      	lsls	r1, r2, #5
 8014b36:	69fa      	ldr	r2, [r7, #28]
 8014b38:	440a      	add	r2, r1
 8014b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	015a      	lsls	r2, r3, #5
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	4413      	add	r3, r2
 8014b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	69ba      	ldr	r2, [r7, #24]
 8014b54:	0151      	lsls	r1, r2, #5
 8014b56:	69fa      	ldr	r2, [r7, #28]
 8014b58:	440a      	add	r2, r1
 8014b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014b64:	2300      	movs	r3, #0
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3720      	adds	r7, #32
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	1ff80000 	.word	0x1ff80000

08014b74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b087      	sub	sp, #28
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	4613      	mov	r3, r2
 8014b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	785b      	ldrb	r3, [r3, #1]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	f040 80ce 	bne.w	8014d32 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	699b      	ldr	r3, [r3, #24]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d132      	bne.n	8014c04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	015a      	lsls	r2, r3, #5
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014baa:	691b      	ldr	r3, [r3, #16]
 8014bac:	693a      	ldr	r2, [r7, #16]
 8014bae:	0151      	lsls	r1, r2, #5
 8014bb0:	697a      	ldr	r2, [r7, #20]
 8014bb2:	440a      	add	r2, r1
 8014bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014bbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	015a      	lsls	r2, r3, #5
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	4413      	add	r3, r2
 8014bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bce:	691b      	ldr	r3, [r3, #16]
 8014bd0:	693a      	ldr	r2, [r7, #16]
 8014bd2:	0151      	lsls	r1, r2, #5
 8014bd4:	697a      	ldr	r2, [r7, #20]
 8014bd6:	440a      	add	r2, r1
 8014bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	015a      	lsls	r2, r3, #5
 8014be6:	697b      	ldr	r3, [r7, #20]
 8014be8:	4413      	add	r3, r2
 8014bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bee:	691b      	ldr	r3, [r3, #16]
 8014bf0:	693a      	ldr	r2, [r7, #16]
 8014bf2:	0151      	lsls	r1, r2, #5
 8014bf4:	697a      	ldr	r2, [r7, #20]
 8014bf6:	440a      	add	r2, r1
 8014bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bfc:	0cdb      	lsrs	r3, r3, #19
 8014bfe:	04db      	lsls	r3, r3, #19
 8014c00:	6113      	str	r3, [r2, #16]
 8014c02:	e04e      	b.n	8014ca2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	015a      	lsls	r2, r3, #5
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c10:	691b      	ldr	r3, [r3, #16]
 8014c12:	693a      	ldr	r2, [r7, #16]
 8014c14:	0151      	lsls	r1, r2, #5
 8014c16:	697a      	ldr	r2, [r7, #20]
 8014c18:	440a      	add	r2, r1
 8014c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c1e:	0cdb      	lsrs	r3, r3, #19
 8014c20:	04db      	lsls	r3, r3, #19
 8014c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	015a      	lsls	r2, r3, #5
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c30:	691b      	ldr	r3, [r3, #16]
 8014c32:	693a      	ldr	r2, [r7, #16]
 8014c34:	0151      	lsls	r1, r2, #5
 8014c36:	697a      	ldr	r2, [r7, #20]
 8014c38:	440a      	add	r2, r1
 8014c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014c42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014c46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	699a      	ldr	r2, [r3, #24]
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d903      	bls.n	8014c5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	68da      	ldr	r2, [r3, #12]
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	015a      	lsls	r2, r3, #5
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	4413      	add	r3, r2
 8014c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c68:	691b      	ldr	r3, [r3, #16]
 8014c6a:	693a      	ldr	r2, [r7, #16]
 8014c6c:	0151      	lsls	r1, r2, #5
 8014c6e:	697a      	ldr	r2, [r7, #20]
 8014c70:	440a      	add	r2, r1
 8014c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014c7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	015a      	lsls	r2, r3, #5
 8014c80:	697b      	ldr	r3, [r7, #20]
 8014c82:	4413      	add	r3, r2
 8014c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c88:	691a      	ldr	r2, [r3, #16]
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	699b      	ldr	r3, [r3, #24]
 8014c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014c92:	6939      	ldr	r1, [r7, #16]
 8014c94:	0148      	lsls	r0, r1, #5
 8014c96:	6979      	ldr	r1, [r7, #20]
 8014c98:	4401      	add	r1, r0
 8014c9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014c9e:	4313      	orrs	r3, r2
 8014ca0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014ca2:	79fb      	ldrb	r3, [r7, #7]
 8014ca4:	2b01      	cmp	r3, #1
 8014ca6:	d11e      	bne.n	8014ce6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	695b      	ldr	r3, [r3, #20]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d009      	beq.n	8014cc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	015a      	lsls	r2, r3, #5
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	695b      	ldr	r3, [r3, #20]
 8014cc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	015a      	lsls	r2, r3, #5
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	4413      	add	r3, r2
 8014ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	693a      	ldr	r2, [r7, #16]
 8014cd4:	0151      	lsls	r1, r2, #5
 8014cd6:	697a      	ldr	r2, [r7, #20]
 8014cd8:	440a      	add	r2, r1
 8014cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014ce2:	6013      	str	r3, [r2, #0]
 8014ce4:	e097      	b.n	8014e16 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	015a      	lsls	r2, r3, #5
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	4413      	add	r3, r2
 8014cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	693a      	ldr	r2, [r7, #16]
 8014cf6:	0151      	lsls	r1, r2, #5
 8014cf8:	697a      	ldr	r2, [r7, #20]
 8014cfa:	440a      	add	r2, r1
 8014cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014d00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014d04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	699b      	ldr	r3, [r3, #24]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	f000 8083 	beq.w	8014e16 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	f003 030f 	and.w	r3, r3, #15
 8014d20:	2101      	movs	r1, #1
 8014d22:	fa01 f303 	lsl.w	r3, r1, r3
 8014d26:	6979      	ldr	r1, [r7, #20]
 8014d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014d2c:	4313      	orrs	r3, r2
 8014d2e:	634b      	str	r3, [r1, #52]	; 0x34
 8014d30:	e071      	b.n	8014e16 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	015a      	lsls	r2, r3, #5
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	4413      	add	r3, r2
 8014d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d3e:	691b      	ldr	r3, [r3, #16]
 8014d40:	693a      	ldr	r2, [r7, #16]
 8014d42:	0151      	lsls	r1, r2, #5
 8014d44:	697a      	ldr	r2, [r7, #20]
 8014d46:	440a      	add	r2, r1
 8014d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d4c:	0cdb      	lsrs	r3, r3, #19
 8014d4e:	04db      	lsls	r3, r3, #19
 8014d50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	015a      	lsls	r2, r3, #5
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	4413      	add	r3, r2
 8014d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d5e:	691b      	ldr	r3, [r3, #16]
 8014d60:	693a      	ldr	r2, [r7, #16]
 8014d62:	0151      	lsls	r1, r2, #5
 8014d64:	697a      	ldr	r2, [r7, #20]
 8014d66:	440a      	add	r2, r1
 8014d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014d74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	699b      	ldr	r3, [r3, #24]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d003      	beq.n	8014d86 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	68da      	ldr	r2, [r3, #12]
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	68da      	ldr	r2, [r3, #12]
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	015a      	lsls	r2, r3, #5
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	4413      	add	r3, r2
 8014d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d9a:	691b      	ldr	r3, [r3, #16]
 8014d9c:	693a      	ldr	r2, [r7, #16]
 8014d9e:	0151      	lsls	r1, r2, #5
 8014da0:	697a      	ldr	r2, [r7, #20]
 8014da2:	440a      	add	r2, r1
 8014da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	015a      	lsls	r2, r3, #5
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	4413      	add	r3, r2
 8014db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014dba:	691a      	ldr	r2, [r3, #16]
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	69db      	ldr	r3, [r3, #28]
 8014dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014dc4:	6939      	ldr	r1, [r7, #16]
 8014dc6:	0148      	lsls	r0, r1, #5
 8014dc8:	6979      	ldr	r1, [r7, #20]
 8014dca:	4401      	add	r1, r0
 8014dcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8014dd4:	79fb      	ldrb	r3, [r7, #7]
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d10d      	bne.n	8014df6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	691b      	ldr	r3, [r3, #16]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d009      	beq.n	8014df6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	6919      	ldr	r1, [r3, #16]
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	015a      	lsls	r2, r3, #5
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	4413      	add	r3, r2
 8014dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014df2:	460a      	mov	r2, r1
 8014df4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	015a      	lsls	r2, r3, #5
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	4413      	add	r3, r2
 8014dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	693a      	ldr	r2, [r7, #16]
 8014e06:	0151      	lsls	r1, r2, #5
 8014e08:	697a      	ldr	r2, [r7, #20]
 8014e0a:	440a      	add	r2, r1
 8014e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014e14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014e16:	2300      	movs	r3, #0
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	371c      	adds	r7, #28
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e22:	4770      	bx	lr

08014e24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014e24:	b480      	push	{r7}
 8014e26:	b087      	sub	sp, #28
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014e32:	2300      	movs	r3, #0
 8014e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	785b      	ldrb	r3, [r3, #1]
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	d14a      	bne.n	8014ed8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	015a      	lsls	r2, r3, #5
 8014e48:	693b      	ldr	r3, [r7, #16]
 8014e4a:	4413      	add	r3, r2
 8014e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e5a:	f040 8086 	bne.w	8014f6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	015a      	lsls	r2, r3, #5
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	4413      	add	r3, r2
 8014e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	683a      	ldr	r2, [r7, #0]
 8014e70:	7812      	ldrb	r2, [r2, #0]
 8014e72:	0151      	lsls	r1, r2, #5
 8014e74:	693a      	ldr	r2, [r7, #16]
 8014e76:	440a      	add	r2, r1
 8014e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014e7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014e80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	015a      	lsls	r2, r3, #5
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	4413      	add	r3, r2
 8014e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	683a      	ldr	r2, [r7, #0]
 8014e94:	7812      	ldrb	r2, [r2, #0]
 8014e96:	0151      	lsls	r1, r2, #5
 8014e98:	693a      	ldr	r2, [r7, #16]
 8014e9a:	440a      	add	r2, r1
 8014e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014ea4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	f242 7210 	movw	r2, #10000	; 0x2710
 8014eb2:	4293      	cmp	r3, r2
 8014eb4:	d902      	bls.n	8014ebc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8014eba:	e056      	b.n	8014f6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	015a      	lsls	r2, r3, #5
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ed4:	d0e7      	beq.n	8014ea6 <USB_EPStopXfer+0x82>
 8014ed6:	e048      	b.n	8014f6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	015a      	lsls	r2, r3, #5
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ef0:	d13b      	bne.n	8014f6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	015a      	lsls	r2, r3, #5
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	4413      	add	r3, r2
 8014efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	683a      	ldr	r2, [r7, #0]
 8014f04:	7812      	ldrb	r2, [r2, #0]
 8014f06:	0151      	lsls	r1, r2, #5
 8014f08:	693a      	ldr	r2, [r7, #16]
 8014f0a:	440a      	add	r2, r1
 8014f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014f14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	015a      	lsls	r2, r3, #5
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	4413      	add	r3, r2
 8014f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	683a      	ldr	r2, [r7, #0]
 8014f28:	7812      	ldrb	r2, [r2, #0]
 8014f2a:	0151      	lsls	r1, r2, #5
 8014f2c:	693a      	ldr	r2, [r7, #16]
 8014f2e:	440a      	add	r2, r1
 8014f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014f38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	f242 7210 	movw	r2, #10000	; 0x2710
 8014f46:	4293      	cmp	r3, r2
 8014f48:	d902      	bls.n	8014f50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8014f4e:	e00c      	b.n	8014f6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	781b      	ldrb	r3, [r3, #0]
 8014f54:	015a      	lsls	r2, r3, #5
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	4413      	add	r3, r2
 8014f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f68:	d0e7      	beq.n	8014f3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	371c      	adds	r7, #28
 8014f70:	46bd      	mov	sp, r7
 8014f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f76:	4770      	bx	lr

08014f78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b089      	sub	sp, #36	; 0x24
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	4611      	mov	r1, r2
 8014f84:	461a      	mov	r2, r3
 8014f86:	460b      	mov	r3, r1
 8014f88:	71fb      	strb	r3, [r7, #7]
 8014f8a:	4613      	mov	r3, r2
 8014f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d123      	bne.n	8014fe6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014f9e:	88bb      	ldrh	r3, [r7, #4]
 8014fa0:	3303      	adds	r3, #3
 8014fa2:	089b      	lsrs	r3, r3, #2
 8014fa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	61bb      	str	r3, [r7, #24]
 8014faa:	e018      	b.n	8014fde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014fac:	79fb      	ldrb	r3, [r7, #7]
 8014fae:	031a      	lsls	r2, r3, #12
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fb8:	461a      	mov	r2, r3
 8014fba:	69fb      	ldr	r3, [r7, #28]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014fc0:	69fb      	ldr	r3, [r7, #28]
 8014fc2:	3301      	adds	r3, #1
 8014fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	3301      	adds	r3, #1
 8014fca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	3301      	adds	r3, #1
 8014fd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014fd2:	69fb      	ldr	r3, [r7, #28]
 8014fd4:	3301      	adds	r3, #1
 8014fd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014fd8:	69bb      	ldr	r3, [r7, #24]
 8014fda:	3301      	adds	r3, #1
 8014fdc:	61bb      	str	r3, [r7, #24]
 8014fde:	69ba      	ldr	r2, [r7, #24]
 8014fe0:	693b      	ldr	r3, [r7, #16]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d3e2      	bcc.n	8014fac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014fe6:	2300      	movs	r3, #0
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3724      	adds	r7, #36	; 0x24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b08b      	sub	sp, #44	; 0x2c
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	4613      	mov	r3, r2
 8015000:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801500a:	88fb      	ldrh	r3, [r7, #6]
 801500c:	089b      	lsrs	r3, r3, #2
 801500e:	b29b      	uxth	r3, r3
 8015010:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015012:	88fb      	ldrh	r3, [r7, #6]
 8015014:	f003 0303 	and.w	r3, r3, #3
 8015018:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801501a:	2300      	movs	r3, #0
 801501c:	623b      	str	r3, [r7, #32]
 801501e:	e014      	b.n	801504a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015026:	681a      	ldr	r2, [r3, #0]
 8015028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801502a:	601a      	str	r2, [r3, #0]
    pDest++;
 801502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801502e:	3301      	adds	r3, #1
 8015030:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015034:	3301      	adds	r3, #1
 8015036:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503a:	3301      	adds	r3, #1
 801503c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015040:	3301      	adds	r3, #1
 8015042:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015044:	6a3b      	ldr	r3, [r7, #32]
 8015046:	3301      	adds	r3, #1
 8015048:	623b      	str	r3, [r7, #32]
 801504a:	6a3a      	ldr	r2, [r7, #32]
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	429a      	cmp	r2, r3
 8015050:	d3e6      	bcc.n	8015020 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015052:	8bfb      	ldrh	r3, [r7, #30]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d01e      	beq.n	8015096 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015058:	2300      	movs	r3, #0
 801505a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801505c:	69bb      	ldr	r3, [r7, #24]
 801505e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015062:	461a      	mov	r2, r3
 8015064:	f107 0310 	add.w	r3, r7, #16
 8015068:	6812      	ldr	r2, [r2, #0]
 801506a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801506c:	693a      	ldr	r2, [r7, #16]
 801506e:	6a3b      	ldr	r3, [r7, #32]
 8015070:	b2db      	uxtb	r3, r3
 8015072:	00db      	lsls	r3, r3, #3
 8015074:	fa22 f303 	lsr.w	r3, r2, r3
 8015078:	b2da      	uxtb	r2, r3
 801507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507c:	701a      	strb	r2, [r3, #0]
      i++;
 801507e:	6a3b      	ldr	r3, [r7, #32]
 8015080:	3301      	adds	r3, #1
 8015082:	623b      	str	r3, [r7, #32]
      pDest++;
 8015084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015086:	3301      	adds	r3, #1
 8015088:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801508a:	8bfb      	ldrh	r3, [r7, #30]
 801508c:	3b01      	subs	r3, #1
 801508e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015090:	8bfb      	ldrh	r3, [r7, #30]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d1ea      	bne.n	801506c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015098:	4618      	mov	r0, r3
 801509a:	372c      	adds	r7, #44	; 0x2c
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr

080150a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	785b      	ldrb	r3, [r3, #1]
 80150bc:	2b01      	cmp	r3, #1
 80150be:	d12c      	bne.n	801511a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	015a      	lsls	r2, r3, #5
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	4413      	add	r3, r2
 80150c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	db12      	blt.n	80150f8 <USB_EPSetStall+0x54>
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d00f      	beq.n	80150f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	015a      	lsls	r2, r3, #5
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	4413      	add	r3, r2
 80150e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	68ba      	ldr	r2, [r7, #8]
 80150e8:	0151      	lsls	r1, r2, #5
 80150ea:	68fa      	ldr	r2, [r7, #12]
 80150ec:	440a      	add	r2, r1
 80150ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80150f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80150f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	015a      	lsls	r2, r3, #5
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	4413      	add	r3, r2
 8015100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	68ba      	ldr	r2, [r7, #8]
 8015108:	0151      	lsls	r1, r2, #5
 801510a:	68fa      	ldr	r2, [r7, #12]
 801510c:	440a      	add	r2, r1
 801510e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015116:	6013      	str	r3, [r2, #0]
 8015118:	e02b      	b.n	8015172 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	015a      	lsls	r2, r3, #5
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	4413      	add	r3, r2
 8015122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	db12      	blt.n	8015152 <USB_EPSetStall+0xae>
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d00f      	beq.n	8015152 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	015a      	lsls	r2, r3, #5
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	4413      	add	r3, r2
 801513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	68ba      	ldr	r2, [r7, #8]
 8015142:	0151      	lsls	r1, r2, #5
 8015144:	68fa      	ldr	r2, [r7, #12]
 8015146:	440a      	add	r2, r1
 8015148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801514c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015150:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	015a      	lsls	r2, r3, #5
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	4413      	add	r3, r2
 801515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	68ba      	ldr	r2, [r7, #8]
 8015162:	0151      	lsls	r1, r2, #5
 8015164:	68fa      	ldr	r2, [r7, #12]
 8015166:	440a      	add	r2, r1
 8015168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801516c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015172:	2300      	movs	r3, #0
}
 8015174:	4618      	mov	r0, r3
 8015176:	3714      	adds	r7, #20
 8015178:	46bd      	mov	sp, r7
 801517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517e:	4770      	bx	lr

08015180 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015180:	b480      	push	{r7}
 8015182:	b085      	sub	sp, #20
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	785b      	ldrb	r3, [r3, #1]
 8015198:	2b01      	cmp	r3, #1
 801519a:	d128      	bne.n	80151ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	015a      	lsls	r2, r3, #5
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	4413      	add	r3, r2
 80151a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	0151      	lsls	r1, r2, #5
 80151ae:	68fa      	ldr	r2, [r7, #12]
 80151b0:	440a      	add	r2, r1
 80151b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80151b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80151ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	791b      	ldrb	r3, [r3, #4]
 80151c0:	2b03      	cmp	r3, #3
 80151c2:	d003      	beq.n	80151cc <USB_EPClearStall+0x4c>
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	791b      	ldrb	r3, [r3, #4]
 80151c8:	2b02      	cmp	r3, #2
 80151ca:	d138      	bne.n	801523e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	015a      	lsls	r2, r3, #5
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	4413      	add	r3, r2
 80151d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	0151      	lsls	r1, r2, #5
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	440a      	add	r2, r1
 80151e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80151e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	e027      	b.n	801523e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	015a      	lsls	r2, r3, #5
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	4413      	add	r3, r2
 80151f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	68ba      	ldr	r2, [r7, #8]
 80151fe:	0151      	lsls	r1, r2, #5
 8015200:	68fa      	ldr	r2, [r7, #12]
 8015202:	440a      	add	r2, r1
 8015204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801520c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	791b      	ldrb	r3, [r3, #4]
 8015212:	2b03      	cmp	r3, #3
 8015214:	d003      	beq.n	801521e <USB_EPClearStall+0x9e>
 8015216:	683b      	ldr	r3, [r7, #0]
 8015218:	791b      	ldrb	r3, [r3, #4]
 801521a:	2b02      	cmp	r3, #2
 801521c:	d10f      	bne.n	801523e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	015a      	lsls	r2, r3, #5
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	4413      	add	r3, r2
 8015226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	68ba      	ldr	r2, [r7, #8]
 801522e:	0151      	lsls	r1, r2, #5
 8015230:	68fa      	ldr	r2, [r7, #12]
 8015232:	440a      	add	r2, r1
 8015234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801523c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801523e:	2300      	movs	r3, #0
}
 8015240:	4618      	mov	r0, r3
 8015242:	3714      	adds	r7, #20
 8015244:	46bd      	mov	sp, r7
 8015246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524a:	4770      	bx	lr

0801524c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801524c:	b480      	push	{r7}
 801524e:	b085      	sub	sp, #20
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	460b      	mov	r3, r1
 8015256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801526a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801526e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015276:	681a      	ldr	r2, [r3, #0]
 8015278:	78fb      	ldrb	r3, [r7, #3]
 801527a:	011b      	lsls	r3, r3, #4
 801527c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8015280:	68f9      	ldr	r1, [r7, #12]
 8015282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015286:	4313      	orrs	r3, r2
 8015288:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801528a:	2300      	movs	r3, #0
}
 801528c:	4618      	mov	r0, r3
 801528e:	3714      	adds	r7, #20
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr

08015298 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015298:	b480      	push	{r7}
 801529a:	b085      	sub	sp, #20
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	68fa      	ldr	r2, [r7, #12]
 80152ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80152b2:	f023 0303 	bic.w	r3, r3, #3
 80152b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	68fa      	ldr	r2, [r7, #12]
 80152c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80152c6:	f023 0302 	bic.w	r3, r3, #2
 80152ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80152cc:	2300      	movs	r3, #0
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3714      	adds	r7, #20
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr

080152da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80152da:	b480      	push	{r7}
 80152dc:	b085      	sub	sp, #20
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	68fa      	ldr	r2, [r7, #12]
 80152f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80152f4:	f023 0303 	bic.w	r3, r3, #3
 80152f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	68fa      	ldr	r2, [r7, #12]
 8015304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015308:	f043 0302 	orr.w	r3, r3, #2
 801530c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801530e:	2300      	movs	r3, #0
}
 8015310:	4618      	mov	r0, r3
 8015312:	3714      	adds	r7, #20
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr

0801531c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801531c:	b480      	push	{r7}
 801531e:	b085      	sub	sp, #20
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	695b      	ldr	r3, [r3, #20]
 8015328:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	699b      	ldr	r3, [r3, #24]
 801532e:	68fa      	ldr	r2, [r7, #12]
 8015330:	4013      	ands	r3, r2
 8015332:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015334:	68fb      	ldr	r3, [r7, #12]
}
 8015336:	4618      	mov	r0, r3
 8015338:	3714      	adds	r7, #20
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr

08015342 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015342:	b480      	push	{r7}
 8015344:	b085      	sub	sp, #20
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015354:	699b      	ldr	r3, [r3, #24]
 8015356:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801535e:	69db      	ldr	r3, [r3, #28]
 8015360:	68ba      	ldr	r2, [r7, #8]
 8015362:	4013      	ands	r3, r2
 8015364:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015366:	68bb      	ldr	r3, [r7, #8]
 8015368:	0c1b      	lsrs	r3, r3, #16
}
 801536a:	4618      	mov	r0, r3
 801536c:	3714      	adds	r7, #20
 801536e:	46bd      	mov	sp, r7
 8015370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015374:	4770      	bx	lr

08015376 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015376:	b480      	push	{r7}
 8015378:	b085      	sub	sp, #20
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015388:	699b      	ldr	r3, [r3, #24]
 801538a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015392:	69db      	ldr	r3, [r3, #28]
 8015394:	68ba      	ldr	r2, [r7, #8]
 8015396:	4013      	ands	r3, r2
 8015398:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	b29b      	uxth	r3, r3
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3714      	adds	r7, #20
 80153a2:	46bd      	mov	sp, r7
 80153a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a8:	4770      	bx	lr

080153aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80153aa:	b480      	push	{r7}
 80153ac:	b085      	sub	sp, #20
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
 80153b2:	460b      	mov	r3, r1
 80153b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80153ba:	78fb      	ldrb	r3, [r7, #3]
 80153bc:	015a      	lsls	r2, r3, #5
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	4413      	add	r3, r2
 80153c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153c6:	689b      	ldr	r3, [r3, #8]
 80153c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153d0:	695b      	ldr	r3, [r3, #20]
 80153d2:	68ba      	ldr	r2, [r7, #8]
 80153d4:	4013      	ands	r3, r2
 80153d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80153d8:	68bb      	ldr	r3, [r7, #8]
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3714      	adds	r7, #20
 80153de:	46bd      	mov	sp, r7
 80153e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e4:	4770      	bx	lr

080153e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80153e6:	b480      	push	{r7}
 80153e8:	b087      	sub	sp, #28
 80153ea:	af00      	add	r7, sp, #0
 80153ec:	6078      	str	r0, [r7, #4]
 80153ee:	460b      	mov	r3, r1
 80153f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015408:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801540a:	78fb      	ldrb	r3, [r7, #3]
 801540c:	f003 030f 	and.w	r3, r3, #15
 8015410:	68fa      	ldr	r2, [r7, #12]
 8015412:	fa22 f303 	lsr.w	r3, r2, r3
 8015416:	01db      	lsls	r3, r3, #7
 8015418:	b2db      	uxtb	r3, r3
 801541a:	693a      	ldr	r2, [r7, #16]
 801541c:	4313      	orrs	r3, r2
 801541e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015420:	78fb      	ldrb	r3, [r7, #3]
 8015422:	015a      	lsls	r2, r3, #5
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	4413      	add	r3, r2
 8015428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801542c:	689b      	ldr	r3, [r3, #8]
 801542e:	693a      	ldr	r2, [r7, #16]
 8015430:	4013      	ands	r3, r2
 8015432:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015434:	68bb      	ldr	r3, [r7, #8]
}
 8015436:	4618      	mov	r0, r3
 8015438:	371c      	adds	r7, #28
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr

08015442 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015442:	b480      	push	{r7}
 8015444:	b083      	sub	sp, #12
 8015446:	af00      	add	r7, sp, #0
 8015448:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	695b      	ldr	r3, [r3, #20]
 801544e:	f003 0301 	and.w	r3, r3, #1
}
 8015452:	4618      	mov	r0, r3
 8015454:	370c      	adds	r7, #12
 8015456:	46bd      	mov	sp, r7
 8015458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545c:	4770      	bx	lr

0801545e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801545e:	b480      	push	{r7}
 8015460:	b085      	sub	sp, #20
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	68fa      	ldr	r2, [r7, #12]
 8015474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015478:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801547c:	f023 0307 	bic.w	r3, r3, #7
 8015480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	68fa      	ldr	r2, [r7, #12]
 801548c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015496:	2300      	movs	r3, #0
}
 8015498:	4618      	mov	r0, r3
 801549a:	3714      	adds	r7, #20
 801549c:	46bd      	mov	sp, r7
 801549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a2:	4770      	bx	lr

080154a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80154a4:	b480      	push	{r7}
 80154a6:	b087      	sub	sp, #28
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	460b      	mov	r3, r1
 80154ae:	607a      	str	r2, [r7, #4]
 80154b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	333c      	adds	r3, #60	; 0x3c
 80154ba:	3304      	adds	r3, #4
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	4a26      	ldr	r2, [pc, #152]	; (801555c <USB_EP0_OutStart+0xb8>)
 80154c4:	4293      	cmp	r3, r2
 80154c6:	d90a      	bls.n	80154de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80154d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80154d8:	d101      	bne.n	80154de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80154da:	2300      	movs	r3, #0
 80154dc:	e037      	b.n	801554e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154e4:	461a      	mov	r2, r3
 80154e6:	2300      	movs	r3, #0
 80154e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154f0:	691b      	ldr	r3, [r3, #16]
 80154f2:	697a      	ldr	r2, [r7, #20]
 80154f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80154f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80154fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015504:	691b      	ldr	r3, [r3, #16]
 8015506:	697a      	ldr	r2, [r7, #20]
 8015508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801550c:	f043 0318 	orr.w	r3, r3, #24
 8015510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015518:	691b      	ldr	r3, [r3, #16]
 801551a:	697a      	ldr	r2, [r7, #20]
 801551c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015520:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015524:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015526:	7afb      	ldrb	r3, [r7, #11]
 8015528:	2b01      	cmp	r3, #1
 801552a:	d10f      	bne.n	801554c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015532:	461a      	mov	r2, r3
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	697a      	ldr	r2, [r7, #20]
 8015542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015546:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801554a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801554c:	2300      	movs	r3, #0
}
 801554e:	4618      	mov	r0, r3
 8015550:	371c      	adds	r7, #28
 8015552:	46bd      	mov	sp, r7
 8015554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015558:	4770      	bx	lr
 801555a:	bf00      	nop
 801555c:	4f54300a 	.word	0x4f54300a

08015560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015560:	b480      	push	{r7}
 8015562:	b085      	sub	sp, #20
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015568:	2300      	movs	r3, #0
 801556a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	3301      	adds	r3, #1
 8015570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	4a13      	ldr	r2, [pc, #76]	; (80155c4 <USB_CoreReset+0x64>)
 8015576:	4293      	cmp	r3, r2
 8015578:	d901      	bls.n	801557e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801557a:	2303      	movs	r3, #3
 801557c:	e01b      	b.n	80155b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	691b      	ldr	r3, [r3, #16]
 8015582:	2b00      	cmp	r3, #0
 8015584:	daf2      	bge.n	801556c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015586:	2300      	movs	r3, #0
 8015588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	691b      	ldr	r3, [r3, #16]
 801558e:	f043 0201 	orr.w	r2, r3, #1
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	3301      	adds	r3, #1
 801559a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	4a09      	ldr	r2, [pc, #36]	; (80155c4 <USB_CoreReset+0x64>)
 80155a0:	4293      	cmp	r3, r2
 80155a2:	d901      	bls.n	80155a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80155a4:	2303      	movs	r3, #3
 80155a6:	e006      	b.n	80155b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	691b      	ldr	r3, [r3, #16]
 80155ac:	f003 0301 	and.w	r3, r3, #1
 80155b0:	2b01      	cmp	r3, #1
 80155b2:	d0f0      	beq.n	8015596 <USB_CoreReset+0x36>

  return HAL_OK;
 80155b4:	2300      	movs	r3, #0
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3714      	adds	r7, #20
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	00030d40 	.word	0x00030d40

080155c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b084      	sub	sp, #16
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	460b      	mov	r3, r1
 80155d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80155d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80155d8:	f005 fe84 	bl	801b2e4 <USBD_static_malloc>
 80155dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d109      	bne.n	80155f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	32b0      	adds	r2, #176	; 0xb0
 80155ee:	2100      	movs	r1, #0
 80155f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80155f4:	2302      	movs	r3, #2
 80155f6:	e0d4      	b.n	80157a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80155f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80155fc:	2100      	movs	r1, #0
 80155fe:	68f8      	ldr	r0, [r7, #12]
 8015600:	f005 ffdf 	bl	801b5c2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	32b0      	adds	r2, #176	; 0xb0
 801560e:	68f9      	ldr	r1, [r7, #12]
 8015610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	32b0      	adds	r2, #176	; 0xb0
 801561e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	7c1b      	ldrb	r3, [r3, #16]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d138      	bne.n	80156a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015630:	4b5e      	ldr	r3, [pc, #376]	; (80157ac <USBD_CDC_Init+0x1e4>)
 8015632:	7819      	ldrb	r1, [r3, #0]
 8015634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015638:	2202      	movs	r2, #2
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f005 fd2f 	bl	801b09e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015640:	4b5a      	ldr	r3, [pc, #360]	; (80157ac <USBD_CDC_Init+0x1e4>)
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	f003 020f 	and.w	r2, r3, #15
 8015648:	6879      	ldr	r1, [r7, #4]
 801564a:	4613      	mov	r3, r2
 801564c:	009b      	lsls	r3, r3, #2
 801564e:	4413      	add	r3, r2
 8015650:	009b      	lsls	r3, r3, #2
 8015652:	440b      	add	r3, r1
 8015654:	3324      	adds	r3, #36	; 0x24
 8015656:	2201      	movs	r2, #1
 8015658:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801565a:	4b55      	ldr	r3, [pc, #340]	; (80157b0 <USBD_CDC_Init+0x1e8>)
 801565c:	7819      	ldrb	r1, [r3, #0]
 801565e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015662:	2202      	movs	r2, #2
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f005 fd1a 	bl	801b09e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801566a:	4b51      	ldr	r3, [pc, #324]	; (80157b0 <USBD_CDC_Init+0x1e8>)
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	f003 020f 	and.w	r2, r3, #15
 8015672:	6879      	ldr	r1, [r7, #4]
 8015674:	4613      	mov	r3, r2
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	4413      	add	r3, r2
 801567a:	009b      	lsls	r3, r3, #2
 801567c:	440b      	add	r3, r1
 801567e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015682:	2201      	movs	r2, #1
 8015684:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015686:	4b4b      	ldr	r3, [pc, #300]	; (80157b4 <USBD_CDC_Init+0x1ec>)
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	f003 020f 	and.w	r2, r3, #15
 801568e:	6879      	ldr	r1, [r7, #4]
 8015690:	4613      	mov	r3, r2
 8015692:	009b      	lsls	r3, r3, #2
 8015694:	4413      	add	r3, r2
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	440b      	add	r3, r1
 801569a:	3326      	adds	r3, #38	; 0x26
 801569c:	2210      	movs	r2, #16
 801569e:	801a      	strh	r2, [r3, #0]
 80156a0:	e035      	b.n	801570e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80156a2:	4b42      	ldr	r3, [pc, #264]	; (80157ac <USBD_CDC_Init+0x1e4>)
 80156a4:	7819      	ldrb	r1, [r3, #0]
 80156a6:	2340      	movs	r3, #64	; 0x40
 80156a8:	2202      	movs	r2, #2
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f005 fcf7 	bl	801b09e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80156b0:	4b3e      	ldr	r3, [pc, #248]	; (80157ac <USBD_CDC_Init+0x1e4>)
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	f003 020f 	and.w	r2, r3, #15
 80156b8:	6879      	ldr	r1, [r7, #4]
 80156ba:	4613      	mov	r3, r2
 80156bc:	009b      	lsls	r3, r3, #2
 80156be:	4413      	add	r3, r2
 80156c0:	009b      	lsls	r3, r3, #2
 80156c2:	440b      	add	r3, r1
 80156c4:	3324      	adds	r3, #36	; 0x24
 80156c6:	2201      	movs	r2, #1
 80156c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80156ca:	4b39      	ldr	r3, [pc, #228]	; (80157b0 <USBD_CDC_Init+0x1e8>)
 80156cc:	7819      	ldrb	r1, [r3, #0]
 80156ce:	2340      	movs	r3, #64	; 0x40
 80156d0:	2202      	movs	r2, #2
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	f005 fce3 	bl	801b09e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80156d8:	4b35      	ldr	r3, [pc, #212]	; (80157b0 <USBD_CDC_Init+0x1e8>)
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	f003 020f 	and.w	r2, r3, #15
 80156e0:	6879      	ldr	r1, [r7, #4]
 80156e2:	4613      	mov	r3, r2
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	4413      	add	r3, r2
 80156e8:	009b      	lsls	r3, r3, #2
 80156ea:	440b      	add	r3, r1
 80156ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80156f0:	2201      	movs	r2, #1
 80156f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80156f4:	4b2f      	ldr	r3, [pc, #188]	; (80157b4 <USBD_CDC_Init+0x1ec>)
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	f003 020f 	and.w	r2, r3, #15
 80156fc:	6879      	ldr	r1, [r7, #4]
 80156fe:	4613      	mov	r3, r2
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	4413      	add	r3, r2
 8015704:	009b      	lsls	r3, r3, #2
 8015706:	440b      	add	r3, r1
 8015708:	3326      	adds	r3, #38	; 0x26
 801570a:	2210      	movs	r2, #16
 801570c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801570e:	4b29      	ldr	r3, [pc, #164]	; (80157b4 <USBD_CDC_Init+0x1ec>)
 8015710:	7819      	ldrb	r1, [r3, #0]
 8015712:	2308      	movs	r3, #8
 8015714:	2203      	movs	r2, #3
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f005 fcc1 	bl	801b09e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801571c:	4b25      	ldr	r3, [pc, #148]	; (80157b4 <USBD_CDC_Init+0x1ec>)
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	f003 020f 	and.w	r2, r3, #15
 8015724:	6879      	ldr	r1, [r7, #4]
 8015726:	4613      	mov	r3, r2
 8015728:	009b      	lsls	r3, r3, #2
 801572a:	4413      	add	r3, r2
 801572c:	009b      	lsls	r3, r3, #2
 801572e:	440b      	add	r3, r1
 8015730:	3324      	adds	r3, #36	; 0x24
 8015732:	2201      	movs	r2, #1
 8015734:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2200      	movs	r2, #0
 801573a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015744:	687a      	ldr	r2, [r7, #4]
 8015746:	33b0      	adds	r3, #176	; 0xb0
 8015748:	009b      	lsls	r3, r3, #2
 801574a:	4413      	add	r3, r2
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	2200      	movs	r2, #0
 8015756:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	2200      	movs	r2, #0
 801575e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015768:	2b00      	cmp	r3, #0
 801576a:	d101      	bne.n	8015770 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801576c:	2302      	movs	r3, #2
 801576e:	e018      	b.n	80157a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	7c1b      	ldrb	r3, [r3, #16]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d10a      	bne.n	801578e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015778:	4b0d      	ldr	r3, [pc, #52]	; (80157b0 <USBD_CDC_Init+0x1e8>)
 801577a:	7819      	ldrb	r1, [r3, #0]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f005 fd78 	bl	801b27c <USBD_LL_PrepareReceive>
 801578c:	e008      	b.n	80157a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801578e:	4b08      	ldr	r3, [pc, #32]	; (80157b0 <USBD_CDC_Init+0x1e8>)
 8015790:	7819      	ldrb	r1, [r3, #0]
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015798:	2340      	movs	r3, #64	; 0x40
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f005 fd6e 	bl	801b27c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80157a0:	2300      	movs	r3, #0
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3710      	adds	r7, #16
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	200000a3 	.word	0x200000a3
 80157b0:	200000a4 	.word	0x200000a4
 80157b4:	200000a5 	.word	0x200000a5

080157b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	460b      	mov	r3, r1
 80157c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80157c4:	4b3a      	ldr	r3, [pc, #232]	; (80158b0 <USBD_CDC_DeInit+0xf8>)
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	4619      	mov	r1, r3
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f005 fc8d 	bl	801b0ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80157d0:	4b37      	ldr	r3, [pc, #220]	; (80158b0 <USBD_CDC_DeInit+0xf8>)
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	f003 020f 	and.w	r2, r3, #15
 80157d8:	6879      	ldr	r1, [r7, #4]
 80157da:	4613      	mov	r3, r2
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	4413      	add	r3, r2
 80157e0:	009b      	lsls	r3, r3, #2
 80157e2:	440b      	add	r3, r1
 80157e4:	3324      	adds	r3, #36	; 0x24
 80157e6:	2200      	movs	r2, #0
 80157e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80157ea:	4b32      	ldr	r3, [pc, #200]	; (80158b4 <USBD_CDC_DeInit+0xfc>)
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	4619      	mov	r1, r3
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f005 fc7a 	bl	801b0ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80157f6:	4b2f      	ldr	r3, [pc, #188]	; (80158b4 <USBD_CDC_DeInit+0xfc>)
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	f003 020f 	and.w	r2, r3, #15
 80157fe:	6879      	ldr	r1, [r7, #4]
 8015800:	4613      	mov	r3, r2
 8015802:	009b      	lsls	r3, r3, #2
 8015804:	4413      	add	r3, r2
 8015806:	009b      	lsls	r3, r3, #2
 8015808:	440b      	add	r3, r1
 801580a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801580e:	2200      	movs	r2, #0
 8015810:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015812:	4b29      	ldr	r3, [pc, #164]	; (80158b8 <USBD_CDC_DeInit+0x100>)
 8015814:	781b      	ldrb	r3, [r3, #0]
 8015816:	4619      	mov	r1, r3
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f005 fc66 	bl	801b0ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801581e:	4b26      	ldr	r3, [pc, #152]	; (80158b8 <USBD_CDC_DeInit+0x100>)
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	f003 020f 	and.w	r2, r3, #15
 8015826:	6879      	ldr	r1, [r7, #4]
 8015828:	4613      	mov	r3, r2
 801582a:	009b      	lsls	r3, r3, #2
 801582c:	4413      	add	r3, r2
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	440b      	add	r3, r1
 8015832:	3324      	adds	r3, #36	; 0x24
 8015834:	2200      	movs	r2, #0
 8015836:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015838:	4b1f      	ldr	r3, [pc, #124]	; (80158b8 <USBD_CDC_DeInit+0x100>)
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	f003 020f 	and.w	r2, r3, #15
 8015840:	6879      	ldr	r1, [r7, #4]
 8015842:	4613      	mov	r3, r2
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	4413      	add	r3, r2
 8015848:	009b      	lsls	r3, r3, #2
 801584a:	440b      	add	r3, r1
 801584c:	3326      	adds	r3, #38	; 0x26
 801584e:	2200      	movs	r2, #0
 8015850:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	32b0      	adds	r2, #176	; 0xb0
 801585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d01f      	beq.n	80158a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801586a:	687a      	ldr	r2, [r7, #4]
 801586c:	33b0      	adds	r3, #176	; 0xb0
 801586e:	009b      	lsls	r3, r3, #2
 8015870:	4413      	add	r3, r2
 8015872:	685b      	ldr	r3, [r3, #4]
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	32b0      	adds	r2, #176	; 0xb0
 8015882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015886:	4618      	mov	r0, r3
 8015888:	f005 fd3a 	bl	801b300 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	32b0      	adds	r2, #176	; 0xb0
 8015896:	2100      	movs	r1, #0
 8015898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2200      	movs	r2, #0
 80158a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80158a4:	2300      	movs	r3, #0
}
 80158a6:	4618      	mov	r0, r3
 80158a8:	3708      	adds	r7, #8
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	200000a3 	.word	0x200000a3
 80158b4:	200000a4 	.word	0x200000a4
 80158b8:	200000a5 	.word	0x200000a5

080158bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b086      	sub	sp, #24
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	32b0      	adds	r2, #176	; 0xb0
 80158d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80158d6:	2300      	movs	r3, #0
 80158d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80158da:	2300      	movs	r3, #0
 80158dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80158de:	2300      	movs	r3, #0
 80158e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d101      	bne.n	80158ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80158e8:	2303      	movs	r3, #3
 80158ea:	e0bf      	b.n	8015a6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d050      	beq.n	801599a <USBD_CDC_Setup+0xde>
 80158f8:	2b20      	cmp	r3, #32
 80158fa:	f040 80af 	bne.w	8015a5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	88db      	ldrh	r3, [r3, #6]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d03a      	beq.n	801597c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	781b      	ldrb	r3, [r3, #0]
 801590a:	b25b      	sxtb	r3, r3
 801590c:	2b00      	cmp	r3, #0
 801590e:	da1b      	bge.n	8015948 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015916:	687a      	ldr	r2, [r7, #4]
 8015918:	33b0      	adds	r3, #176	; 0xb0
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	4413      	add	r3, r2
 801591e:	685b      	ldr	r3, [r3, #4]
 8015920:	689b      	ldr	r3, [r3, #8]
 8015922:	683a      	ldr	r2, [r7, #0]
 8015924:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015926:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015928:	683a      	ldr	r2, [r7, #0]
 801592a:	88d2      	ldrh	r2, [r2, #6]
 801592c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	88db      	ldrh	r3, [r3, #6]
 8015932:	2b07      	cmp	r3, #7
 8015934:	bf28      	it	cs
 8015936:	2307      	movcs	r3, #7
 8015938:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	89fa      	ldrh	r2, [r7, #14]
 801593e:	4619      	mov	r1, r3
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f001 fd43 	bl	80173cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015946:	e090      	b.n	8015a6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	785a      	ldrb	r2, [r3, #1]
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	88db      	ldrh	r3, [r3, #6]
 8015956:	2b3f      	cmp	r3, #63	; 0x3f
 8015958:	d803      	bhi.n	8015962 <USBD_CDC_Setup+0xa6>
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	88db      	ldrh	r3, [r3, #6]
 801595e:	b2da      	uxtb	r2, r3
 8015960:	e000      	b.n	8015964 <USBD_CDC_Setup+0xa8>
 8015962:	2240      	movs	r2, #64	; 0x40
 8015964:	693b      	ldr	r3, [r7, #16]
 8015966:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801596a:	6939      	ldr	r1, [r7, #16]
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015972:	461a      	mov	r2, r3
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f001 fd55 	bl	8017424 <USBD_CtlPrepareRx>
      break;
 801597a:	e076      	b.n	8015a6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015982:	687a      	ldr	r2, [r7, #4]
 8015984:	33b0      	adds	r3, #176	; 0xb0
 8015986:	009b      	lsls	r3, r3, #2
 8015988:	4413      	add	r3, r2
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	689b      	ldr	r3, [r3, #8]
 801598e:	683a      	ldr	r2, [r7, #0]
 8015990:	7850      	ldrb	r0, [r2, #1]
 8015992:	2200      	movs	r2, #0
 8015994:	6839      	ldr	r1, [r7, #0]
 8015996:	4798      	blx	r3
      break;
 8015998:	e067      	b.n	8015a6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	785b      	ldrb	r3, [r3, #1]
 801599e:	2b0b      	cmp	r3, #11
 80159a0:	d851      	bhi.n	8015a46 <USBD_CDC_Setup+0x18a>
 80159a2:	a201      	add	r2, pc, #4	; (adr r2, 80159a8 <USBD_CDC_Setup+0xec>)
 80159a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159a8:	080159d9 	.word	0x080159d9
 80159ac:	08015a55 	.word	0x08015a55
 80159b0:	08015a47 	.word	0x08015a47
 80159b4:	08015a47 	.word	0x08015a47
 80159b8:	08015a47 	.word	0x08015a47
 80159bc:	08015a47 	.word	0x08015a47
 80159c0:	08015a47 	.word	0x08015a47
 80159c4:	08015a47 	.word	0x08015a47
 80159c8:	08015a47 	.word	0x08015a47
 80159cc:	08015a47 	.word	0x08015a47
 80159d0:	08015a03 	.word	0x08015a03
 80159d4:	08015a2d 	.word	0x08015a2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159de:	b2db      	uxtb	r3, r3
 80159e0:	2b03      	cmp	r3, #3
 80159e2:	d107      	bne.n	80159f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80159e4:	f107 030a 	add.w	r3, r7, #10
 80159e8:	2202      	movs	r2, #2
 80159ea:	4619      	mov	r1, r3
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f001 fced 	bl	80173cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80159f2:	e032      	b.n	8015a5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80159f4:	6839      	ldr	r1, [r7, #0]
 80159f6:	6878      	ldr	r0, [r7, #4]
 80159f8:	f001 fc77 	bl	80172ea <USBD_CtlError>
            ret = USBD_FAIL;
 80159fc:	2303      	movs	r3, #3
 80159fe:	75fb      	strb	r3, [r7, #23]
          break;
 8015a00:	e02b      	b.n	8015a5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	2b03      	cmp	r3, #3
 8015a0c:	d107      	bne.n	8015a1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015a0e:	f107 030d 	add.w	r3, r7, #13
 8015a12:	2201      	movs	r2, #1
 8015a14:	4619      	mov	r1, r3
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f001 fcd8 	bl	80173cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015a1c:	e01d      	b.n	8015a5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015a1e:	6839      	ldr	r1, [r7, #0]
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f001 fc62 	bl	80172ea <USBD_CtlError>
            ret = USBD_FAIL;
 8015a26:	2303      	movs	r3, #3
 8015a28:	75fb      	strb	r3, [r7, #23]
          break;
 8015a2a:	e016      	b.n	8015a5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	2b03      	cmp	r3, #3
 8015a36:	d00f      	beq.n	8015a58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f001 fc55 	bl	80172ea <USBD_CtlError>
            ret = USBD_FAIL;
 8015a40:	2303      	movs	r3, #3
 8015a42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015a44:	e008      	b.n	8015a58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015a46:	6839      	ldr	r1, [r7, #0]
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f001 fc4e 	bl	80172ea <USBD_CtlError>
          ret = USBD_FAIL;
 8015a4e:	2303      	movs	r3, #3
 8015a50:	75fb      	strb	r3, [r7, #23]
          break;
 8015a52:	e002      	b.n	8015a5a <USBD_CDC_Setup+0x19e>
          break;
 8015a54:	bf00      	nop
 8015a56:	e008      	b.n	8015a6a <USBD_CDC_Setup+0x1ae>
          break;
 8015a58:	bf00      	nop
      }
      break;
 8015a5a:	e006      	b.n	8015a6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015a5c:	6839      	ldr	r1, [r7, #0]
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f001 fc43 	bl	80172ea <USBD_CtlError>
      ret = USBD_FAIL;
 8015a64:	2303      	movs	r3, #3
 8015a66:	75fb      	strb	r3, [r7, #23]
      break;
 8015a68:	bf00      	nop
  }

  return (uint8_t)ret;
 8015a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3718      	adds	r7, #24
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b084      	sub	sp, #16
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	32b0      	adds	r2, #176	; 0xb0
 8015a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d101      	bne.n	8015a9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015a9a:	2303      	movs	r3, #3
 8015a9c:	e065      	b.n	8015b6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	32b0      	adds	r2, #176	; 0xb0
 8015aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015aae:	78fb      	ldrb	r3, [r7, #3]
 8015ab0:	f003 020f 	and.w	r2, r3, #15
 8015ab4:	6879      	ldr	r1, [r7, #4]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	4413      	add	r3, r2
 8015abc:	009b      	lsls	r3, r3, #2
 8015abe:	440b      	add	r3, r1
 8015ac0:	3318      	adds	r3, #24
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d02f      	beq.n	8015b28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015ac8:	78fb      	ldrb	r3, [r7, #3]
 8015aca:	f003 020f 	and.w	r2, r3, #15
 8015ace:	6879      	ldr	r1, [r7, #4]
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	4413      	add	r3, r2
 8015ad6:	009b      	lsls	r3, r3, #2
 8015ad8:	440b      	add	r3, r1
 8015ada:	3318      	adds	r3, #24
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	78fb      	ldrb	r3, [r7, #3]
 8015ae0:	f003 010f 	and.w	r1, r3, #15
 8015ae4:	68f8      	ldr	r0, [r7, #12]
 8015ae6:	460b      	mov	r3, r1
 8015ae8:	00db      	lsls	r3, r3, #3
 8015aea:	440b      	add	r3, r1
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	4403      	add	r3, r0
 8015af0:	3348      	adds	r3, #72	; 0x48
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	fbb2 f1f3 	udiv	r1, r2, r3
 8015af8:	fb01 f303 	mul.w	r3, r1, r3
 8015afc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d112      	bne.n	8015b28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015b02:	78fb      	ldrb	r3, [r7, #3]
 8015b04:	f003 020f 	and.w	r2, r3, #15
 8015b08:	6879      	ldr	r1, [r7, #4]
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	4413      	add	r3, r2
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	440b      	add	r3, r1
 8015b14:	3318      	adds	r3, #24
 8015b16:	2200      	movs	r2, #0
 8015b18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015b1a:	78f9      	ldrb	r1, [r7, #3]
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	2200      	movs	r2, #0
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f005 fb8a 	bl	801b23a <USBD_LL_Transmit>
 8015b26:	e01f      	b.n	8015b68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	33b0      	adds	r3, #176	; 0xb0
 8015b3a:	009b      	lsls	r3, r3, #2
 8015b3c:	4413      	add	r3, r2
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	691b      	ldr	r3, [r3, #16]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d010      	beq.n	8015b68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	33b0      	adds	r3, #176	; 0xb0
 8015b50:	009b      	lsls	r3, r3, #2
 8015b52:	4413      	add	r3, r2
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	691b      	ldr	r3, [r3, #16]
 8015b58:	68ba      	ldr	r2, [r7, #8]
 8015b5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015b5e:	68ba      	ldr	r2, [r7, #8]
 8015b60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015b64:	78fa      	ldrb	r2, [r7, #3]
 8015b66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015b68:	2300      	movs	r3, #0
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	3710      	adds	r7, #16
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}

08015b72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015b72:	b580      	push	{r7, lr}
 8015b74:	b084      	sub	sp, #16
 8015b76:	af00      	add	r7, sp, #0
 8015b78:	6078      	str	r0, [r7, #4]
 8015b7a:	460b      	mov	r3, r1
 8015b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	32b0      	adds	r2, #176	; 0xb0
 8015b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	32b0      	adds	r2, #176	; 0xb0
 8015b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d101      	bne.n	8015ba4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015ba0:	2303      	movs	r3, #3
 8015ba2:	e01a      	b.n	8015bda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015ba4:	78fb      	ldrb	r3, [r7, #3]
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	f005 fb88 	bl	801b2be <USBD_LL_GetRxDataSize>
 8015bae:	4602      	mov	r2, r0
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	33b0      	adds	r3, #176	; 0xb0
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	4413      	add	r3, r2
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	68db      	ldr	r3, [r3, #12]
 8015bc8:	68fa      	ldr	r2, [r7, #12]
 8015bca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015bce:	68fa      	ldr	r2, [r7, #12]
 8015bd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015bd4:	4611      	mov	r1, r2
 8015bd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015bd8:	2300      	movs	r3, #0
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015be2:	b580      	push	{r7, lr}
 8015be4:	b084      	sub	sp, #16
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	32b0      	adds	r2, #176	; 0xb0
 8015bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d101      	bne.n	8015c04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015c00:	2303      	movs	r3, #3
 8015c02:	e025      	b.n	8015c50 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c0a:	687a      	ldr	r2, [r7, #4]
 8015c0c:	33b0      	adds	r3, #176	; 0xb0
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	4413      	add	r3, r2
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d01a      	beq.n	8015c4e <USBD_CDC_EP0_RxReady+0x6c>
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015c1e:	2bff      	cmp	r3, #255	; 0xff
 8015c20:	d015      	beq.n	8015c4e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c28:	687a      	ldr	r2, [r7, #4]
 8015c2a:	33b0      	adds	r3, #176	; 0xb0
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	4413      	add	r3, r2
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	689b      	ldr	r3, [r3, #8]
 8015c34:	68fa      	ldr	r2, [r7, #12]
 8015c36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015c3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015c3c:	68fa      	ldr	r2, [r7, #12]
 8015c3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015c42:	b292      	uxth	r2, r2
 8015c44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	22ff      	movs	r2, #255	; 0xff
 8015c4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015c4e:	2300      	movs	r3, #0
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3710      	adds	r7, #16
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b086      	sub	sp, #24
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015c60:	2182      	movs	r1, #130	; 0x82
 8015c62:	4818      	ldr	r0, [pc, #96]	; (8015cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c64:	f000 fd09 	bl	801667a <USBD_GetEpDesc>
 8015c68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c6a:	2101      	movs	r1, #1
 8015c6c:	4815      	ldr	r0, [pc, #84]	; (8015cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c6e:	f000 fd04 	bl	801667a <USBD_GetEpDesc>
 8015c72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c74:	2181      	movs	r1, #129	; 0x81
 8015c76:	4813      	ldr	r0, [pc, #76]	; (8015cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c78:	f000 fcff 	bl	801667a <USBD_GetEpDesc>
 8015c7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d002      	beq.n	8015c8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015c84:	697b      	ldr	r3, [r7, #20]
 8015c86:	2210      	movs	r2, #16
 8015c88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d006      	beq.n	8015c9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015c98:	711a      	strb	r2, [r3, #4]
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d006      	beq.n	8015cb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015cac:	711a      	strb	r2, [r3, #4]
 8015cae:	2200      	movs	r2, #0
 8015cb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2243      	movs	r2, #67	; 0x43
 8015cb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015cb8:	4b02      	ldr	r3, [pc, #8]	; (8015cc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3718      	adds	r7, #24
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	20000060 	.word	0x20000060

08015cc8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b086      	sub	sp, #24
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015cd0:	2182      	movs	r1, #130	; 0x82
 8015cd2:	4818      	ldr	r0, [pc, #96]	; (8015d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015cd4:	f000 fcd1 	bl	801667a <USBD_GetEpDesc>
 8015cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015cda:	2101      	movs	r1, #1
 8015cdc:	4815      	ldr	r0, [pc, #84]	; (8015d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015cde:	f000 fccc 	bl	801667a <USBD_GetEpDesc>
 8015ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ce4:	2181      	movs	r1, #129	; 0x81
 8015ce6:	4813      	ldr	r0, [pc, #76]	; (8015d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ce8:	f000 fcc7 	bl	801667a <USBD_GetEpDesc>
 8015cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d002      	beq.n	8015cfa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	2210      	movs	r2, #16
 8015cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d006      	beq.n	8015d0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	2200      	movs	r2, #0
 8015d04:	711a      	strb	r2, [r3, #4]
 8015d06:	2200      	movs	r2, #0
 8015d08:	f042 0202 	orr.w	r2, r2, #2
 8015d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d006      	beq.n	8015d22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2200      	movs	r2, #0
 8015d18:	711a      	strb	r2, [r3, #4]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	f042 0202 	orr.w	r2, r2, #2
 8015d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2243      	movs	r2, #67	; 0x43
 8015d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015d28:	4b02      	ldr	r3, [pc, #8]	; (8015d34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3718      	adds	r7, #24
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	20000060 	.word	0x20000060

08015d38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b086      	sub	sp, #24
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015d40:	2182      	movs	r1, #130	; 0x82
 8015d42:	4818      	ldr	r0, [pc, #96]	; (8015da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d44:	f000 fc99 	bl	801667a <USBD_GetEpDesc>
 8015d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015d4a:	2101      	movs	r1, #1
 8015d4c:	4815      	ldr	r0, [pc, #84]	; (8015da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d4e:	f000 fc94 	bl	801667a <USBD_GetEpDesc>
 8015d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015d54:	2181      	movs	r1, #129	; 0x81
 8015d56:	4813      	ldr	r0, [pc, #76]	; (8015da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d58:	f000 fc8f 	bl	801667a <USBD_GetEpDesc>
 8015d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d002      	beq.n	8015d6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015d64:	697b      	ldr	r3, [r7, #20]
 8015d66:	2210      	movs	r2, #16
 8015d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d006      	beq.n	8015d7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	2200      	movs	r2, #0
 8015d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015d78:	711a      	strb	r2, [r3, #4]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d006      	beq.n	8015d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2200      	movs	r2, #0
 8015d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015d8c:	711a      	strb	r2, [r3, #4]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2243      	movs	r2, #67	; 0x43
 8015d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015d98:	4b02      	ldr	r3, [pc, #8]	; (8015da4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3718      	adds	r7, #24
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	20000060 	.word	0x20000060

08015da8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015da8:	b480      	push	{r7}
 8015daa:	b083      	sub	sp, #12
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	220a      	movs	r2, #10
 8015db4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015db6:	4b03      	ldr	r3, [pc, #12]	; (8015dc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc2:	4770      	bx	lr
 8015dc4:	2000001c 	.word	0x2000001c

08015dc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b083      	sub	sp, #12
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d101      	bne.n	8015ddc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015dd8:	2303      	movs	r3, #3
 8015dda:	e009      	b.n	8015df0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	33b0      	adds	r3, #176	; 0xb0
 8015de6:	009b      	lsls	r3, r3, #2
 8015de8:	4413      	add	r3, r2
 8015dea:	683a      	ldr	r2, [r7, #0]
 8015dec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015dee:	2300      	movs	r3, #0
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	370c      	adds	r7, #12
 8015df4:	46bd      	mov	sp, r7
 8015df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfa:	4770      	bx	lr

08015dfc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015dfc:	b480      	push	{r7}
 8015dfe:	b087      	sub	sp, #28
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	32b0      	adds	r2, #176	; 0xb0
 8015e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e16:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d101      	bne.n	8015e22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015e1e:	2303      	movs	r3, #3
 8015e20:	e008      	b.n	8015e34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	68ba      	ldr	r2, [r7, #8]
 8015e26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	687a      	ldr	r2, [r7, #4]
 8015e2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015e32:	2300      	movs	r3, #0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	371c      	adds	r7, #28
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3e:	4770      	bx	lr

08015e40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015e40:	b480      	push	{r7}
 8015e42:	b085      	sub	sp, #20
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	32b0      	adds	r2, #176	; 0xb0
 8015e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d101      	bne.n	8015e64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015e60:	2303      	movs	r3, #3
 8015e62:	e004      	b.n	8015e6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	683a      	ldr	r2, [r7, #0]
 8015e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015e6c:	2300      	movs	r3, #0
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3714      	adds	r7, #20
 8015e72:	46bd      	mov	sp, r7
 8015e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e78:	4770      	bx	lr
	...

08015e7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b084      	sub	sp, #16
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	32b0      	adds	r2, #176	; 0xb0
 8015e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	32b0      	adds	r2, #176	; 0xb0
 8015e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015ea6:	2303      	movs	r3, #3
 8015ea8:	e018      	b.n	8015edc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	7c1b      	ldrb	r3, [r3, #16]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d10a      	bne.n	8015ec8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015eb2:	4b0c      	ldr	r3, [pc, #48]	; (8015ee4 <USBD_CDC_ReceivePacket+0x68>)
 8015eb4:	7819      	ldrb	r1, [r3, #0]
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f005 f9db 	bl	801b27c <USBD_LL_PrepareReceive>
 8015ec6:	e008      	b.n	8015eda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015ec8:	4b06      	ldr	r3, [pc, #24]	; (8015ee4 <USBD_CDC_ReceivePacket+0x68>)
 8015eca:	7819      	ldrb	r1, [r3, #0]
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015ed2:	2340      	movs	r3, #64	; 0x40
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f005 f9d1 	bl	801b27c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015eda:	2300      	movs	r3, #0
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3710      	adds	r7, #16
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}
 8015ee4:	200000a4 	.word	0x200000a4

08015ee8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b086      	sub	sp, #24
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	60f8      	str	r0, [r7, #12]
 8015ef0:	60b9      	str	r1, [r7, #8]
 8015ef2:	4613      	mov	r3, r2
 8015ef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d101      	bne.n	8015f00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015efc:	2303      	movs	r3, #3
 8015efe:	e01f      	b.n	8015f40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	2200      	movs	r2, #0
 8015f04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	2200      	movs	r2, #0
 8015f14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d003      	beq.n	8015f26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	68ba      	ldr	r2, [r7, #8]
 8015f22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	2201      	movs	r2, #1
 8015f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	79fa      	ldrb	r2, [r7, #7]
 8015f32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015f34:	68f8      	ldr	r0, [r7, #12]
 8015f36:	f005 f84b 	bl	801afd0 <USBD_LL_Init>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	3718      	adds	r7, #24
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}

08015f48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b084      	sub	sp, #16
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015f52:	2300      	movs	r3, #0
 8015f54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d101      	bne.n	8015f60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015f5c:	2303      	movs	r3, #3
 8015f5e:	e025      	b.n	8015fac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	683a      	ldr	r2, [r7, #0]
 8015f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	32ae      	adds	r2, #174	; 0xae
 8015f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d00f      	beq.n	8015f9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	32ae      	adds	r2, #174	; 0xae
 8015f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f8c:	f107 020e 	add.w	r2, r7, #14
 8015f90:	4610      	mov	r0, r2
 8015f92:	4798      	blx	r3
 8015f94:	4602      	mov	r2, r0
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015fa2:	1c5a      	adds	r2, r3, #1
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015faa:	2300      	movs	r3, #0
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3710      	adds	r7, #16
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f005 f853 	bl	801b068 <USBD_LL_Start>
 8015fc2:	4603      	mov	r3, r0
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3708      	adds	r7, #8
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015fcc:	b480      	push	{r7}
 8015fce:	b083      	sub	sp, #12
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015fd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	370c      	adds	r7, #12
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr

08015fe2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015fe2:	b580      	push	{r7, lr}
 8015fe4:	b084      	sub	sp, #16
 8015fe6:	af00      	add	r7, sp, #0
 8015fe8:	6078      	str	r0, [r7, #4]
 8015fea:	460b      	mov	r3, r1
 8015fec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d009      	beq.n	8016010 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	78fa      	ldrb	r2, [r7, #3]
 8016006:	4611      	mov	r1, r2
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	4798      	blx	r3
 801600c:	4603      	mov	r3, r0
 801600e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016010:	7bfb      	ldrb	r3, [r7, #15]
}
 8016012:	4618      	mov	r0, r3
 8016014:	3710      	adds	r7, #16
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b084      	sub	sp, #16
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
 8016022:	460b      	mov	r3, r1
 8016024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016026:	2300      	movs	r3, #0
 8016028:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	78fa      	ldrb	r2, [r7, #3]
 8016034:	4611      	mov	r1, r2
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	4798      	blx	r3
 801603a:	4603      	mov	r3, r0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d001      	beq.n	8016044 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016040:	2303      	movs	r3, #3
 8016042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016044:	7bfb      	ldrb	r3, [r7, #15]
}
 8016046:	4618      	mov	r0, r3
 8016048:	3710      	adds	r7, #16
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}

0801604e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801604e:	b580      	push	{r7, lr}
 8016050:	b084      	sub	sp, #16
 8016052:	af00      	add	r7, sp, #0
 8016054:	6078      	str	r0, [r7, #4]
 8016056:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801605e:	6839      	ldr	r1, [r7, #0]
 8016060:	4618      	mov	r0, r3
 8016062:	f001 f908 	bl	8017276 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2201      	movs	r2, #1
 801606a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016074:	461a      	mov	r2, r3
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016082:	f003 031f 	and.w	r3, r3, #31
 8016086:	2b02      	cmp	r3, #2
 8016088:	d01a      	beq.n	80160c0 <USBD_LL_SetupStage+0x72>
 801608a:	2b02      	cmp	r3, #2
 801608c:	d822      	bhi.n	80160d4 <USBD_LL_SetupStage+0x86>
 801608e:	2b00      	cmp	r3, #0
 8016090:	d002      	beq.n	8016098 <USBD_LL_SetupStage+0x4a>
 8016092:	2b01      	cmp	r3, #1
 8016094:	d00a      	beq.n	80160ac <USBD_LL_SetupStage+0x5e>
 8016096:	e01d      	b.n	80160d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801609e:	4619      	mov	r1, r3
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f000 fb5f 	bl	8016764 <USBD_StdDevReq>
 80160a6:	4603      	mov	r3, r0
 80160a8:	73fb      	strb	r3, [r7, #15]
      break;
 80160aa:	e020      	b.n	80160ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80160b2:	4619      	mov	r1, r3
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 fbc7 	bl	8016848 <USBD_StdItfReq>
 80160ba:	4603      	mov	r3, r0
 80160bc:	73fb      	strb	r3, [r7, #15]
      break;
 80160be:	e016      	b.n	80160ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80160c6:	4619      	mov	r1, r3
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f000 fc29 	bl	8016920 <USBD_StdEPReq>
 80160ce:	4603      	mov	r3, r0
 80160d0:	73fb      	strb	r3, [r7, #15]
      break;
 80160d2:	e00c      	b.n	80160ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80160da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80160de:	b2db      	uxtb	r3, r3
 80160e0:	4619      	mov	r1, r3
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f005 f820 	bl	801b128 <USBD_LL_StallEP>
 80160e8:	4603      	mov	r3, r0
 80160ea:	73fb      	strb	r3, [r7, #15]
      break;
 80160ec:	bf00      	nop
  }

  return ret;
 80160ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80160f0:	4618      	mov	r0, r3
 80160f2:	3710      	adds	r7, #16
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b086      	sub	sp, #24
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	460b      	mov	r3, r1
 8016102:	607a      	str	r2, [r7, #4]
 8016104:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016106:	2300      	movs	r3, #0
 8016108:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801610a:	7afb      	ldrb	r3, [r7, #11]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d16e      	bne.n	80161ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016116:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801611e:	2b03      	cmp	r3, #3
 8016120:	f040 8098 	bne.w	8016254 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016124:	693b      	ldr	r3, [r7, #16]
 8016126:	689a      	ldr	r2, [r3, #8]
 8016128:	693b      	ldr	r3, [r7, #16]
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	429a      	cmp	r2, r3
 801612e:	d913      	bls.n	8016158 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	689a      	ldr	r2, [r3, #8]
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	68db      	ldr	r3, [r3, #12]
 8016138:	1ad2      	subs	r2, r2, r3
 801613a:	693b      	ldr	r3, [r7, #16]
 801613c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	68da      	ldr	r2, [r3, #12]
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	689b      	ldr	r3, [r3, #8]
 8016146:	4293      	cmp	r3, r2
 8016148:	bf28      	it	cs
 801614a:	4613      	movcs	r3, r2
 801614c:	461a      	mov	r2, r3
 801614e:	6879      	ldr	r1, [r7, #4]
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f001 f984 	bl	801745e <USBD_CtlContinueRx>
 8016156:	e07d      	b.n	8016254 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801615e:	f003 031f 	and.w	r3, r3, #31
 8016162:	2b02      	cmp	r3, #2
 8016164:	d014      	beq.n	8016190 <USBD_LL_DataOutStage+0x98>
 8016166:	2b02      	cmp	r3, #2
 8016168:	d81d      	bhi.n	80161a6 <USBD_LL_DataOutStage+0xae>
 801616a:	2b00      	cmp	r3, #0
 801616c:	d002      	beq.n	8016174 <USBD_LL_DataOutStage+0x7c>
 801616e:	2b01      	cmp	r3, #1
 8016170:	d003      	beq.n	801617a <USBD_LL_DataOutStage+0x82>
 8016172:	e018      	b.n	80161a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016174:	2300      	movs	r3, #0
 8016176:	75bb      	strb	r3, [r7, #22]
            break;
 8016178:	e018      	b.n	80161ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016180:	b2db      	uxtb	r3, r3
 8016182:	4619      	mov	r1, r3
 8016184:	68f8      	ldr	r0, [r7, #12]
 8016186:	f000 fa5e 	bl	8016646 <USBD_CoreFindIF>
 801618a:	4603      	mov	r3, r0
 801618c:	75bb      	strb	r3, [r7, #22]
            break;
 801618e:	e00d      	b.n	80161ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016196:	b2db      	uxtb	r3, r3
 8016198:	4619      	mov	r1, r3
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	f000 fa60 	bl	8016660 <USBD_CoreFindEP>
 80161a0:	4603      	mov	r3, r0
 80161a2:	75bb      	strb	r3, [r7, #22]
            break;
 80161a4:	e002      	b.n	80161ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80161a6:	2300      	movs	r3, #0
 80161a8:	75bb      	strb	r3, [r7, #22]
            break;
 80161aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80161ac:	7dbb      	ldrb	r3, [r7, #22]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d119      	bne.n	80161e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161b8:	b2db      	uxtb	r3, r3
 80161ba:	2b03      	cmp	r3, #3
 80161bc:	d113      	bne.n	80161e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80161be:	7dba      	ldrb	r2, [r7, #22]
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	32ae      	adds	r2, #174	; 0xae
 80161c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161c8:	691b      	ldr	r3, [r3, #16]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d00b      	beq.n	80161e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80161ce:	7dba      	ldrb	r2, [r7, #22]
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80161d6:	7dba      	ldrb	r2, [r7, #22]
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	32ae      	adds	r2, #174	; 0xae
 80161dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161e0:	691b      	ldr	r3, [r3, #16]
 80161e2:	68f8      	ldr	r0, [r7, #12]
 80161e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f001 f94a 	bl	8017480 <USBD_CtlSendStatus>
 80161ec:	e032      	b.n	8016254 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80161ee:	7afb      	ldrb	r3, [r7, #11]
 80161f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161f4:	b2db      	uxtb	r3, r3
 80161f6:	4619      	mov	r1, r3
 80161f8:	68f8      	ldr	r0, [r7, #12]
 80161fa:	f000 fa31 	bl	8016660 <USBD_CoreFindEP>
 80161fe:	4603      	mov	r3, r0
 8016200:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016202:	7dbb      	ldrb	r3, [r7, #22]
 8016204:	2bff      	cmp	r3, #255	; 0xff
 8016206:	d025      	beq.n	8016254 <USBD_LL_DataOutStage+0x15c>
 8016208:	7dbb      	ldrb	r3, [r7, #22]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d122      	bne.n	8016254 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016214:	b2db      	uxtb	r3, r3
 8016216:	2b03      	cmp	r3, #3
 8016218:	d117      	bne.n	801624a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801621a:	7dba      	ldrb	r2, [r7, #22]
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	32ae      	adds	r2, #174	; 0xae
 8016220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016224:	699b      	ldr	r3, [r3, #24]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00f      	beq.n	801624a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801622a:	7dba      	ldrb	r2, [r7, #22]
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016232:	7dba      	ldrb	r2, [r7, #22]
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	32ae      	adds	r2, #174	; 0xae
 8016238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801623c:	699b      	ldr	r3, [r3, #24]
 801623e:	7afa      	ldrb	r2, [r7, #11]
 8016240:	4611      	mov	r1, r2
 8016242:	68f8      	ldr	r0, [r7, #12]
 8016244:	4798      	blx	r3
 8016246:	4603      	mov	r3, r0
 8016248:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801624a:	7dfb      	ldrb	r3, [r7, #23]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d001      	beq.n	8016254 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016250:	7dfb      	ldrb	r3, [r7, #23]
 8016252:	e000      	b.n	8016256 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016254:	2300      	movs	r3, #0
}
 8016256:	4618      	mov	r0, r3
 8016258:	3718      	adds	r7, #24
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}

0801625e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801625e:	b580      	push	{r7, lr}
 8016260:	b086      	sub	sp, #24
 8016262:	af00      	add	r7, sp, #0
 8016264:	60f8      	str	r0, [r7, #12]
 8016266:	460b      	mov	r3, r1
 8016268:	607a      	str	r2, [r7, #4]
 801626a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801626c:	7afb      	ldrb	r3, [r7, #11]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d16f      	bne.n	8016352 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	3314      	adds	r3, #20
 8016276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801627e:	2b02      	cmp	r3, #2
 8016280:	d15a      	bne.n	8016338 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016282:	693b      	ldr	r3, [r7, #16]
 8016284:	689a      	ldr	r2, [r3, #8]
 8016286:	693b      	ldr	r3, [r7, #16]
 8016288:	68db      	ldr	r3, [r3, #12]
 801628a:	429a      	cmp	r2, r3
 801628c:	d914      	bls.n	80162b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801628e:	693b      	ldr	r3, [r7, #16]
 8016290:	689a      	ldr	r2, [r3, #8]
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	1ad2      	subs	r2, r2, r3
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	689b      	ldr	r3, [r3, #8]
 80162a0:	461a      	mov	r2, r3
 80162a2:	6879      	ldr	r1, [r7, #4]
 80162a4:	68f8      	ldr	r0, [r7, #12]
 80162a6:	f001 f8ac 	bl	8017402 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80162aa:	2300      	movs	r3, #0
 80162ac:	2200      	movs	r2, #0
 80162ae:	2100      	movs	r1, #0
 80162b0:	68f8      	ldr	r0, [r7, #12]
 80162b2:	f004 ffe3 	bl	801b27c <USBD_LL_PrepareReceive>
 80162b6:	e03f      	b.n	8016338 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	68da      	ldr	r2, [r3, #12]
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	689b      	ldr	r3, [r3, #8]
 80162c0:	429a      	cmp	r2, r3
 80162c2:	d11c      	bne.n	80162fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	685a      	ldr	r2, [r3, #4]
 80162c8:	693b      	ldr	r3, [r7, #16]
 80162ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d316      	bcc.n	80162fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	685a      	ldr	r2, [r3, #4]
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80162da:	429a      	cmp	r2, r3
 80162dc:	d20f      	bcs.n	80162fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80162de:	2200      	movs	r2, #0
 80162e0:	2100      	movs	r1, #0
 80162e2:	68f8      	ldr	r0, [r7, #12]
 80162e4:	f001 f88d 	bl	8017402 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2200      	movs	r2, #0
 80162ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80162f0:	2300      	movs	r3, #0
 80162f2:	2200      	movs	r2, #0
 80162f4:	2100      	movs	r1, #0
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	f004 ffc0 	bl	801b27c <USBD_LL_PrepareReceive>
 80162fc:	e01c      	b.n	8016338 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016304:	b2db      	uxtb	r3, r3
 8016306:	2b03      	cmp	r3, #3
 8016308:	d10f      	bne.n	801632a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016310:	68db      	ldr	r3, [r3, #12]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d009      	beq.n	801632a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2200      	movs	r2, #0
 801631a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016324:	68db      	ldr	r3, [r3, #12]
 8016326:	68f8      	ldr	r0, [r7, #12]
 8016328:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801632a:	2180      	movs	r1, #128	; 0x80
 801632c:	68f8      	ldr	r0, [r7, #12]
 801632e:	f004 fefb 	bl	801b128 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f001 f8b7 	bl	80174a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801633e:	2b00      	cmp	r3, #0
 8016340:	d03a      	beq.n	80163b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016342:	68f8      	ldr	r0, [r7, #12]
 8016344:	f7ff fe42 	bl	8015fcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2200      	movs	r2, #0
 801634c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016350:	e032      	b.n	80163b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016352:	7afb      	ldrb	r3, [r7, #11]
 8016354:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016358:	b2db      	uxtb	r3, r3
 801635a:	4619      	mov	r1, r3
 801635c:	68f8      	ldr	r0, [r7, #12]
 801635e:	f000 f97f 	bl	8016660 <USBD_CoreFindEP>
 8016362:	4603      	mov	r3, r0
 8016364:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016366:	7dfb      	ldrb	r3, [r7, #23]
 8016368:	2bff      	cmp	r3, #255	; 0xff
 801636a:	d025      	beq.n	80163b8 <USBD_LL_DataInStage+0x15a>
 801636c:	7dfb      	ldrb	r3, [r7, #23]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d122      	bne.n	80163b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016378:	b2db      	uxtb	r3, r3
 801637a:	2b03      	cmp	r3, #3
 801637c:	d11c      	bne.n	80163b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801637e:	7dfa      	ldrb	r2, [r7, #23]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	32ae      	adds	r2, #174	; 0xae
 8016384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016388:	695b      	ldr	r3, [r3, #20]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d014      	beq.n	80163b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801638e:	7dfa      	ldrb	r2, [r7, #23]
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016396:	7dfa      	ldrb	r2, [r7, #23]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	32ae      	adds	r2, #174	; 0xae
 801639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163a0:	695b      	ldr	r3, [r3, #20]
 80163a2:	7afa      	ldrb	r2, [r7, #11]
 80163a4:	4611      	mov	r1, r2
 80163a6:	68f8      	ldr	r0, [r7, #12]
 80163a8:	4798      	blx	r3
 80163aa:	4603      	mov	r3, r0
 80163ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80163ae:	7dbb      	ldrb	r3, [r7, #22]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d001      	beq.n	80163b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80163b4:	7dbb      	ldrb	r3, [r7, #22]
 80163b6:	e000      	b.n	80163ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80163b8:	2300      	movs	r3, #0
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	3718      	adds	r7, #24
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}

080163c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80163c2:	b580      	push	{r7, lr}
 80163c4:	b084      	sub	sp, #16
 80163c6:	af00      	add	r7, sp, #0
 80163c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2201      	movs	r2, #1
 80163d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2200      	movs	r2, #0
 80163da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	2200      	movs	r2, #0
 80163e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2200      	movs	r2, #0
 80163e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2200      	movs	r2, #0
 80163f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d014      	beq.n	8016428 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d00e      	beq.n	8016428 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	6852      	ldr	r2, [r2, #4]
 8016416:	b2d2      	uxtb	r2, r2
 8016418:	4611      	mov	r1, r2
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	4798      	blx	r3
 801641e:	4603      	mov	r3, r0
 8016420:	2b00      	cmp	r3, #0
 8016422:	d001      	beq.n	8016428 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016424:	2303      	movs	r3, #3
 8016426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016428:	2340      	movs	r3, #64	; 0x40
 801642a:	2200      	movs	r2, #0
 801642c:	2100      	movs	r1, #0
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	f004 fe35 	bl	801b09e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2201      	movs	r2, #1
 8016438:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2240      	movs	r2, #64	; 0x40
 8016440:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016444:	2340      	movs	r3, #64	; 0x40
 8016446:	2200      	movs	r2, #0
 8016448:	2180      	movs	r1, #128	; 0x80
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f004 fe27 	bl	801b09e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2201      	movs	r2, #1
 8016454:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	2240      	movs	r2, #64	; 0x40
 801645a:	621a      	str	r2, [r3, #32]

  return ret;
 801645c:	7bfb      	ldrb	r3, [r7, #15]
}
 801645e:	4618      	mov	r0, r3
 8016460:	3710      	adds	r7, #16
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}

08016466 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016466:	b480      	push	{r7}
 8016468:	b083      	sub	sp, #12
 801646a:	af00      	add	r7, sp, #0
 801646c:	6078      	str	r0, [r7, #4]
 801646e:	460b      	mov	r3, r1
 8016470:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	78fa      	ldrb	r2, [r7, #3]
 8016476:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016478:	2300      	movs	r3, #0
}
 801647a:	4618      	mov	r0, r3
 801647c:	370c      	adds	r7, #12
 801647e:	46bd      	mov	sp, r7
 8016480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016484:	4770      	bx	lr

08016486 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016486:	b480      	push	{r7}
 8016488:	b083      	sub	sp, #12
 801648a:	af00      	add	r7, sp, #0
 801648c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016494:	b2da      	uxtb	r2, r3
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2204      	movs	r2, #4
 80164a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80164a4:	2300      	movs	r3, #0
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	370c      	adds	r7, #12
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr

080164b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80164b2:	b480      	push	{r7}
 80164b4:	b083      	sub	sp, #12
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164c0:	b2db      	uxtb	r3, r3
 80164c2:	2b04      	cmp	r3, #4
 80164c4:	d106      	bne.n	80164d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80164cc:	b2da      	uxtb	r2, r3
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	370c      	adds	r7, #12
 80164da:	46bd      	mov	sp, r7
 80164dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e0:	4770      	bx	lr

080164e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b082      	sub	sp, #8
 80164e6:	af00      	add	r7, sp, #0
 80164e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	2b03      	cmp	r3, #3
 80164f4:	d110      	bne.n	8016518 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d00b      	beq.n	8016518 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016506:	69db      	ldr	r3, [r3, #28]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d005      	beq.n	8016518 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016512:	69db      	ldr	r3, [r3, #28]
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016518:	2300      	movs	r3, #0
}
 801651a:	4618      	mov	r0, r3
 801651c:	3708      	adds	r7, #8
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016522:	b580      	push	{r7, lr}
 8016524:	b082      	sub	sp, #8
 8016526:	af00      	add	r7, sp, #0
 8016528:	6078      	str	r0, [r7, #4]
 801652a:	460b      	mov	r3, r1
 801652c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	32ae      	adds	r2, #174	; 0xae
 8016538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d101      	bne.n	8016544 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016540:	2303      	movs	r3, #3
 8016542:	e01c      	b.n	801657e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801654a:	b2db      	uxtb	r3, r3
 801654c:	2b03      	cmp	r3, #3
 801654e:	d115      	bne.n	801657c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	32ae      	adds	r2, #174	; 0xae
 801655a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801655e:	6a1b      	ldr	r3, [r3, #32]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d00b      	beq.n	801657c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	32ae      	adds	r2, #174	; 0xae
 801656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016572:	6a1b      	ldr	r3, [r3, #32]
 8016574:	78fa      	ldrb	r2, [r7, #3]
 8016576:	4611      	mov	r1, r2
 8016578:	6878      	ldr	r0, [r7, #4]
 801657a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801657c:	2300      	movs	r3, #0
}
 801657e:	4618      	mov	r0, r3
 8016580:	3708      	adds	r7, #8
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}

08016586 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016586:	b580      	push	{r7, lr}
 8016588:	b082      	sub	sp, #8
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
 801658e:	460b      	mov	r3, r1
 8016590:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	32ae      	adds	r2, #174	; 0xae
 801659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d101      	bne.n	80165a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80165a4:	2303      	movs	r3, #3
 80165a6:	e01c      	b.n	80165e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165ae:	b2db      	uxtb	r3, r3
 80165b0:	2b03      	cmp	r3, #3
 80165b2:	d115      	bne.n	80165e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	32ae      	adds	r2, #174	; 0xae
 80165be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d00b      	beq.n	80165e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	32ae      	adds	r2, #174	; 0xae
 80165d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165d8:	78fa      	ldrb	r2, [r7, #3]
 80165da:	4611      	mov	r1, r2
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80165e0:	2300      	movs	r3, #0
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}

080165ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80165ea:	b480      	push	{r7}
 80165ec:	b083      	sub	sp, #12
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80165f2:	2300      	movs	r3, #0
}
 80165f4:	4618      	mov	r0, r3
 80165f6:	370c      	adds	r7, #12
 80165f8:	46bd      	mov	sp, r7
 80165fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fe:	4770      	bx	lr

08016600 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016608:	2300      	movs	r3, #0
 801660a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2201      	movs	r2, #1
 8016610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801661a:	2b00      	cmp	r3, #0
 801661c:	d00e      	beq.n	801663c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016624:	685b      	ldr	r3, [r3, #4]
 8016626:	687a      	ldr	r2, [r7, #4]
 8016628:	6852      	ldr	r2, [r2, #4]
 801662a:	b2d2      	uxtb	r2, r2
 801662c:	4611      	mov	r1, r2
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	4798      	blx	r3
 8016632:	4603      	mov	r3, r0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d001      	beq.n	801663c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016638:	2303      	movs	r3, #3
 801663a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801663c:	7bfb      	ldrb	r3, [r7, #15]
}
 801663e:	4618      	mov	r0, r3
 8016640:	3710      	adds	r7, #16
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}

08016646 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016646:	b480      	push	{r7}
 8016648:	b083      	sub	sp, #12
 801664a:	af00      	add	r7, sp, #0
 801664c:	6078      	str	r0, [r7, #4]
 801664e:	460b      	mov	r3, r1
 8016650:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016652:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016654:	4618      	mov	r0, r3
 8016656:	370c      	adds	r7, #12
 8016658:	46bd      	mov	sp, r7
 801665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665e:	4770      	bx	lr

08016660 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
 8016668:	460b      	mov	r3, r1
 801666a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801666c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801666e:	4618      	mov	r0, r3
 8016670:	370c      	adds	r7, #12
 8016672:	46bd      	mov	sp, r7
 8016674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016678:	4770      	bx	lr

0801667a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801667a:	b580      	push	{r7, lr}
 801667c:	b086      	sub	sp, #24
 801667e:	af00      	add	r7, sp, #0
 8016680:	6078      	str	r0, [r7, #4]
 8016682:	460b      	mov	r3, r1
 8016684:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801668e:	2300      	movs	r3, #0
 8016690:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	885b      	ldrh	r3, [r3, #2]
 8016696:	b29a      	uxth	r2, r3
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	b29b      	uxth	r3, r3
 801669e:	429a      	cmp	r2, r3
 80166a0:	d920      	bls.n	80166e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	781b      	ldrb	r3, [r3, #0]
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80166aa:	e013      	b.n	80166d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80166ac:	f107 030a 	add.w	r3, r7, #10
 80166b0:	4619      	mov	r1, r3
 80166b2:	6978      	ldr	r0, [r7, #20]
 80166b4:	f000 f81b 	bl	80166ee <USBD_GetNextDesc>
 80166b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	785b      	ldrb	r3, [r3, #1]
 80166be:	2b05      	cmp	r3, #5
 80166c0:	d108      	bne.n	80166d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80166c2:	697b      	ldr	r3, [r7, #20]
 80166c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80166c6:	693b      	ldr	r3, [r7, #16]
 80166c8:	789b      	ldrb	r3, [r3, #2]
 80166ca:	78fa      	ldrb	r2, [r7, #3]
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d008      	beq.n	80166e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80166d0:	2300      	movs	r3, #0
 80166d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	885b      	ldrh	r3, [r3, #2]
 80166d8:	b29a      	uxth	r2, r3
 80166da:	897b      	ldrh	r3, [r7, #10]
 80166dc:	429a      	cmp	r2, r3
 80166de:	d8e5      	bhi.n	80166ac <USBD_GetEpDesc+0x32>
 80166e0:	e000      	b.n	80166e4 <USBD_GetEpDesc+0x6a>
          break;
 80166e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80166e4:	693b      	ldr	r3, [r7, #16]
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3718      	adds	r7, #24
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80166ee:	b480      	push	{r7}
 80166f0:	b085      	sub	sp, #20
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
 80166f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	881a      	ldrh	r2, [r3, #0]
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	781b      	ldrb	r3, [r3, #0]
 8016704:	b29b      	uxth	r3, r3
 8016706:	4413      	add	r3, r2
 8016708:	b29a      	uxth	r2, r3
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	461a      	mov	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	4413      	add	r3, r2
 8016718:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801671a:	68fb      	ldr	r3, [r7, #12]
}
 801671c:	4618      	mov	r0, r3
 801671e:	3714      	adds	r7, #20
 8016720:	46bd      	mov	sp, r7
 8016722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016726:	4770      	bx	lr

08016728 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016728:	b480      	push	{r7}
 801672a:	b087      	sub	sp, #28
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801673a:	697b      	ldr	r3, [r7, #20]
 801673c:	3301      	adds	r3, #1
 801673e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016746:	8a3b      	ldrh	r3, [r7, #16]
 8016748:	021b      	lsls	r3, r3, #8
 801674a:	b21a      	sxth	r2, r3
 801674c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016750:	4313      	orrs	r3, r2
 8016752:	b21b      	sxth	r3, r3
 8016754:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016756:	89fb      	ldrh	r3, [r7, #14]
}
 8016758:	4618      	mov	r0, r3
 801675a:	371c      	adds	r7, #28
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr

08016764 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b084      	sub	sp, #16
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801676e:	2300      	movs	r3, #0
 8016770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	781b      	ldrb	r3, [r3, #0]
 8016776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801677a:	2b40      	cmp	r3, #64	; 0x40
 801677c:	d005      	beq.n	801678a <USBD_StdDevReq+0x26>
 801677e:	2b40      	cmp	r3, #64	; 0x40
 8016780:	d857      	bhi.n	8016832 <USBD_StdDevReq+0xce>
 8016782:	2b00      	cmp	r3, #0
 8016784:	d00f      	beq.n	80167a6 <USBD_StdDevReq+0x42>
 8016786:	2b20      	cmp	r3, #32
 8016788:	d153      	bne.n	8016832 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	32ae      	adds	r2, #174	; 0xae
 8016794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016798:	689b      	ldr	r3, [r3, #8]
 801679a:	6839      	ldr	r1, [r7, #0]
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	4798      	blx	r3
 80167a0:	4603      	mov	r3, r0
 80167a2:	73fb      	strb	r3, [r7, #15]
      break;
 80167a4:	e04a      	b.n	801683c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	785b      	ldrb	r3, [r3, #1]
 80167aa:	2b09      	cmp	r3, #9
 80167ac:	d83b      	bhi.n	8016826 <USBD_StdDevReq+0xc2>
 80167ae:	a201      	add	r2, pc, #4	; (adr r2, 80167b4 <USBD_StdDevReq+0x50>)
 80167b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167b4:	08016809 	.word	0x08016809
 80167b8:	0801681d 	.word	0x0801681d
 80167bc:	08016827 	.word	0x08016827
 80167c0:	08016813 	.word	0x08016813
 80167c4:	08016827 	.word	0x08016827
 80167c8:	080167e7 	.word	0x080167e7
 80167cc:	080167dd 	.word	0x080167dd
 80167d0:	08016827 	.word	0x08016827
 80167d4:	080167ff 	.word	0x080167ff
 80167d8:	080167f1 	.word	0x080167f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80167dc:	6839      	ldr	r1, [r7, #0]
 80167de:	6878      	ldr	r0, [r7, #4]
 80167e0:	f000 fa3c 	bl	8016c5c <USBD_GetDescriptor>
          break;
 80167e4:	e024      	b.n	8016830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80167e6:	6839      	ldr	r1, [r7, #0]
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f000 fba1 	bl	8016f30 <USBD_SetAddress>
          break;
 80167ee:	e01f      	b.n	8016830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80167f0:	6839      	ldr	r1, [r7, #0]
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f000 fbe0 	bl	8016fb8 <USBD_SetConfig>
 80167f8:	4603      	mov	r3, r0
 80167fa:	73fb      	strb	r3, [r7, #15]
          break;
 80167fc:	e018      	b.n	8016830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80167fe:	6839      	ldr	r1, [r7, #0]
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f000 fc83 	bl	801710c <USBD_GetConfig>
          break;
 8016806:	e013      	b.n	8016830 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016808:	6839      	ldr	r1, [r7, #0]
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f000 fcb4 	bl	8017178 <USBD_GetStatus>
          break;
 8016810:	e00e      	b.n	8016830 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016812:	6839      	ldr	r1, [r7, #0]
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f000 fce3 	bl	80171e0 <USBD_SetFeature>
          break;
 801681a:	e009      	b.n	8016830 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801681c:	6839      	ldr	r1, [r7, #0]
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 fd07 	bl	8017232 <USBD_ClrFeature>
          break;
 8016824:	e004      	b.n	8016830 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016826:	6839      	ldr	r1, [r7, #0]
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f000 fd5e 	bl	80172ea <USBD_CtlError>
          break;
 801682e:	bf00      	nop
      }
      break;
 8016830:	e004      	b.n	801683c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016832:	6839      	ldr	r1, [r7, #0]
 8016834:	6878      	ldr	r0, [r7, #4]
 8016836:	f000 fd58 	bl	80172ea <USBD_CtlError>
      break;
 801683a:	bf00      	nop
  }

  return ret;
 801683c:	7bfb      	ldrb	r3, [r7, #15]
}
 801683e:	4618      	mov	r0, r3
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop

08016848 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b084      	sub	sp, #16
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
 8016850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016852:	2300      	movs	r3, #0
 8016854:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801685e:	2b40      	cmp	r3, #64	; 0x40
 8016860:	d005      	beq.n	801686e <USBD_StdItfReq+0x26>
 8016862:	2b40      	cmp	r3, #64	; 0x40
 8016864:	d852      	bhi.n	801690c <USBD_StdItfReq+0xc4>
 8016866:	2b00      	cmp	r3, #0
 8016868:	d001      	beq.n	801686e <USBD_StdItfReq+0x26>
 801686a:	2b20      	cmp	r3, #32
 801686c:	d14e      	bne.n	801690c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016874:	b2db      	uxtb	r3, r3
 8016876:	3b01      	subs	r3, #1
 8016878:	2b02      	cmp	r3, #2
 801687a:	d840      	bhi.n	80168fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	889b      	ldrh	r3, [r3, #4]
 8016880:	b2db      	uxtb	r3, r3
 8016882:	2b01      	cmp	r3, #1
 8016884:	d836      	bhi.n	80168f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	889b      	ldrh	r3, [r3, #4]
 801688a:	b2db      	uxtb	r3, r3
 801688c:	4619      	mov	r1, r3
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f7ff fed9 	bl	8016646 <USBD_CoreFindIF>
 8016894:	4603      	mov	r3, r0
 8016896:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016898:	7bbb      	ldrb	r3, [r7, #14]
 801689a:	2bff      	cmp	r3, #255	; 0xff
 801689c:	d01d      	beq.n	80168da <USBD_StdItfReq+0x92>
 801689e:	7bbb      	ldrb	r3, [r7, #14]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d11a      	bne.n	80168da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80168a4:	7bba      	ldrb	r2, [r7, #14]
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	32ae      	adds	r2, #174	; 0xae
 80168aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168ae:	689b      	ldr	r3, [r3, #8]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d00f      	beq.n	80168d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80168b4:	7bba      	ldrb	r2, [r7, #14]
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80168bc:	7bba      	ldrb	r2, [r7, #14]
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	32ae      	adds	r2, #174	; 0xae
 80168c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168c6:	689b      	ldr	r3, [r3, #8]
 80168c8:	6839      	ldr	r1, [r7, #0]
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	4798      	blx	r3
 80168ce:	4603      	mov	r3, r0
 80168d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80168d2:	e004      	b.n	80168de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80168d4:	2303      	movs	r3, #3
 80168d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80168d8:	e001      	b.n	80168de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80168da:	2303      	movs	r3, #3
 80168dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	88db      	ldrh	r3, [r3, #6]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d110      	bne.n	8016908 <USBD_StdItfReq+0xc0>
 80168e6:	7bfb      	ldrb	r3, [r7, #15]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d10d      	bne.n	8016908 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f000 fdc7 	bl	8017480 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80168f2:	e009      	b.n	8016908 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80168f4:	6839      	ldr	r1, [r7, #0]
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f000 fcf7 	bl	80172ea <USBD_CtlError>
          break;
 80168fc:	e004      	b.n	8016908 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80168fe:	6839      	ldr	r1, [r7, #0]
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f000 fcf2 	bl	80172ea <USBD_CtlError>
          break;
 8016906:	e000      	b.n	801690a <USBD_StdItfReq+0xc2>
          break;
 8016908:	bf00      	nop
      }
      break;
 801690a:	e004      	b.n	8016916 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801690c:	6839      	ldr	r1, [r7, #0]
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f000 fceb 	bl	80172ea <USBD_CtlError>
      break;
 8016914:	bf00      	nop
  }

  return ret;
 8016916:	7bfb      	ldrb	r3, [r7, #15]
}
 8016918:	4618      	mov	r0, r3
 801691a:	3710      	adds	r7, #16
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b084      	sub	sp, #16
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801692a:	2300      	movs	r3, #0
 801692c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	889b      	ldrh	r3, [r3, #4]
 8016932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801693c:	2b40      	cmp	r3, #64	; 0x40
 801693e:	d007      	beq.n	8016950 <USBD_StdEPReq+0x30>
 8016940:	2b40      	cmp	r3, #64	; 0x40
 8016942:	f200 817f 	bhi.w	8016c44 <USBD_StdEPReq+0x324>
 8016946:	2b00      	cmp	r3, #0
 8016948:	d02a      	beq.n	80169a0 <USBD_StdEPReq+0x80>
 801694a:	2b20      	cmp	r3, #32
 801694c:	f040 817a 	bne.w	8016c44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016950:	7bbb      	ldrb	r3, [r7, #14]
 8016952:	4619      	mov	r1, r3
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	f7ff fe83 	bl	8016660 <USBD_CoreFindEP>
 801695a:	4603      	mov	r3, r0
 801695c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801695e:	7b7b      	ldrb	r3, [r7, #13]
 8016960:	2bff      	cmp	r3, #255	; 0xff
 8016962:	f000 8174 	beq.w	8016c4e <USBD_StdEPReq+0x32e>
 8016966:	7b7b      	ldrb	r3, [r7, #13]
 8016968:	2b00      	cmp	r3, #0
 801696a:	f040 8170 	bne.w	8016c4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801696e:	7b7a      	ldrb	r2, [r7, #13]
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016976:	7b7a      	ldrb	r2, [r7, #13]
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	32ae      	adds	r2, #174	; 0xae
 801697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016980:	689b      	ldr	r3, [r3, #8]
 8016982:	2b00      	cmp	r3, #0
 8016984:	f000 8163 	beq.w	8016c4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016988:	7b7a      	ldrb	r2, [r7, #13]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	32ae      	adds	r2, #174	; 0xae
 801698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016992:	689b      	ldr	r3, [r3, #8]
 8016994:	6839      	ldr	r1, [r7, #0]
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	4798      	blx	r3
 801699a:	4603      	mov	r3, r0
 801699c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801699e:	e156      	b.n	8016c4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	785b      	ldrb	r3, [r3, #1]
 80169a4:	2b03      	cmp	r3, #3
 80169a6:	d008      	beq.n	80169ba <USBD_StdEPReq+0x9a>
 80169a8:	2b03      	cmp	r3, #3
 80169aa:	f300 8145 	bgt.w	8016c38 <USBD_StdEPReq+0x318>
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	f000 809b 	beq.w	8016aea <USBD_StdEPReq+0x1ca>
 80169b4:	2b01      	cmp	r3, #1
 80169b6:	d03c      	beq.n	8016a32 <USBD_StdEPReq+0x112>
 80169b8:	e13e      	b.n	8016c38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169c0:	b2db      	uxtb	r3, r3
 80169c2:	2b02      	cmp	r3, #2
 80169c4:	d002      	beq.n	80169cc <USBD_StdEPReq+0xac>
 80169c6:	2b03      	cmp	r3, #3
 80169c8:	d016      	beq.n	80169f8 <USBD_StdEPReq+0xd8>
 80169ca:	e02c      	b.n	8016a26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80169cc:	7bbb      	ldrb	r3, [r7, #14]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d00d      	beq.n	80169ee <USBD_StdEPReq+0xce>
 80169d2:	7bbb      	ldrb	r3, [r7, #14]
 80169d4:	2b80      	cmp	r3, #128	; 0x80
 80169d6:	d00a      	beq.n	80169ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80169d8:	7bbb      	ldrb	r3, [r7, #14]
 80169da:	4619      	mov	r1, r3
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f004 fba3 	bl	801b128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80169e2:	2180      	movs	r1, #128	; 0x80
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f004 fb9f 	bl	801b128 <USBD_LL_StallEP>
 80169ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80169ec:	e020      	b.n	8016a30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80169ee:	6839      	ldr	r1, [r7, #0]
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	f000 fc7a 	bl	80172ea <USBD_CtlError>
              break;
 80169f6:	e01b      	b.n	8016a30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	885b      	ldrh	r3, [r3, #2]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d10e      	bne.n	8016a1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016a00:	7bbb      	ldrb	r3, [r7, #14]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d00b      	beq.n	8016a1e <USBD_StdEPReq+0xfe>
 8016a06:	7bbb      	ldrb	r3, [r7, #14]
 8016a08:	2b80      	cmp	r3, #128	; 0x80
 8016a0a:	d008      	beq.n	8016a1e <USBD_StdEPReq+0xfe>
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	88db      	ldrh	r3, [r3, #6]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d104      	bne.n	8016a1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a14:	7bbb      	ldrb	r3, [r7, #14]
 8016a16:	4619      	mov	r1, r3
 8016a18:	6878      	ldr	r0, [r7, #4]
 8016a1a:	f004 fb85 	bl	801b128 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016a1e:	6878      	ldr	r0, [r7, #4]
 8016a20:	f000 fd2e 	bl	8017480 <USBD_CtlSendStatus>

              break;
 8016a24:	e004      	b.n	8016a30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016a26:	6839      	ldr	r1, [r7, #0]
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f000 fc5e 	bl	80172ea <USBD_CtlError>
              break;
 8016a2e:	bf00      	nop
          }
          break;
 8016a30:	e107      	b.n	8016c42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a38:	b2db      	uxtb	r3, r3
 8016a3a:	2b02      	cmp	r3, #2
 8016a3c:	d002      	beq.n	8016a44 <USBD_StdEPReq+0x124>
 8016a3e:	2b03      	cmp	r3, #3
 8016a40:	d016      	beq.n	8016a70 <USBD_StdEPReq+0x150>
 8016a42:	e04b      	b.n	8016adc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016a44:	7bbb      	ldrb	r3, [r7, #14]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d00d      	beq.n	8016a66 <USBD_StdEPReq+0x146>
 8016a4a:	7bbb      	ldrb	r3, [r7, #14]
 8016a4c:	2b80      	cmp	r3, #128	; 0x80
 8016a4e:	d00a      	beq.n	8016a66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a50:	7bbb      	ldrb	r3, [r7, #14]
 8016a52:	4619      	mov	r1, r3
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f004 fb67 	bl	801b128 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a5a:	2180      	movs	r1, #128	; 0x80
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f004 fb63 	bl	801b128 <USBD_LL_StallEP>
 8016a62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016a64:	e040      	b.n	8016ae8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016a66:	6839      	ldr	r1, [r7, #0]
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f000 fc3e 	bl	80172ea <USBD_CtlError>
              break;
 8016a6e:	e03b      	b.n	8016ae8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	885b      	ldrh	r3, [r3, #2]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d136      	bne.n	8016ae6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016a78:	7bbb      	ldrb	r3, [r7, #14]
 8016a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d004      	beq.n	8016a8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016a82:	7bbb      	ldrb	r3, [r7, #14]
 8016a84:	4619      	mov	r1, r3
 8016a86:	6878      	ldr	r0, [r7, #4]
 8016a88:	f004 fb6d 	bl	801b166 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f000 fcf7 	bl	8017480 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016a92:	7bbb      	ldrb	r3, [r7, #14]
 8016a94:	4619      	mov	r1, r3
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f7ff fde2 	bl	8016660 <USBD_CoreFindEP>
 8016a9c:	4603      	mov	r3, r0
 8016a9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016aa0:	7b7b      	ldrb	r3, [r7, #13]
 8016aa2:	2bff      	cmp	r3, #255	; 0xff
 8016aa4:	d01f      	beq.n	8016ae6 <USBD_StdEPReq+0x1c6>
 8016aa6:	7b7b      	ldrb	r3, [r7, #13]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d11c      	bne.n	8016ae6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016aac:	7b7a      	ldrb	r2, [r7, #13]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016ab4:	7b7a      	ldrb	r2, [r7, #13]
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	32ae      	adds	r2, #174	; 0xae
 8016aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016abe:	689b      	ldr	r3, [r3, #8]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d010      	beq.n	8016ae6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016ac4:	7b7a      	ldrb	r2, [r7, #13]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	32ae      	adds	r2, #174	; 0xae
 8016aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ace:	689b      	ldr	r3, [r3, #8]
 8016ad0:	6839      	ldr	r1, [r7, #0]
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	4798      	blx	r3
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016ada:	e004      	b.n	8016ae6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016adc:	6839      	ldr	r1, [r7, #0]
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 fc03 	bl	80172ea <USBD_CtlError>
              break;
 8016ae4:	e000      	b.n	8016ae8 <USBD_StdEPReq+0x1c8>
              break;
 8016ae6:	bf00      	nop
          }
          break;
 8016ae8:	e0ab      	b.n	8016c42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016af0:	b2db      	uxtb	r3, r3
 8016af2:	2b02      	cmp	r3, #2
 8016af4:	d002      	beq.n	8016afc <USBD_StdEPReq+0x1dc>
 8016af6:	2b03      	cmp	r3, #3
 8016af8:	d032      	beq.n	8016b60 <USBD_StdEPReq+0x240>
 8016afa:	e097      	b.n	8016c2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016afc:	7bbb      	ldrb	r3, [r7, #14]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d007      	beq.n	8016b12 <USBD_StdEPReq+0x1f2>
 8016b02:	7bbb      	ldrb	r3, [r7, #14]
 8016b04:	2b80      	cmp	r3, #128	; 0x80
 8016b06:	d004      	beq.n	8016b12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016b08:	6839      	ldr	r1, [r7, #0]
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f000 fbed 	bl	80172ea <USBD_CtlError>
                break;
 8016b10:	e091      	b.n	8016c36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	da0b      	bge.n	8016b32 <USBD_StdEPReq+0x212>
 8016b1a:	7bbb      	ldrb	r3, [r7, #14]
 8016b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b20:	4613      	mov	r3, r2
 8016b22:	009b      	lsls	r3, r3, #2
 8016b24:	4413      	add	r3, r2
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	3310      	adds	r3, #16
 8016b2a:	687a      	ldr	r2, [r7, #4]
 8016b2c:	4413      	add	r3, r2
 8016b2e:	3304      	adds	r3, #4
 8016b30:	e00b      	b.n	8016b4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016b32:	7bbb      	ldrb	r3, [r7, #14]
 8016b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b38:	4613      	mov	r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	4413      	add	r3, r2
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	4413      	add	r3, r2
 8016b48:	3304      	adds	r3, #4
 8016b4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	2200      	movs	r2, #0
 8016b50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016b52:	68bb      	ldr	r3, [r7, #8]
 8016b54:	2202      	movs	r2, #2
 8016b56:	4619      	mov	r1, r3
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f000 fc37 	bl	80173cc <USBD_CtlSendData>
              break;
 8016b5e:	e06a      	b.n	8016c36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	da11      	bge.n	8016b8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016b68:	7bbb      	ldrb	r3, [r7, #14]
 8016b6a:	f003 020f 	and.w	r2, r3, #15
 8016b6e:	6879      	ldr	r1, [r7, #4]
 8016b70:	4613      	mov	r3, r2
 8016b72:	009b      	lsls	r3, r3, #2
 8016b74:	4413      	add	r3, r2
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	440b      	add	r3, r1
 8016b7a:	3324      	adds	r3, #36	; 0x24
 8016b7c:	881b      	ldrh	r3, [r3, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d117      	bne.n	8016bb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016b82:	6839      	ldr	r1, [r7, #0]
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f000 fbb0 	bl	80172ea <USBD_CtlError>
                  break;
 8016b8a:	e054      	b.n	8016c36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016b8c:	7bbb      	ldrb	r3, [r7, #14]
 8016b8e:	f003 020f 	and.w	r2, r3, #15
 8016b92:	6879      	ldr	r1, [r7, #4]
 8016b94:	4613      	mov	r3, r2
 8016b96:	009b      	lsls	r3, r3, #2
 8016b98:	4413      	add	r3, r2
 8016b9a:	009b      	lsls	r3, r3, #2
 8016b9c:	440b      	add	r3, r1
 8016b9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016ba2:	881b      	ldrh	r3, [r3, #0]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d104      	bne.n	8016bb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016ba8:	6839      	ldr	r1, [r7, #0]
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f000 fb9d 	bl	80172ea <USBD_CtlError>
                  break;
 8016bb0:	e041      	b.n	8016c36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	da0b      	bge.n	8016bd2 <USBD_StdEPReq+0x2b2>
 8016bba:	7bbb      	ldrb	r3, [r7, #14]
 8016bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	009b      	lsls	r3, r3, #2
 8016bc4:	4413      	add	r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	3310      	adds	r3, #16
 8016bca:	687a      	ldr	r2, [r7, #4]
 8016bcc:	4413      	add	r3, r2
 8016bce:	3304      	adds	r3, #4
 8016bd0:	e00b      	b.n	8016bea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016bd2:	7bbb      	ldrb	r3, [r7, #14]
 8016bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016bd8:	4613      	mov	r3, r2
 8016bda:	009b      	lsls	r3, r3, #2
 8016bdc:	4413      	add	r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	4413      	add	r3, r2
 8016be8:	3304      	adds	r3, #4
 8016bea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016bec:	7bbb      	ldrb	r3, [r7, #14]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d002      	beq.n	8016bf8 <USBD_StdEPReq+0x2d8>
 8016bf2:	7bbb      	ldrb	r3, [r7, #14]
 8016bf4:	2b80      	cmp	r3, #128	; 0x80
 8016bf6:	d103      	bne.n	8016c00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	601a      	str	r2, [r3, #0]
 8016bfe:	e00e      	b.n	8016c1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016c00:	7bbb      	ldrb	r3, [r7, #14]
 8016c02:	4619      	mov	r1, r3
 8016c04:	6878      	ldr	r0, [r7, #4]
 8016c06:	f004 facd 	bl	801b1a4 <USBD_LL_IsStallEP>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d003      	beq.n	8016c18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	2201      	movs	r2, #1
 8016c14:	601a      	str	r2, [r3, #0]
 8016c16:	e002      	b.n	8016c1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	2202      	movs	r2, #2
 8016c22:	4619      	mov	r1, r3
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f000 fbd1 	bl	80173cc <USBD_CtlSendData>
              break;
 8016c2a:	e004      	b.n	8016c36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016c2c:	6839      	ldr	r1, [r7, #0]
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f000 fb5b 	bl	80172ea <USBD_CtlError>
              break;
 8016c34:	bf00      	nop
          }
          break;
 8016c36:	e004      	b.n	8016c42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016c38:	6839      	ldr	r1, [r7, #0]
 8016c3a:	6878      	ldr	r0, [r7, #4]
 8016c3c:	f000 fb55 	bl	80172ea <USBD_CtlError>
          break;
 8016c40:	bf00      	nop
      }
      break;
 8016c42:	e005      	b.n	8016c50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016c44:	6839      	ldr	r1, [r7, #0]
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f000 fb4f 	bl	80172ea <USBD_CtlError>
      break;
 8016c4c:	e000      	b.n	8016c50 <USBD_StdEPReq+0x330>
      break;
 8016c4e:	bf00      	nop
  }

  return ret;
 8016c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3710      	adds	r7, #16
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
	...

08016c5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b084      	sub	sp, #16
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016c66:	2300      	movs	r3, #0
 8016c68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	885b      	ldrh	r3, [r3, #2]
 8016c76:	0a1b      	lsrs	r3, r3, #8
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	2b06      	cmp	r3, #6
 8016c7e:	f200 8128 	bhi.w	8016ed2 <USBD_GetDescriptor+0x276>
 8016c82:	a201      	add	r2, pc, #4	; (adr r2, 8016c88 <USBD_GetDescriptor+0x2c>)
 8016c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c88:	08016ca5 	.word	0x08016ca5
 8016c8c:	08016cbd 	.word	0x08016cbd
 8016c90:	08016cfd 	.word	0x08016cfd
 8016c94:	08016ed3 	.word	0x08016ed3
 8016c98:	08016ed3 	.word	0x08016ed3
 8016c9c:	08016e73 	.word	0x08016e73
 8016ca0:	08016e9f 	.word	0x08016e9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	7c12      	ldrb	r2, [r2, #16]
 8016cb0:	f107 0108 	add.w	r1, r7, #8
 8016cb4:	4610      	mov	r0, r2
 8016cb6:	4798      	blx	r3
 8016cb8:	60f8      	str	r0, [r7, #12]
      break;
 8016cba:	e112      	b.n	8016ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	7c1b      	ldrb	r3, [r3, #16]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d10d      	bne.n	8016ce0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ccc:	f107 0208 	add.w	r2, r7, #8
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	4798      	blx	r3
 8016cd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	2202      	movs	r2, #2
 8016cdc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016cde:	e100      	b.n	8016ee2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ce8:	f107 0208 	add.w	r2, r7, #8
 8016cec:	4610      	mov	r0, r2
 8016cee:	4798      	blx	r3
 8016cf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	2202      	movs	r2, #2
 8016cf8:	701a      	strb	r2, [r3, #0]
      break;
 8016cfa:	e0f2      	b.n	8016ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	885b      	ldrh	r3, [r3, #2]
 8016d00:	b2db      	uxtb	r3, r3
 8016d02:	2b05      	cmp	r3, #5
 8016d04:	f200 80ac 	bhi.w	8016e60 <USBD_GetDescriptor+0x204>
 8016d08:	a201      	add	r2, pc, #4	; (adr r2, 8016d10 <USBD_GetDescriptor+0xb4>)
 8016d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d0e:	bf00      	nop
 8016d10:	08016d29 	.word	0x08016d29
 8016d14:	08016d5d 	.word	0x08016d5d
 8016d18:	08016d91 	.word	0x08016d91
 8016d1c:	08016dc5 	.word	0x08016dc5
 8016d20:	08016df9 	.word	0x08016df9
 8016d24:	08016e2d 	.word	0x08016e2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d2e:	685b      	ldr	r3, [r3, #4]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d00b      	beq.n	8016d4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d3a:	685b      	ldr	r3, [r3, #4]
 8016d3c:	687a      	ldr	r2, [r7, #4]
 8016d3e:	7c12      	ldrb	r2, [r2, #16]
 8016d40:	f107 0108 	add.w	r1, r7, #8
 8016d44:	4610      	mov	r0, r2
 8016d46:	4798      	blx	r3
 8016d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d4a:	e091      	b.n	8016e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d4c:	6839      	ldr	r1, [r7, #0]
 8016d4e:	6878      	ldr	r0, [r7, #4]
 8016d50:	f000 facb 	bl	80172ea <USBD_CtlError>
            err++;
 8016d54:	7afb      	ldrb	r3, [r7, #11]
 8016d56:	3301      	adds	r3, #1
 8016d58:	72fb      	strb	r3, [r7, #11]
          break;
 8016d5a:	e089      	b.n	8016e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d62:	689b      	ldr	r3, [r3, #8]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d00b      	beq.n	8016d80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d6e:	689b      	ldr	r3, [r3, #8]
 8016d70:	687a      	ldr	r2, [r7, #4]
 8016d72:	7c12      	ldrb	r2, [r2, #16]
 8016d74:	f107 0108 	add.w	r1, r7, #8
 8016d78:	4610      	mov	r0, r2
 8016d7a:	4798      	blx	r3
 8016d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d7e:	e077      	b.n	8016e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d80:	6839      	ldr	r1, [r7, #0]
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f000 fab1 	bl	80172ea <USBD_CtlError>
            err++;
 8016d88:	7afb      	ldrb	r3, [r7, #11]
 8016d8a:	3301      	adds	r3, #1
 8016d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8016d8e:	e06f      	b.n	8016e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d96:	68db      	ldr	r3, [r3, #12]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d00b      	beq.n	8016db4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016da2:	68db      	ldr	r3, [r3, #12]
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	7c12      	ldrb	r2, [r2, #16]
 8016da8:	f107 0108 	add.w	r1, r7, #8
 8016dac:	4610      	mov	r0, r2
 8016dae:	4798      	blx	r3
 8016db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016db2:	e05d      	b.n	8016e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016db4:	6839      	ldr	r1, [r7, #0]
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f000 fa97 	bl	80172ea <USBD_CtlError>
            err++;
 8016dbc:	7afb      	ldrb	r3, [r7, #11]
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8016dc2:	e055      	b.n	8016e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dca:	691b      	ldr	r3, [r3, #16]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d00b      	beq.n	8016de8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dd6:	691b      	ldr	r3, [r3, #16]
 8016dd8:	687a      	ldr	r2, [r7, #4]
 8016dda:	7c12      	ldrb	r2, [r2, #16]
 8016ddc:	f107 0108 	add.w	r1, r7, #8
 8016de0:	4610      	mov	r0, r2
 8016de2:	4798      	blx	r3
 8016de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016de6:	e043      	b.n	8016e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016de8:	6839      	ldr	r1, [r7, #0]
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	f000 fa7d 	bl	80172ea <USBD_CtlError>
            err++;
 8016df0:	7afb      	ldrb	r3, [r7, #11]
 8016df2:	3301      	adds	r3, #1
 8016df4:	72fb      	strb	r3, [r7, #11]
          break;
 8016df6:	e03b      	b.n	8016e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016dfe:	695b      	ldr	r3, [r3, #20]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d00b      	beq.n	8016e1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e0a:	695b      	ldr	r3, [r3, #20]
 8016e0c:	687a      	ldr	r2, [r7, #4]
 8016e0e:	7c12      	ldrb	r2, [r2, #16]
 8016e10:	f107 0108 	add.w	r1, r7, #8
 8016e14:	4610      	mov	r0, r2
 8016e16:	4798      	blx	r3
 8016e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e1a:	e029      	b.n	8016e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e1c:	6839      	ldr	r1, [r7, #0]
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f000 fa63 	bl	80172ea <USBD_CtlError>
            err++;
 8016e24:	7afb      	ldrb	r3, [r7, #11]
 8016e26:	3301      	adds	r3, #1
 8016e28:	72fb      	strb	r3, [r7, #11]
          break;
 8016e2a:	e021      	b.n	8016e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e32:	699b      	ldr	r3, [r3, #24]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d00b      	beq.n	8016e50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016e3e:	699b      	ldr	r3, [r3, #24]
 8016e40:	687a      	ldr	r2, [r7, #4]
 8016e42:	7c12      	ldrb	r2, [r2, #16]
 8016e44:	f107 0108 	add.w	r1, r7, #8
 8016e48:	4610      	mov	r0, r2
 8016e4a:	4798      	blx	r3
 8016e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e4e:	e00f      	b.n	8016e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016e50:	6839      	ldr	r1, [r7, #0]
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f000 fa49 	bl	80172ea <USBD_CtlError>
            err++;
 8016e58:	7afb      	ldrb	r3, [r7, #11]
 8016e5a:	3301      	adds	r3, #1
 8016e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8016e5e:	e007      	b.n	8016e70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016e60:	6839      	ldr	r1, [r7, #0]
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 fa41 	bl	80172ea <USBD_CtlError>
          err++;
 8016e68:	7afb      	ldrb	r3, [r7, #11]
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016e6e:	bf00      	nop
      }
      break;
 8016e70:	e037      	b.n	8016ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	7c1b      	ldrb	r3, [r3, #16]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d109      	bne.n	8016e8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e82:	f107 0208 	add.w	r2, r7, #8
 8016e86:	4610      	mov	r0, r2
 8016e88:	4798      	blx	r3
 8016e8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016e8c:	e029      	b.n	8016ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016e8e:	6839      	ldr	r1, [r7, #0]
 8016e90:	6878      	ldr	r0, [r7, #4]
 8016e92:	f000 fa2a 	bl	80172ea <USBD_CtlError>
        err++;
 8016e96:	7afb      	ldrb	r3, [r7, #11]
 8016e98:	3301      	adds	r3, #1
 8016e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8016e9c:	e021      	b.n	8016ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	7c1b      	ldrb	r3, [r3, #16]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d10d      	bne.n	8016ec2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016eae:	f107 0208 	add.w	r2, r7, #8
 8016eb2:	4610      	mov	r0, r2
 8016eb4:	4798      	blx	r3
 8016eb6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	3301      	adds	r3, #1
 8016ebc:	2207      	movs	r2, #7
 8016ebe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016ec0:	e00f      	b.n	8016ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016ec2:	6839      	ldr	r1, [r7, #0]
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f000 fa10 	bl	80172ea <USBD_CtlError>
        err++;
 8016eca:	7afb      	ldrb	r3, [r7, #11]
 8016ecc:	3301      	adds	r3, #1
 8016ece:	72fb      	strb	r3, [r7, #11]
      break;
 8016ed0:	e007      	b.n	8016ee2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016ed2:	6839      	ldr	r1, [r7, #0]
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 fa08 	bl	80172ea <USBD_CtlError>
      err++;
 8016eda:	7afb      	ldrb	r3, [r7, #11]
 8016edc:	3301      	adds	r3, #1
 8016ede:	72fb      	strb	r3, [r7, #11]
      break;
 8016ee0:	bf00      	nop
  }

  if (err != 0U)
 8016ee2:	7afb      	ldrb	r3, [r7, #11]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d11e      	bne.n	8016f26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	88db      	ldrh	r3, [r3, #6]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d016      	beq.n	8016f1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016ef0:	893b      	ldrh	r3, [r7, #8]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d00e      	beq.n	8016f14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	88da      	ldrh	r2, [r3, #6]
 8016efa:	893b      	ldrh	r3, [r7, #8]
 8016efc:	4293      	cmp	r3, r2
 8016efe:	bf28      	it	cs
 8016f00:	4613      	movcs	r3, r2
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016f06:	893b      	ldrh	r3, [r7, #8]
 8016f08:	461a      	mov	r2, r3
 8016f0a:	68f9      	ldr	r1, [r7, #12]
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f000 fa5d 	bl	80173cc <USBD_CtlSendData>
 8016f12:	e009      	b.n	8016f28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016f14:	6839      	ldr	r1, [r7, #0]
 8016f16:	6878      	ldr	r0, [r7, #4]
 8016f18:	f000 f9e7 	bl	80172ea <USBD_CtlError>
 8016f1c:	e004      	b.n	8016f28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f000 faae 	bl	8017480 <USBD_CtlSendStatus>
 8016f24:	e000      	b.n	8016f28 <USBD_GetDescriptor+0x2cc>
    return;
 8016f26:	bf00      	nop
  }
}
 8016f28:	3710      	adds	r7, #16
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop

08016f30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b084      	sub	sp, #16
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	889b      	ldrh	r3, [r3, #4]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d131      	bne.n	8016fa6 <USBD_SetAddress+0x76>
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	88db      	ldrh	r3, [r3, #6]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d12d      	bne.n	8016fa6 <USBD_SetAddress+0x76>
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	885b      	ldrh	r3, [r3, #2]
 8016f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8016f50:	d829      	bhi.n	8016fa6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	885b      	ldrh	r3, [r3, #2]
 8016f56:	b2db      	uxtb	r3, r3
 8016f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	2b03      	cmp	r3, #3
 8016f68:	d104      	bne.n	8016f74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016f6a:	6839      	ldr	r1, [r7, #0]
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f000 f9bc 	bl	80172ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f72:	e01d      	b.n	8016fb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	7bfa      	ldrb	r2, [r7, #15]
 8016f78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016f7c:	7bfb      	ldrb	r3, [r7, #15]
 8016f7e:	4619      	mov	r1, r3
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f004 f93b 	bl	801b1fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f000 fa7a 	bl	8017480 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016f8c:	7bfb      	ldrb	r3, [r7, #15]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d004      	beq.n	8016f9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2202      	movs	r2, #2
 8016f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f9a:	e009      	b.n	8016fb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2201      	movs	r2, #1
 8016fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fa4:	e004      	b.n	8016fb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016fa6:	6839      	ldr	r1, [r7, #0]
 8016fa8:	6878      	ldr	r0, [r7, #4]
 8016faa:	f000 f99e 	bl	80172ea <USBD_CtlError>
  }
}
 8016fae:	bf00      	nop
 8016fb0:	bf00      	nop
 8016fb2:	3710      	adds	r7, #16
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bd80      	pop	{r7, pc}

08016fb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b084      	sub	sp, #16
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 8016fc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	885b      	ldrh	r3, [r3, #2]
 8016fca:	b2da      	uxtb	r2, r3
 8016fcc:	4b4e      	ldr	r3, [pc, #312]	; (8017108 <USBD_SetConfig+0x150>)
 8016fce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016fd0:	4b4d      	ldr	r3, [pc, #308]	; (8017108 <USBD_SetConfig+0x150>)
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	2b01      	cmp	r3, #1
 8016fd6:	d905      	bls.n	8016fe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016fd8:	6839      	ldr	r1, [r7, #0]
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f000 f985 	bl	80172ea <USBD_CtlError>
    return USBD_FAIL;
 8016fe0:	2303      	movs	r3, #3
 8016fe2:	e08c      	b.n	80170fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	2b02      	cmp	r3, #2
 8016fee:	d002      	beq.n	8016ff6 <USBD_SetConfig+0x3e>
 8016ff0:	2b03      	cmp	r3, #3
 8016ff2:	d029      	beq.n	8017048 <USBD_SetConfig+0x90>
 8016ff4:	e075      	b.n	80170e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016ff6:	4b44      	ldr	r3, [pc, #272]	; (8017108 <USBD_SetConfig+0x150>)
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d020      	beq.n	8017040 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016ffe:	4b42      	ldr	r3, [pc, #264]	; (8017108 <USBD_SetConfig+0x150>)
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	461a      	mov	r2, r3
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017008:	4b3f      	ldr	r3, [pc, #252]	; (8017108 <USBD_SetConfig+0x150>)
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	4619      	mov	r1, r3
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f7fe ffe7 	bl	8015fe2 <USBD_SetClassConfig>
 8017014:	4603      	mov	r3, r0
 8017016:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017018:	7bfb      	ldrb	r3, [r7, #15]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d008      	beq.n	8017030 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801701e:	6839      	ldr	r1, [r7, #0]
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f000 f962 	bl	80172ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	2202      	movs	r2, #2
 801702a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801702e:	e065      	b.n	80170fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f000 fa25 	bl	8017480 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2203      	movs	r2, #3
 801703a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801703e:	e05d      	b.n	80170fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f000 fa1d 	bl	8017480 <USBD_CtlSendStatus>
      break;
 8017046:	e059      	b.n	80170fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017048:	4b2f      	ldr	r3, [pc, #188]	; (8017108 <USBD_SetConfig+0x150>)
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d112      	bne.n	8017076 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2202      	movs	r2, #2
 8017054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017058:	4b2b      	ldr	r3, [pc, #172]	; (8017108 <USBD_SetConfig+0x150>)
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	461a      	mov	r2, r3
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017062:	4b29      	ldr	r3, [pc, #164]	; (8017108 <USBD_SetConfig+0x150>)
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	4619      	mov	r1, r3
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7fe ffd6 	bl	801601a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801706e:	6878      	ldr	r0, [r7, #4]
 8017070:	f000 fa06 	bl	8017480 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017074:	e042      	b.n	80170fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017076:	4b24      	ldr	r3, [pc, #144]	; (8017108 <USBD_SetConfig+0x150>)
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	461a      	mov	r2, r3
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	429a      	cmp	r2, r3
 8017082:	d02a      	beq.n	80170da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	b2db      	uxtb	r3, r3
 801708a:	4619      	mov	r1, r3
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f7fe ffc4 	bl	801601a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017092:	4b1d      	ldr	r3, [pc, #116]	; (8017108 <USBD_SetConfig+0x150>)
 8017094:	781b      	ldrb	r3, [r3, #0]
 8017096:	461a      	mov	r2, r3
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801709c:	4b1a      	ldr	r3, [pc, #104]	; (8017108 <USBD_SetConfig+0x150>)
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	4619      	mov	r1, r3
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f7fe ff9d 	bl	8015fe2 <USBD_SetClassConfig>
 80170a8:	4603      	mov	r3, r0
 80170aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80170ac:	7bfb      	ldrb	r3, [r7, #15]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d00f      	beq.n	80170d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80170b2:	6839      	ldr	r1, [r7, #0]
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f000 f918 	bl	80172ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	b2db      	uxtb	r3, r3
 80170c0:	4619      	mov	r1, r3
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f7fe ffa9 	bl	801601a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2202      	movs	r2, #2
 80170cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80170d0:	e014      	b.n	80170fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80170d2:	6878      	ldr	r0, [r7, #4]
 80170d4:	f000 f9d4 	bl	8017480 <USBD_CtlSendStatus>
      break;
 80170d8:	e010      	b.n	80170fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80170da:	6878      	ldr	r0, [r7, #4]
 80170dc:	f000 f9d0 	bl	8017480 <USBD_CtlSendStatus>
      break;
 80170e0:	e00c      	b.n	80170fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80170e2:	6839      	ldr	r1, [r7, #0]
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f000 f900 	bl	80172ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80170ea:	4b07      	ldr	r3, [pc, #28]	; (8017108 <USBD_SetConfig+0x150>)
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	4619      	mov	r1, r3
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	f7fe ff92 	bl	801601a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80170f6:	2303      	movs	r3, #3
 80170f8:	73fb      	strb	r3, [r7, #15]
      break;
 80170fa:	bf00      	nop
  }

  return ret;
 80170fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3710      	adds	r7, #16
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}
 8017106:	bf00      	nop
 8017108:	200035d0 	.word	0x200035d0

0801710c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b082      	sub	sp, #8
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	88db      	ldrh	r3, [r3, #6]
 801711a:	2b01      	cmp	r3, #1
 801711c:	d004      	beq.n	8017128 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801711e:	6839      	ldr	r1, [r7, #0]
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f000 f8e2 	bl	80172ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017126:	e023      	b.n	8017170 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801712e:	b2db      	uxtb	r3, r3
 8017130:	2b02      	cmp	r3, #2
 8017132:	dc02      	bgt.n	801713a <USBD_GetConfig+0x2e>
 8017134:	2b00      	cmp	r3, #0
 8017136:	dc03      	bgt.n	8017140 <USBD_GetConfig+0x34>
 8017138:	e015      	b.n	8017166 <USBD_GetConfig+0x5a>
 801713a:	2b03      	cmp	r3, #3
 801713c:	d00b      	beq.n	8017156 <USBD_GetConfig+0x4a>
 801713e:	e012      	b.n	8017166 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2200      	movs	r2, #0
 8017144:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	3308      	adds	r3, #8
 801714a:	2201      	movs	r2, #1
 801714c:	4619      	mov	r1, r3
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 f93c 	bl	80173cc <USBD_CtlSendData>
        break;
 8017154:	e00c      	b.n	8017170 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	3304      	adds	r3, #4
 801715a:	2201      	movs	r2, #1
 801715c:	4619      	mov	r1, r3
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f000 f934 	bl	80173cc <USBD_CtlSendData>
        break;
 8017164:	e004      	b.n	8017170 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017166:	6839      	ldr	r1, [r7, #0]
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f000 f8be 	bl	80172ea <USBD_CtlError>
        break;
 801716e:	bf00      	nop
}
 8017170:	bf00      	nop
 8017172:	3708      	adds	r7, #8
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}

08017178 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b082      	sub	sp, #8
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017188:	b2db      	uxtb	r3, r3
 801718a:	3b01      	subs	r3, #1
 801718c:	2b02      	cmp	r3, #2
 801718e:	d81e      	bhi.n	80171ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	88db      	ldrh	r3, [r3, #6]
 8017194:	2b02      	cmp	r3, #2
 8017196:	d004      	beq.n	80171a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017198:	6839      	ldr	r1, [r7, #0]
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f000 f8a5 	bl	80172ea <USBD_CtlError>
        break;
 80171a0:	e01a      	b.n	80171d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2201      	movs	r2, #1
 80171a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d005      	beq.n	80171be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	f043 0202 	orr.w	r2, r3, #2
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	330c      	adds	r3, #12
 80171c2:	2202      	movs	r2, #2
 80171c4:	4619      	mov	r1, r3
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f000 f900 	bl	80173cc <USBD_CtlSendData>
      break;
 80171cc:	e004      	b.n	80171d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80171ce:	6839      	ldr	r1, [r7, #0]
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f000 f88a 	bl	80172ea <USBD_CtlError>
      break;
 80171d6:	bf00      	nop
  }
}
 80171d8:	bf00      	nop
 80171da:	3708      	adds	r7, #8
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}

080171e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b082      	sub	sp, #8
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	885b      	ldrh	r3, [r3, #2]
 80171ee:	2b01      	cmp	r3, #1
 80171f0:	d107      	bne.n	8017202 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	2201      	movs	r2, #1
 80171f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 f940 	bl	8017480 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017200:	e013      	b.n	801722a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	885b      	ldrh	r3, [r3, #2]
 8017206:	2b02      	cmp	r3, #2
 8017208:	d10b      	bne.n	8017222 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	889b      	ldrh	r3, [r3, #4]
 801720e:	0a1b      	lsrs	r3, r3, #8
 8017210:	b29b      	uxth	r3, r3
 8017212:	b2da      	uxtb	r2, r3
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f000 f930 	bl	8017480 <USBD_CtlSendStatus>
}
 8017220:	e003      	b.n	801722a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017222:	6839      	ldr	r1, [r7, #0]
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f000 f860 	bl	80172ea <USBD_CtlError>
}
 801722a:	bf00      	nop
 801722c:	3708      	adds	r7, #8
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}

08017232 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017232:	b580      	push	{r7, lr}
 8017234:	b082      	sub	sp, #8
 8017236:	af00      	add	r7, sp, #0
 8017238:	6078      	str	r0, [r7, #4]
 801723a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017242:	b2db      	uxtb	r3, r3
 8017244:	3b01      	subs	r3, #1
 8017246:	2b02      	cmp	r3, #2
 8017248:	d80b      	bhi.n	8017262 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	885b      	ldrh	r3, [r3, #2]
 801724e:	2b01      	cmp	r3, #1
 8017250:	d10c      	bne.n	801726c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2200      	movs	r2, #0
 8017256:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f000 f910 	bl	8017480 <USBD_CtlSendStatus>
      }
      break;
 8017260:	e004      	b.n	801726c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017262:	6839      	ldr	r1, [r7, #0]
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f000 f840 	bl	80172ea <USBD_CtlError>
      break;
 801726a:	e000      	b.n	801726e <USBD_ClrFeature+0x3c>
      break;
 801726c:	bf00      	nop
  }
}
 801726e:	bf00      	nop
 8017270:	3708      	adds	r7, #8
 8017272:	46bd      	mov	sp, r7
 8017274:	bd80      	pop	{r7, pc}

08017276 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017276:	b580      	push	{r7, lr}
 8017278:	b084      	sub	sp, #16
 801727a:	af00      	add	r7, sp, #0
 801727c:	6078      	str	r0, [r7, #4]
 801727e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	781a      	ldrb	r2, [r3, #0]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	3301      	adds	r3, #1
 8017290:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	781a      	ldrb	r2, [r3, #0]
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	3301      	adds	r3, #1
 801729e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80172a0:	68f8      	ldr	r0, [r7, #12]
 80172a2:	f7ff fa41 	bl	8016728 <SWAPBYTE>
 80172a6:	4603      	mov	r3, r0
 80172a8:	461a      	mov	r2, r3
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	3301      	adds	r3, #1
 80172b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	3301      	adds	r3, #1
 80172b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80172ba:	68f8      	ldr	r0, [r7, #12]
 80172bc:	f7ff fa34 	bl	8016728 <SWAPBYTE>
 80172c0:	4603      	mov	r3, r0
 80172c2:	461a      	mov	r2, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	3301      	adds	r3, #1
 80172cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	3301      	adds	r3, #1
 80172d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f7ff fa27 	bl	8016728 <SWAPBYTE>
 80172da:	4603      	mov	r3, r0
 80172dc:	461a      	mov	r2, r3
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	80da      	strh	r2, [r3, #6]
}
 80172e2:	bf00      	nop
 80172e4:	3710      	adds	r7, #16
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}

080172ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172ea:	b580      	push	{r7, lr}
 80172ec:	b082      	sub	sp, #8
 80172ee:	af00      	add	r7, sp, #0
 80172f0:	6078      	str	r0, [r7, #4]
 80172f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80172f4:	2180      	movs	r1, #128	; 0x80
 80172f6:	6878      	ldr	r0, [r7, #4]
 80172f8:	f003 ff16 	bl	801b128 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80172fc:	2100      	movs	r1, #0
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f003 ff12 	bl	801b128 <USBD_LL_StallEP>
}
 8017304:	bf00      	nop
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}

0801730c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b086      	sub	sp, #24
 8017310:	af00      	add	r7, sp, #0
 8017312:	60f8      	str	r0, [r7, #12]
 8017314:	60b9      	str	r1, [r7, #8]
 8017316:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017318:	2300      	movs	r3, #0
 801731a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d036      	beq.n	8017390 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017326:	6938      	ldr	r0, [r7, #16]
 8017328:	f000 f836 	bl	8017398 <USBD_GetLen>
 801732c:	4603      	mov	r3, r0
 801732e:	3301      	adds	r3, #1
 8017330:	b29b      	uxth	r3, r3
 8017332:	005b      	lsls	r3, r3, #1
 8017334:	b29a      	uxth	r2, r3
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801733a:	7dfb      	ldrb	r3, [r7, #23]
 801733c:	68ba      	ldr	r2, [r7, #8]
 801733e:	4413      	add	r3, r2
 8017340:	687a      	ldr	r2, [r7, #4]
 8017342:	7812      	ldrb	r2, [r2, #0]
 8017344:	701a      	strb	r2, [r3, #0]
  idx++;
 8017346:	7dfb      	ldrb	r3, [r7, #23]
 8017348:	3301      	adds	r3, #1
 801734a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801734c:	7dfb      	ldrb	r3, [r7, #23]
 801734e:	68ba      	ldr	r2, [r7, #8]
 8017350:	4413      	add	r3, r2
 8017352:	2203      	movs	r2, #3
 8017354:	701a      	strb	r2, [r3, #0]
  idx++;
 8017356:	7dfb      	ldrb	r3, [r7, #23]
 8017358:	3301      	adds	r3, #1
 801735a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801735c:	e013      	b.n	8017386 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801735e:	7dfb      	ldrb	r3, [r7, #23]
 8017360:	68ba      	ldr	r2, [r7, #8]
 8017362:	4413      	add	r3, r2
 8017364:	693a      	ldr	r2, [r7, #16]
 8017366:	7812      	ldrb	r2, [r2, #0]
 8017368:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801736a:	693b      	ldr	r3, [r7, #16]
 801736c:	3301      	adds	r3, #1
 801736e:	613b      	str	r3, [r7, #16]
    idx++;
 8017370:	7dfb      	ldrb	r3, [r7, #23]
 8017372:	3301      	adds	r3, #1
 8017374:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017376:	7dfb      	ldrb	r3, [r7, #23]
 8017378:	68ba      	ldr	r2, [r7, #8]
 801737a:	4413      	add	r3, r2
 801737c:	2200      	movs	r2, #0
 801737e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017380:	7dfb      	ldrb	r3, [r7, #23]
 8017382:	3301      	adds	r3, #1
 8017384:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017386:	693b      	ldr	r3, [r7, #16]
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d1e7      	bne.n	801735e <USBD_GetString+0x52>
 801738e:	e000      	b.n	8017392 <USBD_GetString+0x86>
    return;
 8017390:	bf00      	nop
  }
}
 8017392:	3718      	adds	r7, #24
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017398:	b480      	push	{r7}
 801739a:	b085      	sub	sp, #20
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80173a0:	2300      	movs	r3, #0
 80173a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80173a8:	e005      	b.n	80173b6 <USBD_GetLen+0x1e>
  {
    len++;
 80173aa:	7bfb      	ldrb	r3, [r7, #15]
 80173ac:	3301      	adds	r3, #1
 80173ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	3301      	adds	r3, #1
 80173b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d1f5      	bne.n	80173aa <USBD_GetLen+0x12>
  }

  return len;
 80173be:	7bfb      	ldrb	r3, [r7, #15]
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3714      	adds	r7, #20
 80173c4:	46bd      	mov	sp, r7
 80173c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ca:	4770      	bx	lr

080173cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b084      	sub	sp, #16
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	2202      	movs	r2, #2
 80173dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	687a      	ldr	r2, [r7, #4]
 80173e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	687a      	ldr	r2, [r7, #4]
 80173ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	68ba      	ldr	r2, [r7, #8]
 80173f0:	2100      	movs	r1, #0
 80173f2:	68f8      	ldr	r0, [r7, #12]
 80173f4:	f003 ff21 	bl	801b23a <USBD_LL_Transmit>

  return USBD_OK;
 80173f8:	2300      	movs	r3, #0
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3710      	adds	r7, #16
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}

08017402 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017402:	b580      	push	{r7, lr}
 8017404:	b084      	sub	sp, #16
 8017406:	af00      	add	r7, sp, #0
 8017408:	60f8      	str	r0, [r7, #12]
 801740a:	60b9      	str	r1, [r7, #8]
 801740c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	2100      	movs	r1, #0
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	f003 ff10 	bl	801b23a <USBD_LL_Transmit>

  return USBD_OK;
 801741a:	2300      	movs	r3, #0
}
 801741c:	4618      	mov	r0, r3
 801741e:	3710      	adds	r7, #16
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b084      	sub	sp, #16
 8017428:	af00      	add	r7, sp, #0
 801742a:	60f8      	str	r0, [r7, #12]
 801742c:	60b9      	str	r1, [r7, #8]
 801742e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	2203      	movs	r2, #3
 8017434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	68ba      	ldr	r2, [r7, #8]
 801744c:	2100      	movs	r1, #0
 801744e:	68f8      	ldr	r0, [r7, #12]
 8017450:	f003 ff14 	bl	801b27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017454:	2300      	movs	r3, #0
}
 8017456:	4618      	mov	r0, r3
 8017458:	3710      	adds	r7, #16
 801745a:	46bd      	mov	sp, r7
 801745c:	bd80      	pop	{r7, pc}

0801745e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801745e:	b580      	push	{r7, lr}
 8017460:	b084      	sub	sp, #16
 8017462:	af00      	add	r7, sp, #0
 8017464:	60f8      	str	r0, [r7, #12]
 8017466:	60b9      	str	r1, [r7, #8]
 8017468:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	68ba      	ldr	r2, [r7, #8]
 801746e:	2100      	movs	r1, #0
 8017470:	68f8      	ldr	r0, [r7, #12]
 8017472:	f003 ff03 	bl	801b27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017476:	2300      	movs	r3, #0
}
 8017478:	4618      	mov	r0, r3
 801747a:	3710      	adds	r7, #16
 801747c:	46bd      	mov	sp, r7
 801747e:	bd80      	pop	{r7, pc}

08017480 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b082      	sub	sp, #8
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	2204      	movs	r2, #4
 801748c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017490:	2300      	movs	r3, #0
 8017492:	2200      	movs	r2, #0
 8017494:	2100      	movs	r1, #0
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f003 fecf 	bl	801b23a <USBD_LL_Transmit>

  return USBD_OK;
 801749c:	2300      	movs	r3, #0
}
 801749e:	4618      	mov	r0, r3
 80174a0:	3708      	adds	r7, #8
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}

080174a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80174a6:	b580      	push	{r7, lr}
 80174a8:	b082      	sub	sp, #8
 80174aa:	af00      	add	r7, sp, #0
 80174ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2205      	movs	r2, #5
 80174b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80174b6:	2300      	movs	r3, #0
 80174b8:	2200      	movs	r2, #0
 80174ba:	2100      	movs	r1, #0
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f003 fedd 	bl	801b27c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80174c2:	2300      	movs	r3, #0
}
 80174c4:	4618      	mov	r0, r3
 80174c6:	3708      	adds	r7, #8
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b085      	sub	sp, #20
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80174d6:	2300      	movs	r3, #0
 80174d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80174da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174de:	2b84      	cmp	r3, #132	; 0x84
 80174e0:	d005      	beq.n	80174ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80174e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	4413      	add	r3, r2
 80174ea:	3303      	adds	r3, #3
 80174ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80174ee:	68fb      	ldr	r3, [r7, #12]
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3714      	adds	r7, #20
 80174f4:	46bd      	mov	sp, r7
 80174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fa:	4770      	bx	lr

080174fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017500:	f001 fb24 	bl	8018b4c <vTaskStartScheduler>
  
  return osOK;
 8017504:	2300      	movs	r3, #0
}
 8017506:	4618      	mov	r0, r3
 8017508:	bd80      	pop	{r7, pc}

0801750a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801750a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801750c:	b089      	sub	sp, #36	; 0x24
 801750e:	af04      	add	r7, sp, #16
 8017510:	6078      	str	r0, [r7, #4]
 8017512:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	695b      	ldr	r3, [r3, #20]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d020      	beq.n	801755e <osThreadCreate+0x54>
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	699b      	ldr	r3, [r3, #24]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d01c      	beq.n	801755e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	685c      	ldr	r4, [r3, #4]
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	681d      	ldr	r5, [r3, #0]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	691e      	ldr	r6, [r3, #16]
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017536:	4618      	mov	r0, r3
 8017538:	f7ff ffc8 	bl	80174cc <makeFreeRtosPriority>
 801753c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	695b      	ldr	r3, [r3, #20]
 8017542:	687a      	ldr	r2, [r7, #4]
 8017544:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017546:	9202      	str	r2, [sp, #8]
 8017548:	9301      	str	r3, [sp, #4]
 801754a:	9100      	str	r1, [sp, #0]
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	4632      	mov	r2, r6
 8017550:	4629      	mov	r1, r5
 8017552:	4620      	mov	r0, r4
 8017554:	f001 f88e 	bl	8018674 <xTaskCreateStatic>
 8017558:	4603      	mov	r3, r0
 801755a:	60fb      	str	r3, [r7, #12]
 801755c:	e01c      	b.n	8017598 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	685c      	ldr	r4, [r3, #4]
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801756a:	b29e      	uxth	r6, r3
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017572:	4618      	mov	r0, r3
 8017574:	f7ff ffaa 	bl	80174cc <makeFreeRtosPriority>
 8017578:	4602      	mov	r2, r0
 801757a:	f107 030c 	add.w	r3, r7, #12
 801757e:	9301      	str	r3, [sp, #4]
 8017580:	9200      	str	r2, [sp, #0]
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	4632      	mov	r2, r6
 8017586:	4629      	mov	r1, r5
 8017588:	4620      	mov	r0, r4
 801758a:	f001 f8d0 	bl	801872e <xTaskCreate>
 801758e:	4603      	mov	r3, r0
 8017590:	2b01      	cmp	r3, #1
 8017592:	d001      	beq.n	8017598 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8017594:	2300      	movs	r3, #0
 8017596:	e000      	b.n	801759a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8017598:	68fb      	ldr	r3, [r7, #12]
}
 801759a:	4618      	mov	r0, r3
 801759c:	3714      	adds	r7, #20
 801759e:	46bd      	mov	sp, r7
 80175a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80175a2:	b580      	push	{r7, lr}
 80175a4:	b084      	sub	sp, #16
 80175a6:	af00      	add	r7, sp, #0
 80175a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d001      	beq.n	80175b8 <osDelay+0x16>
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	e000      	b.n	80175ba <osDelay+0x18>
 80175b8:	2301      	movs	r3, #1
 80175ba:	4618      	mov	r0, r3
 80175bc:	f001 fa92 	bl	8018ae4 <vTaskDelay>
  
  return osOK;
 80175c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80175c2:	4618      	mov	r0, r3
 80175c4:	3710      	adds	r7, #16
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}

080175ca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80175ca:	b580      	push	{r7, lr}
 80175cc:	b082      	sub	sp, #8
 80175ce:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80175d0:	2020      	movs	r0, #32
 80175d2:	f002 ff99 	bl	801a508 <pvPortMalloc>
 80175d6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d00a      	beq.n	80175f4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2200      	movs	r2, #0
 80175e2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	3304      	adds	r3, #4
 80175e8:	4618      	mov	r0, r3
 80175ea:	f000 f9dd 	bl	80179a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2200      	movs	r2, #0
 80175f2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80175f4:	687b      	ldr	r3, [r7, #4]
	}
 80175f6:	4618      	mov	r0, r3
 80175f8:	3708      	adds	r7, #8
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}
	...

08017600 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b090      	sub	sp, #64	; 0x40
 8017604:	af00      	add	r7, sp, #0
 8017606:	60f8      	str	r0, [r7, #12]
 8017608:	60b9      	str	r1, [r7, #8]
 801760a:	607a      	str	r2, [r7, #4]
 801760c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017612:	2300      	movs	r3, #0
 8017614:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8017616:	2300      	movs	r3, #0
 8017618:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d10a      	bne.n	8017636 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017624:	f383 8811 	msr	BASEPRI, r3
 8017628:	f3bf 8f6f 	isb	sy
 801762c:	f3bf 8f4f 	dsb	sy
 8017630:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017632:	bf00      	nop
 8017634:	e7fe      	b.n	8017634 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801763c:	2b00      	cmp	r3, #0
 801763e:	d00a      	beq.n	8017656 <xEventGroupWaitBits+0x56>
	__asm volatile
 8017640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017644:	f383 8811 	msr	BASEPRI, r3
 8017648:	f3bf 8f6f 	isb	sy
 801764c:	f3bf 8f4f 	dsb	sy
 8017650:	61fb      	str	r3, [r7, #28]
}
 8017652:	bf00      	nop
 8017654:	e7fe      	b.n	8017654 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d10a      	bne.n	8017672 <xEventGroupWaitBits+0x72>
	__asm volatile
 801765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017660:	f383 8811 	msr	BASEPRI, r3
 8017664:	f3bf 8f6f 	isb	sy
 8017668:	f3bf 8f4f 	dsb	sy
 801766c:	61bb      	str	r3, [r7, #24]
}
 801766e:	bf00      	nop
 8017670:	e7fe      	b.n	8017670 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017672:	f001 ff8b 	bl	801958c <xTaskGetSchedulerState>
 8017676:	4603      	mov	r3, r0
 8017678:	2b00      	cmp	r3, #0
 801767a:	d102      	bne.n	8017682 <xEventGroupWaitBits+0x82>
 801767c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801767e:	2b00      	cmp	r3, #0
 8017680:	d101      	bne.n	8017686 <xEventGroupWaitBits+0x86>
 8017682:	2301      	movs	r3, #1
 8017684:	e000      	b.n	8017688 <xEventGroupWaitBits+0x88>
 8017686:	2300      	movs	r3, #0
 8017688:	2b00      	cmp	r3, #0
 801768a:	d10a      	bne.n	80176a2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017690:	f383 8811 	msr	BASEPRI, r3
 8017694:	f3bf 8f6f 	isb	sy
 8017698:	f3bf 8f4f 	dsb	sy
 801769c:	617b      	str	r3, [r7, #20]
}
 801769e:	bf00      	nop
 80176a0:	e7fe      	b.n	80176a0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80176a2:	f001 fac5 	bl	8018c30 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80176a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80176ac:	683a      	ldr	r2, [r7, #0]
 80176ae:	68b9      	ldr	r1, [r7, #8]
 80176b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176b2:	f000 f943 	bl	801793c <prvTestWaitCondition>
 80176b6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80176b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d00e      	beq.n	80176dc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80176be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80176c2:	2300      	movs	r3, #0
 80176c4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d028      	beq.n	801771e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80176cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176ce:	681a      	ldr	r2, [r3, #0]
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	43db      	mvns	r3, r3
 80176d4:	401a      	ands	r2, r3
 80176d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176d8:	601a      	str	r2, [r3, #0]
 80176da:	e020      	b.n	801771e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80176dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d104      	bne.n	80176ec <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80176e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176e4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80176e6:	2301      	movs	r3, #1
 80176e8:	633b      	str	r3, [r7, #48]	; 0x30
 80176ea:	e018      	b.n	801771e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d003      	beq.n	80176fa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80176f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80176f8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d003      	beq.n	8017708 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017706:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801770a:	1d18      	adds	r0, r3, #4
 801770c:	68ba      	ldr	r2, [r7, #8]
 801770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017710:	4313      	orrs	r3, r2
 8017712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017714:	4619      	mov	r1, r3
 8017716:	f001 fcaf 	bl	8019078 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801771a:	2300      	movs	r3, #0
 801771c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801771e:	f001 fa95 	bl	8018c4c <xTaskResumeAll>
 8017722:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017726:	2b00      	cmp	r3, #0
 8017728:	d031      	beq.n	801778e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801772c:	2b00      	cmp	r3, #0
 801772e:	d107      	bne.n	8017740 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017730:	4b19      	ldr	r3, [pc, #100]	; (8017798 <xEventGroupWaitBits+0x198>)
 8017732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017736:	601a      	str	r2, [r3, #0]
 8017738:	f3bf 8f4f 	dsb	sy
 801773c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017740:	f001 ffc8 	bl	80196d4 <uxTaskResetEventItemValue>
 8017744:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8017746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801774c:	2b00      	cmp	r3, #0
 801774e:	d11a      	bne.n	8017786 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017750:	f002 fdb8 	bl	801a2c4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801775a:	683a      	ldr	r2, [r7, #0]
 801775c:	68b9      	ldr	r1, [r7, #8]
 801775e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017760:	f000 f8ec 	bl	801793c <prvTestWaitCondition>
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	d009      	beq.n	801777e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d006      	beq.n	801777e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017772:	681a      	ldr	r2, [r3, #0]
 8017774:	68bb      	ldr	r3, [r7, #8]
 8017776:	43db      	mvns	r3, r3
 8017778:	401a      	ands	r2, r3
 801777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801777c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801777e:	2301      	movs	r3, #1
 8017780:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017782:	f002 fdcf 	bl	801a324 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801778c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801778e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017790:	4618      	mov	r0, r3
 8017792:	3740      	adds	r7, #64	; 0x40
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}
 8017798:	e000ed04 	.word	0xe000ed04

0801779c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b086      	sub	sp, #24
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
 80177a4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d10a      	bne.n	80177c6 <xEventGroupClearBits+0x2a>
	__asm volatile
 80177b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177b4:	f383 8811 	msr	BASEPRI, r3
 80177b8:	f3bf 8f6f 	isb	sy
 80177bc:	f3bf 8f4f 	dsb	sy
 80177c0:	60fb      	str	r3, [r7, #12]
}
 80177c2:	bf00      	nop
 80177c4:	e7fe      	b.n	80177c4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80177c6:	683b      	ldr	r3, [r7, #0]
 80177c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d00a      	beq.n	80177e6 <xEventGroupClearBits+0x4a>
	__asm volatile
 80177d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177d4:	f383 8811 	msr	BASEPRI, r3
 80177d8:	f3bf 8f6f 	isb	sy
 80177dc:	f3bf 8f4f 	dsb	sy
 80177e0:	60bb      	str	r3, [r7, #8]
}
 80177e2:	bf00      	nop
 80177e4:	e7fe      	b.n	80177e4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80177e6:	f002 fd6d 	bl	801a2c4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80177ea:	697b      	ldr	r3, [r7, #20]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80177f0:	697b      	ldr	r3, [r7, #20]
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	683b      	ldr	r3, [r7, #0]
 80177f6:	43db      	mvns	r3, r3
 80177f8:	401a      	ands	r2, r3
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80177fe:	f002 fd91 	bl	801a324 <vPortExitCritical>

	return uxReturn;
 8017802:	693b      	ldr	r3, [r7, #16]
}
 8017804:	4618      	mov	r0, r3
 8017806:	3718      	adds	r7, #24
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b08e      	sub	sp, #56	; 0x38
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017816:	2300      	movs	r3, #0
 8017818:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801781e:	2300      	movs	r3, #0
 8017820:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d10a      	bne.n	801783e <xEventGroupSetBits+0x32>
	__asm volatile
 8017828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801782c:	f383 8811 	msr	BASEPRI, r3
 8017830:	f3bf 8f6f 	isb	sy
 8017834:	f3bf 8f4f 	dsb	sy
 8017838:	613b      	str	r3, [r7, #16]
}
 801783a:	bf00      	nop
 801783c:	e7fe      	b.n	801783c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017844:	2b00      	cmp	r3, #0
 8017846:	d00a      	beq.n	801785e <xEventGroupSetBits+0x52>
	__asm volatile
 8017848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801784c:	f383 8811 	msr	BASEPRI, r3
 8017850:	f3bf 8f6f 	isb	sy
 8017854:	f3bf 8f4f 	dsb	sy
 8017858:	60fb      	str	r3, [r7, #12]
}
 801785a:	bf00      	nop
 801785c:	e7fe      	b.n	801785c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017860:	3304      	adds	r3, #4
 8017862:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017866:	3308      	adds	r3, #8
 8017868:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801786a:	f001 f9e1 	bl	8018c30 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017876:	681a      	ldr	r2, [r3, #0]
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	431a      	orrs	r2, r3
 801787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017880:	e03c      	b.n	80178fc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017884:	685b      	ldr	r3, [r3, #4]
 8017886:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801788e:	2300      	movs	r3, #0
 8017890:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017892:	69bb      	ldr	r3, [r7, #24]
 8017894:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017898:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801789a:	69bb      	ldr	r3, [r7, #24]
 801789c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80178a0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80178a2:	697b      	ldr	r3, [r7, #20]
 80178a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d108      	bne.n	80178be <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80178ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	69bb      	ldr	r3, [r7, #24]
 80178b2:	4013      	ands	r3, r2
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d00b      	beq.n	80178d0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80178b8:	2301      	movs	r3, #1
 80178ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80178bc:	e008      	b.n	80178d0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80178be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	69bb      	ldr	r3, [r7, #24]
 80178c4:	4013      	ands	r3, r2
 80178c6:	69ba      	ldr	r2, [r7, #24]
 80178c8:	429a      	cmp	r2, r3
 80178ca:	d101      	bne.n	80178d0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80178cc:	2301      	movs	r3, #1
 80178ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80178d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d010      	beq.n	80178f8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80178d6:	697b      	ldr	r3, [r7, #20]
 80178d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d003      	beq.n	80178e8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80178e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	4313      	orrs	r3, r2
 80178e6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80178e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80178f0:	4619      	mov	r1, r3
 80178f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80178f4:	f001 fc8a 	bl	801920c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80178f8:	69fb      	ldr	r3, [r7, #28]
 80178fa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80178fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178fe:	6a3b      	ldr	r3, [r7, #32]
 8017900:	429a      	cmp	r2, r3
 8017902:	d1be      	bne.n	8017882 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017906:	681a      	ldr	r2, [r3, #0]
 8017908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801790a:	43db      	mvns	r3, r3
 801790c:	401a      	ands	r2, r3
 801790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017910:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017912:	f001 f99b 	bl	8018c4c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017918:	681b      	ldr	r3, [r3, #0]
}
 801791a:	4618      	mov	r0, r3
 801791c:	3738      	adds	r7, #56	; 0x38
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}

08017922 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017922:	b580      	push	{r7, lr}
 8017924:	b082      	sub	sp, #8
 8017926:	af00      	add	r7, sp, #0
 8017928:	6078      	str	r0, [r7, #4]
 801792a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801792c:	6839      	ldr	r1, [r7, #0]
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f7ff ff6c 	bl	801780c <xEventGroupSetBits>
}
 8017934:	bf00      	nop
 8017936:	3708      	adds	r7, #8
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}

0801793c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801793c:	b480      	push	{r7}
 801793e:	b087      	sub	sp, #28
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017948:	2300      	movs	r3, #0
 801794a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d107      	bne.n	8017962 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017952:	68fa      	ldr	r2, [r7, #12]
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	4013      	ands	r3, r2
 8017958:	2b00      	cmp	r3, #0
 801795a:	d00a      	beq.n	8017972 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801795c:	2301      	movs	r3, #1
 801795e:	617b      	str	r3, [r7, #20]
 8017960:	e007      	b.n	8017972 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017962:	68fa      	ldr	r2, [r7, #12]
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	4013      	ands	r3, r2
 8017968:	68ba      	ldr	r2, [r7, #8]
 801796a:	429a      	cmp	r2, r3
 801796c:	d101      	bne.n	8017972 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801796e:	2301      	movs	r3, #1
 8017970:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017972:	697b      	ldr	r3, [r7, #20]
}
 8017974:	4618      	mov	r0, r3
 8017976:	371c      	adds	r7, #28
 8017978:	46bd      	mov	sp, r7
 801797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797e:	4770      	bx	lr

08017980 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017980:	b580      	push	{r7, lr}
 8017982:	b086      	sub	sp, #24
 8017984:	af00      	add	r7, sp, #0
 8017986:	60f8      	str	r0, [r7, #12]
 8017988:	60b9      	str	r1, [r7, #8]
 801798a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	68ba      	ldr	r2, [r7, #8]
 8017990:	68f9      	ldr	r1, [r7, #12]
 8017992:	4804      	ldr	r0, [pc, #16]	; (80179a4 <xEventGroupSetBitsFromISR+0x24>)
 8017994:	f002 fb4a 	bl	801a02c <xTimerPendFunctionCallFromISR>
 8017998:	6178      	str	r0, [r7, #20]

		return xReturn;
 801799a:	697b      	ldr	r3, [r7, #20]
	}
 801799c:	4618      	mov	r0, r3
 801799e:	3718      	adds	r7, #24
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	08017923 	.word	0x08017923

080179a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80179a8:	b480      	push	{r7}
 80179aa:	b083      	sub	sp, #12
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f103 0208 	add.w	r2, r3, #8
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80179c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	f103 0208 	add.w	r2, r3, #8
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f103 0208 	add.w	r2, r3, #8
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	2200      	movs	r2, #0
 80179da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80179dc:	bf00      	nop
 80179de:	370c      	adds	r7, #12
 80179e0:	46bd      	mov	sp, r7
 80179e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e6:	4770      	bx	lr

080179e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80179e8:	b480      	push	{r7}
 80179ea:	b083      	sub	sp, #12
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2200      	movs	r2, #0
 80179f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80179f6:	bf00      	nop
 80179f8:	370c      	adds	r7, #12
 80179fa:	46bd      	mov	sp, r7
 80179fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a00:	4770      	bx	lr

08017a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017a02:	b480      	push	{r7}
 8017a04:	b085      	sub	sp, #20
 8017a06:	af00      	add	r7, sp, #0
 8017a08:	6078      	str	r0, [r7, #4]
 8017a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	685b      	ldr	r3, [r3, #4]
 8017a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017a12:	683b      	ldr	r3, [r7, #0]
 8017a14:	68fa      	ldr	r2, [r7, #12]
 8017a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	689a      	ldr	r2, [r3, #8]
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	689b      	ldr	r3, [r3, #8]
 8017a24:	683a      	ldr	r2, [r7, #0]
 8017a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	683a      	ldr	r2, [r7, #0]
 8017a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017a2e:	683b      	ldr	r3, [r7, #0]
 8017a30:	687a      	ldr	r2, [r7, #4]
 8017a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	1c5a      	adds	r2, r3, #1
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	601a      	str	r2, [r3, #0]
}
 8017a3e:	bf00      	nop
 8017a40:	3714      	adds	r7, #20
 8017a42:	46bd      	mov	sp, r7
 8017a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a48:	4770      	bx	lr

08017a4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017a4a:	b480      	push	{r7}
 8017a4c:	b085      	sub	sp, #20
 8017a4e:	af00      	add	r7, sp, #0
 8017a50:	6078      	str	r0, [r7, #4]
 8017a52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a60:	d103      	bne.n	8017a6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	691b      	ldr	r3, [r3, #16]
 8017a66:	60fb      	str	r3, [r7, #12]
 8017a68:	e00c      	b.n	8017a84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	3308      	adds	r3, #8
 8017a6e:	60fb      	str	r3, [r7, #12]
 8017a70:	e002      	b.n	8017a78 <vListInsert+0x2e>
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	60fb      	str	r3, [r7, #12]
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	68ba      	ldr	r2, [r7, #8]
 8017a80:	429a      	cmp	r2, r3
 8017a82:	d2f6      	bcs.n	8017a72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	685a      	ldr	r2, [r3, #4]
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017a8c:	683b      	ldr	r3, [r7, #0]
 8017a8e:	685b      	ldr	r3, [r3, #4]
 8017a90:	683a      	ldr	r2, [r7, #0]
 8017a92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	68fa      	ldr	r2, [r7, #12]
 8017a98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	683a      	ldr	r2, [r7, #0]
 8017a9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	687a      	ldr	r2, [r7, #4]
 8017aa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	1c5a      	adds	r2, r3, #1
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	601a      	str	r2, [r3, #0]
}
 8017ab0:	bf00      	nop
 8017ab2:	3714      	adds	r7, #20
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aba:	4770      	bx	lr

08017abc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017abc:	b480      	push	{r7}
 8017abe:	b085      	sub	sp, #20
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	691b      	ldr	r3, [r3, #16]
 8017ac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	685b      	ldr	r3, [r3, #4]
 8017ace:	687a      	ldr	r2, [r7, #4]
 8017ad0:	6892      	ldr	r2, [r2, #8]
 8017ad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	689b      	ldr	r3, [r3, #8]
 8017ad8:	687a      	ldr	r2, [r7, #4]
 8017ada:	6852      	ldr	r2, [r2, #4]
 8017adc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d103      	bne.n	8017af0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	689a      	ldr	r2, [r3, #8]
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2200      	movs	r2, #0
 8017af4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	1e5a      	subs	r2, r3, #1
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	681b      	ldr	r3, [r3, #0]
}
 8017b04:	4618      	mov	r0, r3
 8017b06:	3714      	adds	r7, #20
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0e:	4770      	bx	lr

08017b10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b084      	sub	sp, #16
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
 8017b18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d10a      	bne.n	8017b3a <xQueueGenericReset+0x2a>
	__asm volatile
 8017b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b28:	f383 8811 	msr	BASEPRI, r3
 8017b2c:	f3bf 8f6f 	isb	sy
 8017b30:	f3bf 8f4f 	dsb	sy
 8017b34:	60bb      	str	r3, [r7, #8]
}
 8017b36:	bf00      	nop
 8017b38:	e7fe      	b.n	8017b38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017b3a:	f002 fbc3 	bl	801a2c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	681a      	ldr	r2, [r3, #0]
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b46:	68f9      	ldr	r1, [r7, #12]
 8017b48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017b4a:	fb01 f303 	mul.w	r3, r1, r3
 8017b4e:	441a      	add	r2, r3
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	2200      	movs	r2, #0
 8017b58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	681a      	ldr	r2, [r3, #0]
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b6a:	3b01      	subs	r3, #1
 8017b6c:	68f9      	ldr	r1, [r7, #12]
 8017b6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017b70:	fb01 f303 	mul.w	r3, r1, r3
 8017b74:	441a      	add	r2, r3
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	22ff      	movs	r2, #255	; 0xff
 8017b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	22ff      	movs	r2, #255	; 0xff
 8017b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d114      	bne.n	8017bba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	691b      	ldr	r3, [r3, #16]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d01a      	beq.n	8017bce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	3310      	adds	r3, #16
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f001 fad3 	bl	8019148 <xTaskRemoveFromEventList>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d012      	beq.n	8017bce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017ba8:	4b0c      	ldr	r3, [pc, #48]	; (8017bdc <xQueueGenericReset+0xcc>)
 8017baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bae:	601a      	str	r2, [r3, #0]
 8017bb0:	f3bf 8f4f 	dsb	sy
 8017bb4:	f3bf 8f6f 	isb	sy
 8017bb8:	e009      	b.n	8017bce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	3310      	adds	r3, #16
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f7ff fef2 	bl	80179a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	3324      	adds	r3, #36	; 0x24
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7ff feed 	bl	80179a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017bce:	f002 fba9 	bl	801a324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017bd2:	2301      	movs	r3, #1
}
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	3710      	adds	r7, #16
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}
 8017bdc:	e000ed04 	.word	0xe000ed04

08017be0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b08e      	sub	sp, #56	; 0x38
 8017be4:	af02      	add	r7, sp, #8
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
 8017bec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d10a      	bne.n	8017c0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bf8:	f383 8811 	msr	BASEPRI, r3
 8017bfc:	f3bf 8f6f 	isb	sy
 8017c00:	f3bf 8f4f 	dsb	sy
 8017c04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017c06:	bf00      	nop
 8017c08:	e7fe      	b.n	8017c08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d10a      	bne.n	8017c26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c14:	f383 8811 	msr	BASEPRI, r3
 8017c18:	f3bf 8f6f 	isb	sy
 8017c1c:	f3bf 8f4f 	dsb	sy
 8017c20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c22:	bf00      	nop
 8017c24:	e7fe      	b.n	8017c24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d002      	beq.n	8017c32 <xQueueGenericCreateStatic+0x52>
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d001      	beq.n	8017c36 <xQueueGenericCreateStatic+0x56>
 8017c32:	2301      	movs	r3, #1
 8017c34:	e000      	b.n	8017c38 <xQueueGenericCreateStatic+0x58>
 8017c36:	2300      	movs	r3, #0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d10a      	bne.n	8017c52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c40:	f383 8811 	msr	BASEPRI, r3
 8017c44:	f3bf 8f6f 	isb	sy
 8017c48:	f3bf 8f4f 	dsb	sy
 8017c4c:	623b      	str	r3, [r7, #32]
}
 8017c4e:	bf00      	nop
 8017c50:	e7fe      	b.n	8017c50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d102      	bne.n	8017c5e <xQueueGenericCreateStatic+0x7e>
 8017c58:	68bb      	ldr	r3, [r7, #8]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d101      	bne.n	8017c62 <xQueueGenericCreateStatic+0x82>
 8017c5e:	2301      	movs	r3, #1
 8017c60:	e000      	b.n	8017c64 <xQueueGenericCreateStatic+0x84>
 8017c62:	2300      	movs	r3, #0
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d10a      	bne.n	8017c7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c6c:	f383 8811 	msr	BASEPRI, r3
 8017c70:	f3bf 8f6f 	isb	sy
 8017c74:	f3bf 8f4f 	dsb	sy
 8017c78:	61fb      	str	r3, [r7, #28]
}
 8017c7a:	bf00      	nop
 8017c7c:	e7fe      	b.n	8017c7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017c7e:	2350      	movs	r3, #80	; 0x50
 8017c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017c82:	697b      	ldr	r3, [r7, #20]
 8017c84:	2b50      	cmp	r3, #80	; 0x50
 8017c86:	d00a      	beq.n	8017c9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c8c:	f383 8811 	msr	BASEPRI, r3
 8017c90:	f3bf 8f6f 	isb	sy
 8017c94:	f3bf 8f4f 	dsb	sy
 8017c98:	61bb      	str	r3, [r7, #24]
}
 8017c9a:	bf00      	nop
 8017c9c:	e7fe      	b.n	8017c9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017c9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d00d      	beq.n	8017cc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cac:	2201      	movs	r2, #1
 8017cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017cb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cb8:	9300      	str	r3, [sp, #0]
 8017cba:	4613      	mov	r3, r2
 8017cbc:	687a      	ldr	r2, [r7, #4]
 8017cbe:	68b9      	ldr	r1, [r7, #8]
 8017cc0:	68f8      	ldr	r0, [r7, #12]
 8017cc2:	f000 f83f 	bl	8017d44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3730      	adds	r7, #48	; 0x30
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}

08017cd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b08a      	sub	sp, #40	; 0x28
 8017cd4:	af02      	add	r7, sp, #8
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	60b9      	str	r1, [r7, #8]
 8017cda:	4613      	mov	r3, r2
 8017cdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d10a      	bne.n	8017cfa <xQueueGenericCreate+0x2a>
	__asm volatile
 8017ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce8:	f383 8811 	msr	BASEPRI, r3
 8017cec:	f3bf 8f6f 	isb	sy
 8017cf0:	f3bf 8f4f 	dsb	sy
 8017cf4:	613b      	str	r3, [r7, #16]
}
 8017cf6:	bf00      	nop
 8017cf8:	e7fe      	b.n	8017cf8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	68ba      	ldr	r2, [r7, #8]
 8017cfe:	fb02 f303 	mul.w	r3, r2, r3
 8017d02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	3350      	adds	r3, #80	; 0x50
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f002 fbfd 	bl	801a508 <pvPortMalloc>
 8017d0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017d10:	69bb      	ldr	r3, [r7, #24]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d011      	beq.n	8017d3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017d16:	69bb      	ldr	r3, [r7, #24]
 8017d18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	3350      	adds	r3, #80	; 0x50
 8017d1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017d20:	69bb      	ldr	r3, [r7, #24]
 8017d22:	2200      	movs	r2, #0
 8017d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017d28:	79fa      	ldrb	r2, [r7, #7]
 8017d2a:	69bb      	ldr	r3, [r7, #24]
 8017d2c:	9300      	str	r3, [sp, #0]
 8017d2e:	4613      	mov	r3, r2
 8017d30:	697a      	ldr	r2, [r7, #20]
 8017d32:	68b9      	ldr	r1, [r7, #8]
 8017d34:	68f8      	ldr	r0, [r7, #12]
 8017d36:	f000 f805 	bl	8017d44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017d3a:	69bb      	ldr	r3, [r7, #24]
	}
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	3720      	adds	r7, #32
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}

08017d44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b084      	sub	sp, #16
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	60f8      	str	r0, [r7, #12]
 8017d4c:	60b9      	str	r1, [r7, #8]
 8017d4e:	607a      	str	r2, [r7, #4]
 8017d50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d103      	bne.n	8017d60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017d58:	69bb      	ldr	r3, [r7, #24]
 8017d5a:	69ba      	ldr	r2, [r7, #24]
 8017d5c:	601a      	str	r2, [r3, #0]
 8017d5e:	e002      	b.n	8017d66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017d60:	69bb      	ldr	r3, [r7, #24]
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017d66:	69bb      	ldr	r3, [r7, #24]
 8017d68:	68fa      	ldr	r2, [r7, #12]
 8017d6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017d6c:	69bb      	ldr	r3, [r7, #24]
 8017d6e:	68ba      	ldr	r2, [r7, #8]
 8017d70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017d72:	2101      	movs	r1, #1
 8017d74:	69b8      	ldr	r0, [r7, #24]
 8017d76:	f7ff fecb 	bl	8017b10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017d7a:	69bb      	ldr	r3, [r7, #24]
 8017d7c:	78fa      	ldrb	r2, [r7, #3]
 8017d7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017d82:	bf00      	nop
 8017d84:	3710      	adds	r7, #16
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
	...

08017d8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b08e      	sub	sp, #56	; 0x38
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	60f8      	str	r0, [r7, #12]
 8017d94:	60b9      	str	r1, [r7, #8]
 8017d96:	607a      	str	r2, [r7, #4]
 8017d98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d10a      	bne.n	8017dbe <xQueueGenericSend+0x32>
	__asm volatile
 8017da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dac:	f383 8811 	msr	BASEPRI, r3
 8017db0:	f3bf 8f6f 	isb	sy
 8017db4:	f3bf 8f4f 	dsb	sy
 8017db8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017dba:	bf00      	nop
 8017dbc:	e7fe      	b.n	8017dbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d103      	bne.n	8017dcc <xQueueGenericSend+0x40>
 8017dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d101      	bne.n	8017dd0 <xQueueGenericSend+0x44>
 8017dcc:	2301      	movs	r3, #1
 8017dce:	e000      	b.n	8017dd2 <xQueueGenericSend+0x46>
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d10a      	bne.n	8017dec <xQueueGenericSend+0x60>
	__asm volatile
 8017dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dda:	f383 8811 	msr	BASEPRI, r3
 8017dde:	f3bf 8f6f 	isb	sy
 8017de2:	f3bf 8f4f 	dsb	sy
 8017de6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017de8:	bf00      	nop
 8017dea:	e7fe      	b.n	8017dea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	2b02      	cmp	r3, #2
 8017df0:	d103      	bne.n	8017dfa <xQueueGenericSend+0x6e>
 8017df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017df6:	2b01      	cmp	r3, #1
 8017df8:	d101      	bne.n	8017dfe <xQueueGenericSend+0x72>
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	e000      	b.n	8017e00 <xQueueGenericSend+0x74>
 8017dfe:	2300      	movs	r3, #0
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d10a      	bne.n	8017e1a <xQueueGenericSend+0x8e>
	__asm volatile
 8017e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e08:	f383 8811 	msr	BASEPRI, r3
 8017e0c:	f3bf 8f6f 	isb	sy
 8017e10:	f3bf 8f4f 	dsb	sy
 8017e14:	623b      	str	r3, [r7, #32]
}
 8017e16:	bf00      	nop
 8017e18:	e7fe      	b.n	8017e18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017e1a:	f001 fbb7 	bl	801958c <xTaskGetSchedulerState>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d102      	bne.n	8017e2a <xQueueGenericSend+0x9e>
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d101      	bne.n	8017e2e <xQueueGenericSend+0xa2>
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	e000      	b.n	8017e30 <xQueueGenericSend+0xa4>
 8017e2e:	2300      	movs	r3, #0
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d10a      	bne.n	8017e4a <xQueueGenericSend+0xbe>
	__asm volatile
 8017e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e38:	f383 8811 	msr	BASEPRI, r3
 8017e3c:	f3bf 8f6f 	isb	sy
 8017e40:	f3bf 8f4f 	dsb	sy
 8017e44:	61fb      	str	r3, [r7, #28]
}
 8017e46:	bf00      	nop
 8017e48:	e7fe      	b.n	8017e48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017e4a:	f002 fa3b 	bl	801a2c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d302      	bcc.n	8017e60 <xQueueGenericSend+0xd4>
 8017e5a:	683b      	ldr	r3, [r7, #0]
 8017e5c:	2b02      	cmp	r3, #2
 8017e5e:	d129      	bne.n	8017eb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017e60:	683a      	ldr	r2, [r7, #0]
 8017e62:	68b9      	ldr	r1, [r7, #8]
 8017e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e66:	f000 fa97 	bl	8018398 <prvCopyDataToQueue>
 8017e6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d010      	beq.n	8017e96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e76:	3324      	adds	r3, #36	; 0x24
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f001 f965 	bl	8019148 <xTaskRemoveFromEventList>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d013      	beq.n	8017eac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017e84:	4b3f      	ldr	r3, [pc, #252]	; (8017f84 <xQueueGenericSend+0x1f8>)
 8017e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e8a:	601a      	str	r2, [r3, #0]
 8017e8c:	f3bf 8f4f 	dsb	sy
 8017e90:	f3bf 8f6f 	isb	sy
 8017e94:	e00a      	b.n	8017eac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d007      	beq.n	8017eac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017e9c:	4b39      	ldr	r3, [pc, #228]	; (8017f84 <xQueueGenericSend+0x1f8>)
 8017e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ea2:	601a      	str	r2, [r3, #0]
 8017ea4:	f3bf 8f4f 	dsb	sy
 8017ea8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017eac:	f002 fa3a 	bl	801a324 <vPortExitCritical>
				return pdPASS;
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	e063      	b.n	8017f7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d103      	bne.n	8017ec2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017eba:	f002 fa33 	bl	801a324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	e05c      	b.n	8017f7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d106      	bne.n	8017ed6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017ec8:	f107 0314 	add.w	r3, r7, #20
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f001 f9ff 	bl	80192d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017ed2:	2301      	movs	r3, #1
 8017ed4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017ed6:	f002 fa25 	bl	801a324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017eda:	f000 fea9 	bl	8018c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017ede:	f002 f9f1 	bl	801a2c4 <vPortEnterCritical>
 8017ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ee8:	b25b      	sxtb	r3, r3
 8017eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017eee:	d103      	bne.n	8017ef8 <xQueueGenericSend+0x16c>
 8017ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017efe:	b25b      	sxtb	r3, r3
 8017f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f04:	d103      	bne.n	8017f0e <xQueueGenericSend+0x182>
 8017f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f08:	2200      	movs	r2, #0
 8017f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017f0e:	f002 fa09 	bl	801a324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017f12:	1d3a      	adds	r2, r7, #4
 8017f14:	f107 0314 	add.w	r3, r7, #20
 8017f18:	4611      	mov	r1, r2
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f001 f9ee 	bl	80192fc <xTaskCheckForTimeOut>
 8017f20:	4603      	mov	r3, r0
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d124      	bne.n	8017f70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f28:	f000 fb2e 	bl	8018588 <prvIsQueueFull>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d018      	beq.n	8017f64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f34:	3310      	adds	r3, #16
 8017f36:	687a      	ldr	r2, [r7, #4]
 8017f38:	4611      	mov	r1, r2
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f001 f878 	bl	8019030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f42:	f000 fab9 	bl	80184b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017f46:	f000 fe81 	bl	8018c4c <xTaskResumeAll>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	f47f af7c 	bne.w	8017e4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017f52:	4b0c      	ldr	r3, [pc, #48]	; (8017f84 <xQueueGenericSend+0x1f8>)
 8017f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f58:	601a      	str	r2, [r3, #0]
 8017f5a:	f3bf 8f4f 	dsb	sy
 8017f5e:	f3bf 8f6f 	isb	sy
 8017f62:	e772      	b.n	8017e4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f66:	f000 faa7 	bl	80184b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017f6a:	f000 fe6f 	bl	8018c4c <xTaskResumeAll>
 8017f6e:	e76c      	b.n	8017e4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f72:	f000 faa1 	bl	80184b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017f76:	f000 fe69 	bl	8018c4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017f7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3738      	adds	r7, #56	; 0x38
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	e000ed04 	.word	0xe000ed04

08017f88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b090      	sub	sp, #64	; 0x40
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
 8017f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d10a      	bne.n	8017fb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fa4:	f383 8811 	msr	BASEPRI, r3
 8017fa8:	f3bf 8f6f 	isb	sy
 8017fac:	f3bf 8f4f 	dsb	sy
 8017fb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017fb2:	bf00      	nop
 8017fb4:	e7fe      	b.n	8017fb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d103      	bne.n	8017fc4 <xQueueGenericSendFromISR+0x3c>
 8017fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d101      	bne.n	8017fc8 <xQueueGenericSendFromISR+0x40>
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	e000      	b.n	8017fca <xQueueGenericSendFromISR+0x42>
 8017fc8:	2300      	movs	r3, #0
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d10a      	bne.n	8017fe4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd2:	f383 8811 	msr	BASEPRI, r3
 8017fd6:	f3bf 8f6f 	isb	sy
 8017fda:	f3bf 8f4f 	dsb	sy
 8017fde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017fe0:	bf00      	nop
 8017fe2:	e7fe      	b.n	8017fe2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017fe4:	683b      	ldr	r3, [r7, #0]
 8017fe6:	2b02      	cmp	r3, #2
 8017fe8:	d103      	bne.n	8017ff2 <xQueueGenericSendFromISR+0x6a>
 8017fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fee:	2b01      	cmp	r3, #1
 8017ff0:	d101      	bne.n	8017ff6 <xQueueGenericSendFromISR+0x6e>
 8017ff2:	2301      	movs	r3, #1
 8017ff4:	e000      	b.n	8017ff8 <xQueueGenericSendFromISR+0x70>
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d10a      	bne.n	8018012 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018000:	f383 8811 	msr	BASEPRI, r3
 8018004:	f3bf 8f6f 	isb	sy
 8018008:	f3bf 8f4f 	dsb	sy
 801800c:	623b      	str	r3, [r7, #32]
}
 801800e:	bf00      	nop
 8018010:	e7fe      	b.n	8018010 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018012:	f002 fa39 	bl	801a488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018016:	f3ef 8211 	mrs	r2, BASEPRI
 801801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801801e:	f383 8811 	msr	BASEPRI, r3
 8018022:	f3bf 8f6f 	isb	sy
 8018026:	f3bf 8f4f 	dsb	sy
 801802a:	61fa      	str	r2, [r7, #28]
 801802c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801802e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018030:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801803a:	429a      	cmp	r2, r3
 801803c:	d302      	bcc.n	8018044 <xQueueGenericSendFromISR+0xbc>
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	2b02      	cmp	r3, #2
 8018042:	d12f      	bne.n	80180a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018052:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018054:	683a      	ldr	r2, [r7, #0]
 8018056:	68b9      	ldr	r1, [r7, #8]
 8018058:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801805a:	f000 f99d 	bl	8018398 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801805e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8018062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018066:	d112      	bne.n	801808e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801806c:	2b00      	cmp	r3, #0
 801806e:	d016      	beq.n	801809e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018072:	3324      	adds	r3, #36	; 0x24
 8018074:	4618      	mov	r0, r3
 8018076:	f001 f867 	bl	8019148 <xTaskRemoveFromEventList>
 801807a:	4603      	mov	r3, r0
 801807c:	2b00      	cmp	r3, #0
 801807e:	d00e      	beq.n	801809e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d00b      	beq.n	801809e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	2201      	movs	r2, #1
 801808a:	601a      	str	r2, [r3, #0]
 801808c:	e007      	b.n	801809e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801808e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018092:	3301      	adds	r3, #1
 8018094:	b2db      	uxtb	r3, r3
 8018096:	b25a      	sxtb	r2, r3
 8018098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801809a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801809e:	2301      	movs	r3, #1
 80180a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80180a2:	e001      	b.n	80180a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80180a4:	2300      	movs	r3, #0
 80180a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80180a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80180ac:	697b      	ldr	r3, [r7, #20]
 80180ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80180b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80180b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	3740      	adds	r7, #64	; 0x40
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd80      	pop	{r7, pc}

080180be <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80180be:	b580      	push	{r7, lr}
 80180c0:	b08e      	sub	sp, #56	; 0x38
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	6078      	str	r0, [r7, #4]
 80180c6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80180cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d10a      	bne.n	80180e8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80180d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180d6:	f383 8811 	msr	BASEPRI, r3
 80180da:	f3bf 8f6f 	isb	sy
 80180de:	f3bf 8f4f 	dsb	sy
 80180e2:	623b      	str	r3, [r7, #32]
}
 80180e4:	bf00      	nop
 80180e6:	e7fe      	b.n	80180e6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80180e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d00a      	beq.n	8018106 <xQueueGiveFromISR+0x48>
	__asm volatile
 80180f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180f4:	f383 8811 	msr	BASEPRI, r3
 80180f8:	f3bf 8f6f 	isb	sy
 80180fc:	f3bf 8f4f 	dsb	sy
 8018100:	61fb      	str	r3, [r7, #28]
}
 8018102:	bf00      	nop
 8018104:	e7fe      	b.n	8018104 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d103      	bne.n	8018116 <xQueueGiveFromISR+0x58>
 801810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018110:	689b      	ldr	r3, [r3, #8]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d101      	bne.n	801811a <xQueueGiveFromISR+0x5c>
 8018116:	2301      	movs	r3, #1
 8018118:	e000      	b.n	801811c <xQueueGiveFromISR+0x5e>
 801811a:	2300      	movs	r3, #0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d10a      	bne.n	8018136 <xQueueGiveFromISR+0x78>
	__asm volatile
 8018120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018124:	f383 8811 	msr	BASEPRI, r3
 8018128:	f3bf 8f6f 	isb	sy
 801812c:	f3bf 8f4f 	dsb	sy
 8018130:	61bb      	str	r3, [r7, #24]
}
 8018132:	bf00      	nop
 8018134:	e7fe      	b.n	8018134 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018136:	f002 f9a7 	bl	801a488 <vPortValidateInterruptPriority>
	__asm volatile
 801813a:	f3ef 8211 	mrs	r2, BASEPRI
 801813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018142:	f383 8811 	msr	BASEPRI, r3
 8018146:	f3bf 8f6f 	isb	sy
 801814a:	f3bf 8f4f 	dsb	sy
 801814e:	617a      	str	r2, [r7, #20]
 8018150:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018152:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018154:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801815a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018162:	429a      	cmp	r2, r3
 8018164:	d22b      	bcs.n	80181be <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801816c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018172:	1c5a      	adds	r2, r3, #1
 8018174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018176:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801817c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018180:	d112      	bne.n	80181a8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018186:	2b00      	cmp	r3, #0
 8018188:	d016      	beq.n	80181b8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801818c:	3324      	adds	r3, #36	; 0x24
 801818e:	4618      	mov	r0, r3
 8018190:	f000 ffda 	bl	8019148 <xTaskRemoveFromEventList>
 8018194:	4603      	mov	r3, r0
 8018196:	2b00      	cmp	r3, #0
 8018198:	d00e      	beq.n	80181b8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801819a:	683b      	ldr	r3, [r7, #0]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d00b      	beq.n	80181b8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	2201      	movs	r2, #1
 80181a4:	601a      	str	r2, [r3, #0]
 80181a6:	e007      	b.n	80181b8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80181a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181ac:	3301      	adds	r3, #1
 80181ae:	b2db      	uxtb	r3, r3
 80181b0:	b25a      	sxtb	r2, r3
 80181b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80181b8:	2301      	movs	r3, #1
 80181ba:	637b      	str	r3, [r7, #52]	; 0x34
 80181bc:	e001      	b.n	80181c2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80181be:	2300      	movs	r3, #0
 80181c0:	637b      	str	r3, [r7, #52]	; 0x34
 80181c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	f383 8811 	msr	BASEPRI, r3
}
 80181cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80181ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80181d0:	4618      	mov	r0, r3
 80181d2:	3738      	adds	r7, #56	; 0x38
 80181d4:	46bd      	mov	sp, r7
 80181d6:	bd80      	pop	{r7, pc}

080181d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b08c      	sub	sp, #48	; 0x30
 80181dc:	af00      	add	r7, sp, #0
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80181e4:	2300      	movs	r3, #0
 80181e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80181ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d10a      	bne.n	8018208 <xQueueReceive+0x30>
	__asm volatile
 80181f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f6:	f383 8811 	msr	BASEPRI, r3
 80181fa:	f3bf 8f6f 	isb	sy
 80181fe:	f3bf 8f4f 	dsb	sy
 8018202:	623b      	str	r3, [r7, #32]
}
 8018204:	bf00      	nop
 8018206:	e7fe      	b.n	8018206 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d103      	bne.n	8018216 <xQueueReceive+0x3e>
 801820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018212:	2b00      	cmp	r3, #0
 8018214:	d101      	bne.n	801821a <xQueueReceive+0x42>
 8018216:	2301      	movs	r3, #1
 8018218:	e000      	b.n	801821c <xQueueReceive+0x44>
 801821a:	2300      	movs	r3, #0
 801821c:	2b00      	cmp	r3, #0
 801821e:	d10a      	bne.n	8018236 <xQueueReceive+0x5e>
	__asm volatile
 8018220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018224:	f383 8811 	msr	BASEPRI, r3
 8018228:	f3bf 8f6f 	isb	sy
 801822c:	f3bf 8f4f 	dsb	sy
 8018230:	61fb      	str	r3, [r7, #28]
}
 8018232:	bf00      	nop
 8018234:	e7fe      	b.n	8018234 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018236:	f001 f9a9 	bl	801958c <xTaskGetSchedulerState>
 801823a:	4603      	mov	r3, r0
 801823c:	2b00      	cmp	r3, #0
 801823e:	d102      	bne.n	8018246 <xQueueReceive+0x6e>
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d101      	bne.n	801824a <xQueueReceive+0x72>
 8018246:	2301      	movs	r3, #1
 8018248:	e000      	b.n	801824c <xQueueReceive+0x74>
 801824a:	2300      	movs	r3, #0
 801824c:	2b00      	cmp	r3, #0
 801824e:	d10a      	bne.n	8018266 <xQueueReceive+0x8e>
	__asm volatile
 8018250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018254:	f383 8811 	msr	BASEPRI, r3
 8018258:	f3bf 8f6f 	isb	sy
 801825c:	f3bf 8f4f 	dsb	sy
 8018260:	61bb      	str	r3, [r7, #24]
}
 8018262:	bf00      	nop
 8018264:	e7fe      	b.n	8018264 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018266:	f002 f82d 	bl	801a2c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801826e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018272:	2b00      	cmp	r3, #0
 8018274:	d01f      	beq.n	80182b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018276:	68b9      	ldr	r1, [r7, #8]
 8018278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801827a:	f000 f8f7 	bl	801846c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018280:	1e5a      	subs	r2, r3, #1
 8018282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018284:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018288:	691b      	ldr	r3, [r3, #16]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d00f      	beq.n	80182ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018290:	3310      	adds	r3, #16
 8018292:	4618      	mov	r0, r3
 8018294:	f000 ff58 	bl	8019148 <xTaskRemoveFromEventList>
 8018298:	4603      	mov	r3, r0
 801829a:	2b00      	cmp	r3, #0
 801829c:	d007      	beq.n	80182ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801829e:	4b3d      	ldr	r3, [pc, #244]	; (8018394 <xQueueReceive+0x1bc>)
 80182a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182a4:	601a      	str	r2, [r3, #0]
 80182a6:	f3bf 8f4f 	dsb	sy
 80182aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80182ae:	f002 f839 	bl	801a324 <vPortExitCritical>
				return pdPASS;
 80182b2:	2301      	movs	r3, #1
 80182b4:	e069      	b.n	801838a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d103      	bne.n	80182c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80182bc:	f002 f832 	bl	801a324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80182c0:	2300      	movs	r3, #0
 80182c2:	e062      	b.n	801838a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80182c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d106      	bne.n	80182d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80182ca:	f107 0310 	add.w	r3, r7, #16
 80182ce:	4618      	mov	r0, r3
 80182d0:	f000 fffe 	bl	80192d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80182d4:	2301      	movs	r3, #1
 80182d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80182d8:	f002 f824 	bl	801a324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80182dc:	f000 fca8 	bl	8018c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80182e0:	f001 fff0 	bl	801a2c4 <vPortEnterCritical>
 80182e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80182ea:	b25b      	sxtb	r3, r3
 80182ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182f0:	d103      	bne.n	80182fa <xQueueReceive+0x122>
 80182f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f4:	2200      	movs	r2, #0
 80182f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80182fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018300:	b25b      	sxtb	r3, r3
 8018302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018306:	d103      	bne.n	8018310 <xQueueReceive+0x138>
 8018308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801830a:	2200      	movs	r2, #0
 801830c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018310:	f002 f808 	bl	801a324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018314:	1d3a      	adds	r2, r7, #4
 8018316:	f107 0310 	add.w	r3, r7, #16
 801831a:	4611      	mov	r1, r2
 801831c:	4618      	mov	r0, r3
 801831e:	f000 ffed 	bl	80192fc <xTaskCheckForTimeOut>
 8018322:	4603      	mov	r3, r0
 8018324:	2b00      	cmp	r3, #0
 8018326:	d123      	bne.n	8018370 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801832a:	f000 f917 	bl	801855c <prvIsQueueEmpty>
 801832e:	4603      	mov	r3, r0
 8018330:	2b00      	cmp	r3, #0
 8018332:	d017      	beq.n	8018364 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018336:	3324      	adds	r3, #36	; 0x24
 8018338:	687a      	ldr	r2, [r7, #4]
 801833a:	4611      	mov	r1, r2
 801833c:	4618      	mov	r0, r3
 801833e:	f000 fe77 	bl	8019030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018344:	f000 f8b8 	bl	80184b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018348:	f000 fc80 	bl	8018c4c <xTaskResumeAll>
 801834c:	4603      	mov	r3, r0
 801834e:	2b00      	cmp	r3, #0
 8018350:	d189      	bne.n	8018266 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8018352:	4b10      	ldr	r3, [pc, #64]	; (8018394 <xQueueReceive+0x1bc>)
 8018354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018358:	601a      	str	r2, [r3, #0]
 801835a:	f3bf 8f4f 	dsb	sy
 801835e:	f3bf 8f6f 	isb	sy
 8018362:	e780      	b.n	8018266 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018366:	f000 f8a7 	bl	80184b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801836a:	f000 fc6f 	bl	8018c4c <xTaskResumeAll>
 801836e:	e77a      	b.n	8018266 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018372:	f000 f8a1 	bl	80184b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018376:	f000 fc69 	bl	8018c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801837a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801837c:	f000 f8ee 	bl	801855c <prvIsQueueEmpty>
 8018380:	4603      	mov	r3, r0
 8018382:	2b00      	cmp	r3, #0
 8018384:	f43f af6f 	beq.w	8018266 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018388:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801838a:	4618      	mov	r0, r3
 801838c:	3730      	adds	r7, #48	; 0x30
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	e000ed04 	.word	0xe000ed04

08018398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b086      	sub	sp, #24
 801839c:	af00      	add	r7, sp, #0
 801839e:	60f8      	str	r0, [r7, #12]
 80183a0:	60b9      	str	r1, [r7, #8]
 80183a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80183a4:	2300      	movs	r3, #0
 80183a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d10d      	bne.n	80183d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d14d      	bne.n	801845a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	689b      	ldr	r3, [r3, #8]
 80183c2:	4618      	mov	r0, r3
 80183c4:	f001 f900 	bl	80195c8 <xTaskPriorityDisinherit>
 80183c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	2200      	movs	r2, #0
 80183ce:	609a      	str	r2, [r3, #8]
 80183d0:	e043      	b.n	801845a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d119      	bne.n	801840c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	6858      	ldr	r0, [r3, #4]
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183e0:	461a      	mov	r2, r3
 80183e2:	68b9      	ldr	r1, [r7, #8]
 80183e4:	f003 f8df 	bl	801b5a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	685a      	ldr	r2, [r3, #4]
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183f0:	441a      	add	r2, r3
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	685a      	ldr	r2, [r3, #4]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	689b      	ldr	r3, [r3, #8]
 80183fe:	429a      	cmp	r2, r3
 8018400:	d32b      	bcc.n	801845a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	681a      	ldr	r2, [r3, #0]
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	605a      	str	r2, [r3, #4]
 801840a:	e026      	b.n	801845a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	68d8      	ldr	r0, [r3, #12]
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018414:	461a      	mov	r2, r3
 8018416:	68b9      	ldr	r1, [r7, #8]
 8018418:	f003 f8c5 	bl	801b5a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	68da      	ldr	r2, [r3, #12]
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018424:	425b      	negs	r3, r3
 8018426:	441a      	add	r2, r3
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	68da      	ldr	r2, [r3, #12]
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	429a      	cmp	r2, r3
 8018436:	d207      	bcs.n	8018448 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	689a      	ldr	r2, [r3, #8]
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018440:	425b      	negs	r3, r3
 8018442:	441a      	add	r2, r3
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2b02      	cmp	r3, #2
 801844c:	d105      	bne.n	801845a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d002      	beq.n	801845a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	3b01      	subs	r3, #1
 8018458:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	1c5a      	adds	r2, r3, #1
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018462:	697b      	ldr	r3, [r7, #20]
}
 8018464:	4618      	mov	r0, r3
 8018466:	3718      	adds	r7, #24
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}

0801846c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
 8018474:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801847a:	2b00      	cmp	r3, #0
 801847c:	d018      	beq.n	80184b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	68da      	ldr	r2, [r3, #12]
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018486:	441a      	add	r2, r3
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	68da      	ldr	r2, [r3, #12]
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	689b      	ldr	r3, [r3, #8]
 8018494:	429a      	cmp	r2, r3
 8018496:	d303      	bcc.n	80184a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681a      	ldr	r2, [r3, #0]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	68d9      	ldr	r1, [r3, #12]
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184a8:	461a      	mov	r2, r3
 80184aa:	6838      	ldr	r0, [r7, #0]
 80184ac:	f003 f87b 	bl	801b5a6 <memcpy>
	}
}
 80184b0:	bf00      	nop
 80184b2:	3708      	adds	r7, #8
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}

080184b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b084      	sub	sp, #16
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80184c0:	f001 ff00 	bl	801a2c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80184ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80184cc:	e011      	b.n	80184f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d012      	beq.n	80184fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	3324      	adds	r3, #36	; 0x24
 80184da:	4618      	mov	r0, r3
 80184dc:	f000 fe34 	bl	8019148 <xTaskRemoveFromEventList>
 80184e0:	4603      	mov	r3, r0
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d001      	beq.n	80184ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80184e6:	f000 ff6b 	bl	80193c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80184ea:	7bfb      	ldrb	r3, [r7, #15]
 80184ec:	3b01      	subs	r3, #1
 80184ee:	b2db      	uxtb	r3, r3
 80184f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80184f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	dce9      	bgt.n	80184ce <prvUnlockQueue+0x16>
 80184fa:	e000      	b.n	80184fe <prvUnlockQueue+0x46>
					break;
 80184fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	22ff      	movs	r2, #255	; 0xff
 8018502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018506:	f001 ff0d 	bl	801a324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801850a:	f001 fedb 	bl	801a2c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018514:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018516:	e011      	b.n	801853c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	691b      	ldr	r3, [r3, #16]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d012      	beq.n	8018546 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	3310      	adds	r3, #16
 8018524:	4618      	mov	r0, r3
 8018526:	f000 fe0f 	bl	8019148 <xTaskRemoveFromEventList>
 801852a:	4603      	mov	r3, r0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d001      	beq.n	8018534 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018530:	f000 ff46 	bl	80193c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018534:	7bbb      	ldrb	r3, [r7, #14]
 8018536:	3b01      	subs	r3, #1
 8018538:	b2db      	uxtb	r3, r3
 801853a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801853c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018540:	2b00      	cmp	r3, #0
 8018542:	dce9      	bgt.n	8018518 <prvUnlockQueue+0x60>
 8018544:	e000      	b.n	8018548 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018546:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	22ff      	movs	r2, #255	; 0xff
 801854c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018550:	f001 fee8 	bl	801a324 <vPortExitCritical>
}
 8018554:	bf00      	nop
 8018556:	3710      	adds	r7, #16
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}

0801855c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b084      	sub	sp, #16
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018564:	f001 feae 	bl	801a2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801856c:	2b00      	cmp	r3, #0
 801856e:	d102      	bne.n	8018576 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018570:	2301      	movs	r3, #1
 8018572:	60fb      	str	r3, [r7, #12]
 8018574:	e001      	b.n	801857a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018576:	2300      	movs	r3, #0
 8018578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801857a:	f001 fed3 	bl	801a324 <vPortExitCritical>

	return xReturn;
 801857e:	68fb      	ldr	r3, [r7, #12]
}
 8018580:	4618      	mov	r0, r3
 8018582:	3710      	adds	r7, #16
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}

08018588 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018590:	f001 fe98 	bl	801a2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801859c:	429a      	cmp	r2, r3
 801859e:	d102      	bne.n	80185a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80185a0:	2301      	movs	r3, #1
 80185a2:	60fb      	str	r3, [r7, #12]
 80185a4:	e001      	b.n	80185aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80185a6:	2300      	movs	r3, #0
 80185a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80185aa:	f001 febb 	bl	801a324 <vPortExitCritical>

	return xReturn;
 80185ae:	68fb      	ldr	r3, [r7, #12]
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3710      	adds	r7, #16
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}

080185b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80185b8:	b480      	push	{r7}
 80185ba:	b085      	sub	sp, #20
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
 80185c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80185c2:	2300      	movs	r3, #0
 80185c4:	60fb      	str	r3, [r7, #12]
 80185c6:	e014      	b.n	80185f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80185c8:	4a0f      	ldr	r2, [pc, #60]	; (8018608 <vQueueAddToRegistry+0x50>)
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d10b      	bne.n	80185ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80185d4:	490c      	ldr	r1, [pc, #48]	; (8018608 <vQueueAddToRegistry+0x50>)
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	683a      	ldr	r2, [r7, #0]
 80185da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80185de:	4a0a      	ldr	r2, [pc, #40]	; (8018608 <vQueueAddToRegistry+0x50>)
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	00db      	lsls	r3, r3, #3
 80185e4:	4413      	add	r3, r2
 80185e6:	687a      	ldr	r2, [r7, #4]
 80185e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80185ea:	e006      	b.n	80185fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	3301      	adds	r3, #1
 80185f0:	60fb      	str	r3, [r7, #12]
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	2b07      	cmp	r3, #7
 80185f6:	d9e7      	bls.n	80185c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80185f8:	bf00      	nop
 80185fa:	bf00      	nop
 80185fc:	3714      	adds	r7, #20
 80185fe:	46bd      	mov	sp, r7
 8018600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018604:	4770      	bx	lr
 8018606:	bf00      	nop
 8018608:	200035d4 	.word	0x200035d4

0801860c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801860c:	b580      	push	{r7, lr}
 801860e:	b086      	sub	sp, #24
 8018610:	af00      	add	r7, sp, #0
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801861c:	f001 fe52 	bl	801a2c4 <vPortEnterCritical>
 8018620:	697b      	ldr	r3, [r7, #20]
 8018622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018626:	b25b      	sxtb	r3, r3
 8018628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801862c:	d103      	bne.n	8018636 <vQueueWaitForMessageRestricted+0x2a>
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	2200      	movs	r2, #0
 8018632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018636:	697b      	ldr	r3, [r7, #20]
 8018638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801863c:	b25b      	sxtb	r3, r3
 801863e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018642:	d103      	bne.n	801864c <vQueueWaitForMessageRestricted+0x40>
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	2200      	movs	r2, #0
 8018648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801864c:	f001 fe6a 	bl	801a324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018654:	2b00      	cmp	r3, #0
 8018656:	d106      	bne.n	8018666 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	3324      	adds	r3, #36	; 0x24
 801865c:	687a      	ldr	r2, [r7, #4]
 801865e:	68b9      	ldr	r1, [r7, #8]
 8018660:	4618      	mov	r0, r3
 8018662:	f000 fd45 	bl	80190f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018666:	6978      	ldr	r0, [r7, #20]
 8018668:	f7ff ff26 	bl	80184b8 <prvUnlockQueue>
	}
 801866c:	bf00      	nop
 801866e:	3718      	adds	r7, #24
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}

08018674 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018674:	b580      	push	{r7, lr}
 8018676:	b08e      	sub	sp, #56	; 0x38
 8018678:	af04      	add	r7, sp, #16
 801867a:	60f8      	str	r0, [r7, #12]
 801867c:	60b9      	str	r1, [r7, #8]
 801867e:	607a      	str	r2, [r7, #4]
 8018680:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018684:	2b00      	cmp	r3, #0
 8018686:	d10a      	bne.n	801869e <xTaskCreateStatic+0x2a>
	__asm volatile
 8018688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801868c:	f383 8811 	msr	BASEPRI, r3
 8018690:	f3bf 8f6f 	isb	sy
 8018694:	f3bf 8f4f 	dsb	sy
 8018698:	623b      	str	r3, [r7, #32]
}
 801869a:	bf00      	nop
 801869c:	e7fe      	b.n	801869c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d10a      	bne.n	80186ba <xTaskCreateStatic+0x46>
	__asm volatile
 80186a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186a8:	f383 8811 	msr	BASEPRI, r3
 80186ac:	f3bf 8f6f 	isb	sy
 80186b0:	f3bf 8f4f 	dsb	sy
 80186b4:	61fb      	str	r3, [r7, #28]
}
 80186b6:	bf00      	nop
 80186b8:	e7fe      	b.n	80186b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80186ba:	23c0      	movs	r3, #192	; 0xc0
 80186bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80186be:	693b      	ldr	r3, [r7, #16]
 80186c0:	2bc0      	cmp	r3, #192	; 0xc0
 80186c2:	d00a      	beq.n	80186da <xTaskCreateStatic+0x66>
	__asm volatile
 80186c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c8:	f383 8811 	msr	BASEPRI, r3
 80186cc:	f3bf 8f6f 	isb	sy
 80186d0:	f3bf 8f4f 	dsb	sy
 80186d4:	61bb      	str	r3, [r7, #24]
}
 80186d6:	bf00      	nop
 80186d8:	e7fe      	b.n	80186d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80186da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80186dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d01e      	beq.n	8018720 <xTaskCreateStatic+0xac>
 80186e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d01b      	beq.n	8018720 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80186e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80186ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80186f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80186f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f4:	2202      	movs	r2, #2
 80186f6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80186fa:	2300      	movs	r3, #0
 80186fc:	9303      	str	r3, [sp, #12]
 80186fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018700:	9302      	str	r3, [sp, #8]
 8018702:	f107 0314 	add.w	r3, r7, #20
 8018706:	9301      	str	r3, [sp, #4]
 8018708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801870a:	9300      	str	r3, [sp, #0]
 801870c:	683b      	ldr	r3, [r7, #0]
 801870e:	687a      	ldr	r2, [r7, #4]
 8018710:	68b9      	ldr	r1, [r7, #8]
 8018712:	68f8      	ldr	r0, [r7, #12]
 8018714:	f000 f850 	bl	80187b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801871a:	f000 f8f7 	bl	801890c <prvAddNewTaskToReadyList>
 801871e:	e001      	b.n	8018724 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018720:	2300      	movs	r3, #0
 8018722:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018724:	697b      	ldr	r3, [r7, #20]
	}
 8018726:	4618      	mov	r0, r3
 8018728:	3728      	adds	r7, #40	; 0x28
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}

0801872e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801872e:	b580      	push	{r7, lr}
 8018730:	b08c      	sub	sp, #48	; 0x30
 8018732:	af04      	add	r7, sp, #16
 8018734:	60f8      	str	r0, [r7, #12]
 8018736:	60b9      	str	r1, [r7, #8]
 8018738:	603b      	str	r3, [r7, #0]
 801873a:	4613      	mov	r3, r2
 801873c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801873e:	88fb      	ldrh	r3, [r7, #6]
 8018740:	009b      	lsls	r3, r3, #2
 8018742:	4618      	mov	r0, r3
 8018744:	f001 fee0 	bl	801a508 <pvPortMalloc>
 8018748:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801874a:	697b      	ldr	r3, [r7, #20]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d00e      	beq.n	801876e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018750:	20c0      	movs	r0, #192	; 0xc0
 8018752:	f001 fed9 	bl	801a508 <pvPortMalloc>
 8018756:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d003      	beq.n	8018766 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801875e:	69fb      	ldr	r3, [r7, #28]
 8018760:	697a      	ldr	r2, [r7, #20]
 8018762:	631a      	str	r2, [r3, #48]	; 0x30
 8018764:	e005      	b.n	8018772 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018766:	6978      	ldr	r0, [r7, #20]
 8018768:	f001 ff9a 	bl	801a6a0 <vPortFree>
 801876c:	e001      	b.n	8018772 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801876e:	2300      	movs	r3, #0
 8018770:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d017      	beq.n	80187a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018778:	69fb      	ldr	r3, [r7, #28]
 801877a:	2200      	movs	r2, #0
 801877c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018780:	88fa      	ldrh	r2, [r7, #6]
 8018782:	2300      	movs	r3, #0
 8018784:	9303      	str	r3, [sp, #12]
 8018786:	69fb      	ldr	r3, [r7, #28]
 8018788:	9302      	str	r3, [sp, #8]
 801878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801878c:	9301      	str	r3, [sp, #4]
 801878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018790:	9300      	str	r3, [sp, #0]
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	68b9      	ldr	r1, [r7, #8]
 8018796:	68f8      	ldr	r0, [r7, #12]
 8018798:	f000 f80e 	bl	80187b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801879c:	69f8      	ldr	r0, [r7, #28]
 801879e:	f000 f8b5 	bl	801890c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80187a2:	2301      	movs	r3, #1
 80187a4:	61bb      	str	r3, [r7, #24]
 80187a6:	e002      	b.n	80187ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80187a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80187ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80187ae:	69bb      	ldr	r3, [r7, #24]
	}
 80187b0:	4618      	mov	r0, r3
 80187b2:	3720      	adds	r7, #32
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}

080187b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b088      	sub	sp, #32
 80187bc:	af00      	add	r7, sp, #0
 80187be:	60f8      	str	r0, [r7, #12]
 80187c0:	60b9      	str	r1, [r7, #8]
 80187c2:	607a      	str	r2, [r7, #4]
 80187c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80187c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	009b      	lsls	r3, r3, #2
 80187ce:	461a      	mov	r2, r3
 80187d0:	21a5      	movs	r1, #165	; 0xa5
 80187d2:	f002 fef6 	bl	801b5c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80187d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80187e0:	3b01      	subs	r3, #1
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	4413      	add	r3, r2
 80187e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80187e8:	69bb      	ldr	r3, [r7, #24]
 80187ea:	f023 0307 	bic.w	r3, r3, #7
 80187ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80187f0:	69bb      	ldr	r3, [r7, #24]
 80187f2:	f003 0307 	and.w	r3, r3, #7
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d00a      	beq.n	8018810 <prvInitialiseNewTask+0x58>
	__asm volatile
 80187fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187fe:	f383 8811 	msr	BASEPRI, r3
 8018802:	f3bf 8f6f 	isb	sy
 8018806:	f3bf 8f4f 	dsb	sy
 801880a:	617b      	str	r3, [r7, #20]
}
 801880c:	bf00      	nop
 801880e:	e7fe      	b.n	801880e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018810:	68bb      	ldr	r3, [r7, #8]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d01f      	beq.n	8018856 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018816:	2300      	movs	r3, #0
 8018818:	61fb      	str	r3, [r7, #28]
 801881a:	e012      	b.n	8018842 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801881c:	68ba      	ldr	r2, [r7, #8]
 801881e:	69fb      	ldr	r3, [r7, #28]
 8018820:	4413      	add	r3, r2
 8018822:	7819      	ldrb	r1, [r3, #0]
 8018824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018826:	69fb      	ldr	r3, [r7, #28]
 8018828:	4413      	add	r3, r2
 801882a:	3334      	adds	r3, #52	; 0x34
 801882c:	460a      	mov	r2, r1
 801882e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018830:	68ba      	ldr	r2, [r7, #8]
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	4413      	add	r3, r2
 8018836:	781b      	ldrb	r3, [r3, #0]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d006      	beq.n	801884a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801883c:	69fb      	ldr	r3, [r7, #28]
 801883e:	3301      	adds	r3, #1
 8018840:	61fb      	str	r3, [r7, #28]
 8018842:	69fb      	ldr	r3, [r7, #28]
 8018844:	2b0f      	cmp	r3, #15
 8018846:	d9e9      	bls.n	801881c <prvInitialiseNewTask+0x64>
 8018848:	e000      	b.n	801884c <prvInitialiseNewTask+0x94>
			{
				break;
 801884a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801884e:	2200      	movs	r2, #0
 8018850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018854:	e003      	b.n	801885e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018858:	2200      	movs	r2, #0
 801885a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018860:	2b0e      	cmp	r3, #14
 8018862:	d901      	bls.n	8018868 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018864:	230e      	movs	r3, #14
 8018866:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801886c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018872:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018876:	2200      	movs	r2, #0
 8018878:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887c:	3304      	adds	r3, #4
 801887e:	4618      	mov	r0, r3
 8018880:	f7ff f8b2 	bl	80179e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018886:	3318      	adds	r3, #24
 8018888:	4618      	mov	r0, r3
 801888a:	f7ff f8ad 	bl	80179e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018892:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018896:	f1c3 020f 	rsb	r2, r3, #15
 801889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801889c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80188a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a6:	2200      	movs	r2, #0
 80188a8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80188aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ac:	2200      	movs	r2, #0
 80188ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80188b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b4:	2200      	movs	r2, #0
 80188b6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80188ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188bc:	3358      	adds	r3, #88	; 0x58
 80188be:	2260      	movs	r2, #96	; 0x60
 80188c0:	2100      	movs	r1, #0
 80188c2:	4618      	mov	r0, r3
 80188c4:	f002 fe7d 	bl	801b5c2 <memset>
 80188c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ca:	4a0d      	ldr	r2, [pc, #52]	; (8018900 <prvInitialiseNewTask+0x148>)
 80188cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80188ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d0:	4a0c      	ldr	r2, [pc, #48]	; (8018904 <prvInitialiseNewTask+0x14c>)
 80188d2:	661a      	str	r2, [r3, #96]	; 0x60
 80188d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d6:	4a0c      	ldr	r2, [pc, #48]	; (8018908 <prvInitialiseNewTask+0x150>)
 80188d8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80188da:	683a      	ldr	r2, [r7, #0]
 80188dc:	68f9      	ldr	r1, [r7, #12]
 80188de:	69b8      	ldr	r0, [r7, #24]
 80188e0:	f001 fbc4 	bl	801a06c <pxPortInitialiseStack>
 80188e4:	4602      	mov	r2, r0
 80188e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80188ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d002      	beq.n	80188f6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80188f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188f6:	bf00      	nop
 80188f8:	3720      	adds	r7, #32
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd80      	pop	{r7, pc}
 80188fe:	bf00      	nop
 8018900:	08022e9c 	.word	0x08022e9c
 8018904:	08022ebc 	.word	0x08022ebc
 8018908:	08022e7c 	.word	0x08022e7c

0801890c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018914:	f001 fcd6 	bl	801a2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018918:	4b2c      	ldr	r3, [pc, #176]	; (80189cc <prvAddNewTaskToReadyList+0xc0>)
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	3301      	adds	r3, #1
 801891e:	4a2b      	ldr	r2, [pc, #172]	; (80189cc <prvAddNewTaskToReadyList+0xc0>)
 8018920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018922:	4b2b      	ldr	r3, [pc, #172]	; (80189d0 <prvAddNewTaskToReadyList+0xc4>)
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d109      	bne.n	801893e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801892a:	4a29      	ldr	r2, [pc, #164]	; (80189d0 <prvAddNewTaskToReadyList+0xc4>)
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018930:	4b26      	ldr	r3, [pc, #152]	; (80189cc <prvAddNewTaskToReadyList+0xc0>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2b01      	cmp	r3, #1
 8018936:	d110      	bne.n	801895a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018938:	f000 fd66 	bl	8019408 <prvInitialiseTaskLists>
 801893c:	e00d      	b.n	801895a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801893e:	4b25      	ldr	r3, [pc, #148]	; (80189d4 <prvAddNewTaskToReadyList+0xc8>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d109      	bne.n	801895a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018946:	4b22      	ldr	r3, [pc, #136]	; (80189d0 <prvAddNewTaskToReadyList+0xc4>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018950:	429a      	cmp	r2, r3
 8018952:	d802      	bhi.n	801895a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018954:	4a1e      	ldr	r2, [pc, #120]	; (80189d0 <prvAddNewTaskToReadyList+0xc4>)
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801895a:	4b1f      	ldr	r3, [pc, #124]	; (80189d8 <prvAddNewTaskToReadyList+0xcc>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	3301      	adds	r3, #1
 8018960:	4a1d      	ldr	r2, [pc, #116]	; (80189d8 <prvAddNewTaskToReadyList+0xcc>)
 8018962:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018964:	4b1c      	ldr	r3, [pc, #112]	; (80189d8 <prvAddNewTaskToReadyList+0xcc>)
 8018966:	681a      	ldr	r2, [r3, #0]
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018970:	2201      	movs	r2, #1
 8018972:	409a      	lsls	r2, r3
 8018974:	4b19      	ldr	r3, [pc, #100]	; (80189dc <prvAddNewTaskToReadyList+0xd0>)
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	4313      	orrs	r3, r2
 801897a:	4a18      	ldr	r2, [pc, #96]	; (80189dc <prvAddNewTaskToReadyList+0xd0>)
 801897c:	6013      	str	r3, [r2, #0]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018982:	4613      	mov	r3, r2
 8018984:	009b      	lsls	r3, r3, #2
 8018986:	4413      	add	r3, r2
 8018988:	009b      	lsls	r3, r3, #2
 801898a:	4a15      	ldr	r2, [pc, #84]	; (80189e0 <prvAddNewTaskToReadyList+0xd4>)
 801898c:	441a      	add	r2, r3
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	3304      	adds	r3, #4
 8018992:	4619      	mov	r1, r3
 8018994:	4610      	mov	r0, r2
 8018996:	f7ff f834 	bl	8017a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801899a:	f001 fcc3 	bl	801a324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801899e:	4b0d      	ldr	r3, [pc, #52]	; (80189d4 <prvAddNewTaskToReadyList+0xc8>)
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d00e      	beq.n	80189c4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80189a6:	4b0a      	ldr	r3, [pc, #40]	; (80189d0 <prvAddNewTaskToReadyList+0xc4>)
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d207      	bcs.n	80189c4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80189b4:	4b0b      	ldr	r3, [pc, #44]	; (80189e4 <prvAddNewTaskToReadyList+0xd8>)
 80189b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189ba:	601a      	str	r2, [r3, #0]
 80189bc:	f3bf 8f4f 	dsb	sy
 80189c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80189c4:	bf00      	nop
 80189c6:	3708      	adds	r7, #8
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd80      	pop	{r7, pc}
 80189cc:	200037b4 	.word	0x200037b4
 80189d0:	20003614 	.word	0x20003614
 80189d4:	200037c0 	.word	0x200037c0
 80189d8:	200037d0 	.word	0x200037d0
 80189dc:	200037bc 	.word	0x200037bc
 80189e0:	20003618 	.word	0x20003618
 80189e4:	e000ed04 	.word	0xe000ed04

080189e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b08a      	sub	sp, #40	; 0x28
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
 80189f0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80189f2:	2300      	movs	r3, #0
 80189f4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d10a      	bne.n	8018a12 <vTaskDelayUntil+0x2a>
	__asm volatile
 80189fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a00:	f383 8811 	msr	BASEPRI, r3
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	617b      	str	r3, [r7, #20]
}
 8018a0e:	bf00      	nop
 8018a10:	e7fe      	b.n	8018a10 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d10a      	bne.n	8018a2e <vTaskDelayUntil+0x46>
	__asm volatile
 8018a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a1c:	f383 8811 	msr	BASEPRI, r3
 8018a20:	f3bf 8f6f 	isb	sy
 8018a24:	f3bf 8f4f 	dsb	sy
 8018a28:	613b      	str	r3, [r7, #16]
}
 8018a2a:	bf00      	nop
 8018a2c:	e7fe      	b.n	8018a2c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8018a2e:	4b2a      	ldr	r3, [pc, #168]	; (8018ad8 <vTaskDelayUntil+0xf0>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d00a      	beq.n	8018a4c <vTaskDelayUntil+0x64>
	__asm volatile
 8018a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a3a:	f383 8811 	msr	BASEPRI, r3
 8018a3e:	f3bf 8f6f 	isb	sy
 8018a42:	f3bf 8f4f 	dsb	sy
 8018a46:	60fb      	str	r3, [r7, #12]
}
 8018a48:	bf00      	nop
 8018a4a:	e7fe      	b.n	8018a4a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8018a4c:	f000 f8f0 	bl	8018c30 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8018a50:	4b22      	ldr	r3, [pc, #136]	; (8018adc <vTaskDelayUntil+0xf4>)
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	683a      	ldr	r2, [r7, #0]
 8018a5c:	4413      	add	r3, r2
 8018a5e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	6a3a      	ldr	r2, [r7, #32]
 8018a66:	429a      	cmp	r2, r3
 8018a68:	d20b      	bcs.n	8018a82 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	69fa      	ldr	r2, [r7, #28]
 8018a70:	429a      	cmp	r2, r3
 8018a72:	d211      	bcs.n	8018a98 <vTaskDelayUntil+0xb0>
 8018a74:	69fa      	ldr	r2, [r7, #28]
 8018a76:	6a3b      	ldr	r3, [r7, #32]
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d90d      	bls.n	8018a98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8018a80:	e00a      	b.n	8018a98 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	69fa      	ldr	r2, [r7, #28]
 8018a88:	429a      	cmp	r2, r3
 8018a8a:	d303      	bcc.n	8018a94 <vTaskDelayUntil+0xac>
 8018a8c:	69fa      	ldr	r2, [r7, #28]
 8018a8e:	6a3b      	ldr	r3, [r7, #32]
 8018a90:	429a      	cmp	r2, r3
 8018a92:	d901      	bls.n	8018a98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8018a94:	2301      	movs	r3, #1
 8018a96:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	69fa      	ldr	r2, [r7, #28]
 8018a9c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8018a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d006      	beq.n	8018ab2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8018aa4:	69fa      	ldr	r2, [r7, #28]
 8018aa6:	6a3b      	ldr	r3, [r7, #32]
 8018aa8:	1ad3      	subs	r3, r2, r3
 8018aaa:	2100      	movs	r1, #0
 8018aac:	4618      	mov	r0, r3
 8018aae:	f000 ff09 	bl	80198c4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8018ab2:	f000 f8cb 	bl	8018c4c <xTaskResumeAll>
 8018ab6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018ab8:	69bb      	ldr	r3, [r7, #24]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d107      	bne.n	8018ace <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8018abe:	4b08      	ldr	r3, [pc, #32]	; (8018ae0 <vTaskDelayUntil+0xf8>)
 8018ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ac4:	601a      	str	r2, [r3, #0]
 8018ac6:	f3bf 8f4f 	dsb	sy
 8018aca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018ace:	bf00      	nop
 8018ad0:	3728      	adds	r7, #40	; 0x28
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	bd80      	pop	{r7, pc}
 8018ad6:	bf00      	nop
 8018ad8:	200037dc 	.word	0x200037dc
 8018adc:	200037b8 	.word	0x200037b8
 8018ae0:	e000ed04 	.word	0xe000ed04

08018ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b084      	sub	sp, #16
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018aec:	2300      	movs	r3, #0
 8018aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d017      	beq.n	8018b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018af6:	4b13      	ldr	r3, [pc, #76]	; (8018b44 <vTaskDelay+0x60>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d00a      	beq.n	8018b14 <vTaskDelay+0x30>
	__asm volatile
 8018afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b02:	f383 8811 	msr	BASEPRI, r3
 8018b06:	f3bf 8f6f 	isb	sy
 8018b0a:	f3bf 8f4f 	dsb	sy
 8018b0e:	60bb      	str	r3, [r7, #8]
}
 8018b10:	bf00      	nop
 8018b12:	e7fe      	b.n	8018b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018b14:	f000 f88c 	bl	8018c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018b18:	2100      	movs	r1, #0
 8018b1a:	6878      	ldr	r0, [r7, #4]
 8018b1c:	f000 fed2 	bl	80198c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018b20:	f000 f894 	bl	8018c4c <xTaskResumeAll>
 8018b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d107      	bne.n	8018b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018b2c:	4b06      	ldr	r3, [pc, #24]	; (8018b48 <vTaskDelay+0x64>)
 8018b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b32:	601a      	str	r2, [r3, #0]
 8018b34:	f3bf 8f4f 	dsb	sy
 8018b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018b3c:	bf00      	nop
 8018b3e:	3710      	adds	r7, #16
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}
 8018b44:	200037dc 	.word	0x200037dc
 8018b48:	e000ed04 	.word	0xe000ed04

08018b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b08a      	sub	sp, #40	; 0x28
 8018b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018b52:	2300      	movs	r3, #0
 8018b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018b56:	2300      	movs	r3, #0
 8018b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018b5a:	463a      	mov	r2, r7
 8018b5c:	1d39      	adds	r1, r7, #4
 8018b5e:	f107 0308 	add.w	r3, r7, #8
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7ea fbb0 	bl	80032c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018b68:	6839      	ldr	r1, [r7, #0]
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	68ba      	ldr	r2, [r7, #8]
 8018b6e:	9202      	str	r2, [sp, #8]
 8018b70:	9301      	str	r3, [sp, #4]
 8018b72:	2300      	movs	r3, #0
 8018b74:	9300      	str	r3, [sp, #0]
 8018b76:	2300      	movs	r3, #0
 8018b78:	460a      	mov	r2, r1
 8018b7a:	4925      	ldr	r1, [pc, #148]	; (8018c10 <vTaskStartScheduler+0xc4>)
 8018b7c:	4825      	ldr	r0, [pc, #148]	; (8018c14 <vTaskStartScheduler+0xc8>)
 8018b7e:	f7ff fd79 	bl	8018674 <xTaskCreateStatic>
 8018b82:	4603      	mov	r3, r0
 8018b84:	4a24      	ldr	r2, [pc, #144]	; (8018c18 <vTaskStartScheduler+0xcc>)
 8018b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018b88:	4b23      	ldr	r3, [pc, #140]	; (8018c18 <vTaskStartScheduler+0xcc>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d002      	beq.n	8018b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018b90:	2301      	movs	r3, #1
 8018b92:	617b      	str	r3, [r7, #20]
 8018b94:	e001      	b.n	8018b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018b96:	2300      	movs	r3, #0
 8018b98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	2b01      	cmp	r3, #1
 8018b9e:	d102      	bne.n	8018ba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018ba0:	f000 fef6 	bl	8019990 <xTimerCreateTimerTask>
 8018ba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018ba6:	697b      	ldr	r3, [r7, #20]
 8018ba8:	2b01      	cmp	r3, #1
 8018baa:	d11d      	bne.n	8018be8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8018bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb0:	f383 8811 	msr	BASEPRI, r3
 8018bb4:	f3bf 8f6f 	isb	sy
 8018bb8:	f3bf 8f4f 	dsb	sy
 8018bbc:	613b      	str	r3, [r7, #16]
}
 8018bbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018bc0:	4b16      	ldr	r3, [pc, #88]	; (8018c1c <vTaskStartScheduler+0xd0>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	3358      	adds	r3, #88	; 0x58
 8018bc6:	4a16      	ldr	r2, [pc, #88]	; (8018c20 <vTaskStartScheduler+0xd4>)
 8018bc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018bca:	4b16      	ldr	r3, [pc, #88]	; (8018c24 <vTaskStartScheduler+0xd8>)
 8018bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018bd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018bd2:	4b15      	ldr	r3, [pc, #84]	; (8018c28 <vTaskStartScheduler+0xdc>)
 8018bd4:	2201      	movs	r2, #1
 8018bd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018bd8:	4b14      	ldr	r3, [pc, #80]	; (8018c2c <vTaskStartScheduler+0xe0>)
 8018bda:	2200      	movs	r2, #0
 8018bdc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8018bde:	f7ea fb59 	bl	8003294 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018be2:	f001 facd 	bl	801a180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018be6:	e00e      	b.n	8018c06 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018be8:	697b      	ldr	r3, [r7, #20]
 8018bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018bee:	d10a      	bne.n	8018c06 <vTaskStartScheduler+0xba>
	__asm volatile
 8018bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bf4:	f383 8811 	msr	BASEPRI, r3
 8018bf8:	f3bf 8f6f 	isb	sy
 8018bfc:	f3bf 8f4f 	dsb	sy
 8018c00:	60fb      	str	r3, [r7, #12]
}
 8018c02:	bf00      	nop
 8018c04:	e7fe      	b.n	8018c04 <vTaskStartScheduler+0xb8>
}
 8018c06:	bf00      	nop
 8018c08:	3718      	adds	r7, #24
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	080227e4 	.word	0x080227e4
 8018c14:	080193d9 	.word	0x080193d9
 8018c18:	200037d8 	.word	0x200037d8
 8018c1c:	20003614 	.word	0x20003614
 8018c20:	20000110 	.word	0x20000110
 8018c24:	200037d4 	.word	0x200037d4
 8018c28:	200037c0 	.word	0x200037c0
 8018c2c:	200037b8 	.word	0x200037b8

08018c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018c30:	b480      	push	{r7}
 8018c32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018c34:	4b04      	ldr	r3, [pc, #16]	; (8018c48 <vTaskSuspendAll+0x18>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	3301      	adds	r3, #1
 8018c3a:	4a03      	ldr	r2, [pc, #12]	; (8018c48 <vTaskSuspendAll+0x18>)
 8018c3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018c3e:	bf00      	nop
 8018c40:	46bd      	mov	sp, r7
 8018c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c46:	4770      	bx	lr
 8018c48:	200037dc 	.word	0x200037dc

08018c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b084      	sub	sp, #16
 8018c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018c52:	2300      	movs	r3, #0
 8018c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018c56:	2300      	movs	r3, #0
 8018c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018c5a:	4b41      	ldr	r3, [pc, #260]	; (8018d60 <xTaskResumeAll+0x114>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d10a      	bne.n	8018c78 <xTaskResumeAll+0x2c>
	__asm volatile
 8018c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c66:	f383 8811 	msr	BASEPRI, r3
 8018c6a:	f3bf 8f6f 	isb	sy
 8018c6e:	f3bf 8f4f 	dsb	sy
 8018c72:	603b      	str	r3, [r7, #0]
}
 8018c74:	bf00      	nop
 8018c76:	e7fe      	b.n	8018c76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018c78:	f001 fb24 	bl	801a2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018c7c:	4b38      	ldr	r3, [pc, #224]	; (8018d60 <xTaskResumeAll+0x114>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	3b01      	subs	r3, #1
 8018c82:	4a37      	ldr	r2, [pc, #220]	; (8018d60 <xTaskResumeAll+0x114>)
 8018c84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018c86:	4b36      	ldr	r3, [pc, #216]	; (8018d60 <xTaskResumeAll+0x114>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d161      	bne.n	8018d52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018c8e:	4b35      	ldr	r3, [pc, #212]	; (8018d64 <xTaskResumeAll+0x118>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d05d      	beq.n	8018d52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018c96:	e02e      	b.n	8018cf6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c98:	4b33      	ldr	r3, [pc, #204]	; (8018d68 <xTaskResumeAll+0x11c>)
 8018c9a:	68db      	ldr	r3, [r3, #12]
 8018c9c:	68db      	ldr	r3, [r3, #12]
 8018c9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	3318      	adds	r3, #24
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	f7fe ff09 	bl	8017abc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	3304      	adds	r3, #4
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7fe ff04 	bl	8017abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cb8:	2201      	movs	r2, #1
 8018cba:	409a      	lsls	r2, r3
 8018cbc:	4b2b      	ldr	r3, [pc, #172]	; (8018d6c <xTaskResumeAll+0x120>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	4313      	orrs	r3, r2
 8018cc2:	4a2a      	ldr	r2, [pc, #168]	; (8018d6c <xTaskResumeAll+0x120>)
 8018cc4:	6013      	str	r3, [r2, #0]
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cca:	4613      	mov	r3, r2
 8018ccc:	009b      	lsls	r3, r3, #2
 8018cce:	4413      	add	r3, r2
 8018cd0:	009b      	lsls	r3, r3, #2
 8018cd2:	4a27      	ldr	r2, [pc, #156]	; (8018d70 <xTaskResumeAll+0x124>)
 8018cd4:	441a      	add	r2, r3
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	3304      	adds	r3, #4
 8018cda:	4619      	mov	r1, r3
 8018cdc:	4610      	mov	r0, r2
 8018cde:	f7fe fe90 	bl	8017a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ce6:	4b23      	ldr	r3, [pc, #140]	; (8018d74 <xTaskResumeAll+0x128>)
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d302      	bcc.n	8018cf6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8018cf0:	4b21      	ldr	r3, [pc, #132]	; (8018d78 <xTaskResumeAll+0x12c>)
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018cf6:	4b1c      	ldr	r3, [pc, #112]	; (8018d68 <xTaskResumeAll+0x11c>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d1cc      	bne.n	8018c98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d001      	beq.n	8018d08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018d04:	f000 fc22 	bl	801954c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018d08:	4b1c      	ldr	r3, [pc, #112]	; (8018d7c <xTaskResumeAll+0x130>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d010      	beq.n	8018d36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018d14:	f000 f846 	bl	8018da4 <xTaskIncrementTick>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d002      	beq.n	8018d24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8018d1e:	4b16      	ldr	r3, [pc, #88]	; (8018d78 <xTaskResumeAll+0x12c>)
 8018d20:	2201      	movs	r2, #1
 8018d22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	3b01      	subs	r3, #1
 8018d28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d1f1      	bne.n	8018d14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8018d30:	4b12      	ldr	r3, [pc, #72]	; (8018d7c <xTaskResumeAll+0x130>)
 8018d32:	2200      	movs	r2, #0
 8018d34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018d36:	4b10      	ldr	r3, [pc, #64]	; (8018d78 <xTaskResumeAll+0x12c>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d009      	beq.n	8018d52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018d3e:	2301      	movs	r3, #1
 8018d40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018d42:	4b0f      	ldr	r3, [pc, #60]	; (8018d80 <xTaskResumeAll+0x134>)
 8018d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d48:	601a      	str	r2, [r3, #0]
 8018d4a:	f3bf 8f4f 	dsb	sy
 8018d4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018d52:	f001 fae7 	bl	801a324 <vPortExitCritical>

	return xAlreadyYielded;
 8018d56:	68bb      	ldr	r3, [r7, #8]
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3710      	adds	r7, #16
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	200037dc 	.word	0x200037dc
 8018d64:	200037b4 	.word	0x200037b4
 8018d68:	20003774 	.word	0x20003774
 8018d6c:	200037bc 	.word	0x200037bc
 8018d70:	20003618 	.word	0x20003618
 8018d74:	20003614 	.word	0x20003614
 8018d78:	200037c8 	.word	0x200037c8
 8018d7c:	200037c4 	.word	0x200037c4
 8018d80:	e000ed04 	.word	0xe000ed04

08018d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018d84:	b480      	push	{r7}
 8018d86:	b083      	sub	sp, #12
 8018d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018d8a:	4b05      	ldr	r3, [pc, #20]	; (8018da0 <xTaskGetTickCount+0x1c>)
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018d90:	687b      	ldr	r3, [r7, #4]
}
 8018d92:	4618      	mov	r0, r3
 8018d94:	370c      	adds	r7, #12
 8018d96:	46bd      	mov	sp, r7
 8018d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9c:	4770      	bx	lr
 8018d9e:	bf00      	nop
 8018da0:	200037b8 	.word	0x200037b8

08018da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b086      	sub	sp, #24
 8018da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018daa:	2300      	movs	r3, #0
 8018dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018dae:	4b4e      	ldr	r3, [pc, #312]	; (8018ee8 <xTaskIncrementTick+0x144>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	f040 808e 	bne.w	8018ed4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018db8:	4b4c      	ldr	r3, [pc, #304]	; (8018eec <xTaskIncrementTick+0x148>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018dc0:	4a4a      	ldr	r2, [pc, #296]	; (8018eec <xTaskIncrementTick+0x148>)
 8018dc2:	693b      	ldr	r3, [r7, #16]
 8018dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d120      	bne.n	8018e0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018dcc:	4b48      	ldr	r3, [pc, #288]	; (8018ef0 <xTaskIncrementTick+0x14c>)
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d00a      	beq.n	8018dec <xTaskIncrementTick+0x48>
	__asm volatile
 8018dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dda:	f383 8811 	msr	BASEPRI, r3
 8018dde:	f3bf 8f6f 	isb	sy
 8018de2:	f3bf 8f4f 	dsb	sy
 8018de6:	603b      	str	r3, [r7, #0]
}
 8018de8:	bf00      	nop
 8018dea:	e7fe      	b.n	8018dea <xTaskIncrementTick+0x46>
 8018dec:	4b40      	ldr	r3, [pc, #256]	; (8018ef0 <xTaskIncrementTick+0x14c>)
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	60fb      	str	r3, [r7, #12]
 8018df2:	4b40      	ldr	r3, [pc, #256]	; (8018ef4 <xTaskIncrementTick+0x150>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	4a3e      	ldr	r2, [pc, #248]	; (8018ef0 <xTaskIncrementTick+0x14c>)
 8018df8:	6013      	str	r3, [r2, #0]
 8018dfa:	4a3e      	ldr	r2, [pc, #248]	; (8018ef4 <xTaskIncrementTick+0x150>)
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	6013      	str	r3, [r2, #0]
 8018e00:	4b3d      	ldr	r3, [pc, #244]	; (8018ef8 <xTaskIncrementTick+0x154>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	3301      	adds	r3, #1
 8018e06:	4a3c      	ldr	r2, [pc, #240]	; (8018ef8 <xTaskIncrementTick+0x154>)
 8018e08:	6013      	str	r3, [r2, #0]
 8018e0a:	f000 fb9f 	bl	801954c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018e0e:	4b3b      	ldr	r3, [pc, #236]	; (8018efc <xTaskIncrementTick+0x158>)
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	693a      	ldr	r2, [r7, #16]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d348      	bcc.n	8018eaa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e18:	4b35      	ldr	r3, [pc, #212]	; (8018ef0 <xTaskIncrementTick+0x14c>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d104      	bne.n	8018e2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e22:	4b36      	ldr	r3, [pc, #216]	; (8018efc <xTaskIncrementTick+0x158>)
 8018e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e28:	601a      	str	r2, [r3, #0]
					break;
 8018e2a:	e03e      	b.n	8018eaa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e2c:	4b30      	ldr	r3, [pc, #192]	; (8018ef0 <xTaskIncrementTick+0x14c>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	68db      	ldr	r3, [r3, #12]
 8018e32:	68db      	ldr	r3, [r3, #12]
 8018e34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018e36:	68bb      	ldr	r3, [r7, #8]
 8018e38:	685b      	ldr	r3, [r3, #4]
 8018e3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018e3c:	693a      	ldr	r2, [r7, #16]
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d203      	bcs.n	8018e4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018e44:	4a2d      	ldr	r2, [pc, #180]	; (8018efc <xTaskIncrementTick+0x158>)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018e4a:	e02e      	b.n	8018eaa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	3304      	adds	r3, #4
 8018e50:	4618      	mov	r0, r3
 8018e52:	f7fe fe33 	bl	8017abc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018e56:	68bb      	ldr	r3, [r7, #8]
 8018e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d004      	beq.n	8018e68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018e5e:	68bb      	ldr	r3, [r7, #8]
 8018e60:	3318      	adds	r3, #24
 8018e62:	4618      	mov	r0, r3
 8018e64:	f7fe fe2a 	bl	8017abc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e6c:	2201      	movs	r2, #1
 8018e6e:	409a      	lsls	r2, r3
 8018e70:	4b23      	ldr	r3, [pc, #140]	; (8018f00 <xTaskIncrementTick+0x15c>)
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	4313      	orrs	r3, r2
 8018e76:	4a22      	ldr	r2, [pc, #136]	; (8018f00 <xTaskIncrementTick+0x15c>)
 8018e78:	6013      	str	r3, [r2, #0]
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e7e:	4613      	mov	r3, r2
 8018e80:	009b      	lsls	r3, r3, #2
 8018e82:	4413      	add	r3, r2
 8018e84:	009b      	lsls	r3, r3, #2
 8018e86:	4a1f      	ldr	r2, [pc, #124]	; (8018f04 <xTaskIncrementTick+0x160>)
 8018e88:	441a      	add	r2, r3
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	3304      	adds	r3, #4
 8018e8e:	4619      	mov	r1, r3
 8018e90:	4610      	mov	r0, r2
 8018e92:	f7fe fdb6 	bl	8017a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018e96:	68bb      	ldr	r3, [r7, #8]
 8018e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e9a:	4b1b      	ldr	r3, [pc, #108]	; (8018f08 <xTaskIncrementTick+0x164>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	d3b9      	bcc.n	8018e18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018ea4:	2301      	movs	r3, #1
 8018ea6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ea8:	e7b6      	b.n	8018e18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018eaa:	4b17      	ldr	r3, [pc, #92]	; (8018f08 <xTaskIncrementTick+0x164>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eb0:	4914      	ldr	r1, [pc, #80]	; (8018f04 <xTaskIncrementTick+0x160>)
 8018eb2:	4613      	mov	r3, r2
 8018eb4:	009b      	lsls	r3, r3, #2
 8018eb6:	4413      	add	r3, r2
 8018eb8:	009b      	lsls	r3, r3, #2
 8018eba:	440b      	add	r3, r1
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	2b01      	cmp	r3, #1
 8018ec0:	d901      	bls.n	8018ec6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8018ec2:	2301      	movs	r3, #1
 8018ec4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018ec6:	4b11      	ldr	r3, [pc, #68]	; (8018f0c <xTaskIncrementTick+0x168>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d007      	beq.n	8018ede <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8018ece:	2301      	movs	r3, #1
 8018ed0:	617b      	str	r3, [r7, #20]
 8018ed2:	e004      	b.n	8018ede <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018ed4:	4b0e      	ldr	r3, [pc, #56]	; (8018f10 <xTaskIncrementTick+0x16c>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	3301      	adds	r3, #1
 8018eda:	4a0d      	ldr	r2, [pc, #52]	; (8018f10 <xTaskIncrementTick+0x16c>)
 8018edc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018ede:	697b      	ldr	r3, [r7, #20]
}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3718      	adds	r7, #24
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}
 8018ee8:	200037dc 	.word	0x200037dc
 8018eec:	200037b8 	.word	0x200037b8
 8018ef0:	2000376c 	.word	0x2000376c
 8018ef4:	20003770 	.word	0x20003770
 8018ef8:	200037cc 	.word	0x200037cc
 8018efc:	200037d4 	.word	0x200037d4
 8018f00:	200037bc 	.word	0x200037bc
 8018f04:	20003618 	.word	0x20003618
 8018f08:	20003614 	.word	0x20003614
 8018f0c:	200037c8 	.word	0x200037c8
 8018f10:	200037c4 	.word	0x200037c4

08018f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b086      	sub	sp, #24
 8018f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018f1a:	4b3d      	ldr	r3, [pc, #244]	; (8019010 <vTaskSwitchContext+0xfc>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d003      	beq.n	8018f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018f22:	4b3c      	ldr	r3, [pc, #240]	; (8019014 <vTaskSwitchContext+0x100>)
 8018f24:	2201      	movs	r2, #1
 8018f26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018f28:	e06e      	b.n	8019008 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8018f2a:	4b3a      	ldr	r3, [pc, #232]	; (8019014 <vTaskSwitchContext+0x100>)
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8018f30:	f7ea f9b7 	bl	80032a2 <getRunTimeCounterValue>
 8018f34:	4603      	mov	r3, r0
 8018f36:	4a38      	ldr	r2, [pc, #224]	; (8019018 <vTaskSwitchContext+0x104>)
 8018f38:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8018f3a:	4b37      	ldr	r3, [pc, #220]	; (8019018 <vTaskSwitchContext+0x104>)
 8018f3c:	681a      	ldr	r2, [r3, #0]
 8018f3e:	4b37      	ldr	r3, [pc, #220]	; (801901c <vTaskSwitchContext+0x108>)
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	429a      	cmp	r2, r3
 8018f44:	d909      	bls.n	8018f5a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8018f46:	4b36      	ldr	r3, [pc, #216]	; (8019020 <vTaskSwitchContext+0x10c>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8018f4c:	4a32      	ldr	r2, [pc, #200]	; (8019018 <vTaskSwitchContext+0x104>)
 8018f4e:	6810      	ldr	r0, [r2, #0]
 8018f50:	4a32      	ldr	r2, [pc, #200]	; (801901c <vTaskSwitchContext+0x108>)
 8018f52:	6812      	ldr	r2, [r2, #0]
 8018f54:	1a82      	subs	r2, r0, r2
 8018f56:	440a      	add	r2, r1
 8018f58:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8018f5a:	4b2f      	ldr	r3, [pc, #188]	; (8019018 <vTaskSwitchContext+0x104>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	4a2f      	ldr	r2, [pc, #188]	; (801901c <vTaskSwitchContext+0x108>)
 8018f60:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018f62:	4b2f      	ldr	r3, [pc, #188]	; (8019020 <vTaskSwitchContext+0x10c>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	681a      	ldr	r2, [r3, #0]
 8018f68:	4b2d      	ldr	r3, [pc, #180]	; (8019020 <vTaskSwitchContext+0x10c>)
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	d808      	bhi.n	8018f84 <vTaskSwitchContext+0x70>
 8018f72:	4b2b      	ldr	r3, [pc, #172]	; (8019020 <vTaskSwitchContext+0x10c>)
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	4b2a      	ldr	r3, [pc, #168]	; (8019020 <vTaskSwitchContext+0x10c>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	3334      	adds	r3, #52	; 0x34
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	4610      	mov	r0, r2
 8018f80:	f7ea f997 	bl	80032b2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f84:	4b27      	ldr	r3, [pc, #156]	; (8019024 <vTaskSwitchContext+0x110>)
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	fab3 f383 	clz	r3, r3
 8018f90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018f92:	7afb      	ldrb	r3, [r7, #11]
 8018f94:	f1c3 031f 	rsb	r3, r3, #31
 8018f98:	617b      	str	r3, [r7, #20]
 8018f9a:	4923      	ldr	r1, [pc, #140]	; (8019028 <vTaskSwitchContext+0x114>)
 8018f9c:	697a      	ldr	r2, [r7, #20]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	009b      	lsls	r3, r3, #2
 8018fa2:	4413      	add	r3, r2
 8018fa4:	009b      	lsls	r3, r3, #2
 8018fa6:	440b      	add	r3, r1
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d10a      	bne.n	8018fc4 <vTaskSwitchContext+0xb0>
	__asm volatile
 8018fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fb2:	f383 8811 	msr	BASEPRI, r3
 8018fb6:	f3bf 8f6f 	isb	sy
 8018fba:	f3bf 8f4f 	dsb	sy
 8018fbe:	607b      	str	r3, [r7, #4]
}
 8018fc0:	bf00      	nop
 8018fc2:	e7fe      	b.n	8018fc2 <vTaskSwitchContext+0xae>
 8018fc4:	697a      	ldr	r2, [r7, #20]
 8018fc6:	4613      	mov	r3, r2
 8018fc8:	009b      	lsls	r3, r3, #2
 8018fca:	4413      	add	r3, r2
 8018fcc:	009b      	lsls	r3, r3, #2
 8018fce:	4a16      	ldr	r2, [pc, #88]	; (8019028 <vTaskSwitchContext+0x114>)
 8018fd0:	4413      	add	r3, r2
 8018fd2:	613b      	str	r3, [r7, #16]
 8018fd4:	693b      	ldr	r3, [r7, #16]
 8018fd6:	685b      	ldr	r3, [r3, #4]
 8018fd8:	685a      	ldr	r2, [r3, #4]
 8018fda:	693b      	ldr	r3, [r7, #16]
 8018fdc:	605a      	str	r2, [r3, #4]
 8018fde:	693b      	ldr	r3, [r7, #16]
 8018fe0:	685a      	ldr	r2, [r3, #4]
 8018fe2:	693b      	ldr	r3, [r7, #16]
 8018fe4:	3308      	adds	r3, #8
 8018fe6:	429a      	cmp	r2, r3
 8018fe8:	d104      	bne.n	8018ff4 <vTaskSwitchContext+0xe0>
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	685b      	ldr	r3, [r3, #4]
 8018fee:	685a      	ldr	r2, [r3, #4]
 8018ff0:	693b      	ldr	r3, [r7, #16]
 8018ff2:	605a      	str	r2, [r3, #4]
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	685b      	ldr	r3, [r3, #4]
 8018ff8:	68db      	ldr	r3, [r3, #12]
 8018ffa:	4a09      	ldr	r2, [pc, #36]	; (8019020 <vTaskSwitchContext+0x10c>)
 8018ffc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8018ffe:	4b08      	ldr	r3, [pc, #32]	; (8019020 <vTaskSwitchContext+0x10c>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	3358      	adds	r3, #88	; 0x58
 8019004:	4a09      	ldr	r2, [pc, #36]	; (801902c <vTaskSwitchContext+0x118>)
 8019006:	6013      	str	r3, [r2, #0]
}
 8019008:	bf00      	nop
 801900a:	3718      	adds	r7, #24
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}
 8019010:	200037dc 	.word	0x200037dc
 8019014:	200037c8 	.word	0x200037c8
 8019018:	200037e4 	.word	0x200037e4
 801901c:	200037e0 	.word	0x200037e0
 8019020:	20003614 	.word	0x20003614
 8019024:	200037bc 	.word	0x200037bc
 8019028:	20003618 	.word	0x20003618
 801902c:	20000110 	.word	0x20000110

08019030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b084      	sub	sp, #16
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d10a      	bne.n	8019056 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8019040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019044:	f383 8811 	msr	BASEPRI, r3
 8019048:	f3bf 8f6f 	isb	sy
 801904c:	f3bf 8f4f 	dsb	sy
 8019050:	60fb      	str	r3, [r7, #12]
}
 8019052:	bf00      	nop
 8019054:	e7fe      	b.n	8019054 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019056:	4b07      	ldr	r3, [pc, #28]	; (8019074 <vTaskPlaceOnEventList+0x44>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	3318      	adds	r3, #24
 801905c:	4619      	mov	r1, r3
 801905e:	6878      	ldr	r0, [r7, #4]
 8019060:	f7fe fcf3 	bl	8017a4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019064:	2101      	movs	r1, #1
 8019066:	6838      	ldr	r0, [r7, #0]
 8019068:	f000 fc2c 	bl	80198c4 <prvAddCurrentTaskToDelayedList>
}
 801906c:	bf00      	nop
 801906e:	3710      	adds	r7, #16
 8019070:	46bd      	mov	sp, r7
 8019072:	bd80      	pop	{r7, pc}
 8019074:	20003614 	.word	0x20003614

08019078 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b086      	sub	sp, #24
 801907c:	af00      	add	r7, sp, #0
 801907e:	60f8      	str	r0, [r7, #12]
 8019080:	60b9      	str	r1, [r7, #8]
 8019082:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d10a      	bne.n	80190a0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801908e:	f383 8811 	msr	BASEPRI, r3
 8019092:	f3bf 8f6f 	isb	sy
 8019096:	f3bf 8f4f 	dsb	sy
 801909a:	617b      	str	r3, [r7, #20]
}
 801909c:	bf00      	nop
 801909e:	e7fe      	b.n	801909e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80190a0:	4b11      	ldr	r3, [pc, #68]	; (80190e8 <vTaskPlaceOnUnorderedEventList+0x70>)
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d10a      	bne.n	80190be <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80190a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190ac:	f383 8811 	msr	BASEPRI, r3
 80190b0:	f3bf 8f6f 	isb	sy
 80190b4:	f3bf 8f4f 	dsb	sy
 80190b8:	613b      	str	r3, [r7, #16]
}
 80190ba:	bf00      	nop
 80190bc:	e7fe      	b.n	80190bc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80190be:	4b0b      	ldr	r3, [pc, #44]	; (80190ec <vTaskPlaceOnUnorderedEventList+0x74>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	68ba      	ldr	r2, [r7, #8]
 80190c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80190c8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190ca:	4b08      	ldr	r3, [pc, #32]	; (80190ec <vTaskPlaceOnUnorderedEventList+0x74>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	3318      	adds	r3, #24
 80190d0:	4619      	mov	r1, r3
 80190d2:	68f8      	ldr	r0, [r7, #12]
 80190d4:	f7fe fc95 	bl	8017a02 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80190d8:	2101      	movs	r1, #1
 80190da:	6878      	ldr	r0, [r7, #4]
 80190dc:	f000 fbf2 	bl	80198c4 <prvAddCurrentTaskToDelayedList>
}
 80190e0:	bf00      	nop
 80190e2:	3718      	adds	r7, #24
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}
 80190e8:	200037dc 	.word	0x200037dc
 80190ec:	20003614 	.word	0x20003614

080190f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b086      	sub	sp, #24
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	60f8      	str	r0, [r7, #12]
 80190f8:	60b9      	str	r1, [r7, #8]
 80190fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d10a      	bne.n	8019118 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8019102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019106:	f383 8811 	msr	BASEPRI, r3
 801910a:	f3bf 8f6f 	isb	sy
 801910e:	f3bf 8f4f 	dsb	sy
 8019112:	617b      	str	r3, [r7, #20]
}
 8019114:	bf00      	nop
 8019116:	e7fe      	b.n	8019116 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019118:	4b0a      	ldr	r3, [pc, #40]	; (8019144 <vTaskPlaceOnEventListRestricted+0x54>)
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	3318      	adds	r3, #24
 801911e:	4619      	mov	r1, r3
 8019120:	68f8      	ldr	r0, [r7, #12]
 8019122:	f7fe fc6e 	bl	8017a02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d002      	beq.n	8019132 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801912c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019130:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019132:	6879      	ldr	r1, [r7, #4]
 8019134:	68b8      	ldr	r0, [r7, #8]
 8019136:	f000 fbc5 	bl	80198c4 <prvAddCurrentTaskToDelayedList>
	}
 801913a:	bf00      	nop
 801913c:	3718      	adds	r7, #24
 801913e:	46bd      	mov	sp, r7
 8019140:	bd80      	pop	{r7, pc}
 8019142:	bf00      	nop
 8019144:	20003614 	.word	0x20003614

08019148 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b086      	sub	sp, #24
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	68db      	ldr	r3, [r3, #12]
 8019154:	68db      	ldr	r3, [r3, #12]
 8019156:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019158:	693b      	ldr	r3, [r7, #16]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d10a      	bne.n	8019174 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019162:	f383 8811 	msr	BASEPRI, r3
 8019166:	f3bf 8f6f 	isb	sy
 801916a:	f3bf 8f4f 	dsb	sy
 801916e:	60fb      	str	r3, [r7, #12]
}
 8019170:	bf00      	nop
 8019172:	e7fe      	b.n	8019172 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019174:	693b      	ldr	r3, [r7, #16]
 8019176:	3318      	adds	r3, #24
 8019178:	4618      	mov	r0, r3
 801917a:	f7fe fc9f 	bl	8017abc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801917e:	4b1d      	ldr	r3, [pc, #116]	; (80191f4 <xTaskRemoveFromEventList+0xac>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d11c      	bne.n	80191c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019186:	693b      	ldr	r3, [r7, #16]
 8019188:	3304      	adds	r3, #4
 801918a:	4618      	mov	r0, r3
 801918c:	f7fe fc96 	bl	8017abc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019194:	2201      	movs	r2, #1
 8019196:	409a      	lsls	r2, r3
 8019198:	4b17      	ldr	r3, [pc, #92]	; (80191f8 <xTaskRemoveFromEventList+0xb0>)
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	4313      	orrs	r3, r2
 801919e:	4a16      	ldr	r2, [pc, #88]	; (80191f8 <xTaskRemoveFromEventList+0xb0>)
 80191a0:	6013      	str	r3, [r2, #0]
 80191a2:	693b      	ldr	r3, [r7, #16]
 80191a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191a6:	4613      	mov	r3, r2
 80191a8:	009b      	lsls	r3, r3, #2
 80191aa:	4413      	add	r3, r2
 80191ac:	009b      	lsls	r3, r3, #2
 80191ae:	4a13      	ldr	r2, [pc, #76]	; (80191fc <xTaskRemoveFromEventList+0xb4>)
 80191b0:	441a      	add	r2, r3
 80191b2:	693b      	ldr	r3, [r7, #16]
 80191b4:	3304      	adds	r3, #4
 80191b6:	4619      	mov	r1, r3
 80191b8:	4610      	mov	r0, r2
 80191ba:	f7fe fc22 	bl	8017a02 <vListInsertEnd>
 80191be:	e005      	b.n	80191cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80191c0:	693b      	ldr	r3, [r7, #16]
 80191c2:	3318      	adds	r3, #24
 80191c4:	4619      	mov	r1, r3
 80191c6:	480e      	ldr	r0, [pc, #56]	; (8019200 <xTaskRemoveFromEventList+0xb8>)
 80191c8:	f7fe fc1b 	bl	8017a02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80191cc:	693b      	ldr	r3, [r7, #16]
 80191ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191d0:	4b0c      	ldr	r3, [pc, #48]	; (8019204 <xTaskRemoveFromEventList+0xbc>)
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d905      	bls.n	80191e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80191da:	2301      	movs	r3, #1
 80191dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80191de:	4b0a      	ldr	r3, [pc, #40]	; (8019208 <xTaskRemoveFromEventList+0xc0>)
 80191e0:	2201      	movs	r2, #1
 80191e2:	601a      	str	r2, [r3, #0]
 80191e4:	e001      	b.n	80191ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80191e6:	2300      	movs	r3, #0
 80191e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80191ea:	697b      	ldr	r3, [r7, #20]
}
 80191ec:	4618      	mov	r0, r3
 80191ee:	3718      	adds	r7, #24
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	200037dc 	.word	0x200037dc
 80191f8:	200037bc 	.word	0x200037bc
 80191fc:	20003618 	.word	0x20003618
 8019200:	20003774 	.word	0x20003774
 8019204:	20003614 	.word	0x20003614
 8019208:	200037c8 	.word	0x200037c8

0801920c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b086      	sub	sp, #24
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8019216:	4b29      	ldr	r3, [pc, #164]	; (80192bc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d10a      	bne.n	8019234 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019222:	f383 8811 	msr	BASEPRI, r3
 8019226:	f3bf 8f6f 	isb	sy
 801922a:	f3bf 8f4f 	dsb	sy
 801922e:	613b      	str	r3, [r7, #16]
}
 8019230:	bf00      	nop
 8019232:	e7fe      	b.n	8019232 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8019234:	683b      	ldr	r3, [r7, #0]
 8019236:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d10a      	bne.n	8019260 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801924e:	f383 8811 	msr	BASEPRI, r3
 8019252:	f3bf 8f6f 	isb	sy
 8019256:	f3bf 8f4f 	dsb	sy
 801925a:	60fb      	str	r3, [r7, #12]
}
 801925c:	bf00      	nop
 801925e:	e7fe      	b.n	801925e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7fe fc2b 	bl	8017abc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	3304      	adds	r3, #4
 801926a:	4618      	mov	r0, r3
 801926c:	f7fe fc26 	bl	8017abc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8019270:	697b      	ldr	r3, [r7, #20]
 8019272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019274:	2201      	movs	r2, #1
 8019276:	409a      	lsls	r2, r3
 8019278:	4b11      	ldr	r3, [pc, #68]	; (80192c0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	4313      	orrs	r3, r2
 801927e:	4a10      	ldr	r2, [pc, #64]	; (80192c0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019280:	6013      	str	r3, [r2, #0]
 8019282:	697b      	ldr	r3, [r7, #20]
 8019284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019286:	4613      	mov	r3, r2
 8019288:	009b      	lsls	r3, r3, #2
 801928a:	4413      	add	r3, r2
 801928c:	009b      	lsls	r3, r3, #2
 801928e:	4a0d      	ldr	r2, [pc, #52]	; (80192c4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8019290:	441a      	add	r2, r3
 8019292:	697b      	ldr	r3, [r7, #20]
 8019294:	3304      	adds	r3, #4
 8019296:	4619      	mov	r1, r3
 8019298:	4610      	mov	r0, r2
 801929a:	f7fe fbb2 	bl	8017a02 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801929e:	697b      	ldr	r3, [r7, #20]
 80192a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192a2:	4b09      	ldr	r3, [pc, #36]	; (80192c8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192a8:	429a      	cmp	r2, r3
 80192aa:	d902      	bls.n	80192b2 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80192ac:	4b07      	ldr	r3, [pc, #28]	; (80192cc <vTaskRemoveFromUnorderedEventList+0xc0>)
 80192ae:	2201      	movs	r2, #1
 80192b0:	601a      	str	r2, [r3, #0]
	}
}
 80192b2:	bf00      	nop
 80192b4:	3718      	adds	r7, #24
 80192b6:	46bd      	mov	sp, r7
 80192b8:	bd80      	pop	{r7, pc}
 80192ba:	bf00      	nop
 80192bc:	200037dc 	.word	0x200037dc
 80192c0:	200037bc 	.word	0x200037bc
 80192c4:	20003618 	.word	0x20003618
 80192c8:	20003614 	.word	0x20003614
 80192cc:	200037c8 	.word	0x200037c8

080192d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80192d0:	b480      	push	{r7}
 80192d2:	b083      	sub	sp, #12
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80192d8:	4b06      	ldr	r3, [pc, #24]	; (80192f4 <vTaskInternalSetTimeOutState+0x24>)
 80192da:	681a      	ldr	r2, [r3, #0]
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80192e0:	4b05      	ldr	r3, [pc, #20]	; (80192f8 <vTaskInternalSetTimeOutState+0x28>)
 80192e2:	681a      	ldr	r2, [r3, #0]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	605a      	str	r2, [r3, #4]
}
 80192e8:	bf00      	nop
 80192ea:	370c      	adds	r7, #12
 80192ec:	46bd      	mov	sp, r7
 80192ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f2:	4770      	bx	lr
 80192f4:	200037cc 	.word	0x200037cc
 80192f8:	200037b8 	.word	0x200037b8

080192fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b088      	sub	sp, #32
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d10a      	bne.n	8019322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019310:	f383 8811 	msr	BASEPRI, r3
 8019314:	f3bf 8f6f 	isb	sy
 8019318:	f3bf 8f4f 	dsb	sy
 801931c:	613b      	str	r3, [r7, #16]
}
 801931e:	bf00      	nop
 8019320:	e7fe      	b.n	8019320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d10a      	bne.n	801933e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801932c:	f383 8811 	msr	BASEPRI, r3
 8019330:	f3bf 8f6f 	isb	sy
 8019334:	f3bf 8f4f 	dsb	sy
 8019338:	60fb      	str	r3, [r7, #12]
}
 801933a:	bf00      	nop
 801933c:	e7fe      	b.n	801933c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801933e:	f000 ffc1 	bl	801a2c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019342:	4b1d      	ldr	r3, [pc, #116]	; (80193b8 <xTaskCheckForTimeOut+0xbc>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	69ba      	ldr	r2, [r7, #24]
 801934e:	1ad3      	subs	r3, r2, r3
 8019350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801935a:	d102      	bne.n	8019362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801935c:	2300      	movs	r3, #0
 801935e:	61fb      	str	r3, [r7, #28]
 8019360:	e023      	b.n	80193aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	4b15      	ldr	r3, [pc, #84]	; (80193bc <xTaskCheckForTimeOut+0xc0>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	429a      	cmp	r2, r3
 801936c:	d007      	beq.n	801937e <xTaskCheckForTimeOut+0x82>
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	685b      	ldr	r3, [r3, #4]
 8019372:	69ba      	ldr	r2, [r7, #24]
 8019374:	429a      	cmp	r2, r3
 8019376:	d302      	bcc.n	801937e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019378:	2301      	movs	r3, #1
 801937a:	61fb      	str	r3, [r7, #28]
 801937c:	e015      	b.n	80193aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	697a      	ldr	r2, [r7, #20]
 8019384:	429a      	cmp	r2, r3
 8019386:	d20b      	bcs.n	80193a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019388:	683b      	ldr	r3, [r7, #0]
 801938a:	681a      	ldr	r2, [r3, #0]
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	1ad2      	subs	r2, r2, r3
 8019390:	683b      	ldr	r3, [r7, #0]
 8019392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019394:	6878      	ldr	r0, [r7, #4]
 8019396:	f7ff ff9b 	bl	80192d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801939a:	2300      	movs	r3, #0
 801939c:	61fb      	str	r3, [r7, #28]
 801939e:	e004      	b.n	80193aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	2200      	movs	r2, #0
 80193a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80193a6:	2301      	movs	r3, #1
 80193a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80193aa:	f000 ffbb 	bl	801a324 <vPortExitCritical>

	return xReturn;
 80193ae:	69fb      	ldr	r3, [r7, #28]
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	3720      	adds	r7, #32
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}
 80193b8:	200037b8 	.word	0x200037b8
 80193bc:	200037cc 	.word	0x200037cc

080193c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80193c0:	b480      	push	{r7}
 80193c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80193c4:	4b03      	ldr	r3, [pc, #12]	; (80193d4 <vTaskMissedYield+0x14>)
 80193c6:	2201      	movs	r2, #1
 80193c8:	601a      	str	r2, [r3, #0]
}
 80193ca:	bf00      	nop
 80193cc:	46bd      	mov	sp, r7
 80193ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d2:	4770      	bx	lr
 80193d4:	200037c8 	.word	0x200037c8

080193d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80193e0:	f000 f852 	bl	8019488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80193e4:	4b06      	ldr	r3, [pc, #24]	; (8019400 <prvIdleTask+0x28>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2b01      	cmp	r3, #1
 80193ea:	d9f9      	bls.n	80193e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80193ec:	4b05      	ldr	r3, [pc, #20]	; (8019404 <prvIdleTask+0x2c>)
 80193ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193f2:	601a      	str	r2, [r3, #0]
 80193f4:	f3bf 8f4f 	dsb	sy
 80193f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80193fc:	e7f0      	b.n	80193e0 <prvIdleTask+0x8>
 80193fe:	bf00      	nop
 8019400:	20003618 	.word	0x20003618
 8019404:	e000ed04 	.word	0xe000ed04

08019408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801940e:	2300      	movs	r3, #0
 8019410:	607b      	str	r3, [r7, #4]
 8019412:	e00c      	b.n	801942e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	4613      	mov	r3, r2
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	4413      	add	r3, r2
 801941c:	009b      	lsls	r3, r3, #2
 801941e:	4a12      	ldr	r2, [pc, #72]	; (8019468 <prvInitialiseTaskLists+0x60>)
 8019420:	4413      	add	r3, r2
 8019422:	4618      	mov	r0, r3
 8019424:	f7fe fac0 	bl	80179a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	3301      	adds	r3, #1
 801942c:	607b      	str	r3, [r7, #4]
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	2b0e      	cmp	r3, #14
 8019432:	d9ef      	bls.n	8019414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019434:	480d      	ldr	r0, [pc, #52]	; (801946c <prvInitialiseTaskLists+0x64>)
 8019436:	f7fe fab7 	bl	80179a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801943a:	480d      	ldr	r0, [pc, #52]	; (8019470 <prvInitialiseTaskLists+0x68>)
 801943c:	f7fe fab4 	bl	80179a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019440:	480c      	ldr	r0, [pc, #48]	; (8019474 <prvInitialiseTaskLists+0x6c>)
 8019442:	f7fe fab1 	bl	80179a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019446:	480c      	ldr	r0, [pc, #48]	; (8019478 <prvInitialiseTaskLists+0x70>)
 8019448:	f7fe faae 	bl	80179a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801944c:	480b      	ldr	r0, [pc, #44]	; (801947c <prvInitialiseTaskLists+0x74>)
 801944e:	f7fe faab 	bl	80179a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019452:	4b0b      	ldr	r3, [pc, #44]	; (8019480 <prvInitialiseTaskLists+0x78>)
 8019454:	4a05      	ldr	r2, [pc, #20]	; (801946c <prvInitialiseTaskLists+0x64>)
 8019456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019458:	4b0a      	ldr	r3, [pc, #40]	; (8019484 <prvInitialiseTaskLists+0x7c>)
 801945a:	4a05      	ldr	r2, [pc, #20]	; (8019470 <prvInitialiseTaskLists+0x68>)
 801945c:	601a      	str	r2, [r3, #0]
}
 801945e:	bf00      	nop
 8019460:	3708      	adds	r7, #8
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	bf00      	nop
 8019468:	20003618 	.word	0x20003618
 801946c:	20003744 	.word	0x20003744
 8019470:	20003758 	.word	0x20003758
 8019474:	20003774 	.word	0x20003774
 8019478:	20003788 	.word	0x20003788
 801947c:	200037a0 	.word	0x200037a0
 8019480:	2000376c 	.word	0x2000376c
 8019484:	20003770 	.word	0x20003770

08019488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b082      	sub	sp, #8
 801948c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801948e:	e019      	b.n	80194c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019490:	f000 ff18 	bl	801a2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019494:	4b10      	ldr	r3, [pc, #64]	; (80194d8 <prvCheckTasksWaitingTermination+0x50>)
 8019496:	68db      	ldr	r3, [r3, #12]
 8019498:	68db      	ldr	r3, [r3, #12]
 801949a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	3304      	adds	r3, #4
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7fe fb0b 	bl	8017abc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80194a6:	4b0d      	ldr	r3, [pc, #52]	; (80194dc <prvCheckTasksWaitingTermination+0x54>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	3b01      	subs	r3, #1
 80194ac:	4a0b      	ldr	r2, [pc, #44]	; (80194dc <prvCheckTasksWaitingTermination+0x54>)
 80194ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80194b0:	4b0b      	ldr	r3, [pc, #44]	; (80194e0 <prvCheckTasksWaitingTermination+0x58>)
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	3b01      	subs	r3, #1
 80194b6:	4a0a      	ldr	r2, [pc, #40]	; (80194e0 <prvCheckTasksWaitingTermination+0x58>)
 80194b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80194ba:	f000 ff33 	bl	801a324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80194be:	6878      	ldr	r0, [r7, #4]
 80194c0:	f000 f810 	bl	80194e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194c4:	4b06      	ldr	r3, [pc, #24]	; (80194e0 <prvCheckTasksWaitingTermination+0x58>)
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d1e1      	bne.n	8019490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80194cc:	bf00      	nop
 80194ce:	bf00      	nop
 80194d0:	3708      	adds	r7, #8
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd80      	pop	{r7, pc}
 80194d6:	bf00      	nop
 80194d8:	20003788 	.word	0x20003788
 80194dc:	200037b4 	.word	0x200037b4
 80194e0:	2000379c 	.word	0x2000379c

080194e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	3358      	adds	r3, #88	; 0x58
 80194f0:	4618      	mov	r0, r3
 80194f2:	f002 ff8b 	bl	801c40c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d108      	bne.n	8019512 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019504:	4618      	mov	r0, r3
 8019506:	f001 f8cb 	bl	801a6a0 <vPortFree>
				vPortFree( pxTCB );
 801950a:	6878      	ldr	r0, [r7, #4]
 801950c:	f001 f8c8 	bl	801a6a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019510:	e018      	b.n	8019544 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8019518:	2b01      	cmp	r3, #1
 801951a:	d103      	bne.n	8019524 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801951c:	6878      	ldr	r0, [r7, #4]
 801951e:	f001 f8bf 	bl	801a6a0 <vPortFree>
	}
 8019522:	e00f      	b.n	8019544 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801952a:	2b02      	cmp	r3, #2
 801952c:	d00a      	beq.n	8019544 <prvDeleteTCB+0x60>
	__asm volatile
 801952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019532:	f383 8811 	msr	BASEPRI, r3
 8019536:	f3bf 8f6f 	isb	sy
 801953a:	f3bf 8f4f 	dsb	sy
 801953e:	60fb      	str	r3, [r7, #12]
}
 8019540:	bf00      	nop
 8019542:	e7fe      	b.n	8019542 <prvDeleteTCB+0x5e>
	}
 8019544:	bf00      	nop
 8019546:	3710      	adds	r7, #16
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}

0801954c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801954c:	b480      	push	{r7}
 801954e:	b083      	sub	sp, #12
 8019550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019552:	4b0c      	ldr	r3, [pc, #48]	; (8019584 <prvResetNextTaskUnblockTime+0x38>)
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d104      	bne.n	8019566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801955c:	4b0a      	ldr	r3, [pc, #40]	; (8019588 <prvResetNextTaskUnblockTime+0x3c>)
 801955e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019564:	e008      	b.n	8019578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019566:	4b07      	ldr	r3, [pc, #28]	; (8019584 <prvResetNextTaskUnblockTime+0x38>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	68db      	ldr	r3, [r3, #12]
 801956c:	68db      	ldr	r3, [r3, #12]
 801956e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	685b      	ldr	r3, [r3, #4]
 8019574:	4a04      	ldr	r2, [pc, #16]	; (8019588 <prvResetNextTaskUnblockTime+0x3c>)
 8019576:	6013      	str	r3, [r2, #0]
}
 8019578:	bf00      	nop
 801957a:	370c      	adds	r7, #12
 801957c:	46bd      	mov	sp, r7
 801957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019582:	4770      	bx	lr
 8019584:	2000376c 	.word	0x2000376c
 8019588:	200037d4 	.word	0x200037d4

0801958c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801958c:	b480      	push	{r7}
 801958e:	b083      	sub	sp, #12
 8019590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019592:	4b0b      	ldr	r3, [pc, #44]	; (80195c0 <xTaskGetSchedulerState+0x34>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d102      	bne.n	80195a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801959a:	2301      	movs	r3, #1
 801959c:	607b      	str	r3, [r7, #4]
 801959e:	e008      	b.n	80195b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80195a0:	4b08      	ldr	r3, [pc, #32]	; (80195c4 <xTaskGetSchedulerState+0x38>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d102      	bne.n	80195ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80195a8:	2302      	movs	r3, #2
 80195aa:	607b      	str	r3, [r7, #4]
 80195ac:	e001      	b.n	80195b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80195ae:	2300      	movs	r3, #0
 80195b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80195b2:	687b      	ldr	r3, [r7, #4]
	}
 80195b4:	4618      	mov	r0, r3
 80195b6:	370c      	adds	r7, #12
 80195b8:	46bd      	mov	sp, r7
 80195ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195be:	4770      	bx	lr
 80195c0:	200037c0 	.word	0x200037c0
 80195c4:	200037dc 	.word	0x200037dc

080195c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b086      	sub	sp, #24
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80195d4:	2300      	movs	r3, #0
 80195d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d06e      	beq.n	80196bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80195de:	4b3a      	ldr	r3, [pc, #232]	; (80196c8 <xTaskPriorityDisinherit+0x100>)
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	693a      	ldr	r2, [r7, #16]
 80195e4:	429a      	cmp	r2, r3
 80195e6:	d00a      	beq.n	80195fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80195e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195ec:	f383 8811 	msr	BASEPRI, r3
 80195f0:	f3bf 8f6f 	isb	sy
 80195f4:	f3bf 8f4f 	dsb	sy
 80195f8:	60fb      	str	r3, [r7, #12]
}
 80195fa:	bf00      	nop
 80195fc:	e7fe      	b.n	80195fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80195fe:	693b      	ldr	r3, [r7, #16]
 8019600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019602:	2b00      	cmp	r3, #0
 8019604:	d10a      	bne.n	801961c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801960a:	f383 8811 	msr	BASEPRI, r3
 801960e:	f3bf 8f6f 	isb	sy
 8019612:	f3bf 8f4f 	dsb	sy
 8019616:	60bb      	str	r3, [r7, #8]
}
 8019618:	bf00      	nop
 801961a:	e7fe      	b.n	801961a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801961c:	693b      	ldr	r3, [r7, #16]
 801961e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019620:	1e5a      	subs	r2, r3, #1
 8019622:	693b      	ldr	r3, [r7, #16]
 8019624:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019626:	693b      	ldr	r3, [r7, #16]
 8019628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801962a:	693b      	ldr	r3, [r7, #16]
 801962c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801962e:	429a      	cmp	r2, r3
 8019630:	d044      	beq.n	80196bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019632:	693b      	ldr	r3, [r7, #16]
 8019634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019636:	2b00      	cmp	r3, #0
 8019638:	d140      	bne.n	80196bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801963a:	693b      	ldr	r3, [r7, #16]
 801963c:	3304      	adds	r3, #4
 801963e:	4618      	mov	r0, r3
 8019640:	f7fe fa3c 	bl	8017abc <uxListRemove>
 8019644:	4603      	mov	r3, r0
 8019646:	2b00      	cmp	r3, #0
 8019648:	d115      	bne.n	8019676 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801964e:	491f      	ldr	r1, [pc, #124]	; (80196cc <xTaskPriorityDisinherit+0x104>)
 8019650:	4613      	mov	r3, r2
 8019652:	009b      	lsls	r3, r3, #2
 8019654:	4413      	add	r3, r2
 8019656:	009b      	lsls	r3, r3, #2
 8019658:	440b      	add	r3, r1
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d10a      	bne.n	8019676 <xTaskPriorityDisinherit+0xae>
 8019660:	693b      	ldr	r3, [r7, #16]
 8019662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019664:	2201      	movs	r2, #1
 8019666:	fa02 f303 	lsl.w	r3, r2, r3
 801966a:	43da      	mvns	r2, r3
 801966c:	4b18      	ldr	r3, [pc, #96]	; (80196d0 <xTaskPriorityDisinherit+0x108>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	4013      	ands	r3, r2
 8019672:	4a17      	ldr	r2, [pc, #92]	; (80196d0 <xTaskPriorityDisinherit+0x108>)
 8019674:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019676:	693b      	ldr	r3, [r7, #16]
 8019678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801967a:	693b      	ldr	r3, [r7, #16]
 801967c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019682:	f1c3 020f 	rsb	r2, r3, #15
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801968a:	693b      	ldr	r3, [r7, #16]
 801968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801968e:	2201      	movs	r2, #1
 8019690:	409a      	lsls	r2, r3
 8019692:	4b0f      	ldr	r3, [pc, #60]	; (80196d0 <xTaskPriorityDisinherit+0x108>)
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	4313      	orrs	r3, r2
 8019698:	4a0d      	ldr	r2, [pc, #52]	; (80196d0 <xTaskPriorityDisinherit+0x108>)
 801969a:	6013      	str	r3, [r2, #0]
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196a0:	4613      	mov	r3, r2
 80196a2:	009b      	lsls	r3, r3, #2
 80196a4:	4413      	add	r3, r2
 80196a6:	009b      	lsls	r3, r3, #2
 80196a8:	4a08      	ldr	r2, [pc, #32]	; (80196cc <xTaskPriorityDisinherit+0x104>)
 80196aa:	441a      	add	r2, r3
 80196ac:	693b      	ldr	r3, [r7, #16]
 80196ae:	3304      	adds	r3, #4
 80196b0:	4619      	mov	r1, r3
 80196b2:	4610      	mov	r0, r2
 80196b4:	f7fe f9a5 	bl	8017a02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80196b8:	2301      	movs	r3, #1
 80196ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80196bc:	697b      	ldr	r3, [r7, #20]
	}
 80196be:	4618      	mov	r0, r3
 80196c0:	3718      	adds	r7, #24
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	20003614 	.word	0x20003614
 80196cc:	20003618 	.word	0x20003618
 80196d0:	200037bc 	.word	0x200037bc

080196d4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80196d4:	b480      	push	{r7}
 80196d6:	b083      	sub	sp, #12
 80196d8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80196da:	4b09      	ldr	r3, [pc, #36]	; (8019700 <uxTaskResetEventItemValue+0x2c>)
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	699b      	ldr	r3, [r3, #24]
 80196e0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196e2:	4b07      	ldr	r3, [pc, #28]	; (8019700 <uxTaskResetEventItemValue+0x2c>)
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196e8:	4b05      	ldr	r3, [pc, #20]	; (8019700 <uxTaskResetEventItemValue+0x2c>)
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	f1c2 020f 	rsb	r2, r2, #15
 80196f0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80196f2:	687b      	ldr	r3, [r7, #4]
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	370c      	adds	r7, #12
 80196f8:	46bd      	mov	sp, r7
 80196fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fe:	4770      	bx	lr
 8019700:	20003614 	.word	0x20003614

08019704 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8019704:	b580      	push	{r7, lr}
 8019706:	b084      	sub	sp, #16
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801970e:	f000 fdd9 	bl	801a2c4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8019712:	4b20      	ldr	r3, [pc, #128]	; (8019794 <ulTaskNotifyTake+0x90>)
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801971a:	2b00      	cmp	r3, #0
 801971c:	d113      	bne.n	8019746 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801971e:	4b1d      	ldr	r3, [pc, #116]	; (8019794 <ulTaskNotifyTake+0x90>)
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	2201      	movs	r2, #1
 8019724:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d00b      	beq.n	8019746 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801972e:	2101      	movs	r1, #1
 8019730:	6838      	ldr	r0, [r7, #0]
 8019732:	f000 f8c7 	bl	80198c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8019736:	4b18      	ldr	r3, [pc, #96]	; (8019798 <ulTaskNotifyTake+0x94>)
 8019738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801973c:	601a      	str	r2, [r3, #0]
 801973e:	f3bf 8f4f 	dsb	sy
 8019742:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8019746:	f000 fded 	bl	801a324 <vPortExitCritical>

		taskENTER_CRITICAL();
 801974a:	f000 fdbb 	bl	801a2c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801974e:	4b11      	ldr	r3, [pc, #68]	; (8019794 <ulTaskNotifyTake+0x90>)
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8019756:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d00e      	beq.n	801977c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d005      	beq.n	8019770 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8019764:	4b0b      	ldr	r3, [pc, #44]	; (8019794 <ulTaskNotifyTake+0x90>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	2200      	movs	r2, #0
 801976a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801976e:	e005      	b.n	801977c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8019770:	4b08      	ldr	r3, [pc, #32]	; (8019794 <ulTaskNotifyTake+0x90>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	68fa      	ldr	r2, [r7, #12]
 8019776:	3a01      	subs	r2, #1
 8019778:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801977c:	4b05      	ldr	r3, [pc, #20]	; (8019794 <ulTaskNotifyTake+0x90>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	2200      	movs	r2, #0
 8019782:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8019786:	f000 fdcd 	bl	801a324 <vPortExitCritical>

		return ulReturn;
 801978a:	68fb      	ldr	r3, [r7, #12]
	}
 801978c:	4618      	mov	r0, r3
 801978e:	3710      	adds	r7, #16
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}
 8019794:	20003614 	.word	0x20003614
 8019798:	e000ed04 	.word	0xe000ed04

0801979c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801979c:	b580      	push	{r7, lr}
 801979e:	b08a      	sub	sp, #40	; 0x28
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d10a      	bne.n	80197c2 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80197ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b0:	f383 8811 	msr	BASEPRI, r3
 80197b4:	f3bf 8f6f 	isb	sy
 80197b8:	f3bf 8f4f 	dsb	sy
 80197bc:	61bb      	str	r3, [r7, #24]
}
 80197be:	bf00      	nop
 80197c0:	e7fe      	b.n	80197c0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80197c2:	f000 fe61 	bl	801a488 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80197ca:	f3ef 8211 	mrs	r2, BASEPRI
 80197ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197d2:	f383 8811 	msr	BASEPRI, r3
 80197d6:	f3bf 8f6f 	isb	sy
 80197da:	f3bf 8f4f 	dsb	sy
 80197de:	617a      	str	r2, [r7, #20]
 80197e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80197e2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80197e4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80197e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80197ec:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80197ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f0:	2202      	movs	r2, #2
 80197f2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80197f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80197fc:	1c5a      	adds	r2, r3, #1
 80197fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019800:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8019804:	7ffb      	ldrb	r3, [r7, #31]
 8019806:	2b01      	cmp	r3, #1
 8019808:	d145      	bne.n	8019896 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801980e:	2b00      	cmp	r3, #0
 8019810:	d00a      	beq.n	8019828 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8019812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019816:	f383 8811 	msr	BASEPRI, r3
 801981a:	f3bf 8f6f 	isb	sy
 801981e:	f3bf 8f4f 	dsb	sy
 8019822:	60fb      	str	r3, [r7, #12]
}
 8019824:	bf00      	nop
 8019826:	e7fe      	b.n	8019826 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019828:	4b20      	ldr	r3, [pc, #128]	; (80198ac <vTaskNotifyGiveFromISR+0x110>)
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d11c      	bne.n	801986a <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019832:	3304      	adds	r3, #4
 8019834:	4618      	mov	r0, r3
 8019836:	f7fe f941 	bl	8017abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801983e:	2201      	movs	r2, #1
 8019840:	409a      	lsls	r2, r3
 8019842:	4b1b      	ldr	r3, [pc, #108]	; (80198b0 <vTaskNotifyGiveFromISR+0x114>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	4313      	orrs	r3, r2
 8019848:	4a19      	ldr	r2, [pc, #100]	; (80198b0 <vTaskNotifyGiveFromISR+0x114>)
 801984a:	6013      	str	r3, [r2, #0]
 801984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019850:	4613      	mov	r3, r2
 8019852:	009b      	lsls	r3, r3, #2
 8019854:	4413      	add	r3, r2
 8019856:	009b      	lsls	r3, r3, #2
 8019858:	4a16      	ldr	r2, [pc, #88]	; (80198b4 <vTaskNotifyGiveFromISR+0x118>)
 801985a:	441a      	add	r2, r3
 801985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801985e:	3304      	adds	r3, #4
 8019860:	4619      	mov	r1, r3
 8019862:	4610      	mov	r0, r2
 8019864:	f7fe f8cd 	bl	8017a02 <vListInsertEnd>
 8019868:	e005      	b.n	8019876 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801986c:	3318      	adds	r3, #24
 801986e:	4619      	mov	r1, r3
 8019870:	4811      	ldr	r0, [pc, #68]	; (80198b8 <vTaskNotifyGiveFromISR+0x11c>)
 8019872:	f7fe f8c6 	bl	8017a02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801987a:	4b10      	ldr	r3, [pc, #64]	; (80198bc <vTaskNotifyGiveFromISR+0x120>)
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019880:	429a      	cmp	r2, r3
 8019882:	d908      	bls.n	8019896 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d002      	beq.n	8019890 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	2201      	movs	r2, #1
 801988e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8019890:	4b0b      	ldr	r3, [pc, #44]	; (80198c0 <vTaskNotifyGiveFromISR+0x124>)
 8019892:	2201      	movs	r2, #1
 8019894:	601a      	str	r2, [r3, #0]
 8019896:	6a3b      	ldr	r3, [r7, #32]
 8019898:	60bb      	str	r3, [r7, #8]
	__asm volatile
 801989a:	68bb      	ldr	r3, [r7, #8]
 801989c:	f383 8811 	msr	BASEPRI, r3
}
 80198a0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80198a2:	bf00      	nop
 80198a4:	3728      	adds	r7, #40	; 0x28
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}
 80198aa:	bf00      	nop
 80198ac:	200037dc 	.word	0x200037dc
 80198b0:	200037bc 	.word	0x200037bc
 80198b4:	20003618 	.word	0x20003618
 80198b8:	20003774 	.word	0x20003774
 80198bc:	20003614 	.word	0x20003614
 80198c0:	200037c8 	.word	0x200037c8

080198c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b084      	sub	sp, #16
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
 80198cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80198ce:	4b29      	ldr	r3, [pc, #164]	; (8019974 <prvAddCurrentTaskToDelayedList+0xb0>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80198d4:	4b28      	ldr	r3, [pc, #160]	; (8019978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	3304      	adds	r3, #4
 80198da:	4618      	mov	r0, r3
 80198dc:	f7fe f8ee 	bl	8017abc <uxListRemove>
 80198e0:	4603      	mov	r3, r0
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d10b      	bne.n	80198fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80198e6:	4b24      	ldr	r3, [pc, #144]	; (8019978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198ec:	2201      	movs	r2, #1
 80198ee:	fa02 f303 	lsl.w	r3, r2, r3
 80198f2:	43da      	mvns	r2, r3
 80198f4:	4b21      	ldr	r3, [pc, #132]	; (801997c <prvAddCurrentTaskToDelayedList+0xb8>)
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	4013      	ands	r3, r2
 80198fa:	4a20      	ldr	r2, [pc, #128]	; (801997c <prvAddCurrentTaskToDelayedList+0xb8>)
 80198fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019904:	d10a      	bne.n	801991c <prvAddCurrentTaskToDelayedList+0x58>
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d007      	beq.n	801991c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801990c:	4b1a      	ldr	r3, [pc, #104]	; (8019978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	3304      	adds	r3, #4
 8019912:	4619      	mov	r1, r3
 8019914:	481a      	ldr	r0, [pc, #104]	; (8019980 <prvAddCurrentTaskToDelayedList+0xbc>)
 8019916:	f7fe f874 	bl	8017a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801991a:	e026      	b.n	801996a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801991c:	68fa      	ldr	r2, [r7, #12]
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	4413      	add	r3, r2
 8019922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019924:	4b14      	ldr	r3, [pc, #80]	; (8019978 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	68ba      	ldr	r2, [r7, #8]
 801992a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801992c:	68ba      	ldr	r2, [r7, #8]
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	429a      	cmp	r2, r3
 8019932:	d209      	bcs.n	8019948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019934:	4b13      	ldr	r3, [pc, #76]	; (8019984 <prvAddCurrentTaskToDelayedList+0xc0>)
 8019936:	681a      	ldr	r2, [r3, #0]
 8019938:	4b0f      	ldr	r3, [pc, #60]	; (8019978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	3304      	adds	r3, #4
 801993e:	4619      	mov	r1, r3
 8019940:	4610      	mov	r0, r2
 8019942:	f7fe f882 	bl	8017a4a <vListInsert>
}
 8019946:	e010      	b.n	801996a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019948:	4b0f      	ldr	r3, [pc, #60]	; (8019988 <prvAddCurrentTaskToDelayedList+0xc4>)
 801994a:	681a      	ldr	r2, [r3, #0]
 801994c:	4b0a      	ldr	r3, [pc, #40]	; (8019978 <prvAddCurrentTaskToDelayedList+0xb4>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	3304      	adds	r3, #4
 8019952:	4619      	mov	r1, r3
 8019954:	4610      	mov	r0, r2
 8019956:	f7fe f878 	bl	8017a4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801995a:	4b0c      	ldr	r3, [pc, #48]	; (801998c <prvAddCurrentTaskToDelayedList+0xc8>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	68ba      	ldr	r2, [r7, #8]
 8019960:	429a      	cmp	r2, r3
 8019962:	d202      	bcs.n	801996a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8019964:	4a09      	ldr	r2, [pc, #36]	; (801998c <prvAddCurrentTaskToDelayedList+0xc8>)
 8019966:	68bb      	ldr	r3, [r7, #8]
 8019968:	6013      	str	r3, [r2, #0]
}
 801996a:	bf00      	nop
 801996c:	3710      	adds	r7, #16
 801996e:	46bd      	mov	sp, r7
 8019970:	bd80      	pop	{r7, pc}
 8019972:	bf00      	nop
 8019974:	200037b8 	.word	0x200037b8
 8019978:	20003614 	.word	0x20003614
 801997c:	200037bc 	.word	0x200037bc
 8019980:	200037a0 	.word	0x200037a0
 8019984:	20003770 	.word	0x20003770
 8019988:	2000376c 	.word	0x2000376c
 801998c:	200037d4 	.word	0x200037d4

08019990 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b08a      	sub	sp, #40	; 0x28
 8019994:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019996:	2300      	movs	r3, #0
 8019998:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801999a:	f000 fb07 	bl	8019fac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801999e:	4b1c      	ldr	r3, [pc, #112]	; (8019a10 <xTimerCreateTimerTask+0x80>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d021      	beq.n	80199ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80199a6:	2300      	movs	r3, #0
 80199a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80199aa:	2300      	movs	r3, #0
 80199ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80199ae:	1d3a      	adds	r2, r7, #4
 80199b0:	f107 0108 	add.w	r1, r7, #8
 80199b4:	f107 030c 	add.w	r3, r7, #12
 80199b8:	4618      	mov	r0, r3
 80199ba:	f7e9 fc9f 	bl	80032fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80199be:	6879      	ldr	r1, [r7, #4]
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	68fa      	ldr	r2, [r7, #12]
 80199c4:	9202      	str	r2, [sp, #8]
 80199c6:	9301      	str	r3, [sp, #4]
 80199c8:	2302      	movs	r3, #2
 80199ca:	9300      	str	r3, [sp, #0]
 80199cc:	2300      	movs	r3, #0
 80199ce:	460a      	mov	r2, r1
 80199d0:	4910      	ldr	r1, [pc, #64]	; (8019a14 <xTimerCreateTimerTask+0x84>)
 80199d2:	4811      	ldr	r0, [pc, #68]	; (8019a18 <xTimerCreateTimerTask+0x88>)
 80199d4:	f7fe fe4e 	bl	8018674 <xTaskCreateStatic>
 80199d8:	4603      	mov	r3, r0
 80199da:	4a10      	ldr	r2, [pc, #64]	; (8019a1c <xTimerCreateTimerTask+0x8c>)
 80199dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80199de:	4b0f      	ldr	r3, [pc, #60]	; (8019a1c <xTimerCreateTimerTask+0x8c>)
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d001      	beq.n	80199ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80199e6:	2301      	movs	r3, #1
 80199e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d10a      	bne.n	8019a06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80199f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199f4:	f383 8811 	msr	BASEPRI, r3
 80199f8:	f3bf 8f6f 	isb	sy
 80199fc:	f3bf 8f4f 	dsb	sy
 8019a00:	613b      	str	r3, [r7, #16]
}
 8019a02:	bf00      	nop
 8019a04:	e7fe      	b.n	8019a04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019a06:	697b      	ldr	r3, [r7, #20]
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	3718      	adds	r7, #24
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}
 8019a10:	20003818 	.word	0x20003818
 8019a14:	08022814 	.word	0x08022814
 8019a18:	08019b55 	.word	0x08019b55
 8019a1c:	2000381c 	.word	0x2000381c

08019a20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b08a      	sub	sp, #40	; 0x28
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	60f8      	str	r0, [r7, #12]
 8019a28:	60b9      	str	r1, [r7, #8]
 8019a2a:	607a      	str	r2, [r7, #4]
 8019a2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d10a      	bne.n	8019a4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8019a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a3c:	f383 8811 	msr	BASEPRI, r3
 8019a40:	f3bf 8f6f 	isb	sy
 8019a44:	f3bf 8f4f 	dsb	sy
 8019a48:	623b      	str	r3, [r7, #32]
}
 8019a4a:	bf00      	nop
 8019a4c:	e7fe      	b.n	8019a4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019a4e:	4b1a      	ldr	r3, [pc, #104]	; (8019ab8 <xTimerGenericCommand+0x98>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d02a      	beq.n	8019aac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019a62:	68bb      	ldr	r3, [r7, #8]
 8019a64:	2b05      	cmp	r3, #5
 8019a66:	dc18      	bgt.n	8019a9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019a68:	f7ff fd90 	bl	801958c <xTaskGetSchedulerState>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	2b02      	cmp	r3, #2
 8019a70:	d109      	bne.n	8019a86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019a72:	4b11      	ldr	r3, [pc, #68]	; (8019ab8 <xTimerGenericCommand+0x98>)
 8019a74:	6818      	ldr	r0, [r3, #0]
 8019a76:	f107 0110 	add.w	r1, r7, #16
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a7e:	f7fe f985 	bl	8017d8c <xQueueGenericSend>
 8019a82:	6278      	str	r0, [r7, #36]	; 0x24
 8019a84:	e012      	b.n	8019aac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019a86:	4b0c      	ldr	r3, [pc, #48]	; (8019ab8 <xTimerGenericCommand+0x98>)
 8019a88:	6818      	ldr	r0, [r3, #0]
 8019a8a:	f107 0110 	add.w	r1, r7, #16
 8019a8e:	2300      	movs	r3, #0
 8019a90:	2200      	movs	r2, #0
 8019a92:	f7fe f97b 	bl	8017d8c <xQueueGenericSend>
 8019a96:	6278      	str	r0, [r7, #36]	; 0x24
 8019a98:	e008      	b.n	8019aac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019a9a:	4b07      	ldr	r3, [pc, #28]	; (8019ab8 <xTimerGenericCommand+0x98>)
 8019a9c:	6818      	ldr	r0, [r3, #0]
 8019a9e:	f107 0110 	add.w	r1, r7, #16
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	683a      	ldr	r2, [r7, #0]
 8019aa6:	f7fe fa6f 	bl	8017f88 <xQueueGenericSendFromISR>
 8019aaa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019aae:	4618      	mov	r0, r3
 8019ab0:	3728      	adds	r7, #40	; 0x28
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	20003818 	.word	0x20003818

08019abc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b088      	sub	sp, #32
 8019ac0:	af02      	add	r7, sp, #8
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ac6:	4b22      	ldr	r3, [pc, #136]	; (8019b50 <prvProcessExpiredTimer+0x94>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	68db      	ldr	r3, [r3, #12]
 8019acc:	68db      	ldr	r3, [r3, #12]
 8019ace:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ad0:	697b      	ldr	r3, [r7, #20]
 8019ad2:	3304      	adds	r3, #4
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f7fd fff1 	bl	8017abc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019ada:	697b      	ldr	r3, [r7, #20]
 8019adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ae0:	f003 0304 	and.w	r3, r3, #4
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d022      	beq.n	8019b2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019ae8:	697b      	ldr	r3, [r7, #20]
 8019aea:	699a      	ldr	r2, [r3, #24]
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	18d1      	adds	r1, r2, r3
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	683a      	ldr	r2, [r7, #0]
 8019af4:	6978      	ldr	r0, [r7, #20]
 8019af6:	f000 f8d1 	bl	8019c9c <prvInsertTimerInActiveList>
 8019afa:	4603      	mov	r3, r0
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d01f      	beq.n	8019b40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019b00:	2300      	movs	r3, #0
 8019b02:	9300      	str	r3, [sp, #0]
 8019b04:	2300      	movs	r3, #0
 8019b06:	687a      	ldr	r2, [r7, #4]
 8019b08:	2100      	movs	r1, #0
 8019b0a:	6978      	ldr	r0, [r7, #20]
 8019b0c:	f7ff ff88 	bl	8019a20 <xTimerGenericCommand>
 8019b10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019b12:	693b      	ldr	r3, [r7, #16]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d113      	bne.n	8019b40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b1c:	f383 8811 	msr	BASEPRI, r3
 8019b20:	f3bf 8f6f 	isb	sy
 8019b24:	f3bf 8f4f 	dsb	sy
 8019b28:	60fb      	str	r3, [r7, #12]
}
 8019b2a:	bf00      	nop
 8019b2c:	e7fe      	b.n	8019b2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019b2e:	697b      	ldr	r3, [r7, #20]
 8019b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019b34:	f023 0301 	bic.w	r3, r3, #1
 8019b38:	b2da      	uxtb	r2, r3
 8019b3a:	697b      	ldr	r3, [r7, #20]
 8019b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	6a1b      	ldr	r3, [r3, #32]
 8019b44:	6978      	ldr	r0, [r7, #20]
 8019b46:	4798      	blx	r3
}
 8019b48:	bf00      	nop
 8019b4a:	3718      	adds	r7, #24
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}
 8019b50:	20003810 	.word	0x20003810

08019b54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019b54:	b580      	push	{r7, lr}
 8019b56:	b084      	sub	sp, #16
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b5c:	f107 0308 	add.w	r3, r7, #8
 8019b60:	4618      	mov	r0, r3
 8019b62:	f000 f857 	bl	8019c14 <prvGetNextExpireTime>
 8019b66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019b68:	68bb      	ldr	r3, [r7, #8]
 8019b6a:	4619      	mov	r1, r3
 8019b6c:	68f8      	ldr	r0, [r7, #12]
 8019b6e:	f000 f803 	bl	8019b78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019b72:	f000 f8d5 	bl	8019d20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b76:	e7f1      	b.n	8019b5c <prvTimerTask+0x8>

08019b78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b084      	sub	sp, #16
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
 8019b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019b82:	f7ff f855 	bl	8018c30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b86:	f107 0308 	add.w	r3, r7, #8
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f000 f866 	bl	8019c5c <prvSampleTimeNow>
 8019b90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019b92:	68bb      	ldr	r3, [r7, #8]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d130      	bne.n	8019bfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d10a      	bne.n	8019bb4 <prvProcessTimerOrBlockTask+0x3c>
 8019b9e:	687a      	ldr	r2, [r7, #4]
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d806      	bhi.n	8019bb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019ba6:	f7ff f851 	bl	8018c4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019baa:	68f9      	ldr	r1, [r7, #12]
 8019bac:	6878      	ldr	r0, [r7, #4]
 8019bae:	f7ff ff85 	bl	8019abc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019bb2:	e024      	b.n	8019bfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d008      	beq.n	8019bcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019bba:	4b13      	ldr	r3, [pc, #76]	; (8019c08 <prvProcessTimerOrBlockTask+0x90>)
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d101      	bne.n	8019bc8 <prvProcessTimerOrBlockTask+0x50>
 8019bc4:	2301      	movs	r3, #1
 8019bc6:	e000      	b.n	8019bca <prvProcessTimerOrBlockTask+0x52>
 8019bc8:	2300      	movs	r3, #0
 8019bca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019bcc:	4b0f      	ldr	r3, [pc, #60]	; (8019c0c <prvProcessTimerOrBlockTask+0x94>)
 8019bce:	6818      	ldr	r0, [r3, #0]
 8019bd0:	687a      	ldr	r2, [r7, #4]
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	1ad3      	subs	r3, r2, r3
 8019bd6:	683a      	ldr	r2, [r7, #0]
 8019bd8:	4619      	mov	r1, r3
 8019bda:	f7fe fd17 	bl	801860c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019bde:	f7ff f835 	bl	8018c4c <xTaskResumeAll>
 8019be2:	4603      	mov	r3, r0
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d10a      	bne.n	8019bfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019be8:	4b09      	ldr	r3, [pc, #36]	; (8019c10 <prvProcessTimerOrBlockTask+0x98>)
 8019bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019bee:	601a      	str	r2, [r3, #0]
 8019bf0:	f3bf 8f4f 	dsb	sy
 8019bf4:	f3bf 8f6f 	isb	sy
}
 8019bf8:	e001      	b.n	8019bfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019bfa:	f7ff f827 	bl	8018c4c <xTaskResumeAll>
}
 8019bfe:	bf00      	nop
 8019c00:	3710      	adds	r7, #16
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}
 8019c06:	bf00      	nop
 8019c08:	20003814 	.word	0x20003814
 8019c0c:	20003818 	.word	0x20003818
 8019c10:	e000ed04 	.word	0xe000ed04

08019c14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019c14:	b480      	push	{r7}
 8019c16:	b085      	sub	sp, #20
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019c1c:	4b0e      	ldr	r3, [pc, #56]	; (8019c58 <prvGetNextExpireTime+0x44>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d101      	bne.n	8019c2a <prvGetNextExpireTime+0x16>
 8019c26:	2201      	movs	r2, #1
 8019c28:	e000      	b.n	8019c2c <prvGetNextExpireTime+0x18>
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d105      	bne.n	8019c44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019c38:	4b07      	ldr	r3, [pc, #28]	; (8019c58 <prvGetNextExpireTime+0x44>)
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	68db      	ldr	r3, [r3, #12]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	60fb      	str	r3, [r7, #12]
 8019c42:	e001      	b.n	8019c48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019c44:	2300      	movs	r3, #0
 8019c46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019c48:	68fb      	ldr	r3, [r7, #12]
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	3714      	adds	r7, #20
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c54:	4770      	bx	lr
 8019c56:	bf00      	nop
 8019c58:	20003810 	.word	0x20003810

08019c5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b084      	sub	sp, #16
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019c64:	f7ff f88e 	bl	8018d84 <xTaskGetTickCount>
 8019c68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019c6a:	4b0b      	ldr	r3, [pc, #44]	; (8019c98 <prvSampleTimeNow+0x3c>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	68fa      	ldr	r2, [r7, #12]
 8019c70:	429a      	cmp	r2, r3
 8019c72:	d205      	bcs.n	8019c80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019c74:	f000 f936 	bl	8019ee4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2201      	movs	r2, #1
 8019c7c:	601a      	str	r2, [r3, #0]
 8019c7e:	e002      	b.n	8019c86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2200      	movs	r2, #0
 8019c84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019c86:	4a04      	ldr	r2, [pc, #16]	; (8019c98 <prvSampleTimeNow+0x3c>)
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019c8c:	68fb      	ldr	r3, [r7, #12]
}
 8019c8e:	4618      	mov	r0, r3
 8019c90:	3710      	adds	r7, #16
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	20003820 	.word	0x20003820

08019c9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b086      	sub	sp, #24
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	60f8      	str	r0, [r7, #12]
 8019ca4:	60b9      	str	r1, [r7, #8]
 8019ca6:	607a      	str	r2, [r7, #4]
 8019ca8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019caa:	2300      	movs	r3, #0
 8019cac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	68ba      	ldr	r2, [r7, #8]
 8019cb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	68fa      	ldr	r2, [r7, #12]
 8019cb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019cba:	68ba      	ldr	r2, [r7, #8]
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	d812      	bhi.n	8019ce8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019cc2:	687a      	ldr	r2, [r7, #4]
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	1ad2      	subs	r2, r2, r3
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	699b      	ldr	r3, [r3, #24]
 8019ccc:	429a      	cmp	r2, r3
 8019cce:	d302      	bcc.n	8019cd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019cd0:	2301      	movs	r3, #1
 8019cd2:	617b      	str	r3, [r7, #20]
 8019cd4:	e01b      	b.n	8019d0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019cd6:	4b10      	ldr	r3, [pc, #64]	; (8019d18 <prvInsertTimerInActiveList+0x7c>)
 8019cd8:	681a      	ldr	r2, [r3, #0]
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	3304      	adds	r3, #4
 8019cde:	4619      	mov	r1, r3
 8019ce0:	4610      	mov	r0, r2
 8019ce2:	f7fd feb2 	bl	8017a4a <vListInsert>
 8019ce6:	e012      	b.n	8019d0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	429a      	cmp	r2, r3
 8019cee:	d206      	bcs.n	8019cfe <prvInsertTimerInActiveList+0x62>
 8019cf0:	68ba      	ldr	r2, [r7, #8]
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	d302      	bcc.n	8019cfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019cf8:	2301      	movs	r3, #1
 8019cfa:	617b      	str	r3, [r7, #20]
 8019cfc:	e007      	b.n	8019d0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019cfe:	4b07      	ldr	r3, [pc, #28]	; (8019d1c <prvInsertTimerInActiveList+0x80>)
 8019d00:	681a      	ldr	r2, [r3, #0]
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	3304      	adds	r3, #4
 8019d06:	4619      	mov	r1, r3
 8019d08:	4610      	mov	r0, r2
 8019d0a:	f7fd fe9e 	bl	8017a4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019d0e:	697b      	ldr	r3, [r7, #20]
}
 8019d10:	4618      	mov	r0, r3
 8019d12:	3718      	adds	r7, #24
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}
 8019d18:	20003814 	.word	0x20003814
 8019d1c:	20003810 	.word	0x20003810

08019d20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b08e      	sub	sp, #56	; 0x38
 8019d24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019d26:	e0ca      	b.n	8019ebe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	da18      	bge.n	8019d60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019d2e:	1d3b      	adds	r3, r7, #4
 8019d30:	3304      	adds	r3, #4
 8019d32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d10a      	bne.n	8019d50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d3e:	f383 8811 	msr	BASEPRI, r3
 8019d42:	f3bf 8f6f 	isb	sy
 8019d46:	f3bf 8f4f 	dsb	sy
 8019d4a:	61fb      	str	r3, [r7, #28]
}
 8019d4c:	bf00      	nop
 8019d4e:	e7fe      	b.n	8019d4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d56:	6850      	ldr	r0, [r2, #4]
 8019d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d5a:	6892      	ldr	r2, [r2, #8]
 8019d5c:	4611      	mov	r1, r2
 8019d5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	f2c0 80aa 	blt.w	8019ebc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d6e:	695b      	ldr	r3, [r3, #20]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d004      	beq.n	8019d7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d76:	3304      	adds	r3, #4
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7fd fe9f 	bl	8017abc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019d7e:	463b      	mov	r3, r7
 8019d80:	4618      	mov	r0, r3
 8019d82:	f7ff ff6b 	bl	8019c5c <prvSampleTimeNow>
 8019d86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	2b09      	cmp	r3, #9
 8019d8c:	f200 8097 	bhi.w	8019ebe <prvProcessReceivedCommands+0x19e>
 8019d90:	a201      	add	r2, pc, #4	; (adr r2, 8019d98 <prvProcessReceivedCommands+0x78>)
 8019d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d96:	bf00      	nop
 8019d98:	08019dc1 	.word	0x08019dc1
 8019d9c:	08019dc1 	.word	0x08019dc1
 8019da0:	08019dc1 	.word	0x08019dc1
 8019da4:	08019e35 	.word	0x08019e35
 8019da8:	08019e49 	.word	0x08019e49
 8019dac:	08019e93 	.word	0x08019e93
 8019db0:	08019dc1 	.word	0x08019dc1
 8019db4:	08019dc1 	.word	0x08019dc1
 8019db8:	08019e35 	.word	0x08019e35
 8019dbc:	08019e49 	.word	0x08019e49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019dc6:	f043 0301 	orr.w	r3, r3, #1
 8019dca:	b2da      	uxtb	r2, r3
 8019dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019dd2:	68ba      	ldr	r2, [r7, #8]
 8019dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dd6:	699b      	ldr	r3, [r3, #24]
 8019dd8:	18d1      	adds	r1, r2, r3
 8019dda:	68bb      	ldr	r3, [r7, #8]
 8019ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019de0:	f7ff ff5c 	bl	8019c9c <prvInsertTimerInActiveList>
 8019de4:	4603      	mov	r3, r0
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d069      	beq.n	8019ebe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dec:	6a1b      	ldr	r3, [r3, #32]
 8019dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019df0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019df8:	f003 0304 	and.w	r3, r3, #4
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d05e      	beq.n	8019ebe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019e00:	68ba      	ldr	r2, [r7, #8]
 8019e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e04:	699b      	ldr	r3, [r3, #24]
 8019e06:	441a      	add	r2, r3
 8019e08:	2300      	movs	r3, #0
 8019e0a:	9300      	str	r3, [sp, #0]
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	2100      	movs	r1, #0
 8019e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e12:	f7ff fe05 	bl	8019a20 <xTimerGenericCommand>
 8019e16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019e18:	6a3b      	ldr	r3, [r7, #32]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d14f      	bne.n	8019ebe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e22:	f383 8811 	msr	BASEPRI, r3
 8019e26:	f3bf 8f6f 	isb	sy
 8019e2a:	f3bf 8f4f 	dsb	sy
 8019e2e:	61bb      	str	r3, [r7, #24]
}
 8019e30:	bf00      	nop
 8019e32:	e7fe      	b.n	8019e32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e3a:	f023 0301 	bic.w	r3, r3, #1
 8019e3e:	b2da      	uxtb	r2, r3
 8019e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019e46:	e03a      	b.n	8019ebe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e4e:	f043 0301 	orr.w	r3, r3, #1
 8019e52:	b2da      	uxtb	r2, r3
 8019e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019e5a:	68ba      	ldr	r2, [r7, #8]
 8019e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e62:	699b      	ldr	r3, [r3, #24]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d10a      	bne.n	8019e7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e6c:	f383 8811 	msr	BASEPRI, r3
 8019e70:	f3bf 8f6f 	isb	sy
 8019e74:	f3bf 8f4f 	dsb	sy
 8019e78:	617b      	str	r3, [r7, #20]
}
 8019e7a:	bf00      	nop
 8019e7c:	e7fe      	b.n	8019e7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e80:	699a      	ldr	r2, [r3, #24]
 8019e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e84:	18d1      	adds	r1, r2, r3
 8019e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e8c:	f7ff ff06 	bl	8019c9c <prvInsertTimerInActiveList>
					break;
 8019e90:	e015      	b.n	8019ebe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e98:	f003 0302 	and.w	r3, r3, #2
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d103      	bne.n	8019ea8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ea2:	f000 fbfd 	bl	801a6a0 <vPortFree>
 8019ea6:	e00a      	b.n	8019ebe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019eae:	f023 0301 	bic.w	r3, r3, #1
 8019eb2:	b2da      	uxtb	r2, r3
 8019eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019eba:	e000      	b.n	8019ebe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019ebc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019ebe:	4b08      	ldr	r3, [pc, #32]	; (8019ee0 <prvProcessReceivedCommands+0x1c0>)
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	1d39      	adds	r1, r7, #4
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7fe f986 	bl	80181d8 <xQueueReceive>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	f47f af2a 	bne.w	8019d28 <prvProcessReceivedCommands+0x8>
	}
}
 8019ed4:	bf00      	nop
 8019ed6:	bf00      	nop
 8019ed8:	3730      	adds	r7, #48	; 0x30
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bd80      	pop	{r7, pc}
 8019ede:	bf00      	nop
 8019ee0:	20003818 	.word	0x20003818

08019ee4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b088      	sub	sp, #32
 8019ee8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019eea:	e048      	b.n	8019f7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019eec:	4b2d      	ldr	r3, [pc, #180]	; (8019fa4 <prvSwitchTimerLists+0xc0>)
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	68db      	ldr	r3, [r3, #12]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ef6:	4b2b      	ldr	r3, [pc, #172]	; (8019fa4 <prvSwitchTimerLists+0xc0>)
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	68db      	ldr	r3, [r3, #12]
 8019efc:	68db      	ldr	r3, [r3, #12]
 8019efe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	3304      	adds	r3, #4
 8019f04:	4618      	mov	r0, r3
 8019f06:	f7fd fdd9 	bl	8017abc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	6a1b      	ldr	r3, [r3, #32]
 8019f0e:	68f8      	ldr	r0, [r7, #12]
 8019f10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019f18:	f003 0304 	and.w	r3, r3, #4
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d02e      	beq.n	8019f7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	699b      	ldr	r3, [r3, #24]
 8019f24:	693a      	ldr	r2, [r7, #16]
 8019f26:	4413      	add	r3, r2
 8019f28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019f2a:	68ba      	ldr	r2, [r7, #8]
 8019f2c:	693b      	ldr	r3, [r7, #16]
 8019f2e:	429a      	cmp	r2, r3
 8019f30:	d90e      	bls.n	8019f50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	68ba      	ldr	r2, [r7, #8]
 8019f36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	68fa      	ldr	r2, [r7, #12]
 8019f3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019f3e:	4b19      	ldr	r3, [pc, #100]	; (8019fa4 <prvSwitchTimerLists+0xc0>)
 8019f40:	681a      	ldr	r2, [r3, #0]
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	3304      	adds	r3, #4
 8019f46:	4619      	mov	r1, r3
 8019f48:	4610      	mov	r0, r2
 8019f4a:	f7fd fd7e 	bl	8017a4a <vListInsert>
 8019f4e:	e016      	b.n	8019f7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019f50:	2300      	movs	r3, #0
 8019f52:	9300      	str	r3, [sp, #0]
 8019f54:	2300      	movs	r3, #0
 8019f56:	693a      	ldr	r2, [r7, #16]
 8019f58:	2100      	movs	r1, #0
 8019f5a:	68f8      	ldr	r0, [r7, #12]
 8019f5c:	f7ff fd60 	bl	8019a20 <xTimerGenericCommand>
 8019f60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d10a      	bne.n	8019f7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f6c:	f383 8811 	msr	BASEPRI, r3
 8019f70:	f3bf 8f6f 	isb	sy
 8019f74:	f3bf 8f4f 	dsb	sy
 8019f78:	603b      	str	r3, [r7, #0]
}
 8019f7a:	bf00      	nop
 8019f7c:	e7fe      	b.n	8019f7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019f7e:	4b09      	ldr	r3, [pc, #36]	; (8019fa4 <prvSwitchTimerLists+0xc0>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d1b1      	bne.n	8019eec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019f88:	4b06      	ldr	r3, [pc, #24]	; (8019fa4 <prvSwitchTimerLists+0xc0>)
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019f8e:	4b06      	ldr	r3, [pc, #24]	; (8019fa8 <prvSwitchTimerLists+0xc4>)
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	4a04      	ldr	r2, [pc, #16]	; (8019fa4 <prvSwitchTimerLists+0xc0>)
 8019f94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019f96:	4a04      	ldr	r2, [pc, #16]	; (8019fa8 <prvSwitchTimerLists+0xc4>)
 8019f98:	697b      	ldr	r3, [r7, #20]
 8019f9a:	6013      	str	r3, [r2, #0]
}
 8019f9c:	bf00      	nop
 8019f9e:	3718      	adds	r7, #24
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	bd80      	pop	{r7, pc}
 8019fa4:	20003810 	.word	0x20003810
 8019fa8:	20003814 	.word	0x20003814

08019fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b082      	sub	sp, #8
 8019fb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019fb2:	f000 f987 	bl	801a2c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019fb6:	4b15      	ldr	r3, [pc, #84]	; (801a00c <prvCheckForValidListAndQueue+0x60>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d120      	bne.n	801a000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019fbe:	4814      	ldr	r0, [pc, #80]	; (801a010 <prvCheckForValidListAndQueue+0x64>)
 8019fc0:	f7fd fcf2 	bl	80179a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019fc4:	4813      	ldr	r0, [pc, #76]	; (801a014 <prvCheckForValidListAndQueue+0x68>)
 8019fc6:	f7fd fcef 	bl	80179a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019fca:	4b13      	ldr	r3, [pc, #76]	; (801a018 <prvCheckForValidListAndQueue+0x6c>)
 8019fcc:	4a10      	ldr	r2, [pc, #64]	; (801a010 <prvCheckForValidListAndQueue+0x64>)
 8019fce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019fd0:	4b12      	ldr	r3, [pc, #72]	; (801a01c <prvCheckForValidListAndQueue+0x70>)
 8019fd2:	4a10      	ldr	r2, [pc, #64]	; (801a014 <prvCheckForValidListAndQueue+0x68>)
 8019fd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	9300      	str	r3, [sp, #0]
 8019fda:	4b11      	ldr	r3, [pc, #68]	; (801a020 <prvCheckForValidListAndQueue+0x74>)
 8019fdc:	4a11      	ldr	r2, [pc, #68]	; (801a024 <prvCheckForValidListAndQueue+0x78>)
 8019fde:	2110      	movs	r1, #16
 8019fe0:	200a      	movs	r0, #10
 8019fe2:	f7fd fdfd 	bl	8017be0 <xQueueGenericCreateStatic>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	4a08      	ldr	r2, [pc, #32]	; (801a00c <prvCheckForValidListAndQueue+0x60>)
 8019fea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019fec:	4b07      	ldr	r3, [pc, #28]	; (801a00c <prvCheckForValidListAndQueue+0x60>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d005      	beq.n	801a000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019ff4:	4b05      	ldr	r3, [pc, #20]	; (801a00c <prvCheckForValidListAndQueue+0x60>)
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	490b      	ldr	r1, [pc, #44]	; (801a028 <prvCheckForValidListAndQueue+0x7c>)
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f7fe fadc 	bl	80185b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a000:	f000 f990 	bl	801a324 <vPortExitCritical>
}
 801a004:	bf00      	nop
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}
 801a00a:	bf00      	nop
 801a00c:	20003818 	.word	0x20003818
 801a010:	200037e8 	.word	0x200037e8
 801a014:	200037fc 	.word	0x200037fc
 801a018:	20003810 	.word	0x20003810
 801a01c:	20003814 	.word	0x20003814
 801a020:	200038c4 	.word	0x200038c4
 801a024:	20003824 	.word	0x20003824
 801a028:	0802281c 	.word	0x0802281c

0801a02c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b08a      	sub	sp, #40	; 0x28
 801a030:	af00      	add	r7, sp, #0
 801a032:	60f8      	str	r0, [r7, #12]
 801a034:	60b9      	str	r1, [r7, #8]
 801a036:	607a      	str	r2, [r7, #4]
 801a038:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801a03a:	f06f 0301 	mvn.w	r3, #1
 801a03e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a04c:	4b06      	ldr	r3, [pc, #24]	; (801a068 <xTimerPendFunctionCallFromISR+0x3c>)
 801a04e:	6818      	ldr	r0, [r3, #0]
 801a050:	f107 0114 	add.w	r1, r7, #20
 801a054:	2300      	movs	r3, #0
 801a056:	683a      	ldr	r2, [r7, #0]
 801a058:	f7fd ff96 	bl	8017f88 <xQueueGenericSendFromISR>
 801a05c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a060:	4618      	mov	r0, r3
 801a062:	3728      	adds	r7, #40	; 0x28
 801a064:	46bd      	mov	sp, r7
 801a066:	bd80      	pop	{r7, pc}
 801a068:	20003818 	.word	0x20003818

0801a06c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a06c:	b480      	push	{r7}
 801a06e:	b085      	sub	sp, #20
 801a070:	af00      	add	r7, sp, #0
 801a072:	60f8      	str	r0, [r7, #12]
 801a074:	60b9      	str	r1, [r7, #8]
 801a076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	3b04      	subs	r3, #4
 801a07c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	3b04      	subs	r3, #4
 801a08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a08c:	68bb      	ldr	r3, [r7, #8]
 801a08e:	f023 0201 	bic.w	r2, r3, #1
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	3b04      	subs	r3, #4
 801a09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a09c:	4a0c      	ldr	r2, [pc, #48]	; (801a0d0 <pxPortInitialiseStack+0x64>)
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	3b14      	subs	r3, #20
 801a0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	3b04      	subs	r3, #4
 801a0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	f06f 0202 	mvn.w	r2, #2
 801a0ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	3b20      	subs	r3, #32
 801a0c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
}
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3714      	adds	r7, #20
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr
 801a0d0:	0801a0d5 	.word	0x0801a0d5

0801a0d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a0d4:	b480      	push	{r7}
 801a0d6:	b085      	sub	sp, #20
 801a0d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a0da:	2300      	movs	r3, #0
 801a0dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a0de:	4b12      	ldr	r3, [pc, #72]	; (801a128 <prvTaskExitError+0x54>)
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a0e6:	d00a      	beq.n	801a0fe <prvTaskExitError+0x2a>
	__asm volatile
 801a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0ec:	f383 8811 	msr	BASEPRI, r3
 801a0f0:	f3bf 8f6f 	isb	sy
 801a0f4:	f3bf 8f4f 	dsb	sy
 801a0f8:	60fb      	str	r3, [r7, #12]
}
 801a0fa:	bf00      	nop
 801a0fc:	e7fe      	b.n	801a0fc <prvTaskExitError+0x28>
	__asm volatile
 801a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a102:	f383 8811 	msr	BASEPRI, r3
 801a106:	f3bf 8f6f 	isb	sy
 801a10a:	f3bf 8f4f 	dsb	sy
 801a10e:	60bb      	str	r3, [r7, #8]
}
 801a110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a112:	bf00      	nop
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d0fc      	beq.n	801a114 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a11a:	bf00      	nop
 801a11c:	bf00      	nop
 801a11e:	3714      	adds	r7, #20
 801a120:	46bd      	mov	sp, r7
 801a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a126:	4770      	bx	lr
 801a128:	200000a8 	.word	0x200000a8
 801a12c:	00000000 	.word	0x00000000

0801a130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a130:	4b07      	ldr	r3, [pc, #28]	; (801a150 <pxCurrentTCBConst2>)
 801a132:	6819      	ldr	r1, [r3, #0]
 801a134:	6808      	ldr	r0, [r1, #0]
 801a136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a13a:	f380 8809 	msr	PSP, r0
 801a13e:	f3bf 8f6f 	isb	sy
 801a142:	f04f 0000 	mov.w	r0, #0
 801a146:	f380 8811 	msr	BASEPRI, r0
 801a14a:	4770      	bx	lr
 801a14c:	f3af 8000 	nop.w

0801a150 <pxCurrentTCBConst2>:
 801a150:	20003614 	.word	0x20003614
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a154:	bf00      	nop
 801a156:	bf00      	nop

0801a158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a158:	4808      	ldr	r0, [pc, #32]	; (801a17c <prvPortStartFirstTask+0x24>)
 801a15a:	6800      	ldr	r0, [r0, #0]
 801a15c:	6800      	ldr	r0, [r0, #0]
 801a15e:	f380 8808 	msr	MSP, r0
 801a162:	f04f 0000 	mov.w	r0, #0
 801a166:	f380 8814 	msr	CONTROL, r0
 801a16a:	b662      	cpsie	i
 801a16c:	b661      	cpsie	f
 801a16e:	f3bf 8f4f 	dsb	sy
 801a172:	f3bf 8f6f 	isb	sy
 801a176:	df00      	svc	0
 801a178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a17a:	bf00      	nop
 801a17c:	e000ed08 	.word	0xe000ed08

0801a180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b086      	sub	sp, #24
 801a184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a186:	4b46      	ldr	r3, [pc, #280]	; (801a2a0 <xPortStartScheduler+0x120>)
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	4a46      	ldr	r2, [pc, #280]	; (801a2a4 <xPortStartScheduler+0x124>)
 801a18c:	4293      	cmp	r3, r2
 801a18e:	d10a      	bne.n	801a1a6 <xPortStartScheduler+0x26>
	__asm volatile
 801a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a194:	f383 8811 	msr	BASEPRI, r3
 801a198:	f3bf 8f6f 	isb	sy
 801a19c:	f3bf 8f4f 	dsb	sy
 801a1a0:	613b      	str	r3, [r7, #16]
}
 801a1a2:	bf00      	nop
 801a1a4:	e7fe      	b.n	801a1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a1a6:	4b3e      	ldr	r3, [pc, #248]	; (801a2a0 <xPortStartScheduler+0x120>)
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	4a3f      	ldr	r2, [pc, #252]	; (801a2a8 <xPortStartScheduler+0x128>)
 801a1ac:	4293      	cmp	r3, r2
 801a1ae:	d10a      	bne.n	801a1c6 <xPortStartScheduler+0x46>
	__asm volatile
 801a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1b4:	f383 8811 	msr	BASEPRI, r3
 801a1b8:	f3bf 8f6f 	isb	sy
 801a1bc:	f3bf 8f4f 	dsb	sy
 801a1c0:	60fb      	str	r3, [r7, #12]
}
 801a1c2:	bf00      	nop
 801a1c4:	e7fe      	b.n	801a1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a1c6:	4b39      	ldr	r3, [pc, #228]	; (801a2ac <xPortStartScheduler+0x12c>)
 801a1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a1ca:	697b      	ldr	r3, [r7, #20]
 801a1cc:	781b      	ldrb	r3, [r3, #0]
 801a1ce:	b2db      	uxtb	r3, r3
 801a1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a1d2:	697b      	ldr	r3, [r7, #20]
 801a1d4:	22ff      	movs	r2, #255	; 0xff
 801a1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a1d8:	697b      	ldr	r3, [r7, #20]
 801a1da:	781b      	ldrb	r3, [r3, #0]
 801a1dc:	b2db      	uxtb	r3, r3
 801a1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a1e0:	78fb      	ldrb	r3, [r7, #3]
 801a1e2:	b2db      	uxtb	r3, r3
 801a1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a1e8:	b2da      	uxtb	r2, r3
 801a1ea:	4b31      	ldr	r3, [pc, #196]	; (801a2b0 <xPortStartScheduler+0x130>)
 801a1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a1ee:	4b31      	ldr	r3, [pc, #196]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a1f0:	2207      	movs	r2, #7
 801a1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a1f4:	e009      	b.n	801a20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a1f6:	4b2f      	ldr	r3, [pc, #188]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	3b01      	subs	r3, #1
 801a1fc:	4a2d      	ldr	r2, [pc, #180]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a200:	78fb      	ldrb	r3, [r7, #3]
 801a202:	b2db      	uxtb	r3, r3
 801a204:	005b      	lsls	r3, r3, #1
 801a206:	b2db      	uxtb	r3, r3
 801a208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a20a:	78fb      	ldrb	r3, [r7, #3]
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a212:	2b80      	cmp	r3, #128	; 0x80
 801a214:	d0ef      	beq.n	801a1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a216:	4b27      	ldr	r3, [pc, #156]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	f1c3 0307 	rsb	r3, r3, #7
 801a21e:	2b04      	cmp	r3, #4
 801a220:	d00a      	beq.n	801a238 <xPortStartScheduler+0xb8>
	__asm volatile
 801a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a226:	f383 8811 	msr	BASEPRI, r3
 801a22a:	f3bf 8f6f 	isb	sy
 801a22e:	f3bf 8f4f 	dsb	sy
 801a232:	60bb      	str	r3, [r7, #8]
}
 801a234:	bf00      	nop
 801a236:	e7fe      	b.n	801a236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a238:	4b1e      	ldr	r3, [pc, #120]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	021b      	lsls	r3, r3, #8
 801a23e:	4a1d      	ldr	r2, [pc, #116]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a242:	4b1c      	ldr	r3, [pc, #112]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a24a:	4a1a      	ldr	r2, [pc, #104]	; (801a2b4 <xPortStartScheduler+0x134>)
 801a24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	b2da      	uxtb	r2, r3
 801a252:	697b      	ldr	r3, [r7, #20]
 801a254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a256:	4b18      	ldr	r3, [pc, #96]	; (801a2b8 <xPortStartScheduler+0x138>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	4a17      	ldr	r2, [pc, #92]	; (801a2b8 <xPortStartScheduler+0x138>)
 801a25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a262:	4b15      	ldr	r3, [pc, #84]	; (801a2b8 <xPortStartScheduler+0x138>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	4a14      	ldr	r2, [pc, #80]	; (801a2b8 <xPortStartScheduler+0x138>)
 801a268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a26e:	f000 f8dd 	bl	801a42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a272:	4b12      	ldr	r3, [pc, #72]	; (801a2bc <xPortStartScheduler+0x13c>)
 801a274:	2200      	movs	r2, #0
 801a276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a278:	f000 f8fc 	bl	801a474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a27c:	4b10      	ldr	r3, [pc, #64]	; (801a2c0 <xPortStartScheduler+0x140>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	4a0f      	ldr	r2, [pc, #60]	; (801a2c0 <xPortStartScheduler+0x140>)
 801a282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a288:	f7ff ff66 	bl	801a158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a28c:	f7fe fe42 	bl	8018f14 <vTaskSwitchContext>
	prvTaskExitError();
 801a290:	f7ff ff20 	bl	801a0d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a294:	2300      	movs	r3, #0
}
 801a296:	4618      	mov	r0, r3
 801a298:	3718      	adds	r7, #24
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bd80      	pop	{r7, pc}
 801a29e:	bf00      	nop
 801a2a0:	e000ed00 	.word	0xe000ed00
 801a2a4:	410fc271 	.word	0x410fc271
 801a2a8:	410fc270 	.word	0x410fc270
 801a2ac:	e000e400 	.word	0xe000e400
 801a2b0:	20003914 	.word	0x20003914
 801a2b4:	20003918 	.word	0x20003918
 801a2b8:	e000ed20 	.word	0xe000ed20
 801a2bc:	200000a8 	.word	0x200000a8
 801a2c0:	e000ef34 	.word	0xe000ef34

0801a2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a2c4:	b480      	push	{r7}
 801a2c6:	b083      	sub	sp, #12
 801a2c8:	af00      	add	r7, sp, #0
	__asm volatile
 801a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2ce:	f383 8811 	msr	BASEPRI, r3
 801a2d2:	f3bf 8f6f 	isb	sy
 801a2d6:	f3bf 8f4f 	dsb	sy
 801a2da:	607b      	str	r3, [r7, #4]
}
 801a2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a2de:	4b0f      	ldr	r3, [pc, #60]	; (801a31c <vPortEnterCritical+0x58>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	3301      	adds	r3, #1
 801a2e4:	4a0d      	ldr	r2, [pc, #52]	; (801a31c <vPortEnterCritical+0x58>)
 801a2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a2e8:	4b0c      	ldr	r3, [pc, #48]	; (801a31c <vPortEnterCritical+0x58>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	2b01      	cmp	r3, #1
 801a2ee:	d10f      	bne.n	801a310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a2f0:	4b0b      	ldr	r3, [pc, #44]	; (801a320 <vPortEnterCritical+0x5c>)
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	b2db      	uxtb	r3, r3
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d00a      	beq.n	801a310 <vPortEnterCritical+0x4c>
	__asm volatile
 801a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2fe:	f383 8811 	msr	BASEPRI, r3
 801a302:	f3bf 8f6f 	isb	sy
 801a306:	f3bf 8f4f 	dsb	sy
 801a30a:	603b      	str	r3, [r7, #0]
}
 801a30c:	bf00      	nop
 801a30e:	e7fe      	b.n	801a30e <vPortEnterCritical+0x4a>
	}
}
 801a310:	bf00      	nop
 801a312:	370c      	adds	r7, #12
 801a314:	46bd      	mov	sp, r7
 801a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31a:	4770      	bx	lr
 801a31c:	200000a8 	.word	0x200000a8
 801a320:	e000ed04 	.word	0xe000ed04

0801a324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a324:	b480      	push	{r7}
 801a326:	b083      	sub	sp, #12
 801a328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a32a:	4b12      	ldr	r3, [pc, #72]	; (801a374 <vPortExitCritical+0x50>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d10a      	bne.n	801a348 <vPortExitCritical+0x24>
	__asm volatile
 801a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a336:	f383 8811 	msr	BASEPRI, r3
 801a33a:	f3bf 8f6f 	isb	sy
 801a33e:	f3bf 8f4f 	dsb	sy
 801a342:	607b      	str	r3, [r7, #4]
}
 801a344:	bf00      	nop
 801a346:	e7fe      	b.n	801a346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a348:	4b0a      	ldr	r3, [pc, #40]	; (801a374 <vPortExitCritical+0x50>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	3b01      	subs	r3, #1
 801a34e:	4a09      	ldr	r2, [pc, #36]	; (801a374 <vPortExitCritical+0x50>)
 801a350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a352:	4b08      	ldr	r3, [pc, #32]	; (801a374 <vPortExitCritical+0x50>)
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d105      	bne.n	801a366 <vPortExitCritical+0x42>
 801a35a:	2300      	movs	r3, #0
 801a35c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	f383 8811 	msr	BASEPRI, r3
}
 801a364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a366:	bf00      	nop
 801a368:	370c      	adds	r7, #12
 801a36a:	46bd      	mov	sp, r7
 801a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a370:	4770      	bx	lr
 801a372:	bf00      	nop
 801a374:	200000a8 	.word	0x200000a8
	...

0801a380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a380:	f3ef 8009 	mrs	r0, PSP
 801a384:	f3bf 8f6f 	isb	sy
 801a388:	4b15      	ldr	r3, [pc, #84]	; (801a3e0 <pxCurrentTCBConst>)
 801a38a:	681a      	ldr	r2, [r3, #0]
 801a38c:	f01e 0f10 	tst.w	lr, #16
 801a390:	bf08      	it	eq
 801a392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a39a:	6010      	str	r0, [r2, #0]
 801a39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a3a4:	f380 8811 	msr	BASEPRI, r0
 801a3a8:	f3bf 8f4f 	dsb	sy
 801a3ac:	f3bf 8f6f 	isb	sy
 801a3b0:	f7fe fdb0 	bl	8018f14 <vTaskSwitchContext>
 801a3b4:	f04f 0000 	mov.w	r0, #0
 801a3b8:	f380 8811 	msr	BASEPRI, r0
 801a3bc:	bc09      	pop	{r0, r3}
 801a3be:	6819      	ldr	r1, [r3, #0]
 801a3c0:	6808      	ldr	r0, [r1, #0]
 801a3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c6:	f01e 0f10 	tst.w	lr, #16
 801a3ca:	bf08      	it	eq
 801a3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a3d0:	f380 8809 	msr	PSP, r0
 801a3d4:	f3bf 8f6f 	isb	sy
 801a3d8:	4770      	bx	lr
 801a3da:	bf00      	nop
 801a3dc:	f3af 8000 	nop.w

0801a3e0 <pxCurrentTCBConst>:
 801a3e0:	20003614 	.word	0x20003614
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a3e4:	bf00      	nop
 801a3e6:	bf00      	nop

0801a3e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b082      	sub	sp, #8
 801a3ec:	af00      	add	r7, sp, #0
	__asm volatile
 801a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3f2:	f383 8811 	msr	BASEPRI, r3
 801a3f6:	f3bf 8f6f 	isb	sy
 801a3fa:	f3bf 8f4f 	dsb	sy
 801a3fe:	607b      	str	r3, [r7, #4]
}
 801a400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a402:	f7fe fccf 	bl	8018da4 <xTaskIncrementTick>
 801a406:	4603      	mov	r3, r0
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d003      	beq.n	801a414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a40c:	4b06      	ldr	r3, [pc, #24]	; (801a428 <SysTick_Handler+0x40>)
 801a40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a412:	601a      	str	r2, [r3, #0]
 801a414:	2300      	movs	r3, #0
 801a416:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	f383 8811 	msr	BASEPRI, r3
}
 801a41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a420:	bf00      	nop
 801a422:	3708      	adds	r7, #8
 801a424:	46bd      	mov	sp, r7
 801a426:	bd80      	pop	{r7, pc}
 801a428:	e000ed04 	.word	0xe000ed04

0801a42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a42c:	b480      	push	{r7}
 801a42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a430:	4b0b      	ldr	r3, [pc, #44]	; (801a460 <vPortSetupTimerInterrupt+0x34>)
 801a432:	2200      	movs	r2, #0
 801a434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a436:	4b0b      	ldr	r3, [pc, #44]	; (801a464 <vPortSetupTimerInterrupt+0x38>)
 801a438:	2200      	movs	r2, #0
 801a43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a43c:	4b0a      	ldr	r3, [pc, #40]	; (801a468 <vPortSetupTimerInterrupt+0x3c>)
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	4a0a      	ldr	r2, [pc, #40]	; (801a46c <vPortSetupTimerInterrupt+0x40>)
 801a442:	fba2 2303 	umull	r2, r3, r2, r3
 801a446:	099b      	lsrs	r3, r3, #6
 801a448:	4a09      	ldr	r2, [pc, #36]	; (801a470 <vPortSetupTimerInterrupt+0x44>)
 801a44a:	3b01      	subs	r3, #1
 801a44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a44e:	4b04      	ldr	r3, [pc, #16]	; (801a460 <vPortSetupTimerInterrupt+0x34>)
 801a450:	2207      	movs	r2, #7
 801a452:	601a      	str	r2, [r3, #0]
}
 801a454:	bf00      	nop
 801a456:	46bd      	mov	sp, r7
 801a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a45c:	4770      	bx	lr
 801a45e:	bf00      	nop
 801a460:	e000e010 	.word	0xe000e010
 801a464:	e000e018 	.word	0xe000e018
 801a468:	20000004 	.word	0x20000004
 801a46c:	10624dd3 	.word	0x10624dd3
 801a470:	e000e014 	.word	0xe000e014

0801a474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a484 <vPortEnableVFP+0x10>
 801a478:	6801      	ldr	r1, [r0, #0]
 801a47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a47e:	6001      	str	r1, [r0, #0]
 801a480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a482:	bf00      	nop
 801a484:	e000ed88 	.word	0xe000ed88

0801a488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a488:	b480      	push	{r7}
 801a48a:	b085      	sub	sp, #20
 801a48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a48e:	f3ef 8305 	mrs	r3, IPSR
 801a492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	2b0f      	cmp	r3, #15
 801a498:	d914      	bls.n	801a4c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a49a:	4a17      	ldr	r2, [pc, #92]	; (801a4f8 <vPortValidateInterruptPriority+0x70>)
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	4413      	add	r3, r2
 801a4a0:	781b      	ldrb	r3, [r3, #0]
 801a4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a4a4:	4b15      	ldr	r3, [pc, #84]	; (801a4fc <vPortValidateInterruptPriority+0x74>)
 801a4a6:	781b      	ldrb	r3, [r3, #0]
 801a4a8:	7afa      	ldrb	r2, [r7, #11]
 801a4aa:	429a      	cmp	r2, r3
 801a4ac:	d20a      	bcs.n	801a4c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4b2:	f383 8811 	msr	BASEPRI, r3
 801a4b6:	f3bf 8f6f 	isb	sy
 801a4ba:	f3bf 8f4f 	dsb	sy
 801a4be:	607b      	str	r3, [r7, #4]
}
 801a4c0:	bf00      	nop
 801a4c2:	e7fe      	b.n	801a4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a4c4:	4b0e      	ldr	r3, [pc, #56]	; (801a500 <vPortValidateInterruptPriority+0x78>)
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a4cc:	4b0d      	ldr	r3, [pc, #52]	; (801a504 <vPortValidateInterruptPriority+0x7c>)
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	429a      	cmp	r2, r3
 801a4d2:	d90a      	bls.n	801a4ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4d8:	f383 8811 	msr	BASEPRI, r3
 801a4dc:	f3bf 8f6f 	isb	sy
 801a4e0:	f3bf 8f4f 	dsb	sy
 801a4e4:	603b      	str	r3, [r7, #0]
}
 801a4e6:	bf00      	nop
 801a4e8:	e7fe      	b.n	801a4e8 <vPortValidateInterruptPriority+0x60>
	}
 801a4ea:	bf00      	nop
 801a4ec:	3714      	adds	r7, #20
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f4:	4770      	bx	lr
 801a4f6:	bf00      	nop
 801a4f8:	e000e3f0 	.word	0xe000e3f0
 801a4fc:	20003914 	.word	0x20003914
 801a500:	e000ed0c 	.word	0xe000ed0c
 801a504:	20003918 	.word	0x20003918

0801a508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b08a      	sub	sp, #40	; 0x28
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a510:	2300      	movs	r3, #0
 801a512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a514:	f7fe fb8c 	bl	8018c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a518:	4b5b      	ldr	r3, [pc, #364]	; (801a688 <pvPortMalloc+0x180>)
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d101      	bne.n	801a524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a520:	f000 f920 	bl	801a764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a524:	4b59      	ldr	r3, [pc, #356]	; (801a68c <pvPortMalloc+0x184>)
 801a526:	681a      	ldr	r2, [r3, #0]
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	4013      	ands	r3, r2
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	f040 8093 	bne.w	801a658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d01d      	beq.n	801a574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a538:	2208      	movs	r2, #8
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	4413      	add	r3, r2
 801a53e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	f003 0307 	and.w	r3, r3, #7
 801a546:	2b00      	cmp	r3, #0
 801a548:	d014      	beq.n	801a574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	f023 0307 	bic.w	r3, r3, #7
 801a550:	3308      	adds	r3, #8
 801a552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	f003 0307 	and.w	r3, r3, #7
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d00a      	beq.n	801a574 <pvPortMalloc+0x6c>
	__asm volatile
 801a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a562:	f383 8811 	msr	BASEPRI, r3
 801a566:	f3bf 8f6f 	isb	sy
 801a56a:	f3bf 8f4f 	dsb	sy
 801a56e:	617b      	str	r3, [r7, #20]
}
 801a570:	bf00      	nop
 801a572:	e7fe      	b.n	801a572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	2b00      	cmp	r3, #0
 801a578:	d06e      	beq.n	801a658 <pvPortMalloc+0x150>
 801a57a:	4b45      	ldr	r3, [pc, #276]	; (801a690 <pvPortMalloc+0x188>)
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	687a      	ldr	r2, [r7, #4]
 801a580:	429a      	cmp	r2, r3
 801a582:	d869      	bhi.n	801a658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a584:	4b43      	ldr	r3, [pc, #268]	; (801a694 <pvPortMalloc+0x18c>)
 801a586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a588:	4b42      	ldr	r3, [pc, #264]	; (801a694 <pvPortMalloc+0x18c>)
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a58e:	e004      	b.n	801a59a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59c:	685b      	ldr	r3, [r3, #4]
 801a59e:	687a      	ldr	r2, [r7, #4]
 801a5a0:	429a      	cmp	r2, r3
 801a5a2:	d903      	bls.n	801a5ac <pvPortMalloc+0xa4>
 801a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d1f1      	bne.n	801a590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a5ac:	4b36      	ldr	r3, [pc, #216]	; (801a688 <pvPortMalloc+0x180>)
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a5b2:	429a      	cmp	r2, r3
 801a5b4:	d050      	beq.n	801a658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a5b6:	6a3b      	ldr	r3, [r7, #32]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	2208      	movs	r2, #8
 801a5bc:	4413      	add	r3, r2
 801a5be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c2:	681a      	ldr	r2, [r3, #0]
 801a5c4:	6a3b      	ldr	r3, [r7, #32]
 801a5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ca:	685a      	ldr	r2, [r3, #4]
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	1ad2      	subs	r2, r2, r3
 801a5d0:	2308      	movs	r3, #8
 801a5d2:	005b      	lsls	r3, r3, #1
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d91f      	bls.n	801a618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	4413      	add	r3, r2
 801a5de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a5e0:	69bb      	ldr	r3, [r7, #24]
 801a5e2:	f003 0307 	and.w	r3, r3, #7
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d00a      	beq.n	801a600 <pvPortMalloc+0xf8>
	__asm volatile
 801a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5ee:	f383 8811 	msr	BASEPRI, r3
 801a5f2:	f3bf 8f6f 	isb	sy
 801a5f6:	f3bf 8f4f 	dsb	sy
 801a5fa:	613b      	str	r3, [r7, #16]
}
 801a5fc:	bf00      	nop
 801a5fe:	e7fe      	b.n	801a5fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a602:	685a      	ldr	r2, [r3, #4]
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	1ad2      	subs	r2, r2, r3
 801a608:	69bb      	ldr	r3, [r7, #24]
 801a60a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a60e:	687a      	ldr	r2, [r7, #4]
 801a610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a612:	69b8      	ldr	r0, [r7, #24]
 801a614:	f000 f908 	bl	801a828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a618:	4b1d      	ldr	r3, [pc, #116]	; (801a690 <pvPortMalloc+0x188>)
 801a61a:	681a      	ldr	r2, [r3, #0]
 801a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a61e:	685b      	ldr	r3, [r3, #4]
 801a620:	1ad3      	subs	r3, r2, r3
 801a622:	4a1b      	ldr	r2, [pc, #108]	; (801a690 <pvPortMalloc+0x188>)
 801a624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a626:	4b1a      	ldr	r3, [pc, #104]	; (801a690 <pvPortMalloc+0x188>)
 801a628:	681a      	ldr	r2, [r3, #0]
 801a62a:	4b1b      	ldr	r3, [pc, #108]	; (801a698 <pvPortMalloc+0x190>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	429a      	cmp	r2, r3
 801a630:	d203      	bcs.n	801a63a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a632:	4b17      	ldr	r3, [pc, #92]	; (801a690 <pvPortMalloc+0x188>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	4a18      	ldr	r2, [pc, #96]	; (801a698 <pvPortMalloc+0x190>)
 801a638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a63c:	685a      	ldr	r2, [r3, #4]
 801a63e:	4b13      	ldr	r3, [pc, #76]	; (801a68c <pvPortMalloc+0x184>)
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	431a      	orrs	r2, r3
 801a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a64a:	2200      	movs	r2, #0
 801a64c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a64e:	4b13      	ldr	r3, [pc, #76]	; (801a69c <pvPortMalloc+0x194>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	3301      	adds	r3, #1
 801a654:	4a11      	ldr	r2, [pc, #68]	; (801a69c <pvPortMalloc+0x194>)
 801a656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a658:	f7fe faf8 	bl	8018c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a65c:	69fb      	ldr	r3, [r7, #28]
 801a65e:	f003 0307 	and.w	r3, r3, #7
 801a662:	2b00      	cmp	r3, #0
 801a664:	d00a      	beq.n	801a67c <pvPortMalloc+0x174>
	__asm volatile
 801a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a66a:	f383 8811 	msr	BASEPRI, r3
 801a66e:	f3bf 8f6f 	isb	sy
 801a672:	f3bf 8f4f 	dsb	sy
 801a676:	60fb      	str	r3, [r7, #12]
}
 801a678:	bf00      	nop
 801a67a:	e7fe      	b.n	801a67a <pvPortMalloc+0x172>
	return pvReturn;
 801a67c:	69fb      	ldr	r3, [r7, #28]
}
 801a67e:	4618      	mov	r0, r3
 801a680:	3728      	adds	r7, #40	; 0x28
 801a682:	46bd      	mov	sp, r7
 801a684:	bd80      	pop	{r7, pc}
 801a686:	bf00      	nop
 801a688:	2000d564 	.word	0x2000d564
 801a68c:	2000d578 	.word	0x2000d578
 801a690:	2000d568 	.word	0x2000d568
 801a694:	2000d55c 	.word	0x2000d55c
 801a698:	2000d56c 	.word	0x2000d56c
 801a69c:	2000d570 	.word	0x2000d570

0801a6a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b086      	sub	sp, #24
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d04d      	beq.n	801a74e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a6b2:	2308      	movs	r3, #8
 801a6b4:	425b      	negs	r3, r3
 801a6b6:	697a      	ldr	r2, [r7, #20]
 801a6b8:	4413      	add	r3, r2
 801a6ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a6bc:	697b      	ldr	r3, [r7, #20]
 801a6be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a6c0:	693b      	ldr	r3, [r7, #16]
 801a6c2:	685a      	ldr	r2, [r3, #4]
 801a6c4:	4b24      	ldr	r3, [pc, #144]	; (801a758 <vPortFree+0xb8>)
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	4013      	ands	r3, r2
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d10a      	bne.n	801a6e4 <vPortFree+0x44>
	__asm volatile
 801a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6d2:	f383 8811 	msr	BASEPRI, r3
 801a6d6:	f3bf 8f6f 	isb	sy
 801a6da:	f3bf 8f4f 	dsb	sy
 801a6de:	60fb      	str	r3, [r7, #12]
}
 801a6e0:	bf00      	nop
 801a6e2:	e7fe      	b.n	801a6e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a6e4:	693b      	ldr	r3, [r7, #16]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d00a      	beq.n	801a702 <vPortFree+0x62>
	__asm volatile
 801a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6f0:	f383 8811 	msr	BASEPRI, r3
 801a6f4:	f3bf 8f6f 	isb	sy
 801a6f8:	f3bf 8f4f 	dsb	sy
 801a6fc:	60bb      	str	r3, [r7, #8]
}
 801a6fe:	bf00      	nop
 801a700:	e7fe      	b.n	801a700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a702:	693b      	ldr	r3, [r7, #16]
 801a704:	685a      	ldr	r2, [r3, #4]
 801a706:	4b14      	ldr	r3, [pc, #80]	; (801a758 <vPortFree+0xb8>)
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	4013      	ands	r3, r2
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d01e      	beq.n	801a74e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a710:	693b      	ldr	r3, [r7, #16]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d11a      	bne.n	801a74e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a718:	693b      	ldr	r3, [r7, #16]
 801a71a:	685a      	ldr	r2, [r3, #4]
 801a71c:	4b0e      	ldr	r3, [pc, #56]	; (801a758 <vPortFree+0xb8>)
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	43db      	mvns	r3, r3
 801a722:	401a      	ands	r2, r3
 801a724:	693b      	ldr	r3, [r7, #16]
 801a726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a728:	f7fe fa82 	bl	8018c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a72c:	693b      	ldr	r3, [r7, #16]
 801a72e:	685a      	ldr	r2, [r3, #4]
 801a730:	4b0a      	ldr	r3, [pc, #40]	; (801a75c <vPortFree+0xbc>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	4413      	add	r3, r2
 801a736:	4a09      	ldr	r2, [pc, #36]	; (801a75c <vPortFree+0xbc>)
 801a738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a73a:	6938      	ldr	r0, [r7, #16]
 801a73c:	f000 f874 	bl	801a828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a740:	4b07      	ldr	r3, [pc, #28]	; (801a760 <vPortFree+0xc0>)
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	3301      	adds	r3, #1
 801a746:	4a06      	ldr	r2, [pc, #24]	; (801a760 <vPortFree+0xc0>)
 801a748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a74a:	f7fe fa7f 	bl	8018c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a74e:	bf00      	nop
 801a750:	3718      	adds	r7, #24
 801a752:	46bd      	mov	sp, r7
 801a754:	bd80      	pop	{r7, pc}
 801a756:	bf00      	nop
 801a758:	2000d578 	.word	0x2000d578
 801a75c:	2000d568 	.word	0x2000d568
 801a760:	2000d574 	.word	0x2000d574

0801a764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a764:	b480      	push	{r7}
 801a766:	b085      	sub	sp, #20
 801a768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a76a:	f649 4340 	movw	r3, #40000	; 0x9c40
 801a76e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a770:	4b27      	ldr	r3, [pc, #156]	; (801a810 <prvHeapInit+0xac>)
 801a772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	f003 0307 	and.w	r3, r3, #7
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d00c      	beq.n	801a798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	3307      	adds	r3, #7
 801a782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	f023 0307 	bic.w	r3, r3, #7
 801a78a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a78c:	68ba      	ldr	r2, [r7, #8]
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	1ad3      	subs	r3, r2, r3
 801a792:	4a1f      	ldr	r2, [pc, #124]	; (801a810 <prvHeapInit+0xac>)
 801a794:	4413      	add	r3, r2
 801a796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a79c:	4a1d      	ldr	r2, [pc, #116]	; (801a814 <prvHeapInit+0xb0>)
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a7a2:	4b1c      	ldr	r3, [pc, #112]	; (801a814 <prvHeapInit+0xb0>)
 801a7a4:	2200      	movs	r2, #0
 801a7a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	68ba      	ldr	r2, [r7, #8]
 801a7ac:	4413      	add	r3, r2
 801a7ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a7b0:	2208      	movs	r2, #8
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	1a9b      	subs	r3, r3, r2
 801a7b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	f023 0307 	bic.w	r3, r3, #7
 801a7be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	4a15      	ldr	r2, [pc, #84]	; (801a818 <prvHeapInit+0xb4>)
 801a7c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a7c6:	4b14      	ldr	r3, [pc, #80]	; (801a818 <prvHeapInit+0xb4>)
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a7ce:	4b12      	ldr	r3, [pc, #72]	; (801a818 <prvHeapInit+0xb4>)
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a7da:	683b      	ldr	r3, [r7, #0]
 801a7dc:	68fa      	ldr	r2, [r7, #12]
 801a7de:	1ad2      	subs	r2, r2, r3
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a7e4:	4b0c      	ldr	r3, [pc, #48]	; (801a818 <prvHeapInit+0xb4>)
 801a7e6:	681a      	ldr	r2, [r3, #0]
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	685b      	ldr	r3, [r3, #4]
 801a7f0:	4a0a      	ldr	r2, [pc, #40]	; (801a81c <prvHeapInit+0xb8>)
 801a7f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	685b      	ldr	r3, [r3, #4]
 801a7f8:	4a09      	ldr	r2, [pc, #36]	; (801a820 <prvHeapInit+0xbc>)
 801a7fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a7fc:	4b09      	ldr	r3, [pc, #36]	; (801a824 <prvHeapInit+0xc0>)
 801a7fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a802:	601a      	str	r2, [r3, #0]
}
 801a804:	bf00      	nop
 801a806:	3714      	adds	r7, #20
 801a808:	46bd      	mov	sp, r7
 801a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a80e:	4770      	bx	lr
 801a810:	2000391c 	.word	0x2000391c
 801a814:	2000d55c 	.word	0x2000d55c
 801a818:	2000d564 	.word	0x2000d564
 801a81c:	2000d56c 	.word	0x2000d56c
 801a820:	2000d568 	.word	0x2000d568
 801a824:	2000d578 	.word	0x2000d578

0801a828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a828:	b480      	push	{r7}
 801a82a:	b085      	sub	sp, #20
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a830:	4b28      	ldr	r3, [pc, #160]	; (801a8d4 <prvInsertBlockIntoFreeList+0xac>)
 801a832:	60fb      	str	r3, [r7, #12]
 801a834:	e002      	b.n	801a83c <prvInsertBlockIntoFreeList+0x14>
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	60fb      	str	r3, [r7, #12]
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	687a      	ldr	r2, [r7, #4]
 801a842:	429a      	cmp	r2, r3
 801a844:	d8f7      	bhi.n	801a836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	685b      	ldr	r3, [r3, #4]
 801a84e:	68ba      	ldr	r2, [r7, #8]
 801a850:	4413      	add	r3, r2
 801a852:	687a      	ldr	r2, [r7, #4]
 801a854:	429a      	cmp	r2, r3
 801a856:	d108      	bne.n	801a86a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	685a      	ldr	r2, [r3, #4]
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	685b      	ldr	r3, [r3, #4]
 801a860:	441a      	add	r2, r3
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	685b      	ldr	r3, [r3, #4]
 801a872:	68ba      	ldr	r2, [r7, #8]
 801a874:	441a      	add	r2, r3
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d118      	bne.n	801a8b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	4b15      	ldr	r3, [pc, #84]	; (801a8d8 <prvInsertBlockIntoFreeList+0xb0>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	429a      	cmp	r2, r3
 801a888:	d00d      	beq.n	801a8a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	685a      	ldr	r2, [r3, #4]
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	685b      	ldr	r3, [r3, #4]
 801a894:	441a      	add	r2, r3
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	681a      	ldr	r2, [r3, #0]
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	601a      	str	r2, [r3, #0]
 801a8a4:	e008      	b.n	801a8b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a8a6:	4b0c      	ldr	r3, [pc, #48]	; (801a8d8 <prvInsertBlockIntoFreeList+0xb0>)
 801a8a8:	681a      	ldr	r2, [r3, #0]
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	601a      	str	r2, [r3, #0]
 801a8ae:	e003      	b.n	801a8b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	681a      	ldr	r2, [r3, #0]
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a8b8:	68fa      	ldr	r2, [r7, #12]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	429a      	cmp	r2, r3
 801a8be:	d002      	beq.n	801a8c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	687a      	ldr	r2, [r7, #4]
 801a8c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a8c6:	bf00      	nop
 801a8c8:	3714      	adds	r7, #20
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d0:	4770      	bx	lr
 801a8d2:	bf00      	nop
 801a8d4:	2000d55c 	.word	0x2000d55c
 801a8d8:	2000d564 	.word	0x2000d564

0801a8dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	4912      	ldr	r1, [pc, #72]	; (801a92c <MX_USB_DEVICE_Init+0x50>)
 801a8e4:	4812      	ldr	r0, [pc, #72]	; (801a930 <MX_USB_DEVICE_Init+0x54>)
 801a8e6:	f7fb faff 	bl	8015ee8 <USBD_Init>
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d001      	beq.n	801a8f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a8f0:	f7e9 f90b 	bl	8003b0a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a8f4:	490f      	ldr	r1, [pc, #60]	; (801a934 <MX_USB_DEVICE_Init+0x58>)
 801a8f6:	480e      	ldr	r0, [pc, #56]	; (801a930 <MX_USB_DEVICE_Init+0x54>)
 801a8f8:	f7fb fb26 	bl	8015f48 <USBD_RegisterClass>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d001      	beq.n	801a906 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a902:	f7e9 f902 	bl	8003b0a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a906:	490c      	ldr	r1, [pc, #48]	; (801a938 <MX_USB_DEVICE_Init+0x5c>)
 801a908:	4809      	ldr	r0, [pc, #36]	; (801a930 <MX_USB_DEVICE_Init+0x54>)
 801a90a:	f7fb fa5d 	bl	8015dc8 <USBD_CDC_RegisterInterface>
 801a90e:	4603      	mov	r3, r0
 801a910:	2b00      	cmp	r3, #0
 801a912:	d001      	beq.n	801a918 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a914:	f7e9 f8f9 	bl	8003b0a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a918:	4805      	ldr	r0, [pc, #20]	; (801a930 <MX_USB_DEVICE_Init+0x54>)
 801a91a:	f7fb fb4b 	bl	8015fb4 <USBD_Start>
 801a91e:	4603      	mov	r3, r0
 801a920:	2b00      	cmp	r3, #0
 801a922:	d001      	beq.n	801a928 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a924:	f7e9 f8f1 	bl	8003b0a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a928:	bf00      	nop
 801a92a:	bd80      	pop	{r7, pc}
 801a92c:	200000c0 	.word	0x200000c0
 801a930:	2000d57c 	.word	0x2000d57c
 801a934:	20000028 	.word	0x20000028
 801a938:	200000ac 	.word	0x200000ac

0801a93c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a940:	2200      	movs	r2, #0
 801a942:	4905      	ldr	r1, [pc, #20]	; (801a958 <CDC_Init_FS+0x1c>)
 801a944:	4805      	ldr	r0, [pc, #20]	; (801a95c <CDC_Init_FS+0x20>)
 801a946:	f7fb fa59 	bl	8015dfc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a94a:	4905      	ldr	r1, [pc, #20]	; (801a960 <CDC_Init_FS+0x24>)
 801a94c:	4803      	ldr	r0, [pc, #12]	; (801a95c <CDC_Init_FS+0x20>)
 801a94e:	f7fb fa77 	bl	8015e40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a952:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a954:	4618      	mov	r0, r3
 801a956:	bd80      	pop	{r7, pc}
 801a958:	2000e060 	.word	0x2000e060
 801a95c:	2000d57c 	.word	0x2000d57c
 801a960:	2000d860 	.word	0x2000d860

0801a964 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a964:	b480      	push	{r7}
 801a966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a968:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	46bd      	mov	sp, r7
 801a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a972:	4770      	bx	lr

0801a974 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a974:	b480      	push	{r7}
 801a976:	b083      	sub	sp, #12
 801a978:	af00      	add	r7, sp, #0
 801a97a:	4603      	mov	r3, r0
 801a97c:	6039      	str	r1, [r7, #0]
 801a97e:	71fb      	strb	r3, [r7, #7]
 801a980:	4613      	mov	r3, r2
 801a982:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a984:	79fb      	ldrb	r3, [r7, #7]
 801a986:	2b23      	cmp	r3, #35	; 0x23
 801a988:	f200 808c 	bhi.w	801aaa4 <CDC_Control_FS+0x130>
 801a98c:	a201      	add	r2, pc, #4	; (adr r2, 801a994 <CDC_Control_FS+0x20>)
 801a98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a992:	bf00      	nop
 801a994:	0801aaa5 	.word	0x0801aaa5
 801a998:	0801aaa5 	.word	0x0801aaa5
 801a99c:	0801aaa5 	.word	0x0801aaa5
 801a9a0:	0801aaa5 	.word	0x0801aaa5
 801a9a4:	0801aaa5 	.word	0x0801aaa5
 801a9a8:	0801aaa5 	.word	0x0801aaa5
 801a9ac:	0801aaa5 	.word	0x0801aaa5
 801a9b0:	0801aaa5 	.word	0x0801aaa5
 801a9b4:	0801aaa5 	.word	0x0801aaa5
 801a9b8:	0801aaa5 	.word	0x0801aaa5
 801a9bc:	0801aaa5 	.word	0x0801aaa5
 801a9c0:	0801aaa5 	.word	0x0801aaa5
 801a9c4:	0801aaa5 	.word	0x0801aaa5
 801a9c8:	0801aaa5 	.word	0x0801aaa5
 801a9cc:	0801aaa5 	.word	0x0801aaa5
 801a9d0:	0801aaa5 	.word	0x0801aaa5
 801a9d4:	0801aaa5 	.word	0x0801aaa5
 801a9d8:	0801aaa5 	.word	0x0801aaa5
 801a9dc:	0801aaa5 	.word	0x0801aaa5
 801a9e0:	0801aaa5 	.word	0x0801aaa5
 801a9e4:	0801aaa5 	.word	0x0801aaa5
 801a9e8:	0801aaa5 	.word	0x0801aaa5
 801a9ec:	0801aaa5 	.word	0x0801aaa5
 801a9f0:	0801aaa5 	.word	0x0801aaa5
 801a9f4:	0801aaa5 	.word	0x0801aaa5
 801a9f8:	0801aaa5 	.word	0x0801aaa5
 801a9fc:	0801aaa5 	.word	0x0801aaa5
 801aa00:	0801aaa5 	.word	0x0801aaa5
 801aa04:	0801aaa5 	.word	0x0801aaa5
 801aa08:	0801aaa5 	.word	0x0801aaa5
 801aa0c:	0801aaa5 	.word	0x0801aaa5
 801aa10:	0801aaa5 	.word	0x0801aaa5
 801aa14:	0801aa25 	.word	0x0801aa25
 801aa18:	0801aa5f 	.word	0x0801aa5f
 801aa1c:	0801aaa5 	.word	0x0801aaa5
 801aa20:	0801aaa5 	.word	0x0801aaa5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	781a      	ldrb	r2, [r3, #0]
 801aa28:	4b22      	ldr	r3, [pc, #136]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa2a:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 801aa2c:	683b      	ldr	r3, [r7, #0]
 801aa2e:	785a      	ldrb	r2, [r3, #1]
 801aa30:	4b20      	ldr	r3, [pc, #128]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa32:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 801aa34:	683b      	ldr	r3, [r7, #0]
 801aa36:	789a      	ldrb	r2, [r3, #2]
 801aa38:	4b1e      	ldr	r3, [pc, #120]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa3a:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	78da      	ldrb	r2, [r3, #3]
 801aa40:	4b1c      	ldr	r3, [pc, #112]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa42:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	791a      	ldrb	r2, [r3, #4]
 801aa48:	4b1a      	ldr	r3, [pc, #104]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa4a:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	795a      	ldrb	r2, [r3, #5]
 801aa50:	4b18      	ldr	r3, [pc, #96]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa52:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	799a      	ldrb	r2, [r3, #6]
 801aa58:	4b16      	ldr	r3, [pc, #88]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa5a:	719a      	strb	r2, [r3, #6]
      break;
 801aa5c:	e023      	b.n	801aaa6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801aa5e:	4b15      	ldr	r3, [pc, #84]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa60:	781a      	ldrb	r2, [r3, #0]
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801aa66:	683b      	ldr	r3, [r7, #0]
 801aa68:	3301      	adds	r3, #1
 801aa6a:	4a12      	ldr	r2, [pc, #72]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa6c:	7852      	ldrb	r2, [r2, #1]
 801aa6e:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	3302      	adds	r3, #2
 801aa74:	4a0f      	ldr	r2, [pc, #60]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa76:	7892      	ldrb	r2, [r2, #2]
 801aa78:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801aa7a:	683b      	ldr	r3, [r7, #0]
 801aa7c:	3303      	adds	r3, #3
 801aa7e:	4a0d      	ldr	r2, [pc, #52]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa80:	78d2      	ldrb	r2, [r2, #3]
 801aa82:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 801aa84:	683b      	ldr	r3, [r7, #0]
 801aa86:	3304      	adds	r3, #4
 801aa88:	4a0a      	ldr	r2, [pc, #40]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa8a:	7912      	ldrb	r2, [r2, #4]
 801aa8c:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	3305      	adds	r3, #5
 801aa92:	4a08      	ldr	r2, [pc, #32]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa94:	7952      	ldrb	r2, [r2, #5]
 801aa96:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 801aa98:	683b      	ldr	r3, [r7, #0]
 801aa9a:	3306      	adds	r3, #6
 801aa9c:	4a05      	ldr	r2, [pc, #20]	; (801aab4 <CDC_Control_FS+0x140>)
 801aa9e:	7992      	ldrb	r2, [r2, #6]
 801aaa0:	701a      	strb	r2, [r3, #0]
      break;
 801aaa2:	e000      	b.n	801aaa6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801aaa4:	bf00      	nop
  }

  return (USBD_OK);
 801aaa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	370c      	adds	r7, #12
 801aaac:	46bd      	mov	sp, r7
 801aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab2:	4770      	bx	lr
 801aab4:	2000d858 	.word	0x2000d858

0801aab8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
 801aac0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801aac2:	6879      	ldr	r1, [r7, #4]
 801aac4:	4807      	ldr	r0, [pc, #28]	; (801aae4 <CDC_Receive_FS+0x2c>)
 801aac6:	f7fb f9bb 	bl	8015e40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801aaca:	4806      	ldr	r0, [pc, #24]	; (801aae4 <CDC_Receive_FS+0x2c>)
 801aacc:	f7fb f9d6 	bl	8015e7c <USBD_CDC_ReceivePacket>
  usb_vcp_processing(Buf, Len);
 801aad0:	6839      	ldr	r1, [r7, #0]
 801aad2:	6878      	ldr	r0, [r7, #4]
 801aad4:	f7f0 fcb8 	bl	800b448 <usb_vcp_processing>
  return (USBD_OK);
 801aad8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801aada:	4618      	mov	r0, r3
 801aadc:	3708      	adds	r7, #8
 801aade:	46bd      	mov	sp, r7
 801aae0:	bd80      	pop	{r7, pc}
 801aae2:	bf00      	nop
 801aae4:	2000d57c 	.word	0x2000d57c

0801aae8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801aae8:	b480      	push	{r7}
 801aaea:	b087      	sub	sp, #28
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	60f8      	str	r0, [r7, #12]
 801aaf0:	60b9      	str	r1, [r7, #8]
 801aaf2:	4613      	mov	r3, r2
 801aaf4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801aafa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aafe:	4618      	mov	r0, r3
 801ab00:	371c      	adds	r7, #28
 801ab02:	46bd      	mov	sp, r7
 801ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab08:	4770      	bx	lr
	...

0801ab0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab0c:	b480      	push	{r7}
 801ab0e:	b083      	sub	sp, #12
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	4603      	mov	r3, r0
 801ab14:	6039      	str	r1, [r7, #0]
 801ab16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ab18:	683b      	ldr	r3, [r7, #0]
 801ab1a:	2212      	movs	r2, #18
 801ab1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ab1e:	4b03      	ldr	r3, [pc, #12]	; (801ab2c <USBD_FS_DeviceDescriptor+0x20>)
}
 801ab20:	4618      	mov	r0, r3
 801ab22:	370c      	adds	r7, #12
 801ab24:	46bd      	mov	sp, r7
 801ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2a:	4770      	bx	lr
 801ab2c:	200000dc 	.word	0x200000dc

0801ab30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab30:	b480      	push	{r7}
 801ab32:	b083      	sub	sp, #12
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	4603      	mov	r3, r0
 801ab38:	6039      	str	r1, [r7, #0]
 801ab3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ab3c:	683b      	ldr	r3, [r7, #0]
 801ab3e:	2204      	movs	r2, #4
 801ab40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ab42:	4b03      	ldr	r3, [pc, #12]	; (801ab50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	370c      	adds	r7, #12
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4e:	4770      	bx	lr
 801ab50:	200000f0 	.word	0x200000f0

0801ab54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b082      	sub	sp, #8
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	6039      	str	r1, [r7, #0]
 801ab5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ab60:	79fb      	ldrb	r3, [r7, #7]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d105      	bne.n	801ab72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ab66:	683a      	ldr	r2, [r7, #0]
 801ab68:	4907      	ldr	r1, [pc, #28]	; (801ab88 <USBD_FS_ProductStrDescriptor+0x34>)
 801ab6a:	4808      	ldr	r0, [pc, #32]	; (801ab8c <USBD_FS_ProductStrDescriptor+0x38>)
 801ab6c:	f7fc fbce 	bl	801730c <USBD_GetString>
 801ab70:	e004      	b.n	801ab7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ab72:	683a      	ldr	r2, [r7, #0]
 801ab74:	4904      	ldr	r1, [pc, #16]	; (801ab88 <USBD_FS_ProductStrDescriptor+0x34>)
 801ab76:	4805      	ldr	r0, [pc, #20]	; (801ab8c <USBD_FS_ProductStrDescriptor+0x38>)
 801ab78:	f7fc fbc8 	bl	801730c <USBD_GetString>
  }
  return USBD_StrDesc;
 801ab7c:	4b02      	ldr	r3, [pc, #8]	; (801ab88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801ab7e:	4618      	mov	r0, r3
 801ab80:	3708      	adds	r7, #8
 801ab82:	46bd      	mov	sp, r7
 801ab84:	bd80      	pop	{r7, pc}
 801ab86:	bf00      	nop
 801ab88:	2000e860 	.word	0x2000e860
 801ab8c:	08022824 	.word	0x08022824

0801ab90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b082      	sub	sp, #8
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	4603      	mov	r3, r0
 801ab98:	6039      	str	r1, [r7, #0]
 801ab9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ab9c:	683a      	ldr	r2, [r7, #0]
 801ab9e:	4904      	ldr	r1, [pc, #16]	; (801abb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801aba0:	4804      	ldr	r0, [pc, #16]	; (801abb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801aba2:	f7fc fbb3 	bl	801730c <USBD_GetString>
  return USBD_StrDesc;
 801aba6:	4b02      	ldr	r3, [pc, #8]	; (801abb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801aba8:	4618      	mov	r0, r3
 801abaa:	3708      	adds	r7, #8
 801abac:	46bd      	mov	sp, r7
 801abae:	bd80      	pop	{r7, pc}
 801abb0:	2000e860 	.word	0x2000e860
 801abb4:	0802283c 	.word	0x0802283c

0801abb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b082      	sub	sp, #8
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	4603      	mov	r3, r0
 801abc0:	6039      	str	r1, [r7, #0]
 801abc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	221a      	movs	r2, #26
 801abc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801abca:	f000 f843 	bl	801ac54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801abce:	4b02      	ldr	r3, [pc, #8]	; (801abd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	3708      	adds	r7, #8
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}
 801abd8:	200000f4 	.word	0x200000f4

0801abdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b082      	sub	sp, #8
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	4603      	mov	r3, r0
 801abe4:	6039      	str	r1, [r7, #0]
 801abe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801abe8:	79fb      	ldrb	r3, [r7, #7]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d105      	bne.n	801abfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801abee:	683a      	ldr	r2, [r7, #0]
 801abf0:	4907      	ldr	r1, [pc, #28]	; (801ac10 <USBD_FS_ConfigStrDescriptor+0x34>)
 801abf2:	4808      	ldr	r0, [pc, #32]	; (801ac14 <USBD_FS_ConfigStrDescriptor+0x38>)
 801abf4:	f7fc fb8a 	bl	801730c <USBD_GetString>
 801abf8:	e004      	b.n	801ac04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801abfa:	683a      	ldr	r2, [r7, #0]
 801abfc:	4904      	ldr	r1, [pc, #16]	; (801ac10 <USBD_FS_ConfigStrDescriptor+0x34>)
 801abfe:	4805      	ldr	r0, [pc, #20]	; (801ac14 <USBD_FS_ConfigStrDescriptor+0x38>)
 801ac00:	f7fc fb84 	bl	801730c <USBD_GetString>
  }
  return USBD_StrDesc;
 801ac04:	4b02      	ldr	r3, [pc, #8]	; (801ac10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ac06:	4618      	mov	r0, r3
 801ac08:	3708      	adds	r7, #8
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	bd80      	pop	{r7, pc}
 801ac0e:	bf00      	nop
 801ac10:	2000e860 	.word	0x2000e860
 801ac14:	08022850 	.word	0x08022850

0801ac18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b082      	sub	sp, #8
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	4603      	mov	r3, r0
 801ac20:	6039      	str	r1, [r7, #0]
 801ac22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ac24:	79fb      	ldrb	r3, [r7, #7]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d105      	bne.n	801ac36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ac2a:	683a      	ldr	r2, [r7, #0]
 801ac2c:	4907      	ldr	r1, [pc, #28]	; (801ac4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ac2e:	4808      	ldr	r0, [pc, #32]	; (801ac50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ac30:	f7fc fb6c 	bl	801730c <USBD_GetString>
 801ac34:	e004      	b.n	801ac40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ac36:	683a      	ldr	r2, [r7, #0]
 801ac38:	4904      	ldr	r1, [pc, #16]	; (801ac4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ac3a:	4805      	ldr	r0, [pc, #20]	; (801ac50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ac3c:	f7fc fb66 	bl	801730c <USBD_GetString>
  }
  return USBD_StrDesc;
 801ac40:	4b02      	ldr	r3, [pc, #8]	; (801ac4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	3708      	adds	r7, #8
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bd80      	pop	{r7, pc}
 801ac4a:	bf00      	nop
 801ac4c:	2000e860 	.word	0x2000e860
 801ac50:	0802285c 	.word	0x0802285c

0801ac54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b084      	sub	sp, #16
 801ac58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ac5a:	4b0f      	ldr	r3, [pc, #60]	; (801ac98 <Get_SerialNum+0x44>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ac60:	4b0e      	ldr	r3, [pc, #56]	; (801ac9c <Get_SerialNum+0x48>)
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ac66:	4b0e      	ldr	r3, [pc, #56]	; (801aca0 <Get_SerialNum+0x4c>)
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ac6c:	68fa      	ldr	r2, [r7, #12]
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	4413      	add	r3, r2
 801ac72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d009      	beq.n	801ac8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ac7a:	2208      	movs	r2, #8
 801ac7c:	4909      	ldr	r1, [pc, #36]	; (801aca4 <Get_SerialNum+0x50>)
 801ac7e:	68f8      	ldr	r0, [r7, #12]
 801ac80:	f000 f814 	bl	801acac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ac84:	2204      	movs	r2, #4
 801ac86:	4908      	ldr	r1, [pc, #32]	; (801aca8 <Get_SerialNum+0x54>)
 801ac88:	68b8      	ldr	r0, [r7, #8]
 801ac8a:	f000 f80f 	bl	801acac <IntToUnicode>
  }
}
 801ac8e:	bf00      	nop
 801ac90:	3710      	adds	r7, #16
 801ac92:	46bd      	mov	sp, r7
 801ac94:	bd80      	pop	{r7, pc}
 801ac96:	bf00      	nop
 801ac98:	1fff7a10 	.word	0x1fff7a10
 801ac9c:	1fff7a14 	.word	0x1fff7a14
 801aca0:	1fff7a18 	.word	0x1fff7a18
 801aca4:	200000f6 	.word	0x200000f6
 801aca8:	20000106 	.word	0x20000106

0801acac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801acac:	b480      	push	{r7}
 801acae:	b087      	sub	sp, #28
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	60f8      	str	r0, [r7, #12]
 801acb4:	60b9      	str	r1, [r7, #8]
 801acb6:	4613      	mov	r3, r2
 801acb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801acba:	2300      	movs	r3, #0
 801acbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801acbe:	2300      	movs	r3, #0
 801acc0:	75fb      	strb	r3, [r7, #23]
 801acc2:	e027      	b.n	801ad14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	0f1b      	lsrs	r3, r3, #28
 801acc8:	2b09      	cmp	r3, #9
 801acca:	d80b      	bhi.n	801ace4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	0f1b      	lsrs	r3, r3, #28
 801acd0:	b2da      	uxtb	r2, r3
 801acd2:	7dfb      	ldrb	r3, [r7, #23]
 801acd4:	005b      	lsls	r3, r3, #1
 801acd6:	4619      	mov	r1, r3
 801acd8:	68bb      	ldr	r3, [r7, #8]
 801acda:	440b      	add	r3, r1
 801acdc:	3230      	adds	r2, #48	; 0x30
 801acde:	b2d2      	uxtb	r2, r2
 801ace0:	701a      	strb	r2, [r3, #0]
 801ace2:	e00a      	b.n	801acfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	0f1b      	lsrs	r3, r3, #28
 801ace8:	b2da      	uxtb	r2, r3
 801acea:	7dfb      	ldrb	r3, [r7, #23]
 801acec:	005b      	lsls	r3, r3, #1
 801acee:	4619      	mov	r1, r3
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	440b      	add	r3, r1
 801acf4:	3237      	adds	r2, #55	; 0x37
 801acf6:	b2d2      	uxtb	r2, r2
 801acf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	011b      	lsls	r3, r3, #4
 801acfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ad00:	7dfb      	ldrb	r3, [r7, #23]
 801ad02:	005b      	lsls	r3, r3, #1
 801ad04:	3301      	adds	r3, #1
 801ad06:	68ba      	ldr	r2, [r7, #8]
 801ad08:	4413      	add	r3, r2
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ad0e:	7dfb      	ldrb	r3, [r7, #23]
 801ad10:	3301      	adds	r3, #1
 801ad12:	75fb      	strb	r3, [r7, #23]
 801ad14:	7dfa      	ldrb	r2, [r7, #23]
 801ad16:	79fb      	ldrb	r3, [r7, #7]
 801ad18:	429a      	cmp	r2, r3
 801ad1a:	d3d3      	bcc.n	801acc4 <IntToUnicode+0x18>
  }
}
 801ad1c:	bf00      	nop
 801ad1e:	bf00      	nop
 801ad20:	371c      	adds	r7, #28
 801ad22:	46bd      	mov	sp, r7
 801ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad28:	4770      	bx	lr
	...

0801ad2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b08a      	sub	sp, #40	; 0x28
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ad34:	f107 0314 	add.w	r3, r7, #20
 801ad38:	2200      	movs	r2, #0
 801ad3a:	601a      	str	r2, [r3, #0]
 801ad3c:	605a      	str	r2, [r3, #4]
 801ad3e:	609a      	str	r2, [r3, #8]
 801ad40:	60da      	str	r2, [r3, #12]
 801ad42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ad4c:	d13a      	bne.n	801adc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ad4e:	2300      	movs	r3, #0
 801ad50:	613b      	str	r3, [r7, #16]
 801ad52:	4b1e      	ldr	r3, [pc, #120]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801ad54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad56:	4a1d      	ldr	r2, [pc, #116]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801ad58:	f043 0301 	orr.w	r3, r3, #1
 801ad5c:	6313      	str	r3, [r2, #48]	; 0x30
 801ad5e:	4b1b      	ldr	r3, [pc, #108]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801ad60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad62:	f003 0301 	and.w	r3, r3, #1
 801ad66:	613b      	str	r3, [r7, #16]
 801ad68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801ad6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801ad6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ad70:	2302      	movs	r3, #2
 801ad72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ad74:	2300      	movs	r3, #0
 801ad76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ad78:	2303      	movs	r3, #3
 801ad7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801ad7c:	230a      	movs	r3, #10
 801ad7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ad80:	f107 0314 	add.w	r3, r7, #20
 801ad84:	4619      	mov	r1, r3
 801ad86:	4812      	ldr	r0, [pc, #72]	; (801add0 <HAL_PCD_MspInit+0xa4>)
 801ad88:	f7f2 fa04 	bl	800d194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ad8c:	4b0f      	ldr	r3, [pc, #60]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801ad8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad90:	4a0e      	ldr	r2, [pc, #56]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801ad92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad96:	6353      	str	r3, [r2, #52]	; 0x34
 801ad98:	2300      	movs	r3, #0
 801ad9a:	60fb      	str	r3, [r7, #12]
 801ad9c:	4b0b      	ldr	r3, [pc, #44]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801ad9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ada0:	4a0a      	ldr	r2, [pc, #40]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801ada2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ada6:	6453      	str	r3, [r2, #68]	; 0x44
 801ada8:	4b08      	ldr	r3, [pc, #32]	; (801adcc <HAL_PCD_MspInit+0xa0>)
 801adaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801adb0:	60fb      	str	r3, [r7, #12]
 801adb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801adb4:	2200      	movs	r2, #0
 801adb6:	2105      	movs	r1, #5
 801adb8:	2043      	movs	r0, #67	; 0x43
 801adba:	f7f1 fdb3 	bl	800c924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801adbe:	2043      	movs	r0, #67	; 0x43
 801adc0:	f7f1 fdcc 	bl	800c95c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801adc4:	bf00      	nop
 801adc6:	3728      	adds	r7, #40	; 0x28
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd80      	pop	{r7, pc}
 801adcc:	40023800 	.word	0x40023800
 801add0:	40020000 	.word	0x40020000

0801add4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b082      	sub	sp, #8
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ade8:	4619      	mov	r1, r3
 801adea:	4610      	mov	r0, r2
 801adec:	f7fb f92f 	bl	801604e <USBD_LL_SetupStage>
}
 801adf0:	bf00      	nop
 801adf2:	3708      	adds	r7, #8
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bd80      	pop	{r7, pc}

0801adf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
 801ae00:	460b      	mov	r3, r1
 801ae02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ae0a:	78fa      	ldrb	r2, [r7, #3]
 801ae0c:	6879      	ldr	r1, [r7, #4]
 801ae0e:	4613      	mov	r3, r2
 801ae10:	00db      	lsls	r3, r3, #3
 801ae12:	4413      	add	r3, r2
 801ae14:	009b      	lsls	r3, r3, #2
 801ae16:	440b      	add	r3, r1
 801ae18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801ae1c:	681a      	ldr	r2, [r3, #0]
 801ae1e:	78fb      	ldrb	r3, [r7, #3]
 801ae20:	4619      	mov	r1, r3
 801ae22:	f7fb f969 	bl	80160f8 <USBD_LL_DataOutStage>
}
 801ae26:	bf00      	nop
 801ae28:	3708      	adds	r7, #8
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	bd80      	pop	{r7, pc}

0801ae2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae2e:	b580      	push	{r7, lr}
 801ae30:	b082      	sub	sp, #8
 801ae32:	af00      	add	r7, sp, #0
 801ae34:	6078      	str	r0, [r7, #4]
 801ae36:	460b      	mov	r3, r1
 801ae38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ae40:	78fa      	ldrb	r2, [r7, #3]
 801ae42:	6879      	ldr	r1, [r7, #4]
 801ae44:	4613      	mov	r3, r2
 801ae46:	00db      	lsls	r3, r3, #3
 801ae48:	4413      	add	r3, r2
 801ae4a:	009b      	lsls	r3, r3, #2
 801ae4c:	440b      	add	r3, r1
 801ae4e:	334c      	adds	r3, #76	; 0x4c
 801ae50:	681a      	ldr	r2, [r3, #0]
 801ae52:	78fb      	ldrb	r3, [r7, #3]
 801ae54:	4619      	mov	r1, r3
 801ae56:	f7fb fa02 	bl	801625e <USBD_LL_DataInStage>
}
 801ae5a:	bf00      	nop
 801ae5c:	3708      	adds	r7, #8
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}

0801ae62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae62:	b580      	push	{r7, lr}
 801ae64:	b082      	sub	sp, #8
 801ae66:	af00      	add	r7, sp, #0
 801ae68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ae70:	4618      	mov	r0, r3
 801ae72:	f7fb fb36 	bl	80164e2 <USBD_LL_SOF>
}
 801ae76:	bf00      	nop
 801ae78:	3708      	adds	r7, #8
 801ae7a:	46bd      	mov	sp, r7
 801ae7c:	bd80      	pop	{r7, pc}

0801ae7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae7e:	b580      	push	{r7, lr}
 801ae80:	b084      	sub	sp, #16
 801ae82:	af00      	add	r7, sp, #0
 801ae84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ae86:	2301      	movs	r3, #1
 801ae88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d102      	bne.n	801ae98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801ae92:	2300      	movs	r3, #0
 801ae94:	73fb      	strb	r3, [r7, #15]
 801ae96:	e008      	b.n	801aeaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	68db      	ldr	r3, [r3, #12]
 801ae9c:	2b02      	cmp	r3, #2
 801ae9e:	d102      	bne.n	801aea6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801aea0:	2301      	movs	r3, #1
 801aea2:	73fb      	strb	r3, [r7, #15]
 801aea4:	e001      	b.n	801aeaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801aea6:	f7e8 fe30 	bl	8003b0a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aeb0:	7bfa      	ldrb	r2, [r7, #15]
 801aeb2:	4611      	mov	r1, r2
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	f7fb fad6 	bl	8016466 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aec0:	4618      	mov	r0, r3
 801aec2:	f7fb fa7e 	bl	80163c2 <USBD_LL_Reset>
}
 801aec6:	bf00      	nop
 801aec8:	3710      	adds	r7, #16
 801aeca:	46bd      	mov	sp, r7
 801aecc:	bd80      	pop	{r7, pc}
	...

0801aed0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b082      	sub	sp, #8
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aede:	4618      	mov	r0, r3
 801aee0:	f7fb fad1 	bl	8016486 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	687a      	ldr	r2, [r7, #4]
 801aef0:	6812      	ldr	r2, [r2, #0]
 801aef2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801aef6:	f043 0301 	orr.w	r3, r3, #1
 801aefa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  gv_usb_connected = 0;
 801aefc:	4b08      	ldr	r3, [pc, #32]	; (801af20 <HAL_PCD_SuspendCallback+0x50>)
 801aefe:	2200      	movs	r2, #0
 801af00:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.low_power_enable)
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	6a1b      	ldr	r3, [r3, #32]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d005      	beq.n	801af16 <HAL_PCD_SuspendCallback+0x46>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801af0a:	4b06      	ldr	r3, [pc, #24]	; (801af24 <HAL_PCD_SuspendCallback+0x54>)
 801af0c:	691b      	ldr	r3, [r3, #16]
 801af0e:	4a05      	ldr	r2, [pc, #20]	; (801af24 <HAL_PCD_SuspendCallback+0x54>)
 801af10:	f043 0306 	orr.w	r3, r3, #6
 801af14:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801af16:	bf00      	nop
 801af18:	3708      	adds	r7, #8
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	200034c5 	.word	0x200034c5
 801af24:	e000ed00 	.word	0xe000ed00

0801af28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b082      	sub	sp, #8
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
	gv_usb_connected = 1;
 801af30:	4b06      	ldr	r3, [pc, #24]	; (801af4c <HAL_PCD_ResumeCallback+0x24>)
 801af32:	2201      	movs	r2, #1
 801af34:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af3c:	4618      	mov	r0, r3
 801af3e:	f7fb fab8 	bl	80164b2 <USBD_LL_Resume>
}
 801af42:	bf00      	nop
 801af44:	3708      	adds	r7, #8
 801af46:	46bd      	mov	sp, r7
 801af48:	bd80      	pop	{r7, pc}
 801af4a:	bf00      	nop
 801af4c:	200034c5 	.word	0x200034c5

0801af50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af50:	b580      	push	{r7, lr}
 801af52:	b082      	sub	sp, #8
 801af54:	af00      	add	r7, sp, #0
 801af56:	6078      	str	r0, [r7, #4]
 801af58:	460b      	mov	r3, r1
 801af5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af62:	78fa      	ldrb	r2, [r7, #3]
 801af64:	4611      	mov	r1, r2
 801af66:	4618      	mov	r0, r3
 801af68:	f7fb fb0d 	bl	8016586 <USBD_LL_IsoOUTIncomplete>
}
 801af6c:	bf00      	nop
 801af6e:	3708      	adds	r7, #8
 801af70:	46bd      	mov	sp, r7
 801af72:	bd80      	pop	{r7, pc}

0801af74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	460b      	mov	r3, r1
 801af7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af86:	78fa      	ldrb	r2, [r7, #3]
 801af88:	4611      	mov	r1, r2
 801af8a:	4618      	mov	r0, r3
 801af8c:	f7fb fac9 	bl	8016522 <USBD_LL_IsoINIncomplete>
}
 801af90:	bf00      	nop
 801af92:	3708      	adds	r7, #8
 801af94:	46bd      	mov	sp, r7
 801af96:	bd80      	pop	{r7, pc}

0801af98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b082      	sub	sp, #8
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801afa6:	4618      	mov	r0, r3
 801afa8:	f7fb fb1f 	bl	80165ea <USBD_LL_DevConnected>
}
 801afac:	bf00      	nop
 801afae:	3708      	adds	r7, #8
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd80      	pop	{r7, pc}

0801afb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b082      	sub	sp, #8
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801afc2:	4618      	mov	r0, r3
 801afc4:	f7fb fb1c 	bl	8016600 <USBD_LL_DevDisconnected>
}
 801afc8:	bf00      	nop
 801afca:	3708      	adds	r7, #8
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}

0801afd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b082      	sub	sp, #8
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	781b      	ldrb	r3, [r3, #0]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d13c      	bne.n	801b05a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801afe0:	4a20      	ldr	r2, [pc, #128]	; (801b064 <USBD_LL_Init+0x94>)
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	4a1e      	ldr	r2, [pc, #120]	; (801b064 <USBD_LL_Init+0x94>)
 801afec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801aff0:	4b1c      	ldr	r3, [pc, #112]	; (801b064 <USBD_LL_Init+0x94>)
 801aff2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801aff6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801aff8:	4b1a      	ldr	r3, [pc, #104]	; (801b064 <USBD_LL_Init+0x94>)
 801affa:	2204      	movs	r2, #4
 801affc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801affe:	4b19      	ldr	r3, [pc, #100]	; (801b064 <USBD_LL_Init+0x94>)
 801b000:	2202      	movs	r2, #2
 801b002:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b004:	4b17      	ldr	r3, [pc, #92]	; (801b064 <USBD_LL_Init+0x94>)
 801b006:	2200      	movs	r2, #0
 801b008:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b00a:	4b16      	ldr	r3, [pc, #88]	; (801b064 <USBD_LL_Init+0x94>)
 801b00c:	2202      	movs	r2, #2
 801b00e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b010:	4b14      	ldr	r3, [pc, #80]	; (801b064 <USBD_LL_Init+0x94>)
 801b012:	2200      	movs	r2, #0
 801b014:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b016:	4b13      	ldr	r3, [pc, #76]	; (801b064 <USBD_LL_Init+0x94>)
 801b018:	2200      	movs	r2, #0
 801b01a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b01c:	4b11      	ldr	r3, [pc, #68]	; (801b064 <USBD_LL_Init+0x94>)
 801b01e:	2200      	movs	r2, #0
 801b020:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b022:	4b10      	ldr	r3, [pc, #64]	; (801b064 <USBD_LL_Init+0x94>)
 801b024:	2200      	movs	r2, #0
 801b026:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b028:	4b0e      	ldr	r3, [pc, #56]	; (801b064 <USBD_LL_Init+0x94>)
 801b02a:	2200      	movs	r2, #0
 801b02c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b02e:	480d      	ldr	r0, [pc, #52]	; (801b064 <USBD_LL_Init+0x94>)
 801b030:	f7f4 f811 	bl	800f056 <HAL_PCD_Init>
 801b034:	4603      	mov	r3, r0
 801b036:	2b00      	cmp	r3, #0
 801b038:	d001      	beq.n	801b03e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801b03a:	f7e8 fd66 	bl	8003b0a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b03e:	2180      	movs	r1, #128	; 0x80
 801b040:	4808      	ldr	r0, [pc, #32]	; (801b064 <USBD_LL_Init+0x94>)
 801b042:	f7f5 fa68 	bl	8010516 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b046:	2240      	movs	r2, #64	; 0x40
 801b048:	2100      	movs	r1, #0
 801b04a:	4806      	ldr	r0, [pc, #24]	; (801b064 <USBD_LL_Init+0x94>)
 801b04c:	f7f5 fa1c 	bl	8010488 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b050:	2280      	movs	r2, #128	; 0x80
 801b052:	2101      	movs	r1, #1
 801b054:	4803      	ldr	r0, [pc, #12]	; (801b064 <USBD_LL_Init+0x94>)
 801b056:	f7f5 fa17 	bl	8010488 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801b05a:	2300      	movs	r3, #0
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	3708      	adds	r7, #8
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	2000ea60 	.word	0x2000ea60

0801b068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b084      	sub	sp, #16
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b070:	2300      	movs	r3, #0
 801b072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b074:	2300      	movs	r3, #0
 801b076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b07e:	4618      	mov	r0, r3
 801b080:	f7f4 f906 	bl	800f290 <HAL_PCD_Start>
 801b084:	4603      	mov	r3, r0
 801b086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b088:	7bfb      	ldrb	r3, [r7, #15]
 801b08a:	4618      	mov	r0, r3
 801b08c:	f000 f942 	bl	801b314 <USBD_Get_USB_Status>
 801b090:	4603      	mov	r3, r0
 801b092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b094:	7bbb      	ldrb	r3, [r7, #14]
}
 801b096:	4618      	mov	r0, r3
 801b098:	3710      	adds	r7, #16
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bd80      	pop	{r7, pc}

0801b09e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b09e:	b580      	push	{r7, lr}
 801b0a0:	b084      	sub	sp, #16
 801b0a2:	af00      	add	r7, sp, #0
 801b0a4:	6078      	str	r0, [r7, #4]
 801b0a6:	4608      	mov	r0, r1
 801b0a8:	4611      	mov	r1, r2
 801b0aa:	461a      	mov	r2, r3
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	70fb      	strb	r3, [r7, #3]
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	70bb      	strb	r3, [r7, #2]
 801b0b4:	4613      	mov	r3, r2
 801b0b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0bc:	2300      	movs	r3, #0
 801b0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b0c6:	78bb      	ldrb	r3, [r7, #2]
 801b0c8:	883a      	ldrh	r2, [r7, #0]
 801b0ca:	78f9      	ldrb	r1, [r7, #3]
 801b0cc:	f7f4 fdd7 	bl	800fc7e <HAL_PCD_EP_Open>
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0d4:	7bfb      	ldrb	r3, [r7, #15]
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	f000 f91c 	bl	801b314 <USBD_Get_USB_Status>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	3710      	adds	r7, #16
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}

0801b0ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b0ea:	b580      	push	{r7, lr}
 801b0ec:	b084      	sub	sp, #16
 801b0ee:	af00      	add	r7, sp, #0
 801b0f0:	6078      	str	r0, [r7, #4]
 801b0f2:	460b      	mov	r3, r1
 801b0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b104:	78fa      	ldrb	r2, [r7, #3]
 801b106:	4611      	mov	r1, r2
 801b108:	4618      	mov	r0, r3
 801b10a:	f7f4 fe20 	bl	800fd4e <HAL_PCD_EP_Close>
 801b10e:	4603      	mov	r3, r0
 801b110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b112:	7bfb      	ldrb	r3, [r7, #15]
 801b114:	4618      	mov	r0, r3
 801b116:	f000 f8fd 	bl	801b314 <USBD_Get_USB_Status>
 801b11a:	4603      	mov	r3, r0
 801b11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b11e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b120:	4618      	mov	r0, r3
 801b122:	3710      	adds	r7, #16
 801b124:	46bd      	mov	sp, r7
 801b126:	bd80      	pop	{r7, pc}

0801b128 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b084      	sub	sp, #16
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]
 801b130:	460b      	mov	r3, r1
 801b132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b134:	2300      	movs	r3, #0
 801b136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b138:	2300      	movs	r3, #0
 801b13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b142:	78fa      	ldrb	r2, [r7, #3]
 801b144:	4611      	mov	r1, r2
 801b146:	4618      	mov	r0, r3
 801b148:	f7f4 fef8 	bl	800ff3c <HAL_PCD_EP_SetStall>
 801b14c:	4603      	mov	r3, r0
 801b14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b150:	7bfb      	ldrb	r3, [r7, #15]
 801b152:	4618      	mov	r0, r3
 801b154:	f000 f8de 	bl	801b314 <USBD_Get_USB_Status>
 801b158:	4603      	mov	r3, r0
 801b15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b15c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b15e:	4618      	mov	r0, r3
 801b160:	3710      	adds	r7, #16
 801b162:	46bd      	mov	sp, r7
 801b164:	bd80      	pop	{r7, pc}

0801b166 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b166:	b580      	push	{r7, lr}
 801b168:	b084      	sub	sp, #16
 801b16a:	af00      	add	r7, sp, #0
 801b16c:	6078      	str	r0, [r7, #4]
 801b16e:	460b      	mov	r3, r1
 801b170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b172:	2300      	movs	r3, #0
 801b174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b176:	2300      	movs	r3, #0
 801b178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b180:	78fa      	ldrb	r2, [r7, #3]
 801b182:	4611      	mov	r1, r2
 801b184:	4618      	mov	r0, r3
 801b186:	f7f4 ff3d 	bl	8010004 <HAL_PCD_EP_ClrStall>
 801b18a:	4603      	mov	r3, r0
 801b18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b18e:	7bfb      	ldrb	r3, [r7, #15]
 801b190:	4618      	mov	r0, r3
 801b192:	f000 f8bf 	bl	801b314 <USBD_Get_USB_Status>
 801b196:	4603      	mov	r3, r0
 801b198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b19a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b19c:	4618      	mov	r0, r3
 801b19e:	3710      	adds	r7, #16
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bd80      	pop	{r7, pc}

0801b1a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1a4:	b480      	push	{r7}
 801b1a6:	b085      	sub	sp, #20
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
 801b1ac:	460b      	mov	r3, r1
 801b1ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b1b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b1b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	da0b      	bge.n	801b1d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b1c0:	78fb      	ldrb	r3, [r7, #3]
 801b1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b1c6:	68f9      	ldr	r1, [r7, #12]
 801b1c8:	4613      	mov	r3, r2
 801b1ca:	00db      	lsls	r3, r3, #3
 801b1cc:	4413      	add	r3, r2
 801b1ce:	009b      	lsls	r3, r3, #2
 801b1d0:	440b      	add	r3, r1
 801b1d2:	333e      	adds	r3, #62	; 0x3e
 801b1d4:	781b      	ldrb	r3, [r3, #0]
 801b1d6:	e00b      	b.n	801b1f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b1d8:	78fb      	ldrb	r3, [r7, #3]
 801b1da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b1de:	68f9      	ldr	r1, [r7, #12]
 801b1e0:	4613      	mov	r3, r2
 801b1e2:	00db      	lsls	r3, r3, #3
 801b1e4:	4413      	add	r3, r2
 801b1e6:	009b      	lsls	r3, r3, #2
 801b1e8:	440b      	add	r3, r1
 801b1ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b1ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	3714      	adds	r7, #20
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1fa:	4770      	bx	lr

0801b1fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b084      	sub	sp, #16
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	460b      	mov	r3, r1
 801b206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b208:	2300      	movs	r3, #0
 801b20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b20c:	2300      	movs	r3, #0
 801b20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b216:	78fa      	ldrb	r2, [r7, #3]
 801b218:	4611      	mov	r1, r2
 801b21a:	4618      	mov	r0, r3
 801b21c:	f7f4 fd0a 	bl	800fc34 <HAL_PCD_SetAddress>
 801b220:	4603      	mov	r3, r0
 801b222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b224:	7bfb      	ldrb	r3, [r7, #15]
 801b226:	4618      	mov	r0, r3
 801b228:	f000 f874 	bl	801b314 <USBD_Get_USB_Status>
 801b22c:	4603      	mov	r3, r0
 801b22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b230:	7bbb      	ldrb	r3, [r7, #14]
}
 801b232:	4618      	mov	r0, r3
 801b234:	3710      	adds	r7, #16
 801b236:	46bd      	mov	sp, r7
 801b238:	bd80      	pop	{r7, pc}

0801b23a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b23a:	b580      	push	{r7, lr}
 801b23c:	b086      	sub	sp, #24
 801b23e:	af00      	add	r7, sp, #0
 801b240:	60f8      	str	r0, [r7, #12]
 801b242:	607a      	str	r2, [r7, #4]
 801b244:	603b      	str	r3, [r7, #0]
 801b246:	460b      	mov	r3, r1
 801b248:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b24a:	2300      	movs	r3, #0
 801b24c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b24e:	2300      	movs	r3, #0
 801b250:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b258:	7af9      	ldrb	r1, [r7, #11]
 801b25a:	683b      	ldr	r3, [r7, #0]
 801b25c:	687a      	ldr	r2, [r7, #4]
 801b25e:	f7f4 fe23 	bl	800fea8 <HAL_PCD_EP_Transmit>
 801b262:	4603      	mov	r3, r0
 801b264:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b266:	7dfb      	ldrb	r3, [r7, #23]
 801b268:	4618      	mov	r0, r3
 801b26a:	f000 f853 	bl	801b314 <USBD_Get_USB_Status>
 801b26e:	4603      	mov	r3, r0
 801b270:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b272:	7dbb      	ldrb	r3, [r7, #22]
}
 801b274:	4618      	mov	r0, r3
 801b276:	3718      	adds	r7, #24
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd80      	pop	{r7, pc}

0801b27c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b086      	sub	sp, #24
 801b280:	af00      	add	r7, sp, #0
 801b282:	60f8      	str	r0, [r7, #12]
 801b284:	607a      	str	r2, [r7, #4]
 801b286:	603b      	str	r3, [r7, #0]
 801b288:	460b      	mov	r3, r1
 801b28a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b28c:	2300      	movs	r3, #0
 801b28e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b290:	2300      	movs	r3, #0
 801b292:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b29a:	7af9      	ldrb	r1, [r7, #11]
 801b29c:	683b      	ldr	r3, [r7, #0]
 801b29e:	687a      	ldr	r2, [r7, #4]
 801b2a0:	f7f4 fd9f 	bl	800fde2 <HAL_PCD_EP_Receive>
 801b2a4:	4603      	mov	r3, r0
 801b2a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b2a8:	7dfb      	ldrb	r3, [r7, #23]
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	f000 f832 	bl	801b314 <USBD_Get_USB_Status>
 801b2b0:	4603      	mov	r3, r0
 801b2b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b2b4:	7dbb      	ldrb	r3, [r7, #22]
}
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	3718      	adds	r7, #24
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	bd80      	pop	{r7, pc}

0801b2be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b2be:	b580      	push	{r7, lr}
 801b2c0:	b082      	sub	sp, #8
 801b2c2:	af00      	add	r7, sp, #0
 801b2c4:	6078      	str	r0, [r7, #4]
 801b2c6:	460b      	mov	r3, r1
 801b2c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b2d0:	78fa      	ldrb	r2, [r7, #3]
 801b2d2:	4611      	mov	r1, r2
 801b2d4:	4618      	mov	r0, r3
 801b2d6:	f7f4 fdcf 	bl	800fe78 <HAL_PCD_EP_GetRxCount>
 801b2da:	4603      	mov	r3, r0
}
 801b2dc:	4618      	mov	r0, r3
 801b2de:	3708      	adds	r7, #8
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b2e4:	b480      	push	{r7}
 801b2e6:	b083      	sub	sp, #12
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b2ec:	4b03      	ldr	r3, [pc, #12]	; (801b2fc <USBD_static_malloc+0x18>)
}
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	370c      	adds	r7, #12
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f8:	4770      	bx	lr
 801b2fa:	bf00      	nop
 801b2fc:	2000ef6c 	.word	0x2000ef6c

0801b300 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b300:	b480      	push	{r7}
 801b302:	b083      	sub	sp, #12
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]

}
 801b308:	bf00      	nop
 801b30a:	370c      	adds	r7, #12
 801b30c:	46bd      	mov	sp, r7
 801b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b312:	4770      	bx	lr

0801b314 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b314:	b480      	push	{r7}
 801b316:	b085      	sub	sp, #20
 801b318:	af00      	add	r7, sp, #0
 801b31a:	4603      	mov	r3, r0
 801b31c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b31e:	2300      	movs	r3, #0
 801b320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b322:	79fb      	ldrb	r3, [r7, #7]
 801b324:	2b03      	cmp	r3, #3
 801b326:	d817      	bhi.n	801b358 <USBD_Get_USB_Status+0x44>
 801b328:	a201      	add	r2, pc, #4	; (adr r2, 801b330 <USBD_Get_USB_Status+0x1c>)
 801b32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b32e:	bf00      	nop
 801b330:	0801b341 	.word	0x0801b341
 801b334:	0801b347 	.word	0x0801b347
 801b338:	0801b34d 	.word	0x0801b34d
 801b33c:	0801b353 	.word	0x0801b353
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b340:	2300      	movs	r3, #0
 801b342:	73fb      	strb	r3, [r7, #15]
    break;
 801b344:	e00b      	b.n	801b35e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b346:	2303      	movs	r3, #3
 801b348:	73fb      	strb	r3, [r7, #15]
    break;
 801b34a:	e008      	b.n	801b35e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b34c:	2301      	movs	r3, #1
 801b34e:	73fb      	strb	r3, [r7, #15]
    break;
 801b350:	e005      	b.n	801b35e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b352:	2303      	movs	r3, #3
 801b354:	73fb      	strb	r3, [r7, #15]
    break;
 801b356:	e002      	b.n	801b35e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b358:	2303      	movs	r3, #3
 801b35a:	73fb      	strb	r3, [r7, #15]
    break;
 801b35c:	bf00      	nop
  }
  return usb_status;
 801b35e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b360:	4618      	mov	r0, r3
 801b362:	3714      	adds	r7, #20
 801b364:	46bd      	mov	sp, r7
 801b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b36a:	4770      	bx	lr

0801b36c <std>:
 801b36c:	2300      	movs	r3, #0
 801b36e:	b510      	push	{r4, lr}
 801b370:	4604      	mov	r4, r0
 801b372:	e9c0 3300 	strd	r3, r3, [r0]
 801b376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b37a:	6083      	str	r3, [r0, #8]
 801b37c:	8181      	strh	r1, [r0, #12]
 801b37e:	6643      	str	r3, [r0, #100]	; 0x64
 801b380:	81c2      	strh	r2, [r0, #14]
 801b382:	6183      	str	r3, [r0, #24]
 801b384:	4619      	mov	r1, r3
 801b386:	2208      	movs	r2, #8
 801b388:	305c      	adds	r0, #92	; 0x5c
 801b38a:	f000 f91a 	bl	801b5c2 <memset>
 801b38e:	4b05      	ldr	r3, [pc, #20]	; (801b3a4 <std+0x38>)
 801b390:	6263      	str	r3, [r4, #36]	; 0x24
 801b392:	4b05      	ldr	r3, [pc, #20]	; (801b3a8 <std+0x3c>)
 801b394:	62a3      	str	r3, [r4, #40]	; 0x28
 801b396:	4b05      	ldr	r3, [pc, #20]	; (801b3ac <std+0x40>)
 801b398:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b39a:	4b05      	ldr	r3, [pc, #20]	; (801b3b0 <std+0x44>)
 801b39c:	6224      	str	r4, [r4, #32]
 801b39e:	6323      	str	r3, [r4, #48]	; 0x30
 801b3a0:	bd10      	pop	{r4, pc}
 801b3a2:	bf00      	nop
 801b3a4:	0801c599 	.word	0x0801c599
 801b3a8:	0801c5bb 	.word	0x0801c5bb
 801b3ac:	0801c5f3 	.word	0x0801c5f3
 801b3b0:	0801c617 	.word	0x0801c617

0801b3b4 <_cleanup_r>:
 801b3b4:	4901      	ldr	r1, [pc, #4]	; (801b3bc <_cleanup_r+0x8>)
 801b3b6:	f000 b8af 	b.w	801b518 <_fwalk_reent>
 801b3ba:	bf00      	nop
 801b3bc:	0801e1cd 	.word	0x0801e1cd

0801b3c0 <__sfmoreglue>:
 801b3c0:	b570      	push	{r4, r5, r6, lr}
 801b3c2:	2268      	movs	r2, #104	; 0x68
 801b3c4:	1e4d      	subs	r5, r1, #1
 801b3c6:	4355      	muls	r5, r2
 801b3c8:	460e      	mov	r6, r1
 801b3ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b3ce:	f000 f921 	bl	801b614 <_malloc_r>
 801b3d2:	4604      	mov	r4, r0
 801b3d4:	b140      	cbz	r0, 801b3e8 <__sfmoreglue+0x28>
 801b3d6:	2100      	movs	r1, #0
 801b3d8:	e9c0 1600 	strd	r1, r6, [r0]
 801b3dc:	300c      	adds	r0, #12
 801b3de:	60a0      	str	r0, [r4, #8]
 801b3e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b3e4:	f000 f8ed 	bl	801b5c2 <memset>
 801b3e8:	4620      	mov	r0, r4
 801b3ea:	bd70      	pop	{r4, r5, r6, pc}

0801b3ec <__sfp_lock_acquire>:
 801b3ec:	4801      	ldr	r0, [pc, #4]	; (801b3f4 <__sfp_lock_acquire+0x8>)
 801b3ee:	f000 b8d8 	b.w	801b5a2 <__retarget_lock_acquire_recursive>
 801b3f2:	bf00      	nop
 801b3f4:	2000f18d 	.word	0x2000f18d

0801b3f8 <__sfp_lock_release>:
 801b3f8:	4801      	ldr	r0, [pc, #4]	; (801b400 <__sfp_lock_release+0x8>)
 801b3fa:	f000 b8d3 	b.w	801b5a4 <__retarget_lock_release_recursive>
 801b3fe:	bf00      	nop
 801b400:	2000f18d 	.word	0x2000f18d

0801b404 <__sinit_lock_acquire>:
 801b404:	4801      	ldr	r0, [pc, #4]	; (801b40c <__sinit_lock_acquire+0x8>)
 801b406:	f000 b8cc 	b.w	801b5a2 <__retarget_lock_acquire_recursive>
 801b40a:	bf00      	nop
 801b40c:	2000f18e 	.word	0x2000f18e

0801b410 <__sinit_lock_release>:
 801b410:	4801      	ldr	r0, [pc, #4]	; (801b418 <__sinit_lock_release+0x8>)
 801b412:	f000 b8c7 	b.w	801b5a4 <__retarget_lock_release_recursive>
 801b416:	bf00      	nop
 801b418:	2000f18e 	.word	0x2000f18e

0801b41c <__sinit>:
 801b41c:	b510      	push	{r4, lr}
 801b41e:	4604      	mov	r4, r0
 801b420:	f7ff fff0 	bl	801b404 <__sinit_lock_acquire>
 801b424:	69a3      	ldr	r3, [r4, #24]
 801b426:	b11b      	cbz	r3, 801b430 <__sinit+0x14>
 801b428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b42c:	f7ff bff0 	b.w	801b410 <__sinit_lock_release>
 801b430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b434:	6523      	str	r3, [r4, #80]	; 0x50
 801b436:	4b13      	ldr	r3, [pc, #76]	; (801b484 <__sinit+0x68>)
 801b438:	4a13      	ldr	r2, [pc, #76]	; (801b488 <__sinit+0x6c>)
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b43e:	42a3      	cmp	r3, r4
 801b440:	bf04      	itt	eq
 801b442:	2301      	moveq	r3, #1
 801b444:	61a3      	streq	r3, [r4, #24]
 801b446:	4620      	mov	r0, r4
 801b448:	f000 f820 	bl	801b48c <__sfp>
 801b44c:	6060      	str	r0, [r4, #4]
 801b44e:	4620      	mov	r0, r4
 801b450:	f000 f81c 	bl	801b48c <__sfp>
 801b454:	60a0      	str	r0, [r4, #8]
 801b456:	4620      	mov	r0, r4
 801b458:	f000 f818 	bl	801b48c <__sfp>
 801b45c:	2200      	movs	r2, #0
 801b45e:	60e0      	str	r0, [r4, #12]
 801b460:	2104      	movs	r1, #4
 801b462:	6860      	ldr	r0, [r4, #4]
 801b464:	f7ff ff82 	bl	801b36c <std>
 801b468:	68a0      	ldr	r0, [r4, #8]
 801b46a:	2201      	movs	r2, #1
 801b46c:	2109      	movs	r1, #9
 801b46e:	f7ff ff7d 	bl	801b36c <std>
 801b472:	68e0      	ldr	r0, [r4, #12]
 801b474:	2202      	movs	r2, #2
 801b476:	2112      	movs	r1, #18
 801b478:	f7ff ff78 	bl	801b36c <std>
 801b47c:	2301      	movs	r3, #1
 801b47e:	61a3      	str	r3, [r4, #24]
 801b480:	e7d2      	b.n	801b428 <__sinit+0xc>
 801b482:	bf00      	nop
 801b484:	08022edc 	.word	0x08022edc
 801b488:	0801b3b5 	.word	0x0801b3b5

0801b48c <__sfp>:
 801b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b48e:	4607      	mov	r7, r0
 801b490:	f7ff ffac 	bl	801b3ec <__sfp_lock_acquire>
 801b494:	4b1e      	ldr	r3, [pc, #120]	; (801b510 <__sfp+0x84>)
 801b496:	681e      	ldr	r6, [r3, #0]
 801b498:	69b3      	ldr	r3, [r6, #24]
 801b49a:	b913      	cbnz	r3, 801b4a2 <__sfp+0x16>
 801b49c:	4630      	mov	r0, r6
 801b49e:	f7ff ffbd 	bl	801b41c <__sinit>
 801b4a2:	3648      	adds	r6, #72	; 0x48
 801b4a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b4a8:	3b01      	subs	r3, #1
 801b4aa:	d503      	bpl.n	801b4b4 <__sfp+0x28>
 801b4ac:	6833      	ldr	r3, [r6, #0]
 801b4ae:	b30b      	cbz	r3, 801b4f4 <__sfp+0x68>
 801b4b0:	6836      	ldr	r6, [r6, #0]
 801b4b2:	e7f7      	b.n	801b4a4 <__sfp+0x18>
 801b4b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b4b8:	b9d5      	cbnz	r5, 801b4f0 <__sfp+0x64>
 801b4ba:	4b16      	ldr	r3, [pc, #88]	; (801b514 <__sfp+0x88>)
 801b4bc:	60e3      	str	r3, [r4, #12]
 801b4be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b4c2:	6665      	str	r5, [r4, #100]	; 0x64
 801b4c4:	f000 f86c 	bl	801b5a0 <__retarget_lock_init_recursive>
 801b4c8:	f7ff ff96 	bl	801b3f8 <__sfp_lock_release>
 801b4cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b4d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b4d4:	6025      	str	r5, [r4, #0]
 801b4d6:	61a5      	str	r5, [r4, #24]
 801b4d8:	2208      	movs	r2, #8
 801b4da:	4629      	mov	r1, r5
 801b4dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b4e0:	f000 f86f 	bl	801b5c2 <memset>
 801b4e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b4e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4f0:	3468      	adds	r4, #104	; 0x68
 801b4f2:	e7d9      	b.n	801b4a8 <__sfp+0x1c>
 801b4f4:	2104      	movs	r1, #4
 801b4f6:	4638      	mov	r0, r7
 801b4f8:	f7ff ff62 	bl	801b3c0 <__sfmoreglue>
 801b4fc:	4604      	mov	r4, r0
 801b4fe:	6030      	str	r0, [r6, #0]
 801b500:	2800      	cmp	r0, #0
 801b502:	d1d5      	bne.n	801b4b0 <__sfp+0x24>
 801b504:	f7ff ff78 	bl	801b3f8 <__sfp_lock_release>
 801b508:	230c      	movs	r3, #12
 801b50a:	603b      	str	r3, [r7, #0]
 801b50c:	e7ee      	b.n	801b4ec <__sfp+0x60>
 801b50e:	bf00      	nop
 801b510:	08022edc 	.word	0x08022edc
 801b514:	ffff0001 	.word	0xffff0001

0801b518 <_fwalk_reent>:
 801b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b51c:	4606      	mov	r6, r0
 801b51e:	4688      	mov	r8, r1
 801b520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b524:	2700      	movs	r7, #0
 801b526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b52a:	f1b9 0901 	subs.w	r9, r9, #1
 801b52e:	d505      	bpl.n	801b53c <_fwalk_reent+0x24>
 801b530:	6824      	ldr	r4, [r4, #0]
 801b532:	2c00      	cmp	r4, #0
 801b534:	d1f7      	bne.n	801b526 <_fwalk_reent+0xe>
 801b536:	4638      	mov	r0, r7
 801b538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b53c:	89ab      	ldrh	r3, [r5, #12]
 801b53e:	2b01      	cmp	r3, #1
 801b540:	d907      	bls.n	801b552 <_fwalk_reent+0x3a>
 801b542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b546:	3301      	adds	r3, #1
 801b548:	d003      	beq.n	801b552 <_fwalk_reent+0x3a>
 801b54a:	4629      	mov	r1, r5
 801b54c:	4630      	mov	r0, r6
 801b54e:	47c0      	blx	r8
 801b550:	4307      	orrs	r7, r0
 801b552:	3568      	adds	r5, #104	; 0x68
 801b554:	e7e9      	b.n	801b52a <_fwalk_reent+0x12>
	...

0801b558 <__libc_init_array>:
 801b558:	b570      	push	{r4, r5, r6, lr}
 801b55a:	4d0d      	ldr	r5, [pc, #52]	; (801b590 <__libc_init_array+0x38>)
 801b55c:	4c0d      	ldr	r4, [pc, #52]	; (801b594 <__libc_init_array+0x3c>)
 801b55e:	1b64      	subs	r4, r4, r5
 801b560:	10a4      	asrs	r4, r4, #2
 801b562:	2600      	movs	r6, #0
 801b564:	42a6      	cmp	r6, r4
 801b566:	d109      	bne.n	801b57c <__libc_init_array+0x24>
 801b568:	4d0b      	ldr	r5, [pc, #44]	; (801b598 <__libc_init_array+0x40>)
 801b56a:	4c0c      	ldr	r4, [pc, #48]	; (801b59c <__libc_init_array+0x44>)
 801b56c:	f007 f8c6 	bl	80226fc <_init>
 801b570:	1b64      	subs	r4, r4, r5
 801b572:	10a4      	asrs	r4, r4, #2
 801b574:	2600      	movs	r6, #0
 801b576:	42a6      	cmp	r6, r4
 801b578:	d105      	bne.n	801b586 <__libc_init_array+0x2e>
 801b57a:	bd70      	pop	{r4, r5, r6, pc}
 801b57c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b580:	4798      	blx	r3
 801b582:	3601      	adds	r6, #1
 801b584:	e7ee      	b.n	801b564 <__libc_init_array+0xc>
 801b586:	f855 3b04 	ldr.w	r3, [r5], #4
 801b58a:	4798      	blx	r3
 801b58c:	3601      	adds	r6, #1
 801b58e:	e7f2      	b.n	801b576 <__libc_init_array+0x1e>
 801b590:	080235a8 	.word	0x080235a8
 801b594:	080235a8 	.word	0x080235a8
 801b598:	080235a8 	.word	0x080235a8
 801b59c:	080235ac 	.word	0x080235ac

0801b5a0 <__retarget_lock_init_recursive>:
 801b5a0:	4770      	bx	lr

0801b5a2 <__retarget_lock_acquire_recursive>:
 801b5a2:	4770      	bx	lr

0801b5a4 <__retarget_lock_release_recursive>:
 801b5a4:	4770      	bx	lr

0801b5a6 <memcpy>:
 801b5a6:	440a      	add	r2, r1
 801b5a8:	4291      	cmp	r1, r2
 801b5aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b5ae:	d100      	bne.n	801b5b2 <memcpy+0xc>
 801b5b0:	4770      	bx	lr
 801b5b2:	b510      	push	{r4, lr}
 801b5b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b5bc:	4291      	cmp	r1, r2
 801b5be:	d1f9      	bne.n	801b5b4 <memcpy+0xe>
 801b5c0:	bd10      	pop	{r4, pc}

0801b5c2 <memset>:
 801b5c2:	4402      	add	r2, r0
 801b5c4:	4603      	mov	r3, r0
 801b5c6:	4293      	cmp	r3, r2
 801b5c8:	d100      	bne.n	801b5cc <memset+0xa>
 801b5ca:	4770      	bx	lr
 801b5cc:	f803 1b01 	strb.w	r1, [r3], #1
 801b5d0:	e7f9      	b.n	801b5c6 <memset+0x4>
	...

0801b5d4 <sbrk_aligned>:
 801b5d4:	b570      	push	{r4, r5, r6, lr}
 801b5d6:	4e0e      	ldr	r6, [pc, #56]	; (801b610 <sbrk_aligned+0x3c>)
 801b5d8:	460c      	mov	r4, r1
 801b5da:	6831      	ldr	r1, [r6, #0]
 801b5dc:	4605      	mov	r5, r0
 801b5de:	b911      	cbnz	r1, 801b5e6 <sbrk_aligned+0x12>
 801b5e0:	f000 ff70 	bl	801c4c4 <_sbrk_r>
 801b5e4:	6030      	str	r0, [r6, #0]
 801b5e6:	4621      	mov	r1, r4
 801b5e8:	4628      	mov	r0, r5
 801b5ea:	f000 ff6b 	bl	801c4c4 <_sbrk_r>
 801b5ee:	1c43      	adds	r3, r0, #1
 801b5f0:	d00a      	beq.n	801b608 <sbrk_aligned+0x34>
 801b5f2:	1cc4      	adds	r4, r0, #3
 801b5f4:	f024 0403 	bic.w	r4, r4, #3
 801b5f8:	42a0      	cmp	r0, r4
 801b5fa:	d007      	beq.n	801b60c <sbrk_aligned+0x38>
 801b5fc:	1a21      	subs	r1, r4, r0
 801b5fe:	4628      	mov	r0, r5
 801b600:	f000 ff60 	bl	801c4c4 <_sbrk_r>
 801b604:	3001      	adds	r0, #1
 801b606:	d101      	bne.n	801b60c <sbrk_aligned+0x38>
 801b608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b60c:	4620      	mov	r0, r4
 801b60e:	bd70      	pop	{r4, r5, r6, pc}
 801b610:	2000f194 	.word	0x2000f194

0801b614 <_malloc_r>:
 801b614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b618:	1ccd      	adds	r5, r1, #3
 801b61a:	f025 0503 	bic.w	r5, r5, #3
 801b61e:	3508      	adds	r5, #8
 801b620:	2d0c      	cmp	r5, #12
 801b622:	bf38      	it	cc
 801b624:	250c      	movcc	r5, #12
 801b626:	2d00      	cmp	r5, #0
 801b628:	4607      	mov	r7, r0
 801b62a:	db01      	blt.n	801b630 <_malloc_r+0x1c>
 801b62c:	42a9      	cmp	r1, r5
 801b62e:	d905      	bls.n	801b63c <_malloc_r+0x28>
 801b630:	230c      	movs	r3, #12
 801b632:	603b      	str	r3, [r7, #0]
 801b634:	2600      	movs	r6, #0
 801b636:	4630      	mov	r0, r6
 801b638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b63c:	4e2e      	ldr	r6, [pc, #184]	; (801b6f8 <_malloc_r+0xe4>)
 801b63e:	f003 f9a1 	bl	801e984 <__malloc_lock>
 801b642:	6833      	ldr	r3, [r6, #0]
 801b644:	461c      	mov	r4, r3
 801b646:	bb34      	cbnz	r4, 801b696 <_malloc_r+0x82>
 801b648:	4629      	mov	r1, r5
 801b64a:	4638      	mov	r0, r7
 801b64c:	f7ff ffc2 	bl	801b5d4 <sbrk_aligned>
 801b650:	1c43      	adds	r3, r0, #1
 801b652:	4604      	mov	r4, r0
 801b654:	d14d      	bne.n	801b6f2 <_malloc_r+0xde>
 801b656:	6834      	ldr	r4, [r6, #0]
 801b658:	4626      	mov	r6, r4
 801b65a:	2e00      	cmp	r6, #0
 801b65c:	d140      	bne.n	801b6e0 <_malloc_r+0xcc>
 801b65e:	6823      	ldr	r3, [r4, #0]
 801b660:	4631      	mov	r1, r6
 801b662:	4638      	mov	r0, r7
 801b664:	eb04 0803 	add.w	r8, r4, r3
 801b668:	f000 ff2c 	bl	801c4c4 <_sbrk_r>
 801b66c:	4580      	cmp	r8, r0
 801b66e:	d13a      	bne.n	801b6e6 <_malloc_r+0xd2>
 801b670:	6821      	ldr	r1, [r4, #0]
 801b672:	3503      	adds	r5, #3
 801b674:	1a6d      	subs	r5, r5, r1
 801b676:	f025 0503 	bic.w	r5, r5, #3
 801b67a:	3508      	adds	r5, #8
 801b67c:	2d0c      	cmp	r5, #12
 801b67e:	bf38      	it	cc
 801b680:	250c      	movcc	r5, #12
 801b682:	4629      	mov	r1, r5
 801b684:	4638      	mov	r0, r7
 801b686:	f7ff ffa5 	bl	801b5d4 <sbrk_aligned>
 801b68a:	3001      	adds	r0, #1
 801b68c:	d02b      	beq.n	801b6e6 <_malloc_r+0xd2>
 801b68e:	6823      	ldr	r3, [r4, #0]
 801b690:	442b      	add	r3, r5
 801b692:	6023      	str	r3, [r4, #0]
 801b694:	e00e      	b.n	801b6b4 <_malloc_r+0xa0>
 801b696:	6822      	ldr	r2, [r4, #0]
 801b698:	1b52      	subs	r2, r2, r5
 801b69a:	d41e      	bmi.n	801b6da <_malloc_r+0xc6>
 801b69c:	2a0b      	cmp	r2, #11
 801b69e:	d916      	bls.n	801b6ce <_malloc_r+0xba>
 801b6a0:	1961      	adds	r1, r4, r5
 801b6a2:	42a3      	cmp	r3, r4
 801b6a4:	6025      	str	r5, [r4, #0]
 801b6a6:	bf18      	it	ne
 801b6a8:	6059      	strne	r1, [r3, #4]
 801b6aa:	6863      	ldr	r3, [r4, #4]
 801b6ac:	bf08      	it	eq
 801b6ae:	6031      	streq	r1, [r6, #0]
 801b6b0:	5162      	str	r2, [r4, r5]
 801b6b2:	604b      	str	r3, [r1, #4]
 801b6b4:	4638      	mov	r0, r7
 801b6b6:	f104 060b 	add.w	r6, r4, #11
 801b6ba:	f003 f969 	bl	801e990 <__malloc_unlock>
 801b6be:	f026 0607 	bic.w	r6, r6, #7
 801b6c2:	1d23      	adds	r3, r4, #4
 801b6c4:	1af2      	subs	r2, r6, r3
 801b6c6:	d0b6      	beq.n	801b636 <_malloc_r+0x22>
 801b6c8:	1b9b      	subs	r3, r3, r6
 801b6ca:	50a3      	str	r3, [r4, r2]
 801b6cc:	e7b3      	b.n	801b636 <_malloc_r+0x22>
 801b6ce:	6862      	ldr	r2, [r4, #4]
 801b6d0:	42a3      	cmp	r3, r4
 801b6d2:	bf0c      	ite	eq
 801b6d4:	6032      	streq	r2, [r6, #0]
 801b6d6:	605a      	strne	r2, [r3, #4]
 801b6d8:	e7ec      	b.n	801b6b4 <_malloc_r+0xa0>
 801b6da:	4623      	mov	r3, r4
 801b6dc:	6864      	ldr	r4, [r4, #4]
 801b6de:	e7b2      	b.n	801b646 <_malloc_r+0x32>
 801b6e0:	4634      	mov	r4, r6
 801b6e2:	6876      	ldr	r6, [r6, #4]
 801b6e4:	e7b9      	b.n	801b65a <_malloc_r+0x46>
 801b6e6:	230c      	movs	r3, #12
 801b6e8:	603b      	str	r3, [r7, #0]
 801b6ea:	4638      	mov	r0, r7
 801b6ec:	f003 f950 	bl	801e990 <__malloc_unlock>
 801b6f0:	e7a1      	b.n	801b636 <_malloc_r+0x22>
 801b6f2:	6025      	str	r5, [r4, #0]
 801b6f4:	e7de      	b.n	801b6b4 <_malloc_r+0xa0>
 801b6f6:	bf00      	nop
 801b6f8:	2000f190 	.word	0x2000f190

0801b6fc <__cvt>:
 801b6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b700:	ec55 4b10 	vmov	r4, r5, d0
 801b704:	2d00      	cmp	r5, #0
 801b706:	460e      	mov	r6, r1
 801b708:	4619      	mov	r1, r3
 801b70a:	462b      	mov	r3, r5
 801b70c:	bfbb      	ittet	lt
 801b70e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b712:	461d      	movlt	r5, r3
 801b714:	2300      	movge	r3, #0
 801b716:	232d      	movlt	r3, #45	; 0x2d
 801b718:	700b      	strb	r3, [r1, #0]
 801b71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b71c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b720:	4691      	mov	r9, r2
 801b722:	f023 0820 	bic.w	r8, r3, #32
 801b726:	bfbc      	itt	lt
 801b728:	4622      	movlt	r2, r4
 801b72a:	4614      	movlt	r4, r2
 801b72c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b730:	d005      	beq.n	801b73e <__cvt+0x42>
 801b732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b736:	d100      	bne.n	801b73a <__cvt+0x3e>
 801b738:	3601      	adds	r6, #1
 801b73a:	2102      	movs	r1, #2
 801b73c:	e000      	b.n	801b740 <__cvt+0x44>
 801b73e:	2103      	movs	r1, #3
 801b740:	ab03      	add	r3, sp, #12
 801b742:	9301      	str	r3, [sp, #4]
 801b744:	ab02      	add	r3, sp, #8
 801b746:	9300      	str	r3, [sp, #0]
 801b748:	ec45 4b10 	vmov	d0, r4, r5
 801b74c:	4653      	mov	r3, sl
 801b74e:	4632      	mov	r2, r6
 801b750:	f001 fec2 	bl	801d4d8 <_dtoa_r>
 801b754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b758:	4607      	mov	r7, r0
 801b75a:	d102      	bne.n	801b762 <__cvt+0x66>
 801b75c:	f019 0f01 	tst.w	r9, #1
 801b760:	d022      	beq.n	801b7a8 <__cvt+0xac>
 801b762:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b766:	eb07 0906 	add.w	r9, r7, r6
 801b76a:	d110      	bne.n	801b78e <__cvt+0x92>
 801b76c:	783b      	ldrb	r3, [r7, #0]
 801b76e:	2b30      	cmp	r3, #48	; 0x30
 801b770:	d10a      	bne.n	801b788 <__cvt+0x8c>
 801b772:	2200      	movs	r2, #0
 801b774:	2300      	movs	r3, #0
 801b776:	4620      	mov	r0, r4
 801b778:	4629      	mov	r1, r5
 801b77a:	f7e5 f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 801b77e:	b918      	cbnz	r0, 801b788 <__cvt+0x8c>
 801b780:	f1c6 0601 	rsb	r6, r6, #1
 801b784:	f8ca 6000 	str.w	r6, [sl]
 801b788:	f8da 3000 	ldr.w	r3, [sl]
 801b78c:	4499      	add	r9, r3
 801b78e:	2200      	movs	r2, #0
 801b790:	2300      	movs	r3, #0
 801b792:	4620      	mov	r0, r4
 801b794:	4629      	mov	r1, r5
 801b796:	f7e5 f997 	bl	8000ac8 <__aeabi_dcmpeq>
 801b79a:	b108      	cbz	r0, 801b7a0 <__cvt+0xa4>
 801b79c:	f8cd 900c 	str.w	r9, [sp, #12]
 801b7a0:	2230      	movs	r2, #48	; 0x30
 801b7a2:	9b03      	ldr	r3, [sp, #12]
 801b7a4:	454b      	cmp	r3, r9
 801b7a6:	d307      	bcc.n	801b7b8 <__cvt+0xbc>
 801b7a8:	9b03      	ldr	r3, [sp, #12]
 801b7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b7ac:	1bdb      	subs	r3, r3, r7
 801b7ae:	4638      	mov	r0, r7
 801b7b0:	6013      	str	r3, [r2, #0]
 801b7b2:	b004      	add	sp, #16
 801b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7b8:	1c59      	adds	r1, r3, #1
 801b7ba:	9103      	str	r1, [sp, #12]
 801b7bc:	701a      	strb	r2, [r3, #0]
 801b7be:	e7f0      	b.n	801b7a2 <__cvt+0xa6>

0801b7c0 <__exponent>:
 801b7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b7c2:	4603      	mov	r3, r0
 801b7c4:	2900      	cmp	r1, #0
 801b7c6:	bfb8      	it	lt
 801b7c8:	4249      	neglt	r1, r1
 801b7ca:	f803 2b02 	strb.w	r2, [r3], #2
 801b7ce:	bfb4      	ite	lt
 801b7d0:	222d      	movlt	r2, #45	; 0x2d
 801b7d2:	222b      	movge	r2, #43	; 0x2b
 801b7d4:	2909      	cmp	r1, #9
 801b7d6:	7042      	strb	r2, [r0, #1]
 801b7d8:	dd2a      	ble.n	801b830 <__exponent+0x70>
 801b7da:	f10d 0407 	add.w	r4, sp, #7
 801b7de:	46a4      	mov	ip, r4
 801b7e0:	270a      	movs	r7, #10
 801b7e2:	46a6      	mov	lr, r4
 801b7e4:	460a      	mov	r2, r1
 801b7e6:	fb91 f6f7 	sdiv	r6, r1, r7
 801b7ea:	fb07 1516 	mls	r5, r7, r6, r1
 801b7ee:	3530      	adds	r5, #48	; 0x30
 801b7f0:	2a63      	cmp	r2, #99	; 0x63
 801b7f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801b7f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b7fa:	4631      	mov	r1, r6
 801b7fc:	dcf1      	bgt.n	801b7e2 <__exponent+0x22>
 801b7fe:	3130      	adds	r1, #48	; 0x30
 801b800:	f1ae 0502 	sub.w	r5, lr, #2
 801b804:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b808:	1c44      	adds	r4, r0, #1
 801b80a:	4629      	mov	r1, r5
 801b80c:	4561      	cmp	r1, ip
 801b80e:	d30a      	bcc.n	801b826 <__exponent+0x66>
 801b810:	f10d 0209 	add.w	r2, sp, #9
 801b814:	eba2 020e 	sub.w	r2, r2, lr
 801b818:	4565      	cmp	r5, ip
 801b81a:	bf88      	it	hi
 801b81c:	2200      	movhi	r2, #0
 801b81e:	4413      	add	r3, r2
 801b820:	1a18      	subs	r0, r3, r0
 801b822:	b003      	add	sp, #12
 801b824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b826:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b82a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b82e:	e7ed      	b.n	801b80c <__exponent+0x4c>
 801b830:	2330      	movs	r3, #48	; 0x30
 801b832:	3130      	adds	r1, #48	; 0x30
 801b834:	7083      	strb	r3, [r0, #2]
 801b836:	70c1      	strb	r1, [r0, #3]
 801b838:	1d03      	adds	r3, r0, #4
 801b83a:	e7f1      	b.n	801b820 <__exponent+0x60>

0801b83c <_printf_float>:
 801b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b840:	ed2d 8b02 	vpush	{d8}
 801b844:	b08d      	sub	sp, #52	; 0x34
 801b846:	460c      	mov	r4, r1
 801b848:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b84c:	4616      	mov	r6, r2
 801b84e:	461f      	mov	r7, r3
 801b850:	4605      	mov	r5, r0
 801b852:	f003 f867 	bl	801e924 <_localeconv_r>
 801b856:	f8d0 a000 	ldr.w	sl, [r0]
 801b85a:	4650      	mov	r0, sl
 801b85c:	f7e4 fcb8 	bl	80001d0 <strlen>
 801b860:	2300      	movs	r3, #0
 801b862:	930a      	str	r3, [sp, #40]	; 0x28
 801b864:	6823      	ldr	r3, [r4, #0]
 801b866:	9305      	str	r3, [sp, #20]
 801b868:	f8d8 3000 	ldr.w	r3, [r8]
 801b86c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b870:	3307      	adds	r3, #7
 801b872:	f023 0307 	bic.w	r3, r3, #7
 801b876:	f103 0208 	add.w	r2, r3, #8
 801b87a:	f8c8 2000 	str.w	r2, [r8]
 801b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b882:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b886:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b88a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b88e:	9307      	str	r3, [sp, #28]
 801b890:	f8cd 8018 	str.w	r8, [sp, #24]
 801b894:	ee08 0a10 	vmov	s16, r0
 801b898:	4b9f      	ldr	r3, [pc, #636]	; (801bb18 <_printf_float+0x2dc>)
 801b89a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b89e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b8a2:	f7e5 f943 	bl	8000b2c <__aeabi_dcmpun>
 801b8a6:	bb88      	cbnz	r0, 801b90c <_printf_float+0xd0>
 801b8a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b8ac:	4b9a      	ldr	r3, [pc, #616]	; (801bb18 <_printf_float+0x2dc>)
 801b8ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b8b2:	f7e5 f91d 	bl	8000af0 <__aeabi_dcmple>
 801b8b6:	bb48      	cbnz	r0, 801b90c <_printf_float+0xd0>
 801b8b8:	2200      	movs	r2, #0
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	4640      	mov	r0, r8
 801b8be:	4649      	mov	r1, r9
 801b8c0:	f7e5 f90c 	bl	8000adc <__aeabi_dcmplt>
 801b8c4:	b110      	cbz	r0, 801b8cc <_printf_float+0x90>
 801b8c6:	232d      	movs	r3, #45	; 0x2d
 801b8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b8cc:	4b93      	ldr	r3, [pc, #588]	; (801bb1c <_printf_float+0x2e0>)
 801b8ce:	4894      	ldr	r0, [pc, #592]	; (801bb20 <_printf_float+0x2e4>)
 801b8d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b8d4:	bf94      	ite	ls
 801b8d6:	4698      	movls	r8, r3
 801b8d8:	4680      	movhi	r8, r0
 801b8da:	2303      	movs	r3, #3
 801b8dc:	6123      	str	r3, [r4, #16]
 801b8de:	9b05      	ldr	r3, [sp, #20]
 801b8e0:	f023 0204 	bic.w	r2, r3, #4
 801b8e4:	6022      	str	r2, [r4, #0]
 801b8e6:	f04f 0900 	mov.w	r9, #0
 801b8ea:	9700      	str	r7, [sp, #0]
 801b8ec:	4633      	mov	r3, r6
 801b8ee:	aa0b      	add	r2, sp, #44	; 0x2c
 801b8f0:	4621      	mov	r1, r4
 801b8f2:	4628      	mov	r0, r5
 801b8f4:	f000 f9d8 	bl	801bca8 <_printf_common>
 801b8f8:	3001      	adds	r0, #1
 801b8fa:	f040 8090 	bne.w	801ba1e <_printf_float+0x1e2>
 801b8fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b902:	b00d      	add	sp, #52	; 0x34
 801b904:	ecbd 8b02 	vpop	{d8}
 801b908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b90c:	4642      	mov	r2, r8
 801b90e:	464b      	mov	r3, r9
 801b910:	4640      	mov	r0, r8
 801b912:	4649      	mov	r1, r9
 801b914:	f7e5 f90a 	bl	8000b2c <__aeabi_dcmpun>
 801b918:	b140      	cbz	r0, 801b92c <_printf_float+0xf0>
 801b91a:	464b      	mov	r3, r9
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	bfbc      	itt	lt
 801b920:	232d      	movlt	r3, #45	; 0x2d
 801b922:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b926:	487f      	ldr	r0, [pc, #508]	; (801bb24 <_printf_float+0x2e8>)
 801b928:	4b7f      	ldr	r3, [pc, #508]	; (801bb28 <_printf_float+0x2ec>)
 801b92a:	e7d1      	b.n	801b8d0 <_printf_float+0x94>
 801b92c:	6863      	ldr	r3, [r4, #4]
 801b92e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b932:	9206      	str	r2, [sp, #24]
 801b934:	1c5a      	adds	r2, r3, #1
 801b936:	d13f      	bne.n	801b9b8 <_printf_float+0x17c>
 801b938:	2306      	movs	r3, #6
 801b93a:	6063      	str	r3, [r4, #4]
 801b93c:	9b05      	ldr	r3, [sp, #20]
 801b93e:	6861      	ldr	r1, [r4, #4]
 801b940:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b944:	2300      	movs	r3, #0
 801b946:	9303      	str	r3, [sp, #12]
 801b948:	ab0a      	add	r3, sp, #40	; 0x28
 801b94a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b94e:	ab09      	add	r3, sp, #36	; 0x24
 801b950:	ec49 8b10 	vmov	d0, r8, r9
 801b954:	9300      	str	r3, [sp, #0]
 801b956:	6022      	str	r2, [r4, #0]
 801b958:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b95c:	4628      	mov	r0, r5
 801b95e:	f7ff fecd 	bl	801b6fc <__cvt>
 801b962:	9b06      	ldr	r3, [sp, #24]
 801b964:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b966:	2b47      	cmp	r3, #71	; 0x47
 801b968:	4680      	mov	r8, r0
 801b96a:	d108      	bne.n	801b97e <_printf_float+0x142>
 801b96c:	1cc8      	adds	r0, r1, #3
 801b96e:	db02      	blt.n	801b976 <_printf_float+0x13a>
 801b970:	6863      	ldr	r3, [r4, #4]
 801b972:	4299      	cmp	r1, r3
 801b974:	dd41      	ble.n	801b9fa <_printf_float+0x1be>
 801b976:	f1ab 0b02 	sub.w	fp, fp, #2
 801b97a:	fa5f fb8b 	uxtb.w	fp, fp
 801b97e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b982:	d820      	bhi.n	801b9c6 <_printf_float+0x18a>
 801b984:	3901      	subs	r1, #1
 801b986:	465a      	mov	r2, fp
 801b988:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b98c:	9109      	str	r1, [sp, #36]	; 0x24
 801b98e:	f7ff ff17 	bl	801b7c0 <__exponent>
 801b992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b994:	1813      	adds	r3, r2, r0
 801b996:	2a01      	cmp	r2, #1
 801b998:	4681      	mov	r9, r0
 801b99a:	6123      	str	r3, [r4, #16]
 801b99c:	dc02      	bgt.n	801b9a4 <_printf_float+0x168>
 801b99e:	6822      	ldr	r2, [r4, #0]
 801b9a0:	07d2      	lsls	r2, r2, #31
 801b9a2:	d501      	bpl.n	801b9a8 <_printf_float+0x16c>
 801b9a4:	3301      	adds	r3, #1
 801b9a6:	6123      	str	r3, [r4, #16]
 801b9a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d09c      	beq.n	801b8ea <_printf_float+0xae>
 801b9b0:	232d      	movs	r3, #45	; 0x2d
 801b9b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9b6:	e798      	b.n	801b8ea <_printf_float+0xae>
 801b9b8:	9a06      	ldr	r2, [sp, #24]
 801b9ba:	2a47      	cmp	r2, #71	; 0x47
 801b9bc:	d1be      	bne.n	801b93c <_printf_float+0x100>
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d1bc      	bne.n	801b93c <_printf_float+0x100>
 801b9c2:	2301      	movs	r3, #1
 801b9c4:	e7b9      	b.n	801b93a <_printf_float+0xfe>
 801b9c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b9ca:	d118      	bne.n	801b9fe <_printf_float+0x1c2>
 801b9cc:	2900      	cmp	r1, #0
 801b9ce:	6863      	ldr	r3, [r4, #4]
 801b9d0:	dd0b      	ble.n	801b9ea <_printf_float+0x1ae>
 801b9d2:	6121      	str	r1, [r4, #16]
 801b9d4:	b913      	cbnz	r3, 801b9dc <_printf_float+0x1a0>
 801b9d6:	6822      	ldr	r2, [r4, #0]
 801b9d8:	07d0      	lsls	r0, r2, #31
 801b9da:	d502      	bpl.n	801b9e2 <_printf_float+0x1a6>
 801b9dc:	3301      	adds	r3, #1
 801b9de:	440b      	add	r3, r1
 801b9e0:	6123      	str	r3, [r4, #16]
 801b9e2:	65a1      	str	r1, [r4, #88]	; 0x58
 801b9e4:	f04f 0900 	mov.w	r9, #0
 801b9e8:	e7de      	b.n	801b9a8 <_printf_float+0x16c>
 801b9ea:	b913      	cbnz	r3, 801b9f2 <_printf_float+0x1b6>
 801b9ec:	6822      	ldr	r2, [r4, #0]
 801b9ee:	07d2      	lsls	r2, r2, #31
 801b9f0:	d501      	bpl.n	801b9f6 <_printf_float+0x1ba>
 801b9f2:	3302      	adds	r3, #2
 801b9f4:	e7f4      	b.n	801b9e0 <_printf_float+0x1a4>
 801b9f6:	2301      	movs	r3, #1
 801b9f8:	e7f2      	b.n	801b9e0 <_printf_float+0x1a4>
 801b9fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba00:	4299      	cmp	r1, r3
 801ba02:	db05      	blt.n	801ba10 <_printf_float+0x1d4>
 801ba04:	6823      	ldr	r3, [r4, #0]
 801ba06:	6121      	str	r1, [r4, #16]
 801ba08:	07d8      	lsls	r0, r3, #31
 801ba0a:	d5ea      	bpl.n	801b9e2 <_printf_float+0x1a6>
 801ba0c:	1c4b      	adds	r3, r1, #1
 801ba0e:	e7e7      	b.n	801b9e0 <_printf_float+0x1a4>
 801ba10:	2900      	cmp	r1, #0
 801ba12:	bfd4      	ite	le
 801ba14:	f1c1 0202 	rsble	r2, r1, #2
 801ba18:	2201      	movgt	r2, #1
 801ba1a:	4413      	add	r3, r2
 801ba1c:	e7e0      	b.n	801b9e0 <_printf_float+0x1a4>
 801ba1e:	6823      	ldr	r3, [r4, #0]
 801ba20:	055a      	lsls	r2, r3, #21
 801ba22:	d407      	bmi.n	801ba34 <_printf_float+0x1f8>
 801ba24:	6923      	ldr	r3, [r4, #16]
 801ba26:	4642      	mov	r2, r8
 801ba28:	4631      	mov	r1, r6
 801ba2a:	4628      	mov	r0, r5
 801ba2c:	47b8      	blx	r7
 801ba2e:	3001      	adds	r0, #1
 801ba30:	d12c      	bne.n	801ba8c <_printf_float+0x250>
 801ba32:	e764      	b.n	801b8fe <_printf_float+0xc2>
 801ba34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ba38:	f240 80e0 	bls.w	801bbfc <_printf_float+0x3c0>
 801ba3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ba40:	2200      	movs	r2, #0
 801ba42:	2300      	movs	r3, #0
 801ba44:	f7e5 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 801ba48:	2800      	cmp	r0, #0
 801ba4a:	d034      	beq.n	801bab6 <_printf_float+0x27a>
 801ba4c:	4a37      	ldr	r2, [pc, #220]	; (801bb2c <_printf_float+0x2f0>)
 801ba4e:	2301      	movs	r3, #1
 801ba50:	4631      	mov	r1, r6
 801ba52:	4628      	mov	r0, r5
 801ba54:	47b8      	blx	r7
 801ba56:	3001      	adds	r0, #1
 801ba58:	f43f af51 	beq.w	801b8fe <_printf_float+0xc2>
 801ba5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ba60:	429a      	cmp	r2, r3
 801ba62:	db02      	blt.n	801ba6a <_printf_float+0x22e>
 801ba64:	6823      	ldr	r3, [r4, #0]
 801ba66:	07d8      	lsls	r0, r3, #31
 801ba68:	d510      	bpl.n	801ba8c <_printf_float+0x250>
 801ba6a:	ee18 3a10 	vmov	r3, s16
 801ba6e:	4652      	mov	r2, sl
 801ba70:	4631      	mov	r1, r6
 801ba72:	4628      	mov	r0, r5
 801ba74:	47b8      	blx	r7
 801ba76:	3001      	adds	r0, #1
 801ba78:	f43f af41 	beq.w	801b8fe <_printf_float+0xc2>
 801ba7c:	f04f 0800 	mov.w	r8, #0
 801ba80:	f104 091a 	add.w	r9, r4, #26
 801ba84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba86:	3b01      	subs	r3, #1
 801ba88:	4543      	cmp	r3, r8
 801ba8a:	dc09      	bgt.n	801baa0 <_printf_float+0x264>
 801ba8c:	6823      	ldr	r3, [r4, #0]
 801ba8e:	079b      	lsls	r3, r3, #30
 801ba90:	f100 8105 	bmi.w	801bc9e <_printf_float+0x462>
 801ba94:	68e0      	ldr	r0, [r4, #12]
 801ba96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba98:	4298      	cmp	r0, r3
 801ba9a:	bfb8      	it	lt
 801ba9c:	4618      	movlt	r0, r3
 801ba9e:	e730      	b.n	801b902 <_printf_float+0xc6>
 801baa0:	2301      	movs	r3, #1
 801baa2:	464a      	mov	r2, r9
 801baa4:	4631      	mov	r1, r6
 801baa6:	4628      	mov	r0, r5
 801baa8:	47b8      	blx	r7
 801baaa:	3001      	adds	r0, #1
 801baac:	f43f af27 	beq.w	801b8fe <_printf_float+0xc2>
 801bab0:	f108 0801 	add.w	r8, r8, #1
 801bab4:	e7e6      	b.n	801ba84 <_printf_float+0x248>
 801bab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bab8:	2b00      	cmp	r3, #0
 801baba:	dc39      	bgt.n	801bb30 <_printf_float+0x2f4>
 801babc:	4a1b      	ldr	r2, [pc, #108]	; (801bb2c <_printf_float+0x2f0>)
 801babe:	2301      	movs	r3, #1
 801bac0:	4631      	mov	r1, r6
 801bac2:	4628      	mov	r0, r5
 801bac4:	47b8      	blx	r7
 801bac6:	3001      	adds	r0, #1
 801bac8:	f43f af19 	beq.w	801b8fe <_printf_float+0xc2>
 801bacc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bad0:	4313      	orrs	r3, r2
 801bad2:	d102      	bne.n	801bada <_printf_float+0x29e>
 801bad4:	6823      	ldr	r3, [r4, #0]
 801bad6:	07d9      	lsls	r1, r3, #31
 801bad8:	d5d8      	bpl.n	801ba8c <_printf_float+0x250>
 801bada:	ee18 3a10 	vmov	r3, s16
 801bade:	4652      	mov	r2, sl
 801bae0:	4631      	mov	r1, r6
 801bae2:	4628      	mov	r0, r5
 801bae4:	47b8      	blx	r7
 801bae6:	3001      	adds	r0, #1
 801bae8:	f43f af09 	beq.w	801b8fe <_printf_float+0xc2>
 801baec:	f04f 0900 	mov.w	r9, #0
 801baf0:	f104 0a1a 	add.w	sl, r4, #26
 801baf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baf6:	425b      	negs	r3, r3
 801baf8:	454b      	cmp	r3, r9
 801bafa:	dc01      	bgt.n	801bb00 <_printf_float+0x2c4>
 801bafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bafe:	e792      	b.n	801ba26 <_printf_float+0x1ea>
 801bb00:	2301      	movs	r3, #1
 801bb02:	4652      	mov	r2, sl
 801bb04:	4631      	mov	r1, r6
 801bb06:	4628      	mov	r0, r5
 801bb08:	47b8      	blx	r7
 801bb0a:	3001      	adds	r0, #1
 801bb0c:	f43f aef7 	beq.w	801b8fe <_printf_float+0xc2>
 801bb10:	f109 0901 	add.w	r9, r9, #1
 801bb14:	e7ee      	b.n	801baf4 <_printf_float+0x2b8>
 801bb16:	bf00      	nop
 801bb18:	7fefffff 	.word	0x7fefffff
 801bb1c:	08022ee0 	.word	0x08022ee0
 801bb20:	08022ee4 	.word	0x08022ee4
 801bb24:	08022eec 	.word	0x08022eec
 801bb28:	08022ee8 	.word	0x08022ee8
 801bb2c:	08022ef0 	.word	0x08022ef0
 801bb30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bb32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb34:	429a      	cmp	r2, r3
 801bb36:	bfa8      	it	ge
 801bb38:	461a      	movge	r2, r3
 801bb3a:	2a00      	cmp	r2, #0
 801bb3c:	4691      	mov	r9, r2
 801bb3e:	dc37      	bgt.n	801bbb0 <_printf_float+0x374>
 801bb40:	f04f 0b00 	mov.w	fp, #0
 801bb44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb48:	f104 021a 	add.w	r2, r4, #26
 801bb4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb4e:	9305      	str	r3, [sp, #20]
 801bb50:	eba3 0309 	sub.w	r3, r3, r9
 801bb54:	455b      	cmp	r3, fp
 801bb56:	dc33      	bgt.n	801bbc0 <_printf_float+0x384>
 801bb58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	db3b      	blt.n	801bbd8 <_printf_float+0x39c>
 801bb60:	6823      	ldr	r3, [r4, #0]
 801bb62:	07da      	lsls	r2, r3, #31
 801bb64:	d438      	bmi.n	801bbd8 <_printf_float+0x39c>
 801bb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb68:	9a05      	ldr	r2, [sp, #20]
 801bb6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb6c:	1a9a      	subs	r2, r3, r2
 801bb6e:	eba3 0901 	sub.w	r9, r3, r1
 801bb72:	4591      	cmp	r9, r2
 801bb74:	bfa8      	it	ge
 801bb76:	4691      	movge	r9, r2
 801bb78:	f1b9 0f00 	cmp.w	r9, #0
 801bb7c:	dc35      	bgt.n	801bbea <_printf_float+0x3ae>
 801bb7e:	f04f 0800 	mov.w	r8, #0
 801bb82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bb86:	f104 0a1a 	add.w	sl, r4, #26
 801bb8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bb8e:	1a9b      	subs	r3, r3, r2
 801bb90:	eba3 0309 	sub.w	r3, r3, r9
 801bb94:	4543      	cmp	r3, r8
 801bb96:	f77f af79 	ble.w	801ba8c <_printf_float+0x250>
 801bb9a:	2301      	movs	r3, #1
 801bb9c:	4652      	mov	r2, sl
 801bb9e:	4631      	mov	r1, r6
 801bba0:	4628      	mov	r0, r5
 801bba2:	47b8      	blx	r7
 801bba4:	3001      	adds	r0, #1
 801bba6:	f43f aeaa 	beq.w	801b8fe <_printf_float+0xc2>
 801bbaa:	f108 0801 	add.w	r8, r8, #1
 801bbae:	e7ec      	b.n	801bb8a <_printf_float+0x34e>
 801bbb0:	4613      	mov	r3, r2
 801bbb2:	4631      	mov	r1, r6
 801bbb4:	4642      	mov	r2, r8
 801bbb6:	4628      	mov	r0, r5
 801bbb8:	47b8      	blx	r7
 801bbba:	3001      	adds	r0, #1
 801bbbc:	d1c0      	bne.n	801bb40 <_printf_float+0x304>
 801bbbe:	e69e      	b.n	801b8fe <_printf_float+0xc2>
 801bbc0:	2301      	movs	r3, #1
 801bbc2:	4631      	mov	r1, r6
 801bbc4:	4628      	mov	r0, r5
 801bbc6:	9205      	str	r2, [sp, #20]
 801bbc8:	47b8      	blx	r7
 801bbca:	3001      	adds	r0, #1
 801bbcc:	f43f ae97 	beq.w	801b8fe <_printf_float+0xc2>
 801bbd0:	9a05      	ldr	r2, [sp, #20]
 801bbd2:	f10b 0b01 	add.w	fp, fp, #1
 801bbd6:	e7b9      	b.n	801bb4c <_printf_float+0x310>
 801bbd8:	ee18 3a10 	vmov	r3, s16
 801bbdc:	4652      	mov	r2, sl
 801bbde:	4631      	mov	r1, r6
 801bbe0:	4628      	mov	r0, r5
 801bbe2:	47b8      	blx	r7
 801bbe4:	3001      	adds	r0, #1
 801bbe6:	d1be      	bne.n	801bb66 <_printf_float+0x32a>
 801bbe8:	e689      	b.n	801b8fe <_printf_float+0xc2>
 801bbea:	9a05      	ldr	r2, [sp, #20]
 801bbec:	464b      	mov	r3, r9
 801bbee:	4442      	add	r2, r8
 801bbf0:	4631      	mov	r1, r6
 801bbf2:	4628      	mov	r0, r5
 801bbf4:	47b8      	blx	r7
 801bbf6:	3001      	adds	r0, #1
 801bbf8:	d1c1      	bne.n	801bb7e <_printf_float+0x342>
 801bbfa:	e680      	b.n	801b8fe <_printf_float+0xc2>
 801bbfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bbfe:	2a01      	cmp	r2, #1
 801bc00:	dc01      	bgt.n	801bc06 <_printf_float+0x3ca>
 801bc02:	07db      	lsls	r3, r3, #31
 801bc04:	d538      	bpl.n	801bc78 <_printf_float+0x43c>
 801bc06:	2301      	movs	r3, #1
 801bc08:	4642      	mov	r2, r8
 801bc0a:	4631      	mov	r1, r6
 801bc0c:	4628      	mov	r0, r5
 801bc0e:	47b8      	blx	r7
 801bc10:	3001      	adds	r0, #1
 801bc12:	f43f ae74 	beq.w	801b8fe <_printf_float+0xc2>
 801bc16:	ee18 3a10 	vmov	r3, s16
 801bc1a:	4652      	mov	r2, sl
 801bc1c:	4631      	mov	r1, r6
 801bc1e:	4628      	mov	r0, r5
 801bc20:	47b8      	blx	r7
 801bc22:	3001      	adds	r0, #1
 801bc24:	f43f ae6b 	beq.w	801b8fe <_printf_float+0xc2>
 801bc28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	2300      	movs	r3, #0
 801bc30:	f7e4 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 801bc34:	b9d8      	cbnz	r0, 801bc6e <_printf_float+0x432>
 801bc36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc38:	f108 0201 	add.w	r2, r8, #1
 801bc3c:	3b01      	subs	r3, #1
 801bc3e:	4631      	mov	r1, r6
 801bc40:	4628      	mov	r0, r5
 801bc42:	47b8      	blx	r7
 801bc44:	3001      	adds	r0, #1
 801bc46:	d10e      	bne.n	801bc66 <_printf_float+0x42a>
 801bc48:	e659      	b.n	801b8fe <_printf_float+0xc2>
 801bc4a:	2301      	movs	r3, #1
 801bc4c:	4652      	mov	r2, sl
 801bc4e:	4631      	mov	r1, r6
 801bc50:	4628      	mov	r0, r5
 801bc52:	47b8      	blx	r7
 801bc54:	3001      	adds	r0, #1
 801bc56:	f43f ae52 	beq.w	801b8fe <_printf_float+0xc2>
 801bc5a:	f108 0801 	add.w	r8, r8, #1
 801bc5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc60:	3b01      	subs	r3, #1
 801bc62:	4543      	cmp	r3, r8
 801bc64:	dcf1      	bgt.n	801bc4a <_printf_float+0x40e>
 801bc66:	464b      	mov	r3, r9
 801bc68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bc6c:	e6dc      	b.n	801ba28 <_printf_float+0x1ec>
 801bc6e:	f04f 0800 	mov.w	r8, #0
 801bc72:	f104 0a1a 	add.w	sl, r4, #26
 801bc76:	e7f2      	b.n	801bc5e <_printf_float+0x422>
 801bc78:	2301      	movs	r3, #1
 801bc7a:	4642      	mov	r2, r8
 801bc7c:	e7df      	b.n	801bc3e <_printf_float+0x402>
 801bc7e:	2301      	movs	r3, #1
 801bc80:	464a      	mov	r2, r9
 801bc82:	4631      	mov	r1, r6
 801bc84:	4628      	mov	r0, r5
 801bc86:	47b8      	blx	r7
 801bc88:	3001      	adds	r0, #1
 801bc8a:	f43f ae38 	beq.w	801b8fe <_printf_float+0xc2>
 801bc8e:	f108 0801 	add.w	r8, r8, #1
 801bc92:	68e3      	ldr	r3, [r4, #12]
 801bc94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bc96:	1a5b      	subs	r3, r3, r1
 801bc98:	4543      	cmp	r3, r8
 801bc9a:	dcf0      	bgt.n	801bc7e <_printf_float+0x442>
 801bc9c:	e6fa      	b.n	801ba94 <_printf_float+0x258>
 801bc9e:	f04f 0800 	mov.w	r8, #0
 801bca2:	f104 0919 	add.w	r9, r4, #25
 801bca6:	e7f4      	b.n	801bc92 <_printf_float+0x456>

0801bca8 <_printf_common>:
 801bca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bcac:	4616      	mov	r6, r2
 801bcae:	4699      	mov	r9, r3
 801bcb0:	688a      	ldr	r2, [r1, #8]
 801bcb2:	690b      	ldr	r3, [r1, #16]
 801bcb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bcb8:	4293      	cmp	r3, r2
 801bcba:	bfb8      	it	lt
 801bcbc:	4613      	movlt	r3, r2
 801bcbe:	6033      	str	r3, [r6, #0]
 801bcc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bcc4:	4607      	mov	r7, r0
 801bcc6:	460c      	mov	r4, r1
 801bcc8:	b10a      	cbz	r2, 801bcce <_printf_common+0x26>
 801bcca:	3301      	adds	r3, #1
 801bccc:	6033      	str	r3, [r6, #0]
 801bcce:	6823      	ldr	r3, [r4, #0]
 801bcd0:	0699      	lsls	r1, r3, #26
 801bcd2:	bf42      	ittt	mi
 801bcd4:	6833      	ldrmi	r3, [r6, #0]
 801bcd6:	3302      	addmi	r3, #2
 801bcd8:	6033      	strmi	r3, [r6, #0]
 801bcda:	6825      	ldr	r5, [r4, #0]
 801bcdc:	f015 0506 	ands.w	r5, r5, #6
 801bce0:	d106      	bne.n	801bcf0 <_printf_common+0x48>
 801bce2:	f104 0a19 	add.w	sl, r4, #25
 801bce6:	68e3      	ldr	r3, [r4, #12]
 801bce8:	6832      	ldr	r2, [r6, #0]
 801bcea:	1a9b      	subs	r3, r3, r2
 801bcec:	42ab      	cmp	r3, r5
 801bcee:	dc26      	bgt.n	801bd3e <_printf_common+0x96>
 801bcf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bcf4:	1e13      	subs	r3, r2, #0
 801bcf6:	6822      	ldr	r2, [r4, #0]
 801bcf8:	bf18      	it	ne
 801bcfa:	2301      	movne	r3, #1
 801bcfc:	0692      	lsls	r2, r2, #26
 801bcfe:	d42b      	bmi.n	801bd58 <_printf_common+0xb0>
 801bd00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bd04:	4649      	mov	r1, r9
 801bd06:	4638      	mov	r0, r7
 801bd08:	47c0      	blx	r8
 801bd0a:	3001      	adds	r0, #1
 801bd0c:	d01e      	beq.n	801bd4c <_printf_common+0xa4>
 801bd0e:	6823      	ldr	r3, [r4, #0]
 801bd10:	68e5      	ldr	r5, [r4, #12]
 801bd12:	6832      	ldr	r2, [r6, #0]
 801bd14:	f003 0306 	and.w	r3, r3, #6
 801bd18:	2b04      	cmp	r3, #4
 801bd1a:	bf08      	it	eq
 801bd1c:	1aad      	subeq	r5, r5, r2
 801bd1e:	68a3      	ldr	r3, [r4, #8]
 801bd20:	6922      	ldr	r2, [r4, #16]
 801bd22:	bf0c      	ite	eq
 801bd24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bd28:	2500      	movne	r5, #0
 801bd2a:	4293      	cmp	r3, r2
 801bd2c:	bfc4      	itt	gt
 801bd2e:	1a9b      	subgt	r3, r3, r2
 801bd30:	18ed      	addgt	r5, r5, r3
 801bd32:	2600      	movs	r6, #0
 801bd34:	341a      	adds	r4, #26
 801bd36:	42b5      	cmp	r5, r6
 801bd38:	d11a      	bne.n	801bd70 <_printf_common+0xc8>
 801bd3a:	2000      	movs	r0, #0
 801bd3c:	e008      	b.n	801bd50 <_printf_common+0xa8>
 801bd3e:	2301      	movs	r3, #1
 801bd40:	4652      	mov	r2, sl
 801bd42:	4649      	mov	r1, r9
 801bd44:	4638      	mov	r0, r7
 801bd46:	47c0      	blx	r8
 801bd48:	3001      	adds	r0, #1
 801bd4a:	d103      	bne.n	801bd54 <_printf_common+0xac>
 801bd4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd54:	3501      	adds	r5, #1
 801bd56:	e7c6      	b.n	801bce6 <_printf_common+0x3e>
 801bd58:	18e1      	adds	r1, r4, r3
 801bd5a:	1c5a      	adds	r2, r3, #1
 801bd5c:	2030      	movs	r0, #48	; 0x30
 801bd5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bd62:	4422      	add	r2, r4
 801bd64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bd68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bd6c:	3302      	adds	r3, #2
 801bd6e:	e7c7      	b.n	801bd00 <_printf_common+0x58>
 801bd70:	2301      	movs	r3, #1
 801bd72:	4622      	mov	r2, r4
 801bd74:	4649      	mov	r1, r9
 801bd76:	4638      	mov	r0, r7
 801bd78:	47c0      	blx	r8
 801bd7a:	3001      	adds	r0, #1
 801bd7c:	d0e6      	beq.n	801bd4c <_printf_common+0xa4>
 801bd7e:	3601      	adds	r6, #1
 801bd80:	e7d9      	b.n	801bd36 <_printf_common+0x8e>
	...

0801bd84 <_printf_i>:
 801bd84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bd88:	7e0f      	ldrb	r7, [r1, #24]
 801bd8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bd8c:	2f78      	cmp	r7, #120	; 0x78
 801bd8e:	4691      	mov	r9, r2
 801bd90:	4680      	mov	r8, r0
 801bd92:	460c      	mov	r4, r1
 801bd94:	469a      	mov	sl, r3
 801bd96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bd9a:	d807      	bhi.n	801bdac <_printf_i+0x28>
 801bd9c:	2f62      	cmp	r7, #98	; 0x62
 801bd9e:	d80a      	bhi.n	801bdb6 <_printf_i+0x32>
 801bda0:	2f00      	cmp	r7, #0
 801bda2:	f000 80d8 	beq.w	801bf56 <_printf_i+0x1d2>
 801bda6:	2f58      	cmp	r7, #88	; 0x58
 801bda8:	f000 80a3 	beq.w	801bef2 <_printf_i+0x16e>
 801bdac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bdb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bdb4:	e03a      	b.n	801be2c <_printf_i+0xa8>
 801bdb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bdba:	2b15      	cmp	r3, #21
 801bdbc:	d8f6      	bhi.n	801bdac <_printf_i+0x28>
 801bdbe:	a101      	add	r1, pc, #4	; (adr r1, 801bdc4 <_printf_i+0x40>)
 801bdc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bdc4:	0801be1d 	.word	0x0801be1d
 801bdc8:	0801be31 	.word	0x0801be31
 801bdcc:	0801bdad 	.word	0x0801bdad
 801bdd0:	0801bdad 	.word	0x0801bdad
 801bdd4:	0801bdad 	.word	0x0801bdad
 801bdd8:	0801bdad 	.word	0x0801bdad
 801bddc:	0801be31 	.word	0x0801be31
 801bde0:	0801bdad 	.word	0x0801bdad
 801bde4:	0801bdad 	.word	0x0801bdad
 801bde8:	0801bdad 	.word	0x0801bdad
 801bdec:	0801bdad 	.word	0x0801bdad
 801bdf0:	0801bf3d 	.word	0x0801bf3d
 801bdf4:	0801be61 	.word	0x0801be61
 801bdf8:	0801bf1f 	.word	0x0801bf1f
 801bdfc:	0801bdad 	.word	0x0801bdad
 801be00:	0801bdad 	.word	0x0801bdad
 801be04:	0801bf5f 	.word	0x0801bf5f
 801be08:	0801bdad 	.word	0x0801bdad
 801be0c:	0801be61 	.word	0x0801be61
 801be10:	0801bdad 	.word	0x0801bdad
 801be14:	0801bdad 	.word	0x0801bdad
 801be18:	0801bf27 	.word	0x0801bf27
 801be1c:	682b      	ldr	r3, [r5, #0]
 801be1e:	1d1a      	adds	r2, r3, #4
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	602a      	str	r2, [r5, #0]
 801be24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801be2c:	2301      	movs	r3, #1
 801be2e:	e0a3      	b.n	801bf78 <_printf_i+0x1f4>
 801be30:	6820      	ldr	r0, [r4, #0]
 801be32:	6829      	ldr	r1, [r5, #0]
 801be34:	0606      	lsls	r6, r0, #24
 801be36:	f101 0304 	add.w	r3, r1, #4
 801be3a:	d50a      	bpl.n	801be52 <_printf_i+0xce>
 801be3c:	680e      	ldr	r6, [r1, #0]
 801be3e:	602b      	str	r3, [r5, #0]
 801be40:	2e00      	cmp	r6, #0
 801be42:	da03      	bge.n	801be4c <_printf_i+0xc8>
 801be44:	232d      	movs	r3, #45	; 0x2d
 801be46:	4276      	negs	r6, r6
 801be48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801be4c:	485e      	ldr	r0, [pc, #376]	; (801bfc8 <_printf_i+0x244>)
 801be4e:	230a      	movs	r3, #10
 801be50:	e019      	b.n	801be86 <_printf_i+0x102>
 801be52:	680e      	ldr	r6, [r1, #0]
 801be54:	602b      	str	r3, [r5, #0]
 801be56:	f010 0f40 	tst.w	r0, #64	; 0x40
 801be5a:	bf18      	it	ne
 801be5c:	b236      	sxthne	r6, r6
 801be5e:	e7ef      	b.n	801be40 <_printf_i+0xbc>
 801be60:	682b      	ldr	r3, [r5, #0]
 801be62:	6820      	ldr	r0, [r4, #0]
 801be64:	1d19      	adds	r1, r3, #4
 801be66:	6029      	str	r1, [r5, #0]
 801be68:	0601      	lsls	r1, r0, #24
 801be6a:	d501      	bpl.n	801be70 <_printf_i+0xec>
 801be6c:	681e      	ldr	r6, [r3, #0]
 801be6e:	e002      	b.n	801be76 <_printf_i+0xf2>
 801be70:	0646      	lsls	r6, r0, #25
 801be72:	d5fb      	bpl.n	801be6c <_printf_i+0xe8>
 801be74:	881e      	ldrh	r6, [r3, #0]
 801be76:	4854      	ldr	r0, [pc, #336]	; (801bfc8 <_printf_i+0x244>)
 801be78:	2f6f      	cmp	r7, #111	; 0x6f
 801be7a:	bf0c      	ite	eq
 801be7c:	2308      	moveq	r3, #8
 801be7e:	230a      	movne	r3, #10
 801be80:	2100      	movs	r1, #0
 801be82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801be86:	6865      	ldr	r5, [r4, #4]
 801be88:	60a5      	str	r5, [r4, #8]
 801be8a:	2d00      	cmp	r5, #0
 801be8c:	bfa2      	ittt	ge
 801be8e:	6821      	ldrge	r1, [r4, #0]
 801be90:	f021 0104 	bicge.w	r1, r1, #4
 801be94:	6021      	strge	r1, [r4, #0]
 801be96:	b90e      	cbnz	r6, 801be9c <_printf_i+0x118>
 801be98:	2d00      	cmp	r5, #0
 801be9a:	d04d      	beq.n	801bf38 <_printf_i+0x1b4>
 801be9c:	4615      	mov	r5, r2
 801be9e:	fbb6 f1f3 	udiv	r1, r6, r3
 801bea2:	fb03 6711 	mls	r7, r3, r1, r6
 801bea6:	5dc7      	ldrb	r7, [r0, r7]
 801bea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801beac:	4637      	mov	r7, r6
 801beae:	42bb      	cmp	r3, r7
 801beb0:	460e      	mov	r6, r1
 801beb2:	d9f4      	bls.n	801be9e <_printf_i+0x11a>
 801beb4:	2b08      	cmp	r3, #8
 801beb6:	d10b      	bne.n	801bed0 <_printf_i+0x14c>
 801beb8:	6823      	ldr	r3, [r4, #0]
 801beba:	07de      	lsls	r6, r3, #31
 801bebc:	d508      	bpl.n	801bed0 <_printf_i+0x14c>
 801bebe:	6923      	ldr	r3, [r4, #16]
 801bec0:	6861      	ldr	r1, [r4, #4]
 801bec2:	4299      	cmp	r1, r3
 801bec4:	bfde      	ittt	le
 801bec6:	2330      	movle	r3, #48	; 0x30
 801bec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801becc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801bed0:	1b52      	subs	r2, r2, r5
 801bed2:	6122      	str	r2, [r4, #16]
 801bed4:	f8cd a000 	str.w	sl, [sp]
 801bed8:	464b      	mov	r3, r9
 801beda:	aa03      	add	r2, sp, #12
 801bedc:	4621      	mov	r1, r4
 801bede:	4640      	mov	r0, r8
 801bee0:	f7ff fee2 	bl	801bca8 <_printf_common>
 801bee4:	3001      	adds	r0, #1
 801bee6:	d14c      	bne.n	801bf82 <_printf_i+0x1fe>
 801bee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801beec:	b004      	add	sp, #16
 801beee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bef2:	4835      	ldr	r0, [pc, #212]	; (801bfc8 <_printf_i+0x244>)
 801bef4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bef8:	6829      	ldr	r1, [r5, #0]
 801befa:	6823      	ldr	r3, [r4, #0]
 801befc:	f851 6b04 	ldr.w	r6, [r1], #4
 801bf00:	6029      	str	r1, [r5, #0]
 801bf02:	061d      	lsls	r5, r3, #24
 801bf04:	d514      	bpl.n	801bf30 <_printf_i+0x1ac>
 801bf06:	07df      	lsls	r7, r3, #31
 801bf08:	bf44      	itt	mi
 801bf0a:	f043 0320 	orrmi.w	r3, r3, #32
 801bf0e:	6023      	strmi	r3, [r4, #0]
 801bf10:	b91e      	cbnz	r6, 801bf1a <_printf_i+0x196>
 801bf12:	6823      	ldr	r3, [r4, #0]
 801bf14:	f023 0320 	bic.w	r3, r3, #32
 801bf18:	6023      	str	r3, [r4, #0]
 801bf1a:	2310      	movs	r3, #16
 801bf1c:	e7b0      	b.n	801be80 <_printf_i+0xfc>
 801bf1e:	6823      	ldr	r3, [r4, #0]
 801bf20:	f043 0320 	orr.w	r3, r3, #32
 801bf24:	6023      	str	r3, [r4, #0]
 801bf26:	2378      	movs	r3, #120	; 0x78
 801bf28:	4828      	ldr	r0, [pc, #160]	; (801bfcc <_printf_i+0x248>)
 801bf2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bf2e:	e7e3      	b.n	801bef8 <_printf_i+0x174>
 801bf30:	0659      	lsls	r1, r3, #25
 801bf32:	bf48      	it	mi
 801bf34:	b2b6      	uxthmi	r6, r6
 801bf36:	e7e6      	b.n	801bf06 <_printf_i+0x182>
 801bf38:	4615      	mov	r5, r2
 801bf3a:	e7bb      	b.n	801beb4 <_printf_i+0x130>
 801bf3c:	682b      	ldr	r3, [r5, #0]
 801bf3e:	6826      	ldr	r6, [r4, #0]
 801bf40:	6961      	ldr	r1, [r4, #20]
 801bf42:	1d18      	adds	r0, r3, #4
 801bf44:	6028      	str	r0, [r5, #0]
 801bf46:	0635      	lsls	r5, r6, #24
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	d501      	bpl.n	801bf50 <_printf_i+0x1cc>
 801bf4c:	6019      	str	r1, [r3, #0]
 801bf4e:	e002      	b.n	801bf56 <_printf_i+0x1d2>
 801bf50:	0670      	lsls	r0, r6, #25
 801bf52:	d5fb      	bpl.n	801bf4c <_printf_i+0x1c8>
 801bf54:	8019      	strh	r1, [r3, #0]
 801bf56:	2300      	movs	r3, #0
 801bf58:	6123      	str	r3, [r4, #16]
 801bf5a:	4615      	mov	r5, r2
 801bf5c:	e7ba      	b.n	801bed4 <_printf_i+0x150>
 801bf5e:	682b      	ldr	r3, [r5, #0]
 801bf60:	1d1a      	adds	r2, r3, #4
 801bf62:	602a      	str	r2, [r5, #0]
 801bf64:	681d      	ldr	r5, [r3, #0]
 801bf66:	6862      	ldr	r2, [r4, #4]
 801bf68:	2100      	movs	r1, #0
 801bf6a:	4628      	mov	r0, r5
 801bf6c:	f7e4 f938 	bl	80001e0 <memchr>
 801bf70:	b108      	cbz	r0, 801bf76 <_printf_i+0x1f2>
 801bf72:	1b40      	subs	r0, r0, r5
 801bf74:	6060      	str	r0, [r4, #4]
 801bf76:	6863      	ldr	r3, [r4, #4]
 801bf78:	6123      	str	r3, [r4, #16]
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bf80:	e7a8      	b.n	801bed4 <_printf_i+0x150>
 801bf82:	6923      	ldr	r3, [r4, #16]
 801bf84:	462a      	mov	r2, r5
 801bf86:	4649      	mov	r1, r9
 801bf88:	4640      	mov	r0, r8
 801bf8a:	47d0      	blx	sl
 801bf8c:	3001      	adds	r0, #1
 801bf8e:	d0ab      	beq.n	801bee8 <_printf_i+0x164>
 801bf90:	6823      	ldr	r3, [r4, #0]
 801bf92:	079b      	lsls	r3, r3, #30
 801bf94:	d413      	bmi.n	801bfbe <_printf_i+0x23a>
 801bf96:	68e0      	ldr	r0, [r4, #12]
 801bf98:	9b03      	ldr	r3, [sp, #12]
 801bf9a:	4298      	cmp	r0, r3
 801bf9c:	bfb8      	it	lt
 801bf9e:	4618      	movlt	r0, r3
 801bfa0:	e7a4      	b.n	801beec <_printf_i+0x168>
 801bfa2:	2301      	movs	r3, #1
 801bfa4:	4632      	mov	r2, r6
 801bfa6:	4649      	mov	r1, r9
 801bfa8:	4640      	mov	r0, r8
 801bfaa:	47d0      	blx	sl
 801bfac:	3001      	adds	r0, #1
 801bfae:	d09b      	beq.n	801bee8 <_printf_i+0x164>
 801bfb0:	3501      	adds	r5, #1
 801bfb2:	68e3      	ldr	r3, [r4, #12]
 801bfb4:	9903      	ldr	r1, [sp, #12]
 801bfb6:	1a5b      	subs	r3, r3, r1
 801bfb8:	42ab      	cmp	r3, r5
 801bfba:	dcf2      	bgt.n	801bfa2 <_printf_i+0x21e>
 801bfbc:	e7eb      	b.n	801bf96 <_printf_i+0x212>
 801bfbe:	2500      	movs	r5, #0
 801bfc0:	f104 0619 	add.w	r6, r4, #25
 801bfc4:	e7f5      	b.n	801bfb2 <_printf_i+0x22e>
 801bfc6:	bf00      	nop
 801bfc8:	08022ef2 	.word	0x08022ef2
 801bfcc:	08022f03 	.word	0x08022f03

0801bfd0 <_scanf_float>:
 801bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd4:	b087      	sub	sp, #28
 801bfd6:	4617      	mov	r7, r2
 801bfd8:	9303      	str	r3, [sp, #12]
 801bfda:	688b      	ldr	r3, [r1, #8]
 801bfdc:	1e5a      	subs	r2, r3, #1
 801bfde:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801bfe2:	bf83      	ittte	hi
 801bfe4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801bfe8:	195b      	addhi	r3, r3, r5
 801bfea:	9302      	strhi	r3, [sp, #8]
 801bfec:	2300      	movls	r3, #0
 801bfee:	bf86      	itte	hi
 801bff0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801bff4:	608b      	strhi	r3, [r1, #8]
 801bff6:	9302      	strls	r3, [sp, #8]
 801bff8:	680b      	ldr	r3, [r1, #0]
 801bffa:	468b      	mov	fp, r1
 801bffc:	2500      	movs	r5, #0
 801bffe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c002:	f84b 3b1c 	str.w	r3, [fp], #28
 801c006:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c00a:	4680      	mov	r8, r0
 801c00c:	460c      	mov	r4, r1
 801c00e:	465e      	mov	r6, fp
 801c010:	46aa      	mov	sl, r5
 801c012:	46a9      	mov	r9, r5
 801c014:	9501      	str	r5, [sp, #4]
 801c016:	68a2      	ldr	r2, [r4, #8]
 801c018:	b152      	cbz	r2, 801c030 <_scanf_float+0x60>
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	781b      	ldrb	r3, [r3, #0]
 801c01e:	2b4e      	cmp	r3, #78	; 0x4e
 801c020:	d864      	bhi.n	801c0ec <_scanf_float+0x11c>
 801c022:	2b40      	cmp	r3, #64	; 0x40
 801c024:	d83c      	bhi.n	801c0a0 <_scanf_float+0xd0>
 801c026:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c02a:	b2c8      	uxtb	r0, r1
 801c02c:	280e      	cmp	r0, #14
 801c02e:	d93a      	bls.n	801c0a6 <_scanf_float+0xd6>
 801c030:	f1b9 0f00 	cmp.w	r9, #0
 801c034:	d003      	beq.n	801c03e <_scanf_float+0x6e>
 801c036:	6823      	ldr	r3, [r4, #0]
 801c038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c03c:	6023      	str	r3, [r4, #0]
 801c03e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c042:	f1ba 0f01 	cmp.w	sl, #1
 801c046:	f200 8113 	bhi.w	801c270 <_scanf_float+0x2a0>
 801c04a:	455e      	cmp	r6, fp
 801c04c:	f200 8105 	bhi.w	801c25a <_scanf_float+0x28a>
 801c050:	2501      	movs	r5, #1
 801c052:	4628      	mov	r0, r5
 801c054:	b007      	add	sp, #28
 801c056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c05a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c05e:	2a0d      	cmp	r2, #13
 801c060:	d8e6      	bhi.n	801c030 <_scanf_float+0x60>
 801c062:	a101      	add	r1, pc, #4	; (adr r1, 801c068 <_scanf_float+0x98>)
 801c064:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c068:	0801c1a7 	.word	0x0801c1a7
 801c06c:	0801c031 	.word	0x0801c031
 801c070:	0801c031 	.word	0x0801c031
 801c074:	0801c031 	.word	0x0801c031
 801c078:	0801c207 	.word	0x0801c207
 801c07c:	0801c1df 	.word	0x0801c1df
 801c080:	0801c031 	.word	0x0801c031
 801c084:	0801c031 	.word	0x0801c031
 801c088:	0801c1b5 	.word	0x0801c1b5
 801c08c:	0801c031 	.word	0x0801c031
 801c090:	0801c031 	.word	0x0801c031
 801c094:	0801c031 	.word	0x0801c031
 801c098:	0801c031 	.word	0x0801c031
 801c09c:	0801c16d 	.word	0x0801c16d
 801c0a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c0a4:	e7db      	b.n	801c05e <_scanf_float+0x8e>
 801c0a6:	290e      	cmp	r1, #14
 801c0a8:	d8c2      	bhi.n	801c030 <_scanf_float+0x60>
 801c0aa:	a001      	add	r0, pc, #4	; (adr r0, 801c0b0 <_scanf_float+0xe0>)
 801c0ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c0b0:	0801c15f 	.word	0x0801c15f
 801c0b4:	0801c031 	.word	0x0801c031
 801c0b8:	0801c15f 	.word	0x0801c15f
 801c0bc:	0801c1f3 	.word	0x0801c1f3
 801c0c0:	0801c031 	.word	0x0801c031
 801c0c4:	0801c10d 	.word	0x0801c10d
 801c0c8:	0801c149 	.word	0x0801c149
 801c0cc:	0801c149 	.word	0x0801c149
 801c0d0:	0801c149 	.word	0x0801c149
 801c0d4:	0801c149 	.word	0x0801c149
 801c0d8:	0801c149 	.word	0x0801c149
 801c0dc:	0801c149 	.word	0x0801c149
 801c0e0:	0801c149 	.word	0x0801c149
 801c0e4:	0801c149 	.word	0x0801c149
 801c0e8:	0801c149 	.word	0x0801c149
 801c0ec:	2b6e      	cmp	r3, #110	; 0x6e
 801c0ee:	d809      	bhi.n	801c104 <_scanf_float+0x134>
 801c0f0:	2b60      	cmp	r3, #96	; 0x60
 801c0f2:	d8b2      	bhi.n	801c05a <_scanf_float+0x8a>
 801c0f4:	2b54      	cmp	r3, #84	; 0x54
 801c0f6:	d077      	beq.n	801c1e8 <_scanf_float+0x218>
 801c0f8:	2b59      	cmp	r3, #89	; 0x59
 801c0fa:	d199      	bne.n	801c030 <_scanf_float+0x60>
 801c0fc:	2d07      	cmp	r5, #7
 801c0fe:	d197      	bne.n	801c030 <_scanf_float+0x60>
 801c100:	2508      	movs	r5, #8
 801c102:	e029      	b.n	801c158 <_scanf_float+0x188>
 801c104:	2b74      	cmp	r3, #116	; 0x74
 801c106:	d06f      	beq.n	801c1e8 <_scanf_float+0x218>
 801c108:	2b79      	cmp	r3, #121	; 0x79
 801c10a:	e7f6      	b.n	801c0fa <_scanf_float+0x12a>
 801c10c:	6821      	ldr	r1, [r4, #0]
 801c10e:	05c8      	lsls	r0, r1, #23
 801c110:	d51a      	bpl.n	801c148 <_scanf_float+0x178>
 801c112:	9b02      	ldr	r3, [sp, #8]
 801c114:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c118:	6021      	str	r1, [r4, #0]
 801c11a:	f109 0901 	add.w	r9, r9, #1
 801c11e:	b11b      	cbz	r3, 801c128 <_scanf_float+0x158>
 801c120:	3b01      	subs	r3, #1
 801c122:	3201      	adds	r2, #1
 801c124:	9302      	str	r3, [sp, #8]
 801c126:	60a2      	str	r2, [r4, #8]
 801c128:	68a3      	ldr	r3, [r4, #8]
 801c12a:	3b01      	subs	r3, #1
 801c12c:	60a3      	str	r3, [r4, #8]
 801c12e:	6923      	ldr	r3, [r4, #16]
 801c130:	3301      	adds	r3, #1
 801c132:	6123      	str	r3, [r4, #16]
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	3b01      	subs	r3, #1
 801c138:	2b00      	cmp	r3, #0
 801c13a:	607b      	str	r3, [r7, #4]
 801c13c:	f340 8084 	ble.w	801c248 <_scanf_float+0x278>
 801c140:	683b      	ldr	r3, [r7, #0]
 801c142:	3301      	adds	r3, #1
 801c144:	603b      	str	r3, [r7, #0]
 801c146:	e766      	b.n	801c016 <_scanf_float+0x46>
 801c148:	eb1a 0f05 	cmn.w	sl, r5
 801c14c:	f47f af70 	bne.w	801c030 <_scanf_float+0x60>
 801c150:	6822      	ldr	r2, [r4, #0]
 801c152:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c156:	6022      	str	r2, [r4, #0]
 801c158:	f806 3b01 	strb.w	r3, [r6], #1
 801c15c:	e7e4      	b.n	801c128 <_scanf_float+0x158>
 801c15e:	6822      	ldr	r2, [r4, #0]
 801c160:	0610      	lsls	r0, r2, #24
 801c162:	f57f af65 	bpl.w	801c030 <_scanf_float+0x60>
 801c166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c16a:	e7f4      	b.n	801c156 <_scanf_float+0x186>
 801c16c:	f1ba 0f00 	cmp.w	sl, #0
 801c170:	d10e      	bne.n	801c190 <_scanf_float+0x1c0>
 801c172:	f1b9 0f00 	cmp.w	r9, #0
 801c176:	d10e      	bne.n	801c196 <_scanf_float+0x1c6>
 801c178:	6822      	ldr	r2, [r4, #0]
 801c17a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c17e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c182:	d108      	bne.n	801c196 <_scanf_float+0x1c6>
 801c184:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c188:	6022      	str	r2, [r4, #0]
 801c18a:	f04f 0a01 	mov.w	sl, #1
 801c18e:	e7e3      	b.n	801c158 <_scanf_float+0x188>
 801c190:	f1ba 0f02 	cmp.w	sl, #2
 801c194:	d055      	beq.n	801c242 <_scanf_float+0x272>
 801c196:	2d01      	cmp	r5, #1
 801c198:	d002      	beq.n	801c1a0 <_scanf_float+0x1d0>
 801c19a:	2d04      	cmp	r5, #4
 801c19c:	f47f af48 	bne.w	801c030 <_scanf_float+0x60>
 801c1a0:	3501      	adds	r5, #1
 801c1a2:	b2ed      	uxtb	r5, r5
 801c1a4:	e7d8      	b.n	801c158 <_scanf_float+0x188>
 801c1a6:	f1ba 0f01 	cmp.w	sl, #1
 801c1aa:	f47f af41 	bne.w	801c030 <_scanf_float+0x60>
 801c1ae:	f04f 0a02 	mov.w	sl, #2
 801c1b2:	e7d1      	b.n	801c158 <_scanf_float+0x188>
 801c1b4:	b97d      	cbnz	r5, 801c1d6 <_scanf_float+0x206>
 801c1b6:	f1b9 0f00 	cmp.w	r9, #0
 801c1ba:	f47f af3c 	bne.w	801c036 <_scanf_float+0x66>
 801c1be:	6822      	ldr	r2, [r4, #0]
 801c1c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c1c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c1c8:	f47f af39 	bne.w	801c03e <_scanf_float+0x6e>
 801c1cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c1d0:	6022      	str	r2, [r4, #0]
 801c1d2:	2501      	movs	r5, #1
 801c1d4:	e7c0      	b.n	801c158 <_scanf_float+0x188>
 801c1d6:	2d03      	cmp	r5, #3
 801c1d8:	d0e2      	beq.n	801c1a0 <_scanf_float+0x1d0>
 801c1da:	2d05      	cmp	r5, #5
 801c1dc:	e7de      	b.n	801c19c <_scanf_float+0x1cc>
 801c1de:	2d02      	cmp	r5, #2
 801c1e0:	f47f af26 	bne.w	801c030 <_scanf_float+0x60>
 801c1e4:	2503      	movs	r5, #3
 801c1e6:	e7b7      	b.n	801c158 <_scanf_float+0x188>
 801c1e8:	2d06      	cmp	r5, #6
 801c1ea:	f47f af21 	bne.w	801c030 <_scanf_float+0x60>
 801c1ee:	2507      	movs	r5, #7
 801c1f0:	e7b2      	b.n	801c158 <_scanf_float+0x188>
 801c1f2:	6822      	ldr	r2, [r4, #0]
 801c1f4:	0591      	lsls	r1, r2, #22
 801c1f6:	f57f af1b 	bpl.w	801c030 <_scanf_float+0x60>
 801c1fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c1fe:	6022      	str	r2, [r4, #0]
 801c200:	f8cd 9004 	str.w	r9, [sp, #4]
 801c204:	e7a8      	b.n	801c158 <_scanf_float+0x188>
 801c206:	6822      	ldr	r2, [r4, #0]
 801c208:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c20c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c210:	d006      	beq.n	801c220 <_scanf_float+0x250>
 801c212:	0550      	lsls	r0, r2, #21
 801c214:	f57f af0c 	bpl.w	801c030 <_scanf_float+0x60>
 801c218:	f1b9 0f00 	cmp.w	r9, #0
 801c21c:	f43f af0f 	beq.w	801c03e <_scanf_float+0x6e>
 801c220:	0591      	lsls	r1, r2, #22
 801c222:	bf58      	it	pl
 801c224:	9901      	ldrpl	r1, [sp, #4]
 801c226:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c22a:	bf58      	it	pl
 801c22c:	eba9 0101 	subpl.w	r1, r9, r1
 801c230:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c234:	bf58      	it	pl
 801c236:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c23a:	6022      	str	r2, [r4, #0]
 801c23c:	f04f 0900 	mov.w	r9, #0
 801c240:	e78a      	b.n	801c158 <_scanf_float+0x188>
 801c242:	f04f 0a03 	mov.w	sl, #3
 801c246:	e787      	b.n	801c158 <_scanf_float+0x188>
 801c248:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c24c:	4639      	mov	r1, r7
 801c24e:	4640      	mov	r0, r8
 801c250:	4798      	blx	r3
 801c252:	2800      	cmp	r0, #0
 801c254:	f43f aedf 	beq.w	801c016 <_scanf_float+0x46>
 801c258:	e6ea      	b.n	801c030 <_scanf_float+0x60>
 801c25a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c25e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c262:	463a      	mov	r2, r7
 801c264:	4640      	mov	r0, r8
 801c266:	4798      	blx	r3
 801c268:	6923      	ldr	r3, [r4, #16]
 801c26a:	3b01      	subs	r3, #1
 801c26c:	6123      	str	r3, [r4, #16]
 801c26e:	e6ec      	b.n	801c04a <_scanf_float+0x7a>
 801c270:	1e6b      	subs	r3, r5, #1
 801c272:	2b06      	cmp	r3, #6
 801c274:	d825      	bhi.n	801c2c2 <_scanf_float+0x2f2>
 801c276:	2d02      	cmp	r5, #2
 801c278:	d836      	bhi.n	801c2e8 <_scanf_float+0x318>
 801c27a:	455e      	cmp	r6, fp
 801c27c:	f67f aee8 	bls.w	801c050 <_scanf_float+0x80>
 801c280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c284:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c288:	463a      	mov	r2, r7
 801c28a:	4640      	mov	r0, r8
 801c28c:	4798      	blx	r3
 801c28e:	6923      	ldr	r3, [r4, #16]
 801c290:	3b01      	subs	r3, #1
 801c292:	6123      	str	r3, [r4, #16]
 801c294:	e7f1      	b.n	801c27a <_scanf_float+0x2aa>
 801c296:	9802      	ldr	r0, [sp, #8]
 801c298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c29c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c2a0:	9002      	str	r0, [sp, #8]
 801c2a2:	463a      	mov	r2, r7
 801c2a4:	4640      	mov	r0, r8
 801c2a6:	4798      	blx	r3
 801c2a8:	6923      	ldr	r3, [r4, #16]
 801c2aa:	3b01      	subs	r3, #1
 801c2ac:	6123      	str	r3, [r4, #16]
 801c2ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c2b2:	fa5f fa8a 	uxtb.w	sl, sl
 801c2b6:	f1ba 0f02 	cmp.w	sl, #2
 801c2ba:	d1ec      	bne.n	801c296 <_scanf_float+0x2c6>
 801c2bc:	3d03      	subs	r5, #3
 801c2be:	b2ed      	uxtb	r5, r5
 801c2c0:	1b76      	subs	r6, r6, r5
 801c2c2:	6823      	ldr	r3, [r4, #0]
 801c2c4:	05da      	lsls	r2, r3, #23
 801c2c6:	d52f      	bpl.n	801c328 <_scanf_float+0x358>
 801c2c8:	055b      	lsls	r3, r3, #21
 801c2ca:	d510      	bpl.n	801c2ee <_scanf_float+0x31e>
 801c2cc:	455e      	cmp	r6, fp
 801c2ce:	f67f aebf 	bls.w	801c050 <_scanf_float+0x80>
 801c2d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c2d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c2da:	463a      	mov	r2, r7
 801c2dc:	4640      	mov	r0, r8
 801c2de:	4798      	blx	r3
 801c2e0:	6923      	ldr	r3, [r4, #16]
 801c2e2:	3b01      	subs	r3, #1
 801c2e4:	6123      	str	r3, [r4, #16]
 801c2e6:	e7f1      	b.n	801c2cc <_scanf_float+0x2fc>
 801c2e8:	46aa      	mov	sl, r5
 801c2ea:	9602      	str	r6, [sp, #8]
 801c2ec:	e7df      	b.n	801c2ae <_scanf_float+0x2de>
 801c2ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c2f2:	6923      	ldr	r3, [r4, #16]
 801c2f4:	2965      	cmp	r1, #101	; 0x65
 801c2f6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801c2fa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801c2fe:	6123      	str	r3, [r4, #16]
 801c300:	d00c      	beq.n	801c31c <_scanf_float+0x34c>
 801c302:	2945      	cmp	r1, #69	; 0x45
 801c304:	d00a      	beq.n	801c31c <_scanf_float+0x34c>
 801c306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c30a:	463a      	mov	r2, r7
 801c30c:	4640      	mov	r0, r8
 801c30e:	4798      	blx	r3
 801c310:	6923      	ldr	r3, [r4, #16]
 801c312:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c316:	3b01      	subs	r3, #1
 801c318:	1eb5      	subs	r5, r6, #2
 801c31a:	6123      	str	r3, [r4, #16]
 801c31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c320:	463a      	mov	r2, r7
 801c322:	4640      	mov	r0, r8
 801c324:	4798      	blx	r3
 801c326:	462e      	mov	r6, r5
 801c328:	6825      	ldr	r5, [r4, #0]
 801c32a:	f015 0510 	ands.w	r5, r5, #16
 801c32e:	d159      	bne.n	801c3e4 <_scanf_float+0x414>
 801c330:	7035      	strb	r5, [r6, #0]
 801c332:	6823      	ldr	r3, [r4, #0]
 801c334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c33c:	d11b      	bne.n	801c376 <_scanf_float+0x3a6>
 801c33e:	9b01      	ldr	r3, [sp, #4]
 801c340:	454b      	cmp	r3, r9
 801c342:	eba3 0209 	sub.w	r2, r3, r9
 801c346:	d123      	bne.n	801c390 <_scanf_float+0x3c0>
 801c348:	2200      	movs	r2, #0
 801c34a:	4659      	mov	r1, fp
 801c34c:	4640      	mov	r0, r8
 801c34e:	f000 ff89 	bl	801d264 <_strtod_r>
 801c352:	6822      	ldr	r2, [r4, #0]
 801c354:	9b03      	ldr	r3, [sp, #12]
 801c356:	f012 0f02 	tst.w	r2, #2
 801c35a:	ec57 6b10 	vmov	r6, r7, d0
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	d021      	beq.n	801c3a6 <_scanf_float+0x3d6>
 801c362:	9903      	ldr	r1, [sp, #12]
 801c364:	1d1a      	adds	r2, r3, #4
 801c366:	600a      	str	r2, [r1, #0]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	e9c3 6700 	strd	r6, r7, [r3]
 801c36e:	68e3      	ldr	r3, [r4, #12]
 801c370:	3301      	adds	r3, #1
 801c372:	60e3      	str	r3, [r4, #12]
 801c374:	e66d      	b.n	801c052 <_scanf_float+0x82>
 801c376:	9b04      	ldr	r3, [sp, #16]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d0e5      	beq.n	801c348 <_scanf_float+0x378>
 801c37c:	9905      	ldr	r1, [sp, #20]
 801c37e:	230a      	movs	r3, #10
 801c380:	462a      	mov	r2, r5
 801c382:	3101      	adds	r1, #1
 801c384:	4640      	mov	r0, r8
 801c386:	f000 fff5 	bl	801d374 <_strtol_r>
 801c38a:	9b04      	ldr	r3, [sp, #16]
 801c38c:	9e05      	ldr	r6, [sp, #20]
 801c38e:	1ac2      	subs	r2, r0, r3
 801c390:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c394:	429e      	cmp	r6, r3
 801c396:	bf28      	it	cs
 801c398:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c39c:	4912      	ldr	r1, [pc, #72]	; (801c3e8 <_scanf_float+0x418>)
 801c39e:	4630      	mov	r0, r6
 801c3a0:	f000 f8da 	bl	801c558 <siprintf>
 801c3a4:	e7d0      	b.n	801c348 <_scanf_float+0x378>
 801c3a6:	9903      	ldr	r1, [sp, #12]
 801c3a8:	f012 0f04 	tst.w	r2, #4
 801c3ac:	f103 0204 	add.w	r2, r3, #4
 801c3b0:	600a      	str	r2, [r1, #0]
 801c3b2:	d1d9      	bne.n	801c368 <_scanf_float+0x398>
 801c3b4:	f8d3 8000 	ldr.w	r8, [r3]
 801c3b8:	ee10 2a10 	vmov	r2, s0
 801c3bc:	ee10 0a10 	vmov	r0, s0
 801c3c0:	463b      	mov	r3, r7
 801c3c2:	4639      	mov	r1, r7
 801c3c4:	f7e4 fbb2 	bl	8000b2c <__aeabi_dcmpun>
 801c3c8:	b128      	cbz	r0, 801c3d6 <_scanf_float+0x406>
 801c3ca:	4808      	ldr	r0, [pc, #32]	; (801c3ec <_scanf_float+0x41c>)
 801c3cc:	f000 f88a 	bl	801c4e4 <nanf>
 801c3d0:	ed88 0a00 	vstr	s0, [r8]
 801c3d4:	e7cb      	b.n	801c36e <_scanf_float+0x39e>
 801c3d6:	4630      	mov	r0, r6
 801c3d8:	4639      	mov	r1, r7
 801c3da:	f7e4 fc05 	bl	8000be8 <__aeabi_d2f>
 801c3de:	f8c8 0000 	str.w	r0, [r8]
 801c3e2:	e7c4      	b.n	801c36e <_scanf_float+0x39e>
 801c3e4:	2500      	movs	r5, #0
 801c3e6:	e634      	b.n	801c052 <_scanf_float+0x82>
 801c3e8:	08022f14 	.word	0x08022f14
 801c3ec:	08023320 	.word	0x08023320

0801c3f0 <cleanup_glue>:
 801c3f0:	b538      	push	{r3, r4, r5, lr}
 801c3f2:	460c      	mov	r4, r1
 801c3f4:	6809      	ldr	r1, [r1, #0]
 801c3f6:	4605      	mov	r5, r0
 801c3f8:	b109      	cbz	r1, 801c3fe <cleanup_glue+0xe>
 801c3fa:	f7ff fff9 	bl	801c3f0 <cleanup_glue>
 801c3fe:	4621      	mov	r1, r4
 801c400:	4628      	mov	r0, r5
 801c402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c406:	f002 bfa1 	b.w	801f34c <_free_r>
	...

0801c40c <_reclaim_reent>:
 801c40c:	4b2c      	ldr	r3, [pc, #176]	; (801c4c0 <_reclaim_reent+0xb4>)
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	4283      	cmp	r3, r0
 801c412:	b570      	push	{r4, r5, r6, lr}
 801c414:	4604      	mov	r4, r0
 801c416:	d051      	beq.n	801c4bc <_reclaim_reent+0xb0>
 801c418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c41a:	b143      	cbz	r3, 801c42e <_reclaim_reent+0x22>
 801c41c:	68db      	ldr	r3, [r3, #12]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d14a      	bne.n	801c4b8 <_reclaim_reent+0xac>
 801c422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c424:	6819      	ldr	r1, [r3, #0]
 801c426:	b111      	cbz	r1, 801c42e <_reclaim_reent+0x22>
 801c428:	4620      	mov	r0, r4
 801c42a:	f002 ff8f 	bl	801f34c <_free_r>
 801c42e:	6961      	ldr	r1, [r4, #20]
 801c430:	b111      	cbz	r1, 801c438 <_reclaim_reent+0x2c>
 801c432:	4620      	mov	r0, r4
 801c434:	f002 ff8a 	bl	801f34c <_free_r>
 801c438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c43a:	b111      	cbz	r1, 801c442 <_reclaim_reent+0x36>
 801c43c:	4620      	mov	r0, r4
 801c43e:	f002 ff85 	bl	801f34c <_free_r>
 801c442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c444:	b111      	cbz	r1, 801c44c <_reclaim_reent+0x40>
 801c446:	4620      	mov	r0, r4
 801c448:	f002 ff80 	bl	801f34c <_free_r>
 801c44c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801c44e:	b111      	cbz	r1, 801c456 <_reclaim_reent+0x4a>
 801c450:	4620      	mov	r0, r4
 801c452:	f002 ff7b 	bl	801f34c <_free_r>
 801c456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c458:	b111      	cbz	r1, 801c460 <_reclaim_reent+0x54>
 801c45a:	4620      	mov	r0, r4
 801c45c:	f002 ff76 	bl	801f34c <_free_r>
 801c460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801c462:	b111      	cbz	r1, 801c46a <_reclaim_reent+0x5e>
 801c464:	4620      	mov	r0, r4
 801c466:	f002 ff71 	bl	801f34c <_free_r>
 801c46a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c46c:	b111      	cbz	r1, 801c474 <_reclaim_reent+0x68>
 801c46e:	4620      	mov	r0, r4
 801c470:	f002 ff6c 	bl	801f34c <_free_r>
 801c474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c476:	b111      	cbz	r1, 801c47e <_reclaim_reent+0x72>
 801c478:	4620      	mov	r0, r4
 801c47a:	f002 ff67 	bl	801f34c <_free_r>
 801c47e:	69a3      	ldr	r3, [r4, #24]
 801c480:	b1e3      	cbz	r3, 801c4bc <_reclaim_reent+0xb0>
 801c482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c484:	4620      	mov	r0, r4
 801c486:	4798      	blx	r3
 801c488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c48a:	b1b9      	cbz	r1, 801c4bc <_reclaim_reent+0xb0>
 801c48c:	4620      	mov	r0, r4
 801c48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c492:	f7ff bfad 	b.w	801c3f0 <cleanup_glue>
 801c496:	5949      	ldr	r1, [r1, r5]
 801c498:	b941      	cbnz	r1, 801c4ac <_reclaim_reent+0xa0>
 801c49a:	3504      	adds	r5, #4
 801c49c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c49e:	2d80      	cmp	r5, #128	; 0x80
 801c4a0:	68d9      	ldr	r1, [r3, #12]
 801c4a2:	d1f8      	bne.n	801c496 <_reclaim_reent+0x8a>
 801c4a4:	4620      	mov	r0, r4
 801c4a6:	f002 ff51 	bl	801f34c <_free_r>
 801c4aa:	e7ba      	b.n	801c422 <_reclaim_reent+0x16>
 801c4ac:	680e      	ldr	r6, [r1, #0]
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	f002 ff4c 	bl	801f34c <_free_r>
 801c4b4:	4631      	mov	r1, r6
 801c4b6:	e7ef      	b.n	801c498 <_reclaim_reent+0x8c>
 801c4b8:	2500      	movs	r5, #0
 801c4ba:	e7ef      	b.n	801c49c <_reclaim_reent+0x90>
 801c4bc:	bd70      	pop	{r4, r5, r6, pc}
 801c4be:	bf00      	nop
 801c4c0:	20000110 	.word	0x20000110

0801c4c4 <_sbrk_r>:
 801c4c4:	b538      	push	{r3, r4, r5, lr}
 801c4c6:	4d06      	ldr	r5, [pc, #24]	; (801c4e0 <_sbrk_r+0x1c>)
 801c4c8:	2300      	movs	r3, #0
 801c4ca:	4604      	mov	r4, r0
 801c4cc:	4608      	mov	r0, r1
 801c4ce:	602b      	str	r3, [r5, #0]
 801c4d0:	f006 f8fc 	bl	80226cc <_sbrk>
 801c4d4:	1c43      	adds	r3, r0, #1
 801c4d6:	d102      	bne.n	801c4de <_sbrk_r+0x1a>
 801c4d8:	682b      	ldr	r3, [r5, #0]
 801c4da:	b103      	cbz	r3, 801c4de <_sbrk_r+0x1a>
 801c4dc:	6023      	str	r3, [r4, #0]
 801c4de:	bd38      	pop	{r3, r4, r5, pc}
 801c4e0:	2000f198 	.word	0x2000f198

0801c4e4 <nanf>:
 801c4e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c4ec <nanf+0x8>
 801c4e8:	4770      	bx	lr
 801c4ea:	bf00      	nop
 801c4ec:	7fc00000 	.word	0x7fc00000

0801c4f0 <sniprintf>:
 801c4f0:	b40c      	push	{r2, r3}
 801c4f2:	b530      	push	{r4, r5, lr}
 801c4f4:	4b17      	ldr	r3, [pc, #92]	; (801c554 <sniprintf+0x64>)
 801c4f6:	1e0c      	subs	r4, r1, #0
 801c4f8:	681d      	ldr	r5, [r3, #0]
 801c4fa:	b09d      	sub	sp, #116	; 0x74
 801c4fc:	da08      	bge.n	801c510 <sniprintf+0x20>
 801c4fe:	238b      	movs	r3, #139	; 0x8b
 801c500:	602b      	str	r3, [r5, #0]
 801c502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c506:	b01d      	add	sp, #116	; 0x74
 801c508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c50c:	b002      	add	sp, #8
 801c50e:	4770      	bx	lr
 801c510:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c514:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c518:	bf14      	ite	ne
 801c51a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c51e:	4623      	moveq	r3, r4
 801c520:	9304      	str	r3, [sp, #16]
 801c522:	9307      	str	r3, [sp, #28]
 801c524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c528:	9002      	str	r0, [sp, #8]
 801c52a:	9006      	str	r0, [sp, #24]
 801c52c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c530:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c532:	ab21      	add	r3, sp, #132	; 0x84
 801c534:	a902      	add	r1, sp, #8
 801c536:	4628      	mov	r0, r5
 801c538:	9301      	str	r3, [sp, #4]
 801c53a:	f002 ffaf 	bl	801f49c <_svfiprintf_r>
 801c53e:	1c43      	adds	r3, r0, #1
 801c540:	bfbc      	itt	lt
 801c542:	238b      	movlt	r3, #139	; 0x8b
 801c544:	602b      	strlt	r3, [r5, #0]
 801c546:	2c00      	cmp	r4, #0
 801c548:	d0dd      	beq.n	801c506 <sniprintf+0x16>
 801c54a:	9b02      	ldr	r3, [sp, #8]
 801c54c:	2200      	movs	r2, #0
 801c54e:	701a      	strb	r2, [r3, #0]
 801c550:	e7d9      	b.n	801c506 <sniprintf+0x16>
 801c552:	bf00      	nop
 801c554:	20000110 	.word	0x20000110

0801c558 <siprintf>:
 801c558:	b40e      	push	{r1, r2, r3}
 801c55a:	b500      	push	{lr}
 801c55c:	b09c      	sub	sp, #112	; 0x70
 801c55e:	ab1d      	add	r3, sp, #116	; 0x74
 801c560:	9002      	str	r0, [sp, #8]
 801c562:	9006      	str	r0, [sp, #24]
 801c564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c568:	4809      	ldr	r0, [pc, #36]	; (801c590 <siprintf+0x38>)
 801c56a:	9107      	str	r1, [sp, #28]
 801c56c:	9104      	str	r1, [sp, #16]
 801c56e:	4909      	ldr	r1, [pc, #36]	; (801c594 <siprintf+0x3c>)
 801c570:	f853 2b04 	ldr.w	r2, [r3], #4
 801c574:	9105      	str	r1, [sp, #20]
 801c576:	6800      	ldr	r0, [r0, #0]
 801c578:	9301      	str	r3, [sp, #4]
 801c57a:	a902      	add	r1, sp, #8
 801c57c:	f002 ff8e 	bl	801f49c <_svfiprintf_r>
 801c580:	9b02      	ldr	r3, [sp, #8]
 801c582:	2200      	movs	r2, #0
 801c584:	701a      	strb	r2, [r3, #0]
 801c586:	b01c      	add	sp, #112	; 0x70
 801c588:	f85d eb04 	ldr.w	lr, [sp], #4
 801c58c:	b003      	add	sp, #12
 801c58e:	4770      	bx	lr
 801c590:	20000110 	.word	0x20000110
 801c594:	ffff0208 	.word	0xffff0208

0801c598 <__sread>:
 801c598:	b510      	push	{r4, lr}
 801c59a:	460c      	mov	r4, r1
 801c59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5a0:	f003 f87c 	bl	801f69c <_read_r>
 801c5a4:	2800      	cmp	r0, #0
 801c5a6:	bfab      	itete	ge
 801c5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c5aa:	89a3      	ldrhlt	r3, [r4, #12]
 801c5ac:	181b      	addge	r3, r3, r0
 801c5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c5b2:	bfac      	ite	ge
 801c5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 801c5b6:	81a3      	strhlt	r3, [r4, #12]
 801c5b8:	bd10      	pop	{r4, pc}

0801c5ba <__swrite>:
 801c5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5be:	461f      	mov	r7, r3
 801c5c0:	898b      	ldrh	r3, [r1, #12]
 801c5c2:	05db      	lsls	r3, r3, #23
 801c5c4:	4605      	mov	r5, r0
 801c5c6:	460c      	mov	r4, r1
 801c5c8:	4616      	mov	r6, r2
 801c5ca:	d505      	bpl.n	801c5d8 <__swrite+0x1e>
 801c5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5d0:	2302      	movs	r3, #2
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	f002 f9aa 	bl	801e92c <_lseek_r>
 801c5d8:	89a3      	ldrh	r3, [r4, #12]
 801c5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c5e2:	81a3      	strh	r3, [r4, #12]
 801c5e4:	4632      	mov	r2, r6
 801c5e6:	463b      	mov	r3, r7
 801c5e8:	4628      	mov	r0, r5
 801c5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c5ee:	f000 bec3 	b.w	801d378 <_write_r>

0801c5f2 <__sseek>:
 801c5f2:	b510      	push	{r4, lr}
 801c5f4:	460c      	mov	r4, r1
 801c5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5fa:	f002 f997 	bl	801e92c <_lseek_r>
 801c5fe:	1c43      	adds	r3, r0, #1
 801c600:	89a3      	ldrh	r3, [r4, #12]
 801c602:	bf15      	itete	ne
 801c604:	6560      	strne	r0, [r4, #84]	; 0x54
 801c606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c60e:	81a3      	strheq	r3, [r4, #12]
 801c610:	bf18      	it	ne
 801c612:	81a3      	strhne	r3, [r4, #12]
 801c614:	bd10      	pop	{r4, pc}

0801c616 <__sclose>:
 801c616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c61a:	f000 bebf 	b.w	801d39c <_close_r>

0801c61e <sulp>:
 801c61e:	b570      	push	{r4, r5, r6, lr}
 801c620:	4604      	mov	r4, r0
 801c622:	460d      	mov	r5, r1
 801c624:	ec45 4b10 	vmov	d0, r4, r5
 801c628:	4616      	mov	r6, r2
 801c62a:	f002 fd29 	bl	801f080 <__ulp>
 801c62e:	ec51 0b10 	vmov	r0, r1, d0
 801c632:	b17e      	cbz	r6, 801c654 <sulp+0x36>
 801c634:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c638:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	dd09      	ble.n	801c654 <sulp+0x36>
 801c640:	051b      	lsls	r3, r3, #20
 801c642:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c646:	2400      	movs	r4, #0
 801c648:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c64c:	4622      	mov	r2, r4
 801c64e:	462b      	mov	r3, r5
 801c650:	f7e3 ffd2 	bl	80005f8 <__aeabi_dmul>
 801c654:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c658 <_strtod_l>:
 801c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65c:	ed2d 8b02 	vpush	{d8}
 801c660:	b09d      	sub	sp, #116	; 0x74
 801c662:	461f      	mov	r7, r3
 801c664:	2300      	movs	r3, #0
 801c666:	9318      	str	r3, [sp, #96]	; 0x60
 801c668:	4ba2      	ldr	r3, [pc, #648]	; (801c8f4 <_strtod_l+0x29c>)
 801c66a:	9213      	str	r2, [sp, #76]	; 0x4c
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	9305      	str	r3, [sp, #20]
 801c670:	4604      	mov	r4, r0
 801c672:	4618      	mov	r0, r3
 801c674:	4688      	mov	r8, r1
 801c676:	f7e3 fdab 	bl	80001d0 <strlen>
 801c67a:	f04f 0a00 	mov.w	sl, #0
 801c67e:	4605      	mov	r5, r0
 801c680:	f04f 0b00 	mov.w	fp, #0
 801c684:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c68a:	781a      	ldrb	r2, [r3, #0]
 801c68c:	2a2b      	cmp	r2, #43	; 0x2b
 801c68e:	d04e      	beq.n	801c72e <_strtod_l+0xd6>
 801c690:	d83b      	bhi.n	801c70a <_strtod_l+0xb2>
 801c692:	2a0d      	cmp	r2, #13
 801c694:	d834      	bhi.n	801c700 <_strtod_l+0xa8>
 801c696:	2a08      	cmp	r2, #8
 801c698:	d834      	bhi.n	801c704 <_strtod_l+0xac>
 801c69a:	2a00      	cmp	r2, #0
 801c69c:	d03e      	beq.n	801c71c <_strtod_l+0xc4>
 801c69e:	2300      	movs	r3, #0
 801c6a0:	930a      	str	r3, [sp, #40]	; 0x28
 801c6a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c6a4:	7833      	ldrb	r3, [r6, #0]
 801c6a6:	2b30      	cmp	r3, #48	; 0x30
 801c6a8:	f040 80b0 	bne.w	801c80c <_strtod_l+0x1b4>
 801c6ac:	7873      	ldrb	r3, [r6, #1]
 801c6ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c6b2:	2b58      	cmp	r3, #88	; 0x58
 801c6b4:	d168      	bne.n	801c788 <_strtod_l+0x130>
 801c6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6b8:	9301      	str	r3, [sp, #4]
 801c6ba:	ab18      	add	r3, sp, #96	; 0x60
 801c6bc:	9702      	str	r7, [sp, #8]
 801c6be:	9300      	str	r3, [sp, #0]
 801c6c0:	4a8d      	ldr	r2, [pc, #564]	; (801c8f8 <_strtod_l+0x2a0>)
 801c6c2:	ab19      	add	r3, sp, #100	; 0x64
 801c6c4:	a917      	add	r1, sp, #92	; 0x5c
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	f001 fe24 	bl	801e314 <__gethex>
 801c6cc:	f010 0707 	ands.w	r7, r0, #7
 801c6d0:	4605      	mov	r5, r0
 801c6d2:	d005      	beq.n	801c6e0 <_strtod_l+0x88>
 801c6d4:	2f06      	cmp	r7, #6
 801c6d6:	d12c      	bne.n	801c732 <_strtod_l+0xda>
 801c6d8:	3601      	adds	r6, #1
 801c6da:	2300      	movs	r3, #0
 801c6dc:	9617      	str	r6, [sp, #92]	; 0x5c
 801c6de:	930a      	str	r3, [sp, #40]	; 0x28
 801c6e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	f040 8590 	bne.w	801d208 <_strtod_l+0xbb0>
 801c6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6ea:	b1eb      	cbz	r3, 801c728 <_strtod_l+0xd0>
 801c6ec:	4652      	mov	r2, sl
 801c6ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c6f2:	ec43 2b10 	vmov	d0, r2, r3
 801c6f6:	b01d      	add	sp, #116	; 0x74
 801c6f8:	ecbd 8b02 	vpop	{d8}
 801c6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c700:	2a20      	cmp	r2, #32
 801c702:	d1cc      	bne.n	801c69e <_strtod_l+0x46>
 801c704:	3301      	adds	r3, #1
 801c706:	9317      	str	r3, [sp, #92]	; 0x5c
 801c708:	e7be      	b.n	801c688 <_strtod_l+0x30>
 801c70a:	2a2d      	cmp	r2, #45	; 0x2d
 801c70c:	d1c7      	bne.n	801c69e <_strtod_l+0x46>
 801c70e:	2201      	movs	r2, #1
 801c710:	920a      	str	r2, [sp, #40]	; 0x28
 801c712:	1c5a      	adds	r2, r3, #1
 801c714:	9217      	str	r2, [sp, #92]	; 0x5c
 801c716:	785b      	ldrb	r3, [r3, #1]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d1c2      	bne.n	801c6a2 <_strtod_l+0x4a>
 801c71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c71e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c722:	2b00      	cmp	r3, #0
 801c724:	f040 856e 	bne.w	801d204 <_strtod_l+0xbac>
 801c728:	4652      	mov	r2, sl
 801c72a:	465b      	mov	r3, fp
 801c72c:	e7e1      	b.n	801c6f2 <_strtod_l+0x9a>
 801c72e:	2200      	movs	r2, #0
 801c730:	e7ee      	b.n	801c710 <_strtod_l+0xb8>
 801c732:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c734:	b13a      	cbz	r2, 801c746 <_strtod_l+0xee>
 801c736:	2135      	movs	r1, #53	; 0x35
 801c738:	a81a      	add	r0, sp, #104	; 0x68
 801c73a:	f002 fdac 	bl	801f296 <__copybits>
 801c73e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c740:	4620      	mov	r0, r4
 801c742:	f002 f96b 	bl	801ea1c <_Bfree>
 801c746:	3f01      	subs	r7, #1
 801c748:	2f04      	cmp	r7, #4
 801c74a:	d806      	bhi.n	801c75a <_strtod_l+0x102>
 801c74c:	e8df f007 	tbb	[pc, r7]
 801c750:	1714030a 	.word	0x1714030a
 801c754:	0a          	.byte	0x0a
 801c755:	00          	.byte	0x00
 801c756:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c75a:	0728      	lsls	r0, r5, #28
 801c75c:	d5c0      	bpl.n	801c6e0 <_strtod_l+0x88>
 801c75e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c762:	e7bd      	b.n	801c6e0 <_strtod_l+0x88>
 801c764:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c76a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c76e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c772:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c776:	e7f0      	b.n	801c75a <_strtod_l+0x102>
 801c778:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c8fc <_strtod_l+0x2a4>
 801c77c:	e7ed      	b.n	801c75a <_strtod_l+0x102>
 801c77e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c782:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801c786:	e7e8      	b.n	801c75a <_strtod_l+0x102>
 801c788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c78a:	1c5a      	adds	r2, r3, #1
 801c78c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c78e:	785b      	ldrb	r3, [r3, #1]
 801c790:	2b30      	cmp	r3, #48	; 0x30
 801c792:	d0f9      	beq.n	801c788 <_strtod_l+0x130>
 801c794:	2b00      	cmp	r3, #0
 801c796:	d0a3      	beq.n	801c6e0 <_strtod_l+0x88>
 801c798:	2301      	movs	r3, #1
 801c79a:	f04f 0900 	mov.w	r9, #0
 801c79e:	9304      	str	r3, [sp, #16]
 801c7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c7a2:	9308      	str	r3, [sp, #32]
 801c7a4:	f8cd 901c 	str.w	r9, [sp, #28]
 801c7a8:	464f      	mov	r7, r9
 801c7aa:	220a      	movs	r2, #10
 801c7ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c7ae:	7806      	ldrb	r6, [r0, #0]
 801c7b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c7b4:	b2d9      	uxtb	r1, r3
 801c7b6:	2909      	cmp	r1, #9
 801c7b8:	d92a      	bls.n	801c810 <_strtod_l+0x1b8>
 801c7ba:	9905      	ldr	r1, [sp, #20]
 801c7bc:	462a      	mov	r2, r5
 801c7be:	f002 ff87 	bl	801f6d0 <strncmp>
 801c7c2:	b398      	cbz	r0, 801c82c <_strtod_l+0x1d4>
 801c7c4:	2000      	movs	r0, #0
 801c7c6:	4632      	mov	r2, r6
 801c7c8:	463d      	mov	r5, r7
 801c7ca:	9005      	str	r0, [sp, #20]
 801c7cc:	4603      	mov	r3, r0
 801c7ce:	2a65      	cmp	r2, #101	; 0x65
 801c7d0:	d001      	beq.n	801c7d6 <_strtod_l+0x17e>
 801c7d2:	2a45      	cmp	r2, #69	; 0x45
 801c7d4:	d118      	bne.n	801c808 <_strtod_l+0x1b0>
 801c7d6:	b91d      	cbnz	r5, 801c7e0 <_strtod_l+0x188>
 801c7d8:	9a04      	ldr	r2, [sp, #16]
 801c7da:	4302      	orrs	r2, r0
 801c7dc:	d09e      	beq.n	801c71c <_strtod_l+0xc4>
 801c7de:	2500      	movs	r5, #0
 801c7e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c7e4:	f108 0201 	add.w	r2, r8, #1
 801c7e8:	9217      	str	r2, [sp, #92]	; 0x5c
 801c7ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c7ee:	2a2b      	cmp	r2, #43	; 0x2b
 801c7f0:	d075      	beq.n	801c8de <_strtod_l+0x286>
 801c7f2:	2a2d      	cmp	r2, #45	; 0x2d
 801c7f4:	d07b      	beq.n	801c8ee <_strtod_l+0x296>
 801c7f6:	f04f 0c00 	mov.w	ip, #0
 801c7fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c7fe:	2909      	cmp	r1, #9
 801c800:	f240 8082 	bls.w	801c908 <_strtod_l+0x2b0>
 801c804:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c808:	2600      	movs	r6, #0
 801c80a:	e09d      	b.n	801c948 <_strtod_l+0x2f0>
 801c80c:	2300      	movs	r3, #0
 801c80e:	e7c4      	b.n	801c79a <_strtod_l+0x142>
 801c810:	2f08      	cmp	r7, #8
 801c812:	bfd8      	it	le
 801c814:	9907      	ldrle	r1, [sp, #28]
 801c816:	f100 0001 	add.w	r0, r0, #1
 801c81a:	bfda      	itte	le
 801c81c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c820:	9307      	strle	r3, [sp, #28]
 801c822:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c826:	3701      	adds	r7, #1
 801c828:	9017      	str	r0, [sp, #92]	; 0x5c
 801c82a:	e7bf      	b.n	801c7ac <_strtod_l+0x154>
 801c82c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c82e:	195a      	adds	r2, r3, r5
 801c830:	9217      	str	r2, [sp, #92]	; 0x5c
 801c832:	5d5a      	ldrb	r2, [r3, r5]
 801c834:	2f00      	cmp	r7, #0
 801c836:	d037      	beq.n	801c8a8 <_strtod_l+0x250>
 801c838:	9005      	str	r0, [sp, #20]
 801c83a:	463d      	mov	r5, r7
 801c83c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c840:	2b09      	cmp	r3, #9
 801c842:	d912      	bls.n	801c86a <_strtod_l+0x212>
 801c844:	2301      	movs	r3, #1
 801c846:	e7c2      	b.n	801c7ce <_strtod_l+0x176>
 801c848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c84a:	1c5a      	adds	r2, r3, #1
 801c84c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c84e:	785a      	ldrb	r2, [r3, #1]
 801c850:	3001      	adds	r0, #1
 801c852:	2a30      	cmp	r2, #48	; 0x30
 801c854:	d0f8      	beq.n	801c848 <_strtod_l+0x1f0>
 801c856:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c85a:	2b08      	cmp	r3, #8
 801c85c:	f200 84d9 	bhi.w	801d212 <_strtod_l+0xbba>
 801c860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c862:	9005      	str	r0, [sp, #20]
 801c864:	2000      	movs	r0, #0
 801c866:	9308      	str	r3, [sp, #32]
 801c868:	4605      	mov	r5, r0
 801c86a:	3a30      	subs	r2, #48	; 0x30
 801c86c:	f100 0301 	add.w	r3, r0, #1
 801c870:	d014      	beq.n	801c89c <_strtod_l+0x244>
 801c872:	9905      	ldr	r1, [sp, #20]
 801c874:	4419      	add	r1, r3
 801c876:	9105      	str	r1, [sp, #20]
 801c878:	462b      	mov	r3, r5
 801c87a:	eb00 0e05 	add.w	lr, r0, r5
 801c87e:	210a      	movs	r1, #10
 801c880:	4573      	cmp	r3, lr
 801c882:	d113      	bne.n	801c8ac <_strtod_l+0x254>
 801c884:	182b      	adds	r3, r5, r0
 801c886:	2b08      	cmp	r3, #8
 801c888:	f105 0501 	add.w	r5, r5, #1
 801c88c:	4405      	add	r5, r0
 801c88e:	dc1c      	bgt.n	801c8ca <_strtod_l+0x272>
 801c890:	9907      	ldr	r1, [sp, #28]
 801c892:	230a      	movs	r3, #10
 801c894:	fb03 2301 	mla	r3, r3, r1, r2
 801c898:	9307      	str	r3, [sp, #28]
 801c89a:	2300      	movs	r3, #0
 801c89c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c89e:	1c51      	adds	r1, r2, #1
 801c8a0:	9117      	str	r1, [sp, #92]	; 0x5c
 801c8a2:	7852      	ldrb	r2, [r2, #1]
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	e7c9      	b.n	801c83c <_strtod_l+0x1e4>
 801c8a8:	4638      	mov	r0, r7
 801c8aa:	e7d2      	b.n	801c852 <_strtod_l+0x1fa>
 801c8ac:	2b08      	cmp	r3, #8
 801c8ae:	dc04      	bgt.n	801c8ba <_strtod_l+0x262>
 801c8b0:	9e07      	ldr	r6, [sp, #28]
 801c8b2:	434e      	muls	r6, r1
 801c8b4:	9607      	str	r6, [sp, #28]
 801c8b6:	3301      	adds	r3, #1
 801c8b8:	e7e2      	b.n	801c880 <_strtod_l+0x228>
 801c8ba:	f103 0c01 	add.w	ip, r3, #1
 801c8be:	f1bc 0f10 	cmp.w	ip, #16
 801c8c2:	bfd8      	it	le
 801c8c4:	fb01 f909 	mulle.w	r9, r1, r9
 801c8c8:	e7f5      	b.n	801c8b6 <_strtod_l+0x25e>
 801c8ca:	2d10      	cmp	r5, #16
 801c8cc:	bfdc      	itt	le
 801c8ce:	230a      	movle	r3, #10
 801c8d0:	fb03 2909 	mlale	r9, r3, r9, r2
 801c8d4:	e7e1      	b.n	801c89a <_strtod_l+0x242>
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	9305      	str	r3, [sp, #20]
 801c8da:	2301      	movs	r3, #1
 801c8dc:	e77c      	b.n	801c7d8 <_strtod_l+0x180>
 801c8de:	f04f 0c00 	mov.w	ip, #0
 801c8e2:	f108 0202 	add.w	r2, r8, #2
 801c8e6:	9217      	str	r2, [sp, #92]	; 0x5c
 801c8e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c8ec:	e785      	b.n	801c7fa <_strtod_l+0x1a2>
 801c8ee:	f04f 0c01 	mov.w	ip, #1
 801c8f2:	e7f6      	b.n	801c8e2 <_strtod_l+0x28a>
 801c8f4:	08023168 	.word	0x08023168
 801c8f8:	08022f1c 	.word	0x08022f1c
 801c8fc:	7ff00000 	.word	0x7ff00000
 801c900:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c902:	1c51      	adds	r1, r2, #1
 801c904:	9117      	str	r1, [sp, #92]	; 0x5c
 801c906:	7852      	ldrb	r2, [r2, #1]
 801c908:	2a30      	cmp	r2, #48	; 0x30
 801c90a:	d0f9      	beq.n	801c900 <_strtod_l+0x2a8>
 801c90c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c910:	2908      	cmp	r1, #8
 801c912:	f63f af79 	bhi.w	801c808 <_strtod_l+0x1b0>
 801c916:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c91a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c91c:	9206      	str	r2, [sp, #24]
 801c91e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c920:	1c51      	adds	r1, r2, #1
 801c922:	9117      	str	r1, [sp, #92]	; 0x5c
 801c924:	7852      	ldrb	r2, [r2, #1]
 801c926:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c92a:	2e09      	cmp	r6, #9
 801c92c:	d937      	bls.n	801c99e <_strtod_l+0x346>
 801c92e:	9e06      	ldr	r6, [sp, #24]
 801c930:	1b89      	subs	r1, r1, r6
 801c932:	2908      	cmp	r1, #8
 801c934:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c938:	dc02      	bgt.n	801c940 <_strtod_l+0x2e8>
 801c93a:	4576      	cmp	r6, lr
 801c93c:	bfa8      	it	ge
 801c93e:	4676      	movge	r6, lr
 801c940:	f1bc 0f00 	cmp.w	ip, #0
 801c944:	d000      	beq.n	801c948 <_strtod_l+0x2f0>
 801c946:	4276      	negs	r6, r6
 801c948:	2d00      	cmp	r5, #0
 801c94a:	d14d      	bne.n	801c9e8 <_strtod_l+0x390>
 801c94c:	9904      	ldr	r1, [sp, #16]
 801c94e:	4301      	orrs	r1, r0
 801c950:	f47f aec6 	bne.w	801c6e0 <_strtod_l+0x88>
 801c954:	2b00      	cmp	r3, #0
 801c956:	f47f aee1 	bne.w	801c71c <_strtod_l+0xc4>
 801c95a:	2a69      	cmp	r2, #105	; 0x69
 801c95c:	d027      	beq.n	801c9ae <_strtod_l+0x356>
 801c95e:	dc24      	bgt.n	801c9aa <_strtod_l+0x352>
 801c960:	2a49      	cmp	r2, #73	; 0x49
 801c962:	d024      	beq.n	801c9ae <_strtod_l+0x356>
 801c964:	2a4e      	cmp	r2, #78	; 0x4e
 801c966:	f47f aed9 	bne.w	801c71c <_strtod_l+0xc4>
 801c96a:	499f      	ldr	r1, [pc, #636]	; (801cbe8 <_strtod_l+0x590>)
 801c96c:	a817      	add	r0, sp, #92	; 0x5c
 801c96e:	f001 ff29 	bl	801e7c4 <__match>
 801c972:	2800      	cmp	r0, #0
 801c974:	f43f aed2 	beq.w	801c71c <_strtod_l+0xc4>
 801c978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c97a:	781b      	ldrb	r3, [r3, #0]
 801c97c:	2b28      	cmp	r3, #40	; 0x28
 801c97e:	d12d      	bne.n	801c9dc <_strtod_l+0x384>
 801c980:	499a      	ldr	r1, [pc, #616]	; (801cbec <_strtod_l+0x594>)
 801c982:	aa1a      	add	r2, sp, #104	; 0x68
 801c984:	a817      	add	r0, sp, #92	; 0x5c
 801c986:	f001 ff31 	bl	801e7ec <__hexnan>
 801c98a:	2805      	cmp	r0, #5
 801c98c:	d126      	bne.n	801c9dc <_strtod_l+0x384>
 801c98e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c990:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801c994:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c998:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c99c:	e6a0      	b.n	801c6e0 <_strtod_l+0x88>
 801c99e:	210a      	movs	r1, #10
 801c9a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 801c9a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c9a8:	e7b9      	b.n	801c91e <_strtod_l+0x2c6>
 801c9aa:	2a6e      	cmp	r2, #110	; 0x6e
 801c9ac:	e7db      	b.n	801c966 <_strtod_l+0x30e>
 801c9ae:	4990      	ldr	r1, [pc, #576]	; (801cbf0 <_strtod_l+0x598>)
 801c9b0:	a817      	add	r0, sp, #92	; 0x5c
 801c9b2:	f001 ff07 	bl	801e7c4 <__match>
 801c9b6:	2800      	cmp	r0, #0
 801c9b8:	f43f aeb0 	beq.w	801c71c <_strtod_l+0xc4>
 801c9bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c9be:	498d      	ldr	r1, [pc, #564]	; (801cbf4 <_strtod_l+0x59c>)
 801c9c0:	3b01      	subs	r3, #1
 801c9c2:	a817      	add	r0, sp, #92	; 0x5c
 801c9c4:	9317      	str	r3, [sp, #92]	; 0x5c
 801c9c6:	f001 fefd 	bl	801e7c4 <__match>
 801c9ca:	b910      	cbnz	r0, 801c9d2 <_strtod_l+0x37a>
 801c9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c9ce:	3301      	adds	r3, #1
 801c9d0:	9317      	str	r3, [sp, #92]	; 0x5c
 801c9d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 801cc04 <_strtod_l+0x5ac>
 801c9d6:	f04f 0a00 	mov.w	sl, #0
 801c9da:	e681      	b.n	801c6e0 <_strtod_l+0x88>
 801c9dc:	4886      	ldr	r0, [pc, #536]	; (801cbf8 <_strtod_l+0x5a0>)
 801c9de:	f002 fe6f 	bl	801f6c0 <nan>
 801c9e2:	ec5b ab10 	vmov	sl, fp, d0
 801c9e6:	e67b      	b.n	801c6e0 <_strtod_l+0x88>
 801c9e8:	9b05      	ldr	r3, [sp, #20]
 801c9ea:	9807      	ldr	r0, [sp, #28]
 801c9ec:	1af3      	subs	r3, r6, r3
 801c9ee:	2f00      	cmp	r7, #0
 801c9f0:	bf08      	it	eq
 801c9f2:	462f      	moveq	r7, r5
 801c9f4:	2d10      	cmp	r5, #16
 801c9f6:	9306      	str	r3, [sp, #24]
 801c9f8:	46a8      	mov	r8, r5
 801c9fa:	bfa8      	it	ge
 801c9fc:	f04f 0810 	movge.w	r8, #16
 801ca00:	f7e3 fd80 	bl	8000504 <__aeabi_ui2d>
 801ca04:	2d09      	cmp	r5, #9
 801ca06:	4682      	mov	sl, r0
 801ca08:	468b      	mov	fp, r1
 801ca0a:	dd13      	ble.n	801ca34 <_strtod_l+0x3dc>
 801ca0c:	4b7b      	ldr	r3, [pc, #492]	; (801cbfc <_strtod_l+0x5a4>)
 801ca0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ca12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ca16:	f7e3 fdef 	bl	80005f8 <__aeabi_dmul>
 801ca1a:	4682      	mov	sl, r0
 801ca1c:	4648      	mov	r0, r9
 801ca1e:	468b      	mov	fp, r1
 801ca20:	f7e3 fd70 	bl	8000504 <__aeabi_ui2d>
 801ca24:	4602      	mov	r2, r0
 801ca26:	460b      	mov	r3, r1
 801ca28:	4650      	mov	r0, sl
 801ca2a:	4659      	mov	r1, fp
 801ca2c:	f7e3 fc2e 	bl	800028c <__adddf3>
 801ca30:	4682      	mov	sl, r0
 801ca32:	468b      	mov	fp, r1
 801ca34:	2d0f      	cmp	r5, #15
 801ca36:	dc38      	bgt.n	801caaa <_strtod_l+0x452>
 801ca38:	9b06      	ldr	r3, [sp, #24]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f43f ae50 	beq.w	801c6e0 <_strtod_l+0x88>
 801ca40:	dd24      	ble.n	801ca8c <_strtod_l+0x434>
 801ca42:	2b16      	cmp	r3, #22
 801ca44:	dc0b      	bgt.n	801ca5e <_strtod_l+0x406>
 801ca46:	496d      	ldr	r1, [pc, #436]	; (801cbfc <_strtod_l+0x5a4>)
 801ca48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ca4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca50:	4652      	mov	r2, sl
 801ca52:	465b      	mov	r3, fp
 801ca54:	f7e3 fdd0 	bl	80005f8 <__aeabi_dmul>
 801ca58:	4682      	mov	sl, r0
 801ca5a:	468b      	mov	fp, r1
 801ca5c:	e640      	b.n	801c6e0 <_strtod_l+0x88>
 801ca5e:	9a06      	ldr	r2, [sp, #24]
 801ca60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801ca64:	4293      	cmp	r3, r2
 801ca66:	db20      	blt.n	801caaa <_strtod_l+0x452>
 801ca68:	4c64      	ldr	r4, [pc, #400]	; (801cbfc <_strtod_l+0x5a4>)
 801ca6a:	f1c5 050f 	rsb	r5, r5, #15
 801ca6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ca72:	4652      	mov	r2, sl
 801ca74:	465b      	mov	r3, fp
 801ca76:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca7a:	f7e3 fdbd 	bl	80005f8 <__aeabi_dmul>
 801ca7e:	9b06      	ldr	r3, [sp, #24]
 801ca80:	1b5d      	subs	r5, r3, r5
 801ca82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ca86:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ca8a:	e7e3      	b.n	801ca54 <_strtod_l+0x3fc>
 801ca8c:	9b06      	ldr	r3, [sp, #24]
 801ca8e:	3316      	adds	r3, #22
 801ca90:	db0b      	blt.n	801caaa <_strtod_l+0x452>
 801ca92:	9b05      	ldr	r3, [sp, #20]
 801ca94:	1b9e      	subs	r6, r3, r6
 801ca96:	4b59      	ldr	r3, [pc, #356]	; (801cbfc <_strtod_l+0x5a4>)
 801ca98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801ca9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801caa0:	4650      	mov	r0, sl
 801caa2:	4659      	mov	r1, fp
 801caa4:	f7e3 fed2 	bl	800084c <__aeabi_ddiv>
 801caa8:	e7d6      	b.n	801ca58 <_strtod_l+0x400>
 801caaa:	9b06      	ldr	r3, [sp, #24]
 801caac:	eba5 0808 	sub.w	r8, r5, r8
 801cab0:	4498      	add	r8, r3
 801cab2:	f1b8 0f00 	cmp.w	r8, #0
 801cab6:	dd74      	ble.n	801cba2 <_strtod_l+0x54a>
 801cab8:	f018 030f 	ands.w	r3, r8, #15
 801cabc:	d00a      	beq.n	801cad4 <_strtod_l+0x47c>
 801cabe:	494f      	ldr	r1, [pc, #316]	; (801cbfc <_strtod_l+0x5a4>)
 801cac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cac4:	4652      	mov	r2, sl
 801cac6:	465b      	mov	r3, fp
 801cac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cacc:	f7e3 fd94 	bl	80005f8 <__aeabi_dmul>
 801cad0:	4682      	mov	sl, r0
 801cad2:	468b      	mov	fp, r1
 801cad4:	f038 080f 	bics.w	r8, r8, #15
 801cad8:	d04f      	beq.n	801cb7a <_strtod_l+0x522>
 801cada:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801cade:	dd22      	ble.n	801cb26 <_strtod_l+0x4ce>
 801cae0:	2500      	movs	r5, #0
 801cae2:	462e      	mov	r6, r5
 801cae4:	9507      	str	r5, [sp, #28]
 801cae6:	9505      	str	r5, [sp, #20]
 801cae8:	2322      	movs	r3, #34	; 0x22
 801caea:	f8df b118 	ldr.w	fp, [pc, #280]	; 801cc04 <_strtod_l+0x5ac>
 801caee:	6023      	str	r3, [r4, #0]
 801caf0:	f04f 0a00 	mov.w	sl, #0
 801caf4:	9b07      	ldr	r3, [sp, #28]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	f43f adf2 	beq.w	801c6e0 <_strtod_l+0x88>
 801cafc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cafe:	4620      	mov	r0, r4
 801cb00:	f001 ff8c 	bl	801ea1c <_Bfree>
 801cb04:	9905      	ldr	r1, [sp, #20]
 801cb06:	4620      	mov	r0, r4
 801cb08:	f001 ff88 	bl	801ea1c <_Bfree>
 801cb0c:	4631      	mov	r1, r6
 801cb0e:	4620      	mov	r0, r4
 801cb10:	f001 ff84 	bl	801ea1c <_Bfree>
 801cb14:	9907      	ldr	r1, [sp, #28]
 801cb16:	4620      	mov	r0, r4
 801cb18:	f001 ff80 	bl	801ea1c <_Bfree>
 801cb1c:	4629      	mov	r1, r5
 801cb1e:	4620      	mov	r0, r4
 801cb20:	f001 ff7c 	bl	801ea1c <_Bfree>
 801cb24:	e5dc      	b.n	801c6e0 <_strtod_l+0x88>
 801cb26:	4b36      	ldr	r3, [pc, #216]	; (801cc00 <_strtod_l+0x5a8>)
 801cb28:	9304      	str	r3, [sp, #16]
 801cb2a:	2300      	movs	r3, #0
 801cb2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801cb30:	4650      	mov	r0, sl
 801cb32:	4659      	mov	r1, fp
 801cb34:	4699      	mov	r9, r3
 801cb36:	f1b8 0f01 	cmp.w	r8, #1
 801cb3a:	dc21      	bgt.n	801cb80 <_strtod_l+0x528>
 801cb3c:	b10b      	cbz	r3, 801cb42 <_strtod_l+0x4ea>
 801cb3e:	4682      	mov	sl, r0
 801cb40:	468b      	mov	fp, r1
 801cb42:	4b2f      	ldr	r3, [pc, #188]	; (801cc00 <_strtod_l+0x5a8>)
 801cb44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801cb48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801cb4c:	4652      	mov	r2, sl
 801cb4e:	465b      	mov	r3, fp
 801cb50:	e9d9 0100 	ldrd	r0, r1, [r9]
 801cb54:	f7e3 fd50 	bl	80005f8 <__aeabi_dmul>
 801cb58:	4b2a      	ldr	r3, [pc, #168]	; (801cc04 <_strtod_l+0x5ac>)
 801cb5a:	460a      	mov	r2, r1
 801cb5c:	400b      	ands	r3, r1
 801cb5e:	492a      	ldr	r1, [pc, #168]	; (801cc08 <_strtod_l+0x5b0>)
 801cb60:	428b      	cmp	r3, r1
 801cb62:	4682      	mov	sl, r0
 801cb64:	d8bc      	bhi.n	801cae0 <_strtod_l+0x488>
 801cb66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801cb6a:	428b      	cmp	r3, r1
 801cb6c:	bf86      	itte	hi
 801cb6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801cc0c <_strtod_l+0x5b4>
 801cb72:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801cb76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	9304      	str	r3, [sp, #16]
 801cb7e:	e084      	b.n	801cc8a <_strtod_l+0x632>
 801cb80:	f018 0f01 	tst.w	r8, #1
 801cb84:	d005      	beq.n	801cb92 <_strtod_l+0x53a>
 801cb86:	9b04      	ldr	r3, [sp, #16]
 801cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb8c:	f7e3 fd34 	bl	80005f8 <__aeabi_dmul>
 801cb90:	2301      	movs	r3, #1
 801cb92:	9a04      	ldr	r2, [sp, #16]
 801cb94:	3208      	adds	r2, #8
 801cb96:	f109 0901 	add.w	r9, r9, #1
 801cb9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801cb9e:	9204      	str	r2, [sp, #16]
 801cba0:	e7c9      	b.n	801cb36 <_strtod_l+0x4de>
 801cba2:	d0ea      	beq.n	801cb7a <_strtod_l+0x522>
 801cba4:	f1c8 0800 	rsb	r8, r8, #0
 801cba8:	f018 020f 	ands.w	r2, r8, #15
 801cbac:	d00a      	beq.n	801cbc4 <_strtod_l+0x56c>
 801cbae:	4b13      	ldr	r3, [pc, #76]	; (801cbfc <_strtod_l+0x5a4>)
 801cbb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cbb4:	4650      	mov	r0, sl
 801cbb6:	4659      	mov	r1, fp
 801cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbbc:	f7e3 fe46 	bl	800084c <__aeabi_ddiv>
 801cbc0:	4682      	mov	sl, r0
 801cbc2:	468b      	mov	fp, r1
 801cbc4:	ea5f 1828 	movs.w	r8, r8, asr #4
 801cbc8:	d0d7      	beq.n	801cb7a <_strtod_l+0x522>
 801cbca:	f1b8 0f1f 	cmp.w	r8, #31
 801cbce:	dd1f      	ble.n	801cc10 <_strtod_l+0x5b8>
 801cbd0:	2500      	movs	r5, #0
 801cbd2:	462e      	mov	r6, r5
 801cbd4:	9507      	str	r5, [sp, #28]
 801cbd6:	9505      	str	r5, [sp, #20]
 801cbd8:	2322      	movs	r3, #34	; 0x22
 801cbda:	f04f 0a00 	mov.w	sl, #0
 801cbde:	f04f 0b00 	mov.w	fp, #0
 801cbe2:	6023      	str	r3, [r4, #0]
 801cbe4:	e786      	b.n	801caf4 <_strtod_l+0x49c>
 801cbe6:	bf00      	nop
 801cbe8:	08022eed 	.word	0x08022eed
 801cbec:	08022f30 	.word	0x08022f30
 801cbf0:	08022ee5 	.word	0x08022ee5
 801cbf4:	08023074 	.word	0x08023074
 801cbf8:	08023320 	.word	0x08023320
 801cbfc:	08023200 	.word	0x08023200
 801cc00:	080231d8 	.word	0x080231d8
 801cc04:	7ff00000 	.word	0x7ff00000
 801cc08:	7ca00000 	.word	0x7ca00000
 801cc0c:	7fefffff 	.word	0x7fefffff
 801cc10:	f018 0310 	ands.w	r3, r8, #16
 801cc14:	bf18      	it	ne
 801cc16:	236a      	movne	r3, #106	; 0x6a
 801cc18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801cfc8 <_strtod_l+0x970>
 801cc1c:	9304      	str	r3, [sp, #16]
 801cc1e:	4650      	mov	r0, sl
 801cc20:	4659      	mov	r1, fp
 801cc22:	2300      	movs	r3, #0
 801cc24:	f018 0f01 	tst.w	r8, #1
 801cc28:	d004      	beq.n	801cc34 <_strtod_l+0x5dc>
 801cc2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801cc2e:	f7e3 fce3 	bl	80005f8 <__aeabi_dmul>
 801cc32:	2301      	movs	r3, #1
 801cc34:	ea5f 0868 	movs.w	r8, r8, asr #1
 801cc38:	f109 0908 	add.w	r9, r9, #8
 801cc3c:	d1f2      	bne.n	801cc24 <_strtod_l+0x5cc>
 801cc3e:	b10b      	cbz	r3, 801cc44 <_strtod_l+0x5ec>
 801cc40:	4682      	mov	sl, r0
 801cc42:	468b      	mov	fp, r1
 801cc44:	9b04      	ldr	r3, [sp, #16]
 801cc46:	b1c3      	cbz	r3, 801cc7a <_strtod_l+0x622>
 801cc48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801cc4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	4659      	mov	r1, fp
 801cc54:	dd11      	ble.n	801cc7a <_strtod_l+0x622>
 801cc56:	2b1f      	cmp	r3, #31
 801cc58:	f340 8124 	ble.w	801cea4 <_strtod_l+0x84c>
 801cc5c:	2b34      	cmp	r3, #52	; 0x34
 801cc5e:	bfde      	ittt	le
 801cc60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801cc64:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801cc68:	fa03 f202 	lslle.w	r2, r3, r2
 801cc6c:	f04f 0a00 	mov.w	sl, #0
 801cc70:	bfcc      	ite	gt
 801cc72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801cc76:	ea02 0b01 	andle.w	fp, r2, r1
 801cc7a:	2200      	movs	r2, #0
 801cc7c:	2300      	movs	r3, #0
 801cc7e:	4650      	mov	r0, sl
 801cc80:	4659      	mov	r1, fp
 801cc82:	f7e3 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc86:	2800      	cmp	r0, #0
 801cc88:	d1a2      	bne.n	801cbd0 <_strtod_l+0x578>
 801cc8a:	9b07      	ldr	r3, [sp, #28]
 801cc8c:	9300      	str	r3, [sp, #0]
 801cc8e:	9908      	ldr	r1, [sp, #32]
 801cc90:	462b      	mov	r3, r5
 801cc92:	463a      	mov	r2, r7
 801cc94:	4620      	mov	r0, r4
 801cc96:	f001 ff29 	bl	801eaec <__s2b>
 801cc9a:	9007      	str	r0, [sp, #28]
 801cc9c:	2800      	cmp	r0, #0
 801cc9e:	f43f af1f 	beq.w	801cae0 <_strtod_l+0x488>
 801cca2:	9b05      	ldr	r3, [sp, #20]
 801cca4:	1b9e      	subs	r6, r3, r6
 801cca6:	9b06      	ldr	r3, [sp, #24]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	bfb4      	ite	lt
 801ccac:	4633      	movlt	r3, r6
 801ccae:	2300      	movge	r3, #0
 801ccb0:	930c      	str	r3, [sp, #48]	; 0x30
 801ccb2:	9b06      	ldr	r3, [sp, #24]
 801ccb4:	2500      	movs	r5, #0
 801ccb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ccba:	9312      	str	r3, [sp, #72]	; 0x48
 801ccbc:	462e      	mov	r6, r5
 801ccbe:	9b07      	ldr	r3, [sp, #28]
 801ccc0:	4620      	mov	r0, r4
 801ccc2:	6859      	ldr	r1, [r3, #4]
 801ccc4:	f001 fe6a 	bl	801e99c <_Balloc>
 801ccc8:	9005      	str	r0, [sp, #20]
 801ccca:	2800      	cmp	r0, #0
 801cccc:	f43f af0c 	beq.w	801cae8 <_strtod_l+0x490>
 801ccd0:	9b07      	ldr	r3, [sp, #28]
 801ccd2:	691a      	ldr	r2, [r3, #16]
 801ccd4:	3202      	adds	r2, #2
 801ccd6:	f103 010c 	add.w	r1, r3, #12
 801ccda:	0092      	lsls	r2, r2, #2
 801ccdc:	300c      	adds	r0, #12
 801ccde:	f7fe fc62 	bl	801b5a6 <memcpy>
 801cce2:	ec4b ab10 	vmov	d0, sl, fp
 801cce6:	aa1a      	add	r2, sp, #104	; 0x68
 801cce8:	a919      	add	r1, sp, #100	; 0x64
 801ccea:	4620      	mov	r0, r4
 801ccec:	f002 fa44 	bl	801f178 <__d2b>
 801ccf0:	ec4b ab18 	vmov	d8, sl, fp
 801ccf4:	9018      	str	r0, [sp, #96]	; 0x60
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	f43f aef6 	beq.w	801cae8 <_strtod_l+0x490>
 801ccfc:	2101      	movs	r1, #1
 801ccfe:	4620      	mov	r0, r4
 801cd00:	f001 ff8e 	bl	801ec20 <__i2b>
 801cd04:	4606      	mov	r6, r0
 801cd06:	2800      	cmp	r0, #0
 801cd08:	f43f aeee 	beq.w	801cae8 <_strtod_l+0x490>
 801cd0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cd0e:	9904      	ldr	r1, [sp, #16]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	bfab      	itete	ge
 801cd14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801cd16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801cd18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801cd1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801cd1e:	bfac      	ite	ge
 801cd20:	eb03 0902 	addge.w	r9, r3, r2
 801cd24:	1ad7      	sublt	r7, r2, r3
 801cd26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cd28:	eba3 0801 	sub.w	r8, r3, r1
 801cd2c:	4490      	add	r8, r2
 801cd2e:	4ba1      	ldr	r3, [pc, #644]	; (801cfb4 <_strtod_l+0x95c>)
 801cd30:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801cd34:	4598      	cmp	r8, r3
 801cd36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801cd3a:	f280 80c7 	bge.w	801cecc <_strtod_l+0x874>
 801cd3e:	eba3 0308 	sub.w	r3, r3, r8
 801cd42:	2b1f      	cmp	r3, #31
 801cd44:	eba2 0203 	sub.w	r2, r2, r3
 801cd48:	f04f 0101 	mov.w	r1, #1
 801cd4c:	f300 80b1 	bgt.w	801ceb2 <_strtod_l+0x85a>
 801cd50:	fa01 f303 	lsl.w	r3, r1, r3
 801cd54:	930d      	str	r3, [sp, #52]	; 0x34
 801cd56:	2300      	movs	r3, #0
 801cd58:	9308      	str	r3, [sp, #32]
 801cd5a:	eb09 0802 	add.w	r8, r9, r2
 801cd5e:	9b04      	ldr	r3, [sp, #16]
 801cd60:	45c1      	cmp	r9, r8
 801cd62:	4417      	add	r7, r2
 801cd64:	441f      	add	r7, r3
 801cd66:	464b      	mov	r3, r9
 801cd68:	bfa8      	it	ge
 801cd6a:	4643      	movge	r3, r8
 801cd6c:	42bb      	cmp	r3, r7
 801cd6e:	bfa8      	it	ge
 801cd70:	463b      	movge	r3, r7
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	bfc2      	ittt	gt
 801cd76:	eba8 0803 	subgt.w	r8, r8, r3
 801cd7a:	1aff      	subgt	r7, r7, r3
 801cd7c:	eba9 0903 	subgt.w	r9, r9, r3
 801cd80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	dd17      	ble.n	801cdb6 <_strtod_l+0x75e>
 801cd86:	4631      	mov	r1, r6
 801cd88:	461a      	mov	r2, r3
 801cd8a:	4620      	mov	r0, r4
 801cd8c:	f002 f808 	bl	801eda0 <__pow5mult>
 801cd90:	4606      	mov	r6, r0
 801cd92:	2800      	cmp	r0, #0
 801cd94:	f43f aea8 	beq.w	801cae8 <_strtod_l+0x490>
 801cd98:	4601      	mov	r1, r0
 801cd9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cd9c:	4620      	mov	r0, r4
 801cd9e:	f001 ff55 	bl	801ec4c <__multiply>
 801cda2:	900b      	str	r0, [sp, #44]	; 0x2c
 801cda4:	2800      	cmp	r0, #0
 801cda6:	f43f ae9f 	beq.w	801cae8 <_strtod_l+0x490>
 801cdaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cdac:	4620      	mov	r0, r4
 801cdae:	f001 fe35 	bl	801ea1c <_Bfree>
 801cdb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cdb4:	9318      	str	r3, [sp, #96]	; 0x60
 801cdb6:	f1b8 0f00 	cmp.w	r8, #0
 801cdba:	f300 808c 	bgt.w	801ced6 <_strtod_l+0x87e>
 801cdbe:	9b06      	ldr	r3, [sp, #24]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	dd08      	ble.n	801cdd6 <_strtod_l+0x77e>
 801cdc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cdc6:	9905      	ldr	r1, [sp, #20]
 801cdc8:	4620      	mov	r0, r4
 801cdca:	f001 ffe9 	bl	801eda0 <__pow5mult>
 801cdce:	9005      	str	r0, [sp, #20]
 801cdd0:	2800      	cmp	r0, #0
 801cdd2:	f43f ae89 	beq.w	801cae8 <_strtod_l+0x490>
 801cdd6:	2f00      	cmp	r7, #0
 801cdd8:	dd08      	ble.n	801cdec <_strtod_l+0x794>
 801cdda:	9905      	ldr	r1, [sp, #20]
 801cddc:	463a      	mov	r2, r7
 801cdde:	4620      	mov	r0, r4
 801cde0:	f002 f838 	bl	801ee54 <__lshift>
 801cde4:	9005      	str	r0, [sp, #20]
 801cde6:	2800      	cmp	r0, #0
 801cde8:	f43f ae7e 	beq.w	801cae8 <_strtod_l+0x490>
 801cdec:	f1b9 0f00 	cmp.w	r9, #0
 801cdf0:	dd08      	ble.n	801ce04 <_strtod_l+0x7ac>
 801cdf2:	4631      	mov	r1, r6
 801cdf4:	464a      	mov	r2, r9
 801cdf6:	4620      	mov	r0, r4
 801cdf8:	f002 f82c 	bl	801ee54 <__lshift>
 801cdfc:	4606      	mov	r6, r0
 801cdfe:	2800      	cmp	r0, #0
 801ce00:	f43f ae72 	beq.w	801cae8 <_strtod_l+0x490>
 801ce04:	9a05      	ldr	r2, [sp, #20]
 801ce06:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ce08:	4620      	mov	r0, r4
 801ce0a:	f002 f8af 	bl	801ef6c <__mdiff>
 801ce0e:	4605      	mov	r5, r0
 801ce10:	2800      	cmp	r0, #0
 801ce12:	f43f ae69 	beq.w	801cae8 <_strtod_l+0x490>
 801ce16:	68c3      	ldr	r3, [r0, #12]
 801ce18:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	60c3      	str	r3, [r0, #12]
 801ce1e:	4631      	mov	r1, r6
 801ce20:	f002 f888 	bl	801ef34 <__mcmp>
 801ce24:	2800      	cmp	r0, #0
 801ce26:	da60      	bge.n	801ceea <_strtod_l+0x892>
 801ce28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce2a:	ea53 030a 	orrs.w	r3, r3, sl
 801ce2e:	f040 8082 	bne.w	801cf36 <_strtod_l+0x8de>
 801ce32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d17d      	bne.n	801cf36 <_strtod_l+0x8de>
 801ce3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ce3e:	0d1b      	lsrs	r3, r3, #20
 801ce40:	051b      	lsls	r3, r3, #20
 801ce42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ce46:	d976      	bls.n	801cf36 <_strtod_l+0x8de>
 801ce48:	696b      	ldr	r3, [r5, #20]
 801ce4a:	b913      	cbnz	r3, 801ce52 <_strtod_l+0x7fa>
 801ce4c:	692b      	ldr	r3, [r5, #16]
 801ce4e:	2b01      	cmp	r3, #1
 801ce50:	dd71      	ble.n	801cf36 <_strtod_l+0x8de>
 801ce52:	4629      	mov	r1, r5
 801ce54:	2201      	movs	r2, #1
 801ce56:	4620      	mov	r0, r4
 801ce58:	f001 fffc 	bl	801ee54 <__lshift>
 801ce5c:	4631      	mov	r1, r6
 801ce5e:	4605      	mov	r5, r0
 801ce60:	f002 f868 	bl	801ef34 <__mcmp>
 801ce64:	2800      	cmp	r0, #0
 801ce66:	dd66      	ble.n	801cf36 <_strtod_l+0x8de>
 801ce68:	9904      	ldr	r1, [sp, #16]
 801ce6a:	4a53      	ldr	r2, [pc, #332]	; (801cfb8 <_strtod_l+0x960>)
 801ce6c:	465b      	mov	r3, fp
 801ce6e:	2900      	cmp	r1, #0
 801ce70:	f000 8081 	beq.w	801cf76 <_strtod_l+0x91e>
 801ce74:	ea02 010b 	and.w	r1, r2, fp
 801ce78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ce7c:	dc7b      	bgt.n	801cf76 <_strtod_l+0x91e>
 801ce7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ce82:	f77f aea9 	ble.w	801cbd8 <_strtod_l+0x580>
 801ce86:	4b4d      	ldr	r3, [pc, #308]	; (801cfbc <_strtod_l+0x964>)
 801ce88:	4650      	mov	r0, sl
 801ce8a:	4659      	mov	r1, fp
 801ce8c:	2200      	movs	r2, #0
 801ce8e:	f7e3 fbb3 	bl	80005f8 <__aeabi_dmul>
 801ce92:	460b      	mov	r3, r1
 801ce94:	4303      	orrs	r3, r0
 801ce96:	bf08      	it	eq
 801ce98:	2322      	moveq	r3, #34	; 0x22
 801ce9a:	4682      	mov	sl, r0
 801ce9c:	468b      	mov	fp, r1
 801ce9e:	bf08      	it	eq
 801cea0:	6023      	streq	r3, [r4, #0]
 801cea2:	e62b      	b.n	801cafc <_strtod_l+0x4a4>
 801cea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cea8:	fa02 f303 	lsl.w	r3, r2, r3
 801ceac:	ea03 0a0a 	and.w	sl, r3, sl
 801ceb0:	e6e3      	b.n	801cc7a <_strtod_l+0x622>
 801ceb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ceb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ceba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801cebe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801cec2:	fa01 f308 	lsl.w	r3, r1, r8
 801cec6:	9308      	str	r3, [sp, #32]
 801cec8:	910d      	str	r1, [sp, #52]	; 0x34
 801ceca:	e746      	b.n	801cd5a <_strtod_l+0x702>
 801cecc:	2300      	movs	r3, #0
 801cece:	9308      	str	r3, [sp, #32]
 801ced0:	2301      	movs	r3, #1
 801ced2:	930d      	str	r3, [sp, #52]	; 0x34
 801ced4:	e741      	b.n	801cd5a <_strtod_l+0x702>
 801ced6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ced8:	4642      	mov	r2, r8
 801ceda:	4620      	mov	r0, r4
 801cedc:	f001 ffba 	bl	801ee54 <__lshift>
 801cee0:	9018      	str	r0, [sp, #96]	; 0x60
 801cee2:	2800      	cmp	r0, #0
 801cee4:	f47f af6b 	bne.w	801cdbe <_strtod_l+0x766>
 801cee8:	e5fe      	b.n	801cae8 <_strtod_l+0x490>
 801ceea:	465f      	mov	r7, fp
 801ceec:	d16e      	bne.n	801cfcc <_strtod_l+0x974>
 801ceee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cef4:	b342      	cbz	r2, 801cf48 <_strtod_l+0x8f0>
 801cef6:	4a32      	ldr	r2, [pc, #200]	; (801cfc0 <_strtod_l+0x968>)
 801cef8:	4293      	cmp	r3, r2
 801cefa:	d128      	bne.n	801cf4e <_strtod_l+0x8f6>
 801cefc:	9b04      	ldr	r3, [sp, #16]
 801cefe:	4651      	mov	r1, sl
 801cf00:	b1eb      	cbz	r3, 801cf3e <_strtod_l+0x8e6>
 801cf02:	4b2d      	ldr	r3, [pc, #180]	; (801cfb8 <_strtod_l+0x960>)
 801cf04:	403b      	ands	r3, r7
 801cf06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cf0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cf0e:	d819      	bhi.n	801cf44 <_strtod_l+0x8ec>
 801cf10:	0d1b      	lsrs	r3, r3, #20
 801cf12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cf16:	fa02 f303 	lsl.w	r3, r2, r3
 801cf1a:	4299      	cmp	r1, r3
 801cf1c:	d117      	bne.n	801cf4e <_strtod_l+0x8f6>
 801cf1e:	4b29      	ldr	r3, [pc, #164]	; (801cfc4 <_strtod_l+0x96c>)
 801cf20:	429f      	cmp	r7, r3
 801cf22:	d102      	bne.n	801cf2a <_strtod_l+0x8d2>
 801cf24:	3101      	adds	r1, #1
 801cf26:	f43f addf 	beq.w	801cae8 <_strtod_l+0x490>
 801cf2a:	4b23      	ldr	r3, [pc, #140]	; (801cfb8 <_strtod_l+0x960>)
 801cf2c:	403b      	ands	r3, r7
 801cf2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801cf32:	f04f 0a00 	mov.w	sl, #0
 801cf36:	9b04      	ldr	r3, [sp, #16]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d1a4      	bne.n	801ce86 <_strtod_l+0x82e>
 801cf3c:	e5de      	b.n	801cafc <_strtod_l+0x4a4>
 801cf3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cf42:	e7ea      	b.n	801cf1a <_strtod_l+0x8c2>
 801cf44:	4613      	mov	r3, r2
 801cf46:	e7e8      	b.n	801cf1a <_strtod_l+0x8c2>
 801cf48:	ea53 030a 	orrs.w	r3, r3, sl
 801cf4c:	d08c      	beq.n	801ce68 <_strtod_l+0x810>
 801cf4e:	9b08      	ldr	r3, [sp, #32]
 801cf50:	b1db      	cbz	r3, 801cf8a <_strtod_l+0x932>
 801cf52:	423b      	tst	r3, r7
 801cf54:	d0ef      	beq.n	801cf36 <_strtod_l+0x8de>
 801cf56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf58:	9a04      	ldr	r2, [sp, #16]
 801cf5a:	4650      	mov	r0, sl
 801cf5c:	4659      	mov	r1, fp
 801cf5e:	b1c3      	cbz	r3, 801cf92 <_strtod_l+0x93a>
 801cf60:	f7ff fb5d 	bl	801c61e <sulp>
 801cf64:	4602      	mov	r2, r0
 801cf66:	460b      	mov	r3, r1
 801cf68:	ec51 0b18 	vmov	r0, r1, d8
 801cf6c:	f7e3 f98e 	bl	800028c <__adddf3>
 801cf70:	4682      	mov	sl, r0
 801cf72:	468b      	mov	fp, r1
 801cf74:	e7df      	b.n	801cf36 <_strtod_l+0x8de>
 801cf76:	4013      	ands	r3, r2
 801cf78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cf7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cf80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cf84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801cf88:	e7d5      	b.n	801cf36 <_strtod_l+0x8de>
 801cf8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf8c:	ea13 0f0a 	tst.w	r3, sl
 801cf90:	e7e0      	b.n	801cf54 <_strtod_l+0x8fc>
 801cf92:	f7ff fb44 	bl	801c61e <sulp>
 801cf96:	4602      	mov	r2, r0
 801cf98:	460b      	mov	r3, r1
 801cf9a:	ec51 0b18 	vmov	r0, r1, d8
 801cf9e:	f7e3 f973 	bl	8000288 <__aeabi_dsub>
 801cfa2:	2200      	movs	r2, #0
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	4682      	mov	sl, r0
 801cfa8:	468b      	mov	fp, r1
 801cfaa:	f7e3 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 801cfae:	2800      	cmp	r0, #0
 801cfb0:	d0c1      	beq.n	801cf36 <_strtod_l+0x8de>
 801cfb2:	e611      	b.n	801cbd8 <_strtod_l+0x580>
 801cfb4:	fffffc02 	.word	0xfffffc02
 801cfb8:	7ff00000 	.word	0x7ff00000
 801cfbc:	39500000 	.word	0x39500000
 801cfc0:	000fffff 	.word	0x000fffff
 801cfc4:	7fefffff 	.word	0x7fefffff
 801cfc8:	08022f48 	.word	0x08022f48
 801cfcc:	4631      	mov	r1, r6
 801cfce:	4628      	mov	r0, r5
 801cfd0:	f002 f92e 	bl	801f230 <__ratio>
 801cfd4:	ec59 8b10 	vmov	r8, r9, d0
 801cfd8:	ee10 0a10 	vmov	r0, s0
 801cfdc:	2200      	movs	r2, #0
 801cfde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cfe2:	4649      	mov	r1, r9
 801cfe4:	f7e3 fd84 	bl	8000af0 <__aeabi_dcmple>
 801cfe8:	2800      	cmp	r0, #0
 801cfea:	d07a      	beq.n	801d0e2 <_strtod_l+0xa8a>
 801cfec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d04a      	beq.n	801d088 <_strtod_l+0xa30>
 801cff2:	4b95      	ldr	r3, [pc, #596]	; (801d248 <_strtod_l+0xbf0>)
 801cff4:	2200      	movs	r2, #0
 801cff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cffa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801d248 <_strtod_l+0xbf0>
 801cffe:	f04f 0800 	mov.w	r8, #0
 801d002:	4b92      	ldr	r3, [pc, #584]	; (801d24c <_strtod_l+0xbf4>)
 801d004:	403b      	ands	r3, r7
 801d006:	930d      	str	r3, [sp, #52]	; 0x34
 801d008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d00a:	4b91      	ldr	r3, [pc, #580]	; (801d250 <_strtod_l+0xbf8>)
 801d00c:	429a      	cmp	r2, r3
 801d00e:	f040 80b0 	bne.w	801d172 <_strtod_l+0xb1a>
 801d012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d016:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801d01a:	ec4b ab10 	vmov	d0, sl, fp
 801d01e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d022:	f002 f82d 	bl	801f080 <__ulp>
 801d026:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d02a:	ec53 2b10 	vmov	r2, r3, d0
 801d02e:	f7e3 fae3 	bl	80005f8 <__aeabi_dmul>
 801d032:	4652      	mov	r2, sl
 801d034:	465b      	mov	r3, fp
 801d036:	f7e3 f929 	bl	800028c <__adddf3>
 801d03a:	460b      	mov	r3, r1
 801d03c:	4983      	ldr	r1, [pc, #524]	; (801d24c <_strtod_l+0xbf4>)
 801d03e:	4a85      	ldr	r2, [pc, #532]	; (801d254 <_strtod_l+0xbfc>)
 801d040:	4019      	ands	r1, r3
 801d042:	4291      	cmp	r1, r2
 801d044:	4682      	mov	sl, r0
 801d046:	d960      	bls.n	801d10a <_strtod_l+0xab2>
 801d048:	ee18 3a90 	vmov	r3, s17
 801d04c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d050:	4293      	cmp	r3, r2
 801d052:	d104      	bne.n	801d05e <_strtod_l+0xa06>
 801d054:	ee18 3a10 	vmov	r3, s16
 801d058:	3301      	adds	r3, #1
 801d05a:	f43f ad45 	beq.w	801cae8 <_strtod_l+0x490>
 801d05e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801d260 <_strtod_l+0xc08>
 801d062:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801d066:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d068:	4620      	mov	r0, r4
 801d06a:	f001 fcd7 	bl	801ea1c <_Bfree>
 801d06e:	9905      	ldr	r1, [sp, #20]
 801d070:	4620      	mov	r0, r4
 801d072:	f001 fcd3 	bl	801ea1c <_Bfree>
 801d076:	4631      	mov	r1, r6
 801d078:	4620      	mov	r0, r4
 801d07a:	f001 fccf 	bl	801ea1c <_Bfree>
 801d07e:	4629      	mov	r1, r5
 801d080:	4620      	mov	r0, r4
 801d082:	f001 fccb 	bl	801ea1c <_Bfree>
 801d086:	e61a      	b.n	801ccbe <_strtod_l+0x666>
 801d088:	f1ba 0f00 	cmp.w	sl, #0
 801d08c:	d11b      	bne.n	801d0c6 <_strtod_l+0xa6e>
 801d08e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d092:	b9f3      	cbnz	r3, 801d0d2 <_strtod_l+0xa7a>
 801d094:	4b6c      	ldr	r3, [pc, #432]	; (801d248 <_strtod_l+0xbf0>)
 801d096:	2200      	movs	r2, #0
 801d098:	4640      	mov	r0, r8
 801d09a:	4649      	mov	r1, r9
 801d09c:	f7e3 fd1e 	bl	8000adc <__aeabi_dcmplt>
 801d0a0:	b9d0      	cbnz	r0, 801d0d8 <_strtod_l+0xa80>
 801d0a2:	4640      	mov	r0, r8
 801d0a4:	4649      	mov	r1, r9
 801d0a6:	4b6c      	ldr	r3, [pc, #432]	; (801d258 <_strtod_l+0xc00>)
 801d0a8:	2200      	movs	r2, #0
 801d0aa:	f7e3 faa5 	bl	80005f8 <__aeabi_dmul>
 801d0ae:	4680      	mov	r8, r0
 801d0b0:	4689      	mov	r9, r1
 801d0b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d0b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801d0ba:	9315      	str	r3, [sp, #84]	; 0x54
 801d0bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d0c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d0c4:	e79d      	b.n	801d002 <_strtod_l+0x9aa>
 801d0c6:	f1ba 0f01 	cmp.w	sl, #1
 801d0ca:	d102      	bne.n	801d0d2 <_strtod_l+0xa7a>
 801d0cc:	2f00      	cmp	r7, #0
 801d0ce:	f43f ad83 	beq.w	801cbd8 <_strtod_l+0x580>
 801d0d2:	4b62      	ldr	r3, [pc, #392]	; (801d25c <_strtod_l+0xc04>)
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	e78e      	b.n	801cff6 <_strtod_l+0x99e>
 801d0d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801d258 <_strtod_l+0xc00>
 801d0dc:	f04f 0800 	mov.w	r8, #0
 801d0e0:	e7e7      	b.n	801d0b2 <_strtod_l+0xa5a>
 801d0e2:	4b5d      	ldr	r3, [pc, #372]	; (801d258 <_strtod_l+0xc00>)
 801d0e4:	4640      	mov	r0, r8
 801d0e6:	4649      	mov	r1, r9
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	f7e3 fa85 	bl	80005f8 <__aeabi_dmul>
 801d0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0f0:	4680      	mov	r8, r0
 801d0f2:	4689      	mov	r9, r1
 801d0f4:	b933      	cbnz	r3, 801d104 <_strtod_l+0xaac>
 801d0f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d0fa:	900e      	str	r0, [sp, #56]	; 0x38
 801d0fc:	930f      	str	r3, [sp, #60]	; 0x3c
 801d0fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d102:	e7dd      	b.n	801d0c0 <_strtod_l+0xa68>
 801d104:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801d108:	e7f9      	b.n	801d0fe <_strtod_l+0xaa6>
 801d10a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801d10e:	9b04      	ldr	r3, [sp, #16]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d1a8      	bne.n	801d066 <_strtod_l+0xa0e>
 801d114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d11a:	0d1b      	lsrs	r3, r3, #20
 801d11c:	051b      	lsls	r3, r3, #20
 801d11e:	429a      	cmp	r2, r3
 801d120:	d1a1      	bne.n	801d066 <_strtod_l+0xa0e>
 801d122:	4640      	mov	r0, r8
 801d124:	4649      	mov	r1, r9
 801d126:	f7e3 fdc7 	bl	8000cb8 <__aeabi_d2lz>
 801d12a:	f7e3 fa37 	bl	800059c <__aeabi_l2d>
 801d12e:	4602      	mov	r2, r0
 801d130:	460b      	mov	r3, r1
 801d132:	4640      	mov	r0, r8
 801d134:	4649      	mov	r1, r9
 801d136:	f7e3 f8a7 	bl	8000288 <__aeabi_dsub>
 801d13a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d13c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d140:	ea43 030a 	orr.w	r3, r3, sl
 801d144:	4313      	orrs	r3, r2
 801d146:	4680      	mov	r8, r0
 801d148:	4689      	mov	r9, r1
 801d14a:	d055      	beq.n	801d1f8 <_strtod_l+0xba0>
 801d14c:	a336      	add	r3, pc, #216	; (adr r3, 801d228 <_strtod_l+0xbd0>)
 801d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d152:	f7e3 fcc3 	bl	8000adc <__aeabi_dcmplt>
 801d156:	2800      	cmp	r0, #0
 801d158:	f47f acd0 	bne.w	801cafc <_strtod_l+0x4a4>
 801d15c:	a334      	add	r3, pc, #208	; (adr r3, 801d230 <_strtod_l+0xbd8>)
 801d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d162:	4640      	mov	r0, r8
 801d164:	4649      	mov	r1, r9
 801d166:	f7e3 fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 801d16a:	2800      	cmp	r0, #0
 801d16c:	f43f af7b 	beq.w	801d066 <_strtod_l+0xa0e>
 801d170:	e4c4      	b.n	801cafc <_strtod_l+0x4a4>
 801d172:	9b04      	ldr	r3, [sp, #16]
 801d174:	b333      	cbz	r3, 801d1c4 <_strtod_l+0xb6c>
 801d176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d178:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d17c:	d822      	bhi.n	801d1c4 <_strtod_l+0xb6c>
 801d17e:	a32e      	add	r3, pc, #184	; (adr r3, 801d238 <_strtod_l+0xbe0>)
 801d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d184:	4640      	mov	r0, r8
 801d186:	4649      	mov	r1, r9
 801d188:	f7e3 fcb2 	bl	8000af0 <__aeabi_dcmple>
 801d18c:	b1a0      	cbz	r0, 801d1b8 <_strtod_l+0xb60>
 801d18e:	4649      	mov	r1, r9
 801d190:	4640      	mov	r0, r8
 801d192:	f7e3 fd09 	bl	8000ba8 <__aeabi_d2uiz>
 801d196:	2801      	cmp	r0, #1
 801d198:	bf38      	it	cc
 801d19a:	2001      	movcc	r0, #1
 801d19c:	f7e3 f9b2 	bl	8000504 <__aeabi_ui2d>
 801d1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1a2:	4680      	mov	r8, r0
 801d1a4:	4689      	mov	r9, r1
 801d1a6:	bb23      	cbnz	r3, 801d1f2 <_strtod_l+0xb9a>
 801d1a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d1ac:	9010      	str	r0, [sp, #64]	; 0x40
 801d1ae:	9311      	str	r3, [sp, #68]	; 0x44
 801d1b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d1b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d1bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d1c0:	1a9b      	subs	r3, r3, r2
 801d1c2:	9309      	str	r3, [sp, #36]	; 0x24
 801d1c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d1c8:	eeb0 0a48 	vmov.f32	s0, s16
 801d1cc:	eef0 0a68 	vmov.f32	s1, s17
 801d1d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d1d4:	f001 ff54 	bl	801f080 <__ulp>
 801d1d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d1dc:	ec53 2b10 	vmov	r2, r3, d0
 801d1e0:	f7e3 fa0a 	bl	80005f8 <__aeabi_dmul>
 801d1e4:	ec53 2b18 	vmov	r2, r3, d8
 801d1e8:	f7e3 f850 	bl	800028c <__adddf3>
 801d1ec:	4682      	mov	sl, r0
 801d1ee:	468b      	mov	fp, r1
 801d1f0:	e78d      	b.n	801d10e <_strtod_l+0xab6>
 801d1f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801d1f6:	e7db      	b.n	801d1b0 <_strtod_l+0xb58>
 801d1f8:	a311      	add	r3, pc, #68	; (adr r3, 801d240 <_strtod_l+0xbe8>)
 801d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1fe:	f7e3 fc6d 	bl	8000adc <__aeabi_dcmplt>
 801d202:	e7b2      	b.n	801d16a <_strtod_l+0xb12>
 801d204:	2300      	movs	r3, #0
 801d206:	930a      	str	r3, [sp, #40]	; 0x28
 801d208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d20a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d20c:	6013      	str	r3, [r2, #0]
 801d20e:	f7ff ba6b 	b.w	801c6e8 <_strtod_l+0x90>
 801d212:	2a65      	cmp	r2, #101	; 0x65
 801d214:	f43f ab5f 	beq.w	801c8d6 <_strtod_l+0x27e>
 801d218:	2a45      	cmp	r2, #69	; 0x45
 801d21a:	f43f ab5c 	beq.w	801c8d6 <_strtod_l+0x27e>
 801d21e:	2301      	movs	r3, #1
 801d220:	f7ff bb94 	b.w	801c94c <_strtod_l+0x2f4>
 801d224:	f3af 8000 	nop.w
 801d228:	94a03595 	.word	0x94a03595
 801d22c:	3fdfffff 	.word	0x3fdfffff
 801d230:	35afe535 	.word	0x35afe535
 801d234:	3fe00000 	.word	0x3fe00000
 801d238:	ffc00000 	.word	0xffc00000
 801d23c:	41dfffff 	.word	0x41dfffff
 801d240:	94a03595 	.word	0x94a03595
 801d244:	3fcfffff 	.word	0x3fcfffff
 801d248:	3ff00000 	.word	0x3ff00000
 801d24c:	7ff00000 	.word	0x7ff00000
 801d250:	7fe00000 	.word	0x7fe00000
 801d254:	7c9fffff 	.word	0x7c9fffff
 801d258:	3fe00000 	.word	0x3fe00000
 801d25c:	bff00000 	.word	0xbff00000
 801d260:	7fefffff 	.word	0x7fefffff

0801d264 <_strtod_r>:
 801d264:	4b01      	ldr	r3, [pc, #4]	; (801d26c <_strtod_r+0x8>)
 801d266:	f7ff b9f7 	b.w	801c658 <_strtod_l>
 801d26a:	bf00      	nop
 801d26c:	20000178 	.word	0x20000178

0801d270 <_strtol_l.constprop.0>:
 801d270:	2b01      	cmp	r3, #1
 801d272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d276:	d001      	beq.n	801d27c <_strtol_l.constprop.0+0xc>
 801d278:	2b24      	cmp	r3, #36	; 0x24
 801d27a:	d906      	bls.n	801d28a <_strtol_l.constprop.0+0x1a>
 801d27c:	f000 ff1a 	bl	801e0b4 <__errno>
 801d280:	2316      	movs	r3, #22
 801d282:	6003      	str	r3, [r0, #0]
 801d284:	2000      	movs	r0, #0
 801d286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d28a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801d370 <_strtol_l.constprop.0+0x100>
 801d28e:	460d      	mov	r5, r1
 801d290:	462e      	mov	r6, r5
 801d292:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d296:	f814 700c 	ldrb.w	r7, [r4, ip]
 801d29a:	f017 0708 	ands.w	r7, r7, #8
 801d29e:	d1f7      	bne.n	801d290 <_strtol_l.constprop.0+0x20>
 801d2a0:	2c2d      	cmp	r4, #45	; 0x2d
 801d2a2:	d132      	bne.n	801d30a <_strtol_l.constprop.0+0x9a>
 801d2a4:	782c      	ldrb	r4, [r5, #0]
 801d2a6:	2701      	movs	r7, #1
 801d2a8:	1cb5      	adds	r5, r6, #2
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d05b      	beq.n	801d366 <_strtol_l.constprop.0+0xf6>
 801d2ae:	2b10      	cmp	r3, #16
 801d2b0:	d109      	bne.n	801d2c6 <_strtol_l.constprop.0+0x56>
 801d2b2:	2c30      	cmp	r4, #48	; 0x30
 801d2b4:	d107      	bne.n	801d2c6 <_strtol_l.constprop.0+0x56>
 801d2b6:	782c      	ldrb	r4, [r5, #0]
 801d2b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d2bc:	2c58      	cmp	r4, #88	; 0x58
 801d2be:	d14d      	bne.n	801d35c <_strtol_l.constprop.0+0xec>
 801d2c0:	786c      	ldrb	r4, [r5, #1]
 801d2c2:	2310      	movs	r3, #16
 801d2c4:	3502      	adds	r5, #2
 801d2c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d2ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801d2ce:	f04f 0c00 	mov.w	ip, #0
 801d2d2:	fbb8 f9f3 	udiv	r9, r8, r3
 801d2d6:	4666      	mov	r6, ip
 801d2d8:	fb03 8a19 	mls	sl, r3, r9, r8
 801d2dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801d2e0:	f1be 0f09 	cmp.w	lr, #9
 801d2e4:	d816      	bhi.n	801d314 <_strtol_l.constprop.0+0xa4>
 801d2e6:	4674      	mov	r4, lr
 801d2e8:	42a3      	cmp	r3, r4
 801d2ea:	dd24      	ble.n	801d336 <_strtol_l.constprop.0+0xc6>
 801d2ec:	f1bc 0f00 	cmp.w	ip, #0
 801d2f0:	db1e      	blt.n	801d330 <_strtol_l.constprop.0+0xc0>
 801d2f2:	45b1      	cmp	r9, r6
 801d2f4:	d31c      	bcc.n	801d330 <_strtol_l.constprop.0+0xc0>
 801d2f6:	d101      	bne.n	801d2fc <_strtol_l.constprop.0+0x8c>
 801d2f8:	45a2      	cmp	sl, r4
 801d2fa:	db19      	blt.n	801d330 <_strtol_l.constprop.0+0xc0>
 801d2fc:	fb06 4603 	mla	r6, r6, r3, r4
 801d300:	f04f 0c01 	mov.w	ip, #1
 801d304:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d308:	e7e8      	b.n	801d2dc <_strtol_l.constprop.0+0x6c>
 801d30a:	2c2b      	cmp	r4, #43	; 0x2b
 801d30c:	bf04      	itt	eq
 801d30e:	782c      	ldrbeq	r4, [r5, #0]
 801d310:	1cb5      	addeq	r5, r6, #2
 801d312:	e7ca      	b.n	801d2aa <_strtol_l.constprop.0+0x3a>
 801d314:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801d318:	f1be 0f19 	cmp.w	lr, #25
 801d31c:	d801      	bhi.n	801d322 <_strtol_l.constprop.0+0xb2>
 801d31e:	3c37      	subs	r4, #55	; 0x37
 801d320:	e7e2      	b.n	801d2e8 <_strtol_l.constprop.0+0x78>
 801d322:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801d326:	f1be 0f19 	cmp.w	lr, #25
 801d32a:	d804      	bhi.n	801d336 <_strtol_l.constprop.0+0xc6>
 801d32c:	3c57      	subs	r4, #87	; 0x57
 801d32e:	e7db      	b.n	801d2e8 <_strtol_l.constprop.0+0x78>
 801d330:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801d334:	e7e6      	b.n	801d304 <_strtol_l.constprop.0+0x94>
 801d336:	f1bc 0f00 	cmp.w	ip, #0
 801d33a:	da05      	bge.n	801d348 <_strtol_l.constprop.0+0xd8>
 801d33c:	2322      	movs	r3, #34	; 0x22
 801d33e:	6003      	str	r3, [r0, #0]
 801d340:	4646      	mov	r6, r8
 801d342:	b942      	cbnz	r2, 801d356 <_strtol_l.constprop.0+0xe6>
 801d344:	4630      	mov	r0, r6
 801d346:	e79e      	b.n	801d286 <_strtol_l.constprop.0+0x16>
 801d348:	b107      	cbz	r7, 801d34c <_strtol_l.constprop.0+0xdc>
 801d34a:	4276      	negs	r6, r6
 801d34c:	2a00      	cmp	r2, #0
 801d34e:	d0f9      	beq.n	801d344 <_strtol_l.constprop.0+0xd4>
 801d350:	f1bc 0f00 	cmp.w	ip, #0
 801d354:	d000      	beq.n	801d358 <_strtol_l.constprop.0+0xe8>
 801d356:	1e69      	subs	r1, r5, #1
 801d358:	6011      	str	r1, [r2, #0]
 801d35a:	e7f3      	b.n	801d344 <_strtol_l.constprop.0+0xd4>
 801d35c:	2430      	movs	r4, #48	; 0x30
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d1b1      	bne.n	801d2c6 <_strtol_l.constprop.0+0x56>
 801d362:	2308      	movs	r3, #8
 801d364:	e7af      	b.n	801d2c6 <_strtol_l.constprop.0+0x56>
 801d366:	2c30      	cmp	r4, #48	; 0x30
 801d368:	d0a5      	beq.n	801d2b6 <_strtol_l.constprop.0+0x46>
 801d36a:	230a      	movs	r3, #10
 801d36c:	e7ab      	b.n	801d2c6 <_strtol_l.constprop.0+0x56>
 801d36e:	bf00      	nop
 801d370:	08022f71 	.word	0x08022f71

0801d374 <_strtol_r>:
 801d374:	f7ff bf7c 	b.w	801d270 <_strtol_l.constprop.0>

0801d378 <_write_r>:
 801d378:	b538      	push	{r3, r4, r5, lr}
 801d37a:	4d07      	ldr	r5, [pc, #28]	; (801d398 <_write_r+0x20>)
 801d37c:	4604      	mov	r4, r0
 801d37e:	4608      	mov	r0, r1
 801d380:	4611      	mov	r1, r2
 801d382:	2200      	movs	r2, #0
 801d384:	602a      	str	r2, [r5, #0]
 801d386:	461a      	mov	r2, r3
 801d388:	f005 f9ae 	bl	80226e8 <_write>
 801d38c:	1c43      	adds	r3, r0, #1
 801d38e:	d102      	bne.n	801d396 <_write_r+0x1e>
 801d390:	682b      	ldr	r3, [r5, #0]
 801d392:	b103      	cbz	r3, 801d396 <_write_r+0x1e>
 801d394:	6023      	str	r3, [r4, #0]
 801d396:	bd38      	pop	{r3, r4, r5, pc}
 801d398:	2000f198 	.word	0x2000f198

0801d39c <_close_r>:
 801d39c:	b538      	push	{r3, r4, r5, lr}
 801d39e:	4d06      	ldr	r5, [pc, #24]	; (801d3b8 <_close_r+0x1c>)
 801d3a0:	2300      	movs	r3, #0
 801d3a2:	4604      	mov	r4, r0
 801d3a4:	4608      	mov	r0, r1
 801d3a6:	602b      	str	r3, [r5, #0]
 801d3a8:	f005 f958 	bl	802265c <_close>
 801d3ac:	1c43      	adds	r3, r0, #1
 801d3ae:	d102      	bne.n	801d3b6 <_close_r+0x1a>
 801d3b0:	682b      	ldr	r3, [r5, #0]
 801d3b2:	b103      	cbz	r3, 801d3b6 <_close_r+0x1a>
 801d3b4:	6023      	str	r3, [r4, #0]
 801d3b6:	bd38      	pop	{r3, r4, r5, pc}
 801d3b8:	2000f198 	.word	0x2000f198

0801d3bc <quorem>:
 801d3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3c0:	6903      	ldr	r3, [r0, #16]
 801d3c2:	690c      	ldr	r4, [r1, #16]
 801d3c4:	42a3      	cmp	r3, r4
 801d3c6:	4607      	mov	r7, r0
 801d3c8:	f2c0 8081 	blt.w	801d4ce <quorem+0x112>
 801d3cc:	3c01      	subs	r4, #1
 801d3ce:	f101 0814 	add.w	r8, r1, #20
 801d3d2:	f100 0514 	add.w	r5, r0, #20
 801d3d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d3da:	9301      	str	r3, [sp, #4]
 801d3dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d3e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d3e4:	3301      	adds	r3, #1
 801d3e6:	429a      	cmp	r2, r3
 801d3e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d3ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d3f0:	fbb2 f6f3 	udiv	r6, r2, r3
 801d3f4:	d331      	bcc.n	801d45a <quorem+0x9e>
 801d3f6:	f04f 0e00 	mov.w	lr, #0
 801d3fa:	4640      	mov	r0, r8
 801d3fc:	46ac      	mov	ip, r5
 801d3fe:	46f2      	mov	sl, lr
 801d400:	f850 2b04 	ldr.w	r2, [r0], #4
 801d404:	b293      	uxth	r3, r2
 801d406:	fb06 e303 	mla	r3, r6, r3, lr
 801d40a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d40e:	b29b      	uxth	r3, r3
 801d410:	ebaa 0303 	sub.w	r3, sl, r3
 801d414:	f8dc a000 	ldr.w	sl, [ip]
 801d418:	0c12      	lsrs	r2, r2, #16
 801d41a:	fa13 f38a 	uxtah	r3, r3, sl
 801d41e:	fb06 e202 	mla	r2, r6, r2, lr
 801d422:	9300      	str	r3, [sp, #0]
 801d424:	9b00      	ldr	r3, [sp, #0]
 801d426:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d42a:	b292      	uxth	r2, r2
 801d42c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d434:	f8bd 3000 	ldrh.w	r3, [sp]
 801d438:	4581      	cmp	r9, r0
 801d43a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d43e:	f84c 3b04 	str.w	r3, [ip], #4
 801d442:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d446:	d2db      	bcs.n	801d400 <quorem+0x44>
 801d448:	f855 300b 	ldr.w	r3, [r5, fp]
 801d44c:	b92b      	cbnz	r3, 801d45a <quorem+0x9e>
 801d44e:	9b01      	ldr	r3, [sp, #4]
 801d450:	3b04      	subs	r3, #4
 801d452:	429d      	cmp	r5, r3
 801d454:	461a      	mov	r2, r3
 801d456:	d32e      	bcc.n	801d4b6 <quorem+0xfa>
 801d458:	613c      	str	r4, [r7, #16]
 801d45a:	4638      	mov	r0, r7
 801d45c:	f001 fd6a 	bl	801ef34 <__mcmp>
 801d460:	2800      	cmp	r0, #0
 801d462:	db24      	blt.n	801d4ae <quorem+0xf2>
 801d464:	3601      	adds	r6, #1
 801d466:	4628      	mov	r0, r5
 801d468:	f04f 0c00 	mov.w	ip, #0
 801d46c:	f858 2b04 	ldr.w	r2, [r8], #4
 801d470:	f8d0 e000 	ldr.w	lr, [r0]
 801d474:	b293      	uxth	r3, r2
 801d476:	ebac 0303 	sub.w	r3, ip, r3
 801d47a:	0c12      	lsrs	r2, r2, #16
 801d47c:	fa13 f38e 	uxtah	r3, r3, lr
 801d480:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d488:	b29b      	uxth	r3, r3
 801d48a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d48e:	45c1      	cmp	r9, r8
 801d490:	f840 3b04 	str.w	r3, [r0], #4
 801d494:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d498:	d2e8      	bcs.n	801d46c <quorem+0xb0>
 801d49a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d49e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d4a2:	b922      	cbnz	r2, 801d4ae <quorem+0xf2>
 801d4a4:	3b04      	subs	r3, #4
 801d4a6:	429d      	cmp	r5, r3
 801d4a8:	461a      	mov	r2, r3
 801d4aa:	d30a      	bcc.n	801d4c2 <quorem+0x106>
 801d4ac:	613c      	str	r4, [r7, #16]
 801d4ae:	4630      	mov	r0, r6
 801d4b0:	b003      	add	sp, #12
 801d4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4b6:	6812      	ldr	r2, [r2, #0]
 801d4b8:	3b04      	subs	r3, #4
 801d4ba:	2a00      	cmp	r2, #0
 801d4bc:	d1cc      	bne.n	801d458 <quorem+0x9c>
 801d4be:	3c01      	subs	r4, #1
 801d4c0:	e7c7      	b.n	801d452 <quorem+0x96>
 801d4c2:	6812      	ldr	r2, [r2, #0]
 801d4c4:	3b04      	subs	r3, #4
 801d4c6:	2a00      	cmp	r2, #0
 801d4c8:	d1f0      	bne.n	801d4ac <quorem+0xf0>
 801d4ca:	3c01      	subs	r4, #1
 801d4cc:	e7eb      	b.n	801d4a6 <quorem+0xea>
 801d4ce:	2000      	movs	r0, #0
 801d4d0:	e7ee      	b.n	801d4b0 <quorem+0xf4>
 801d4d2:	0000      	movs	r0, r0
 801d4d4:	0000      	movs	r0, r0
	...

0801d4d8 <_dtoa_r>:
 801d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4dc:	ed2d 8b04 	vpush	{d8-d9}
 801d4e0:	ec57 6b10 	vmov	r6, r7, d0
 801d4e4:	b093      	sub	sp, #76	; 0x4c
 801d4e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d4e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d4ec:	9106      	str	r1, [sp, #24]
 801d4ee:	ee10 aa10 	vmov	sl, s0
 801d4f2:	4604      	mov	r4, r0
 801d4f4:	9209      	str	r2, [sp, #36]	; 0x24
 801d4f6:	930c      	str	r3, [sp, #48]	; 0x30
 801d4f8:	46bb      	mov	fp, r7
 801d4fa:	b975      	cbnz	r5, 801d51a <_dtoa_r+0x42>
 801d4fc:	2010      	movs	r0, #16
 801d4fe:	f001 fa27 	bl	801e950 <malloc>
 801d502:	4602      	mov	r2, r0
 801d504:	6260      	str	r0, [r4, #36]	; 0x24
 801d506:	b920      	cbnz	r0, 801d512 <_dtoa_r+0x3a>
 801d508:	4ba7      	ldr	r3, [pc, #668]	; (801d7a8 <_dtoa_r+0x2d0>)
 801d50a:	21ea      	movs	r1, #234	; 0xea
 801d50c:	48a7      	ldr	r0, [pc, #668]	; (801d7ac <_dtoa_r+0x2d4>)
 801d50e:	f002 f901 	bl	801f714 <__assert_func>
 801d512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d516:	6005      	str	r5, [r0, #0]
 801d518:	60c5      	str	r5, [r0, #12]
 801d51a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d51c:	6819      	ldr	r1, [r3, #0]
 801d51e:	b151      	cbz	r1, 801d536 <_dtoa_r+0x5e>
 801d520:	685a      	ldr	r2, [r3, #4]
 801d522:	604a      	str	r2, [r1, #4]
 801d524:	2301      	movs	r3, #1
 801d526:	4093      	lsls	r3, r2
 801d528:	608b      	str	r3, [r1, #8]
 801d52a:	4620      	mov	r0, r4
 801d52c:	f001 fa76 	bl	801ea1c <_Bfree>
 801d530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d532:	2200      	movs	r2, #0
 801d534:	601a      	str	r2, [r3, #0]
 801d536:	1e3b      	subs	r3, r7, #0
 801d538:	bfaa      	itet	ge
 801d53a:	2300      	movge	r3, #0
 801d53c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d540:	f8c8 3000 	strge.w	r3, [r8]
 801d544:	4b9a      	ldr	r3, [pc, #616]	; (801d7b0 <_dtoa_r+0x2d8>)
 801d546:	bfbc      	itt	lt
 801d548:	2201      	movlt	r2, #1
 801d54a:	f8c8 2000 	strlt.w	r2, [r8]
 801d54e:	ea33 030b 	bics.w	r3, r3, fp
 801d552:	d11b      	bne.n	801d58c <_dtoa_r+0xb4>
 801d554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d556:	f242 730f 	movw	r3, #9999	; 0x270f
 801d55a:	6013      	str	r3, [r2, #0]
 801d55c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d560:	4333      	orrs	r3, r6
 801d562:	f000 8592 	beq.w	801e08a <_dtoa_r+0xbb2>
 801d566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d568:	b963      	cbnz	r3, 801d584 <_dtoa_r+0xac>
 801d56a:	4b92      	ldr	r3, [pc, #584]	; (801d7b4 <_dtoa_r+0x2dc>)
 801d56c:	e022      	b.n	801d5b4 <_dtoa_r+0xdc>
 801d56e:	4b92      	ldr	r3, [pc, #584]	; (801d7b8 <_dtoa_r+0x2e0>)
 801d570:	9301      	str	r3, [sp, #4]
 801d572:	3308      	adds	r3, #8
 801d574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d576:	6013      	str	r3, [r2, #0]
 801d578:	9801      	ldr	r0, [sp, #4]
 801d57a:	b013      	add	sp, #76	; 0x4c
 801d57c:	ecbd 8b04 	vpop	{d8-d9}
 801d580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d584:	4b8b      	ldr	r3, [pc, #556]	; (801d7b4 <_dtoa_r+0x2dc>)
 801d586:	9301      	str	r3, [sp, #4]
 801d588:	3303      	adds	r3, #3
 801d58a:	e7f3      	b.n	801d574 <_dtoa_r+0x9c>
 801d58c:	2200      	movs	r2, #0
 801d58e:	2300      	movs	r3, #0
 801d590:	4650      	mov	r0, sl
 801d592:	4659      	mov	r1, fp
 801d594:	f7e3 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 801d598:	ec4b ab19 	vmov	d9, sl, fp
 801d59c:	4680      	mov	r8, r0
 801d59e:	b158      	cbz	r0, 801d5b8 <_dtoa_r+0xe0>
 801d5a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d5a2:	2301      	movs	r3, #1
 801d5a4:	6013      	str	r3, [r2, #0]
 801d5a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	f000 856b 	beq.w	801e084 <_dtoa_r+0xbac>
 801d5ae:	4883      	ldr	r0, [pc, #524]	; (801d7bc <_dtoa_r+0x2e4>)
 801d5b0:	6018      	str	r0, [r3, #0]
 801d5b2:	1e43      	subs	r3, r0, #1
 801d5b4:	9301      	str	r3, [sp, #4]
 801d5b6:	e7df      	b.n	801d578 <_dtoa_r+0xa0>
 801d5b8:	ec4b ab10 	vmov	d0, sl, fp
 801d5bc:	aa10      	add	r2, sp, #64	; 0x40
 801d5be:	a911      	add	r1, sp, #68	; 0x44
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f001 fdd9 	bl	801f178 <__d2b>
 801d5c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d5ca:	ee08 0a10 	vmov	s16, r0
 801d5ce:	2d00      	cmp	r5, #0
 801d5d0:	f000 8084 	beq.w	801d6dc <_dtoa_r+0x204>
 801d5d4:	ee19 3a90 	vmov	r3, s19
 801d5d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d5dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d5e0:	4656      	mov	r6, sl
 801d5e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d5e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d5ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d5ee:	4b74      	ldr	r3, [pc, #464]	; (801d7c0 <_dtoa_r+0x2e8>)
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	4630      	mov	r0, r6
 801d5f4:	4639      	mov	r1, r7
 801d5f6:	f7e2 fe47 	bl	8000288 <__aeabi_dsub>
 801d5fa:	a365      	add	r3, pc, #404	; (adr r3, 801d790 <_dtoa_r+0x2b8>)
 801d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d600:	f7e2 fffa 	bl	80005f8 <__aeabi_dmul>
 801d604:	a364      	add	r3, pc, #400	; (adr r3, 801d798 <_dtoa_r+0x2c0>)
 801d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d60a:	f7e2 fe3f 	bl	800028c <__adddf3>
 801d60e:	4606      	mov	r6, r0
 801d610:	4628      	mov	r0, r5
 801d612:	460f      	mov	r7, r1
 801d614:	f7e2 ff86 	bl	8000524 <__aeabi_i2d>
 801d618:	a361      	add	r3, pc, #388	; (adr r3, 801d7a0 <_dtoa_r+0x2c8>)
 801d61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d61e:	f7e2 ffeb 	bl	80005f8 <__aeabi_dmul>
 801d622:	4602      	mov	r2, r0
 801d624:	460b      	mov	r3, r1
 801d626:	4630      	mov	r0, r6
 801d628:	4639      	mov	r1, r7
 801d62a:	f7e2 fe2f 	bl	800028c <__adddf3>
 801d62e:	4606      	mov	r6, r0
 801d630:	460f      	mov	r7, r1
 801d632:	f7e3 fa91 	bl	8000b58 <__aeabi_d2iz>
 801d636:	2200      	movs	r2, #0
 801d638:	9000      	str	r0, [sp, #0]
 801d63a:	2300      	movs	r3, #0
 801d63c:	4630      	mov	r0, r6
 801d63e:	4639      	mov	r1, r7
 801d640:	f7e3 fa4c 	bl	8000adc <__aeabi_dcmplt>
 801d644:	b150      	cbz	r0, 801d65c <_dtoa_r+0x184>
 801d646:	9800      	ldr	r0, [sp, #0]
 801d648:	f7e2 ff6c 	bl	8000524 <__aeabi_i2d>
 801d64c:	4632      	mov	r2, r6
 801d64e:	463b      	mov	r3, r7
 801d650:	f7e3 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d654:	b910      	cbnz	r0, 801d65c <_dtoa_r+0x184>
 801d656:	9b00      	ldr	r3, [sp, #0]
 801d658:	3b01      	subs	r3, #1
 801d65a:	9300      	str	r3, [sp, #0]
 801d65c:	9b00      	ldr	r3, [sp, #0]
 801d65e:	2b16      	cmp	r3, #22
 801d660:	d85a      	bhi.n	801d718 <_dtoa_r+0x240>
 801d662:	9a00      	ldr	r2, [sp, #0]
 801d664:	4b57      	ldr	r3, [pc, #348]	; (801d7c4 <_dtoa_r+0x2ec>)
 801d666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d66e:	ec51 0b19 	vmov	r0, r1, d9
 801d672:	f7e3 fa33 	bl	8000adc <__aeabi_dcmplt>
 801d676:	2800      	cmp	r0, #0
 801d678:	d050      	beq.n	801d71c <_dtoa_r+0x244>
 801d67a:	9b00      	ldr	r3, [sp, #0]
 801d67c:	3b01      	subs	r3, #1
 801d67e:	9300      	str	r3, [sp, #0]
 801d680:	2300      	movs	r3, #0
 801d682:	930b      	str	r3, [sp, #44]	; 0x2c
 801d684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d686:	1b5d      	subs	r5, r3, r5
 801d688:	1e6b      	subs	r3, r5, #1
 801d68a:	9305      	str	r3, [sp, #20]
 801d68c:	bf45      	ittet	mi
 801d68e:	f1c5 0301 	rsbmi	r3, r5, #1
 801d692:	9304      	strmi	r3, [sp, #16]
 801d694:	2300      	movpl	r3, #0
 801d696:	2300      	movmi	r3, #0
 801d698:	bf4c      	ite	mi
 801d69a:	9305      	strmi	r3, [sp, #20]
 801d69c:	9304      	strpl	r3, [sp, #16]
 801d69e:	9b00      	ldr	r3, [sp, #0]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	db3d      	blt.n	801d720 <_dtoa_r+0x248>
 801d6a4:	9b05      	ldr	r3, [sp, #20]
 801d6a6:	9a00      	ldr	r2, [sp, #0]
 801d6a8:	920a      	str	r2, [sp, #40]	; 0x28
 801d6aa:	4413      	add	r3, r2
 801d6ac:	9305      	str	r3, [sp, #20]
 801d6ae:	2300      	movs	r3, #0
 801d6b0:	9307      	str	r3, [sp, #28]
 801d6b2:	9b06      	ldr	r3, [sp, #24]
 801d6b4:	2b09      	cmp	r3, #9
 801d6b6:	f200 8089 	bhi.w	801d7cc <_dtoa_r+0x2f4>
 801d6ba:	2b05      	cmp	r3, #5
 801d6bc:	bfc4      	itt	gt
 801d6be:	3b04      	subgt	r3, #4
 801d6c0:	9306      	strgt	r3, [sp, #24]
 801d6c2:	9b06      	ldr	r3, [sp, #24]
 801d6c4:	f1a3 0302 	sub.w	r3, r3, #2
 801d6c8:	bfcc      	ite	gt
 801d6ca:	2500      	movgt	r5, #0
 801d6cc:	2501      	movle	r5, #1
 801d6ce:	2b03      	cmp	r3, #3
 801d6d0:	f200 8087 	bhi.w	801d7e2 <_dtoa_r+0x30a>
 801d6d4:	e8df f003 	tbb	[pc, r3]
 801d6d8:	59383a2d 	.word	0x59383a2d
 801d6dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d6e0:	441d      	add	r5, r3
 801d6e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d6e6:	2b20      	cmp	r3, #32
 801d6e8:	bfc1      	itttt	gt
 801d6ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d6ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d6f2:	fa0b f303 	lslgt.w	r3, fp, r3
 801d6f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d6fa:	bfda      	itte	le
 801d6fc:	f1c3 0320 	rsble	r3, r3, #32
 801d700:	fa06 f003 	lslle.w	r0, r6, r3
 801d704:	4318      	orrgt	r0, r3
 801d706:	f7e2 fefd 	bl	8000504 <__aeabi_ui2d>
 801d70a:	2301      	movs	r3, #1
 801d70c:	4606      	mov	r6, r0
 801d70e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d712:	3d01      	subs	r5, #1
 801d714:	930e      	str	r3, [sp, #56]	; 0x38
 801d716:	e76a      	b.n	801d5ee <_dtoa_r+0x116>
 801d718:	2301      	movs	r3, #1
 801d71a:	e7b2      	b.n	801d682 <_dtoa_r+0x1aa>
 801d71c:	900b      	str	r0, [sp, #44]	; 0x2c
 801d71e:	e7b1      	b.n	801d684 <_dtoa_r+0x1ac>
 801d720:	9b04      	ldr	r3, [sp, #16]
 801d722:	9a00      	ldr	r2, [sp, #0]
 801d724:	1a9b      	subs	r3, r3, r2
 801d726:	9304      	str	r3, [sp, #16]
 801d728:	4253      	negs	r3, r2
 801d72a:	9307      	str	r3, [sp, #28]
 801d72c:	2300      	movs	r3, #0
 801d72e:	930a      	str	r3, [sp, #40]	; 0x28
 801d730:	e7bf      	b.n	801d6b2 <_dtoa_r+0x1da>
 801d732:	2300      	movs	r3, #0
 801d734:	9308      	str	r3, [sp, #32]
 801d736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d738:	2b00      	cmp	r3, #0
 801d73a:	dc55      	bgt.n	801d7e8 <_dtoa_r+0x310>
 801d73c:	2301      	movs	r3, #1
 801d73e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d742:	461a      	mov	r2, r3
 801d744:	9209      	str	r2, [sp, #36]	; 0x24
 801d746:	e00c      	b.n	801d762 <_dtoa_r+0x28a>
 801d748:	2301      	movs	r3, #1
 801d74a:	e7f3      	b.n	801d734 <_dtoa_r+0x25c>
 801d74c:	2300      	movs	r3, #0
 801d74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d750:	9308      	str	r3, [sp, #32]
 801d752:	9b00      	ldr	r3, [sp, #0]
 801d754:	4413      	add	r3, r2
 801d756:	9302      	str	r3, [sp, #8]
 801d758:	3301      	adds	r3, #1
 801d75a:	2b01      	cmp	r3, #1
 801d75c:	9303      	str	r3, [sp, #12]
 801d75e:	bfb8      	it	lt
 801d760:	2301      	movlt	r3, #1
 801d762:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d764:	2200      	movs	r2, #0
 801d766:	6042      	str	r2, [r0, #4]
 801d768:	2204      	movs	r2, #4
 801d76a:	f102 0614 	add.w	r6, r2, #20
 801d76e:	429e      	cmp	r6, r3
 801d770:	6841      	ldr	r1, [r0, #4]
 801d772:	d93d      	bls.n	801d7f0 <_dtoa_r+0x318>
 801d774:	4620      	mov	r0, r4
 801d776:	f001 f911 	bl	801e99c <_Balloc>
 801d77a:	9001      	str	r0, [sp, #4]
 801d77c:	2800      	cmp	r0, #0
 801d77e:	d13b      	bne.n	801d7f8 <_dtoa_r+0x320>
 801d780:	4b11      	ldr	r3, [pc, #68]	; (801d7c8 <_dtoa_r+0x2f0>)
 801d782:	4602      	mov	r2, r0
 801d784:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d788:	e6c0      	b.n	801d50c <_dtoa_r+0x34>
 801d78a:	2301      	movs	r3, #1
 801d78c:	e7df      	b.n	801d74e <_dtoa_r+0x276>
 801d78e:	bf00      	nop
 801d790:	636f4361 	.word	0x636f4361
 801d794:	3fd287a7 	.word	0x3fd287a7
 801d798:	8b60c8b3 	.word	0x8b60c8b3
 801d79c:	3fc68a28 	.word	0x3fc68a28
 801d7a0:	509f79fb 	.word	0x509f79fb
 801d7a4:	3fd34413 	.word	0x3fd34413
 801d7a8:	0802307e 	.word	0x0802307e
 801d7ac:	08023095 	.word	0x08023095
 801d7b0:	7ff00000 	.word	0x7ff00000
 801d7b4:	0802307a 	.word	0x0802307a
 801d7b8:	08023071 	.word	0x08023071
 801d7bc:	08022ef1 	.word	0x08022ef1
 801d7c0:	3ff80000 	.word	0x3ff80000
 801d7c4:	08023200 	.word	0x08023200
 801d7c8:	080230f0 	.word	0x080230f0
 801d7cc:	2501      	movs	r5, #1
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	9306      	str	r3, [sp, #24]
 801d7d2:	9508      	str	r5, [sp, #32]
 801d7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d7dc:	2200      	movs	r2, #0
 801d7de:	2312      	movs	r3, #18
 801d7e0:	e7b0      	b.n	801d744 <_dtoa_r+0x26c>
 801d7e2:	2301      	movs	r3, #1
 801d7e4:	9308      	str	r3, [sp, #32]
 801d7e6:	e7f5      	b.n	801d7d4 <_dtoa_r+0x2fc>
 801d7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d7ee:	e7b8      	b.n	801d762 <_dtoa_r+0x28a>
 801d7f0:	3101      	adds	r1, #1
 801d7f2:	6041      	str	r1, [r0, #4]
 801d7f4:	0052      	lsls	r2, r2, #1
 801d7f6:	e7b8      	b.n	801d76a <_dtoa_r+0x292>
 801d7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7fa:	9a01      	ldr	r2, [sp, #4]
 801d7fc:	601a      	str	r2, [r3, #0]
 801d7fe:	9b03      	ldr	r3, [sp, #12]
 801d800:	2b0e      	cmp	r3, #14
 801d802:	f200 809d 	bhi.w	801d940 <_dtoa_r+0x468>
 801d806:	2d00      	cmp	r5, #0
 801d808:	f000 809a 	beq.w	801d940 <_dtoa_r+0x468>
 801d80c:	9b00      	ldr	r3, [sp, #0]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	dd32      	ble.n	801d878 <_dtoa_r+0x3a0>
 801d812:	4ab7      	ldr	r2, [pc, #732]	; (801daf0 <_dtoa_r+0x618>)
 801d814:	f003 030f 	and.w	r3, r3, #15
 801d818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d81c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d820:	9b00      	ldr	r3, [sp, #0]
 801d822:	05d8      	lsls	r0, r3, #23
 801d824:	ea4f 1723 	mov.w	r7, r3, asr #4
 801d828:	d516      	bpl.n	801d858 <_dtoa_r+0x380>
 801d82a:	4bb2      	ldr	r3, [pc, #712]	; (801daf4 <_dtoa_r+0x61c>)
 801d82c:	ec51 0b19 	vmov	r0, r1, d9
 801d830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d834:	f7e3 f80a 	bl	800084c <__aeabi_ddiv>
 801d838:	f007 070f 	and.w	r7, r7, #15
 801d83c:	4682      	mov	sl, r0
 801d83e:	468b      	mov	fp, r1
 801d840:	2503      	movs	r5, #3
 801d842:	4eac      	ldr	r6, [pc, #688]	; (801daf4 <_dtoa_r+0x61c>)
 801d844:	b957      	cbnz	r7, 801d85c <_dtoa_r+0x384>
 801d846:	4642      	mov	r2, r8
 801d848:	464b      	mov	r3, r9
 801d84a:	4650      	mov	r0, sl
 801d84c:	4659      	mov	r1, fp
 801d84e:	f7e2 fffd 	bl	800084c <__aeabi_ddiv>
 801d852:	4682      	mov	sl, r0
 801d854:	468b      	mov	fp, r1
 801d856:	e028      	b.n	801d8aa <_dtoa_r+0x3d2>
 801d858:	2502      	movs	r5, #2
 801d85a:	e7f2      	b.n	801d842 <_dtoa_r+0x36a>
 801d85c:	07f9      	lsls	r1, r7, #31
 801d85e:	d508      	bpl.n	801d872 <_dtoa_r+0x39a>
 801d860:	4640      	mov	r0, r8
 801d862:	4649      	mov	r1, r9
 801d864:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d868:	f7e2 fec6 	bl	80005f8 <__aeabi_dmul>
 801d86c:	3501      	adds	r5, #1
 801d86e:	4680      	mov	r8, r0
 801d870:	4689      	mov	r9, r1
 801d872:	107f      	asrs	r7, r7, #1
 801d874:	3608      	adds	r6, #8
 801d876:	e7e5      	b.n	801d844 <_dtoa_r+0x36c>
 801d878:	f000 809b 	beq.w	801d9b2 <_dtoa_r+0x4da>
 801d87c:	9b00      	ldr	r3, [sp, #0]
 801d87e:	4f9d      	ldr	r7, [pc, #628]	; (801daf4 <_dtoa_r+0x61c>)
 801d880:	425e      	negs	r6, r3
 801d882:	4b9b      	ldr	r3, [pc, #620]	; (801daf0 <_dtoa_r+0x618>)
 801d884:	f006 020f 	and.w	r2, r6, #15
 801d888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d890:	ec51 0b19 	vmov	r0, r1, d9
 801d894:	f7e2 feb0 	bl	80005f8 <__aeabi_dmul>
 801d898:	1136      	asrs	r6, r6, #4
 801d89a:	4682      	mov	sl, r0
 801d89c:	468b      	mov	fp, r1
 801d89e:	2300      	movs	r3, #0
 801d8a0:	2502      	movs	r5, #2
 801d8a2:	2e00      	cmp	r6, #0
 801d8a4:	d17a      	bne.n	801d99c <_dtoa_r+0x4c4>
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d1d3      	bne.n	801d852 <_dtoa_r+0x37a>
 801d8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	f000 8082 	beq.w	801d9b6 <_dtoa_r+0x4de>
 801d8b2:	4b91      	ldr	r3, [pc, #580]	; (801daf8 <_dtoa_r+0x620>)
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	4650      	mov	r0, sl
 801d8b8:	4659      	mov	r1, fp
 801d8ba:	f7e3 f90f 	bl	8000adc <__aeabi_dcmplt>
 801d8be:	2800      	cmp	r0, #0
 801d8c0:	d079      	beq.n	801d9b6 <_dtoa_r+0x4de>
 801d8c2:	9b03      	ldr	r3, [sp, #12]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d076      	beq.n	801d9b6 <_dtoa_r+0x4de>
 801d8c8:	9b02      	ldr	r3, [sp, #8]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	dd36      	ble.n	801d93c <_dtoa_r+0x464>
 801d8ce:	9b00      	ldr	r3, [sp, #0]
 801d8d0:	4650      	mov	r0, sl
 801d8d2:	4659      	mov	r1, fp
 801d8d4:	1e5f      	subs	r7, r3, #1
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	4b88      	ldr	r3, [pc, #544]	; (801dafc <_dtoa_r+0x624>)
 801d8da:	f7e2 fe8d 	bl	80005f8 <__aeabi_dmul>
 801d8de:	9e02      	ldr	r6, [sp, #8]
 801d8e0:	4682      	mov	sl, r0
 801d8e2:	468b      	mov	fp, r1
 801d8e4:	3501      	adds	r5, #1
 801d8e6:	4628      	mov	r0, r5
 801d8e8:	f7e2 fe1c 	bl	8000524 <__aeabi_i2d>
 801d8ec:	4652      	mov	r2, sl
 801d8ee:	465b      	mov	r3, fp
 801d8f0:	f7e2 fe82 	bl	80005f8 <__aeabi_dmul>
 801d8f4:	4b82      	ldr	r3, [pc, #520]	; (801db00 <_dtoa_r+0x628>)
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	f7e2 fcc8 	bl	800028c <__adddf3>
 801d8fc:	46d0      	mov	r8, sl
 801d8fe:	46d9      	mov	r9, fp
 801d900:	4682      	mov	sl, r0
 801d902:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801d906:	2e00      	cmp	r6, #0
 801d908:	d158      	bne.n	801d9bc <_dtoa_r+0x4e4>
 801d90a:	4b7e      	ldr	r3, [pc, #504]	; (801db04 <_dtoa_r+0x62c>)
 801d90c:	2200      	movs	r2, #0
 801d90e:	4640      	mov	r0, r8
 801d910:	4649      	mov	r1, r9
 801d912:	f7e2 fcb9 	bl	8000288 <__aeabi_dsub>
 801d916:	4652      	mov	r2, sl
 801d918:	465b      	mov	r3, fp
 801d91a:	4680      	mov	r8, r0
 801d91c:	4689      	mov	r9, r1
 801d91e:	f7e3 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 801d922:	2800      	cmp	r0, #0
 801d924:	f040 8295 	bne.w	801de52 <_dtoa_r+0x97a>
 801d928:	4652      	mov	r2, sl
 801d92a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d92e:	4640      	mov	r0, r8
 801d930:	4649      	mov	r1, r9
 801d932:	f7e3 f8d3 	bl	8000adc <__aeabi_dcmplt>
 801d936:	2800      	cmp	r0, #0
 801d938:	f040 8289 	bne.w	801de4e <_dtoa_r+0x976>
 801d93c:	ec5b ab19 	vmov	sl, fp, d9
 801d940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d942:	2b00      	cmp	r3, #0
 801d944:	f2c0 8148 	blt.w	801dbd8 <_dtoa_r+0x700>
 801d948:	9a00      	ldr	r2, [sp, #0]
 801d94a:	2a0e      	cmp	r2, #14
 801d94c:	f300 8144 	bgt.w	801dbd8 <_dtoa_r+0x700>
 801d950:	4b67      	ldr	r3, [pc, #412]	; (801daf0 <_dtoa_r+0x618>)
 801d952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d956:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	f280 80d5 	bge.w	801db0c <_dtoa_r+0x634>
 801d962:	9b03      	ldr	r3, [sp, #12]
 801d964:	2b00      	cmp	r3, #0
 801d966:	f300 80d1 	bgt.w	801db0c <_dtoa_r+0x634>
 801d96a:	f040 826f 	bne.w	801de4c <_dtoa_r+0x974>
 801d96e:	4b65      	ldr	r3, [pc, #404]	; (801db04 <_dtoa_r+0x62c>)
 801d970:	2200      	movs	r2, #0
 801d972:	4640      	mov	r0, r8
 801d974:	4649      	mov	r1, r9
 801d976:	f7e2 fe3f 	bl	80005f8 <__aeabi_dmul>
 801d97a:	4652      	mov	r2, sl
 801d97c:	465b      	mov	r3, fp
 801d97e:	f7e3 f8c1 	bl	8000b04 <__aeabi_dcmpge>
 801d982:	9e03      	ldr	r6, [sp, #12]
 801d984:	4637      	mov	r7, r6
 801d986:	2800      	cmp	r0, #0
 801d988:	f040 8245 	bne.w	801de16 <_dtoa_r+0x93e>
 801d98c:	9d01      	ldr	r5, [sp, #4]
 801d98e:	2331      	movs	r3, #49	; 0x31
 801d990:	f805 3b01 	strb.w	r3, [r5], #1
 801d994:	9b00      	ldr	r3, [sp, #0]
 801d996:	3301      	adds	r3, #1
 801d998:	9300      	str	r3, [sp, #0]
 801d99a:	e240      	b.n	801de1e <_dtoa_r+0x946>
 801d99c:	07f2      	lsls	r2, r6, #31
 801d99e:	d505      	bpl.n	801d9ac <_dtoa_r+0x4d4>
 801d9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d9a4:	f7e2 fe28 	bl	80005f8 <__aeabi_dmul>
 801d9a8:	3501      	adds	r5, #1
 801d9aa:	2301      	movs	r3, #1
 801d9ac:	1076      	asrs	r6, r6, #1
 801d9ae:	3708      	adds	r7, #8
 801d9b0:	e777      	b.n	801d8a2 <_dtoa_r+0x3ca>
 801d9b2:	2502      	movs	r5, #2
 801d9b4:	e779      	b.n	801d8aa <_dtoa_r+0x3d2>
 801d9b6:	9f00      	ldr	r7, [sp, #0]
 801d9b8:	9e03      	ldr	r6, [sp, #12]
 801d9ba:	e794      	b.n	801d8e6 <_dtoa_r+0x40e>
 801d9bc:	9901      	ldr	r1, [sp, #4]
 801d9be:	4b4c      	ldr	r3, [pc, #304]	; (801daf0 <_dtoa_r+0x618>)
 801d9c0:	4431      	add	r1, r6
 801d9c2:	910d      	str	r1, [sp, #52]	; 0x34
 801d9c4:	9908      	ldr	r1, [sp, #32]
 801d9c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d9ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d9ce:	2900      	cmp	r1, #0
 801d9d0:	d043      	beq.n	801da5a <_dtoa_r+0x582>
 801d9d2:	494d      	ldr	r1, [pc, #308]	; (801db08 <_dtoa_r+0x630>)
 801d9d4:	2000      	movs	r0, #0
 801d9d6:	f7e2 ff39 	bl	800084c <__aeabi_ddiv>
 801d9da:	4652      	mov	r2, sl
 801d9dc:	465b      	mov	r3, fp
 801d9de:	f7e2 fc53 	bl	8000288 <__aeabi_dsub>
 801d9e2:	9d01      	ldr	r5, [sp, #4]
 801d9e4:	4682      	mov	sl, r0
 801d9e6:	468b      	mov	fp, r1
 801d9e8:	4649      	mov	r1, r9
 801d9ea:	4640      	mov	r0, r8
 801d9ec:	f7e3 f8b4 	bl	8000b58 <__aeabi_d2iz>
 801d9f0:	4606      	mov	r6, r0
 801d9f2:	f7e2 fd97 	bl	8000524 <__aeabi_i2d>
 801d9f6:	4602      	mov	r2, r0
 801d9f8:	460b      	mov	r3, r1
 801d9fa:	4640      	mov	r0, r8
 801d9fc:	4649      	mov	r1, r9
 801d9fe:	f7e2 fc43 	bl	8000288 <__aeabi_dsub>
 801da02:	3630      	adds	r6, #48	; 0x30
 801da04:	f805 6b01 	strb.w	r6, [r5], #1
 801da08:	4652      	mov	r2, sl
 801da0a:	465b      	mov	r3, fp
 801da0c:	4680      	mov	r8, r0
 801da0e:	4689      	mov	r9, r1
 801da10:	f7e3 f864 	bl	8000adc <__aeabi_dcmplt>
 801da14:	2800      	cmp	r0, #0
 801da16:	d163      	bne.n	801dae0 <_dtoa_r+0x608>
 801da18:	4642      	mov	r2, r8
 801da1a:	464b      	mov	r3, r9
 801da1c:	4936      	ldr	r1, [pc, #216]	; (801daf8 <_dtoa_r+0x620>)
 801da1e:	2000      	movs	r0, #0
 801da20:	f7e2 fc32 	bl	8000288 <__aeabi_dsub>
 801da24:	4652      	mov	r2, sl
 801da26:	465b      	mov	r3, fp
 801da28:	f7e3 f858 	bl	8000adc <__aeabi_dcmplt>
 801da2c:	2800      	cmp	r0, #0
 801da2e:	f040 80b5 	bne.w	801db9c <_dtoa_r+0x6c4>
 801da32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da34:	429d      	cmp	r5, r3
 801da36:	d081      	beq.n	801d93c <_dtoa_r+0x464>
 801da38:	4b30      	ldr	r3, [pc, #192]	; (801dafc <_dtoa_r+0x624>)
 801da3a:	2200      	movs	r2, #0
 801da3c:	4650      	mov	r0, sl
 801da3e:	4659      	mov	r1, fp
 801da40:	f7e2 fdda 	bl	80005f8 <__aeabi_dmul>
 801da44:	4b2d      	ldr	r3, [pc, #180]	; (801dafc <_dtoa_r+0x624>)
 801da46:	4682      	mov	sl, r0
 801da48:	468b      	mov	fp, r1
 801da4a:	4640      	mov	r0, r8
 801da4c:	4649      	mov	r1, r9
 801da4e:	2200      	movs	r2, #0
 801da50:	f7e2 fdd2 	bl	80005f8 <__aeabi_dmul>
 801da54:	4680      	mov	r8, r0
 801da56:	4689      	mov	r9, r1
 801da58:	e7c6      	b.n	801d9e8 <_dtoa_r+0x510>
 801da5a:	4650      	mov	r0, sl
 801da5c:	4659      	mov	r1, fp
 801da5e:	f7e2 fdcb 	bl	80005f8 <__aeabi_dmul>
 801da62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da64:	9d01      	ldr	r5, [sp, #4]
 801da66:	930f      	str	r3, [sp, #60]	; 0x3c
 801da68:	4682      	mov	sl, r0
 801da6a:	468b      	mov	fp, r1
 801da6c:	4649      	mov	r1, r9
 801da6e:	4640      	mov	r0, r8
 801da70:	f7e3 f872 	bl	8000b58 <__aeabi_d2iz>
 801da74:	4606      	mov	r6, r0
 801da76:	f7e2 fd55 	bl	8000524 <__aeabi_i2d>
 801da7a:	3630      	adds	r6, #48	; 0x30
 801da7c:	4602      	mov	r2, r0
 801da7e:	460b      	mov	r3, r1
 801da80:	4640      	mov	r0, r8
 801da82:	4649      	mov	r1, r9
 801da84:	f7e2 fc00 	bl	8000288 <__aeabi_dsub>
 801da88:	f805 6b01 	strb.w	r6, [r5], #1
 801da8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da8e:	429d      	cmp	r5, r3
 801da90:	4680      	mov	r8, r0
 801da92:	4689      	mov	r9, r1
 801da94:	f04f 0200 	mov.w	r2, #0
 801da98:	d124      	bne.n	801dae4 <_dtoa_r+0x60c>
 801da9a:	4b1b      	ldr	r3, [pc, #108]	; (801db08 <_dtoa_r+0x630>)
 801da9c:	4650      	mov	r0, sl
 801da9e:	4659      	mov	r1, fp
 801daa0:	f7e2 fbf4 	bl	800028c <__adddf3>
 801daa4:	4602      	mov	r2, r0
 801daa6:	460b      	mov	r3, r1
 801daa8:	4640      	mov	r0, r8
 801daaa:	4649      	mov	r1, r9
 801daac:	f7e3 f834 	bl	8000b18 <__aeabi_dcmpgt>
 801dab0:	2800      	cmp	r0, #0
 801dab2:	d173      	bne.n	801db9c <_dtoa_r+0x6c4>
 801dab4:	4652      	mov	r2, sl
 801dab6:	465b      	mov	r3, fp
 801dab8:	4913      	ldr	r1, [pc, #76]	; (801db08 <_dtoa_r+0x630>)
 801daba:	2000      	movs	r0, #0
 801dabc:	f7e2 fbe4 	bl	8000288 <__aeabi_dsub>
 801dac0:	4602      	mov	r2, r0
 801dac2:	460b      	mov	r3, r1
 801dac4:	4640      	mov	r0, r8
 801dac6:	4649      	mov	r1, r9
 801dac8:	f7e3 f808 	bl	8000adc <__aeabi_dcmplt>
 801dacc:	2800      	cmp	r0, #0
 801dace:	f43f af35 	beq.w	801d93c <_dtoa_r+0x464>
 801dad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dad4:	1e6b      	subs	r3, r5, #1
 801dad6:	930f      	str	r3, [sp, #60]	; 0x3c
 801dad8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dadc:	2b30      	cmp	r3, #48	; 0x30
 801dade:	d0f8      	beq.n	801dad2 <_dtoa_r+0x5fa>
 801dae0:	9700      	str	r7, [sp, #0]
 801dae2:	e049      	b.n	801db78 <_dtoa_r+0x6a0>
 801dae4:	4b05      	ldr	r3, [pc, #20]	; (801dafc <_dtoa_r+0x624>)
 801dae6:	f7e2 fd87 	bl	80005f8 <__aeabi_dmul>
 801daea:	4680      	mov	r8, r0
 801daec:	4689      	mov	r9, r1
 801daee:	e7bd      	b.n	801da6c <_dtoa_r+0x594>
 801daf0:	08023200 	.word	0x08023200
 801daf4:	080231d8 	.word	0x080231d8
 801daf8:	3ff00000 	.word	0x3ff00000
 801dafc:	40240000 	.word	0x40240000
 801db00:	401c0000 	.word	0x401c0000
 801db04:	40140000 	.word	0x40140000
 801db08:	3fe00000 	.word	0x3fe00000
 801db0c:	9d01      	ldr	r5, [sp, #4]
 801db0e:	4656      	mov	r6, sl
 801db10:	465f      	mov	r7, fp
 801db12:	4642      	mov	r2, r8
 801db14:	464b      	mov	r3, r9
 801db16:	4630      	mov	r0, r6
 801db18:	4639      	mov	r1, r7
 801db1a:	f7e2 fe97 	bl	800084c <__aeabi_ddiv>
 801db1e:	f7e3 f81b 	bl	8000b58 <__aeabi_d2iz>
 801db22:	4682      	mov	sl, r0
 801db24:	f7e2 fcfe 	bl	8000524 <__aeabi_i2d>
 801db28:	4642      	mov	r2, r8
 801db2a:	464b      	mov	r3, r9
 801db2c:	f7e2 fd64 	bl	80005f8 <__aeabi_dmul>
 801db30:	4602      	mov	r2, r0
 801db32:	460b      	mov	r3, r1
 801db34:	4630      	mov	r0, r6
 801db36:	4639      	mov	r1, r7
 801db38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801db3c:	f7e2 fba4 	bl	8000288 <__aeabi_dsub>
 801db40:	f805 6b01 	strb.w	r6, [r5], #1
 801db44:	9e01      	ldr	r6, [sp, #4]
 801db46:	9f03      	ldr	r7, [sp, #12]
 801db48:	1bae      	subs	r6, r5, r6
 801db4a:	42b7      	cmp	r7, r6
 801db4c:	4602      	mov	r2, r0
 801db4e:	460b      	mov	r3, r1
 801db50:	d135      	bne.n	801dbbe <_dtoa_r+0x6e6>
 801db52:	f7e2 fb9b 	bl	800028c <__adddf3>
 801db56:	4642      	mov	r2, r8
 801db58:	464b      	mov	r3, r9
 801db5a:	4606      	mov	r6, r0
 801db5c:	460f      	mov	r7, r1
 801db5e:	f7e2 ffdb 	bl	8000b18 <__aeabi_dcmpgt>
 801db62:	b9d0      	cbnz	r0, 801db9a <_dtoa_r+0x6c2>
 801db64:	4642      	mov	r2, r8
 801db66:	464b      	mov	r3, r9
 801db68:	4630      	mov	r0, r6
 801db6a:	4639      	mov	r1, r7
 801db6c:	f7e2 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 801db70:	b110      	cbz	r0, 801db78 <_dtoa_r+0x6a0>
 801db72:	f01a 0f01 	tst.w	sl, #1
 801db76:	d110      	bne.n	801db9a <_dtoa_r+0x6c2>
 801db78:	4620      	mov	r0, r4
 801db7a:	ee18 1a10 	vmov	r1, s16
 801db7e:	f000 ff4d 	bl	801ea1c <_Bfree>
 801db82:	2300      	movs	r3, #0
 801db84:	9800      	ldr	r0, [sp, #0]
 801db86:	702b      	strb	r3, [r5, #0]
 801db88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db8a:	3001      	adds	r0, #1
 801db8c:	6018      	str	r0, [r3, #0]
 801db8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db90:	2b00      	cmp	r3, #0
 801db92:	f43f acf1 	beq.w	801d578 <_dtoa_r+0xa0>
 801db96:	601d      	str	r5, [r3, #0]
 801db98:	e4ee      	b.n	801d578 <_dtoa_r+0xa0>
 801db9a:	9f00      	ldr	r7, [sp, #0]
 801db9c:	462b      	mov	r3, r5
 801db9e:	461d      	mov	r5, r3
 801dba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dba4:	2a39      	cmp	r2, #57	; 0x39
 801dba6:	d106      	bne.n	801dbb6 <_dtoa_r+0x6de>
 801dba8:	9a01      	ldr	r2, [sp, #4]
 801dbaa:	429a      	cmp	r2, r3
 801dbac:	d1f7      	bne.n	801db9e <_dtoa_r+0x6c6>
 801dbae:	9901      	ldr	r1, [sp, #4]
 801dbb0:	2230      	movs	r2, #48	; 0x30
 801dbb2:	3701      	adds	r7, #1
 801dbb4:	700a      	strb	r2, [r1, #0]
 801dbb6:	781a      	ldrb	r2, [r3, #0]
 801dbb8:	3201      	adds	r2, #1
 801dbba:	701a      	strb	r2, [r3, #0]
 801dbbc:	e790      	b.n	801dae0 <_dtoa_r+0x608>
 801dbbe:	4ba6      	ldr	r3, [pc, #664]	; (801de58 <_dtoa_r+0x980>)
 801dbc0:	2200      	movs	r2, #0
 801dbc2:	f7e2 fd19 	bl	80005f8 <__aeabi_dmul>
 801dbc6:	2200      	movs	r2, #0
 801dbc8:	2300      	movs	r3, #0
 801dbca:	4606      	mov	r6, r0
 801dbcc:	460f      	mov	r7, r1
 801dbce:	f7e2 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 801dbd2:	2800      	cmp	r0, #0
 801dbd4:	d09d      	beq.n	801db12 <_dtoa_r+0x63a>
 801dbd6:	e7cf      	b.n	801db78 <_dtoa_r+0x6a0>
 801dbd8:	9a08      	ldr	r2, [sp, #32]
 801dbda:	2a00      	cmp	r2, #0
 801dbdc:	f000 80d7 	beq.w	801dd8e <_dtoa_r+0x8b6>
 801dbe0:	9a06      	ldr	r2, [sp, #24]
 801dbe2:	2a01      	cmp	r2, #1
 801dbe4:	f300 80ba 	bgt.w	801dd5c <_dtoa_r+0x884>
 801dbe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dbea:	2a00      	cmp	r2, #0
 801dbec:	f000 80b2 	beq.w	801dd54 <_dtoa_r+0x87c>
 801dbf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801dbf4:	9e07      	ldr	r6, [sp, #28]
 801dbf6:	9d04      	ldr	r5, [sp, #16]
 801dbf8:	9a04      	ldr	r2, [sp, #16]
 801dbfa:	441a      	add	r2, r3
 801dbfc:	9204      	str	r2, [sp, #16]
 801dbfe:	9a05      	ldr	r2, [sp, #20]
 801dc00:	2101      	movs	r1, #1
 801dc02:	441a      	add	r2, r3
 801dc04:	4620      	mov	r0, r4
 801dc06:	9205      	str	r2, [sp, #20]
 801dc08:	f001 f80a 	bl	801ec20 <__i2b>
 801dc0c:	4607      	mov	r7, r0
 801dc0e:	2d00      	cmp	r5, #0
 801dc10:	dd0c      	ble.n	801dc2c <_dtoa_r+0x754>
 801dc12:	9b05      	ldr	r3, [sp, #20]
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	dd09      	ble.n	801dc2c <_dtoa_r+0x754>
 801dc18:	42ab      	cmp	r3, r5
 801dc1a:	9a04      	ldr	r2, [sp, #16]
 801dc1c:	bfa8      	it	ge
 801dc1e:	462b      	movge	r3, r5
 801dc20:	1ad2      	subs	r2, r2, r3
 801dc22:	9204      	str	r2, [sp, #16]
 801dc24:	9a05      	ldr	r2, [sp, #20]
 801dc26:	1aed      	subs	r5, r5, r3
 801dc28:	1ad3      	subs	r3, r2, r3
 801dc2a:	9305      	str	r3, [sp, #20]
 801dc2c:	9b07      	ldr	r3, [sp, #28]
 801dc2e:	b31b      	cbz	r3, 801dc78 <_dtoa_r+0x7a0>
 801dc30:	9b08      	ldr	r3, [sp, #32]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	f000 80af 	beq.w	801dd96 <_dtoa_r+0x8be>
 801dc38:	2e00      	cmp	r6, #0
 801dc3a:	dd13      	ble.n	801dc64 <_dtoa_r+0x78c>
 801dc3c:	4639      	mov	r1, r7
 801dc3e:	4632      	mov	r2, r6
 801dc40:	4620      	mov	r0, r4
 801dc42:	f001 f8ad 	bl	801eda0 <__pow5mult>
 801dc46:	ee18 2a10 	vmov	r2, s16
 801dc4a:	4601      	mov	r1, r0
 801dc4c:	4607      	mov	r7, r0
 801dc4e:	4620      	mov	r0, r4
 801dc50:	f000 fffc 	bl	801ec4c <__multiply>
 801dc54:	ee18 1a10 	vmov	r1, s16
 801dc58:	4680      	mov	r8, r0
 801dc5a:	4620      	mov	r0, r4
 801dc5c:	f000 fede 	bl	801ea1c <_Bfree>
 801dc60:	ee08 8a10 	vmov	s16, r8
 801dc64:	9b07      	ldr	r3, [sp, #28]
 801dc66:	1b9a      	subs	r2, r3, r6
 801dc68:	d006      	beq.n	801dc78 <_dtoa_r+0x7a0>
 801dc6a:	ee18 1a10 	vmov	r1, s16
 801dc6e:	4620      	mov	r0, r4
 801dc70:	f001 f896 	bl	801eda0 <__pow5mult>
 801dc74:	ee08 0a10 	vmov	s16, r0
 801dc78:	2101      	movs	r1, #1
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	f000 ffd0 	bl	801ec20 <__i2b>
 801dc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	4606      	mov	r6, r0
 801dc86:	f340 8088 	ble.w	801dd9a <_dtoa_r+0x8c2>
 801dc8a:	461a      	mov	r2, r3
 801dc8c:	4601      	mov	r1, r0
 801dc8e:	4620      	mov	r0, r4
 801dc90:	f001 f886 	bl	801eda0 <__pow5mult>
 801dc94:	9b06      	ldr	r3, [sp, #24]
 801dc96:	2b01      	cmp	r3, #1
 801dc98:	4606      	mov	r6, r0
 801dc9a:	f340 8081 	ble.w	801dda0 <_dtoa_r+0x8c8>
 801dc9e:	f04f 0800 	mov.w	r8, #0
 801dca2:	6933      	ldr	r3, [r6, #16]
 801dca4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801dca8:	6918      	ldr	r0, [r3, #16]
 801dcaa:	f000 ff69 	bl	801eb80 <__hi0bits>
 801dcae:	f1c0 0020 	rsb	r0, r0, #32
 801dcb2:	9b05      	ldr	r3, [sp, #20]
 801dcb4:	4418      	add	r0, r3
 801dcb6:	f010 001f 	ands.w	r0, r0, #31
 801dcba:	f000 8092 	beq.w	801dde2 <_dtoa_r+0x90a>
 801dcbe:	f1c0 0320 	rsb	r3, r0, #32
 801dcc2:	2b04      	cmp	r3, #4
 801dcc4:	f340 808a 	ble.w	801dddc <_dtoa_r+0x904>
 801dcc8:	f1c0 001c 	rsb	r0, r0, #28
 801dccc:	9b04      	ldr	r3, [sp, #16]
 801dcce:	4403      	add	r3, r0
 801dcd0:	9304      	str	r3, [sp, #16]
 801dcd2:	9b05      	ldr	r3, [sp, #20]
 801dcd4:	4403      	add	r3, r0
 801dcd6:	4405      	add	r5, r0
 801dcd8:	9305      	str	r3, [sp, #20]
 801dcda:	9b04      	ldr	r3, [sp, #16]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	dd07      	ble.n	801dcf0 <_dtoa_r+0x818>
 801dce0:	ee18 1a10 	vmov	r1, s16
 801dce4:	461a      	mov	r2, r3
 801dce6:	4620      	mov	r0, r4
 801dce8:	f001 f8b4 	bl	801ee54 <__lshift>
 801dcec:	ee08 0a10 	vmov	s16, r0
 801dcf0:	9b05      	ldr	r3, [sp, #20]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	dd05      	ble.n	801dd02 <_dtoa_r+0x82a>
 801dcf6:	4631      	mov	r1, r6
 801dcf8:	461a      	mov	r2, r3
 801dcfa:	4620      	mov	r0, r4
 801dcfc:	f001 f8aa 	bl	801ee54 <__lshift>
 801dd00:	4606      	mov	r6, r0
 801dd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	d06e      	beq.n	801dde6 <_dtoa_r+0x90e>
 801dd08:	ee18 0a10 	vmov	r0, s16
 801dd0c:	4631      	mov	r1, r6
 801dd0e:	f001 f911 	bl	801ef34 <__mcmp>
 801dd12:	2800      	cmp	r0, #0
 801dd14:	da67      	bge.n	801dde6 <_dtoa_r+0x90e>
 801dd16:	9b00      	ldr	r3, [sp, #0]
 801dd18:	3b01      	subs	r3, #1
 801dd1a:	ee18 1a10 	vmov	r1, s16
 801dd1e:	9300      	str	r3, [sp, #0]
 801dd20:	220a      	movs	r2, #10
 801dd22:	2300      	movs	r3, #0
 801dd24:	4620      	mov	r0, r4
 801dd26:	f000 fe9b 	bl	801ea60 <__multadd>
 801dd2a:	9b08      	ldr	r3, [sp, #32]
 801dd2c:	ee08 0a10 	vmov	s16, r0
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	f000 81b1 	beq.w	801e098 <_dtoa_r+0xbc0>
 801dd36:	2300      	movs	r3, #0
 801dd38:	4639      	mov	r1, r7
 801dd3a:	220a      	movs	r2, #10
 801dd3c:	4620      	mov	r0, r4
 801dd3e:	f000 fe8f 	bl	801ea60 <__multadd>
 801dd42:	9b02      	ldr	r3, [sp, #8]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	4607      	mov	r7, r0
 801dd48:	f300 808e 	bgt.w	801de68 <_dtoa_r+0x990>
 801dd4c:	9b06      	ldr	r3, [sp, #24]
 801dd4e:	2b02      	cmp	r3, #2
 801dd50:	dc51      	bgt.n	801ddf6 <_dtoa_r+0x91e>
 801dd52:	e089      	b.n	801de68 <_dtoa_r+0x990>
 801dd54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801dd5a:	e74b      	b.n	801dbf4 <_dtoa_r+0x71c>
 801dd5c:	9b03      	ldr	r3, [sp, #12]
 801dd5e:	1e5e      	subs	r6, r3, #1
 801dd60:	9b07      	ldr	r3, [sp, #28]
 801dd62:	42b3      	cmp	r3, r6
 801dd64:	bfbf      	itttt	lt
 801dd66:	9b07      	ldrlt	r3, [sp, #28]
 801dd68:	9607      	strlt	r6, [sp, #28]
 801dd6a:	1af2      	sublt	r2, r6, r3
 801dd6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801dd6e:	bfb6      	itet	lt
 801dd70:	189b      	addlt	r3, r3, r2
 801dd72:	1b9e      	subge	r6, r3, r6
 801dd74:	930a      	strlt	r3, [sp, #40]	; 0x28
 801dd76:	9b03      	ldr	r3, [sp, #12]
 801dd78:	bfb8      	it	lt
 801dd7a:	2600      	movlt	r6, #0
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	bfb7      	itett	lt
 801dd80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801dd84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801dd88:	1a9d      	sublt	r5, r3, r2
 801dd8a:	2300      	movlt	r3, #0
 801dd8c:	e734      	b.n	801dbf8 <_dtoa_r+0x720>
 801dd8e:	9e07      	ldr	r6, [sp, #28]
 801dd90:	9d04      	ldr	r5, [sp, #16]
 801dd92:	9f08      	ldr	r7, [sp, #32]
 801dd94:	e73b      	b.n	801dc0e <_dtoa_r+0x736>
 801dd96:	9a07      	ldr	r2, [sp, #28]
 801dd98:	e767      	b.n	801dc6a <_dtoa_r+0x792>
 801dd9a:	9b06      	ldr	r3, [sp, #24]
 801dd9c:	2b01      	cmp	r3, #1
 801dd9e:	dc18      	bgt.n	801ddd2 <_dtoa_r+0x8fa>
 801dda0:	f1ba 0f00 	cmp.w	sl, #0
 801dda4:	d115      	bne.n	801ddd2 <_dtoa_r+0x8fa>
 801dda6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ddaa:	b993      	cbnz	r3, 801ddd2 <_dtoa_r+0x8fa>
 801ddac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ddb0:	0d1b      	lsrs	r3, r3, #20
 801ddb2:	051b      	lsls	r3, r3, #20
 801ddb4:	b183      	cbz	r3, 801ddd8 <_dtoa_r+0x900>
 801ddb6:	9b04      	ldr	r3, [sp, #16]
 801ddb8:	3301      	adds	r3, #1
 801ddba:	9304      	str	r3, [sp, #16]
 801ddbc:	9b05      	ldr	r3, [sp, #20]
 801ddbe:	3301      	adds	r3, #1
 801ddc0:	9305      	str	r3, [sp, #20]
 801ddc2:	f04f 0801 	mov.w	r8, #1
 801ddc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	f47f af6a 	bne.w	801dca2 <_dtoa_r+0x7ca>
 801ddce:	2001      	movs	r0, #1
 801ddd0:	e76f      	b.n	801dcb2 <_dtoa_r+0x7da>
 801ddd2:	f04f 0800 	mov.w	r8, #0
 801ddd6:	e7f6      	b.n	801ddc6 <_dtoa_r+0x8ee>
 801ddd8:	4698      	mov	r8, r3
 801ddda:	e7f4      	b.n	801ddc6 <_dtoa_r+0x8ee>
 801dddc:	f43f af7d 	beq.w	801dcda <_dtoa_r+0x802>
 801dde0:	4618      	mov	r0, r3
 801dde2:	301c      	adds	r0, #28
 801dde4:	e772      	b.n	801dccc <_dtoa_r+0x7f4>
 801dde6:	9b03      	ldr	r3, [sp, #12]
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	dc37      	bgt.n	801de5c <_dtoa_r+0x984>
 801ddec:	9b06      	ldr	r3, [sp, #24]
 801ddee:	2b02      	cmp	r3, #2
 801ddf0:	dd34      	ble.n	801de5c <_dtoa_r+0x984>
 801ddf2:	9b03      	ldr	r3, [sp, #12]
 801ddf4:	9302      	str	r3, [sp, #8]
 801ddf6:	9b02      	ldr	r3, [sp, #8]
 801ddf8:	b96b      	cbnz	r3, 801de16 <_dtoa_r+0x93e>
 801ddfa:	4631      	mov	r1, r6
 801ddfc:	2205      	movs	r2, #5
 801ddfe:	4620      	mov	r0, r4
 801de00:	f000 fe2e 	bl	801ea60 <__multadd>
 801de04:	4601      	mov	r1, r0
 801de06:	4606      	mov	r6, r0
 801de08:	ee18 0a10 	vmov	r0, s16
 801de0c:	f001 f892 	bl	801ef34 <__mcmp>
 801de10:	2800      	cmp	r0, #0
 801de12:	f73f adbb 	bgt.w	801d98c <_dtoa_r+0x4b4>
 801de16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de18:	9d01      	ldr	r5, [sp, #4]
 801de1a:	43db      	mvns	r3, r3
 801de1c:	9300      	str	r3, [sp, #0]
 801de1e:	f04f 0800 	mov.w	r8, #0
 801de22:	4631      	mov	r1, r6
 801de24:	4620      	mov	r0, r4
 801de26:	f000 fdf9 	bl	801ea1c <_Bfree>
 801de2a:	2f00      	cmp	r7, #0
 801de2c:	f43f aea4 	beq.w	801db78 <_dtoa_r+0x6a0>
 801de30:	f1b8 0f00 	cmp.w	r8, #0
 801de34:	d005      	beq.n	801de42 <_dtoa_r+0x96a>
 801de36:	45b8      	cmp	r8, r7
 801de38:	d003      	beq.n	801de42 <_dtoa_r+0x96a>
 801de3a:	4641      	mov	r1, r8
 801de3c:	4620      	mov	r0, r4
 801de3e:	f000 fded 	bl	801ea1c <_Bfree>
 801de42:	4639      	mov	r1, r7
 801de44:	4620      	mov	r0, r4
 801de46:	f000 fde9 	bl	801ea1c <_Bfree>
 801de4a:	e695      	b.n	801db78 <_dtoa_r+0x6a0>
 801de4c:	2600      	movs	r6, #0
 801de4e:	4637      	mov	r7, r6
 801de50:	e7e1      	b.n	801de16 <_dtoa_r+0x93e>
 801de52:	9700      	str	r7, [sp, #0]
 801de54:	4637      	mov	r7, r6
 801de56:	e599      	b.n	801d98c <_dtoa_r+0x4b4>
 801de58:	40240000 	.word	0x40240000
 801de5c:	9b08      	ldr	r3, [sp, #32]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	f000 80ca 	beq.w	801dff8 <_dtoa_r+0xb20>
 801de64:	9b03      	ldr	r3, [sp, #12]
 801de66:	9302      	str	r3, [sp, #8]
 801de68:	2d00      	cmp	r5, #0
 801de6a:	dd05      	ble.n	801de78 <_dtoa_r+0x9a0>
 801de6c:	4639      	mov	r1, r7
 801de6e:	462a      	mov	r2, r5
 801de70:	4620      	mov	r0, r4
 801de72:	f000 ffef 	bl	801ee54 <__lshift>
 801de76:	4607      	mov	r7, r0
 801de78:	f1b8 0f00 	cmp.w	r8, #0
 801de7c:	d05b      	beq.n	801df36 <_dtoa_r+0xa5e>
 801de7e:	6879      	ldr	r1, [r7, #4]
 801de80:	4620      	mov	r0, r4
 801de82:	f000 fd8b 	bl	801e99c <_Balloc>
 801de86:	4605      	mov	r5, r0
 801de88:	b928      	cbnz	r0, 801de96 <_dtoa_r+0x9be>
 801de8a:	4b87      	ldr	r3, [pc, #540]	; (801e0a8 <_dtoa_r+0xbd0>)
 801de8c:	4602      	mov	r2, r0
 801de8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801de92:	f7ff bb3b 	b.w	801d50c <_dtoa_r+0x34>
 801de96:	693a      	ldr	r2, [r7, #16]
 801de98:	3202      	adds	r2, #2
 801de9a:	0092      	lsls	r2, r2, #2
 801de9c:	f107 010c 	add.w	r1, r7, #12
 801dea0:	300c      	adds	r0, #12
 801dea2:	f7fd fb80 	bl	801b5a6 <memcpy>
 801dea6:	2201      	movs	r2, #1
 801dea8:	4629      	mov	r1, r5
 801deaa:	4620      	mov	r0, r4
 801deac:	f000 ffd2 	bl	801ee54 <__lshift>
 801deb0:	9b01      	ldr	r3, [sp, #4]
 801deb2:	f103 0901 	add.w	r9, r3, #1
 801deb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801deba:	4413      	add	r3, r2
 801debc:	9305      	str	r3, [sp, #20]
 801debe:	f00a 0301 	and.w	r3, sl, #1
 801dec2:	46b8      	mov	r8, r7
 801dec4:	9304      	str	r3, [sp, #16]
 801dec6:	4607      	mov	r7, r0
 801dec8:	4631      	mov	r1, r6
 801deca:	ee18 0a10 	vmov	r0, s16
 801dece:	f7ff fa75 	bl	801d3bc <quorem>
 801ded2:	4641      	mov	r1, r8
 801ded4:	9002      	str	r0, [sp, #8]
 801ded6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801deda:	ee18 0a10 	vmov	r0, s16
 801dede:	f001 f829 	bl	801ef34 <__mcmp>
 801dee2:	463a      	mov	r2, r7
 801dee4:	9003      	str	r0, [sp, #12]
 801dee6:	4631      	mov	r1, r6
 801dee8:	4620      	mov	r0, r4
 801deea:	f001 f83f 	bl	801ef6c <__mdiff>
 801deee:	68c2      	ldr	r2, [r0, #12]
 801def0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801def4:	4605      	mov	r5, r0
 801def6:	bb02      	cbnz	r2, 801df3a <_dtoa_r+0xa62>
 801def8:	4601      	mov	r1, r0
 801defa:	ee18 0a10 	vmov	r0, s16
 801defe:	f001 f819 	bl	801ef34 <__mcmp>
 801df02:	4602      	mov	r2, r0
 801df04:	4629      	mov	r1, r5
 801df06:	4620      	mov	r0, r4
 801df08:	9207      	str	r2, [sp, #28]
 801df0a:	f000 fd87 	bl	801ea1c <_Bfree>
 801df0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801df12:	ea43 0102 	orr.w	r1, r3, r2
 801df16:	9b04      	ldr	r3, [sp, #16]
 801df18:	430b      	orrs	r3, r1
 801df1a:	464d      	mov	r5, r9
 801df1c:	d10f      	bne.n	801df3e <_dtoa_r+0xa66>
 801df1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801df22:	d02a      	beq.n	801df7a <_dtoa_r+0xaa2>
 801df24:	9b03      	ldr	r3, [sp, #12]
 801df26:	2b00      	cmp	r3, #0
 801df28:	dd02      	ble.n	801df30 <_dtoa_r+0xa58>
 801df2a:	9b02      	ldr	r3, [sp, #8]
 801df2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801df30:	f88b a000 	strb.w	sl, [fp]
 801df34:	e775      	b.n	801de22 <_dtoa_r+0x94a>
 801df36:	4638      	mov	r0, r7
 801df38:	e7ba      	b.n	801deb0 <_dtoa_r+0x9d8>
 801df3a:	2201      	movs	r2, #1
 801df3c:	e7e2      	b.n	801df04 <_dtoa_r+0xa2c>
 801df3e:	9b03      	ldr	r3, [sp, #12]
 801df40:	2b00      	cmp	r3, #0
 801df42:	db04      	blt.n	801df4e <_dtoa_r+0xa76>
 801df44:	9906      	ldr	r1, [sp, #24]
 801df46:	430b      	orrs	r3, r1
 801df48:	9904      	ldr	r1, [sp, #16]
 801df4a:	430b      	orrs	r3, r1
 801df4c:	d122      	bne.n	801df94 <_dtoa_r+0xabc>
 801df4e:	2a00      	cmp	r2, #0
 801df50:	ddee      	ble.n	801df30 <_dtoa_r+0xa58>
 801df52:	ee18 1a10 	vmov	r1, s16
 801df56:	2201      	movs	r2, #1
 801df58:	4620      	mov	r0, r4
 801df5a:	f000 ff7b 	bl	801ee54 <__lshift>
 801df5e:	4631      	mov	r1, r6
 801df60:	ee08 0a10 	vmov	s16, r0
 801df64:	f000 ffe6 	bl	801ef34 <__mcmp>
 801df68:	2800      	cmp	r0, #0
 801df6a:	dc03      	bgt.n	801df74 <_dtoa_r+0xa9c>
 801df6c:	d1e0      	bne.n	801df30 <_dtoa_r+0xa58>
 801df6e:	f01a 0f01 	tst.w	sl, #1
 801df72:	d0dd      	beq.n	801df30 <_dtoa_r+0xa58>
 801df74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801df78:	d1d7      	bne.n	801df2a <_dtoa_r+0xa52>
 801df7a:	2339      	movs	r3, #57	; 0x39
 801df7c:	f88b 3000 	strb.w	r3, [fp]
 801df80:	462b      	mov	r3, r5
 801df82:	461d      	mov	r5, r3
 801df84:	3b01      	subs	r3, #1
 801df86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801df8a:	2a39      	cmp	r2, #57	; 0x39
 801df8c:	d071      	beq.n	801e072 <_dtoa_r+0xb9a>
 801df8e:	3201      	adds	r2, #1
 801df90:	701a      	strb	r2, [r3, #0]
 801df92:	e746      	b.n	801de22 <_dtoa_r+0x94a>
 801df94:	2a00      	cmp	r2, #0
 801df96:	dd07      	ble.n	801dfa8 <_dtoa_r+0xad0>
 801df98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801df9c:	d0ed      	beq.n	801df7a <_dtoa_r+0xaa2>
 801df9e:	f10a 0301 	add.w	r3, sl, #1
 801dfa2:	f88b 3000 	strb.w	r3, [fp]
 801dfa6:	e73c      	b.n	801de22 <_dtoa_r+0x94a>
 801dfa8:	9b05      	ldr	r3, [sp, #20]
 801dfaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 801dfae:	4599      	cmp	r9, r3
 801dfb0:	d047      	beq.n	801e042 <_dtoa_r+0xb6a>
 801dfb2:	ee18 1a10 	vmov	r1, s16
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	220a      	movs	r2, #10
 801dfba:	4620      	mov	r0, r4
 801dfbc:	f000 fd50 	bl	801ea60 <__multadd>
 801dfc0:	45b8      	cmp	r8, r7
 801dfc2:	ee08 0a10 	vmov	s16, r0
 801dfc6:	f04f 0300 	mov.w	r3, #0
 801dfca:	f04f 020a 	mov.w	r2, #10
 801dfce:	4641      	mov	r1, r8
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	d106      	bne.n	801dfe2 <_dtoa_r+0xb0a>
 801dfd4:	f000 fd44 	bl	801ea60 <__multadd>
 801dfd8:	4680      	mov	r8, r0
 801dfda:	4607      	mov	r7, r0
 801dfdc:	f109 0901 	add.w	r9, r9, #1
 801dfe0:	e772      	b.n	801dec8 <_dtoa_r+0x9f0>
 801dfe2:	f000 fd3d 	bl	801ea60 <__multadd>
 801dfe6:	4639      	mov	r1, r7
 801dfe8:	4680      	mov	r8, r0
 801dfea:	2300      	movs	r3, #0
 801dfec:	220a      	movs	r2, #10
 801dfee:	4620      	mov	r0, r4
 801dff0:	f000 fd36 	bl	801ea60 <__multadd>
 801dff4:	4607      	mov	r7, r0
 801dff6:	e7f1      	b.n	801dfdc <_dtoa_r+0xb04>
 801dff8:	9b03      	ldr	r3, [sp, #12]
 801dffa:	9302      	str	r3, [sp, #8]
 801dffc:	9d01      	ldr	r5, [sp, #4]
 801dffe:	ee18 0a10 	vmov	r0, s16
 801e002:	4631      	mov	r1, r6
 801e004:	f7ff f9da 	bl	801d3bc <quorem>
 801e008:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e00c:	9b01      	ldr	r3, [sp, #4]
 801e00e:	f805 ab01 	strb.w	sl, [r5], #1
 801e012:	1aea      	subs	r2, r5, r3
 801e014:	9b02      	ldr	r3, [sp, #8]
 801e016:	4293      	cmp	r3, r2
 801e018:	dd09      	ble.n	801e02e <_dtoa_r+0xb56>
 801e01a:	ee18 1a10 	vmov	r1, s16
 801e01e:	2300      	movs	r3, #0
 801e020:	220a      	movs	r2, #10
 801e022:	4620      	mov	r0, r4
 801e024:	f000 fd1c 	bl	801ea60 <__multadd>
 801e028:	ee08 0a10 	vmov	s16, r0
 801e02c:	e7e7      	b.n	801dffe <_dtoa_r+0xb26>
 801e02e:	9b02      	ldr	r3, [sp, #8]
 801e030:	2b00      	cmp	r3, #0
 801e032:	bfc8      	it	gt
 801e034:	461d      	movgt	r5, r3
 801e036:	9b01      	ldr	r3, [sp, #4]
 801e038:	bfd8      	it	le
 801e03a:	2501      	movle	r5, #1
 801e03c:	441d      	add	r5, r3
 801e03e:	f04f 0800 	mov.w	r8, #0
 801e042:	ee18 1a10 	vmov	r1, s16
 801e046:	2201      	movs	r2, #1
 801e048:	4620      	mov	r0, r4
 801e04a:	f000 ff03 	bl	801ee54 <__lshift>
 801e04e:	4631      	mov	r1, r6
 801e050:	ee08 0a10 	vmov	s16, r0
 801e054:	f000 ff6e 	bl	801ef34 <__mcmp>
 801e058:	2800      	cmp	r0, #0
 801e05a:	dc91      	bgt.n	801df80 <_dtoa_r+0xaa8>
 801e05c:	d102      	bne.n	801e064 <_dtoa_r+0xb8c>
 801e05e:	f01a 0f01 	tst.w	sl, #1
 801e062:	d18d      	bne.n	801df80 <_dtoa_r+0xaa8>
 801e064:	462b      	mov	r3, r5
 801e066:	461d      	mov	r5, r3
 801e068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e06c:	2a30      	cmp	r2, #48	; 0x30
 801e06e:	d0fa      	beq.n	801e066 <_dtoa_r+0xb8e>
 801e070:	e6d7      	b.n	801de22 <_dtoa_r+0x94a>
 801e072:	9a01      	ldr	r2, [sp, #4]
 801e074:	429a      	cmp	r2, r3
 801e076:	d184      	bne.n	801df82 <_dtoa_r+0xaaa>
 801e078:	9b00      	ldr	r3, [sp, #0]
 801e07a:	3301      	adds	r3, #1
 801e07c:	9300      	str	r3, [sp, #0]
 801e07e:	2331      	movs	r3, #49	; 0x31
 801e080:	7013      	strb	r3, [r2, #0]
 801e082:	e6ce      	b.n	801de22 <_dtoa_r+0x94a>
 801e084:	4b09      	ldr	r3, [pc, #36]	; (801e0ac <_dtoa_r+0xbd4>)
 801e086:	f7ff ba95 	b.w	801d5b4 <_dtoa_r+0xdc>
 801e08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	f47f aa6e 	bne.w	801d56e <_dtoa_r+0x96>
 801e092:	4b07      	ldr	r3, [pc, #28]	; (801e0b0 <_dtoa_r+0xbd8>)
 801e094:	f7ff ba8e 	b.w	801d5b4 <_dtoa_r+0xdc>
 801e098:	9b02      	ldr	r3, [sp, #8]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	dcae      	bgt.n	801dffc <_dtoa_r+0xb24>
 801e09e:	9b06      	ldr	r3, [sp, #24]
 801e0a0:	2b02      	cmp	r3, #2
 801e0a2:	f73f aea8 	bgt.w	801ddf6 <_dtoa_r+0x91e>
 801e0a6:	e7a9      	b.n	801dffc <_dtoa_r+0xb24>
 801e0a8:	080230f0 	.word	0x080230f0
 801e0ac:	08022ef0 	.word	0x08022ef0
 801e0b0:	08023071 	.word	0x08023071

0801e0b4 <__errno>:
 801e0b4:	4b01      	ldr	r3, [pc, #4]	; (801e0bc <__errno+0x8>)
 801e0b6:	6818      	ldr	r0, [r3, #0]
 801e0b8:	4770      	bx	lr
 801e0ba:	bf00      	nop
 801e0bc:	20000110 	.word	0x20000110

0801e0c0 <__sflush_r>:
 801e0c0:	898a      	ldrh	r2, [r1, #12]
 801e0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0c6:	4605      	mov	r5, r0
 801e0c8:	0710      	lsls	r0, r2, #28
 801e0ca:	460c      	mov	r4, r1
 801e0cc:	d458      	bmi.n	801e180 <__sflush_r+0xc0>
 801e0ce:	684b      	ldr	r3, [r1, #4]
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	dc05      	bgt.n	801e0e0 <__sflush_r+0x20>
 801e0d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	dc02      	bgt.n	801e0e0 <__sflush_r+0x20>
 801e0da:	2000      	movs	r0, #0
 801e0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e0e2:	2e00      	cmp	r6, #0
 801e0e4:	d0f9      	beq.n	801e0da <__sflush_r+0x1a>
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e0ec:	682f      	ldr	r7, [r5, #0]
 801e0ee:	602b      	str	r3, [r5, #0]
 801e0f0:	d032      	beq.n	801e158 <__sflush_r+0x98>
 801e0f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e0f4:	89a3      	ldrh	r3, [r4, #12]
 801e0f6:	075a      	lsls	r2, r3, #29
 801e0f8:	d505      	bpl.n	801e106 <__sflush_r+0x46>
 801e0fa:	6863      	ldr	r3, [r4, #4]
 801e0fc:	1ac0      	subs	r0, r0, r3
 801e0fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e100:	b10b      	cbz	r3, 801e106 <__sflush_r+0x46>
 801e102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e104:	1ac0      	subs	r0, r0, r3
 801e106:	2300      	movs	r3, #0
 801e108:	4602      	mov	r2, r0
 801e10a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e10c:	6a21      	ldr	r1, [r4, #32]
 801e10e:	4628      	mov	r0, r5
 801e110:	47b0      	blx	r6
 801e112:	1c43      	adds	r3, r0, #1
 801e114:	89a3      	ldrh	r3, [r4, #12]
 801e116:	d106      	bne.n	801e126 <__sflush_r+0x66>
 801e118:	6829      	ldr	r1, [r5, #0]
 801e11a:	291d      	cmp	r1, #29
 801e11c:	d82c      	bhi.n	801e178 <__sflush_r+0xb8>
 801e11e:	4a2a      	ldr	r2, [pc, #168]	; (801e1c8 <__sflush_r+0x108>)
 801e120:	40ca      	lsrs	r2, r1
 801e122:	07d6      	lsls	r6, r2, #31
 801e124:	d528      	bpl.n	801e178 <__sflush_r+0xb8>
 801e126:	2200      	movs	r2, #0
 801e128:	6062      	str	r2, [r4, #4]
 801e12a:	04d9      	lsls	r1, r3, #19
 801e12c:	6922      	ldr	r2, [r4, #16]
 801e12e:	6022      	str	r2, [r4, #0]
 801e130:	d504      	bpl.n	801e13c <__sflush_r+0x7c>
 801e132:	1c42      	adds	r2, r0, #1
 801e134:	d101      	bne.n	801e13a <__sflush_r+0x7a>
 801e136:	682b      	ldr	r3, [r5, #0]
 801e138:	b903      	cbnz	r3, 801e13c <__sflush_r+0x7c>
 801e13a:	6560      	str	r0, [r4, #84]	; 0x54
 801e13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e13e:	602f      	str	r7, [r5, #0]
 801e140:	2900      	cmp	r1, #0
 801e142:	d0ca      	beq.n	801e0da <__sflush_r+0x1a>
 801e144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e148:	4299      	cmp	r1, r3
 801e14a:	d002      	beq.n	801e152 <__sflush_r+0x92>
 801e14c:	4628      	mov	r0, r5
 801e14e:	f001 f8fd 	bl	801f34c <_free_r>
 801e152:	2000      	movs	r0, #0
 801e154:	6360      	str	r0, [r4, #52]	; 0x34
 801e156:	e7c1      	b.n	801e0dc <__sflush_r+0x1c>
 801e158:	6a21      	ldr	r1, [r4, #32]
 801e15a:	2301      	movs	r3, #1
 801e15c:	4628      	mov	r0, r5
 801e15e:	47b0      	blx	r6
 801e160:	1c41      	adds	r1, r0, #1
 801e162:	d1c7      	bne.n	801e0f4 <__sflush_r+0x34>
 801e164:	682b      	ldr	r3, [r5, #0]
 801e166:	2b00      	cmp	r3, #0
 801e168:	d0c4      	beq.n	801e0f4 <__sflush_r+0x34>
 801e16a:	2b1d      	cmp	r3, #29
 801e16c:	d001      	beq.n	801e172 <__sflush_r+0xb2>
 801e16e:	2b16      	cmp	r3, #22
 801e170:	d101      	bne.n	801e176 <__sflush_r+0xb6>
 801e172:	602f      	str	r7, [r5, #0]
 801e174:	e7b1      	b.n	801e0da <__sflush_r+0x1a>
 801e176:	89a3      	ldrh	r3, [r4, #12]
 801e178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e17c:	81a3      	strh	r3, [r4, #12]
 801e17e:	e7ad      	b.n	801e0dc <__sflush_r+0x1c>
 801e180:	690f      	ldr	r7, [r1, #16]
 801e182:	2f00      	cmp	r7, #0
 801e184:	d0a9      	beq.n	801e0da <__sflush_r+0x1a>
 801e186:	0793      	lsls	r3, r2, #30
 801e188:	680e      	ldr	r6, [r1, #0]
 801e18a:	bf08      	it	eq
 801e18c:	694b      	ldreq	r3, [r1, #20]
 801e18e:	600f      	str	r7, [r1, #0]
 801e190:	bf18      	it	ne
 801e192:	2300      	movne	r3, #0
 801e194:	eba6 0807 	sub.w	r8, r6, r7
 801e198:	608b      	str	r3, [r1, #8]
 801e19a:	f1b8 0f00 	cmp.w	r8, #0
 801e19e:	dd9c      	ble.n	801e0da <__sflush_r+0x1a>
 801e1a0:	6a21      	ldr	r1, [r4, #32]
 801e1a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e1a4:	4643      	mov	r3, r8
 801e1a6:	463a      	mov	r2, r7
 801e1a8:	4628      	mov	r0, r5
 801e1aa:	47b0      	blx	r6
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	dc06      	bgt.n	801e1be <__sflush_r+0xfe>
 801e1b0:	89a3      	ldrh	r3, [r4, #12]
 801e1b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e1b6:	81a3      	strh	r3, [r4, #12]
 801e1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e1bc:	e78e      	b.n	801e0dc <__sflush_r+0x1c>
 801e1be:	4407      	add	r7, r0
 801e1c0:	eba8 0800 	sub.w	r8, r8, r0
 801e1c4:	e7e9      	b.n	801e19a <__sflush_r+0xda>
 801e1c6:	bf00      	nop
 801e1c8:	20400001 	.word	0x20400001

0801e1cc <_fflush_r>:
 801e1cc:	b538      	push	{r3, r4, r5, lr}
 801e1ce:	690b      	ldr	r3, [r1, #16]
 801e1d0:	4605      	mov	r5, r0
 801e1d2:	460c      	mov	r4, r1
 801e1d4:	b913      	cbnz	r3, 801e1dc <_fflush_r+0x10>
 801e1d6:	2500      	movs	r5, #0
 801e1d8:	4628      	mov	r0, r5
 801e1da:	bd38      	pop	{r3, r4, r5, pc}
 801e1dc:	b118      	cbz	r0, 801e1e6 <_fflush_r+0x1a>
 801e1de:	6983      	ldr	r3, [r0, #24]
 801e1e0:	b90b      	cbnz	r3, 801e1e6 <_fflush_r+0x1a>
 801e1e2:	f7fd f91b 	bl	801b41c <__sinit>
 801e1e6:	4b14      	ldr	r3, [pc, #80]	; (801e238 <_fflush_r+0x6c>)
 801e1e8:	429c      	cmp	r4, r3
 801e1ea:	d11b      	bne.n	801e224 <_fflush_r+0x58>
 801e1ec:	686c      	ldr	r4, [r5, #4]
 801e1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d0ef      	beq.n	801e1d6 <_fflush_r+0xa>
 801e1f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e1f8:	07d0      	lsls	r0, r2, #31
 801e1fa:	d404      	bmi.n	801e206 <_fflush_r+0x3a>
 801e1fc:	0599      	lsls	r1, r3, #22
 801e1fe:	d402      	bmi.n	801e206 <_fflush_r+0x3a>
 801e200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e202:	f7fd f9ce 	bl	801b5a2 <__retarget_lock_acquire_recursive>
 801e206:	4628      	mov	r0, r5
 801e208:	4621      	mov	r1, r4
 801e20a:	f7ff ff59 	bl	801e0c0 <__sflush_r>
 801e20e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e210:	07da      	lsls	r2, r3, #31
 801e212:	4605      	mov	r5, r0
 801e214:	d4e0      	bmi.n	801e1d8 <_fflush_r+0xc>
 801e216:	89a3      	ldrh	r3, [r4, #12]
 801e218:	059b      	lsls	r3, r3, #22
 801e21a:	d4dd      	bmi.n	801e1d8 <_fflush_r+0xc>
 801e21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e21e:	f7fd f9c1 	bl	801b5a4 <__retarget_lock_release_recursive>
 801e222:	e7d9      	b.n	801e1d8 <_fflush_r+0xc>
 801e224:	4b05      	ldr	r3, [pc, #20]	; (801e23c <_fflush_r+0x70>)
 801e226:	429c      	cmp	r4, r3
 801e228:	d101      	bne.n	801e22e <_fflush_r+0x62>
 801e22a:	68ac      	ldr	r4, [r5, #8]
 801e22c:	e7df      	b.n	801e1ee <_fflush_r+0x22>
 801e22e:	4b04      	ldr	r3, [pc, #16]	; (801e240 <_fflush_r+0x74>)
 801e230:	429c      	cmp	r4, r3
 801e232:	bf08      	it	eq
 801e234:	68ec      	ldreq	r4, [r5, #12]
 801e236:	e7da      	b.n	801e1ee <_fflush_r+0x22>
 801e238:	08022e9c 	.word	0x08022e9c
 801e23c:	08022ebc 	.word	0x08022ebc
 801e240:	08022e7c 	.word	0x08022e7c

0801e244 <rshift>:
 801e244:	6903      	ldr	r3, [r0, #16]
 801e246:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e24a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e24e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e252:	f100 0414 	add.w	r4, r0, #20
 801e256:	dd45      	ble.n	801e2e4 <rshift+0xa0>
 801e258:	f011 011f 	ands.w	r1, r1, #31
 801e25c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e264:	d10c      	bne.n	801e280 <rshift+0x3c>
 801e266:	f100 0710 	add.w	r7, r0, #16
 801e26a:	4629      	mov	r1, r5
 801e26c:	42b1      	cmp	r1, r6
 801e26e:	d334      	bcc.n	801e2da <rshift+0x96>
 801e270:	1a9b      	subs	r3, r3, r2
 801e272:	009b      	lsls	r3, r3, #2
 801e274:	1eea      	subs	r2, r5, #3
 801e276:	4296      	cmp	r6, r2
 801e278:	bf38      	it	cc
 801e27a:	2300      	movcc	r3, #0
 801e27c:	4423      	add	r3, r4
 801e27e:	e015      	b.n	801e2ac <rshift+0x68>
 801e280:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e284:	f1c1 0820 	rsb	r8, r1, #32
 801e288:	40cf      	lsrs	r7, r1
 801e28a:	f105 0e04 	add.w	lr, r5, #4
 801e28e:	46a1      	mov	r9, r4
 801e290:	4576      	cmp	r6, lr
 801e292:	46f4      	mov	ip, lr
 801e294:	d815      	bhi.n	801e2c2 <rshift+0x7e>
 801e296:	1a9a      	subs	r2, r3, r2
 801e298:	0092      	lsls	r2, r2, #2
 801e29a:	3a04      	subs	r2, #4
 801e29c:	3501      	adds	r5, #1
 801e29e:	42ae      	cmp	r6, r5
 801e2a0:	bf38      	it	cc
 801e2a2:	2200      	movcc	r2, #0
 801e2a4:	18a3      	adds	r3, r4, r2
 801e2a6:	50a7      	str	r7, [r4, r2]
 801e2a8:	b107      	cbz	r7, 801e2ac <rshift+0x68>
 801e2aa:	3304      	adds	r3, #4
 801e2ac:	1b1a      	subs	r2, r3, r4
 801e2ae:	42a3      	cmp	r3, r4
 801e2b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e2b4:	bf08      	it	eq
 801e2b6:	2300      	moveq	r3, #0
 801e2b8:	6102      	str	r2, [r0, #16]
 801e2ba:	bf08      	it	eq
 801e2bc:	6143      	streq	r3, [r0, #20]
 801e2be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e2c2:	f8dc c000 	ldr.w	ip, [ip]
 801e2c6:	fa0c fc08 	lsl.w	ip, ip, r8
 801e2ca:	ea4c 0707 	orr.w	r7, ip, r7
 801e2ce:	f849 7b04 	str.w	r7, [r9], #4
 801e2d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e2d6:	40cf      	lsrs	r7, r1
 801e2d8:	e7da      	b.n	801e290 <rshift+0x4c>
 801e2da:	f851 cb04 	ldr.w	ip, [r1], #4
 801e2de:	f847 cf04 	str.w	ip, [r7, #4]!
 801e2e2:	e7c3      	b.n	801e26c <rshift+0x28>
 801e2e4:	4623      	mov	r3, r4
 801e2e6:	e7e1      	b.n	801e2ac <rshift+0x68>

0801e2e8 <__hexdig_fun>:
 801e2e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e2ec:	2b09      	cmp	r3, #9
 801e2ee:	d802      	bhi.n	801e2f6 <__hexdig_fun+0xe>
 801e2f0:	3820      	subs	r0, #32
 801e2f2:	b2c0      	uxtb	r0, r0
 801e2f4:	4770      	bx	lr
 801e2f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e2fa:	2b05      	cmp	r3, #5
 801e2fc:	d801      	bhi.n	801e302 <__hexdig_fun+0x1a>
 801e2fe:	3847      	subs	r0, #71	; 0x47
 801e300:	e7f7      	b.n	801e2f2 <__hexdig_fun+0xa>
 801e302:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e306:	2b05      	cmp	r3, #5
 801e308:	d801      	bhi.n	801e30e <__hexdig_fun+0x26>
 801e30a:	3827      	subs	r0, #39	; 0x27
 801e30c:	e7f1      	b.n	801e2f2 <__hexdig_fun+0xa>
 801e30e:	2000      	movs	r0, #0
 801e310:	4770      	bx	lr
	...

0801e314 <__gethex>:
 801e314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e318:	ed2d 8b02 	vpush	{d8}
 801e31c:	b089      	sub	sp, #36	; 0x24
 801e31e:	ee08 0a10 	vmov	s16, r0
 801e322:	9304      	str	r3, [sp, #16]
 801e324:	4bb4      	ldr	r3, [pc, #720]	; (801e5f8 <__gethex+0x2e4>)
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	9301      	str	r3, [sp, #4]
 801e32a:	4618      	mov	r0, r3
 801e32c:	468b      	mov	fp, r1
 801e32e:	4690      	mov	r8, r2
 801e330:	f7e1 ff4e 	bl	80001d0 <strlen>
 801e334:	9b01      	ldr	r3, [sp, #4]
 801e336:	f8db 2000 	ldr.w	r2, [fp]
 801e33a:	4403      	add	r3, r0
 801e33c:	4682      	mov	sl, r0
 801e33e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e342:	9305      	str	r3, [sp, #20]
 801e344:	1c93      	adds	r3, r2, #2
 801e346:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e34a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e34e:	32fe      	adds	r2, #254	; 0xfe
 801e350:	18d1      	adds	r1, r2, r3
 801e352:	461f      	mov	r7, r3
 801e354:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e358:	9100      	str	r1, [sp, #0]
 801e35a:	2830      	cmp	r0, #48	; 0x30
 801e35c:	d0f8      	beq.n	801e350 <__gethex+0x3c>
 801e35e:	f7ff ffc3 	bl	801e2e8 <__hexdig_fun>
 801e362:	4604      	mov	r4, r0
 801e364:	2800      	cmp	r0, #0
 801e366:	d13a      	bne.n	801e3de <__gethex+0xca>
 801e368:	9901      	ldr	r1, [sp, #4]
 801e36a:	4652      	mov	r2, sl
 801e36c:	4638      	mov	r0, r7
 801e36e:	f001 f9af 	bl	801f6d0 <strncmp>
 801e372:	4605      	mov	r5, r0
 801e374:	2800      	cmp	r0, #0
 801e376:	d168      	bne.n	801e44a <__gethex+0x136>
 801e378:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e37c:	eb07 060a 	add.w	r6, r7, sl
 801e380:	f7ff ffb2 	bl	801e2e8 <__hexdig_fun>
 801e384:	2800      	cmp	r0, #0
 801e386:	d062      	beq.n	801e44e <__gethex+0x13a>
 801e388:	4633      	mov	r3, r6
 801e38a:	7818      	ldrb	r0, [r3, #0]
 801e38c:	2830      	cmp	r0, #48	; 0x30
 801e38e:	461f      	mov	r7, r3
 801e390:	f103 0301 	add.w	r3, r3, #1
 801e394:	d0f9      	beq.n	801e38a <__gethex+0x76>
 801e396:	f7ff ffa7 	bl	801e2e8 <__hexdig_fun>
 801e39a:	2301      	movs	r3, #1
 801e39c:	fab0 f480 	clz	r4, r0
 801e3a0:	0964      	lsrs	r4, r4, #5
 801e3a2:	4635      	mov	r5, r6
 801e3a4:	9300      	str	r3, [sp, #0]
 801e3a6:	463a      	mov	r2, r7
 801e3a8:	4616      	mov	r6, r2
 801e3aa:	3201      	adds	r2, #1
 801e3ac:	7830      	ldrb	r0, [r6, #0]
 801e3ae:	f7ff ff9b 	bl	801e2e8 <__hexdig_fun>
 801e3b2:	2800      	cmp	r0, #0
 801e3b4:	d1f8      	bne.n	801e3a8 <__gethex+0x94>
 801e3b6:	9901      	ldr	r1, [sp, #4]
 801e3b8:	4652      	mov	r2, sl
 801e3ba:	4630      	mov	r0, r6
 801e3bc:	f001 f988 	bl	801f6d0 <strncmp>
 801e3c0:	b980      	cbnz	r0, 801e3e4 <__gethex+0xd0>
 801e3c2:	b94d      	cbnz	r5, 801e3d8 <__gethex+0xc4>
 801e3c4:	eb06 050a 	add.w	r5, r6, sl
 801e3c8:	462a      	mov	r2, r5
 801e3ca:	4616      	mov	r6, r2
 801e3cc:	3201      	adds	r2, #1
 801e3ce:	7830      	ldrb	r0, [r6, #0]
 801e3d0:	f7ff ff8a 	bl	801e2e8 <__hexdig_fun>
 801e3d4:	2800      	cmp	r0, #0
 801e3d6:	d1f8      	bne.n	801e3ca <__gethex+0xb6>
 801e3d8:	1bad      	subs	r5, r5, r6
 801e3da:	00ad      	lsls	r5, r5, #2
 801e3dc:	e004      	b.n	801e3e8 <__gethex+0xd4>
 801e3de:	2400      	movs	r4, #0
 801e3e0:	4625      	mov	r5, r4
 801e3e2:	e7e0      	b.n	801e3a6 <__gethex+0x92>
 801e3e4:	2d00      	cmp	r5, #0
 801e3e6:	d1f7      	bne.n	801e3d8 <__gethex+0xc4>
 801e3e8:	7833      	ldrb	r3, [r6, #0]
 801e3ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e3ee:	2b50      	cmp	r3, #80	; 0x50
 801e3f0:	d13b      	bne.n	801e46a <__gethex+0x156>
 801e3f2:	7873      	ldrb	r3, [r6, #1]
 801e3f4:	2b2b      	cmp	r3, #43	; 0x2b
 801e3f6:	d02c      	beq.n	801e452 <__gethex+0x13e>
 801e3f8:	2b2d      	cmp	r3, #45	; 0x2d
 801e3fa:	d02e      	beq.n	801e45a <__gethex+0x146>
 801e3fc:	1c71      	adds	r1, r6, #1
 801e3fe:	f04f 0900 	mov.w	r9, #0
 801e402:	7808      	ldrb	r0, [r1, #0]
 801e404:	f7ff ff70 	bl	801e2e8 <__hexdig_fun>
 801e408:	1e43      	subs	r3, r0, #1
 801e40a:	b2db      	uxtb	r3, r3
 801e40c:	2b18      	cmp	r3, #24
 801e40e:	d82c      	bhi.n	801e46a <__gethex+0x156>
 801e410:	f1a0 0210 	sub.w	r2, r0, #16
 801e414:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e418:	f7ff ff66 	bl	801e2e8 <__hexdig_fun>
 801e41c:	1e43      	subs	r3, r0, #1
 801e41e:	b2db      	uxtb	r3, r3
 801e420:	2b18      	cmp	r3, #24
 801e422:	d91d      	bls.n	801e460 <__gethex+0x14c>
 801e424:	f1b9 0f00 	cmp.w	r9, #0
 801e428:	d000      	beq.n	801e42c <__gethex+0x118>
 801e42a:	4252      	negs	r2, r2
 801e42c:	4415      	add	r5, r2
 801e42e:	f8cb 1000 	str.w	r1, [fp]
 801e432:	b1e4      	cbz	r4, 801e46e <__gethex+0x15a>
 801e434:	9b00      	ldr	r3, [sp, #0]
 801e436:	2b00      	cmp	r3, #0
 801e438:	bf14      	ite	ne
 801e43a:	2700      	movne	r7, #0
 801e43c:	2706      	moveq	r7, #6
 801e43e:	4638      	mov	r0, r7
 801e440:	b009      	add	sp, #36	; 0x24
 801e442:	ecbd 8b02 	vpop	{d8}
 801e446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e44a:	463e      	mov	r6, r7
 801e44c:	4625      	mov	r5, r4
 801e44e:	2401      	movs	r4, #1
 801e450:	e7ca      	b.n	801e3e8 <__gethex+0xd4>
 801e452:	f04f 0900 	mov.w	r9, #0
 801e456:	1cb1      	adds	r1, r6, #2
 801e458:	e7d3      	b.n	801e402 <__gethex+0xee>
 801e45a:	f04f 0901 	mov.w	r9, #1
 801e45e:	e7fa      	b.n	801e456 <__gethex+0x142>
 801e460:	230a      	movs	r3, #10
 801e462:	fb03 0202 	mla	r2, r3, r2, r0
 801e466:	3a10      	subs	r2, #16
 801e468:	e7d4      	b.n	801e414 <__gethex+0x100>
 801e46a:	4631      	mov	r1, r6
 801e46c:	e7df      	b.n	801e42e <__gethex+0x11a>
 801e46e:	1bf3      	subs	r3, r6, r7
 801e470:	3b01      	subs	r3, #1
 801e472:	4621      	mov	r1, r4
 801e474:	2b07      	cmp	r3, #7
 801e476:	dc0b      	bgt.n	801e490 <__gethex+0x17c>
 801e478:	ee18 0a10 	vmov	r0, s16
 801e47c:	f000 fa8e 	bl	801e99c <_Balloc>
 801e480:	4604      	mov	r4, r0
 801e482:	b940      	cbnz	r0, 801e496 <__gethex+0x182>
 801e484:	4b5d      	ldr	r3, [pc, #372]	; (801e5fc <__gethex+0x2e8>)
 801e486:	4602      	mov	r2, r0
 801e488:	21de      	movs	r1, #222	; 0xde
 801e48a:	485d      	ldr	r0, [pc, #372]	; (801e600 <__gethex+0x2ec>)
 801e48c:	f001 f942 	bl	801f714 <__assert_func>
 801e490:	3101      	adds	r1, #1
 801e492:	105b      	asrs	r3, r3, #1
 801e494:	e7ee      	b.n	801e474 <__gethex+0x160>
 801e496:	f100 0914 	add.w	r9, r0, #20
 801e49a:	f04f 0b00 	mov.w	fp, #0
 801e49e:	f1ca 0301 	rsb	r3, sl, #1
 801e4a2:	f8cd 9008 	str.w	r9, [sp, #8]
 801e4a6:	f8cd b000 	str.w	fp, [sp]
 801e4aa:	9306      	str	r3, [sp, #24]
 801e4ac:	42b7      	cmp	r7, r6
 801e4ae:	d340      	bcc.n	801e532 <__gethex+0x21e>
 801e4b0:	9802      	ldr	r0, [sp, #8]
 801e4b2:	9b00      	ldr	r3, [sp, #0]
 801e4b4:	f840 3b04 	str.w	r3, [r0], #4
 801e4b8:	eba0 0009 	sub.w	r0, r0, r9
 801e4bc:	1080      	asrs	r0, r0, #2
 801e4be:	0146      	lsls	r6, r0, #5
 801e4c0:	6120      	str	r0, [r4, #16]
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f000 fb5c 	bl	801eb80 <__hi0bits>
 801e4c8:	1a30      	subs	r0, r6, r0
 801e4ca:	f8d8 6000 	ldr.w	r6, [r8]
 801e4ce:	42b0      	cmp	r0, r6
 801e4d0:	dd63      	ble.n	801e59a <__gethex+0x286>
 801e4d2:	1b87      	subs	r7, r0, r6
 801e4d4:	4639      	mov	r1, r7
 801e4d6:	4620      	mov	r0, r4
 801e4d8:	f000 ff00 	bl	801f2dc <__any_on>
 801e4dc:	4682      	mov	sl, r0
 801e4de:	b1a8      	cbz	r0, 801e50c <__gethex+0x1f8>
 801e4e0:	1e7b      	subs	r3, r7, #1
 801e4e2:	1159      	asrs	r1, r3, #5
 801e4e4:	f003 021f 	and.w	r2, r3, #31
 801e4e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e4ec:	f04f 0a01 	mov.w	sl, #1
 801e4f0:	fa0a f202 	lsl.w	r2, sl, r2
 801e4f4:	420a      	tst	r2, r1
 801e4f6:	d009      	beq.n	801e50c <__gethex+0x1f8>
 801e4f8:	4553      	cmp	r3, sl
 801e4fa:	dd05      	ble.n	801e508 <__gethex+0x1f4>
 801e4fc:	1eb9      	subs	r1, r7, #2
 801e4fe:	4620      	mov	r0, r4
 801e500:	f000 feec 	bl	801f2dc <__any_on>
 801e504:	2800      	cmp	r0, #0
 801e506:	d145      	bne.n	801e594 <__gethex+0x280>
 801e508:	f04f 0a02 	mov.w	sl, #2
 801e50c:	4639      	mov	r1, r7
 801e50e:	4620      	mov	r0, r4
 801e510:	f7ff fe98 	bl	801e244 <rshift>
 801e514:	443d      	add	r5, r7
 801e516:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e51a:	42ab      	cmp	r3, r5
 801e51c:	da4c      	bge.n	801e5b8 <__gethex+0x2a4>
 801e51e:	ee18 0a10 	vmov	r0, s16
 801e522:	4621      	mov	r1, r4
 801e524:	f000 fa7a 	bl	801ea1c <_Bfree>
 801e528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e52a:	2300      	movs	r3, #0
 801e52c:	6013      	str	r3, [r2, #0]
 801e52e:	27a3      	movs	r7, #163	; 0xa3
 801e530:	e785      	b.n	801e43e <__gethex+0x12a>
 801e532:	1e73      	subs	r3, r6, #1
 801e534:	9a05      	ldr	r2, [sp, #20]
 801e536:	9303      	str	r3, [sp, #12]
 801e538:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e53c:	4293      	cmp	r3, r2
 801e53e:	d019      	beq.n	801e574 <__gethex+0x260>
 801e540:	f1bb 0f20 	cmp.w	fp, #32
 801e544:	d107      	bne.n	801e556 <__gethex+0x242>
 801e546:	9b02      	ldr	r3, [sp, #8]
 801e548:	9a00      	ldr	r2, [sp, #0]
 801e54a:	f843 2b04 	str.w	r2, [r3], #4
 801e54e:	9302      	str	r3, [sp, #8]
 801e550:	2300      	movs	r3, #0
 801e552:	9300      	str	r3, [sp, #0]
 801e554:	469b      	mov	fp, r3
 801e556:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e55a:	f7ff fec5 	bl	801e2e8 <__hexdig_fun>
 801e55e:	9b00      	ldr	r3, [sp, #0]
 801e560:	f000 000f 	and.w	r0, r0, #15
 801e564:	fa00 f00b 	lsl.w	r0, r0, fp
 801e568:	4303      	orrs	r3, r0
 801e56a:	9300      	str	r3, [sp, #0]
 801e56c:	f10b 0b04 	add.w	fp, fp, #4
 801e570:	9b03      	ldr	r3, [sp, #12]
 801e572:	e00d      	b.n	801e590 <__gethex+0x27c>
 801e574:	9b03      	ldr	r3, [sp, #12]
 801e576:	9a06      	ldr	r2, [sp, #24]
 801e578:	4413      	add	r3, r2
 801e57a:	42bb      	cmp	r3, r7
 801e57c:	d3e0      	bcc.n	801e540 <__gethex+0x22c>
 801e57e:	4618      	mov	r0, r3
 801e580:	9901      	ldr	r1, [sp, #4]
 801e582:	9307      	str	r3, [sp, #28]
 801e584:	4652      	mov	r2, sl
 801e586:	f001 f8a3 	bl	801f6d0 <strncmp>
 801e58a:	9b07      	ldr	r3, [sp, #28]
 801e58c:	2800      	cmp	r0, #0
 801e58e:	d1d7      	bne.n	801e540 <__gethex+0x22c>
 801e590:	461e      	mov	r6, r3
 801e592:	e78b      	b.n	801e4ac <__gethex+0x198>
 801e594:	f04f 0a03 	mov.w	sl, #3
 801e598:	e7b8      	b.n	801e50c <__gethex+0x1f8>
 801e59a:	da0a      	bge.n	801e5b2 <__gethex+0x29e>
 801e59c:	1a37      	subs	r7, r6, r0
 801e59e:	4621      	mov	r1, r4
 801e5a0:	ee18 0a10 	vmov	r0, s16
 801e5a4:	463a      	mov	r2, r7
 801e5a6:	f000 fc55 	bl	801ee54 <__lshift>
 801e5aa:	1bed      	subs	r5, r5, r7
 801e5ac:	4604      	mov	r4, r0
 801e5ae:	f100 0914 	add.w	r9, r0, #20
 801e5b2:	f04f 0a00 	mov.w	sl, #0
 801e5b6:	e7ae      	b.n	801e516 <__gethex+0x202>
 801e5b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e5bc:	42a8      	cmp	r0, r5
 801e5be:	dd72      	ble.n	801e6a6 <__gethex+0x392>
 801e5c0:	1b45      	subs	r5, r0, r5
 801e5c2:	42ae      	cmp	r6, r5
 801e5c4:	dc36      	bgt.n	801e634 <__gethex+0x320>
 801e5c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e5ca:	2b02      	cmp	r3, #2
 801e5cc:	d02a      	beq.n	801e624 <__gethex+0x310>
 801e5ce:	2b03      	cmp	r3, #3
 801e5d0:	d02c      	beq.n	801e62c <__gethex+0x318>
 801e5d2:	2b01      	cmp	r3, #1
 801e5d4:	d11c      	bne.n	801e610 <__gethex+0x2fc>
 801e5d6:	42ae      	cmp	r6, r5
 801e5d8:	d11a      	bne.n	801e610 <__gethex+0x2fc>
 801e5da:	2e01      	cmp	r6, #1
 801e5dc:	d112      	bne.n	801e604 <__gethex+0x2f0>
 801e5de:	9a04      	ldr	r2, [sp, #16]
 801e5e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e5e4:	6013      	str	r3, [r2, #0]
 801e5e6:	2301      	movs	r3, #1
 801e5e8:	6123      	str	r3, [r4, #16]
 801e5ea:	f8c9 3000 	str.w	r3, [r9]
 801e5ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e5f0:	2762      	movs	r7, #98	; 0x62
 801e5f2:	601c      	str	r4, [r3, #0]
 801e5f4:	e723      	b.n	801e43e <__gethex+0x12a>
 801e5f6:	bf00      	nop
 801e5f8:	08023168 	.word	0x08023168
 801e5fc:	080230f0 	.word	0x080230f0
 801e600:	08023101 	.word	0x08023101
 801e604:	1e71      	subs	r1, r6, #1
 801e606:	4620      	mov	r0, r4
 801e608:	f000 fe68 	bl	801f2dc <__any_on>
 801e60c:	2800      	cmp	r0, #0
 801e60e:	d1e6      	bne.n	801e5de <__gethex+0x2ca>
 801e610:	ee18 0a10 	vmov	r0, s16
 801e614:	4621      	mov	r1, r4
 801e616:	f000 fa01 	bl	801ea1c <_Bfree>
 801e61a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e61c:	2300      	movs	r3, #0
 801e61e:	6013      	str	r3, [r2, #0]
 801e620:	2750      	movs	r7, #80	; 0x50
 801e622:	e70c      	b.n	801e43e <__gethex+0x12a>
 801e624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e626:	2b00      	cmp	r3, #0
 801e628:	d1f2      	bne.n	801e610 <__gethex+0x2fc>
 801e62a:	e7d8      	b.n	801e5de <__gethex+0x2ca>
 801e62c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d1d5      	bne.n	801e5de <__gethex+0x2ca>
 801e632:	e7ed      	b.n	801e610 <__gethex+0x2fc>
 801e634:	1e6f      	subs	r7, r5, #1
 801e636:	f1ba 0f00 	cmp.w	sl, #0
 801e63a:	d131      	bne.n	801e6a0 <__gethex+0x38c>
 801e63c:	b127      	cbz	r7, 801e648 <__gethex+0x334>
 801e63e:	4639      	mov	r1, r7
 801e640:	4620      	mov	r0, r4
 801e642:	f000 fe4b 	bl	801f2dc <__any_on>
 801e646:	4682      	mov	sl, r0
 801e648:	117b      	asrs	r3, r7, #5
 801e64a:	2101      	movs	r1, #1
 801e64c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e650:	f007 071f 	and.w	r7, r7, #31
 801e654:	fa01 f707 	lsl.w	r7, r1, r7
 801e658:	421f      	tst	r7, r3
 801e65a:	4629      	mov	r1, r5
 801e65c:	4620      	mov	r0, r4
 801e65e:	bf18      	it	ne
 801e660:	f04a 0a02 	orrne.w	sl, sl, #2
 801e664:	1b76      	subs	r6, r6, r5
 801e666:	f7ff fded 	bl	801e244 <rshift>
 801e66a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e66e:	2702      	movs	r7, #2
 801e670:	f1ba 0f00 	cmp.w	sl, #0
 801e674:	d048      	beq.n	801e708 <__gethex+0x3f4>
 801e676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e67a:	2b02      	cmp	r3, #2
 801e67c:	d015      	beq.n	801e6aa <__gethex+0x396>
 801e67e:	2b03      	cmp	r3, #3
 801e680:	d017      	beq.n	801e6b2 <__gethex+0x39e>
 801e682:	2b01      	cmp	r3, #1
 801e684:	d109      	bne.n	801e69a <__gethex+0x386>
 801e686:	f01a 0f02 	tst.w	sl, #2
 801e68a:	d006      	beq.n	801e69a <__gethex+0x386>
 801e68c:	f8d9 0000 	ldr.w	r0, [r9]
 801e690:	ea4a 0a00 	orr.w	sl, sl, r0
 801e694:	f01a 0f01 	tst.w	sl, #1
 801e698:	d10e      	bne.n	801e6b8 <__gethex+0x3a4>
 801e69a:	f047 0710 	orr.w	r7, r7, #16
 801e69e:	e033      	b.n	801e708 <__gethex+0x3f4>
 801e6a0:	f04f 0a01 	mov.w	sl, #1
 801e6a4:	e7d0      	b.n	801e648 <__gethex+0x334>
 801e6a6:	2701      	movs	r7, #1
 801e6a8:	e7e2      	b.n	801e670 <__gethex+0x35c>
 801e6aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e6ac:	f1c3 0301 	rsb	r3, r3, #1
 801e6b0:	9315      	str	r3, [sp, #84]	; 0x54
 801e6b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d0f0      	beq.n	801e69a <__gethex+0x386>
 801e6b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e6bc:	f104 0314 	add.w	r3, r4, #20
 801e6c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e6c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e6c8:	f04f 0c00 	mov.w	ip, #0
 801e6cc:	4618      	mov	r0, r3
 801e6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6d2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801e6d6:	d01c      	beq.n	801e712 <__gethex+0x3fe>
 801e6d8:	3201      	adds	r2, #1
 801e6da:	6002      	str	r2, [r0, #0]
 801e6dc:	2f02      	cmp	r7, #2
 801e6de:	f104 0314 	add.w	r3, r4, #20
 801e6e2:	d13f      	bne.n	801e764 <__gethex+0x450>
 801e6e4:	f8d8 2000 	ldr.w	r2, [r8]
 801e6e8:	3a01      	subs	r2, #1
 801e6ea:	42b2      	cmp	r2, r6
 801e6ec:	d10a      	bne.n	801e704 <__gethex+0x3f0>
 801e6ee:	1171      	asrs	r1, r6, #5
 801e6f0:	2201      	movs	r2, #1
 801e6f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e6f6:	f006 061f 	and.w	r6, r6, #31
 801e6fa:	fa02 f606 	lsl.w	r6, r2, r6
 801e6fe:	421e      	tst	r6, r3
 801e700:	bf18      	it	ne
 801e702:	4617      	movne	r7, r2
 801e704:	f047 0720 	orr.w	r7, r7, #32
 801e708:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e70a:	601c      	str	r4, [r3, #0]
 801e70c:	9b04      	ldr	r3, [sp, #16]
 801e70e:	601d      	str	r5, [r3, #0]
 801e710:	e695      	b.n	801e43e <__gethex+0x12a>
 801e712:	4299      	cmp	r1, r3
 801e714:	f843 cc04 	str.w	ip, [r3, #-4]
 801e718:	d8d8      	bhi.n	801e6cc <__gethex+0x3b8>
 801e71a:	68a3      	ldr	r3, [r4, #8]
 801e71c:	459b      	cmp	fp, r3
 801e71e:	db19      	blt.n	801e754 <__gethex+0x440>
 801e720:	6861      	ldr	r1, [r4, #4]
 801e722:	ee18 0a10 	vmov	r0, s16
 801e726:	3101      	adds	r1, #1
 801e728:	f000 f938 	bl	801e99c <_Balloc>
 801e72c:	4681      	mov	r9, r0
 801e72e:	b918      	cbnz	r0, 801e738 <__gethex+0x424>
 801e730:	4b1a      	ldr	r3, [pc, #104]	; (801e79c <__gethex+0x488>)
 801e732:	4602      	mov	r2, r0
 801e734:	2184      	movs	r1, #132	; 0x84
 801e736:	e6a8      	b.n	801e48a <__gethex+0x176>
 801e738:	6922      	ldr	r2, [r4, #16]
 801e73a:	3202      	adds	r2, #2
 801e73c:	f104 010c 	add.w	r1, r4, #12
 801e740:	0092      	lsls	r2, r2, #2
 801e742:	300c      	adds	r0, #12
 801e744:	f7fc ff2f 	bl	801b5a6 <memcpy>
 801e748:	4621      	mov	r1, r4
 801e74a:	ee18 0a10 	vmov	r0, s16
 801e74e:	f000 f965 	bl	801ea1c <_Bfree>
 801e752:	464c      	mov	r4, r9
 801e754:	6923      	ldr	r3, [r4, #16]
 801e756:	1c5a      	adds	r2, r3, #1
 801e758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e75c:	6122      	str	r2, [r4, #16]
 801e75e:	2201      	movs	r2, #1
 801e760:	615a      	str	r2, [r3, #20]
 801e762:	e7bb      	b.n	801e6dc <__gethex+0x3c8>
 801e764:	6922      	ldr	r2, [r4, #16]
 801e766:	455a      	cmp	r2, fp
 801e768:	dd0b      	ble.n	801e782 <__gethex+0x46e>
 801e76a:	2101      	movs	r1, #1
 801e76c:	4620      	mov	r0, r4
 801e76e:	f7ff fd69 	bl	801e244 <rshift>
 801e772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e776:	3501      	adds	r5, #1
 801e778:	42ab      	cmp	r3, r5
 801e77a:	f6ff aed0 	blt.w	801e51e <__gethex+0x20a>
 801e77e:	2701      	movs	r7, #1
 801e780:	e7c0      	b.n	801e704 <__gethex+0x3f0>
 801e782:	f016 061f 	ands.w	r6, r6, #31
 801e786:	d0fa      	beq.n	801e77e <__gethex+0x46a>
 801e788:	4453      	add	r3, sl
 801e78a:	f1c6 0620 	rsb	r6, r6, #32
 801e78e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e792:	f000 f9f5 	bl	801eb80 <__hi0bits>
 801e796:	42b0      	cmp	r0, r6
 801e798:	dbe7      	blt.n	801e76a <__gethex+0x456>
 801e79a:	e7f0      	b.n	801e77e <__gethex+0x46a>
 801e79c:	080230f0 	.word	0x080230f0

0801e7a0 <L_shift>:
 801e7a0:	f1c2 0208 	rsb	r2, r2, #8
 801e7a4:	0092      	lsls	r2, r2, #2
 801e7a6:	b570      	push	{r4, r5, r6, lr}
 801e7a8:	f1c2 0620 	rsb	r6, r2, #32
 801e7ac:	6843      	ldr	r3, [r0, #4]
 801e7ae:	6804      	ldr	r4, [r0, #0]
 801e7b0:	fa03 f506 	lsl.w	r5, r3, r6
 801e7b4:	432c      	orrs	r4, r5
 801e7b6:	40d3      	lsrs	r3, r2
 801e7b8:	6004      	str	r4, [r0, #0]
 801e7ba:	f840 3f04 	str.w	r3, [r0, #4]!
 801e7be:	4288      	cmp	r0, r1
 801e7c0:	d3f4      	bcc.n	801e7ac <L_shift+0xc>
 801e7c2:	bd70      	pop	{r4, r5, r6, pc}

0801e7c4 <__match>:
 801e7c4:	b530      	push	{r4, r5, lr}
 801e7c6:	6803      	ldr	r3, [r0, #0]
 801e7c8:	3301      	adds	r3, #1
 801e7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e7ce:	b914      	cbnz	r4, 801e7d6 <__match+0x12>
 801e7d0:	6003      	str	r3, [r0, #0]
 801e7d2:	2001      	movs	r0, #1
 801e7d4:	bd30      	pop	{r4, r5, pc}
 801e7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e7de:	2d19      	cmp	r5, #25
 801e7e0:	bf98      	it	ls
 801e7e2:	3220      	addls	r2, #32
 801e7e4:	42a2      	cmp	r2, r4
 801e7e6:	d0f0      	beq.n	801e7ca <__match+0x6>
 801e7e8:	2000      	movs	r0, #0
 801e7ea:	e7f3      	b.n	801e7d4 <__match+0x10>

0801e7ec <__hexnan>:
 801e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7f0:	680b      	ldr	r3, [r1, #0]
 801e7f2:	115e      	asrs	r6, r3, #5
 801e7f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e7f8:	f013 031f 	ands.w	r3, r3, #31
 801e7fc:	b087      	sub	sp, #28
 801e7fe:	bf18      	it	ne
 801e800:	3604      	addne	r6, #4
 801e802:	2500      	movs	r5, #0
 801e804:	1f37      	subs	r7, r6, #4
 801e806:	4690      	mov	r8, r2
 801e808:	6802      	ldr	r2, [r0, #0]
 801e80a:	9301      	str	r3, [sp, #4]
 801e80c:	4682      	mov	sl, r0
 801e80e:	f846 5c04 	str.w	r5, [r6, #-4]
 801e812:	46b9      	mov	r9, r7
 801e814:	463c      	mov	r4, r7
 801e816:	9502      	str	r5, [sp, #8]
 801e818:	46ab      	mov	fp, r5
 801e81a:	7851      	ldrb	r1, [r2, #1]
 801e81c:	1c53      	adds	r3, r2, #1
 801e81e:	9303      	str	r3, [sp, #12]
 801e820:	b341      	cbz	r1, 801e874 <__hexnan+0x88>
 801e822:	4608      	mov	r0, r1
 801e824:	9205      	str	r2, [sp, #20]
 801e826:	9104      	str	r1, [sp, #16]
 801e828:	f7ff fd5e 	bl	801e2e8 <__hexdig_fun>
 801e82c:	2800      	cmp	r0, #0
 801e82e:	d14f      	bne.n	801e8d0 <__hexnan+0xe4>
 801e830:	9904      	ldr	r1, [sp, #16]
 801e832:	9a05      	ldr	r2, [sp, #20]
 801e834:	2920      	cmp	r1, #32
 801e836:	d818      	bhi.n	801e86a <__hexnan+0x7e>
 801e838:	9b02      	ldr	r3, [sp, #8]
 801e83a:	459b      	cmp	fp, r3
 801e83c:	dd13      	ble.n	801e866 <__hexnan+0x7a>
 801e83e:	454c      	cmp	r4, r9
 801e840:	d206      	bcs.n	801e850 <__hexnan+0x64>
 801e842:	2d07      	cmp	r5, #7
 801e844:	dc04      	bgt.n	801e850 <__hexnan+0x64>
 801e846:	462a      	mov	r2, r5
 801e848:	4649      	mov	r1, r9
 801e84a:	4620      	mov	r0, r4
 801e84c:	f7ff ffa8 	bl	801e7a0 <L_shift>
 801e850:	4544      	cmp	r4, r8
 801e852:	d950      	bls.n	801e8f6 <__hexnan+0x10a>
 801e854:	2300      	movs	r3, #0
 801e856:	f1a4 0904 	sub.w	r9, r4, #4
 801e85a:	f844 3c04 	str.w	r3, [r4, #-4]
 801e85e:	f8cd b008 	str.w	fp, [sp, #8]
 801e862:	464c      	mov	r4, r9
 801e864:	461d      	mov	r5, r3
 801e866:	9a03      	ldr	r2, [sp, #12]
 801e868:	e7d7      	b.n	801e81a <__hexnan+0x2e>
 801e86a:	2929      	cmp	r1, #41	; 0x29
 801e86c:	d156      	bne.n	801e91c <__hexnan+0x130>
 801e86e:	3202      	adds	r2, #2
 801e870:	f8ca 2000 	str.w	r2, [sl]
 801e874:	f1bb 0f00 	cmp.w	fp, #0
 801e878:	d050      	beq.n	801e91c <__hexnan+0x130>
 801e87a:	454c      	cmp	r4, r9
 801e87c:	d206      	bcs.n	801e88c <__hexnan+0xa0>
 801e87e:	2d07      	cmp	r5, #7
 801e880:	dc04      	bgt.n	801e88c <__hexnan+0xa0>
 801e882:	462a      	mov	r2, r5
 801e884:	4649      	mov	r1, r9
 801e886:	4620      	mov	r0, r4
 801e888:	f7ff ff8a 	bl	801e7a0 <L_shift>
 801e88c:	4544      	cmp	r4, r8
 801e88e:	d934      	bls.n	801e8fa <__hexnan+0x10e>
 801e890:	f1a8 0204 	sub.w	r2, r8, #4
 801e894:	4623      	mov	r3, r4
 801e896:	f853 1b04 	ldr.w	r1, [r3], #4
 801e89a:	f842 1f04 	str.w	r1, [r2, #4]!
 801e89e:	429f      	cmp	r7, r3
 801e8a0:	d2f9      	bcs.n	801e896 <__hexnan+0xaa>
 801e8a2:	1b3b      	subs	r3, r7, r4
 801e8a4:	f023 0303 	bic.w	r3, r3, #3
 801e8a8:	3304      	adds	r3, #4
 801e8aa:	3401      	adds	r4, #1
 801e8ac:	3e03      	subs	r6, #3
 801e8ae:	42b4      	cmp	r4, r6
 801e8b0:	bf88      	it	hi
 801e8b2:	2304      	movhi	r3, #4
 801e8b4:	4443      	add	r3, r8
 801e8b6:	2200      	movs	r2, #0
 801e8b8:	f843 2b04 	str.w	r2, [r3], #4
 801e8bc:	429f      	cmp	r7, r3
 801e8be:	d2fb      	bcs.n	801e8b8 <__hexnan+0xcc>
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	b91b      	cbnz	r3, 801e8cc <__hexnan+0xe0>
 801e8c4:	4547      	cmp	r7, r8
 801e8c6:	d127      	bne.n	801e918 <__hexnan+0x12c>
 801e8c8:	2301      	movs	r3, #1
 801e8ca:	603b      	str	r3, [r7, #0]
 801e8cc:	2005      	movs	r0, #5
 801e8ce:	e026      	b.n	801e91e <__hexnan+0x132>
 801e8d0:	3501      	adds	r5, #1
 801e8d2:	2d08      	cmp	r5, #8
 801e8d4:	f10b 0b01 	add.w	fp, fp, #1
 801e8d8:	dd06      	ble.n	801e8e8 <__hexnan+0xfc>
 801e8da:	4544      	cmp	r4, r8
 801e8dc:	d9c3      	bls.n	801e866 <__hexnan+0x7a>
 801e8de:	2300      	movs	r3, #0
 801e8e0:	f844 3c04 	str.w	r3, [r4, #-4]
 801e8e4:	2501      	movs	r5, #1
 801e8e6:	3c04      	subs	r4, #4
 801e8e8:	6822      	ldr	r2, [r4, #0]
 801e8ea:	f000 000f 	and.w	r0, r0, #15
 801e8ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e8f2:	6022      	str	r2, [r4, #0]
 801e8f4:	e7b7      	b.n	801e866 <__hexnan+0x7a>
 801e8f6:	2508      	movs	r5, #8
 801e8f8:	e7b5      	b.n	801e866 <__hexnan+0x7a>
 801e8fa:	9b01      	ldr	r3, [sp, #4]
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d0df      	beq.n	801e8c0 <__hexnan+0xd4>
 801e900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e904:	f1c3 0320 	rsb	r3, r3, #32
 801e908:	fa22 f303 	lsr.w	r3, r2, r3
 801e90c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e910:	401a      	ands	r2, r3
 801e912:	f846 2c04 	str.w	r2, [r6, #-4]
 801e916:	e7d3      	b.n	801e8c0 <__hexnan+0xd4>
 801e918:	3f04      	subs	r7, #4
 801e91a:	e7d1      	b.n	801e8c0 <__hexnan+0xd4>
 801e91c:	2004      	movs	r0, #4
 801e91e:	b007      	add	sp, #28
 801e920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e924 <_localeconv_r>:
 801e924:	4800      	ldr	r0, [pc, #0]	; (801e928 <_localeconv_r+0x4>)
 801e926:	4770      	bx	lr
 801e928:	20000268 	.word	0x20000268

0801e92c <_lseek_r>:
 801e92c:	b538      	push	{r3, r4, r5, lr}
 801e92e:	4d07      	ldr	r5, [pc, #28]	; (801e94c <_lseek_r+0x20>)
 801e930:	4604      	mov	r4, r0
 801e932:	4608      	mov	r0, r1
 801e934:	4611      	mov	r1, r2
 801e936:	2200      	movs	r2, #0
 801e938:	602a      	str	r2, [r5, #0]
 801e93a:	461a      	mov	r2, r3
 801e93c:	f003 feb6 	bl	80226ac <_lseek>
 801e940:	1c43      	adds	r3, r0, #1
 801e942:	d102      	bne.n	801e94a <_lseek_r+0x1e>
 801e944:	682b      	ldr	r3, [r5, #0]
 801e946:	b103      	cbz	r3, 801e94a <_lseek_r+0x1e>
 801e948:	6023      	str	r3, [r4, #0]
 801e94a:	bd38      	pop	{r3, r4, r5, pc}
 801e94c:	2000f198 	.word	0x2000f198

0801e950 <malloc>:
 801e950:	4b02      	ldr	r3, [pc, #8]	; (801e95c <malloc+0xc>)
 801e952:	4601      	mov	r1, r0
 801e954:	6818      	ldr	r0, [r3, #0]
 801e956:	f7fc be5d 	b.w	801b614 <_malloc_r>
 801e95a:	bf00      	nop
 801e95c:	20000110 	.word	0x20000110

0801e960 <__ascii_mbtowc>:
 801e960:	b082      	sub	sp, #8
 801e962:	b901      	cbnz	r1, 801e966 <__ascii_mbtowc+0x6>
 801e964:	a901      	add	r1, sp, #4
 801e966:	b142      	cbz	r2, 801e97a <__ascii_mbtowc+0x1a>
 801e968:	b14b      	cbz	r3, 801e97e <__ascii_mbtowc+0x1e>
 801e96a:	7813      	ldrb	r3, [r2, #0]
 801e96c:	600b      	str	r3, [r1, #0]
 801e96e:	7812      	ldrb	r2, [r2, #0]
 801e970:	1e10      	subs	r0, r2, #0
 801e972:	bf18      	it	ne
 801e974:	2001      	movne	r0, #1
 801e976:	b002      	add	sp, #8
 801e978:	4770      	bx	lr
 801e97a:	4610      	mov	r0, r2
 801e97c:	e7fb      	b.n	801e976 <__ascii_mbtowc+0x16>
 801e97e:	f06f 0001 	mvn.w	r0, #1
 801e982:	e7f8      	b.n	801e976 <__ascii_mbtowc+0x16>

0801e984 <__malloc_lock>:
 801e984:	4801      	ldr	r0, [pc, #4]	; (801e98c <__malloc_lock+0x8>)
 801e986:	f7fc be0c 	b.w	801b5a2 <__retarget_lock_acquire_recursive>
 801e98a:	bf00      	nop
 801e98c:	2000f18c 	.word	0x2000f18c

0801e990 <__malloc_unlock>:
 801e990:	4801      	ldr	r0, [pc, #4]	; (801e998 <__malloc_unlock+0x8>)
 801e992:	f7fc be07 	b.w	801b5a4 <__retarget_lock_release_recursive>
 801e996:	bf00      	nop
 801e998:	2000f18c 	.word	0x2000f18c

0801e99c <_Balloc>:
 801e99c:	b570      	push	{r4, r5, r6, lr}
 801e99e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e9a0:	4604      	mov	r4, r0
 801e9a2:	460d      	mov	r5, r1
 801e9a4:	b976      	cbnz	r6, 801e9c4 <_Balloc+0x28>
 801e9a6:	2010      	movs	r0, #16
 801e9a8:	f7ff ffd2 	bl	801e950 <malloc>
 801e9ac:	4602      	mov	r2, r0
 801e9ae:	6260      	str	r0, [r4, #36]	; 0x24
 801e9b0:	b920      	cbnz	r0, 801e9bc <_Balloc+0x20>
 801e9b2:	4b18      	ldr	r3, [pc, #96]	; (801ea14 <_Balloc+0x78>)
 801e9b4:	4818      	ldr	r0, [pc, #96]	; (801ea18 <_Balloc+0x7c>)
 801e9b6:	2166      	movs	r1, #102	; 0x66
 801e9b8:	f000 feac 	bl	801f714 <__assert_func>
 801e9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e9c0:	6006      	str	r6, [r0, #0]
 801e9c2:	60c6      	str	r6, [r0, #12]
 801e9c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e9c6:	68f3      	ldr	r3, [r6, #12]
 801e9c8:	b183      	cbz	r3, 801e9ec <_Balloc+0x50>
 801e9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e9cc:	68db      	ldr	r3, [r3, #12]
 801e9ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e9d2:	b9b8      	cbnz	r0, 801ea04 <_Balloc+0x68>
 801e9d4:	2101      	movs	r1, #1
 801e9d6:	fa01 f605 	lsl.w	r6, r1, r5
 801e9da:	1d72      	adds	r2, r6, #5
 801e9dc:	0092      	lsls	r2, r2, #2
 801e9de:	4620      	mov	r0, r4
 801e9e0:	f000 fc9d 	bl	801f31e <_calloc_r>
 801e9e4:	b160      	cbz	r0, 801ea00 <_Balloc+0x64>
 801e9e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e9ea:	e00e      	b.n	801ea0a <_Balloc+0x6e>
 801e9ec:	2221      	movs	r2, #33	; 0x21
 801e9ee:	2104      	movs	r1, #4
 801e9f0:	4620      	mov	r0, r4
 801e9f2:	f000 fc94 	bl	801f31e <_calloc_r>
 801e9f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e9f8:	60f0      	str	r0, [r6, #12]
 801e9fa:	68db      	ldr	r3, [r3, #12]
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d1e4      	bne.n	801e9ca <_Balloc+0x2e>
 801ea00:	2000      	movs	r0, #0
 801ea02:	bd70      	pop	{r4, r5, r6, pc}
 801ea04:	6802      	ldr	r2, [r0, #0]
 801ea06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ea10:	e7f7      	b.n	801ea02 <_Balloc+0x66>
 801ea12:	bf00      	nop
 801ea14:	0802307e 	.word	0x0802307e
 801ea18:	0802317c 	.word	0x0802317c

0801ea1c <_Bfree>:
 801ea1c:	b570      	push	{r4, r5, r6, lr}
 801ea1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ea20:	4605      	mov	r5, r0
 801ea22:	460c      	mov	r4, r1
 801ea24:	b976      	cbnz	r6, 801ea44 <_Bfree+0x28>
 801ea26:	2010      	movs	r0, #16
 801ea28:	f7ff ff92 	bl	801e950 <malloc>
 801ea2c:	4602      	mov	r2, r0
 801ea2e:	6268      	str	r0, [r5, #36]	; 0x24
 801ea30:	b920      	cbnz	r0, 801ea3c <_Bfree+0x20>
 801ea32:	4b09      	ldr	r3, [pc, #36]	; (801ea58 <_Bfree+0x3c>)
 801ea34:	4809      	ldr	r0, [pc, #36]	; (801ea5c <_Bfree+0x40>)
 801ea36:	218a      	movs	r1, #138	; 0x8a
 801ea38:	f000 fe6c 	bl	801f714 <__assert_func>
 801ea3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ea40:	6006      	str	r6, [r0, #0]
 801ea42:	60c6      	str	r6, [r0, #12]
 801ea44:	b13c      	cbz	r4, 801ea56 <_Bfree+0x3a>
 801ea46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ea48:	6862      	ldr	r2, [r4, #4]
 801ea4a:	68db      	ldr	r3, [r3, #12]
 801ea4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ea50:	6021      	str	r1, [r4, #0]
 801ea52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ea56:	bd70      	pop	{r4, r5, r6, pc}
 801ea58:	0802307e 	.word	0x0802307e
 801ea5c:	0802317c 	.word	0x0802317c

0801ea60 <__multadd>:
 801ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea64:	690d      	ldr	r5, [r1, #16]
 801ea66:	4607      	mov	r7, r0
 801ea68:	460c      	mov	r4, r1
 801ea6a:	461e      	mov	r6, r3
 801ea6c:	f101 0c14 	add.w	ip, r1, #20
 801ea70:	2000      	movs	r0, #0
 801ea72:	f8dc 3000 	ldr.w	r3, [ip]
 801ea76:	b299      	uxth	r1, r3
 801ea78:	fb02 6101 	mla	r1, r2, r1, r6
 801ea7c:	0c1e      	lsrs	r6, r3, #16
 801ea7e:	0c0b      	lsrs	r3, r1, #16
 801ea80:	fb02 3306 	mla	r3, r2, r6, r3
 801ea84:	b289      	uxth	r1, r1
 801ea86:	3001      	adds	r0, #1
 801ea88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ea8c:	4285      	cmp	r5, r0
 801ea8e:	f84c 1b04 	str.w	r1, [ip], #4
 801ea92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ea96:	dcec      	bgt.n	801ea72 <__multadd+0x12>
 801ea98:	b30e      	cbz	r6, 801eade <__multadd+0x7e>
 801ea9a:	68a3      	ldr	r3, [r4, #8]
 801ea9c:	42ab      	cmp	r3, r5
 801ea9e:	dc19      	bgt.n	801ead4 <__multadd+0x74>
 801eaa0:	6861      	ldr	r1, [r4, #4]
 801eaa2:	4638      	mov	r0, r7
 801eaa4:	3101      	adds	r1, #1
 801eaa6:	f7ff ff79 	bl	801e99c <_Balloc>
 801eaaa:	4680      	mov	r8, r0
 801eaac:	b928      	cbnz	r0, 801eaba <__multadd+0x5a>
 801eaae:	4602      	mov	r2, r0
 801eab0:	4b0c      	ldr	r3, [pc, #48]	; (801eae4 <__multadd+0x84>)
 801eab2:	480d      	ldr	r0, [pc, #52]	; (801eae8 <__multadd+0x88>)
 801eab4:	21b5      	movs	r1, #181	; 0xb5
 801eab6:	f000 fe2d 	bl	801f714 <__assert_func>
 801eaba:	6922      	ldr	r2, [r4, #16]
 801eabc:	3202      	adds	r2, #2
 801eabe:	f104 010c 	add.w	r1, r4, #12
 801eac2:	0092      	lsls	r2, r2, #2
 801eac4:	300c      	adds	r0, #12
 801eac6:	f7fc fd6e 	bl	801b5a6 <memcpy>
 801eaca:	4621      	mov	r1, r4
 801eacc:	4638      	mov	r0, r7
 801eace:	f7ff ffa5 	bl	801ea1c <_Bfree>
 801ead2:	4644      	mov	r4, r8
 801ead4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ead8:	3501      	adds	r5, #1
 801eada:	615e      	str	r6, [r3, #20]
 801eadc:	6125      	str	r5, [r4, #16]
 801eade:	4620      	mov	r0, r4
 801eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eae4:	080230f0 	.word	0x080230f0
 801eae8:	0802317c 	.word	0x0802317c

0801eaec <__s2b>:
 801eaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eaf0:	460c      	mov	r4, r1
 801eaf2:	4615      	mov	r5, r2
 801eaf4:	461f      	mov	r7, r3
 801eaf6:	2209      	movs	r2, #9
 801eaf8:	3308      	adds	r3, #8
 801eafa:	4606      	mov	r6, r0
 801eafc:	fb93 f3f2 	sdiv	r3, r3, r2
 801eb00:	2100      	movs	r1, #0
 801eb02:	2201      	movs	r2, #1
 801eb04:	429a      	cmp	r2, r3
 801eb06:	db09      	blt.n	801eb1c <__s2b+0x30>
 801eb08:	4630      	mov	r0, r6
 801eb0a:	f7ff ff47 	bl	801e99c <_Balloc>
 801eb0e:	b940      	cbnz	r0, 801eb22 <__s2b+0x36>
 801eb10:	4602      	mov	r2, r0
 801eb12:	4b19      	ldr	r3, [pc, #100]	; (801eb78 <__s2b+0x8c>)
 801eb14:	4819      	ldr	r0, [pc, #100]	; (801eb7c <__s2b+0x90>)
 801eb16:	21ce      	movs	r1, #206	; 0xce
 801eb18:	f000 fdfc 	bl	801f714 <__assert_func>
 801eb1c:	0052      	lsls	r2, r2, #1
 801eb1e:	3101      	adds	r1, #1
 801eb20:	e7f0      	b.n	801eb04 <__s2b+0x18>
 801eb22:	9b08      	ldr	r3, [sp, #32]
 801eb24:	6143      	str	r3, [r0, #20]
 801eb26:	2d09      	cmp	r5, #9
 801eb28:	f04f 0301 	mov.w	r3, #1
 801eb2c:	6103      	str	r3, [r0, #16]
 801eb2e:	dd16      	ble.n	801eb5e <__s2b+0x72>
 801eb30:	f104 0909 	add.w	r9, r4, #9
 801eb34:	46c8      	mov	r8, r9
 801eb36:	442c      	add	r4, r5
 801eb38:	f818 3b01 	ldrb.w	r3, [r8], #1
 801eb3c:	4601      	mov	r1, r0
 801eb3e:	3b30      	subs	r3, #48	; 0x30
 801eb40:	220a      	movs	r2, #10
 801eb42:	4630      	mov	r0, r6
 801eb44:	f7ff ff8c 	bl	801ea60 <__multadd>
 801eb48:	45a0      	cmp	r8, r4
 801eb4a:	d1f5      	bne.n	801eb38 <__s2b+0x4c>
 801eb4c:	f1a5 0408 	sub.w	r4, r5, #8
 801eb50:	444c      	add	r4, r9
 801eb52:	1b2d      	subs	r5, r5, r4
 801eb54:	1963      	adds	r3, r4, r5
 801eb56:	42bb      	cmp	r3, r7
 801eb58:	db04      	blt.n	801eb64 <__s2b+0x78>
 801eb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb5e:	340a      	adds	r4, #10
 801eb60:	2509      	movs	r5, #9
 801eb62:	e7f6      	b.n	801eb52 <__s2b+0x66>
 801eb64:	f814 3b01 	ldrb.w	r3, [r4], #1
 801eb68:	4601      	mov	r1, r0
 801eb6a:	3b30      	subs	r3, #48	; 0x30
 801eb6c:	220a      	movs	r2, #10
 801eb6e:	4630      	mov	r0, r6
 801eb70:	f7ff ff76 	bl	801ea60 <__multadd>
 801eb74:	e7ee      	b.n	801eb54 <__s2b+0x68>
 801eb76:	bf00      	nop
 801eb78:	080230f0 	.word	0x080230f0
 801eb7c:	0802317c 	.word	0x0802317c

0801eb80 <__hi0bits>:
 801eb80:	0c03      	lsrs	r3, r0, #16
 801eb82:	041b      	lsls	r3, r3, #16
 801eb84:	b9d3      	cbnz	r3, 801ebbc <__hi0bits+0x3c>
 801eb86:	0400      	lsls	r0, r0, #16
 801eb88:	2310      	movs	r3, #16
 801eb8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801eb8e:	bf04      	itt	eq
 801eb90:	0200      	lsleq	r0, r0, #8
 801eb92:	3308      	addeq	r3, #8
 801eb94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801eb98:	bf04      	itt	eq
 801eb9a:	0100      	lsleq	r0, r0, #4
 801eb9c:	3304      	addeq	r3, #4
 801eb9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801eba2:	bf04      	itt	eq
 801eba4:	0080      	lsleq	r0, r0, #2
 801eba6:	3302      	addeq	r3, #2
 801eba8:	2800      	cmp	r0, #0
 801ebaa:	db05      	blt.n	801ebb8 <__hi0bits+0x38>
 801ebac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ebb0:	f103 0301 	add.w	r3, r3, #1
 801ebb4:	bf08      	it	eq
 801ebb6:	2320      	moveq	r3, #32
 801ebb8:	4618      	mov	r0, r3
 801ebba:	4770      	bx	lr
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	e7e4      	b.n	801eb8a <__hi0bits+0xa>

0801ebc0 <__lo0bits>:
 801ebc0:	6803      	ldr	r3, [r0, #0]
 801ebc2:	f013 0207 	ands.w	r2, r3, #7
 801ebc6:	4601      	mov	r1, r0
 801ebc8:	d00b      	beq.n	801ebe2 <__lo0bits+0x22>
 801ebca:	07da      	lsls	r2, r3, #31
 801ebcc:	d423      	bmi.n	801ec16 <__lo0bits+0x56>
 801ebce:	0798      	lsls	r0, r3, #30
 801ebd0:	bf49      	itett	mi
 801ebd2:	085b      	lsrmi	r3, r3, #1
 801ebd4:	089b      	lsrpl	r3, r3, #2
 801ebd6:	2001      	movmi	r0, #1
 801ebd8:	600b      	strmi	r3, [r1, #0]
 801ebda:	bf5c      	itt	pl
 801ebdc:	600b      	strpl	r3, [r1, #0]
 801ebde:	2002      	movpl	r0, #2
 801ebe0:	4770      	bx	lr
 801ebe2:	b298      	uxth	r0, r3
 801ebe4:	b9a8      	cbnz	r0, 801ec12 <__lo0bits+0x52>
 801ebe6:	0c1b      	lsrs	r3, r3, #16
 801ebe8:	2010      	movs	r0, #16
 801ebea:	b2da      	uxtb	r2, r3
 801ebec:	b90a      	cbnz	r2, 801ebf2 <__lo0bits+0x32>
 801ebee:	3008      	adds	r0, #8
 801ebf0:	0a1b      	lsrs	r3, r3, #8
 801ebf2:	071a      	lsls	r2, r3, #28
 801ebf4:	bf04      	itt	eq
 801ebf6:	091b      	lsreq	r3, r3, #4
 801ebf8:	3004      	addeq	r0, #4
 801ebfa:	079a      	lsls	r2, r3, #30
 801ebfc:	bf04      	itt	eq
 801ebfe:	089b      	lsreq	r3, r3, #2
 801ec00:	3002      	addeq	r0, #2
 801ec02:	07da      	lsls	r2, r3, #31
 801ec04:	d403      	bmi.n	801ec0e <__lo0bits+0x4e>
 801ec06:	085b      	lsrs	r3, r3, #1
 801ec08:	f100 0001 	add.w	r0, r0, #1
 801ec0c:	d005      	beq.n	801ec1a <__lo0bits+0x5a>
 801ec0e:	600b      	str	r3, [r1, #0]
 801ec10:	4770      	bx	lr
 801ec12:	4610      	mov	r0, r2
 801ec14:	e7e9      	b.n	801ebea <__lo0bits+0x2a>
 801ec16:	2000      	movs	r0, #0
 801ec18:	4770      	bx	lr
 801ec1a:	2020      	movs	r0, #32
 801ec1c:	4770      	bx	lr
	...

0801ec20 <__i2b>:
 801ec20:	b510      	push	{r4, lr}
 801ec22:	460c      	mov	r4, r1
 801ec24:	2101      	movs	r1, #1
 801ec26:	f7ff feb9 	bl	801e99c <_Balloc>
 801ec2a:	4602      	mov	r2, r0
 801ec2c:	b928      	cbnz	r0, 801ec3a <__i2b+0x1a>
 801ec2e:	4b05      	ldr	r3, [pc, #20]	; (801ec44 <__i2b+0x24>)
 801ec30:	4805      	ldr	r0, [pc, #20]	; (801ec48 <__i2b+0x28>)
 801ec32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ec36:	f000 fd6d 	bl	801f714 <__assert_func>
 801ec3a:	2301      	movs	r3, #1
 801ec3c:	6144      	str	r4, [r0, #20]
 801ec3e:	6103      	str	r3, [r0, #16]
 801ec40:	bd10      	pop	{r4, pc}
 801ec42:	bf00      	nop
 801ec44:	080230f0 	.word	0x080230f0
 801ec48:	0802317c 	.word	0x0802317c

0801ec4c <__multiply>:
 801ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec50:	4691      	mov	r9, r2
 801ec52:	690a      	ldr	r2, [r1, #16]
 801ec54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ec58:	429a      	cmp	r2, r3
 801ec5a:	bfb8      	it	lt
 801ec5c:	460b      	movlt	r3, r1
 801ec5e:	460c      	mov	r4, r1
 801ec60:	bfbc      	itt	lt
 801ec62:	464c      	movlt	r4, r9
 801ec64:	4699      	movlt	r9, r3
 801ec66:	6927      	ldr	r7, [r4, #16]
 801ec68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ec6c:	68a3      	ldr	r3, [r4, #8]
 801ec6e:	6861      	ldr	r1, [r4, #4]
 801ec70:	eb07 060a 	add.w	r6, r7, sl
 801ec74:	42b3      	cmp	r3, r6
 801ec76:	b085      	sub	sp, #20
 801ec78:	bfb8      	it	lt
 801ec7a:	3101      	addlt	r1, #1
 801ec7c:	f7ff fe8e 	bl	801e99c <_Balloc>
 801ec80:	b930      	cbnz	r0, 801ec90 <__multiply+0x44>
 801ec82:	4602      	mov	r2, r0
 801ec84:	4b44      	ldr	r3, [pc, #272]	; (801ed98 <__multiply+0x14c>)
 801ec86:	4845      	ldr	r0, [pc, #276]	; (801ed9c <__multiply+0x150>)
 801ec88:	f240 115d 	movw	r1, #349	; 0x15d
 801ec8c:	f000 fd42 	bl	801f714 <__assert_func>
 801ec90:	f100 0514 	add.w	r5, r0, #20
 801ec94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ec98:	462b      	mov	r3, r5
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	4543      	cmp	r3, r8
 801ec9e:	d321      	bcc.n	801ece4 <__multiply+0x98>
 801eca0:	f104 0314 	add.w	r3, r4, #20
 801eca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801eca8:	f109 0314 	add.w	r3, r9, #20
 801ecac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801ecb0:	9202      	str	r2, [sp, #8]
 801ecb2:	1b3a      	subs	r2, r7, r4
 801ecb4:	3a15      	subs	r2, #21
 801ecb6:	f022 0203 	bic.w	r2, r2, #3
 801ecba:	3204      	adds	r2, #4
 801ecbc:	f104 0115 	add.w	r1, r4, #21
 801ecc0:	428f      	cmp	r7, r1
 801ecc2:	bf38      	it	cc
 801ecc4:	2204      	movcc	r2, #4
 801ecc6:	9201      	str	r2, [sp, #4]
 801ecc8:	9a02      	ldr	r2, [sp, #8]
 801ecca:	9303      	str	r3, [sp, #12]
 801eccc:	429a      	cmp	r2, r3
 801ecce:	d80c      	bhi.n	801ecea <__multiply+0x9e>
 801ecd0:	2e00      	cmp	r6, #0
 801ecd2:	dd03      	ble.n	801ecdc <__multiply+0x90>
 801ecd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d05a      	beq.n	801ed92 <__multiply+0x146>
 801ecdc:	6106      	str	r6, [r0, #16]
 801ecde:	b005      	add	sp, #20
 801ece0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ece4:	f843 2b04 	str.w	r2, [r3], #4
 801ece8:	e7d8      	b.n	801ec9c <__multiply+0x50>
 801ecea:	f8b3 a000 	ldrh.w	sl, [r3]
 801ecee:	f1ba 0f00 	cmp.w	sl, #0
 801ecf2:	d024      	beq.n	801ed3e <__multiply+0xf2>
 801ecf4:	f104 0e14 	add.w	lr, r4, #20
 801ecf8:	46a9      	mov	r9, r5
 801ecfa:	f04f 0c00 	mov.w	ip, #0
 801ecfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ed02:	f8d9 1000 	ldr.w	r1, [r9]
 801ed06:	fa1f fb82 	uxth.w	fp, r2
 801ed0a:	b289      	uxth	r1, r1
 801ed0c:	fb0a 110b 	mla	r1, sl, fp, r1
 801ed10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ed14:	f8d9 2000 	ldr.w	r2, [r9]
 801ed18:	4461      	add	r1, ip
 801ed1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ed1e:	fb0a c20b 	mla	r2, sl, fp, ip
 801ed22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ed26:	b289      	uxth	r1, r1
 801ed28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ed2c:	4577      	cmp	r7, lr
 801ed2e:	f849 1b04 	str.w	r1, [r9], #4
 801ed32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ed36:	d8e2      	bhi.n	801ecfe <__multiply+0xb2>
 801ed38:	9a01      	ldr	r2, [sp, #4]
 801ed3a:	f845 c002 	str.w	ip, [r5, r2]
 801ed3e:	9a03      	ldr	r2, [sp, #12]
 801ed40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ed44:	3304      	adds	r3, #4
 801ed46:	f1b9 0f00 	cmp.w	r9, #0
 801ed4a:	d020      	beq.n	801ed8e <__multiply+0x142>
 801ed4c:	6829      	ldr	r1, [r5, #0]
 801ed4e:	f104 0c14 	add.w	ip, r4, #20
 801ed52:	46ae      	mov	lr, r5
 801ed54:	f04f 0a00 	mov.w	sl, #0
 801ed58:	f8bc b000 	ldrh.w	fp, [ip]
 801ed5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ed60:	fb09 220b 	mla	r2, r9, fp, r2
 801ed64:	4492      	add	sl, r2
 801ed66:	b289      	uxth	r1, r1
 801ed68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ed6c:	f84e 1b04 	str.w	r1, [lr], #4
 801ed70:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ed74:	f8be 1000 	ldrh.w	r1, [lr]
 801ed78:	0c12      	lsrs	r2, r2, #16
 801ed7a:	fb09 1102 	mla	r1, r9, r2, r1
 801ed7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ed82:	4567      	cmp	r7, ip
 801ed84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ed88:	d8e6      	bhi.n	801ed58 <__multiply+0x10c>
 801ed8a:	9a01      	ldr	r2, [sp, #4]
 801ed8c:	50a9      	str	r1, [r5, r2]
 801ed8e:	3504      	adds	r5, #4
 801ed90:	e79a      	b.n	801ecc8 <__multiply+0x7c>
 801ed92:	3e01      	subs	r6, #1
 801ed94:	e79c      	b.n	801ecd0 <__multiply+0x84>
 801ed96:	bf00      	nop
 801ed98:	080230f0 	.word	0x080230f0
 801ed9c:	0802317c 	.word	0x0802317c

0801eda0 <__pow5mult>:
 801eda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eda4:	4615      	mov	r5, r2
 801eda6:	f012 0203 	ands.w	r2, r2, #3
 801edaa:	4606      	mov	r6, r0
 801edac:	460f      	mov	r7, r1
 801edae:	d007      	beq.n	801edc0 <__pow5mult+0x20>
 801edb0:	4c25      	ldr	r4, [pc, #148]	; (801ee48 <__pow5mult+0xa8>)
 801edb2:	3a01      	subs	r2, #1
 801edb4:	2300      	movs	r3, #0
 801edb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801edba:	f7ff fe51 	bl	801ea60 <__multadd>
 801edbe:	4607      	mov	r7, r0
 801edc0:	10ad      	asrs	r5, r5, #2
 801edc2:	d03d      	beq.n	801ee40 <__pow5mult+0xa0>
 801edc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801edc6:	b97c      	cbnz	r4, 801ede8 <__pow5mult+0x48>
 801edc8:	2010      	movs	r0, #16
 801edca:	f7ff fdc1 	bl	801e950 <malloc>
 801edce:	4602      	mov	r2, r0
 801edd0:	6270      	str	r0, [r6, #36]	; 0x24
 801edd2:	b928      	cbnz	r0, 801ede0 <__pow5mult+0x40>
 801edd4:	4b1d      	ldr	r3, [pc, #116]	; (801ee4c <__pow5mult+0xac>)
 801edd6:	481e      	ldr	r0, [pc, #120]	; (801ee50 <__pow5mult+0xb0>)
 801edd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801eddc:	f000 fc9a 	bl	801f714 <__assert_func>
 801ede0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ede4:	6004      	str	r4, [r0, #0]
 801ede6:	60c4      	str	r4, [r0, #12]
 801ede8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801edec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801edf0:	b94c      	cbnz	r4, 801ee06 <__pow5mult+0x66>
 801edf2:	f240 2171 	movw	r1, #625	; 0x271
 801edf6:	4630      	mov	r0, r6
 801edf8:	f7ff ff12 	bl	801ec20 <__i2b>
 801edfc:	2300      	movs	r3, #0
 801edfe:	f8c8 0008 	str.w	r0, [r8, #8]
 801ee02:	4604      	mov	r4, r0
 801ee04:	6003      	str	r3, [r0, #0]
 801ee06:	f04f 0900 	mov.w	r9, #0
 801ee0a:	07eb      	lsls	r3, r5, #31
 801ee0c:	d50a      	bpl.n	801ee24 <__pow5mult+0x84>
 801ee0e:	4639      	mov	r1, r7
 801ee10:	4622      	mov	r2, r4
 801ee12:	4630      	mov	r0, r6
 801ee14:	f7ff ff1a 	bl	801ec4c <__multiply>
 801ee18:	4639      	mov	r1, r7
 801ee1a:	4680      	mov	r8, r0
 801ee1c:	4630      	mov	r0, r6
 801ee1e:	f7ff fdfd 	bl	801ea1c <_Bfree>
 801ee22:	4647      	mov	r7, r8
 801ee24:	106d      	asrs	r5, r5, #1
 801ee26:	d00b      	beq.n	801ee40 <__pow5mult+0xa0>
 801ee28:	6820      	ldr	r0, [r4, #0]
 801ee2a:	b938      	cbnz	r0, 801ee3c <__pow5mult+0x9c>
 801ee2c:	4622      	mov	r2, r4
 801ee2e:	4621      	mov	r1, r4
 801ee30:	4630      	mov	r0, r6
 801ee32:	f7ff ff0b 	bl	801ec4c <__multiply>
 801ee36:	6020      	str	r0, [r4, #0]
 801ee38:	f8c0 9000 	str.w	r9, [r0]
 801ee3c:	4604      	mov	r4, r0
 801ee3e:	e7e4      	b.n	801ee0a <__pow5mult+0x6a>
 801ee40:	4638      	mov	r0, r7
 801ee42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee46:	bf00      	nop
 801ee48:	080232c8 	.word	0x080232c8
 801ee4c:	0802307e 	.word	0x0802307e
 801ee50:	0802317c 	.word	0x0802317c

0801ee54 <__lshift>:
 801ee54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee58:	460c      	mov	r4, r1
 801ee5a:	6849      	ldr	r1, [r1, #4]
 801ee5c:	6923      	ldr	r3, [r4, #16]
 801ee5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ee62:	68a3      	ldr	r3, [r4, #8]
 801ee64:	4607      	mov	r7, r0
 801ee66:	4691      	mov	r9, r2
 801ee68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ee6c:	f108 0601 	add.w	r6, r8, #1
 801ee70:	42b3      	cmp	r3, r6
 801ee72:	db0b      	blt.n	801ee8c <__lshift+0x38>
 801ee74:	4638      	mov	r0, r7
 801ee76:	f7ff fd91 	bl	801e99c <_Balloc>
 801ee7a:	4605      	mov	r5, r0
 801ee7c:	b948      	cbnz	r0, 801ee92 <__lshift+0x3e>
 801ee7e:	4602      	mov	r2, r0
 801ee80:	4b2a      	ldr	r3, [pc, #168]	; (801ef2c <__lshift+0xd8>)
 801ee82:	482b      	ldr	r0, [pc, #172]	; (801ef30 <__lshift+0xdc>)
 801ee84:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ee88:	f000 fc44 	bl	801f714 <__assert_func>
 801ee8c:	3101      	adds	r1, #1
 801ee8e:	005b      	lsls	r3, r3, #1
 801ee90:	e7ee      	b.n	801ee70 <__lshift+0x1c>
 801ee92:	2300      	movs	r3, #0
 801ee94:	f100 0114 	add.w	r1, r0, #20
 801ee98:	f100 0210 	add.w	r2, r0, #16
 801ee9c:	4618      	mov	r0, r3
 801ee9e:	4553      	cmp	r3, sl
 801eea0:	db37      	blt.n	801ef12 <__lshift+0xbe>
 801eea2:	6920      	ldr	r0, [r4, #16]
 801eea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eea8:	f104 0314 	add.w	r3, r4, #20
 801eeac:	f019 091f 	ands.w	r9, r9, #31
 801eeb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eeb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801eeb8:	d02f      	beq.n	801ef1a <__lshift+0xc6>
 801eeba:	f1c9 0e20 	rsb	lr, r9, #32
 801eebe:	468a      	mov	sl, r1
 801eec0:	f04f 0c00 	mov.w	ip, #0
 801eec4:	681a      	ldr	r2, [r3, #0]
 801eec6:	fa02 f209 	lsl.w	r2, r2, r9
 801eeca:	ea42 020c 	orr.w	r2, r2, ip
 801eece:	f84a 2b04 	str.w	r2, [sl], #4
 801eed2:	f853 2b04 	ldr.w	r2, [r3], #4
 801eed6:	4298      	cmp	r0, r3
 801eed8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801eedc:	d8f2      	bhi.n	801eec4 <__lshift+0x70>
 801eede:	1b03      	subs	r3, r0, r4
 801eee0:	3b15      	subs	r3, #21
 801eee2:	f023 0303 	bic.w	r3, r3, #3
 801eee6:	3304      	adds	r3, #4
 801eee8:	f104 0215 	add.w	r2, r4, #21
 801eeec:	4290      	cmp	r0, r2
 801eeee:	bf38      	it	cc
 801eef0:	2304      	movcc	r3, #4
 801eef2:	f841 c003 	str.w	ip, [r1, r3]
 801eef6:	f1bc 0f00 	cmp.w	ip, #0
 801eefa:	d001      	beq.n	801ef00 <__lshift+0xac>
 801eefc:	f108 0602 	add.w	r6, r8, #2
 801ef00:	3e01      	subs	r6, #1
 801ef02:	4638      	mov	r0, r7
 801ef04:	612e      	str	r6, [r5, #16]
 801ef06:	4621      	mov	r1, r4
 801ef08:	f7ff fd88 	bl	801ea1c <_Bfree>
 801ef0c:	4628      	mov	r0, r5
 801ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef12:	f842 0f04 	str.w	r0, [r2, #4]!
 801ef16:	3301      	adds	r3, #1
 801ef18:	e7c1      	b.n	801ee9e <__lshift+0x4a>
 801ef1a:	3904      	subs	r1, #4
 801ef1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef20:	f841 2f04 	str.w	r2, [r1, #4]!
 801ef24:	4298      	cmp	r0, r3
 801ef26:	d8f9      	bhi.n	801ef1c <__lshift+0xc8>
 801ef28:	e7ea      	b.n	801ef00 <__lshift+0xac>
 801ef2a:	bf00      	nop
 801ef2c:	080230f0 	.word	0x080230f0
 801ef30:	0802317c 	.word	0x0802317c

0801ef34 <__mcmp>:
 801ef34:	b530      	push	{r4, r5, lr}
 801ef36:	6902      	ldr	r2, [r0, #16]
 801ef38:	690c      	ldr	r4, [r1, #16]
 801ef3a:	1b12      	subs	r2, r2, r4
 801ef3c:	d10e      	bne.n	801ef5c <__mcmp+0x28>
 801ef3e:	f100 0314 	add.w	r3, r0, #20
 801ef42:	3114      	adds	r1, #20
 801ef44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ef48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ef4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ef50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ef54:	42a5      	cmp	r5, r4
 801ef56:	d003      	beq.n	801ef60 <__mcmp+0x2c>
 801ef58:	d305      	bcc.n	801ef66 <__mcmp+0x32>
 801ef5a:	2201      	movs	r2, #1
 801ef5c:	4610      	mov	r0, r2
 801ef5e:	bd30      	pop	{r4, r5, pc}
 801ef60:	4283      	cmp	r3, r0
 801ef62:	d3f3      	bcc.n	801ef4c <__mcmp+0x18>
 801ef64:	e7fa      	b.n	801ef5c <__mcmp+0x28>
 801ef66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ef6a:	e7f7      	b.n	801ef5c <__mcmp+0x28>

0801ef6c <__mdiff>:
 801ef6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef70:	460c      	mov	r4, r1
 801ef72:	4606      	mov	r6, r0
 801ef74:	4611      	mov	r1, r2
 801ef76:	4620      	mov	r0, r4
 801ef78:	4690      	mov	r8, r2
 801ef7a:	f7ff ffdb 	bl	801ef34 <__mcmp>
 801ef7e:	1e05      	subs	r5, r0, #0
 801ef80:	d110      	bne.n	801efa4 <__mdiff+0x38>
 801ef82:	4629      	mov	r1, r5
 801ef84:	4630      	mov	r0, r6
 801ef86:	f7ff fd09 	bl	801e99c <_Balloc>
 801ef8a:	b930      	cbnz	r0, 801ef9a <__mdiff+0x2e>
 801ef8c:	4b3a      	ldr	r3, [pc, #232]	; (801f078 <__mdiff+0x10c>)
 801ef8e:	4602      	mov	r2, r0
 801ef90:	f240 2132 	movw	r1, #562	; 0x232
 801ef94:	4839      	ldr	r0, [pc, #228]	; (801f07c <__mdiff+0x110>)
 801ef96:	f000 fbbd 	bl	801f714 <__assert_func>
 801ef9a:	2301      	movs	r3, #1
 801ef9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801efa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efa4:	bfa4      	itt	ge
 801efa6:	4643      	movge	r3, r8
 801efa8:	46a0      	movge	r8, r4
 801efaa:	4630      	mov	r0, r6
 801efac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801efb0:	bfa6      	itte	ge
 801efb2:	461c      	movge	r4, r3
 801efb4:	2500      	movge	r5, #0
 801efb6:	2501      	movlt	r5, #1
 801efb8:	f7ff fcf0 	bl	801e99c <_Balloc>
 801efbc:	b920      	cbnz	r0, 801efc8 <__mdiff+0x5c>
 801efbe:	4b2e      	ldr	r3, [pc, #184]	; (801f078 <__mdiff+0x10c>)
 801efc0:	4602      	mov	r2, r0
 801efc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801efc6:	e7e5      	b.n	801ef94 <__mdiff+0x28>
 801efc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801efcc:	6926      	ldr	r6, [r4, #16]
 801efce:	60c5      	str	r5, [r0, #12]
 801efd0:	f104 0914 	add.w	r9, r4, #20
 801efd4:	f108 0514 	add.w	r5, r8, #20
 801efd8:	f100 0e14 	add.w	lr, r0, #20
 801efdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801efe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801efe4:	f108 0210 	add.w	r2, r8, #16
 801efe8:	46f2      	mov	sl, lr
 801efea:	2100      	movs	r1, #0
 801efec:	f859 3b04 	ldr.w	r3, [r9], #4
 801eff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801eff4:	fa1f f883 	uxth.w	r8, r3
 801eff8:	fa11 f18b 	uxtah	r1, r1, fp
 801effc:	0c1b      	lsrs	r3, r3, #16
 801effe:	eba1 0808 	sub.w	r8, r1, r8
 801f002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f006:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f00a:	fa1f f888 	uxth.w	r8, r8
 801f00e:	1419      	asrs	r1, r3, #16
 801f010:	454e      	cmp	r6, r9
 801f012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f016:	f84a 3b04 	str.w	r3, [sl], #4
 801f01a:	d8e7      	bhi.n	801efec <__mdiff+0x80>
 801f01c:	1b33      	subs	r3, r6, r4
 801f01e:	3b15      	subs	r3, #21
 801f020:	f023 0303 	bic.w	r3, r3, #3
 801f024:	3304      	adds	r3, #4
 801f026:	3415      	adds	r4, #21
 801f028:	42a6      	cmp	r6, r4
 801f02a:	bf38      	it	cc
 801f02c:	2304      	movcc	r3, #4
 801f02e:	441d      	add	r5, r3
 801f030:	4473      	add	r3, lr
 801f032:	469e      	mov	lr, r3
 801f034:	462e      	mov	r6, r5
 801f036:	4566      	cmp	r6, ip
 801f038:	d30e      	bcc.n	801f058 <__mdiff+0xec>
 801f03a:	f10c 0203 	add.w	r2, ip, #3
 801f03e:	1b52      	subs	r2, r2, r5
 801f040:	f022 0203 	bic.w	r2, r2, #3
 801f044:	3d03      	subs	r5, #3
 801f046:	45ac      	cmp	ip, r5
 801f048:	bf38      	it	cc
 801f04a:	2200      	movcc	r2, #0
 801f04c:	441a      	add	r2, r3
 801f04e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f052:	b17b      	cbz	r3, 801f074 <__mdiff+0x108>
 801f054:	6107      	str	r7, [r0, #16]
 801f056:	e7a3      	b.n	801efa0 <__mdiff+0x34>
 801f058:	f856 8b04 	ldr.w	r8, [r6], #4
 801f05c:	fa11 f288 	uxtah	r2, r1, r8
 801f060:	1414      	asrs	r4, r2, #16
 801f062:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f066:	b292      	uxth	r2, r2
 801f068:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f06c:	f84e 2b04 	str.w	r2, [lr], #4
 801f070:	1421      	asrs	r1, r4, #16
 801f072:	e7e0      	b.n	801f036 <__mdiff+0xca>
 801f074:	3f01      	subs	r7, #1
 801f076:	e7ea      	b.n	801f04e <__mdiff+0xe2>
 801f078:	080230f0 	.word	0x080230f0
 801f07c:	0802317c 	.word	0x0802317c

0801f080 <__ulp>:
 801f080:	b082      	sub	sp, #8
 801f082:	ed8d 0b00 	vstr	d0, [sp]
 801f086:	9b01      	ldr	r3, [sp, #4]
 801f088:	4912      	ldr	r1, [pc, #72]	; (801f0d4 <__ulp+0x54>)
 801f08a:	4019      	ands	r1, r3
 801f08c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f090:	2900      	cmp	r1, #0
 801f092:	dd05      	ble.n	801f0a0 <__ulp+0x20>
 801f094:	2200      	movs	r2, #0
 801f096:	460b      	mov	r3, r1
 801f098:	ec43 2b10 	vmov	d0, r2, r3
 801f09c:	b002      	add	sp, #8
 801f09e:	4770      	bx	lr
 801f0a0:	4249      	negs	r1, r1
 801f0a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f0a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f0aa:	f04f 0200 	mov.w	r2, #0
 801f0ae:	f04f 0300 	mov.w	r3, #0
 801f0b2:	da04      	bge.n	801f0be <__ulp+0x3e>
 801f0b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f0b8:	fa41 f300 	asr.w	r3, r1, r0
 801f0bc:	e7ec      	b.n	801f098 <__ulp+0x18>
 801f0be:	f1a0 0114 	sub.w	r1, r0, #20
 801f0c2:	291e      	cmp	r1, #30
 801f0c4:	bfda      	itte	le
 801f0c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f0ca:	fa20 f101 	lsrle.w	r1, r0, r1
 801f0ce:	2101      	movgt	r1, #1
 801f0d0:	460a      	mov	r2, r1
 801f0d2:	e7e1      	b.n	801f098 <__ulp+0x18>
 801f0d4:	7ff00000 	.word	0x7ff00000

0801f0d8 <__b2d>:
 801f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0da:	6905      	ldr	r5, [r0, #16]
 801f0dc:	f100 0714 	add.w	r7, r0, #20
 801f0e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f0e4:	1f2e      	subs	r6, r5, #4
 801f0e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f7ff fd48 	bl	801eb80 <__hi0bits>
 801f0f0:	f1c0 0320 	rsb	r3, r0, #32
 801f0f4:	280a      	cmp	r0, #10
 801f0f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f174 <__b2d+0x9c>
 801f0fa:	600b      	str	r3, [r1, #0]
 801f0fc:	dc14      	bgt.n	801f128 <__b2d+0x50>
 801f0fe:	f1c0 0e0b 	rsb	lr, r0, #11
 801f102:	fa24 f10e 	lsr.w	r1, r4, lr
 801f106:	42b7      	cmp	r7, r6
 801f108:	ea41 030c 	orr.w	r3, r1, ip
 801f10c:	bf34      	ite	cc
 801f10e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f112:	2100      	movcs	r1, #0
 801f114:	3015      	adds	r0, #21
 801f116:	fa04 f000 	lsl.w	r0, r4, r0
 801f11a:	fa21 f10e 	lsr.w	r1, r1, lr
 801f11e:	ea40 0201 	orr.w	r2, r0, r1
 801f122:	ec43 2b10 	vmov	d0, r2, r3
 801f126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f128:	42b7      	cmp	r7, r6
 801f12a:	bf3a      	itte	cc
 801f12c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f130:	f1a5 0608 	subcc.w	r6, r5, #8
 801f134:	2100      	movcs	r1, #0
 801f136:	380b      	subs	r0, #11
 801f138:	d017      	beq.n	801f16a <__b2d+0x92>
 801f13a:	f1c0 0c20 	rsb	ip, r0, #32
 801f13e:	fa04 f500 	lsl.w	r5, r4, r0
 801f142:	42be      	cmp	r6, r7
 801f144:	fa21 f40c 	lsr.w	r4, r1, ip
 801f148:	ea45 0504 	orr.w	r5, r5, r4
 801f14c:	bf8c      	ite	hi
 801f14e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f152:	2400      	movls	r4, #0
 801f154:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f158:	fa01 f000 	lsl.w	r0, r1, r0
 801f15c:	fa24 f40c 	lsr.w	r4, r4, ip
 801f160:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f164:	ea40 0204 	orr.w	r2, r0, r4
 801f168:	e7db      	b.n	801f122 <__b2d+0x4a>
 801f16a:	ea44 030c 	orr.w	r3, r4, ip
 801f16e:	460a      	mov	r2, r1
 801f170:	e7d7      	b.n	801f122 <__b2d+0x4a>
 801f172:	bf00      	nop
 801f174:	3ff00000 	.word	0x3ff00000

0801f178 <__d2b>:
 801f178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f17c:	4689      	mov	r9, r1
 801f17e:	2101      	movs	r1, #1
 801f180:	ec57 6b10 	vmov	r6, r7, d0
 801f184:	4690      	mov	r8, r2
 801f186:	f7ff fc09 	bl	801e99c <_Balloc>
 801f18a:	4604      	mov	r4, r0
 801f18c:	b930      	cbnz	r0, 801f19c <__d2b+0x24>
 801f18e:	4602      	mov	r2, r0
 801f190:	4b25      	ldr	r3, [pc, #148]	; (801f228 <__d2b+0xb0>)
 801f192:	4826      	ldr	r0, [pc, #152]	; (801f22c <__d2b+0xb4>)
 801f194:	f240 310a 	movw	r1, #778	; 0x30a
 801f198:	f000 fabc 	bl	801f714 <__assert_func>
 801f19c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f1a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f1a4:	bb35      	cbnz	r5, 801f1f4 <__d2b+0x7c>
 801f1a6:	2e00      	cmp	r6, #0
 801f1a8:	9301      	str	r3, [sp, #4]
 801f1aa:	d028      	beq.n	801f1fe <__d2b+0x86>
 801f1ac:	4668      	mov	r0, sp
 801f1ae:	9600      	str	r6, [sp, #0]
 801f1b0:	f7ff fd06 	bl	801ebc0 <__lo0bits>
 801f1b4:	9900      	ldr	r1, [sp, #0]
 801f1b6:	b300      	cbz	r0, 801f1fa <__d2b+0x82>
 801f1b8:	9a01      	ldr	r2, [sp, #4]
 801f1ba:	f1c0 0320 	rsb	r3, r0, #32
 801f1be:	fa02 f303 	lsl.w	r3, r2, r3
 801f1c2:	430b      	orrs	r3, r1
 801f1c4:	40c2      	lsrs	r2, r0
 801f1c6:	6163      	str	r3, [r4, #20]
 801f1c8:	9201      	str	r2, [sp, #4]
 801f1ca:	9b01      	ldr	r3, [sp, #4]
 801f1cc:	61a3      	str	r3, [r4, #24]
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	bf14      	ite	ne
 801f1d2:	2202      	movne	r2, #2
 801f1d4:	2201      	moveq	r2, #1
 801f1d6:	6122      	str	r2, [r4, #16]
 801f1d8:	b1d5      	cbz	r5, 801f210 <__d2b+0x98>
 801f1da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f1de:	4405      	add	r5, r0
 801f1e0:	f8c9 5000 	str.w	r5, [r9]
 801f1e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f1e8:	f8c8 0000 	str.w	r0, [r8]
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	b003      	add	sp, #12
 801f1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f1f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f1f8:	e7d5      	b.n	801f1a6 <__d2b+0x2e>
 801f1fa:	6161      	str	r1, [r4, #20]
 801f1fc:	e7e5      	b.n	801f1ca <__d2b+0x52>
 801f1fe:	a801      	add	r0, sp, #4
 801f200:	f7ff fcde 	bl	801ebc0 <__lo0bits>
 801f204:	9b01      	ldr	r3, [sp, #4]
 801f206:	6163      	str	r3, [r4, #20]
 801f208:	2201      	movs	r2, #1
 801f20a:	6122      	str	r2, [r4, #16]
 801f20c:	3020      	adds	r0, #32
 801f20e:	e7e3      	b.n	801f1d8 <__d2b+0x60>
 801f210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f218:	f8c9 0000 	str.w	r0, [r9]
 801f21c:	6918      	ldr	r0, [r3, #16]
 801f21e:	f7ff fcaf 	bl	801eb80 <__hi0bits>
 801f222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f226:	e7df      	b.n	801f1e8 <__d2b+0x70>
 801f228:	080230f0 	.word	0x080230f0
 801f22c:	0802317c 	.word	0x0802317c

0801f230 <__ratio>:
 801f230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f234:	4688      	mov	r8, r1
 801f236:	4669      	mov	r1, sp
 801f238:	4681      	mov	r9, r0
 801f23a:	f7ff ff4d 	bl	801f0d8 <__b2d>
 801f23e:	a901      	add	r1, sp, #4
 801f240:	4640      	mov	r0, r8
 801f242:	ec55 4b10 	vmov	r4, r5, d0
 801f246:	f7ff ff47 	bl	801f0d8 <__b2d>
 801f24a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f24e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f252:	eba3 0c02 	sub.w	ip, r3, r2
 801f256:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f25a:	1a9b      	subs	r3, r3, r2
 801f25c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f260:	ec51 0b10 	vmov	r0, r1, d0
 801f264:	2b00      	cmp	r3, #0
 801f266:	bfd6      	itet	le
 801f268:	460a      	movle	r2, r1
 801f26a:	462a      	movgt	r2, r5
 801f26c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f270:	468b      	mov	fp, r1
 801f272:	462f      	mov	r7, r5
 801f274:	bfd4      	ite	le
 801f276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f27a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f27e:	4620      	mov	r0, r4
 801f280:	ee10 2a10 	vmov	r2, s0
 801f284:	465b      	mov	r3, fp
 801f286:	4639      	mov	r1, r7
 801f288:	f7e1 fae0 	bl	800084c <__aeabi_ddiv>
 801f28c:	ec41 0b10 	vmov	d0, r0, r1
 801f290:	b003      	add	sp, #12
 801f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f296 <__copybits>:
 801f296:	3901      	subs	r1, #1
 801f298:	b570      	push	{r4, r5, r6, lr}
 801f29a:	1149      	asrs	r1, r1, #5
 801f29c:	6914      	ldr	r4, [r2, #16]
 801f29e:	3101      	adds	r1, #1
 801f2a0:	f102 0314 	add.w	r3, r2, #20
 801f2a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f2a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f2ac:	1f05      	subs	r5, r0, #4
 801f2ae:	42a3      	cmp	r3, r4
 801f2b0:	d30c      	bcc.n	801f2cc <__copybits+0x36>
 801f2b2:	1aa3      	subs	r3, r4, r2
 801f2b4:	3b11      	subs	r3, #17
 801f2b6:	f023 0303 	bic.w	r3, r3, #3
 801f2ba:	3211      	adds	r2, #17
 801f2bc:	42a2      	cmp	r2, r4
 801f2be:	bf88      	it	hi
 801f2c0:	2300      	movhi	r3, #0
 801f2c2:	4418      	add	r0, r3
 801f2c4:	2300      	movs	r3, #0
 801f2c6:	4288      	cmp	r0, r1
 801f2c8:	d305      	bcc.n	801f2d6 <__copybits+0x40>
 801f2ca:	bd70      	pop	{r4, r5, r6, pc}
 801f2cc:	f853 6b04 	ldr.w	r6, [r3], #4
 801f2d0:	f845 6f04 	str.w	r6, [r5, #4]!
 801f2d4:	e7eb      	b.n	801f2ae <__copybits+0x18>
 801f2d6:	f840 3b04 	str.w	r3, [r0], #4
 801f2da:	e7f4      	b.n	801f2c6 <__copybits+0x30>

0801f2dc <__any_on>:
 801f2dc:	f100 0214 	add.w	r2, r0, #20
 801f2e0:	6900      	ldr	r0, [r0, #16]
 801f2e2:	114b      	asrs	r3, r1, #5
 801f2e4:	4298      	cmp	r0, r3
 801f2e6:	b510      	push	{r4, lr}
 801f2e8:	db11      	blt.n	801f30e <__any_on+0x32>
 801f2ea:	dd0a      	ble.n	801f302 <__any_on+0x26>
 801f2ec:	f011 011f 	ands.w	r1, r1, #31
 801f2f0:	d007      	beq.n	801f302 <__any_on+0x26>
 801f2f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f2f6:	fa24 f001 	lsr.w	r0, r4, r1
 801f2fa:	fa00 f101 	lsl.w	r1, r0, r1
 801f2fe:	428c      	cmp	r4, r1
 801f300:	d10b      	bne.n	801f31a <__any_on+0x3e>
 801f302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f306:	4293      	cmp	r3, r2
 801f308:	d803      	bhi.n	801f312 <__any_on+0x36>
 801f30a:	2000      	movs	r0, #0
 801f30c:	bd10      	pop	{r4, pc}
 801f30e:	4603      	mov	r3, r0
 801f310:	e7f7      	b.n	801f302 <__any_on+0x26>
 801f312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f316:	2900      	cmp	r1, #0
 801f318:	d0f5      	beq.n	801f306 <__any_on+0x2a>
 801f31a:	2001      	movs	r0, #1
 801f31c:	e7f6      	b.n	801f30c <__any_on+0x30>

0801f31e <_calloc_r>:
 801f31e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f320:	fba1 2402 	umull	r2, r4, r1, r2
 801f324:	b94c      	cbnz	r4, 801f33a <_calloc_r+0x1c>
 801f326:	4611      	mov	r1, r2
 801f328:	9201      	str	r2, [sp, #4]
 801f32a:	f7fc f973 	bl	801b614 <_malloc_r>
 801f32e:	9a01      	ldr	r2, [sp, #4]
 801f330:	4605      	mov	r5, r0
 801f332:	b930      	cbnz	r0, 801f342 <_calloc_r+0x24>
 801f334:	4628      	mov	r0, r5
 801f336:	b003      	add	sp, #12
 801f338:	bd30      	pop	{r4, r5, pc}
 801f33a:	220c      	movs	r2, #12
 801f33c:	6002      	str	r2, [r0, #0]
 801f33e:	2500      	movs	r5, #0
 801f340:	e7f8      	b.n	801f334 <_calloc_r+0x16>
 801f342:	4621      	mov	r1, r4
 801f344:	f7fc f93d 	bl	801b5c2 <memset>
 801f348:	e7f4      	b.n	801f334 <_calloc_r+0x16>
	...

0801f34c <_free_r>:
 801f34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f34e:	2900      	cmp	r1, #0
 801f350:	d044      	beq.n	801f3dc <_free_r+0x90>
 801f352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f356:	9001      	str	r0, [sp, #4]
 801f358:	2b00      	cmp	r3, #0
 801f35a:	f1a1 0404 	sub.w	r4, r1, #4
 801f35e:	bfb8      	it	lt
 801f360:	18e4      	addlt	r4, r4, r3
 801f362:	f7ff fb0f 	bl	801e984 <__malloc_lock>
 801f366:	4a1e      	ldr	r2, [pc, #120]	; (801f3e0 <_free_r+0x94>)
 801f368:	9801      	ldr	r0, [sp, #4]
 801f36a:	6813      	ldr	r3, [r2, #0]
 801f36c:	b933      	cbnz	r3, 801f37c <_free_r+0x30>
 801f36e:	6063      	str	r3, [r4, #4]
 801f370:	6014      	str	r4, [r2, #0]
 801f372:	b003      	add	sp, #12
 801f374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f378:	f7ff bb0a 	b.w	801e990 <__malloc_unlock>
 801f37c:	42a3      	cmp	r3, r4
 801f37e:	d908      	bls.n	801f392 <_free_r+0x46>
 801f380:	6825      	ldr	r5, [r4, #0]
 801f382:	1961      	adds	r1, r4, r5
 801f384:	428b      	cmp	r3, r1
 801f386:	bf01      	itttt	eq
 801f388:	6819      	ldreq	r1, [r3, #0]
 801f38a:	685b      	ldreq	r3, [r3, #4]
 801f38c:	1949      	addeq	r1, r1, r5
 801f38e:	6021      	streq	r1, [r4, #0]
 801f390:	e7ed      	b.n	801f36e <_free_r+0x22>
 801f392:	461a      	mov	r2, r3
 801f394:	685b      	ldr	r3, [r3, #4]
 801f396:	b10b      	cbz	r3, 801f39c <_free_r+0x50>
 801f398:	42a3      	cmp	r3, r4
 801f39a:	d9fa      	bls.n	801f392 <_free_r+0x46>
 801f39c:	6811      	ldr	r1, [r2, #0]
 801f39e:	1855      	adds	r5, r2, r1
 801f3a0:	42a5      	cmp	r5, r4
 801f3a2:	d10b      	bne.n	801f3bc <_free_r+0x70>
 801f3a4:	6824      	ldr	r4, [r4, #0]
 801f3a6:	4421      	add	r1, r4
 801f3a8:	1854      	adds	r4, r2, r1
 801f3aa:	42a3      	cmp	r3, r4
 801f3ac:	6011      	str	r1, [r2, #0]
 801f3ae:	d1e0      	bne.n	801f372 <_free_r+0x26>
 801f3b0:	681c      	ldr	r4, [r3, #0]
 801f3b2:	685b      	ldr	r3, [r3, #4]
 801f3b4:	6053      	str	r3, [r2, #4]
 801f3b6:	4421      	add	r1, r4
 801f3b8:	6011      	str	r1, [r2, #0]
 801f3ba:	e7da      	b.n	801f372 <_free_r+0x26>
 801f3bc:	d902      	bls.n	801f3c4 <_free_r+0x78>
 801f3be:	230c      	movs	r3, #12
 801f3c0:	6003      	str	r3, [r0, #0]
 801f3c2:	e7d6      	b.n	801f372 <_free_r+0x26>
 801f3c4:	6825      	ldr	r5, [r4, #0]
 801f3c6:	1961      	adds	r1, r4, r5
 801f3c8:	428b      	cmp	r3, r1
 801f3ca:	bf04      	itt	eq
 801f3cc:	6819      	ldreq	r1, [r3, #0]
 801f3ce:	685b      	ldreq	r3, [r3, #4]
 801f3d0:	6063      	str	r3, [r4, #4]
 801f3d2:	bf04      	itt	eq
 801f3d4:	1949      	addeq	r1, r1, r5
 801f3d6:	6021      	streq	r1, [r4, #0]
 801f3d8:	6054      	str	r4, [r2, #4]
 801f3da:	e7ca      	b.n	801f372 <_free_r+0x26>
 801f3dc:	b003      	add	sp, #12
 801f3de:	bd30      	pop	{r4, r5, pc}
 801f3e0:	2000f190 	.word	0x2000f190

0801f3e4 <__ssputs_r>:
 801f3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3e8:	688e      	ldr	r6, [r1, #8]
 801f3ea:	429e      	cmp	r6, r3
 801f3ec:	4682      	mov	sl, r0
 801f3ee:	460c      	mov	r4, r1
 801f3f0:	4690      	mov	r8, r2
 801f3f2:	461f      	mov	r7, r3
 801f3f4:	d838      	bhi.n	801f468 <__ssputs_r+0x84>
 801f3f6:	898a      	ldrh	r2, [r1, #12]
 801f3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f3fc:	d032      	beq.n	801f464 <__ssputs_r+0x80>
 801f3fe:	6825      	ldr	r5, [r4, #0]
 801f400:	6909      	ldr	r1, [r1, #16]
 801f402:	eba5 0901 	sub.w	r9, r5, r1
 801f406:	6965      	ldr	r5, [r4, #20]
 801f408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f410:	3301      	adds	r3, #1
 801f412:	444b      	add	r3, r9
 801f414:	106d      	asrs	r5, r5, #1
 801f416:	429d      	cmp	r5, r3
 801f418:	bf38      	it	cc
 801f41a:	461d      	movcc	r5, r3
 801f41c:	0553      	lsls	r3, r2, #21
 801f41e:	d531      	bpl.n	801f484 <__ssputs_r+0xa0>
 801f420:	4629      	mov	r1, r5
 801f422:	f7fc f8f7 	bl	801b614 <_malloc_r>
 801f426:	4606      	mov	r6, r0
 801f428:	b950      	cbnz	r0, 801f440 <__ssputs_r+0x5c>
 801f42a:	230c      	movs	r3, #12
 801f42c:	f8ca 3000 	str.w	r3, [sl]
 801f430:	89a3      	ldrh	r3, [r4, #12]
 801f432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f436:	81a3      	strh	r3, [r4, #12]
 801f438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f440:	6921      	ldr	r1, [r4, #16]
 801f442:	464a      	mov	r2, r9
 801f444:	f7fc f8af 	bl	801b5a6 <memcpy>
 801f448:	89a3      	ldrh	r3, [r4, #12]
 801f44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f452:	81a3      	strh	r3, [r4, #12]
 801f454:	6126      	str	r6, [r4, #16]
 801f456:	6165      	str	r5, [r4, #20]
 801f458:	444e      	add	r6, r9
 801f45a:	eba5 0509 	sub.w	r5, r5, r9
 801f45e:	6026      	str	r6, [r4, #0]
 801f460:	60a5      	str	r5, [r4, #8]
 801f462:	463e      	mov	r6, r7
 801f464:	42be      	cmp	r6, r7
 801f466:	d900      	bls.n	801f46a <__ssputs_r+0x86>
 801f468:	463e      	mov	r6, r7
 801f46a:	6820      	ldr	r0, [r4, #0]
 801f46c:	4632      	mov	r2, r6
 801f46e:	4641      	mov	r1, r8
 801f470:	f000 f980 	bl	801f774 <memmove>
 801f474:	68a3      	ldr	r3, [r4, #8]
 801f476:	1b9b      	subs	r3, r3, r6
 801f478:	60a3      	str	r3, [r4, #8]
 801f47a:	6823      	ldr	r3, [r4, #0]
 801f47c:	4433      	add	r3, r6
 801f47e:	6023      	str	r3, [r4, #0]
 801f480:	2000      	movs	r0, #0
 801f482:	e7db      	b.n	801f43c <__ssputs_r+0x58>
 801f484:	462a      	mov	r2, r5
 801f486:	f000 f98f 	bl	801f7a8 <_realloc_r>
 801f48a:	4606      	mov	r6, r0
 801f48c:	2800      	cmp	r0, #0
 801f48e:	d1e1      	bne.n	801f454 <__ssputs_r+0x70>
 801f490:	6921      	ldr	r1, [r4, #16]
 801f492:	4650      	mov	r0, sl
 801f494:	f7ff ff5a 	bl	801f34c <_free_r>
 801f498:	e7c7      	b.n	801f42a <__ssputs_r+0x46>
	...

0801f49c <_svfiprintf_r>:
 801f49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4a0:	4698      	mov	r8, r3
 801f4a2:	898b      	ldrh	r3, [r1, #12]
 801f4a4:	061b      	lsls	r3, r3, #24
 801f4a6:	b09d      	sub	sp, #116	; 0x74
 801f4a8:	4607      	mov	r7, r0
 801f4aa:	460d      	mov	r5, r1
 801f4ac:	4614      	mov	r4, r2
 801f4ae:	d50e      	bpl.n	801f4ce <_svfiprintf_r+0x32>
 801f4b0:	690b      	ldr	r3, [r1, #16]
 801f4b2:	b963      	cbnz	r3, 801f4ce <_svfiprintf_r+0x32>
 801f4b4:	2140      	movs	r1, #64	; 0x40
 801f4b6:	f7fc f8ad 	bl	801b614 <_malloc_r>
 801f4ba:	6028      	str	r0, [r5, #0]
 801f4bc:	6128      	str	r0, [r5, #16]
 801f4be:	b920      	cbnz	r0, 801f4ca <_svfiprintf_r+0x2e>
 801f4c0:	230c      	movs	r3, #12
 801f4c2:	603b      	str	r3, [r7, #0]
 801f4c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f4c8:	e0d1      	b.n	801f66e <_svfiprintf_r+0x1d2>
 801f4ca:	2340      	movs	r3, #64	; 0x40
 801f4cc:	616b      	str	r3, [r5, #20]
 801f4ce:	2300      	movs	r3, #0
 801f4d0:	9309      	str	r3, [sp, #36]	; 0x24
 801f4d2:	2320      	movs	r3, #32
 801f4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 801f4dc:	2330      	movs	r3, #48	; 0x30
 801f4de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f688 <_svfiprintf_r+0x1ec>
 801f4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f4e6:	f04f 0901 	mov.w	r9, #1
 801f4ea:	4623      	mov	r3, r4
 801f4ec:	469a      	mov	sl, r3
 801f4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f4f2:	b10a      	cbz	r2, 801f4f8 <_svfiprintf_r+0x5c>
 801f4f4:	2a25      	cmp	r2, #37	; 0x25
 801f4f6:	d1f9      	bne.n	801f4ec <_svfiprintf_r+0x50>
 801f4f8:	ebba 0b04 	subs.w	fp, sl, r4
 801f4fc:	d00b      	beq.n	801f516 <_svfiprintf_r+0x7a>
 801f4fe:	465b      	mov	r3, fp
 801f500:	4622      	mov	r2, r4
 801f502:	4629      	mov	r1, r5
 801f504:	4638      	mov	r0, r7
 801f506:	f7ff ff6d 	bl	801f3e4 <__ssputs_r>
 801f50a:	3001      	adds	r0, #1
 801f50c:	f000 80aa 	beq.w	801f664 <_svfiprintf_r+0x1c8>
 801f510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f512:	445a      	add	r2, fp
 801f514:	9209      	str	r2, [sp, #36]	; 0x24
 801f516:	f89a 3000 	ldrb.w	r3, [sl]
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	f000 80a2 	beq.w	801f664 <_svfiprintf_r+0x1c8>
 801f520:	2300      	movs	r3, #0
 801f522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f52a:	f10a 0a01 	add.w	sl, sl, #1
 801f52e:	9304      	str	r3, [sp, #16]
 801f530:	9307      	str	r3, [sp, #28]
 801f532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f536:	931a      	str	r3, [sp, #104]	; 0x68
 801f538:	4654      	mov	r4, sl
 801f53a:	2205      	movs	r2, #5
 801f53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f540:	4851      	ldr	r0, [pc, #324]	; (801f688 <_svfiprintf_r+0x1ec>)
 801f542:	f7e0 fe4d 	bl	80001e0 <memchr>
 801f546:	9a04      	ldr	r2, [sp, #16]
 801f548:	b9d8      	cbnz	r0, 801f582 <_svfiprintf_r+0xe6>
 801f54a:	06d0      	lsls	r0, r2, #27
 801f54c:	bf44      	itt	mi
 801f54e:	2320      	movmi	r3, #32
 801f550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f554:	0711      	lsls	r1, r2, #28
 801f556:	bf44      	itt	mi
 801f558:	232b      	movmi	r3, #43	; 0x2b
 801f55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f55e:	f89a 3000 	ldrb.w	r3, [sl]
 801f562:	2b2a      	cmp	r3, #42	; 0x2a
 801f564:	d015      	beq.n	801f592 <_svfiprintf_r+0xf6>
 801f566:	9a07      	ldr	r2, [sp, #28]
 801f568:	4654      	mov	r4, sl
 801f56a:	2000      	movs	r0, #0
 801f56c:	f04f 0c0a 	mov.w	ip, #10
 801f570:	4621      	mov	r1, r4
 801f572:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f576:	3b30      	subs	r3, #48	; 0x30
 801f578:	2b09      	cmp	r3, #9
 801f57a:	d94e      	bls.n	801f61a <_svfiprintf_r+0x17e>
 801f57c:	b1b0      	cbz	r0, 801f5ac <_svfiprintf_r+0x110>
 801f57e:	9207      	str	r2, [sp, #28]
 801f580:	e014      	b.n	801f5ac <_svfiprintf_r+0x110>
 801f582:	eba0 0308 	sub.w	r3, r0, r8
 801f586:	fa09 f303 	lsl.w	r3, r9, r3
 801f58a:	4313      	orrs	r3, r2
 801f58c:	9304      	str	r3, [sp, #16]
 801f58e:	46a2      	mov	sl, r4
 801f590:	e7d2      	b.n	801f538 <_svfiprintf_r+0x9c>
 801f592:	9b03      	ldr	r3, [sp, #12]
 801f594:	1d19      	adds	r1, r3, #4
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	9103      	str	r1, [sp, #12]
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	bfbb      	ittet	lt
 801f59e:	425b      	neglt	r3, r3
 801f5a0:	f042 0202 	orrlt.w	r2, r2, #2
 801f5a4:	9307      	strge	r3, [sp, #28]
 801f5a6:	9307      	strlt	r3, [sp, #28]
 801f5a8:	bfb8      	it	lt
 801f5aa:	9204      	strlt	r2, [sp, #16]
 801f5ac:	7823      	ldrb	r3, [r4, #0]
 801f5ae:	2b2e      	cmp	r3, #46	; 0x2e
 801f5b0:	d10c      	bne.n	801f5cc <_svfiprintf_r+0x130>
 801f5b2:	7863      	ldrb	r3, [r4, #1]
 801f5b4:	2b2a      	cmp	r3, #42	; 0x2a
 801f5b6:	d135      	bne.n	801f624 <_svfiprintf_r+0x188>
 801f5b8:	9b03      	ldr	r3, [sp, #12]
 801f5ba:	1d1a      	adds	r2, r3, #4
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	9203      	str	r2, [sp, #12]
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	bfb8      	it	lt
 801f5c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f5c8:	3402      	adds	r4, #2
 801f5ca:	9305      	str	r3, [sp, #20]
 801f5cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f698 <_svfiprintf_r+0x1fc>
 801f5d0:	7821      	ldrb	r1, [r4, #0]
 801f5d2:	2203      	movs	r2, #3
 801f5d4:	4650      	mov	r0, sl
 801f5d6:	f7e0 fe03 	bl	80001e0 <memchr>
 801f5da:	b140      	cbz	r0, 801f5ee <_svfiprintf_r+0x152>
 801f5dc:	2340      	movs	r3, #64	; 0x40
 801f5de:	eba0 000a 	sub.w	r0, r0, sl
 801f5e2:	fa03 f000 	lsl.w	r0, r3, r0
 801f5e6:	9b04      	ldr	r3, [sp, #16]
 801f5e8:	4303      	orrs	r3, r0
 801f5ea:	3401      	adds	r4, #1
 801f5ec:	9304      	str	r3, [sp, #16]
 801f5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5f2:	4826      	ldr	r0, [pc, #152]	; (801f68c <_svfiprintf_r+0x1f0>)
 801f5f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f5f8:	2206      	movs	r2, #6
 801f5fa:	f7e0 fdf1 	bl	80001e0 <memchr>
 801f5fe:	2800      	cmp	r0, #0
 801f600:	d038      	beq.n	801f674 <_svfiprintf_r+0x1d8>
 801f602:	4b23      	ldr	r3, [pc, #140]	; (801f690 <_svfiprintf_r+0x1f4>)
 801f604:	bb1b      	cbnz	r3, 801f64e <_svfiprintf_r+0x1b2>
 801f606:	9b03      	ldr	r3, [sp, #12]
 801f608:	3307      	adds	r3, #7
 801f60a:	f023 0307 	bic.w	r3, r3, #7
 801f60e:	3308      	adds	r3, #8
 801f610:	9303      	str	r3, [sp, #12]
 801f612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f614:	4433      	add	r3, r6
 801f616:	9309      	str	r3, [sp, #36]	; 0x24
 801f618:	e767      	b.n	801f4ea <_svfiprintf_r+0x4e>
 801f61a:	fb0c 3202 	mla	r2, ip, r2, r3
 801f61e:	460c      	mov	r4, r1
 801f620:	2001      	movs	r0, #1
 801f622:	e7a5      	b.n	801f570 <_svfiprintf_r+0xd4>
 801f624:	2300      	movs	r3, #0
 801f626:	3401      	adds	r4, #1
 801f628:	9305      	str	r3, [sp, #20]
 801f62a:	4619      	mov	r1, r3
 801f62c:	f04f 0c0a 	mov.w	ip, #10
 801f630:	4620      	mov	r0, r4
 801f632:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f636:	3a30      	subs	r2, #48	; 0x30
 801f638:	2a09      	cmp	r2, #9
 801f63a:	d903      	bls.n	801f644 <_svfiprintf_r+0x1a8>
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	d0c5      	beq.n	801f5cc <_svfiprintf_r+0x130>
 801f640:	9105      	str	r1, [sp, #20]
 801f642:	e7c3      	b.n	801f5cc <_svfiprintf_r+0x130>
 801f644:	fb0c 2101 	mla	r1, ip, r1, r2
 801f648:	4604      	mov	r4, r0
 801f64a:	2301      	movs	r3, #1
 801f64c:	e7f0      	b.n	801f630 <_svfiprintf_r+0x194>
 801f64e:	ab03      	add	r3, sp, #12
 801f650:	9300      	str	r3, [sp, #0]
 801f652:	462a      	mov	r2, r5
 801f654:	4b0f      	ldr	r3, [pc, #60]	; (801f694 <_svfiprintf_r+0x1f8>)
 801f656:	a904      	add	r1, sp, #16
 801f658:	4638      	mov	r0, r7
 801f65a:	f7fc f8ef 	bl	801b83c <_printf_float>
 801f65e:	1c42      	adds	r2, r0, #1
 801f660:	4606      	mov	r6, r0
 801f662:	d1d6      	bne.n	801f612 <_svfiprintf_r+0x176>
 801f664:	89ab      	ldrh	r3, [r5, #12]
 801f666:	065b      	lsls	r3, r3, #25
 801f668:	f53f af2c 	bmi.w	801f4c4 <_svfiprintf_r+0x28>
 801f66c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f66e:	b01d      	add	sp, #116	; 0x74
 801f670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f674:	ab03      	add	r3, sp, #12
 801f676:	9300      	str	r3, [sp, #0]
 801f678:	462a      	mov	r2, r5
 801f67a:	4b06      	ldr	r3, [pc, #24]	; (801f694 <_svfiprintf_r+0x1f8>)
 801f67c:	a904      	add	r1, sp, #16
 801f67e:	4638      	mov	r0, r7
 801f680:	f7fc fb80 	bl	801bd84 <_printf_i>
 801f684:	e7eb      	b.n	801f65e <_svfiprintf_r+0x1c2>
 801f686:	bf00      	nop
 801f688:	080232d4 	.word	0x080232d4
 801f68c:	080232de 	.word	0x080232de
 801f690:	0801b83d 	.word	0x0801b83d
 801f694:	0801f3e5 	.word	0x0801f3e5
 801f698:	080232da 	.word	0x080232da

0801f69c <_read_r>:
 801f69c:	b538      	push	{r3, r4, r5, lr}
 801f69e:	4d07      	ldr	r5, [pc, #28]	; (801f6bc <_read_r+0x20>)
 801f6a0:	4604      	mov	r4, r0
 801f6a2:	4608      	mov	r0, r1
 801f6a4:	4611      	mov	r1, r2
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	602a      	str	r2, [r5, #0]
 801f6aa:	461a      	mov	r2, r3
 801f6ac:	f003 f806 	bl	80226bc <_read>
 801f6b0:	1c43      	adds	r3, r0, #1
 801f6b2:	d102      	bne.n	801f6ba <_read_r+0x1e>
 801f6b4:	682b      	ldr	r3, [r5, #0]
 801f6b6:	b103      	cbz	r3, 801f6ba <_read_r+0x1e>
 801f6b8:	6023      	str	r3, [r4, #0]
 801f6ba:	bd38      	pop	{r3, r4, r5, pc}
 801f6bc:	2000f198 	.word	0x2000f198

0801f6c0 <nan>:
 801f6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f6c8 <nan+0x8>
 801f6c4:	4770      	bx	lr
 801f6c6:	bf00      	nop
 801f6c8:	00000000 	.word	0x00000000
 801f6cc:	7ff80000 	.word	0x7ff80000

0801f6d0 <strncmp>:
 801f6d0:	b510      	push	{r4, lr}
 801f6d2:	b17a      	cbz	r2, 801f6f4 <strncmp+0x24>
 801f6d4:	4603      	mov	r3, r0
 801f6d6:	3901      	subs	r1, #1
 801f6d8:	1884      	adds	r4, r0, r2
 801f6da:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f6de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f6e2:	4290      	cmp	r0, r2
 801f6e4:	d101      	bne.n	801f6ea <strncmp+0x1a>
 801f6e6:	42a3      	cmp	r3, r4
 801f6e8:	d101      	bne.n	801f6ee <strncmp+0x1e>
 801f6ea:	1a80      	subs	r0, r0, r2
 801f6ec:	bd10      	pop	{r4, pc}
 801f6ee:	2800      	cmp	r0, #0
 801f6f0:	d1f3      	bne.n	801f6da <strncmp+0xa>
 801f6f2:	e7fa      	b.n	801f6ea <strncmp+0x1a>
 801f6f4:	4610      	mov	r0, r2
 801f6f6:	e7f9      	b.n	801f6ec <strncmp+0x1c>

0801f6f8 <__ascii_wctomb>:
 801f6f8:	b149      	cbz	r1, 801f70e <__ascii_wctomb+0x16>
 801f6fa:	2aff      	cmp	r2, #255	; 0xff
 801f6fc:	bf85      	ittet	hi
 801f6fe:	238a      	movhi	r3, #138	; 0x8a
 801f700:	6003      	strhi	r3, [r0, #0]
 801f702:	700a      	strbls	r2, [r1, #0]
 801f704:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801f708:	bf98      	it	ls
 801f70a:	2001      	movls	r0, #1
 801f70c:	4770      	bx	lr
 801f70e:	4608      	mov	r0, r1
 801f710:	4770      	bx	lr
	...

0801f714 <__assert_func>:
 801f714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f716:	4614      	mov	r4, r2
 801f718:	461a      	mov	r2, r3
 801f71a:	4b09      	ldr	r3, [pc, #36]	; (801f740 <__assert_func+0x2c>)
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	4605      	mov	r5, r0
 801f720:	68d8      	ldr	r0, [r3, #12]
 801f722:	b14c      	cbz	r4, 801f738 <__assert_func+0x24>
 801f724:	4b07      	ldr	r3, [pc, #28]	; (801f744 <__assert_func+0x30>)
 801f726:	9100      	str	r1, [sp, #0]
 801f728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f72c:	4906      	ldr	r1, [pc, #24]	; (801f748 <__assert_func+0x34>)
 801f72e:	462b      	mov	r3, r5
 801f730:	f000 f80e 	bl	801f750 <fiprintf>
 801f734:	f000 fa80 	bl	801fc38 <abort>
 801f738:	4b04      	ldr	r3, [pc, #16]	; (801f74c <__assert_func+0x38>)
 801f73a:	461c      	mov	r4, r3
 801f73c:	e7f3      	b.n	801f726 <__assert_func+0x12>
 801f73e:	bf00      	nop
 801f740:	20000110 	.word	0x20000110
 801f744:	080232e5 	.word	0x080232e5
 801f748:	080232f2 	.word	0x080232f2
 801f74c:	08023320 	.word	0x08023320

0801f750 <fiprintf>:
 801f750:	b40e      	push	{r1, r2, r3}
 801f752:	b503      	push	{r0, r1, lr}
 801f754:	4601      	mov	r1, r0
 801f756:	ab03      	add	r3, sp, #12
 801f758:	4805      	ldr	r0, [pc, #20]	; (801f770 <fiprintf+0x20>)
 801f75a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f75e:	6800      	ldr	r0, [r0, #0]
 801f760:	9301      	str	r3, [sp, #4]
 801f762:	f000 f879 	bl	801f858 <_vfiprintf_r>
 801f766:	b002      	add	sp, #8
 801f768:	f85d eb04 	ldr.w	lr, [sp], #4
 801f76c:	b003      	add	sp, #12
 801f76e:	4770      	bx	lr
 801f770:	20000110 	.word	0x20000110

0801f774 <memmove>:
 801f774:	4288      	cmp	r0, r1
 801f776:	b510      	push	{r4, lr}
 801f778:	eb01 0402 	add.w	r4, r1, r2
 801f77c:	d902      	bls.n	801f784 <memmove+0x10>
 801f77e:	4284      	cmp	r4, r0
 801f780:	4623      	mov	r3, r4
 801f782:	d807      	bhi.n	801f794 <memmove+0x20>
 801f784:	1e43      	subs	r3, r0, #1
 801f786:	42a1      	cmp	r1, r4
 801f788:	d008      	beq.n	801f79c <memmove+0x28>
 801f78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f78e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f792:	e7f8      	b.n	801f786 <memmove+0x12>
 801f794:	4402      	add	r2, r0
 801f796:	4601      	mov	r1, r0
 801f798:	428a      	cmp	r2, r1
 801f79a:	d100      	bne.n	801f79e <memmove+0x2a>
 801f79c:	bd10      	pop	{r4, pc}
 801f79e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f7a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f7a6:	e7f7      	b.n	801f798 <memmove+0x24>

0801f7a8 <_realloc_r>:
 801f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7ac:	4680      	mov	r8, r0
 801f7ae:	4614      	mov	r4, r2
 801f7b0:	460e      	mov	r6, r1
 801f7b2:	b921      	cbnz	r1, 801f7be <_realloc_r+0x16>
 801f7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f7b8:	4611      	mov	r1, r2
 801f7ba:	f7fb bf2b 	b.w	801b614 <_malloc_r>
 801f7be:	b92a      	cbnz	r2, 801f7cc <_realloc_r+0x24>
 801f7c0:	f7ff fdc4 	bl	801f34c <_free_r>
 801f7c4:	4625      	mov	r5, r4
 801f7c6:	4628      	mov	r0, r5
 801f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7cc:	f000 faa0 	bl	801fd10 <_malloc_usable_size_r>
 801f7d0:	4284      	cmp	r4, r0
 801f7d2:	4607      	mov	r7, r0
 801f7d4:	d802      	bhi.n	801f7dc <_realloc_r+0x34>
 801f7d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f7da:	d812      	bhi.n	801f802 <_realloc_r+0x5a>
 801f7dc:	4621      	mov	r1, r4
 801f7de:	4640      	mov	r0, r8
 801f7e0:	f7fb ff18 	bl	801b614 <_malloc_r>
 801f7e4:	4605      	mov	r5, r0
 801f7e6:	2800      	cmp	r0, #0
 801f7e8:	d0ed      	beq.n	801f7c6 <_realloc_r+0x1e>
 801f7ea:	42bc      	cmp	r4, r7
 801f7ec:	4622      	mov	r2, r4
 801f7ee:	4631      	mov	r1, r6
 801f7f0:	bf28      	it	cs
 801f7f2:	463a      	movcs	r2, r7
 801f7f4:	f7fb fed7 	bl	801b5a6 <memcpy>
 801f7f8:	4631      	mov	r1, r6
 801f7fa:	4640      	mov	r0, r8
 801f7fc:	f7ff fda6 	bl	801f34c <_free_r>
 801f800:	e7e1      	b.n	801f7c6 <_realloc_r+0x1e>
 801f802:	4635      	mov	r5, r6
 801f804:	e7df      	b.n	801f7c6 <_realloc_r+0x1e>

0801f806 <__sfputc_r>:
 801f806:	6893      	ldr	r3, [r2, #8]
 801f808:	3b01      	subs	r3, #1
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	b410      	push	{r4}
 801f80e:	6093      	str	r3, [r2, #8]
 801f810:	da08      	bge.n	801f824 <__sfputc_r+0x1e>
 801f812:	6994      	ldr	r4, [r2, #24]
 801f814:	42a3      	cmp	r3, r4
 801f816:	db01      	blt.n	801f81c <__sfputc_r+0x16>
 801f818:	290a      	cmp	r1, #10
 801f81a:	d103      	bne.n	801f824 <__sfputc_r+0x1e>
 801f81c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f820:	f000 b94a 	b.w	801fab8 <__swbuf_r>
 801f824:	6813      	ldr	r3, [r2, #0]
 801f826:	1c58      	adds	r0, r3, #1
 801f828:	6010      	str	r0, [r2, #0]
 801f82a:	7019      	strb	r1, [r3, #0]
 801f82c:	4608      	mov	r0, r1
 801f82e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f832:	4770      	bx	lr

0801f834 <__sfputs_r>:
 801f834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f836:	4606      	mov	r6, r0
 801f838:	460f      	mov	r7, r1
 801f83a:	4614      	mov	r4, r2
 801f83c:	18d5      	adds	r5, r2, r3
 801f83e:	42ac      	cmp	r4, r5
 801f840:	d101      	bne.n	801f846 <__sfputs_r+0x12>
 801f842:	2000      	movs	r0, #0
 801f844:	e007      	b.n	801f856 <__sfputs_r+0x22>
 801f846:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f84a:	463a      	mov	r2, r7
 801f84c:	4630      	mov	r0, r6
 801f84e:	f7ff ffda 	bl	801f806 <__sfputc_r>
 801f852:	1c43      	adds	r3, r0, #1
 801f854:	d1f3      	bne.n	801f83e <__sfputs_r+0xa>
 801f856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f858 <_vfiprintf_r>:
 801f858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f85c:	460d      	mov	r5, r1
 801f85e:	b09d      	sub	sp, #116	; 0x74
 801f860:	4614      	mov	r4, r2
 801f862:	4698      	mov	r8, r3
 801f864:	4606      	mov	r6, r0
 801f866:	b118      	cbz	r0, 801f870 <_vfiprintf_r+0x18>
 801f868:	6983      	ldr	r3, [r0, #24]
 801f86a:	b90b      	cbnz	r3, 801f870 <_vfiprintf_r+0x18>
 801f86c:	f7fb fdd6 	bl	801b41c <__sinit>
 801f870:	4b89      	ldr	r3, [pc, #548]	; (801fa98 <_vfiprintf_r+0x240>)
 801f872:	429d      	cmp	r5, r3
 801f874:	d11b      	bne.n	801f8ae <_vfiprintf_r+0x56>
 801f876:	6875      	ldr	r5, [r6, #4]
 801f878:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f87a:	07d9      	lsls	r1, r3, #31
 801f87c:	d405      	bmi.n	801f88a <_vfiprintf_r+0x32>
 801f87e:	89ab      	ldrh	r3, [r5, #12]
 801f880:	059a      	lsls	r2, r3, #22
 801f882:	d402      	bmi.n	801f88a <_vfiprintf_r+0x32>
 801f884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f886:	f7fb fe8c 	bl	801b5a2 <__retarget_lock_acquire_recursive>
 801f88a:	89ab      	ldrh	r3, [r5, #12]
 801f88c:	071b      	lsls	r3, r3, #28
 801f88e:	d501      	bpl.n	801f894 <_vfiprintf_r+0x3c>
 801f890:	692b      	ldr	r3, [r5, #16]
 801f892:	b9eb      	cbnz	r3, 801f8d0 <_vfiprintf_r+0x78>
 801f894:	4629      	mov	r1, r5
 801f896:	4630      	mov	r0, r6
 801f898:	f000 f960 	bl	801fb5c <__swsetup_r>
 801f89c:	b1c0      	cbz	r0, 801f8d0 <_vfiprintf_r+0x78>
 801f89e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f8a0:	07dc      	lsls	r4, r3, #31
 801f8a2:	d50e      	bpl.n	801f8c2 <_vfiprintf_r+0x6a>
 801f8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f8a8:	b01d      	add	sp, #116	; 0x74
 801f8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8ae:	4b7b      	ldr	r3, [pc, #492]	; (801fa9c <_vfiprintf_r+0x244>)
 801f8b0:	429d      	cmp	r5, r3
 801f8b2:	d101      	bne.n	801f8b8 <_vfiprintf_r+0x60>
 801f8b4:	68b5      	ldr	r5, [r6, #8]
 801f8b6:	e7df      	b.n	801f878 <_vfiprintf_r+0x20>
 801f8b8:	4b79      	ldr	r3, [pc, #484]	; (801faa0 <_vfiprintf_r+0x248>)
 801f8ba:	429d      	cmp	r5, r3
 801f8bc:	bf08      	it	eq
 801f8be:	68f5      	ldreq	r5, [r6, #12]
 801f8c0:	e7da      	b.n	801f878 <_vfiprintf_r+0x20>
 801f8c2:	89ab      	ldrh	r3, [r5, #12]
 801f8c4:	0598      	lsls	r0, r3, #22
 801f8c6:	d4ed      	bmi.n	801f8a4 <_vfiprintf_r+0x4c>
 801f8c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f8ca:	f7fb fe6b 	bl	801b5a4 <__retarget_lock_release_recursive>
 801f8ce:	e7e9      	b.n	801f8a4 <_vfiprintf_r+0x4c>
 801f8d0:	2300      	movs	r3, #0
 801f8d2:	9309      	str	r3, [sp, #36]	; 0x24
 801f8d4:	2320      	movs	r3, #32
 801f8d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f8da:	f8cd 800c 	str.w	r8, [sp, #12]
 801f8de:	2330      	movs	r3, #48	; 0x30
 801f8e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801faa4 <_vfiprintf_r+0x24c>
 801f8e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f8e8:	f04f 0901 	mov.w	r9, #1
 801f8ec:	4623      	mov	r3, r4
 801f8ee:	469a      	mov	sl, r3
 801f8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f8f4:	b10a      	cbz	r2, 801f8fa <_vfiprintf_r+0xa2>
 801f8f6:	2a25      	cmp	r2, #37	; 0x25
 801f8f8:	d1f9      	bne.n	801f8ee <_vfiprintf_r+0x96>
 801f8fa:	ebba 0b04 	subs.w	fp, sl, r4
 801f8fe:	d00b      	beq.n	801f918 <_vfiprintf_r+0xc0>
 801f900:	465b      	mov	r3, fp
 801f902:	4622      	mov	r2, r4
 801f904:	4629      	mov	r1, r5
 801f906:	4630      	mov	r0, r6
 801f908:	f7ff ff94 	bl	801f834 <__sfputs_r>
 801f90c:	3001      	adds	r0, #1
 801f90e:	f000 80aa 	beq.w	801fa66 <_vfiprintf_r+0x20e>
 801f912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f914:	445a      	add	r2, fp
 801f916:	9209      	str	r2, [sp, #36]	; 0x24
 801f918:	f89a 3000 	ldrb.w	r3, [sl]
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	f000 80a2 	beq.w	801fa66 <_vfiprintf_r+0x20e>
 801f922:	2300      	movs	r3, #0
 801f924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f92c:	f10a 0a01 	add.w	sl, sl, #1
 801f930:	9304      	str	r3, [sp, #16]
 801f932:	9307      	str	r3, [sp, #28]
 801f934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f938:	931a      	str	r3, [sp, #104]	; 0x68
 801f93a:	4654      	mov	r4, sl
 801f93c:	2205      	movs	r2, #5
 801f93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f942:	4858      	ldr	r0, [pc, #352]	; (801faa4 <_vfiprintf_r+0x24c>)
 801f944:	f7e0 fc4c 	bl	80001e0 <memchr>
 801f948:	9a04      	ldr	r2, [sp, #16]
 801f94a:	b9d8      	cbnz	r0, 801f984 <_vfiprintf_r+0x12c>
 801f94c:	06d1      	lsls	r1, r2, #27
 801f94e:	bf44      	itt	mi
 801f950:	2320      	movmi	r3, #32
 801f952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f956:	0713      	lsls	r3, r2, #28
 801f958:	bf44      	itt	mi
 801f95a:	232b      	movmi	r3, #43	; 0x2b
 801f95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f960:	f89a 3000 	ldrb.w	r3, [sl]
 801f964:	2b2a      	cmp	r3, #42	; 0x2a
 801f966:	d015      	beq.n	801f994 <_vfiprintf_r+0x13c>
 801f968:	9a07      	ldr	r2, [sp, #28]
 801f96a:	4654      	mov	r4, sl
 801f96c:	2000      	movs	r0, #0
 801f96e:	f04f 0c0a 	mov.w	ip, #10
 801f972:	4621      	mov	r1, r4
 801f974:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f978:	3b30      	subs	r3, #48	; 0x30
 801f97a:	2b09      	cmp	r3, #9
 801f97c:	d94e      	bls.n	801fa1c <_vfiprintf_r+0x1c4>
 801f97e:	b1b0      	cbz	r0, 801f9ae <_vfiprintf_r+0x156>
 801f980:	9207      	str	r2, [sp, #28]
 801f982:	e014      	b.n	801f9ae <_vfiprintf_r+0x156>
 801f984:	eba0 0308 	sub.w	r3, r0, r8
 801f988:	fa09 f303 	lsl.w	r3, r9, r3
 801f98c:	4313      	orrs	r3, r2
 801f98e:	9304      	str	r3, [sp, #16]
 801f990:	46a2      	mov	sl, r4
 801f992:	e7d2      	b.n	801f93a <_vfiprintf_r+0xe2>
 801f994:	9b03      	ldr	r3, [sp, #12]
 801f996:	1d19      	adds	r1, r3, #4
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	9103      	str	r1, [sp, #12]
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	bfbb      	ittet	lt
 801f9a0:	425b      	neglt	r3, r3
 801f9a2:	f042 0202 	orrlt.w	r2, r2, #2
 801f9a6:	9307      	strge	r3, [sp, #28]
 801f9a8:	9307      	strlt	r3, [sp, #28]
 801f9aa:	bfb8      	it	lt
 801f9ac:	9204      	strlt	r2, [sp, #16]
 801f9ae:	7823      	ldrb	r3, [r4, #0]
 801f9b0:	2b2e      	cmp	r3, #46	; 0x2e
 801f9b2:	d10c      	bne.n	801f9ce <_vfiprintf_r+0x176>
 801f9b4:	7863      	ldrb	r3, [r4, #1]
 801f9b6:	2b2a      	cmp	r3, #42	; 0x2a
 801f9b8:	d135      	bne.n	801fa26 <_vfiprintf_r+0x1ce>
 801f9ba:	9b03      	ldr	r3, [sp, #12]
 801f9bc:	1d1a      	adds	r2, r3, #4
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	9203      	str	r2, [sp, #12]
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	bfb8      	it	lt
 801f9c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f9ca:	3402      	adds	r4, #2
 801f9cc:	9305      	str	r3, [sp, #20]
 801f9ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fab4 <_vfiprintf_r+0x25c>
 801f9d2:	7821      	ldrb	r1, [r4, #0]
 801f9d4:	2203      	movs	r2, #3
 801f9d6:	4650      	mov	r0, sl
 801f9d8:	f7e0 fc02 	bl	80001e0 <memchr>
 801f9dc:	b140      	cbz	r0, 801f9f0 <_vfiprintf_r+0x198>
 801f9de:	2340      	movs	r3, #64	; 0x40
 801f9e0:	eba0 000a 	sub.w	r0, r0, sl
 801f9e4:	fa03 f000 	lsl.w	r0, r3, r0
 801f9e8:	9b04      	ldr	r3, [sp, #16]
 801f9ea:	4303      	orrs	r3, r0
 801f9ec:	3401      	adds	r4, #1
 801f9ee:	9304      	str	r3, [sp, #16]
 801f9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f9f4:	482c      	ldr	r0, [pc, #176]	; (801faa8 <_vfiprintf_r+0x250>)
 801f9f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f9fa:	2206      	movs	r2, #6
 801f9fc:	f7e0 fbf0 	bl	80001e0 <memchr>
 801fa00:	2800      	cmp	r0, #0
 801fa02:	d03f      	beq.n	801fa84 <_vfiprintf_r+0x22c>
 801fa04:	4b29      	ldr	r3, [pc, #164]	; (801faac <_vfiprintf_r+0x254>)
 801fa06:	bb1b      	cbnz	r3, 801fa50 <_vfiprintf_r+0x1f8>
 801fa08:	9b03      	ldr	r3, [sp, #12]
 801fa0a:	3307      	adds	r3, #7
 801fa0c:	f023 0307 	bic.w	r3, r3, #7
 801fa10:	3308      	adds	r3, #8
 801fa12:	9303      	str	r3, [sp, #12]
 801fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa16:	443b      	add	r3, r7
 801fa18:	9309      	str	r3, [sp, #36]	; 0x24
 801fa1a:	e767      	b.n	801f8ec <_vfiprintf_r+0x94>
 801fa1c:	fb0c 3202 	mla	r2, ip, r2, r3
 801fa20:	460c      	mov	r4, r1
 801fa22:	2001      	movs	r0, #1
 801fa24:	e7a5      	b.n	801f972 <_vfiprintf_r+0x11a>
 801fa26:	2300      	movs	r3, #0
 801fa28:	3401      	adds	r4, #1
 801fa2a:	9305      	str	r3, [sp, #20]
 801fa2c:	4619      	mov	r1, r3
 801fa2e:	f04f 0c0a 	mov.w	ip, #10
 801fa32:	4620      	mov	r0, r4
 801fa34:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fa38:	3a30      	subs	r2, #48	; 0x30
 801fa3a:	2a09      	cmp	r2, #9
 801fa3c:	d903      	bls.n	801fa46 <_vfiprintf_r+0x1ee>
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d0c5      	beq.n	801f9ce <_vfiprintf_r+0x176>
 801fa42:	9105      	str	r1, [sp, #20]
 801fa44:	e7c3      	b.n	801f9ce <_vfiprintf_r+0x176>
 801fa46:	fb0c 2101 	mla	r1, ip, r1, r2
 801fa4a:	4604      	mov	r4, r0
 801fa4c:	2301      	movs	r3, #1
 801fa4e:	e7f0      	b.n	801fa32 <_vfiprintf_r+0x1da>
 801fa50:	ab03      	add	r3, sp, #12
 801fa52:	9300      	str	r3, [sp, #0]
 801fa54:	462a      	mov	r2, r5
 801fa56:	4b16      	ldr	r3, [pc, #88]	; (801fab0 <_vfiprintf_r+0x258>)
 801fa58:	a904      	add	r1, sp, #16
 801fa5a:	4630      	mov	r0, r6
 801fa5c:	f7fb feee 	bl	801b83c <_printf_float>
 801fa60:	4607      	mov	r7, r0
 801fa62:	1c78      	adds	r0, r7, #1
 801fa64:	d1d6      	bne.n	801fa14 <_vfiprintf_r+0x1bc>
 801fa66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fa68:	07d9      	lsls	r1, r3, #31
 801fa6a:	d405      	bmi.n	801fa78 <_vfiprintf_r+0x220>
 801fa6c:	89ab      	ldrh	r3, [r5, #12]
 801fa6e:	059a      	lsls	r2, r3, #22
 801fa70:	d402      	bmi.n	801fa78 <_vfiprintf_r+0x220>
 801fa72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa74:	f7fb fd96 	bl	801b5a4 <__retarget_lock_release_recursive>
 801fa78:	89ab      	ldrh	r3, [r5, #12]
 801fa7a:	065b      	lsls	r3, r3, #25
 801fa7c:	f53f af12 	bmi.w	801f8a4 <_vfiprintf_r+0x4c>
 801fa80:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa82:	e711      	b.n	801f8a8 <_vfiprintf_r+0x50>
 801fa84:	ab03      	add	r3, sp, #12
 801fa86:	9300      	str	r3, [sp, #0]
 801fa88:	462a      	mov	r2, r5
 801fa8a:	4b09      	ldr	r3, [pc, #36]	; (801fab0 <_vfiprintf_r+0x258>)
 801fa8c:	a904      	add	r1, sp, #16
 801fa8e:	4630      	mov	r0, r6
 801fa90:	f7fc f978 	bl	801bd84 <_printf_i>
 801fa94:	e7e4      	b.n	801fa60 <_vfiprintf_r+0x208>
 801fa96:	bf00      	nop
 801fa98:	08022e9c 	.word	0x08022e9c
 801fa9c:	08022ebc 	.word	0x08022ebc
 801faa0:	08022e7c 	.word	0x08022e7c
 801faa4:	080232d4 	.word	0x080232d4
 801faa8:	080232de 	.word	0x080232de
 801faac:	0801b83d 	.word	0x0801b83d
 801fab0:	0801f835 	.word	0x0801f835
 801fab4:	080232da 	.word	0x080232da

0801fab8 <__swbuf_r>:
 801fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801faba:	460e      	mov	r6, r1
 801fabc:	4614      	mov	r4, r2
 801fabe:	4605      	mov	r5, r0
 801fac0:	b118      	cbz	r0, 801faca <__swbuf_r+0x12>
 801fac2:	6983      	ldr	r3, [r0, #24]
 801fac4:	b90b      	cbnz	r3, 801faca <__swbuf_r+0x12>
 801fac6:	f7fb fca9 	bl	801b41c <__sinit>
 801faca:	4b21      	ldr	r3, [pc, #132]	; (801fb50 <__swbuf_r+0x98>)
 801facc:	429c      	cmp	r4, r3
 801face:	d12b      	bne.n	801fb28 <__swbuf_r+0x70>
 801fad0:	686c      	ldr	r4, [r5, #4]
 801fad2:	69a3      	ldr	r3, [r4, #24]
 801fad4:	60a3      	str	r3, [r4, #8]
 801fad6:	89a3      	ldrh	r3, [r4, #12]
 801fad8:	071a      	lsls	r2, r3, #28
 801fada:	d52f      	bpl.n	801fb3c <__swbuf_r+0x84>
 801fadc:	6923      	ldr	r3, [r4, #16]
 801fade:	b36b      	cbz	r3, 801fb3c <__swbuf_r+0x84>
 801fae0:	6923      	ldr	r3, [r4, #16]
 801fae2:	6820      	ldr	r0, [r4, #0]
 801fae4:	1ac0      	subs	r0, r0, r3
 801fae6:	6963      	ldr	r3, [r4, #20]
 801fae8:	b2f6      	uxtb	r6, r6
 801faea:	4283      	cmp	r3, r0
 801faec:	4637      	mov	r7, r6
 801faee:	dc04      	bgt.n	801fafa <__swbuf_r+0x42>
 801faf0:	4621      	mov	r1, r4
 801faf2:	4628      	mov	r0, r5
 801faf4:	f7fe fb6a 	bl	801e1cc <_fflush_r>
 801faf8:	bb30      	cbnz	r0, 801fb48 <__swbuf_r+0x90>
 801fafa:	68a3      	ldr	r3, [r4, #8]
 801fafc:	3b01      	subs	r3, #1
 801fafe:	60a3      	str	r3, [r4, #8]
 801fb00:	6823      	ldr	r3, [r4, #0]
 801fb02:	1c5a      	adds	r2, r3, #1
 801fb04:	6022      	str	r2, [r4, #0]
 801fb06:	701e      	strb	r6, [r3, #0]
 801fb08:	6963      	ldr	r3, [r4, #20]
 801fb0a:	3001      	adds	r0, #1
 801fb0c:	4283      	cmp	r3, r0
 801fb0e:	d004      	beq.n	801fb1a <__swbuf_r+0x62>
 801fb10:	89a3      	ldrh	r3, [r4, #12]
 801fb12:	07db      	lsls	r3, r3, #31
 801fb14:	d506      	bpl.n	801fb24 <__swbuf_r+0x6c>
 801fb16:	2e0a      	cmp	r6, #10
 801fb18:	d104      	bne.n	801fb24 <__swbuf_r+0x6c>
 801fb1a:	4621      	mov	r1, r4
 801fb1c:	4628      	mov	r0, r5
 801fb1e:	f7fe fb55 	bl	801e1cc <_fflush_r>
 801fb22:	b988      	cbnz	r0, 801fb48 <__swbuf_r+0x90>
 801fb24:	4638      	mov	r0, r7
 801fb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb28:	4b0a      	ldr	r3, [pc, #40]	; (801fb54 <__swbuf_r+0x9c>)
 801fb2a:	429c      	cmp	r4, r3
 801fb2c:	d101      	bne.n	801fb32 <__swbuf_r+0x7a>
 801fb2e:	68ac      	ldr	r4, [r5, #8]
 801fb30:	e7cf      	b.n	801fad2 <__swbuf_r+0x1a>
 801fb32:	4b09      	ldr	r3, [pc, #36]	; (801fb58 <__swbuf_r+0xa0>)
 801fb34:	429c      	cmp	r4, r3
 801fb36:	bf08      	it	eq
 801fb38:	68ec      	ldreq	r4, [r5, #12]
 801fb3a:	e7ca      	b.n	801fad2 <__swbuf_r+0x1a>
 801fb3c:	4621      	mov	r1, r4
 801fb3e:	4628      	mov	r0, r5
 801fb40:	f000 f80c 	bl	801fb5c <__swsetup_r>
 801fb44:	2800      	cmp	r0, #0
 801fb46:	d0cb      	beq.n	801fae0 <__swbuf_r+0x28>
 801fb48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fb4c:	e7ea      	b.n	801fb24 <__swbuf_r+0x6c>
 801fb4e:	bf00      	nop
 801fb50:	08022e9c 	.word	0x08022e9c
 801fb54:	08022ebc 	.word	0x08022ebc
 801fb58:	08022e7c 	.word	0x08022e7c

0801fb5c <__swsetup_r>:
 801fb5c:	4b32      	ldr	r3, [pc, #200]	; (801fc28 <__swsetup_r+0xcc>)
 801fb5e:	b570      	push	{r4, r5, r6, lr}
 801fb60:	681d      	ldr	r5, [r3, #0]
 801fb62:	4606      	mov	r6, r0
 801fb64:	460c      	mov	r4, r1
 801fb66:	b125      	cbz	r5, 801fb72 <__swsetup_r+0x16>
 801fb68:	69ab      	ldr	r3, [r5, #24]
 801fb6a:	b913      	cbnz	r3, 801fb72 <__swsetup_r+0x16>
 801fb6c:	4628      	mov	r0, r5
 801fb6e:	f7fb fc55 	bl	801b41c <__sinit>
 801fb72:	4b2e      	ldr	r3, [pc, #184]	; (801fc2c <__swsetup_r+0xd0>)
 801fb74:	429c      	cmp	r4, r3
 801fb76:	d10f      	bne.n	801fb98 <__swsetup_r+0x3c>
 801fb78:	686c      	ldr	r4, [r5, #4]
 801fb7a:	89a3      	ldrh	r3, [r4, #12]
 801fb7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb80:	0719      	lsls	r1, r3, #28
 801fb82:	d42c      	bmi.n	801fbde <__swsetup_r+0x82>
 801fb84:	06dd      	lsls	r5, r3, #27
 801fb86:	d411      	bmi.n	801fbac <__swsetup_r+0x50>
 801fb88:	2309      	movs	r3, #9
 801fb8a:	6033      	str	r3, [r6, #0]
 801fb8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fb90:	81a3      	strh	r3, [r4, #12]
 801fb92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb96:	e03e      	b.n	801fc16 <__swsetup_r+0xba>
 801fb98:	4b25      	ldr	r3, [pc, #148]	; (801fc30 <__swsetup_r+0xd4>)
 801fb9a:	429c      	cmp	r4, r3
 801fb9c:	d101      	bne.n	801fba2 <__swsetup_r+0x46>
 801fb9e:	68ac      	ldr	r4, [r5, #8]
 801fba0:	e7eb      	b.n	801fb7a <__swsetup_r+0x1e>
 801fba2:	4b24      	ldr	r3, [pc, #144]	; (801fc34 <__swsetup_r+0xd8>)
 801fba4:	429c      	cmp	r4, r3
 801fba6:	bf08      	it	eq
 801fba8:	68ec      	ldreq	r4, [r5, #12]
 801fbaa:	e7e6      	b.n	801fb7a <__swsetup_r+0x1e>
 801fbac:	0758      	lsls	r0, r3, #29
 801fbae:	d512      	bpl.n	801fbd6 <__swsetup_r+0x7a>
 801fbb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fbb2:	b141      	cbz	r1, 801fbc6 <__swsetup_r+0x6a>
 801fbb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fbb8:	4299      	cmp	r1, r3
 801fbba:	d002      	beq.n	801fbc2 <__swsetup_r+0x66>
 801fbbc:	4630      	mov	r0, r6
 801fbbe:	f7ff fbc5 	bl	801f34c <_free_r>
 801fbc2:	2300      	movs	r3, #0
 801fbc4:	6363      	str	r3, [r4, #52]	; 0x34
 801fbc6:	89a3      	ldrh	r3, [r4, #12]
 801fbc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fbcc:	81a3      	strh	r3, [r4, #12]
 801fbce:	2300      	movs	r3, #0
 801fbd0:	6063      	str	r3, [r4, #4]
 801fbd2:	6923      	ldr	r3, [r4, #16]
 801fbd4:	6023      	str	r3, [r4, #0]
 801fbd6:	89a3      	ldrh	r3, [r4, #12]
 801fbd8:	f043 0308 	orr.w	r3, r3, #8
 801fbdc:	81a3      	strh	r3, [r4, #12]
 801fbde:	6923      	ldr	r3, [r4, #16]
 801fbe0:	b94b      	cbnz	r3, 801fbf6 <__swsetup_r+0x9a>
 801fbe2:	89a3      	ldrh	r3, [r4, #12]
 801fbe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fbe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fbec:	d003      	beq.n	801fbf6 <__swsetup_r+0x9a>
 801fbee:	4621      	mov	r1, r4
 801fbf0:	4630      	mov	r0, r6
 801fbf2:	f000 f84d 	bl	801fc90 <__smakebuf_r>
 801fbf6:	89a0      	ldrh	r0, [r4, #12]
 801fbf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fbfc:	f010 0301 	ands.w	r3, r0, #1
 801fc00:	d00a      	beq.n	801fc18 <__swsetup_r+0xbc>
 801fc02:	2300      	movs	r3, #0
 801fc04:	60a3      	str	r3, [r4, #8]
 801fc06:	6963      	ldr	r3, [r4, #20]
 801fc08:	425b      	negs	r3, r3
 801fc0a:	61a3      	str	r3, [r4, #24]
 801fc0c:	6923      	ldr	r3, [r4, #16]
 801fc0e:	b943      	cbnz	r3, 801fc22 <__swsetup_r+0xc6>
 801fc10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fc14:	d1ba      	bne.n	801fb8c <__swsetup_r+0x30>
 801fc16:	bd70      	pop	{r4, r5, r6, pc}
 801fc18:	0781      	lsls	r1, r0, #30
 801fc1a:	bf58      	it	pl
 801fc1c:	6963      	ldrpl	r3, [r4, #20]
 801fc1e:	60a3      	str	r3, [r4, #8]
 801fc20:	e7f4      	b.n	801fc0c <__swsetup_r+0xb0>
 801fc22:	2000      	movs	r0, #0
 801fc24:	e7f7      	b.n	801fc16 <__swsetup_r+0xba>
 801fc26:	bf00      	nop
 801fc28:	20000110 	.word	0x20000110
 801fc2c:	08022e9c 	.word	0x08022e9c
 801fc30:	08022ebc 	.word	0x08022ebc
 801fc34:	08022e7c 	.word	0x08022e7c

0801fc38 <abort>:
 801fc38:	b508      	push	{r3, lr}
 801fc3a:	2006      	movs	r0, #6
 801fc3c:	f000 f898 	bl	801fd70 <raise>
 801fc40:	2001      	movs	r0, #1
 801fc42:	f002 fd59 	bl	80226f8 <_exit>

0801fc46 <__swhatbuf_r>:
 801fc46:	b570      	push	{r4, r5, r6, lr}
 801fc48:	460e      	mov	r6, r1
 801fc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc4e:	2900      	cmp	r1, #0
 801fc50:	b096      	sub	sp, #88	; 0x58
 801fc52:	4614      	mov	r4, r2
 801fc54:	461d      	mov	r5, r3
 801fc56:	da08      	bge.n	801fc6a <__swhatbuf_r+0x24>
 801fc58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	602a      	str	r2, [r5, #0]
 801fc60:	061a      	lsls	r2, r3, #24
 801fc62:	d410      	bmi.n	801fc86 <__swhatbuf_r+0x40>
 801fc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fc68:	e00e      	b.n	801fc88 <__swhatbuf_r+0x42>
 801fc6a:	466a      	mov	r2, sp
 801fc6c:	f000 f89c 	bl	801fda8 <_fstat_r>
 801fc70:	2800      	cmp	r0, #0
 801fc72:	dbf1      	blt.n	801fc58 <__swhatbuf_r+0x12>
 801fc74:	9a01      	ldr	r2, [sp, #4]
 801fc76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fc7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fc7e:	425a      	negs	r2, r3
 801fc80:	415a      	adcs	r2, r3
 801fc82:	602a      	str	r2, [r5, #0]
 801fc84:	e7ee      	b.n	801fc64 <__swhatbuf_r+0x1e>
 801fc86:	2340      	movs	r3, #64	; 0x40
 801fc88:	2000      	movs	r0, #0
 801fc8a:	6023      	str	r3, [r4, #0]
 801fc8c:	b016      	add	sp, #88	; 0x58
 801fc8e:	bd70      	pop	{r4, r5, r6, pc}

0801fc90 <__smakebuf_r>:
 801fc90:	898b      	ldrh	r3, [r1, #12]
 801fc92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fc94:	079d      	lsls	r5, r3, #30
 801fc96:	4606      	mov	r6, r0
 801fc98:	460c      	mov	r4, r1
 801fc9a:	d507      	bpl.n	801fcac <__smakebuf_r+0x1c>
 801fc9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fca0:	6023      	str	r3, [r4, #0]
 801fca2:	6123      	str	r3, [r4, #16]
 801fca4:	2301      	movs	r3, #1
 801fca6:	6163      	str	r3, [r4, #20]
 801fca8:	b002      	add	sp, #8
 801fcaa:	bd70      	pop	{r4, r5, r6, pc}
 801fcac:	ab01      	add	r3, sp, #4
 801fcae:	466a      	mov	r2, sp
 801fcb0:	f7ff ffc9 	bl	801fc46 <__swhatbuf_r>
 801fcb4:	9900      	ldr	r1, [sp, #0]
 801fcb6:	4605      	mov	r5, r0
 801fcb8:	4630      	mov	r0, r6
 801fcba:	f7fb fcab 	bl	801b614 <_malloc_r>
 801fcbe:	b948      	cbnz	r0, 801fcd4 <__smakebuf_r+0x44>
 801fcc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fcc4:	059a      	lsls	r2, r3, #22
 801fcc6:	d4ef      	bmi.n	801fca8 <__smakebuf_r+0x18>
 801fcc8:	f023 0303 	bic.w	r3, r3, #3
 801fccc:	f043 0302 	orr.w	r3, r3, #2
 801fcd0:	81a3      	strh	r3, [r4, #12]
 801fcd2:	e7e3      	b.n	801fc9c <__smakebuf_r+0xc>
 801fcd4:	4b0d      	ldr	r3, [pc, #52]	; (801fd0c <__smakebuf_r+0x7c>)
 801fcd6:	62b3      	str	r3, [r6, #40]	; 0x28
 801fcd8:	89a3      	ldrh	r3, [r4, #12]
 801fcda:	6020      	str	r0, [r4, #0]
 801fcdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fce0:	81a3      	strh	r3, [r4, #12]
 801fce2:	9b00      	ldr	r3, [sp, #0]
 801fce4:	6163      	str	r3, [r4, #20]
 801fce6:	9b01      	ldr	r3, [sp, #4]
 801fce8:	6120      	str	r0, [r4, #16]
 801fcea:	b15b      	cbz	r3, 801fd04 <__smakebuf_r+0x74>
 801fcec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fcf0:	4630      	mov	r0, r6
 801fcf2:	f000 f86b 	bl	801fdcc <_isatty_r>
 801fcf6:	b128      	cbz	r0, 801fd04 <__smakebuf_r+0x74>
 801fcf8:	89a3      	ldrh	r3, [r4, #12]
 801fcfa:	f023 0303 	bic.w	r3, r3, #3
 801fcfe:	f043 0301 	orr.w	r3, r3, #1
 801fd02:	81a3      	strh	r3, [r4, #12]
 801fd04:	89a0      	ldrh	r0, [r4, #12]
 801fd06:	4305      	orrs	r5, r0
 801fd08:	81a5      	strh	r5, [r4, #12]
 801fd0a:	e7cd      	b.n	801fca8 <__smakebuf_r+0x18>
 801fd0c:	0801b3b5 	.word	0x0801b3b5

0801fd10 <_malloc_usable_size_r>:
 801fd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd14:	1f18      	subs	r0, r3, #4
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	bfbc      	itt	lt
 801fd1a:	580b      	ldrlt	r3, [r1, r0]
 801fd1c:	18c0      	addlt	r0, r0, r3
 801fd1e:	4770      	bx	lr

0801fd20 <_raise_r>:
 801fd20:	291f      	cmp	r1, #31
 801fd22:	b538      	push	{r3, r4, r5, lr}
 801fd24:	4604      	mov	r4, r0
 801fd26:	460d      	mov	r5, r1
 801fd28:	d904      	bls.n	801fd34 <_raise_r+0x14>
 801fd2a:	2316      	movs	r3, #22
 801fd2c:	6003      	str	r3, [r0, #0]
 801fd2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fd32:	bd38      	pop	{r3, r4, r5, pc}
 801fd34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fd36:	b112      	cbz	r2, 801fd3e <_raise_r+0x1e>
 801fd38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fd3c:	b94b      	cbnz	r3, 801fd52 <_raise_r+0x32>
 801fd3e:	4620      	mov	r0, r4
 801fd40:	f000 f830 	bl	801fda4 <_getpid_r>
 801fd44:	462a      	mov	r2, r5
 801fd46:	4601      	mov	r1, r0
 801fd48:	4620      	mov	r0, r4
 801fd4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd4e:	f000 b817 	b.w	801fd80 <_kill_r>
 801fd52:	2b01      	cmp	r3, #1
 801fd54:	d00a      	beq.n	801fd6c <_raise_r+0x4c>
 801fd56:	1c59      	adds	r1, r3, #1
 801fd58:	d103      	bne.n	801fd62 <_raise_r+0x42>
 801fd5a:	2316      	movs	r3, #22
 801fd5c:	6003      	str	r3, [r0, #0]
 801fd5e:	2001      	movs	r0, #1
 801fd60:	e7e7      	b.n	801fd32 <_raise_r+0x12>
 801fd62:	2400      	movs	r4, #0
 801fd64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fd68:	4628      	mov	r0, r5
 801fd6a:	4798      	blx	r3
 801fd6c:	2000      	movs	r0, #0
 801fd6e:	e7e0      	b.n	801fd32 <_raise_r+0x12>

0801fd70 <raise>:
 801fd70:	4b02      	ldr	r3, [pc, #8]	; (801fd7c <raise+0xc>)
 801fd72:	4601      	mov	r1, r0
 801fd74:	6818      	ldr	r0, [r3, #0]
 801fd76:	f7ff bfd3 	b.w	801fd20 <_raise_r>
 801fd7a:	bf00      	nop
 801fd7c:	20000110 	.word	0x20000110

0801fd80 <_kill_r>:
 801fd80:	b538      	push	{r3, r4, r5, lr}
 801fd82:	4d07      	ldr	r5, [pc, #28]	; (801fda0 <_kill_r+0x20>)
 801fd84:	2300      	movs	r3, #0
 801fd86:	4604      	mov	r4, r0
 801fd88:	4608      	mov	r0, r1
 801fd8a:	4611      	mov	r1, r2
 801fd8c:	602b      	str	r3, [r5, #0]
 801fd8e:	f002 fc85 	bl	802269c <_kill>
 801fd92:	1c43      	adds	r3, r0, #1
 801fd94:	d102      	bne.n	801fd9c <_kill_r+0x1c>
 801fd96:	682b      	ldr	r3, [r5, #0]
 801fd98:	b103      	cbz	r3, 801fd9c <_kill_r+0x1c>
 801fd9a:	6023      	str	r3, [r4, #0]
 801fd9c:	bd38      	pop	{r3, r4, r5, pc}
 801fd9e:	bf00      	nop
 801fda0:	2000f198 	.word	0x2000f198

0801fda4 <_getpid_r>:
 801fda4:	f002 bc6a 	b.w	802267c <_getpid>

0801fda8 <_fstat_r>:
 801fda8:	b538      	push	{r3, r4, r5, lr}
 801fdaa:	4d07      	ldr	r5, [pc, #28]	; (801fdc8 <_fstat_r+0x20>)
 801fdac:	2300      	movs	r3, #0
 801fdae:	4604      	mov	r4, r0
 801fdb0:	4608      	mov	r0, r1
 801fdb2:	4611      	mov	r1, r2
 801fdb4:	602b      	str	r3, [r5, #0]
 801fdb6:	f002 fc59 	bl	802266c <_fstat>
 801fdba:	1c43      	adds	r3, r0, #1
 801fdbc:	d102      	bne.n	801fdc4 <_fstat_r+0x1c>
 801fdbe:	682b      	ldr	r3, [r5, #0]
 801fdc0:	b103      	cbz	r3, 801fdc4 <_fstat_r+0x1c>
 801fdc2:	6023      	str	r3, [r4, #0]
 801fdc4:	bd38      	pop	{r3, r4, r5, pc}
 801fdc6:	bf00      	nop
 801fdc8:	2000f198 	.word	0x2000f198

0801fdcc <_isatty_r>:
 801fdcc:	b538      	push	{r3, r4, r5, lr}
 801fdce:	4d06      	ldr	r5, [pc, #24]	; (801fde8 <_isatty_r+0x1c>)
 801fdd0:	2300      	movs	r3, #0
 801fdd2:	4604      	mov	r4, r0
 801fdd4:	4608      	mov	r0, r1
 801fdd6:	602b      	str	r3, [r5, #0]
 801fdd8:	f002 fc58 	bl	802268c <_isatty>
 801fddc:	1c43      	adds	r3, r0, #1
 801fdde:	d102      	bne.n	801fde6 <_isatty_r+0x1a>
 801fde0:	682b      	ldr	r3, [r5, #0]
 801fde2:	b103      	cbz	r3, 801fde6 <_isatty_r+0x1a>
 801fde4:	6023      	str	r3, [r4, #0]
 801fde6:	bd38      	pop	{r3, r4, r5, pc}
 801fde8:	2000f198 	.word	0x2000f198
 801fdec:	00000000 	.word	0x00000000

0801fdf0 <atan>:
 801fdf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdf4:	ec55 4b10 	vmov	r4, r5, d0
 801fdf8:	4bc3      	ldr	r3, [pc, #780]	; (8020108 <atan+0x318>)
 801fdfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801fdfe:	429e      	cmp	r6, r3
 801fe00:	46ab      	mov	fp, r5
 801fe02:	dd18      	ble.n	801fe36 <atan+0x46>
 801fe04:	4bc1      	ldr	r3, [pc, #772]	; (802010c <atan+0x31c>)
 801fe06:	429e      	cmp	r6, r3
 801fe08:	dc01      	bgt.n	801fe0e <atan+0x1e>
 801fe0a:	d109      	bne.n	801fe20 <atan+0x30>
 801fe0c:	b144      	cbz	r4, 801fe20 <atan+0x30>
 801fe0e:	4622      	mov	r2, r4
 801fe10:	462b      	mov	r3, r5
 801fe12:	4620      	mov	r0, r4
 801fe14:	4629      	mov	r1, r5
 801fe16:	f7e0 fa39 	bl	800028c <__adddf3>
 801fe1a:	4604      	mov	r4, r0
 801fe1c:	460d      	mov	r5, r1
 801fe1e:	e006      	b.n	801fe2e <atan+0x3e>
 801fe20:	f1bb 0f00 	cmp.w	fp, #0
 801fe24:	f300 8131 	bgt.w	802008a <atan+0x29a>
 801fe28:	a59b      	add	r5, pc, #620	; (adr r5, 8020098 <atan+0x2a8>)
 801fe2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801fe2e:	ec45 4b10 	vmov	d0, r4, r5
 801fe32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe36:	4bb6      	ldr	r3, [pc, #728]	; (8020110 <atan+0x320>)
 801fe38:	429e      	cmp	r6, r3
 801fe3a:	dc14      	bgt.n	801fe66 <atan+0x76>
 801fe3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801fe40:	429e      	cmp	r6, r3
 801fe42:	dc0d      	bgt.n	801fe60 <atan+0x70>
 801fe44:	a396      	add	r3, pc, #600	; (adr r3, 80200a0 <atan+0x2b0>)
 801fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe4a:	ee10 0a10 	vmov	r0, s0
 801fe4e:	4629      	mov	r1, r5
 801fe50:	f7e0 fa1c 	bl	800028c <__adddf3>
 801fe54:	4baf      	ldr	r3, [pc, #700]	; (8020114 <atan+0x324>)
 801fe56:	2200      	movs	r2, #0
 801fe58:	f7e0 fe5e 	bl	8000b18 <__aeabi_dcmpgt>
 801fe5c:	2800      	cmp	r0, #0
 801fe5e:	d1e6      	bne.n	801fe2e <atan+0x3e>
 801fe60:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801fe64:	e02b      	b.n	801febe <atan+0xce>
 801fe66:	f000 f9b7 	bl	80201d8 <fabs>
 801fe6a:	4bab      	ldr	r3, [pc, #684]	; (8020118 <atan+0x328>)
 801fe6c:	429e      	cmp	r6, r3
 801fe6e:	ec55 4b10 	vmov	r4, r5, d0
 801fe72:	f300 80bf 	bgt.w	801fff4 <atan+0x204>
 801fe76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801fe7a:	429e      	cmp	r6, r3
 801fe7c:	f300 80a0 	bgt.w	801ffc0 <atan+0x1d0>
 801fe80:	ee10 2a10 	vmov	r2, s0
 801fe84:	ee10 0a10 	vmov	r0, s0
 801fe88:	462b      	mov	r3, r5
 801fe8a:	4629      	mov	r1, r5
 801fe8c:	f7e0 f9fe 	bl	800028c <__adddf3>
 801fe90:	4ba0      	ldr	r3, [pc, #640]	; (8020114 <atan+0x324>)
 801fe92:	2200      	movs	r2, #0
 801fe94:	f7e0 f9f8 	bl	8000288 <__aeabi_dsub>
 801fe98:	2200      	movs	r2, #0
 801fe9a:	4606      	mov	r6, r0
 801fe9c:	460f      	mov	r7, r1
 801fe9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fea2:	4620      	mov	r0, r4
 801fea4:	4629      	mov	r1, r5
 801fea6:	f7e0 f9f1 	bl	800028c <__adddf3>
 801feaa:	4602      	mov	r2, r0
 801feac:	460b      	mov	r3, r1
 801feae:	4630      	mov	r0, r6
 801feb0:	4639      	mov	r1, r7
 801feb2:	f7e0 fccb 	bl	800084c <__aeabi_ddiv>
 801feb6:	f04f 0a00 	mov.w	sl, #0
 801feba:	4604      	mov	r4, r0
 801febc:	460d      	mov	r5, r1
 801febe:	4622      	mov	r2, r4
 801fec0:	462b      	mov	r3, r5
 801fec2:	4620      	mov	r0, r4
 801fec4:	4629      	mov	r1, r5
 801fec6:	f7e0 fb97 	bl	80005f8 <__aeabi_dmul>
 801feca:	4602      	mov	r2, r0
 801fecc:	460b      	mov	r3, r1
 801fece:	4680      	mov	r8, r0
 801fed0:	4689      	mov	r9, r1
 801fed2:	f7e0 fb91 	bl	80005f8 <__aeabi_dmul>
 801fed6:	a374      	add	r3, pc, #464	; (adr r3, 80200a8 <atan+0x2b8>)
 801fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fedc:	4606      	mov	r6, r0
 801fede:	460f      	mov	r7, r1
 801fee0:	f7e0 fb8a 	bl	80005f8 <__aeabi_dmul>
 801fee4:	a372      	add	r3, pc, #456	; (adr r3, 80200b0 <atan+0x2c0>)
 801fee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feea:	f7e0 f9cf 	bl	800028c <__adddf3>
 801feee:	4632      	mov	r2, r6
 801fef0:	463b      	mov	r3, r7
 801fef2:	f7e0 fb81 	bl	80005f8 <__aeabi_dmul>
 801fef6:	a370      	add	r3, pc, #448	; (adr r3, 80200b8 <atan+0x2c8>)
 801fef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fefc:	f7e0 f9c6 	bl	800028c <__adddf3>
 801ff00:	4632      	mov	r2, r6
 801ff02:	463b      	mov	r3, r7
 801ff04:	f7e0 fb78 	bl	80005f8 <__aeabi_dmul>
 801ff08:	a36d      	add	r3, pc, #436	; (adr r3, 80200c0 <atan+0x2d0>)
 801ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff0e:	f7e0 f9bd 	bl	800028c <__adddf3>
 801ff12:	4632      	mov	r2, r6
 801ff14:	463b      	mov	r3, r7
 801ff16:	f7e0 fb6f 	bl	80005f8 <__aeabi_dmul>
 801ff1a:	a36b      	add	r3, pc, #428	; (adr r3, 80200c8 <atan+0x2d8>)
 801ff1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff20:	f7e0 f9b4 	bl	800028c <__adddf3>
 801ff24:	4632      	mov	r2, r6
 801ff26:	463b      	mov	r3, r7
 801ff28:	f7e0 fb66 	bl	80005f8 <__aeabi_dmul>
 801ff2c:	a368      	add	r3, pc, #416	; (adr r3, 80200d0 <atan+0x2e0>)
 801ff2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff32:	f7e0 f9ab 	bl	800028c <__adddf3>
 801ff36:	4642      	mov	r2, r8
 801ff38:	464b      	mov	r3, r9
 801ff3a:	f7e0 fb5d 	bl	80005f8 <__aeabi_dmul>
 801ff3e:	a366      	add	r3, pc, #408	; (adr r3, 80200d8 <atan+0x2e8>)
 801ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff44:	4680      	mov	r8, r0
 801ff46:	4689      	mov	r9, r1
 801ff48:	4630      	mov	r0, r6
 801ff4a:	4639      	mov	r1, r7
 801ff4c:	f7e0 fb54 	bl	80005f8 <__aeabi_dmul>
 801ff50:	a363      	add	r3, pc, #396	; (adr r3, 80200e0 <atan+0x2f0>)
 801ff52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff56:	f7e0 f997 	bl	8000288 <__aeabi_dsub>
 801ff5a:	4632      	mov	r2, r6
 801ff5c:	463b      	mov	r3, r7
 801ff5e:	f7e0 fb4b 	bl	80005f8 <__aeabi_dmul>
 801ff62:	a361      	add	r3, pc, #388	; (adr r3, 80200e8 <atan+0x2f8>)
 801ff64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff68:	f7e0 f98e 	bl	8000288 <__aeabi_dsub>
 801ff6c:	4632      	mov	r2, r6
 801ff6e:	463b      	mov	r3, r7
 801ff70:	f7e0 fb42 	bl	80005f8 <__aeabi_dmul>
 801ff74:	a35e      	add	r3, pc, #376	; (adr r3, 80200f0 <atan+0x300>)
 801ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff7a:	f7e0 f985 	bl	8000288 <__aeabi_dsub>
 801ff7e:	4632      	mov	r2, r6
 801ff80:	463b      	mov	r3, r7
 801ff82:	f7e0 fb39 	bl	80005f8 <__aeabi_dmul>
 801ff86:	a35c      	add	r3, pc, #368	; (adr r3, 80200f8 <atan+0x308>)
 801ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff8c:	f7e0 f97c 	bl	8000288 <__aeabi_dsub>
 801ff90:	4632      	mov	r2, r6
 801ff92:	463b      	mov	r3, r7
 801ff94:	f7e0 fb30 	bl	80005f8 <__aeabi_dmul>
 801ff98:	4602      	mov	r2, r0
 801ff9a:	460b      	mov	r3, r1
 801ff9c:	4640      	mov	r0, r8
 801ff9e:	4649      	mov	r1, r9
 801ffa0:	f7e0 f974 	bl	800028c <__adddf3>
 801ffa4:	4622      	mov	r2, r4
 801ffa6:	462b      	mov	r3, r5
 801ffa8:	f7e0 fb26 	bl	80005f8 <__aeabi_dmul>
 801ffac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801ffb0:	4602      	mov	r2, r0
 801ffb2:	460b      	mov	r3, r1
 801ffb4:	d14b      	bne.n	802004e <atan+0x25e>
 801ffb6:	4620      	mov	r0, r4
 801ffb8:	4629      	mov	r1, r5
 801ffba:	f7e0 f965 	bl	8000288 <__aeabi_dsub>
 801ffbe:	e72c      	b.n	801fe1a <atan+0x2a>
 801ffc0:	ee10 0a10 	vmov	r0, s0
 801ffc4:	4b53      	ldr	r3, [pc, #332]	; (8020114 <atan+0x324>)
 801ffc6:	2200      	movs	r2, #0
 801ffc8:	4629      	mov	r1, r5
 801ffca:	f7e0 f95d 	bl	8000288 <__aeabi_dsub>
 801ffce:	4b51      	ldr	r3, [pc, #324]	; (8020114 <atan+0x324>)
 801ffd0:	4606      	mov	r6, r0
 801ffd2:	460f      	mov	r7, r1
 801ffd4:	2200      	movs	r2, #0
 801ffd6:	4620      	mov	r0, r4
 801ffd8:	4629      	mov	r1, r5
 801ffda:	f7e0 f957 	bl	800028c <__adddf3>
 801ffde:	4602      	mov	r2, r0
 801ffe0:	460b      	mov	r3, r1
 801ffe2:	4630      	mov	r0, r6
 801ffe4:	4639      	mov	r1, r7
 801ffe6:	f7e0 fc31 	bl	800084c <__aeabi_ddiv>
 801ffea:	f04f 0a01 	mov.w	sl, #1
 801ffee:	4604      	mov	r4, r0
 801fff0:	460d      	mov	r5, r1
 801fff2:	e764      	b.n	801febe <atan+0xce>
 801fff4:	4b49      	ldr	r3, [pc, #292]	; (802011c <atan+0x32c>)
 801fff6:	429e      	cmp	r6, r3
 801fff8:	da1d      	bge.n	8020036 <atan+0x246>
 801fffa:	ee10 0a10 	vmov	r0, s0
 801fffe:	4b48      	ldr	r3, [pc, #288]	; (8020120 <atan+0x330>)
 8020000:	2200      	movs	r2, #0
 8020002:	4629      	mov	r1, r5
 8020004:	f7e0 f940 	bl	8000288 <__aeabi_dsub>
 8020008:	4b45      	ldr	r3, [pc, #276]	; (8020120 <atan+0x330>)
 802000a:	4606      	mov	r6, r0
 802000c:	460f      	mov	r7, r1
 802000e:	2200      	movs	r2, #0
 8020010:	4620      	mov	r0, r4
 8020012:	4629      	mov	r1, r5
 8020014:	f7e0 faf0 	bl	80005f8 <__aeabi_dmul>
 8020018:	4b3e      	ldr	r3, [pc, #248]	; (8020114 <atan+0x324>)
 802001a:	2200      	movs	r2, #0
 802001c:	f7e0 f936 	bl	800028c <__adddf3>
 8020020:	4602      	mov	r2, r0
 8020022:	460b      	mov	r3, r1
 8020024:	4630      	mov	r0, r6
 8020026:	4639      	mov	r1, r7
 8020028:	f7e0 fc10 	bl	800084c <__aeabi_ddiv>
 802002c:	f04f 0a02 	mov.w	sl, #2
 8020030:	4604      	mov	r4, r0
 8020032:	460d      	mov	r5, r1
 8020034:	e743      	b.n	801febe <atan+0xce>
 8020036:	462b      	mov	r3, r5
 8020038:	ee10 2a10 	vmov	r2, s0
 802003c:	4939      	ldr	r1, [pc, #228]	; (8020124 <atan+0x334>)
 802003e:	2000      	movs	r0, #0
 8020040:	f7e0 fc04 	bl	800084c <__aeabi_ddiv>
 8020044:	f04f 0a03 	mov.w	sl, #3
 8020048:	4604      	mov	r4, r0
 802004a:	460d      	mov	r5, r1
 802004c:	e737      	b.n	801febe <atan+0xce>
 802004e:	4b36      	ldr	r3, [pc, #216]	; (8020128 <atan+0x338>)
 8020050:	4e36      	ldr	r6, [pc, #216]	; (802012c <atan+0x33c>)
 8020052:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8020056:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 802005a:	e9da 2300 	ldrd	r2, r3, [sl]
 802005e:	f7e0 f913 	bl	8000288 <__aeabi_dsub>
 8020062:	4622      	mov	r2, r4
 8020064:	462b      	mov	r3, r5
 8020066:	f7e0 f90f 	bl	8000288 <__aeabi_dsub>
 802006a:	4602      	mov	r2, r0
 802006c:	460b      	mov	r3, r1
 802006e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8020072:	f7e0 f909 	bl	8000288 <__aeabi_dsub>
 8020076:	f1bb 0f00 	cmp.w	fp, #0
 802007a:	4604      	mov	r4, r0
 802007c:	460d      	mov	r5, r1
 802007e:	f6bf aed6 	bge.w	801fe2e <atan+0x3e>
 8020082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020086:	461d      	mov	r5, r3
 8020088:	e6d1      	b.n	801fe2e <atan+0x3e>
 802008a:	a51d      	add	r5, pc, #116	; (adr r5, 8020100 <atan+0x310>)
 802008c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020090:	e6cd      	b.n	801fe2e <atan+0x3e>
 8020092:	bf00      	nop
 8020094:	f3af 8000 	nop.w
 8020098:	54442d18 	.word	0x54442d18
 802009c:	bff921fb 	.word	0xbff921fb
 80200a0:	8800759c 	.word	0x8800759c
 80200a4:	7e37e43c 	.word	0x7e37e43c
 80200a8:	e322da11 	.word	0xe322da11
 80200ac:	3f90ad3a 	.word	0x3f90ad3a
 80200b0:	24760deb 	.word	0x24760deb
 80200b4:	3fa97b4b 	.word	0x3fa97b4b
 80200b8:	a0d03d51 	.word	0xa0d03d51
 80200bc:	3fb10d66 	.word	0x3fb10d66
 80200c0:	c54c206e 	.word	0xc54c206e
 80200c4:	3fb745cd 	.word	0x3fb745cd
 80200c8:	920083ff 	.word	0x920083ff
 80200cc:	3fc24924 	.word	0x3fc24924
 80200d0:	5555550d 	.word	0x5555550d
 80200d4:	3fd55555 	.word	0x3fd55555
 80200d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80200dc:	bfa2b444 	.word	0xbfa2b444
 80200e0:	52defd9a 	.word	0x52defd9a
 80200e4:	3fadde2d 	.word	0x3fadde2d
 80200e8:	af749a6d 	.word	0xaf749a6d
 80200ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80200f0:	fe231671 	.word	0xfe231671
 80200f4:	3fbc71c6 	.word	0x3fbc71c6
 80200f8:	9998ebc4 	.word	0x9998ebc4
 80200fc:	3fc99999 	.word	0x3fc99999
 8020100:	54442d18 	.word	0x54442d18
 8020104:	3ff921fb 	.word	0x3ff921fb
 8020108:	440fffff 	.word	0x440fffff
 802010c:	7ff00000 	.word	0x7ff00000
 8020110:	3fdbffff 	.word	0x3fdbffff
 8020114:	3ff00000 	.word	0x3ff00000
 8020118:	3ff2ffff 	.word	0x3ff2ffff
 802011c:	40038000 	.word	0x40038000
 8020120:	3ff80000 	.word	0x3ff80000
 8020124:	bff00000 	.word	0xbff00000
 8020128:	08023348 	.word	0x08023348
 802012c:	08023328 	.word	0x08023328

08020130 <cos>:
 8020130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020132:	ec53 2b10 	vmov	r2, r3, d0
 8020136:	4826      	ldr	r0, [pc, #152]	; (80201d0 <cos+0xa0>)
 8020138:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802013c:	4281      	cmp	r1, r0
 802013e:	dc06      	bgt.n	802014e <cos+0x1e>
 8020140:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80201c8 <cos+0x98>
 8020144:	b005      	add	sp, #20
 8020146:	f85d eb04 	ldr.w	lr, [sp], #4
 802014a:	f001 bced 	b.w	8021b28 <__kernel_cos>
 802014e:	4821      	ldr	r0, [pc, #132]	; (80201d4 <cos+0xa4>)
 8020150:	4281      	cmp	r1, r0
 8020152:	dd09      	ble.n	8020168 <cos+0x38>
 8020154:	ee10 0a10 	vmov	r0, s0
 8020158:	4619      	mov	r1, r3
 802015a:	f7e0 f895 	bl	8000288 <__aeabi_dsub>
 802015e:	ec41 0b10 	vmov	d0, r0, r1
 8020162:	b005      	add	sp, #20
 8020164:	f85d fb04 	ldr.w	pc, [sp], #4
 8020168:	4668      	mov	r0, sp
 802016a:	f001 fa19 	bl	80215a0 <__ieee754_rem_pio2>
 802016e:	f000 0003 	and.w	r0, r0, #3
 8020172:	2801      	cmp	r0, #1
 8020174:	d00b      	beq.n	802018e <cos+0x5e>
 8020176:	2802      	cmp	r0, #2
 8020178:	d016      	beq.n	80201a8 <cos+0x78>
 802017a:	b9e0      	cbnz	r0, 80201b6 <cos+0x86>
 802017c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020180:	ed9d 0b00 	vldr	d0, [sp]
 8020184:	f001 fcd0 	bl	8021b28 <__kernel_cos>
 8020188:	ec51 0b10 	vmov	r0, r1, d0
 802018c:	e7e7      	b.n	802015e <cos+0x2e>
 802018e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020192:	ed9d 0b00 	vldr	d0, [sp]
 8020196:	f002 f8df 	bl	8022358 <__kernel_sin>
 802019a:	ec53 2b10 	vmov	r2, r3, d0
 802019e:	ee10 0a10 	vmov	r0, s0
 80201a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80201a6:	e7da      	b.n	802015e <cos+0x2e>
 80201a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80201ac:	ed9d 0b00 	vldr	d0, [sp]
 80201b0:	f001 fcba 	bl	8021b28 <__kernel_cos>
 80201b4:	e7f1      	b.n	802019a <cos+0x6a>
 80201b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80201ba:	ed9d 0b00 	vldr	d0, [sp]
 80201be:	2001      	movs	r0, #1
 80201c0:	f002 f8ca 	bl	8022358 <__kernel_sin>
 80201c4:	e7e0      	b.n	8020188 <cos+0x58>
 80201c6:	bf00      	nop
	...
 80201d0:	3fe921fb 	.word	0x3fe921fb
 80201d4:	7fefffff 	.word	0x7fefffff

080201d8 <fabs>:
 80201d8:	ec51 0b10 	vmov	r0, r1, d0
 80201dc:	ee10 2a10 	vmov	r2, s0
 80201e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80201e4:	ec43 2b10 	vmov	d0, r2, r3
 80201e8:	4770      	bx	lr
 80201ea:	0000      	movs	r0, r0
 80201ec:	0000      	movs	r0, r0
	...

080201f0 <floor>:
 80201f0:	ec51 0b10 	vmov	r0, r1, d0
 80201f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80201fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8020200:	2e13      	cmp	r6, #19
 8020202:	ee10 5a10 	vmov	r5, s0
 8020206:	ee10 8a10 	vmov	r8, s0
 802020a:	460c      	mov	r4, r1
 802020c:	dc32      	bgt.n	8020274 <floor+0x84>
 802020e:	2e00      	cmp	r6, #0
 8020210:	da14      	bge.n	802023c <floor+0x4c>
 8020212:	a333      	add	r3, pc, #204	; (adr r3, 80202e0 <floor+0xf0>)
 8020214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020218:	f7e0 f838 	bl	800028c <__adddf3>
 802021c:	2200      	movs	r2, #0
 802021e:	2300      	movs	r3, #0
 8020220:	f7e0 fc7a 	bl	8000b18 <__aeabi_dcmpgt>
 8020224:	b138      	cbz	r0, 8020236 <floor+0x46>
 8020226:	2c00      	cmp	r4, #0
 8020228:	da57      	bge.n	80202da <floor+0xea>
 802022a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802022e:	431d      	orrs	r5, r3
 8020230:	d001      	beq.n	8020236 <floor+0x46>
 8020232:	4c2d      	ldr	r4, [pc, #180]	; (80202e8 <floor+0xf8>)
 8020234:	2500      	movs	r5, #0
 8020236:	4621      	mov	r1, r4
 8020238:	4628      	mov	r0, r5
 802023a:	e025      	b.n	8020288 <floor+0x98>
 802023c:	4f2b      	ldr	r7, [pc, #172]	; (80202ec <floor+0xfc>)
 802023e:	4137      	asrs	r7, r6
 8020240:	ea01 0307 	and.w	r3, r1, r7
 8020244:	4303      	orrs	r3, r0
 8020246:	d01f      	beq.n	8020288 <floor+0x98>
 8020248:	a325      	add	r3, pc, #148	; (adr r3, 80202e0 <floor+0xf0>)
 802024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802024e:	f7e0 f81d 	bl	800028c <__adddf3>
 8020252:	2200      	movs	r2, #0
 8020254:	2300      	movs	r3, #0
 8020256:	f7e0 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 802025a:	2800      	cmp	r0, #0
 802025c:	d0eb      	beq.n	8020236 <floor+0x46>
 802025e:	2c00      	cmp	r4, #0
 8020260:	bfbe      	ittt	lt
 8020262:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020266:	fa43 f606 	asrlt.w	r6, r3, r6
 802026a:	19a4      	addlt	r4, r4, r6
 802026c:	ea24 0407 	bic.w	r4, r4, r7
 8020270:	2500      	movs	r5, #0
 8020272:	e7e0      	b.n	8020236 <floor+0x46>
 8020274:	2e33      	cmp	r6, #51	; 0x33
 8020276:	dd0b      	ble.n	8020290 <floor+0xa0>
 8020278:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802027c:	d104      	bne.n	8020288 <floor+0x98>
 802027e:	ee10 2a10 	vmov	r2, s0
 8020282:	460b      	mov	r3, r1
 8020284:	f7e0 f802 	bl	800028c <__adddf3>
 8020288:	ec41 0b10 	vmov	d0, r0, r1
 802028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020290:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8020294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020298:	fa23 f707 	lsr.w	r7, r3, r7
 802029c:	4207      	tst	r7, r0
 802029e:	d0f3      	beq.n	8020288 <floor+0x98>
 80202a0:	a30f      	add	r3, pc, #60	; (adr r3, 80202e0 <floor+0xf0>)
 80202a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202a6:	f7df fff1 	bl	800028c <__adddf3>
 80202aa:	2200      	movs	r2, #0
 80202ac:	2300      	movs	r3, #0
 80202ae:	f7e0 fc33 	bl	8000b18 <__aeabi_dcmpgt>
 80202b2:	2800      	cmp	r0, #0
 80202b4:	d0bf      	beq.n	8020236 <floor+0x46>
 80202b6:	2c00      	cmp	r4, #0
 80202b8:	da02      	bge.n	80202c0 <floor+0xd0>
 80202ba:	2e14      	cmp	r6, #20
 80202bc:	d103      	bne.n	80202c6 <floor+0xd6>
 80202be:	3401      	adds	r4, #1
 80202c0:	ea25 0507 	bic.w	r5, r5, r7
 80202c4:	e7b7      	b.n	8020236 <floor+0x46>
 80202c6:	2301      	movs	r3, #1
 80202c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80202cc:	fa03 f606 	lsl.w	r6, r3, r6
 80202d0:	4435      	add	r5, r6
 80202d2:	4545      	cmp	r5, r8
 80202d4:	bf38      	it	cc
 80202d6:	18e4      	addcc	r4, r4, r3
 80202d8:	e7f2      	b.n	80202c0 <floor+0xd0>
 80202da:	2500      	movs	r5, #0
 80202dc:	462c      	mov	r4, r5
 80202de:	e7aa      	b.n	8020236 <floor+0x46>
 80202e0:	8800759c 	.word	0x8800759c
 80202e4:	7e37e43c 	.word	0x7e37e43c
 80202e8:	bff00000 	.word	0xbff00000
 80202ec:	000fffff 	.word	0x000fffff

080202f0 <sin>:
 80202f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80202f2:	ec53 2b10 	vmov	r2, r3, d0
 80202f6:	4828      	ldr	r0, [pc, #160]	; (8020398 <sin+0xa8>)
 80202f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80202fc:	4281      	cmp	r1, r0
 80202fe:	dc07      	bgt.n	8020310 <sin+0x20>
 8020300:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8020390 <sin+0xa0>
 8020304:	2000      	movs	r0, #0
 8020306:	b005      	add	sp, #20
 8020308:	f85d eb04 	ldr.w	lr, [sp], #4
 802030c:	f002 b824 	b.w	8022358 <__kernel_sin>
 8020310:	4822      	ldr	r0, [pc, #136]	; (802039c <sin+0xac>)
 8020312:	4281      	cmp	r1, r0
 8020314:	dd09      	ble.n	802032a <sin+0x3a>
 8020316:	ee10 0a10 	vmov	r0, s0
 802031a:	4619      	mov	r1, r3
 802031c:	f7df ffb4 	bl	8000288 <__aeabi_dsub>
 8020320:	ec41 0b10 	vmov	d0, r0, r1
 8020324:	b005      	add	sp, #20
 8020326:	f85d fb04 	ldr.w	pc, [sp], #4
 802032a:	4668      	mov	r0, sp
 802032c:	f001 f938 	bl	80215a0 <__ieee754_rem_pio2>
 8020330:	f000 0003 	and.w	r0, r0, #3
 8020334:	2801      	cmp	r0, #1
 8020336:	d00c      	beq.n	8020352 <sin+0x62>
 8020338:	2802      	cmp	r0, #2
 802033a:	d011      	beq.n	8020360 <sin+0x70>
 802033c:	b9f0      	cbnz	r0, 802037c <sin+0x8c>
 802033e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020342:	ed9d 0b00 	vldr	d0, [sp]
 8020346:	2001      	movs	r0, #1
 8020348:	f002 f806 	bl	8022358 <__kernel_sin>
 802034c:	ec51 0b10 	vmov	r0, r1, d0
 8020350:	e7e6      	b.n	8020320 <sin+0x30>
 8020352:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020356:	ed9d 0b00 	vldr	d0, [sp]
 802035a:	f001 fbe5 	bl	8021b28 <__kernel_cos>
 802035e:	e7f5      	b.n	802034c <sin+0x5c>
 8020360:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020364:	ed9d 0b00 	vldr	d0, [sp]
 8020368:	2001      	movs	r0, #1
 802036a:	f001 fff5 	bl	8022358 <__kernel_sin>
 802036e:	ec53 2b10 	vmov	r2, r3, d0
 8020372:	ee10 0a10 	vmov	r0, s0
 8020376:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802037a:	e7d1      	b.n	8020320 <sin+0x30>
 802037c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020380:	ed9d 0b00 	vldr	d0, [sp]
 8020384:	f001 fbd0 	bl	8021b28 <__kernel_cos>
 8020388:	e7f1      	b.n	802036e <sin+0x7e>
 802038a:	bf00      	nop
 802038c:	f3af 8000 	nop.w
	...
 8020398:	3fe921fb 	.word	0x3fe921fb
 802039c:	7fefffff 	.word	0x7fefffff

080203a0 <asin>:
 80203a0:	b538      	push	{r3, r4, r5, lr}
 80203a2:	ed2d 8b02 	vpush	{d8}
 80203a6:	ec55 4b10 	vmov	r4, r5, d0
 80203aa:	f000 f8e9 	bl	8020580 <__ieee754_asin>
 80203ae:	4622      	mov	r2, r4
 80203b0:	462b      	mov	r3, r5
 80203b2:	4620      	mov	r0, r4
 80203b4:	4629      	mov	r1, r5
 80203b6:	eeb0 8a40 	vmov.f32	s16, s0
 80203ba:	eef0 8a60 	vmov.f32	s17, s1
 80203be:	f7e0 fbb5 	bl	8000b2c <__aeabi_dcmpun>
 80203c2:	b9a8      	cbnz	r0, 80203f0 <asin+0x50>
 80203c4:	ec45 4b10 	vmov	d0, r4, r5
 80203c8:	f7ff ff06 	bl	80201d8 <fabs>
 80203cc:	4b0c      	ldr	r3, [pc, #48]	; (8020400 <asin+0x60>)
 80203ce:	ec51 0b10 	vmov	r0, r1, d0
 80203d2:	2200      	movs	r2, #0
 80203d4:	f7e0 fba0 	bl	8000b18 <__aeabi_dcmpgt>
 80203d8:	b150      	cbz	r0, 80203f0 <asin+0x50>
 80203da:	f7fd fe6b 	bl	801e0b4 <__errno>
 80203de:	ecbd 8b02 	vpop	{d8}
 80203e2:	2321      	movs	r3, #33	; 0x21
 80203e4:	6003      	str	r3, [r0, #0]
 80203e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80203ea:	4806      	ldr	r0, [pc, #24]	; (8020404 <asin+0x64>)
 80203ec:	f7ff b968 	b.w	801f6c0 <nan>
 80203f0:	eeb0 0a48 	vmov.f32	s0, s16
 80203f4:	eef0 0a68 	vmov.f32	s1, s17
 80203f8:	ecbd 8b02 	vpop	{d8}
 80203fc:	bd38      	pop	{r3, r4, r5, pc}
 80203fe:	bf00      	nop
 8020400:	3ff00000 	.word	0x3ff00000
 8020404:	08023320 	.word	0x08023320

08020408 <atan2>:
 8020408:	f000 bace 	b.w	80209a8 <__ieee754_atan2>

0802040c <pow>:
 802040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802040e:	ed2d 8b02 	vpush	{d8}
 8020412:	eeb0 8a40 	vmov.f32	s16, s0
 8020416:	eef0 8a60 	vmov.f32	s17, s1
 802041a:	ec55 4b11 	vmov	r4, r5, d1
 802041e:	f000 fb8f 	bl	8020b40 <__ieee754_pow>
 8020422:	4622      	mov	r2, r4
 8020424:	462b      	mov	r3, r5
 8020426:	4620      	mov	r0, r4
 8020428:	4629      	mov	r1, r5
 802042a:	ec57 6b10 	vmov	r6, r7, d0
 802042e:	f7e0 fb7d 	bl	8000b2c <__aeabi_dcmpun>
 8020432:	2800      	cmp	r0, #0
 8020434:	d13b      	bne.n	80204ae <pow+0xa2>
 8020436:	ec51 0b18 	vmov	r0, r1, d8
 802043a:	2200      	movs	r2, #0
 802043c:	2300      	movs	r3, #0
 802043e:	f7e0 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8020442:	b1b8      	cbz	r0, 8020474 <pow+0x68>
 8020444:	2200      	movs	r2, #0
 8020446:	2300      	movs	r3, #0
 8020448:	4620      	mov	r0, r4
 802044a:	4629      	mov	r1, r5
 802044c:	f7e0 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8020450:	2800      	cmp	r0, #0
 8020452:	d146      	bne.n	80204e2 <pow+0xd6>
 8020454:	ec45 4b10 	vmov	d0, r4, r5
 8020458:	f002 f86c 	bl	8022534 <finite>
 802045c:	b338      	cbz	r0, 80204ae <pow+0xa2>
 802045e:	2200      	movs	r2, #0
 8020460:	2300      	movs	r3, #0
 8020462:	4620      	mov	r0, r4
 8020464:	4629      	mov	r1, r5
 8020466:	f7e0 fb39 	bl	8000adc <__aeabi_dcmplt>
 802046a:	b300      	cbz	r0, 80204ae <pow+0xa2>
 802046c:	f7fd fe22 	bl	801e0b4 <__errno>
 8020470:	2322      	movs	r3, #34	; 0x22
 8020472:	e01b      	b.n	80204ac <pow+0xa0>
 8020474:	ec47 6b10 	vmov	d0, r6, r7
 8020478:	f002 f85c 	bl	8022534 <finite>
 802047c:	b9e0      	cbnz	r0, 80204b8 <pow+0xac>
 802047e:	eeb0 0a48 	vmov.f32	s0, s16
 8020482:	eef0 0a68 	vmov.f32	s1, s17
 8020486:	f002 f855 	bl	8022534 <finite>
 802048a:	b1a8      	cbz	r0, 80204b8 <pow+0xac>
 802048c:	ec45 4b10 	vmov	d0, r4, r5
 8020490:	f002 f850 	bl	8022534 <finite>
 8020494:	b180      	cbz	r0, 80204b8 <pow+0xac>
 8020496:	4632      	mov	r2, r6
 8020498:	463b      	mov	r3, r7
 802049a:	4630      	mov	r0, r6
 802049c:	4639      	mov	r1, r7
 802049e:	f7e0 fb45 	bl	8000b2c <__aeabi_dcmpun>
 80204a2:	2800      	cmp	r0, #0
 80204a4:	d0e2      	beq.n	802046c <pow+0x60>
 80204a6:	f7fd fe05 	bl	801e0b4 <__errno>
 80204aa:	2321      	movs	r3, #33	; 0x21
 80204ac:	6003      	str	r3, [r0, #0]
 80204ae:	ecbd 8b02 	vpop	{d8}
 80204b2:	ec47 6b10 	vmov	d0, r6, r7
 80204b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80204b8:	2200      	movs	r2, #0
 80204ba:	2300      	movs	r3, #0
 80204bc:	4630      	mov	r0, r6
 80204be:	4639      	mov	r1, r7
 80204c0:	f7e0 fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80204c4:	2800      	cmp	r0, #0
 80204c6:	d0f2      	beq.n	80204ae <pow+0xa2>
 80204c8:	eeb0 0a48 	vmov.f32	s0, s16
 80204cc:	eef0 0a68 	vmov.f32	s1, s17
 80204d0:	f002 f830 	bl	8022534 <finite>
 80204d4:	2800      	cmp	r0, #0
 80204d6:	d0ea      	beq.n	80204ae <pow+0xa2>
 80204d8:	ec45 4b10 	vmov	d0, r4, r5
 80204dc:	f002 f82a 	bl	8022534 <finite>
 80204e0:	e7c3      	b.n	802046a <pow+0x5e>
 80204e2:	4f01      	ldr	r7, [pc, #4]	; (80204e8 <pow+0xdc>)
 80204e4:	2600      	movs	r6, #0
 80204e6:	e7e2      	b.n	80204ae <pow+0xa2>
 80204e8:	3ff00000 	.word	0x3ff00000

080204ec <sqrt>:
 80204ec:	b538      	push	{r3, r4, r5, lr}
 80204ee:	ed2d 8b02 	vpush	{d8}
 80204f2:	ec55 4b10 	vmov	r4, r5, d0
 80204f6:	f001 fa5f 	bl	80219b8 <__ieee754_sqrt>
 80204fa:	4622      	mov	r2, r4
 80204fc:	462b      	mov	r3, r5
 80204fe:	4620      	mov	r0, r4
 8020500:	4629      	mov	r1, r5
 8020502:	eeb0 8a40 	vmov.f32	s16, s0
 8020506:	eef0 8a60 	vmov.f32	s17, s1
 802050a:	f7e0 fb0f 	bl	8000b2c <__aeabi_dcmpun>
 802050e:	b990      	cbnz	r0, 8020536 <sqrt+0x4a>
 8020510:	2200      	movs	r2, #0
 8020512:	2300      	movs	r3, #0
 8020514:	4620      	mov	r0, r4
 8020516:	4629      	mov	r1, r5
 8020518:	f7e0 fae0 	bl	8000adc <__aeabi_dcmplt>
 802051c:	b158      	cbz	r0, 8020536 <sqrt+0x4a>
 802051e:	f7fd fdc9 	bl	801e0b4 <__errno>
 8020522:	2321      	movs	r3, #33	; 0x21
 8020524:	6003      	str	r3, [r0, #0]
 8020526:	2200      	movs	r2, #0
 8020528:	2300      	movs	r3, #0
 802052a:	4610      	mov	r0, r2
 802052c:	4619      	mov	r1, r3
 802052e:	f7e0 f98d 	bl	800084c <__aeabi_ddiv>
 8020532:	ec41 0b18 	vmov	d8, r0, r1
 8020536:	eeb0 0a48 	vmov.f32	s0, s16
 802053a:	eef0 0a68 	vmov.f32	s1, s17
 802053e:	ecbd 8b02 	vpop	{d8}
 8020542:	bd38      	pop	{r3, r4, r5, pc}

08020544 <sqrtf>:
 8020544:	b508      	push	{r3, lr}
 8020546:	ed2d 8b02 	vpush	{d8}
 802054a:	eeb0 8a40 	vmov.f32	s16, s0
 802054e:	f001 fae5 	bl	8021b1c <__ieee754_sqrtf>
 8020552:	eeb4 8a48 	vcmp.f32	s16, s16
 8020556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802055a:	d60c      	bvs.n	8020576 <sqrtf+0x32>
 802055c:	eddf 8a07 	vldr	s17, [pc, #28]	; 802057c <sqrtf+0x38>
 8020560:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8020564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020568:	d505      	bpl.n	8020576 <sqrtf+0x32>
 802056a:	f7fd fda3 	bl	801e0b4 <__errno>
 802056e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8020572:	2321      	movs	r3, #33	; 0x21
 8020574:	6003      	str	r3, [r0, #0]
 8020576:	ecbd 8b02 	vpop	{d8}
 802057a:	bd08      	pop	{r3, pc}
 802057c:	00000000 	.word	0x00000000

08020580 <__ieee754_asin>:
 8020580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020584:	ed2d 8b04 	vpush	{d8-d9}
 8020588:	ec55 4b10 	vmov	r4, r5, d0
 802058c:	4bcc      	ldr	r3, [pc, #816]	; (80208c0 <__ieee754_asin+0x340>)
 802058e:	b083      	sub	sp, #12
 8020590:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8020594:	4598      	cmp	r8, r3
 8020596:	9501      	str	r5, [sp, #4]
 8020598:	dd35      	ble.n	8020606 <__ieee754_asin+0x86>
 802059a:	ee10 3a10 	vmov	r3, s0
 802059e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80205a2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80205a6:	ea58 0303 	orrs.w	r3, r8, r3
 80205aa:	d117      	bne.n	80205dc <__ieee754_asin+0x5c>
 80205ac:	a3aa      	add	r3, pc, #680	; (adr r3, 8020858 <__ieee754_asin+0x2d8>)
 80205ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205b2:	ee10 0a10 	vmov	r0, s0
 80205b6:	4629      	mov	r1, r5
 80205b8:	f7e0 f81e 	bl	80005f8 <__aeabi_dmul>
 80205bc:	a3a8      	add	r3, pc, #672	; (adr r3, 8020860 <__ieee754_asin+0x2e0>)
 80205be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205c2:	4606      	mov	r6, r0
 80205c4:	460f      	mov	r7, r1
 80205c6:	4620      	mov	r0, r4
 80205c8:	4629      	mov	r1, r5
 80205ca:	f7e0 f815 	bl	80005f8 <__aeabi_dmul>
 80205ce:	4602      	mov	r2, r0
 80205d0:	460b      	mov	r3, r1
 80205d2:	4630      	mov	r0, r6
 80205d4:	4639      	mov	r1, r7
 80205d6:	f7df fe59 	bl	800028c <__adddf3>
 80205da:	e00b      	b.n	80205f4 <__ieee754_asin+0x74>
 80205dc:	ee10 2a10 	vmov	r2, s0
 80205e0:	462b      	mov	r3, r5
 80205e2:	ee10 0a10 	vmov	r0, s0
 80205e6:	4629      	mov	r1, r5
 80205e8:	f7df fe4e 	bl	8000288 <__aeabi_dsub>
 80205ec:	4602      	mov	r2, r0
 80205ee:	460b      	mov	r3, r1
 80205f0:	f7e0 f92c 	bl	800084c <__aeabi_ddiv>
 80205f4:	4604      	mov	r4, r0
 80205f6:	460d      	mov	r5, r1
 80205f8:	ec45 4b10 	vmov	d0, r4, r5
 80205fc:	b003      	add	sp, #12
 80205fe:	ecbd 8b04 	vpop	{d8-d9}
 8020602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020606:	4baf      	ldr	r3, [pc, #700]	; (80208c4 <__ieee754_asin+0x344>)
 8020608:	4598      	cmp	r8, r3
 802060a:	dc11      	bgt.n	8020630 <__ieee754_asin+0xb0>
 802060c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8020610:	f280 80ae 	bge.w	8020770 <__ieee754_asin+0x1f0>
 8020614:	a394      	add	r3, pc, #592	; (adr r3, 8020868 <__ieee754_asin+0x2e8>)
 8020616:	e9d3 2300 	ldrd	r2, r3, [r3]
 802061a:	ee10 0a10 	vmov	r0, s0
 802061e:	4629      	mov	r1, r5
 8020620:	f7df fe34 	bl	800028c <__adddf3>
 8020624:	4ba8      	ldr	r3, [pc, #672]	; (80208c8 <__ieee754_asin+0x348>)
 8020626:	2200      	movs	r2, #0
 8020628:	f7e0 fa76 	bl	8000b18 <__aeabi_dcmpgt>
 802062c:	2800      	cmp	r0, #0
 802062e:	d1e3      	bne.n	80205f8 <__ieee754_asin+0x78>
 8020630:	ec45 4b10 	vmov	d0, r4, r5
 8020634:	f7ff fdd0 	bl	80201d8 <fabs>
 8020638:	49a3      	ldr	r1, [pc, #652]	; (80208c8 <__ieee754_asin+0x348>)
 802063a:	ec53 2b10 	vmov	r2, r3, d0
 802063e:	2000      	movs	r0, #0
 8020640:	f7df fe22 	bl	8000288 <__aeabi_dsub>
 8020644:	4ba1      	ldr	r3, [pc, #644]	; (80208cc <__ieee754_asin+0x34c>)
 8020646:	2200      	movs	r2, #0
 8020648:	f7df ffd6 	bl	80005f8 <__aeabi_dmul>
 802064c:	a388      	add	r3, pc, #544	; (adr r3, 8020870 <__ieee754_asin+0x2f0>)
 802064e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020652:	4604      	mov	r4, r0
 8020654:	460d      	mov	r5, r1
 8020656:	f7df ffcf 	bl	80005f8 <__aeabi_dmul>
 802065a:	a387      	add	r3, pc, #540	; (adr r3, 8020878 <__ieee754_asin+0x2f8>)
 802065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020660:	f7df fe14 	bl	800028c <__adddf3>
 8020664:	4622      	mov	r2, r4
 8020666:	462b      	mov	r3, r5
 8020668:	f7df ffc6 	bl	80005f8 <__aeabi_dmul>
 802066c:	a384      	add	r3, pc, #528	; (adr r3, 8020880 <__ieee754_asin+0x300>)
 802066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020672:	f7df fe09 	bl	8000288 <__aeabi_dsub>
 8020676:	4622      	mov	r2, r4
 8020678:	462b      	mov	r3, r5
 802067a:	f7df ffbd 	bl	80005f8 <__aeabi_dmul>
 802067e:	a382      	add	r3, pc, #520	; (adr r3, 8020888 <__ieee754_asin+0x308>)
 8020680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020684:	f7df fe02 	bl	800028c <__adddf3>
 8020688:	4622      	mov	r2, r4
 802068a:	462b      	mov	r3, r5
 802068c:	f7df ffb4 	bl	80005f8 <__aeabi_dmul>
 8020690:	a37f      	add	r3, pc, #508	; (adr r3, 8020890 <__ieee754_asin+0x310>)
 8020692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020696:	f7df fdf7 	bl	8000288 <__aeabi_dsub>
 802069a:	4622      	mov	r2, r4
 802069c:	462b      	mov	r3, r5
 802069e:	f7df ffab 	bl	80005f8 <__aeabi_dmul>
 80206a2:	a37d      	add	r3, pc, #500	; (adr r3, 8020898 <__ieee754_asin+0x318>)
 80206a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206a8:	f7df fdf0 	bl	800028c <__adddf3>
 80206ac:	4622      	mov	r2, r4
 80206ae:	462b      	mov	r3, r5
 80206b0:	f7df ffa2 	bl	80005f8 <__aeabi_dmul>
 80206b4:	a37a      	add	r3, pc, #488	; (adr r3, 80208a0 <__ieee754_asin+0x320>)
 80206b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206ba:	ec41 0b18 	vmov	d8, r0, r1
 80206be:	4620      	mov	r0, r4
 80206c0:	4629      	mov	r1, r5
 80206c2:	f7df ff99 	bl	80005f8 <__aeabi_dmul>
 80206c6:	a378      	add	r3, pc, #480	; (adr r3, 80208a8 <__ieee754_asin+0x328>)
 80206c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206cc:	f7df fddc 	bl	8000288 <__aeabi_dsub>
 80206d0:	4622      	mov	r2, r4
 80206d2:	462b      	mov	r3, r5
 80206d4:	f7df ff90 	bl	80005f8 <__aeabi_dmul>
 80206d8:	a375      	add	r3, pc, #468	; (adr r3, 80208b0 <__ieee754_asin+0x330>)
 80206da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206de:	f7df fdd5 	bl	800028c <__adddf3>
 80206e2:	4622      	mov	r2, r4
 80206e4:	462b      	mov	r3, r5
 80206e6:	f7df ff87 	bl	80005f8 <__aeabi_dmul>
 80206ea:	a373      	add	r3, pc, #460	; (adr r3, 80208b8 <__ieee754_asin+0x338>)
 80206ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206f0:	f7df fdca 	bl	8000288 <__aeabi_dsub>
 80206f4:	4622      	mov	r2, r4
 80206f6:	462b      	mov	r3, r5
 80206f8:	f7df ff7e 	bl	80005f8 <__aeabi_dmul>
 80206fc:	4b72      	ldr	r3, [pc, #456]	; (80208c8 <__ieee754_asin+0x348>)
 80206fe:	2200      	movs	r2, #0
 8020700:	f7df fdc4 	bl	800028c <__adddf3>
 8020704:	ec45 4b10 	vmov	d0, r4, r5
 8020708:	4606      	mov	r6, r0
 802070a:	460f      	mov	r7, r1
 802070c:	f001 f954 	bl	80219b8 <__ieee754_sqrt>
 8020710:	4b6f      	ldr	r3, [pc, #444]	; (80208d0 <__ieee754_asin+0x350>)
 8020712:	4598      	cmp	r8, r3
 8020714:	ec5b ab10 	vmov	sl, fp, d0
 8020718:	f340 80dc 	ble.w	80208d4 <__ieee754_asin+0x354>
 802071c:	4632      	mov	r2, r6
 802071e:	463b      	mov	r3, r7
 8020720:	ec51 0b18 	vmov	r0, r1, d8
 8020724:	f7e0 f892 	bl	800084c <__aeabi_ddiv>
 8020728:	4652      	mov	r2, sl
 802072a:	465b      	mov	r3, fp
 802072c:	f7df ff64 	bl	80005f8 <__aeabi_dmul>
 8020730:	4652      	mov	r2, sl
 8020732:	465b      	mov	r3, fp
 8020734:	f7df fdaa 	bl	800028c <__adddf3>
 8020738:	4602      	mov	r2, r0
 802073a:	460b      	mov	r3, r1
 802073c:	f7df fda6 	bl	800028c <__adddf3>
 8020740:	a347      	add	r3, pc, #284	; (adr r3, 8020860 <__ieee754_asin+0x2e0>)
 8020742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020746:	f7df fd9f 	bl	8000288 <__aeabi_dsub>
 802074a:	4602      	mov	r2, r0
 802074c:	460b      	mov	r3, r1
 802074e:	a142      	add	r1, pc, #264	; (adr r1, 8020858 <__ieee754_asin+0x2d8>)
 8020750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020754:	f7df fd98 	bl	8000288 <__aeabi_dsub>
 8020758:	9b01      	ldr	r3, [sp, #4]
 802075a:	2b00      	cmp	r3, #0
 802075c:	bfdc      	itt	le
 802075e:	4602      	movle	r2, r0
 8020760:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8020764:	4604      	mov	r4, r0
 8020766:	460d      	mov	r5, r1
 8020768:	bfdc      	itt	le
 802076a:	4614      	movle	r4, r2
 802076c:	461d      	movle	r5, r3
 802076e:	e743      	b.n	80205f8 <__ieee754_asin+0x78>
 8020770:	ee10 2a10 	vmov	r2, s0
 8020774:	ee10 0a10 	vmov	r0, s0
 8020778:	462b      	mov	r3, r5
 802077a:	4629      	mov	r1, r5
 802077c:	f7df ff3c 	bl	80005f8 <__aeabi_dmul>
 8020780:	a33b      	add	r3, pc, #236	; (adr r3, 8020870 <__ieee754_asin+0x2f0>)
 8020782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020786:	4606      	mov	r6, r0
 8020788:	460f      	mov	r7, r1
 802078a:	f7df ff35 	bl	80005f8 <__aeabi_dmul>
 802078e:	a33a      	add	r3, pc, #232	; (adr r3, 8020878 <__ieee754_asin+0x2f8>)
 8020790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020794:	f7df fd7a 	bl	800028c <__adddf3>
 8020798:	4632      	mov	r2, r6
 802079a:	463b      	mov	r3, r7
 802079c:	f7df ff2c 	bl	80005f8 <__aeabi_dmul>
 80207a0:	a337      	add	r3, pc, #220	; (adr r3, 8020880 <__ieee754_asin+0x300>)
 80207a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207a6:	f7df fd6f 	bl	8000288 <__aeabi_dsub>
 80207aa:	4632      	mov	r2, r6
 80207ac:	463b      	mov	r3, r7
 80207ae:	f7df ff23 	bl	80005f8 <__aeabi_dmul>
 80207b2:	a335      	add	r3, pc, #212	; (adr r3, 8020888 <__ieee754_asin+0x308>)
 80207b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207b8:	f7df fd68 	bl	800028c <__adddf3>
 80207bc:	4632      	mov	r2, r6
 80207be:	463b      	mov	r3, r7
 80207c0:	f7df ff1a 	bl	80005f8 <__aeabi_dmul>
 80207c4:	a332      	add	r3, pc, #200	; (adr r3, 8020890 <__ieee754_asin+0x310>)
 80207c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207ca:	f7df fd5d 	bl	8000288 <__aeabi_dsub>
 80207ce:	4632      	mov	r2, r6
 80207d0:	463b      	mov	r3, r7
 80207d2:	f7df ff11 	bl	80005f8 <__aeabi_dmul>
 80207d6:	a330      	add	r3, pc, #192	; (adr r3, 8020898 <__ieee754_asin+0x318>)
 80207d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207dc:	f7df fd56 	bl	800028c <__adddf3>
 80207e0:	4632      	mov	r2, r6
 80207e2:	463b      	mov	r3, r7
 80207e4:	f7df ff08 	bl	80005f8 <__aeabi_dmul>
 80207e8:	a32d      	add	r3, pc, #180	; (adr r3, 80208a0 <__ieee754_asin+0x320>)
 80207ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207ee:	4680      	mov	r8, r0
 80207f0:	4689      	mov	r9, r1
 80207f2:	4630      	mov	r0, r6
 80207f4:	4639      	mov	r1, r7
 80207f6:	f7df feff 	bl	80005f8 <__aeabi_dmul>
 80207fa:	a32b      	add	r3, pc, #172	; (adr r3, 80208a8 <__ieee754_asin+0x328>)
 80207fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020800:	f7df fd42 	bl	8000288 <__aeabi_dsub>
 8020804:	4632      	mov	r2, r6
 8020806:	463b      	mov	r3, r7
 8020808:	f7df fef6 	bl	80005f8 <__aeabi_dmul>
 802080c:	a328      	add	r3, pc, #160	; (adr r3, 80208b0 <__ieee754_asin+0x330>)
 802080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020812:	f7df fd3b 	bl	800028c <__adddf3>
 8020816:	4632      	mov	r2, r6
 8020818:	463b      	mov	r3, r7
 802081a:	f7df feed 	bl	80005f8 <__aeabi_dmul>
 802081e:	a326      	add	r3, pc, #152	; (adr r3, 80208b8 <__ieee754_asin+0x338>)
 8020820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020824:	f7df fd30 	bl	8000288 <__aeabi_dsub>
 8020828:	4632      	mov	r2, r6
 802082a:	463b      	mov	r3, r7
 802082c:	f7df fee4 	bl	80005f8 <__aeabi_dmul>
 8020830:	4b25      	ldr	r3, [pc, #148]	; (80208c8 <__ieee754_asin+0x348>)
 8020832:	2200      	movs	r2, #0
 8020834:	f7df fd2a 	bl	800028c <__adddf3>
 8020838:	4602      	mov	r2, r0
 802083a:	460b      	mov	r3, r1
 802083c:	4640      	mov	r0, r8
 802083e:	4649      	mov	r1, r9
 8020840:	f7e0 f804 	bl	800084c <__aeabi_ddiv>
 8020844:	4622      	mov	r2, r4
 8020846:	462b      	mov	r3, r5
 8020848:	f7df fed6 	bl	80005f8 <__aeabi_dmul>
 802084c:	4602      	mov	r2, r0
 802084e:	460b      	mov	r3, r1
 8020850:	4620      	mov	r0, r4
 8020852:	4629      	mov	r1, r5
 8020854:	e6bf      	b.n	80205d6 <__ieee754_asin+0x56>
 8020856:	bf00      	nop
 8020858:	54442d18 	.word	0x54442d18
 802085c:	3ff921fb 	.word	0x3ff921fb
 8020860:	33145c07 	.word	0x33145c07
 8020864:	3c91a626 	.word	0x3c91a626
 8020868:	8800759c 	.word	0x8800759c
 802086c:	7e37e43c 	.word	0x7e37e43c
 8020870:	0dfdf709 	.word	0x0dfdf709
 8020874:	3f023de1 	.word	0x3f023de1
 8020878:	7501b288 	.word	0x7501b288
 802087c:	3f49efe0 	.word	0x3f49efe0
 8020880:	b5688f3b 	.word	0xb5688f3b
 8020884:	3fa48228 	.word	0x3fa48228
 8020888:	0e884455 	.word	0x0e884455
 802088c:	3fc9c155 	.word	0x3fc9c155
 8020890:	03eb6f7d 	.word	0x03eb6f7d
 8020894:	3fd4d612 	.word	0x3fd4d612
 8020898:	55555555 	.word	0x55555555
 802089c:	3fc55555 	.word	0x3fc55555
 80208a0:	b12e9282 	.word	0xb12e9282
 80208a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80208a8:	1b8d0159 	.word	0x1b8d0159
 80208ac:	3fe6066c 	.word	0x3fe6066c
 80208b0:	9c598ac8 	.word	0x9c598ac8
 80208b4:	40002ae5 	.word	0x40002ae5
 80208b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80208bc:	40033a27 	.word	0x40033a27
 80208c0:	3fefffff 	.word	0x3fefffff
 80208c4:	3fdfffff 	.word	0x3fdfffff
 80208c8:	3ff00000 	.word	0x3ff00000
 80208cc:	3fe00000 	.word	0x3fe00000
 80208d0:	3fef3332 	.word	0x3fef3332
 80208d4:	ee10 2a10 	vmov	r2, s0
 80208d8:	ee10 0a10 	vmov	r0, s0
 80208dc:	465b      	mov	r3, fp
 80208de:	4659      	mov	r1, fp
 80208e0:	f7df fcd4 	bl	800028c <__adddf3>
 80208e4:	4632      	mov	r2, r6
 80208e6:	463b      	mov	r3, r7
 80208e8:	ec41 0b19 	vmov	d9, r0, r1
 80208ec:	ec51 0b18 	vmov	r0, r1, d8
 80208f0:	f7df ffac 	bl	800084c <__aeabi_ddiv>
 80208f4:	4602      	mov	r2, r0
 80208f6:	460b      	mov	r3, r1
 80208f8:	ec51 0b19 	vmov	r0, r1, d9
 80208fc:	f7df fe7c 	bl	80005f8 <__aeabi_dmul>
 8020900:	f04f 0800 	mov.w	r8, #0
 8020904:	4606      	mov	r6, r0
 8020906:	460f      	mov	r7, r1
 8020908:	4642      	mov	r2, r8
 802090a:	465b      	mov	r3, fp
 802090c:	4640      	mov	r0, r8
 802090e:	4659      	mov	r1, fp
 8020910:	f7df fe72 	bl	80005f8 <__aeabi_dmul>
 8020914:	4602      	mov	r2, r0
 8020916:	460b      	mov	r3, r1
 8020918:	4620      	mov	r0, r4
 802091a:	4629      	mov	r1, r5
 802091c:	f7df fcb4 	bl	8000288 <__aeabi_dsub>
 8020920:	4642      	mov	r2, r8
 8020922:	4604      	mov	r4, r0
 8020924:	460d      	mov	r5, r1
 8020926:	465b      	mov	r3, fp
 8020928:	4650      	mov	r0, sl
 802092a:	4659      	mov	r1, fp
 802092c:	f7df fcae 	bl	800028c <__adddf3>
 8020930:	4602      	mov	r2, r0
 8020932:	460b      	mov	r3, r1
 8020934:	4620      	mov	r0, r4
 8020936:	4629      	mov	r1, r5
 8020938:	f7df ff88 	bl	800084c <__aeabi_ddiv>
 802093c:	4602      	mov	r2, r0
 802093e:	460b      	mov	r3, r1
 8020940:	f7df fca4 	bl	800028c <__adddf3>
 8020944:	4602      	mov	r2, r0
 8020946:	460b      	mov	r3, r1
 8020948:	a113      	add	r1, pc, #76	; (adr r1, 8020998 <__ieee754_asin+0x418>)
 802094a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802094e:	f7df fc9b 	bl	8000288 <__aeabi_dsub>
 8020952:	4602      	mov	r2, r0
 8020954:	460b      	mov	r3, r1
 8020956:	4630      	mov	r0, r6
 8020958:	4639      	mov	r1, r7
 802095a:	f7df fc95 	bl	8000288 <__aeabi_dsub>
 802095e:	4642      	mov	r2, r8
 8020960:	4604      	mov	r4, r0
 8020962:	460d      	mov	r5, r1
 8020964:	465b      	mov	r3, fp
 8020966:	4640      	mov	r0, r8
 8020968:	4659      	mov	r1, fp
 802096a:	f7df fc8f 	bl	800028c <__adddf3>
 802096e:	4602      	mov	r2, r0
 8020970:	460b      	mov	r3, r1
 8020972:	a10b      	add	r1, pc, #44	; (adr r1, 80209a0 <__ieee754_asin+0x420>)
 8020974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020978:	f7df fc86 	bl	8000288 <__aeabi_dsub>
 802097c:	4602      	mov	r2, r0
 802097e:	460b      	mov	r3, r1
 8020980:	4620      	mov	r0, r4
 8020982:	4629      	mov	r1, r5
 8020984:	f7df fc80 	bl	8000288 <__aeabi_dsub>
 8020988:	4602      	mov	r2, r0
 802098a:	460b      	mov	r3, r1
 802098c:	a104      	add	r1, pc, #16	; (adr r1, 80209a0 <__ieee754_asin+0x420>)
 802098e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020992:	e6df      	b.n	8020754 <__ieee754_asin+0x1d4>
 8020994:	f3af 8000 	nop.w
 8020998:	33145c07 	.word	0x33145c07
 802099c:	3c91a626 	.word	0x3c91a626
 80209a0:	54442d18 	.word	0x54442d18
 80209a4:	3fe921fb 	.word	0x3fe921fb

080209a8 <__ieee754_atan2>:
 80209a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80209ac:	ec57 6b11 	vmov	r6, r7, d1
 80209b0:	4273      	negs	r3, r6
 80209b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8020b38 <__ieee754_atan2+0x190>
 80209b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80209ba:	4333      	orrs	r3, r6
 80209bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80209c0:	4573      	cmp	r3, lr
 80209c2:	ec51 0b10 	vmov	r0, r1, d0
 80209c6:	ee11 8a10 	vmov	r8, s2
 80209ca:	d80a      	bhi.n	80209e2 <__ieee754_atan2+0x3a>
 80209cc:	4244      	negs	r4, r0
 80209ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80209d2:	4304      	orrs	r4, r0
 80209d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80209d8:	4574      	cmp	r4, lr
 80209da:	ee10 9a10 	vmov	r9, s0
 80209de:	468c      	mov	ip, r1
 80209e0:	d907      	bls.n	80209f2 <__ieee754_atan2+0x4a>
 80209e2:	4632      	mov	r2, r6
 80209e4:	463b      	mov	r3, r7
 80209e6:	f7df fc51 	bl	800028c <__adddf3>
 80209ea:	ec41 0b10 	vmov	d0, r0, r1
 80209ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80209f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80209f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80209fa:	4334      	orrs	r4, r6
 80209fc:	d103      	bne.n	8020a06 <__ieee754_atan2+0x5e>
 80209fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a02:	f7ff b9f5 	b.w	801fdf0 <atan>
 8020a06:	17bc      	asrs	r4, r7, #30
 8020a08:	f004 0402 	and.w	r4, r4, #2
 8020a0c:	ea53 0909 	orrs.w	r9, r3, r9
 8020a10:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8020a14:	d107      	bne.n	8020a26 <__ieee754_atan2+0x7e>
 8020a16:	2c02      	cmp	r4, #2
 8020a18:	d060      	beq.n	8020adc <__ieee754_atan2+0x134>
 8020a1a:	2c03      	cmp	r4, #3
 8020a1c:	d1e5      	bne.n	80209ea <__ieee754_atan2+0x42>
 8020a1e:	a142      	add	r1, pc, #264	; (adr r1, 8020b28 <__ieee754_atan2+0x180>)
 8020a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a24:	e7e1      	b.n	80209ea <__ieee754_atan2+0x42>
 8020a26:	ea52 0808 	orrs.w	r8, r2, r8
 8020a2a:	d106      	bne.n	8020a3a <__ieee754_atan2+0x92>
 8020a2c:	f1bc 0f00 	cmp.w	ip, #0
 8020a30:	da5f      	bge.n	8020af2 <__ieee754_atan2+0x14a>
 8020a32:	a13f      	add	r1, pc, #252	; (adr r1, 8020b30 <__ieee754_atan2+0x188>)
 8020a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a38:	e7d7      	b.n	80209ea <__ieee754_atan2+0x42>
 8020a3a:	4572      	cmp	r2, lr
 8020a3c:	d10f      	bne.n	8020a5e <__ieee754_atan2+0xb6>
 8020a3e:	4293      	cmp	r3, r2
 8020a40:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8020a44:	d107      	bne.n	8020a56 <__ieee754_atan2+0xae>
 8020a46:	2c02      	cmp	r4, #2
 8020a48:	d84c      	bhi.n	8020ae4 <__ieee754_atan2+0x13c>
 8020a4a:	4b35      	ldr	r3, [pc, #212]	; (8020b20 <__ieee754_atan2+0x178>)
 8020a4c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8020a50:	e9d4 0100 	ldrd	r0, r1, [r4]
 8020a54:	e7c9      	b.n	80209ea <__ieee754_atan2+0x42>
 8020a56:	2c02      	cmp	r4, #2
 8020a58:	d848      	bhi.n	8020aec <__ieee754_atan2+0x144>
 8020a5a:	4b32      	ldr	r3, [pc, #200]	; (8020b24 <__ieee754_atan2+0x17c>)
 8020a5c:	e7f6      	b.n	8020a4c <__ieee754_atan2+0xa4>
 8020a5e:	4573      	cmp	r3, lr
 8020a60:	d0e4      	beq.n	8020a2c <__ieee754_atan2+0x84>
 8020a62:	1a9b      	subs	r3, r3, r2
 8020a64:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8020a68:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020a6c:	da1e      	bge.n	8020aac <__ieee754_atan2+0x104>
 8020a6e:	2f00      	cmp	r7, #0
 8020a70:	da01      	bge.n	8020a76 <__ieee754_atan2+0xce>
 8020a72:	323c      	adds	r2, #60	; 0x3c
 8020a74:	db1e      	blt.n	8020ab4 <__ieee754_atan2+0x10c>
 8020a76:	4632      	mov	r2, r6
 8020a78:	463b      	mov	r3, r7
 8020a7a:	f7df fee7 	bl	800084c <__aeabi_ddiv>
 8020a7e:	ec41 0b10 	vmov	d0, r0, r1
 8020a82:	f7ff fba9 	bl	80201d8 <fabs>
 8020a86:	f7ff f9b3 	bl	801fdf0 <atan>
 8020a8a:	ec51 0b10 	vmov	r0, r1, d0
 8020a8e:	2c01      	cmp	r4, #1
 8020a90:	d013      	beq.n	8020aba <__ieee754_atan2+0x112>
 8020a92:	2c02      	cmp	r4, #2
 8020a94:	d015      	beq.n	8020ac2 <__ieee754_atan2+0x11a>
 8020a96:	2c00      	cmp	r4, #0
 8020a98:	d0a7      	beq.n	80209ea <__ieee754_atan2+0x42>
 8020a9a:	a319      	add	r3, pc, #100	; (adr r3, 8020b00 <__ieee754_atan2+0x158>)
 8020a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aa0:	f7df fbf2 	bl	8000288 <__aeabi_dsub>
 8020aa4:	a318      	add	r3, pc, #96	; (adr r3, 8020b08 <__ieee754_atan2+0x160>)
 8020aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aaa:	e014      	b.n	8020ad6 <__ieee754_atan2+0x12e>
 8020aac:	a118      	add	r1, pc, #96	; (adr r1, 8020b10 <__ieee754_atan2+0x168>)
 8020aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ab2:	e7ec      	b.n	8020a8e <__ieee754_atan2+0xe6>
 8020ab4:	2000      	movs	r0, #0
 8020ab6:	2100      	movs	r1, #0
 8020ab8:	e7e9      	b.n	8020a8e <__ieee754_atan2+0xe6>
 8020aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020abe:	4619      	mov	r1, r3
 8020ac0:	e793      	b.n	80209ea <__ieee754_atan2+0x42>
 8020ac2:	a30f      	add	r3, pc, #60	; (adr r3, 8020b00 <__ieee754_atan2+0x158>)
 8020ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ac8:	f7df fbde 	bl	8000288 <__aeabi_dsub>
 8020acc:	4602      	mov	r2, r0
 8020ace:	460b      	mov	r3, r1
 8020ad0:	a10d      	add	r1, pc, #52	; (adr r1, 8020b08 <__ieee754_atan2+0x160>)
 8020ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ad6:	f7df fbd7 	bl	8000288 <__aeabi_dsub>
 8020ada:	e786      	b.n	80209ea <__ieee754_atan2+0x42>
 8020adc:	a10a      	add	r1, pc, #40	; (adr r1, 8020b08 <__ieee754_atan2+0x160>)
 8020ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ae2:	e782      	b.n	80209ea <__ieee754_atan2+0x42>
 8020ae4:	a10c      	add	r1, pc, #48	; (adr r1, 8020b18 <__ieee754_atan2+0x170>)
 8020ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020aea:	e77e      	b.n	80209ea <__ieee754_atan2+0x42>
 8020aec:	2000      	movs	r0, #0
 8020aee:	2100      	movs	r1, #0
 8020af0:	e77b      	b.n	80209ea <__ieee754_atan2+0x42>
 8020af2:	a107      	add	r1, pc, #28	; (adr r1, 8020b10 <__ieee754_atan2+0x168>)
 8020af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020af8:	e777      	b.n	80209ea <__ieee754_atan2+0x42>
 8020afa:	bf00      	nop
 8020afc:	f3af 8000 	nop.w
 8020b00:	33145c07 	.word	0x33145c07
 8020b04:	3ca1a626 	.word	0x3ca1a626
 8020b08:	54442d18 	.word	0x54442d18
 8020b0c:	400921fb 	.word	0x400921fb
 8020b10:	54442d18 	.word	0x54442d18
 8020b14:	3ff921fb 	.word	0x3ff921fb
 8020b18:	54442d18 	.word	0x54442d18
 8020b1c:	3fe921fb 	.word	0x3fe921fb
 8020b20:	08023368 	.word	0x08023368
 8020b24:	08023380 	.word	0x08023380
 8020b28:	54442d18 	.word	0x54442d18
 8020b2c:	c00921fb 	.word	0xc00921fb
 8020b30:	54442d18 	.word	0x54442d18
 8020b34:	bff921fb 	.word	0xbff921fb
 8020b38:	7ff00000 	.word	0x7ff00000
 8020b3c:	00000000 	.word	0x00000000

08020b40 <__ieee754_pow>:
 8020b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b44:	ed2d 8b06 	vpush	{d8-d10}
 8020b48:	b089      	sub	sp, #36	; 0x24
 8020b4a:	ed8d 1b00 	vstr	d1, [sp]
 8020b4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8020b52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8020b56:	ea58 0102 	orrs.w	r1, r8, r2
 8020b5a:	ec57 6b10 	vmov	r6, r7, d0
 8020b5e:	d115      	bne.n	8020b8c <__ieee754_pow+0x4c>
 8020b60:	19b3      	adds	r3, r6, r6
 8020b62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8020b66:	4152      	adcs	r2, r2
 8020b68:	4299      	cmp	r1, r3
 8020b6a:	4b89      	ldr	r3, [pc, #548]	; (8020d90 <__ieee754_pow+0x250>)
 8020b6c:	4193      	sbcs	r3, r2
 8020b6e:	f080 84d2 	bcs.w	8021516 <__ieee754_pow+0x9d6>
 8020b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020b76:	4630      	mov	r0, r6
 8020b78:	4639      	mov	r1, r7
 8020b7a:	f7df fb87 	bl	800028c <__adddf3>
 8020b7e:	ec41 0b10 	vmov	d0, r0, r1
 8020b82:	b009      	add	sp, #36	; 0x24
 8020b84:	ecbd 8b06 	vpop	{d8-d10}
 8020b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b8c:	4b81      	ldr	r3, [pc, #516]	; (8020d94 <__ieee754_pow+0x254>)
 8020b8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8020b92:	429c      	cmp	r4, r3
 8020b94:	ee10 aa10 	vmov	sl, s0
 8020b98:	463d      	mov	r5, r7
 8020b9a:	dc06      	bgt.n	8020baa <__ieee754_pow+0x6a>
 8020b9c:	d101      	bne.n	8020ba2 <__ieee754_pow+0x62>
 8020b9e:	2e00      	cmp	r6, #0
 8020ba0:	d1e7      	bne.n	8020b72 <__ieee754_pow+0x32>
 8020ba2:	4598      	cmp	r8, r3
 8020ba4:	dc01      	bgt.n	8020baa <__ieee754_pow+0x6a>
 8020ba6:	d10f      	bne.n	8020bc8 <__ieee754_pow+0x88>
 8020ba8:	b172      	cbz	r2, 8020bc8 <__ieee754_pow+0x88>
 8020baa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8020bae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8020bb2:	ea55 050a 	orrs.w	r5, r5, sl
 8020bb6:	d1dc      	bne.n	8020b72 <__ieee754_pow+0x32>
 8020bb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020bbc:	18db      	adds	r3, r3, r3
 8020bbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8020bc2:	4152      	adcs	r2, r2
 8020bc4:	429d      	cmp	r5, r3
 8020bc6:	e7d0      	b.n	8020b6a <__ieee754_pow+0x2a>
 8020bc8:	2d00      	cmp	r5, #0
 8020bca:	da3b      	bge.n	8020c44 <__ieee754_pow+0x104>
 8020bcc:	4b72      	ldr	r3, [pc, #456]	; (8020d98 <__ieee754_pow+0x258>)
 8020bce:	4598      	cmp	r8, r3
 8020bd0:	dc51      	bgt.n	8020c76 <__ieee754_pow+0x136>
 8020bd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8020bd6:	4598      	cmp	r8, r3
 8020bd8:	f340 84ac 	ble.w	8021534 <__ieee754_pow+0x9f4>
 8020bdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020be0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020be4:	2b14      	cmp	r3, #20
 8020be6:	dd0f      	ble.n	8020c08 <__ieee754_pow+0xc8>
 8020be8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8020bec:	fa22 f103 	lsr.w	r1, r2, r3
 8020bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8020bf4:	4293      	cmp	r3, r2
 8020bf6:	f040 849d 	bne.w	8021534 <__ieee754_pow+0x9f4>
 8020bfa:	f001 0101 	and.w	r1, r1, #1
 8020bfe:	f1c1 0302 	rsb	r3, r1, #2
 8020c02:	9304      	str	r3, [sp, #16]
 8020c04:	b182      	cbz	r2, 8020c28 <__ieee754_pow+0xe8>
 8020c06:	e05f      	b.n	8020cc8 <__ieee754_pow+0x188>
 8020c08:	2a00      	cmp	r2, #0
 8020c0a:	d15b      	bne.n	8020cc4 <__ieee754_pow+0x184>
 8020c0c:	f1c3 0314 	rsb	r3, r3, #20
 8020c10:	fa48 f103 	asr.w	r1, r8, r3
 8020c14:	fa01 f303 	lsl.w	r3, r1, r3
 8020c18:	4543      	cmp	r3, r8
 8020c1a:	f040 8488 	bne.w	802152e <__ieee754_pow+0x9ee>
 8020c1e:	f001 0101 	and.w	r1, r1, #1
 8020c22:	f1c1 0302 	rsb	r3, r1, #2
 8020c26:	9304      	str	r3, [sp, #16]
 8020c28:	4b5c      	ldr	r3, [pc, #368]	; (8020d9c <__ieee754_pow+0x25c>)
 8020c2a:	4598      	cmp	r8, r3
 8020c2c:	d132      	bne.n	8020c94 <__ieee754_pow+0x154>
 8020c2e:	f1b9 0f00 	cmp.w	r9, #0
 8020c32:	f280 8478 	bge.w	8021526 <__ieee754_pow+0x9e6>
 8020c36:	4959      	ldr	r1, [pc, #356]	; (8020d9c <__ieee754_pow+0x25c>)
 8020c38:	4632      	mov	r2, r6
 8020c3a:	463b      	mov	r3, r7
 8020c3c:	2000      	movs	r0, #0
 8020c3e:	f7df fe05 	bl	800084c <__aeabi_ddiv>
 8020c42:	e79c      	b.n	8020b7e <__ieee754_pow+0x3e>
 8020c44:	2300      	movs	r3, #0
 8020c46:	9304      	str	r3, [sp, #16]
 8020c48:	2a00      	cmp	r2, #0
 8020c4a:	d13d      	bne.n	8020cc8 <__ieee754_pow+0x188>
 8020c4c:	4b51      	ldr	r3, [pc, #324]	; (8020d94 <__ieee754_pow+0x254>)
 8020c4e:	4598      	cmp	r8, r3
 8020c50:	d1ea      	bne.n	8020c28 <__ieee754_pow+0xe8>
 8020c52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8020c56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020c5a:	ea53 030a 	orrs.w	r3, r3, sl
 8020c5e:	f000 845a 	beq.w	8021516 <__ieee754_pow+0x9d6>
 8020c62:	4b4f      	ldr	r3, [pc, #316]	; (8020da0 <__ieee754_pow+0x260>)
 8020c64:	429c      	cmp	r4, r3
 8020c66:	dd08      	ble.n	8020c7a <__ieee754_pow+0x13a>
 8020c68:	f1b9 0f00 	cmp.w	r9, #0
 8020c6c:	f2c0 8457 	blt.w	802151e <__ieee754_pow+0x9de>
 8020c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020c74:	e783      	b.n	8020b7e <__ieee754_pow+0x3e>
 8020c76:	2302      	movs	r3, #2
 8020c78:	e7e5      	b.n	8020c46 <__ieee754_pow+0x106>
 8020c7a:	f1b9 0f00 	cmp.w	r9, #0
 8020c7e:	f04f 0000 	mov.w	r0, #0
 8020c82:	f04f 0100 	mov.w	r1, #0
 8020c86:	f6bf af7a 	bge.w	8020b7e <__ieee754_pow+0x3e>
 8020c8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8020c8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020c92:	e774      	b.n	8020b7e <__ieee754_pow+0x3e>
 8020c94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8020c98:	d106      	bne.n	8020ca8 <__ieee754_pow+0x168>
 8020c9a:	4632      	mov	r2, r6
 8020c9c:	463b      	mov	r3, r7
 8020c9e:	4630      	mov	r0, r6
 8020ca0:	4639      	mov	r1, r7
 8020ca2:	f7df fca9 	bl	80005f8 <__aeabi_dmul>
 8020ca6:	e76a      	b.n	8020b7e <__ieee754_pow+0x3e>
 8020ca8:	4b3e      	ldr	r3, [pc, #248]	; (8020da4 <__ieee754_pow+0x264>)
 8020caa:	4599      	cmp	r9, r3
 8020cac:	d10c      	bne.n	8020cc8 <__ieee754_pow+0x188>
 8020cae:	2d00      	cmp	r5, #0
 8020cb0:	db0a      	blt.n	8020cc8 <__ieee754_pow+0x188>
 8020cb2:	ec47 6b10 	vmov	d0, r6, r7
 8020cb6:	b009      	add	sp, #36	; 0x24
 8020cb8:	ecbd 8b06 	vpop	{d8-d10}
 8020cbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cc0:	f000 be7a 	b.w	80219b8 <__ieee754_sqrt>
 8020cc4:	2300      	movs	r3, #0
 8020cc6:	9304      	str	r3, [sp, #16]
 8020cc8:	ec47 6b10 	vmov	d0, r6, r7
 8020ccc:	f7ff fa84 	bl	80201d8 <fabs>
 8020cd0:	ec51 0b10 	vmov	r0, r1, d0
 8020cd4:	f1ba 0f00 	cmp.w	sl, #0
 8020cd8:	d129      	bne.n	8020d2e <__ieee754_pow+0x1ee>
 8020cda:	b124      	cbz	r4, 8020ce6 <__ieee754_pow+0x1a6>
 8020cdc:	4b2f      	ldr	r3, [pc, #188]	; (8020d9c <__ieee754_pow+0x25c>)
 8020cde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8020ce2:	429a      	cmp	r2, r3
 8020ce4:	d123      	bne.n	8020d2e <__ieee754_pow+0x1ee>
 8020ce6:	f1b9 0f00 	cmp.w	r9, #0
 8020cea:	da05      	bge.n	8020cf8 <__ieee754_pow+0x1b8>
 8020cec:	4602      	mov	r2, r0
 8020cee:	460b      	mov	r3, r1
 8020cf0:	2000      	movs	r0, #0
 8020cf2:	492a      	ldr	r1, [pc, #168]	; (8020d9c <__ieee754_pow+0x25c>)
 8020cf4:	f7df fdaa 	bl	800084c <__aeabi_ddiv>
 8020cf8:	2d00      	cmp	r5, #0
 8020cfa:	f6bf af40 	bge.w	8020b7e <__ieee754_pow+0x3e>
 8020cfe:	9b04      	ldr	r3, [sp, #16]
 8020d00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020d04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020d08:	4323      	orrs	r3, r4
 8020d0a:	d108      	bne.n	8020d1e <__ieee754_pow+0x1de>
 8020d0c:	4602      	mov	r2, r0
 8020d0e:	460b      	mov	r3, r1
 8020d10:	4610      	mov	r0, r2
 8020d12:	4619      	mov	r1, r3
 8020d14:	f7df fab8 	bl	8000288 <__aeabi_dsub>
 8020d18:	4602      	mov	r2, r0
 8020d1a:	460b      	mov	r3, r1
 8020d1c:	e78f      	b.n	8020c3e <__ieee754_pow+0xfe>
 8020d1e:	9b04      	ldr	r3, [sp, #16]
 8020d20:	2b01      	cmp	r3, #1
 8020d22:	f47f af2c 	bne.w	8020b7e <__ieee754_pow+0x3e>
 8020d26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020d2a:	4619      	mov	r1, r3
 8020d2c:	e727      	b.n	8020b7e <__ieee754_pow+0x3e>
 8020d2e:	0feb      	lsrs	r3, r5, #31
 8020d30:	3b01      	subs	r3, #1
 8020d32:	9306      	str	r3, [sp, #24]
 8020d34:	9a06      	ldr	r2, [sp, #24]
 8020d36:	9b04      	ldr	r3, [sp, #16]
 8020d38:	4313      	orrs	r3, r2
 8020d3a:	d102      	bne.n	8020d42 <__ieee754_pow+0x202>
 8020d3c:	4632      	mov	r2, r6
 8020d3e:	463b      	mov	r3, r7
 8020d40:	e7e6      	b.n	8020d10 <__ieee754_pow+0x1d0>
 8020d42:	4b19      	ldr	r3, [pc, #100]	; (8020da8 <__ieee754_pow+0x268>)
 8020d44:	4598      	cmp	r8, r3
 8020d46:	f340 80fb 	ble.w	8020f40 <__ieee754_pow+0x400>
 8020d4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020d4e:	4598      	cmp	r8, r3
 8020d50:	4b13      	ldr	r3, [pc, #76]	; (8020da0 <__ieee754_pow+0x260>)
 8020d52:	dd0c      	ble.n	8020d6e <__ieee754_pow+0x22e>
 8020d54:	429c      	cmp	r4, r3
 8020d56:	dc0f      	bgt.n	8020d78 <__ieee754_pow+0x238>
 8020d58:	f1b9 0f00 	cmp.w	r9, #0
 8020d5c:	da0f      	bge.n	8020d7e <__ieee754_pow+0x23e>
 8020d5e:	2000      	movs	r0, #0
 8020d60:	b009      	add	sp, #36	; 0x24
 8020d62:	ecbd 8b06 	vpop	{d8-d10}
 8020d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d6a:	f001 bbda 	b.w	8022522 <__math_oflow>
 8020d6e:	429c      	cmp	r4, r3
 8020d70:	dbf2      	blt.n	8020d58 <__ieee754_pow+0x218>
 8020d72:	4b0a      	ldr	r3, [pc, #40]	; (8020d9c <__ieee754_pow+0x25c>)
 8020d74:	429c      	cmp	r4, r3
 8020d76:	dd19      	ble.n	8020dac <__ieee754_pow+0x26c>
 8020d78:	f1b9 0f00 	cmp.w	r9, #0
 8020d7c:	dcef      	bgt.n	8020d5e <__ieee754_pow+0x21e>
 8020d7e:	2000      	movs	r0, #0
 8020d80:	b009      	add	sp, #36	; 0x24
 8020d82:	ecbd 8b06 	vpop	{d8-d10}
 8020d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d8a:	f001 bbc1 	b.w	8022510 <__math_uflow>
 8020d8e:	bf00      	nop
 8020d90:	fff00000 	.word	0xfff00000
 8020d94:	7ff00000 	.word	0x7ff00000
 8020d98:	433fffff 	.word	0x433fffff
 8020d9c:	3ff00000 	.word	0x3ff00000
 8020da0:	3fefffff 	.word	0x3fefffff
 8020da4:	3fe00000 	.word	0x3fe00000
 8020da8:	41e00000 	.word	0x41e00000
 8020dac:	4b60      	ldr	r3, [pc, #384]	; (8020f30 <__ieee754_pow+0x3f0>)
 8020dae:	2200      	movs	r2, #0
 8020db0:	f7df fa6a 	bl	8000288 <__aeabi_dsub>
 8020db4:	a354      	add	r3, pc, #336	; (adr r3, 8020f08 <__ieee754_pow+0x3c8>)
 8020db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dba:	4604      	mov	r4, r0
 8020dbc:	460d      	mov	r5, r1
 8020dbe:	f7df fc1b 	bl	80005f8 <__aeabi_dmul>
 8020dc2:	a353      	add	r3, pc, #332	; (adr r3, 8020f10 <__ieee754_pow+0x3d0>)
 8020dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dc8:	4606      	mov	r6, r0
 8020dca:	460f      	mov	r7, r1
 8020dcc:	4620      	mov	r0, r4
 8020dce:	4629      	mov	r1, r5
 8020dd0:	f7df fc12 	bl	80005f8 <__aeabi_dmul>
 8020dd4:	4b57      	ldr	r3, [pc, #348]	; (8020f34 <__ieee754_pow+0x3f4>)
 8020dd6:	4682      	mov	sl, r0
 8020dd8:	468b      	mov	fp, r1
 8020dda:	2200      	movs	r2, #0
 8020ddc:	4620      	mov	r0, r4
 8020dde:	4629      	mov	r1, r5
 8020de0:	f7df fc0a 	bl	80005f8 <__aeabi_dmul>
 8020de4:	4602      	mov	r2, r0
 8020de6:	460b      	mov	r3, r1
 8020de8:	a14b      	add	r1, pc, #300	; (adr r1, 8020f18 <__ieee754_pow+0x3d8>)
 8020dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020dee:	f7df fa4b 	bl	8000288 <__aeabi_dsub>
 8020df2:	4622      	mov	r2, r4
 8020df4:	462b      	mov	r3, r5
 8020df6:	f7df fbff 	bl	80005f8 <__aeabi_dmul>
 8020dfa:	4602      	mov	r2, r0
 8020dfc:	460b      	mov	r3, r1
 8020dfe:	2000      	movs	r0, #0
 8020e00:	494d      	ldr	r1, [pc, #308]	; (8020f38 <__ieee754_pow+0x3f8>)
 8020e02:	f7df fa41 	bl	8000288 <__aeabi_dsub>
 8020e06:	4622      	mov	r2, r4
 8020e08:	4680      	mov	r8, r0
 8020e0a:	4689      	mov	r9, r1
 8020e0c:	462b      	mov	r3, r5
 8020e0e:	4620      	mov	r0, r4
 8020e10:	4629      	mov	r1, r5
 8020e12:	f7df fbf1 	bl	80005f8 <__aeabi_dmul>
 8020e16:	4602      	mov	r2, r0
 8020e18:	460b      	mov	r3, r1
 8020e1a:	4640      	mov	r0, r8
 8020e1c:	4649      	mov	r1, r9
 8020e1e:	f7df fbeb 	bl	80005f8 <__aeabi_dmul>
 8020e22:	a33f      	add	r3, pc, #252	; (adr r3, 8020f20 <__ieee754_pow+0x3e0>)
 8020e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e28:	f7df fbe6 	bl	80005f8 <__aeabi_dmul>
 8020e2c:	4602      	mov	r2, r0
 8020e2e:	460b      	mov	r3, r1
 8020e30:	4650      	mov	r0, sl
 8020e32:	4659      	mov	r1, fp
 8020e34:	f7df fa28 	bl	8000288 <__aeabi_dsub>
 8020e38:	4602      	mov	r2, r0
 8020e3a:	460b      	mov	r3, r1
 8020e3c:	4680      	mov	r8, r0
 8020e3e:	4689      	mov	r9, r1
 8020e40:	4630      	mov	r0, r6
 8020e42:	4639      	mov	r1, r7
 8020e44:	f7df fa22 	bl	800028c <__adddf3>
 8020e48:	2000      	movs	r0, #0
 8020e4a:	4632      	mov	r2, r6
 8020e4c:	463b      	mov	r3, r7
 8020e4e:	4604      	mov	r4, r0
 8020e50:	460d      	mov	r5, r1
 8020e52:	f7df fa19 	bl	8000288 <__aeabi_dsub>
 8020e56:	4602      	mov	r2, r0
 8020e58:	460b      	mov	r3, r1
 8020e5a:	4640      	mov	r0, r8
 8020e5c:	4649      	mov	r1, r9
 8020e5e:	f7df fa13 	bl	8000288 <__aeabi_dsub>
 8020e62:	9b04      	ldr	r3, [sp, #16]
 8020e64:	9a06      	ldr	r2, [sp, #24]
 8020e66:	3b01      	subs	r3, #1
 8020e68:	4313      	orrs	r3, r2
 8020e6a:	4682      	mov	sl, r0
 8020e6c:	468b      	mov	fp, r1
 8020e6e:	f040 81e7 	bne.w	8021240 <__ieee754_pow+0x700>
 8020e72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8020f28 <__ieee754_pow+0x3e8>
 8020e76:	eeb0 8a47 	vmov.f32	s16, s14
 8020e7a:	eef0 8a67 	vmov.f32	s17, s15
 8020e7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020e82:	2600      	movs	r6, #0
 8020e84:	4632      	mov	r2, r6
 8020e86:	463b      	mov	r3, r7
 8020e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020e8c:	f7df f9fc 	bl	8000288 <__aeabi_dsub>
 8020e90:	4622      	mov	r2, r4
 8020e92:	462b      	mov	r3, r5
 8020e94:	f7df fbb0 	bl	80005f8 <__aeabi_dmul>
 8020e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020e9c:	4680      	mov	r8, r0
 8020e9e:	4689      	mov	r9, r1
 8020ea0:	4650      	mov	r0, sl
 8020ea2:	4659      	mov	r1, fp
 8020ea4:	f7df fba8 	bl	80005f8 <__aeabi_dmul>
 8020ea8:	4602      	mov	r2, r0
 8020eaa:	460b      	mov	r3, r1
 8020eac:	4640      	mov	r0, r8
 8020eae:	4649      	mov	r1, r9
 8020eb0:	f7df f9ec 	bl	800028c <__adddf3>
 8020eb4:	4632      	mov	r2, r6
 8020eb6:	463b      	mov	r3, r7
 8020eb8:	4680      	mov	r8, r0
 8020eba:	4689      	mov	r9, r1
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	4629      	mov	r1, r5
 8020ec0:	f7df fb9a 	bl	80005f8 <__aeabi_dmul>
 8020ec4:	460b      	mov	r3, r1
 8020ec6:	4604      	mov	r4, r0
 8020ec8:	460d      	mov	r5, r1
 8020eca:	4602      	mov	r2, r0
 8020ecc:	4649      	mov	r1, r9
 8020ece:	4640      	mov	r0, r8
 8020ed0:	f7df f9dc 	bl	800028c <__adddf3>
 8020ed4:	4b19      	ldr	r3, [pc, #100]	; (8020f3c <__ieee754_pow+0x3fc>)
 8020ed6:	4299      	cmp	r1, r3
 8020ed8:	ec45 4b19 	vmov	d9, r4, r5
 8020edc:	4606      	mov	r6, r0
 8020ede:	460f      	mov	r7, r1
 8020ee0:	468b      	mov	fp, r1
 8020ee2:	f340 82f1 	ble.w	80214c8 <__ieee754_pow+0x988>
 8020ee6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8020eea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8020eee:	4303      	orrs	r3, r0
 8020ef0:	f000 81e4 	beq.w	80212bc <__ieee754_pow+0x77c>
 8020ef4:	ec51 0b18 	vmov	r0, r1, d8
 8020ef8:	2200      	movs	r2, #0
 8020efa:	2300      	movs	r3, #0
 8020efc:	f7df fdee 	bl	8000adc <__aeabi_dcmplt>
 8020f00:	3800      	subs	r0, #0
 8020f02:	bf18      	it	ne
 8020f04:	2001      	movne	r0, #1
 8020f06:	e72b      	b.n	8020d60 <__ieee754_pow+0x220>
 8020f08:	60000000 	.word	0x60000000
 8020f0c:	3ff71547 	.word	0x3ff71547
 8020f10:	f85ddf44 	.word	0xf85ddf44
 8020f14:	3e54ae0b 	.word	0x3e54ae0b
 8020f18:	55555555 	.word	0x55555555
 8020f1c:	3fd55555 	.word	0x3fd55555
 8020f20:	652b82fe 	.word	0x652b82fe
 8020f24:	3ff71547 	.word	0x3ff71547
 8020f28:	00000000 	.word	0x00000000
 8020f2c:	bff00000 	.word	0xbff00000
 8020f30:	3ff00000 	.word	0x3ff00000
 8020f34:	3fd00000 	.word	0x3fd00000
 8020f38:	3fe00000 	.word	0x3fe00000
 8020f3c:	408fffff 	.word	0x408fffff
 8020f40:	4bd5      	ldr	r3, [pc, #852]	; (8021298 <__ieee754_pow+0x758>)
 8020f42:	402b      	ands	r3, r5
 8020f44:	2200      	movs	r2, #0
 8020f46:	b92b      	cbnz	r3, 8020f54 <__ieee754_pow+0x414>
 8020f48:	4bd4      	ldr	r3, [pc, #848]	; (802129c <__ieee754_pow+0x75c>)
 8020f4a:	f7df fb55 	bl	80005f8 <__aeabi_dmul>
 8020f4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020f52:	460c      	mov	r4, r1
 8020f54:	1523      	asrs	r3, r4, #20
 8020f56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020f5a:	4413      	add	r3, r2
 8020f5c:	9305      	str	r3, [sp, #20]
 8020f5e:	4bd0      	ldr	r3, [pc, #832]	; (80212a0 <__ieee754_pow+0x760>)
 8020f60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020f64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020f68:	429c      	cmp	r4, r3
 8020f6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020f6e:	dd08      	ble.n	8020f82 <__ieee754_pow+0x442>
 8020f70:	4bcc      	ldr	r3, [pc, #816]	; (80212a4 <__ieee754_pow+0x764>)
 8020f72:	429c      	cmp	r4, r3
 8020f74:	f340 8162 	ble.w	802123c <__ieee754_pow+0x6fc>
 8020f78:	9b05      	ldr	r3, [sp, #20]
 8020f7a:	3301      	adds	r3, #1
 8020f7c:	9305      	str	r3, [sp, #20]
 8020f7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020f82:	2400      	movs	r4, #0
 8020f84:	00e3      	lsls	r3, r4, #3
 8020f86:	9307      	str	r3, [sp, #28]
 8020f88:	4bc7      	ldr	r3, [pc, #796]	; (80212a8 <__ieee754_pow+0x768>)
 8020f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020f8e:	ed93 7b00 	vldr	d7, [r3]
 8020f92:	4629      	mov	r1, r5
 8020f94:	ec53 2b17 	vmov	r2, r3, d7
 8020f98:	eeb0 9a47 	vmov.f32	s18, s14
 8020f9c:	eef0 9a67 	vmov.f32	s19, s15
 8020fa0:	4682      	mov	sl, r0
 8020fa2:	f7df f971 	bl	8000288 <__aeabi_dsub>
 8020fa6:	4652      	mov	r2, sl
 8020fa8:	4606      	mov	r6, r0
 8020faa:	460f      	mov	r7, r1
 8020fac:	462b      	mov	r3, r5
 8020fae:	ec51 0b19 	vmov	r0, r1, d9
 8020fb2:	f7df f96b 	bl	800028c <__adddf3>
 8020fb6:	4602      	mov	r2, r0
 8020fb8:	460b      	mov	r3, r1
 8020fba:	2000      	movs	r0, #0
 8020fbc:	49bb      	ldr	r1, [pc, #748]	; (80212ac <__ieee754_pow+0x76c>)
 8020fbe:	f7df fc45 	bl	800084c <__aeabi_ddiv>
 8020fc2:	ec41 0b1a 	vmov	d10, r0, r1
 8020fc6:	4602      	mov	r2, r0
 8020fc8:	460b      	mov	r3, r1
 8020fca:	4630      	mov	r0, r6
 8020fcc:	4639      	mov	r1, r7
 8020fce:	f7df fb13 	bl	80005f8 <__aeabi_dmul>
 8020fd2:	2300      	movs	r3, #0
 8020fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020fd8:	9302      	str	r3, [sp, #8]
 8020fda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8020fde:	46ab      	mov	fp, r5
 8020fe0:	106d      	asrs	r5, r5, #1
 8020fe2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8020fe6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8020fea:	ec41 0b18 	vmov	d8, r0, r1
 8020fee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	4640      	mov	r0, r8
 8020ff6:	4649      	mov	r1, r9
 8020ff8:	4614      	mov	r4, r2
 8020ffa:	461d      	mov	r5, r3
 8020ffc:	f7df fafc 	bl	80005f8 <__aeabi_dmul>
 8021000:	4602      	mov	r2, r0
 8021002:	460b      	mov	r3, r1
 8021004:	4630      	mov	r0, r6
 8021006:	4639      	mov	r1, r7
 8021008:	f7df f93e 	bl	8000288 <__aeabi_dsub>
 802100c:	ec53 2b19 	vmov	r2, r3, d9
 8021010:	4606      	mov	r6, r0
 8021012:	460f      	mov	r7, r1
 8021014:	4620      	mov	r0, r4
 8021016:	4629      	mov	r1, r5
 8021018:	f7df f936 	bl	8000288 <__aeabi_dsub>
 802101c:	4602      	mov	r2, r0
 802101e:	460b      	mov	r3, r1
 8021020:	4650      	mov	r0, sl
 8021022:	4659      	mov	r1, fp
 8021024:	f7df f930 	bl	8000288 <__aeabi_dsub>
 8021028:	4642      	mov	r2, r8
 802102a:	464b      	mov	r3, r9
 802102c:	f7df fae4 	bl	80005f8 <__aeabi_dmul>
 8021030:	4602      	mov	r2, r0
 8021032:	460b      	mov	r3, r1
 8021034:	4630      	mov	r0, r6
 8021036:	4639      	mov	r1, r7
 8021038:	f7df f926 	bl	8000288 <__aeabi_dsub>
 802103c:	ec53 2b1a 	vmov	r2, r3, d10
 8021040:	f7df fada 	bl	80005f8 <__aeabi_dmul>
 8021044:	ec53 2b18 	vmov	r2, r3, d8
 8021048:	ec41 0b19 	vmov	d9, r0, r1
 802104c:	ec51 0b18 	vmov	r0, r1, d8
 8021050:	f7df fad2 	bl	80005f8 <__aeabi_dmul>
 8021054:	a37c      	add	r3, pc, #496	; (adr r3, 8021248 <__ieee754_pow+0x708>)
 8021056:	e9d3 2300 	ldrd	r2, r3, [r3]
 802105a:	4604      	mov	r4, r0
 802105c:	460d      	mov	r5, r1
 802105e:	f7df facb 	bl	80005f8 <__aeabi_dmul>
 8021062:	a37b      	add	r3, pc, #492	; (adr r3, 8021250 <__ieee754_pow+0x710>)
 8021064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021068:	f7df f910 	bl	800028c <__adddf3>
 802106c:	4622      	mov	r2, r4
 802106e:	462b      	mov	r3, r5
 8021070:	f7df fac2 	bl	80005f8 <__aeabi_dmul>
 8021074:	a378      	add	r3, pc, #480	; (adr r3, 8021258 <__ieee754_pow+0x718>)
 8021076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802107a:	f7df f907 	bl	800028c <__adddf3>
 802107e:	4622      	mov	r2, r4
 8021080:	462b      	mov	r3, r5
 8021082:	f7df fab9 	bl	80005f8 <__aeabi_dmul>
 8021086:	a376      	add	r3, pc, #472	; (adr r3, 8021260 <__ieee754_pow+0x720>)
 8021088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802108c:	f7df f8fe 	bl	800028c <__adddf3>
 8021090:	4622      	mov	r2, r4
 8021092:	462b      	mov	r3, r5
 8021094:	f7df fab0 	bl	80005f8 <__aeabi_dmul>
 8021098:	a373      	add	r3, pc, #460	; (adr r3, 8021268 <__ieee754_pow+0x728>)
 802109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802109e:	f7df f8f5 	bl	800028c <__adddf3>
 80210a2:	4622      	mov	r2, r4
 80210a4:	462b      	mov	r3, r5
 80210a6:	f7df faa7 	bl	80005f8 <__aeabi_dmul>
 80210aa:	a371      	add	r3, pc, #452	; (adr r3, 8021270 <__ieee754_pow+0x730>)
 80210ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210b0:	f7df f8ec 	bl	800028c <__adddf3>
 80210b4:	4622      	mov	r2, r4
 80210b6:	4606      	mov	r6, r0
 80210b8:	460f      	mov	r7, r1
 80210ba:	462b      	mov	r3, r5
 80210bc:	4620      	mov	r0, r4
 80210be:	4629      	mov	r1, r5
 80210c0:	f7df fa9a 	bl	80005f8 <__aeabi_dmul>
 80210c4:	4602      	mov	r2, r0
 80210c6:	460b      	mov	r3, r1
 80210c8:	4630      	mov	r0, r6
 80210ca:	4639      	mov	r1, r7
 80210cc:	f7df fa94 	bl	80005f8 <__aeabi_dmul>
 80210d0:	4642      	mov	r2, r8
 80210d2:	4604      	mov	r4, r0
 80210d4:	460d      	mov	r5, r1
 80210d6:	464b      	mov	r3, r9
 80210d8:	ec51 0b18 	vmov	r0, r1, d8
 80210dc:	f7df f8d6 	bl	800028c <__adddf3>
 80210e0:	ec53 2b19 	vmov	r2, r3, d9
 80210e4:	f7df fa88 	bl	80005f8 <__aeabi_dmul>
 80210e8:	4622      	mov	r2, r4
 80210ea:	462b      	mov	r3, r5
 80210ec:	f7df f8ce 	bl	800028c <__adddf3>
 80210f0:	4642      	mov	r2, r8
 80210f2:	4682      	mov	sl, r0
 80210f4:	468b      	mov	fp, r1
 80210f6:	464b      	mov	r3, r9
 80210f8:	4640      	mov	r0, r8
 80210fa:	4649      	mov	r1, r9
 80210fc:	f7df fa7c 	bl	80005f8 <__aeabi_dmul>
 8021100:	4b6b      	ldr	r3, [pc, #428]	; (80212b0 <__ieee754_pow+0x770>)
 8021102:	2200      	movs	r2, #0
 8021104:	4606      	mov	r6, r0
 8021106:	460f      	mov	r7, r1
 8021108:	f7df f8c0 	bl	800028c <__adddf3>
 802110c:	4652      	mov	r2, sl
 802110e:	465b      	mov	r3, fp
 8021110:	f7df f8bc 	bl	800028c <__adddf3>
 8021114:	2000      	movs	r0, #0
 8021116:	4604      	mov	r4, r0
 8021118:	460d      	mov	r5, r1
 802111a:	4602      	mov	r2, r0
 802111c:	460b      	mov	r3, r1
 802111e:	4640      	mov	r0, r8
 8021120:	4649      	mov	r1, r9
 8021122:	f7df fa69 	bl	80005f8 <__aeabi_dmul>
 8021126:	4b62      	ldr	r3, [pc, #392]	; (80212b0 <__ieee754_pow+0x770>)
 8021128:	4680      	mov	r8, r0
 802112a:	4689      	mov	r9, r1
 802112c:	2200      	movs	r2, #0
 802112e:	4620      	mov	r0, r4
 8021130:	4629      	mov	r1, r5
 8021132:	f7df f8a9 	bl	8000288 <__aeabi_dsub>
 8021136:	4632      	mov	r2, r6
 8021138:	463b      	mov	r3, r7
 802113a:	f7df f8a5 	bl	8000288 <__aeabi_dsub>
 802113e:	4602      	mov	r2, r0
 8021140:	460b      	mov	r3, r1
 8021142:	4650      	mov	r0, sl
 8021144:	4659      	mov	r1, fp
 8021146:	f7df f89f 	bl	8000288 <__aeabi_dsub>
 802114a:	ec53 2b18 	vmov	r2, r3, d8
 802114e:	f7df fa53 	bl	80005f8 <__aeabi_dmul>
 8021152:	4622      	mov	r2, r4
 8021154:	4606      	mov	r6, r0
 8021156:	460f      	mov	r7, r1
 8021158:	462b      	mov	r3, r5
 802115a:	ec51 0b19 	vmov	r0, r1, d9
 802115e:	f7df fa4b 	bl	80005f8 <__aeabi_dmul>
 8021162:	4602      	mov	r2, r0
 8021164:	460b      	mov	r3, r1
 8021166:	4630      	mov	r0, r6
 8021168:	4639      	mov	r1, r7
 802116a:	f7df f88f 	bl	800028c <__adddf3>
 802116e:	4606      	mov	r6, r0
 8021170:	460f      	mov	r7, r1
 8021172:	4602      	mov	r2, r0
 8021174:	460b      	mov	r3, r1
 8021176:	4640      	mov	r0, r8
 8021178:	4649      	mov	r1, r9
 802117a:	f7df f887 	bl	800028c <__adddf3>
 802117e:	a33e      	add	r3, pc, #248	; (adr r3, 8021278 <__ieee754_pow+0x738>)
 8021180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021184:	2000      	movs	r0, #0
 8021186:	4604      	mov	r4, r0
 8021188:	460d      	mov	r5, r1
 802118a:	f7df fa35 	bl	80005f8 <__aeabi_dmul>
 802118e:	4642      	mov	r2, r8
 8021190:	ec41 0b18 	vmov	d8, r0, r1
 8021194:	464b      	mov	r3, r9
 8021196:	4620      	mov	r0, r4
 8021198:	4629      	mov	r1, r5
 802119a:	f7df f875 	bl	8000288 <__aeabi_dsub>
 802119e:	4602      	mov	r2, r0
 80211a0:	460b      	mov	r3, r1
 80211a2:	4630      	mov	r0, r6
 80211a4:	4639      	mov	r1, r7
 80211a6:	f7df f86f 	bl	8000288 <__aeabi_dsub>
 80211aa:	a335      	add	r3, pc, #212	; (adr r3, 8021280 <__ieee754_pow+0x740>)
 80211ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211b0:	f7df fa22 	bl	80005f8 <__aeabi_dmul>
 80211b4:	a334      	add	r3, pc, #208	; (adr r3, 8021288 <__ieee754_pow+0x748>)
 80211b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211ba:	4606      	mov	r6, r0
 80211bc:	460f      	mov	r7, r1
 80211be:	4620      	mov	r0, r4
 80211c0:	4629      	mov	r1, r5
 80211c2:	f7df fa19 	bl	80005f8 <__aeabi_dmul>
 80211c6:	4602      	mov	r2, r0
 80211c8:	460b      	mov	r3, r1
 80211ca:	4630      	mov	r0, r6
 80211cc:	4639      	mov	r1, r7
 80211ce:	f7df f85d 	bl	800028c <__adddf3>
 80211d2:	9a07      	ldr	r2, [sp, #28]
 80211d4:	4b37      	ldr	r3, [pc, #220]	; (80212b4 <__ieee754_pow+0x774>)
 80211d6:	4413      	add	r3, r2
 80211d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211dc:	f7df f856 	bl	800028c <__adddf3>
 80211e0:	4682      	mov	sl, r0
 80211e2:	9805      	ldr	r0, [sp, #20]
 80211e4:	468b      	mov	fp, r1
 80211e6:	f7df f99d 	bl	8000524 <__aeabi_i2d>
 80211ea:	9a07      	ldr	r2, [sp, #28]
 80211ec:	4b32      	ldr	r3, [pc, #200]	; (80212b8 <__ieee754_pow+0x778>)
 80211ee:	4413      	add	r3, r2
 80211f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80211f4:	4606      	mov	r6, r0
 80211f6:	460f      	mov	r7, r1
 80211f8:	4652      	mov	r2, sl
 80211fa:	465b      	mov	r3, fp
 80211fc:	ec51 0b18 	vmov	r0, r1, d8
 8021200:	f7df f844 	bl	800028c <__adddf3>
 8021204:	4642      	mov	r2, r8
 8021206:	464b      	mov	r3, r9
 8021208:	f7df f840 	bl	800028c <__adddf3>
 802120c:	4632      	mov	r2, r6
 802120e:	463b      	mov	r3, r7
 8021210:	f7df f83c 	bl	800028c <__adddf3>
 8021214:	2000      	movs	r0, #0
 8021216:	4632      	mov	r2, r6
 8021218:	463b      	mov	r3, r7
 802121a:	4604      	mov	r4, r0
 802121c:	460d      	mov	r5, r1
 802121e:	f7df f833 	bl	8000288 <__aeabi_dsub>
 8021222:	4642      	mov	r2, r8
 8021224:	464b      	mov	r3, r9
 8021226:	f7df f82f 	bl	8000288 <__aeabi_dsub>
 802122a:	ec53 2b18 	vmov	r2, r3, d8
 802122e:	f7df f82b 	bl	8000288 <__aeabi_dsub>
 8021232:	4602      	mov	r2, r0
 8021234:	460b      	mov	r3, r1
 8021236:	4650      	mov	r0, sl
 8021238:	4659      	mov	r1, fp
 802123a:	e610      	b.n	8020e5e <__ieee754_pow+0x31e>
 802123c:	2401      	movs	r4, #1
 802123e:	e6a1      	b.n	8020f84 <__ieee754_pow+0x444>
 8021240:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8021290 <__ieee754_pow+0x750>
 8021244:	e617      	b.n	8020e76 <__ieee754_pow+0x336>
 8021246:	bf00      	nop
 8021248:	4a454eef 	.word	0x4a454eef
 802124c:	3fca7e28 	.word	0x3fca7e28
 8021250:	93c9db65 	.word	0x93c9db65
 8021254:	3fcd864a 	.word	0x3fcd864a
 8021258:	a91d4101 	.word	0xa91d4101
 802125c:	3fd17460 	.word	0x3fd17460
 8021260:	518f264d 	.word	0x518f264d
 8021264:	3fd55555 	.word	0x3fd55555
 8021268:	db6fabff 	.word	0xdb6fabff
 802126c:	3fdb6db6 	.word	0x3fdb6db6
 8021270:	33333303 	.word	0x33333303
 8021274:	3fe33333 	.word	0x3fe33333
 8021278:	e0000000 	.word	0xe0000000
 802127c:	3feec709 	.word	0x3feec709
 8021280:	dc3a03fd 	.word	0xdc3a03fd
 8021284:	3feec709 	.word	0x3feec709
 8021288:	145b01f5 	.word	0x145b01f5
 802128c:	be3e2fe0 	.word	0xbe3e2fe0
 8021290:	00000000 	.word	0x00000000
 8021294:	3ff00000 	.word	0x3ff00000
 8021298:	7ff00000 	.word	0x7ff00000
 802129c:	43400000 	.word	0x43400000
 80212a0:	0003988e 	.word	0x0003988e
 80212a4:	000bb679 	.word	0x000bb679
 80212a8:	08023398 	.word	0x08023398
 80212ac:	3ff00000 	.word	0x3ff00000
 80212b0:	40080000 	.word	0x40080000
 80212b4:	080233b8 	.word	0x080233b8
 80212b8:	080233a8 	.word	0x080233a8
 80212bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8021594 <__ieee754_pow+0xa54>)
 80212be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212c2:	4640      	mov	r0, r8
 80212c4:	4649      	mov	r1, r9
 80212c6:	f7de ffe1 	bl	800028c <__adddf3>
 80212ca:	4622      	mov	r2, r4
 80212cc:	ec41 0b1a 	vmov	d10, r0, r1
 80212d0:	462b      	mov	r3, r5
 80212d2:	4630      	mov	r0, r6
 80212d4:	4639      	mov	r1, r7
 80212d6:	f7de ffd7 	bl	8000288 <__aeabi_dsub>
 80212da:	4602      	mov	r2, r0
 80212dc:	460b      	mov	r3, r1
 80212de:	ec51 0b1a 	vmov	r0, r1, d10
 80212e2:	f7df fc19 	bl	8000b18 <__aeabi_dcmpgt>
 80212e6:	2800      	cmp	r0, #0
 80212e8:	f47f ae04 	bne.w	8020ef4 <__ieee754_pow+0x3b4>
 80212ec:	4aa4      	ldr	r2, [pc, #656]	; (8021580 <__ieee754_pow+0xa40>)
 80212ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80212f2:	4293      	cmp	r3, r2
 80212f4:	f340 8108 	ble.w	8021508 <__ieee754_pow+0x9c8>
 80212f8:	151b      	asrs	r3, r3, #20
 80212fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80212fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8021302:	fa4a f303 	asr.w	r3, sl, r3
 8021306:	445b      	add	r3, fp
 8021308:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802130c:	4e9d      	ldr	r6, [pc, #628]	; (8021584 <__ieee754_pow+0xa44>)
 802130e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021312:	4116      	asrs	r6, r2
 8021314:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8021318:	2000      	movs	r0, #0
 802131a:	ea23 0106 	bic.w	r1, r3, r6
 802131e:	f1c2 0214 	rsb	r2, r2, #20
 8021322:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8021326:	fa4a fa02 	asr.w	sl, sl, r2
 802132a:	f1bb 0f00 	cmp.w	fp, #0
 802132e:	4602      	mov	r2, r0
 8021330:	460b      	mov	r3, r1
 8021332:	4620      	mov	r0, r4
 8021334:	4629      	mov	r1, r5
 8021336:	bfb8      	it	lt
 8021338:	f1ca 0a00 	rsblt	sl, sl, #0
 802133c:	f7de ffa4 	bl	8000288 <__aeabi_dsub>
 8021340:	ec41 0b19 	vmov	d9, r0, r1
 8021344:	4642      	mov	r2, r8
 8021346:	464b      	mov	r3, r9
 8021348:	ec51 0b19 	vmov	r0, r1, d9
 802134c:	f7de ff9e 	bl	800028c <__adddf3>
 8021350:	a37b      	add	r3, pc, #492	; (adr r3, 8021540 <__ieee754_pow+0xa00>)
 8021352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021356:	2000      	movs	r0, #0
 8021358:	4604      	mov	r4, r0
 802135a:	460d      	mov	r5, r1
 802135c:	f7df f94c 	bl	80005f8 <__aeabi_dmul>
 8021360:	ec53 2b19 	vmov	r2, r3, d9
 8021364:	4606      	mov	r6, r0
 8021366:	460f      	mov	r7, r1
 8021368:	4620      	mov	r0, r4
 802136a:	4629      	mov	r1, r5
 802136c:	f7de ff8c 	bl	8000288 <__aeabi_dsub>
 8021370:	4602      	mov	r2, r0
 8021372:	460b      	mov	r3, r1
 8021374:	4640      	mov	r0, r8
 8021376:	4649      	mov	r1, r9
 8021378:	f7de ff86 	bl	8000288 <__aeabi_dsub>
 802137c:	a372      	add	r3, pc, #456	; (adr r3, 8021548 <__ieee754_pow+0xa08>)
 802137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021382:	f7df f939 	bl	80005f8 <__aeabi_dmul>
 8021386:	a372      	add	r3, pc, #456	; (adr r3, 8021550 <__ieee754_pow+0xa10>)
 8021388:	e9d3 2300 	ldrd	r2, r3, [r3]
 802138c:	4680      	mov	r8, r0
 802138e:	4689      	mov	r9, r1
 8021390:	4620      	mov	r0, r4
 8021392:	4629      	mov	r1, r5
 8021394:	f7df f930 	bl	80005f8 <__aeabi_dmul>
 8021398:	4602      	mov	r2, r0
 802139a:	460b      	mov	r3, r1
 802139c:	4640      	mov	r0, r8
 802139e:	4649      	mov	r1, r9
 80213a0:	f7de ff74 	bl	800028c <__adddf3>
 80213a4:	4604      	mov	r4, r0
 80213a6:	460d      	mov	r5, r1
 80213a8:	4602      	mov	r2, r0
 80213aa:	460b      	mov	r3, r1
 80213ac:	4630      	mov	r0, r6
 80213ae:	4639      	mov	r1, r7
 80213b0:	f7de ff6c 	bl	800028c <__adddf3>
 80213b4:	4632      	mov	r2, r6
 80213b6:	463b      	mov	r3, r7
 80213b8:	4680      	mov	r8, r0
 80213ba:	4689      	mov	r9, r1
 80213bc:	f7de ff64 	bl	8000288 <__aeabi_dsub>
 80213c0:	4602      	mov	r2, r0
 80213c2:	460b      	mov	r3, r1
 80213c4:	4620      	mov	r0, r4
 80213c6:	4629      	mov	r1, r5
 80213c8:	f7de ff5e 	bl	8000288 <__aeabi_dsub>
 80213cc:	4642      	mov	r2, r8
 80213ce:	4606      	mov	r6, r0
 80213d0:	460f      	mov	r7, r1
 80213d2:	464b      	mov	r3, r9
 80213d4:	4640      	mov	r0, r8
 80213d6:	4649      	mov	r1, r9
 80213d8:	f7df f90e 	bl	80005f8 <__aeabi_dmul>
 80213dc:	a35e      	add	r3, pc, #376	; (adr r3, 8021558 <__ieee754_pow+0xa18>)
 80213de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213e2:	4604      	mov	r4, r0
 80213e4:	460d      	mov	r5, r1
 80213e6:	f7df f907 	bl	80005f8 <__aeabi_dmul>
 80213ea:	a35d      	add	r3, pc, #372	; (adr r3, 8021560 <__ieee754_pow+0xa20>)
 80213ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213f0:	f7de ff4a 	bl	8000288 <__aeabi_dsub>
 80213f4:	4622      	mov	r2, r4
 80213f6:	462b      	mov	r3, r5
 80213f8:	f7df f8fe 	bl	80005f8 <__aeabi_dmul>
 80213fc:	a35a      	add	r3, pc, #360	; (adr r3, 8021568 <__ieee754_pow+0xa28>)
 80213fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021402:	f7de ff43 	bl	800028c <__adddf3>
 8021406:	4622      	mov	r2, r4
 8021408:	462b      	mov	r3, r5
 802140a:	f7df f8f5 	bl	80005f8 <__aeabi_dmul>
 802140e:	a358      	add	r3, pc, #352	; (adr r3, 8021570 <__ieee754_pow+0xa30>)
 8021410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021414:	f7de ff38 	bl	8000288 <__aeabi_dsub>
 8021418:	4622      	mov	r2, r4
 802141a:	462b      	mov	r3, r5
 802141c:	f7df f8ec 	bl	80005f8 <__aeabi_dmul>
 8021420:	a355      	add	r3, pc, #340	; (adr r3, 8021578 <__ieee754_pow+0xa38>)
 8021422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021426:	f7de ff31 	bl	800028c <__adddf3>
 802142a:	4622      	mov	r2, r4
 802142c:	462b      	mov	r3, r5
 802142e:	f7df f8e3 	bl	80005f8 <__aeabi_dmul>
 8021432:	4602      	mov	r2, r0
 8021434:	460b      	mov	r3, r1
 8021436:	4640      	mov	r0, r8
 8021438:	4649      	mov	r1, r9
 802143a:	f7de ff25 	bl	8000288 <__aeabi_dsub>
 802143e:	4604      	mov	r4, r0
 8021440:	460d      	mov	r5, r1
 8021442:	4602      	mov	r2, r0
 8021444:	460b      	mov	r3, r1
 8021446:	4640      	mov	r0, r8
 8021448:	4649      	mov	r1, r9
 802144a:	f7df f8d5 	bl	80005f8 <__aeabi_dmul>
 802144e:	2200      	movs	r2, #0
 8021450:	ec41 0b19 	vmov	d9, r0, r1
 8021454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021458:	4620      	mov	r0, r4
 802145a:	4629      	mov	r1, r5
 802145c:	f7de ff14 	bl	8000288 <__aeabi_dsub>
 8021460:	4602      	mov	r2, r0
 8021462:	460b      	mov	r3, r1
 8021464:	ec51 0b19 	vmov	r0, r1, d9
 8021468:	f7df f9f0 	bl	800084c <__aeabi_ddiv>
 802146c:	4632      	mov	r2, r6
 802146e:	4604      	mov	r4, r0
 8021470:	460d      	mov	r5, r1
 8021472:	463b      	mov	r3, r7
 8021474:	4640      	mov	r0, r8
 8021476:	4649      	mov	r1, r9
 8021478:	f7df f8be 	bl	80005f8 <__aeabi_dmul>
 802147c:	4632      	mov	r2, r6
 802147e:	463b      	mov	r3, r7
 8021480:	f7de ff04 	bl	800028c <__adddf3>
 8021484:	4602      	mov	r2, r0
 8021486:	460b      	mov	r3, r1
 8021488:	4620      	mov	r0, r4
 802148a:	4629      	mov	r1, r5
 802148c:	f7de fefc 	bl	8000288 <__aeabi_dsub>
 8021490:	4642      	mov	r2, r8
 8021492:	464b      	mov	r3, r9
 8021494:	f7de fef8 	bl	8000288 <__aeabi_dsub>
 8021498:	460b      	mov	r3, r1
 802149a:	4602      	mov	r2, r0
 802149c:	493a      	ldr	r1, [pc, #232]	; (8021588 <__ieee754_pow+0xa48>)
 802149e:	2000      	movs	r0, #0
 80214a0:	f7de fef2 	bl	8000288 <__aeabi_dsub>
 80214a4:	ec41 0b10 	vmov	d0, r0, r1
 80214a8:	ee10 3a90 	vmov	r3, s1
 80214ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80214b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80214b4:	da2b      	bge.n	802150e <__ieee754_pow+0x9ce>
 80214b6:	4650      	mov	r0, sl
 80214b8:	f001 f84a 	bl	8022550 <scalbn>
 80214bc:	ec51 0b10 	vmov	r0, r1, d0
 80214c0:	ec53 2b18 	vmov	r2, r3, d8
 80214c4:	f7ff bbed 	b.w	8020ca2 <__ieee754_pow+0x162>
 80214c8:	4b30      	ldr	r3, [pc, #192]	; (802158c <__ieee754_pow+0xa4c>)
 80214ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80214ce:	429e      	cmp	r6, r3
 80214d0:	f77f af0c 	ble.w	80212ec <__ieee754_pow+0x7ac>
 80214d4:	4b2e      	ldr	r3, [pc, #184]	; (8021590 <__ieee754_pow+0xa50>)
 80214d6:	440b      	add	r3, r1
 80214d8:	4303      	orrs	r3, r0
 80214da:	d009      	beq.n	80214f0 <__ieee754_pow+0x9b0>
 80214dc:	ec51 0b18 	vmov	r0, r1, d8
 80214e0:	2200      	movs	r2, #0
 80214e2:	2300      	movs	r3, #0
 80214e4:	f7df fafa 	bl	8000adc <__aeabi_dcmplt>
 80214e8:	3800      	subs	r0, #0
 80214ea:	bf18      	it	ne
 80214ec:	2001      	movne	r0, #1
 80214ee:	e447      	b.n	8020d80 <__ieee754_pow+0x240>
 80214f0:	4622      	mov	r2, r4
 80214f2:	462b      	mov	r3, r5
 80214f4:	f7de fec8 	bl	8000288 <__aeabi_dsub>
 80214f8:	4642      	mov	r2, r8
 80214fa:	464b      	mov	r3, r9
 80214fc:	f7df fb02 	bl	8000b04 <__aeabi_dcmpge>
 8021500:	2800      	cmp	r0, #0
 8021502:	f43f aef3 	beq.w	80212ec <__ieee754_pow+0x7ac>
 8021506:	e7e9      	b.n	80214dc <__ieee754_pow+0x99c>
 8021508:	f04f 0a00 	mov.w	sl, #0
 802150c:	e71a      	b.n	8021344 <__ieee754_pow+0x804>
 802150e:	ec51 0b10 	vmov	r0, r1, d0
 8021512:	4619      	mov	r1, r3
 8021514:	e7d4      	b.n	80214c0 <__ieee754_pow+0x980>
 8021516:	491c      	ldr	r1, [pc, #112]	; (8021588 <__ieee754_pow+0xa48>)
 8021518:	2000      	movs	r0, #0
 802151a:	f7ff bb30 	b.w	8020b7e <__ieee754_pow+0x3e>
 802151e:	2000      	movs	r0, #0
 8021520:	2100      	movs	r1, #0
 8021522:	f7ff bb2c 	b.w	8020b7e <__ieee754_pow+0x3e>
 8021526:	4630      	mov	r0, r6
 8021528:	4639      	mov	r1, r7
 802152a:	f7ff bb28 	b.w	8020b7e <__ieee754_pow+0x3e>
 802152e:	9204      	str	r2, [sp, #16]
 8021530:	f7ff bb7a 	b.w	8020c28 <__ieee754_pow+0xe8>
 8021534:	2300      	movs	r3, #0
 8021536:	f7ff bb64 	b.w	8020c02 <__ieee754_pow+0xc2>
 802153a:	bf00      	nop
 802153c:	f3af 8000 	nop.w
 8021540:	00000000 	.word	0x00000000
 8021544:	3fe62e43 	.word	0x3fe62e43
 8021548:	fefa39ef 	.word	0xfefa39ef
 802154c:	3fe62e42 	.word	0x3fe62e42
 8021550:	0ca86c39 	.word	0x0ca86c39
 8021554:	be205c61 	.word	0xbe205c61
 8021558:	72bea4d0 	.word	0x72bea4d0
 802155c:	3e663769 	.word	0x3e663769
 8021560:	c5d26bf1 	.word	0xc5d26bf1
 8021564:	3ebbbd41 	.word	0x3ebbbd41
 8021568:	af25de2c 	.word	0xaf25de2c
 802156c:	3f11566a 	.word	0x3f11566a
 8021570:	16bebd93 	.word	0x16bebd93
 8021574:	3f66c16c 	.word	0x3f66c16c
 8021578:	5555553e 	.word	0x5555553e
 802157c:	3fc55555 	.word	0x3fc55555
 8021580:	3fe00000 	.word	0x3fe00000
 8021584:	000fffff 	.word	0x000fffff
 8021588:	3ff00000 	.word	0x3ff00000
 802158c:	4090cbff 	.word	0x4090cbff
 8021590:	3f6f3400 	.word	0x3f6f3400
 8021594:	652b82fe 	.word	0x652b82fe
 8021598:	3c971547 	.word	0x3c971547
 802159c:	00000000 	.word	0x00000000

080215a0 <__ieee754_rem_pio2>:
 80215a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215a4:	ed2d 8b02 	vpush	{d8}
 80215a8:	ec55 4b10 	vmov	r4, r5, d0
 80215ac:	4bca      	ldr	r3, [pc, #808]	; (80218d8 <__ieee754_rem_pio2+0x338>)
 80215ae:	b08b      	sub	sp, #44	; 0x2c
 80215b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80215b4:	4598      	cmp	r8, r3
 80215b6:	4682      	mov	sl, r0
 80215b8:	9502      	str	r5, [sp, #8]
 80215ba:	dc08      	bgt.n	80215ce <__ieee754_rem_pio2+0x2e>
 80215bc:	2200      	movs	r2, #0
 80215be:	2300      	movs	r3, #0
 80215c0:	ed80 0b00 	vstr	d0, [r0]
 80215c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80215c8:	f04f 0b00 	mov.w	fp, #0
 80215cc:	e028      	b.n	8021620 <__ieee754_rem_pio2+0x80>
 80215ce:	4bc3      	ldr	r3, [pc, #780]	; (80218dc <__ieee754_rem_pio2+0x33c>)
 80215d0:	4598      	cmp	r8, r3
 80215d2:	dc78      	bgt.n	80216c6 <__ieee754_rem_pio2+0x126>
 80215d4:	9b02      	ldr	r3, [sp, #8]
 80215d6:	4ec2      	ldr	r6, [pc, #776]	; (80218e0 <__ieee754_rem_pio2+0x340>)
 80215d8:	2b00      	cmp	r3, #0
 80215da:	ee10 0a10 	vmov	r0, s0
 80215de:	a3b0      	add	r3, pc, #704	; (adr r3, 80218a0 <__ieee754_rem_pio2+0x300>)
 80215e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215e4:	4629      	mov	r1, r5
 80215e6:	dd39      	ble.n	802165c <__ieee754_rem_pio2+0xbc>
 80215e8:	f7de fe4e 	bl	8000288 <__aeabi_dsub>
 80215ec:	45b0      	cmp	r8, r6
 80215ee:	4604      	mov	r4, r0
 80215f0:	460d      	mov	r5, r1
 80215f2:	d01b      	beq.n	802162c <__ieee754_rem_pio2+0x8c>
 80215f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80218a8 <__ieee754_rem_pio2+0x308>)
 80215f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215fa:	f7de fe45 	bl	8000288 <__aeabi_dsub>
 80215fe:	4602      	mov	r2, r0
 8021600:	460b      	mov	r3, r1
 8021602:	e9ca 2300 	strd	r2, r3, [sl]
 8021606:	4620      	mov	r0, r4
 8021608:	4629      	mov	r1, r5
 802160a:	f7de fe3d 	bl	8000288 <__aeabi_dsub>
 802160e:	a3a6      	add	r3, pc, #664	; (adr r3, 80218a8 <__ieee754_rem_pio2+0x308>)
 8021610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021614:	f7de fe38 	bl	8000288 <__aeabi_dsub>
 8021618:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802161c:	f04f 0b01 	mov.w	fp, #1
 8021620:	4658      	mov	r0, fp
 8021622:	b00b      	add	sp, #44	; 0x2c
 8021624:	ecbd 8b02 	vpop	{d8}
 8021628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802162c:	a3a0      	add	r3, pc, #640	; (adr r3, 80218b0 <__ieee754_rem_pio2+0x310>)
 802162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021632:	f7de fe29 	bl	8000288 <__aeabi_dsub>
 8021636:	a3a0      	add	r3, pc, #640	; (adr r3, 80218b8 <__ieee754_rem_pio2+0x318>)
 8021638:	e9d3 2300 	ldrd	r2, r3, [r3]
 802163c:	4604      	mov	r4, r0
 802163e:	460d      	mov	r5, r1
 8021640:	f7de fe22 	bl	8000288 <__aeabi_dsub>
 8021644:	4602      	mov	r2, r0
 8021646:	460b      	mov	r3, r1
 8021648:	e9ca 2300 	strd	r2, r3, [sl]
 802164c:	4620      	mov	r0, r4
 802164e:	4629      	mov	r1, r5
 8021650:	f7de fe1a 	bl	8000288 <__aeabi_dsub>
 8021654:	a398      	add	r3, pc, #608	; (adr r3, 80218b8 <__ieee754_rem_pio2+0x318>)
 8021656:	e9d3 2300 	ldrd	r2, r3, [r3]
 802165a:	e7db      	b.n	8021614 <__ieee754_rem_pio2+0x74>
 802165c:	f7de fe16 	bl	800028c <__adddf3>
 8021660:	45b0      	cmp	r8, r6
 8021662:	4604      	mov	r4, r0
 8021664:	460d      	mov	r5, r1
 8021666:	d016      	beq.n	8021696 <__ieee754_rem_pio2+0xf6>
 8021668:	a38f      	add	r3, pc, #572	; (adr r3, 80218a8 <__ieee754_rem_pio2+0x308>)
 802166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802166e:	f7de fe0d 	bl	800028c <__adddf3>
 8021672:	4602      	mov	r2, r0
 8021674:	460b      	mov	r3, r1
 8021676:	e9ca 2300 	strd	r2, r3, [sl]
 802167a:	4620      	mov	r0, r4
 802167c:	4629      	mov	r1, r5
 802167e:	f7de fe03 	bl	8000288 <__aeabi_dsub>
 8021682:	a389      	add	r3, pc, #548	; (adr r3, 80218a8 <__ieee754_rem_pio2+0x308>)
 8021684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021688:	f7de fe00 	bl	800028c <__adddf3>
 802168c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8021690:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021694:	e7c4      	b.n	8021620 <__ieee754_rem_pio2+0x80>
 8021696:	a386      	add	r3, pc, #536	; (adr r3, 80218b0 <__ieee754_rem_pio2+0x310>)
 8021698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802169c:	f7de fdf6 	bl	800028c <__adddf3>
 80216a0:	a385      	add	r3, pc, #532	; (adr r3, 80218b8 <__ieee754_rem_pio2+0x318>)
 80216a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216a6:	4604      	mov	r4, r0
 80216a8:	460d      	mov	r5, r1
 80216aa:	f7de fdef 	bl	800028c <__adddf3>
 80216ae:	4602      	mov	r2, r0
 80216b0:	460b      	mov	r3, r1
 80216b2:	e9ca 2300 	strd	r2, r3, [sl]
 80216b6:	4620      	mov	r0, r4
 80216b8:	4629      	mov	r1, r5
 80216ba:	f7de fde5 	bl	8000288 <__aeabi_dsub>
 80216be:	a37e      	add	r3, pc, #504	; (adr r3, 80218b8 <__ieee754_rem_pio2+0x318>)
 80216c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216c4:	e7e0      	b.n	8021688 <__ieee754_rem_pio2+0xe8>
 80216c6:	4b87      	ldr	r3, [pc, #540]	; (80218e4 <__ieee754_rem_pio2+0x344>)
 80216c8:	4598      	cmp	r8, r3
 80216ca:	f300 80d9 	bgt.w	8021880 <__ieee754_rem_pio2+0x2e0>
 80216ce:	f7fe fd83 	bl	80201d8 <fabs>
 80216d2:	ec55 4b10 	vmov	r4, r5, d0
 80216d6:	ee10 0a10 	vmov	r0, s0
 80216da:	a379      	add	r3, pc, #484	; (adr r3, 80218c0 <__ieee754_rem_pio2+0x320>)
 80216dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216e0:	4629      	mov	r1, r5
 80216e2:	f7de ff89 	bl	80005f8 <__aeabi_dmul>
 80216e6:	4b80      	ldr	r3, [pc, #512]	; (80218e8 <__ieee754_rem_pio2+0x348>)
 80216e8:	2200      	movs	r2, #0
 80216ea:	f7de fdcf 	bl	800028c <__adddf3>
 80216ee:	f7df fa33 	bl	8000b58 <__aeabi_d2iz>
 80216f2:	4683      	mov	fp, r0
 80216f4:	f7de ff16 	bl	8000524 <__aeabi_i2d>
 80216f8:	4602      	mov	r2, r0
 80216fa:	460b      	mov	r3, r1
 80216fc:	ec43 2b18 	vmov	d8, r2, r3
 8021700:	a367      	add	r3, pc, #412	; (adr r3, 80218a0 <__ieee754_rem_pio2+0x300>)
 8021702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021706:	f7de ff77 	bl	80005f8 <__aeabi_dmul>
 802170a:	4602      	mov	r2, r0
 802170c:	460b      	mov	r3, r1
 802170e:	4620      	mov	r0, r4
 8021710:	4629      	mov	r1, r5
 8021712:	f7de fdb9 	bl	8000288 <__aeabi_dsub>
 8021716:	a364      	add	r3, pc, #400	; (adr r3, 80218a8 <__ieee754_rem_pio2+0x308>)
 8021718:	e9d3 2300 	ldrd	r2, r3, [r3]
 802171c:	4606      	mov	r6, r0
 802171e:	460f      	mov	r7, r1
 8021720:	ec51 0b18 	vmov	r0, r1, d8
 8021724:	f7de ff68 	bl	80005f8 <__aeabi_dmul>
 8021728:	f1bb 0f1f 	cmp.w	fp, #31
 802172c:	4604      	mov	r4, r0
 802172e:	460d      	mov	r5, r1
 8021730:	dc0d      	bgt.n	802174e <__ieee754_rem_pio2+0x1ae>
 8021732:	4b6e      	ldr	r3, [pc, #440]	; (80218ec <__ieee754_rem_pio2+0x34c>)
 8021734:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8021738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802173c:	4543      	cmp	r3, r8
 802173e:	d006      	beq.n	802174e <__ieee754_rem_pio2+0x1ae>
 8021740:	4622      	mov	r2, r4
 8021742:	462b      	mov	r3, r5
 8021744:	4630      	mov	r0, r6
 8021746:	4639      	mov	r1, r7
 8021748:	f7de fd9e 	bl	8000288 <__aeabi_dsub>
 802174c:	e00f      	b.n	802176e <__ieee754_rem_pio2+0x1ce>
 802174e:	462b      	mov	r3, r5
 8021750:	4622      	mov	r2, r4
 8021752:	4630      	mov	r0, r6
 8021754:	4639      	mov	r1, r7
 8021756:	f7de fd97 	bl	8000288 <__aeabi_dsub>
 802175a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802175e:	9303      	str	r3, [sp, #12]
 8021760:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021764:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8021768:	f1b8 0f10 	cmp.w	r8, #16
 802176c:	dc02      	bgt.n	8021774 <__ieee754_rem_pio2+0x1d4>
 802176e:	e9ca 0100 	strd	r0, r1, [sl]
 8021772:	e039      	b.n	80217e8 <__ieee754_rem_pio2+0x248>
 8021774:	a34e      	add	r3, pc, #312	; (adr r3, 80218b0 <__ieee754_rem_pio2+0x310>)
 8021776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802177a:	ec51 0b18 	vmov	r0, r1, d8
 802177e:	f7de ff3b 	bl	80005f8 <__aeabi_dmul>
 8021782:	4604      	mov	r4, r0
 8021784:	460d      	mov	r5, r1
 8021786:	4602      	mov	r2, r0
 8021788:	460b      	mov	r3, r1
 802178a:	4630      	mov	r0, r6
 802178c:	4639      	mov	r1, r7
 802178e:	f7de fd7b 	bl	8000288 <__aeabi_dsub>
 8021792:	4602      	mov	r2, r0
 8021794:	460b      	mov	r3, r1
 8021796:	4680      	mov	r8, r0
 8021798:	4689      	mov	r9, r1
 802179a:	4630      	mov	r0, r6
 802179c:	4639      	mov	r1, r7
 802179e:	f7de fd73 	bl	8000288 <__aeabi_dsub>
 80217a2:	4622      	mov	r2, r4
 80217a4:	462b      	mov	r3, r5
 80217a6:	f7de fd6f 	bl	8000288 <__aeabi_dsub>
 80217aa:	a343      	add	r3, pc, #268	; (adr r3, 80218b8 <__ieee754_rem_pio2+0x318>)
 80217ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217b0:	4604      	mov	r4, r0
 80217b2:	460d      	mov	r5, r1
 80217b4:	ec51 0b18 	vmov	r0, r1, d8
 80217b8:	f7de ff1e 	bl	80005f8 <__aeabi_dmul>
 80217bc:	4622      	mov	r2, r4
 80217be:	462b      	mov	r3, r5
 80217c0:	f7de fd62 	bl	8000288 <__aeabi_dsub>
 80217c4:	4602      	mov	r2, r0
 80217c6:	460b      	mov	r3, r1
 80217c8:	4604      	mov	r4, r0
 80217ca:	460d      	mov	r5, r1
 80217cc:	4640      	mov	r0, r8
 80217ce:	4649      	mov	r1, r9
 80217d0:	f7de fd5a 	bl	8000288 <__aeabi_dsub>
 80217d4:	9a03      	ldr	r2, [sp, #12]
 80217d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80217da:	1ad3      	subs	r3, r2, r3
 80217dc:	2b31      	cmp	r3, #49	; 0x31
 80217de:	dc24      	bgt.n	802182a <__ieee754_rem_pio2+0x28a>
 80217e0:	e9ca 0100 	strd	r0, r1, [sl]
 80217e4:	4646      	mov	r6, r8
 80217e6:	464f      	mov	r7, r9
 80217e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80217ec:	4630      	mov	r0, r6
 80217ee:	4642      	mov	r2, r8
 80217f0:	464b      	mov	r3, r9
 80217f2:	4639      	mov	r1, r7
 80217f4:	f7de fd48 	bl	8000288 <__aeabi_dsub>
 80217f8:	462b      	mov	r3, r5
 80217fa:	4622      	mov	r2, r4
 80217fc:	f7de fd44 	bl	8000288 <__aeabi_dsub>
 8021800:	9b02      	ldr	r3, [sp, #8]
 8021802:	2b00      	cmp	r3, #0
 8021804:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021808:	f6bf af0a 	bge.w	8021620 <__ieee754_rem_pio2+0x80>
 802180c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021810:	f8ca 3004 	str.w	r3, [sl, #4]
 8021814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021818:	f8ca 8000 	str.w	r8, [sl]
 802181c:	f8ca 0008 	str.w	r0, [sl, #8]
 8021820:	f8ca 300c 	str.w	r3, [sl, #12]
 8021824:	f1cb 0b00 	rsb	fp, fp, #0
 8021828:	e6fa      	b.n	8021620 <__ieee754_rem_pio2+0x80>
 802182a:	a327      	add	r3, pc, #156	; (adr r3, 80218c8 <__ieee754_rem_pio2+0x328>)
 802182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021830:	ec51 0b18 	vmov	r0, r1, d8
 8021834:	f7de fee0 	bl	80005f8 <__aeabi_dmul>
 8021838:	4604      	mov	r4, r0
 802183a:	460d      	mov	r5, r1
 802183c:	4602      	mov	r2, r0
 802183e:	460b      	mov	r3, r1
 8021840:	4640      	mov	r0, r8
 8021842:	4649      	mov	r1, r9
 8021844:	f7de fd20 	bl	8000288 <__aeabi_dsub>
 8021848:	4602      	mov	r2, r0
 802184a:	460b      	mov	r3, r1
 802184c:	4606      	mov	r6, r0
 802184e:	460f      	mov	r7, r1
 8021850:	4640      	mov	r0, r8
 8021852:	4649      	mov	r1, r9
 8021854:	f7de fd18 	bl	8000288 <__aeabi_dsub>
 8021858:	4622      	mov	r2, r4
 802185a:	462b      	mov	r3, r5
 802185c:	f7de fd14 	bl	8000288 <__aeabi_dsub>
 8021860:	a31b      	add	r3, pc, #108	; (adr r3, 80218d0 <__ieee754_rem_pio2+0x330>)
 8021862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021866:	4604      	mov	r4, r0
 8021868:	460d      	mov	r5, r1
 802186a:	ec51 0b18 	vmov	r0, r1, d8
 802186e:	f7de fec3 	bl	80005f8 <__aeabi_dmul>
 8021872:	4622      	mov	r2, r4
 8021874:	462b      	mov	r3, r5
 8021876:	f7de fd07 	bl	8000288 <__aeabi_dsub>
 802187a:	4604      	mov	r4, r0
 802187c:	460d      	mov	r5, r1
 802187e:	e75f      	b.n	8021740 <__ieee754_rem_pio2+0x1a0>
 8021880:	4b1b      	ldr	r3, [pc, #108]	; (80218f0 <__ieee754_rem_pio2+0x350>)
 8021882:	4598      	cmp	r8, r3
 8021884:	dd36      	ble.n	80218f4 <__ieee754_rem_pio2+0x354>
 8021886:	ee10 2a10 	vmov	r2, s0
 802188a:	462b      	mov	r3, r5
 802188c:	4620      	mov	r0, r4
 802188e:	4629      	mov	r1, r5
 8021890:	f7de fcfa 	bl	8000288 <__aeabi_dsub>
 8021894:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021898:	e9ca 0100 	strd	r0, r1, [sl]
 802189c:	e694      	b.n	80215c8 <__ieee754_rem_pio2+0x28>
 802189e:	bf00      	nop
 80218a0:	54400000 	.word	0x54400000
 80218a4:	3ff921fb 	.word	0x3ff921fb
 80218a8:	1a626331 	.word	0x1a626331
 80218ac:	3dd0b461 	.word	0x3dd0b461
 80218b0:	1a600000 	.word	0x1a600000
 80218b4:	3dd0b461 	.word	0x3dd0b461
 80218b8:	2e037073 	.word	0x2e037073
 80218bc:	3ba3198a 	.word	0x3ba3198a
 80218c0:	6dc9c883 	.word	0x6dc9c883
 80218c4:	3fe45f30 	.word	0x3fe45f30
 80218c8:	2e000000 	.word	0x2e000000
 80218cc:	3ba3198a 	.word	0x3ba3198a
 80218d0:	252049c1 	.word	0x252049c1
 80218d4:	397b839a 	.word	0x397b839a
 80218d8:	3fe921fb 	.word	0x3fe921fb
 80218dc:	4002d97b 	.word	0x4002d97b
 80218e0:	3ff921fb 	.word	0x3ff921fb
 80218e4:	413921fb 	.word	0x413921fb
 80218e8:	3fe00000 	.word	0x3fe00000
 80218ec:	080233c8 	.word	0x080233c8
 80218f0:	7fefffff 	.word	0x7fefffff
 80218f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80218f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80218fc:	ee10 0a10 	vmov	r0, s0
 8021900:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8021904:	ee10 6a10 	vmov	r6, s0
 8021908:	460f      	mov	r7, r1
 802190a:	f7df f925 	bl	8000b58 <__aeabi_d2iz>
 802190e:	f7de fe09 	bl	8000524 <__aeabi_i2d>
 8021912:	4602      	mov	r2, r0
 8021914:	460b      	mov	r3, r1
 8021916:	4630      	mov	r0, r6
 8021918:	4639      	mov	r1, r7
 802191a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802191e:	f7de fcb3 	bl	8000288 <__aeabi_dsub>
 8021922:	4b23      	ldr	r3, [pc, #140]	; (80219b0 <__ieee754_rem_pio2+0x410>)
 8021924:	2200      	movs	r2, #0
 8021926:	f7de fe67 	bl	80005f8 <__aeabi_dmul>
 802192a:	460f      	mov	r7, r1
 802192c:	4606      	mov	r6, r0
 802192e:	f7df f913 	bl	8000b58 <__aeabi_d2iz>
 8021932:	f7de fdf7 	bl	8000524 <__aeabi_i2d>
 8021936:	4602      	mov	r2, r0
 8021938:	460b      	mov	r3, r1
 802193a:	4630      	mov	r0, r6
 802193c:	4639      	mov	r1, r7
 802193e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021942:	f7de fca1 	bl	8000288 <__aeabi_dsub>
 8021946:	4b1a      	ldr	r3, [pc, #104]	; (80219b0 <__ieee754_rem_pio2+0x410>)
 8021948:	2200      	movs	r2, #0
 802194a:	f7de fe55 	bl	80005f8 <__aeabi_dmul>
 802194e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8021952:	ad04      	add	r5, sp, #16
 8021954:	f04f 0803 	mov.w	r8, #3
 8021958:	46a9      	mov	r9, r5
 802195a:	2600      	movs	r6, #0
 802195c:	2700      	movs	r7, #0
 802195e:	4632      	mov	r2, r6
 8021960:	463b      	mov	r3, r7
 8021962:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8021966:	46c3      	mov	fp, r8
 8021968:	3d08      	subs	r5, #8
 802196a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802196e:	f7df f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8021972:	2800      	cmp	r0, #0
 8021974:	d1f3      	bne.n	802195e <__ieee754_rem_pio2+0x3be>
 8021976:	4b0f      	ldr	r3, [pc, #60]	; (80219b4 <__ieee754_rem_pio2+0x414>)
 8021978:	9301      	str	r3, [sp, #4]
 802197a:	2302      	movs	r3, #2
 802197c:	9300      	str	r3, [sp, #0]
 802197e:	4622      	mov	r2, r4
 8021980:	465b      	mov	r3, fp
 8021982:	4651      	mov	r1, sl
 8021984:	4648      	mov	r0, r9
 8021986:	f000 f997 	bl	8021cb8 <__kernel_rem_pio2>
 802198a:	9b02      	ldr	r3, [sp, #8]
 802198c:	2b00      	cmp	r3, #0
 802198e:	4683      	mov	fp, r0
 8021990:	f6bf ae46 	bge.w	8021620 <__ieee754_rem_pio2+0x80>
 8021994:	e9da 2100 	ldrd	r2, r1, [sl]
 8021998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802199c:	e9ca 2300 	strd	r2, r3, [sl]
 80219a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80219a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80219a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80219ac:	e73a      	b.n	8021824 <__ieee754_rem_pio2+0x284>
 80219ae:	bf00      	nop
 80219b0:	41700000 	.word	0x41700000
 80219b4:	08023448 	.word	0x08023448

080219b8 <__ieee754_sqrt>:
 80219b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80219bc:	ec55 4b10 	vmov	r4, r5, d0
 80219c0:	4e55      	ldr	r6, [pc, #340]	; (8021b18 <__ieee754_sqrt+0x160>)
 80219c2:	43ae      	bics	r6, r5
 80219c4:	ee10 0a10 	vmov	r0, s0
 80219c8:	ee10 3a10 	vmov	r3, s0
 80219cc:	462a      	mov	r2, r5
 80219ce:	4629      	mov	r1, r5
 80219d0:	d110      	bne.n	80219f4 <__ieee754_sqrt+0x3c>
 80219d2:	ee10 2a10 	vmov	r2, s0
 80219d6:	462b      	mov	r3, r5
 80219d8:	f7de fe0e 	bl	80005f8 <__aeabi_dmul>
 80219dc:	4602      	mov	r2, r0
 80219de:	460b      	mov	r3, r1
 80219e0:	4620      	mov	r0, r4
 80219e2:	4629      	mov	r1, r5
 80219e4:	f7de fc52 	bl	800028c <__adddf3>
 80219e8:	4604      	mov	r4, r0
 80219ea:	460d      	mov	r5, r1
 80219ec:	ec45 4b10 	vmov	d0, r4, r5
 80219f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219f4:	2d00      	cmp	r5, #0
 80219f6:	dc10      	bgt.n	8021a1a <__ieee754_sqrt+0x62>
 80219f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80219fc:	4330      	orrs	r0, r6
 80219fe:	d0f5      	beq.n	80219ec <__ieee754_sqrt+0x34>
 8021a00:	b15d      	cbz	r5, 8021a1a <__ieee754_sqrt+0x62>
 8021a02:	ee10 2a10 	vmov	r2, s0
 8021a06:	462b      	mov	r3, r5
 8021a08:	ee10 0a10 	vmov	r0, s0
 8021a0c:	f7de fc3c 	bl	8000288 <__aeabi_dsub>
 8021a10:	4602      	mov	r2, r0
 8021a12:	460b      	mov	r3, r1
 8021a14:	f7de ff1a 	bl	800084c <__aeabi_ddiv>
 8021a18:	e7e6      	b.n	80219e8 <__ieee754_sqrt+0x30>
 8021a1a:	1512      	asrs	r2, r2, #20
 8021a1c:	d074      	beq.n	8021b08 <__ieee754_sqrt+0x150>
 8021a1e:	07d4      	lsls	r4, r2, #31
 8021a20:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021a24:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8021a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8021a2c:	bf5e      	ittt	pl
 8021a2e:	0fda      	lsrpl	r2, r3, #31
 8021a30:	005b      	lslpl	r3, r3, #1
 8021a32:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8021a36:	2400      	movs	r4, #0
 8021a38:	0fda      	lsrs	r2, r3, #31
 8021a3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021a3e:	107f      	asrs	r7, r7, #1
 8021a40:	005b      	lsls	r3, r3, #1
 8021a42:	2516      	movs	r5, #22
 8021a44:	4620      	mov	r0, r4
 8021a46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8021a4a:	1886      	adds	r6, r0, r2
 8021a4c:	428e      	cmp	r6, r1
 8021a4e:	bfde      	ittt	le
 8021a50:	1b89      	suble	r1, r1, r6
 8021a52:	18b0      	addle	r0, r6, r2
 8021a54:	18a4      	addle	r4, r4, r2
 8021a56:	0049      	lsls	r1, r1, #1
 8021a58:	3d01      	subs	r5, #1
 8021a5a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8021a5e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8021a62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021a66:	d1f0      	bne.n	8021a4a <__ieee754_sqrt+0x92>
 8021a68:	462a      	mov	r2, r5
 8021a6a:	f04f 0e20 	mov.w	lr, #32
 8021a6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8021a72:	4281      	cmp	r1, r0
 8021a74:	eb06 0c05 	add.w	ip, r6, r5
 8021a78:	dc02      	bgt.n	8021a80 <__ieee754_sqrt+0xc8>
 8021a7a:	d113      	bne.n	8021aa4 <__ieee754_sqrt+0xec>
 8021a7c:	459c      	cmp	ip, r3
 8021a7e:	d811      	bhi.n	8021aa4 <__ieee754_sqrt+0xec>
 8021a80:	f1bc 0f00 	cmp.w	ip, #0
 8021a84:	eb0c 0506 	add.w	r5, ip, r6
 8021a88:	da43      	bge.n	8021b12 <__ieee754_sqrt+0x15a>
 8021a8a:	2d00      	cmp	r5, #0
 8021a8c:	db41      	blt.n	8021b12 <__ieee754_sqrt+0x15a>
 8021a8e:	f100 0801 	add.w	r8, r0, #1
 8021a92:	1a09      	subs	r1, r1, r0
 8021a94:	459c      	cmp	ip, r3
 8021a96:	bf88      	it	hi
 8021a98:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8021a9c:	eba3 030c 	sub.w	r3, r3, ip
 8021aa0:	4432      	add	r2, r6
 8021aa2:	4640      	mov	r0, r8
 8021aa4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8021aa8:	f1be 0e01 	subs.w	lr, lr, #1
 8021aac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8021ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021ab4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8021ab8:	d1db      	bne.n	8021a72 <__ieee754_sqrt+0xba>
 8021aba:	430b      	orrs	r3, r1
 8021abc:	d006      	beq.n	8021acc <__ieee754_sqrt+0x114>
 8021abe:	1c50      	adds	r0, r2, #1
 8021ac0:	bf13      	iteet	ne
 8021ac2:	3201      	addne	r2, #1
 8021ac4:	3401      	addeq	r4, #1
 8021ac6:	4672      	moveq	r2, lr
 8021ac8:	f022 0201 	bicne.w	r2, r2, #1
 8021acc:	1063      	asrs	r3, r4, #1
 8021ace:	0852      	lsrs	r2, r2, #1
 8021ad0:	07e1      	lsls	r1, r4, #31
 8021ad2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021ad6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021ada:	bf48      	it	mi
 8021adc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8021ae0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8021ae4:	4614      	mov	r4, r2
 8021ae6:	e781      	b.n	80219ec <__ieee754_sqrt+0x34>
 8021ae8:	0ad9      	lsrs	r1, r3, #11
 8021aea:	3815      	subs	r0, #21
 8021aec:	055b      	lsls	r3, r3, #21
 8021aee:	2900      	cmp	r1, #0
 8021af0:	d0fa      	beq.n	8021ae8 <__ieee754_sqrt+0x130>
 8021af2:	02cd      	lsls	r5, r1, #11
 8021af4:	d50a      	bpl.n	8021b0c <__ieee754_sqrt+0x154>
 8021af6:	f1c2 0420 	rsb	r4, r2, #32
 8021afa:	fa23 f404 	lsr.w	r4, r3, r4
 8021afe:	1e55      	subs	r5, r2, #1
 8021b00:	4093      	lsls	r3, r2
 8021b02:	4321      	orrs	r1, r4
 8021b04:	1b42      	subs	r2, r0, r5
 8021b06:	e78a      	b.n	8021a1e <__ieee754_sqrt+0x66>
 8021b08:	4610      	mov	r0, r2
 8021b0a:	e7f0      	b.n	8021aee <__ieee754_sqrt+0x136>
 8021b0c:	0049      	lsls	r1, r1, #1
 8021b0e:	3201      	adds	r2, #1
 8021b10:	e7ef      	b.n	8021af2 <__ieee754_sqrt+0x13a>
 8021b12:	4680      	mov	r8, r0
 8021b14:	e7bd      	b.n	8021a92 <__ieee754_sqrt+0xda>
 8021b16:	bf00      	nop
 8021b18:	7ff00000 	.word	0x7ff00000

08021b1c <__ieee754_sqrtf>:
 8021b1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8021b20:	4770      	bx	lr
 8021b22:	0000      	movs	r0, r0
 8021b24:	0000      	movs	r0, r0
	...

08021b28 <__kernel_cos>:
 8021b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b2c:	ec57 6b10 	vmov	r6, r7, d0
 8021b30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8021b34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8021b38:	ed8d 1b00 	vstr	d1, [sp]
 8021b3c:	da07      	bge.n	8021b4e <__kernel_cos+0x26>
 8021b3e:	ee10 0a10 	vmov	r0, s0
 8021b42:	4639      	mov	r1, r7
 8021b44:	f7df f808 	bl	8000b58 <__aeabi_d2iz>
 8021b48:	2800      	cmp	r0, #0
 8021b4a:	f000 8088 	beq.w	8021c5e <__kernel_cos+0x136>
 8021b4e:	4632      	mov	r2, r6
 8021b50:	463b      	mov	r3, r7
 8021b52:	4630      	mov	r0, r6
 8021b54:	4639      	mov	r1, r7
 8021b56:	f7de fd4f 	bl	80005f8 <__aeabi_dmul>
 8021b5a:	4b51      	ldr	r3, [pc, #324]	; (8021ca0 <__kernel_cos+0x178>)
 8021b5c:	2200      	movs	r2, #0
 8021b5e:	4604      	mov	r4, r0
 8021b60:	460d      	mov	r5, r1
 8021b62:	f7de fd49 	bl	80005f8 <__aeabi_dmul>
 8021b66:	a340      	add	r3, pc, #256	; (adr r3, 8021c68 <__kernel_cos+0x140>)
 8021b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b6c:	4682      	mov	sl, r0
 8021b6e:	468b      	mov	fp, r1
 8021b70:	4620      	mov	r0, r4
 8021b72:	4629      	mov	r1, r5
 8021b74:	f7de fd40 	bl	80005f8 <__aeabi_dmul>
 8021b78:	a33d      	add	r3, pc, #244	; (adr r3, 8021c70 <__kernel_cos+0x148>)
 8021b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b7e:	f7de fb85 	bl	800028c <__adddf3>
 8021b82:	4622      	mov	r2, r4
 8021b84:	462b      	mov	r3, r5
 8021b86:	f7de fd37 	bl	80005f8 <__aeabi_dmul>
 8021b8a:	a33b      	add	r3, pc, #236	; (adr r3, 8021c78 <__kernel_cos+0x150>)
 8021b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b90:	f7de fb7a 	bl	8000288 <__aeabi_dsub>
 8021b94:	4622      	mov	r2, r4
 8021b96:	462b      	mov	r3, r5
 8021b98:	f7de fd2e 	bl	80005f8 <__aeabi_dmul>
 8021b9c:	a338      	add	r3, pc, #224	; (adr r3, 8021c80 <__kernel_cos+0x158>)
 8021b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ba2:	f7de fb73 	bl	800028c <__adddf3>
 8021ba6:	4622      	mov	r2, r4
 8021ba8:	462b      	mov	r3, r5
 8021baa:	f7de fd25 	bl	80005f8 <__aeabi_dmul>
 8021bae:	a336      	add	r3, pc, #216	; (adr r3, 8021c88 <__kernel_cos+0x160>)
 8021bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bb4:	f7de fb68 	bl	8000288 <__aeabi_dsub>
 8021bb8:	4622      	mov	r2, r4
 8021bba:	462b      	mov	r3, r5
 8021bbc:	f7de fd1c 	bl	80005f8 <__aeabi_dmul>
 8021bc0:	a333      	add	r3, pc, #204	; (adr r3, 8021c90 <__kernel_cos+0x168>)
 8021bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bc6:	f7de fb61 	bl	800028c <__adddf3>
 8021bca:	4622      	mov	r2, r4
 8021bcc:	462b      	mov	r3, r5
 8021bce:	f7de fd13 	bl	80005f8 <__aeabi_dmul>
 8021bd2:	4622      	mov	r2, r4
 8021bd4:	462b      	mov	r3, r5
 8021bd6:	f7de fd0f 	bl	80005f8 <__aeabi_dmul>
 8021bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021bde:	4604      	mov	r4, r0
 8021be0:	460d      	mov	r5, r1
 8021be2:	4630      	mov	r0, r6
 8021be4:	4639      	mov	r1, r7
 8021be6:	f7de fd07 	bl	80005f8 <__aeabi_dmul>
 8021bea:	460b      	mov	r3, r1
 8021bec:	4602      	mov	r2, r0
 8021bee:	4629      	mov	r1, r5
 8021bf0:	4620      	mov	r0, r4
 8021bf2:	f7de fb49 	bl	8000288 <__aeabi_dsub>
 8021bf6:	4b2b      	ldr	r3, [pc, #172]	; (8021ca4 <__kernel_cos+0x17c>)
 8021bf8:	4598      	cmp	r8, r3
 8021bfa:	4606      	mov	r6, r0
 8021bfc:	460f      	mov	r7, r1
 8021bfe:	dc10      	bgt.n	8021c22 <__kernel_cos+0xfa>
 8021c00:	4602      	mov	r2, r0
 8021c02:	460b      	mov	r3, r1
 8021c04:	4650      	mov	r0, sl
 8021c06:	4659      	mov	r1, fp
 8021c08:	f7de fb3e 	bl	8000288 <__aeabi_dsub>
 8021c0c:	460b      	mov	r3, r1
 8021c0e:	4926      	ldr	r1, [pc, #152]	; (8021ca8 <__kernel_cos+0x180>)
 8021c10:	4602      	mov	r2, r0
 8021c12:	2000      	movs	r0, #0
 8021c14:	f7de fb38 	bl	8000288 <__aeabi_dsub>
 8021c18:	ec41 0b10 	vmov	d0, r0, r1
 8021c1c:	b003      	add	sp, #12
 8021c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c22:	4b22      	ldr	r3, [pc, #136]	; (8021cac <__kernel_cos+0x184>)
 8021c24:	4920      	ldr	r1, [pc, #128]	; (8021ca8 <__kernel_cos+0x180>)
 8021c26:	4598      	cmp	r8, r3
 8021c28:	bfcc      	ite	gt
 8021c2a:	4d21      	ldrgt	r5, [pc, #132]	; (8021cb0 <__kernel_cos+0x188>)
 8021c2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8021c30:	2400      	movs	r4, #0
 8021c32:	4622      	mov	r2, r4
 8021c34:	462b      	mov	r3, r5
 8021c36:	2000      	movs	r0, #0
 8021c38:	f7de fb26 	bl	8000288 <__aeabi_dsub>
 8021c3c:	4622      	mov	r2, r4
 8021c3e:	4680      	mov	r8, r0
 8021c40:	4689      	mov	r9, r1
 8021c42:	462b      	mov	r3, r5
 8021c44:	4650      	mov	r0, sl
 8021c46:	4659      	mov	r1, fp
 8021c48:	f7de fb1e 	bl	8000288 <__aeabi_dsub>
 8021c4c:	4632      	mov	r2, r6
 8021c4e:	463b      	mov	r3, r7
 8021c50:	f7de fb1a 	bl	8000288 <__aeabi_dsub>
 8021c54:	4602      	mov	r2, r0
 8021c56:	460b      	mov	r3, r1
 8021c58:	4640      	mov	r0, r8
 8021c5a:	4649      	mov	r1, r9
 8021c5c:	e7da      	b.n	8021c14 <__kernel_cos+0xec>
 8021c5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8021c98 <__kernel_cos+0x170>
 8021c62:	e7db      	b.n	8021c1c <__kernel_cos+0xf4>
 8021c64:	f3af 8000 	nop.w
 8021c68:	be8838d4 	.word	0xbe8838d4
 8021c6c:	bda8fae9 	.word	0xbda8fae9
 8021c70:	bdb4b1c4 	.word	0xbdb4b1c4
 8021c74:	3e21ee9e 	.word	0x3e21ee9e
 8021c78:	809c52ad 	.word	0x809c52ad
 8021c7c:	3e927e4f 	.word	0x3e927e4f
 8021c80:	19cb1590 	.word	0x19cb1590
 8021c84:	3efa01a0 	.word	0x3efa01a0
 8021c88:	16c15177 	.word	0x16c15177
 8021c8c:	3f56c16c 	.word	0x3f56c16c
 8021c90:	5555554c 	.word	0x5555554c
 8021c94:	3fa55555 	.word	0x3fa55555
 8021c98:	00000000 	.word	0x00000000
 8021c9c:	3ff00000 	.word	0x3ff00000
 8021ca0:	3fe00000 	.word	0x3fe00000
 8021ca4:	3fd33332 	.word	0x3fd33332
 8021ca8:	3ff00000 	.word	0x3ff00000
 8021cac:	3fe90000 	.word	0x3fe90000
 8021cb0:	3fd20000 	.word	0x3fd20000
 8021cb4:	00000000 	.word	0x00000000

08021cb8 <__kernel_rem_pio2>:
 8021cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cbc:	ed2d 8b02 	vpush	{d8}
 8021cc0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8021cc4:	f112 0f14 	cmn.w	r2, #20
 8021cc8:	9308      	str	r3, [sp, #32]
 8021cca:	9101      	str	r1, [sp, #4]
 8021ccc:	4bc4      	ldr	r3, [pc, #784]	; (8021fe0 <__kernel_rem_pio2+0x328>)
 8021cce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8021cd0:	900b      	str	r0, [sp, #44]	; 0x2c
 8021cd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021cd6:	9302      	str	r3, [sp, #8]
 8021cd8:	9b08      	ldr	r3, [sp, #32]
 8021cda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8021cde:	bfa8      	it	ge
 8021ce0:	1ed4      	subge	r4, r2, #3
 8021ce2:	9306      	str	r3, [sp, #24]
 8021ce4:	bfb2      	itee	lt
 8021ce6:	2400      	movlt	r4, #0
 8021ce8:	2318      	movge	r3, #24
 8021cea:	fb94 f4f3 	sdivge	r4, r4, r3
 8021cee:	f06f 0317 	mvn.w	r3, #23
 8021cf2:	fb04 3303 	mla	r3, r4, r3, r3
 8021cf6:	eb03 0a02 	add.w	sl, r3, r2
 8021cfa:	9b02      	ldr	r3, [sp, #8]
 8021cfc:	9a06      	ldr	r2, [sp, #24]
 8021cfe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8021fd0 <__kernel_rem_pio2+0x318>
 8021d02:	eb03 0802 	add.w	r8, r3, r2
 8021d06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8021d08:	1aa7      	subs	r7, r4, r2
 8021d0a:	ae22      	add	r6, sp, #136	; 0x88
 8021d0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8021d10:	2500      	movs	r5, #0
 8021d12:	4545      	cmp	r5, r8
 8021d14:	dd13      	ble.n	8021d3e <__kernel_rem_pio2+0x86>
 8021d16:	9b08      	ldr	r3, [sp, #32]
 8021d18:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8021fd0 <__kernel_rem_pio2+0x318>
 8021d1c:	aa22      	add	r2, sp, #136	; 0x88
 8021d1e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8021d22:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8021d26:	f04f 0800 	mov.w	r8, #0
 8021d2a:	9b02      	ldr	r3, [sp, #8]
 8021d2c:	4598      	cmp	r8, r3
 8021d2e:	dc2f      	bgt.n	8021d90 <__kernel_rem_pio2+0xd8>
 8021d30:	ed8d 8b04 	vstr	d8, [sp, #16]
 8021d34:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8021d38:	462f      	mov	r7, r5
 8021d3a:	2600      	movs	r6, #0
 8021d3c:	e01b      	b.n	8021d76 <__kernel_rem_pio2+0xbe>
 8021d3e:	42ef      	cmn	r7, r5
 8021d40:	d407      	bmi.n	8021d52 <__kernel_rem_pio2+0x9a>
 8021d42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8021d46:	f7de fbed 	bl	8000524 <__aeabi_i2d>
 8021d4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8021d4e:	3501      	adds	r5, #1
 8021d50:	e7df      	b.n	8021d12 <__kernel_rem_pio2+0x5a>
 8021d52:	ec51 0b18 	vmov	r0, r1, d8
 8021d56:	e7f8      	b.n	8021d4a <__kernel_rem_pio2+0x92>
 8021d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021d5c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8021d60:	f7de fc4a 	bl	80005f8 <__aeabi_dmul>
 8021d64:	4602      	mov	r2, r0
 8021d66:	460b      	mov	r3, r1
 8021d68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021d6c:	f7de fa8e 	bl	800028c <__adddf3>
 8021d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021d74:	3601      	adds	r6, #1
 8021d76:	9b06      	ldr	r3, [sp, #24]
 8021d78:	429e      	cmp	r6, r3
 8021d7a:	f1a7 0708 	sub.w	r7, r7, #8
 8021d7e:	ddeb      	ble.n	8021d58 <__kernel_rem_pio2+0xa0>
 8021d80:	ed9d 7b04 	vldr	d7, [sp, #16]
 8021d84:	f108 0801 	add.w	r8, r8, #1
 8021d88:	ecab 7b02 	vstmia	fp!, {d7}
 8021d8c:	3508      	adds	r5, #8
 8021d8e:	e7cc      	b.n	8021d2a <__kernel_rem_pio2+0x72>
 8021d90:	9b02      	ldr	r3, [sp, #8]
 8021d92:	aa0e      	add	r2, sp, #56	; 0x38
 8021d94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021d98:	930d      	str	r3, [sp, #52]	; 0x34
 8021d9a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8021d9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021da0:	9c02      	ldr	r4, [sp, #8]
 8021da2:	930c      	str	r3, [sp, #48]	; 0x30
 8021da4:	00e3      	lsls	r3, r4, #3
 8021da6:	930a      	str	r3, [sp, #40]	; 0x28
 8021da8:	ab9a      	add	r3, sp, #616	; 0x268
 8021daa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021dae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8021db2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8021db6:	ab72      	add	r3, sp, #456	; 0x1c8
 8021db8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8021dbc:	46c3      	mov	fp, r8
 8021dbe:	46a1      	mov	r9, r4
 8021dc0:	f1b9 0f00 	cmp.w	r9, #0
 8021dc4:	f1a5 0508 	sub.w	r5, r5, #8
 8021dc8:	dc77      	bgt.n	8021eba <__kernel_rem_pio2+0x202>
 8021dca:	ec47 6b10 	vmov	d0, r6, r7
 8021dce:	4650      	mov	r0, sl
 8021dd0:	f000 fbbe 	bl	8022550 <scalbn>
 8021dd4:	ec57 6b10 	vmov	r6, r7, d0
 8021dd8:	2200      	movs	r2, #0
 8021dda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8021dde:	ee10 0a10 	vmov	r0, s0
 8021de2:	4639      	mov	r1, r7
 8021de4:	f7de fc08 	bl	80005f8 <__aeabi_dmul>
 8021de8:	ec41 0b10 	vmov	d0, r0, r1
 8021dec:	f7fe fa00 	bl	80201f0 <floor>
 8021df0:	4b7c      	ldr	r3, [pc, #496]	; (8021fe4 <__kernel_rem_pio2+0x32c>)
 8021df2:	ec51 0b10 	vmov	r0, r1, d0
 8021df6:	2200      	movs	r2, #0
 8021df8:	f7de fbfe 	bl	80005f8 <__aeabi_dmul>
 8021dfc:	4602      	mov	r2, r0
 8021dfe:	460b      	mov	r3, r1
 8021e00:	4630      	mov	r0, r6
 8021e02:	4639      	mov	r1, r7
 8021e04:	f7de fa40 	bl	8000288 <__aeabi_dsub>
 8021e08:	460f      	mov	r7, r1
 8021e0a:	4606      	mov	r6, r0
 8021e0c:	f7de fea4 	bl	8000b58 <__aeabi_d2iz>
 8021e10:	9004      	str	r0, [sp, #16]
 8021e12:	f7de fb87 	bl	8000524 <__aeabi_i2d>
 8021e16:	4602      	mov	r2, r0
 8021e18:	460b      	mov	r3, r1
 8021e1a:	4630      	mov	r0, r6
 8021e1c:	4639      	mov	r1, r7
 8021e1e:	f7de fa33 	bl	8000288 <__aeabi_dsub>
 8021e22:	f1ba 0f00 	cmp.w	sl, #0
 8021e26:	4606      	mov	r6, r0
 8021e28:	460f      	mov	r7, r1
 8021e2a:	dd6d      	ble.n	8021f08 <__kernel_rem_pio2+0x250>
 8021e2c:	1e62      	subs	r2, r4, #1
 8021e2e:	ab0e      	add	r3, sp, #56	; 0x38
 8021e30:	9d04      	ldr	r5, [sp, #16]
 8021e32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021e36:	f1ca 0118 	rsb	r1, sl, #24
 8021e3a:	fa40 f301 	asr.w	r3, r0, r1
 8021e3e:	441d      	add	r5, r3
 8021e40:	408b      	lsls	r3, r1
 8021e42:	1ac0      	subs	r0, r0, r3
 8021e44:	ab0e      	add	r3, sp, #56	; 0x38
 8021e46:	9504      	str	r5, [sp, #16]
 8021e48:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8021e4c:	f1ca 0317 	rsb	r3, sl, #23
 8021e50:	fa40 fb03 	asr.w	fp, r0, r3
 8021e54:	f1bb 0f00 	cmp.w	fp, #0
 8021e58:	dd65      	ble.n	8021f26 <__kernel_rem_pio2+0x26e>
 8021e5a:	9b04      	ldr	r3, [sp, #16]
 8021e5c:	2200      	movs	r2, #0
 8021e5e:	3301      	adds	r3, #1
 8021e60:	9304      	str	r3, [sp, #16]
 8021e62:	4615      	mov	r5, r2
 8021e64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8021e68:	4294      	cmp	r4, r2
 8021e6a:	f300 809c 	bgt.w	8021fa6 <__kernel_rem_pio2+0x2ee>
 8021e6e:	f1ba 0f00 	cmp.w	sl, #0
 8021e72:	dd07      	ble.n	8021e84 <__kernel_rem_pio2+0x1cc>
 8021e74:	f1ba 0f01 	cmp.w	sl, #1
 8021e78:	f000 80c0 	beq.w	8021ffc <__kernel_rem_pio2+0x344>
 8021e7c:	f1ba 0f02 	cmp.w	sl, #2
 8021e80:	f000 80c6 	beq.w	8022010 <__kernel_rem_pio2+0x358>
 8021e84:	f1bb 0f02 	cmp.w	fp, #2
 8021e88:	d14d      	bne.n	8021f26 <__kernel_rem_pio2+0x26e>
 8021e8a:	4632      	mov	r2, r6
 8021e8c:	463b      	mov	r3, r7
 8021e8e:	4956      	ldr	r1, [pc, #344]	; (8021fe8 <__kernel_rem_pio2+0x330>)
 8021e90:	2000      	movs	r0, #0
 8021e92:	f7de f9f9 	bl	8000288 <__aeabi_dsub>
 8021e96:	4606      	mov	r6, r0
 8021e98:	460f      	mov	r7, r1
 8021e9a:	2d00      	cmp	r5, #0
 8021e9c:	d043      	beq.n	8021f26 <__kernel_rem_pio2+0x26e>
 8021e9e:	4650      	mov	r0, sl
 8021ea0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8021fd8 <__kernel_rem_pio2+0x320>
 8021ea4:	f000 fb54 	bl	8022550 <scalbn>
 8021ea8:	4630      	mov	r0, r6
 8021eaa:	4639      	mov	r1, r7
 8021eac:	ec53 2b10 	vmov	r2, r3, d0
 8021eb0:	f7de f9ea 	bl	8000288 <__aeabi_dsub>
 8021eb4:	4606      	mov	r6, r0
 8021eb6:	460f      	mov	r7, r1
 8021eb8:	e035      	b.n	8021f26 <__kernel_rem_pio2+0x26e>
 8021eba:	4b4c      	ldr	r3, [pc, #304]	; (8021fec <__kernel_rem_pio2+0x334>)
 8021ebc:	2200      	movs	r2, #0
 8021ebe:	4630      	mov	r0, r6
 8021ec0:	4639      	mov	r1, r7
 8021ec2:	f7de fb99 	bl	80005f8 <__aeabi_dmul>
 8021ec6:	f7de fe47 	bl	8000b58 <__aeabi_d2iz>
 8021eca:	f7de fb2b 	bl	8000524 <__aeabi_i2d>
 8021ece:	4602      	mov	r2, r0
 8021ed0:	460b      	mov	r3, r1
 8021ed2:	ec43 2b18 	vmov	d8, r2, r3
 8021ed6:	4b46      	ldr	r3, [pc, #280]	; (8021ff0 <__kernel_rem_pio2+0x338>)
 8021ed8:	2200      	movs	r2, #0
 8021eda:	f7de fb8d 	bl	80005f8 <__aeabi_dmul>
 8021ede:	4602      	mov	r2, r0
 8021ee0:	460b      	mov	r3, r1
 8021ee2:	4630      	mov	r0, r6
 8021ee4:	4639      	mov	r1, r7
 8021ee6:	f7de f9cf 	bl	8000288 <__aeabi_dsub>
 8021eea:	f7de fe35 	bl	8000b58 <__aeabi_d2iz>
 8021eee:	e9d5 2300 	ldrd	r2, r3, [r5]
 8021ef2:	f84b 0b04 	str.w	r0, [fp], #4
 8021ef6:	ec51 0b18 	vmov	r0, r1, d8
 8021efa:	f7de f9c7 	bl	800028c <__adddf3>
 8021efe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8021f02:	4606      	mov	r6, r0
 8021f04:	460f      	mov	r7, r1
 8021f06:	e75b      	b.n	8021dc0 <__kernel_rem_pio2+0x108>
 8021f08:	d106      	bne.n	8021f18 <__kernel_rem_pio2+0x260>
 8021f0a:	1e63      	subs	r3, r4, #1
 8021f0c:	aa0e      	add	r2, sp, #56	; 0x38
 8021f0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021f12:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8021f16:	e79d      	b.n	8021e54 <__kernel_rem_pio2+0x19c>
 8021f18:	4b36      	ldr	r3, [pc, #216]	; (8021ff4 <__kernel_rem_pio2+0x33c>)
 8021f1a:	2200      	movs	r2, #0
 8021f1c:	f7de fdf2 	bl	8000b04 <__aeabi_dcmpge>
 8021f20:	2800      	cmp	r0, #0
 8021f22:	d13d      	bne.n	8021fa0 <__kernel_rem_pio2+0x2e8>
 8021f24:	4683      	mov	fp, r0
 8021f26:	2200      	movs	r2, #0
 8021f28:	2300      	movs	r3, #0
 8021f2a:	4630      	mov	r0, r6
 8021f2c:	4639      	mov	r1, r7
 8021f2e:	f7de fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8021f32:	2800      	cmp	r0, #0
 8021f34:	f000 80c0 	beq.w	80220b8 <__kernel_rem_pio2+0x400>
 8021f38:	1e65      	subs	r5, r4, #1
 8021f3a:	462b      	mov	r3, r5
 8021f3c:	2200      	movs	r2, #0
 8021f3e:	9902      	ldr	r1, [sp, #8]
 8021f40:	428b      	cmp	r3, r1
 8021f42:	da6c      	bge.n	802201e <__kernel_rem_pio2+0x366>
 8021f44:	2a00      	cmp	r2, #0
 8021f46:	f000 8089 	beq.w	802205c <__kernel_rem_pio2+0x3a4>
 8021f4a:	ab0e      	add	r3, sp, #56	; 0x38
 8021f4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8021f50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	f000 80ad 	beq.w	80220b4 <__kernel_rem_pio2+0x3fc>
 8021f5a:	4650      	mov	r0, sl
 8021f5c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8021fd8 <__kernel_rem_pio2+0x320>
 8021f60:	f000 faf6 	bl	8022550 <scalbn>
 8021f64:	ab9a      	add	r3, sp, #616	; 0x268
 8021f66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021f6a:	ec57 6b10 	vmov	r6, r7, d0
 8021f6e:	00ec      	lsls	r4, r5, #3
 8021f70:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8021f74:	46aa      	mov	sl, r5
 8021f76:	f1ba 0f00 	cmp.w	sl, #0
 8021f7a:	f280 80d6 	bge.w	802212a <__kernel_rem_pio2+0x472>
 8021f7e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8021fd0 <__kernel_rem_pio2+0x318>
 8021f82:	462e      	mov	r6, r5
 8021f84:	2e00      	cmp	r6, #0
 8021f86:	f2c0 8104 	blt.w	8022192 <__kernel_rem_pio2+0x4da>
 8021f8a:	ab72      	add	r3, sp, #456	; 0x1c8
 8021f8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8021f90:	f8df a064 	ldr.w	sl, [pc, #100]	; 8021ff8 <__kernel_rem_pio2+0x340>
 8021f94:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8021f98:	f04f 0800 	mov.w	r8, #0
 8021f9c:	1baf      	subs	r7, r5, r6
 8021f9e:	e0ea      	b.n	8022176 <__kernel_rem_pio2+0x4be>
 8021fa0:	f04f 0b02 	mov.w	fp, #2
 8021fa4:	e759      	b.n	8021e5a <__kernel_rem_pio2+0x1a2>
 8021fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8021faa:	b955      	cbnz	r5, 8021fc2 <__kernel_rem_pio2+0x30a>
 8021fac:	b123      	cbz	r3, 8021fb8 <__kernel_rem_pio2+0x300>
 8021fae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8021fb2:	f8c8 3000 	str.w	r3, [r8]
 8021fb6:	2301      	movs	r3, #1
 8021fb8:	3201      	adds	r2, #1
 8021fba:	f108 0804 	add.w	r8, r8, #4
 8021fbe:	461d      	mov	r5, r3
 8021fc0:	e752      	b.n	8021e68 <__kernel_rem_pio2+0x1b0>
 8021fc2:	1acb      	subs	r3, r1, r3
 8021fc4:	f8c8 3000 	str.w	r3, [r8]
 8021fc8:	462b      	mov	r3, r5
 8021fca:	e7f5      	b.n	8021fb8 <__kernel_rem_pio2+0x300>
 8021fcc:	f3af 8000 	nop.w
	...
 8021fdc:	3ff00000 	.word	0x3ff00000
 8021fe0:	08023590 	.word	0x08023590
 8021fe4:	40200000 	.word	0x40200000
 8021fe8:	3ff00000 	.word	0x3ff00000
 8021fec:	3e700000 	.word	0x3e700000
 8021ff0:	41700000 	.word	0x41700000
 8021ff4:	3fe00000 	.word	0x3fe00000
 8021ff8:	08023550 	.word	0x08023550
 8021ffc:	1e62      	subs	r2, r4, #1
 8021ffe:	ab0e      	add	r3, sp, #56	; 0x38
 8022000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022004:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022008:	a90e      	add	r1, sp, #56	; 0x38
 802200a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802200e:	e739      	b.n	8021e84 <__kernel_rem_pio2+0x1cc>
 8022010:	1e62      	subs	r2, r4, #1
 8022012:	ab0e      	add	r3, sp, #56	; 0x38
 8022014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022018:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802201c:	e7f4      	b.n	8022008 <__kernel_rem_pio2+0x350>
 802201e:	a90e      	add	r1, sp, #56	; 0x38
 8022020:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022024:	3b01      	subs	r3, #1
 8022026:	430a      	orrs	r2, r1
 8022028:	e789      	b.n	8021f3e <__kernel_rem_pio2+0x286>
 802202a:	3301      	adds	r3, #1
 802202c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8022030:	2900      	cmp	r1, #0
 8022032:	d0fa      	beq.n	802202a <__kernel_rem_pio2+0x372>
 8022034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022036:	f502 721a 	add.w	r2, r2, #616	; 0x268
 802203a:	446a      	add	r2, sp
 802203c:	3a98      	subs	r2, #152	; 0x98
 802203e:	920a      	str	r2, [sp, #40]	; 0x28
 8022040:	9a08      	ldr	r2, [sp, #32]
 8022042:	18e3      	adds	r3, r4, r3
 8022044:	18a5      	adds	r5, r4, r2
 8022046:	aa22      	add	r2, sp, #136	; 0x88
 8022048:	f104 0801 	add.w	r8, r4, #1
 802204c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8022050:	9304      	str	r3, [sp, #16]
 8022052:	9b04      	ldr	r3, [sp, #16]
 8022054:	4543      	cmp	r3, r8
 8022056:	da04      	bge.n	8022062 <__kernel_rem_pio2+0x3aa>
 8022058:	461c      	mov	r4, r3
 802205a:	e6a3      	b.n	8021da4 <__kernel_rem_pio2+0xec>
 802205c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802205e:	2301      	movs	r3, #1
 8022060:	e7e4      	b.n	802202c <__kernel_rem_pio2+0x374>
 8022062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022064:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8022068:	f7de fa5c 	bl	8000524 <__aeabi_i2d>
 802206c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8022070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022072:	46ab      	mov	fp, r5
 8022074:	461c      	mov	r4, r3
 8022076:	f04f 0900 	mov.w	r9, #0
 802207a:	2600      	movs	r6, #0
 802207c:	2700      	movs	r7, #0
 802207e:	9b06      	ldr	r3, [sp, #24]
 8022080:	4599      	cmp	r9, r3
 8022082:	dd06      	ble.n	8022092 <__kernel_rem_pio2+0x3da>
 8022084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022086:	e8e3 6702 	strd	r6, r7, [r3], #8
 802208a:	f108 0801 	add.w	r8, r8, #1
 802208e:	930a      	str	r3, [sp, #40]	; 0x28
 8022090:	e7df      	b.n	8022052 <__kernel_rem_pio2+0x39a>
 8022092:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8022096:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 802209a:	f7de faad 	bl	80005f8 <__aeabi_dmul>
 802209e:	4602      	mov	r2, r0
 80220a0:	460b      	mov	r3, r1
 80220a2:	4630      	mov	r0, r6
 80220a4:	4639      	mov	r1, r7
 80220a6:	f7de f8f1 	bl	800028c <__adddf3>
 80220aa:	f109 0901 	add.w	r9, r9, #1
 80220ae:	4606      	mov	r6, r0
 80220b0:	460f      	mov	r7, r1
 80220b2:	e7e4      	b.n	802207e <__kernel_rem_pio2+0x3c6>
 80220b4:	3d01      	subs	r5, #1
 80220b6:	e748      	b.n	8021f4a <__kernel_rem_pio2+0x292>
 80220b8:	ec47 6b10 	vmov	d0, r6, r7
 80220bc:	f1ca 0000 	rsb	r0, sl, #0
 80220c0:	f000 fa46 	bl	8022550 <scalbn>
 80220c4:	ec57 6b10 	vmov	r6, r7, d0
 80220c8:	4ba0      	ldr	r3, [pc, #640]	; (802234c <__kernel_rem_pio2+0x694>)
 80220ca:	ee10 0a10 	vmov	r0, s0
 80220ce:	2200      	movs	r2, #0
 80220d0:	4639      	mov	r1, r7
 80220d2:	f7de fd17 	bl	8000b04 <__aeabi_dcmpge>
 80220d6:	b1f8      	cbz	r0, 8022118 <__kernel_rem_pio2+0x460>
 80220d8:	4b9d      	ldr	r3, [pc, #628]	; (8022350 <__kernel_rem_pio2+0x698>)
 80220da:	2200      	movs	r2, #0
 80220dc:	4630      	mov	r0, r6
 80220de:	4639      	mov	r1, r7
 80220e0:	f7de fa8a 	bl	80005f8 <__aeabi_dmul>
 80220e4:	f7de fd38 	bl	8000b58 <__aeabi_d2iz>
 80220e8:	4680      	mov	r8, r0
 80220ea:	f7de fa1b 	bl	8000524 <__aeabi_i2d>
 80220ee:	4b97      	ldr	r3, [pc, #604]	; (802234c <__kernel_rem_pio2+0x694>)
 80220f0:	2200      	movs	r2, #0
 80220f2:	f7de fa81 	bl	80005f8 <__aeabi_dmul>
 80220f6:	460b      	mov	r3, r1
 80220f8:	4602      	mov	r2, r0
 80220fa:	4639      	mov	r1, r7
 80220fc:	4630      	mov	r0, r6
 80220fe:	f7de f8c3 	bl	8000288 <__aeabi_dsub>
 8022102:	f7de fd29 	bl	8000b58 <__aeabi_d2iz>
 8022106:	1c65      	adds	r5, r4, #1
 8022108:	ab0e      	add	r3, sp, #56	; 0x38
 802210a:	f10a 0a18 	add.w	sl, sl, #24
 802210e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022112:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8022116:	e720      	b.n	8021f5a <__kernel_rem_pio2+0x2a2>
 8022118:	4630      	mov	r0, r6
 802211a:	4639      	mov	r1, r7
 802211c:	f7de fd1c 	bl	8000b58 <__aeabi_d2iz>
 8022120:	ab0e      	add	r3, sp, #56	; 0x38
 8022122:	4625      	mov	r5, r4
 8022124:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022128:	e717      	b.n	8021f5a <__kernel_rem_pio2+0x2a2>
 802212a:	ab0e      	add	r3, sp, #56	; 0x38
 802212c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8022130:	f7de f9f8 	bl	8000524 <__aeabi_i2d>
 8022134:	4632      	mov	r2, r6
 8022136:	463b      	mov	r3, r7
 8022138:	f7de fa5e 	bl	80005f8 <__aeabi_dmul>
 802213c:	4b84      	ldr	r3, [pc, #528]	; (8022350 <__kernel_rem_pio2+0x698>)
 802213e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8022142:	2200      	movs	r2, #0
 8022144:	4630      	mov	r0, r6
 8022146:	4639      	mov	r1, r7
 8022148:	f7de fa56 	bl	80005f8 <__aeabi_dmul>
 802214c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8022150:	4606      	mov	r6, r0
 8022152:	460f      	mov	r7, r1
 8022154:	e70f      	b.n	8021f76 <__kernel_rem_pio2+0x2be>
 8022156:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802215a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802215e:	f7de fa4b 	bl	80005f8 <__aeabi_dmul>
 8022162:	4602      	mov	r2, r0
 8022164:	460b      	mov	r3, r1
 8022166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802216a:	f7de f88f 	bl	800028c <__adddf3>
 802216e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022172:	f108 0801 	add.w	r8, r8, #1
 8022176:	9b02      	ldr	r3, [sp, #8]
 8022178:	4598      	cmp	r8, r3
 802217a:	dc01      	bgt.n	8022180 <__kernel_rem_pio2+0x4c8>
 802217c:	45b8      	cmp	r8, r7
 802217e:	ddea      	ble.n	8022156 <__kernel_rem_pio2+0x49e>
 8022180:	ed9d 7b06 	vldr	d7, [sp, #24]
 8022184:	ab4a      	add	r3, sp, #296	; 0x128
 8022186:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802218a:	ed87 7b00 	vstr	d7, [r7]
 802218e:	3e01      	subs	r6, #1
 8022190:	e6f8      	b.n	8021f84 <__kernel_rem_pio2+0x2cc>
 8022192:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8022194:	2b02      	cmp	r3, #2
 8022196:	dc0b      	bgt.n	80221b0 <__kernel_rem_pio2+0x4f8>
 8022198:	2b00      	cmp	r3, #0
 802219a:	dc35      	bgt.n	8022208 <__kernel_rem_pio2+0x550>
 802219c:	d059      	beq.n	8022252 <__kernel_rem_pio2+0x59a>
 802219e:	9b04      	ldr	r3, [sp, #16]
 80221a0:	f003 0007 	and.w	r0, r3, #7
 80221a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80221a8:	ecbd 8b02 	vpop	{d8}
 80221ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80221b2:	2b03      	cmp	r3, #3
 80221b4:	d1f3      	bne.n	802219e <__kernel_rem_pio2+0x4e6>
 80221b6:	ab4a      	add	r3, sp, #296	; 0x128
 80221b8:	4423      	add	r3, r4
 80221ba:	9306      	str	r3, [sp, #24]
 80221bc:	461c      	mov	r4, r3
 80221be:	469a      	mov	sl, r3
 80221c0:	9502      	str	r5, [sp, #8]
 80221c2:	9b02      	ldr	r3, [sp, #8]
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	f1aa 0a08 	sub.w	sl, sl, #8
 80221ca:	dc6b      	bgt.n	80222a4 <__kernel_rem_pio2+0x5ec>
 80221cc:	46aa      	mov	sl, r5
 80221ce:	f1ba 0f01 	cmp.w	sl, #1
 80221d2:	f1a4 0408 	sub.w	r4, r4, #8
 80221d6:	f300 8085 	bgt.w	80222e4 <__kernel_rem_pio2+0x62c>
 80221da:	9c06      	ldr	r4, [sp, #24]
 80221dc:	2000      	movs	r0, #0
 80221de:	3408      	adds	r4, #8
 80221e0:	2100      	movs	r1, #0
 80221e2:	2d01      	cmp	r5, #1
 80221e4:	f300 809d 	bgt.w	8022322 <__kernel_rem_pio2+0x66a>
 80221e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80221ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80221f0:	f1bb 0f00 	cmp.w	fp, #0
 80221f4:	f040 809b 	bne.w	802232e <__kernel_rem_pio2+0x676>
 80221f8:	9b01      	ldr	r3, [sp, #4]
 80221fa:	e9c3 5600 	strd	r5, r6, [r3]
 80221fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8022202:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8022206:	e7ca      	b.n	802219e <__kernel_rem_pio2+0x4e6>
 8022208:	3408      	adds	r4, #8
 802220a:	ab4a      	add	r3, sp, #296	; 0x128
 802220c:	441c      	add	r4, r3
 802220e:	462e      	mov	r6, r5
 8022210:	2000      	movs	r0, #0
 8022212:	2100      	movs	r1, #0
 8022214:	2e00      	cmp	r6, #0
 8022216:	da36      	bge.n	8022286 <__kernel_rem_pio2+0x5ce>
 8022218:	f1bb 0f00 	cmp.w	fp, #0
 802221c:	d039      	beq.n	8022292 <__kernel_rem_pio2+0x5da>
 802221e:	4602      	mov	r2, r0
 8022220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022224:	9c01      	ldr	r4, [sp, #4]
 8022226:	e9c4 2300 	strd	r2, r3, [r4]
 802222a:	4602      	mov	r2, r0
 802222c:	460b      	mov	r3, r1
 802222e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8022232:	f7de f829 	bl	8000288 <__aeabi_dsub>
 8022236:	ae4c      	add	r6, sp, #304	; 0x130
 8022238:	2401      	movs	r4, #1
 802223a:	42a5      	cmp	r5, r4
 802223c:	da2c      	bge.n	8022298 <__kernel_rem_pio2+0x5e0>
 802223e:	f1bb 0f00 	cmp.w	fp, #0
 8022242:	d002      	beq.n	802224a <__kernel_rem_pio2+0x592>
 8022244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022248:	4619      	mov	r1, r3
 802224a:	9b01      	ldr	r3, [sp, #4]
 802224c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8022250:	e7a5      	b.n	802219e <__kernel_rem_pio2+0x4e6>
 8022252:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8022256:	eb0d 0403 	add.w	r4, sp, r3
 802225a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802225e:	2000      	movs	r0, #0
 8022260:	2100      	movs	r1, #0
 8022262:	2d00      	cmp	r5, #0
 8022264:	da09      	bge.n	802227a <__kernel_rem_pio2+0x5c2>
 8022266:	f1bb 0f00 	cmp.w	fp, #0
 802226a:	d002      	beq.n	8022272 <__kernel_rem_pio2+0x5ba>
 802226c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022270:	4619      	mov	r1, r3
 8022272:	9b01      	ldr	r3, [sp, #4]
 8022274:	e9c3 0100 	strd	r0, r1, [r3]
 8022278:	e791      	b.n	802219e <__kernel_rem_pio2+0x4e6>
 802227a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802227e:	f7de f805 	bl	800028c <__adddf3>
 8022282:	3d01      	subs	r5, #1
 8022284:	e7ed      	b.n	8022262 <__kernel_rem_pio2+0x5aa>
 8022286:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802228a:	f7dd ffff 	bl	800028c <__adddf3>
 802228e:	3e01      	subs	r6, #1
 8022290:	e7c0      	b.n	8022214 <__kernel_rem_pio2+0x55c>
 8022292:	4602      	mov	r2, r0
 8022294:	460b      	mov	r3, r1
 8022296:	e7c5      	b.n	8022224 <__kernel_rem_pio2+0x56c>
 8022298:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802229c:	f7dd fff6 	bl	800028c <__adddf3>
 80222a0:	3401      	adds	r4, #1
 80222a2:	e7ca      	b.n	802223a <__kernel_rem_pio2+0x582>
 80222a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80222a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80222ac:	9b02      	ldr	r3, [sp, #8]
 80222ae:	3b01      	subs	r3, #1
 80222b0:	9302      	str	r3, [sp, #8]
 80222b2:	4632      	mov	r2, r6
 80222b4:	463b      	mov	r3, r7
 80222b6:	4640      	mov	r0, r8
 80222b8:	4649      	mov	r1, r9
 80222ba:	f7dd ffe7 	bl	800028c <__adddf3>
 80222be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80222c2:	4602      	mov	r2, r0
 80222c4:	460b      	mov	r3, r1
 80222c6:	4640      	mov	r0, r8
 80222c8:	4649      	mov	r1, r9
 80222ca:	f7dd ffdd 	bl	8000288 <__aeabi_dsub>
 80222ce:	4632      	mov	r2, r6
 80222d0:	463b      	mov	r3, r7
 80222d2:	f7dd ffdb 	bl	800028c <__adddf3>
 80222d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80222da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80222de:	ed8a 7b00 	vstr	d7, [sl]
 80222e2:	e76e      	b.n	80221c2 <__kernel_rem_pio2+0x50a>
 80222e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80222e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80222ec:	4640      	mov	r0, r8
 80222ee:	4632      	mov	r2, r6
 80222f0:	463b      	mov	r3, r7
 80222f2:	4649      	mov	r1, r9
 80222f4:	f7dd ffca 	bl	800028c <__adddf3>
 80222f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80222fc:	4602      	mov	r2, r0
 80222fe:	460b      	mov	r3, r1
 8022300:	4640      	mov	r0, r8
 8022302:	4649      	mov	r1, r9
 8022304:	f7dd ffc0 	bl	8000288 <__aeabi_dsub>
 8022308:	4632      	mov	r2, r6
 802230a:	463b      	mov	r3, r7
 802230c:	f7dd ffbe 	bl	800028c <__adddf3>
 8022310:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022314:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022318:	ed84 7b00 	vstr	d7, [r4]
 802231c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8022320:	e755      	b.n	80221ce <__kernel_rem_pio2+0x516>
 8022322:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022326:	f7dd ffb1 	bl	800028c <__adddf3>
 802232a:	3d01      	subs	r5, #1
 802232c:	e759      	b.n	80221e2 <__kernel_rem_pio2+0x52a>
 802232e:	9b01      	ldr	r3, [sp, #4]
 8022330:	9a01      	ldr	r2, [sp, #4]
 8022332:	601d      	str	r5, [r3, #0]
 8022334:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8022338:	605c      	str	r4, [r3, #4]
 802233a:	609f      	str	r7, [r3, #8]
 802233c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8022340:	60d3      	str	r3, [r2, #12]
 8022342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022346:	6110      	str	r0, [r2, #16]
 8022348:	6153      	str	r3, [r2, #20]
 802234a:	e728      	b.n	802219e <__kernel_rem_pio2+0x4e6>
 802234c:	41700000 	.word	0x41700000
 8022350:	3e700000 	.word	0x3e700000
 8022354:	00000000 	.word	0x00000000

08022358 <__kernel_sin>:
 8022358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802235c:	ed2d 8b04 	vpush	{d8-d9}
 8022360:	eeb0 8a41 	vmov.f32	s16, s2
 8022364:	eef0 8a61 	vmov.f32	s17, s3
 8022368:	ec55 4b10 	vmov	r4, r5, d0
 802236c:	b083      	sub	sp, #12
 802236e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022372:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8022376:	9001      	str	r0, [sp, #4]
 8022378:	da06      	bge.n	8022388 <__kernel_sin+0x30>
 802237a:	ee10 0a10 	vmov	r0, s0
 802237e:	4629      	mov	r1, r5
 8022380:	f7de fbea 	bl	8000b58 <__aeabi_d2iz>
 8022384:	2800      	cmp	r0, #0
 8022386:	d051      	beq.n	802242c <__kernel_sin+0xd4>
 8022388:	4622      	mov	r2, r4
 802238a:	462b      	mov	r3, r5
 802238c:	4620      	mov	r0, r4
 802238e:	4629      	mov	r1, r5
 8022390:	f7de f932 	bl	80005f8 <__aeabi_dmul>
 8022394:	4682      	mov	sl, r0
 8022396:	468b      	mov	fp, r1
 8022398:	4602      	mov	r2, r0
 802239a:	460b      	mov	r3, r1
 802239c:	4620      	mov	r0, r4
 802239e:	4629      	mov	r1, r5
 80223a0:	f7de f92a 	bl	80005f8 <__aeabi_dmul>
 80223a4:	a341      	add	r3, pc, #260	; (adr r3, 80224ac <__kernel_sin+0x154>)
 80223a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223aa:	4680      	mov	r8, r0
 80223ac:	4689      	mov	r9, r1
 80223ae:	4650      	mov	r0, sl
 80223b0:	4659      	mov	r1, fp
 80223b2:	f7de f921 	bl	80005f8 <__aeabi_dmul>
 80223b6:	a33f      	add	r3, pc, #252	; (adr r3, 80224b4 <__kernel_sin+0x15c>)
 80223b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223bc:	f7dd ff64 	bl	8000288 <__aeabi_dsub>
 80223c0:	4652      	mov	r2, sl
 80223c2:	465b      	mov	r3, fp
 80223c4:	f7de f918 	bl	80005f8 <__aeabi_dmul>
 80223c8:	a33c      	add	r3, pc, #240	; (adr r3, 80224bc <__kernel_sin+0x164>)
 80223ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223ce:	f7dd ff5d 	bl	800028c <__adddf3>
 80223d2:	4652      	mov	r2, sl
 80223d4:	465b      	mov	r3, fp
 80223d6:	f7de f90f 	bl	80005f8 <__aeabi_dmul>
 80223da:	a33a      	add	r3, pc, #232	; (adr r3, 80224c4 <__kernel_sin+0x16c>)
 80223dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223e0:	f7dd ff52 	bl	8000288 <__aeabi_dsub>
 80223e4:	4652      	mov	r2, sl
 80223e6:	465b      	mov	r3, fp
 80223e8:	f7de f906 	bl	80005f8 <__aeabi_dmul>
 80223ec:	a337      	add	r3, pc, #220	; (adr r3, 80224cc <__kernel_sin+0x174>)
 80223ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223f2:	f7dd ff4b 	bl	800028c <__adddf3>
 80223f6:	9b01      	ldr	r3, [sp, #4]
 80223f8:	4606      	mov	r6, r0
 80223fa:	460f      	mov	r7, r1
 80223fc:	b9eb      	cbnz	r3, 802243a <__kernel_sin+0xe2>
 80223fe:	4602      	mov	r2, r0
 8022400:	460b      	mov	r3, r1
 8022402:	4650      	mov	r0, sl
 8022404:	4659      	mov	r1, fp
 8022406:	f7de f8f7 	bl	80005f8 <__aeabi_dmul>
 802240a:	a325      	add	r3, pc, #148	; (adr r3, 80224a0 <__kernel_sin+0x148>)
 802240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022410:	f7dd ff3a 	bl	8000288 <__aeabi_dsub>
 8022414:	4642      	mov	r2, r8
 8022416:	464b      	mov	r3, r9
 8022418:	f7de f8ee 	bl	80005f8 <__aeabi_dmul>
 802241c:	4602      	mov	r2, r0
 802241e:	460b      	mov	r3, r1
 8022420:	4620      	mov	r0, r4
 8022422:	4629      	mov	r1, r5
 8022424:	f7dd ff32 	bl	800028c <__adddf3>
 8022428:	4604      	mov	r4, r0
 802242a:	460d      	mov	r5, r1
 802242c:	ec45 4b10 	vmov	d0, r4, r5
 8022430:	b003      	add	sp, #12
 8022432:	ecbd 8b04 	vpop	{d8-d9}
 8022436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802243a:	4b1b      	ldr	r3, [pc, #108]	; (80224a8 <__kernel_sin+0x150>)
 802243c:	ec51 0b18 	vmov	r0, r1, d8
 8022440:	2200      	movs	r2, #0
 8022442:	f7de f8d9 	bl	80005f8 <__aeabi_dmul>
 8022446:	4632      	mov	r2, r6
 8022448:	ec41 0b19 	vmov	d9, r0, r1
 802244c:	463b      	mov	r3, r7
 802244e:	4640      	mov	r0, r8
 8022450:	4649      	mov	r1, r9
 8022452:	f7de f8d1 	bl	80005f8 <__aeabi_dmul>
 8022456:	4602      	mov	r2, r0
 8022458:	460b      	mov	r3, r1
 802245a:	ec51 0b19 	vmov	r0, r1, d9
 802245e:	f7dd ff13 	bl	8000288 <__aeabi_dsub>
 8022462:	4652      	mov	r2, sl
 8022464:	465b      	mov	r3, fp
 8022466:	f7de f8c7 	bl	80005f8 <__aeabi_dmul>
 802246a:	ec53 2b18 	vmov	r2, r3, d8
 802246e:	f7dd ff0b 	bl	8000288 <__aeabi_dsub>
 8022472:	a30b      	add	r3, pc, #44	; (adr r3, 80224a0 <__kernel_sin+0x148>)
 8022474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022478:	4606      	mov	r6, r0
 802247a:	460f      	mov	r7, r1
 802247c:	4640      	mov	r0, r8
 802247e:	4649      	mov	r1, r9
 8022480:	f7de f8ba 	bl	80005f8 <__aeabi_dmul>
 8022484:	4602      	mov	r2, r0
 8022486:	460b      	mov	r3, r1
 8022488:	4630      	mov	r0, r6
 802248a:	4639      	mov	r1, r7
 802248c:	f7dd fefe 	bl	800028c <__adddf3>
 8022490:	4602      	mov	r2, r0
 8022492:	460b      	mov	r3, r1
 8022494:	4620      	mov	r0, r4
 8022496:	4629      	mov	r1, r5
 8022498:	f7dd fef6 	bl	8000288 <__aeabi_dsub>
 802249c:	e7c4      	b.n	8022428 <__kernel_sin+0xd0>
 802249e:	bf00      	nop
 80224a0:	55555549 	.word	0x55555549
 80224a4:	3fc55555 	.word	0x3fc55555
 80224a8:	3fe00000 	.word	0x3fe00000
 80224ac:	5acfd57c 	.word	0x5acfd57c
 80224b0:	3de5d93a 	.word	0x3de5d93a
 80224b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80224b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80224bc:	57b1fe7d 	.word	0x57b1fe7d
 80224c0:	3ec71de3 	.word	0x3ec71de3
 80224c4:	19c161d5 	.word	0x19c161d5
 80224c8:	3f2a01a0 	.word	0x3f2a01a0
 80224cc:	1110f8a6 	.word	0x1110f8a6
 80224d0:	3f811111 	.word	0x3f811111

080224d4 <with_errno>:
 80224d4:	b570      	push	{r4, r5, r6, lr}
 80224d6:	4604      	mov	r4, r0
 80224d8:	460d      	mov	r5, r1
 80224da:	4616      	mov	r6, r2
 80224dc:	f7fb fdea 	bl	801e0b4 <__errno>
 80224e0:	4629      	mov	r1, r5
 80224e2:	6006      	str	r6, [r0, #0]
 80224e4:	4620      	mov	r0, r4
 80224e6:	bd70      	pop	{r4, r5, r6, pc}

080224e8 <xflow>:
 80224e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80224ea:	4614      	mov	r4, r2
 80224ec:	461d      	mov	r5, r3
 80224ee:	b108      	cbz	r0, 80224f4 <xflow+0xc>
 80224f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80224f4:	e9cd 2300 	strd	r2, r3, [sp]
 80224f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80224fc:	4620      	mov	r0, r4
 80224fe:	4629      	mov	r1, r5
 8022500:	f7de f87a 	bl	80005f8 <__aeabi_dmul>
 8022504:	2222      	movs	r2, #34	; 0x22
 8022506:	b003      	add	sp, #12
 8022508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802250c:	f7ff bfe2 	b.w	80224d4 <with_errno>

08022510 <__math_uflow>:
 8022510:	b508      	push	{r3, lr}
 8022512:	2200      	movs	r2, #0
 8022514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8022518:	f7ff ffe6 	bl	80224e8 <xflow>
 802251c:	ec41 0b10 	vmov	d0, r0, r1
 8022520:	bd08      	pop	{r3, pc}

08022522 <__math_oflow>:
 8022522:	b508      	push	{r3, lr}
 8022524:	2200      	movs	r2, #0
 8022526:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802252a:	f7ff ffdd 	bl	80224e8 <xflow>
 802252e:	ec41 0b10 	vmov	d0, r0, r1
 8022532:	bd08      	pop	{r3, pc}

08022534 <finite>:
 8022534:	b082      	sub	sp, #8
 8022536:	ed8d 0b00 	vstr	d0, [sp]
 802253a:	9801      	ldr	r0, [sp, #4]
 802253c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8022540:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8022544:	0fc0      	lsrs	r0, r0, #31
 8022546:	b002      	add	sp, #8
 8022548:	4770      	bx	lr
 802254a:	0000      	movs	r0, r0
 802254c:	0000      	movs	r0, r0
	...

08022550 <scalbn>:
 8022550:	b570      	push	{r4, r5, r6, lr}
 8022552:	ec55 4b10 	vmov	r4, r5, d0
 8022556:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802255a:	4606      	mov	r6, r0
 802255c:	462b      	mov	r3, r5
 802255e:	b99a      	cbnz	r2, 8022588 <scalbn+0x38>
 8022560:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022564:	4323      	orrs	r3, r4
 8022566:	d036      	beq.n	80225d6 <scalbn+0x86>
 8022568:	4b39      	ldr	r3, [pc, #228]	; (8022650 <scalbn+0x100>)
 802256a:	4629      	mov	r1, r5
 802256c:	ee10 0a10 	vmov	r0, s0
 8022570:	2200      	movs	r2, #0
 8022572:	f7de f841 	bl	80005f8 <__aeabi_dmul>
 8022576:	4b37      	ldr	r3, [pc, #220]	; (8022654 <scalbn+0x104>)
 8022578:	429e      	cmp	r6, r3
 802257a:	4604      	mov	r4, r0
 802257c:	460d      	mov	r5, r1
 802257e:	da10      	bge.n	80225a2 <scalbn+0x52>
 8022580:	a32b      	add	r3, pc, #172	; (adr r3, 8022630 <scalbn+0xe0>)
 8022582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022586:	e03a      	b.n	80225fe <scalbn+0xae>
 8022588:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802258c:	428a      	cmp	r2, r1
 802258e:	d10c      	bne.n	80225aa <scalbn+0x5a>
 8022590:	ee10 2a10 	vmov	r2, s0
 8022594:	4620      	mov	r0, r4
 8022596:	4629      	mov	r1, r5
 8022598:	f7dd fe78 	bl	800028c <__adddf3>
 802259c:	4604      	mov	r4, r0
 802259e:	460d      	mov	r5, r1
 80225a0:	e019      	b.n	80225d6 <scalbn+0x86>
 80225a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80225a6:	460b      	mov	r3, r1
 80225a8:	3a36      	subs	r2, #54	; 0x36
 80225aa:	4432      	add	r2, r6
 80225ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80225b0:	428a      	cmp	r2, r1
 80225b2:	dd08      	ble.n	80225c6 <scalbn+0x76>
 80225b4:	2d00      	cmp	r5, #0
 80225b6:	a120      	add	r1, pc, #128	; (adr r1, 8022638 <scalbn+0xe8>)
 80225b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80225bc:	da1c      	bge.n	80225f8 <scalbn+0xa8>
 80225be:	a120      	add	r1, pc, #128	; (adr r1, 8022640 <scalbn+0xf0>)
 80225c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80225c4:	e018      	b.n	80225f8 <scalbn+0xa8>
 80225c6:	2a00      	cmp	r2, #0
 80225c8:	dd08      	ble.n	80225dc <scalbn+0x8c>
 80225ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80225ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80225d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80225d6:	ec45 4b10 	vmov	d0, r4, r5
 80225da:	bd70      	pop	{r4, r5, r6, pc}
 80225dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80225e0:	da19      	bge.n	8022616 <scalbn+0xc6>
 80225e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80225e6:	429e      	cmp	r6, r3
 80225e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80225ec:	dd0a      	ble.n	8022604 <scalbn+0xb4>
 80225ee:	a112      	add	r1, pc, #72	; (adr r1, 8022638 <scalbn+0xe8>)
 80225f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	d1e2      	bne.n	80225be <scalbn+0x6e>
 80225f8:	a30f      	add	r3, pc, #60	; (adr r3, 8022638 <scalbn+0xe8>)
 80225fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225fe:	f7dd fffb 	bl	80005f8 <__aeabi_dmul>
 8022602:	e7cb      	b.n	802259c <scalbn+0x4c>
 8022604:	a10a      	add	r1, pc, #40	; (adr r1, 8022630 <scalbn+0xe0>)
 8022606:	e9d1 0100 	ldrd	r0, r1, [r1]
 802260a:	2b00      	cmp	r3, #0
 802260c:	d0b8      	beq.n	8022580 <scalbn+0x30>
 802260e:	a10e      	add	r1, pc, #56	; (adr r1, 8022648 <scalbn+0xf8>)
 8022610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022614:	e7b4      	b.n	8022580 <scalbn+0x30>
 8022616:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802261a:	3236      	adds	r2, #54	; 0x36
 802261c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022620:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8022624:	4620      	mov	r0, r4
 8022626:	4b0c      	ldr	r3, [pc, #48]	; (8022658 <scalbn+0x108>)
 8022628:	2200      	movs	r2, #0
 802262a:	e7e8      	b.n	80225fe <scalbn+0xae>
 802262c:	f3af 8000 	nop.w
 8022630:	c2f8f359 	.word	0xc2f8f359
 8022634:	01a56e1f 	.word	0x01a56e1f
 8022638:	8800759c 	.word	0x8800759c
 802263c:	7e37e43c 	.word	0x7e37e43c
 8022640:	8800759c 	.word	0x8800759c
 8022644:	fe37e43c 	.word	0xfe37e43c
 8022648:	c2f8f359 	.word	0xc2f8f359
 802264c:	81a56e1f 	.word	0x81a56e1f
 8022650:	43500000 	.word	0x43500000
 8022654:	ffff3cb0 	.word	0xffff3cb0
 8022658:	3c900000 	.word	0x3c900000

0802265c <_close>:
 802265c:	4b02      	ldr	r3, [pc, #8]	; (8022668 <_close+0xc>)
 802265e:	2258      	movs	r2, #88	; 0x58
 8022660:	601a      	str	r2, [r3, #0]
 8022662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022666:	4770      	bx	lr
 8022668:	2000f198 	.word	0x2000f198

0802266c <_fstat>:
 802266c:	4b02      	ldr	r3, [pc, #8]	; (8022678 <_fstat+0xc>)
 802266e:	2258      	movs	r2, #88	; 0x58
 8022670:	601a      	str	r2, [r3, #0]
 8022672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022676:	4770      	bx	lr
 8022678:	2000f198 	.word	0x2000f198

0802267c <_getpid>:
 802267c:	4b02      	ldr	r3, [pc, #8]	; (8022688 <_getpid+0xc>)
 802267e:	2258      	movs	r2, #88	; 0x58
 8022680:	601a      	str	r2, [r3, #0]
 8022682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022686:	4770      	bx	lr
 8022688:	2000f198 	.word	0x2000f198

0802268c <_isatty>:
 802268c:	4b02      	ldr	r3, [pc, #8]	; (8022698 <_isatty+0xc>)
 802268e:	2258      	movs	r2, #88	; 0x58
 8022690:	601a      	str	r2, [r3, #0]
 8022692:	2000      	movs	r0, #0
 8022694:	4770      	bx	lr
 8022696:	bf00      	nop
 8022698:	2000f198 	.word	0x2000f198

0802269c <_kill>:
 802269c:	4b02      	ldr	r3, [pc, #8]	; (80226a8 <_kill+0xc>)
 802269e:	2258      	movs	r2, #88	; 0x58
 80226a0:	601a      	str	r2, [r3, #0]
 80226a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80226a6:	4770      	bx	lr
 80226a8:	2000f198 	.word	0x2000f198

080226ac <_lseek>:
 80226ac:	4b02      	ldr	r3, [pc, #8]	; (80226b8 <_lseek+0xc>)
 80226ae:	2258      	movs	r2, #88	; 0x58
 80226b0:	601a      	str	r2, [r3, #0]
 80226b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80226b6:	4770      	bx	lr
 80226b8:	2000f198 	.word	0x2000f198

080226bc <_read>:
 80226bc:	4b02      	ldr	r3, [pc, #8]	; (80226c8 <_read+0xc>)
 80226be:	2258      	movs	r2, #88	; 0x58
 80226c0:	601a      	str	r2, [r3, #0]
 80226c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80226c6:	4770      	bx	lr
 80226c8:	2000f198 	.word	0x2000f198

080226cc <_sbrk>:
 80226cc:	4a04      	ldr	r2, [pc, #16]	; (80226e0 <_sbrk+0x14>)
 80226ce:	6811      	ldr	r1, [r2, #0]
 80226d0:	4603      	mov	r3, r0
 80226d2:	b909      	cbnz	r1, 80226d8 <_sbrk+0xc>
 80226d4:	4903      	ldr	r1, [pc, #12]	; (80226e4 <_sbrk+0x18>)
 80226d6:	6011      	str	r1, [r2, #0]
 80226d8:	6810      	ldr	r0, [r2, #0]
 80226da:	4403      	add	r3, r0
 80226dc:	6013      	str	r3, [r2, #0]
 80226de:	4770      	bx	lr
 80226e0:	2000f19c 	.word	0x2000f19c
 80226e4:	2000f1a0 	.word	0x2000f1a0

080226e8 <_write>:
 80226e8:	4b02      	ldr	r3, [pc, #8]	; (80226f4 <_write+0xc>)
 80226ea:	2258      	movs	r2, #88	; 0x58
 80226ec:	601a      	str	r2, [r3, #0]
 80226ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80226f2:	4770      	bx	lr
 80226f4:	2000f198 	.word	0x2000f198

080226f8 <_exit>:
 80226f8:	e7fe      	b.n	80226f8 <_exit>
	...

080226fc <_init>:
 80226fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226fe:	bf00      	nop
 8022700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022702:	bc08      	pop	{r3}
 8022704:	469e      	mov	lr, r3
 8022706:	4770      	bx	lr

08022708 <_fini>:
 8022708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802270a:	bf00      	nop
 802270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802270e:	bc08      	pop	{r3}
 8022710:	469e      	mov	lr, r3
 8022712:	4770      	bx	lr
