
balancing_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000241c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  08024358  08024358  00025358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025150  08025150  00027808  2**0
                  CONTENTS
  4 .ARM          00000008  08025150  08025150  00026150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025158  08025158  00027808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08025158  08025158  00026158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025160  08025160  00026160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000808  20000000  08025164  00027000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce74  20000808  0802596c  00027808  2**3
                  ALLOC
 10 ._user_heap_stack 0000d004  2000d67c  0802596c  0002867c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027808  2**0
                  CONTENTS, READONLY
 12 .debug_info   000411b5  00000000  00000000  00027838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b5d9  00000000  00000000  000689ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002fe8  00000000  00000000  00073fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002460  00000000  00000000  00076fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b66f  00000000  00000000  00079410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000540f2  00000000  00000000  000b4a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001034c1  00000000  00000000  00108b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020c032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d778  00000000  00000000  0020c078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  002197f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000808 	.word	0x20000808
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08024340 	.word	0x08024340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000080c 	.word	0x2000080c
 80001cc:	08024340 	.word	0x08024340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <get_CRC8_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      ucCRC8:��ʼCRC8
  * @retval         �������CRC8
  */
uint8_t get_CRC8_check_sum(unsigned char *pch_message,unsigned int dw_length,unsigned char ucCRC8)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	71fb      	strb	r3, [r7, #7]
    unsigned char uc_index;
    while (dw_length--)
 8000f86:	e00a      	b.n	8000f9e <get_CRC8_check_sum+0x26>
    {
        uc_index = ucCRC8^(*pch_message++);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60fa      	str	r2, [r7, #12]
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4053      	eors	r3, r2
 8000f94:	75fb      	strb	r3, [r7, #23]
        ucCRC8 = CRC8_table[uc_index];
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <get_CRC8_check_sum+0x40>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	71fb      	strb	r3, [r7, #7]
    while (dw_length--)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60ba      	str	r2, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ef      	bne.n	8000f88 <get_CRC8_check_sum+0x10>
    }
    return(ucCRC8);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	0802453c 	.word	0x0802453c

08000fbc <verify_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
    unsigned char ucExpected = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <verify_CRC8_check_sum+0x1a>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d801      	bhi.n	8000fda <verify_CRC8_check_sum+0x1e>
    {
        return 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e013      	b.n	8001002 <verify_CRC8_check_sum+0x46>
    }
    ucExpected = get_CRC8_check_sum (pch_message, dw_length - 1, CRC8_INIT);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	22ff      	movs	r2, #255	@ 0xff
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffc8 	bl	8000f78 <get_CRC8_check_sum>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
    return ( ucExpected == pch_message[dw_length - 1] );
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <append_CRC8_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC8_check_sum(unsigned char *pch_message, unsigned int dw_length)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
    unsigned char ucCRC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
    if ((pch_message == 0) || (dw_length <= 2))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d012      	beq.n	8001044 <append_CRC8_check_sum+0x3a>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d90f      	bls.n	8001044 <append_CRC8_check_sum+0x3a>
    {
        return;
    }
    ucCRC = get_CRC8_check_sum((unsigned char *)pch_message, dw_length - 1, CRC8_INIT);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	22ff      	movs	r2, #255	@ 0xff
 800102a:	4619      	mov	r1, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffa3 	bl	8000f78 <get_CRC8_check_sum>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
    pch_message[dw_length - 1] = ucCRC;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e000      	b.n	8001046 <append_CRC8_check_sum+0x3c>
        return;
 8001044:	bf00      	nop
}
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <get_CRC16_check_sum>:
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @param[in]      wCRC:��ʼCRC16
  * @retval         �������CRC16
  */
uint16_t get_CRC16_check_sum(uint8_t *pch_message,uint32_t dw_length,uint16_t wCRC)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pch_message == NULL)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d113      	bne.n	8001088 <get_CRC16_check_sum+0x3c>
    {
        return 0xFFFF;
 8001060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001064:	e016      	b.n	8001094 <get_CRC16_check_sum+0x48>
    }
    while(dw_length--)
    {
        chData = *pch_message++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60fa      	str	r2, [r7, #12]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29a      	uxth	r2, r3
 8001076:	88f9      	ldrh	r1, [r7, #6]
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	404b      	eors	r3, r1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <get_CRC16_check_sum+0x54>)
 8001080:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001084:	4053      	eors	r3, r2
 8001086:	80fb      	strh	r3, [r7, #6]
    while(dw_length--)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1e9      	bne.n	8001066 <get_CRC16_check_sum+0x1a>
    }
    return wCRC;
 8001092:	88fb      	ldrh	r3, [r7, #6]
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	0802463c 	.word	0x0802463c

080010a4 <verify_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         ����߼�
  */
uint32_t verify_CRC16_check_sum(uint8_t *pchMessage, uint32_t dwLength)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <verify_CRC16_check_sum+0x1a>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d801      	bhi.n	80010c2 <verify_CRC16_check_sum+0x1e>
    {
        return 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	e020      	b.n	8001104 <verify_CRC16_check_sum+0x60>
    }
    wExpected = get_CRC16_check_sum(pchMessage, dwLength - 2, CRC16_INIT);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	3b02      	subs	r3, #2
 80010c6:	4a11      	ldr	r2, [pc, #68]	@ (800110c <verify_CRC16_check_sum+0x68>)
 80010c8:	8812      	ldrh	r2, [r2, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffbd 	bl	800104c <get_CRC16_check_sum>
 80010d2:	4603      	mov	r3, r0
 80010d4:	81fb      	strh	r3, [r7, #14]
    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	3a02      	subs	r2, #2
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	440a      	add	r2, r1
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d10c      	bne.n	8001102 <verify_CRC16_check_sum+0x5e>
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	3a01      	subs	r2, #1
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	440a      	add	r2, r1
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <verify_CRC16_check_sum+0x5e>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <verify_CRC16_check_sum+0x60>
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000

08001110 <append_CRC16_check_sum>:
  * @param[in]      pch_message: ����
  * @param[in]      dw_length: ���ݺ�У��ĳ���
  * @retval         none
  */
void append_CRC16_check_sum(uint8_t * pchMessage,uint32_t dwLength)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	81fb      	strh	r3, [r7, #14]
    if ((pchMessage == NULL) || (dwLength <= 2))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01d      	beq.n	8001160 <append_CRC16_check_sum+0x50>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d91a      	bls.n	8001160 <append_CRC16_check_sum+0x50>
    {
        return;
    }
    wCRC = get_CRC16_check_sum ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3b02      	subs	r3, #2
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <append_CRC16_check_sum+0x58>)
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff89 	bl	800104c <get_CRC16_check_sum>
 800113a:	4603      	mov	r3, r0
 800113c:	81fb      	strh	r3, [r7, #14]
    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3b02      	subs	r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	89fa      	ldrh	r2, [r7, #14]
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b299      	uxth	r1, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e000      	b.n	8001162 <append_CRC16_check_sum+0x52>
        return;
 8001160:	bf00      	nop
}
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000

0800116c <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d104      	bne.n	8001186 <buzzer+0x1a>
	{
		htim4.Instance->CCR3 = 0;
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <buzzer+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	@ 0x3c
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
		htim4.Instance->CCR3 = 500;
	}
}
 8001184:	e00c      	b.n	80011a0 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim4, (84 * 500/freq));
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	f24a 4210 	movw	r2, #42000	@ 0xa410
 800118c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <buzzer+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	629a      	str	r2, [r3, #40]	@ 0x28
		htim4.Instance->CCR3 = 500;
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <buzzer+0x40>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20001b40 	.word	0x20001b40

080011b0 <buzzer_init>:


void buzzer_init()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80011b4:	2108      	movs	r1, #8
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <buzzer_init+0x18>)
 80011b8:	f012 fe30 	bl	8013e1c <HAL_TIM_PWM_Start>
	  htim4.Instance->CCR3 = 0;
 80011bc:	4b02      	ldr	r3, [pc, #8]	@ (80011c8 <buzzer_init+0x18>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2200      	movs	r2, #0
 80011c2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20001b40 	.word	0x20001b40

080011cc <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f005 facf 	bl	8006778 <can_ISR>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f005 fac4 	bl	8006778 <can_ISR>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	2100      	movs	r1, #0
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f00d f901 	bl	800e412 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	2101      	movs	r1, #1
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f00d f8f0 	bl	800e412 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2228      	movs	r2, #40	@ 0x28
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f01c fa5e 	bl	801d712 <memset>
    can_filter_st.FilterActivation = ENABLE;
 8001256:	2301      	movs	r3, #1
 8001258:	633b      	str	r3, [r7, #48]	@ 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800125e:	2301      	movs	r3, #1
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	b29b      	uxth	r3, r3
 800126c:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b29b      	uxth	r3, r3
 8001278:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <can_start+0xa4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d111      	bne.n	80012a8 <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f00c febe 	bl	800e014 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f00c ff9b 	bl	800e1d4 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800129e:	2102      	movs	r1, #2
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f00d f9c8 	bl	800e636 <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 80012a6:	e017      	b.n	80012d8 <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <can_start+0xa8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d112      	bne.n	80012d8 <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 80012b2:	2301      	movs	r3, #1
 80012b4:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 80012b6:	230e      	movs	r3, #14
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
		can_filter_st.FilterBank = 14;
 80012ba:	230e      	movs	r3, #14
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f00c fea5 	bl	800e014 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f00c ff82 	bl	800e1d4 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 80012d0:	2110      	movs	r1, #16
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f00d f9af 	bl	800e636 <HAL_CAN_ActivateNotification>
}
 80012d8:	bf00      	nop
 80012da:	3738      	adds	r7, #56	@ 0x38
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40006400 	.word	0x40006400
 80012e4:	40006800 	.word	0x40006800

080012e8 <dbus_remote_ISR>:

uint8_t remote_raw_data[REMOTE_DATA_SIZE] = {0};
remote_cmd_t g_remote_cmd = { 0 };


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	g_remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 80012f0:	4b79      	ldr	r3, [pc, #484]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b74      	ldr	r3, [pc, #464]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800130a:	801a      	strh	r2, [r3, #0]
	g_remote_cmd.right_x -= JOYSTICK_OFFSET;
 800130c:	4b73      	ldr	r3, [pc, #460]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	b29b      	uxth	r3, r3
 8001314:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b6f      	ldr	r3, [pc, #444]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800131e:	801a      	strh	r2, [r3, #0]
	g_remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8001320:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b6b      	ldr	r3, [pc, #428]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133a:	b21a      	sxth	r2, r3
 800133c:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800133e:	805a      	strh	r2, [r3, #2]
	g_remote_cmd.right_y -= JOYSTICK_OFFSET;
 8001340:	4b66      	ldr	r3, [pc, #408]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001342:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b62      	ldr	r3, [pc, #392]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001352:	805a      	strh	r2, [r3, #2]
	g_remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8001354:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	b2db      	uxtb	r3, r3
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001360:	78db      	ldrb	r3, [r3, #3]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 800136a:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	b21a      	sxth	r2, r3
	g_remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 800137c:	4b57      	ldr	r3, [pc, #348]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800137e:	809a      	strh	r2, [r3, #4]
	g_remote_cmd.left_x -= JOYSTICK_OFFSET;
 8001380:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21a      	sxth	r2, r3
 8001390:	4b52      	ldr	r3, [pc, #328]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001392:	809a      	strh	r2, [r3, #4]
	g_remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013a0:	795b      	ldrb	r3, [r3, #5]
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013b2:	80da      	strh	r2, [r3, #6]
	g_remote_cmd.left_y -= JOYSTICK_OFFSET;
 80013b4:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013c6:	80da      	strh	r2, [r3, #6]
	//Left switch position
	g_remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80013c8:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	109b      	asrs	r3, r3, #2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	4b40      	ldr	r3, [pc, #256]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013dc:	721a      	strb	r2, [r3, #8]
	g_remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80013de:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80013f0:	725a      	strb	r2, [r3, #9]
	g_remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013f4:	799b      	ldrb	r3, [r3, #6]
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001406:	815a      	strh	r2, [r3, #10]
	g_remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 8001408:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800140a:	7a1b      	ldrb	r3, [r3, #8]
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001410:	7a5b      	ldrb	r3, [r3, #9]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21a      	sxth	r2, r3
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800141c:	819a      	strh	r2, [r3, #12]
	g_remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001420:	7a9b      	ldrb	r3, [r3, #10]
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001426:	7adb      	ldrb	r3, [r3, #11]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21a      	sxth	r2, r3
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001432:	81da      	strh	r2, [r3, #14]
	g_remote_cmd.mouse_hori += g_remote_cmd.mouse_x;
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800143a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800143e:	4413      	add	r3, r2
 8001440:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001442:	6113      	str	r3, [r2, #16]
	g_remote_cmd.mouse_vert += g_remote_cmd.mouse_y;
 8001444:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800144a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800144e:	4413      	add	r3, r2
 8001450:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001452:	6153      	str	r3, [r2, #20]
	g_remote_cmd.mouse_left = (remote_raw_data[12]);
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001456:	7b1b      	ldrb	r3, [r3, #12]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800145c:	761a      	strb	r2, [r3, #24]
	g_remote_cmd.mouse_right = (remote_raw_data[13]);
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001460:	7b5b      	ldrb	r3, [r3, #13]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001466:	765a      	strb	r2, [r3, #25]
	g_remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800146a:	7b9b      	ldrb	r3, [r3, #14]
 800146c:	461a      	mov	r2, r3
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001470:	835a      	strh	r2, [r3, #26]
	g_remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 8001474:	7c1b      	ldrb	r3, [r3, #16]
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <dbus_remote_ISR+0x1f0>)
 800147a:	7c5b      	ldrb	r3, [r3, #17]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 8001486:	839a      	strh	r2, [r3, #28]
	g_remote_cmd.side_dial -= JOYSTICK_OFFSET;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800148a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800148e:	b29b      	uxth	r3, r3
 8001490:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001494:	b29b      	uxth	r3, r3
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 800149a:	839a      	strh	r2, [r3, #28]
	g_remote_cmd.last_time = HAL_GetTick();
 800149c:	f00c fa2c 	bl	800d8f8 <HAL_GetTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <dbus_remote_ISR+0x1f4>)
 80014a4:	6213      	str	r3, [r2, #32]

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <dbus_remote_ISR+0x1f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f01a fa01 	bl	801b8bc <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <dbus_remote_ISR+0x1e8>
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <dbus_remote_ISR+0x1fc>)
 80014c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	f3bf 8f6f 	isb	sy
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000824 	.word	0x20000824
 80014dc:	20000838 	.word	0x20000838
 80014e0:	20003b6c 	.word	0x20003b6c
 80014e4:	e000ed04 	.word	0xe000ed04

080014e8 <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0
	uint8_t *pData = remote_raw_data;
 80014ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <dbus_remote_start+0x13c>)
 80014f0:	60fb      	str	r3, [r7, #12]
	UART_HandleTypeDef *huart = &DBUS_UART;
 80014f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001628 <dbus_remote_start+0x140>)
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 80014f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b20      	cmp	r3, #32
 8001500:	f040 808b 	bne.w	800161a <dbus_remote_start+0x132>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <dbus_remote_start+0x26>
			return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e086      	b.n	800161c <dbus_remote_start+0x134>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <dbus_remote_start+0x34>
 8001518:	2302      	movs	r3, #2
 800151a:	e07f      	b.n	800161c <dbus_remote_start+0x134>
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	2201      	movs	r2, #1
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001526:	2201      	movs	r2, #1
 8001528:	631a      	str	r2, [r3, #48]	@ 0x30
		huart->pRxBuffPtr = pData;
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 8001530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001532:	2212      	movs	r2, #18
 8001534:	859a      	strh	r2, [r3, #44]	@ 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001538:	2200      	movs	r2, #0
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800153c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153e:	2222      	movs	r2, #34	@ 0x22
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 8001544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001548:	4a38      	ldr	r2, [pc, #224]	@ (800162c <dbus_remote_start+0x144>)
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 800154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001550:	2200      	movs	r2, #0
 8001552:	651a      	str	r2, [r3, #80]	@ 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 800155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3304      	adds	r3, #4
 8001564:	4619      	mov	r1, r3
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2312      	movs	r3, #18
 800156c:	f00d fc98 	bl	800eea0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800159c:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
		in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015bc:	615a      	str	r2, [r3, #20]

		if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d125      	bne.n	8001612 <dbus_remote_start+0x12a>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
			ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	330c      	adds	r3, #12
 80015e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	e853 3f00 	ldrex	r3, [r3]
 80015ea:	613b      	str	r3, [r7, #16]
   return(result);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	330c      	adds	r3, #12
 80015fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fc:	623a      	str	r2, [r7, #32]
 80015fe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001600:	69f9      	ldr	r1, [r7, #28]
 8001602:	6a3a      	ldr	r2, [r7, #32]
 8001604:	e841 2300 	strex	r3, r2, [r1]
 8001608:	61bb      	str	r3, [r7, #24]
   return(result);
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <dbus_remote_start+0xf4>
 8001610:	e001      	b.n	8001616 <dbus_remote_start+0x12e>
		{
			/* In case of errors already pending when reception is started,
			   Interrupts may have already been raised and lead to reception abortion.
			   (Overrun error for instance).
			   In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
			return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e002      	b.n	800161c <dbus_remote_start+0x134>
		}
		return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <dbus_remote_start+0x134>
	} else {
		return HAL_BUSY;
 800161a:	2302      	movs	r3, #2
	}
}
 800161c:	4618      	mov	r0, r3
 800161e:	3730      	adds	r7, #48	@ 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000824 	.word	0x20000824
 8001628:	20001c5c 	.word	0x20001c5c
 800162c:	080012e9 	.word	0x080012e9

08001630 <laser_on>:
 */
#include "board_lib.h"
#include "bsp_gpio.h"

void laser_on()
{ //set to reset for open day
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163a:	4802      	ldr	r0, [pc, #8]	@ (8001644 <laser_on+0x14>)
 800163c:	f00e f92c 	bl	800f898 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020800 	.word	0x40020800

08001648 <laser_off>:

void laser_off()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001652:	4802      	ldr	r0, [pc, #8]	@ (800165c <laser_off+0x14>)
 8001654:	f00e f920 	bl	800f898 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020800 	.word	0x40020800

08001660 <hall_disable>:
void hall_enable(){
	hall_state = HALL_ON;
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void hall_disable(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	hall_state = HALL_OFF;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <hall_disable+0x14>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800166a:	2028      	movs	r0, #40	@ 0x28
 800166c:	f00d fb5c 	bl	800ed28 <HAL_NVIC_DisableIRQ>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000003 	.word	0x20000003

08001678 <hall_int>:


void hall_int(){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	static int32_t prev_tick;
	uint8_t curr_state = (GPIOE->IDR & GPIO_PIN_11) ? 1 : 0;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <hall_int+0x8c>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	71fb      	strb	r3, [r7, #7]
	if (curr_state & GPIO_PIN_11){
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12e      	bne.n	80016fa <hall_int+0x82>
		//current state and previous state are the same, do nothing
		return;
	}
	if (hall_state == HALL_ON){
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <hall_int+0x90>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d127      	bne.n	80016f4 <hall_int+0x7c>
	//assume hall sensor has changed state
		switch (curr_state){
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <hall_int+0x46>
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d11b      	bne.n	80016e6 <hall_int+0x6e>
		case HALL_OFF:
			//hall went from on to off
			//motor just brushed past
			prev_tick = g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks;
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <hall_int+0x94>)
 80016b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80016b8:	4a15      	ldr	r2, [pc, #84]	@ (8001710 <hall_int+0x98>)
 80016ba:	6013      	str	r3, [r2, #0]

			break;
 80016bc:	e016      	b.n	80016ec <hall_int+0x74>
		case HALL_ON:
			//hall went from off to on
			//yaw motor just let goo
			g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks = (g_can_motors[YAW_MOTOR_ID-1].angle_data.ticks-prev_tick)/2 ;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <hall_int+0x94>)
 80016c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c4:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <hall_int+0x98>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	0fda      	lsrs	r2, r3, #31
 80016d0:	4413      	add	r3, r2
 80016d2:	105b      	asrs	r3, r3, #1
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <hall_int+0x94>)
 80016d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016dc:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
			//sensor is done, turn it off
			hall_disable();
 80016e0:	f7ff ffbe 	bl	8001660 <hall_disable>
			break;
 80016e4:	e002      	b.n	80016ec <hall_int+0x74>

		default:
			prev_state = 1;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <hall_int+0x9c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
		}
		prev_state = curr_state;
 80016ec:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <hall_int+0x9c>)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	7013      	strb	r3, [r2, #0]
		return;
 80016f2:	e003      	b.n	80016fc <hall_int+0x84>
	} else{
		hall_disable();
 80016f4:	f7ff ffb4 	bl	8001660 <hall_disable>
		return;
 80016f8:	e000      	b.n	80016fc <hall_int+0x84>
		return;
 80016fa:	bf00      	nop
	}
}
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	20000003 	.word	0x20000003
 800170c:	20002220 	.word	0x20002220
 8001710:	2000085c 	.word	0x2000085c
 8001714:	20000002 	.word	0x20000002

08001718 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800171c:	f3bf 8f4f 	dsb	sy
}
 8001720:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <__NVIC_SystemReset+0x24>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800172a:	4904      	ldr	r1, [pc, #16]	@ (800173c <__NVIC_SystemReset+0x24>)
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_SystemReset+0x28>)
 800172e:	4313      	orrs	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001732:	f3bf 8f4f 	dsb	sy
}
 8001736:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <__NVIC_SystemReset+0x20>
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	05fa0004 	.word	0x05fa0004

08001744 <gyro_write_byte>:
	y = y * (1.5f - (halfx * y * y));

	return y;
}

void gyro_write_byte(uint8_t const reg, uint8_t const data) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af02      	add	r7, sp, #8
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
	BMI_GYRO_NSS_LOW;
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <gyro_write_byte+0x5c>)
 800175a:	f00e f89d 	bl	800f898 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001762:	f107 020e 	add.w	r2, r7, #14
 8001766:	f107 010f 	add.w	r1, r7, #15
 800176a:	2364      	movs	r3, #100	@ 0x64
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <gyro_write_byte+0x60>)
 8001772:	f011 ff19 	bl	80135a8 <HAL_SPI_TransmitReceive>
	tx = data;
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800177a:	f107 020e 	add.w	r2, r7, #14
 800177e:	f107 010f 	add.w	r1, r7, #15
 8001782:	2364      	movs	r3, #100	@ 0x64
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2301      	movs	r3, #1
 8001788:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <gyro_write_byte+0x60>)
 800178a:	f011 ff0d 	bl	80135a8 <HAL_SPI_TransmitReceive>
	BMI_GYRO_NSS_HIGH;
 800178e:	2201      	movs	r2, #1
 8001790:	2101      	movs	r1, #1
 8001792:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <gyro_write_byte+0x5c>)
 8001794:	f00e f880 	bl	800f898 <HAL_GPIO_WritePin>
	return;
 8001798:	bf00      	nop
}
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020400 	.word	0x40020400
 80017a4:	20001994 	.word	0x20001994

080017a8 <gyro_read_byte>:

uint8_t gyro_read_byte(uint8_t const reg) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	BMI_GYRO_NSS_LOW;
 80017b2:	2200      	movs	r2, #0
 80017b4:	2101      	movs	r1, #1
 80017b6:	4811      	ldr	r0, [pc, #68]	@ (80017fc <gyro_read_byte+0x54>)
 80017b8:	f00e f86e 	bl	800f898 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
	tx = reg | 0x80;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80017c6:	f107 020f 	add.w	r2, r7, #15
 80017ca:	f107 010e 	add.w	r1, r7, #14
 80017ce:	2364      	movs	r3, #100	@ 0x64
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	480a      	ldr	r0, [pc, #40]	@ (8001800 <gyro_read_byte+0x58>)
 80017d6:	f011 fee7 	bl	80135a8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 80017da:	f107 010f 	add.w	r1, r7, #15
 80017de:	2364      	movs	r3, #100	@ 0x64
 80017e0:	2201      	movs	r2, #1
 80017e2:	4807      	ldr	r0, [pc, #28]	@ (8001800 <gyro_read_byte+0x58>)
 80017e4:	f011 fdcf 	bl	8013386 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <gyro_read_byte+0x54>)
 80017ee:	f00e f853 	bl	800f898 <HAL_GPIO_WritePin>
	return rx;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40020400 	.word	0x40020400
 8001800:	20001994 	.word	0x20001994

08001804 <gyro_read_bytes>:

uint8_t gyro_read_bytes(uint8_t const reg, uint8_t *pData, uint8_t len) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_GYRO_NSS_LOW;
 8001814:	2200      	movs	r2, #0
 8001816:	2101      	movs	r1, #1
 8001818:	4811      	ldr	r0, [pc, #68]	@ (8001860 <gyro_read_bytes+0x5c>)
 800181a:	f00e f83d 	bl	800f898 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001828:	f107 020e 	add.w	r2, r7, #14
 800182c:	f107 010f 	add.w	r1, r7, #15
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	480b      	ldr	r0, [pc, #44]	@ (8001864 <gyro_read_bytes+0x60>)
 8001838:	f011 feb6 	bl	80135a8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2364      	movs	r3, #100	@ 0x64
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	4807      	ldr	r0, [pc, #28]	@ (8001864 <gyro_read_bytes+0x60>)
 8001846:	f011 fd9e 	bl	8013386 <HAL_SPI_Receive>
	BMI_GYRO_NSS_HIGH;
 800184a:	2201      	movs	r2, #1
 800184c:	2101      	movs	r1, #1
 800184e:	4804      	ldr	r0, [pc, #16]	@ (8001860 <gyro_read_bytes+0x5c>)
 8001850:	f00e f822 	bl	800f898 <HAL_GPIO_WritePin>
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020400 	.word	0x40020400
 8001864:	20001994 	.word	0x20001994

08001868 <accel_write_byte>:
		return 1;
	}
	return 0;
}

void accel_write_byte(uint8_t const reg, uint8_t const data) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 8001878:	2200      	movs	r2, #0
 800187a:	2110      	movs	r1, #16
 800187c:	4811      	ldr	r0, [pc, #68]	@ (80018c4 <accel_write_byte+0x5c>)
 800187e:	f00e f80b 	bl	800f898 <HAL_GPIO_WritePin>
	tx = reg;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001886:	f107 020e 	add.w	r2, r7, #14
 800188a:	f107 010f 	add.w	r1, r7, #15
 800188e:	2364      	movs	r3, #100	@ 0x64
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <accel_write_byte+0x60>)
 8001896:	f011 fe87 	bl	80135a8 <HAL_SPI_TransmitReceive>
	tx = data;
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 800189e:	f107 020e 	add.w	r2, r7, #14
 80018a2:	f107 010f 	add.w	r1, r7, #15
 80018a6:	2364      	movs	r3, #100	@ 0x64
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <accel_write_byte+0x60>)
 80018ae:	f011 fe7b 	bl	80135a8 <HAL_SPI_TransmitReceive>
	BMI_ACCEL_NSS_HIGH;
 80018b2:	2201      	movs	r2, #1
 80018b4:	2110      	movs	r1, #16
 80018b6:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <accel_write_byte+0x5c>)
 80018b8:	f00d ffee 	bl	800f898 <HAL_GPIO_WritePin>
	return;
 80018bc:	bf00      	nop
}
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020000 	.word	0x40020000
 80018c8:	20001994 	.word	0x20001994

080018cc <accel_read_byte>:

uint8_t accel_read_byte(uint8_t const reg) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx, rx;
	BMI_ACCEL_NSS_LOW;
 80018d6:	2200      	movs	r2, #0
 80018d8:	2110      	movs	r1, #16
 80018da:	4816      	ldr	r0, [pc, #88]	@ (8001934 <accel_read_byte+0x68>)
 80018dc:	f00d ffdc 	bl	800f898 <HAL_GPIO_WritePin>
	tx = reg | 0x80;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 80018ea:	f107 020e 	add.w	r2, r7, #14
 80018ee:	f107 010f 	add.w	r1, r7, #15
 80018f2:	2364      	movs	r3, #100	@ 0x64
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	480f      	ldr	r0, [pc, #60]	@ (8001938 <accel_read_byte+0x6c>)
 80018fa:	f011 fe55 	bl	80135a8 <HAL_SPI_TransmitReceive>
	tx = 0x55;
 80018fe:	2355      	movs	r3, #85	@ 0x55
 8001900:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001902:	f107 010e 	add.w	r1, r7, #14
 8001906:	2364      	movs	r3, #100	@ 0x64
 8001908:	2201      	movs	r2, #1
 800190a:	480b      	ldr	r0, [pc, #44]	@ (8001938 <accel_read_byte+0x6c>)
 800190c:	f011 fd3b 	bl	8013386 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001910:	f107 010e 	add.w	r1, r7, #14
 8001914:	2364      	movs	r3, #100	@ 0x64
 8001916:	2201      	movs	r2, #1
 8001918:	4807      	ldr	r0, [pc, #28]	@ (8001938 <accel_read_byte+0x6c>)
 800191a:	f011 fd34 	bl	8013386 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 800191e:	2201      	movs	r2, #1
 8001920:	2110      	movs	r1, #16
 8001922:	4804      	ldr	r0, [pc, #16]	@ (8001934 <accel_read_byte+0x68>)
 8001924:	f00d ffb8 	bl	800f898 <HAL_GPIO_WritePin>
	return rx;
 8001928:	7bbb      	ldrb	r3, [r7, #14]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40020000 	.word	0x40020000
 8001938:	20001994 	.word	0x20001994

0800193c <accel_read_bytes>:

uint8_t accel_read_bytes(uint8_t reg, uint8_t pData[], uint8_t len) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	71bb      	strb	r3, [r7, #6]
	BMI_ACCEL_NSS_LOW;
 800194c:	2200      	movs	r2, #0
 800194e:	2110      	movs	r1, #16
 8001950:	4814      	ldr	r0, [pc, #80]	@ (80019a4 <accel_read_bytes+0x68>)
 8001952:	f00d ffa1 	bl	800f898 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
	tx = reg | 0x80;
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800195c:	b2db      	uxtb	r3, r3
 800195e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&IMU_HSPI, &tx, &rx, 1, 100);
 8001960:	f107 020e 	add.w	r2, r7, #14
 8001964:	f107 010f 	add.w	r1, r7, #15
 8001968:	2364      	movs	r3, #100	@ 0x64
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	480e      	ldr	r0, [pc, #56]	@ (80019a8 <accel_read_bytes+0x6c>)
 8001970:	f011 fe1a 	bl	80135a8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(&IMU_HSPI, &rx, 1, 100);
 8001974:	f107 010e 	add.w	r1, r7, #14
 8001978:	2364      	movs	r3, #100	@ 0x64
 800197a:	2201      	movs	r2, #1
 800197c:	480a      	ldr	r0, [pc, #40]	@ (80019a8 <accel_read_bytes+0x6c>)
 800197e:	f011 fd02 	bl	8013386 <HAL_SPI_Receive>
	HAL_SPI_Receive(&IMU_HSPI, pData, len, 100);
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	b29a      	uxth	r2, r3
 8001986:	2364      	movs	r3, #100	@ 0x64
 8001988:	6839      	ldr	r1, [r7, #0]
 800198a:	4807      	ldr	r0, [pc, #28]	@ (80019a8 <accel_read_bytes+0x6c>)
 800198c:	f011 fcfb 	bl	8013386 <HAL_SPI_Receive>
	BMI_ACCEL_NSS_HIGH;
 8001990:	2201      	movs	r2, #1
 8001992:	2110      	movs	r1, #16
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <accel_read_bytes+0x68>)
 8001996:	f00d ff7f 	bl	800f898 <HAL_GPIO_WritePin>
	return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020000 	.word	0x40020000
 80019a8:	20001994 	.word	0x20001994

080019ac <gyro_init>:
		return 1;
	}
	return 0;
}

uint8_t gyro_init() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80019b2:	21b6      	movs	r1, #182	@ 0xb6
 80019b4:	2014      	movs	r0, #20
 80019b6:	f7ff fec5 	bl	8001744 <gyro_write_byte>
	HAL_Delay(10);
 80019ba:	200a      	movs	r0, #10
 80019bc:	f00b ffa8 	bl	800d910 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2011      	movs	r0, #17
 80019c4:	f7ff febe 	bl	8001744 <gyro_write_byte>
	HAL_Delay(2);
 80019c8:	2002      	movs	r0, #2
 80019ca:	f00b ffa1 	bl	800d910 <HAL_Delay>
	int16_t gyro_id = gyro_read_byte(BMI088_GYRO_CHIP_ID);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff feea 	bl	80017a8 <gyro_read_byte>
 80019d4:	4603      	mov	r3, r0
 80019d6:	80fb      	strh	r3, [r7, #6]
	if (gyro_id != BMI088_GYRO_CHIP_ID_VALUE) {
 80019d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d001      	beq.n	80019e4 <gyro_init+0x38>
		NVIC_SystemReset();
 80019e0:	f7ff fe9a 	bl	8001718 <__NVIC_SystemReset>
		return 1;
	}
	HAL_Delay(2);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f00b ff93 	bl	800d910 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_RANGE, BMI088_GYRO_500);
 80019ea:	2102      	movs	r1, #2
 80019ec:	200f      	movs	r0, #15
 80019ee:	f7ff fea9 	bl	8001744 <gyro_write_byte>
	HAL_Delay(2);
 80019f2:	2002      	movs	r0, #2
 80019f4:	f00b ff8c 	bl	800d910 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_BANDWIDTH,
 80019f8:	2181      	movs	r1, #129	@ 0x81
 80019fa:	2010      	movs	r0, #16
 80019fc:	f7ff fea2 	bl	8001744 <gyro_write_byte>
			(BMI088_GYRO_BANDWIDTH_MUST_Set | BMI088_GYRO_2000_230_HZ));
	HAL_Delay(2);
 8001a00:	2002      	movs	r0, #2
 8001a02:	f00b ff85 	bl	800d910 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_CONF,
 8001a06:	2101      	movs	r1, #1
 8001a08:	2016      	movs	r0, #22
 8001a0a:	f7ff fe9b 	bl	8001744 <gyro_write_byte>
			(BMI088_GYRO_INT3_GPIO_HIGH | BMI088_GYRO_INT3_GPIO_PP));
	HAL_Delay(2);
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f00b ff7e 	bl	800d910 <HAL_Delay>
	gyro_write_byte(BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3);
 8001a14:	2101      	movs	r1, #1
 8001a16:	2018      	movs	r0, #24
 8001a18:	f7ff fe94 	bl	8001744 <gyro_write_byte>
	HAL_Delay(2);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f00b ff77 	bl	800d910 <HAL_Delay>

	return 0;
 8001a22:	2300      	movs	r3, #0
	//blah
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <accel_init>:

uint8_t accel_init() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	uint8_t accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff ff4a 	bl	80018cc <accel_read_byte>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f00b ff67 	bl	800d910 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff ff42 	bl	80018cc <accel_read_byte>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f00b ff5f 	bl	800d910 <HAL_Delay>
	accel_write_byte(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001a52:	21b6      	movs	r1, #182	@ 0xb6
 8001a54:	207e      	movs	r0, #126	@ 0x7e
 8001a56:	f7ff ff07 	bl	8001868 <accel_write_byte>
	HAL_Delay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f00b ff58 	bl	800d910 <HAL_Delay>

	//Attempt to read...twice because once doesn't cause it to initiate
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff ff33 	bl	80018cc <accel_read_byte>
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f00b ff50 	bl	800d910 <HAL_Delay>
	accel_id = accel_read_byte(BMI088_ACC_CHIP_ID);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ff2b 	bl	80018cc <accel_read_byte>
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f00b ff48 	bl	800d910 <HAL_Delay>
	if (accel_id != BMI088_ACC_CHIP_ID_VALUE) {
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2b1e      	cmp	r3, #30
 8001a84:	d001      	beq.n	8001a8a <accel_init+0x5e>
		//add in an error code for this someday
		return 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e023      	b.n	8001ad2 <accel_init+0xa6>
	}

	accel_write_byte(BMI088_ACC_PWR_CTRL, BMI088_ACC_ENABLE_ACC_ON);
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	207d      	movs	r0, #125	@ 0x7d
 8001a8e:	f7ff feeb 	bl	8001868 <accel_write_byte>
	HAL_Delay(2);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f00b ff3c 	bl	800d910 <HAL_Delay>
	accel_write_byte(BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	207c      	movs	r0, #124	@ 0x7c
 8001a9c:	f7ff fee4 	bl	8001868 <accel_write_byte>
	HAL_Delay(2);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f00b ff35 	bl	800d910 <HAL_Delay>

	//set accelerometer to normal from suspend
	accel_write_byte(BMI088_ACC_CONF,
 8001aa6:	21a9      	movs	r1, #169	@ 0xa9
 8001aa8:	2040      	movs	r0, #64	@ 0x40
 8001aaa:	f7ff fedd 	bl	8001868 <accel_write_byte>
			(BMI088_ACC_NORMAL | BMI088_ACC_200_HZ | BMI088_ACC_CONF_MUST_Set));
	HAL_Delay(2);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f00b ff2e 	bl	800d910 <HAL_Delay>

	accel_write_byte(BMI088_ACC_RANGE, BMI088_ACC_RANGE_6G);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	2041      	movs	r0, #65	@ 0x41
 8001ab8:	f7ff fed6 	bl	8001868 <accel_write_byte>
	HAL_Delay(2);
 8001abc:	2002      	movs	r0, #2
 8001abe:	f00b ff27 	bl	800d910 <HAL_Delay>

	accel_write_byte(BMI088_INT1_IO_CTRL,
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	2053      	movs	r0, #83	@ 0x53
 8001ac6:	f7ff fecf 	bl	8001868 <accel_write_byte>
			(BMI088_ACC_INT1_IO_ENABLE | BMI088_ACC_INT1_GPIO_PP | BMI088_ACC_INT1_GPIO_LOW));
	HAL_Delay(2);
 8001aca:	2002      	movs	r0, #2
 8001acc:	f00b ff20 	bl	800d910 <HAL_Delay>
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <mag_read_single_reg>:
	}
	float temperature = temp_int11 * 0.125 / temp_buff[1] + 23;
	return temperature;
}

uint8_t mag_read_single_reg(uint8_t reg) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	2305      	movs	r3, #5
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	2301      	movs	r3, #1
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	f107 030f 	add.w	r3, r7, #15
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2301      	movs	r3, #1
 8001afe:	211c      	movs	r1, #28
 8001b00:	4803      	ldr	r0, [pc, #12]	@ (8001b10 <mag_read_single_reg+0x34>)
 8001b02:	f00e f939 	bl	800fd78 <HAL_I2C_Mem_Read>
	return data;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20001870 	.word	0x20001870

08001b14 <mag_write_single_reg>:

void mag_write_single_reg(uint8_t reg, uint8_t data) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 5);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	2305      	movs	r3, #5
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	1dbb      	adds	r3, r7, #6
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	211c      	movs	r1, #28
 8001b38:	4803      	ldr	r0, [pc, #12]	@ (8001b48 <mag_write_single_reg+0x34>)
 8001b3a:	f00e f823 	bl	800fb84 <HAL_I2C_Mem_Write>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20001870 	.word	0x20001870

08001b4c <mag_read_multi_reg_dma>:

void mag_read_multi_reg(uint8_t reg, uint16_t len, uint8_t *data) {
	HAL_I2C_Mem_Read(&hi2c3, IST8310_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 10);
}

void mag_read_multi_reg_dma(uint8_t reg, uint16_t len, uint8_t *data) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	4603      	mov	r3, r0
 8001b54:	603a      	str	r2, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c3, IST8310_ADDRESS << 1, reg,
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	88bb      	ldrh	r3, [r7, #4]
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	211c      	movs	r1, #28
 8001b6c:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <mag_read_multi_reg_dma+0x30>)
 8001b6e:	f00e fb29 	bl	80101c4 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, data, len);
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20001870 	.word	0x20001870

08001b80 <imu_init>:
	imu_data.gy_offset = gyro_y_total / 50;
	imu_data.gz_offset = gyro_z_total / 50;

}

void imu_init() {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	//trigger NSS low and high for both to initialise both gyro and accel into SPI mode
	BMI_ACCEL_NSS_LOW;
 8001b84:	2200      	movs	r2, #0
 8001b86:	2110      	movs	r1, #16
 8001b88:	480e      	ldr	r0, [pc, #56]	@ (8001bc4 <imu_init+0x44>)
 8001b8a:	f00d fe85 	bl	800f898 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_LOW;
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <imu_init+0x48>)
 8001b94:	f00d fe80 	bl	800f898 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b98:	2064      	movs	r0, #100	@ 0x64
 8001b9a:	f00b feb9 	bl	800d910 <HAL_Delay>
	BMI_ACCEL_NSS_HIGH;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <imu_init+0x44>)
 8001ba4:	f00d fe78 	bl	800f898 <HAL_GPIO_WritePin>
	BMI_GYRO_NSS_HIGH;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2101      	movs	r1, #1
 8001bac:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <imu_init+0x48>)
 8001bae:	f00d fe73 	bl	800f898 <HAL_GPIO_WritePin>
	gyro_init();
 8001bb2:	f7ff fefb 	bl	80019ac <gyro_init>
	accel_init();
 8001bb6:	f7ff ff39 	bl	8001a2c <accel_init>
	ist8310_init();
 8001bba:	f000 f905 	bl	8001dc8 <ist8310_init>
//	gyro_offset_cali();

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400

08001bcc <imu_start_ints>:

void imu_start_ints() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	gyro_write_byte(BMI088_GYRO_CTRL, BMI088_DRDY_ON);
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	2015      	movs	r0, #21
 8001bd4:	f7ff fdb6 	bl	8001744 <gyro_write_byte>
	vTaskDelay(10);
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f019 f853 	bl	801ac84 <vTaskDelay>
	accel_write_byte(BMI088_INT_MAP_DATA, BMI088_ACC_INT1_DRDY_INTERRUPT);
 8001bde:	2104      	movs	r1, #4
 8001be0:	2058      	movs	r0, #88	@ 0x58
 8001be2:	f7ff fe41 	bl	8001868 <accel_write_byte>
	vTaskDelay(10);
 8001be6:	200a      	movs	r0, #10
 8001be8:	f019 f84c 	bl	801ac84 <vTaskDelay>
	mag_write_single_reg(0x0B, 0x08); //enable drdy pin, pull to low on drdy
 8001bec:	2108      	movs	r1, #8
 8001bee:	200b      	movs	r0, #11
 8001bf0:	f7ff ff90 	bl	8001b14 <mag_write_single_reg>
	imu_init_status = 1;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	@ (8001c00 <imu_start_ints+0x34>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200008b0 	.word	0x200008b0

08001c04 <accel_get_data>:

void accel_get_data() {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	accel_read_bytes(BMI088_ACCEL_XOUT_L, accel_buff, 6);
 8001c08:	2206      	movs	r2, #6
 8001c0a:	4903      	ldr	r1, [pc, #12]	@ (8001c18 <accel_get_data+0x14>)
 8001c0c:	2012      	movs	r0, #18
 8001c0e:	f7ff fe95 	bl	800193c <accel_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		accel_rx = 1;
//	}
	//imu_data.temp = get_bmi_temp();
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000860 	.word	0x20000860

08001c1c <accel_process_data>:

void accel_process_data() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	int16_t accel_data;
	accel_data = (accel_buff[1] << 8 | accel_buff[0]);
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ax = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001cc8 <accel_process_data+0xac>
 8001c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <accel_process_data+0xb0>)
 8001c4a:	edc3 7a04 	vstr	s15, [r3, #16]
	accel_data = (accel_buff[3] << 8 | accel_buff[2]);
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c50:	78db      	ldrb	r3, [r3, #3]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c58:	789b      	ldrb	r3, [r3, #2]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.ay = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001cc8 <accel_process_data+0xac>
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <accel_process_data+0xb0>)
 8001c76:	edc3 7a05 	vstr	s15, [r3, #20]
	accel_data = (accel_buff[5] << 8 | accel_buff[4]);
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c7c:	795b      	ldrb	r3, [r3, #5]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <accel_process_data+0xa8>)
 8001c84:	791b      	ldrb	r3, [r3, #4]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into m/s^2
	imu_data.accel_data.az = (float)accel_data * BMI088_ACCEL_6G_SEN;
 8001c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001cc8 <accel_process_data+0xac>
 8001c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <accel_process_data+0xb0>)
 8001ca2:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data.accel_data.last_accel_update = HAL_GetTick();
 8001ca6:	f00b fe27 	bl	800d8f8 <HAL_GetTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <accel_process_data+0xb0>)
 8001cae:	61d3      	str	r3, [r2, #28]

	//send data into the imu processing task
	accel_data_ready(imu_data.accel_data);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <accel_process_data+0xb0>)
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb6:	f006 ff33 	bl	8008b20 <accel_data_ready>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000860 	.word	0x20000860
 8001cc8:	3aeb3333 	.word	0x3aeb3333
 8001ccc:	20000878 	.word	0x20000878

08001cd0 <gyro_get_data>:

void gyro_get_data() {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	gyro_read_bytes(BMI088_GYRO_X_L, gyro_buff, 6);
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	4903      	ldr	r1, [pc, #12]	@ (8001ce4 <gyro_get_data+0x14>)
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7ff fd93 	bl	8001804 <gyro_read_bytes>
//	if (rx_status == HAL_OK) {
//		spi_rdy = 0;
//		gyro_rx = 1;
//	}
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000868 	.word	0x20000868

08001ce8 <gyro_process_data>:

void gyro_process_data() {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
	int16_t gyro_data;
	gyro_data = (gyro_buff[1] << 8 | gyro_buff[0]);
 8001cee:	4b33      	ldr	r3, [pc, #204]	@ (8001dbc <gyro_process_data+0xd4>)
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <gyro_process_data+0xd4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gx_offset;
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d04:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	80fb      	strh	r3, [r7, #6]
	//convert raw data into radians/s
	imu_data.gyro_data.gx = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001dc4 <gyro_process_data+0xdc>
 8001d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d24:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d26:	edc3 7a00 	vstr	s15, [r3]
	gyro_data = (gyro_buff[3] << 8 | gyro_buff[2]);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d2c:	78db      	ldrb	r3, [r3, #3]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gy_offset;
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d40:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gy = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d58:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001dc4 <gyro_process_data+0xdc>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d62:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_data = (gyro_buff[5] << 8 | gyro_buff[4]);
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d68:	795b      	ldrb	r3, [r3, #5]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <gyro_process_data+0xd4>)
 8001d70:	791b      	ldrb	r3, [r3, #4]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	80fb      	strh	r3, [r7, #6]
	gyro_data -= imu_data.gz_offset;
 8001d78:	88fa      	ldrh	r2, [r7, #6]
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d7c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	80fb      	strh	r3, [r7, #6]

	//convert raw data into radians/s
	imu_data.gyro_data.gz = (float)gyro_data * BMI088_GYRO_500_SEN;
 8001d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d94:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001dc4 <gyro_process_data+0xdc>
 8001d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001d9e:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.gyro_data.last_gyro_update = HAL_GetTick();
 8001da2:	f00b fda9 	bl	800d8f8 <HAL_GetTick>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001daa:	60d3      	str	r3, [r2, #12]
	//send data into the imu processing task
	gyro_data_ready(imu_data.gyro_data);
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <gyro_process_data+0xd8>)
 8001dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db0:	f006 fe66 	bl	8008a80 <gyro_data_ready>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000868 	.word	0x20000868
 8001dc0:	20000878 	.word	0x20000878
 8001dc4:	398ba058 	.word	0x398ba058

08001dc8 <ist8310_init>:

uint8_t ist8310_init() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2140      	movs	r1, #64	@ 0x40
 8001dd2:	481d      	ldr	r0, [pc, #116]	@ (8001e48 <ist8310_init+0x80>)
 8001dd4:	f00d fd60 	bl	800f898 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f00b fd99 	bl	800d910 <HAL_Delay>
	HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2140      	movs	r1, #64	@ 0x40
 8001de2:	4819      	ldr	r0, [pc, #100]	@ (8001e48 <ist8310_init+0x80>)
 8001de4:	f00d fd58 	bl	800f898 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001de8:	2002      	movs	r0, #2
 8001dea:	f00b fd91 	bl	800d910 <HAL_Delay>

	uint8_t ist_id = mag_read_single_reg(IST8310_WHO_AM_I);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fe74 	bl	8001adc <mag_read_single_reg>
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
	if (ist_id != IST8310_DEVICE_ID_A) {
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d00a      	beq.n	8001e14 <ist8310_init+0x4c>
		//reset mag values
		imu_data.mag_data.mx = 0;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <ist8310_init+0x84>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	841a      	strh	r2, [r3, #32]
		imu_data.mag_data.my = 0;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <ist8310_init+0x84>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	845a      	strh	r2, [r3, #34]	@ 0x22
		imu_data.mag_data.mz = 0;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <ist8310_init+0x84>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	849a      	strh	r2, [r3, #36]	@ 0x24
		return 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e015      	b.n	8001e40 <ist8310_init+0x78>
	}
	HAL_Delay(2);
 8001e14:	2002      	movs	r0, #2
 8001e16:	f00b fd7b 	bl	800d910 <HAL_Delay>
	mag_write_single_reg(0x41, 0x09); //average over 2 data
 8001e1a:	2109      	movs	r1, #9
 8001e1c:	2041      	movs	r0, #65	@ 0x41
 8001e1e:	f7ff fe79 	bl	8001b14 <mag_write_single_reg>
	HAL_Delay(2);
 8001e22:	2002      	movs	r0, #2
 8001e24:	f00b fd74 	bl	800d910 <HAL_Delay>
	mag_write_single_reg(0x42, 0xC0); //set to C0
 8001e28:	21c0      	movs	r1, #192	@ 0xc0
 8001e2a:	2042      	movs	r0, #66	@ 0x42
 8001e2c:	f7ff fe72 	bl	8001b14 <mag_write_single_reg>
	HAL_Delay(2);
 8001e30:	2002      	movs	r0, #2
 8001e32:	f00b fd6d 	bl	800d910 <HAL_Delay>
	mag_write_single_reg(0x0A, 0x0B); //100Hz
 8001e36:	210b      	movs	r1, #11
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f7ff fe6b 	bl	8001b14 <mag_write_single_reg>
	//mag_en_flag = 1;

	return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	20000878 	.word	0x20000878

08001e50 <ist8310_get_data>:

void ist8310_get_data() {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	//fun
	mag_read_multi_reg_dma(IST8310_R_XL, 5, ist_read_buffer);
 8001e54:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <ist8310_get_data+0x1c>)
 8001e56:	2105      	movs	r1, #5
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f7ff fe77 	bl	8001b4c <mag_read_multi_reg_dma>
	imu_data.mag_data.last_mag_update = HAL_GetTick();
 8001e5e:	f00b fd4b 	bl	800d8f8 <HAL_GetTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a02      	ldr	r2, [pc, #8]	@ (8001e70 <ist8310_get_data+0x20>)
 8001e66:	6293      	str	r3, [r2, #40]	@ 0x28

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000870 	.word	0x20000870
 8001e70:	20000878 	.word	0x20000878

08001e74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1) {
 8001e7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <HAL_GPIO_EXTI_Callback+0x58>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d11e      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x50>
		if (hspi1.State == HAL_SPI_STATE_READY) {
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10d      	bne.n	8001eae <HAL_GPIO_EXTI_Callback+0x3a>
			if (GPIO_Pin == GYRO_INT_Pin) {
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d103      	bne.n	8001ea0 <HAL_GPIO_EXTI_Callback+0x2c>

				gyro_get_data();
 8001e98:	f7ff ff1a 	bl	8001cd0 <gyro_get_data>
				gyro_process_data();
 8001e9c:	f7ff ff24 	bl	8001ce8 <gyro_process_data>
				//ist8310_get_data();
			}
			if (GPIO_Pin == ACC_INT_Pin) {
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d103      	bne.n	8001eae <HAL_GPIO_EXTI_Callback+0x3a>

				accel_get_data();
 8001ea6:	f7ff fead 	bl	8001c04 <accel_get_data>
				accel_process_data();
 8001eaa:	f7ff feb7 	bl	8001c1c <accel_process_data>
			}
		}
		if (GPIO_Pin == IST_INT_Pin) {
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d107      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x50>
			if (hi2c3.State == HAL_I2C_STATE_READY) {
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d101      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x50>
				ist8310_get_data();
 8001ec0:	f7ff ffc6 	bl	8001e50 <ist8310_get_data>
			}
		}
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200008b0 	.word	0x200008b0
 8001ed0:	20001994 	.word	0x20001994
 8001ed4:	20001870 	.word	0x20001870

08001ed8 <HAL_I2C_MemRxCpltCallback>:
	spi_rdy = 1;
	spi_timeout = HAL_GetTick();
}
*/

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	int16_t mag_buffer[3];
	mag_buffer[0] = ist_read_buffer[1] << 8 | ist_read_buffer[0];
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ee2:	785b      	ldrb	r3, [r3, #1]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	813b      	strh	r3, [r7, #8]
	mag_buffer[1] = ist_read_buffer[3] << 8 | ist_read_buffer[2];
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001ef6:	78db      	ldrb	r3, [r3, #3]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001efe:	789b      	ldrb	r3, [r3, #2]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	817b      	strh	r3, [r7, #10]
	mag_buffer[2] = ist_read_buffer[5] << 8 | ist_read_buffer[4];
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f0a:	795b      	ldrb	r3, [r3, #5]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001f12:	791b      	ldrb	r3, [r3, #4]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	81bb      	strh	r3, [r7, #12]

	imu_data.mag_data.mx = mag_buffer[0];
 8001f1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f22:	841a      	strh	r2, [r3, #32]
	imu_data.mag_data.my = mag_buffer[1];
 8001f24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f2a:	845a      	strh	r2, [r3, #34]	@ 0x22
	imu_data.mag_data.mz = mag_buffer[2];
 8001f2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f32:	849a      	strh	r2, [r3, #36]	@ 0x24
	mag_data_ready(imu_data.mag_data);
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_I2C_MemRxCpltCallback+0x74>)
 8001f36:	3320      	adds	r3, #32
 8001f38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f3c:	f006 fe1c 	bl	8008b78 <mag_data_ready>
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000870 	.word	0x20000870
 8001f4c:	20000878 	.word	0x20000878

08001f50 <led_green_off>:


/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
	htim5.Instance->CCR2 = 0;
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <led_green_off+0x18>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20001b88 	.word	0x20001b88

08001f6c <led_on>:
	htim5.Instance->CCR3 = 0;
	htim5.Instance->CCR2 = 0;
	htim5.Instance->CCR1 = 0;
}

void led_on(void){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001f70:	2100      	movs	r1, #0
 8001f72:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <led_on+0x38>)
 8001f74:	f011 ff52 	bl	8013e1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001f78:	2104      	movs	r1, #4
 8001f7a:	480a      	ldr	r0, [pc, #40]	@ (8001fa4 <led_on+0x38>)
 8001f7c:	f011 ff4e 	bl	8013e1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001f80:	2108      	movs	r1, #8
 8001f82:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <led_on+0x38>)
 8001f84:	f011 ff4a 	bl	8013e1c <HAL_TIM_PWM_Start>
	htim5.Instance->CCR3 = 255;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <led_on+0x38>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	22ff      	movs	r2, #255	@ 0xff
 8001f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim5.Instance->CCR2 = 255;
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <led_on+0x38>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	22ff      	movs	r2, #255	@ 0xff
 8001f96:	639a      	str	r2, [r3, #56]	@ 0x38
	htim5.Instance->CCR1 = 255;
 8001f98:	4b02      	ldr	r3, [pc, #8]	@ (8001fa4 <led_on+0x38>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	22ff      	movs	r2, #255	@ 0xff
 8001f9e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20001b88 	.word	0x20001b88

08001fa8 <led_toggle>:
void led_toggle(void){
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));
	if (led_state == on_led)
 8001fc8:	797b      	ldrb	r3, [r7, #5]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8090 	bne.w	80020f0 <status_led+0x138>
	{
	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
		switch(led_no)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	f200 808a 	bhi.w	80020ee <status_led+0x136>
 8001fda:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe0 <status_led+0x28>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08002005 	.word	0x08002005
 8001fe4:	0800201f 	.word	0x0800201f
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	08002053 	.word	0x08002053
 8001ff0:	0800206d 	.word	0x0800206d
 8001ff4:	08002087 	.word	0x08002087
 8001ff8:	080020a1 	.word	0x080020a1
 8001ffc:	080020bb 	.word	0x080020bb
 8002000:	080020d5 	.word	0x080020d5
		{
		case 1:
			htim5.Instance->CCR3 = 255;//(0x94);
 8002004:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <status_led+0x144>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22ff      	movs	r2, #255	@ 0xff
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0xe1);
 800200c:	4b3b      	ldr	r3, [pc, #236]	@ (80020fc <status_led+0x144>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;///(0xa0);
 8002014:	4b39      	ldr	r3, [pc, #228]	@ (80020fc <status_led+0x144>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800201c:	e068      	b.n	80020f0 <status_led+0x138>
		case 2:
			htim5.Instance->CCR3 = 0;//(0x25);
 800201e:	4b37      	ldr	r3, [pc, #220]	@ (80020fc <status_led+0x144>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 255;//(0x25);
 8002026:	4b35      	ldr	r3, [pc, #212]	@ (80020fc <status_led+0x144>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	22ff      	movs	r2, #255	@ 0xff
 800202c:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;//(0x64);
 800202e:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <status_led+0x144>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002036:	e05b      	b.n	80020f0 <status_led+0x138>
		case 3:
			htim5.Instance->CCR3 = 0;//(0x52);
 8002038:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <status_led+0x144>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2200      	movs	r2, #0
 800203e:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0x0c);
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <status_led+0x144>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 255;//(0xcf);
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <status_led+0x144>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	22ff      	movs	r2, #255	@ 0xff
 800204e:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002050:	e04e      	b.n	80020f0 <status_led+0x138>
		case 4:
			htim5.Instance->CCR3 = 255;//(0x6e);
 8002052:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <status_led+0x144>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	22ff      	movs	r2, #255	@ 0xff
 8002058:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;//(0x7a);
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <status_led+0x144>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 255;//(0xf4);
 8002062:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <status_led+0x144>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800206a:	e041      	b.n	80020f0 <status_led+0x138>
		case 5:
			htim5.Instance->CCR3 = 0;
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <status_led+0x144>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 8002074:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <status_led+0x144>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <status_led+0x144>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002084:	e034      	b.n	80020f0 <status_led+0x138>
		case 6:
			htim5.Instance->CCR3 = 0;
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <status_led+0x144>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 800208e:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <status_led+0x144>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <status_led+0x144>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800209e:	e027      	b.n	80020f0 <status_led+0x138>
		case 7:
			htim5.Instance->CCR3 = 0;
 80020a0:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <status_led+0x144>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <status_led+0x144>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <status_led+0x144>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020b8:	e01a      	b.n	80020f0 <status_led+0x138>
		case 8:
			htim5.Instance->CCR3 = 0;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <status_led+0x144>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <status_led+0x144>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <status_led+0x144>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020d2:	e00d      	b.n	80020f0 <status_led+0x138>
		case 9:
			htim5.Instance->CCR3 = 0;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <status_led+0x144>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim5.Instance->CCR2 = 0;
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <status_led+0x144>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
			htim5.Instance->CCR1 = 0;
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <status_led+0x144>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80020ec:	e000      	b.n	80020f0 <status_led+0x138>

		default:
			break;
 80020ee:	bf00      	nop
		}
	}

}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	20001b88 	.word	0x20001b88

08002100 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 0201 	bic.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <micros_tick>:
#include "board_lib.h"
#include "robot_config.h"

static uint32_t gv_overflow_times = 0;

void micros_tick(){
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	gv_overflow_times ++;
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <micros_tick+0x18>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a03      	ldr	r2, [pc, #12]	@ (8002174 <micros_tick+0x18>)
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	200008b4 	.word	0x200008b4

08002178 <start_micros_timer>:

void start_micros_timer()
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	LL_TIM_SetPrescaler(TIM2, 83999999/TIMER_FREQ);
 800217c:	f240 3147 	movw	r1, #839	@ 0x347
 8002180:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002184:	f7ff ffdc 	bl	8002140 <LL_TIM_SetPrescaler>
	LL_TIM_DisableCounter(TIM2);
 8002188:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800218c:	f7ff ffc8 	bl	8002120 <LL_TIM_DisableCounter>
	TIM2->CNT =0;
 8002190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24
//	LL_TIM_DisableExternalClock(TIM2);
	LL_TIM_SetPrescaler(TIM2, 83999999/TIMER_FREQ);
 8002198:	f240 3147 	movw	r1, #839	@ 0x347
 800219c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021a0:	f7ff ffce 	bl	8002140 <LL_TIM_SetPrescaler>
//	LL_TIM_EnableUpdateEvent(TIM2);
//	LL_TIM_EnableIT_UPDATE(TIM2);
	TIM2->EGR |= TIM_EGR_UG_Msk;
 80021a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6153      	str	r3, [r2, #20]
	LL_TIM_EnableCounter(TIM2);
 80021b4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021b8:	f7ff ffa2 	bl	8002100 <LL_TIM_EnableCounter>
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <get_microseconds>:
static uint32_t current_cnt;
//T_start = get_microseconds();
//diff = T_end - T_start;
//T_end = T_start;
uint32_t get_microseconds()
{
 80021c0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
	current_cnt = TIM2->CNT;
 80021c8:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80021cc:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80021ce:	4d15      	ldr	r5, [pc, #84]	@ (8002224 <get_microseconds+0x64>)
 80021d0:	602c      	str	r4, [r5, #0]
	uint64_t temp_cnt = TIM2->CNT;
 80021d2:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80021d6:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80021d8:	2500      	movs	r5, #0
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	e9c7 0100 	strd	r0, r1, [r7]
	temp_cnt = temp_cnt * (1000000 / TIMER_FREQ);
 80021e2:	e9d7 8900 	ldrd	r8, r9, [r7]
 80021e6:	4640      	mov	r0, r8
 80021e8:	4649      	mov	r1, r9
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	f04f 0500 	mov.w	r5, #0
 80021f2:	008d      	lsls	r5, r1, #2
 80021f4:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
 80021f8:	0084      	lsls	r4, r0, #2
 80021fa:	4620      	mov	r0, r4
 80021fc:	4629      	mov	r1, r5
 80021fe:	eb10 0208 	adds.w	r2, r0, r8
 8002202:	eb41 0309 	adc.w	r3, r1, r9
 8002206:	eb12 0a02 	adds.w	sl, r2, r2
 800220a:	eb43 0b03 	adc.w	fp, r3, r3
 800220e:	4652      	mov	r2, sl
 8002210:	465b      	mov	r3, fp
 8002212:	e9c7 2300 	strd	r2, r3, [r7]
	return (uint32_t)temp_cnt;
 8002216:	683b      	ldr	r3, [r7, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002222:	4770      	bx	lr
 8002224:	200008b8 	.word	0x200008b8

08002228 <queue_init>:
#include "bsp_queue.h"
#include <string.h>



QueueOpStat_t queue_init(queue_t* queue){
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	723b      	strb	r3, [r7, #8]
	if (queue == NULL){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d104      	bne.n	8002244 <queue_init+0x1c>
		op_stat.op_status = Q_INVALID;
 800223a:	2304      	movs	r3, #4
 800223c:	723b      	strb	r3, [r7, #8]
		return op_stat;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e00d      	b.n	8002260 <queue_init+0x38>
	}
	queue->curr_byte_pos = 0;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	queue->last_byte_pos=0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	queue->last_time=0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	return op_stat;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60fb      	str	r3, [r7, #12]
}
 8002260:	2300      	movs	r3, #0
 8002262:	89ba      	ldrh	r2, [r7, #12]
 8002264:	f362 030f 	bfi	r3, r2, #0, #16
 8002268:	89fa      	ldrh	r2, [r7, #14]
 800226a:	f362 431f 	bfi	r3, r2, #16, #16
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <queue_get_size>:

uint16_t queue_get_size(queue_t* queue){
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
	uint16_t size = queue->last_byte_pos - queue->curr_byte_pos;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	81fb      	strh	r3, [r7, #14]
	size = (size > TQUEUE_SIZE) ? size + TQUEUE_SIZE : size;
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002298:	d904      	bls.n	80022a4 <queue_get_size+0x2a>
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	e000      	b.n	80022a6 <queue_get_size+0x2c>
 80022a4:	89fb      	ldrh	r3, [r7, #14]
 80022a6:	81fb      	strh	r3, [r7, #14]
	return size;
 80022a8:	89fb      	ldrh	r3, [r7, #14]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <queue_append_byte>:

/*
 * Adds a byte to the end of the byte_queue
 * Add one byte at a time!
 */
QueueOpStat_t queue_append_byte(queue_t* queue, uint8_t data){
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
	QueueOpStat_t op_stat;
	op_stat.op_status = Q_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	723b      	strb	r3, [r7, #8]
	queue->last_time = HAL_GetTick();
 80022c6:	f00b fb17 	bl	800d8f8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	queue->queue[queue->last_byte_pos] = data;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022d8:	4619      	mov	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	545a      	strb	r2, [r3, r1]
	op_stat.bytes_appended = 1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	817b      	strh	r3, [r7, #10]
	queue->last_byte_pos = (queue->last_byte_pos >= TQUEUE_SIZE-1) ? 0 : queue->last_byte_pos + 1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80022ec:	d805      	bhi.n	80022fa <queue_append_byte+0x44>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80022f4:	3301      	adds	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	e000      	b.n	80022fc <queue_append_byte+0x46>
 80022fa:	2200      	movs	r2, #0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	if (queue_get_size(queue) > TQUEUE_SIZE) {
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffb9 	bl	800227a <queue_get_size>
 8002308:	4603      	mov	r3, r0
 800230a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800230e:	d913      	bls.n	8002338 <queue_append_byte+0x82>
		op_stat.op_status = Q_FULL;
 8002310:	2301      	movs	r3, #1
 8002312:	723b      	strb	r3, [r7, #8]
		queue->curr_byte_pos = (queue->curr_byte_pos == TQUEUE_SIZE-1) ? 0 : queue->curr_byte_pos+1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800231a:	2bff      	cmp	r3, #255	@ 0xff
 800231c:	d005      	beq.n	800232a <queue_append_byte+0x74>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002324:	3301      	adds	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	e000      	b.n	800232c <queue_append_byte+0x76>
 800232a:	2200      	movs	r2, #0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		return op_stat;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e001      	b.n	800233c <queue_append_byte+0x86>
	}
	return op_stat;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60fb      	str	r3, [r7, #12]
}
 800233c:	2300      	movs	r3, #0
 800233e:	89ba      	ldrh	r2, [r7, #12]
 8002340:	f362 030f 	bfi	r3, r2, #0, #16
 8002344:	89fa      	ldrh	r2, [r7, #14]
 8002346:	f362 431f 	bfi	r3, r2, #16, #16
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <queue_pop_element>:
		len--;
	}
	return op_stat;
}

uint8_t queue_pop_element(queue_t* queue){
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	if (queue_get_size(queue) == 0){
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff8d 	bl	800227a <queue_get_size>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <queue_pop_element+0x18>
		return 0;
 8002366:	2300      	movs	r3, #0
 8002368:	e01c      	b.n	80023a4 <queue_pop_element+0x52>
	} else {
		queue->curr_byte_pos +=1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002370:	3301      	adds	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002380:	2bff      	cmp	r3, #255	@ 0xff
 8002382:	d803      	bhi.n	800238c <queue_pop_element+0x3a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 800238a:	e000      	b.n	800238e <queue_pop_element+0x3c>
 800238c:	2200      	movs	r2, #0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
				0:queue->curr_byte_pos;
		uint8_t temp =queue->queue[queue->curr_byte_pos];
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	73fb      	strb	r3, [r7, #15]
		return temp;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <queue_pop_elements>:


QueueOpStat_t queue_pop_elements(queue_t* queue, uint8_t* data, uint16_t len){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
		QueueOpStat_t op_stat;
		uint16_t q_size = queue_get_size(queue);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff5d 	bl	800227a <queue_get_size>
 80023c0:	4603      	mov	r3, r0
 80023c2:	83fb      	strh	r3, [r7, #30]
		if (q_size < len){
 80023c4:	8bfa      	ldrh	r2, [r7, #30]
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d203      	bcs.n	80023d4 <queue_pop_elements+0x28>
			op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80023cc:	2303      	movs	r3, #3
 80023ce:	753b      	strb	r3, [r7, #20]
			len = q_size;
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	80fb      	strh	r3, [r7, #6]
		}

		uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80023da:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80023de:	83bb      	strh	r3, [r7, #28]
		if (bytes_to_end >= len){
 80023e0:	8bba      	ldrh	r2, [r7, #28]
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d30b      	bcc.n	8002400 <queue_pop_elements+0x54>
			memcpy(data, &queue->queue[queue->curr_byte_pos], len);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	4619      	mov	r1, r3
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f01b fa33 	bl	801d864 <memcpy>
 80023fe:	e014      	b.n	800242a <queue_pop_elements+0x7e>
		} else {
			memcpy(data, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	8bba      	ldrh	r2, [r7, #28]
 800240e:	4619      	mov	r1, r3
 8002410:	68b8      	ldr	r0, [r7, #8]
 8002412:	f01b fa27 	bl	801d864 <memcpy>
			memcpy((data+bytes_to_end), &queue->queue[0],(len-bytes_to_end));
 8002416:	8bbb      	ldrh	r3, [r7, #28]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	18d0      	adds	r0, r2, r3
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	8bbb      	ldrh	r3, [r7, #28]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	461a      	mov	r2, r3
 8002426:	f01b fa1d 	bl	801d864 <memcpy>
		}

		queue->curr_byte_pos += len;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4413      	add	r3, r2
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002442:	2bff      	cmp	r3, #255	@ 0xff
 8002444:	d906      	bls.n	8002454 <queue_pop_elements+0xa8>
				queue->curr_byte_pos-TQUEUE_SIZE : queue->curr_byte_pos;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
		queue->curr_byte_pos = (queue->curr_byte_pos >= TQUEUE_SIZE) ?
 800244c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002450:	b29b      	uxth	r3, r3
 8002452:	e002      	b.n	800245a <queue_pop_elements+0xae>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	f8a2 3102 	strh.w	r3, [r2, #258]	@ 0x102

	return op_stat;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	2300      	movs	r3, #0
 8002466:	8b3a      	ldrh	r2, [r7, #24]
 8002468:	f362 030f 	bfi	r3, r2, #0, #16
 800246c:	8b7a      	ldrh	r2, [r7, #26]
 800246e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <queue_peek>:

uint8_t queue_peek(queue_t* queue){
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	if (queue_get_size(queue)>0){
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fef9 	bl	800227a <queue_get_size>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <queue_peek+0x22>
		return queue->queue[queue->curr_byte_pos];
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002494:	461a      	mov	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	5c9b      	ldrb	r3, [r3, r2]
 800249a:	e000      	b.n	800249e <queue_peek+0x24>
	}
	else{
		return 0;
 800249c:	2300      	movs	r3, #0
	}
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <queue_peek_number>:

QueueOpStat_t queue_peek_number(queue_t* queue, uint8_t* buffer,uint16_t size){
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b088      	sub	sp, #32
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
	QueueOpStat_t op_stat;
	queue->last_time = HAL_GetTick();
 80024b4:	f00b fa20 	bl	800d8f8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	op_stat.op_status = Q_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	753b      	strb	r3, [r7, #20]
	uint16_t q_size = queue_get_size(queue);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fed8 	bl	800227a <queue_get_size>
 80024ca:	4603      	mov	r3, r0
 80024cc:	83fb      	strh	r3, [r7, #30]
	uint16_t bytes_to_end = TQUEUE_SIZE-queue->curr_byte_pos;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80024d4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80024d8:	83bb      	strh	r3, [r7, #28]
	if (q_size < size){
 80024da:	8bfa      	ldrh	r2, [r7, #30]
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d203      	bcs.n	80024ea <queue_peek_number+0x44>
		op_stat.op_status = Q_NOT_ENOUGH_BYTES;
 80024e2:	2303      	movs	r3, #3
 80024e4:	753b      	strb	r3, [r7, #20]
		size = q_size;
 80024e6:	8bfb      	ldrh	r3, [r7, #30]
 80024e8:	80fb      	strh	r3, [r7, #6]
	}

	if (bytes_to_end >= size){
 80024ea:	8bba      	ldrh	r2, [r7, #28]
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d30b      	bcc.n	800250a <queue_peek_number+0x64>
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], size);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80024f8:	461a      	mov	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	4619      	mov	r1, r3
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	f01b f9ae 	bl	801d864 <memcpy>
 8002508:	e014      	b.n	8002534 <queue_peek_number+0x8e>
	} else {
		memcpy(buffer, &queue->queue[queue->curr_byte_pos], bytes_to_end);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002510:	461a      	mov	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4413      	add	r3, r2
 8002516:	8bba      	ldrh	r2, [r7, #28]
 8002518:	4619      	mov	r1, r3
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	f01b f9a2 	bl	801d864 <memcpy>
		memcpy((buffer+bytes_to_end), &queue->queue[0],(size-bytes_to_end));
 8002520:	8bbb      	ldrh	r3, [r7, #28]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	18d0      	adds	r0, r2, r3
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	88fa      	ldrh	r2, [r7, #6]
 800252a:	8bbb      	ldrh	r3, [r7, #28]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	461a      	mov	r2, r3
 8002530:	f01b f998 	bl	801d864 <memcpy>
	}
	op_stat.bytes_appended = size;
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	82fb      	strh	r3, [r7, #22]
	return op_stat;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	2300      	movs	r3, #0
 800253e:	8b3a      	ldrh	r2, [r7, #24]
 8002540:	f362 030f 	bfi	r3, r2, #0, #16
 8002544:	8b7a      	ldrh	r2, [r7, #26]
 8002546:	f362 431f 	bfi	r3, r2, #16, #16
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <ref_process_data>:
	HEADER,
	DATA
};


ref_processing_status_t ref_process_data(queue_t *uart_queue, ref_msg_t *proc_msg){
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b097      	sub	sp, #92	@ 0x5c
 8002558:	af00      	add	r7, sp, #0
 800255a:	6578      	str	r0, [r7, #84]	@ 0x54
 800255c:	6539      	str	r1, [r7, #80]	@ 0x50
	static uint8_t state = 0;
	static ref_frame_header_t header;
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 800255e:	e066      	b.n	800262e <ref_process_data+0xda>
		switch(state){
 8002560:	4b38      	ldr	r3, [pc, #224]	@ (8002644 <ref_process_data+0xf0>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <ref_process_data+0x1a>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d036      	beq.n	80025da <ref_process_data+0x86>
 800256c:	e05f      	b.n	800262e <ref_process_data+0xda>
			case HEADER:
				if (queue_get_size(uart_queue)< REF_HEADER_SIZE+2 ){
 800256e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002570:	f7ff fe83 	bl	800227a <queue_get_size>
 8002574:	4603      	mov	r3, r0
 8002576:	2b06      	cmp	r3, #6
 8002578:	d801      	bhi.n	800257e <ref_process_data+0x2a>
					return INSUFFICIENT_DATA;
 800257a:	2302      	movs	r3, #2
 800257c:	e05e      	b.n	800263c <ref_process_data+0xe8>
				}
				if (queue_peek(uart_queue) != 0xA5){
 800257e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002580:	f7ff ff7b 	bl	800247a <queue_peek>
 8002584:	4603      	mov	r3, r0
 8002586:	2ba5      	cmp	r3, #165	@ 0xa5
 8002588:	d003      	beq.n	8002592 <ref_process_data+0x3e>
					queue_pop_element(uart_queue);
 800258a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800258c:	f7ff fee1 	bl	8002352 <queue_pop_element>
						state = DATA;
					} else {
						return INSUFFICIENT_DATA;
					}
				}
				break;
 8002590:	e04d      	b.n	800262e <ref_process_data+0xda>
					if (queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 8002592:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002594:	f7ff fe71 	bl	800227a <queue_get_size>
 8002598:	4603      	mov	r3, r0
 800259a:	2b07      	cmp	r3, #7
 800259c:	d91b      	bls.n	80025d6 <ref_process_data+0x82>
						header = ref_get_header(uart_queue);
 800259e:	4c2a      	ldr	r4, [pc, #168]	@ (8002648 <ref_process_data+0xf4>)
 80025a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f850 	bl	800264c <ref_get_header>
 80025ac:	4622      	mov	r2, r4
 80025ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	6010      	str	r0, [r2, #0]
 80025b6:	8899      	ldrh	r1, [r3, #4]
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	8091      	strh	r1, [r2, #4]
 80025bc:	7193      	strb	r3, [r2, #6]
						if (header.cmd_id == 0xFFFF){
 80025be:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <ref_process_data+0xf4>)
 80025c0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02c      	beq.n	8002628 <ref_process_data+0xd4>
						state = DATA;
 80025ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <ref_process_data+0xf0>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
				break;
 80025d4:	e02b      	b.n	800262e <ref_process_data+0xda>
						return INSUFFICIENT_DATA;
 80025d6:	2302      	movs	r3, #2
 80025d8:	e030      	b.n	800263c <ref_process_data+0xe8>
			case DATA:
				//wait until enough data to fill data
				if (queue_get_size(uart_queue) > header.data_length+4+REF_HEADER_SIZE){
 80025da:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025dc:	f7ff fe4d 	bl	800227a <queue_get_size>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <ref_process_data+0xf4>)
 80025e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3309      	adds	r3, #9
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dd18      	ble.n	8002624 <ref_process_data+0xd0>
					state = HEADER;
 80025f2:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <ref_process_data+0xf0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
					*proc_msg = ref_get_msg(header,uart_queue);
 80025f8:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 80025fa:	4638      	mov	r0, r7
 80025fc:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <ref_process_data+0xf4>)
 80025fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002600:	ca06      	ldmia	r2, {r1, r2}
 8002602:	f000 f89b 	bl	800273c <ref_get_msg>
 8002606:	4620      	mov	r0, r4
 8002608:	463b      	mov	r3, r7
 800260a:	2242      	movs	r2, #66	@ 0x42
 800260c:	4619      	mov	r1, r3
 800260e:	f01b f929 	bl	801d864 <memcpy>
					if (proc_msg->cmd_id!= 0xFFFF){
 8002612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800261c:	4293      	cmp	r3, r2
 800261e:	d005      	beq.n	800262c <ref_process_data+0xd8>
						return PROCESS_SUCCESS;
 8002620:	2300      	movs	r3, #0
 8002622:	e00b      	b.n	800263c <ref_process_data+0xe8>
					} else {
						break;
					}
				} else{
					return INSUFFICIENT_DATA;
 8002624:	2302      	movs	r3, #2
 8002626:	e009      	b.n	800263c <ref_process_data+0xe8>
							break;
 8002628:	bf00      	nop
 800262a:	e000      	b.n	800262e <ref_process_data+0xda>
						break;
 800262c:	bf00      	nop
	while(queue_get_size(uart_queue) > REF_HEADER_SIZE+2){
 800262e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002630:	f7ff fe23 	bl	800227a <queue_get_size>
 8002634:	4603      	mov	r3, r0
 8002636:	2b07      	cmp	r3, #7
 8002638:	d892      	bhi.n	8002560 <ref_process_data+0xc>
				}
				break;
			}
	}
	return INSUFFICIENT_DATA;
 800263a:	2302      	movs	r3, #2
}
 800263c:	4618      	mov	r0, r3
 800263e:	375c      	adds	r7, #92	@ 0x5c
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	200008bc 	.word	0x200008bc
 8002648:	200008c0 	.word	0x200008c0

0800264c <ref_get_header>:

ref_frame_header_t ref_get_header(queue_t *data_buffer){
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	ref_frame_header_t ret_header;
	//+2 for cmd ID
	uint8_t temp_data[REF_HEADER_SIZE+2];
	queue_peek_number(data_buffer, temp_data, 7);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	2207      	movs	r2, #7
 800265c:	4619      	mov	r1, r3
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f7ff ff21 	bl	80024a6 <queue_peek_number>
	ret_header.start_frame = temp_data[0];
 8002664:	7b3b      	ldrb	r3, [r7, #12]
 8002666:	753b      	strb	r3, [r7, #20]
	if (ret_header.start_frame!= 0xA5){
 8002668:	7d3b      	ldrb	r3, [r7, #20]
 800266a:	2ba5      	cmp	r3, #165	@ 0xa5
 800266c:	d013      	beq.n	8002696 <ref_get_header+0x4a>
		queue_pop_element(data_buffer);
 800266e:	6838      	ldr	r0, [r7, #0]
 8002670:	f7ff fe6f 	bl	8002352 <queue_pop_element>
		ret_header.cmd_id=0xFFFF;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	767b      	strb	r3, [r7, #25]
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	76bb      	strb	r3, [r7, #26]
		return ret_header;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	6010      	str	r0, [r2, #0]
 800268c:	8899      	ldrh	r1, [r3, #4]
 800268e:	799b      	ldrb	r3, [r3, #6]
 8002690:	8091      	strh	r1, [r2, #4]
 8002692:	7193      	strb	r3, [r2, #6]
 8002694:	e04d      	b.n	8002732 <ref_get_header+0xe6>
	}

	ret_header.data_length = ((uint16_t) temp_data[2] << 8 | temp_data[1]);
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21a      	sxth	r2, r3
 800269c:	7b7b      	ldrb	r3, [r7, #13]
 800269e:	b21b      	sxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f8a7 3015 	strh.w	r3, [r7, #21]
	ret_header.seq = temp_data[3];
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	75fb      	strb	r3, [r7, #23]
	ret_header.crc = temp_data[4];
 80026ae:	7c3b      	ldrb	r3, [r7, #16]
 80026b0:	763b      	strb	r3, [r7, #24]
	int crc_check = verify_CRC8_check_sum(temp_data, 5);
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	2105      	movs	r1, #5
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fc7f 	bl	8000fbc <verify_CRC8_check_sum>
 80026be:	4603      	mov	r3, r0
 80026c0:	61fb      	str	r3, [r7, #28]
	ret_header.cmd_id = (temp_data[6]) << 8 | temp_data[5];
 80026c2:	7cbb      	ldrb	r3, [r7, #18]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	7c7b      	ldrb	r3, [r7, #17]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f8a7 3019 	strh.w	r3, [r7, #25]
	if (!crc_check || ret_header.data_length > TQUEUE_SIZE || ret_header.cmd_id > 0x305) {
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <ref_get_header+0xaa>
 80026dc:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e6:	d806      	bhi.n	80026f6 <ref_get_header+0xaa>
 80026e8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f240 3205 	movw	r2, #773	@ 0x305
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d913      	bls.n	800271e <ref_get_header+0xd2>
		ret_header.cmd_id=0xFFFF;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	767b      	strb	r3, [r7, #25]
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	76bb      	strb	r3, [r7, #26]
		queue_pop_element(data_buffer);
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f7ff fe25 	bl	8002352 <queue_pop_element>
		return ret_header;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	461a      	mov	r2, r3
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	6010      	str	r0, [r2, #0]
 8002714:	8899      	ldrh	r1, [r3, #4]
 8002716:	799b      	ldrb	r3, [r3, #6]
 8002718:	8091      	strh	r1, [r2, #4]
 800271a:	7193      	strb	r3, [r2, #6]
 800271c:	e009      	b.n	8002732 <ref_get_header+0xe6>
	}
//	queue_remove_number(data_buffer, REF_HEADER_SIZE);
	return ret_header;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	461a      	mov	r2, r3
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	6010      	str	r0, [r2, #0]
 800272a:	8899      	ldrh	r1, [r3, #4]
 800272c:	799b      	ldrb	r3, [r3, #6]
 800272e:	8091      	strh	r1, [r2, #4]
 8002730:	7193      	strb	r3, [r2, #6]
}
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <ref_get_msg>:



ref_msg_t ref_get_msg(ref_frame_header_t header,queue_t *uart_queue) {
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b0d8      	sub	sp, #352	@ 0x160
 8002740:	af00      	add	r7, sp, #0
 8002742:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 8002746:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 800274a:	6020      	str	r0, [r4, #0]
 800274c:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002750:	f5a0 70ae 	sub.w	r0, r0, #348	@ 0x15c
 8002754:	e880 0006 	stmia.w	r0, {r1, r2}
 8002758:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800275c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002760:	6013      	str	r3, [r2, #0]
	uint8_t temp_buffer[TQUEUE_SIZE];
	ref_msg_t buffer_msg;
	//+ 2 for CRC16
	queue_pop_elements(uart_queue, temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002762:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002766:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800276a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800276e:	b29b      	uxth	r3, r3
 8002770:	3309      	adds	r3, #9
 8002772:	b29a      	uxth	r2, r3
 8002774:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002778:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800277c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	f7ff fe13 	bl	80023ac <queue_pop_elements>

	uint32_t crc_test = verify_CRC16_check_sum(temp_buffer, header.data_length+REF_HEADER_SIZE+4);
 8002786:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800278a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800278e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002792:	b29b      	uxth	r3, r3
 8002794:	3309      	adds	r3, #9
 8002796:	461a      	mov	r2, r3
 8002798:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fc80 	bl	80010a4 <verify_CRC16_check_sum>
 80027a4:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
	if (!crc_test){
 80027a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <ref_get_msg+0xa2>
		buffer_msg.cmd_id = 0xFFFF;
 80027b0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027bc:	801a      	strh	r2, [r3, #0]
		return buffer_msg;
 80027be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	2342      	movs	r3, #66	@ 0x42
 80027d6:	461a      	mov	r2, r3
 80027d8:	f01b f844 	bl	801d864 <memcpy>
 80027dc:	e1a1      	b.n	8002b22 <ref_get_msg+0x3e6>
	}
	//shift 2 bytes to the right to get pointer to the actual start of data
	uint8_t* data_buffer = temp_buffer+2+REF_HEADER_SIZE;
 80027de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027e2:	3307      	adds	r3, #7
 80027e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	buffer_msg.cmd_id = header.cmd_id;
 80027e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027ec:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80027f0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80027fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027fe:	801a      	strh	r2, [r3, #0]
	switch (header.cmd_id) {
 8002800:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002804:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002808:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f240 3202 	movw	r2, #770	@ 0x302
 8002812:	4293      	cmp	r3, r2
 8002814:	f000 815e 	beq.w	8002ad4 <ref_get_msg+0x398>
 8002818:	f240 3202 	movw	r2, #770	@ 0x302
 800281c:	4293      	cmp	r3, r2
 800281e:	f300 8169 	bgt.w	8002af4 <ref_get_msg+0x3b8>
 8002822:	f240 3201 	movw	r2, #769	@ 0x301
 8002826:	4293      	cmp	r3, r2
 8002828:	f000 8148 	beq.w	8002abc <ref_get_msg+0x380>
 800282c:	f240 3201 	movw	r2, #769	@ 0x301
 8002830:	4293      	cmp	r3, r2
 8002832:	f300 815f 	bgt.w	8002af4 <ref_get_msg+0x3b8>
 8002836:	f240 220a 	movw	r2, #522	@ 0x20a
 800283a:	4293      	cmp	r3, r2
 800283c:	f300 815a 	bgt.w	8002af4 <ref_get_msg+0x3b8>
 8002840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002844:	dc04      	bgt.n	8002850 <ref_get_msg+0x114>
 8002846:	2b04      	cmp	r3, #4
 8002848:	dc40      	bgt.n	80028cc <ref_get_msg+0x190>
 800284a:	2b00      	cmp	r3, #0
 800284c:	dc2e      	bgt.n	80028ac <ref_get_msg+0x170>
 800284e:	e151      	b.n	8002af4 <ref_get_msg+0x3b8>
 8002850:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002854:	2b09      	cmp	r3, #9
 8002856:	f200 814d 	bhi.w	8002af4 <ref_get_msg+0x3b8>
 800285a:	a201      	add	r2, pc, #4	@ (adr r2, 8002860 <ref_get_msg+0x124>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	080029b5 	.word	0x080029b5
 8002864:	080029e5 	.word	0x080029e5
 8002868:	08002a05 	.word	0x08002a05
 800286c:	08002a21 	.word	0x08002a21
 8002870:	08002a39 	.word	0x08002a39
 8002874:	08002a4d 	.word	0x08002a4d
 8002878:	08002a5f 	.word	0x08002a5f
 800287c:	08002a7b 	.word	0x08002a7b
 8002880:	08002a93 	.word	0x08002a93
 8002884:	08002aa9 	.word	0x08002aa9
 8002888:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800288c:	2b04      	cmp	r3, #4
 800288e:	f200 8131 	bhi.w	8002af4 <ref_get_msg+0x3b8>
 8002892:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <ref_get_msg+0x15c>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	0800294b 	.word	0x0800294b
 800289c:	08002961 	.word	0x08002961
 80028a0:	08002977 	.word	0x08002977
 80028a4:	0800298f 	.word	0x0800298f
 80028a8:	080029a3 	.word	0x080029a3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	f200 8120 	bhi.w	8002af4 <ref_get_msg+0x3b8>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <ref_get_msg+0x180>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028dd 	.word	0x080028dd
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	08002907 	.word	0x08002907
 80028c8:	08002933 	.word	0x08002933
 80028cc:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80028d0:	f280 8110 	bge.w	8002af4 <ref_get_msg+0x3b8>
 80028d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d8:	dcd6      	bgt.n	8002888 <ref_get_msg+0x14c>
 80028da:	e10b      	b.n	8002af4 <ref_get_msg+0x3b8>
	case REF_GAME_STATE_CMD_ID:
		memcpy(&buffer_msg.data.game_state, 	(data_buffer), sizeof(ref_game_state_t));
 80028dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80028e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80028e4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80028e8:	3302      	adds	r3, #2
 80028ea:	8811      	ldrh	r1, [r2, #0]
 80028ec:	7892      	ldrb	r2, [r2, #2]
 80028ee:	8019      	strh	r1, [r3, #0]
 80028f0:	709a      	strb	r2, [r3, #2]
		break;
 80028f2:	e107      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_GAME_RESULT_ID:
		memcpy(&buffer_msg.data.game_result, 	(data_buffer), sizeof(ref_game_result_t));
 80028f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80028fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002902:	709a      	strb	r2, [r3, #2]
		break;
 8002904:	e0fe      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_HP_CMD_ID:
		memcpy(&buffer_msg.data.robot_hp, 		(data_buffer), sizeof(ref_game_robot_HP_t));
 8002906:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800290a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800290e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002912:	3302      	adds	r3, #2
 8002914:	6814      	ldr	r4, [r2, #0]
 8002916:	6850      	ldr	r0, [r2, #4]
 8002918:	6891      	ldr	r1, [r2, #8]
 800291a:	68d5      	ldr	r5, [r2, #12]
 800291c:	601c      	str	r4, [r3, #0]
 800291e:	6058      	str	r0, [r3, #4]
 8002920:	6099      	str	r1, [r3, #8]
 8002922:	60dd      	str	r5, [r3, #12]
 8002924:	6914      	ldr	r4, [r2, #16]
 8002926:	6950      	ldr	r0, [r2, #20]
 8002928:	6991      	ldr	r1, [r2, #24]
 800292a:	611c      	str	r4, [r3, #16]
 800292c:	6158      	str	r0, [r3, #20]
 800292e:	6199      	str	r1, [r3, #24]
		break;
 8002930:	e0e8      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_DART_LAUNCH_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_status, 	(data_buffer), sizeof(ref_dart_status_t));
 8002932:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002936:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800293a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800293e:	3302      	adds	r3, #2
 8002940:	8811      	ldrh	r1, [r2, #0]
 8002942:	7892      	ldrb	r2, [r2, #2]
 8002944:	8019      	strh	r1, [r3, #0]
 8002946:	709a      	strb	r2, [r3, #2]
		break;
 8002948:	e0dc      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_GAME_EVENT_CMD_ID:
		memcpy(&buffer_msg.data.game_event, 	(data_buffer), sizeof(ref_game_event_data_t));
 800294a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002956:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800295a:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 800295e:	e0d1      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_SUPPLIER_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_state, (data_buffer),sizeof(ref_supply_projectile_data_t));
 8002960:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800296c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002970:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002974:	e0c6      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_SUPPLIER_BOOKING_CMD_ID:
		memcpy(&buffer_msg.data.projectile_supply_queue, (data_buffer),sizeof(ref_supply_projectile_booking_t));
 8002976:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800297a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800297e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002982:	3302      	adds	r3, #2
 8002984:	8811      	ldrh	r1, [r2, #0]
 8002986:	7892      	ldrb	r2, [r2, #2]
 8002988:	8019      	strh	r1, [r3, #0]
 800298a:	709a      	strb	r2, [r3, #2]
		break;
 800298c:	e0ba      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_FOUL_CMD_ID:
		memcpy(&buffer_msg.data.referee_warning,(data_buffer), sizeof(ref_referee_warning_t));
 800298e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29a      	uxth	r2, r3
 8002996:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800299a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800299e:	805a      	strh	r2, [r3, #2]
		break;
 80029a0:	e0b0      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_DART_COOLDOWN_CMD_ID:
		memcpy(&buffer_msg.data.dart_cooldown, 	(data_buffer), sizeof(ref_dart_cooldown_t));
 80029a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029b0:	709a      	strb	r2, [r3, #2]
		break;
 80029b2:	e0a7      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_state, 	(data_buffer), sizeof(ref_game_robot_data_t));
 80029b4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029bc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80029c0:	3302      	adds	r3, #2
 80029c2:	6810      	ldr	r0, [r2, #0]
 80029c4:	6851      	ldr	r1, [r2, #4]
 80029c6:	6895      	ldr	r5, [r2, #8]
 80029c8:	68d4      	ldr	r4, [r2, #12]
 80029ca:	6018      	str	r0, [r3, #0]
 80029cc:	6059      	str	r1, [r3, #4]
 80029ce:	609d      	str	r5, [r3, #8]
 80029d0:	60dc      	str	r4, [r3, #12]
 80029d2:	6910      	ldr	r0, [r2, #16]
 80029d4:	6951      	ldr	r1, [r2, #20]
 80029d6:	6118      	str	r0, [r3, #16]
 80029d8:	6159      	str	r1, [r3, #20]
 80029da:	8b11      	ldrh	r1, [r2, #24]
 80029dc:	7e92      	ldrb	r2, [r2, #26]
 80029de:	8319      	strh	r1, [r3, #24]
 80029e0:	769a      	strb	r2, [r3, #26]
		break;
 80029e2:	e08f      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_POWER_DATA_CMD_ID:
		memcpy(&buffer_msg.data.power_data, 	(data_buffer), sizeof(ref_robot_power_data_t));
 80029e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80029e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029ec:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80029f0:	3302      	adds	r3, #2
 80029f2:	6814      	ldr	r4, [r2, #0]
 80029f4:	6850      	ldr	r0, [r2, #4]
 80029f6:	6891      	ldr	r1, [r2, #8]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	601c      	str	r4, [r3, #0]
 80029fc:	6058      	str	r0, [r3, #4]
 80029fe:	6099      	str	r1, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
		break;
 8002a02:	e07f      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_POS_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_pos, 		(data_buffer), sizeof(ref_game_robot_pos_t));
 8002a04:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a08:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a0c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a10:	3302      	adds	r3, #2
 8002a12:	6810      	ldr	r0, [r2, #0]
 8002a14:	6851      	ldr	r1, [r2, #4]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	6018      	str	r0, [r3, #0]
 8002a1a:	6059      	str	r1, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
		break;
 8002a1e:	e071      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.robot_buff, 	(data_buffer), sizeof(ref_buff_data_t));
 8002a20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a28:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	6811      	ldr	r1, [r2, #0]
 8002a30:	6019      	str	r1, [r3, #0]
 8002a32:	8892      	ldrh	r2, [r2, #4]
 8002a34:	809a      	strh	r2, [r3, #4]
		break;
 8002a36:	e065      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_AERIAL_ENERGY_DATA_CMD_ID:
		memcpy(&buffer_msg.data.aerial_energy, 	(data_buffer), sizeof(ref_aerial_robot_energy_t));
 8002a38:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a44:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a48:	805a      	strh	r2, [r3, #2]
		break;
 8002a4a:	e05b      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_DMG_DATA_CMD_ID:
		memcpy(&buffer_msg.data.damage_data, 	(data_buffer), sizeof(ref_robot_dmg_t));
 8002a4c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a5a:	709a      	strb	r2, [r3, #2]
		break;
 8002a5c:	e052      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_SHOOT_DATA_CMD_ID:
		memcpy(&buffer_msg.data.shooting_data, 	(data_buffer), sizeof(ref_shoot_data_t));
 8002a5e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a66:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	6811      	ldr	r1, [r2, #0]
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	8891      	ldrh	r1, [r2, #4]
 8002a72:	7992      	ldrb	r2, [r2, #6]
 8002a74:	8099      	strh	r1, [r3, #4]
 8002a76:	719a      	strb	r2, [r3, #6]
		break;
 8002a78:	e044      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_MAGAZINE_DATA_CMD_ID:
		memcpy(&buffer_msg.data.magazine_data, 	(data_buffer), sizeof(ref_magazine_data_t));
 8002a7a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a7e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a82:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002a86:	3302      	adds	r3, #2
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	6019      	str	r1, [r3, #0]
 8002a8c:	8892      	ldrh	r2, [r2, #4]
 8002a8e:	809a      	strh	r2, [r3, #4]
		break;
 8002a90:	e038      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_RFID_BUFF_DATA_CMD_ID:
		memcpy(&buffer_msg.data.rfid_buff, 		(data_buffer), sizeof(ref_rfid_status_t));
 8002a92:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002a9e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002aa2:	f8c3 2002 	str.w	r2, [r3, #2]
		break;
 8002aa6:	e02d      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_DART_STATUS_CMD_ID:
		memcpy(&buffer_msg.data.dart_cmd, 		(data_buffer), sizeof(ref_dart_status_t));
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	3302      	adds	r3, #2
 8002aae:	2203      	movs	r2, #3
 8002ab0:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f01a fed5 	bl	801d864 <memcpy>
		break;
 8002aba:	e023      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_ROBOT_COMMS_CMD_ID:
		memcpy(&buffer_msg.data.robot_comms, 	(data_buffer), sizeof(ref_inter_robot_data_t));
 8002abc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002ac0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ac4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002ac8:	3302      	adds	r3, #2
 8002aca:	6811      	ldr	r1, [r2, #0]
 8002acc:	6019      	str	r1, [r3, #0]
 8002ace:	8892      	ldrh	r2, [r2, #4]
 8002ad0:	809a      	strh	r2, [r3, #4]
		break;
 8002ad2:	e017      	b.n	8002b04 <ref_get_msg+0x3c8>
	case REF_CUSTOM_DATA_CMD_ID:
		memcpy(&buffer_msg.data.custom_data, 	(data_buffer), sizeof(ref_custom_data_t));
 8002ad4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002ad8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002adc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	6814      	ldr	r4, [r2, #0]
 8002ae4:	6850      	ldr	r0, [r2, #4]
 8002ae6:	6891      	ldr	r1, [r2, #8]
 8002ae8:	601c      	str	r4, [r3, #0]
 8002aea:	6058      	str	r0, [r3, #4]
 8002aec:	6099      	str	r1, [r3, #8]
 8002aee:	7b12      	ldrb	r2, [r2, #12]
 8002af0:	731a      	strb	r2, [r3, #12]
		break;
 8002af2:	e007      	b.n	8002b04 <ref_get_msg+0x3c8>
	default:
		buffer_msg.cmd_id = 0xFFFF;
 8002af4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002af8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b00:	801a      	strh	r2, [r3, #0]
		break;
 8002b02:	bf00      	nop
	}
	//remove cmd id + data
	return buffer_msg;
 8002b04:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b12:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	2342      	movs	r3, #66	@ 0x42
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f01a fea1 	bl	801d864 <memcpy>
}
 8002b22:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}

08002b34 <ref_usart_start>:
HAL_StatusTypeDef ref_usart_send(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size){
	return HAL_UART_Transmit_DMA(huart, pData, Size);
}

HAL_StatusTypeDef ref_usart_start(UART_HandleTypeDef *huart,uint8_t *pData, uint16_t Size,queue_t *uart_queue)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
	//queue to be stored in the original caller function
	ref_UART_queue = uart_queue;
 8002b44:	4a3a      	ldr	r2, [pc, #232]	@ (8002c30 <ref_usart_start+0xfc>)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6013      	str	r3, [r2, #0]
	queue_init(ref_UART_queue);
 8002b4a:	4b39      	ldr	r3, [pc, #228]	@ (8002c30 <ref_usart_start+0xfc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fb6a 	bl	8002228 <queue_init>
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d162      	bne.n	8002c26 <ref_usart_start+0xf2>
		if ((pData == NULL) || (Size == 0U))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <ref_usart_start+0x38>
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <ref_usart_start+0x3c>
		{
			return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e05b      	b.n	8002c28 <ref_usart_start+0xf4>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <ref_usart_start+0x4a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e054      	b.n	8002c28 <ref_usart_start+0xf4>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		huart->pRxBuffPtr = pData;
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
		huart->RxXferSize = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	859a      	strh	r2, [r3, #44]	@ 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2222      	movs	r2, #34	@ 0x22
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback 	= ref_full_cplt_isr;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba4:	4a23      	ldr	r2, [pc, #140]	@ (8002c34 <ref_usart_start+0x100>)
 8002ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
		huart->hdmarx->XferHalfCpltCallback = ref_half_cplt_isr;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	4a22      	ldr	r2, [pc, #136]	@ (8002c38 <ref_usart_start+0x104>)
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	651a      	str	r2, [r3, #80]	@ 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	617b      	str	r3, [r7, #20]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	4619      	mov	r1, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	f00c f966 	bl	800eea0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c00:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c20:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <ref_usart_start+0xf4>
	} else {
		return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
	}
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200008c8 	.word	0x200008c8
 8002c34:	08002c99 	.word	0x08002c99
 8002c38:	08002c3d 	.word	0x08002c3d

08002c3c <ref_half_cplt_isr>:


void ref_half_cplt_isr(DMA_HandleTypeDef *hdma){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M0AR);
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <ref_half_cplt_isr+0x50>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f7ff fb2f 	bl	80022b6 <queue_append_byte>

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(referee_processing_task_handle, &xHigherPriorityTaskWoken);
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <ref_half_cplt_isr+0x54>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f107 020c 	add.w	r2, r7, #12
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f018 fe28 	bl	801b8bc <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <ref_half_cplt_isr+0x46>
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <ref_half_cplt_isr+0x58>)
 8002c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	f3bf 8f6f 	isb	sy
//	} else {
//		queue_append_byte(ref_UART_queue, *(uint8_t*)hdma->Instance->M1AR);
//	}
};
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200008c8 	.word	0x200008c8
 8002c90:	20003b68 	.word	0x20003b68
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <ref_full_cplt_isr>:

void ref_full_cplt_isr(DMA_HandleTypeDef *hdma){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	//check which buffer is in use
//	if (hdma->Instance->CR &= DMA_SxCR_CT == 0){
		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M0AR+1));
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <ref_full_cplt_isr+0x50>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7ff fb00 	bl	80022b6 <queue_append_byte>

		BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(referee_processing_task_handle, &xHigherPriorityTaskWoken);
 8002cba:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <ref_full_cplt_isr+0x54>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f107 020c 	add.w	r2, r7, #12
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f018 fdf9 	bl	801b8bc <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <ref_full_cplt_isr+0x48>
 8002cd0:	4b07      	ldr	r3, [pc, #28]	@ (8002cf0 <ref_full_cplt_isr+0x58>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
//	} else {
//		queue_append_byte(ref_UART_queue, *((uint8_t*)hdma->Instance->M1AR+1));
//	}
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	200008c8 	.word	0x200008c8
 8002cec:	20003b68 	.word	0x20003b68
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002d06:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d08:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <MX_ADC3_Init+0x9c>)
 8002d0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d12:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002d26:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d34:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d36:	4a17      	ldr	r2, [pc, #92]	@ (8002d94 <MX_ADC3_Init+0xa0>)
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d3a:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002d54:	480d      	ldr	r0, [pc, #52]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d56:	f00a fdff 	bl	800d958 <HAL_ADC_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002d60:	f000 fd4a 	bl	80037f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002d64:	2308      	movs	r3, #8
 8002d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <MX_ADC3_Init+0x98>)
 8002d76:	f00a fe33 	bl	800d9e0 <HAL_ADC_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002d80:	f000 fd3a 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200008cc 	.word	0x200008cc
 8002d90:	40012200 	.word	0x40012200
 8002d94:	0f000001 	.word	0x0f000001

08002d98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_ADC_MspInit+0x7c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d128      	bne.n	8002e0c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	4a15      	ldr	r2, [pc, #84]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dca:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <HAL_ADC_MspInit+0x80>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	4805      	ldr	r0, [pc, #20]	@ (8002e1c <HAL_ADC_MspInit+0x84>)
 8002e08:	f00c fbaa 	bl	800f560 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3728      	adds	r7, #40	@ 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40012200 	.word	0x40012200
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40021400 	.word	0x40021400

08002e20 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e26:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <MX_CAN1_Init+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002e2a:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e30:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e36:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e3e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e46:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8002e4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002e52:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e64:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e70:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <MX_CAN1_Init+0x64>)
 8002e72:	f00a ffd3 	bl	800de1c <HAL_CAN_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002e7c:	f000 fcbc 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000914 	.word	0x20000914
 8002e88:	40006400 	.word	0x40006400

08002e8c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002e90:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <MX_CAN2_Init+0x68>)
 8002e94:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002e96:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002e98:	2203      	movs	r2, #3
 8002e9a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ea2:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002eaa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002eae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002eb2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002eb6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002ed0:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002edc:	4804      	ldr	r0, [pc, #16]	@ (8002ef0 <MX_CAN2_Init+0x64>)
 8002ede:	f00a ff9d 	bl	800de1c <HAL_CAN_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002ee8:	f000 fc86 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	2000093c 	.word	0x2000093c
 8002ef4:	40006800 	.word	0x40006800

08002ef8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	@ 0x30
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a52      	ldr	r2, [pc, #328]	@ (8003060 <HAL_CAN_MspInit+0x168>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d145      	bne.n	8002fa6 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f1a:	4b52      	ldr	r3, [pc, #328]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4a50      	ldr	r2, [pc, #320]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f24:	4b4f      	ldr	r3, [pc, #316]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10d      	bne.n	8002f48 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	4b4d      	ldr	r3, [pc, #308]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	4a4c      	ldr	r2, [pc, #304]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	4b46      	ldr	r3, [pc, #280]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	4a45      	ldr	r2, [pc, #276]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f58:	4b43      	ldr	r3, [pc, #268]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f64:	2303      	movs	r3, #3
 8002f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f70:	2303      	movs	r3, #3
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f74:	2309      	movs	r3, #9
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	483b      	ldr	r0, [pc, #236]	@ (800306c <HAL_CAN_MspInit+0x174>)
 8002f80:	f00c faee 	bl	800f560 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2105      	movs	r1, #5
 8002f88:	2014      	movs	r0, #20
 8002f8a:	f00b fea3 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002f8e:	2014      	movs	r0, #20
 8002f90:	f00b febc 	bl	800ed0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2105      	movs	r1, #5
 8002f98:	2015      	movs	r0, #21
 8002f9a:	f00b fe9b 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002f9e:	2015      	movs	r0, #21
 8002fa0:	f00b feb4 	bl	800ed0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002fa4:	e057      	b.n	8003056 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a31      	ldr	r2, [pc, #196]	@ (8003070 <HAL_CAN_MspInit+0x178>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d152      	bne.n	8003056 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc0:	4b29      	ldr	r3, [pc, #164]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4a24      	ldr	r2, [pc, #144]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002fd4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002fd6:	4b23      	ldr	r3, [pc, #140]	@ (8003064 <HAL_CAN_MspInit+0x16c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10d      	bne.n	8002ffa <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	4a20      	ldr	r2, [pc, #128]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002fe8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	4a19      	ldr	r2, [pc, #100]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	@ 0x30
 800300a:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <HAL_CAN_MspInit+0x170>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003016:	2360      	movs	r3, #96	@ 0x60
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003026:	2309      	movs	r3, #9
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	4619      	mov	r1, r3
 8003030:	4810      	ldr	r0, [pc, #64]	@ (8003074 <HAL_CAN_MspInit+0x17c>)
 8003032:	f00c fa95 	bl	800f560 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2105      	movs	r1, #5
 800303a:	2040      	movs	r0, #64	@ 0x40
 800303c:	f00b fe4a 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003040:	2040      	movs	r0, #64	@ 0x40
 8003042:	f00b fe63 	bl	800ed0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2105      	movs	r1, #5
 800304a:	2041      	movs	r0, #65	@ 0x41
 800304c:	f00b fe42 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003050:	2041      	movs	r0, #65	@ 0x41
 8003052:	f00b fe5b 	bl	800ed0c <HAL_NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3730      	adds	r7, #48	@ 0x30
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40006400 	.word	0x40006400
 8003064:	20000964 	.word	0x20000964
 8003068:	40023800 	.word	0x40023800
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40006800 	.word	0x40006800
 8003074:	40020400 	.word	0x40020400

08003078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	4b2f      	ldr	r3, [pc, #188]	@ (8003140 <MX_DMA_Init+0xc8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	4a2e      	ldr	r2, [pc, #184]	@ (8003140 <MX_DMA_Init+0xc8>)
 8003088:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800308c:	6313      	str	r3, [r2, #48]	@ 0x30
 800308e:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <MX_DMA_Init+0xc8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4b28      	ldr	r3, [pc, #160]	@ (8003140 <MX_DMA_Init+0xc8>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4a27      	ldr	r2, [pc, #156]	@ (8003140 <MX_DMA_Init+0xc8>)
 80030a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030aa:	4b25      	ldr	r3, [pc, #148]	@ (8003140 <MX_DMA_Init+0xc8>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2105      	movs	r1, #5
 80030ba:	200c      	movs	r0, #12
 80030bc:	f00b fe0a 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80030c0:	200c      	movs	r0, #12
 80030c2:	f00b fe23 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2105      	movs	r1, #5
 80030ca:	200d      	movs	r0, #13
 80030cc:	f00b fe02 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80030d0:	200d      	movs	r0, #13
 80030d2:	f00b fe1b 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2105      	movs	r1, #5
 80030da:	200f      	movs	r0, #15
 80030dc:	f00b fdfa 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80030e0:	200f      	movs	r0, #15
 80030e2:	f00b fe13 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2105      	movs	r1, #5
 80030ea:	2038      	movs	r0, #56	@ 0x38
 80030ec:	f00b fdf2 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80030f0:	2038      	movs	r0, #56	@ 0x38
 80030f2:	f00b fe0b 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2105      	movs	r1, #5
 80030fa:	2039      	movs	r0, #57	@ 0x39
 80030fc:	f00b fdea 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003100:	2039      	movs	r0, #57	@ 0x39
 8003102:	f00b fe03 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2105      	movs	r1, #5
 800310a:	203b      	movs	r0, #59	@ 0x3b
 800310c:	f00b fde2 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003110:	203b      	movs	r0, #59	@ 0x3b
 8003112:	f00b fdfb 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2105      	movs	r1, #5
 800311a:	2044      	movs	r0, #68	@ 0x44
 800311c:	f00b fdda 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003120:	2044      	movs	r0, #68	@ 0x44
 8003122:	f00b fdf3 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2105      	movs	r1, #5
 800312a:	2045      	movs	r0, #69	@ 0x45
 800312c:	f00b fdd2 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003130:	2045      	movs	r0, #69	@ 0x45
 8003132:	f00b fdeb 	bl	800ed0c <HAL_NVIC_EnableIRQ>

}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0

}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
	return 0;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003188:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4a06      	ldr	r2, [pc, #24]	@ (80031a8 <vApplicationGetIdleTaskMemory+0x30>)
 800318e:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003196:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000970 	.word	0x20000970
 80031a8:	20000af0 	.word	0x20000af0

080031ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80031bc:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4a06      	ldr	r2, [pc, #24]	@ (80031dc <vApplicationGetTimerTaskMemory+0x30>)
 80031c2:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	20000ef0 	.word	0x20000ef0
 80031dc:	20001070 	.word	0x20001070

080031e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b08a      	sub	sp, #40	@ 0x28
 80031e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80031e6:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <MX_FREERTOS_Init+0x48>)
 80031e8:	1d3c      	adds	r4, r7, #4
 80031ea:	461d      	mov	r5, r3
 80031ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f016 fb36 	bl	801986e <osThreadCreate>
 8003202:	4603      	mov	r3, r0
 8003204:	4a09      	ldr	r2, [pc, #36]	@ (800322c <MX_FREERTOS_Init+0x4c>)
 8003206:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	xTaskCreate(master_task, "master_task",
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <MX_FREERTOS_Init+0x50>)
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	230c      	movs	r3, #12
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2301      	movs	r3, #1
 8003212:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003216:	4907      	ldr	r1, [pc, #28]	@ (8003234 <MX_FREERTOS_Init+0x54>)
 8003218:	4807      	ldr	r0, [pc, #28]	@ (8003238 <MX_FREERTOS_Init+0x58>)
 800321a:	f017 fb2b 	bl	801a874 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 12,
			&master_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bdb0      	pop	{r4, r5, r7, pc}
 8003226:	bf00      	nop
 8003228:	08024370 	.word	0x08024370
 800322c:	2000096c 	.word	0x2000096c
 8003230:	20000968 	.word	0x20000968
 8003234:	08024358 	.word	0x08024358
 8003238:	0800adf1 	.word	0x0800adf1

0800323c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003244:	f019 fbf0 	bl	801ca28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(100000);
 8003248:	4801      	ldr	r0, [pc, #4]	@ (8003250 <StartDefaultTask+0x14>)
 800324a:	f016 fb5c 	bl	8019906 <osDelay>
 800324e:	e7fb      	b.n	8003248 <StartDefaultTask+0xc>
 8003250:	000186a0 	.word	0x000186a0

08003254 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08e      	sub	sp, #56	@ 0x38
 8003258:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	4b84      	ldr	r3, [pc, #528]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a83      	ldr	r2, [pc, #524]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b81      	ldr	r3, [pc, #516]	@ (8003480 <MX_GPIO_Init+0x22c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	4b7d      	ldr	r3, [pc, #500]	@ (8003480 <MX_GPIO_Init+0x22c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a7c      	ldr	r2, [pc, #496]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b7a      	ldr	r3, [pc, #488]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a75      	ldr	r2, [pc, #468]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b73      	ldr	r3, [pc, #460]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	4b68      	ldr	r3, [pc, #416]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a67      	ldr	r2, [pc, #412]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b65      	ldr	r3, [pc, #404]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <MX_GPIO_Init+0x22c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	4a60      	ldr	r2, [pc, #384]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003304:	6313      	str	r3, [r2, #48]	@ 0x30
 8003306:	4b5e      	ldr	r3, [pc, #376]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b5a      	ldr	r3, [pc, #360]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a59      	ldr	r2, [pc, #356]	@ (8003480 <MX_GPIO_Init+0x22c>)
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b57      	ldr	r3, [pc, #348]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	4b53      	ldr	r3, [pc, #332]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a52      	ldr	r2, [pc, #328]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003338:	f043 0310 	orr.w	r3, r3, #16
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b50      	ldr	r3, [pc, #320]	@ (8003480 <MX_GPIO_Init+0x22c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_GPIO_Port, LASER_GPIO_Pin, GPIO_PIN_RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003350:	484c      	ldr	r0, [pc, #304]	@ (8003484 <MX_GPIO_Init+0x230>)
 8003352:	f00c faa1 	bl	800f898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST_RST_GPIO_Port, IST_RST_Pin, GPIO_PIN_RESET);
 8003356:	2200      	movs	r2, #0
 8003358:	2140      	movs	r1, #64	@ 0x40
 800335a:	484b      	ldr	r0, [pc, #300]	@ (8003488 <MX_GPIO_Init+0x234>)
 800335c:	f00c fa9c 	bl	800f898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003360:	2201      	movs	r2, #1
 8003362:	2110      	movs	r1, #16
 8003364:	4849      	ldr	r0, [pc, #292]	@ (800348c <MX_GPIO_Init+0x238>)
 8003366:	f00c fa97 	bl	800f898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800336a:	2201      	movs	r2, #1
 800336c:	2101      	movs	r1, #1
 800336e:	4848      	ldr	r0, [pc, #288]	@ (8003490 <MX_GPIO_Init+0x23c>)
 8003370:	f00c fa92 	bl	800f898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_GPIO_Pin;
 8003374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337a:	2301      	movs	r3, #1
 800337c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LASER_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800338a:	4619      	mov	r1, r3
 800338c:	483d      	ldr	r0, [pc, #244]	@ (8003484 <MX_GPIO_Init+0x230>)
 800338e:	f00c f8e7 	bl	800f560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_RST_Pin;
 8003392:	2340      	movs	r3, #64	@ 0x40
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003396:	2301      	movs	r3, #1
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(IST_RST_GPIO_Port, &GPIO_InitStruct);
 80033a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a6:	4619      	mov	r1, r3
 80033a8:	4837      	ldr	r0, [pc, #220]	@ (8003488 <MX_GPIO_Init+0x234>)
 80033aa:	f00c f8d9 	bl	800f560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 80033ae:	2308      	movs	r3, #8
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b8:	2301      	movs	r3, #1
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c0:	4619      	mov	r1, r3
 80033c2:	4831      	ldr	r0, [pc, #196]	@ (8003488 <MX_GPIO_Init+0x234>)
 80033c4:	f00c f8cc 	bl	800f560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033c8:	2310      	movs	r3, #16
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033cc:	2301      	movs	r3, #1
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2300      	movs	r3, #0
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	482b      	ldr	r0, [pc, #172]	@ (800348c <MX_GPIO_Init+0x238>)
 80033e0:	f00c f8be 	bl	800f560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin|GYRO_INT_Pin;
 80033e4:	2330      	movs	r3, #48	@ 0x30
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ee:	2301      	movs	r3, #1
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f6:	4619      	mov	r1, r3
 80033f8:	4822      	ldr	r0, [pc, #136]	@ (8003484 <MX_GPIO_Init+0x230>)
 80033fa:	f00c f8b1 	bl	800f560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003404:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800340e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003412:	4619      	mov	r1, r3
 8003414:	481f      	ldr	r0, [pc, #124]	@ (8003494 <MX_GPIO_Init+0x240>)
 8003416:	f00c f8a3 	bl	800f560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800341a:	2301      	movs	r3, #1
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4817      	ldr	r0, [pc, #92]	@ (8003490 <MX_GPIO_Init+0x23c>)
 8003432:	f00c f895 	bl	800f560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2105      	movs	r1, #5
 800343a:	2009      	movs	r0, #9
 800343c:	f00b fc4a 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003440:	2009      	movs	r0, #9
 8003442:	f00b fc63 	bl	800ed0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2105      	movs	r1, #5
 800344a:	200a      	movs	r0, #10
 800344c:	f00b fc42 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003450:	200a      	movs	r0, #10
 8003452:	f00b fc5b 	bl	800ed0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2105      	movs	r1, #5
 800345a:	2017      	movs	r0, #23
 800345c:	f00b fc3a 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003460:	2017      	movs	r0, #23
 8003462:	f00b fc53 	bl	800ed0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2105      	movs	r1, #5
 800346a:	2028      	movs	r0, #40	@ 0x28
 800346c:	f00b fc32 	bl	800ecd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003470:	2028      	movs	r0, #40	@ 0x28
 8003472:	f00b fc4b 	bl	800ed0c <HAL_NVIC_EnableIRQ>

}
 8003476:	bf00      	nop
 8003478:	3738      	adds	r7, #56	@ 0x38
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40020800 	.word	0x40020800
 8003488:	40021800 	.word	0x40021800
 800348c:	40020000 	.word	0x40020000
 8003490:	40020400 	.word	0x40020400
 8003494:	40021000 	.word	0x40021000

08003498 <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800349c:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <MX_I2C3_Init+0x50>)
 800349e:	4a13      	ldr	r2, [pc, #76]	@ (80034ec <MX_I2C3_Init+0x54>)
 80034a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80034a2:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034a4:	4a12      	ldr	r2, [pc, #72]	@ (80034f0 <MX_I2C3_Init+0x58>)
 80034a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034bc:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034be:	2200      	movs	r2, #0
 80034c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c8:	4b07      	ldr	r3, [pc, #28]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034d4:	4804      	ldr	r0, [pc, #16]	@ (80034e8 <MX_I2C3_Init+0x50>)
 80034d6:	f00c fa11 	bl	800f8fc <HAL_I2C_Init>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80034e0:	f000 f98a 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20001870 	.word	0x20001870
 80034ec:	40005c00 	.word	0x40005c00
 80034f0:	00061a80 	.word	0x00061a80

080034f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5b      	ldr	r2, [pc, #364]	@ (8003680 <HAL_I2C_MspInit+0x18c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f040 80b0 	bne.w	8003678 <HAL_I2C_MspInit+0x184>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	4b59      	ldr	r3, [pc, #356]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6313      	str	r3, [r2, #48]	@ 0x30
 8003528:	4b56      	ldr	r3, [pc, #344]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b52      	ldr	r3, [pc, #328]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	4a51      	ldr	r2, [pc, #324]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6313      	str	r3, [r2, #48]	@ 0x30
 8003544:	4b4f      	ldr	r3, [pc, #316]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003556:	2312      	movs	r3, #18
 8003558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003562:	2304      	movs	r3, #4
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	4846      	ldr	r0, [pc, #280]	@ (8003688 <HAL_I2C_MspInit+0x194>)
 800356e:	f00b fff7 	bl	800f560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003578:	2312      	movs	r3, #18
 800357a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800357c:	2301      	movs	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003584:	2304      	movs	r3, #4
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	483f      	ldr	r0, [pc, #252]	@ (800368c <HAL_I2C_MspInit+0x198>)
 8003590:	f00b ffe6 	bl	800f560 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	4a39      	ldr	r2, [pc, #228]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 800359e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a4:	4b37      	ldr	r3, [pc, #220]	@ (8003684 <HAL_I2C_MspInit+0x190>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 80035b0:	4b37      	ldr	r3, [pc, #220]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035b2:	4a38      	ldr	r2, [pc, #224]	@ (8003694 <HAL_I2C_MspInit+0x1a0>)
 80035b4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035bc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035be:	4b34      	ldr	r3, [pc, #208]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c4:	4b32      	ldr	r3, [pc, #200]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ca:	4b31      	ldr	r3, [pc, #196]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035d0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80035de:	4b2c      	ldr	r3, [pc, #176]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ea:	4b29      	ldr	r3, [pc, #164]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80035f0:	4827      	ldr	r0, [pc, #156]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 80035f2:	f00b fba7 	bl	800ed44 <HAL_DMA_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80035fc:	f000 f8fc 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a23      	ldr	r2, [pc, #140]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
 8003606:	4a22      	ldr	r2, [pc, #136]	@ (8003690 <HAL_I2C_MspInit+0x19c>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800360c:	4b22      	ldr	r3, [pc, #136]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800360e:	4a23      	ldr	r2, [pc, #140]	@ (800369c <HAL_I2C_MspInit+0x1a8>)
 8003610:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8003612:	4b21      	ldr	r3, [pc, #132]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003614:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003618:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800361a:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800361c:	2240      	movs	r2, #64	@ 0x40
 800361e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003626:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800362c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362e:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003630:	2200      	movs	r2, #0
 8003632:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003634:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003636:	2200      	movs	r2, #0
 8003638:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800363a:	4b17      	ldr	r3, [pc, #92]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800363c:	2200      	movs	r2, #0
 800363e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003640:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003646:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800364c:	4812      	ldr	r0, [pc, #72]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 800364e:	f00b fb79 	bl	800ed44 <HAL_DMA_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8003658:	f000 f8ce 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0e      	ldr	r2, [pc, #56]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003660:	635a      	str	r2, [r3, #52]	@ 0x34
 8003662:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <HAL_I2C_MspInit+0x1a4>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2105      	movs	r1, #5
 800366c:	2049      	movs	r0, #73	@ 0x49
 800366e:	f00b fb31 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003672:	2049      	movs	r0, #73	@ 0x49
 8003674:	f00b fb4a 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003678:	bf00      	nop
 800367a:	3728      	adds	r7, #40	@ 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40005c00 	.word	0x40005c00
 8003684:	40023800 	.word	0x40023800
 8003688:	40020800 	.word	0x40020800
 800368c:	40020000 	.word	0x40020000
 8003690:	200018c4 	.word	0x200018c4
 8003694:	40026040 	.word	0x40026040
 8003698:	20001924 	.word	0x20001924
 800369c:	40026070 	.word	0x40026070

080036a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a4:	f00a f8f2 	bl	800d88c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036a8:	f000 f82a 	bl	8003700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036ac:	f7ff fdd2 	bl	8003254 <MX_GPIO_Init>
  MX_DMA_Init();
 80036b0:	f7ff fce2 	bl	8003078 <MX_DMA_Init>
  MX_CAN1_Init();
 80036b4:	f7ff fbb4 	bl	8002e20 <MX_CAN1_Init>
  MX_CAN2_Init();
 80036b8:	f7ff fbe8 	bl	8002e8c <MX_CAN2_Init>
  MX_TIM5_Init();
 80036bc:	f000 fdb8 	bl	8004230 <MX_TIM5_Init>
  MX_TIM10_Init();
 80036c0:	f000 fe26 	bl	8004310 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80036c4:	f000 ff74 	bl	80045b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80036c8:	f000 ff9c 	bl	8004604 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80036cc:	f000 ffc6 	bl	800465c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80036d0:	f000 f8ce 	bl	8003870 <MX_SPI1_Init>
  MX_I2C3_Init();
 80036d4:	f7ff fee0 	bl	8003498 <MX_I2C3_Init>
  MX_ADC3_Init();
 80036d8:	f7ff fb0c 	bl	8002cf4 <MX_ADC3_Init>
  MX_TIM3_Init();
 80036dc:	f000 fcdc 	bl	8004098 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036e0:	f000 fd4c 	bl	800417c <MX_TIM4_Init>
  MX_RNG_Init();
 80036e4:	f000 f88e 	bl	8003804 <MX_RNG_Init>
  MX_TIM2_Init();
 80036e8:	f000 fca4 	bl	8004034 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  startup_task();
 80036ec:	f00a f84f 	bl	800d78e <startup_task>
  MX_USB_DEVICE_Init();
 80036f0:	f019 f99a 	bl	801ca28 <MX_USB_DEVICE_Init>
//  HAL_TIM_Base_Start(&htim3); //start micros clock
//  HAL_RNG_GenerateRandomNumber(hrng, random32bit)
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80036f4:	f7ff fd74 	bl	80031e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036f8:	f016 f8b2 	bl	8019860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <main+0x5c>

08003700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b094      	sub	sp, #80	@ 0x50
 8003704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003706:	f107 0320 	add.w	r3, r7, #32
 800370a:	2230      	movs	r2, #48	@ 0x30
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f019 ffff 	bl	801d712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <SystemClock_Config+0xcc>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <SystemClock_Config+0xcc>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6413      	str	r3, [r2, #64]	@ 0x40
 8003734:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <SystemClock_Config+0xcc>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003740:	2300      	movs	r3, #0
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	4b22      	ldr	r3, [pc, #136]	@ (80037d0 <SystemClock_Config+0xd0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a21      	ldr	r2, [pc, #132]	@ (80037d0 <SystemClock_Config+0xd0>)
 800374a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <SystemClock_Config+0xd0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800375c:	2301      	movs	r3, #1
 800375e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003766:	2302      	movs	r3, #2
 8003768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800376a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003770:	2306      	movs	r3, #6
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003774:	23a8      	movs	r3, #168	@ 0xa8
 8003776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003778:	2302      	movs	r3, #2
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800377c:	2307      	movs	r3, #7
 800377e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003780:	f107 0320 	add.w	r3, r7, #32
 8003784:	4618      	mov	r0, r3
 8003786:	f00f f8c1 	bl	801290c <HAL_RCC_OscConfig>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003790:	f000 f832 	bl	80037f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003794:	230f      	movs	r3, #15
 8003796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003798:	2302      	movs	r3, #2
 800379a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2105      	movs	r1, #5
 80037b2:	4618      	mov	r0, r3
 80037b4:	f00f fb22 	bl	8012dfc <HAL_RCC_ClockConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037be:	f000 f81b 	bl	80037f8 <Error_Handler>
  }
}
 80037c2:	bf00      	nop
 80037c4:	3750      	adds	r7, #80	@ 0x50
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40007000 	.word	0x40007000

080037d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037e6:	f00a f873 	bl	800d8d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40001000 	.word	0x40001000

080037f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037fc:	b672      	cpsid	i
}
 80037fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <Error_Handler+0x8>

08003804 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <MX_RNG_Init+0x20>)
 800380a:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <MX_RNG_Init+0x24>)
 800380c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800380e:	4805      	ldr	r0, [pc, #20]	@ (8003824 <MX_RNG_Init+0x20>)
 8003810:	f00f fd06 	bl	8013220 <HAL_RNG_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800381a:	f7ff ffed 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20001984 	.word	0x20001984
 8003828:	50060800 	.word	0x50060800

0800382c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0b      	ldr	r2, [pc, #44]	@ (8003868 <HAL_RNG_MspInit+0x3c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10d      	bne.n	800385a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <HAL_RNG_MspInit+0x40>)
 8003844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <HAL_RNG_MspInit+0x40>)
 8003848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800384c:	6353      	str	r3, [r2, #52]	@ 0x34
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <HAL_RNG_MspInit+0x40>)
 8003850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	50060800 	.word	0x50060800
 800386c:	40023800 	.word	0x40023800

08003870 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003874:	4b17      	ldr	r3, [pc, #92]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003876:	4a18      	ldr	r2, [pc, #96]	@ (80038d8 <MX_SPI1_Init+0x68>)
 8003878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <MX_SPI1_Init+0x64>)
 800387c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <MX_SPI1_Init+0x64>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <MX_SPI1_Init+0x64>)
 8003896:	2200      	movs	r2, #0
 8003898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <MX_SPI1_Init+0x64>)
 800389c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038a4:	2228      	movs	r2, #40	@ 0x28
 80038a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b4:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038ba:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038bc:	220a      	movs	r2, #10
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038c0:	4804      	ldr	r0, [pc, #16]	@ (80038d4 <MX_SPI1_Init+0x64>)
 80038c2:	f00f fcd7 	bl	8013274 <HAL_SPI_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038cc:	f7ff ff94 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20001994 	.word	0x20001994
 80038d8:	40013000 	.word	0x40013000

080038dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	@ 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a56      	ldr	r2, [pc, #344]	@ (8003a54 <HAL_SPI_MspInit+0x178>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	f040 80a6 	bne.w	8003a4c <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	4b54      	ldr	r3, [pc, #336]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003908:	4a53      	ldr	r2, [pc, #332]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800390a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800390e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003910:	4b51      	ldr	r3, [pc, #324]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	4b4d      	ldr	r3, [pc, #308]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	4a4c      	ldr	r2, [pc, #304]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003926:	f043 0302 	orr.w	r3, r3, #2
 800392a:	6313      	str	r3, [r2, #48]	@ 0x30
 800392c:	4b4a      	ldr	r3, [pc, #296]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	4b46      	ldr	r3, [pc, #280]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	4a45      	ldr	r2, [pc, #276]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6313      	str	r3, [r2, #48]	@ 0x30
 8003948:	4b43      	ldr	r3, [pc, #268]	@ (8003a58 <HAL_SPI_MspInit+0x17c>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003954:	2318      	movs	r3, #24
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003964:	2305      	movs	r3, #5
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	483b      	ldr	r0, [pc, #236]	@ (8003a5c <HAL_SPI_MspInit+0x180>)
 8003970:	f00b fdf6 	bl	800f560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003984:	2305      	movs	r3, #5
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	4834      	ldr	r0, [pc, #208]	@ (8003a60 <HAL_SPI_MspInit+0x184>)
 8003990:	f00b fde6 	bl	800f560 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003994:	4b33      	ldr	r3, [pc, #204]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 8003996:	4a34      	ldr	r2, [pc, #208]	@ (8003a68 <HAL_SPI_MspInit+0x18c>)
 8003998:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800399a:	4b32      	ldr	r3, [pc, #200]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 800399c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80039a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a2:	4b30      	ldr	r3, [pc, #192]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039bc:	4b29      	ldr	r3, [pc, #164]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80039c2:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039c8:	4b26      	ldr	r3, [pc, #152]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ce:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80039d4:	4823      	ldr	r0, [pc, #140]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039d6:	f00b f9b5 	bl	800ed44 <HAL_DMA_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80039e0:	f7ff ff0a 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80039ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003a64 <HAL_SPI_MspInit+0x188>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 80039f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a70 <HAL_SPI_MspInit+0x194>)
 80039f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80039f6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 80039f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80039fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039fe:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a00:	2240      	movs	r2, #64	@ 0x40
 8003a02:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0a:	4b18      	ldr	r3, [pc, #96]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a12:	4b16      	ldr	r3, [pc, #88]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a30:	480e      	ldr	r0, [pc, #56]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a32:	f00b f987 	bl	800ed44 <HAL_DMA_Init>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8003a3c:	f7ff fedc 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a44:	649a      	str	r2, [r3, #72]	@ 0x48
 8003a46:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <HAL_SPI_MspInit+0x190>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3728      	adds	r7, #40	@ 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40013000 	.word	0x40013000
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020400 	.word	0x40020400
 8003a60:	40020000 	.word	0x40020000
 8003a64:	200019ec 	.word	0x200019ec
 8003a68:	40026410 	.word	0x40026410
 8003a6c:	20001a4c 	.word	0x20001a4c
 8003a70:	40026458 	.word	0x40026458

08003a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa6:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <HAL_MspInit+0x54>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	210f      	movs	r1, #15
 8003ab6:	f06f 0001 	mvn.w	r0, #1
 8003aba:	f00b f90b 	bl	800ecd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	@ 0x38
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_InitTick+0xe4>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <HAL_InitTick+0xe4>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aec:	4b30      	ldr	r3, [pc, #192]	@ (8003bb0 <HAL_InitTick+0xe4>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af8:	f107 0210 	add.w	r2, r7, #16
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00f fb5a 	bl	80131bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b12:	f00f fb2b 	bl	801316c <HAL_RCC_GetPCLK1Freq>
 8003b16:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b18:	e004      	b.n	8003b24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b1a:	f00f fb27 	bl	801316c <HAL_RCC_GetPCLK1Freq>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b26:	4a23      	ldr	r2, [pc, #140]	@ (8003bb4 <HAL_InitTick+0xe8>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0c9b      	lsrs	r3, r3, #18
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b32:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b34:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <HAL_InitTick+0xf0>)
 8003b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b38:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b46:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b52:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003b58:	4817      	ldr	r0, [pc, #92]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b5a:	f00f fff7 	bl	8013b4c <HAL_TIM_Base_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003b6c:	4812      	ldr	r0, [pc, #72]	@ (8003bb8 <HAL_InitTick+0xec>)
 8003b6e:	f010 f83d 	bl	8013bec <HAL_TIM_Base_Start_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003b78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b80:	2036      	movs	r0, #54	@ 0x36
 8003b82:	f00b f8c3 	bl	800ed0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d808      	bhi.n	8003b9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	2036      	movs	r0, #54	@ 0x36
 8003b92:	f00b f89f 	bl	800ecd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b96:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc0 <HAL_InitTick+0xf4>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	e002      	b.n	8003ba4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3738      	adds	r7, #56	@ 0x38
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	431bde83 	.word	0x431bde83
 8003bb8:	20001aac 	.word	0x20001aac
 8003bbc:	40001000 	.word	0x40001000
 8003bc0:	20000048 	.word	0x20000048

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <NMI_Handler+0x4>

08003bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <HardFault_Handler+0x4>

08003bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <MemManage_Handler+0x4>

08003bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <BusFault_Handler+0x4>

08003be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <UsageFault_Handler+0x4>

08003bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8003bfe:	2008      	movs	r0, #8
 8003c00:	f00b fe64 	bl	800f8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8003c0c:	2010      	movs	r0, #16
 8003c0e:	f00b fe5d 	bl	800f8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003c1c:	4802      	ldr	r0, [pc, #8]	@ (8003c28 <DMA1_Stream1_IRQHandler+0x10>)
 8003c1e:	f00b fa29 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20001d44 	.word	0x20001d44

08003c2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003c30:	4802      	ldr	r0, [pc, #8]	@ (8003c3c <DMA1_Stream2_IRQHandler+0x10>)
 8003c32:	f00b fa1f 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200018c4 	.word	0x200018c4

08003c40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003c44:	4802      	ldr	r0, [pc, #8]	@ (8003c50 <DMA1_Stream4_IRQHandler+0x10>)
 8003c46:	f00b fa15 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20001924 	.word	0x20001924

08003c54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c58:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <CAN1_RX0_IRQHandler+0x10>)
 8003c5a:	f00a fd39 	bl	800e6d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000914 	.word	0x20000914

08003c68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c6c:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <CAN1_RX1_IRQHandler+0x10>)
 8003c6e:	f00a fd2f 	bl	800e6d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000914 	.word	0x20000914

08003c7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8003c80:	2020      	movs	r0, #32
 8003c82:	f00b fe23 	bl	800f8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c90:	4803      	ldr	r0, [pc, #12]	@ (8003ca0 <TIM3_IRQHandler+0x14>)
 8003c92:	f010 f98b 	bl	8013fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  if (__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_UPDATE) == 1){
	  micros_tick();
 8003c96:	f7fe fa61 	bl	800215c <micros_tick>
//  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20001af8 	.word	0x20001af8

08003ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ca8:	4802      	ldr	r0, [pc, #8]	@ (8003cb4 <USART1_IRQHandler+0x10>)
 8003caa:	f011 f981 	bl	8014fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20001c18 	.word	0x20001c18

08003cb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003cbc:	4802      	ldr	r0, [pc, #8]	@ (8003cc8 <USART3_IRQHandler+0x10>)
 8003cbe:	f011 f977 	bl	8014fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001c5c 	.word	0x20001c5c

08003ccc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003cd0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003cd4:	f00b fdfa 	bl	800f8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  hall_int();
 8003cd8:	f7fd fcce 	bl	8001678 <hall_int>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ce4:	4802      	ldr	r0, [pc, #8]	@ (8003cf0 <TIM6_DAC_IRQHandler+0x10>)
 8003ce6:	f010 f961 	bl	8013fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20001aac 	.word	0x20001aac

08003cf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003cf8:	4802      	ldr	r0, [pc, #8]	@ (8003d04 <DMA2_Stream0_IRQHandler+0x10>)
 8003cfa:	f00b f9bb 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200019ec 	.word	0x200019ec

08003d08 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003d0c:	4802      	ldr	r0, [pc, #8]	@ (8003d18 <DMA2_Stream1_IRQHandler+0x10>)
 8003d0e:	f00b f9b1 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20001da4 	.word	0x20001da4

08003d1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003d20:	4802      	ldr	r0, [pc, #8]	@ (8003d2c <DMA2_Stream3_IRQHandler+0x10>)
 8003d22:	f00b f9a7 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20001a4c 	.word	0x20001a4c

08003d30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d34:	4802      	ldr	r0, [pc, #8]	@ (8003d40 <CAN2_RX0_IRQHandler+0x10>)
 8003d36:	f00a fccb 	bl	800e6d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000093c 	.word	0x2000093c

08003d44 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003d48:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <CAN2_RX1_IRQHandler+0x10>)
 8003d4a:	f00a fcc1 	bl	800e6d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	2000093c 	.word	0x2000093c

08003d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003d5c:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <OTG_FS_IRQHandler+0x10>)
 8003d5e:	f00d fca8 	bl	80116b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000cc44 	.word	0x2000cc44

08003d6c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d70:	4802      	ldr	r0, [pc, #8]	@ (8003d7c <DMA2_Stream5_IRQHandler+0x10>)
 8003d72:	f00b f97f 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20001ce4 	.word	0x20001ce4

08003d80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003d84:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <DMA2_Stream6_IRQHandler+0x10>)
 8003d86:	f00b f975 	bl	800f074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20001e04 	.word	0x20001e04

08003d94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d98:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <USART6_IRQHandler+0x10>)
 8003d9a:	f011 f909 	bl	8014fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20001ca0 	.word	0x20001ca0

08003da8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003dac:	4802      	ldr	r0, [pc, #8]	@ (8003db8 <I2C3_ER_IRQHandler+0x10>)
 8003dae:	f00c fb9d 	bl	80104ec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20001870 	.word	0x20001870

08003dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return 1;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <_kill>:

int _kill(int pid, int sig)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dd6:	f019 fd17 	bl	801d808 <__errno>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2216      	movs	r2, #22
 8003dde:	601a      	str	r2, [r3, #0]
  return -1;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_exit>:

void _exit (int status)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ffe7 	bl	8003dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <_exit+0x12>

08003e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e00a      	b.n	8003e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e14:	f3af 8000 	nop.w
 8003e18:	4601      	mov	r1, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	60ba      	str	r2, [r7, #8]
 8003e20:	b2ca      	uxtb	r2, r1
 8003e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	dbf0      	blt.n	8003e14 <_read+0x12>
  }

  return len;
 8003e32:	687b      	ldr	r3, [r7, #4]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e009      	b.n	8003e62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	60ba      	str	r2, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	dbf1      	blt.n	8003e4e <_write+0x12>
  }
  return len;
 8003e6a:	687b      	ldr	r3, [r7, #4]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_close>:

int _close(int file)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e9c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_isatty>:

int _isatty(int file)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003eb4:	2301      	movs	r3, #1
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ee4:	4a14      	ldr	r2, [pc, #80]	@ (8003f38 <_sbrk+0x5c>)
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <_sbrk+0x60>)
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <_sbrk+0x64>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef8:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <_sbrk+0x64>)
 8003efa:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <_sbrk+0x68>)
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003efe:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d207      	bcs.n	8003f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f0c:	f019 fc7c 	bl	801d808 <__errno>
 8003f10:	4603      	mov	r3, r0
 8003f12:	220c      	movs	r2, #12
 8003f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	e009      	b.n	8003f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f1c:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <_sbrk+0x64>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f22:	4b07      	ldr	r3, [pc, #28]	@ (8003f40 <_sbrk+0x64>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a05      	ldr	r2, [pc, #20]	@ (8003f40 <_sbrk+0x64>)
 8003f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20020000 	.word	0x20020000
 8003f3c:	00009000 	.word	0x00009000
 8003f40:	20001af4 	.word	0x20001af4
 8003f44:	2000d680 	.word	0x2000d680

08003f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f4c:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <SystemInit+0x28>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	4a07      	ldr	r2, [pc, #28]	@ (8003f70 <SystemInit+0x28>)
 8003f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f5c:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <SystemInit+0x28>)
 8003f5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f62:	609a      	str	r2, [r3, #8]
#endif
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <LL_TIM_DisableARRPreload>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fa6:	f023 0307 	bic.w	r3, r3, #7
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	605a      	str	r2, [r3, #4]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800400c:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <LL_APB1_GRP1_EnableClock+0x2c>)
 800400e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004010:	4907      	ldr	r1, [pc, #28]	@ (8004030 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <LL_APB1_GRP1_EnableClock+0x2c>)
 800401a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4013      	ands	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40023800 	.word	0x40023800

08004034 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8004048:	2001      	movs	r0, #1
 800404a:	f7ff ffdb 	bl	8004004 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004068:	f011 ff7a 	bl	8015f60 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800406c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004070:	f7ff ff80 	bl	8003f74 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004074:	2100      	movs	r1, #0
 8004076:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800407a:	f7ff ff8b 	bl	8003f94 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800407e:	2100      	movs	r1, #0
 8004080:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8004084:	f7ff ff9b 	bl	8003fbe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8004088:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800408c:	f7ff ffaa 	bl	8003fe4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	@ 0x38
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800409e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	609a      	str	r2, [r3, #8]
 80040aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ac:	f107 0320 	add.w	r3, r7, #32
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
 80040c4:	615a      	str	r2, [r3, #20]
 80040c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004178 <MX_TIM3_Init+0xe0>)
 80040cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 80040ce:	4b29      	ldr	r3, [pc, #164]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040d0:	22a7      	movs	r2, #167	@ 0xa7
 80040d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040dc:	2201      	movs	r2, #1
 80040de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e0:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e6:	4b23      	ldr	r3, [pc, #140]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040ec:	4821      	ldr	r0, [pc, #132]	@ (8004174 <MX_TIM3_Init+0xdc>)
 80040ee:	f00f fd2d 	bl	8013b4c <HAL_TIM_Base_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80040f8:	f7ff fb7e 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004106:	4619      	mov	r1, r3
 8004108:	481a      	ldr	r0, [pc, #104]	@ (8004174 <MX_TIM3_Init+0xdc>)
 800410a:	f010 f975 	bl	80143f8 <HAL_TIM_ConfigClockSource>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8004114:	f7ff fb70 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004118:	4816      	ldr	r0, [pc, #88]	@ (8004174 <MX_TIM3_Init+0xdc>)
 800411a:	f00f fdd7 	bl	8013ccc <HAL_TIM_OC_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004124:	f7ff fb68 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004130:	f107 0320 	add.w	r3, r7, #32
 8004134:	4619      	mov	r1, r3
 8004136:	480f      	ldr	r0, [pc, #60]	@ (8004174 <MX_TIM3_Init+0xdc>)
 8004138:	f010 fd5e 	bl	8014bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8004142:	f7ff fb59 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	2200      	movs	r2, #0
 800415a:	4619      	mov	r1, r3
 800415c:	4805      	ldr	r0, [pc, #20]	@ (8004174 <MX_TIM3_Init+0xdc>)
 800415e:	f010 f82d 	bl	80141bc <HAL_TIM_OC_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8004168:	f7ff fb46 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800416c:	bf00      	nop
 800416e:	3738      	adds	r7, #56	@ 0x38
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20001af8 	.word	0x20001af8
 8004178:	40000400 	.word	0x40000400

0800417c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	@ 0x28
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004182:	f107 0320 	add.w	r3, r7, #32
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	615a      	str	r2, [r3, #20]
 800419c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800419e:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <MX_TIM4_Init+0xb0>)
 80041a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 80041a4:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80041c6:	4818      	ldr	r0, [pc, #96]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041c8:	f00f fdd9 	bl	8013d7e <HAL_TIM_PWM_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80041d2:	f7ff fb11 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041de:	f107 0320 	add.w	r3, r7, #32
 80041e2:	4619      	mov	r1, r3
 80041e4:	4810      	ldr	r0, [pc, #64]	@ (8004228 <MX_TIM4_Init+0xac>)
 80041e6:	f010 fd07 	bl	8014bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80041f0:	f7ff fb02 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041f4:	2360      	movs	r3, #96	@ 0x60
 80041f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	2208      	movs	r2, #8
 8004208:	4619      	mov	r1, r3
 800420a:	4807      	ldr	r0, [pc, #28]	@ (8004228 <MX_TIM4_Init+0xac>)
 800420c:	f010 f832 	bl	8014274 <HAL_TIM_PWM_ConfigChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8004216:	f7ff faef 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800421a:	4803      	ldr	r0, [pc, #12]	@ (8004228 <MX_TIM4_Init+0xac>)
 800421c:	f000 f93c 	bl	8004498 <HAL_TIM_MspPostInit>

}
 8004220:	bf00      	nop
 8004222:	3728      	adds	r7, #40	@ 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20001b40 	.word	0x20001b40
 800422c:	40000800 	.word	0x40000800

08004230 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	@ 0x28
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004236:	f107 0320 	add.w	r3, r7, #32
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	615a      	str	r2, [r3, #20]
 8004250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004252:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004254:	4a2d      	ldr	r2, [pc, #180]	@ (800430c <MX_TIM5_Init+0xdc>)
 8004256:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1317;
 8004258:	4b2b      	ldr	r3, [pc, #172]	@ (8004308 <MX_TIM5_Init+0xd8>)
 800425a:	f240 5225 	movw	r2, #1317	@ 0x525
 800425e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004260:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8004266:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004268:	22ff      	movs	r2, #255	@ 0xff
 800426a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426c:	4b26      	ldr	r3, [pc, #152]	@ (8004308 <MX_TIM5_Init+0xd8>)
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004272:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004274:	2280      	movs	r2, #128	@ 0x80
 8004276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004278:	4823      	ldr	r0, [pc, #140]	@ (8004308 <MX_TIM5_Init+0xd8>)
 800427a:	f00f fd80 	bl	8013d7e <HAL_TIM_PWM_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8004284:	f7ff fab8 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004290:	f107 0320 	add.w	r3, r7, #32
 8004294:	4619      	mov	r1, r3
 8004296:	481c      	ldr	r0, [pc, #112]	@ (8004308 <MX_TIM5_Init+0xd8>)
 8004298:	f010 fcae 	bl	8014bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80042a2:	f7ff faa9 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042a6:	2360      	movs	r3, #96	@ 0x60
 80042a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80042ae:	2302      	movs	r3, #2
 80042b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80042b2:	2304      	movs	r3, #4
 80042b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	2200      	movs	r2, #0
 80042ba:	4619      	mov	r1, r3
 80042bc:	4812      	ldr	r0, [pc, #72]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042be:	f00f ffd9 	bl	8014274 <HAL_TIM_PWM_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80042c8:	f7ff fa96 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	2204      	movs	r2, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	480d      	ldr	r0, [pc, #52]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042d4:	f00f ffce 	bl	8014274 <HAL_TIM_PWM_ConfigChannel>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80042de:	f7ff fa8b 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	2208      	movs	r2, #8
 80042e6:	4619      	mov	r1, r3
 80042e8:	4807      	ldr	r0, [pc, #28]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042ea:	f00f ffc3 	bl	8014274 <HAL_TIM_PWM_ConfigChannel>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80042f4:	f7ff fa80 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80042f8:	4803      	ldr	r0, [pc, #12]	@ (8004308 <MX_TIM5_Init+0xd8>)
 80042fa:	f000 f8cd 	bl	8004498 <HAL_TIM_MspPostInit>

}
 80042fe:	bf00      	nop
 8004300:	3728      	adds	r7, #40	@ 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20001b88 	.word	0x20001b88
 800430c:	40000c00 	.word	0x40000c00

08004310 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
 8004324:	615a      	str	r2, [r3, #20]
 8004326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004328:	4b1e      	ldr	r3, [pc, #120]	@ (80043a4 <MX_TIM10_Init+0x94>)
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <MX_TIM10_Init+0x98>)
 800432c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800432e:	4b1d      	ldr	r3, [pc, #116]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004330:	2200      	movs	r2, #0
 8004332:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004334:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800433a:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <MX_TIM10_Init+0x94>)
 800433c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004340:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004342:	4b18      	ldr	r3, [pc, #96]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004348:	4b16      	ldr	r3, [pc, #88]	@ (80043a4 <MX_TIM10_Init+0x94>)
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800434e:	4815      	ldr	r0, [pc, #84]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004350:	f00f fbfc 	bl	8013b4c <HAL_TIM_Base_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800435a:	f7ff fa4d 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800435e:	4811      	ldr	r0, [pc, #68]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004360:	f00f fd0d 	bl	8013d7e <HAL_TIM_PWM_Init>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800436a:	f7ff fa45 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800436e:	2360      	movs	r3, #96	@ 0x60
 8004370:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800437e:	1d3b      	adds	r3, r7, #4
 8004380:	2200      	movs	r2, #0
 8004382:	4619      	mov	r1, r3
 8004384:	4807      	ldr	r0, [pc, #28]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004386:	f00f ff75 	bl	8014274 <HAL_TIM_PWM_ConfigChannel>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004390:	f7ff fa32 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004394:	4803      	ldr	r0, [pc, #12]	@ (80043a4 <MX_TIM10_Init+0x94>)
 8004396:	f000 f87f 	bl	8004498 <HAL_TIM_MspPostInit>

}
 800439a:	bf00      	nop
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20001bd0 	.word	0x20001bd0
 80043a8:	40014400 	.word	0x40014400

080043ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a18      	ldr	r2, [pc, #96]	@ (800441c <HAL_TIM_Base_MspInit+0x70>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d116      	bne.n	80043ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4b17      	ldr	r3, [pc, #92]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ce:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2105      	movs	r1, #5
 80043de:	201d      	movs	r0, #29
 80043e0:	f00a fc78 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043e4:	201d      	movs	r0, #29
 80043e6:	f00a fc91 	bl	800ed0c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80043ea:	e012      	b.n	8004412 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <HAL_TIM_Base_MspInit+0x78>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10d      	bne.n	8004412 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 8004400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004404:	6453      	str	r3, [r2, #68]	@ 0x44
 8004406:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <HAL_TIM_Base_MspInit+0x74>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40000400 	.word	0x40000400
 8004420:	40023800 	.word	0x40023800
 8004424:	40014400 	.word	0x40014400

08004428 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a15      	ldr	r2, [pc, #84]	@ (800448c <HAL_TIM_PWM_MspInit+0x64>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6413      	str	r3, [r2, #64]	@ 0x40
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004456:	e012      	b.n	800447e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0d      	ldr	r2, [pc, #52]	@ (8004494 <HAL_TIM_PWM_MspInit+0x6c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10d      	bne.n	800447e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 800446c:	f043 0308 	orr.w	r3, r3, #8
 8004470:	6413      	str	r3, [r2, #64]	@ 0x40
 8004472:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <HAL_TIM_PWM_MspInit+0x68>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40000800 	.word	0x40000800
 8004490:	40023800 	.word	0x40023800
 8004494:	40000c00 	.word	0x40000c00

08004498 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 0314 	add.w	r3, r7, #20
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a37      	ldr	r2, [pc, #220]	@ (8004594 <HAL_TIM_MspPostInit+0xfc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d11f      	bne.n	80044fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4a35      	ldr	r2, [pc, #212]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ca:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80044d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044e8:	2302      	movs	r3, #2
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4619      	mov	r1, r3
 80044f2:	482a      	ldr	r0, [pc, #168]	@ (800459c <HAL_TIM_MspPostInit+0x104>)
 80044f4:	f00b f834 	bl	800f560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80044f8:	e047      	b.n	800458a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM5)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <HAL_TIM_MspPostInit+0x108>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d11f      	bne.n	8004544 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	4b23      	ldr	r3, [pc, #140]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450c:	4a22      	ldr	r2, [pc, #136]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 800450e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004512:	6313      	str	r3, [r2, #48]	@ 0x30
 8004514:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GREEN_LED_TIM_Pin|RED_LED_TIM_Pin|BLUE_LED_TIM_Pin;
 8004520:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004532:	2302      	movs	r3, #2
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4619      	mov	r1, r3
 800453c:	4819      	ldr	r0, [pc, #100]	@ (80045a4 <HAL_TIM_MspPostInit+0x10c>)
 800453e:	f00b f80f 	bl	800f560 <HAL_GPIO_Init>
}
 8004542:	e022      	b.n	800458a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM10)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <HAL_TIM_MspPostInit+0x110>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d11d      	bne.n	800458a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	4a10      	ldr	r2, [pc, #64]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004558:	f043 0320 	orr.w	r3, r3, #32
 800455c:	6313      	str	r3, [r2, #48]	@ 0x30
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <HAL_TIM_MspPostInit+0x100>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_HEAT_TIM_Pin;
 800456a:	2340      	movs	r3, #64	@ 0x40
 800456c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	2302      	movs	r3, #2
 8004570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800457a:	2303      	movs	r3, #3
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_HEAT_TIM_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 0314 	add.w	r3, r7, #20
 8004582:	4619      	mov	r1, r3
 8004584:	4809      	ldr	r0, [pc, #36]	@ (80045ac <HAL_TIM_MspPostInit+0x114>)
 8004586:	f00a ffeb 	bl	800f560 <HAL_GPIO_Init>
}
 800458a:	bf00      	nop
 800458c:	3728      	adds	r7, #40	@ 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40000800 	.word	0x40000800
 8004598:	40023800 	.word	0x40023800
 800459c:	40020c00 	.word	0x40020c00
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40021c00 	.word	0x40021c00
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40021400 	.word	0x40021400

080045b0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045b4:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <MX_USART1_UART_Init+0x50>)
 80045b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045c2:	4b0e      	ldr	r3, [pc, #56]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045c8:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045d4:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045d6:	220c      	movs	r2, #12
 80045d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045e6:	4805      	ldr	r0, [pc, #20]	@ (80045fc <MX_USART1_UART_Init+0x4c>)
 80045e8:	f010 fb96 	bl	8014d18 <HAL_UART_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045f2:	f7ff f901 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20001c18 	.word	0x20001c18
 8004600:	40011000 	.word	0x40011000

08004604 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800460a:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <MX_USART3_UART_Init+0x50>)
 800460c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004610:	4a11      	ldr	r2, [pc, #68]	@ (8004658 <MX_USART3_UART_Init+0x54>)
 8004612:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004616:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800461a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800461e:	2200      	movs	r2, #0
 8004620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8004622:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004628:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800462a:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800462c:	220c      	movs	r2, #12
 800462e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800463c:	4804      	ldr	r0, [pc, #16]	@ (8004650 <MX_USART3_UART_Init+0x4c>)
 800463e:	f010 fb6b 	bl	8014d18 <HAL_UART_Init>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8004648:	f7ff f8d6 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20001c5c 	.word	0x20001c5c
 8004654:	40004800 	.word	0x40004800
 8004658:	000186a0 	.word	0x000186a0

0800465c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004662:	4a12      	ldr	r2, [pc, #72]	@ (80046ac <MX_USART6_UART_Init+0x50>)
 8004664:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004666:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800466c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800466e:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800467a:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 800467c:	2200      	movs	r2, #0
 800467e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004680:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004682:	220c      	movs	r2, #12
 8004684:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004688:	2200      	movs	r2, #0
 800468a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004692:	4805      	ldr	r0, [pc, #20]	@ (80046a8 <MX_USART6_UART_Init+0x4c>)
 8004694:	f010 fb40 	bl	8014d18 <HAL_UART_Init>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800469e:	f7ff f8ab 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20001ca0 	.word	0x20001ca0
 80046ac:	40011400 	.word	0x40011400

080046b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a78      	ldr	r2, [pc, #480]	@ (80048b0 <HAL_UART_MspInit+0x200>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	f040 8083 	bne.w	80047da <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	4b76      	ldr	r3, [pc, #472]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046dc:	4a75      	ldr	r2, [pc, #468]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046de:	f043 0310 	orr.w	r3, r3, #16
 80046e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80046e4:	4b73      	ldr	r3, [pc, #460]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	623b      	str	r3, [r7, #32]
 80046ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	4b6f      	ldr	r3, [pc, #444]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	4a6e      	ldr	r2, [pc, #440]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004700:	4b6c      	ldr	r3, [pc, #432]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	4b68      	ldr	r3, [pc, #416]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	4a67      	ldr	r2, [pc, #412]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6313      	str	r3, [r2, #48]	@ 0x30
 800471c:	4b65      	ldr	r3, [pc, #404]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004734:	2303      	movs	r3, #3
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004738:	2307      	movs	r3, #7
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004740:	4619      	mov	r1, r3
 8004742:	485d      	ldr	r0, [pc, #372]	@ (80048b8 <HAL_UART_MspInit+0x208>)
 8004744:	f00a ff0c 	bl	800f560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474e:	2302      	movs	r3, #2
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004752:	2300      	movs	r3, #0
 8004754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004756:	2303      	movs	r3, #3
 8004758:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800475a:	2307      	movs	r3, #7
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004762:	4619      	mov	r1, r3
 8004764:	4855      	ldr	r0, [pc, #340]	@ (80048bc <HAL_UART_MspInit+0x20c>)
 8004766:	f00a fefb 	bl	800f560 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800476a:	4b55      	ldr	r3, [pc, #340]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800476c:	4a55      	ldr	r2, [pc, #340]	@ (80048c4 <HAL_UART_MspInit+0x214>)
 800476e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004770:	4b53      	ldr	r3, [pc, #332]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004772:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004776:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004778:	4b51      	ldr	r3, [pc, #324]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800477e:	4b50      	ldr	r3, [pc, #320]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004780:	2200      	movs	r2, #0
 8004782:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004784:	4b4e      	ldr	r3, [pc, #312]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800478a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800478c:	4b4c      	ldr	r3, [pc, #304]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800478e:	2200      	movs	r2, #0
 8004790:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004792:	4b4b      	ldr	r3, [pc, #300]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004798:	4b49      	ldr	r3, [pc, #292]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 800479a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800479e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047a0:	4b47      	ldr	r3, [pc, #284]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047a6:	4b46      	ldr	r3, [pc, #280]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047ac:	4844      	ldr	r0, [pc, #272]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047ae:	f00a fac9 	bl	800ed44 <HAL_DMA_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80047b8:	f7ff f81e 	bl	80037f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a40      	ldr	r2, [pc, #256]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80047c2:	4a3f      	ldr	r2, [pc, #252]	@ (80048c0 <HAL_UART_MspInit+0x210>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80047c8:	2200      	movs	r2, #0
 80047ca:	2105      	movs	r1, #5
 80047cc:	2025      	movs	r0, #37	@ 0x25
 80047ce:	f00a fa81 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047d2:	2025      	movs	r0, #37	@ 0x25
 80047d4:	f00a fa9a 	bl	800ed0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80047d8:	e116      	b.n	8004a08 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART3)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3a      	ldr	r2, [pc, #232]	@ (80048c8 <HAL_UART_MspInit+0x218>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d179      	bne.n	80048d8 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART3_CLK_ENABLE();
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	4b32      	ldr	r3, [pc, #200]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	4a31      	ldr	r2, [pc, #196]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80047ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80047f4:	4b2f      	ldr	r3, [pc, #188]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004808:	4a2a      	ldr	r2, [pc, #168]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004810:	4b28      	ldr	r3, [pc, #160]	@ (80048b4 <HAL_UART_MspInit+0x204>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800481c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004822:	2302      	movs	r3, #2
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	2300      	movs	r3, #0
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800482a:	2303      	movs	r3, #3
 800482c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800482e:	2307      	movs	r3, #7
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004836:	4619      	mov	r1, r3
 8004838:	4824      	ldr	r0, [pc, #144]	@ (80048cc <HAL_UART_MspInit+0x21c>)
 800483a:	f00a fe91 	bl	800f560 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004840:	4a24      	ldr	r2, [pc, #144]	@ (80048d4 <HAL_UART_MspInit+0x224>)
 8004842:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004844:	4b22      	ldr	r3, [pc, #136]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004846:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800484a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800484c:	4b20      	ldr	r3, [pc, #128]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004852:	4b1f      	ldr	r3, [pc, #124]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004854:	2200      	movs	r2, #0
 8004856:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004858:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800485a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800485e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004860:	4b1b      	ldr	r3, [pc, #108]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004862:	2200      	movs	r2, #0
 8004864:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004866:	4b1a      	ldr	r3, [pc, #104]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800486c:	4b18      	ldr	r3, [pc, #96]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800486e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004872:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004874:	4b16      	ldr	r3, [pc, #88]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004876:	2200      	movs	r2, #0
 8004878:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 800487c:	2200      	movs	r2, #0
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004880:	4813      	ldr	r0, [pc, #76]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004882:	f00a fa5f 	bl	800ed44 <HAL_DMA_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800488c:	f7fe ffb4 	bl	80037f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a0f      	ldr	r2, [pc, #60]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004894:	639a      	str	r2, [r3, #56]	@ 0x38
 8004896:	4a0e      	ldr	r2, [pc, #56]	@ (80048d0 <HAL_UART_MspInit+0x220>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800489c:	2200      	movs	r2, #0
 800489e:	2105      	movs	r1, #5
 80048a0:	2027      	movs	r0, #39	@ 0x27
 80048a2:	f00a fa17 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048a6:	2027      	movs	r0, #39	@ 0x27
 80048a8:	f00a fa30 	bl	800ed0c <HAL_NVIC_EnableIRQ>
}
 80048ac:	e0ac      	b.n	8004a08 <HAL_UART_MspInit+0x358>
 80048ae:	bf00      	nop
 80048b0:	40011000 	.word	0x40011000
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020400 	.word	0x40020400
 80048bc:	40020000 	.word	0x40020000
 80048c0:	20001ce4 	.word	0x20001ce4
 80048c4:	40026488 	.word	0x40026488
 80048c8:	40004800 	.word	0x40004800
 80048cc:	40020800 	.word	0x40020800
 80048d0:	20001d44 	.word	0x20001d44
 80048d4:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004a10 <HAL_UART_MspInit+0x360>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f040 8092 	bne.w	8004a08 <HAL_UART_MspInit+0x358>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	4a49      	ldr	r2, [pc, #292]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80048f4:	4b47      	ldr	r3, [pc, #284]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 80048f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	4b43      	ldr	r3, [pc, #268]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	4a42      	ldr	r2, [pc, #264]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 800490a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800490e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004910:	4b40      	ldr	r3, [pc, #256]	@ (8004a14 <HAL_UART_MspInit+0x364>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800491c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004922:	2302      	movs	r3, #2
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492a:	2303      	movs	r3, #3
 800492c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800492e:	2308      	movs	r3, #8
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004936:	4619      	mov	r1, r3
 8004938:	4837      	ldr	r0, [pc, #220]	@ (8004a18 <HAL_UART_MspInit+0x368>)
 800493a:	f00a fe11 	bl	800f560 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800493e:	4b37      	ldr	r3, [pc, #220]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004940:	4a37      	ldr	r2, [pc, #220]	@ (8004a20 <HAL_UART_MspInit+0x370>)
 8004942:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004944:	4b35      	ldr	r3, [pc, #212]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004946:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800494a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800494c:	4b33      	ldr	r3, [pc, #204]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800494e:	2200      	movs	r2, #0
 8004950:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004952:	4b32      	ldr	r3, [pc, #200]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004954:	2200      	movs	r2, #0
 8004956:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004958:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800495a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800495e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004960:	4b2e      	ldr	r3, [pc, #184]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004962:	2200      	movs	r2, #0
 8004964:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004966:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004968:	2200      	movs	r2, #0
 800496a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800496c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800496e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004972:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004974:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004976:	2200      	movs	r2, #0
 8004978:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800497a:	4b28      	ldr	r3, [pc, #160]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 800497c:	2200      	movs	r2, #0
 800497e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004980:	4826      	ldr	r0, [pc, #152]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004982:	f00a f9df 	bl	800ed44 <HAL_DMA_Init>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 800498c:	f7fe ff34 	bl	80037f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a22      	ldr	r2, [pc, #136]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004994:	639a      	str	r2, [r3, #56]	@ 0x38
 8004996:	4a21      	ldr	r2, [pc, #132]	@ (8004a1c <HAL_UART_MspInit+0x36c>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800499c:	4b21      	ldr	r3, [pc, #132]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 800499e:	4a22      	ldr	r2, [pc, #136]	@ (8004a28 <HAL_UART_MspInit+0x378>)
 80049a0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80049a2:	4b20      	ldr	r3, [pc, #128]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049a4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80049a8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049ac:	2240      	movs	r2, #64	@ 0x40
 80049ae:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049bc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049be:	4b19      	ldr	r3, [pc, #100]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049c4:	4b17      	ldr	r3, [pc, #92]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80049ca:	4b16      	ldr	r3, [pc, #88]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049d0:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049d6:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049d8:	2200      	movs	r2, #0
 80049da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80049dc:	4811      	ldr	r0, [pc, #68]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049de:	f00a f9b1 	bl	800ed44 <HAL_DMA_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_UART_MspInit+0x33c>
      Error_Handler();
 80049e8:	f7fe ff06 	bl	80037f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004a24 <HAL_UART_MspInit+0x374>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2105      	movs	r1, #5
 80049fc:	2047      	movs	r0, #71	@ 0x47
 80049fe:	f00a f969 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004a02:	2047      	movs	r0, #71	@ 0x47
 8004a04:	f00a f982 	bl	800ed0c <HAL_NVIC_EnableIRQ>
}
 8004a08:	bf00      	nop
 8004a0a:	3738      	adds	r7, #56	@ 0x38
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40011400 	.word	0x40011400
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40021800 	.word	0x40021800
 8004a1c:	20001da4 	.word	0x20001da4
 8004a20:	40026428 	.word	0x40026428
 8004a24:	20001e04 	.word	0x20001e04
 8004a28:	400264a0 	.word	0x400264a0

08004a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
////////////////////////////////////////////////////////////////..
	Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a64 <LoopFillZerobss+0x14>


/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a32:	e003      	b.n	8004a3c <LoopCopyDataInit>

08004a34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a3a:	3104      	adds	r1, #4

08004a3c <LoopCopyDataInit>:
    

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a3c:	480b      	ldr	r0, [pc, #44]	@ (8004a6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a44:	d3f6      	bcc.n	8004a34 <CopyDataInit>
  ldr  r2, =_sbss
 8004a46:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a48:	e002      	b.n	8004a50 <LoopFillZerobss>

08004a4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a4c:	f842 3b04 	str.w	r3, [r2], #4

08004a50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a50:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a54:	d3f9      	bcc.n	8004a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a56:	f7ff fa77 	bl	8003f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a5a:	f018 fedb 	bl	801d814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a5e:	f7fe fe1f 	bl	80036a0 <main>
  bx  lr    
 8004a62:	4770      	bx	lr
	Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8004a64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a68:	08025164 	.word	0x08025164
  ldr  r0, =_sdata
 8004a6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a70:	20000808 	.word	0x20000808
  ldr  r2, =_sbss
 8004a74:	20000808 	.word	0x20000808
  ldr  r3, = _ebss
 8004a78:	2000d67c 	.word	0x2000d67c

08004a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a7c:	e7fe      	b.n	8004a7c <ADC_IRQHandler>

08004a7e <PID_Init>:
#include "typedefs.h"




void PID_Init(PID *pid, double kp, double ki, double kd, double min_output, double max_output) {
 8004a7e:	b480      	push	{r7}
 8004a80:	b08d      	sub	sp, #52	@ 0x34
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004a86:	ed87 0b08 	vstr	d0, [r7, #32]
 8004a8a:	ed87 1b06 	vstr	d1, [r7, #24]
 8004a8e:	ed87 2b04 	vstr	d2, [r7, #16]
 8004a92:	ed87 3b02 	vstr	d3, [r7, #8]
 8004a96:	ed87 4b00 	vstr	d4, [r7]
    pid->kp = kp;
 8004a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa0:	e9c1 2300 	strd	r2, r3, [r1]
    pid->ki = ki;
 8004aa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aaa:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->kd = kd;
 8004aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ab4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->prev_error = 0;
 8004ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->integral = 0;
 8004ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->max_output = max_output;
 8004ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ada:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    pid->min_output = min_output;
 8004ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8004ae8:	bf00      	nop
 8004aea:	3734      	adds	r7, #52	@ 0x34
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <PID_Compute>:

double PID_Compute(PID *pid, double setpoint, double measured_value, double dt, double deadzone) {
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	b090      	sub	sp, #64	@ 0x40
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6278      	str	r0, [r7, #36]	@ 0x24
 8004afc:	ed87 0b06 	vstr	d0, [r7, #24]
 8004b00:	ed87 1b04 	vstr	d1, [r7, #16]
 8004b04:	ed87 2b02 	vstr	d2, [r7, #8]
 8004b08:	ed87 3b00 	vstr	d3, [r7]
    double error = setpoint - measured_value;
 8004b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b14:	f7fb fbb8 	bl	8000288 <__aeabi_dsub>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    if (error < deadzone && error > -deadzone ){
 8004b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b28:	f7fb ffd8 	bl	8000adc <__aeabi_dcmplt>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <PID_Compute+0x64>
 8004b32:	683c      	ldr	r4, [r7, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b42:	f7fb ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <PID_Compute+0x64>
    	error = 0.0;
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    pid->integral += error * dt;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b66:	f7fb fd47 	bl	80005f8 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4620      	mov	r0, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	f7fb fb8b 	bl	800028c <__adddf3>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b7c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    double derivative = (error - pid->prev_error) / dt;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004b86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004b8a:	f7fb fb7d 	bl	8000288 <__aeabi_dsub>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b9a:	f7fb fe57 	bl	800084c <__aeabi_ddiv>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bb0:	f7fb fd22 	bl	80005f8 <__aeabi_dmul>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bc8:	f7fb fd16 	bl	80005f8 <__aeabi_dmul>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f7fb fb5a 	bl	800028c <__adddf3>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bea:	f7fb fd05 	bl	80005f8 <__aeabi_dmul>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	f7fb fb49 	bl	800028c <__adddf3>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Clamp the output to the specified max and min limits
    if (output > pid->max_output) {
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004c08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004c0c:	f7fb ff84 	bl	8000b18 <__aeabi_dcmpgt>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <PID_Compute+0x12e>
        output = pid->max_output;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004c1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8004c20:	e00e      	b.n	8004c40 <PID_Compute+0x14c>
    } else if (output < pid->min_output) {
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004c28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004c2c:	f7fb ff56 	bl	8000adc <__aeabi_dcmplt>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <PID_Compute+0x14c>
        output = pid->min_output;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004c3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }

    pid->prev_error = error;
 8004c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c46:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->output =  output;
 8004c4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c50:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Comment this out if you are testing the leg locking only
    return output;
 8004c54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c58:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c60:	eef0 0a67 	vmov.f32	s1, s15
 8004c64:	3740      	adds	r7, #64	@ 0x40
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bdb0      	pop	{r4, r5, r7, pc}
 8004c6a:	0000      	movs	r0, r0
 8004c6c:	0000      	movs	r0, r0
	...

08004c70 <balancing_task>:
double r1;
double r4;
double k_check[12] = {0};
float check_x = 0;

void balancing_task(void *argument) {
 8004c70:	b5b0      	push	{r4, r5, r7, lr}
 8004c72:	b08a      	sub	sp, #40	@ 0x28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	double starttime = 0;
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double endtime = 0;
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dt;
    TickType_t start_time;
    Ctrl_Init();
 8004c90:	f001 fc46 	bl	8006520 <Ctrl_Init>
//    Ctrl_StandupPrepareTask();
    while (1) {
        endtime = get_microseconds();
 8004c94:	f7fd fa94 	bl	80021c0 <get_microseconds>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fc32 	bl	8000504 <__aeabi_ui2d>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        dt = endtime - starttime;
 8004ca8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cb0:	f7fb faea 	bl	8000288 <__aeabi_dsub>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
        start_time = xTaskGetTickCount();
 8004cbc:	f016 f936 	bl	801af2c <xTaskGetTickCount>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]
        starttime = get_microseconds();
 8004cc4:	f7fd fa7c 	bl	80021c0 <get_microseconds>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb fc1a 	bl	8000504 <__aeabi_ui2d>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        /////////leftjoint[1] = phi1 = 8
        // leftjoint[0] =phi4= 9
        //rightjoint[1] = phi1 = 17
        //rightjoint[0] = phi4 = 16
        target.speedCmd = ((float)g_remote_cmd.left_y/660)*1.0f;
 8004cd8:	4b81      	ldr	r3, [pc, #516]	@ (8004ee0 <balancing_task+0x270>)
 8004cda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004ee4 <balancing_task+0x274>
 8004cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cee:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee8 <balancing_task+0x278>)
 8004cf0:	edc3 7a01 	vstr	s15, [r3, #4]
        target.yawSpeedCmd = -((float)g_remote_cmd.left_x/660)*2.0f;
 8004cf4:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee0 <balancing_task+0x270>)
 8004cf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d02:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8004ee4 <balancing_task+0x274>
 8004d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d0a:	eef1 7a67 	vneg.f32	s15, s15
 8004d0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d12:	4b75      	ldr	r3, [pc, #468]	@ (8004ee8 <balancing_task+0x278>)
 8004d14:	edc3 7a03 	vstr	s15, [r3, #12]
//        target.legLength = ((float)g_remote_cmd.right_y/660)*0.04 + 0.12f;
        target.legLength = ((float)g_remote_cmd.right_y/660)*0.04 + 0.10f;
 8004d18:	4b71      	ldr	r3, [pc, #452]	@ (8004ee0 <balancing_task+0x270>)
 8004d1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d26:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8004ee4 <balancing_task+0x274>
 8004d2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d2e:	ee16 0a90 	vmov	r0, s13
 8004d32:	f7fb fc09 	bl	8000548 <__aeabi_f2d>
 8004d36:	a362      	add	r3, pc, #392	@ (adr r3, 8004ec0 <balancing_task+0x250>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f7fb fc5c 	bl	80005f8 <__aeabi_dmul>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	a35f      	add	r3, pc, #380	@ (adr r3, 8004ec8 <balancing_task+0x258>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f7fb fa9d 	bl	800028c <__adddf3>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f7fb ff45 	bl	8000be8 <__aeabi_d2f>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4a61      	ldr	r2, [pc, #388]	@ (8004ee8 <balancing_task+0x278>)
 8004d62:	6193      	str	r3, [r2, #24]
        leftJoint[1].angle = (double)g_can_motors[FR_MOTOR_ID-1].angle_rad;
 8004d64:	4b61      	ldr	r3, [pc, #388]	@ (8004eec <balancing_task+0x27c>)
 8004d66:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb fbec 	bl	8000548 <__aeabi_f2d>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	495e      	ldr	r1, [pc, #376]	@ (8004ef0 <balancing_task+0x280>)
 8004d76:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        leftJoint[1].speed = (double)g_can_motors[FR_MOTOR_ID-1].speed;
 8004d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8004eec <balancing_task+0x27c>)
 8004d7c:	e9d3 23f8 	ldrd	r2, r3, [r3, #992]	@ 0x3e0
 8004d80:	495b      	ldr	r1, [pc, #364]	@ (8004ef0 <balancing_task+0x280>)
 8004d82:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
        leftJoint[0].angle = (double)g_can_motors[FL_MOTOR_ID-1].angle_rad;
 8004d86:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <balancing_task+0x27c>)
 8004d88:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fb fbda 	bl	8000548 <__aeabi_f2d>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4955      	ldr	r1, [pc, #340]	@ (8004ef0 <balancing_task+0x280>)
 8004d9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        leftJoint[0].speed = (double)g_can_motors[FL_MOTOR_ID-1].speed;
 8004d9e:	4b53      	ldr	r3, [pc, #332]	@ (8004eec <balancing_task+0x27c>)
 8004da0:	f503 639a 	add.w	r3, r3, #1232	@ 0x4d0
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	4951      	ldr	r1, [pc, #324]	@ (8004ef0 <balancing_task+0x280>)
 8004daa:	e9c1 2300 	strd	r2, r3, [r1]
        rightJoint[1].angle = (double)g_can_motors[BL_MOTOR_ID-1].angle_rad;
 8004dae:	4b4f      	ldr	r3, [pc, #316]	@ (8004eec <balancing_task+0x27c>)
 8004db0:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb fbc6 	bl	8000548 <__aeabi_f2d>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	494c      	ldr	r1, [pc, #304]	@ (8004ef4 <balancing_task+0x284>)
 8004dc2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        rightJoint[1].speed = (double)g_can_motors[BL_MOTOR_ID-1].speed;
 8004dc6:	4b49      	ldr	r3, [pc, #292]	@ (8004eec <balancing_task+0x27c>)
 8004dc8:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	4948      	ldr	r1, [pc, #288]	@ (8004ef4 <balancing_task+0x284>)
 8004dd2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
        rightJoint[0].angle = (double)g_can_motors[BR_MOTOR_ID-1].angle_rad;
 8004dd6:	4b45      	ldr	r3, [pc, #276]	@ (8004eec <balancing_task+0x27c>)
 8004dd8:	f503 63d5 	add.w	r3, r3, #1704	@ 0x6a8
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fb fbb2 	bl	8000548 <__aeabi_f2d>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4942      	ldr	r1, [pc, #264]	@ (8004ef4 <balancing_task+0x284>)
 8004dea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rightJoint[0].speed = (double)g_can_motors[BR_MOTOR_ID-1].speed;
 8004dee:	4b3f      	ldr	r3, [pc, #252]	@ (8004eec <balancing_task+0x27c>)
 8004df0:	f503 63d6 	add.w	r3, r3, #1712	@ 0x6b0
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	493e      	ldr	r1, [pc, #248]	@ (8004ef4 <balancing_task+0x284>)
 8004dfa:	e9c1 2300 	strd	r2, r3, [r1]
        leftWheel.angle = (double)g_can_motors[LEFT_MOTOR_ID-1].angle_rad/19.2;
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eec <balancing_task+0x27c>)
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fb fba0 	bl	8000548 <__aeabi_f2d>
 8004e08:	a331      	add	r3, pc, #196	@ (adr r3, 8004ed0 <balancing_task+0x260>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f7fb fd1d 	bl	800084c <__aeabi_ddiv>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4938      	ldr	r1, [pc, #224]	@ (8004ef8 <balancing_task+0x288>)
 8004e18:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rightWheel.angle = (double)g_can_motors[RIGHT_MOTOR_ID-1].angle_rad/19.2;
 8004e1c:	4b33      	ldr	r3, [pc, #204]	@ (8004eec <balancing_task+0x27c>)
 8004e1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fb fb90 	bl	8000548 <__aeabi_f2d>
 8004e28:	a329      	add	r3, pc, #164	@ (adr r3, 8004ed0 <balancing_task+0x260>)
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	f7fb fd0d 	bl	800084c <__aeabi_ddiv>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4931      	ldr	r1, [pc, #196]	@ (8004efc <balancing_task+0x28c>)
 8004e38:	e9c1 2302 	strd	r2, r3, [r1, #8]
        leftWheel.speed = -(double)g_can_motors[LEFT_MOTOR_ID-1].raw_data.rpm * (2*PI/60) /19.2;
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004eec <balancing_task+0x27c>)
 8004e3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fb fb6e 	bl	8000524 <__aeabi_i2d>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004e52:	a321      	add	r3, pc, #132	@ (adr r3, 8004ed8 <balancing_task+0x268>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb fbcc 	bl	80005f8 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	a319      	add	r3, pc, #100	@ (adr r3, 8004ed0 <balancing_task+0x260>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fced 	bl	800084c <__aeabi_ddiv>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4920      	ldr	r1, [pc, #128]	@ (8004ef8 <balancing_task+0x288>)
 8004e78:	e9c1 2300 	strd	r2, r3, [r1]
        rightWheel.speed = (double)g_can_motors[RIGHT_MOTOR_ID-1].raw_data.rpm * (2*PI/60) /19.2;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <balancing_task+0x27c>)
 8004e7e:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	@ 0xf8
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb fb4e 	bl	8000524 <__aeabi_i2d>
 8004e88:	a313      	add	r3, pc, #76	@ (adr r3, 8004ed8 <balancing_task+0x268>)
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f7fb fbb3 	bl	80005f8 <__aeabi_dmul>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	a30d      	add	r3, pc, #52	@ (adr r3, 8004ed0 <balancing_task+0x260>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f7fb fcd4 	bl	800084c <__aeabi_ddiv>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4914      	ldr	r1, [pc, #80]	@ (8004efc <balancing_task+0x28c>)
 8004eaa:	e9c1 2300 	strd	r2, r3, [r1]

        ///////////////////
        vTaskDelayUntil(&start_time, 4);
 8004eae:	f107 030c 	add.w	r3, r7, #12
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f015 fe65 	bl	801ab84 <vTaskDelayUntil>
        endtime = get_microseconds();
 8004eba:	bf00      	nop
 8004ebc:	e6ea      	b.n	8004c94 <balancing_task+0x24>
 8004ebe:	bf00      	nop
 8004ec0:	47ae147b 	.word	0x47ae147b
 8004ec4:	3fa47ae1 	.word	0x3fa47ae1
 8004ec8:	a0000000 	.word	0xa0000000
 8004ecc:	3fb99999 	.word	0x3fb99999
 8004ed0:	33333333 	.word	0x33333333
 8004ed4:	40333333 	.word	0x40333333
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	3fbaceea 	.word	0x3fbaceea
 8004ee0:	20000838 	.word	0x20000838
 8004ee4:	44250000 	.word	0x44250000
 8004ee8:	20000008 	.word	0x20000008
 8004eec:	20002220 	.word	0x20002220
 8004ef0:	20001e68 	.word	0x20001e68
 8004ef4:	20001ef8 	.word	0x20001ef8
 8004ef8:	20001f88 	.word	0x20001f88
 8004efc:	20001fd0 	.word	0x20001fd0

08004f00 <Ctrl_TargetUpdateTask>:
    }
}
void Ctrl_TargetUpdateTask()
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8004f06:	f016 f811 	bl	801af2c <xTaskGetTickCount>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	607b      	str	r3, [r7, #4]
	float speedSlopeStep = 0.005f;
 8004f0e:	4b72      	ldr	r3, [pc, #456]	@ (80050d8 <Ctrl_TargetUpdateTask+0x1d8>)
 8004f10:	60fb      	str	r3, [r7, #12]
	while(1){
		//Calculate the speed slope step based on the current leg length (the shorter the leg, the more stable, and the steeper the acceleration/deceleration slope)
			float legLength = (leftLegPos.length + rightLegPos.length) / 2;
 8004f12:	4b72      	ldr	r3, [pc, #456]	@ (80050dc <Ctrl_TargetUpdateTask+0x1dc>)
 8004f14:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f18:	4b71      	ldr	r3, [pc, #452]	@ (80050e0 <Ctrl_TargetUpdateTask+0x1e0>)
 8004f1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f22:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f2a:	edc7 7a02 	vstr	s15, [r7, #8]
//			speedSlopeStep = -(legLength - 0.12f) * 0.03f + 0.005f;
			speedSlopeStep = -(legLength - 0.10f) * 0.03f + 0.005f;
 8004f2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f32:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80050e4 <Ctrl_TargetUpdateTask+0x1e4>
 8004f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f3a:	eef1 7a67 	vneg.f32	s15, s15
 8004f3e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80050e8 <Ctrl_TargetUpdateTask+0x1e8>
 8004f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f46:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80050ec <Ctrl_TargetUpdateTask+0x1ec>
 8004f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f4e:	edc7 7a03 	vstr	s15, [r7, #12]

			//Calculate the speed ramp, and update the ramp value to target.speed
			if(fabs(target.speedCmd - target.speed) < speedSlopeStep)
 8004f52:	4b67      	ldr	r3, [pc, #412]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004f54:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f58:	4b65      	ldr	r3, [pc, #404]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004f5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f62:	eef0 7ae7 	vabs.f32	s15, s15
 8004f66:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	dd04      	ble.n	8004f7e <Ctrl_TargetUpdateTask+0x7e>
				target.speed = target.speedCmd;
 8004f74:	4b5e      	ldr	r3, [pc, #376]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a5d      	ldr	r2, [pc, #372]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004f7a:	6093      	str	r3, [r2, #8]
 8004f7c:	e021      	b.n	8004fc2 <Ctrl_TargetUpdateTask+0xc2>
			else
			{
				if(target.speedCmd - target.speed > 0)
 8004f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004f80:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f84:	4b5a      	ldr	r3, [pc, #360]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004f86:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f96:	dd0a      	ble.n	8004fae <Ctrl_TargetUpdateTask+0xae>
					target.speed += speedSlopeStep;
 8004f98:	4b55      	ldr	r3, [pc, #340]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004f9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa6:	4b52      	ldr	r3, [pc, #328]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004fa8:	edc3 7a02 	vstr	s15, [r3, #8]
 8004fac:	e009      	b.n	8004fc2 <Ctrl_TargetUpdateTask+0xc2>
				else
					target.speed -= speedSlopeStep;
 8004fae:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004fb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8004fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004fbe:	edc3 7a02 	vstr	s15, [r3, #8]
			}

			//Calculate the position target and limit it within ±0.1m of the current position
			target.position += target.speed * 0.004f;
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004fc4:	ed93 7a00 	vldr	s14, [r3]
 8004fc8:	4b49      	ldr	r3, [pc, #292]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004fca:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fce:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80050f4 <Ctrl_TargetUpdateTask+0x1f4>
 8004fd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fda:	4b45      	ldr	r3, [pc, #276]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004fdc:	edc3 7a00 	vstr	s15, [r3]
			if(target.position - stateVar.x > 0.1f)
 8004fe0:	4b43      	ldr	r3, [pc, #268]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8004fe2:	ed93 7a00 	vldr	s14, [r3]
 8004fe6:	4b44      	ldr	r3, [pc, #272]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 8004fe8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ff0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80050e4 <Ctrl_TargetUpdateTask+0x1e4>
 8004ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffc:	dd0a      	ble.n	8005014 <Ctrl_TargetUpdateTask+0x114>
				target.position = stateVar.x + 0.1f;
 8004ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 8005000:	edd3 7a02 	vldr	s15, [r3, #8]
 8005004:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80050e4 <Ctrl_TargetUpdateTask+0x1e4>
 8005008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800500c:	4b38      	ldr	r3, [pc, #224]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 800500e:	edc3 7a00 	vstr	s15, [r3]
 8005012:	e018      	b.n	8005046 <Ctrl_TargetUpdateTask+0x146>
			else if(target.position - stateVar.x < -0.1f)
 8005014:	4b36      	ldr	r3, [pc, #216]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8005016:	ed93 7a00 	vldr	s14, [r3]
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 800501c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005024:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80050fc <Ctrl_TargetUpdateTask+0x1fc>
 8005028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005030:	d509      	bpl.n	8005046 <Ctrl_TargetUpdateTask+0x146>
				target.position = stateVar.x - 0.1f;
 8005032:	4b31      	ldr	r3, [pc, #196]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 8005034:	edd3 7a02 	vldr	s15, [r3, #8]
 8005038:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80050e4 <Ctrl_TargetUpdateTask+0x1e4>
 800503c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005040:	4b2b      	ldr	r3, [pc, #172]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8005042:	edc3 7a00 	vstr	s15, [r3]

			//Limit the target speed to ±0.3m/s of the current speed
			if(target.speed - stateVar.dx > 1.0f)
 8005046:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8005048:	ed93 7a02 	vldr	s14, [r3, #8]
 800504c:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 800504e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800505a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	dd0a      	ble.n	800507a <Ctrl_TargetUpdateTask+0x17a>
				target.speed = stateVar.dx + 1.0f;
 8005064:	4b24      	ldr	r3, [pc, #144]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 8005066:	edd3 7a03 	vldr	s15, [r3, #12]
 800506a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800506e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005072:	4b1f      	ldr	r3, [pc, #124]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 8005074:	edc3 7a02 	vstr	s15, [r3, #8]
 8005078:	e018      	b.n	80050ac <Ctrl_TargetUpdateTask+0x1ac>
			else if(target.speed - stateVar.dx < -1.0f)
 800507a:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 800507c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005080:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 8005082:	edd3 7a03 	vldr	s15, [r3, #12]
 8005086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800508a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800508e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005096:	d509      	bpl.n	80050ac <Ctrl_TargetUpdateTask+0x1ac>
				target.speed = stateVar.dx - 1.0f;
 8005098:	4b17      	ldr	r3, [pc, #92]	@ (80050f8 <Ctrl_TargetUpdateTask+0x1f8>)
 800509a:	edd3 7a03 	vldr	s15, [r3, #12]
 800509e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 80050a8:	edc3 7a02 	vstr	s15, [r3, #8]

			//Calculate the yaw angle target
			target.yawAngle += target.yawSpeedCmd * 0.004f;
 80050ac:	4b10      	ldr	r3, [pc, #64]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 80050ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80050b2:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 80050b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80050b8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80050f4 <Ctrl_TargetUpdateTask+0x1f4>
 80050bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <Ctrl_TargetUpdateTask+0x1f0>)
 80050c6:	edc3 7a04 	vstr	s15, [r3, #16]
			vTaskDelayUntil(&xLastWakeTime, 4); //Update every 4ms
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	2104      	movs	r1, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f015 fd58 	bl	801ab84 <vTaskDelayUntil>
	while(1){
 80050d4:	e71d      	b.n	8004f12 <Ctrl_TargetUpdateTask+0x12>
 80050d6:	bf00      	nop
 80050d8:	3ba3d70a 	.word	0x3ba3d70a
 80050dc:	20002018 	.word	0x20002018
 80050e0:	2000202c 	.word	0x2000202c
 80050e4:	3dcccccd 	.word	0x3dcccccd
 80050e8:	3cf5c28f 	.word	0x3cf5c28f
 80050ec:	3ba3d70a 	.word	0x3ba3d70a
 80050f0:	20000008 	.word	0x20000008
 80050f4:	3b83126f 	.word	0x3b83126f
 80050f8:	20002040 	.word	0x20002040
 80050fc:	bdcccccd 	.word	0xbdcccccd

08005100 <LegPos_UpdateTask>:
	}
}

void LegPos_UpdateTask(void *arg)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	@ 0x38
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	const float lpfRatio = 0.5f; //Low-pass filter coefficient (weight of new value)
 8005108:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float lastLeftDLength = 0, lastRightDLength = 0;
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	637b      	str	r3, [r7, #52]	@ 0x34
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800511a:	f015 ff07 	bl	801af2c <xTaskGetTickCount>
 800511e:	4603      	mov	r3, r0
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (1)
	{
		double legPos[2], legSpd[2];

		//Calculate the left leg position
		leg_pos(leftJoint[1].angle, leftJoint[0].angle, legPos);
 8005122:	4b82      	ldr	r3, [pc, #520]	@ (800532c <LegPos_UpdateTask+0x22c>)
 8005124:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8005128:	4b80      	ldr	r3, [pc, #512]	@ (800532c <LegPos_UpdateTask+0x22c>)
 800512a:	ed93 6b02 	vldr	d6, [r3, #8]
 800512e:	f107 0318 	add.w	r3, r7, #24
 8005132:	4618      	mov	r0, r3
 8005134:	eeb0 1a46 	vmov.f32	s2, s12
 8005138:	eef0 1a66 	vmov.f32	s3, s13
 800513c:	eeb0 0a47 	vmov.f32	s0, s14
 8005140:	eef0 0a67 	vmov.f32	s1, s15
 8005144:	f003 ff54 	bl	8008ff0 <leg_pos>
		leftLegPos.length = legPos[0];
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	f7fb fd4a 	bl	8000be8 <__aeabi_d2f>
 8005154:	4603      	mov	r3, r0
 8005156:	4a76      	ldr	r2, [pc, #472]	@ (8005330 <LegPos_UpdateTask+0x230>)
 8005158:	6053      	str	r3, [r2, #4]
		leftLegPos.angle = legPos[1];
 800515a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	f7fb fd41 	bl	8000be8 <__aeabi_d2f>
 8005166:	4603      	mov	r3, r0
 8005168:	4a71      	ldr	r2, [pc, #452]	@ (8005330 <LegPos_UpdateTask+0x230>)
 800516a:	6013      	str	r3, [r2, #0]

		//Calculate the left leg speed
		leg_spd(leftJoint[1].speed, leftJoint[0].speed, leftJoint[1].angle, leftJoint[0].angle, legSpd);
 800516c:	4b6f      	ldr	r3, [pc, #444]	@ (800532c <LegPos_UpdateTask+0x22c>)
 800516e:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 8005172:	4b6e      	ldr	r3, [pc, #440]	@ (800532c <LegPos_UpdateTask+0x22c>)
 8005174:	ed93 6b00 	vldr	d6, [r3]
 8005178:	4b6c      	ldr	r3, [pc, #432]	@ (800532c <LegPos_UpdateTask+0x22c>)
 800517a:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800517e:	4b6b      	ldr	r3, [pc, #428]	@ (800532c <LegPos_UpdateTask+0x22c>)
 8005180:	ed93 4b02 	vldr	d4, [r3, #8]
 8005184:	f107 0308 	add.w	r3, r7, #8
 8005188:	4618      	mov	r0, r3
 800518a:	eeb0 3a44 	vmov.f32	s6, s8
 800518e:	eef0 3a64 	vmov.f32	s7, s9
 8005192:	eeb0 2a45 	vmov.f32	s4, s10
 8005196:	eef0 2a65 	vmov.f32	s5, s11
 800519a:	eeb0 1a46 	vmov.f32	s2, s12
 800519e:	eef0 1a66 	vmov.f32	s3, s13
 80051a2:	eeb0 0a47 	vmov.f32	s0, s14
 80051a6:	eef0 0a67 	vmov.f32	s1, s15
 80051aa:	f004 fc25 	bl	80099f8 <leg_spd>
		leftLegPos.dLength = legSpd[0];
 80051ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	f7fb fd17 	bl	8000be8 <__aeabi_d2f>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005330 <LegPos_UpdateTask+0x230>)
 80051be:	60d3      	str	r3, [r2, #12]
		leftLegPos.dAngle = legSpd[1];
 80051c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	f7fb fd0e 	bl	8000be8 <__aeabi_d2f>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4a58      	ldr	r2, [pc, #352]	@ (8005330 <LegPos_UpdateTask+0x230>)
 80051d0:	6093      	str	r3, [r2, #8]

		//Calculate the left leg length acceleration
		leftLegPos.ddLength = ((leftLegPos.dLength - lastLeftDLength) * 1000 / 4) * lpfRatio + leftLegPos.ddLength * (1 - lpfRatio);
 80051d2:	4b57      	ldr	r3, [pc, #348]	@ (8005330 <LegPos_UpdateTask+0x230>)
 80051d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80051d8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80051dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051e0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005334 <LegPos_UpdateTask+0x234>
 80051e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051e8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80051ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80051f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005330 <LegPos_UpdateTask+0x230>)
 80051fa:	edd3 6a04 	vldr	s13, [r3, #16]
 80051fe:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005202:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005206:	ee76 7a67 	vsub.f32	s15, s12, s15
 800520a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800520e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005212:	4b47      	ldr	r3, [pc, #284]	@ (8005330 <LegPos_UpdateTask+0x230>)
 8005214:	edc3 7a04 	vstr	s15, [r3, #16]
		lastLeftDLength = leftLegPos.dLength;
 8005218:	4b45      	ldr	r3, [pc, #276]	@ (8005330 <LegPos_UpdateTask+0x230>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34

		//Calculate the right leg position
		leg_pos(rightJoint[1].angle, rightJoint[0].angle, legPos);
 800521e:	4b46      	ldr	r3, [pc, #280]	@ (8005338 <LegPos_UpdateTask+0x238>)
 8005220:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8005224:	4b44      	ldr	r3, [pc, #272]	@ (8005338 <LegPos_UpdateTask+0x238>)
 8005226:	ed93 6b02 	vldr	d6, [r3, #8]
 800522a:	f107 0318 	add.w	r3, r7, #24
 800522e:	4618      	mov	r0, r3
 8005230:	eeb0 1a46 	vmov.f32	s2, s12
 8005234:	eef0 1a66 	vmov.f32	s3, s13
 8005238:	eeb0 0a47 	vmov.f32	s0, s14
 800523c:	eef0 0a67 	vmov.f32	s1, s15
 8005240:	f003 fed6 	bl	8008ff0 <leg_pos>
		rightLegPos.length = legPos[0];
 8005244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	f7fb fccc 	bl	8000be8 <__aeabi_d2f>
 8005250:	4603      	mov	r3, r0
 8005252:	4a3a      	ldr	r2, [pc, #232]	@ (800533c <LegPos_UpdateTask+0x23c>)
 8005254:	6053      	str	r3, [r2, #4]
		rightLegPos.angle = legPos[1];
 8005256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f7fb fcc3 	bl	8000be8 <__aeabi_d2f>
 8005262:	4603      	mov	r3, r0
 8005264:	4a35      	ldr	r2, [pc, #212]	@ (800533c <LegPos_UpdateTask+0x23c>)
 8005266:	6013      	str	r3, [r2, #0]

		//Calculate the right leg speed
		leg_spd(rightJoint[1].speed, rightJoint[0].speed, rightJoint[1].angle, rightJoint[0].angle, legSpd);
 8005268:	4b33      	ldr	r3, [pc, #204]	@ (8005338 <LegPos_UpdateTask+0x238>)
 800526a:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 800526e:	4b32      	ldr	r3, [pc, #200]	@ (8005338 <LegPos_UpdateTask+0x238>)
 8005270:	ed93 6b00 	vldr	d6, [r3]
 8005274:	4b30      	ldr	r3, [pc, #192]	@ (8005338 <LegPos_UpdateTask+0x238>)
 8005276:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800527a:	4b2f      	ldr	r3, [pc, #188]	@ (8005338 <LegPos_UpdateTask+0x238>)
 800527c:	ed93 4b02 	vldr	d4, [r3, #8]
 8005280:	f107 0308 	add.w	r3, r7, #8
 8005284:	4618      	mov	r0, r3
 8005286:	eeb0 3a44 	vmov.f32	s6, s8
 800528a:	eef0 3a64 	vmov.f32	s7, s9
 800528e:	eeb0 2a45 	vmov.f32	s4, s10
 8005292:	eef0 2a65 	vmov.f32	s5, s11
 8005296:	eeb0 1a46 	vmov.f32	s2, s12
 800529a:	eef0 1a66 	vmov.f32	s3, s13
 800529e:	eeb0 0a47 	vmov.f32	s0, s14
 80052a2:	eef0 0a67 	vmov.f32	s1, s15
 80052a6:	f004 fba7 	bl	80099f8 <leg_spd>
		rightLegPos.dLength = legSpd[0];
 80052aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	f7fb fc99 	bl	8000be8 <__aeabi_d2f>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4a20      	ldr	r2, [pc, #128]	@ (800533c <LegPos_UpdateTask+0x23c>)
 80052ba:	60d3      	str	r3, [r2, #12]
		rightLegPos.dAngle = legSpd[1];
 80052bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	f7fb fc90 	bl	8000be8 <__aeabi_d2f>
 80052c8:	4603      	mov	r3, r0
 80052ca:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <LegPos_UpdateTask+0x23c>)
 80052cc:	6093      	str	r3, [r2, #8]

		//Calculate the right leg length acceleration
		rightLegPos.ddLength = ((rightLegPos.dLength - lastRightDLength) * 1000 / 4) * lpfRatio + rightLegPos.ddLength * (1 - lpfRatio);
 80052ce:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <LegPos_UpdateTask+0x23c>)
 80052d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80052d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80052d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052dc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005334 <LegPos_UpdateTask+0x234>
 80052e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052e4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80052e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80052ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80052f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <LegPos_UpdateTask+0x23c>)
 80052f6:	edd3 6a04 	vldr	s13, [r3, #16]
 80052fa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80052fe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005302:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800530a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800530e:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <LegPos_UpdateTask+0x23c>)
 8005310:	edc3 7a04 	vstr	s15, [r3, #16]
		lastRightDLength = rightLegPos.dLength;
 8005314:	4b09      	ldr	r3, [pc, #36]	@ (800533c <LegPos_UpdateTask+0x23c>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskDelayUntil(&xLastWakeTime, 4); //Update every 4ms
 800531a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800531e:	2104      	movs	r1, #4
 8005320:	4618      	mov	r0, r3
 8005322:	f015 fc2f 	bl	801ab84 <vTaskDelayUntil>
	{
 8005326:	bf00      	nop
 8005328:	e6fb      	b.n	8005122 <LegPos_UpdateTask+0x22>
 800532a:	bf00      	nop
 800532c:	20001e68 	.word	0x20001e68
 8005330:	20002018 	.word	0x20002018
 8005334:	447a0000 	.word	0x447a0000
 8005338:	20001ef8 	.word	0x20001ef8
 800533c:	2000202c 	.word	0x2000202c

08005340 <Ctrl_Task>:

	vTaskDelete(NULL);
}

void Ctrl_Task(void *arg)
{
 8005340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005344:	b0ec      	sub	sp, #432	@ 0x1b0
 8005346:	af00      	add	r7, sp, #0
 8005348:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800534c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005350:	6018      	str	r0, [r3, #0]
	double starttime = 0;
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
	double endtime = 0;
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	double dt;
//	const float wheelRadius = 0.045f; //m, wheel radius
	const float wheelRadius = 0.075f; //m, wheel radius
 800536a:	4bbd      	ldr	r3, [pc, #756]	@ (8005660 <Ctrl_Task+0x320>)
 800536c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
	const float legMass = 0.01f; //kg, leg mass
 8005370:	4bbc      	ldr	r3, [pc, #752]	@ (8005664 <Ctrl_Task+0x324>)
 8005372:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8005376:	f015 fdd9 	bl	801af2c <xTaskGetTickCount>
 800537a:	4603      	mov	r3, r0
 800537c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	//Manually apply a coefficient to the feedback matrix for manually optimizing control performance
	float kRatio[2][6] = {{1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f},
 8005380:	4bb9      	ldr	r3, [pc, #740]	@ (8005668 <Ctrl_Task+0x328>)
 8005382:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8005386:	461d      	mov	r5, r3
 8005388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800538a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800538c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800538e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005390:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						{1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f}};
	float lqrTpRatio = 1.0f, lqrTRatio = 1.0f;
 8005398:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800539c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80053a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053a4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

	//Set initial target values
	target.rollAngle = 0.0f;
 80053a8:	4bb0      	ldr	r3, [pc, #704]	@ (800566c <Ctrl_Task+0x32c>)
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	615a      	str	r2, [r3, #20]
//	target.legLength = 0.12f;
	target.legLength = 0.10f;
 80053b0:	4bae      	ldr	r3, [pc, #696]	@ (800566c <Ctrl_Task+0x32c>)
 80053b2:	4aaf      	ldr	r2, [pc, #700]	@ (8005670 <Ctrl_Task+0x330>)
 80053b4:	619a      	str	r2, [r3, #24]
	target.speed = 0.0f;
 80053b6:	4bad      	ldr	r3, [pc, #692]	@ (800566c <Ctrl_Task+0x32c>)
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
	target.position = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 80053be:	4bad      	ldr	r3, [pc, #692]	@ (8005674 <Ctrl_Task+0x334>)
 80053c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80053c4:	4bac      	ldr	r3, [pc, #688]	@ (8005678 <Ctrl_Task+0x338>)
 80053c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80053ca:	f7fa ff5f 	bl	800028c <__adddf3>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80053de:	f7fb fa35 	bl	800084c <__aeabi_ddiv>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4614      	mov	r4, r2
 80053e8:	461d      	mov	r5, r3
 80053ea:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80053ee:	f7fb f8ab 	bl	8000548 <__aeabi_f2d>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fb f8fd 	bl	80005f8 <__aeabi_dmul>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4610      	mov	r0, r2
 8005404:	4619      	mov	r1, r3
 8005406:	f7fb fbef 	bl	8000be8 <__aeabi_d2f>
 800540a:	4603      	mov	r3, r0
 800540c:	4a97      	ldr	r2, [pc, #604]	@ (800566c <Ctrl_Task+0x32c>)
 800540e:	6013      	str	r3, [r2, #0]

	while (1)
	{
		endtime = get_microseconds();
 8005410:	f7fc fed6 	bl	80021c0 <get_microseconds>
 8005414:	4603      	mov	r3, r0
 8005416:	4618      	mov	r0, r3
 8005418:	f7fb f874 	bl	8000504 <__aeabi_ui2d>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		dt = endtime - starttime;
 8005424:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8005428:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800542c:	f7fa ff2c 	bl	8000288 <__aeabi_dsub>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
		check_dt = dt;
 8005438:	4990      	ldr	r1, [pc, #576]	@ (800567c <Ctrl_Task+0x33c>)
 800543a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800543e:	e9c1 2300 	strd	r2, r3, [r1]
		starttime = get_microseconds();
 8005442:	f7fc febd 	bl	80021c0 <get_microseconds>
 8005446:	4603      	mov	r3, r0
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb f85b 	bl	8000504 <__aeabi_ui2d>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8
		//Calculate state variables
		stateVar.phi = imu_heading.pit;
 8005456:	4b8a      	ldr	r3, [pc, #552]	@ (8005680 <Ctrl_Task+0x340>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a8a      	ldr	r2, [pc, #552]	@ (8005684 <Ctrl_Task+0x344>)
 800545c:	6113      	str	r3, [r2, #16]
		stateVar.dPhi = imu_heading.dpit;
 800545e:	4b88      	ldr	r3, [pc, #544]	@ (8005680 <Ctrl_Task+0x340>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4a88      	ldr	r2, [pc, #544]	@ (8005684 <Ctrl_Task+0x344>)
 8005464:	6153      	str	r3, [r2, #20]
		stateVar.x = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 8005466:	4b83      	ldr	r3, [pc, #524]	@ (8005674 <Ctrl_Task+0x334>)
 8005468:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800546c:	4b82      	ldr	r3, [pc, #520]	@ (8005678 <Ctrl_Task+0x338>)
 800546e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005472:	f7fa ff0b 	bl	800028c <__adddf3>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005486:	f7fb f9e1 	bl	800084c <__aeabi_ddiv>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4614      	mov	r4, r2
 8005490:	461d      	mov	r5, r3
 8005492:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8005496:	f7fb f857 	bl	8000548 <__aeabi_f2d>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb f8a9 	bl	80005f8 <__aeabi_dmul>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4610      	mov	r0, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7fb fb9b 	bl	8000be8 <__aeabi_d2f>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a73      	ldr	r2, [pc, #460]	@ (8005684 <Ctrl_Task+0x344>)
 80054b6:	6093      	str	r3, [r2, #8]
		stateVar.dx = (leftWheel.speed + rightWheel.speed) / 2 * wheelRadius;
 80054b8:	4b6e      	ldr	r3, [pc, #440]	@ (8005674 <Ctrl_Task+0x334>)
 80054ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054be:	4b6e      	ldr	r3, [pc, #440]	@ (8005678 <Ctrl_Task+0x338>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fa fee2 	bl	800028c <__adddf3>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80054d8:	f7fb f9b8 	bl	800084c <__aeabi_ddiv>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4614      	mov	r4, r2
 80054e2:	461d      	mov	r5, r3
 80054e4:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80054e8:	f7fb f82e 	bl	8000548 <__aeabi_f2d>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4620      	mov	r0, r4
 80054f2:	4629      	mov	r1, r5
 80054f4:	f7fb f880 	bl	80005f8 <__aeabi_dmul>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	f7fb fb72 	bl	8000be8 <__aeabi_d2f>
 8005504:	4603      	mov	r3, r0
 8005506:	4a5f      	ldr	r2, [pc, #380]	@ (8005684 <Ctrl_Task+0x344>)
 8005508:	60d3      	str	r3, [r2, #12]
		stateVar.theta = (leftLegPos.angle + rightLegPos.angle) / 2 - M_PI_2 - imu_heading.pit;
 800550a:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <Ctrl_Task+0x348>)
 800550c:	ed93 7a00 	vldr	s14, [r3]
 8005510:	4b5e      	ldr	r3, [pc, #376]	@ (800568c <Ctrl_Task+0x34c>)
 8005512:	edd3 7a00 	vldr	s15, [r3]
 8005516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800551a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800551e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005522:	ee16 0a90 	vmov	r0, s13
 8005526:	f7fb f80f 	bl	8000548 <__aeabi_f2d>
 800552a:	a349      	add	r3, pc, #292	@ (adr r3, 8005650 <Ctrl_Task+0x310>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f7fa feaa 	bl	8000288 <__aeabi_dsub>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4614      	mov	r4, r2
 800553a:	461d      	mov	r5, r3
 800553c:	4b50      	ldr	r3, [pc, #320]	@ (8005680 <Ctrl_Task+0x340>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f7fb f801 	bl	8000548 <__aeabi_f2d>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4620      	mov	r0, r4
 800554c:	4629      	mov	r1, r5
 800554e:	f7fa fe9b 	bl	8000288 <__aeabi_dsub>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f7fb fb45 	bl	8000be8 <__aeabi_d2f>
 800555e:	4603      	mov	r3, r0
 8005560:	4a48      	ldr	r2, [pc, #288]	@ (8005684 <Ctrl_Task+0x344>)
 8005562:	6013      	str	r3, [r2, #0]
		stateVar.dTheta = (leftLegPos.dAngle + rightLegPos.dAngle) / 2 - imu_heading.dpit;
 8005564:	4b48      	ldr	r3, [pc, #288]	@ (8005688 <Ctrl_Task+0x348>)
 8005566:	ed93 7a02 	vldr	s14, [r3, #8]
 800556a:	4b48      	ldr	r3, [pc, #288]	@ (800568c <Ctrl_Task+0x34c>)
 800556c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005574:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005578:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800557c:	4b40      	ldr	r3, [pc, #256]	@ (8005680 <Ctrl_Task+0x340>)
 800557e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005586:	4b3f      	ldr	r3, [pc, #252]	@ (8005684 <Ctrl_Task+0x344>)
 8005588:	edc3 7a01 	vstr	s15, [r3, #4]
		double legLength = (leftLegPos.length + rightLegPos.length) / 2;
 800558c:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <Ctrl_Task+0x348>)
 800558e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005592:	4b3e      	ldr	r3, [pc, #248]	@ (800568c <Ctrl_Task+0x34c>)
 8005594:	edd3 7a01 	vldr	s15, [r3, #4]
 8005598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800559c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80055a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055a4:	ee16 0a90 	vmov	r0, s13
 80055a8:	f7fa ffce 	bl	8000548 <__aeabi_f2d>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		double dLegLength = (leftLegPos.dLength + rightLegPos.dLength) / 2;
 80055b4:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <Ctrl_Task+0x348>)
 80055b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80055ba:	4b34      	ldr	r3, [pc, #208]	@ (800568c <Ctrl_Task+0x34c>)
 80055bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80055c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80055c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055cc:	ee16 0a90 	vmov	r0, s13
 80055d0:	f7fa ffba 	bl	8000548 <__aeabi_f2d>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150

		//If in stand-up preparation mode, skip further control
		if(standupState == StandupState_Prepare)
 80055dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005690 <Ctrl_Task+0x350>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d107      	bne.n	80055f4 <Ctrl_Task+0x2b4>
		{
			vTaskDelayUntil(&xLastWakeTime, 4);
 80055e4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80055e8:	2104      	movs	r1, #4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f015 faca 	bl	801ab84 <vTaskDelayUntil>
			continue;
 80055f0:	f000 bf7e 	b.w	80064f0 <Ctrl_Task+0x11b0>
		}

		//Compute LQR feedback matrix
		double kRes[12] = {0}, k[2][6] = {0};
 80055f4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80055f8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80055fc:	4618      	mov	r0, r3
 80055fe:	2360      	movs	r3, #96	@ 0x60
 8005600:	461a      	mov	r2, r3
 8005602:	2100      	movs	r1, #0
 8005604:	f018 f885 	bl	801d712 <memset>
 8005608:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800560c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005610:	4618      	mov	r0, r3
 8005612:	2360      	movs	r3, #96	@ 0x60
 8005614:	461a      	mov	r2, r3
 8005616:	2100      	movs	r1, #0
 8005618:	f018 f87b 	bl	801d712 <memset>
		lqr_k(legLength, kRes);
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	4618      	mov	r0, r3
 8005622:	ed97 0b56 	vldr	d0, [r7, #344]	@ 0x158
 8005626:	f005 f853 	bl	800a6d0 <lqr_k>
//		lqr_k(0.12, k_check);
		lqr_k(0.10, k_check);
 800562a:	481a      	ldr	r0, [pc, #104]	@ (8005694 <Ctrl_Task+0x354>)
 800562c:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8005658 <Ctrl_Task+0x318>
 8005630:	f005 f84e 	bl	800a6d0 <lqr_k>
		if(groundDetector.isTouchingGround) //Normal ground contact state
 8005634:	4b18      	ldr	r3, [pc, #96]	@ (8005698 <Ctrl_Task+0x358>)
 8005636:	7a1b      	ldrb	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d07d      	beq.n	8005738 <Ctrl_Task+0x3f8>
		{
			for (int i = 0; i < 6; i++)
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005642:	e074      	b.n	800572e <Ctrl_Task+0x3ee>
			{
				for (int j = 0; j < 2; j++)
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800564a:	e067      	b.n	800571c <Ctrl_Task+0x3dc>
 800564c:	f3af 8000 	nop.w
 8005650:	54442d18 	.word	0x54442d18
 8005654:	3ff921fb 	.word	0x3ff921fb
 8005658:	9999999a 	.word	0x9999999a
 800565c:	3fb99999 	.word	0x3fb99999
 8005660:	3d99999a 	.word	0x3d99999a
 8005664:	3c23d70a 	.word	0x3c23d70a
 8005668:	0802438c 	.word	0x0802438c
 800566c:	20000008 	.word	0x20000008
 8005670:	3dcccccd 	.word	0x3dcccccd
 8005674:	20001f88 	.word	0x20001f88
 8005678:	20001fd0 	.word	0x20001fd0
 800567c:	20002190 	.word	0x20002190
 8005680:	20003ad8 	.word	0x20003ad8
 8005684:	20002040 	.word	0x20002040
 8005688:	20002018 	.word	0x20002018
 800568c:	2000202c 	.word	0x2000202c
 8005690:	20002058 	.word	0x20002058
 8005694:	200021b8 	.word	0x200021b8
 8005698:	20000024 	.word	0x20000024
					k[j][i] = kRes[i * 2 + j] * kRatio[j][i];
 800569c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80056a0:	005a      	lsls	r2, r3, #1
 80056a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80056a6:	4413      	add	r3, r2
 80056a8:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80056ac:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80056b8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80056bc:	4613      	mov	r3, r2
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	4413      	add	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80056d0:	443b      	add	r3, r7
 80056d2:	3bac      	subs	r3, #172	@ 0xac
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fa ff36 	bl	8000548 <__aeabi_f2d>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4620      	mov	r0, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	f7fa ff88 	bl	80005f8 <__aeabi_dmul>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80056f4:	f5a3 74a4 	sub.w	r4, r3, #328	@ 0x148
 80056f8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8005708:	4413      	add	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4423      	add	r3, r4
 800570e:	e9c3 0100 	strd	r0, r1, [r3]
				for (int j = 0; j < 2; j++)
 8005712:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005716:	3301      	adds	r3, #1
 8005718:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800571c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005720:	2b01      	cmp	r3, #1
 8005722:	ddbb      	ble.n	800569c <Ctrl_Task+0x35c>
			for (int i = 0; i < 6; i++)
 8005724:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005728:	3301      	adds	r3, #1
 800572a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800572e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005732:	2b05      	cmp	r3, #5
 8005734:	dd86      	ble.n	8005644 <Ctrl_Task+0x304>
 8005736:	e02d      	b.n	8005794 <Ctrl_Task+0x454>
			}
		}
		else //Leg-off-ground state, manually modify the feedback matrix to only keep the leg vertical
		{
			memset(k, 0, sizeof(k));
 8005738:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800573c:	2260      	movs	r2, #96	@ 0x60
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f017 ffe6 	bl	801d712 <memset>
			k[1][0] = kRes[1] * -2;
 8005746:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800574a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800574e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800575a:	f7fa ff4d 	bl	80005f8 <__aeabi_dmul>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 8005766:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800576a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			k[1][1] = kRes[3] * -10;
 800576e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005772:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005776:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	4bda      	ldr	r3, [pc, #872]	@ (8005ae8 <Ctrl_Task+0x7a8>)
 8005780:	f7fa ff3a 	bl	80005f8 <__aeabi_dmul>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 800578c:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 8005790:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		}

		//Prepare state variables
		float x[6] = {stateVar.theta, stateVar.dTheta, stateVar.x, stateVar.dx, stateVar.phi, stateVar.dPhi};
 8005794:	4bd5      	ldr	r3, [pc, #852]	@ (8005aec <Ctrl_Task+0x7ac>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800579c:	4bd3      	ldr	r3, [pc, #844]	@ (8005aec <Ctrl_Task+0x7ac>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057a4:	4bd1      	ldr	r3, [pc, #836]	@ (8005aec <Ctrl_Task+0x7ac>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057ac:	4bcf      	ldr	r3, [pc, #828]	@ (8005aec <Ctrl_Task+0x7ac>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057b4:	4bcd      	ldr	r3, [pc, #820]	@ (8005aec <Ctrl_Task+0x7ac>)
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057bc:	4bcb      	ldr	r3, [pc, #812]	@ (8005aec <Ctrl_Task+0x7ac>)
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		//Subtract given values
		x[2] -= target.position;
 80057c4:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 80057c8:	4bc9      	ldr	r3, [pc, #804]	@ (8005af0 <Ctrl_Task+0x7b0>)
 80057ca:	edd3 7a00 	vldr	s15, [r3]
 80057ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d2:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
		x[3] -= target.speed;
 80057d6:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 80057da:	4bc5      	ldr	r3, [pc, #788]	@ (8005af0 <Ctrl_Task+0x7b0>)
 80057dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80057e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057e4:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
		check_x = x[2];
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	4ac1      	ldr	r2, [pc, #772]	@ (8005af4 <Ctrl_Task+0x7b4>)
 80057ee:	6013      	str	r3, [r2, #0]
		//Matrix multiplication, calculate LQR output
		float lqrOutT = k[0][0] * x[0] + k[0][1] * x[1] + k[0][2] * x[2] + k[0][3] * x[3] + k[0][4] * x[4] + k[0][5] * x[5];
 80057f0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80057f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80057f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80057fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005800:	4618      	mov	r0, r3
 8005802:	f7fa fea1 	bl	8000548 <__aeabi_f2d>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4620      	mov	r0, r4
 800580c:	4629      	mov	r1, r5
 800580e:	f7fa fef3 	bl	80005f8 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4692      	mov	sl, r2
 8005818:	469b      	mov	fp, r3
 800581a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800581e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005822:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005826:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800582a:	4618      	mov	r0, r3
 800582c:	f7fa fe8c 	bl	8000548 <__aeabi_f2d>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4620      	mov	r0, r4
 8005836:	4629      	mov	r1, r5
 8005838:	f7fa fede 	bl	80005f8 <__aeabi_dmul>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4650      	mov	r0, sl
 8005842:	4659      	mov	r1, fp
 8005844:	f7fa fd22 	bl	800028c <__adddf3>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4692      	mov	sl, r2
 800584e:	469b      	mov	fp, r3
 8005850:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005854:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005858:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005860:	4618      	mov	r0, r3
 8005862:	f7fa fe71 	bl	8000548 <__aeabi_f2d>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fa fec3 	bl	80005f8 <__aeabi_dmul>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4650      	mov	r0, sl
 8005878:	4659      	mov	r1, fp
 800587a:	f7fa fd07 	bl	800028c <__adddf3>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4692      	mov	sl, r2
 8005884:	469b      	mov	fp, r3
 8005886:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800588a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800588e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005896:	4618      	mov	r0, r3
 8005898:	f7fa fe56 	bl	8000548 <__aeabi_f2d>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4620      	mov	r0, r4
 80058a2:	4629      	mov	r1, r5
 80058a4:	f7fa fea8 	bl	80005f8 <__aeabi_dmul>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4650      	mov	r0, sl
 80058ae:	4659      	mov	r1, fp
 80058b0:	f7fa fcec 	bl	800028c <__adddf3>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4692      	mov	sl, r2
 80058ba:	469b      	mov	fp, r3
 80058bc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80058c0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80058c4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80058c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fa fe3b 	bl	8000548 <__aeabi_f2d>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4620      	mov	r0, r4
 80058d8:	4629      	mov	r1, r5
 80058da:	f7fa fe8d 	bl	80005f8 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4650      	mov	r0, sl
 80058e4:	4659      	mov	r1, fp
 80058e6:	f7fa fcd1 	bl	800028c <__adddf3>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4692      	mov	sl, r2
 80058f0:	469b      	mov	fp, r3
 80058f2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80058f6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80058fa:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80058fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005902:	4618      	mov	r0, r3
 8005904:	f7fa fe20 	bl	8000548 <__aeabi_f2d>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4620      	mov	r0, r4
 800590e:	4629      	mov	r1, r5
 8005910:	f7fa fe72 	bl	80005f8 <__aeabi_dmul>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4650      	mov	r0, sl
 800591a:	4659      	mov	r1, fp
 800591c:	f7fa fcb6 	bl	800028c <__adddf3>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	f7fb f95e 	bl	8000be8 <__aeabi_d2f>
 800592c:	4603      	mov	r3, r0
 800592e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		float lqrOutTp = k[1][0] * x[0] + k[1][1] * x[1] + k[1][2] * x[2] + k[1][3] * x[3] + k[1][4] * x[4] + k[1][5] * x[5];
 8005932:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005936:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800593a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800593e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fe00 	bl	8000548 <__aeabi_f2d>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fa fe52 	bl	80005f8 <__aeabi_dmul>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4692      	mov	sl, r2
 800595a:	469b      	mov	fp, r3
 800595c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005960:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005964:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8005968:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800596c:	4618      	mov	r0, r3
 800596e:	f7fa fdeb 	bl	8000548 <__aeabi_f2d>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4620      	mov	r0, r4
 8005978:	4629      	mov	r1, r5
 800597a:	f7fa fe3d 	bl	80005f8 <__aeabi_dmul>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4650      	mov	r0, sl
 8005984:	4659      	mov	r1, fp
 8005986:	f7fa fc81 	bl	800028c <__adddf3>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4692      	mov	sl, r2
 8005990:	469b      	mov	fp, r3
 8005992:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005996:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800599a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fa fdd0 	bl	8000548 <__aeabi_f2d>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4620      	mov	r0, r4
 80059ae:	4629      	mov	r1, r5
 80059b0:	f7fa fe22 	bl	80005f8 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4650      	mov	r0, sl
 80059ba:	4659      	mov	r1, fp
 80059bc:	f7fa fc66 	bl	800028c <__adddf3>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4692      	mov	sl, r2
 80059c6:	469b      	mov	fp, r3
 80059c8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80059cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80059d0:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 80059d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fa fdb5 	bl	8000548 <__aeabi_f2d>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4620      	mov	r0, r4
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7fa fe07 	bl	80005f8 <__aeabi_dmul>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4650      	mov	r0, sl
 80059f0:	4659      	mov	r1, fp
 80059f2:	f7fa fc4b 	bl	800028c <__adddf3>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4692      	mov	sl, r2
 80059fc:	469b      	mov	fp, r3
 80059fe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005a02:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005a06:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fa fd9a 	bl	8000548 <__aeabi_f2d>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4620      	mov	r0, r4
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f7fa fdec 	bl	80005f8 <__aeabi_dmul>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4650      	mov	r0, sl
 8005a26:	4659      	mov	r1, fp
 8005a28:	f7fa fc30 	bl	800028c <__adddf3>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4692      	mov	sl, r2
 8005a32:	469b      	mov	fp, r3
 8005a34:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8005a38:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005a3c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 8005a40:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fa fd7f 	bl	8000548 <__aeabi_f2d>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4620      	mov	r0, r4
 8005a50:	4629      	mov	r1, r5
 8005a52:	f7fa fdd1 	bl	80005f8 <__aeabi_dmul>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	f7fa fc15 	bl	800028c <__adddf3>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	f7fb f8bd 	bl	8000be8 <__aeabi_d2f>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
		lqrOutT_check = -lqrOutT;
 8005a74:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8005a78:	eef1 7a67 	vneg.f32	s15, s15
 8005a7c:	ee17 3a90 	vmov	r3, s15
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fa fd61 	bl	8000548 <__aeabi_f2d>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	491b      	ldr	r1, [pc, #108]	@ (8005af8 <Ctrl_Task+0x7b8>)
 8005a8c:	e9c1 2300 	strd	r2, r3, [r1]
		lqrOutTp_check = -lqrOutTp;
 8005a90:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8005a94:	eef1 7a67 	vneg.f32	s15, s15
 8005a98:	ee17 3a90 	vmov	r3, s15
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fa fd53 	bl	8000548 <__aeabi_f2d>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4915      	ldr	r1, [pc, #84]	@ (8005afc <Ctrl_Task+0x7bc>)
 8005aa8:	e9c1 2300 	strd	r2, r3, [r1]
		//Calculate yaw axis PID output
		PID_Compute(&yawPID, target.yawAngle, imu_heading.yaw,0.004,0);
 8005aac:	4b10      	ldr	r3, [pc, #64]	@ (8005af0 <Ctrl_Task+0x7b0>)
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fa fd49 	bl	8000548 <__aeabi_f2d>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460d      	mov	r5, r1
 8005aba:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <Ctrl_Task+0x7c0>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fa fd42 	bl	8000548 <__aeabi_f2d>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	ed9f 3b03 	vldr	d3, [pc, #12]	@ 8005ad8 <Ctrl_Task+0x798>
 8005acc:	ed9f 2b04 	vldr	d2, [pc, #16]	@ 8005ae0 <Ctrl_Task+0x7a0>
 8005ad0:	ec43 2b11 	vmov	d1, r2, r3
 8005ad4:	e016      	b.n	8005b04 <Ctrl_Task+0x7c4>
 8005ad6:	bf00      	nop
	...
 8005ae0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ae4:	3f70624d 	.word	0x3f70624d
 8005ae8:	c0240000 	.word	0xc0240000
 8005aec:	20002040 	.word	0x20002040
 8005af0:	20000008 	.word	0x20000008
 8005af4:	20002218 	.word	0x20002218
 8005af8:	20002168 	.word	0x20002168
 8005afc:	20002160 	.word	0x20002160
 8005b00:	20003ad8 	.word	0x20003ad8
 8005b04:	ec45 4b10 	vmov	d0, r4, r5
 8005b08:	4863      	ldr	r0, [pc, #396]	@ (8005c98 <Ctrl_Task+0x958>)
 8005b0a:	f7fe fff3 	bl	8004af4 <PID_Compute>

		//Set wheel motor output torque, combined with LQR and yaw axis PID output
		if(groundDetector.isTouchingGround) //正常接地状态
 8005b0e:	4b63      	ldr	r3, [pc, #396]	@ (8005c9c <Ctrl_Task+0x95c>)
 8005b10:	7a1b      	ldrb	r3, [r3, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d035      	beq.n	8005b82 <Ctrl_Task+0x842>
		{
//			Motor_SetTorque(&leftWheel, -lqrOutT * lqrTRatio - yawPID.output);
//			Motor_SetTorque(&rightWheel, -lqrOutT * lqrTRatio + yawPID.output);
			g_can_motors[LEFT_MOTOR_ID-1].torque = -lqrOutT * lqrTRatio + yawPID.output;
 8005b16:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8005b1a:	eeb1 7a67 	vneg.f32	s14, s15
 8005b1e:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	ee17 0a90 	vmov	r0, s15
 8005b2a:	f7fa fd0d 	bl	8000548 <__aeabi_f2d>
 8005b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005c98 <Ctrl_Task+0x958>)
 8005b30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b34:	f7fa fbaa 	bl	800028c <__adddf3>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f7fb f852 	bl	8000be8 <__aeabi_d2f>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4a56      	ldr	r2, [pc, #344]	@ (8005ca0 <Ctrl_Task+0x960>)
 8005b48:	6293      	str	r3, [r2, #40]	@ 0x28
			g_can_motors[RIGHT_MOTOR_ID-1].torque = -lqrOutT * lqrTRatio - yawPID.output;
 8005b4a:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8005b4e:	eeb1 7a67 	vneg.f32	s14, s15
 8005b52:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8005b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5a:	ee17 0a90 	vmov	r0, s15
 8005b5e:	f7fa fcf3 	bl	8000548 <__aeabi_f2d>
 8005b62:	4b4d      	ldr	r3, [pc, #308]	@ (8005c98 <Ctrl_Task+0x958>)
 8005b64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b68:	f7fa fb8e 	bl	8000288 <__aeabi_dsub>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4610      	mov	r0, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	f7fb f838 	bl	8000be8 <__aeabi_d2f>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4a49      	ldr	r2, [pc, #292]	@ (8005ca0 <Ctrl_Task+0x960>)
 8005b7c:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
 8005b80:	e008      	b.n	8005b94 <Ctrl_Task+0x854>
		}
		else //Leg-off-ground state, turn off wheel motors
		{
//			Motor_SetTorque(&leftWheel, 0);
//			Motor_SetTorque(&rightWheel, 0);
			g_can_motors[LEFT_MOTOR_ID-1].torque = 0;
 8005b82:	4b47      	ldr	r3, [pc, #284]	@ (8005ca0 <Ctrl_Task+0x960>)
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	629a      	str	r2, [r3, #40]	@ 0x28
			g_can_motors[RIGHT_MOTOR_ID-1].torque = 0;
 8005b8a:	4b45      	ldr	r3, [pc, #276]	@ (8005ca0 <Ctrl_Task+0x960>)
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
		}

		//Adjust target leg length based on ground contact state, and compute leg length PID output
//		PID_Compute(&legLengthPID, (groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? target.legLength : 0.2f, legLength,0.004,0.001);
		PID_Compute(&legLengthPID, (groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? target.legLength : 0.15f, legLength,0.004,0.001);
 8005b94:	4b41      	ldr	r3, [pc, #260]	@ (8005c9c <Ctrl_Task+0x95c>)
 8005b96:	7a1b      	ldrb	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <Ctrl_Task+0x87a>
 8005b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c9c <Ctrl_Task+0x95c>)
 8005b9e:	7a5b      	ldrb	r3, [r3, #9]
 8005ba0:	f083 0301 	eor.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <Ctrl_Task+0x87a>
 8005baa:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca4 <Ctrl_Task+0x964>)
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fa fcca 	bl	8000548 <__aeabi_f2d>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	e002      	b.n	8005bc0 <Ctrl_Task+0x880>
 8005bba:	a331      	add	r3, pc, #196	@ (adr r3, 8005c80 <Ctrl_Task+0x940>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	ed9f 3b31 	vldr	d3, [pc, #196]	@ 8005c88 <Ctrl_Task+0x948>
 8005bc4:	ed9f 2b32 	vldr	d2, [pc, #200]	@ 8005c90 <Ctrl_Task+0x950>
 8005bc8:	ed97 1b56 	vldr	d1, [r7, #344]	@ 0x158
 8005bcc:	ec43 2b10 	vmov	d0, r2, r3
 8005bd0:	4835      	ldr	r0, [pc, #212]	@ (8005ca8 <Ctrl_Task+0x968>)
 8005bd2:	f7fe ff8f 	bl	8004af4 <PID_Compute>
		//Calculate roll axis PID output
		PID_Compute(&rollPID, target.rollAngle, imu_heading.rol,0.004,0.001);
 8005bd6:	4b33      	ldr	r3, [pc, #204]	@ (8005ca4 <Ctrl_Task+0x964>)
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fa fcb4 	bl	8000548 <__aeabi_f2d>
 8005be0:	4604      	mov	r4, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	4b31      	ldr	r3, [pc, #196]	@ (8005cac <Ctrl_Task+0x96c>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fa fcad 	bl	8000548 <__aeabi_f2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	ed9f 3b25 	vldr	d3, [pc, #148]	@ 8005c88 <Ctrl_Task+0x948>
 8005bf6:	ed9f 2b26 	vldr	d2, [pc, #152]	@ 8005c90 <Ctrl_Task+0x950>
 8005bfa:	ec43 2b11 	vmov	d1, r2, r3
 8005bfe:	ec45 4b10 	vmov	d0, r4, r5
 8005c02:	482b      	ldr	r0, [pc, #172]	@ (8005cb0 <Ctrl_Task+0x970>)
 8005c04:	f7fe ff76 	bl	8004af4 <PID_Compute>
		//Calculate the push force for each leg, ignore roll PID output and feedforward when legs are off the ground
		double leftForce = legLengthPID.output + ((groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? +rollPID.output : 0) + 13;
 8005c08:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <Ctrl_Task+0x968>)
 8005c0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c0e:	4923      	ldr	r1, [pc, #140]	@ (8005c9c <Ctrl_Task+0x95c>)
 8005c10:	7a09      	ldrb	r1, [r1, #8]
 8005c12:	2900      	cmp	r1, #0
 8005c14:	d00a      	beq.n	8005c2c <Ctrl_Task+0x8ec>
 8005c16:	4921      	ldr	r1, [pc, #132]	@ (8005c9c <Ctrl_Task+0x95c>)
 8005c18:	7a49      	ldrb	r1, [r1, #9]
 8005c1a:	f081 0101 	eor.w	r1, r1, #1
 8005c1e:	b2c9      	uxtb	r1, r1
 8005c20:	2900      	cmp	r1, #0
 8005c22:	d003      	beq.n	8005c2c <Ctrl_Task+0x8ec>
 8005c24:	4922      	ldr	r1, [pc, #136]	@ (8005cb0 <Ctrl_Task+0x970>)
 8005c26:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 8005c2a:	e003      	b.n	8005c34 <Ctrl_Task+0x8f4>
 8005c2c:	f04f 0000 	mov.w	r0, #0
 8005c30:	f04f 0100 	mov.w	r1, #0
 8005c34:	f7fa fb2a 	bl	800028c <__adddf3>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb4 <Ctrl_Task+0x974>)
 8005c46:	f7fa fb21 	bl	800028c <__adddf3>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
		double rightForce = legLengthPID.output + ((groundDetector.isTouchingGround && !groundDetector.isCuchioning) ? -rollPID.output : 0) + 13;
 8005c52:	4b15      	ldr	r3, [pc, #84]	@ (8005ca8 <Ctrl_Task+0x968>)
 8005c54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005c58:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <Ctrl_Task+0x95c>)
 8005c5a:	7a1b      	ldrb	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d02b      	beq.n	8005cb8 <Ctrl_Task+0x978>
 8005c60:	4b0e      	ldr	r3, [pc, #56]	@ (8005c9c <Ctrl_Task+0x95c>)
 8005c62:	7a5b      	ldrb	r3, [r3, #9]
 8005c64:	f083 0301 	eor.w	r3, r3, #1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d024      	beq.n	8005cb8 <Ctrl_Task+0x978>
 8005c6e:	4b10      	ldr	r3, [pc, #64]	@ (8005cb0 <Ctrl_Task+0x970>)
 8005c70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c74:	4690      	mov	r8, r2
 8005c76:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8005c7a:	e021      	b.n	8005cc0 <Ctrl_Task+0x980>
 8005c7c:	f3af 8000 	nop.w
 8005c80:	40000000 	.word	0x40000000
 8005c84:	3fc33333 	.word	0x3fc33333
 8005c88:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c8c:	3f50624d 	.word	0x3f50624d
 8005c90:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c94:	3f70624d 	.word	0x3f70624d
 8005c98:	200020e0 	.word	0x200020e0
 8005c9c:	20000024 	.word	0x20000024
 8005ca0:	20002220 	.word	0x20002220
 8005ca4:	20000008 	.word	0x20000008
 8005ca8:	200020a0 	.word	0x200020a0
 8005cac:	20003ad8 	.word	0x20003ad8
 8005cb0:	20002120 	.word	0x20002120
 8005cb4:	402a0000 	.word	0x402a0000
 8005cb8:	f04f 0800 	mov.w	r8, #0
 8005cbc:	f04f 0900 	mov.w	r9, #0
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	f7fa fae0 	bl	800028c <__adddf3>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	4b62      	ldr	r3, [pc, #392]	@ (8005e64 <Ctrl_Task+0xb24>)
 8005cda:	f7fa fad7 	bl	800028c <__adddf3>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
//		double leftForce = legLengthPID.output + 5.0;
//		double rightForce = legLengthPID.output + 5.0;
		if(leftLegPos.length > 0.15f) //Protect the leg from extending too long
 8005ce6:	4b60      	ldr	r3, [pc, #384]	@ (8005e68 <Ctrl_Task+0xb28>)
 8005ce8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005cec:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8005e6c <Ctrl_Task+0xb2c>
 8005cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	dd14      	ble.n	8005d24 <Ctrl_Task+0x9e4>
			leftForce -= (leftLegPos.length - 0.1f) * 1;
 8005cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8005e68 <Ctrl_Task+0xb28>)
 8005cfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d00:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8005e70 <Ctrl_Task+0xb30>
 8005d04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d08:	ee17 0a90 	vmov	r0, s15
 8005d0c:	f7fa fc1c 	bl	8000548 <__aeabi_f2d>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005d18:	f7fa fab6 	bl	8000288 <__aeabi_dsub>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
		if(rightLegPos.length > 0.15f)
 8005d24:	4b53      	ldr	r3, [pc, #332]	@ (8005e74 <Ctrl_Task+0xb34>)
 8005d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d2a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005e6c <Ctrl_Task+0xb2c>
 8005d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	dd14      	ble.n	8005d62 <Ctrl_Task+0xa22>
			rightForce -= (rightLegPos.length - 0.1f) * 1;
 8005d38:	4b4e      	ldr	r3, [pc, #312]	@ (8005e74 <Ctrl_Task+0xb34>)
 8005d3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d3e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8005e70 <Ctrl_Task+0xb30>
 8005d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d46:	ee17 0a90 	vmov	r0, s15
 8005d4a:	f7fa fbfd 	bl	8000548 <__aeabi_f2d>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005d56:	f7fa fa97 	bl	8000288 <__aeabi_dsub>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

		//Calculate ground support force for each leg
		groundDetector.leftSupportForce = leftForce + legMass * 9.8f - legMass * (leftLegPos.ddLength - imu_heading.ddz - 9.8f);
 8005d62:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8005d66:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8005e78 <Ctrl_Task+0xb38>
 8005d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d6e:	ee17 0a90 	vmov	r0, s15
 8005d72:	f7fa fbe9 	bl	8000548 <__aeabi_f2d>
 8005d76:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8005d7a:	f7fa fa87 	bl	800028c <__adddf3>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4614      	mov	r4, r2
 8005d84:	461d      	mov	r5, r3
 8005d86:	4b38      	ldr	r3, [pc, #224]	@ (8005e68 <Ctrl_Task+0xb28>)
 8005d88:	ed93 7a04 	vldr	s14, [r3, #16]
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e7c <Ctrl_Task+0xb3c>)
 8005d8e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d96:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005e78 <Ctrl_Task+0xb38>
 8005d9a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d9e:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	ee17 0a90 	vmov	r0, s15
 8005daa:	f7fa fbcd 	bl	8000548 <__aeabi_f2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa fa67 	bl	8000288 <__aeabi_dsub>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7fa ff11 	bl	8000be8 <__aeabi_d2f>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005e80 <Ctrl_Task+0xb40>)
 8005dca:	6013      	str	r3, [r2, #0]
		groundDetector.rightSupportForce = rightForce + legMass * 9.8f - legMass * (rightLegPos.ddLength - imu_heading.ddz - 9.8f);
 8005dcc:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8005dd0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005e78 <Ctrl_Task+0xb38>
 8005dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dd8:	ee17 0a90 	vmov	r0, s15
 8005ddc:	f7fa fbb4 	bl	8000548 <__aeabi_f2d>
 8005de0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8005de4:	f7fa fa52 	bl	800028c <__adddf3>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4614      	mov	r4, r2
 8005dee:	461d      	mov	r5, r3
 8005df0:	4b20      	ldr	r3, [pc, #128]	@ (8005e74 <Ctrl_Task+0xb34>)
 8005df2:	ed93 7a04 	vldr	s14, [r3, #16]
 8005df6:	4b21      	ldr	r3, [pc, #132]	@ (8005e7c <Ctrl_Task+0xb3c>)
 8005df8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e00:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005e78 <Ctrl_Task+0xb38>
 8005e04:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e08:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8005e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e10:	ee17 0a90 	vmov	r0, s15
 8005e14:	f7fa fb98 	bl	8000548 <__aeabi_f2d>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f7fa fa32 	bl	8000288 <__aeabi_dsub>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f7fa fedc 	bl	8000be8 <__aeabi_d2f>
 8005e30:	4603      	mov	r3, r0
 8005e32:	4a13      	ldr	r2, [pc, #76]	@ (8005e80 <Ctrl_Task+0xb40>)
 8005e34:	6053      	str	r3, [r2, #4]
		//Update the ground contact detector data
		static uint32_t lastTouchTime = 0;
		bool isTouchingGround = groundDetector.leftSupportForce > -20 && groundDetector.rightSupportForce > -20; //Determine if currently in ground contact
 8005e36:	4b12      	ldr	r3, [pc, #72]	@ (8005e80 <Ctrl_Task+0xb40>)
 8005e38:	edd3 7a00 	vldr	s15, [r3]
 8005e3c:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8005e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e48:	dd1c      	ble.n	8005e84 <Ctrl_Task+0xb44>
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <Ctrl_Task+0xb40>)
 8005e4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e50:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8005e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5c:	dd12      	ble.n	8005e84 <Ctrl_Task+0xb44>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e011      	b.n	8005e86 <Ctrl_Task+0xb46>
 8005e62:	bf00      	nop
 8005e64:	402a0000 	.word	0x402a0000
 8005e68:	20002018 	.word	0x20002018
 8005e6c:	3e19999a 	.word	0x3e19999a
 8005e70:	3dcccccd 	.word	0x3dcccccd
 8005e74:	2000202c 	.word	0x2000202c
 8005e78:	411ccccd 	.word	0x411ccccd
 8005e7c:	20003ad8 	.word	0x20003ad8
 8005e80:	20000024 	.word	0x20000024
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 8005e8a:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
		if(!isTouchingGround && (get_microseconds()/1000) - lastTouchTime < 1000) //If the last ground contact was less than 1 second ago, assume ground contact to prevent misjudgment due to bouncing
 8005e96:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8005e9a:	f083 0301 	eor.w	r3, r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <Ctrl_Task+0xb84>
 8005ea4:	f7fc f98c 	bl	80021c0 <get_microseconds>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	4a8b      	ldr	r2, [pc, #556]	@ (80060d8 <Ctrl_Task+0xd98>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	099a      	lsrs	r2, r3, #6
 8005eb2:	4b8a      	ldr	r3, [pc, #552]	@ (80060dc <Ctrl_Task+0xd9c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ebc:	d202      	bcs.n	8005ec4 <Ctrl_Task+0xb84>
			isTouchingGround = true;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
		if(!groundDetector.isTouchingGround && isTouchingGround) //Detect transition to ground contact state, mark cushioning state
 8005ec4:	4b86      	ldr	r3, [pc, #536]	@ (80060e0 <Ctrl_Task+0xda0>)
 8005ec6:	7a1b      	ldrb	r3, [r3, #8]
 8005ec8:	f083 0301 	eor.w	r3, r3, #1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d013      	beq.n	8005efa <Ctrl_Task+0xbba>
 8005ed2:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00f      	beq.n	8005efa <Ctrl_Task+0xbba>
		{
			target.position = stateVar.x;
 8005eda:	4b82      	ldr	r3, [pc, #520]	@ (80060e4 <Ctrl_Task+0xda4>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4a82      	ldr	r2, [pc, #520]	@ (80060e8 <Ctrl_Task+0xda8>)
 8005ee0:	6013      	str	r3, [r2, #0]
			groundDetector.isCuchioning = true;
 8005ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80060e0 <Ctrl_Task+0xda0>)
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	725a      	strb	r2, [r3, #9]
			lastTouchTime = (get_microseconds()/1000);
 8005ee8:	f7fc f96a 	bl	80021c0 <get_microseconds>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4a7a      	ldr	r2, [pc, #488]	@ (80060d8 <Ctrl_Task+0xd98>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	099b      	lsrs	r3, r3, #6
 8005ef6:	4a79      	ldr	r2, [pc, #484]	@ (80060dc <Ctrl_Task+0xd9c>)
 8005ef8:	6013      	str	r3, [r2, #0]
		}
		if(groundDetector.isCuchioning && legLength < target.legLength) //Cushioning state continues until leg length compresses to target leg length
 8005efa:	4b79      	ldr	r3, [pc, #484]	@ (80060e0 <Ctrl_Task+0xda0>)
 8005efc:	7a5b      	ldrb	r3, [r3, #9]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d010      	beq.n	8005f24 <Ctrl_Task+0xbe4>
 8005f02:	4b79      	ldr	r3, [pc, #484]	@ (80060e8 <Ctrl_Task+0xda8>)
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa fb1e 	bl	8000548 <__aeabi_f2d>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8005f14:	f7fa fde2 	bl	8000adc <__aeabi_dcmplt>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <Ctrl_Task+0xbe4>
			groundDetector.isCuchioning = false;
 8005f1e:	4b70      	ldr	r3, [pc, #448]	@ (80060e0 <Ctrl_Task+0xda0>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	725a      	strb	r2, [r3, #9]
		groundDetector.isTouchingGround = isTouchingGround;
 8005f24:	4a6e      	ldr	r2, [pc, #440]	@ (80060e0 <Ctrl_Task+0xda0>)
 8005f26:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8005f2a:	7213      	strb	r3, [r2, #8]

		//Calculate PID output for the difference in leg angles between the left and right legs
		PID_Compute(&legAnglePID, 0, leftLegPos.angle - rightLegPos.angle,0.004,0.01);
 8005f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80060ec <Ctrl_Task+0xdac>)
 8005f2e:	ed93 7a00 	vldr	s14, [r3]
 8005f32:	4b6f      	ldr	r3, [pc, #444]	@ (80060f0 <Ctrl_Task+0xdb0>)
 8005f34:	edd3 7a00 	vldr	s15, [r3]
 8005f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f3c:	ee17 0a90 	vmov	r0, s15
 8005f40:	f7fa fb02 	bl	8000548 <__aeabi_f2d>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	ed9f 3b5d 	vldr	d3, [pc, #372]	@ 80060c0 <Ctrl_Task+0xd80>
 8005f4c:	ed9f 2b5e 	vldr	d2, [pc, #376]	@ 80060c8 <Ctrl_Task+0xd88>
 8005f50:	ec43 2b11 	vmov	d1, r2, r3
 8005f54:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 80060d0 <Ctrl_Task+0xd90>
 8005f58:	4866      	ldr	r0, [pc, #408]	@ (80060f4 <Ctrl_Task+0xdb4>)
 8005f5a:	f7fe fdcb 	bl	8004af4 <PID_Compute>

		//Calculate the hip joint torque output, which is the sum of the LQR output and the PID output for the difference in leg angles
//		double leftTp = lqrOutTp * lqrTpRatio - legAnglePID.output * (leftLegPos.length / 0.15f);
//		double rightTp = -lqrOutTp * lqrTpRatio + legAnglePID.output * (rightLegPos.length / 0.15f);
		double leftTp = -lqrOutTp * lqrTpRatio + legAnglePID.output * (leftLegPos.length / 0.1f);
 8005f5e:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8005f62:	eeb1 7a67 	vneg.f32	s14, s15
 8005f66:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	ee17 0a90 	vmov	r0, s15
 8005f72:	f7fa fae9 	bl	8000548 <__aeabi_f2d>
 8005f76:	4682      	mov	sl, r0
 8005f78:	468b      	mov	fp, r1
 8005f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80060f4 <Ctrl_Task+0xdb4>)
 8005f7c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8005f80:	4b5a      	ldr	r3, [pc, #360]	@ (80060ec <Ctrl_Task+0xdac>)
 8005f82:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f86:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80060f8 <Ctrl_Task+0xdb8>
 8005f8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f8e:	ee16 0a90 	vmov	r0, s13
 8005f92:	f7fa fad9 	bl	8000548 <__aeabi_f2d>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f7fa fb2b 	bl	80005f8 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	4659      	mov	r1, fp
 8005faa:	f7fa f96f 	bl	800028c <__adddf3>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
		double rightTp = -lqrOutTp * lqrTpRatio - legAnglePID.output * (rightLegPos.length / 0.1f);
 8005fb6:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8005fba:	eeb1 7a67 	vneg.f32	s14, s15
 8005fbe:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	ee17 0a90 	vmov	r0, s15
 8005fca:	f7fa fabd 	bl	8000548 <__aeabi_f2d>
 8005fce:	4682      	mov	sl, r0
 8005fd0:	468b      	mov	fp, r1
 8005fd2:	4b48      	ldr	r3, [pc, #288]	@ (80060f4 <Ctrl_Task+0xdb4>)
 8005fd4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8005fd8:	4b45      	ldr	r3, [pc, #276]	@ (80060f0 <Ctrl_Task+0xdb0>)
 8005fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fde:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80060f8 <Ctrl_Task+0xdb8>
 8005fe2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005fe6:	ee16 0a90 	vmov	r0, s13
 8005fea:	f7fa faad 	bl	8000548 <__aeabi_f2d>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	f7fa faff 	bl	80005f8 <__aeabi_dmul>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4650      	mov	r0, sl
 8006000:	4659      	mov	r1, fp
 8006002:	f7fa f941 	bl	8000288 <__aeabi_dsub>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138



		//Use VMC (Virtual Model Control) to calculate the output torques for each joint motor
		double leftJointTorque[2]={0};
 800600e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	605a      	str	r2, [r3, #4]
 8006018:	609a      	str	r2, [r3, #8]
 800601a:	60da      	str	r2, [r3, #12]
		leg_conv(leftForce, leftTp, leftJoint[1].angle, leftJoint[0].angle, leftJointTorque);
 800601c:	4b37      	ldr	r3, [pc, #220]	@ (80060fc <Ctrl_Task+0xdbc>)
 800601e:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8006022:	4b36      	ldr	r3, [pc, #216]	@ (80060fc <Ctrl_Task+0xdbc>)
 8006024:	ed93 6b02 	vldr	d6, [r3, #8]
 8006028:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800602c:	4618      	mov	r0, r3
 800602e:	eeb0 3a46 	vmov.f32	s6, s12
 8006032:	eef0 3a66 	vmov.f32	s7, s13
 8006036:	eeb0 2a47 	vmov.f32	s4, s14
 800603a:	eef0 2a67 	vmov.f32	s5, s15
 800603e:	ed97 1b50 	vldr	d1, [r7, #320]	@ 0x140
 8006042:	ed97 0b66 	vldr	d0, [r7, #408]	@ 0x198
 8006046:	f003 f9f3 	bl	8009430 <leg_conv>
		double rightJointTorque[2]={0};
 800604a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	605a      	str	r2, [r3, #4]
 8006054:	609a      	str	r2, [r3, #8]
 8006056:	60da      	str	r2, [r3, #12]
		leg_conv(rightForce, rightTp, rightJoint[1].angle, rightJoint[0].angle, rightJointTorque);
 8006058:	4b29      	ldr	r3, [pc, #164]	@ (8006100 <Ctrl_Task+0xdc0>)
 800605a:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 800605e:	4b28      	ldr	r3, [pc, #160]	@ (8006100 <Ctrl_Task+0xdc0>)
 8006060:	ed93 6b02 	vldr	d6, [r3, #8]
 8006064:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8006068:	4618      	mov	r0, r3
 800606a:	eeb0 3a46 	vmov.f32	s6, s12
 800606e:	eef0 3a66 	vmov.f32	s7, s13
 8006072:	eeb0 2a47 	vmov.f32	s4, s14
 8006076:	eef0 2a67 	vmov.f32	s5, s15
 800607a:	ed97 1b4e 	vldr	d1, [r7, #312]	@ 0x138
 800607e:	ed97 0b64 	vldr	d0, [r7, #400]	@ 0x190
 8006082:	f003 f9d5 	bl	8009430 <leg_conv>

		leftF_check = leftForce;
 8006086:	491f      	ldr	r1, [pc, #124]	@ (8006104 <Ctrl_Task+0xdc4>)
 8006088:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 800608c:	e9c1 2300 	strd	r2, r3, [r1]
		leftTp_check = leftTp;
 8006090:	491d      	ldr	r1, [pc, #116]	@ (8006108 <Ctrl_Task+0xdc8>)
 8006092:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8006096:	e9c1 2300 	strd	r2, r3, [r1]
		rightF_check = rightForce;
 800609a:	491c      	ldr	r1, [pc, #112]	@ (800610c <Ctrl_Task+0xdcc>)
 800609c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80060a0:	e9c1 2300 	strd	r2, r3, [r1]
		rightTp_check = rightTp;
 80060a4:	491a      	ldr	r1, [pc, #104]	@ (8006110 <Ctrl_Task+0xdd0>)
 80060a6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80060aa:	e9c1 2300 	strd	r2, r3, [r1]
		//Protect the legs from exceeding safe angles
		if (g_remote_cmd.right_switch == 3){
 80060ae:	4b19      	ldr	r3, [pc, #100]	@ (8006114 <Ctrl_Task+0xdd4>)
 80060b0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d131      	bne.n	800611c <Ctrl_Task+0xddc>
			standupState = StandupState_Standup;
 80060b8:	4b17      	ldr	r3, [pc, #92]	@ (8006118 <Ctrl_Task+0xdd8>)
 80060ba:	2202      	movs	r2, #2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e030      	b.n	8006122 <Ctrl_Task+0xde2>
 80060c0:	47ae147b 	.word	0x47ae147b
 80060c4:	3f847ae1 	.word	0x3f847ae1
 80060c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80060cc:	3f70624d 	.word	0x3f70624d
	...
 80060d8:	10624dd3 	.word	0x10624dd3
 80060dc:	2000221c 	.word	0x2000221c
 80060e0:	20000024 	.word	0x20000024
 80060e4:	20002040 	.word	0x20002040
 80060e8:	20000008 	.word	0x20000008
 80060ec:	20002018 	.word	0x20002018
 80060f0:	2000202c 	.word	0x2000202c
 80060f4:	20002060 	.word	0x20002060
 80060f8:	3dcccccd 	.word	0x3dcccccd
 80060fc:	20001e68 	.word	0x20001e68
 8006100:	20001ef8 	.word	0x20001ef8
 8006104:	20002170 	.word	0x20002170
 8006108:	20002178 	.word	0x20002178
 800610c:	20002180 	.word	0x20002180
 8006110:	20002188 	.word	0x20002188
 8006114:	20000838 	.word	0x20000838
 8006118:	20002058 	.word	0x20002058
		}else{
			standupState = StandupState_None;
 800611c:	4bba      	ldr	r3, [pc, #744]	@ (8006408 <Ctrl_Task+0x10c8>)
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
		}
		float leftTheta = leftLegPos.angle - imu_heading.pit - M_PI_2;
 8006122:	4bba      	ldr	r3, [pc, #744]	@ (800640c <Ctrl_Task+0x10cc>)
 8006124:	ed93 7a00 	vldr	s14, [r3]
 8006128:	4bb9      	ldr	r3, [pc, #740]	@ (8006410 <Ctrl_Task+0x10d0>)
 800612a:	edd3 7a00 	vldr	s15, [r3]
 800612e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006132:	ee17 0a90 	vmov	r0, s15
 8006136:	f7fa fa07 	bl	8000548 <__aeabi_f2d>
 800613a:	a3ad      	add	r3, pc, #692	@ (adr r3, 80063f0 <Ctrl_Task+0x10b0>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f7fa f8a2 	bl	8000288 <__aeabi_dsub>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	f7fa fd4c 	bl	8000be8 <__aeabi_d2f>
 8006150:	4603      	mov	r3, r0
 8006152:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
		float rightTheta = rightLegPos.angle - imu_heading.pit - M_PI_2;
 8006156:	4baf      	ldr	r3, [pc, #700]	@ (8006414 <Ctrl_Task+0x10d4>)
 8006158:	ed93 7a00 	vldr	s14, [r3]
 800615c:	4bac      	ldr	r3, [pc, #688]	@ (8006410 <Ctrl_Task+0x10d0>)
 800615e:	edd3 7a00 	vldr	s15, [r3]
 8006162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006166:	ee17 0a90 	vmov	r0, s15
 800616a:	f7fa f9ed 	bl	8000548 <__aeabi_f2d>
 800616e:	a3a0      	add	r3, pc, #640	@ (adr r3, 80063f0 <Ctrl_Task+0x10b0>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7fa f888 	bl	8000288 <__aeabi_dsub>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	f7fa fd32 	bl	8000be8 <__aeabi_d2f>
 8006184:	4603      	mov	r3, r0
 8006186:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
		#define PROTECT_CONDITION (leftTheta < -M_PI_4 || leftTheta > M_PI_4 || \
								   rightTheta < -M_PI_4 || rightTheta > M_PI_4 || \
								   imu_heading.pit > M_PI_4 || imu_heading.pit < -M_PI_4) //Condition to protect against excessive leg angles
		if(PROTECT_CONDITION || standupState == StandupState_None) //If the condition to protect against excessive angles is met
 800618a:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 800618e:	f7fa f9db 	bl	8000548 <__aeabi_f2d>
 8006192:	a399      	add	r3, pc, #612	@ (adr r3, 80063f8 <Ctrl_Task+0x10b8>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f7fa fca0 	bl	8000adc <__aeabi_dcmplt>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d142      	bne.n	8006228 <Ctrl_Task+0xee8>
 80061a2:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 80061a6:	f7fa f9cf 	bl	8000548 <__aeabi_f2d>
 80061aa:	a395      	add	r3, pc, #596	@ (adr r3, 8006400 <Ctrl_Task+0x10c0>)
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f7fa fcb2 	bl	8000b18 <__aeabi_dcmpgt>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d136      	bne.n	8006228 <Ctrl_Task+0xee8>
 80061ba:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 80061be:	f7fa f9c3 	bl	8000548 <__aeabi_f2d>
 80061c2:	a38d      	add	r3, pc, #564	@ (adr r3, 80063f8 <Ctrl_Task+0x10b8>)
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa fc88 	bl	8000adc <__aeabi_dcmplt>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d12a      	bne.n	8006228 <Ctrl_Task+0xee8>
 80061d2:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 80061d6:	f7fa f9b7 	bl	8000548 <__aeabi_f2d>
 80061da:	a389      	add	r3, pc, #548	@ (adr r3, 8006400 <Ctrl_Task+0x10c0>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa fc9a 	bl	8000b18 <__aeabi_dcmpgt>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d11e      	bne.n	8006228 <Ctrl_Task+0xee8>
 80061ea:	4b89      	ldr	r3, [pc, #548]	@ (8006410 <Ctrl_Task+0x10d0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fa f9aa 	bl	8000548 <__aeabi_f2d>
 80061f4:	a382      	add	r3, pc, #520	@ (adr r3, 8006400 <Ctrl_Task+0x10c0>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa fc8d 	bl	8000b18 <__aeabi_dcmpgt>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d111      	bne.n	8006228 <Ctrl_Task+0xee8>
 8006204:	4b82      	ldr	r3, [pc, #520]	@ (8006410 <Ctrl_Task+0x10d0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fa f99d 	bl	8000548 <__aeabi_f2d>
 800620e:	a37a      	add	r3, pc, #488	@ (adr r3, 80063f8 <Ctrl_Task+0x10b8>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa fc62 	bl	8000adc <__aeabi_dcmplt>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <Ctrl_Task+0xee8>
 800621e:	4b7a      	ldr	r3, [pc, #488]	@ (8006408 <Ctrl_Task+0x10c8>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 811f 	bne.w	8006466 <Ctrl_Task+0x1126>
		{
			if(standupState == StandupState_None) //Not in stand-up process
 8006228:	4b77      	ldr	r3, [pc, #476]	@ (8006408 <Ctrl_Task+0x10c8>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 80fb 	bne.w	8006428 <Ctrl_Task+0x10e8>
//				Motor_SetTorque(&rightWheel, 0);
//				Motor_SetTorque(&leftJoint[0], 0);
//				Motor_SetTorque(&leftJoint[1], 0);
//				Motor_SetTorque(&rightJoint[0], 0);
//				Motor_SetTorque(&rightJoint[1], 0);
				g_can_motors[LEFT_MOTOR_ID-1].torque = 0;
 8006232:	4b79      	ldr	r3, [pc, #484]	@ (8006418 <Ctrl_Task+0x10d8>)
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	629a      	str	r2, [r3, #40]	@ 0x28
				g_can_motors[RIGHT_MOTOR_ID-1].torque = 0;
 800623a:	4b77      	ldr	r3, [pc, #476]	@ (8006418 <Ctrl_Task+0x10d8>)
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
				g_can_motors[FR_MOTOR_ID-1].torque = 0;
 8006244:	4b74      	ldr	r3, [pc, #464]	@ (8006418 <Ctrl_Task+0x10d8>)
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
				g_can_motors[FL_MOTOR_ID-1].torque = 0;
 800624e:	4b72      	ldr	r3, [pc, #456]	@ (8006418 <Ctrl_Task+0x10d8>)
 8006250:	f503 639b 	add.w	r3, r3, #1240	@ 0x4d8
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
				g_can_motors[BR_MOTOR_ID-1].torque = 0;
 800625a:	4b6f      	ldr	r3, [pc, #444]	@ (8006418 <Ctrl_Task+0x10d8>)
 800625c:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
				g_can_motors[BL_MOTOR_ID-1].torque = 0;
 8006266:	4b6c      	ldr	r3, [pc, #432]	@ (8006418 <Ctrl_Task+0x10d8>)
 8006268:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

				//Block and wait for leg angles to return to a safe range, then resume control after 4 seconds (or jump out if the stand-up process is triggered in the meantime)
				while(PROTECT_CONDITION && standupState == StandupState_None)
 8006272:	e036      	b.n	80062e2 <Ctrl_Task+0xfa2>
				{
					leftTheta = leftLegPos.angle - imu_heading.pit - M_PI_2;
 8006274:	4b65      	ldr	r3, [pc, #404]	@ (800640c <Ctrl_Task+0x10cc>)
 8006276:	ed93 7a00 	vldr	s14, [r3]
 800627a:	4b65      	ldr	r3, [pc, #404]	@ (8006410 <Ctrl_Task+0x10d0>)
 800627c:	edd3 7a00 	vldr	s15, [r3]
 8006280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006284:	ee17 0a90 	vmov	r0, s15
 8006288:	f7fa f95e 	bl	8000548 <__aeabi_f2d>
 800628c:	a358      	add	r3, pc, #352	@ (adr r3, 80063f0 <Ctrl_Task+0x10b0>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7f9 fff9 	bl	8000288 <__aeabi_dsub>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4610      	mov	r0, r2
 800629c:	4619      	mov	r1, r3
 800629e:	f7fa fca3 	bl	8000be8 <__aeabi_d2f>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
					rightTheta = rightLegPos.angle - imu_heading.pit - M_PI_2;
 80062a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006414 <Ctrl_Task+0x10d4>)
 80062aa:	ed93 7a00 	vldr	s14, [r3]
 80062ae:	4b58      	ldr	r3, [pc, #352]	@ (8006410 <Ctrl_Task+0x10d0>)
 80062b0:	edd3 7a00 	vldr	s15, [r3]
 80062b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062b8:	ee17 0a90 	vmov	r0, s15
 80062bc:	f7fa f944 	bl	8000548 <__aeabi_f2d>
 80062c0:	a34b      	add	r3, pc, #300	@ (adr r3, 80063f0 <Ctrl_Task+0x10b0>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7f9 ffdf 	bl	8000288 <__aeabi_dsub>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4610      	mov	r0, r2
 80062d0:	4619      	mov	r1, r3
 80062d2:	f7fa fc89 	bl	8000be8 <__aeabi_d2f>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
					vTaskDelay(100);
 80062dc:	2064      	movs	r0, #100	@ 0x64
 80062de:	f014 fcd1 	bl	801ac84 <vTaskDelay>
				while(PROTECT_CONDITION && standupState == StandupState_None)
 80062e2:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 80062e6:	f7fa f92f 	bl	8000548 <__aeabi_f2d>
 80062ea:	a343      	add	r3, pc, #268	@ (adr r3, 80063f8 <Ctrl_Task+0x10b8>)
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f7fa fbf4 	bl	8000adc <__aeabi_dcmplt>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d13d      	bne.n	8006376 <Ctrl_Task+0x1036>
 80062fa:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 80062fe:	f7fa f923 	bl	8000548 <__aeabi_f2d>
 8006302:	a33f      	add	r3, pc, #252	@ (adr r3, 8006400 <Ctrl_Task+0x10c0>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7fa fc06 	bl	8000b18 <__aeabi_dcmpgt>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d131      	bne.n	8006376 <Ctrl_Task+0x1036>
 8006312:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 8006316:	f7fa f917 	bl	8000548 <__aeabi_f2d>
 800631a:	a337      	add	r3, pc, #220	@ (adr r3, 80063f8 <Ctrl_Task+0x10b8>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7fa fbdc 	bl	8000adc <__aeabi_dcmplt>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d125      	bne.n	8006376 <Ctrl_Task+0x1036>
 800632a:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 800632e:	f7fa f90b 	bl	8000548 <__aeabi_f2d>
 8006332:	a333      	add	r3, pc, #204	@ (adr r3, 8006400 <Ctrl_Task+0x10c0>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f7fa fbee 	bl	8000b18 <__aeabi_dcmpgt>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d119      	bne.n	8006376 <Ctrl_Task+0x1036>
 8006342:	4b33      	ldr	r3, [pc, #204]	@ (8006410 <Ctrl_Task+0x10d0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7fa f8fe 	bl	8000548 <__aeabi_f2d>
 800634c:	a32c      	add	r3, pc, #176	@ (adr r3, 8006400 <Ctrl_Task+0x10c0>)
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f7fa fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10c      	bne.n	8006376 <Ctrl_Task+0x1036>
 800635c:	4b2c      	ldr	r3, [pc, #176]	@ (8006410 <Ctrl_Task+0x10d0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f7fa f8f1 	bl	8000548 <__aeabi_f2d>
 8006366:	a324      	add	r3, pc, #144	@ (adr r3, 80063f8 <Ctrl_Task+0x10b8>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7fa fbb6 	bl	8000adc <__aeabi_dcmplt>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <Ctrl_Task+0x1040>
 8006376:	4b24      	ldr	r3, [pc, #144]	@ (8006408 <Ctrl_Task+0x10c8>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f43f af7a 	beq.w	8006274 <Ctrl_Task+0xf34>
				}
				if(standupState == StandupState_None)
 8006380:	4b21      	ldr	r3, [pc, #132]	@ (8006408 <Ctrl_Task+0x10c8>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d103      	bne.n	8006390 <Ctrl_Task+0x1050>
					vTaskDelay(1000);
 8006388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800638c:	f014 fc7a 	bl	801ac84 <vTaskDelay>
				//After exiting protection, set the target position and yaw angle to the current values
				target.position = (leftWheel.angle + rightWheel.angle) / 2 * wheelRadius;
 8006390:	4b22      	ldr	r3, [pc, #136]	@ (800641c <Ctrl_Task+0x10dc>)
 8006392:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006396:	4b22      	ldr	r3, [pc, #136]	@ (8006420 <Ctrl_Task+0x10e0>)
 8006398:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800639c:	f7f9 ff76 	bl	800028c <__adddf3>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4610      	mov	r0, r2
 80063a6:	4619      	mov	r1, r3
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063b0:	f7fa fa4c 	bl	800084c <__aeabi_ddiv>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 80063c0:	f7fa f8c2 	bl	8000548 <__aeabi_f2d>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4620      	mov	r0, r4
 80063ca:	4629      	mov	r1, r5
 80063cc:	f7fa f914 	bl	80005f8 <__aeabi_dmul>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4610      	mov	r0, r2
 80063d6:	4619      	mov	r1, r3
 80063d8:	f7fa fc06 	bl	8000be8 <__aeabi_d2f>
 80063dc:	4603      	mov	r3, r0
 80063de:	4a11      	ldr	r2, [pc, #68]	@ (8006424 <Ctrl_Task+0x10e4>)
 80063e0:	6013      	str	r3, [r2, #0]
				target.yawAngle = imu_heading.yaw;
 80063e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <Ctrl_Task+0x10d0>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006424 <Ctrl_Task+0x10e4>)
 80063e8:	6113      	str	r3, [r2, #16]
				continue;
 80063ea:	e081      	b.n	80064f0 <Ctrl_Task+0x11b0>
 80063ec:	f3af 8000 	nop.w
 80063f0:	54442d18 	.word	0x54442d18
 80063f4:	3ff921fb 	.word	0x3ff921fb
 80063f8:	54442d18 	.word	0x54442d18
 80063fc:	bfe921fb 	.word	0xbfe921fb
 8006400:	54442d18 	.word	0x54442d18
 8006404:	3fe921fb 	.word	0x3fe921fb
 8006408:	20002058 	.word	0x20002058
 800640c:	20002018 	.word	0x20002018
 8006410:	20003ad8 	.word	0x20003ad8
 8006414:	2000202c 	.word	0x2000202c
 8006418:	20002220 	.word	0x20002220
 800641c:	20001f88 	.word	0x20001f88
 8006420:	20001fd0 	.word	0x20001fd0
 8006424:	20000008 	.word	0x20000008
			}
			if(standupState == StandupState_Standup && (leftTheta < -M_PI_4 || rightTheta > M_PI_4))
 8006428:	4b37      	ldr	r3, [pc, #220]	@ (8006508 <Ctrl_Task+0x11c8>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d11a      	bne.n	8006466 <Ctrl_Task+0x1126>
 8006430:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8006434:	f7fa f888 	bl	8000548 <__aeabi_f2d>
 8006438:	a32f      	add	r3, pc, #188	@ (adr r3, 80064f8 <Ctrl_Task+0x11b8>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7fa fb4d 	bl	8000adc <__aeabi_dcmplt>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10b      	bne.n	8006460 <Ctrl_Task+0x1120>
 8006448:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 800644c:	f7fa f87c 	bl	8000548 <__aeabi_f2d>
 8006450:	a32b      	add	r3, pc, #172	@ (adr r3, 8006500 <Ctrl_Task+0x11c0>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7fa fb5f 	bl	8000b18 <__aeabi_dcmpgt>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <Ctrl_Task+0x1126>
				standupState = StandupState_None;
 8006460:	4b29      	ldr	r3, [pc, #164]	@ (8006508 <Ctrl_Task+0x11c8>)
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
		//Set joint motor output torque
//		Motor_SetTorque(&leftJoint[0], -leftJointTorque[0]);
//		Motor_SetTorque(&leftJoint[1], -leftJointTorque[1]);
//		Motor_SetTorque(&rightJoint[0], -rightJointTorque[0]);
//		Motor_SetTorque(&rightJoint[1], -rightJointTorque[1]);
		g_can_motors[FR_MOTOR_ID-1].torque = leftJointTorque[0];
 8006466:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	f7fa fbbb 	bl	8000be8 <__aeabi_d2f>
 8006472:	4603      	mov	r3, r0
 8006474:	4a25      	ldr	r2, [pc, #148]	@ (800650c <Ctrl_Task+0x11cc>)
 8006476:	f8c2 33e8 	str.w	r3, [r2, #1000]	@ 0x3e8
		g_can_motors[FL_MOTOR_ID-1].torque = leftJointTorque[1];
 800647a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	f7fa fbb1 	bl	8000be8 <__aeabi_d2f>
 8006486:	4602      	mov	r2, r0
 8006488:	4b20      	ldr	r3, [pc, #128]	@ (800650c <Ctrl_Task+0x11cc>)
 800648a:	f503 639b 	add.w	r3, r3, #1240	@ 0x4d8
 800648e:	601a      	str	r2, [r3, #0]
		g_can_motors[BL_MOTOR_ID-1].torque = rightJointTorque[0];
 8006490:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8006494:	4610      	mov	r0, r2
 8006496:	4619      	mov	r1, r3
 8006498:	f7fa fba6 	bl	8000be8 <__aeabi_d2f>
 800649c:	4602      	mov	r2, r0
 800649e:	4b1b      	ldr	r3, [pc, #108]	@ (800650c <Ctrl_Task+0x11cc>)
 80064a0:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 80064a4:	601a      	str	r2, [r3, #0]
		g_can_motors[BR_MOTOR_ID-1].torque = rightJointTorque[1];
 80064a6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7fa fb9b 	bl	8000be8 <__aeabi_d2f>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4b15      	ldr	r3, [pc, #84]	@ (800650c <Ctrl_Task+0x11cc>)
 80064b6:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 80064ba:	601a      	str	r2, [r3, #0]
		l1 = leftJointTorque[0];
 80064bc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80064c0:	4913      	ldr	r1, [pc, #76]	@ (8006510 <Ctrl_Task+0x11d0>)
 80064c2:	e9c1 2300 	strd	r2, r3, [r1]
		l4 = leftJointTorque[1];
 80064c6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 80064ca:	4912      	ldr	r1, [pc, #72]	@ (8006514 <Ctrl_Task+0x11d4>)
 80064cc:	e9c1 2300 	strd	r2, r3, [r1]
		r1 = rightJointTorque[0];
 80064d0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80064d4:	4910      	ldr	r1, [pc, #64]	@ (8006518 <Ctrl_Task+0x11d8>)
 80064d6:	e9c1 2300 	strd	r2, r3, [r1]
		r4 = rightJointTorque[1];
 80064da:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80064de:	490f      	ldr	r1, [pc, #60]	@ (800651c <Ctrl_Task+0x11dc>)
 80064e0:	e9c1 2300 	strd	r2, r3, [r1]

		vTaskDelayUntil(&xLastWakeTime, 4); //4ms control cycle
 80064e4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80064e8:	2104      	movs	r1, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f014 fb4a 	bl	801ab84 <vTaskDelayUntil>
	{
 80064f0:	f7fe bf8e 	b.w	8005410 <Ctrl_Task+0xd0>
 80064f4:	f3af 8000 	nop.w
 80064f8:	54442d18 	.word	0x54442d18
 80064fc:	bfe921fb 	.word	0xbfe921fb
 8006500:	54442d18 	.word	0x54442d18
 8006504:	3fe921fb 	.word	0x3fe921fb
 8006508:	20002058 	.word	0x20002058
 800650c:	20002220 	.word	0x20002220
 8006510:	20002198 	.word	0x20002198
 8006514:	200021a0 	.word	0x200021a0
 8006518:	200021a8 	.word	0x200021a8
 800651c:	200021b0 	.word	0x200021b0

08006520 <Ctrl_Init>:
	}
}
void Ctrl_Init()
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
	//Initialize various PID parameters
//	PID_SetErrLpfRatio(&rollPID.inner, 0.1f);
	PID_Init(&legLengthPID, 500, 0.0, 0.0, -300.0, 300.0);
 8006524:	ed9f 4b1a 	vldr	d4, [pc, #104]	@ 8006590 <Ctrl_Init+0x70>
 8006528:	ed9f 3b1b 	vldr	d3, [pc, #108]	@ 8006598 <Ctrl_Init+0x78>
 800652c:	ed9f 2b1c 	vldr	d2, [pc, #112]	@ 80065a0 <Ctrl_Init+0x80>
 8006530:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 80065a0 <Ctrl_Init+0x80>
 8006534:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80065a8 <Ctrl_Init+0x88>
 8006538:	482f      	ldr	r0, [pc, #188]	@ (80065f8 <Ctrl_Init+0xd8>)
 800653a:	f7fe faa0 	bl	8004a7e <PID_Init>
//	PID_SetErrLpfRatio(&legLengthPID.inner, 0.5f);
	PID_Init(&legAnglePID, 13, 0.0, 0.0, -3.0, 3.0);
 800653e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80065b0 <Ctrl_Init+0x90>
 8006542:	ed9f 3b1d 	vldr	d3, [pc, #116]	@ 80065b8 <Ctrl_Init+0x98>
 8006546:	ed9f 2b16 	vldr	d2, [pc, #88]	@ 80065a0 <Ctrl_Init+0x80>
 800654a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 80065a0 <Ctrl_Init+0x80>
 800654e:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80065c0 <Ctrl_Init+0xa0>
 8006552:	482a      	ldr	r0, [pc, #168]	@ (80065fc <Ctrl_Init+0xdc>)
 8006554:	f7fe fa93 	bl	8004a7e <PID_Init>
//	PID_SetErrLpfRatio(&legAnglePID.outer, 0.5f);
	PID_Init(&rollPID, 55, 0.0, 0.0, -50.0, 50.0);
 8006558:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 80065c8 <Ctrl_Init+0xa8>
 800655c:	ed9f 3b1c 	vldr	d3, [pc, #112]	@ 80065d0 <Ctrl_Init+0xb0>
 8006560:	ed9f 2b0f 	vldr	d2, [pc, #60]	@ 80065a0 <Ctrl_Init+0x80>
 8006564:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 80065a0 <Ctrl_Init+0x80>
 8006568:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 80065d8 <Ctrl_Init+0xb8>
 800656c:	4824      	ldr	r0, [pc, #144]	@ (8006600 <Ctrl_Init+0xe0>)
 800656e:	f7fe fa86 	bl	8004a7e <PID_Init>
	PID_Init(&yawPID, 0.5f, 0.0, 0.0, -1, 1);
 8006572:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 80065e0 <Ctrl_Init+0xc0>
 8006576:	ed9f 3b1c 	vldr	d3, [pc, #112]	@ 80065e8 <Ctrl_Init+0xc8>
 800657a:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 80065a0 <Ctrl_Init+0x80>
 800657e:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 80065a0 <Ctrl_Init+0x80>
 8006582:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 80065f0 <Ctrl_Init+0xd0>
 8006586:	481f      	ldr	r0, [pc, #124]	@ (8006604 <Ctrl_Init+0xe4>)
 8006588:	f7fe fa79 	bl	8004a7e <PID_Init>
}
 800658c:	bf00      	nop
 800658e:	bd80      	pop	{r7, pc}
 8006590:	00000000 	.word	0x00000000
 8006594:	4072c000 	.word	0x4072c000
 8006598:	00000000 	.word	0x00000000
 800659c:	c072c000 	.word	0xc072c000
	...
 80065ac:	407f4000 	.word	0x407f4000
 80065b0:	00000000 	.word	0x00000000
 80065b4:	40080000 	.word	0x40080000
 80065b8:	00000000 	.word	0x00000000
 80065bc:	c0080000 	.word	0xc0080000
 80065c0:	00000000 	.word	0x00000000
 80065c4:	402a0000 	.word	0x402a0000
 80065c8:	00000000 	.word	0x00000000
 80065cc:	40490000 	.word	0x40490000
 80065d0:	00000000 	.word	0x00000000
 80065d4:	c0490000 	.word	0xc0490000
 80065d8:	00000000 	.word	0x00000000
 80065dc:	404b8000 	.word	0x404b8000
 80065e0:	00000000 	.word	0x00000000
 80065e4:	3ff00000 	.word	0x3ff00000
 80065e8:	00000000 	.word	0x00000000
 80065ec:	bff00000 	.word	0xbff00000
 80065f0:	00000000 	.word	0x00000000
 80065f4:	3fe00000 	.word	0x3fe00000
 80065f8:	200020a0 	.word	0x200020a0
 80065fc:	20002060 	.word	0x20002060
 8006600:	20002120 	.word	0x20002120
 8006604:	200020e0 	.word	0x200020e0

08006608 <buzzing_task>:
 4, 3, 1, 8
 };
*/

//fun
void buzzing_task(void *argument) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000.0 / (4 * TEMPO);
 8006610:	4b55      	ldr	r3, [pc, #340]	@ (8006768 <buzzing_task+0x160>)
 8006612:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(g_buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8006614:	4b55      	ldr	r3, [pc, #340]	@ (800676c <buzzing_task+0x164>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f107 010d 	add.w	r1, r7, #13
 800661c:	f04f 32ff 	mov.w	r2, #4294967295
 8006620:	4618      	mov	r0, r3
 8006622:	f013 fe75 	bl	801a310 <xQueueReceive>
		switch (buzzing_type) {
 8006626:	7b7b      	ldrb	r3, [r7, #13]
 8006628:	2b0d      	cmp	r3, #13
 800662a:	f200 8090 	bhi.w	800674e <buzzing_task+0x146>
 800662e:	a201      	add	r2, pc, #4	@ (adr r2, 8006634 <buzzing_task+0x2c>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	0800666d 	.word	0x0800666d
 8006638:	0800674f 	.word	0x0800674f
 800663c:	0800674f 	.word	0x0800674f
 8006640:	0800674f 	.word	0x0800674f
 8006644:	0800674f 	.word	0x0800674f
 8006648:	0800674f 	.word	0x0800674f
 800664c:	0800674f 	.word	0x0800674f
 8006650:	0800674f 	.word	0x0800674f
 8006654:	0800674f 	.word	0x0800674f
 8006658:	0800674f 	.word	0x0800674f
 800665c:	0800674f 	.word	0x0800674f
 8006660:	08006713 	.word	0x08006713
 8006664:	0800673f 	.word	0x0800673f
 8006668:	0800674f 	.word	0x0800674f
		case song:
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 800666c:	2300      	movs	r3, #0
 800666e:	82fb      	strh	r3, [r7, #22]
 8006670:	e04b      	b.n	800670a <buzzing_task+0x102>
				last_wake_time = xTaskGetTickCount();
 8006672:	f014 fc5b 	bl	801af2c <xTaskGetTickCount>
 8006676:	4603      	mov	r3, r0
 8006678:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 800667a:	8afb      	ldrh	r3, [r7, #22]
 800667c:	4a3c      	ldr	r2, [pc, #240]	@ (8006770 <buzzing_task+0x168>)
 800667e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006682:	4618      	mov	r0, r3
 8006684:	f7fa fd72 	bl	800116c <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 8006688:	8afb      	ldrh	r3, [r7, #22]
 800668a:	4a3a      	ldr	r2, [pc, #232]	@ (8006774 <buzzing_task+0x16c>)
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	ed93 7a00 	vldr	s14, [r3]
 8006694:	edd7 7a04 	vldr	s15, [r7, #16]
 8006698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a0:	ee17 3a90 	vmov	r3, s15
 80066a4:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time*0.95);
 80066a6:	89fb      	ldrh	r3, [r7, #14]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7f9 ff3b 	bl	8000524 <__aeabi_i2d>
 80066ae:	a32a      	add	r3, pc, #168	@ (adr r3, 8006758 <buzzing_task+0x150>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 ffa0 	bl	80005f8 <__aeabi_dmul>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4610      	mov	r0, r2
 80066be:	4619      	mov	r1, r3
 80066c0:	f7fa fa72 	bl	8000ba8 <__aeabi_d2uiz>
 80066c4:	4602      	mov	r2, r0
 80066c6:	f107 0308 	add.w	r3, r7, #8
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f014 fa59 	bl	801ab84 <vTaskDelayUntil>
				buzzer(0);
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7fa fd4a 	bl	800116c <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time*0.05);
 80066d8:	89fb      	ldrh	r3, [r7, #14]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7f9 ff22 	bl	8000524 <__aeabi_i2d>
 80066e0:	a31f      	add	r3, pc, #124	@ (adr r3, 8006760 <buzzing_task+0x158>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f7f9 ff87 	bl	80005f8 <__aeabi_dmul>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4610      	mov	r0, r2
 80066f0:	4619      	mov	r1, r3
 80066f2:	f7fa fa59 	bl	8000ba8 <__aeabi_d2uiz>
 80066f6:	4602      	mov	r2, r0
 80066f8:	f107 0308 	add.w	r3, r7, #8
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f014 fa40 	bl	801ab84 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8006704:	8afb      	ldrh	r3, [r7, #22]
 8006706:	3301      	adds	r3, #1
 8006708:	82fb      	strh	r3, [r7, #22]
 800670a:	8afb      	ldrh	r3, [r7, #22]
 800670c:	2b7c      	cmp	r3, #124	@ 0x7c
 800670e:	d9b0      	bls.n	8006672 <buzzing_task+0x6a>
			}
			break;
 8006710:	e01e      	b.n	8006750 <buzzing_task+0x148>
		case bz_low:
//			buzzer(BUZZER_LOW);
//			vTaskDelay(BUZZ_TIME);
			break;
		case bz_debug_hi_temp:
			buzzer(DEBUG_HI_TEMP1);
 8006712:	f44f 7077 	mov.w	r0, #988	@ 0x3dc
 8006716:	f7fa fd29 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 800671a:	2032      	movs	r0, #50	@ 0x32
 800671c:	f014 fab2 	bl	801ac84 <vTaskDelay>
			buzzer(DEBUG_HI_TEMP2);
 8006720:	f240 4017 	movw	r0, #1047	@ 0x417
 8006724:	f7fa fd22 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8006728:	2032      	movs	r0, #50	@ 0x32
 800672a:	f014 faab 	bl	801ac84 <vTaskDelay>
			buzzer(DEBUG_HI_TEMP3);
 800672e:	f240 4055 	movw	r0, #1109	@ 0x455
 8006732:	f7fa fd1b 	bl	800116c <buzzer>
			vTaskDelay(GAP_TIME);
 8006736:	2032      	movs	r0, #50	@ 0x32
 8006738:	f014 faa4 	bl	801ac84 <vTaskDelay>
			break;
 800673c:	e008      	b.n	8006750 <buzzing_task+0x148>
		case bz_temp_hi:
			buzzer(DEBUG_HI_TEMP1);
 800673e:	f44f 7077 	mov.w	r0, #988	@ 0x3dc
 8006742:	f7fa fd13 	bl	800116c <buzzer>
			vTaskDelay(BUZZ_TIME);
 8006746:	2064      	movs	r0, #100	@ 0x64
 8006748:	f014 fa9c 	bl	801ac84 <vTaskDelay>
			break;
 800674c:	e000      	b.n	8006750 <buzzing_task+0x148>
		case bz_temp_low:
//			buzzer(DEBUG_HI_TEMP3);
//			vTaskDelay(BUZZ_TIME);
			break;
		default:
			break;
 800674e:	bf00      	nop
		}
//		buzzer(0);
		vTaskDelay(GAP_TIME);
 8006750:	2032      	movs	r0, #50	@ 0x32
 8006752:	f014 fa97 	bl	801ac84 <vTaskDelay>
		xQueueReceive(g_buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 8006756:	e75d      	b.n	8006614 <buzzing_task+0xc>
 8006758:	66666666 	.word	0x66666666
 800675c:	3fee6666 	.word	0x3fee6666
 8006760:	9999999a 	.word	0x9999999a
 8006764:	3fa99999 	.word	0x3fa99999
 8006768:	42fa0000 	.word	0x42fa0000
 800676c:	20003bbc 	.word	0x20003bbc
 8006770:	08024854 	.word	0x08024854
 8006774:	08024950 	.word	0x08024950

08006778 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b08c      	sub	sp, #48	@ 0x30
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	//check which CAN bus received it
	//required because the 2 canbuses use seperate FIFOs for receive
	if (hcan->Instance == CAN1) {
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1f      	ldr	r2, [pc, #124]	@ (8006804 <can_ISR+0x8c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d118      	bne.n	80067bc <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 800678a:	210e      	movs	r1, #14
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f007 ff78 	bl	800e682 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL
						| CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 8006792:	f107 020c 	add.w	r2, r7, #12
 8006796:	f107 0314 	add.w	r3, r7, #20
 800679a:	4619      	mov	r1, r3
 800679c:	481a      	ldr	r0, [pc, #104]	@ (8006808 <can_ISR+0x90>)
 800679e:	f7fa fd2b 	bl	80011f8 <can1_get_msg>
		convert_raw_can_data(g_can_motors, rx_msg_header.StdId, rx_buffer);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f107 020c 	add.w	r2, r7, #12
 80067aa:	4619      	mov	r1, r3
 80067ac:	4817      	ldr	r0, [pc, #92]	@ (800680c <can_ISR+0x94>)
 80067ae:	f000 f833 	bl	8006818 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 80067b2:	210e      	movs	r1, #14
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f007 ff3e 	bl	800e636 <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 80067ba:	e01e      	b.n	80067fa <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a13      	ldr	r2, [pc, #76]	@ (8006810 <can_ISR+0x98>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d119      	bne.n	80067fa <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 80067c6:	2170      	movs	r1, #112	@ 0x70
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f007 ff5a 	bl	800e682 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 80067ce:	f107 020c 	add.w	r2, r7, #12
 80067d2:	f107 0314 	add.w	r3, r7, #20
 80067d6:	4619      	mov	r1, r3
 80067d8:	480e      	ldr	r0, [pc, #56]	@ (8006814 <can_ISR+0x9c>)
 80067da:	f7fa fd1e 	bl	800121a <can2_get_msg>
		convert_raw_can_data(g_can_motors, rx_msg_header.StdId + 12, rx_buffer);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	330c      	adds	r3, #12
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f107 020c 	add.w	r2, r7, #12
 80067ea:	4619      	mov	r1, r3
 80067ec:	4807      	ldr	r0, [pc, #28]	@ (800680c <can_ISR+0x94>)
 80067ee:	f000 f813 	bl	8006818 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 80067f2:	2170      	movs	r1, #112	@ 0x70
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f007 ff1e 	bl	800e636 <HAL_CAN_ActivateNotification>
}
 80067fa:	bf00      	nop
 80067fc:	3730      	adds	r7, #48	@ 0x30
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40006400 	.word	0x40006400
 8006808:	20000914 	.word	0x20000914
 800680c:	20002220 	.word	0x20002220
 8006810:	40006800 	.word	0x40006800
 8006814:	2000093c 	.word	0x2000093c

08006818 <convert_raw_can_data>:
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id,
		uint8_t *rx_buffer) {
 8006818:	b5b0      	push	{r4, r5, r7, lr}
 800681a:	b08c      	sub	sp, #48	@ 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	460b      	mov	r3, r1
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	817b      	strh	r3, [r7, #10]
	uint16_t idnum = motor_id - 0x201;
 8006826:	897b      	ldrh	r3, [r7, #10]
 8006828:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800682c:	857b      	strh	r3, [r7, #42]	@ 0x2a

	//if idnum > 24, it's not a DJI motor. Add in a seperate processing function if other CAN devices are added
	if (idnum > 24) {
 800682e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006830:	2b18      	cmp	r3, #24
 8006832:	f200 81a5 	bhi.w	8006b80 <convert_raw_can_data+0x368>
		return;
	}
	motor_data_t *curr_motor = &can_motor_data[idnum];
 8006836:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006838:	4613      	mov	r3, r2
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	461a      	mov	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
	//motor must be initialised in motor_config.c first
	if (curr_motor->motor_type > 0) {
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	789b      	ldrb	r3, [r3, #2]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8198 	beq.w	8006b82 <convert_raw_can_data+0x36a>
		//convert the raw data back into the respective values
		curr_motor->id = motor_id;
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	897a      	ldrh	r2, [r7, #10]
 8006856:	801a      	strh	r2, [r3, #0]
		curr_motor->raw_data.angle[1] = curr_motor->raw_data.angle[0];
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	80da      	strh	r2, [r3, #6]
		curr_motor->raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	b21a      	sxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3301      	adds	r3, #1
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b21b      	sxth	r3, r3
 8006872:	4313      	orrs	r3, r2
 8006874:	b21a      	sxth	r2, r3
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm = (rx_buffer[2] << 8) | rx_buffer[3];
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3302      	adds	r3, #2
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	b21a      	sxth	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3303      	adds	r3, #3
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b21b      	sxth	r3, r3
 800688c:	4313      	orrs	r3, r2
 800688e:	847b      	strh	r3, [r7, #34]	@ 0x22
		curr_motor->raw_data.rpm = curr_motor->raw_data.rpm * SPEED_LPF
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006894:	811a      	strh	r2, [r3, #8]
				+ temp_rpm * (1 - SPEED_LPF);
		curr_motor->raw_data.torque =(rx_buffer[4] << 8) | rx_buffer[5];
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3304      	adds	r3, #4
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	b21a      	sxth	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3305      	adds	r3, #5
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	b21b      	sxth	r3, r3
 80068a8:	4313      	orrs	r3, r2
 80068aa:	b21a      	sxth	r2, r3
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	815a      	strh	r2, [r3, #10]
		curr_motor->torque_data = ((double)curr_motor->raw_data.torque / 13000.0f)*1.5f;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7f9 fe34 	bl	8000524 <__aeabi_i2d>
 80068bc:	a3bd      	add	r3, pc, #756	@ (adr r3, 8006bb4 <convert_raw_can_data+0x39c>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 ffc3 	bl	800084c <__aeabi_ddiv>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4610      	mov	r0, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	4bb1      	ldr	r3, [pc, #708]	@ (8006b98 <convert_raw_can_data+0x380>)
 80068d4:	f7f9 fe90 	bl	80005f8 <__aeabi_dmul>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4610      	mov	r0, r2
 80068de:	4619      	mov	r1, r3
 80068e0:	f7fa f982 	bl	8000be8 <__aeabi_d2f>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	62da      	str	r2, [r3, #44]	@ 0x2c
		curr_motor->raw_data.temp = (rx_buffer[6]);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	799a      	ldrb	r2, [r3, #6]
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	731a      	strb	r2, [r3, #12]
		curr_motor->last_time[1] = curr_motor->last_time[0];
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
		curr_motor->last_time[0] = get_microseconds();
 80068fe:	f7fb fc5f 	bl	80021c0 <get_microseconds>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

		float rds_passed = (float) (curr_motor->raw_data.angle[0]
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006910:	461a      	mov	r2, r3
				- curr_motor->raw_data.angle[1]) / 8192;
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006918:	1ad3      	subs	r3, r2, r3
		float rds_passed = (float) (curr_motor->raw_data.angle[0]
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006922:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8006b9c <convert_raw_can_data+0x384>
 8006926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800692a:	edc7 7a07 	vstr	s15, [r7, #28]
		float time_diff = (float) (curr_motor->last_time[0]
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
				- curr_motor->last_time[1]) / (float) (TIMER_FREQ * 60);
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800693a:	1ad3      	subs	r3, r2, r3
		float time_diff = (float) (curr_motor->last_time[0]
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006944:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8006ba0 <convert_raw_can_data+0x388>
 8006948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800694c:	edc7 7a06 	vstr	s15, [r7, #24]
		curr_motor->angle_data.hires_rpm = curr_motor->angle_data.hires_rpm
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006956:	4618      	mov	r0, r3
 8006958:	f7f9 fdf6 	bl	8000548 <__aeabi_f2d>
				* 0.95 + (rds_passed * time_diff * 0.05);
 800695c:	a38a      	add	r3, pc, #552	@ (adr r3, 8006b88 <convert_raw_can_data+0x370>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f7f9 fe49 	bl	80005f8 <__aeabi_dmul>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4614      	mov	r4, r2
 800696c:	461d      	mov	r5, r3
 800696e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006972:	edd7 7a06 	vldr	s15, [r7, #24]
 8006976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697a:	ee17 0a90 	vmov	r0, s15
 800697e:	f7f9 fde3 	bl	8000548 <__aeabi_f2d>
 8006982:	a383      	add	r3, pc, #524	@ (adr r3, 8006b90 <convert_raw_can_data+0x378>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fe36 	bl	80005f8 <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4620      	mov	r0, r4
 8006992:	4629      	mov	r1, r5
 8006994:	f7f9 fc7a 	bl	800028c <__adddf3>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4610      	mov	r0, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	f7fa f922 	bl	8000be8 <__aeabi_d2f>
 80069a4:	4602      	mov	r2, r0
		curr_motor->angle_data.hires_rpm = curr_motor->angle_data.hires_rpm
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
		//process the angle data differently depending on the motor type to get radians in the
		//adj_angle value
		switch (curr_motor->motor_type) {
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	789b      	ldrb	r3, [r3, #2]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d84d      	bhi.n	8006a52 <convert_raw_can_data+0x23a>
 80069b6:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <convert_raw_can_data+0x1a4>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	08006a07 	.word	0x08006a07
 80069c4:	08006a07 	.word	0x08006a07
 80069c8:	08006a53 	.word	0x08006a53
 80069cc:	08006a53 	.word	0x08006a53
 80069d0:	08006a53 	.word	0x08006a53
 80069d4:	08006a2d 	.word	0x08006a2d
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	08006a2d 	.word	0x08006a2d
		case TYPE_GM6020:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	1d18      	adds	r0, r3, #4
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	f103 0198 	add.w	r1, r3, #152	@ 0x98
					curr_motor->last_time);
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	33e4      	adds	r3, #228	@ 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 f922 	bl	8006c38 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	3398      	adds	r3, #152	@ 0x98
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f000 f8dc 	bl	8006bbc <angle_offset>
			break;
 8006a04:	e026      	b.n	8006a54 <convert_raw_can_data+0x23c>
		case TYPE_M2006:
		case TYPE_M3508:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	1d18      	adds	r0, r3, #4
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	f103 0198 	add.w	r1, r3, #152	@ 0x98
								curr_motor->last_time);
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	33e4      	adds	r3, #228	@ 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006a14:	461a      	mov	r2, r3
 8006a16:	f000 f90f 	bl	8006c38 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	1d1a      	adds	r2, r3, #4
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	3398      	adds	r3, #152	@ 0x98
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f000 f8c9 	bl	8006bbc <angle_offset>
			break;
 8006a2a:	e013      	b.n	8006a54 <convert_raw_can_data+0x23c>
//					curr_motor->last_time);
			break;
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	1d18      	adds	r0, r3, #4
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	f103 0198 	add.w	r1, r3, #152	@ 0x98
					curr_motor->last_time);
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	33e4      	adds	r3, #228	@ 0xe4
			motor_calc_odometry(&curr_motor->raw_data, &curr_motor->angle_data,
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f000 f8fc 	bl	8006c38 <motor_calc_odometry>
			angle_offset(&curr_motor->raw_data, &curr_motor->angle_data);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	1d1a      	adds	r2, r3, #4
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	3398      	adds	r3, #152	@ 0x98
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f000 f8b6 	bl	8006bbc <angle_offset>
			break;
 8006a50:	e000      	b.n	8006a54 <convert_raw_can_data+0x23c>
		default:
			break;
 8006a52:	bf00      	nop

		}

		//initialise task switching variables
		BaseType_t xHigherPriorityTaskWoken, xResult;
		xHigherPriorityTaskWoken = pdFALSE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]

		//set event group bits so that the tasks and PIDs only trigger upon updated data
		//also checks if the respective tasks are set to ready
		switch (idnum + 1) {
 8006a58:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	3b05      	subs	r3, #5
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	d87c      	bhi.n	8006b5c <convert_raw_can_data+0x344>
 8006a62:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <convert_raw_can_data+0x250>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006aa9 	.word	0x08006aa9
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006ad1 	.word	0x08006ad1
 8006a74:	08006ae5 	.word	0x08006ae5
 8006a78:	08006b5d 	.word	0x08006b5d
 8006a7c:	08006b21 	.word	0x08006b21
 8006a80:	08006b5d 	.word	0x08006b5d
 8006a84:	08006b5d 	.word	0x08006b5d
 8006a88:	08006b5d 	.word	0x08006b5d
 8006a8c:	08006b5d 	.word	0x08006b5d
 8006a90:	08006b5d 	.word	0x08006b5d
 8006a94:	08006b5d 	.word	0x08006b5d
 8006a98:	08006af9 	.word	0x08006af9
 8006a9c:	08006b0d 	.word	0x08006b0d
 8006aa0:	08006b35 	.word	0x08006b35
 8006aa4:	08006b49 	.word	0x08006b49
#ifndef CHASSIS_MCU
		case FR_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 8006aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ba4 <convert_raw_can_data+0x38c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f107 0214 	add.w	r2, r7, #20
 8006ab0:	2108      	movs	r1, #8
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f012 ffee 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006ab8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006aba:	e052      	b.n	8006b62 <convert_raw_can_data+0x34a>
		case FL_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 8006abc:	4b39      	ldr	r3, [pc, #228]	@ (8006ba4 <convert_raw_can_data+0x38c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f107 0214 	add.w	r2, r7, #20
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f012 ffe4 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006acc:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006ace:	e048      	b.n	8006b62 <convert_raw_can_data+0x34a>
		case BL_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 8006ad0:	4b34      	ldr	r3, [pc, #208]	@ (8006ba4 <convert_raw_can_data+0x38c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f107 0214 	add.w	r2, r7, #20
 8006ad8:	2102      	movs	r1, #2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f012 ffda 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006ae0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006ae2:	e03e      	b.n	8006b62 <convert_raw_can_data+0x34a>
		case BR_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 8006ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba4 <convert_raw_can_data+0x38c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f107 0214 	add.w	r2, r7, #20
 8006aec:	2101      	movs	r1, #1
 8006aee:	4618      	mov	r0, r3
 8006af0:	f012 ffd0 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006af4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006af6:	e034      	b.n	8006b62 <convert_raw_can_data+0x34a>
#endif
		case LFRICTION_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8006af8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba8 <convert_raw_can_data+0x390>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f107 0214 	add.w	r2, r7, #20
 8006b00:	2102      	movs	r1, #2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f012 ffc6 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006b08:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006b0a:	e02a      	b.n	8006b62 <convert_raw_can_data+0x34a>
		case RFRICTION_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8006b0c:	4b26      	ldr	r3, [pc, #152]	@ (8006ba8 <convert_raw_can_data+0x390>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f107 0214 	add.w	r2, r7, #20
 8006b14:	2101      	movs	r1, #1
 8006b16:	4618      	mov	r0, r3
 8006b18:	f012 ffbc 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006b1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006b1e:	e020      	b.n	8006b62 <convert_raw_can_data+0x34a>
		case FEEDER_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 8006b20:	4b21      	ldr	r3, [pc, #132]	@ (8006ba8 <convert_raw_can_data+0x390>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f107 0214 	add.w	r2, r7, #20
 8006b28:	2104      	movs	r1, #4
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f012 ffb2 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006b30:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006b32:	e016      	b.n	8006b62 <convert_raw_can_data+0x34a>
		case PITCH_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 8006b34:	4b1d      	ldr	r3, [pc, #116]	@ (8006bac <convert_raw_can_data+0x394>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f107 0214 	add.w	r2, r7, #20
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f012 ffa8 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006b44:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006b46:	e00c      	b.n	8006b62 <convert_raw_can_data+0x34a>
		case YAW_MOTOR_ID:
			xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8006b48:	4b18      	ldr	r3, [pc, #96]	@ (8006bac <convert_raw_can_data+0x394>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f107 0214 	add.w	r2, r7, #20
 8006b50:	2102      	movs	r1, #2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f012 ff9e 	bl	8019a94 <xEventGroupSetBitsFromISR>
 8006b58:	62f8      	str	r0, [r7, #44]	@ 0x2c
					&xHigherPriorityTaskWoken);
			break;
 8006b5a:	e002      	b.n	8006b62 <convert_raw_can_data+0x34a>
		default:
			xResult = pdFAIL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			idnum = idnum;
			//error handler
			break;
 8006b60:	bf00      	nop
		}

		//switches tasks if a higher priority task is ready.
		//required because the function is in an ISR
		if (xResult != pdFAIL) {
 8006b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <convert_raw_can_data+0x36a>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <convert_raw_can_data+0x36a>
 8006b6e:	4b10      	ldr	r3, [pc, #64]	@ (8006bb0 <convert_raw_can_data+0x398>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	e000      	b.n	8006b82 <convert_raw_can_data+0x36a>
		return;
 8006b80:	bf00      	nop
		}
	} else {
		//this is a useless statement so that it is possible to set a breakpoint here lol
		//error handler
	}
}
 8006b82:	3730      	adds	r7, #48	@ 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bdb0      	pop	{r4, r5, r7, pc}
 8006b88:	66666666 	.word	0x66666666
 8006b8c:	3fee6666 	.word	0x3fee6666
 8006b90:	9999999a 	.word	0x9999999a
 8006b94:	3fa99999 	.word	0x3fa99999
 8006b98:	3ff80000 	.word	0x3ff80000
 8006b9c:	46000000 	.word	0x46000000
 8006ba0:	4ab71b00 	.word	0x4ab71b00
 8006ba4:	20003ba4 	.word	0x20003ba4
 8006ba8:	20003ba8 	.word	0x20003ba8
 8006bac:	20003ba0 	.word	0x20003ba0
 8006bb0:	e000ed04 	.word	0xe000ed04
 8006bb4:	00000000 	.word	0x00000000
 8006bb8:	40c96400 	.word	0x40c96400

08006bbc <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
//	}
//	while (angle_data->ticks < angle_data->min_ticks) {
//		angle_data->ticks += angle_data->tick_range;
//	}

	temp_ang = angle_data->ticks - angle_data->center_ang;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	60fb      	str	r3, [r7, #12]
	if (temp_ang > angle_data->max_ticks) {
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	dd05      	ble.n	8006bec <angle_offset+0x30>
		temp_ang -= angle_data->tick_range;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e009      	b.n	8006c00 <angle_offset+0x44>
	} else if (temp_ang < angle_data->min_ticks) {
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	da04      	bge.n	8006c00 <angle_offset+0x44>
		temp_ang += angle_data->tick_range;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
	}
//	angle_data->ticks = temp_ang;
	angle_data->adj_ang = (float) temp_ang * angle_data->ang_range
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c10:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ angle_data->tick_range;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
	angle_data->adj_ang = (float) temp_ang * angle_data->ang_range
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data, angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	82fb      	strh	r3, [r7, #22]
	if (angle_data->init == 0){
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d129      	bne.n	8006cb8 <motor_calc_odometry+0x80>
		angle_data->ticks = motor_data->angle[0];
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	601a      	str	r2, [r3, #0]
		if (angle_data->ticks > angle_data->max_ticks) {
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	dd06      	ble.n	8006c8a <motor_calc_odometry+0x52>
			angle_data->ticks -= angle_data->tick_range;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	1ad2      	subs	r2, r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	601a      	str	r2, [r3, #0]
		}
		if (angle_data->ticks < angle_data->min_ticks) {
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	da06      	bge.n	8006ca4 <motor_calc_odometry+0x6c>
			angle_data->ticks += angle_data->tick_range;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	441a      	add	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	601a      	str	r2, [r3, #0]
		}
		motor_data->angle[1] = motor_data->angle[0];
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	805a      	strh	r2, [r3, #2]
		angle_data->init = 1;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		return;
 8006cb6:	e06b      	b.n	8006d90 <motor_calc_odometry+0x158>
	}
	angle_data->abs_ang_diff = abs_angle_diff;
 8006cb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	615a      	str	r2, [r3, #20]

	//generally the motor won't exceed half a turn between each feedback
	if (abs_angle_diff > 4096) {
 8006cc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc8:	dd0a      	ble.n	8006ce0 <motor_calc_odometry+0xa8>
		++angle_data->rev;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	619a      	str	r2, [r3, #24]
		abs_angle_diff -= 8192;
 8006cd4:	8afb      	ldrh	r3, [r7, #22]
 8006cd6:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	82fb      	strh	r3, [r7, #22]
 8006cde:	e00e      	b.n	8006cfe <motor_calc_odometry+0xc6>
	} else if (abs_angle_diff < -4096) {
 8006ce0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006ce4:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8006ce8:	da09      	bge.n	8006cfe <motor_calc_odometry+0xc6>
		--angle_data->rev;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	1e5a      	subs	r2, r3, #1
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	619a      	str	r2, [r3, #24]
		abs_angle_diff += 8192;
 8006cf4:	8afb      	ldrh	r3, [r7, #22]
 8006cf6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	82fb      	strh	r3, [r7, #22]
	}

	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006d04:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8006d9c <motor_calc_odometry+0x164>
 8006d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d10:	ee17 3a90 	vmov	r3, s15
 8006d14:	82bb      	strh	r3, [r7, #20]
	angle_data->ticks += abs_angle_diff;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006d1e:	441a      	add	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks > angle_data->max_ticks) {
 8006d24:	e006      	b.n	8006d34 <motor_calc_odometry+0xfc>
		angle_data->ticks -= angle_data->tick_range;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks > angle_data->max_ticks) {
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	dcf2      	bgt.n	8006d26 <motor_calc_odometry+0xee>
	}
	while (angle_data->ticks < angle_data->min_ticks) {
 8006d40:	e006      	b.n	8006d50 <motor_calc_odometry+0x118>
		angle_data->ticks += angle_data->tick_range;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	441a      	add	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	601a      	str	r2, [r3, #0]
	while (angle_data->ticks < angle_data->min_ticks) {
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	dbf2      	blt.n	8006d42 <motor_calc_odometry+0x10a>
	}

	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8006d6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006d72:	8abb      	ldrh	r3, [r7, #20]
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	motor_data->angle[1] = motor_data->angle[0];
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	805a      	strh	r2, [r3, #2]
}
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	46000000 	.word	0x46000000

08006da0 <control_input_task>:
uint8_t g_safety_toggle = ARM_SWITCH;
uint8_t launcher_safety_toggle = ARM_SWITCH;



void control_input_task(void *argument) {
 8006da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da4:	b088      	sub	sp, #32
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
	TickType_t start_time;
	control_reset();
 8006daa:	f000 f959 	bl	8007060 <control_reset>
	chassis_yaw_pid_init();
 8006dae:	f000 fb47 	bl	8007440 <chassis_yaw_pid_init>
	gimbal_ctrl_data.imu_mode = GIMBAL_MODE;
 8006db2:	4b80      	ldr	r3, [pc, #512]	@ (8006fb4 <control_input_task+0x214>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	731a      	strb	r2, [r3, #12]
	aimbot_pid_init();
 8006db8:	f000 fee0 	bl	8007b7c <aimbot_pid_init>
	dbus_remote_start();
 8006dbc:	f7fa fb94 	bl	80014e8 <dbus_remote_start>
	gear_speed.curr_gear = GEAR_DEFAULT;
 8006dc0:	4b7d      	ldr	r3, [pc, #500]	@ (8006fb8 <control_input_task+0x218>)
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	701a      	strb	r2, [r3, #0]
	set_gear();
 8006dc6:	f000 fabf 	bl	8007348 <set_gear>
	g_safety_toggle = 1;
 8006dca:	4b7c      	ldr	r3, [pc, #496]	@ (8006fbc <control_input_task+0x21c>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	701a      	strb	r2, [r3, #0]
	vTaskDelay(100);
 8006dd0:	2064      	movs	r0, #100	@ 0x64
 8006dd2:	f013 ff57 	bl	801ac84 <vTaskDelay>
	uint8_t rc_check;
	while (fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50 || fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50){
 8006dd6:	e01a      	b.n	8006e0e <control_input_task+0x6e>
		uint8_t temp_msg;
		temp_msg = not_ok;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	74fb      	strb	r3, [r7, #19]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8006ddc:	4b78      	ldr	r3, [pc, #480]	@ (8006fc0 <control_input_task+0x220>)
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	f107 0113 	add.w	r1, r7, #19
 8006de4:	2300      	movs	r3, #0
 8006de6:	2200      	movs	r2, #0
 8006de8:	f013 f862 	bl	8019eb0 <xQueueGenericSend>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8006dec:	21c8      	movs	r1, #200	@ 0xc8
 8006dee:	2001      	movs	r0, #1
 8006df0:	f014 fd18 	bl	801b824 <ulTaskNotifyTake>
 8006df4:	4603      	mov	r3, r0
 8006df6:	76fb      	strb	r3, [r7, #27]
		HAL_UART_DMAStop(&DBUS_UART);
 8006df8:	4872      	ldr	r0, [pc, #456]	@ (8006fc4 <control_input_task+0x224>)
 8006dfa:	f00e f859 	bl	8014eb0 <HAL_UART_DMAStop>
		dbus_remote_start();
 8006dfe:	f7fa fb73 	bl	80014e8 <dbus_remote_start>
		if (rc_check){
 8006e02:	7efb      	ldrb	r3, [r7, #27]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <control_input_task+0x6e>
			vTaskDelay(200);
 8006e08:	20c8      	movs	r0, #200	@ 0xc8
 8006e0a:	f013 ff3b 	bl	801ac84 <vTaskDelay>
	while (fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50 || fabs(g_remote_cmd.left_x) > 50 || fabs(g_remote_cmd.right_x) > 50){
 8006e0e:	4b6e      	ldr	r3, [pc, #440]	@ (8006fc8 <control_input_task+0x228>)
 8006e10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7f9 fb85 	bl	8000524 <__aeabi_i2d>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4690      	mov	r8, r2
 8006e20:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	4b68      	ldr	r3, [pc, #416]	@ (8006fcc <control_input_task+0x22c>)
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	f7f9 fe73 	bl	8000b18 <__aeabi_dcmpgt>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1cf      	bne.n	8006dd8 <control_input_task+0x38>
 8006e38:	4b63      	ldr	r3, [pc, #396]	@ (8006fc8 <control_input_task+0x228>)
 8006e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7f9 fb70 	bl	8000524 <__aeabi_i2d>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4692      	mov	sl, r2
 8006e4a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	4b5e      	ldr	r3, [pc, #376]	@ (8006fcc <control_input_task+0x22c>)
 8006e54:	4650      	mov	r0, sl
 8006e56:	4659      	mov	r1, fp
 8006e58:	f7f9 fe5e 	bl	8000b18 <__aeabi_dcmpgt>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1ba      	bne.n	8006dd8 <control_input_task+0x38>
 8006e62:	4b59      	ldr	r3, [pc, #356]	@ (8006fc8 <control_input_task+0x228>)
 8006e64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7f9 fb5b 	bl	8000524 <__aeabi_i2d>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	603a      	str	r2, [r7, #0]
 8006e74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	4b53      	ldr	r3, [pc, #332]	@ (8006fcc <control_input_task+0x22c>)
 8006e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e84:	f7f9 fe48 	bl	8000b18 <__aeabi_dcmpgt>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1a4      	bne.n	8006dd8 <control_input_task+0x38>
 8006e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc8 <control_input_task+0x228>)
 8006e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7f9 fb45 	bl	8000524 <__aeabi_i2d>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	4b48      	ldr	r3, [pc, #288]	@ (8006fcc <control_input_task+0x22c>)
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7f9 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d18f      	bne.n	8006dd8 <control_input_task+0x38>
		}
	}
	g_safety_toggle = ARM_SWITCH;
 8006eb8:	4b40      	ldr	r3, [pc, #256]	@ (8006fbc <control_input_task+0x21c>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	701a      	strb	r2, [r3, #0]

	uint32_t last_song = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
	while (1) {
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8006ec2:	21c8      	movs	r1, #200	@ 0xc8
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	f014 fcad 	bl	801b824 <ulTaskNotifyTake>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	76fb      	strb	r3, [r7, #27]
		if (rc_check) {
 8006ece:	7efb      	ldrb	r3, [r7, #27]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d04c      	beq.n	8006f6e <control_input_task+0x1ce>
			status_led(1, on_led);
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f7fb f86e 	bl	8001fb8 <status_led>
			start_time = xTaskGetTickCount();
 8006edc:	f014 f826 	bl	801af2c <xTaskGetTickCount>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	617b      	str	r3, [r7, #20]
			if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8006ee4:	4b38      	ldr	r3, [pc, #224]	@ (8006fc8 <control_input_task+0x228>)
 8006ee6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d123      	bne.n	8006f36 <control_input_task+0x196>

				if ((g_remote_cmd.left_switch == ge_LSW_UNSAFE) && (HAL_GetTick() - last_song > 5000)){
 8006eee:	4b36      	ldr	r3, [pc, #216]	@ (8006fc8 <control_input_task+0x228>)
 8006ef0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d10d      	bne.n	8006f14 <control_input_task+0x174>
 8006ef8:	f006 fcfe 	bl	800d8f8 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d904      	bls.n	8006f14 <control_input_task+0x174>
					uint8_t temp_msg;
					last_song = HAL_GetTick();
 8006f0a:	f006 fcf5 	bl	800d8f8 <HAL_GetTick>
 8006f0e:	61f8      	str	r0, [r7, #28]
					temp_msg = song;
 8006f10:	2300      	movs	r3, #0
 8006f12:	76bb      	strb	r3, [r7, #26]
//					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
				}
				laser_on();
 8006f14:	f7fa fb8c 	bl	8001630 <laser_on>
				control_mode_change(g_remote_cmd.side_dial);
 8006f18:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc8 <control_input_task+0x228>)
 8006f1a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 f8d4 	bl	80070cc <control_mode_change>
				g_safety_toggle = 0;
 8006f24:	4b25      	ldr	r3, [pc, #148]	@ (8006fbc <control_input_task+0x21c>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	701a      	strb	r2, [r3, #0]
				launcher_safety_toggle = 0;
 8006f2a:	4b29      	ldr	r3, [pc, #164]	@ (8006fd0 <control_input_task+0x230>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
				control_reset();
 8006f30:	f000 f896 	bl	8007060 <control_reset>
 8006f34:	e037      	b.n	8006fa6 <control_input_task+0x206>
			} else {

				switch (control_mode) {
 8006f36:	4b27      	ldr	r3, [pc, #156]	@ (8006fd4 <control_input_task+0x234>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d002      	beq.n	8006f44 <control_input_task+0x1a4>
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d008      	beq.n	8006f54 <control_input_task+0x1b4>
					break;
					;
#endif

				default:
					break;
 8006f42:	e00f      	b.n	8006f64 <control_input_task+0x1c4>
					keyboard_gear_shifter(&gear_speed);
 8006f44:	481c      	ldr	r0, [pc, #112]	@ (8006fb8 <control_input_task+0x218>)
 8006f46:	f000 fa9f 	bl	8007488 <keyboard_gear_shifter>
					set_gear();
 8006f4a:	f000 f9fd 	bl	8007348 <set_gear>
					keyboard_control_input();
 8006f4e:	f000 fa91 	bl	8007474 <keyboard_control_input>
					break;
 8006f52:	e007      	b.n	8006f64 <control_input_task+0x1c4>
					remote_gear_shifter(&gear_speed);
 8006f54:	4818      	ldr	r0, [pc, #96]	@ (8006fb8 <control_input_task+0x218>)
 8006f56:	f000 fc75 	bl	8007844 <remote_gear_shifter>
					set_gear();
 8006f5a:	f000 f9f5 	bl	8007348 <set_gear>
					remote_control_input();
 8006f5e:	f000 fc67 	bl	8007830 <remote_control_input>
					break;
 8006f62:	bf00      	nop

				}
				status_led(1, off_led);
 8006f64:	2101      	movs	r1, #1
 8006f66:	2001      	movs	r0, #1
 8006f68:	f7fb f826 	bl	8001fb8 <status_led>
 8006f6c:	e01b      	b.n	8006fa6 <control_input_task+0x206>
			}
		} else {
			//restart remote uart
			if (HAL_GetTick() - g_remote_cmd.last_time > 100) {
 8006f6e:	f006 fcc3 	bl	800d8f8 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	4b14      	ldr	r3, [pc, #80]	@ (8006fc8 <control_input_task+0x228>)
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	@ 0x64
 8006f7c:	d909      	bls.n	8006f92 <control_input_task+0x1f2>
				HAL_UART_DMAStop(&DBUS_UART);
 8006f7e:	4811      	ldr	r0, [pc, #68]	@ (8006fc4 <control_input_task+0x224>)
 8006f80:	f00d ff96 	bl	8014eb0 <HAL_UART_DMAStop>
				dbus_remote_start();
 8006f84:	f7fa fab0 	bl	80014e8 <dbus_remote_start>
				g_remote_cmd.last_time = HAL_GetTick();
 8006f88:	f006 fcb6 	bl	800d8f8 <HAL_GetTick>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc8 <control_input_task+0x228>)
 8006f90:	6213      	str	r3, [r2, #32]
			}
			kill_can();
 8006f92:	f005 fb89 	bl	800c6a8 <kill_can>
			control_reset();
 8006f96:	f000 f863 	bl	8007060 <control_reset>
			launcher_safety_toggle = LAUNCHER_SAFETY;
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <control_input_task+0x230>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
			g_safety_toggle = 1;
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <control_input_task+0x21c>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	701a      	strb	r2, [r3, #0]

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 8006fa6:	f107 0314 	add.w	r3, r7, #20
 8006faa:	2102      	movs	r1, #2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f013 fde9 	bl	801ab84 <vTaskDelayUntil>
		rc_check = ulTaskNotifyTake(pdTRUE, 200);
 8006fb2:	e786      	b.n	8006ec2 <control_input_task+0x122>
 8006fb4:	200038c0 	.word	0x200038c0
 8006fb8:	20003904 	.word	0x20003904
 8006fbc:	20000031 	.word	0x20000031
 8006fc0:	20003bbc 	.word	0x20003bbc
 8006fc4:	20001c5c 	.word	0x20001c5c
 8006fc8:	20000838 	.word	0x20000838
 8006fcc:	40490000 	.word	0x40490000
 8006fd0:	20000032 	.word	0x20000032
 8006fd4:	20000030 	.word	0x20000030

08006fd8 <chassis_center_yaw>:
	}
	osThreadTerminate(NULL);
}

float chassis_center_yaw() {
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0

}
 8006fdc:	bf00      	nop
 8006fde:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <chassis_set_ctrl>:

void chassis_set_ctrl(float forward, float horizontal, float yaw){
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	ed87 0a03 	vstr	s0, [r7, #12]
 8006ff6:	edc7 0a02 	vstr	s1, [r7, #8]
 8006ffa:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis_ctrl_data.enabled = 1;
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <chassis_set_ctrl+0x40>)
 8007000:	2201      	movs	r2, #1
 8007002:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.horizontal = horizontal;
 8007004:	4a09      	ldr	r2, [pc, #36]	@ (800702c <chassis_set_ctrl+0x40>)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6053      	str	r3, [r2, #4]
	chassis_ctrl_data.forward = forward;
 800700a:	4a08      	ldr	r2, [pc, #32]	@ (800702c <chassis_set_ctrl+0x40>)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6013      	str	r3, [r2, #0]
	chassis_ctrl_data.yaw = -yaw;
 8007010:	edd7 7a01 	vldr	s15, [r7, #4]
 8007014:	eef1 7a67 	vneg.f32	s15, s15
 8007018:	4b04      	ldr	r3, [pc, #16]	@ (800702c <chassis_set_ctrl+0x40>)
 800701a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	200038a0 	.word	0x200038a0

08007030 <chassis_kill_ctrl>:

void chassis_kill_ctrl(){
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
	chassis_ctrl_data.enabled = 0;
 8007034:	4b09      	ldr	r3, [pc, #36]	@ (800705c <chassis_kill_ctrl+0x2c>)
 8007036:	2200      	movs	r2, #0
 8007038:	751a      	strb	r2, [r3, #20]
	chassis_ctrl_data.forward = 0;
 800703a:	4b08      	ldr	r3, [pc, #32]	@ (800705c <chassis_kill_ctrl+0x2c>)
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 8007042:	4b06      	ldr	r3, [pc, #24]	@ (800705c <chassis_kill_ctrl+0x2c>)
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 800704a:	4b04      	ldr	r3, [pc, #16]	@ (800705c <chassis_kill_ctrl+0x2c>)
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	609a      	str	r2, [r3, #8]
}
 8007052:	bf00      	nop
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	200038a0 	.word	0x200038a0

08007060 <control_reset>:
		}
	}
	return 0;
}

void control_reset() {
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 8007064:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <control_reset+0x58>)
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 800706c:	4b12      	ldr	r3, [pc, #72]	@ (80070b8 <control_reset+0x58>)
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 8007074:	4b10      	ldr	r3, [pc, #64]	@ (80070b8 <control_reset+0x58>)
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 800707c:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <control_reset+0x58>)
 800707e:	2200      	movs	r2, #0
 8007080:	751a      	strb	r2, [r3, #20]
	gimbal_ctrl_data.pitch = 0;
 8007082:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <control_reset+0x5c>)
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
	gimbal_ctrl_data.yaw = imu_heading.yaw;
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <control_reset+0x60>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	4a0b      	ldr	r2, [pc, #44]	@ (80070bc <control_reset+0x5c>)
 8007090:	6053      	str	r3, [r2, #4]
	gimbal_ctrl_data.enabled = 0;
 8007092:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <control_reset+0x5c>)
 8007094:	2200      	movs	r2, #0
 8007096:	735a      	strb	r2, [r3, #13]
	launcher_ctrl_data.firing = 0;
 8007098:	4b0a      	ldr	r3, [pc, #40]	@ (80070c4 <control_reset+0x64>)
 800709a:	2200      	movs	r2, #0
 800709c:	805a      	strh	r2, [r3, #2]
	launcher_ctrl_data.projectile_speed = 0;
 800709e:	4b09      	ldr	r3, [pc, #36]	@ (80070c4 <control_reset+0x64>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	801a      	strh	r2, [r3, #0]
	launcher_ctrl_data.enabled = 0;
 80070a4:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <control_reset+0x64>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	715a      	strb	r2, [r3, #5]
	g_spinspin_mode = 0;
 80070aa:	4b07      	ldr	r3, [pc, #28]	@ (80070c8 <control_reset+0x68>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
	laser_off();
 80070b0:	f7fa faca 	bl	8001648 <laser_off>
}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200038a0 	.word	0x200038a0
 80070bc:	200038c0 	.word	0x200038c0
 80070c0:	20003ad8 	.word	0x20003ad8
 80070c4:	200038b8 	.word	0x200038b8
 80070c8:	20003914 	.word	0x20003914

080070cc <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	80fb      	strh	r3, [r7, #6]
//assume already in shutdown mode here
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (g_remote_cmd.left_switch == ge_LSW_CONFIG) {
 80070d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007294 <control_mode_change+0x1c8>)
 80070d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d133      	bne.n	8007148 <control_mode_change+0x7c>
		if (left_dial_input > 330 || left_dial_input < -330) {
 80070e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e4:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80070e8:	dc04      	bgt.n	80070f4 <control_mode_change+0x28>
 80070ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ee:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 80070f2:	da23      	bge.n	800713c <control_mode_change+0x70>
			if (HAL_GetTick() - last_trig_time > 1000) {
 80070f4:	f006 fc00 	bl	800d8f8 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	4b67      	ldr	r3, [pc, #412]	@ (8007298 <control_mode_change+0x1cc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007104:	f240 80c2 	bls.w	800728c <control_mode_change+0x1c0>
				switch (control_mode) {
 8007108:	4b64      	ldr	r3, [pc, #400]	@ (800729c <control_mode_change+0x1d0>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	3b01      	subs	r3, #1
 800710e:	2b01      	cmp	r3, #1
 8007110:	d80d      	bhi.n	800712e <control_mode_change+0x62>
				case KEYBOARD_CTRL_MODE:
				case REMOTE_CTRL_MODE:
					control_mode = SBC_CTRL_MODE;
 8007112:	4b62      	ldr	r3, [pc, #392]	@ (800729c <control_mode_change+0x1d0>)
 8007114:	2203      	movs	r2, #3
 8007116:	701a      	strb	r2, [r3, #0]
					temp_msg = control_sbc;
 8007118:	2305      	movs	r3, #5
 800711a:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800711c:	4b60      	ldr	r3, [pc, #384]	@ (80072a0 <control_mode_change+0x1d4>)
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	f107 010f 	add.w	r1, r7, #15
 8007124:	2300      	movs	r3, #0
 8007126:	2200      	movs	r2, #0
 8007128:	f012 fec2 	bl	8019eb0 <xQueueGenericSend>
					break;
 800712c:	e005      	b.n	800713a <control_mode_change+0x6e>
				default:
					last_trig_time = HAL_GetTick();
 800712e:	f006 fbe3 	bl	800d8f8 <HAL_GetTick>
 8007132:	4603      	mov	r3, r0
 8007134:	4a58      	ldr	r2, [pc, #352]	@ (8007298 <control_mode_change+0x1cc>)
 8007136:	6013      	str	r3, [r2, #0]
					break;
 8007138:	bf00      	nop
			if (HAL_GetTick() - last_trig_time > 1000) {
 800713a:	e0a7      	b.n	800728c <control_mode_change+0x1c0>
				}
			}
		} else {
			last_trig_time = HAL_GetTick();
 800713c:	f006 fbdc 	bl	800d8f8 <HAL_GetTick>
 8007140:	4603      	mov	r3, r0
 8007142:	4a55      	ldr	r2, [pc, #340]	@ (8007298 <control_mode_change+0x1cc>)
 8007144:	6013      	str	r3, [r2, #0]
			break;
		default:
			break;
		}
	}
}
 8007146:	e0a1      	b.n	800728c <control_mode_change+0x1c0>
		switch (control_mode) {
 8007148:	4b54      	ldr	r3, [pc, #336]	@ (800729c <control_mode_change+0x1d0>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d052      	beq.n	80071f6 <control_mode_change+0x12a>
 8007150:	2b03      	cmp	r3, #3
 8007152:	f300 8094 	bgt.w	800727e <control_mode_change+0x1b2>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d002      	beq.n	8007160 <control_mode_change+0x94>
 800715a:	2b02      	cmp	r3, #2
 800715c:	d026      	beq.n	80071ac <control_mode_change+0xe0>
			break;
 800715e:	e08e      	b.n	800727e <control_mode_change+0x1b2>
			if (left_dial_input < -330) {
 8007160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007164:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 8007168:	da1a      	bge.n	80071a0 <control_mode_change+0xd4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800716a:	f006 fbc5 	bl	800d8f8 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	4b49      	ldr	r3, [pc, #292]	@ (8007298 <control_mode_change+0x1cc>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800717a:	f240 8082 	bls.w	8007282 <control_mode_change+0x1b6>
					control_mode = REMOTE_CTRL_MODE;
 800717e:	4b47      	ldr	r3, [pc, #284]	@ (800729c <control_mode_change+0x1d0>)
 8007180:	2202      	movs	r2, #2
 8007182:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8007184:	2304      	movs	r3, #4
 8007186:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8007188:	4b45      	ldr	r3, [pc, #276]	@ (80072a0 <control_mode_change+0x1d4>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	f107 010f 	add.w	r1, r7, #15
 8007190:	2300      	movs	r3, #0
 8007192:	2200      	movs	r2, #0
 8007194:	f012 fe8c 	bl	8019eb0 <xQueueGenericSend>
					launcher_safety_toggle = LAUNCHER_SAFETY;
 8007198:	4b42      	ldr	r3, [pc, #264]	@ (80072a4 <control_mode_change+0x1d8>)
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
			break;
 800719e:	e070      	b.n	8007282 <control_mode_change+0x1b6>
				last_trig_time = HAL_GetTick();
 80071a0:	f006 fbaa 	bl	800d8f8 <HAL_GetTick>
 80071a4:	4603      	mov	r3, r0
 80071a6:	4a3c      	ldr	r2, [pc, #240]	@ (8007298 <control_mode_change+0x1cc>)
 80071a8:	6013      	str	r3, [r2, #0]
			break;
 80071aa:	e06a      	b.n	8007282 <control_mode_change+0x1b6>
			if (left_dial_input > 330) {
 80071ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071b0:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80071b4:	dd19      	ble.n	80071ea <control_mode_change+0x11e>
				if (HAL_GetTick() - last_trig_time > 1000) {
 80071b6:	f006 fb9f 	bl	800d8f8 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	4b36      	ldr	r3, [pc, #216]	@ (8007298 <control_mode_change+0x1cc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071c6:	d95e      	bls.n	8007286 <control_mode_change+0x1ba>
					control_mode = KEYBOARD_CTRL_MODE;
 80071c8:	4b34      	ldr	r3, [pc, #208]	@ (800729c <control_mode_change+0x1d0>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 80071ce:	2303      	movs	r3, #3
 80071d0:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 80071d2:	4b34      	ldr	r3, [pc, #208]	@ (80072a4 <control_mode_change+0x1d8>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80071d8:	4b31      	ldr	r3, [pc, #196]	@ (80072a0 <control_mode_change+0x1d4>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	f107 010f 	add.w	r1, r7, #15
 80071e0:	2300      	movs	r3, #0
 80071e2:	2200      	movs	r2, #0
 80071e4:	f012 fe64 	bl	8019eb0 <xQueueGenericSend>
			break;
 80071e8:	e04d      	b.n	8007286 <control_mode_change+0x1ba>
				last_trig_time = HAL_GetTick();
 80071ea:	f006 fb85 	bl	800d8f8 <HAL_GetTick>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4a29      	ldr	r2, [pc, #164]	@ (8007298 <control_mode_change+0x1cc>)
 80071f2:	6013      	str	r3, [r2, #0]
			break;
 80071f4:	e047      	b.n	8007286 <control_mode_change+0x1ba>
			if (left_dial_input < -330) {
 80071f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071fa:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 80071fe:	da19      	bge.n	8007234 <control_mode_change+0x168>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8007200:	f006 fb7a 	bl	800d8f8 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	4b24      	ldr	r3, [pc, #144]	@ (8007298 <control_mode_change+0x1cc>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007210:	d93b      	bls.n	800728a <control_mode_change+0x1be>
					control_mode = REMOTE_CTRL_MODE;
 8007212:	4b22      	ldr	r3, [pc, #136]	@ (800729c <control_mode_change+0x1d0>)
 8007214:	2202      	movs	r2, #2
 8007216:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 8007218:	2304      	movs	r3, #4
 800721a:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 800721c:	4b21      	ldr	r3, [pc, #132]	@ (80072a4 <control_mode_change+0x1d8>)
 800721e:	2200      	movs	r2, #0
 8007220:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8007222:	4b1f      	ldr	r3, [pc, #124]	@ (80072a0 <control_mode_change+0x1d4>)
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	f107 010f 	add.w	r1, r7, #15
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	f012 fe3f 	bl	8019eb0 <xQueueGenericSend>
			break;
 8007232:	e02a      	b.n	800728a <control_mode_change+0x1be>
			} else if (left_dial_input > 330) {
 8007234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007238:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 800723c:	dd19      	ble.n	8007272 <control_mode_change+0x1a6>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800723e:	f006 fb5b 	bl	800d8f8 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	4b14      	ldr	r3, [pc, #80]	@ (8007298 <control_mode_change+0x1cc>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800724e:	d91c      	bls.n	800728a <control_mode_change+0x1be>
					control_mode = KEYBOARD_CTRL_MODE;
 8007250:	4b12      	ldr	r3, [pc, #72]	@ (800729c <control_mode_change+0x1d0>)
 8007252:	2201      	movs	r2, #1
 8007254:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8007256:	2303      	movs	r3, #3
 8007258:	73fb      	strb	r3, [r7, #15]
					launcher_safety_toggle = LAUNCHER_SAFETY;
 800725a:	4b12      	ldr	r3, [pc, #72]	@ (80072a4 <control_mode_change+0x1d8>)
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8007260:	4b0f      	ldr	r3, [pc, #60]	@ (80072a0 <control_mode_change+0x1d4>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	f107 010f 	add.w	r1, r7, #15
 8007268:	2300      	movs	r3, #0
 800726a:	2200      	movs	r2, #0
 800726c:	f012 fe20 	bl	8019eb0 <xQueueGenericSend>
			break;
 8007270:	e00b      	b.n	800728a <control_mode_change+0x1be>
				last_trig_time = HAL_GetTick();
 8007272:	f006 fb41 	bl	800d8f8 <HAL_GetTick>
 8007276:	4603      	mov	r3, r0
 8007278:	4a07      	ldr	r2, [pc, #28]	@ (8007298 <control_mode_change+0x1cc>)
 800727a:	6013      	str	r3, [r2, #0]
			break;
 800727c:	e005      	b.n	800728a <control_mode_change+0x1be>
			break;
 800727e:	bf00      	nop
 8007280:	e004      	b.n	800728c <control_mode_change+0x1c0>
			break;
 8007282:	bf00      	nop
 8007284:	e002      	b.n	800728c <control_mode_change+0x1c0>
			break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <control_mode_change+0x1c0>
			break;
 800728a:	bf00      	nop
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000838 	.word	0x20000838
 8007298:	20003918 	.word	0x20003918
 800729c:	20000030 	.word	0x20000030
 80072a0:	20003bbc 	.word	0x20003bbc
 80072a4:	20000032 	.word	0x20000032

080072a8 <gimbal_turn_ang>:

//ADDs angle to gimbal ctrl
void gimbal_turn_ang(float pit_radians, float yaw_radians) {
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80072b2:	edc7 0a00 	vstr	s1, [r7]
//		yaw_radians -= 2 * PI;
//	}
//	while (yaw_radians < -PI) {
//		yaw_radians += 2 * PI;
//	}
	float temp_yaw = gimbal_ctrl_data.yaw + yaw_radians;
 80072b6:	4b20      	ldr	r3, [pc, #128]	@ (8007338 <gimbal_turn_ang+0x90>)
 80072b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80072bc:	ed97 7a00 	vldr	s14, [r7]
 80072c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072c4:	edc7 7a03 	vstr	s15, [r7, #12]
	temp_yaw = (temp_yaw > PI) ? (temp_yaw - 2 * PI) : (temp_yaw < -PI) ? (temp_yaw + 2* PI) : temp_yaw;
 80072c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80072cc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800733c <gimbal_turn_ang+0x94>
 80072d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d8:	dd06      	ble.n	80072e8 <gimbal_turn_ang+0x40>
 80072da:	edd7 7a03 	vldr	s15, [r7, #12]
 80072de:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007340 <gimbal_turn_ang+0x98>
 80072e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072e6:	e011      	b.n	800730c <gimbal_turn_ang+0x64>
 80072e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80072ec:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8007344 <gimbal_turn_ang+0x9c>
 80072f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	d506      	bpl.n	8007308 <gimbal_turn_ang+0x60>
 80072fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80072fe:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8007340 <gimbal_turn_ang+0x98>
 8007302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007306:	e001      	b.n	800730c <gimbal_turn_ang+0x64>
 8007308:	edd7 7a03 	vldr	s15, [r7, #12]
 800730c:	edc7 7a03 	vstr	s15, [r7, #12]
	gimbal_ctrl_data.pitch += pit_radians;
 8007310:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <gimbal_turn_ang+0x90>)
 8007312:	ed93 7a00 	vldr	s14, [r3]
 8007316:	edd7 7a01 	vldr	s15, [r7, #4]
 800731a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800731e:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <gimbal_turn_ang+0x90>)
 8007320:	edc3 7a00 	vstr	s15, [r3]
	gimbal_ctrl_data.yaw = temp_yaw;
 8007324:	4a04      	ldr	r2, [pc, #16]	@ (8007338 <gimbal_turn_ang+0x90>)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6053      	str	r3, [r2, #4]
}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	200038c0 	.word	0x200038c0
 800733c:	40490fdb 	.word	0x40490fdb
 8007340:	40c90fdb 	.word	0x40c90fdb
 8007344:	c0490fdb 	.word	0xc0490fdb

08007348 <set_gear>:
	}
	gimbal_ctrl_data.pitch = pit_radians;
	gimbal_ctrl_data.yaw = yaw_radians;
}

void set_gear() {
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
	switch (gear_speed.curr_gear) {
 800734c:	4b34      	ldr	r3, [pc, #208]	@ (8007420 <set_gear+0xd8>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	3b01      	subs	r3, #1
 8007352:	2b05      	cmp	r3, #5
 8007354:	d852      	bhi.n	80073fc <set_gear+0xb4>
 8007356:	a201      	add	r2, pc, #4	@ (adr r2, 800735c <set_gear+0x14>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	08007375 	.word	0x08007375
 8007360:	0800738b 	.word	0x0800738b
 8007364:	080073a1 	.word	0x080073a1
 8007368:	080073bb 	.word	0x080073bb
 800736c:	080073cf 	.word	0x080073cf
 8007370:	080073e9 	.word	0x080073e9
	case 1:
		gear_speed.spin_mult = GEAR1_YAW_MULT;
 8007374:	4b2a      	ldr	r3, [pc, #168]	@ (8007420 <set_gear+0xd8>)
 8007376:	4a2b      	ldr	r2, [pc, #172]	@ (8007424 <set_gear+0xdc>)
 8007378:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR1_SPEED_MULT;
 800737a:	4b29      	ldr	r3, [pc, #164]	@ (8007420 <set_gear+0xd8>)
 800737c:	4a29      	ldr	r2, [pc, #164]	@ (8007424 <set_gear+0xdc>)
 800737e:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR1_ACCEL_MULT;
 8007380:	4b27      	ldr	r3, [pc, #156]	@ (8007420 <set_gear+0xd8>)
 8007382:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007386:	60da      	str	r2, [r3, #12]
		break;
 8007388:	e045      	b.n	8007416 <set_gear+0xce>
	case 2:
		gear_speed.spin_mult = GEAR2_YAW_MULT;
 800738a:	4b25      	ldr	r3, [pc, #148]	@ (8007420 <set_gear+0xd8>)
 800738c:	4a26      	ldr	r2, [pc, #152]	@ (8007428 <set_gear+0xe0>)
 800738e:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR2_SPEED_MULT;
 8007390:	4b23      	ldr	r3, [pc, #140]	@ (8007420 <set_gear+0xd8>)
 8007392:	4a25      	ldr	r2, [pc, #148]	@ (8007428 <set_gear+0xe0>)
 8007394:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR2_ACCEL_MULT;
 8007396:	4b22      	ldr	r3, [pc, #136]	@ (8007420 <set_gear+0xd8>)
 8007398:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800739c:	60da      	str	r2, [r3, #12]
		break;
 800739e:	e03a      	b.n	8007416 <set_gear+0xce>
	case 3:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 80073a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007420 <set_gear+0xd8>)
 80073a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80073a6:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 80073a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007420 <set_gear+0xd8>)
 80073aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80073ae:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 80073b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007420 <set_gear+0xd8>)
 80073b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80073b6:	60da      	str	r2, [r3, #12]
		break;
 80073b8:	e02d      	b.n	8007416 <set_gear+0xce>
	case 4:
		gear_speed.spin_mult = GEAR4_YAW_MULT;
 80073ba:	4b19      	ldr	r3, [pc, #100]	@ (8007420 <set_gear+0xd8>)
 80073bc:	4a1b      	ldr	r2, [pc, #108]	@ (800742c <set_gear+0xe4>)
 80073be:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR4_SPEED_MULT;
 80073c0:	4b17      	ldr	r3, [pc, #92]	@ (8007420 <set_gear+0xd8>)
 80073c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007430 <set_gear+0xe8>)
 80073c4:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR4_ACCEL_MULT;
 80073c6:	4b16      	ldr	r3, [pc, #88]	@ (8007420 <set_gear+0xd8>)
 80073c8:	4a18      	ldr	r2, [pc, #96]	@ (800742c <set_gear+0xe4>)
 80073ca:	60da      	str	r2, [r3, #12]
		break;
 80073cc:	e023      	b.n	8007416 <set_gear+0xce>
	case 5:
		gear_speed.spin_mult = GEAR5_YAW_MULT;
 80073ce:	4b14      	ldr	r3, [pc, #80]	@ (8007420 <set_gear+0xd8>)
 80073d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80073d4:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR5_SPEED_MULT;
 80073d6:	4b12      	ldr	r3, [pc, #72]	@ (8007420 <set_gear+0xd8>)
 80073d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80073dc:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR5_ACCEL_MULT;
 80073de:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <set_gear+0xd8>)
 80073e0:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80073e4:	60da      	str	r2, [r3, #12]
		break;
 80073e6:	e016      	b.n	8007416 <set_gear+0xce>
	case 6:
		gear_speed.spin_mult = GEAR6_YAW_MULT;
 80073e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <set_gear+0xd8>)
 80073ea:	4a12      	ldr	r2, [pc, #72]	@ (8007434 <set_gear+0xec>)
 80073ec:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR6_SPEED_MULT;
 80073ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <set_gear+0xd8>)
 80073f0:	4a11      	ldr	r2, [pc, #68]	@ (8007438 <set_gear+0xf0>)
 80073f2:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR6_ACCEL_MULT;
 80073f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <set_gear+0xd8>)
 80073f6:	4a11      	ldr	r2, [pc, #68]	@ (800743c <set_gear+0xf4>)
 80073f8:	60da      	str	r2, [r3, #12]
		break;
 80073fa:	e00c      	b.n	8007416 <set_gear+0xce>
	default:
		gear_speed.spin_mult = GEAR3_YAW_MULT;
 80073fc:	4b08      	ldr	r3, [pc, #32]	@ (8007420 <set_gear+0xd8>)
 80073fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007402:	605a      	str	r2, [r3, #4]
		gear_speed.trans_mult = GEAR3_SPEED_MULT;
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <set_gear+0xd8>)
 8007406:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800740a:	609a      	str	r2, [r3, #8]
		gear_speed.accel_mult = GEAR3_ACCEL_MULT;
 800740c:	4b04      	ldr	r3, [pc, #16]	@ (8007420 <set_gear+0xd8>)
 800740e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007412:	60da      	str	r2, [r3, #12]
		break;
 8007414:	bf00      	nop
	}

}
 8007416:	bf00      	nop
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	20003904 	.word	0x20003904
 8007424:	3e99999a 	.word	0x3e99999a
 8007428:	3f19999a 	.word	0x3f19999a
 800742c:	3f99999a 	.word	0x3f99999a
 8007430:	3fb33333 	.word	0x3fb33333
 8007434:	40400000 	.word	0x40400000
 8007438:	40a00000 	.word	0x40a00000
 800743c:	41200000 	.word	0x41200000

08007440 <chassis_yaw_pid_init>:

void chassis_yaw_pid_init() {
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
	yaw_pid_data.kp = CHASSIS_YAW_KP;
 8007444:	4b09      	ldr	r3, [pc, #36]	@ (800746c <chassis_yaw_pid_init+0x2c>)
 8007446:	4a0a      	ldr	r2, [pc, #40]	@ (8007470 <chassis_yaw_pid_init+0x30>)
 8007448:	601a      	str	r2, [r3, #0]
	yaw_pid_data.ki = CHASSIS_YAW_KI;
 800744a:	4b08      	ldr	r3, [pc, #32]	@ (800746c <chassis_yaw_pid_init+0x2c>)
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	605a      	str	r2, [r3, #4]
	yaw_pid_data.kd = CHASSIS_YAW_KD;
 8007452:	4b06      	ldr	r3, [pc, #24]	@ (800746c <chassis_yaw_pid_init+0x2c>)
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	609a      	str	r2, [r3, #8]
	yaw_pid_data.max_out = CHASSIS_YAW_MAX_RPM;
 800745a:	4b04      	ldr	r3, [pc, #16]	@ (800746c <chassis_yaw_pid_init+0x2c>)
 800745c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8007460:	61da      	str	r2, [r3, #28]
}
 8007462:	bf00      	nop
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	200038d4 	.word	0x200038d4
 8007470:	3f19999a 	.word	0x3f19999a

08007474 <keyboard_control_input>:
extern int g_spinspin_mode;
static float curr_spinspin = 0;



void keyboard_control_input() {
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
	mouse_gimbal_input();
 8007478:	f000 f908 	bl	800768c <mouse_gimbal_input>
	keyboard_chassis_input();
 800747c:	f000 f868 	bl	8007550 <keyboard_chassis_input>
	mouse_launcher_control_input();
 8007480:	f000 f97a 	bl	8007778 <mouse_launcher_control_input>
}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}

08007488 <keyboard_gear_shifter>:

void keyboard_gear_shifter(speed_shift_t *gear_speed) {
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	if ((g_remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 8007490:	4b2c      	ldr	r3, [pc, #176]	@ (8007544 <keyboard_gear_shifter+0xbc>)
 8007492:	8b5b      	ldrh	r3, [r3, #26]
 8007494:	f003 0310 	and.w	r3, r3, #16
 8007498:	2b00      	cmp	r3, #0
 800749a:	d013      	beq.n	80074c4 <keyboard_gear_shifter+0x3c>
			&& (g_remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 800749c:	4b29      	ldr	r3, [pc, #164]	@ (8007544 <keyboard_gear_shifter+0xbc>)
 800749e:	8b5b      	ldrh	r3, [r3, #26]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00d      	beq.n	80074c4 <keyboard_gear_shifter+0x3c>
		gear_speed->curr_gear = 3;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2203      	movs	r2, #3
 80074ac:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 80074ae:	f006 fa23 	bl	800d8f8 <HAL_GetTick>
 80074b2:	4603      	mov	r3, r0
 80074b4:	4a24      	ldr	r2, [pc, #144]	@ (8007548 <keyboard_gear_shifter+0xc0>)
 80074b6:	6013      	str	r3, [r2, #0]
		ctrl_press_time = HAL_GetTick();
 80074b8:	f006 fa1e 	bl	800d8f8 <HAL_GetTick>
 80074bc:	4603      	mov	r3, r0
 80074be:	4a23      	ldr	r2, [pc, #140]	@ (800754c <keyboard_gear_shifter+0xc4>)
 80074c0:	6013      	str	r3, [r2, #0]
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
		}
		ctrl_press_time = HAL_GetTick();
	}

}
 80074c2:	e03a      	b.n	800753a <keyboard_gear_shifter+0xb2>
	else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT) {
 80074c4:	4b1f      	ldr	r3, [pc, #124]	@ (8007544 <keyboard_gear_shifter+0xbc>)
 80074c6:	8b5b      	ldrh	r3, [r3, #26]
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <keyboard_gear_shifter+0x78>
		if (HAL_GetTick() - shift_press_time > 100) {
 80074d0:	f006 fa12 	bl	800d8f8 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	4b1c      	ldr	r3, [pc, #112]	@ (8007548 <keyboard_gear_shifter+0xc0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b64      	cmp	r3, #100	@ 0x64
 80074de:	d909      	bls.n	80074f4 <keyboard_gear_shifter+0x6c>
					(gear_speed->curr_gear < 5) ? gear_speed->curr_gear + 1 : 5;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	bf28      	it	cs
 80074e8:	2304      	movcs	r3, #4
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	3301      	adds	r3, #1
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	701a      	strb	r2, [r3, #0]
		shift_press_time = HAL_GetTick();
 80074f4:	f006 fa00 	bl	800d8f8 <HAL_GetTick>
 80074f8:	4603      	mov	r3, r0
 80074fa:	4a13      	ldr	r2, [pc, #76]	@ (8007548 <keyboard_gear_shifter+0xc0>)
 80074fc:	6013      	str	r3, [r2, #0]
}
 80074fe:	e01c      	b.n	800753a <keyboard_gear_shifter+0xb2>
	else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_CTRL) {
 8007500:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <keyboard_gear_shifter+0xbc>)
 8007502:	8b5b      	ldrh	r3, [r3, #26]
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d016      	beq.n	800753a <keyboard_gear_shifter+0xb2>
		if (HAL_GetTick() - ctrl_press_time > 100) {
 800750c:	f006 f9f4 	bl	800d8f8 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	4b0e      	ldr	r3, [pc, #56]	@ (800754c <keyboard_gear_shifter+0xc4>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b64      	cmp	r3, #100	@ 0x64
 800751a:	d909      	bls.n	8007530 <keyboard_gear_shifter+0xa8>
					(gear_speed->curr_gear > 1) ? gear_speed->curr_gear - 1 : 1;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	781b      	ldrb	r3, [r3, #0]
			gear_speed->curr_gear =
 8007520:	2b02      	cmp	r3, #2
 8007522:	bf38      	it	cc
 8007524:	2302      	movcc	r3, #2
 8007526:	b2db      	uxtb	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	701a      	strb	r2, [r3, #0]
		ctrl_press_time = HAL_GetTick();
 8007530:	f006 f9e2 	bl	800d8f8 <HAL_GetTick>
 8007534:	4603      	mov	r3, r0
 8007536:	4a05      	ldr	r2, [pc, #20]	@ (800754c <keyboard_gear_shifter+0xc4>)
 8007538:	6013      	str	r3, [r2, #0]
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000838 	.word	0x20000838
 8007548:	2000391c 	.word	0x2000391c
 800754c:	20003920 	.word	0x20003920

08007550 <keyboard_chassis_input>:

void keyboard_chassis_input() {
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch != ge_RSW_ALL_ON) {
 8007556:	4b49      	ldr	r3, [pc, #292]	@ (800767c <keyboard_chassis_input+0x12c>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d104      	bne.n	8007568 <keyboard_chassis_input+0x18>
 800755e:	4b48      	ldr	r3, [pc, #288]	@ (8007680 <keyboard_chassis_input+0x130>)
 8007560:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d00f      	beq.n	8007588 <keyboard_chassis_input+0x38>
		chassis_ctrl_data.enabled = 0;
 8007568:	4b46      	ldr	r3, [pc, #280]	@ (8007684 <keyboard_chassis_input+0x134>)
 800756a:	2200      	movs	r2, #0
 800756c:	751a      	strb	r2, [r3, #20]
		chassis_ctrl_data.horizontal = 0;
 800756e:	4b45      	ldr	r3, [pc, #276]	@ (8007684 <keyboard_chassis_input+0x134>)
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	605a      	str	r2, [r3, #4]
		chassis_ctrl_data.forward = 0;
 8007576:	4b43      	ldr	r3, [pc, #268]	@ (8007684 <keyboard_chassis_input+0x134>)
 8007578:	f04f 0200 	mov.w	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
		chassis_ctrl_data.yaw = 0;
 800757e:	4b41      	ldr	r3, [pc, #260]	@ (8007684 <keyboard_chassis_input+0x134>)
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	609a      	str	r2, [r3, #8]
			chassis_ctrl_data.horizontal = horizontal_input;
			chassis_ctrl_data.forward = forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 8007586:	e075      	b.n	8007674 <keyboard_chassis_input+0x124>
		if (g_remote_cmd.right_switch == ge_RSW_ALL_ON) {
 8007588:	4b3d      	ldr	r3, [pc, #244]	@ (8007680 <keyboard_chassis_input+0x130>)
 800758a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d170      	bne.n	8007674 <keyboard_chassis_input+0x124>
			chassis_ctrl_data.enabled = 1;
 8007592:	4b3c      	ldr	r3, [pc, #240]	@ (8007684 <keyboard_chassis_input+0x134>)
 8007594:	2201      	movs	r2, #1
 8007596:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
			float forward_input = 0.0;
 800759e:	f04f 0300 	mov.w	r3, #0
 80075a2:	60bb      	str	r3, [r7, #8]
			float yaw_input = 0.0;
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	607b      	str	r3, [r7, #4]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_Q) {
 80075aa:	4b35      	ldr	r3, [pc, #212]	@ (8007680 <keyboard_chassis_input+0x130>)
 80075ac:	8b5b      	ldrh	r3, [r3, #26]
 80075ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <keyboard_chassis_input+0x6e>
				g_spinspin_mode = 1;
 80075b6:	4b34      	ldr	r3, [pc, #208]	@ (8007688 <keyboard_chassis_input+0x138>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e008      	b.n	80075d0 <keyboard_chassis_input+0x80>
			} else if (g_remote_cmd.keyboard_keys & KEY_OFFSET_E) {
 80075be:	4b30      	ldr	r3, [pc, #192]	@ (8007680 <keyboard_chassis_input+0x130>)
 80075c0:	8b5b      	ldrh	r3, [r3, #26]
 80075c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <keyboard_chassis_input+0x80>
				g_spinspin_mode = 0;
 80075ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007688 <keyboard_chassis_input+0x138>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_W) {
 80075d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007680 <keyboard_chassis_input+0x130>)
 80075d2:	8b5b      	ldrh	r3, [r3, #26]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <keyboard_chassis_input+0x9c>
				forward_input += KEYBD_MAX_SPD;
 80075dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80075e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075e8:	edc7 7a02 	vstr	s15, [r7, #8]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_S) {
 80075ec:	4b24      	ldr	r3, [pc, #144]	@ (8007680 <keyboard_chassis_input+0x130>)
 80075ee:	8b5b      	ldrh	r3, [r3, #26]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <keyboard_chassis_input+0xb8>
				forward_input -= KEYBD_MAX_SPD;
 80075f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80075fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007604:	edc7 7a02 	vstr	s15, [r7, #8]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_A) {
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <keyboard_chassis_input+0x130>)
 800760a:	8b5b      	ldrh	r3, [r3, #26]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <keyboard_chassis_input+0xd4>
				horizontal_input -= KEYBD_MAX_SPD;
 8007614:	edd7 7a03 	vldr	s15, [r7, #12]
 8007618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800761c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007620:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_remote_cmd.keyboard_keys & KEY_OFFSET_D) {
 8007624:	4b16      	ldr	r3, [pc, #88]	@ (8007680 <keyboard_chassis_input+0x130>)
 8007626:	8b5b      	ldrh	r3, [r3, #26]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <keyboard_chassis_input+0xf0>
				horizontal_input += KEYBD_MAX_SPD;
 8007630:	edd7 7a03 	vldr	s15, [r7, #12]
 8007634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800763c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (g_spinspin_mode) {
 8007640:	4b11      	ldr	r3, [pc, #68]	@ (8007688 <keyboard_chassis_input+0x138>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <keyboard_chassis_input+0x10a>
				yaw_input = g_spinspin_mode * CHASSIS_SPINSPIN_MAX;
 8007648:	4b0f      	ldr	r3, [pc, #60]	@ (8007688 <keyboard_chassis_input+0x138>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007654:	edc7 7a01 	vstr	s15, [r7, #4]
 8007658:	e003      	b.n	8007662 <keyboard_chassis_input+0x112>
				yaw_input = chassis_center_yaw();
 800765a:	f7ff fcbd 	bl	8006fd8 <chassis_center_yaw>
 800765e:	ed87 0a01 	vstr	s0, [r7, #4]
			chassis_ctrl_data.horizontal = horizontal_input;
 8007662:	4a08      	ldr	r2, [pc, #32]	@ (8007684 <keyboard_chassis_input+0x134>)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6053      	str	r3, [r2, #4]
			chassis_ctrl_data.forward = forward_input;
 8007668:	4a06      	ldr	r2, [pc, #24]	@ (8007684 <keyboard_chassis_input+0x134>)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 800766e:	4a05      	ldr	r2, [pc, #20]	@ (8007684 <keyboard_chassis_input+0x134>)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6093      	str	r3, [r2, #8]
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000031 	.word	0x20000031
 8007680:	20000838 	.word	0x20000838
 8007684:	200038a0 	.word	0x200038a0
 8007688:	20003914 	.word	0x20003914

0800768c <mouse_gimbal_input>:

void mouse_gimbal_input() {
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8007692:	4b33      	ldr	r3, [pc, #204]	@ (8007760 <mouse_gimbal_input+0xd4>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <mouse_gimbal_input+0x18>
 800769a:	4b32      	ldr	r3, [pc, #200]	@ (8007764 <mouse_gimbal_input+0xd8>)
 800769c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d103      	bne.n	80076ac <mouse_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 80076a4:	4b30      	ldr	r3, [pc, #192]	@ (8007768 <mouse_gimbal_input+0xdc>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	735a      	strb	r2, [r3, #13]
 80076aa:	e055      	b.n	8007758 <mouse_gimbal_input+0xcc>
	} else {
		gimbal_ctrl_data.enabled = 1;
 80076ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007768 <mouse_gimbal_input+0xdc>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	735a      	strb	r2, [r3, #13]
//		float pitch_mouse = (float) g_remote_cmd.mouse_y * MOUSE_Y_INVERT
//				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
//		float yaw_mouse = (float) g_remote_cmd.mouse_x * MOUSE_X_INVERT
//				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;

		float pitch_mouse = (float) g_remote_cmd.mouse_vert * MOUSE_Y_INVERT
 80076b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007764 <mouse_gimbal_input+0xd8>)
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* PITCH_INVERT * MOUSE_Y_SENSITIVITY / 32768;
 80076be:	eef1 7a67 	vneg.f32	s15, s15
 80076c2:	ee17 3a90 	vmov	r3, s15
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7f8 ff3e 	bl	8000548 <__aeabi_f2d>
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	4b26      	ldr	r3, [pc, #152]	@ (800776c <mouse_gimbal_input+0xe0>)
 80076d2:	f7f8 ff91 	bl	80005f8 <__aeabi_dmul>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4610      	mov	r0, r2
 80076dc:	4619      	mov	r1, r3
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	4b23      	ldr	r3, [pc, #140]	@ (8007770 <mouse_gimbal_input+0xe4>)
 80076e4:	f7f9 f8b2 	bl	800084c <__aeabi_ddiv>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
		float pitch_mouse = (float) g_remote_cmd.mouse_vert * MOUSE_Y_INVERT
 80076ec:	4610      	mov	r0, r2
 80076ee:	4619      	mov	r1, r3
 80076f0:	f7f9 fa7a 	bl	8000be8 <__aeabi_d2f>
 80076f4:	4603      	mov	r3, r0
 80076f6:	607b      	str	r3, [r7, #4]
		float yaw_mouse = (float) g_remote_cmd.mouse_hori * MOUSE_X_INVERT
 80076f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007764 <mouse_gimbal_input+0xd8>)
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	ee07 3a90 	vmov	s15, r3
 8007700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				* YAW_INVERT * MOUSE_X_SENSITIVITY / 32768;
 8007704:	eef1 7a67 	vneg.f32	s15, s15
 8007708:	ee17 3a90 	vmov	r3, s15
 800770c:	4618      	mov	r0, r3
 800770e:	f7f8 ff1b 	bl	8000548 <__aeabi_f2d>
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	4b17      	ldr	r3, [pc, #92]	@ (8007774 <mouse_gimbal_input+0xe8>)
 8007718:	f7f8 ff6e 	bl	80005f8 <__aeabi_dmul>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4610      	mov	r0, r2
 8007722:	4619      	mov	r1, r3
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	4b11      	ldr	r3, [pc, #68]	@ (8007770 <mouse_gimbal_input+0xe4>)
 800772a:	f7f9 f88f 	bl	800084c <__aeabi_ddiv>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
		float yaw_mouse = (float) g_remote_cmd.mouse_hori * MOUSE_X_INVERT
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	f7f9 fa57 	bl	8000be8 <__aeabi_d2f>
 800773a:	4603      	mov	r3, r0
 800773c:	603b      	str	r3, [r7, #0]
		g_remote_cmd.mouse_vert = 0;
 800773e:	4b09      	ldr	r3, [pc, #36]	@ (8007764 <mouse_gimbal_input+0xd8>)
 8007740:	2200      	movs	r2, #0
 8007742:	615a      	str	r2, [r3, #20]
		g_remote_cmd.mouse_hori = 0;
 8007744:	4b07      	ldr	r3, [pc, #28]	@ (8007764 <mouse_gimbal_input+0xd8>)
 8007746:	2200      	movs	r2, #0
 8007748:	611a      	str	r2, [r3, #16]
		gimbal_turn_ang(pitch_mouse, yaw_mouse);
 800774a:	edd7 0a00 	vldr	s1, [r7]
 800774e:	ed97 0a01 	vldr	s0, [r7, #4]
 8007752:	f7ff fda9 	bl	80072a8 <gimbal_turn_ang>

	}
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000031 	.word	0x20000031
 8007764:	20000838 	.word	0x20000838
 8007768:	200038c0 	.word	0x200038c0
 800776c:	c0240000 	.word	0xc0240000
 8007770:	40e00000 	.word	0x40e00000
 8007774:	40240000 	.word	0x40240000

08007778 <mouse_launcher_control_input>:

void mouse_launcher_control_input() {
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
	if (g_safety_toggle || launcher_safety_toggle
 800777c:	4b28      	ldr	r3, [pc, #160]	@ (8007820 <mouse_launcher_control_input+0xa8>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10d      	bne.n	80077a0 <mouse_launcher_control_input+0x28>
 8007784:	4b27      	ldr	r3, [pc, #156]	@ (8007824 <mouse_launcher_control_input+0xac>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <mouse_launcher_control_input+0x28>
			|| g_remote_cmd.right_switch == ge_RSW_SHUTDOWN
 800778c:	4b26      	ldr	r3, [pc, #152]	@ (8007828 <mouse_launcher_control_input+0xb0>)
 800778e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d004      	beq.n	80077a0 <mouse_launcher_control_input+0x28>
			|| g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8007796:	4b24      	ldr	r3, [pc, #144]	@ (8007828 <mouse_launcher_control_input+0xb0>)
 8007798:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d016      	beq.n	80077ce <mouse_launcher_control_input+0x56>
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 80077a0:	4b21      	ldr	r3, [pc, #132]	@ (8007828 <mouse_launcher_control_input+0xb0>)
 80077a2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d102      	bne.n	80077b0 <mouse_launcher_control_input+0x38>
			launcher_ctrl_data.enabled = 0;
 80077aa:	4b20      	ldr	r3, [pc, #128]	@ (800782c <mouse_launcher_control_input+0xb4>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	715a      	strb	r2, [r3, #5]
		}
		launcher_ctrl_data.firing = 0;
 80077b0:	4b1e      	ldr	r3, [pc, #120]	@ (800782c <mouse_launcher_control_input+0xb4>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 80077b6:	4b1d      	ldr	r3, [pc, #116]	@ (800782c <mouse_launcher_control_input+0xb4>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 80077bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <mouse_launcher_control_input+0xb0>)
 80077be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d027      	beq.n	8007816 <mouse_launcher_control_input+0x9e>
			launcher_safety_toggle = 0;
 80077c6:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <mouse_launcher_control_input+0xac>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 80077cc:	e023      	b.n	8007816 <mouse_launcher_control_input+0x9e>
		}
	} else {
		launcher_ctrl_data.enabled = 1;
 80077ce:	4b17      	ldr	r3, [pc, #92]	@ (800782c <mouse_launcher_control_input+0xb4>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 80077d4:	4b15      	ldr	r3, [pc, #84]	@ (800782c <mouse_launcher_control_input+0xb4>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch == ge_LSW_UNSAFE) {
 80077da:	4b13      	ldr	r3, [pc, #76]	@ (8007828 <mouse_launcher_control_input+0xb0>)
 80077dc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d10b      	bne.n	80077fc <mouse_launcher_control_input+0x84>
			if (g_remote_cmd.mouse_right) {
 80077e4:	4b10      	ldr	r3, [pc, #64]	@ (8007828 <mouse_launcher_control_input+0xb0>)
 80077e6:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <mouse_launcher_control_input+0x7e>
				launcher_ctrl_data.override = 1;
 80077ee:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <mouse_launcher_control_input+0xb4>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	711a      	strb	r2, [r3, #4]
 80077f4:	e002      	b.n	80077fc <mouse_launcher_control_input+0x84>
			} else {
				launcher_ctrl_data.override = 0;
 80077f6:	4b0d      	ldr	r3, [pc, #52]	@ (800782c <mouse_launcher_control_input+0xb4>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	711a      	strb	r2, [r3, #4]
			}
		}
		if (g_remote_cmd.mouse_left) {
 80077fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <mouse_launcher_control_input+0xb0>)
 80077fe:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <mouse_launcher_control_input+0x96>
			launcher_ctrl_data.firing =1;
 8007806:	4b09      	ldr	r3, [pc, #36]	@ (800782c <mouse_launcher_control_input+0xb4>)
 8007808:	2201      	movs	r2, #1
 800780a:	805a      	strh	r2, [r3, #2]

		} else {
			launcher_ctrl_data.firing = 0;
		}
	}
}
 800780c:	e003      	b.n	8007816 <mouse_launcher_control_input+0x9e>
			launcher_ctrl_data.firing = 0;
 800780e:	4b07      	ldr	r3, [pc, #28]	@ (800782c <mouse_launcher_control_input+0xb4>)
 8007810:	2200      	movs	r2, #0
 8007812:	805a      	strh	r2, [r3, #2]
}
 8007814:	e7ff      	b.n	8007816 <mouse_launcher_control_input+0x9e>
 8007816:	bf00      	nop
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	20000031 	.word	0x20000031
 8007824:	20000032 	.word	0x20000032
 8007828:	20000838 	.word	0x20000838
 800782c:	200038b8 	.word	0x200038b8

08007830 <remote_control_input>:
extern gimbal_control_t gimbal_ctrl_data;
extern uint8_t g_safety_toggle;
extern uint8_t launcher_safety_toggle;


void remote_control_input() {
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
	remote_gimbal_input();
 8007834:	f000 f8f0 	bl	8007a18 <remote_gimbal_input>
	remote_chassis_input();
 8007838:	f000 f87e 	bl	8007938 <remote_chassis_input>
	remote_launcher_control_input();
 800783c:	f000 f958 	bl	8007af0 <remote_launcher_control_input>
}
 8007840:	bf00      	nop
 8007842:	bd80      	pop	{r7, pc}

08007844 <remote_gear_shifter>:
void remote_gear_shifter(speed_shift_t* gear_speed){
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	static uint32_t shift_press_time;
	static uint32_t ctrl_press_time;
	uint8_t temp_msg;
	if (g_remote_cmd.left_switch == ge_LSW_CONFIG) {
 800784c:	4b36      	ldr	r3, [pc, #216]	@ (8007928 <remote_gear_shifter+0xe4>)
 800784e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d164      	bne.n	8007920 <remote_gear_shifter+0xdc>
		if (g_remote_cmd.side_dial > 330) {
 8007856:	4b34      	ldr	r3, [pc, #208]	@ (8007928 <remote_gear_shifter+0xe4>)
 8007858:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800785c:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8007860:	dd2c      	ble.n	80078bc <remote_gear_shifter+0x78>
			if (HAL_GetTick() - shift_press_time > 100) {
 8007862:	f006 f849 	bl	800d8f8 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	4b30      	ldr	r3, [pc, #192]	@ (800792c <remote_gear_shifter+0xe8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b64      	cmp	r3, #100	@ 0x64
 8007870:	d91e      	bls.n	80078b0 <remote_gear_shifter+0x6c>
				gear_speed->curr_gear =
						(gear_speed->curr_gear < 6) ?
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 8007876:	2b05      	cmp	r3, #5
 8007878:	bf28      	it	cs
 800787a:	2305      	movcs	r3, #5
 800787c:	b2db      	uxtb	r3, r3
 800787e:	3301      	adds	r3, #1
 8007880:	b2da      	uxtb	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	701a      	strb	r2, [r3, #0]
								gear_speed->curr_gear + 1 : 6;
				temp_msg = bz_high;
 8007886:	2306      	movs	r3, #6
 8007888:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]
 800788e:	e00a      	b.n	80078a6 <remote_gear_shifter+0x62>
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 8007890:	4b27      	ldr	r3, [pc, #156]	@ (8007930 <remote_gear_shifter+0xec>)
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	f107 010d 	add.w	r1, r7, #13
 8007898:	2300      	movs	r3, #0
 800789a:	2200      	movs	r2, #0
 800789c:	f012 fb08 	bl	8019eb0 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	3301      	adds	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	7bfa      	ldrb	r2, [r7, #15]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d3ef      	bcc.n	8007890 <remote_gear_shifter+0x4c>
				}
			}
			shift_press_time = HAL_GetTick();
 80078b0:	f006 f822 	bl	800d8f8 <HAL_GetTick>
 80078b4:	4603      	mov	r3, r0
 80078b6:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <remote_gear_shifter+0xe8>)
 80078b8:	6013      	str	r3, [r2, #0]
				}
			}
			ctrl_press_time = HAL_GetTick();
		}
	}
}
 80078ba:	e031      	b.n	8007920 <remote_gear_shifter+0xdc>
		else if (g_remote_cmd.side_dial < -330) {
 80078bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007928 <remote_gear_shifter+0xe4>)
 80078be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80078c2:	f513 7fa5 	cmn.w	r3, #330	@ 0x14a
 80078c6:	da2b      	bge.n	8007920 <remote_gear_shifter+0xdc>
			if (HAL_GetTick() - ctrl_press_time > 100) {
 80078c8:	f006 f816 	bl	800d8f8 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	4b19      	ldr	r3, [pc, #100]	@ (8007934 <remote_gear_shifter+0xf0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b64      	cmp	r3, #100	@ 0x64
 80078d6:	d91e      	bls.n	8007916 <remote_gear_shifter+0xd2>
						(gear_speed->curr_gear > 1) ?
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	781b      	ldrb	r3, [r3, #0]
				gear_speed->curr_gear =
 80078dc:	2b02      	cmp	r3, #2
 80078de:	bf38      	it	cc
 80078e0:	2302      	movcc	r3, #2
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	701a      	strb	r2, [r3, #0]
				temp_msg = bz_low;
 80078ec:	2307      	movs	r3, #7
 80078ee:	737b      	strb	r3, [r7, #13]
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 80078f0:	2300      	movs	r3, #0
 80078f2:	73bb      	strb	r3, [r7, #14]
 80078f4:	e00a      	b.n	800790c <remote_gear_shifter+0xc8>
					xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 80078f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007930 <remote_gear_shifter+0xec>)
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f107 010d 	add.w	r1, r7, #13
 80078fe:	2300      	movs	r3, #0
 8007900:	2200      	movs	r2, #0
 8007902:	f012 fad5 	bl	8019eb0 <xQueueGenericSend>
				for (uint8_t i = 0; i < gear_speed->curr_gear; i++) {
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	3301      	adds	r3, #1
 800790a:	73bb      	strb	r3, [r7, #14]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	7bba      	ldrb	r2, [r7, #14]
 8007912:	429a      	cmp	r2, r3
 8007914:	d3ef      	bcc.n	80078f6 <remote_gear_shifter+0xb2>
			ctrl_press_time = HAL_GetTick();
 8007916:	f005 ffef 	bl	800d8f8 <HAL_GetTick>
 800791a:	4603      	mov	r3, r0
 800791c:	4a05      	ldr	r2, [pc, #20]	@ (8007934 <remote_gear_shifter+0xf0>)
 800791e:	6013      	str	r3, [r2, #0]
}
 8007920:	bf00      	nop
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20000838 	.word	0x20000838
 800792c:	20003924 	.word	0x20003924
 8007930:	20003bbc 	.word	0x20003bbc
 8007934:	20003928 	.word	0x20003928

08007938 <remote_chassis_input>:

void remote_chassis_input() {
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch != ge_RSW_ALL_ON) {
 800793e:	4b32      	ldr	r3, [pc, #200]	@ (8007a08 <remote_chassis_input+0xd0>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <remote_chassis_input+0x18>
 8007946:	4b31      	ldr	r3, [pc, #196]	@ (8007a0c <remote_chassis_input+0xd4>)
 8007948:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d002      	beq.n	8007956 <remote_chassis_input+0x1e>
//		chassis_ctrl_data.enabled = 0;
		chassis_kill_ctrl();
 8007950:	f7ff fb6e 	bl	8007030 <chassis_kill_ctrl>
 8007954:	e053      	b.n	80079fe <remote_chassis_input+0xc6>
	} else {
			chassis_ctrl_data.enabled = 1;
 8007956:	4b2e      	ldr	r3, [pc, #184]	@ (8007a10 <remote_chassis_input+0xd8>)
 8007958:	2201      	movs	r2, #1
 800795a:	751a      	strb	r2, [r3, #20]
			float horizontal_input = 0.0;
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]
			float forward_input = 0.0;
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	607b      	str	r3, [r7, #4]
			float yaw_input = 0.0;
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]

			forward_input = (float) g_remote_cmd.left_y / RC_LIMITS;
 800796e:	4b27      	ldr	r3, [pc, #156]	@ (8007a0c <remote_chassis_input+0xd4>)
 8007970:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800797c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8007a14 <remote_chassis_input+0xdc>
 8007980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007984:	edc7 7a01 	vstr	s15, [r7, #4]
			horizontal_input = (float) g_remote_cmd.left_x / RC_LIMITS;
 8007988:	4b20      	ldr	r3, [pc, #128]	@ (8007a0c <remote_chassis_input+0xd4>)
 800798a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007996:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8007a14 <remote_chassis_input+0xdc>
 800799a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800799e:	edc7 7a02 	vstr	s15, [r7, #8]

//			yaw_input = (float)g_remote_cmd.right_x * CHASSIS_SPINSPIN_MAX/660;
//			yaw_input = 0;
			if (g_remote_cmd.left_switch == ge_LSW_STANDBY){
 80079a2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a0c <remote_chassis_input+0xd4>)
 80079a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d11b      	bne.n	80079e4 <remote_chassis_input+0xac>
				if (abs(g_remote_cmd.side_dial) > 50 ){
 80079ac:	4b17      	ldr	r3, [pc, #92]	@ (8007a0c <remote_chassis_input+0xd4>)
 80079ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bfb8      	it	lt
 80079b6:	425b      	neglt	r3, r3
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b32      	cmp	r3, #50	@ 0x32
 80079bc:	d90d      	bls.n	80079da <remote_chassis_input+0xa2>
					yaw_input = (float) g_remote_cmd.side_dial / RC_LIMITS;
 80079be:	4b13      	ldr	r3, [pc, #76]	@ (8007a0c <remote_chassis_input+0xd4>)
 80079c0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079cc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8007a14 <remote_chassis_input+0xdc>
 80079d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079d4:	edc7 7a03 	vstr	s15, [r7, #12]
 80079d8:	e008      	b.n	80079ec <remote_chassis_input+0xb4>
				}
				else {
				yaw_input = chassis_center_yaw();
 80079da:	f7ff fafd 	bl	8006fd8 <chassis_center_yaw>
 80079de:	ed87 0a03 	vstr	s0, [r7, #12]
 80079e2:	e003      	b.n	80079ec <remote_chassis_input+0xb4>
				}
			}
			else {
			yaw_input = chassis_center_yaw();
 80079e4:	f7ff faf8 	bl	8006fd8 <chassis_center_yaw>
 80079e8:	ed87 0a03 	vstr	s0, [r7, #12]
			}
			//min value

//yaw_input = (float) remote_cmd.right_x * CHASSIS_YAW_MAX_RPM /RC_LIMITS;
			chassis_set_ctrl(forward_input, horizontal_input, yaw_input);
 80079ec:	ed97 1a03 	vldr	s2, [r7, #12]
 80079f0:	edd7 0a02 	vldr	s1, [r7, #8]
 80079f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80079f8:	f7ff faf8 	bl	8006fec <chassis_set_ctrl>
	}
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000031 	.word	0x20000031
 8007a0c:	20000838 	.word	0x20000838
 8007a10:	200038a0 	.word	0x200038a0
 8007a14:	44250000 	.word	0x44250000

08007a18 <remote_gimbal_input>:

void remote_gimbal_input() {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN) {
 8007a1e:	4b30      	ldr	r3, [pc, #192]	@ (8007ae0 <remote_gimbal_input+0xc8>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <remote_gimbal_input+0x18>
 8007a26:	4b2f      	ldr	r3, [pc, #188]	@ (8007ae4 <remote_gimbal_input+0xcc>)
 8007a28:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d103      	bne.n	8007a38 <remote_gimbal_input+0x20>
		gimbal_ctrl_data.enabled = 0;
 8007a30:	4b2d      	ldr	r3, [pc, #180]	@ (8007ae8 <remote_gimbal_input+0xd0>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	735a      	strb	r2, [r3, #13]
 8007a36:	e044      	b.n	8007ac2 <remote_gimbal_input+0xaa>
	} else {
		gimbal_ctrl_data.enabled = 1;
 8007a38:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae8 <remote_gimbal_input+0xd0>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	735a      	strb	r2, [r3, #13]
		float pitch_remote = ((float) g_remote_cmd.right_y / 660) * PITCH_INVERT
 8007a3e:	4b29      	ldr	r3, [pc, #164]	@ (8007ae4 <remote_gimbal_input+0xcc>)
 8007a40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007a44:	ee07 3a90 	vmov	s15, r3
 8007a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a4c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8007aec <remote_gimbal_input+0xd4>
 8007a50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007a54:	ee16 0a90 	vmov	r0, s13
 8007a58:	f7f8 fd76 	bl	8000548 <__aeabi_f2d>
				* REMOTE_PITCH_SPEED;
 8007a5c:	a31c      	add	r3, pc, #112	@ (adr r3, 8007ad0 <remote_gimbal_input+0xb8>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fdc9 	bl	80005f8 <__aeabi_dmul>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
		float pitch_remote = ((float) g_remote_cmd.right_y / 660) * PITCH_INVERT
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7f9 f8bb 	bl	8000be8 <__aeabi_d2f>
 8007a72:	4603      	mov	r3, r0
 8007a74:	607b      	str	r3, [r7, #4]
		float yaw_remote = ((float) g_remote_cmd.right_x / 660) * YAW_INVERT
 8007a76:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae4 <remote_gimbal_input+0xcc>)
 8007a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a7c:	ee07 3a90 	vmov	s15, r3
 8007a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a84:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8007aec <remote_gimbal_input+0xd4>
 8007a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a8c:	eef1 7a67 	vneg.f32	s15, s15
 8007a90:	ee17 3a90 	vmov	r3, s15
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f8 fd57 	bl	8000548 <__aeabi_f2d>
				* REMOTE_YAW_SPEED;
 8007a9a:	a30f      	add	r3, pc, #60	@ (adr r3, 8007ad8 <remote_gimbal_input+0xc0>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7f8 fdaa 	bl	80005f8 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
		float yaw_remote = ((float) g_remote_cmd.right_x / 660) * YAW_INVERT
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f7f9 f89c 	bl	8000be8 <__aeabi_d2f>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	603b      	str	r3, [r7, #0]
		gimbal_turn_ang(pitch_remote, yaw_remote);
 8007ab4:	edd7 0a00 	vldr	s1, [r7]
 8007ab8:	ed97 0a01 	vldr	s0, [r7, #4]
 8007abc:	f7ff fbf4 	bl	80072a8 <gimbal_turn_ang>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w
 8007ad0:	9999999a 	.word	0x9999999a
 8007ad4:	bfb99999 	.word	0xbfb99999
 8007ad8:	9999999a 	.word	0x9999999a
 8007adc:	3fb99999 	.word	0x3fb99999
 8007ae0:	20000031 	.word	0x20000031
 8007ae4:	20000838 	.word	0x20000838
 8007ae8:	200038c0 	.word	0x200038c0
 8007aec:	44250000 	.word	0x44250000

08007af0 <remote_launcher_control_input>:


void remote_launcher_control_input() {
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
	if (g_safety_toggle || g_remote_cmd.right_switch == ge_RSW_SHUTDOWN
 8007af4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <remote_launcher_control_input+0x7c>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d109      	bne.n	8007b10 <remote_launcher_control_input+0x20>
 8007afc:	4b1c      	ldr	r3, [pc, #112]	@ (8007b70 <remote_launcher_control_input+0x80>)
 8007afe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d004      	beq.n	8007b10 <remote_launcher_control_input+0x20>
			|| g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8007b06:	4b1a      	ldr	r3, [pc, #104]	@ (8007b70 <remote_launcher_control_input+0x80>)
 8007b08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d016      	beq.n	8007b3e <remote_launcher_control_input+0x4e>
		if (g_remote_cmd.left_switch != ge_LSW_UNSAFE) {
 8007b10:	4b17      	ldr	r3, [pc, #92]	@ (8007b70 <remote_launcher_control_input+0x80>)
 8007b12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d002      	beq.n	8007b20 <remote_launcher_control_input+0x30>
			launcher_safety_toggle = 0;
 8007b1a:	4b16      	ldr	r3, [pc, #88]	@ (8007b74 <remote_launcher_control_input+0x84>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
		}
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 8007b20:	4b13      	ldr	r3, [pc, #76]	@ (8007b70 <remote_launcher_control_input+0x80>)
 8007b22:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d102      	bne.n	8007b30 <remote_launcher_control_input+0x40>
							launcher_ctrl_data.enabled = 0;
 8007b2a:	4b13      	ldr	r3, [pc, #76]	@ (8007b78 <remote_launcher_control_input+0x88>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	715a      	strb	r2, [r3, #5]
				}
//		launcher_ctrl_data.enabled = 0;
		launcher_ctrl_data.firing = 0;
 8007b30:	4b11      	ldr	r3, [pc, #68]	@ (8007b78 <remote_launcher_control_input+0x88>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	805a      	strh	r2, [r3, #2]
		launcher_ctrl_data.projectile_speed = 0;
 8007b36:	4b10      	ldr	r3, [pc, #64]	@ (8007b78 <remote_launcher_control_input+0x88>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	801a      	strh	r2, [r3, #0]
		} else {
			launcher_ctrl_data.firing = 0;
		}
	}

}
 8007b3c:	e011      	b.n	8007b62 <remote_launcher_control_input+0x72>
		launcher_ctrl_data.enabled = 1;
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b78 <remote_launcher_control_input+0x88>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	715a      	strb	r2, [r3, #5]
		launcher_ctrl_data.projectile_speed = 1;
 8007b44:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <remote_launcher_control_input+0x88>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	801a      	strh	r2, [r3, #0]
		if (g_remote_cmd.left_switch == ge_LSW_UNSAFE) {
 8007b4a:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <remote_launcher_control_input+0x80>)
 8007b4c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d103      	bne.n	8007b5c <remote_launcher_control_input+0x6c>
			launcher_ctrl_data.firing = 1;
 8007b54:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <remote_launcher_control_input+0x88>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	805a      	strh	r2, [r3, #2]
}
 8007b5a:	e002      	b.n	8007b62 <remote_launcher_control_input+0x72>
			launcher_ctrl_data.firing = 0;
 8007b5c:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <remote_launcher_control_input+0x88>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	805a      	strh	r2, [r3, #2]
}
 8007b62:	bf00      	nop
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20000031 	.word	0x20000031
 8007b70:	20000838 	.word	0x20000838
 8007b74:	20000032 	.word	0x20000032
 8007b78:	200038b8 	.word	0x200038b8

08007b7c <aimbot_pid_init>:
		sbc_new_data = 0;
		control_reset();
	}
}

void aimbot_pid_init() {
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
	aimbot_offset.y_offset = 0;
 8007b80:	4b1a      	ldr	r3, [pc, #104]	@ (8007bec <aimbot_pid_init+0x70>)
 8007b82:	f04f 0200 	mov.w	r2, #0
 8007b86:	605a      	str	r2, [r3, #4]
	aimbot_offset.x_offset = 0;
 8007b88:	4b18      	ldr	r3, [pc, #96]	@ (8007bec <aimbot_pid_init+0x70>)
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.kp = AIMBOT_X_KP;
 8007b90:	4b17      	ldr	r3, [pc, #92]	@ (8007bf0 <aimbot_pid_init+0x74>)
 8007b92:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007b96:	601a      	str	r2, [r3, #0]
	aimbot_x_pid.ki = AIMBOT_X_KI;
 8007b98:	4b15      	ldr	r3, [pc, #84]	@ (8007bf0 <aimbot_pid_init+0x74>)
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	605a      	str	r2, [r3, #4]
	aimbot_x_pid.kd = AIMBOT_X_KD;
 8007ba0:	4b13      	ldr	r3, [pc, #76]	@ (8007bf0 <aimbot_pid_init+0x74>)
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	609a      	str	r2, [r3, #8]
	aimbot_x_pid.max_out = 1.5;
 8007ba8:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <aimbot_pid_init+0x74>)
 8007baa:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8007bae:	61da      	str	r2, [r3, #28]
	aimbot_x_pid.int_max = AIMBOT_KI_MAX;
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf0 <aimbot_pid_init+0x74>)
 8007bb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007bb6:	619a      	str	r2, [r3, #24]

	aimbot_y_pid.kp = AIMBOT_Y_KP;
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <aimbot_pid_init+0x78>)
 8007bba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007bbe:	601a      	str	r2, [r3, #0]
	aimbot_y_pid.ki = AIMBOT_Y_KI;
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <aimbot_pid_init+0x78>)
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	605a      	str	r2, [r3, #4]
	aimbot_y_pid.kd = AIMBOT_Y_KD;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf4 <aimbot_pid_init+0x78>)
 8007bca:	f04f 0200 	mov.w	r2, #0
 8007bce:	609a      	str	r2, [r3, #8]
	aimbot_y_pid.max_out = 1.5;
 8007bd0:	4b08      	ldr	r3, [pc, #32]	@ (8007bf4 <aimbot_pid_init+0x78>)
 8007bd2:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8007bd6:	61da      	str	r2, [r3, #28]
	aimbot_y_pid.int_max = AIMBOT_KI_MAX;
 8007bd8:	4b06      	ldr	r3, [pc, #24]	@ (8007bf4 <aimbot_pid_init+0x78>)
 8007bda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007bde:	619a      	str	r2, [r3, #24]
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	2000398c 	.word	0x2000398c
 8007bf0:	2000395c 	.word	0x2000395c
 8007bf4:	2000392c 	.word	0x2000392c

08007bf8 <hud_task>:
ref_inter_robot_data_t graphic_header;
graphic_data_struct_t graphic_data;
ref_frame_header_t send_header;
uint8_t char_buffer[30];

void hud_task(void *argument) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]

	enum drawings {
		spinspin, gearing, robot_state, motor_fault, refresh

	};
	while (ref_robot_data.robot_id == 0) {
 8007c00:	e002      	b.n	8007c08 <hud_task+0x10>
		vTaskDelay(10);
 8007c02:	200a      	movs	r0, #10
 8007c04:	f013 f83e 	bl	801ac84 <vTaskDelay>
	while (ref_robot_data.robot_id == 0) {
 8007c08:	4b69      	ldr	r3, [pc, #420]	@ (8007db0 <hud_task+0x1b8>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0f8      	beq.n	8007c02 <hud_task+0xa>
	}
	uint32_t refresh_timer = HAL_GetTick();
 8007c10:	f005 fe72 	bl	800d8f8 <HAL_GetTick>
 8007c14:	60f8      	str	r0, [r7, #12]

	uint8_t draw_state = spinspin;
 8007c16:	2300      	movs	r3, #0
 8007c18:	72fb      	strb	r3, [r7, #11]
	//draw all images
	vTaskDelay(1000);
 8007c1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c1e:	f013 f831 	bl	801ac84 <vTaskDelay>
	clear_hud();
 8007c22:	f000 fb29 	bl	8008278 <clear_hud>
	vTaskDelay(150);
 8007c26:	2096      	movs	r0, #150	@ 0x96
 8007c28:	f013 f82c 	bl	801ac84 <vTaskDelay>
	draw_spinspin(0);
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f000 f8c3 	bl	8007db8 <draw_spinspin>
	vTaskDelay(150);
 8007c32:	2096      	movs	r0, #150	@ 0x96
 8007c34:	f013 f826 	bl	801ac84 <vTaskDelay>
	draw_gearing(0);
 8007c38:	2000      	movs	r0, #0
 8007c3a:	f000 f9f5 	bl	8008028 <draw_gearing>
	vTaskDelay(150);
 8007c3e:	2096      	movs	r0, #150	@ 0x96
 8007c40:	f013 f820 	bl	801ac84 <vTaskDelay>
	while (1) {
		if (HAL_GetTick() - refresh_timer > 5000){
 8007c44:	f005 fe58 	bl	800d8f8 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d904      	bls.n	8007c60 <hud_task+0x68>
			draw_state = refresh;
 8007c56:	2304      	movs	r3, #4
 8007c58:	72fb      	strb	r3, [r7, #11]
			refresh_timer = HAL_GetTick();
 8007c5a:	f005 fe4d 	bl	800d8f8 <HAL_GetTick>
 8007c5e:	60f8      	str	r0, [r7, #12]
		}
		switch (ref_robot_data.robot_id) {
 8007c60:	4b53      	ldr	r3, [pc, #332]	@ (8007db0 <hud_task+0x1b8>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b06      	cmp	r3, #6
 8007c66:	dc27      	bgt.n	8007cb8 <hud_task+0xc0>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc13      	bgt.n	8007c94 <hud_task+0x9c>
 8007c6c:	e065      	b.n	8007d3a <hud_task+0x142>
 8007c6e:	3b65      	subs	r3, #101	@ 0x65
 8007c70:	2b05      	cmp	r3, #5
 8007c72:	d862      	bhi.n	8007d3a <hud_task+0x142>
 8007c74:	a201      	add	r2, pc, #4	@ (adr r2, 8007c7c <hud_task+0x84>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007cff 	.word	0x08007cff
 8007c80:	08007d09 	.word	0x08007d09
 8007c84:	08007d13 	.word	0x08007d13
 8007c88:	08007d1d 	.word	0x08007d1d
 8007c8c:	08007d27 	.word	0x08007d27
 8007c90:	08007d31 	.word	0x08007d31
 8007c94:	3b01      	subs	r3, #1
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	d84f      	bhi.n	8007d3a <hud_task+0x142>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <hud_task+0xa8>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cc3 	.word	0x08007cc3
 8007ca4:	08007ccd 	.word	0x08007ccd
 8007ca8:	08007cd7 	.word	0x08007cd7
 8007cac:	08007ce1 	.word	0x08007ce1
 8007cb0:	08007ceb 	.word	0x08007ceb
 8007cb4:	08007cf5 	.word	0x08007cf5
 8007cb8:	2b6a      	cmp	r3, #106	@ 0x6a
 8007cba:	dc3e      	bgt.n	8007d3a <hud_task+0x142>
 8007cbc:	2b65      	cmp	r3, #101	@ 0x65
 8007cbe:	dad6      	bge.n	8007c6e <hud_task+0x76>
 8007cc0:	e03b      	b.n	8007d3a <hud_task+0x142>
		case 1:
			g_client_id = 0x101;
 8007cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8007db4 <hud_task+0x1bc>)
 8007cc4:	f240 1201 	movw	r2, #257	@ 0x101
 8007cc8:	801a      	strh	r2, [r3, #0]
			break;
 8007cca:	e03a      	b.n	8007d42 <hud_task+0x14a>
		case 2:
			g_client_id = 0x102;
 8007ccc:	4b39      	ldr	r3, [pc, #228]	@ (8007db4 <hud_task+0x1bc>)
 8007cce:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007cd2:	801a      	strh	r2, [r3, #0]
			break;
 8007cd4:	e035      	b.n	8007d42 <hud_task+0x14a>
		case 3:
			g_client_id = 0x103;
 8007cd6:	4b37      	ldr	r3, [pc, #220]	@ (8007db4 <hud_task+0x1bc>)
 8007cd8:	f240 1203 	movw	r2, #259	@ 0x103
 8007cdc:	801a      	strh	r2, [r3, #0]
			break;
 8007cde:	e030      	b.n	8007d42 <hud_task+0x14a>
		case 4:
			g_client_id = 0x104;
 8007ce0:	4b34      	ldr	r3, [pc, #208]	@ (8007db4 <hud_task+0x1bc>)
 8007ce2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007ce6:	801a      	strh	r2, [r3, #0]
			break;
 8007ce8:	e02b      	b.n	8007d42 <hud_task+0x14a>
		case 5:
			g_client_id = 0x105;
 8007cea:	4b32      	ldr	r3, [pc, #200]	@ (8007db4 <hud_task+0x1bc>)
 8007cec:	f240 1205 	movw	r2, #261	@ 0x105
 8007cf0:	801a      	strh	r2, [r3, #0]
			break;
 8007cf2:	e026      	b.n	8007d42 <hud_task+0x14a>
		case 6:
			g_client_id = 0x106;
 8007cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8007db4 <hud_task+0x1bc>)
 8007cf6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8007cfa:	801a      	strh	r2, [r3, #0]
			break;
 8007cfc:	e021      	b.n	8007d42 <hud_task+0x14a>

		case 101:
			g_client_id = 0x165;
 8007cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8007db4 <hud_task+0x1bc>)
 8007d00:	f240 1265 	movw	r2, #357	@ 0x165
 8007d04:	801a      	strh	r2, [r3, #0]
			break;
 8007d06:	e01c      	b.n	8007d42 <hud_task+0x14a>
		case 102:
			g_client_id = 0x166;
 8007d08:	4b2a      	ldr	r3, [pc, #168]	@ (8007db4 <hud_task+0x1bc>)
 8007d0a:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8007d0e:	801a      	strh	r2, [r3, #0]
			break;
 8007d10:	e017      	b.n	8007d42 <hud_task+0x14a>
		case 103:
			g_client_id = 0x167;
 8007d12:	4b28      	ldr	r3, [pc, #160]	@ (8007db4 <hud_task+0x1bc>)
 8007d14:	f240 1267 	movw	r2, #359	@ 0x167
 8007d18:	801a      	strh	r2, [r3, #0]
			break;
 8007d1a:	e012      	b.n	8007d42 <hud_task+0x14a>
		case 104:
			g_client_id = 0x168;
 8007d1c:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <hud_task+0x1bc>)
 8007d1e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007d22:	801a      	strh	r2, [r3, #0]
			break;
 8007d24:	e00d      	b.n	8007d42 <hud_task+0x14a>
		case 105:
			g_client_id = 0x169;
 8007d26:	4b23      	ldr	r3, [pc, #140]	@ (8007db4 <hud_task+0x1bc>)
 8007d28:	f240 1269 	movw	r2, #361	@ 0x169
 8007d2c:	801a      	strh	r2, [r3, #0]
			break;
 8007d2e:	e008      	b.n	8007d42 <hud_task+0x14a>
		case 106:
			g_client_id = 0x16A;
 8007d30:	4b20      	ldr	r3, [pc, #128]	@ (8007db4 <hud_task+0x1bc>)
 8007d32:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8007d36:	801a      	strh	r2, [r3, #0]
			break;
 8007d38:	e003      	b.n	8007d42 <hud_task+0x14a>
		default:
			g_client_id = 0;
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8007db4 <hud_task+0x1bc>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	801a      	strh	r2, [r3, #0]
			break;
 8007d40:	bf00      	nop

		}



		switch (draw_state) {
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d82d      	bhi.n	8007da4 <hud_task+0x1ac>
 8007d48:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <hud_task+0x158>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d65 	.word	0x08007d65
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007da5 	.word	0x08007da5
 8007d5c:	08007da5 	.word	0x08007da5
 8007d60:	08007d7d 	.word	0x08007d7d
		case spinspin:
			draw_spinspin(1);
 8007d64:	2001      	movs	r0, #1
 8007d66:	f000 f827 	bl	8007db8 <draw_spinspin>
			draw_state = gearing;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	72fb      	strb	r3, [r7, #11]
			break;
 8007d6e:	e01a      	b.n	8007da6 <hud_task+0x1ae>
		case gearing:
			draw_gearing(1);
 8007d70:	2001      	movs	r0, #1
 8007d72:	f000 f959 	bl	8008028 <draw_gearing>
			draw_state = spinspin;
 8007d76:	2300      	movs	r3, #0
 8007d78:	72fb      	strb	r3, [r7, #11]
			break;
 8007d7a:	e014      	b.n	8007da6 <hud_task+0x1ae>
		case robot_state:
			break;
		case motor_fault:
			break;
		case refresh:
			clear_hud();
 8007d7c:	f000 fa7c 	bl	8008278 <clear_hud>
			vTaskDelay(150);
 8007d80:	2096      	movs	r0, #150	@ 0x96
 8007d82:	f012 ff7f 	bl	801ac84 <vTaskDelay>
			draw_spinspin(0);
 8007d86:	2000      	movs	r0, #0
 8007d88:	f000 f816 	bl	8007db8 <draw_spinspin>
			vTaskDelay(150);
 8007d8c:	2096      	movs	r0, #150	@ 0x96
 8007d8e:	f012 ff79 	bl	801ac84 <vTaskDelay>
			draw_gearing(0);
 8007d92:	2000      	movs	r0, #0
 8007d94:	f000 f948 	bl	8008028 <draw_gearing>
			vTaskDelay(150);
 8007d98:	2096      	movs	r0, #150	@ 0x96
 8007d9a:	f012 ff73 	bl	801ac84 <vTaskDelay>
			draw_state = spinspin;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	72fb      	strb	r3, [r7, #11]
			break;
 8007da2:	e000      	b.n	8007da6 <hud_task+0x1ae>
		default:
			break;
 8007da4:	bf00      	nop
		}
		vTaskDelay(150);
 8007da6:	2096      	movs	r0, #150	@ 0x96
 8007da8:	f012 ff6c 	bl	801ac84 <vTaskDelay>
		if (HAL_GetTick() - refresh_timer > 5000){
 8007dac:	e74a      	b.n	8007c44 <hud_task+0x4c>
 8007dae:	bf00      	nop
 8007db0:	20003c48 	.word	0x20003c48
 8007db4:	20003994 	.word	0x20003994

08007db8 <draw_spinspin>:
//	else if (&buffer_size > HUD_BUFFER_SIZE){
//		return num_obj;
//	}
}

void draw_spinspin(uint8_t modify) {
 8007db8:	b590      	push	{r4, r7, lr}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60bb      	str	r3, [r7, #8]
	uint8_t char_len = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]
	curr_pos = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60bb      	str	r3, [r7, #8]
	if (g_spinspin_mode == 0) {
 8007dce:	4b8a      	ldr	r3, [pc, #552]	@ (8007ff8 <draw_spinspin+0x240>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10d      	bne.n	8007df2 <draw_spinspin+0x3a>
		graphic_data.color = 4; //orange
 8007dd6:	4a89      	ldr	r2, [pc, #548]	@ (8007ffc <draw_spinspin+0x244>)
 8007dd8:	7913      	ldrb	r3, [r2, #4]
 8007dda:	2104      	movs	r1, #4
 8007ddc:	f361 0385 	bfi	r3, r1, #2, #4
 8007de0:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN OFF");
 8007de2:	4a87      	ldr	r2, [pc, #540]	@ (8008000 <draw_spinspin+0x248>)
 8007de4:	211e      	movs	r1, #30
 8007de6:	4887      	ldr	r0, [pc, #540]	@ (8008004 <draw_spinspin+0x24c>)
 8007de8:	f015 fc1c 	bl	801d624 <snprintf>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
 8007df0:	e00c      	b.n	8007e0c <draw_spinspin+0x54>
	} else {
		graphic_data.color = 3; //orange
 8007df2:	4a82      	ldr	r2, [pc, #520]	@ (8007ffc <draw_spinspin+0x244>)
 8007df4:	7913      	ldrb	r3, [r2, #4]
 8007df6:	2103      	movs	r1, #3
 8007df8:	f361 0385 	bfi	r3, r1, #2, #4
 8007dfc:	7113      	strb	r3, [r2, #4]
		char_len = snprintf((char*) char_buffer, 30, "SPIN ON");
 8007dfe:	4a82      	ldr	r2, [pc, #520]	@ (8008008 <draw_spinspin+0x250>)
 8007e00:	211e      	movs	r1, #30
 8007e02:	4880      	ldr	r0, [pc, #512]	@ (8008004 <draw_spinspin+0x24c>)
 8007e04:	f015 fc0e 	bl	801d624 <snprintf>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
	}
	send_header.start_frame = 0xA5;
 8007e0c:	4b7f      	ldr	r3, [pc, #508]	@ (800800c <draw_spinspin+0x254>)
 8007e0e:	22a5      	movs	r2, #165	@ 0xa5
 8007e10:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8007e12:	4b7e      	ldr	r3, [pc, #504]	@ (800800c <draw_spinspin+0x254>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	715a      	strb	r2, [r3, #5]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f042 0203 	orr.w	r2, r2, #3
 8007e22:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8007e24:	4b7a      	ldr	r3, [pc, #488]	@ (8008010 <draw_spinspin+0x258>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	b2d1      	uxtb	r1, r2
 8007e2c:	4a78      	ldr	r2, [pc, #480]	@ (8008010 <draw_spinspin+0x258>)
 8007e2e:	7011      	strb	r1, [r2, #0]
 8007e30:	4a76      	ldr	r2, [pc, #472]	@ (800800c <draw_spinspin+0x254>)
 8007e32:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3315      	adds	r3, #21
 8007e3a:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 8007e3c:	4b73      	ldr	r3, [pc, #460]	@ (800800c <draw_spinspin+0x254>)
 8007e3e:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8007e42:	4b73      	ldr	r3, [pc, #460]	@ (8008010 <draw_spinspin+0x258>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	b2d1      	uxtb	r1, r2
 8007e4a:	4a71      	ldr	r2, [pc, #452]	@ (8008010 <draw_spinspin+0x258>)
 8007e4c:	7011      	strb	r1, [r2, #0]
 8007e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800800c <draw_spinspin+0x254>)
 8007e50:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4a6f      	ldr	r2, [pc, #444]	@ (8008014 <draw_spinspin+0x25c>)
 8007e56:	4413      	add	r3, r2
 8007e58:	4a6c      	ldr	r2, [pc, #432]	@ (800800c <draw_spinspin+0x254>)
 8007e5a:	6810      	ldr	r0, [r2, #0]
 8007e5c:	6018      	str	r0, [r3, #0]
 8007e5e:	8891      	ldrh	r1, [r2, #4]
 8007e60:	7992      	ldrb	r2, [r2, #6]
 8007e62:	8099      	strh	r1, [r3, #4]
 8007e64:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	3307      	adds	r3, #7
 8007e6a:	60bb      	str	r3, [r7, #8]
	append_CRC8_check_sum(tx_buffer, 5);
 8007e6c:	2105      	movs	r1, #5
 8007e6e:	4869      	ldr	r0, [pc, #420]	@ (8008014 <draw_spinspin+0x25c>)
 8007e70:	f7f9 f8cb 	bl	800100a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 8007e74:	4b68      	ldr	r3, [pc, #416]	@ (8008018 <draw_spinspin+0x260>)
 8007e76:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8007e7a:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 8007e7c:	4b67      	ldr	r3, [pc, #412]	@ (800801c <draw_spinspin+0x264>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b65      	ldr	r3, [pc, #404]	@ (8008018 <draw_spinspin+0x260>)
 8007e84:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 8007e86:	4b66      	ldr	r3, [pc, #408]	@ (8008020 <draw_spinspin+0x268>)
 8007e88:	881a      	ldrh	r2, [r3, #0]
 8007e8a:	4b63      	ldr	r3, [pc, #396]	@ (8008018 <draw_spinspin+0x260>)
 8007e8c:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	4a60      	ldr	r2, [pc, #384]	@ (8008014 <draw_spinspin+0x25c>)
 8007e92:	4413      	add	r3, r2
 8007e94:	4a60      	ldr	r2, [pc, #384]	@ (8008018 <draw_spinspin+0x260>)
 8007e96:	6810      	ldr	r0, [r2, #0]
 8007e98:	6018      	str	r0, [r3, #0]
 8007e9a:	8892      	ldrh	r2, [r2, #4]
 8007e9c:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	3306      	adds	r3, #6
 8007ea2:	60bb      	str	r3, [r7, #8]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 8007ea4:	4b55      	ldr	r3, [pc, #340]	@ (8007ffc <draw_spinspin+0x244>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 8007eaa:	4b54      	ldr	r3, [pc, #336]	@ (8007ffc <draw_spinspin+0x244>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 1;
 8007eb0:	4b52      	ldr	r3, [pc, #328]	@ (8007ffc <draw_spinspin+0x244>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 8007eb6:	4b51      	ldr	r3, [pc, #324]	@ (8007ffc <draw_spinspin+0x244>)
 8007eb8:	78da      	ldrb	r2, [r3, #3]
 8007eba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007ebe:	70da      	strb	r2, [r3, #3]
 8007ec0:	791a      	ldrb	r2, [r3, #4]
 8007ec2:	f022 0203 	bic.w	r2, r2, #3
 8007ec6:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d106      	bne.n	8007edc <draw_spinspin+0x124>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007ece:	4a4b      	ldr	r2, [pc, #300]	@ (8007ffc <draw_spinspin+0x244>)
 8007ed0:	78d3      	ldrb	r3, [r2, #3]
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	f361 0302 	bfi	r3, r1, #0, #3
 8007ed8:	70d3      	strb	r3, [r2, #3]
 8007eda:	e005      	b.n	8007ee8 <draw_spinspin+0x130>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 8007edc:	4a47      	ldr	r2, [pc, #284]	@ (8007ffc <draw_spinspin+0x244>)
 8007ede:	78d3      	ldrb	r3, [r2, #3]
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	f361 0302 	bfi	r3, r1, #0, #3
 8007ee6:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8007ee8:	4a44      	ldr	r2, [pc, #272]	@ (8007ffc <draw_spinspin+0x244>)
 8007eea:	78d3      	ldrb	r3, [r2, #3]
 8007eec:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8007ef0:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8007ef2:	4b42      	ldr	r3, [pc, #264]	@ (8007ffc <draw_spinspin+0x244>)
 8007ef4:	791a      	ldrb	r2, [r3, #4]
 8007ef6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007efa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007efe:	711a      	strb	r2, [r3, #4]
 8007f00:	795a      	ldrb	r2, [r3, #5]
 8007f02:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007f06:	f042 0207 	orr.w	r2, r2, #7
 8007f0a:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	4b39      	ldr	r3, [pc, #228]	@ (8007ffc <draw_spinspin+0x244>)
 8007f16:	f002 0101 	and.w	r1, r2, #1
 8007f1a:	01cc      	lsls	r4, r1, #7
 8007f1c:	7959      	ldrb	r1, [r3, #5]
 8007f1e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8007f22:	4608      	mov	r0, r1
 8007f24:	4621      	mov	r1, r4
 8007f26:	4301      	orrs	r1, r0
 8007f28:	7159      	strb	r1, [r3, #5]
 8007f2a:	0852      	lsrs	r2, r2, #1
 8007f2c:	b292      	uxth	r2, r2
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	2100      	movs	r1, #0
 8007f32:	430a      	orrs	r2, r1
 8007f34:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 8007f36:	4b31      	ldr	r3, [pc, #196]	@ (8007ffc <draw_spinspin+0x244>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f042 0207 	orr.w	r2, r2, #7
 8007f3e:	71da      	strb	r2, [r3, #7]
 8007f40:	7a1a      	ldrb	r2, [r3, #8]
 8007f42:	f022 0203 	bic.w	r2, r2, #3
 8007f46:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8007f48:	4b2c      	ldr	r3, [pc, #176]	@ (8007ffc <draw_spinspin+0x244>)
 8007f4a:	78da      	ldrb	r2, [r3, #3]
 8007f4c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f50:	70da      	strb	r2, [r3, #3]
 8007f52:	791a      	ldrb	r2, [r3, #4]
 8007f54:	f022 0203 	bic.w	r2, r2, #3
 8007f58:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 8007f5a:	4b28      	ldr	r3, [pc, #160]	@ (8007ffc <draw_spinspin+0x244>)
 8007f5c:	7a1a      	ldrb	r2, [r3, #8]
 8007f5e:	f002 0203 	and.w	r2, r2, #3
 8007f62:	f062 0237 	orn	r2, r2, #55	@ 0x37
 8007f66:	721a      	strb	r2, [r3, #8]
 8007f68:	7a5a      	ldrb	r2, [r3, #9]
 8007f6a:	f022 021f 	bic.w	r2, r2, #31
 8007f6e:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 600;
 8007f70:	4b22      	ldr	r3, [pc, #136]	@ (8007ffc <draw_spinspin+0x244>)
 8007f72:	7a5a      	ldrb	r2, [r3, #9]
 8007f74:	f002 021f 	and.w	r2, r2, #31
 8007f78:	725a      	strb	r2, [r3, #9]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f042 024b 	orr.w	r2, r2, #75	@ 0x4b
 8007f80:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4a23      	ldr	r2, [pc, #140]	@ (8008014 <draw_spinspin+0x25c>)
 8007f86:	4413      	add	r3, r2
 8007f88:	4a1c      	ldr	r2, [pc, #112]	@ (8007ffc <draw_spinspin+0x244>)
 8007f8a:	461c      	mov	r4, r3
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f90:	6020      	str	r0, [r4, #0]
 8007f92:	6061      	str	r1, [r4, #4]
 8007f94:	60a2      	str	r2, [r4, #8]
 8007f96:	881a      	ldrh	r2, [r3, #0]
 8007f98:	789b      	ldrb	r3, [r3, #2]
 8007f9a:	81a2      	strh	r2, [r4, #12]
 8007f9c:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	330f      	adds	r3, #15
 8007fa2:	60bb      	str	r3, [r7, #8]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8008014 <draw_spinspin+0x25c>)
 8007fa8:	4413      	add	r3, r2
 8007faa:	7bfa      	ldrb	r2, [r7, #15]
 8007fac:	4915      	ldr	r1, [pc, #84]	@ (8008004 <draw_spinspin+0x24c>)
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f015 fc58 	bl	801d864 <memcpy>
	curr_pos += char_len;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	4413      	add	r3, r2
 8007fba:	60bb      	str	r3, [r7, #8]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3302      	adds	r3, #2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4814      	ldr	r0, [pc, #80]	@ (8008014 <draw_spinspin+0x25c>)
 8007fc4:	f7f9 f8a4 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007fc8:	e002      	b.n	8007fd0 <draw_spinspin+0x218>
		vTaskDelay(1);
 8007fca:	2001      	movs	r0, #1
 8007fcc:	f012 fe5a 	bl	801ac84 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8007fd0:	4b14      	ldr	r3, [pc, #80]	@ (8008024 <draw_spinspin+0x26c>)
 8007fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d1f6      	bne.n	8007fca <draw_spinspin+0x212>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	490b      	ldr	r1, [pc, #44]	@ (8008014 <draw_spinspin+0x25c>)
 8007fe8:	480e      	ldr	r0, [pc, #56]	@ (8008024 <draw_spinspin+0x26c>)
 8007fea:	f00c fee3 	bl	8014db4 <HAL_UART_Transmit_DMA>
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd90      	pop	{r4, r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20003914 	.word	0x20003914
 8007ffc:	20003aa0 	.word	0x20003aa0
 8008000:	080243bc 	.word	0x080243bc
 8008004:	20003ab8 	.word	0x20003ab8
 8008008:	080243c8 	.word	0x080243c8
 800800c:	20003ab0 	.word	0x20003ab0
 8008010:	20003cac 	.word	0x20003cac
 8008014:	20003998 	.word	0x20003998
 8008018:	20003a98 	.word	0x20003a98
 800801c:	20003c48 	.word	0x20003c48
 8008020:	20003994 	.word	0x20003994
 8008024:	20001ca0 	.word	0x20001ca0

08008028 <draw_gearing>:

void draw_gearing(uint8_t modify) {
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	71fb      	strb	r3, [r7, #7]

	uint32_t curr_pos = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
	uint8_t char_len = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	72fb      	strb	r3, [r7, #11]
	curr_pos = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
	graphic_data.color = 6; //CYAN
 800803e:	4a83      	ldr	r2, [pc, #524]	@ (800824c <draw_gearing+0x224>)
 8008040:	7913      	ldrb	r3, [r2, #4]
 8008042:	2106      	movs	r1, #6
 8008044:	f361 0385 	bfi	r3, r1, #2, #4
 8008048:	7113      	strb	r3, [r2, #4]
	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);
 800804a:	4b81      	ldr	r3, [pc, #516]	@ (8008250 <draw_gearing+0x228>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	4a81      	ldr	r2, [pc, #516]	@ (8008254 <draw_gearing+0x22c>)
 8008050:	211e      	movs	r1, #30
 8008052:	4881      	ldr	r0, [pc, #516]	@ (8008258 <draw_gearing+0x230>)
 8008054:	f015 fae6 	bl	801d624 <snprintf>
 8008058:	4603      	mov	r3, r0
 800805a:	72fb      	strb	r3, [r7, #11]
	send_header.start_frame = 0xA5;
 800805c:	4b7f      	ldr	r3, [pc, #508]	@ (800825c <draw_gearing+0x234>)
 800805e:	22a5      	movs	r2, #165	@ 0xa5
 8008060:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8008062:	4b7e      	ldr	r3, [pc, #504]	@ (800825c <draw_gearing+0x234>)
 8008064:	2200      	movs	r2, #0
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	715a      	strb	r2, [r3, #5]
 800806c:	2200      	movs	r2, #0
 800806e:	f042 0203 	orr.w	r2, r2, #3
 8008072:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 8008074:	4b7a      	ldr	r3, [pc, #488]	@ (8008260 <draw_gearing+0x238>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	b2d1      	uxtb	r1, r2
 800807c:	4a78      	ldr	r2, [pc, #480]	@ (8008260 <draw_gearing+0x238>)
 800807e:	7011      	strb	r1, [r2, #0]
 8008080:	4a76      	ldr	r2, [pc, #472]	@ (800825c <draw_gearing+0x234>)
 8008082:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_inter_robot_data_t)
			+ sizeof(graphic_data_struct_t) + char_len;
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	b29b      	uxth	r3, r3
 8008088:	3315      	adds	r3, #21
 800808a:	b29a      	uxth	r2, r3
	send_header.data_length = sizeof(ref_inter_robot_data_t)
 800808c:	4b73      	ldr	r3, [pc, #460]	@ (800825c <draw_gearing+0x234>)
 800808e:	f8a3 2001 	strh.w	r2, [r3, #1]
	send_header.seq = g_ref_tx_seq++;
 8008092:	4b73      	ldr	r3, [pc, #460]	@ (8008260 <draw_gearing+0x238>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	b2d1      	uxtb	r1, r2
 800809a:	4a71      	ldr	r2, [pc, #452]	@ (8008260 <draw_gearing+0x238>)
 800809c:	7011      	strb	r1, [r2, #0]
 800809e:	4a6f      	ldr	r2, [pc, #444]	@ (800825c <draw_gearing+0x234>)
 80080a0:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4a6f      	ldr	r2, [pc, #444]	@ (8008264 <draw_gearing+0x23c>)
 80080a6:	4413      	add	r3, r2
 80080a8:	4a6c      	ldr	r2, [pc, #432]	@ (800825c <draw_gearing+0x234>)
 80080aa:	6810      	ldr	r0, [r2, #0]
 80080ac:	6018      	str	r0, [r3, #0]
 80080ae:	8891      	ldrh	r1, [r2, #4]
 80080b0:	7992      	ldrb	r2, [r2, #6]
 80080b2:	8099      	strh	r1, [r3, #4]
 80080b4:	719a      	strb	r2, [r3, #6]
	curr_pos += sizeof(ref_frame_header_t);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3307      	adds	r3, #7
 80080ba:	60fb      	str	r3, [r7, #12]
	append_CRC8_check_sum(tx_buffer, 5);
 80080bc:	2105      	movs	r1, #5
 80080be:	4869      	ldr	r0, [pc, #420]	@ (8008264 <draw_gearing+0x23c>)
 80080c0:	f7f8 ffa3 	bl	800100a <append_CRC8_check_sum>

	//for drawing 1 graphic
	graphic_header.cmd_ID = 0x110;
 80080c4:	4b68      	ldr	r3, [pc, #416]	@ (8008268 <draw_gearing+0x240>)
 80080c6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80080ca:	801a      	strh	r2, [r3, #0]
	//send to self
	graphic_header.send_ID = ref_robot_data.robot_id;
 80080cc:	4b67      	ldr	r3, [pc, #412]	@ (800826c <draw_gearing+0x244>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	4b65      	ldr	r3, [pc, #404]	@ (8008268 <draw_gearing+0x240>)
 80080d4:	805a      	strh	r2, [r3, #2]
	graphic_header.receiver_ID = g_client_id;
 80080d6:	4b66      	ldr	r3, [pc, #408]	@ (8008270 <draw_gearing+0x248>)
 80080d8:	881a      	ldrh	r2, [r3, #0]
 80080da:	4b63      	ldr	r3, [pc, #396]	@ (8008268 <draw_gearing+0x240>)
 80080dc:	809a      	strh	r2, [r3, #4]
	memcpy(tx_buffer + curr_pos, &graphic_header,
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a60      	ldr	r2, [pc, #384]	@ (8008264 <draw_gearing+0x23c>)
 80080e2:	4413      	add	r3, r2
 80080e4:	4a60      	ldr	r2, [pc, #384]	@ (8008268 <draw_gearing+0x240>)
 80080e6:	6810      	ldr	r0, [r2, #0]
 80080e8:	6018      	str	r0, [r3, #0]
 80080ea:	8892      	ldrh	r2, [r2, #4]
 80080ec:	809a      	strh	r2, [r3, #4]
			sizeof(ref_inter_robot_data_t));
	curr_pos += sizeof(ref_inter_robot_data_t);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3306      	adds	r3, #6
 80080f2:	60fb      	str	r3, [r7, #12]
	//self set number for identification purposes only
	graphic_data.graphic_name[0] = 0;
 80080f4:	4b55      	ldr	r3, [pc, #340]	@ (800824c <draw_gearing+0x224>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
	graphic_data.graphic_name[1] = 0;
 80080fa:	4b54      	ldr	r3, [pc, #336]	@ (800824c <draw_gearing+0x224>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	705a      	strb	r2, [r3, #1]
	graphic_data.graphic_name[2] = 2;
 8008100:	4b52      	ldr	r3, [pc, #328]	@ (800824c <draw_gearing+0x224>)
 8008102:	2202      	movs	r2, #2
 8008104:	709a      	strb	r2, [r3, #2]
	graphic_data.layer = 0;
 8008106:	4b51      	ldr	r3, [pc, #324]	@ (800824c <draw_gearing+0x224>)
 8008108:	78da      	ldrb	r2, [r3, #3]
 800810a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800810e:	70da      	strb	r2, [r3, #3]
 8008110:	791a      	ldrb	r2, [r3, #4]
 8008112:	f022 0203 	bic.w	r2, r2, #3
 8008116:	711a      	strb	r2, [r3, #4]
	//draw number
	if (modify == 1) {
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d106      	bne.n	800812c <draw_gearing+0x104>
		graphic_data.operation_type = 2; //0 = no operation, 1 = add, 2= modify, 3 = delete
 800811e:	4a4b      	ldr	r2, [pc, #300]	@ (800824c <draw_gearing+0x224>)
 8008120:	78d3      	ldrb	r3, [r2, #3]
 8008122:	2102      	movs	r1, #2
 8008124:	f361 0302 	bfi	r3, r1, #0, #3
 8008128:	70d3      	strb	r3, [r2, #3]
 800812a:	e005      	b.n	8008138 <draw_gearing+0x110>
	} else {
		graphic_data.operation_type = 1; //0 = no operation, 1 = add, 2= modify, 3 = delete
 800812c:	4a47      	ldr	r2, [pc, #284]	@ (800824c <draw_gearing+0x224>)
 800812e:	78d3      	ldrb	r3, [r2, #3]
 8008130:	2101      	movs	r1, #1
 8008132:	f361 0302 	bfi	r3, r1, #0, #3
 8008136:	70d3      	strb	r3, [r2, #3]
	}
	graphic_data.graphic_type = 7; // char
 8008138:	4a44      	ldr	r2, [pc, #272]	@ (800824c <draw_gearing+0x224>)
 800813a:	78d3      	ldrb	r3, [r2, #3]
 800813c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8008140:	70d3      	strb	r3, [r2, #3]
	graphic_data.start_angle = 30; // font size
 8008142:	4b42      	ldr	r3, [pc, #264]	@ (800824c <draw_gearing+0x224>)
 8008144:	791a      	ldrb	r2, [r3, #4]
 8008146:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800814a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800814e:	711a      	strb	r2, [r3, #4]
 8008150:	795a      	ldrb	r2, [r3, #5]
 8008152:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8008156:	f042 0207 	orr.w	r2, r2, #7
 800815a:	715a      	strb	r2, [r3, #5]
	graphic_data.end_angle = char_len; //number of decimal places
 800815c:	7afb      	ldrb	r3, [r7, #11]
 800815e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008162:	b29a      	uxth	r2, r3
 8008164:	4b39      	ldr	r3, [pc, #228]	@ (800824c <draw_gearing+0x224>)
 8008166:	f002 0101 	and.w	r1, r2, #1
 800816a:	01cc      	lsls	r4, r1, #7
 800816c:	7959      	ldrb	r1, [r3, #5]
 800816e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008172:	4608      	mov	r0, r1
 8008174:	4621      	mov	r1, r4
 8008176:	4301      	orrs	r1, r0
 8008178:	7159      	strb	r1, [r3, #5]
 800817a:	0852      	lsrs	r2, r2, #1
 800817c:	b292      	uxth	r2, r2
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	2100      	movs	r1, #0
 8008182:	430a      	orrs	r2, r1
 8008184:	719a      	strb	r2, [r3, #6]
	graphic_data.width = 7; //line width
 8008186:	4b31      	ldr	r3, [pc, #196]	@ (800824c <draw_gearing+0x224>)
 8008188:	2200      	movs	r2, #0
 800818a:	f042 0207 	orr.w	r2, r2, #7
 800818e:	71da      	strb	r2, [r3, #7]
 8008190:	7a1a      	ldrb	r2, [r3, #8]
 8008192:	f022 0203 	bic.w	r2, r2, #3
 8008196:	721a      	strb	r2, [r3, #8]
	graphic_data.layer = 0;
 8008198:	4b2c      	ldr	r3, [pc, #176]	@ (800824c <draw_gearing+0x224>)
 800819a:	78da      	ldrb	r2, [r3, #3]
 800819c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80081a0:	70da      	strb	r2, [r3, #3]
 80081a2:	791a      	ldrb	r2, [r3, #4]
 80081a4:	f022 0203 	bic.w	r2, r2, #3
 80081a8:	711a      	strb	r2, [r3, #4]
	//assuming 1920x1080? need check
	graphic_data.start_x = 50;
 80081aa:	4b28      	ldr	r3, [pc, #160]	@ (800824c <draw_gearing+0x224>)
 80081ac:	7a1a      	ldrb	r2, [r3, #8]
 80081ae:	f002 0203 	and.w	r2, r2, #3
 80081b2:	f062 0237 	orn	r2, r2, #55	@ 0x37
 80081b6:	721a      	strb	r2, [r3, #8]
 80081b8:	7a5a      	ldrb	r2, [r3, #9]
 80081ba:	f022 021f 	bic.w	r2, r2, #31
 80081be:	725a      	strb	r2, [r3, #9]
	graphic_data.start_y = 650;
 80081c0:	4b22      	ldr	r3, [pc, #136]	@ (800824c <draw_gearing+0x224>)
 80081c2:	7a5a      	ldrb	r2, [r3, #9]
 80081c4:	f002 021f 	and.w	r2, r2, #31
 80081c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081cc:	725a      	strb	r2, [r3, #9]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f042 0251 	orr.w	r2, r2, #81	@ 0x51
 80081d4:	729a      	strb	r2, [r3, #10]
	memcpy(tx_buffer + curr_pos, &graphic_data, sizeof(graphic_data_struct_t));
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4a22      	ldr	r2, [pc, #136]	@ (8008264 <draw_gearing+0x23c>)
 80081da:	4413      	add	r3, r2
 80081dc:	4a1b      	ldr	r2, [pc, #108]	@ (800824c <draw_gearing+0x224>)
 80081de:	461c      	mov	r4, r3
 80081e0:	4613      	mov	r3, r2
 80081e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081e4:	6020      	str	r0, [r4, #0]
 80081e6:	6061      	str	r1, [r4, #4]
 80081e8:	60a2      	str	r2, [r4, #8]
 80081ea:	881a      	ldrh	r2, [r3, #0]
 80081ec:	789b      	ldrb	r3, [r3, #2]
 80081ee:	81a2      	strh	r2, [r4, #12]
 80081f0:	73a3      	strb	r3, [r4, #14]
	curr_pos += sizeof(graphic_data_struct_t);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	330f      	adds	r3, #15
 80081f6:	60fb      	str	r3, [r7, #12]
	memcpy(tx_buffer + curr_pos, char_buffer, char_len);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008264 <draw_gearing+0x23c>)
 80081fc:	4413      	add	r3, r2
 80081fe:	7afa      	ldrb	r2, [r7, #11]
 8008200:	4915      	ldr	r1, [pc, #84]	@ (8008258 <draw_gearing+0x230>)
 8008202:	4618      	mov	r0, r3
 8008204:	f015 fb2e 	bl	801d864 <memcpy>
	curr_pos += char_len;
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3302      	adds	r3, #2
 8008214:	4619      	mov	r1, r3
 8008216:	4813      	ldr	r0, [pc, #76]	@ (8008264 <draw_gearing+0x23c>)
 8008218:	f7f8 ff7a 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 800821c:	e002      	b.n	8008224 <draw_gearing+0x1fc>
		vTaskDelay(1);
 800821e:	2001      	movs	r0, #1
 8008220:	f012 fd30 	bl	801ac84 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8008224:	4b13      	ldr	r3, [pc, #76]	@ (8008274 <draw_gearing+0x24c>)
 8008226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b20      	cmp	r3, #32
 800822e:	d1f6      	bne.n	800821e <draw_gearing+0x1f6>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	b29b      	uxth	r3, r3
 8008234:	3302      	adds	r3, #2
 8008236:	b29b      	uxth	r3, r3
 8008238:	461a      	mov	r2, r3
 800823a:	490a      	ldr	r1, [pc, #40]	@ (8008264 <draw_gearing+0x23c>)
 800823c:	480d      	ldr	r0, [pc, #52]	@ (8008274 <draw_gearing+0x24c>)
 800823e:	f00c fdb9 	bl	8014db4 <HAL_UART_Transmit_DMA>
}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	bd90      	pop	{r4, r7, pc}
 800824a:	bf00      	nop
 800824c:	20003aa0 	.word	0x20003aa0
 8008250:	20003904 	.word	0x20003904
 8008254:	080243d0 	.word	0x080243d0
 8008258:	20003ab8 	.word	0x20003ab8
 800825c:	20003ab0 	.word	0x20003ab0
 8008260:	20003cac 	.word	0x20003cac
 8008264:	20003998 	.word	0x20003998
 8008268:	20003a98 	.word	0x20003a98
 800826c:	20003c48 	.word	0x20003c48
 8008270:	20003994 	.word	0x20003994
 8008274:	20001ca0 	.word	0x20001ca0

08008278 <clear_hud>:


void clear_hud(){
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
	uint32_t curr_pos = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
//	uint8_t char_len = 0;
//	curr_pos = 0;
//	char_len = snprintf((char*) char_buffer, 30, "GEAR %d", gear_speed.curr_gear);

	send_header.start_frame = 0xA5;
 8008282:	4b2f      	ldr	r3, [pc, #188]	@ (8008340 <clear_hud+0xc8>)
 8008284:	22a5      	movs	r2, #165	@ 0xa5
 8008286:	701a      	strb	r2, [r3, #0]
	send_header.cmd_id = REF_ROBOT_COMMS_CMD_ID;
 8008288:	4b2d      	ldr	r3, [pc, #180]	@ (8008340 <clear_hud+0xc8>)
 800828a:	2200      	movs	r2, #0
 800828c:	f042 0201 	orr.w	r2, r2, #1
 8008290:	715a      	strb	r2, [r3, #5]
 8008292:	2200      	movs	r2, #0
 8008294:	f042 0203 	orr.w	r2, r2, #3
 8008298:	719a      	strb	r2, [r3, #6]
	send_header.seq = g_ref_tx_seq++;
 800829a:	4b2a      	ldr	r3, [pc, #168]	@ (8008344 <clear_hud+0xcc>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	b2d1      	uxtb	r1, r2
 80082a2:	4a28      	ldr	r2, [pc, #160]	@ (8008344 <clear_hud+0xcc>)
 80082a4:	7011      	strb	r1, [r2, #0]
 80082a6:	4a26      	ldr	r2, [pc, #152]	@ (8008340 <clear_hud+0xc8>)
 80082a8:	70d3      	strb	r3, [r2, #3]
	send_header.data_length = sizeof(ref_delete_graphic_t);
 80082aa:	4b25      	ldr	r3, [pc, #148]	@ (8008340 <clear_hud+0xc8>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	f042 0208 	orr.w	r2, r2, #8
 80082b2:	705a      	strb	r2, [r3, #1]
 80082b4:	2200      	movs	r2, #0
 80082b6:	709a      	strb	r2, [r3, #2]
	send_header.seq = g_ref_tx_seq++;
 80082b8:	4b22      	ldr	r3, [pc, #136]	@ (8008344 <clear_hud+0xcc>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	b2d1      	uxtb	r1, r2
 80082c0:	4a20      	ldr	r2, [pc, #128]	@ (8008344 <clear_hud+0xcc>)
 80082c2:	7011      	strb	r1, [r2, #0]
 80082c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008340 <clear_hud+0xc8>)
 80082c6:	70d3      	strb	r3, [r2, #3]
	memcpy(tx_buffer + curr_pos, &send_header, 7);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008348 <clear_hud+0xd0>)
 80082cc:	4413      	add	r3, r2
 80082ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008340 <clear_hud+0xc8>)
 80082d0:	6810      	ldr	r0, [r2, #0]
 80082d2:	6018      	str	r0, [r3, #0]
 80082d4:	8891      	ldrh	r1, [r2, #4]
 80082d6:	7992      	ldrb	r2, [r2, #6]
 80082d8:	8099      	strh	r1, [r3, #4]
 80082da:	719a      	strb	r2, [r3, #6]
	ref_delete_graphic_t ref_delete;
	ref_delete.cmd_ID = 0x100;
 80082dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082e0:	80bb      	strh	r3, [r7, #4]
	ref_delete.graphic_layer = 9;
 80082e2:	2309      	movs	r3, #9
 80082e4:	72fb      	strb	r3, [r7, #11]
	ref_delete.graphic_operation = 2;
 80082e6:	2302      	movs	r3, #2
 80082e8:	72bb      	strb	r3, [r7, #10]
	ref_delete.receiver_ID = g_client_id;
 80082ea:	4b18      	ldr	r3, [pc, #96]	@ (800834c <clear_hud+0xd4>)
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	813b      	strh	r3, [r7, #8]
	ref_delete.send_ID = ref_robot_data.robot_id;
 80082f0:	4b17      	ldr	r3, [pc, #92]	@ (8008350 <clear_hud+0xd8>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	80fb      	strh	r3, [r7, #6]
	memcpy(tx_buffer + curr_pos, &ref_delete, sizeof(ref_delete_graphic_t));
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a13      	ldr	r2, [pc, #76]	@ (8008348 <clear_hud+0xd0>)
 80082fa:	4413      	add	r3, r2
 80082fc:	461a      	mov	r2, r3
 80082fe:	1d3b      	adds	r3, r7, #4
 8008300:	cb03      	ldmia	r3!, {r0, r1}
 8008302:	6010      	str	r0, [r2, #0]
 8008304:	6051      	str	r1, [r2, #4]
	append_CRC16_check_sum(tx_buffer, curr_pos + 2);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3302      	adds	r3, #2
 800830a:	4619      	mov	r1, r3
 800830c:	480e      	ldr	r0, [pc, #56]	@ (8008348 <clear_hud+0xd0>)
 800830e:	f7f8 feff 	bl	8001110 <append_CRC16_check_sum>
	while (huart6.gState != HAL_UART_STATE_READY) {
 8008312:	e002      	b.n	800831a <clear_hud+0xa2>
		vTaskDelay(1);
 8008314:	2001      	movs	r0, #1
 8008316:	f012 fcb5 	bl	801ac84 <vTaskDelay>
	while (huart6.gState != HAL_UART_STATE_READY) {
 800831a:	4b0e      	ldr	r3, [pc, #56]	@ (8008354 <clear_hud+0xdc>)
 800831c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b20      	cmp	r3, #32
 8008324:	d1f6      	bne.n	8008314 <clear_hud+0x9c>
	}
	HAL_UART_Transmit_DMA(&huart6, tx_buffer, curr_pos + 2);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	b29b      	uxth	r3, r3
 800832a:	3302      	adds	r3, #2
 800832c:	b29b      	uxth	r3, r3
 800832e:	461a      	mov	r2, r3
 8008330:	4905      	ldr	r1, [pc, #20]	@ (8008348 <clear_hud+0xd0>)
 8008332:	4808      	ldr	r0, [pc, #32]	@ (8008354 <clear_hud+0xdc>)
 8008334:	f00c fd3e 	bl	8014db4 <HAL_UART_Transmit_DMA>

}
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20003ab0 	.word	0x20003ab0
 8008344:	20003cac 	.word	0x20003cac
 8008348:	20003998 	.word	0x20003998
 800834c:	20003994 	.word	0x20003994
 8008350:	20003c48 	.word	0x20003c48
 8008354:	20001ca0 	.word	0x20001ca0

08008358 <fusion>:
double time_dif;
#define ALPHA 0.98
#define DT 0.01
#define LPF_ALPHA 0.5  // Low-pass filter coefficient

int fusion() {
 8008358:	b580      	push	{r7, lr}
 800835a:	b0ae      	sub	sp, #184	@ 0xb8
 800835c:	af00      	add	r7, sp, #0
    double accel_data[3];
    double gyro_data[3];
    double dt = DT;
 800835e:	a377      	add	r3, pc, #476	@ (adr r3, 800853c <fusion+0x1e4>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    IMUSensorFusion imu;

    initIMUSensorFusion(&imu);
 8008368:	463b      	mov	r3, r7
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f92a 	bl	80085c4 <initIMUSensorFusion>

    double T_end = 0.1;
 8008370:	a374      	add	r3, pc, #464	@ (adr r3, 8008544 <fusion+0x1ec>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double time_dif;


    float T_start = get_microseconds();
 800837a:	f7f9 ff21 	bl	80021c0 <get_microseconds>
 800837e:	ee07 0a90 	vmov	s15, r0
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

    // Simulate data (replace with actual sensor reading in a real application)
    while (1) {
        // Replace these functions with actual sensor data reading
        accel_data[0] = accel_proc_data.ax;  // x-axis acceleration
 800838a:	4b69      	ldr	r3, [pc, #420]	@ (8008530 <fusion+0x1d8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4618      	mov	r0, r3
 8008390:	f7f8 f8da 	bl	8000548 <__aeabi_f2d>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        accel_data[1] = accel_proc_data.ay;  // y-axis acceleration
 800839c:	4b64      	ldr	r3, [pc, #400]	@ (8008530 <fusion+0x1d8>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7f8 f8d1 	bl	8000548 <__aeabi_f2d>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        accel_data[2] = accel_proc_data.az;  // z-axis acceleration
 80083ae:	4b60      	ldr	r3, [pc, #384]	@ (8008530 <fusion+0x1d8>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7f8 f8c8 	bl	8000548 <__aeabi_f2d>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        gyro_data[0] = gyro_proc_data.gx;  // roll rate
 80083c0:	4b5c      	ldr	r3, [pc, #368]	@ (8008534 <fusion+0x1dc>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7f8 f8bf 	bl	8000548 <__aeabi_f2d>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
        gyro_data[1] = gyro_proc_data.gy;  // pitch rate
 80083d2:	4b58      	ldr	r3, [pc, #352]	@ (8008534 <fusion+0x1dc>)
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7f8 f8b6 	bl	8000548 <__aeabi_f2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
        gyro_data[2] = gyro_proc_data.gz;  // yaw rate
 80083e4:	4b53      	ldr	r3, [pc, #332]	@ (8008534 <fusion+0x1dc>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7f8 f8ad 	bl	8000548 <__aeabi_f2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

        T_end = get_microseconds();
 80083f6:	f7f9 fee3 	bl	80021c0 <get_microseconds>
 80083fa:	4603      	mov	r3, r0
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7f8 f881 	bl	8000504 <__aeabi_ui2d>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
        time_dif = (T_end - T_start) * 0.000001;
 800840a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800840e:	f7f8 f89b 	bl	8000548 <__aeabi_f2d>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800841a:	f7f7 ff35 	bl	8000288 <__aeabi_dsub>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4610      	mov	r0, r2
 8008424:	4619      	mov	r1, r3
 8008426:	a340      	add	r3, pc, #256	@ (adr r3, 8008528 <fusion+0x1d0>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f8 f8e4 	bl	80005f8 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        dt = time_dif;
 8008438:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800843c:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
        imu_sensor_fusion(accel_data, gyro_data, dt, &imu);
 8008440:	463a      	mov	r2, r7
 8008442:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8008446:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800844a:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800844e:	4618      	mov	r0, r3
 8008450:	f000 f91e 	bl	8008690 <imu_sensor_fusion>
        T_start = get_microseconds();
 8008454:	f7f9 feb4 	bl	80021c0 <get_microseconds>
 8008458:	ee07 0a90 	vmov	s15, r0
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4

        // Store the results in the imu_heading structure
        imu_heading.pit = imu.pitch;
 8008464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008468:	4610      	mov	r0, r2
 800846a:	4619      	mov	r1, r3
 800846c:	f7f8 fbbc 	bl	8000be8 <__aeabi_d2f>
 8008470:	4603      	mov	r3, r0
 8008472:	4a31      	ldr	r2, [pc, #196]	@ (8008538 <fusion+0x1e0>)
 8008474:	6013      	str	r3, [r2, #0]
        imu_heading.dpit = imu.pitch_speed;
 8008476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800847a:	4610      	mov	r0, r2
 800847c:	4619      	mov	r1, r3
 800847e:	f7f8 fbb3 	bl	8000be8 <__aeabi_d2f>
 8008482:	4603      	mov	r3, r0
 8008484:	4a2c      	ldr	r2, [pc, #176]	@ (8008538 <fusion+0x1e0>)
 8008486:	60d3      	str	r3, [r2, #12]
        imu_heading.ddpit = imu.pitch_accel;
 8008488:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800848c:	4610      	mov	r0, r2
 800848e:	4619      	mov	r1, r3
 8008490:	f7f8 fbaa 	bl	8000be8 <__aeabi_d2f>
 8008494:	4603      	mov	r3, r0
 8008496:	4a28      	ldr	r2, [pc, #160]	@ (8008538 <fusion+0x1e0>)
 8008498:	6193      	str	r3, [r2, #24]
        imu_heading.rol = imu.roll;
 800849a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	f7f8 fba1 	bl	8000be8 <__aeabi_d2f>
 80084a6:	4603      	mov	r3, r0
 80084a8:	4a23      	ldr	r2, [pc, #140]	@ (8008538 <fusion+0x1e0>)
 80084aa:	6053      	str	r3, [r2, #4]
        imu_heading.drol = imu.roll_speed;
 80084ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084b0:	4610      	mov	r0, r2
 80084b2:	4619      	mov	r1, r3
 80084b4:	f7f8 fb98 	bl	8000be8 <__aeabi_d2f>
 80084b8:	4603      	mov	r3, r0
 80084ba:	4a1f      	ldr	r2, [pc, #124]	@ (8008538 <fusion+0x1e0>)
 80084bc:	6113      	str	r3, [r2, #16]
        imu_heading.ddrol = imu.roll_accel;
 80084be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084c2:	4610      	mov	r0, r2
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7f8 fb8f 	bl	8000be8 <__aeabi_d2f>
 80084ca:	4603      	mov	r3, r0
 80084cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008538 <fusion+0x1e0>)
 80084ce:	61d3      	str	r3, [r2, #28]
        imu_heading.yaw = imu.yaw;
 80084d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80084d4:	4610      	mov	r0, r2
 80084d6:	4619      	mov	r1, r3
 80084d8:	f7f8 fb86 	bl	8000be8 <__aeabi_d2f>
 80084dc:	4603      	mov	r3, r0
 80084de:	4a16      	ldr	r2, [pc, #88]	@ (8008538 <fusion+0x1e0>)
 80084e0:	6093      	str	r3, [r2, #8]
        imu_heading.dyaw = imu.yaw_speed;
 80084e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	f7f8 fb7d 	bl	8000be8 <__aeabi_d2f>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4a11      	ldr	r2, [pc, #68]	@ (8008538 <fusion+0x1e0>)
 80084f2:	6153      	str	r3, [r2, #20]
        imu_heading.ddyaw = imu.yaw_accel;
 80084f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084f8:	4610      	mov	r0, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	f7f8 fb74 	bl	8000be8 <__aeabi_d2f>
 8008500:	4603      	mov	r3, r0
 8008502:	4a0d      	ldr	r2, [pc, #52]	@ (8008538 <fusion+0x1e0>)
 8008504:	6213      	str	r3, [r2, #32]
        imu_heading.ddz = imu.vertical_accel;
 8008506:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800850a:	4610      	mov	r0, r2
 800850c:	4619      	mov	r1, r3
 800850e:	f7f8 fb6b 	bl	8000be8 <__aeabi_d2f>
 8008512:	4603      	mov	r3, r0
 8008514:	4a08      	ldr	r2, [pc, #32]	@ (8008538 <fusion+0x1e0>)
 8008516:	6253      	str	r3, [r2, #36]	@ 0x24
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008518:	f04f 31ff 	mov.w	r1, #4294967295
 800851c:	2001      	movs	r0, #1
 800851e:	f013 f981 	bl	801b824 <ulTaskNotifyTake>
        accel_data[0] = accel_proc_data.ax;  // x-axis acceleration
 8008522:	bf00      	nop
 8008524:	e731      	b.n	800838a <fusion+0x32>
 8008526:	bf00      	nop
 8008528:	a0b5ed8d 	.word	0xa0b5ed8d
 800852c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008530:	20003b00 	.word	0x20003b00
 8008534:	20003b10 	.word	0x20003b10
 8008538:	20003ad8 	.word	0x20003ad8
 800853c:	47ae147b 	.word	0x47ae147b
 8008540:	3f847ae1 	.word	0x3f847ae1
 8008544:	9999999a 	.word	0x9999999a
 8008548:	3fb99999 	.word	0x3fb99999

0800854c <low_pass_filter>:

    return 0;
}

// Low-pass filter function
double low_pass_filter(double input, double *prev_output, double alpha) {
 800854c:	b5b0      	push	{r4, r5, r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	ed87 0b04 	vstr	d0, [r7, #16]
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	ed87 1b00 	vstr	d1, [r7]
    *prev_output = alpha * input + (1 - alpha) * (*prev_output);
 800855c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008564:	f7f8 f848 	bl	80005f8 <__aeabi_dmul>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4614      	mov	r4, r2
 800856e:	461d      	mov	r5, r3
 8008570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008574:	f04f 0000 	mov.w	r0, #0
 8008578:	4911      	ldr	r1, [pc, #68]	@ (80085c0 <low_pass_filter+0x74>)
 800857a:	f7f7 fe85 	bl	8000288 <__aeabi_dsub>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4610      	mov	r0, r2
 8008584:	4619      	mov	r1, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f7 fe78 	bl	800028c <__adddf3>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	68f9      	ldr	r1, [r7, #12]
 80085a2:	e9c1 2300 	strd	r2, r3, [r1]
    return *prev_output;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80085b0:	eeb0 0a47 	vmov.f32	s0, s14
 80085b4:	eef0 0a67 	vmov.f32	s1, s15
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bdb0      	pop	{r4, r5, r7, pc}
 80085be:	bf00      	nop
 80085c0:	3ff00000 	.word	0x3ff00000

080085c4 <initIMUSensorFusion>:


void initIMUSensorFusion(IMUSensorFusion *imu) {
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
    imu->pitch = 0.0;
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	f04f 0300 	mov.w	r3, #0
 80085d6:	e9c1 2300 	strd	r2, r3, [r1]
    imu->pitch_speed = 0.0;
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    imu->pitch_accel = 0.0;
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imu->roll = 0.0;
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	e9c1 2306 	strd	r2, r3, [r1, #24]
    imu->roll_speed = 0.0;
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    imu->roll_accel = 0.0;
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	f04f 0300 	mov.w	r3, #0
 800861c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    imu->yaw = 0.0;
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    imu->yaw_speed = 0.0;
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    imu->yaw_accel = 0.0;
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	f04f 0200 	mov.w	r2, #0
 8008642:	f04f 0300 	mov.w	r3, #0
 8008646:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    imu->vertical_accel = 0.0;
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    imu->acc_x_lpf = 0.0;
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    imu->acc_y_lpf = 0.0;
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	f04f 0200 	mov.w	r2, #0
 800866c:	f04f 0300 	mov.w	r3, #0
 8008670:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    imu->acc_z_lpf = 0.0;
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
}
 8008682:	bf00      	nop
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <imu_sensor_fusion>:
void imu_sensor_fusion(double accel_data[3], double gyro_data[3], double dt,
                       IMUSensorFusion *imu) {
 8008690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008694:	b08a      	sub	sp, #40	@ 0x28
 8008696:	af00      	add	r7, sp, #0
 8008698:	6178      	str	r0, [r7, #20]
 800869a:	6139      	str	r1, [r7, #16]
 800869c:	ed87 0b02 	vstr	d0, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
    // Low-pass filter accelerometer data
    accel_data[0] = low_pass_filter(accel_data[0], &(imu->acc_x_lpf), LPF_ALPHA);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	ed93 7b00 	vldr	d7, [r3]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3350      	adds	r3, #80	@ 0x50
 80086ac:	ed9f 1bb8 	vldr	d1, [pc, #736]	@ 8008990 <imu_sensor_fusion+0x300>
 80086b0:	4618      	mov	r0, r3
 80086b2:	eeb0 0a47 	vmov.f32	s0, s14
 80086b6:	eef0 0a67 	vmov.f32	s1, s15
 80086ba:	f7ff ff47 	bl	800854c <low_pass_filter>
 80086be:	eeb0 7a40 	vmov.f32	s14, s0
 80086c2:	eef0 7a60 	vmov.f32	s15, s1
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	ed83 7b00 	vstr	d7, [r3]
    accel_data[1] = low_pass_filter(accel_data[1], &(imu->acc_y_lpf), LPF_ALPHA);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	3308      	adds	r3, #8
 80086d0:	ed93 7b00 	vldr	d7, [r3]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f103 0408 	add.w	r4, r3, #8
 80086e0:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 8008990 <imu_sensor_fusion+0x300>
 80086e4:	4610      	mov	r0, r2
 80086e6:	eeb0 0a47 	vmov.f32	s0, s14
 80086ea:	eef0 0a67 	vmov.f32	s1, s15
 80086ee:	f7ff ff2d 	bl	800854c <low_pass_filter>
 80086f2:	eeb0 7a40 	vmov.f32	s14, s0
 80086f6:	eef0 7a60 	vmov.f32	s15, s1
 80086fa:	ed84 7b00 	vstr	d7, [r4]
    accel_data[2] = low_pass_filter(accel_data[2], &(imu->acc_z_lpf), LPF_ALPHA);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	3310      	adds	r3, #16
 8008702:	ed93 7b00 	vldr	d7, [r3]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f103 0410 	add.w	r4, r3, #16
 8008712:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8008990 <imu_sensor_fusion+0x300>
 8008716:	4610      	mov	r0, r2
 8008718:	eeb0 0a47 	vmov.f32	s0, s14
 800871c:	eef0 0a67 	vmov.f32	s1, s15
 8008720:	f7ff ff14 	bl	800854c <low_pass_filter>
 8008724:	eeb0 7a40 	vmov.f32	s14, s0
 8008728:	eef0 7a60 	vmov.f32	s15, s1
 800872c:	ed84 7b00 	vstr	d7, [r4]

    // Calculate pitch and roll from accelerometer data
    double pitch_accel_meas = atan2(-accel_data[0], sqrt(accel_data[1] * accel_data[1] + accel_data[2] * accel_data[2]));
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	4690      	mov	r8, r2
 8008738:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	3308      	adds	r3, #8
 8008740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	3308      	adds	r3, #8
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f7 ff54 	bl	80005f8 <__aeabi_dmul>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4614      	mov	r4, r2
 8008756:	461d      	mov	r5, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	3310      	adds	r3, #16
 800875c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	3310      	adds	r3, #16
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f7f7 ff46 	bl	80005f8 <__aeabi_dmul>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4620      	mov	r0, r4
 8008772:	4629      	mov	r1, r5
 8008774:	f7f7 fd8a 	bl	800028c <__adddf3>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	ec43 2b17 	vmov	d7, r2, r3
 8008780:	eeb0 0a47 	vmov.f32	s0, s14
 8008784:	eef0 0a67 	vmov.f32	s1, s15
 8008788:	f019 fc60 	bl	802204c <sqrt>
 800878c:	eeb0 7a40 	vmov.f32	s14, s0
 8008790:	eef0 7a60 	vmov.f32	s15, s1
 8008794:	eeb0 1a47 	vmov.f32	s2, s14
 8008798:	eef0 1a67 	vmov.f32	s3, s15
 800879c:	ec49 8b10 	vmov	d0, r8, r9
 80087a0:	f019 fbe2 	bl	8021f68 <atan2>
 80087a4:	ed87 0b08 	vstr	d0, [r7, #32]
    double roll_accel_meas = atan2(accel_data[1], accel_data[2]);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	3308      	adds	r3, #8
 80087ac:	ed93 7b00 	vldr	d7, [r3]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	3310      	adds	r3, #16
 80087b4:	ed93 6b00 	vldr	d6, [r3]
 80087b8:	eeb0 1a46 	vmov.f32	s2, s12
 80087bc:	eef0 1a66 	vmov.f32	s3, s13
 80087c0:	eeb0 0a47 	vmov.f32	s0, s14
 80087c4:	eef0 0a67 	vmov.f32	s1, s15
 80087c8:	f019 fbce 	bl	8021f68 <atan2>
 80087cc:	ed87 0b06 	vstr	d0, [r7, #24]

    // Apply complementary filter
    imu->pitch = ALPHA * (imu->pitch + gyro_data[1] * dt) + (1 - ALPHA) * pitch_accel_meas;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3308      	adds	r3, #8
 80087da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087e2:	f7f7 ff09 	bl	80005f8 <__aeabi_dmul>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4620      	mov	r0, r4
 80087ec:	4629      	mov	r1, r5
 80087ee:	f7f7 fd4d 	bl	800028c <__adddf3>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4610      	mov	r0, r2
 80087f8:	4619      	mov	r1, r3
 80087fa:	a36a      	add	r3, pc, #424	@ (adr r3, 80089a4 <imu_sensor_fusion+0x314>)
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	f7f7 fefa 	bl	80005f8 <__aeabi_dmul>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4614      	mov	r4, r2
 800880a:	461d      	mov	r5, r3
 800880c:	a367      	add	r3, pc, #412	@ (adr r3, 80089ac <imu_sensor_fusion+0x31c>)
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008816:	f7f7 feef 	bl	80005f8 <__aeabi_dmul>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f7f7 fd33 	bl	800028c <__adddf3>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	e9c1 2300 	strd	r2, r3, [r1]
    imu->roll = ALPHA * (imu->roll + gyro_data[0] * dt) + (1 - ALPHA) * roll_accel_meas;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800883c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008840:	f7f7 feda 	bl	80005f8 <__aeabi_dmul>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4620      	mov	r0, r4
 800884a:	4629      	mov	r1, r5
 800884c:	f7f7 fd1e 	bl	800028c <__adddf3>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4610      	mov	r0, r2
 8008856:	4619      	mov	r1, r3
 8008858:	a352      	add	r3, pc, #328	@ (adr r3, 80089a4 <imu_sensor_fusion+0x314>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 fecb 	bl	80005f8 <__aeabi_dmul>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4614      	mov	r4, r2
 8008868:	461d      	mov	r5, r3
 800886a:	a350      	add	r3, pc, #320	@ (adr r3, 80089ac <imu_sensor_fusion+0x31c>)
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008874:	f7f7 fec0 	bl	80005f8 <__aeabi_dmul>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 fd04 	bl	800028c <__adddf3>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    imu->yaw += gyro_data[2] * dt;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3310      	adds	r3, #16
 8008898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800889c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088a0:	f7f7 feaa 	bl	80005f8 <__aeabi_dmul>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4620      	mov	r0, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7f7 fcee 	bl	800028c <__adddf3>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    // Calculate speed (rate of change of angles) directly from gyroscope data
    imu->pitch_speed = gyro_data[1];
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    imu->roll_speed = gyro_data[0];
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
    imu->yaw_speed = gyro_data[2];
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Calculate acceleration (rate of change of speeds)
    static double last_pitch_speed = 0, last_roll_speed = 0, last_yaw_speed = 0;
    imu->pitch_accel = (imu->pitch_speed - last_pitch_speed) / dt;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80088e4:	4b2c      	ldr	r3, [pc, #176]	@ (8008998 <imu_sensor_fusion+0x308>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fccd 	bl	8000288 <__aeabi_dsub>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4610      	mov	r0, r2
 80088f4:	4619      	mov	r1, r3
 80088f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088fa:	f7f7 ffa7 	bl	800084c <__aeabi_ddiv>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imu->roll_accel = (imu->roll_speed - last_roll_speed) / dt;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800890e:	4b23      	ldr	r3, [pc, #140]	@ (800899c <imu_sensor_fusion+0x30c>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 fcb8 	bl	8000288 <__aeabi_dsub>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4610      	mov	r0, r2
 800891e:	4619      	mov	r1, r3
 8008920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008924:	f7f7 ff92 	bl	800084c <__aeabi_ddiv>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    imu->yaw_accel = (imu->yaw_speed - last_yaw_speed) / dt;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008938:	4b19      	ldr	r3, [pc, #100]	@ (80089a0 <imu_sensor_fusion+0x310>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fca3 	bl	8000288 <__aeabi_dsub>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800894e:	f7f7 ff7d 	bl	800084c <__aeabi_ddiv>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Update last speeds
    last_pitch_speed = imu->pitch_speed;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008962:	490d      	ldr	r1, [pc, #52]	@ (8008998 <imu_sensor_fusion+0x308>)
 8008964:	e9c1 2300 	strd	r2, r3, [r1]
    last_roll_speed = imu->roll_speed;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800896e:	490b      	ldr	r1, [pc, #44]	@ (800899c <imu_sensor_fusion+0x30c>)
 8008970:	e9c1 2300 	strd	r2, r3, [r1]
    last_yaw_speed = imu->yaw_speed;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800897a:	4909      	ldr	r1, [pc, #36]	@ (80089a0 <imu_sensor_fusion+0x310>)
 800897c:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate vertical acceleration (z-axis acceleration)
    imu->vertical_accel = sqrt((accel_data[0]*accel_data[0]) + (accel_data[1]*accel_data[1]) + (accel_data[2]*accel_data[2]));
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	e014      	b.n	80089b4 <imu_sensor_fusion+0x324>
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w
 8008990:	00000000 	.word	0x00000000
 8008994:	3fe00000 	.word	0x3fe00000
 8008998:	20003b30 	.word	0x20003b30
 800899c:	20003b38 	.word	0x20003b38
 80089a0:	20003b40 	.word	0x20003b40
 80089a4:	f5c28f5c 	.word	0xf5c28f5c
 80089a8:	3fef5c28 	.word	0x3fef5c28
 80089ac:	47ae1480 	.word	0x47ae1480
 80089b0:	3f947ae1 	.word	0x3f947ae1
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f7f7 fe1e 	bl	80005f8 <__aeabi_dmul>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4614      	mov	r4, r2
 80089c2:	461d      	mov	r5, r3
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	3308      	adds	r3, #8
 80089c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	3308      	adds	r3, #8
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	f7f7 fe10 	bl	80005f8 <__aeabi_dmul>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4620      	mov	r0, r4
 80089de:	4629      	mov	r1, r5
 80089e0:	f7f7 fc54 	bl	800028c <__adddf3>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	461d      	mov	r5, r3
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	3310      	adds	r3, #16
 80089f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	3310      	adds	r3, #16
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fdfc 	bl	80005f8 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f7 fc40 	bl	800028c <__adddf3>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	ec43 2b17 	vmov	d7, r2, r3
 8008a14:	eeb0 0a47 	vmov.f32	s0, s14
 8008a18:	eef0 0a67 	vmov.f32	s1, s15
 8008a1c:	f019 fb16 	bl	802204c <sqrt>
 8008a20:	eeb0 7a40 	vmov.f32	s14, s0
 8008a24:	eef0 7a60 	vmov.f32	s15, s1
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8008a2e:	bf00      	nop
 8008a30:	3728      	adds	r7, #40	@ 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008a38 <imu_proc_task_notif>:

void imu_proc_task_notif() {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 8008a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <imu_proc_task_notif+0x3c>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8008a44:	2300      	movs	r3, #0
 8008a46:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8008a48:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <imu_proc_task_notif+0x40>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	1d3a      	adds	r2, r7, #4
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f012 ff33 	bl	801b8bc <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <imu_proc_task_notif+0x34>
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <imu_proc_task_notif+0x44>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	f3bf 8f6f 	isb	sy
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20003b2c 	.word	0x20003b2c
 8008a78:	20003b7c 	.word	0x20003b7c
 8008a7c:	e000ed04 	.word	0xe000ed04

08008a80 <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 8008a80:	b590      	push	{r4, r7, lr}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	463c      	mov	r4, r7
 8008a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		gyro_proc_data.gx = gyro_data.gz;
		gyro_proc_data.gy = gyro_data.gy;
		gyro_proc_data.gz = -gyro_data.gx;
	} else {

		gyro_proc_data.gx = gyro_data.gx;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	4a22      	ldr	r2, [pc, #136]	@ (8008b18 <gyro_data_ready+0x98>)
 8008a90:	6013      	str	r3, [r2, #0]
		gyro_proc_data.gy = gyro_data.gy;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a20      	ldr	r2, [pc, #128]	@ (8008b18 <gyro_data_ready+0x98>)
 8008a96:	6053      	str	r3, [r2, #4]
		if (gyro_data.gz > 0.02 || gyro_data.gz < -0.02){
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7f7 fd54 	bl	8000548 <__aeabi_f2d>
 8008aa0:	a319      	add	r3, pc, #100	@ (adr r3, 8008b08 <gyro_data_ready+0x88>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f8 f837 	bl	8000b18 <__aeabi_dcmpgt>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <gyro_data_ready+0x48>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7f7 fd48 	bl	8000548 <__aeabi_f2d>
 8008ab8:	a315      	add	r3, pc, #84	@ (adr r3, 8008b10 <gyro_data_ready+0x90>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f8 f80d 	bl	8000adc <__aeabi_dcmplt>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <gyro_data_ready+0x50>
			gyro_proc_data.gz = gyro_data.gz;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4a13      	ldr	r2, [pc, #76]	@ (8008b18 <gyro_data_ready+0x98>)
 8008acc:	6093      	str	r3, [r2, #8]
 8008ace:	e003      	b.n	8008ad8 <gyro_data_ready+0x58>
		} else {
			gyro_proc_data.gz = 0;
 8008ad0:	4b11      	ldr	r3, [pc, #68]	@ (8008b18 <gyro_data_ready+0x98>)
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	609a      	str	r2, [r3, #8]
		}

	}
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4a0f      	ldr	r2, [pc, #60]	@ (8008b18 <gyro_data_ready+0x98>)
 8008adc:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 8008ade:	4b0f      	ldr	r3, [pc, #60]	@ (8008b1c <gyro_data_ready+0x9c>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	f043 0301 	orr.w	r3, r3, #1
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8008b1c <gyro_data_ready+0x9c>)
 8008aea:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if (update_flag == 0b111|| update_flag == 0b011) {
 8008aec:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <gyro_data_ready+0x9c>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b07      	cmp	r3, #7
 8008af2:	d003      	beq.n	8008afc <gyro_data_ready+0x7c>
 8008af4:	4b09      	ldr	r3, [pc, #36]	@ (8008b1c <gyro_data_ready+0x9c>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d101      	bne.n	8008b00 <gyro_data_ready+0x80>
		imu_proc_task_notif();
 8008afc:	f7ff ff9c 	bl	8008a38 <imu_proc_task_notif>
	}
}
 8008b00:	bf00      	nop
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd90      	pop	{r4, r7, pc}
 8008b08:	47ae147b 	.word	0x47ae147b
 8008b0c:	3f947ae1 	.word	0x3f947ae1
 8008b10:	47ae147b 	.word	0x47ae147b
 8008b14:	bf947ae1 	.word	0xbf947ae1
 8008b18:	20003b10 	.word	0x20003b10
 8008b1c:	20003b2c 	.word	0x20003b2c

08008b20 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8008b20:	b590      	push	{r4, r7, lr}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	463c      	mov	r4, r7
 8008b28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		accel_proc_data.ax = accel_data.az;
		accel_proc_data.ay = accel_data.ay;
		accel_proc_data.az = -accel_data.ax;
	} else {

		accel_proc_data.ax = accel_data.ax;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	4a10      	ldr	r2, [pc, #64]	@ (8008b70 <accel_data_ready+0x50>)
 8008b30:	6013      	str	r3, [r2, #0]
		accel_proc_data.ay = accel_data.ay;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a0e      	ldr	r2, [pc, #56]	@ (8008b70 <accel_data_ready+0x50>)
 8008b36:	6053      	str	r3, [r2, #4]
		accel_proc_data.az = accel_data.az;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8008b70 <accel_data_ready+0x50>)
 8008b3c:	6093      	str	r3, [r2, #8]
	}

	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4a0b      	ldr	r2, [pc, #44]	@ (8008b70 <accel_data_ready+0x50>)
 8008b42:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8008b44:	4b0b      	ldr	r3, [pc, #44]	@ (8008b74 <accel_data_ready+0x54>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f043 0302 	orr.w	r3, r3, #2
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	4b09      	ldr	r3, [pc, #36]	@ (8008b74 <accel_data_ready+0x54>)
 8008b50:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if (update_flag == 0b111 || update_flag == 0b011) {
 8008b52:	4b08      	ldr	r3, [pc, #32]	@ (8008b74 <accel_data_ready+0x54>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	2b07      	cmp	r3, #7
 8008b58:	d003      	beq.n	8008b62 <accel_data_ready+0x42>
 8008b5a:	4b06      	ldr	r3, [pc, #24]	@ (8008b74 <accel_data_ready+0x54>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d101      	bne.n	8008b66 <accel_data_ready+0x46>
		imu_proc_task_notif();
 8008b62:	f7ff ff69 	bl	8008a38 <imu_proc_task_notif>
	}
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd90      	pop	{r4, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20003b00 	.word	0x20003b00
 8008b74:	20003b2c 	.word	0x20003b2c

08008b78 <mag_data_ready>:

void mag_data_ready(mag_data_t mag_data) {
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	1d3b      	adds	r3, r7, #4
 8008b80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mag_proc_data.mx = mag_data.mx;
 8008b84:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008b88:	4b0c      	ldr	r3, [pc, #48]	@ (8008bbc <mag_data_ready+0x44>)
 8008b8a:	801a      	strh	r2, [r3, #0]
	mag_proc_data.my = mag_data.my;
 8008b8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b90:	4b0a      	ldr	r3, [pc, #40]	@ (8008bbc <mag_data_ready+0x44>)
 8008b92:	805a      	strh	r2, [r3, #2]
	mag_proc_data.mz = mag_data.mz;
 8008b94:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008b98:	4b08      	ldr	r3, [pc, #32]	@ (8008bbc <mag_data_ready+0x44>)
 8008b9a:	809a      	strh	r2, [r3, #4]
	mag_proc_data.last_mag_update = mag_data.last_mag_update;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4a07      	ldr	r2, [pc, #28]	@ (8008bbc <mag_data_ready+0x44>)
 8008ba0:	6093      	str	r3, [r2, #8]

	update_flag |= 1 << 2;
 8008ba2:	4b07      	ldr	r3, [pc, #28]	@ (8008bc0 <mag_data_ready+0x48>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	f043 0304 	orr.w	r3, r3, #4
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	4b04      	ldr	r3, [pc, #16]	@ (8008bc0 <mag_data_ready+0x48>)
 8008bae:	701a      	strb	r2, [r3, #0]
	if (update_flag == 0b111) {
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}
 8008bb0:	bf00      	nop
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20003b20 	.word	0x20003b20
 8008bc0:	20003b2c 	.word	0x20003b2c

08008bc4 <imu_processing_task>:

void imu_processing_task(void *argument) {
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	imu_start_ints();
 8008bcc:	f7f8 fffe 	bl	8001bcc <imu_start_ints>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	f012 fe25 	bl	801b824 <ulTaskNotifyTake>
	imu_attitude_update();
 8008bda:	f000 f815 	bl	8008c08 <imu_attitude_update>
//	quat_startup();
	while (1) {
		fusion();
 8008bde:	f7ff fbbb 	bl	8008358 <fusion>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008be2:	f04f 31ff 	mov.w	r1, #4294967295
 8008be6:	2001      	movs	r0, #1
 8008be8:	f012 fe1c 	bl	801b824 <ulTaskNotifyTake>
		imu_attitude_update();
 8008bec:	f000 f80c 	bl	8008c08 <imu_attitude_update>
		portYIELD();
 8008bf0:	4b04      	ldr	r3, [pc, #16]	@ (8008c04 <imu_processing_task+0x40>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
		fusion();
 8008c00:	bf00      	nop
 8008c02:	e7ec      	b.n	8008bde <imu_processing_task+0x1a>
 8008c04:	e000ed04 	.word	0xe000ed04

08008c08 <imu_attitude_update>:
	}
}


void imu_attitude_update(void) {
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0

}
 8008c0c:	bf00      	nop
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
	...

08008c18 <leg_kinematic_task>:
double left_F_control;
double left_Tp_control;
double right_F_control;
double right_Tp_control;
extern Target target;
void leg_kinematic_task(void *argument) {
 8008c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c1c:	ed2d 8b04 	vpush	{d8-d9}
 8008c20:	b0da      	sub	sp, #360	@ 0x168
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8008c28:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8008c2c:	6018      	str	r0, [r3, #0]
	double leftTorque[2];
	double rightTorque[2];
	double starttime = 0;
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	f04f 0300 	mov.w	r3, #0
 8008c36:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
	double endtime = 0;
 8008c3a:	f04f 0200 	mov.w	r2, #0
 8008c3e:	f04f 0300 	mov.w	r3, #0
 8008c42:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
	PID left_Tp;
	PID right_F;
	PID right_Tp;
    TickType_t start_time;
    while (1) {
        endtime = get_microseconds();
 8008c46:	f7f9 fabb 	bl	80021c0 <get_microseconds>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7f7 fc59 	bl	8000504 <__aeabi_ui2d>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
        dt = endtime - starttime;
 8008c5a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8008c5e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8008c62:	f7f7 fb11 	bl	8000288 <__aeabi_dsub>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
        start_time = xTaskGetTickCount();
 8008c6e:	f012 f95d 	bl	801af2c <xTaskGetTickCount>
 8008c72:	4602      	mov	r2, r0
 8008c74:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8008c78:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8008c7c:	601a      	str	r2, [r3, #0]
        starttime = get_microseconds();
 8008c7e:	f7f9 fa9f 	bl	80021c0 <get_microseconds>
 8008c82:	4603      	mov	r3, r0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7f7 fc3d 	bl	8000504 <__aeabi_ui2d>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
//        g_can_motors[FL_MOTOR_ID-1].torque = leftTorque[1];
//        g_can_motors[BL_MOTOR_ID-1].torque = rightTorque[0];
//        g_can_motors[BR_MOTOR_ID-1].torque = rightTorque[1];
        ///////////////////

                leg_pos(g_can_motors[FR_MOTOR_ID-1].angle_rad,g_can_motors[FL_MOTOR_ID-1].angle_rad,left_leg_pos);
 8008c92:	4bcf      	ldr	r3, [pc, #828]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008c94:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7f7 fc55 	bl	8000548 <__aeabi_f2d>
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	468b      	mov	fp, r1
 8008ca2:	4bcb      	ldr	r3, [pc, #812]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008ca4:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7f7 fc4c 	bl	8000548 <__aeabi_f2d>
 8008cb0:	ec41 0b17 	vmov	d7, r0, r1
 8008cb4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008cb8:	4618      	mov	r0, r3
 8008cba:	eeb0 1a47 	vmov.f32	s2, s14
 8008cbe:	eef0 1a67 	vmov.f32	s3, s15
 8008cc2:	ec4b ab10 	vmov	d0, sl, fp
 8008cc6:	f000 f993 	bl	8008ff0 <leg_pos>
                leftLegPos.length = left_leg_pos[0];
 8008cca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8008cce:	4610      	mov	r0, r2
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f7f7 ff89 	bl	8000be8 <__aeabi_d2f>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4abe      	ldr	r2, [pc, #760]	@ (8008fd4 <leg_kinematic_task+0x3bc>)
 8008cda:	6053      	str	r3, [r2, #4]
                leftLegPos.angle = left_leg_pos[1];
 8008cdc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f7f7 ff80 	bl	8000be8 <__aeabi_d2f>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4aba      	ldr	r2, [pc, #744]	@ (8008fd4 <leg_kinematic_task+0x3bc>)
 8008cec:	6013      	str	r3, [r2, #0]
                leg_pos(g_can_motors[BL_MOTOR_ID-1].angle_rad,g_can_motors[BR_MOTOR_ID-1].angle_rad,right_leg_pos);
 8008cee:	4bb8      	ldr	r3, [pc, #736]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008cf0:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7f7 fc26 	bl	8000548 <__aeabi_f2d>
 8008cfc:	4682      	mov	sl, r0
 8008cfe:	468b      	mov	fp, r1
 8008d00:	4bb3      	ldr	r3, [pc, #716]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008d02:	f503 63d5 	add.w	r3, r3, #1704	@ 0x6a8
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7f7 fc1d 	bl	8000548 <__aeabi_f2d>
 8008d0e:	ec41 0b17 	vmov	d7, r0, r1
 8008d12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d16:	4618      	mov	r0, r3
 8008d18:	eeb0 1a47 	vmov.f32	s2, s14
 8008d1c:	eef0 1a67 	vmov.f32	s3, s15
 8008d20:	ec4b ab10 	vmov	d0, sl, fp
 8008d24:	f000 f964 	bl	8008ff0 <leg_pos>
                rightLegPos.length = right_leg_pos[0];
 8008d28:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f7f7 ff5a 	bl	8000be8 <__aeabi_d2f>
 8008d34:	4603      	mov	r3, r0
 8008d36:	4aa8      	ldr	r2, [pc, #672]	@ (8008fd8 <leg_kinematic_task+0x3c0>)
 8008d38:	6053      	str	r3, [r2, #4]
                rightLegPos.angle = right_leg_pos[1];
 8008d3a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4619      	mov	r1, r3
 8008d42:	f7f7 ff51 	bl	8000be8 <__aeabi_d2f>
 8008d46:	4603      	mov	r3, r0
 8008d48:	4aa3      	ldr	r2, [pc, #652]	@ (8008fd8 <leg_kinematic_task+0x3c0>)
 8008d4a:	6013      	str	r3, [r2, #0]
        //		PID_Init(&left_F, 5000, 0, 0.01, -1000, 1000); // Example gains: kp = 1.0, ki = 0.1, kd = 0.01, min_output = -10, max_output = 10
        //		PID_Init(&left_Tp, 0.01, 0.01, 0.01, -10, 10); // Example gains: kp = 1.0, ki = 0.1, kd = 0.01, min_output = -10, max_output = 10
                PID_Init(&left_F, 1000, 0, 0.01, -1000, 1000);
 8008d4c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008d50:	ed9f 4b89 	vldr	d4, [pc, #548]	@ 8008f78 <leg_kinematic_task+0x360>
 8008d54:	ed9f 3b8a 	vldr	d3, [pc, #552]	@ 8008f80 <leg_kinematic_task+0x368>
 8008d58:	ed9f 2b8b 	vldr	d2, [pc, #556]	@ 8008f88 <leg_kinematic_task+0x370>
 8008d5c:	ed9f 1b8c 	vldr	d1, [pc, #560]	@ 8008f90 <leg_kinematic_task+0x378>
 8008d60:	ed9f 0b85 	vldr	d0, [pc, #532]	@ 8008f78 <leg_kinematic_task+0x360>
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fb fe8a 	bl	8004a7e <PID_Init>
        		PID_Init(&left_Tp, 1.2, 0, 0, -10, 10);
 8008d6a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008d6e:	ed9f 4b8a 	vldr	d4, [pc, #552]	@ 8008f98 <leg_kinematic_task+0x380>
 8008d72:	ed9f 3b8b 	vldr	d3, [pc, #556]	@ 8008fa0 <leg_kinematic_task+0x388>
 8008d76:	ed9f 2b86 	vldr	d2, [pc, #536]	@ 8008f90 <leg_kinematic_task+0x378>
 8008d7a:	ed9f 1b85 	vldr	d1, [pc, #532]	@ 8008f90 <leg_kinematic_task+0x378>
 8008d7e:	ed9f 0b8a 	vldr	d0, [pc, #552]	@ 8008fa8 <leg_kinematic_task+0x390>
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fb fe7b 	bl	8004a7e <PID_Init>

        //        PID_Init(&right_F, 5000, 0, 0.01, -1000, 1000); // Example gains: kp = 1.0, ki = 0.1, kd = 0.01, min_output = -10, max_output = 10
        //        PID_Init(&right_Tp, 0.01, 0.01, 0.01, -10, 10);
        		PID_Init(&right_F, 1000, 0, 0.01, -1000, 1000);
 8008d88:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008d8c:	ed9f 4b7a 	vldr	d4, [pc, #488]	@ 8008f78 <leg_kinematic_task+0x360>
 8008d90:	ed9f 3b7b 	vldr	d3, [pc, #492]	@ 8008f80 <leg_kinematic_task+0x368>
 8008d94:	ed9f 2b7c 	vldr	d2, [pc, #496]	@ 8008f88 <leg_kinematic_task+0x370>
 8008d98:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8008f90 <leg_kinematic_task+0x378>
 8008d9c:	ed9f 0b76 	vldr	d0, [pc, #472]	@ 8008f78 <leg_kinematic_task+0x360>
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fb fe6c 	bl	8004a7e <PID_Init>
                PID_Init(&right_Tp, 1.2, 0, 0, -10, 10);
 8008da6:	f107 0310 	add.w	r3, r7, #16
 8008daa:	ed9f 4b7b 	vldr	d4, [pc, #492]	@ 8008f98 <leg_kinematic_task+0x380>
 8008dae:	ed9f 3b7c 	vldr	d3, [pc, #496]	@ 8008fa0 <leg_kinematic_task+0x388>
 8008db2:	ed9f 2b77 	vldr	d2, [pc, #476]	@ 8008f90 <leg_kinematic_task+0x378>
 8008db6:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 8008f90 <leg_kinematic_task+0x378>
 8008dba:	ed9f 0b7b 	vldr	d0, [pc, #492]	@ 8008fa8 <leg_kinematic_task+0x390>
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fb fe5d 	bl	8004a7e <PID_Init>

                left_F_control = -PID_Compute(&left_F, 0.12, leftLegPos.length, dt, 0.0001);
 8008dc4:	4b83      	ldr	r3, [pc, #524]	@ (8008fd4 <leg_kinematic_task+0x3bc>)
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7f7 fbbd 	bl	8000548 <__aeabi_f2d>
 8008dce:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8008dd2:	ed9f 3b77 	vldr	d3, [pc, #476]	@ 8008fb0 <leg_kinematic_task+0x398>
 8008dd6:	ed97 2b54 	vldr	d2, [r7, #336]	@ 0x150
 8008dda:	ec41 0b11 	vmov	d1, r0, r1
 8008dde:	ed9f 0b76 	vldr	d0, [pc, #472]	@ 8008fb8 <leg_kinematic_task+0x3a0>
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fb fe86 	bl	8004af4 <PID_Compute>
 8008de8:	ec53 2b10 	vmov	r2, r3, d0
 8008dec:	4614      	mov	r4, r2
 8008dee:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8008df2:	4b7a      	ldr	r3, [pc, #488]	@ (8008fdc <leg_kinematic_task+0x3c4>)
 8008df4:	e9c3 4500 	strd	r4, r5, [r3]
                left_Tp_control = -PID_Compute(&left_Tp, PI/2, leftLegPos.angle, dt, 0.00001);
 8008df8:	4b76      	ldr	r3, [pc, #472]	@ (8008fd4 <leg_kinematic_task+0x3bc>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7f7 fba3 	bl	8000548 <__aeabi_f2d>
 8008e02:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008e06:	ed9f 3b6e 	vldr	d3, [pc, #440]	@ 8008fc0 <leg_kinematic_task+0x3a8>
 8008e0a:	ed97 2b54 	vldr	d2, [r7, #336]	@ 0x150
 8008e0e:	ec41 0b11 	vmov	d1, r0, r1
 8008e12:	ed9f 0b6d 	vldr	d0, [pc, #436]	@ 8008fc8 <leg_kinematic_task+0x3b0>
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fb fe6c 	bl	8004af4 <PID_Compute>
 8008e1c:	ec53 2b10 	vmov	r2, r3, d0
 8008e20:	4690      	mov	r8, r2
 8008e22:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8008e26:	4b6e      	ldr	r3, [pc, #440]	@ (8008fe0 <leg_kinematic_task+0x3c8>)
 8008e28:	e9c3 8900 	strd	r8, r9, [r3]

                right_F_control = PID_Compute(&right_F, 0.12, rightLegPos.length, dt, 0.0001);
 8008e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8008fd8 <leg_kinematic_task+0x3c0>)
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f7 fb89 	bl	8000548 <__aeabi_f2d>
 8008e36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008e3a:	ed9f 3b5d 	vldr	d3, [pc, #372]	@ 8008fb0 <leg_kinematic_task+0x398>
 8008e3e:	ed97 2b54 	vldr	d2, [r7, #336]	@ 0x150
 8008e42:	ec41 0b11 	vmov	d1, r0, r1
 8008e46:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8008fb8 <leg_kinematic_task+0x3a0>
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fb fe52 	bl	8004af4 <PID_Compute>
 8008e50:	eeb0 7a40 	vmov.f32	s14, s0
 8008e54:	eef0 7a60 	vmov.f32	s15, s1
 8008e58:	4b62      	ldr	r3, [pc, #392]	@ (8008fe4 <leg_kinematic_task+0x3cc>)
 8008e5a:	ed83 7b00 	vstr	d7, [r3]
                right_Tp_control = PID_Compute(&right_Tp, PI/2, rightLegPos.angle, dt, 0.00001);
 8008e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8008fd8 <leg_kinematic_task+0x3c0>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f7 fb70 	bl	8000548 <__aeabi_f2d>
 8008e68:	f107 0310 	add.w	r3, r7, #16
 8008e6c:	ed9f 3b54 	vldr	d3, [pc, #336]	@ 8008fc0 <leg_kinematic_task+0x3a8>
 8008e70:	ed97 2b54 	vldr	d2, [r7, #336]	@ 0x150
 8008e74:	ec41 0b11 	vmov	d1, r0, r1
 8008e78:	ed9f 0b53 	vldr	d0, [pc, #332]	@ 8008fc8 <leg_kinematic_task+0x3b0>
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fb fe39 	bl	8004af4 <PID_Compute>
 8008e82:	eeb0 7a40 	vmov.f32	s14, s0
 8008e86:	eef0 7a60 	vmov.f32	s15, s1
 8008e8a:	4b57      	ldr	r3, [pc, #348]	@ (8008fe8 <leg_kinematic_task+0x3d0>)
 8008e8c:	ed83 7b00 	vstr	d7, [r3]

                leg_conv(left_F_control,left_Tp_control,g_can_motors[FR_MOTOR_ID-1].angle_rad,g_can_motors[FL_MOTOR_ID-1].angle_rad,leftTorque);
 8008e90:	4b52      	ldr	r3, [pc, #328]	@ (8008fdc <leg_kinematic_task+0x3c4>)
 8008e92:	ed93 8b00 	vldr	d8, [r3]
 8008e96:	4b52      	ldr	r3, [pc, #328]	@ (8008fe0 <leg_kinematic_task+0x3c8>)
 8008e98:	ed93 9b00 	vldr	d9, [r3]
 8008e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008e9e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7f7 fb50 	bl	8000548 <__aeabi_f2d>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	4b48      	ldr	r3, [pc, #288]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008eae:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7f7 fb47 	bl	8000548 <__aeabi_f2d>
 8008eba:	ec41 0b17 	vmov	d7, r0, r1
 8008ebe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	eeb0 3a47 	vmov.f32	s6, s14
 8008ec8:	eef0 3a67 	vmov.f32	s7, s15
 8008ecc:	ec4b ab12 	vmov	d2, sl, fp
 8008ed0:	eeb0 1a49 	vmov.f32	s2, s18
 8008ed4:	eef0 1a69 	vmov.f32	s3, s19
 8008ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8008edc:	eef0 0a68 	vmov.f32	s1, s17
 8008ee0:	f000 faa6 	bl	8009430 <leg_conv>
                leg_conv(right_F_control,right_Tp_control,g_can_motors[BL_MOTOR_ID-1].angle_rad,g_can_motors[BR_MOTOR_ID-1].angle_rad,rightTorque);
 8008ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8008fe4 <leg_kinematic_task+0x3cc>)
 8008ee6:	ed93 8b00 	vldr	d8, [r3]
 8008eea:	4b3f      	ldr	r3, [pc, #252]	@ (8008fe8 <leg_kinematic_task+0x3d0>)
 8008eec:	ed93 9b00 	vldr	d9, [r3]
 8008ef0:	4b37      	ldr	r3, [pc, #220]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008ef2:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7f7 fb25 	bl	8000548 <__aeabi_f2d>
 8008efe:	4682      	mov	sl, r0
 8008f00:	468b      	mov	fp, r1
 8008f02:	4b33      	ldr	r3, [pc, #204]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008f04:	f503 63d5 	add.w	r3, r3, #1704	@ 0x6a8
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7f7 fb1c 	bl	8000548 <__aeabi_f2d>
 8008f10:	ec41 0b17 	vmov	d7, r0, r1
 8008f14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f18:	4618      	mov	r0, r3
 8008f1a:	eeb0 3a47 	vmov.f32	s6, s14
 8008f1e:	eef0 3a67 	vmov.f32	s7, s15
 8008f22:	ec4b ab12 	vmov	d2, sl, fp
 8008f26:	eeb0 1a49 	vmov.f32	s2, s18
 8008f2a:	eef0 1a69 	vmov.f32	s3, s19
 8008f2e:	eeb0 0a48 	vmov.f32	s0, s16
 8008f32:	eef0 0a68 	vmov.f32	s1, s17
 8008f36:	f000 fa7b 	bl	8009430 <leg_conv>
//                g_can_motors[FR_MOTOR_ID-1].torque = leftTorque[0];
//                g_can_motors[FL_MOTOR_ID-1].torque = leftTorque[1];
                g_can_motors[BL_MOTOR_ID-1].torque = rightTorque[0];
 8008f3a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8008f3e:	4610      	mov	r0, r2
 8008f40:	4619      	mov	r1, r3
 8008f42:	f7f7 fe51 	bl	8000be8 <__aeabi_d2f>
 8008f46:	4602      	mov	r2, r0
 8008f48:	4b21      	ldr	r3, [pc, #132]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008f4a:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 8008f4e:	601a      	str	r2, [r3, #0]
                g_can_motors[BR_MOTOR_ID-1].torque = rightTorque[1];
 8008f50:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8008f54:	4610      	mov	r0, r2
 8008f56:	4619      	mov	r1, r3
 8008f58:	f7f7 fe46 	bl	8000be8 <__aeabi_d2f>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd0 <leg_kinematic_task+0x3b8>)
 8008f60:	f503 63d7 	add.w	r3, r3, #1720	@ 0x6b8
 8008f64:	601a      	str	r2, [r3, #0]
        vTaskDelayUntil(&start_time, 5);
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	2105      	movs	r1, #5
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f011 fe09 	bl	801ab84 <vTaskDelayUntil>
        endtime = get_microseconds();
 8008f72:	bf00      	nop
 8008f74:	e667      	b.n	8008c46 <leg_kinematic_task+0x2e>
 8008f76:	bf00      	nop
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	408f4000 	.word	0x408f4000
 8008f80:	00000000 	.word	0x00000000
 8008f84:	c08f4000 	.word	0xc08f4000
 8008f88:	47ae147b 	.word	0x47ae147b
 8008f8c:	3f847ae1 	.word	0x3f847ae1
	...
 8008f9c:	40240000 	.word	0x40240000
 8008fa0:	00000000 	.word	0x00000000
 8008fa4:	c0240000 	.word	0xc0240000
 8008fa8:	33333333 	.word	0x33333333
 8008fac:	3ff33333 	.word	0x3ff33333
 8008fb0:	eb1c432d 	.word	0xeb1c432d
 8008fb4:	3f1a36e2 	.word	0x3f1a36e2
 8008fb8:	eb851eb8 	.word	0xeb851eb8
 8008fbc:	3fbeb851 	.word	0x3fbeb851
 8008fc0:	88e368f1 	.word	0x88e368f1
 8008fc4:	3ee4f8b5 	.word	0x3ee4f8b5
 8008fc8:	60000000 	.word	0x60000000
 8008fcc:	3ff921fb 	.word	0x3ff921fb
 8008fd0:	20002220 	.word	0x20002220
 8008fd4:	20002018 	.word	0x20002018
 8008fd8:	2000202c 	.word	0x2000202c
 8008fdc:	20003b48 	.word	0x20003b48
 8008fe0:	20003b50 	.word	0x20003b50
 8008fe4:	20003b58 	.word	0x20003b58
 8008fe8:	20003b60 	.word	0x20003b60
 8008fec:	00000000 	.word	0x00000000

08008ff0 <leg_pos>:
 *                double phi4
 *                double pos[2]
 * Return Type  : void
 */
void leg_pos(double phi1, double phi4, double pos[2])
{
 8008ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ff4:	ed2d 8b02 	vpush	{d8}
 8008ff8:	b0a6      	sub	sp, #152	@ 0x98
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	ed87 0b04 	vstr	d0, [r7, #16]
 8009000:	ed87 1b02 	vstr	d1, [r7, #8]
 8009004:	6078      	str	r0, [r7, #4]
  double l1 = 0.07;
 8009006:	f20f 4310 	addw	r3, pc, #1040	@ 0x410
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  double l2 = 0.12;
 8009012:	f20f 430c 	addw	r3, pc, #1036	@ 0x40c
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  double l3 = 0.12;
 800901e:	f20f 4300 	addw	r3, pc, #1024	@ 0x400
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  double l4 = 0.07;
 800902a:	a3fb      	add	r3, pc, #1004	@ (adr r3, 8009418 <leg_pos+0x428>)
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  double l5 = 0.11;
 8009034:	a3fc      	add	r3, pc, #1008	@ (adr r3, 8009428 <leg_pos+0x438>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  // Cartesian coordinates of points B and D
  double YD = l4 * sin(phi4);
 800903e:	ed97 0b02 	vldr	d0, [r7, #8]
 8009042:	f019 fa25 	bl	8022490 <sin>
 8009046:	ec53 2b10 	vmov	r2, r3, d0
 800904a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800904e:	f7f7 fad3 	bl	80005f8 <__aeabi_dmul>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  double YB = l1 * sin(phi1);
 800905a:	ed97 0b04 	vldr	d0, [r7, #16]
 800905e:	f019 fa17 	bl	8022490 <sin>
 8009062:	ec53 2b10 	vmov	r2, r3, d0
 8009066:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800906a:	f7f7 fac5 	bl	80005f8 <__aeabi_dmul>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  double XD = l5 + l4 * cos(phi4);
 8009076:	ed97 0b02 	vldr	d0, [r7, #8]
 800907a:	f019 f9ad 	bl	80223d8 <cos>
 800907e:	ec51 0b10 	vmov	r0, r1, d0
 8009082:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009086:	f7f7 fab7 	bl	80005f8 <__aeabi_dmul>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8009092:	f7f7 f8fb 	bl	800028c <__adddf3>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  double XB = l1 * cos(phi1);
 800909e:	ed97 0b04 	vldr	d0, [r7, #16]
 80090a2:	f019 f999 	bl	80223d8 <cos>
 80090a6:	ec53 2b10 	vmov	r2, r3, d0
 80090aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80090ae:	f7f7 faa3 	bl	80005f8 <__aeabi_dmul>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

  // Distance between points B and D
  double lBD = sqrt((XD - XB)*(XD - XB) + (YD - YB)*(YD - YB));
 80090ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80090c2:	f7f7 f8e1 	bl	8000288 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4614      	mov	r4, r2
 80090cc:	461d      	mov	r5, r3
 80090ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80090d6:	f7f7 f8d7 	bl	8000288 <__aeabi_dsub>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4614      	mov	r4, r2
 80090ec:	461d      	mov	r5, r3
 80090ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80090f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090f6:	f7f7 f8c7 	bl	8000288 <__aeabi_dsub>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4690      	mov	r8, r2
 8009100:	4699      	mov	r9, r3
 8009102:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800910a:	f7f7 f8bd 	bl	8000288 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4640      	mov	r0, r8
 8009114:	4649      	mov	r1, r9
 8009116:	f7f7 fa6f 	bl	80005f8 <__aeabi_dmul>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	f7f7 f8b3 	bl	800028c <__adddf3>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	ec43 2b17 	vmov	d7, r2, r3
 800912e:	eeb0 0a47 	vmov.f32	s0, s14
 8009132:	eef0 0a67 	vmov.f32	s1, s15
 8009136:	f018 ff89 	bl	802204c <sqrt>
 800913a:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  // Calculate phi2
  double A0 = 2 * l2 * (XD - XB);
 800913e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	f7f7 f8a1 	bl	800028c <__adddf3>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4614      	mov	r4, r2
 8009150:	461d      	mov	r5, r3
 8009152:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009156:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800915a:	f7f7 f895 	bl	8000288 <__aeabi_dsub>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f7 fa47 	bl	80005f8 <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  double B0 = 2 * l2 * (YD - YB);
 8009172:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	f7f7 f887 	bl	800028c <__adddf3>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4614      	mov	r4, r2
 8009184:	461d      	mov	r5, r3
 8009186:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800918a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800918e:	f7f7 f87b 	bl	8000288 <__aeabi_dsub>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4620      	mov	r0, r4
 8009198:	4629      	mov	r1, r5
 800919a:	f7f7 fa2d 	bl	80005f8 <__aeabi_dmul>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  double C0 = l2 * l2 + lBD * lBD - l3 * l3;
 80091a6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80091aa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80091ae:	f7f7 fa23 	bl	80005f8 <__aeabi_dmul>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4614      	mov	r4, r2
 80091b8:	461d      	mov	r5, r3
 80091ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80091c2:	f7f7 fa19 	bl	80005f8 <__aeabi_dmul>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4620      	mov	r0, r4
 80091cc:	4629      	mov	r1, r5
 80091ce:	f7f7 f85d 	bl	800028c <__adddf3>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4614      	mov	r4, r2
 80091d8:	461d      	mov	r5, r3
 80091da:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80091de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80091e2:	f7f7 fa09 	bl	80005f8 <__aeabi_dmul>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 f84b 	bl	8000288 <__aeabi_dsub>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  double phi2 = 2 * atan2((B0 + sqrt(A0 * A0 + B0 * B0 - C0 * C0)), A0 + C0);
 80091fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4614      	mov	r4, r2
 800920c:	461d      	mov	r5, r3
 800920e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009212:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 f833 	bl	800028c <__adddf3>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4614      	mov	r4, r2
 800922c:	461d      	mov	r5, r3
 800922e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009232:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009236:	f7f7 f9df 	bl	80005f8 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 f821 	bl	8000288 <__aeabi_dsub>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	ec43 2b17 	vmov	d7, r2, r3
 800924e:	eeb0 0a47 	vmov.f32	s0, s14
 8009252:	eef0 0a67 	vmov.f32	s1, s15
 8009256:	f018 fef9 	bl	802204c <sqrt>
 800925a:	ec51 0b10 	vmov	r0, r1, d0
 800925e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009262:	f7f7 f813 	bl	800028c <__adddf3>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	ec43 2b18 	vmov	d8, r2, r3
 800926e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009272:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8009276:	f7f7 f809 	bl	800028c <__adddf3>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	ec43 2b17 	vmov	d7, r2, r3
 8009282:	eeb0 1a47 	vmov.f32	s2, s14
 8009286:	eef0 1a67 	vmov.f32	s3, s15
 800928a:	eeb0 0a48 	vmov.f32	s0, s16
 800928e:	eef0 0a68 	vmov.f32	s1, s17
 8009292:	f018 fe69 	bl	8021f68 <atan2>
 8009296:	ec51 0b10 	vmov	r0, r1, d0
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	f7f6 fff5 	bl	800028c <__adddf3>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

  // Cartesian coordinates of point C
  double XC = l1 * cos(phi1) + l2 * cos(phi2);
 80092aa:	ed97 0b04 	vldr	d0, [r7, #16]
 80092ae:	f019 f893 	bl	80223d8 <cos>
 80092b2:	ec51 0b10 	vmov	r0, r1, d0
 80092b6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4614      	mov	r4, r2
 80092c4:	461d      	mov	r5, r3
 80092c6:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80092ca:	f019 f885 	bl	80223d8 <cos>
 80092ce:	ec51 0b10 	vmov	r0, r1, d0
 80092d2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80092d6:	f7f7 f98f 	bl	80005f8 <__aeabi_dmul>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f6 ffd3 	bl	800028c <__adddf3>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double YC = l1 * sin(phi1) + l2 * sin(phi2);
 80092ee:	ed97 0b04 	vldr	d0, [r7, #16]
 80092f2:	f019 f8cd 	bl	8022490 <sin>
 80092f6:	ec51 0b10 	vmov	r0, r1, d0
 80092fa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80092fe:	f7f7 f97b 	bl	80005f8 <__aeabi_dmul>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4614      	mov	r4, r2
 8009308:	461d      	mov	r5, r3
 800930a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800930e:	f019 f8bf 	bl	8022490 <sin>
 8009312:	ec51 0b10 	vmov	r0, r1, d0
 8009316:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800931a:	f7f7 f96d 	bl	80005f8 <__aeabi_dmul>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4620      	mov	r0, r4
 8009324:	4629      	mov	r1, r5
 8009326:	f7f6 ffb1 	bl	800028c <__adddf3>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	e9c7 2306 	strd	r2, r3, [r7, #24]

  // Leg length and angle
  pos[0] = sqrt((XC - l5 / 2) * (XC - l5 / 2) + YC * YC);
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800933a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800933e:	f7f7 fa85 	bl	800084c <__aeabi_ddiv>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800934a:	f7f6 ff9d 	bl	8000288 <__aeabi_dsub>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4614      	mov	r4, r2
 8009354:	461d      	mov	r5, r3
 8009356:	f04f 0200 	mov.w	r2, #0
 800935a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800935e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8009362:	f7f7 fa73 	bl	800084c <__aeabi_ddiv>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800936e:	f7f6 ff8b 	bl	8000288 <__aeabi_dsub>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4620      	mov	r0, r4
 8009378:	4629      	mov	r1, r5
 800937a:	f7f7 f93d 	bl	80005f8 <__aeabi_dmul>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4614      	mov	r4, r2
 8009384:	461d      	mov	r5, r3
 8009386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800938a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800938e:	f7f7 f933 	bl	80005f8 <__aeabi_dmul>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4620      	mov	r0, r4
 8009398:	4629      	mov	r1, r5
 800939a:	f7f6 ff77 	bl	800028c <__adddf3>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	ec43 2b17 	vmov	d7, r2, r3
 80093a6:	eeb0 0a47 	vmov.f32	s0, s14
 80093aa:	eef0 0a67 	vmov.f32	s1, s15
 80093ae:	f018 fe4d 	bl	802204c <sqrt>
 80093b2:	eeb0 7a40 	vmov.f32	s14, s0
 80093b6:	eef0 7a60 	vmov.f32	s15, s1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	ed83 7b00 	vstr	d7, [r3]
  pos[1] = atan2(YC, XC - l5 / 2);
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80093c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80093cc:	f7f7 fa3e 	bl	800084c <__aeabi_ddiv>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80093d8:	f7f6 ff56 	bl	8000288 <__aeabi_dsub>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	ec43 2b17 	vmov	d7, r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 0408 	add.w	r4, r3, #8
 80093ea:	eeb0 1a47 	vmov.f32	s2, s14
 80093ee:	eef0 1a67 	vmov.f32	s3, s15
 80093f2:	ed97 0b06 	vldr	d0, [r7, #24]
 80093f6:	f018 fdb7 	bl	8021f68 <atan2>
 80093fa:	eeb0 7a40 	vmov.f32	s14, s0
 80093fe:	eef0 7a60 	vmov.f32	s15, s1
 8009402:	ed84 7b00 	vstr	d7, [r4]
}
 8009406:	bf00      	nop
 8009408:	3798      	adds	r7, #152	@ 0x98
 800940a:	46bd      	mov	sp, r7
 800940c:	ecbd 8b02 	vpop	{d8}
 8009410:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009414:	f3af 8000 	nop.w
 8009418:	1eb851ec 	.word	0x1eb851ec
 800941c:	3fb1eb85 	.word	0x3fb1eb85
 8009420:	eb851eb8 	.word	0xeb851eb8
 8009424:	3fbeb851 	.word	0x3fbeb851
 8009428:	c28f5c29 	.word	0xc28f5c29
 800942c:	3fbc28f5 	.word	0x3fbc28f5

08009430 <leg_conv>:
//  pos[0] = sqrt(t5 * t5 + t4 * t4);
//  pos[1] = rt_atan2d_snf(t5, t4);
//}

void leg_conv(double F, double Tp, double phi1, double phi4, double T[2])
{
 8009430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009434:	ed2d 8b02 	vpush	{d8}
 8009438:	b09c      	sub	sp, #112	@ 0x70
 800943a:	af00      	add	r7, sp, #0
 800943c:	ed87 0b08 	vstr	d0, [r7, #32]
 8009440:	ed87 1b06 	vstr	d1, [r7, #24]
 8009444:	ed87 2b04 	vstr	d2, [r7, #16]
 8009448:	ed87 3b02 	vstr	d3, [r7, #8]
 800944c:	6078      	str	r0, [r7, #4]
  double YD;
  double lBD;
  double phi2;

  // Calculate YD and YB_tmp based on input angles
  YD = 0.07 * sin(phi4);
 800944e:	ed97 0b02 	vldr	d0, [r7, #8]
 8009452:	f019 f81d 	bl	8022490 <sin>
 8009456:	ec51 0b10 	vmov	r0, r1, d0
 800945a:	f20f 4314 	addw	r3, pc, #1044	@ 0x414
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f7 f8c9 	bl	80005f8 <__aeabi_dmul>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  YB_tmp = 0.07 * sin(phi1);
 800946e:	ed97 0b04 	vldr	d0, [r7, #16]
 8009472:	f019 f80d 	bl	8022490 <sin>
 8009476:	ec51 0b10 	vmov	r0, r1, d0
 800947a:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8009870 <leg_conv+0x440>)
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f7f7 f8ba 	bl	80005f8 <__aeabi_dmul>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

  // Calculate XD and XB_tmp based on input angles
  XD = 0.07 * cos(phi4) + 0.11;
 800948c:	ed97 0b02 	vldr	d0, [r7, #8]
 8009490:	f018 ffa2 	bl	80223d8 <cos>
 8009494:	ec51 0b10 	vmov	r0, r1, d0
 8009498:	a3f5      	add	r3, pc, #980	@ (adr r3, 8009870 <leg_conv+0x440>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f7 f8ab 	bl	80005f8 <__aeabi_dmul>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4610      	mov	r0, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	a3f3      	add	r3, pc, #972	@ (adr r3, 8009878 <leg_conv+0x448>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f6 feec 	bl	800028c <__adddf3>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  XB_tmp = 0.07 * cos(phi1);
 80094bc:	ed97 0b04 	vldr	d0, [r7, #16]
 80094c0:	f018 ff8a 	bl	80223d8 <cos>
 80094c4:	ec51 0b10 	vmov	r0, r1, d0
 80094c8:	a3e9      	add	r3, pc, #932	@ (adr r3, 8009870 <leg_conv+0x440>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f7 f893 	bl	80005f8 <__aeabi_dmul>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

  // Intermediate distance and angle calculations
  C0 = XD - XB_tmp;
 80094da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80094de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80094e2:	f7f6 fed1 	bl	8000288 <__aeabi_dsub>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  B0 = YD - YB_tmp;
 80094ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80094f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094f6:	f7f6 fec7 	bl	8000288 <__aeabi_dsub>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  lBD = sqrt(C0 * C0 + B0 * B0);
 8009502:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009506:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800950a:	f7f7 f875 	bl	80005f8 <__aeabi_dmul>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4614      	mov	r4, r2
 8009514:	461d      	mov	r5, r3
 8009516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800951a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800951e:	f7f7 f86b 	bl	80005f8 <__aeabi_dmul>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4620      	mov	r0, r4
 8009528:	4629      	mov	r1, r5
 800952a:	f7f6 feaf 	bl	800028c <__adddf3>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	ec43 2b17 	vmov	d7, r2, r3
 8009536:	eeb0 0a47 	vmov.f32	s0, s14
 800953a:	eef0 0a67 	vmov.f32	s1, s15
 800953e:	f018 fd85 	bl	802204c <sqrt>
 8009542:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

  // More calculations involving geometry and angles
  A0 = 0.25 * C0;
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	4bc7      	ldr	r3, [pc, #796]	@ (8009868 <leg_conv+0x438>)
 800954c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8009550:	f7f7 f852 	bl	80005f8 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  B0 *= 0.25;
 800955c:	f04f 0200 	mov.w	r2, #0
 8009560:	4bc1      	ldr	r3, [pc, #772]	@ (8009868 <leg_conv+0x438>)
 8009562:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8009566:	f7f7 f847 	bl	80005f8 <__aeabi_dmul>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  C0 = (lBD * lBD + 0.015625) - 0.015625;
 8009572:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009576:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800957a:	f7f7 f83d 	bl	80005f8 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4610      	mov	r0, r2
 8009584:	4619      	mov	r1, r3
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	4bb8      	ldr	r3, [pc, #736]	@ (800986c <leg_conv+0x43c>)
 800958c:	f7f6 fe7e 	bl	800028c <__adddf3>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4610      	mov	r0, r2
 8009596:	4619      	mov	r1, r3
 8009598:	f04f 0200 	mov.w	r2, #0
 800959c:	4bb3      	ldr	r3, [pc, #716]	@ (800986c <leg_conv+0x43c>)
 800959e:	f7f6 fe73 	bl	8000288 <__aeabi_dsub>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

  // Calculate phi2 using an arctangent function
  phi2 = 2.0 * atan2(B0 + sqrt((A0 * A0 + B0 * B0) - C0 * C0), A0 + C0);
 80095aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80095ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80095b2:	f7f7 f821 	bl	80005f8 <__aeabi_dmul>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4614      	mov	r4, r2
 80095bc:	461d      	mov	r5, r3
 80095be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80095c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f6 fe5b 	bl	800028c <__adddf3>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4614      	mov	r4, r2
 80095dc:	461d      	mov	r5, r3
 80095de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80095e6:	f7f7 f807 	bl	80005f8 <__aeabi_dmul>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4620      	mov	r0, r4
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f6 fe49 	bl	8000288 <__aeabi_dsub>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	ec43 2b17 	vmov	d7, r2, r3
 80095fe:	eeb0 0a47 	vmov.f32	s0, s14
 8009602:	eef0 0a67 	vmov.f32	s1, s15
 8009606:	f018 fd21 	bl	802204c <sqrt>
 800960a:	ec51 0b10 	vmov	r0, r1, d0
 800960e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009612:	f7f6 fe3b 	bl	800028c <__adddf3>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	ec43 2b18 	vmov	d8, r2, r3
 800961e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009622:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009626:	f7f6 fe31 	bl	800028c <__adddf3>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	ec43 2b17 	vmov	d7, r2, r3
 8009632:	eeb0 1a47 	vmov.f32	s2, s14
 8009636:	eef0 1a67 	vmov.f32	s3, s15
 800963a:	eeb0 0a48 	vmov.f32	s0, s16
 800963e:	eef0 0a68 	vmov.f32	s1, s17
 8009642:	f018 fc91 	bl	8021f68 <atan2>
 8009646:	ec51 0b10 	vmov	r0, r1, d0
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	f7f6 fe1d 	bl	800028c <__adddf3>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

  // Calculate additional angles and distances
  C0 = 0.12 * cos(phi2);
 800965a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800965e:	f018 febb 	bl	80223d8 <cos>
 8009662:	ec51 0b10 	vmov	r0, r1, d0
 8009666:	a37c      	add	r3, pc, #496	@ (adr r3, 8009858 <leg_conv+0x428>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f6 ffc4 	bl	80005f8 <__aeabi_dmul>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  B0 = 0.12 * sin(phi2);
 8009678:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800967c:	f018 ff08 	bl	8022490 <sin>
 8009680:	ec51 0b10 	vmov	r0, r1, d0
 8009684:	a374      	add	r3, pc, #464	@ (adr r3, 8009858 <leg_conv+0x428>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  A0 = atan2((YB_tmp - YD) + B0, (XB_tmp - XD) + C0);
 8009696:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800969a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096ae:	f7f6 fded 	bl	800028c <__adddf3>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	ec43 2b18 	vmov	d8, r2, r3
 80096ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80096be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80096c2:	f7f6 fde1 	bl	8000288 <__aeabi_dsub>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4610      	mov	r0, r2
 80096cc:	4619      	mov	r1, r3
 80096ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80096d2:	f7f6 fddb 	bl	800028c <__adddf3>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	ec43 2b17 	vmov	d7, r2, r3
 80096de:	eeb0 1a47 	vmov.f32	s2, s14
 80096e2:	eef0 1a67 	vmov.f32	s3, s15
 80096e6:	eeb0 0a48 	vmov.f32	s0, s16
 80096ea:	eef0 0a68 	vmov.f32	s1, s17
 80096ee:	f018 fc3b 	bl	8021f68 <atan2>
 80096f2:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

  YD = XB_tmp + C0;
 80096f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80096fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80096fe:	f7f6 fdc5 	bl	800028c <__adddf3>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  C0 = YB_tmp + B0;
 800970a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800970e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8009712:	f7f6 fdbb 	bl	800028c <__adddf3>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  lBD = atan2(C0, YD - 0.055);
 800971e:	a350      	add	r3, pc, #320	@ (adr r3, 8009860 <leg_conv+0x430>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009728:	f7f6 fdae 	bl	8000288 <__aeabi_dsub>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	ec43 2b17 	vmov	d7, r2, r3
 8009734:	eeb0 1a47 	vmov.f32	s2, s14
 8009738:	eef0 1a67 	vmov.f32	s3, s15
 800973c:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8009740:	f018 fc12 	bl	8021f68 <atan2>
 8009744:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

  // Final calculations involving sin and cos of the angles
  XD = sin(phi1 - phi2);
 8009748:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800974c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009750:	f7f6 fd9a 	bl	8000288 <__aeabi_dsub>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	ec43 2b17 	vmov	d7, r2, r3
 800975c:	eeb0 0a47 	vmov.f32	s0, s14
 8009760:	eef0 0a67 	vmov.f32	s1, s15
 8009764:	f018 fe94 	bl	8022490 <sin>
 8009768:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
  XB_tmp = sin(A0 - phi2);
 800976c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009770:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009774:	f7f6 fd88 	bl	8000288 <__aeabi_dsub>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	ec43 2b17 	vmov	d7, r2, r3
 8009780:	eeb0 0a47 	vmov.f32	s0, s14
 8009784:	eef0 0a67 	vmov.f32	s1, s15
 8009788:	f018 fe82 	bl	8022490 <sin>
 800978c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
  YB_tmp = sin(A0 - phi4);
 8009790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009794:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8009798:	f7f6 fd76 	bl	8000288 <__aeabi_dsub>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	ec43 2b17 	vmov	d7, r2, r3
 80097a4:	eeb0 0a47 	vmov.f32	s0, s14
 80097a8:	eef0 0a67 	vmov.f32	s1, s15
 80097ac:	f018 fe70 	bl	8022490 <sin>
 80097b0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
  A0 = lBD - A0;
 80097b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80097b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80097bc:	f7f6 fd64 	bl	8000288 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  B0 = sqrt((YD - 0.055) * (YD - 0.055) + C0 * C0) * XB_tmp;
 80097c8:	a325      	add	r3, pc, #148	@ (adr r3, 8009860 <leg_conv+0x430>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80097d2:	f7f6 fd59 	bl	8000288 <__aeabi_dsub>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4614      	mov	r4, r2
 80097dc:	461d      	mov	r5, r3
 80097de:	a320      	add	r3, pc, #128	@ (adr r3, 8009860 <leg_conv+0x430>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80097e8:	f7f6 fd4e 	bl	8000288 <__aeabi_dsub>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4620      	mov	r0, r4
 80097f2:	4629      	mov	r1, r5
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	461d      	mov	r5, r3
 8009800:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009804:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8009808:	f7f6 fef6 	bl	80005f8 <__aeabi_dmul>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f6 fd3a 	bl	800028c <__adddf3>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	ec43 2b17 	vmov	d7, r2, r3
 8009820:	eeb0 0a47 	vmov.f32	s0, s14
 8009824:	eef0 0a67 	vmov.f32	s1, s15
 8009828:	f018 fc10 	bl	802204c <sqrt>
 800982c:	ec53 2b10 	vmov	r2, r3, d0
 8009830:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009834:	f7f6 fee0 	bl	80005f8 <__aeabi_dmul>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  C0 = lBD - phi2;
 8009840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009844:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8009848:	f7f6 fd1e 	bl	8000288 <__aeabi_dsub>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8009854:	e014      	b.n	8009880 <leg_conv+0x450>
 8009856:	bf00      	nop
 8009858:	eb851eb8 	.word	0xeb851eb8
 800985c:	3fbeb851 	.word	0x3fbeb851
 8009860:	c28f5c29 	.word	0xc28f5c29
 8009864:	3fac28f5 	.word	0x3fac28f5
 8009868:	3fd00000 	.word	0x3fd00000
 800986c:	3f900000 	.word	0x3f900000
 8009870:	1eb851ec 	.word	0x1eb851ec
 8009874:	3fb1eb85 	.word	0x3fb1eb85
 8009878:	c28f5c29 	.word	0xc28f5c29
 800987c:	3fbc28f5 	.word	0x3fbc28f5

  // Output torques T[0] and T[1] based on force F and torque Tp
  T[0] = 0.07 * sin(A0) * XD / XB_tmp * F + 0.07 * cos(A0) * XD / B0 * Tp;
 8009880:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8009884:	f018 fe04 	bl	8022490 <sin>
 8009888:	ec51 0b10 	vmov	r0, r1, d0
 800988c:	a358      	add	r3, pc, #352	@ (adr r3, 80099f0 <leg_conv+0x5c0>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4610      	mov	r0, r2
 800989c:	4619      	mov	r1, r3
 800989e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80098a2:	f7f6 fea9 	bl	80005f8 <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4610      	mov	r0, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80098b2:	f7f6 ffcb 	bl	800084c <__aeabi_ddiv>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4610      	mov	r0, r2
 80098bc:	4619      	mov	r1, r3
 80098be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098c2:	f7f6 fe99 	bl	80005f8 <__aeabi_dmul>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4614      	mov	r4, r2
 80098cc:	461d      	mov	r5, r3
 80098ce:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80098d2:	f018 fd81 	bl	80223d8 <cos>
 80098d6:	ec51 0b10 	vmov	r0, r1, d0
 80098da:	a345      	add	r3, pc, #276	@ (adr r3, 80099f0 <leg_conv+0x5c0>)
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f7f6 fe8a 	bl	80005f8 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4610      	mov	r0, r2
 80098ea:	4619      	mov	r1, r3
 80098ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80098f0:	f7f6 fe82 	bl	80005f8 <__aeabi_dmul>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4610      	mov	r0, r2
 80098fa:	4619      	mov	r1, r3
 80098fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009900:	f7f6 ffa4 	bl	800084c <__aeabi_ddiv>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4610      	mov	r0, r2
 800990a:	4619      	mov	r1, r3
 800990c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009910:	f7f6 fe72 	bl	80005f8 <__aeabi_dmul>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4620      	mov	r0, r4
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fcb6 	bl	800028c <__adddf3>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	e9c1 2300 	strd	r2, r3, [r1]
  T[1] = 0.07 * sin(C0) * YB_tmp / XB_tmp * F + 0.07 * cos(C0) * YB_tmp / B0 * Tp;
 800992a:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800992e:	f018 fdaf 	bl	8022490 <sin>
 8009932:	ec51 0b10 	vmov	r0, r1, d0
 8009936:	a32e      	add	r3, pc, #184	@ (adr r3, 80099f0 <leg_conv+0x5c0>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	f7f6 fe5c 	bl	80005f8 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4610      	mov	r0, r2
 8009946:	4619      	mov	r1, r3
 8009948:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800994c:	f7f6 fe54 	bl	80005f8 <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4610      	mov	r0, r2
 8009956:	4619      	mov	r1, r3
 8009958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800995c:	f7f6 ff76 	bl	800084c <__aeabi_ddiv>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4610      	mov	r0, r2
 8009966:	4619      	mov	r1, r3
 8009968:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800996c:	f7f6 fe44 	bl	80005f8 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4690      	mov	r8, r2
 8009976:	4699      	mov	r9, r3
 8009978:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800997c:	f018 fd2c 	bl	80223d8 <cos>
 8009980:	ec51 0b10 	vmov	r0, r1, d0
 8009984:	a31a      	add	r3, pc, #104	@ (adr r3, 80099f0 <leg_conv+0x5c0>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f7f6 fe35 	bl	80005f8 <__aeabi_dmul>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4610      	mov	r0, r2
 8009994:	4619      	mov	r1, r3
 8009996:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4610      	mov	r0, r2
 80099a4:	4619      	mov	r1, r3
 80099a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80099aa:	f7f6 ff4f 	bl	800084c <__aeabi_ddiv>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4610      	mov	r0, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099ba:	f7f6 fe1d 	bl	80005f8 <__aeabi_dmul>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4610      	mov	r0, r2
 80099c4:	4619      	mov	r1, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f103 0408 	add.w	r4, r3, #8
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4640      	mov	r0, r8
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7f6 fc5a 	bl	800028c <__adddf3>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	e9c4 2300 	strd	r2, r3, [r4]
}
 80099e0:	bf00      	nop
 80099e2:	3770      	adds	r7, #112	@ 0x70
 80099e4:	46bd      	mov	sp, r7
 80099e6:	ecbd 8b02 	vpop	{d8}
 80099ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80099ee:	bf00      	nop
 80099f0:	1eb851ec 	.word	0x1eb851ec
 80099f4:	3fb1eb85 	.word	0x3fb1eb85

080099f8 <leg_spd>:
 *                double spd[2]
 * Return Type  : void
 */
void leg_spd(double dphi1, double dphi4, double phi1, double phi4,
             double spd[2])
{
 80099f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099fc:	b0be      	sub	sp, #248	@ 0xf8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8009a04:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8009a08:	ed87 2b08 	vstr	d2, [r7, #32]
 8009a0c:	ed87 3b06 	vstr	d3, [r7, #24]
 8009a10:	6178      	str	r0, [r7, #20]
  double t71;
  double t76;
  /*     This function was generated by the Symbolic Math Toolbox version 24.1.
   */
  /*     20-Jul-2024 15:20:15 */
  t2 = cos(phi1);
 8009a12:	ed97 0b08 	vldr	d0, [r7, #32]
 8009a16:	f018 fcdf 	bl	80223d8 <cos>
 8009a1a:	ed87 0b3c 	vstr	d0, [r7, #240]	@ 0xf0
  t3 = cos(phi4);
 8009a1e:	ed97 0b06 	vldr	d0, [r7, #24]
 8009a22:	f018 fcd9 	bl	80223d8 <cos>
 8009a26:	ed87 0b3a 	vstr	d0, [r7, #232]	@ 0xe8
  t4 = sin(phi1);
 8009a2a:	ed97 0b08 	vldr	d0, [r7, #32]
 8009a2e:	f018 fd2f 	bl	8022490 <sin>
 8009a32:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
  t5 = sin(phi4);
 8009a36:	ed97 0b06 	vldr	d0, [r7, #24]
 8009a3a:	f018 fd29 	bl	8022490 <sin>
 8009a3e:	ed87 0b36 	vstr	d0, [r7, #216]	@ 0xd8
  t10_tmp = t2 * 0.08;
 8009a42:	f20f 5350 	addw	r3, pc, #1360	@ 0x550
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8009a4e:	f7f6 fdd3 	bl	80005f8 <__aeabi_dmul>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
  t12_tmp = t4 * 0.08;
 8009a5a:	f20f 5338 	addw	r3, pc, #1336	@ 0x538
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009a66:	f7f6 fdc7 	bl	80005f8 <__aeabi_dmul>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
  t15 = t2 * 0.024;
 8009a72:	f20f 5328 	addw	r3, pc, #1320	@ 0x528
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
  t16 = t3 * 0.024;
 8009a8a:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8009a96:	f7f6 fdaf 	bl	80005f8 <__aeabi_dmul>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
  t18 = t4 * 0.024;
 8009aa2:	f20f 43f8 	addw	r3, pc, #1272	@ 0x4f8
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009aae:	f7f6 fda3 	bl	80005f8 <__aeabi_dmul>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
  t19 = t5 * 0.024;
 8009aba:	f20f 43e0 	addw	r3, pc, #1248	@ 0x4e0
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8009ac6:	f7f6 fd97 	bl	80005f8 <__aeabi_dmul>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
  t28 = t12_tmp - t5 * 0.08;
 8009ad2:	f20f 43c0 	addw	r3, pc, #1216	@ 0x4c0
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009aea:	f7f6 fbcd 	bl	8000288 <__aeabi_dsub>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  t30 = t18 - t19;
 8009af6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8009afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009afe:	f7f6 fbc3 	bl	8000288 <__aeabi_dsub>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  t36 = (t3 * 0.08 - t10_tmp) + 0.0983;
 8009b0a:	f20f 4388 	addw	r3, pc, #1160	@ 0x488
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8009b16:	f7f6 fd6f 	bl	80005f8 <__aeabi_dmul>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4610      	mov	r0, r2
 8009b20:	4619      	mov	r1, r3
 8009b22:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8009b26:	f7f6 fbaf 	bl	8000288 <__aeabi_dsub>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4619      	mov	r1, r3
 8009b32:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fba7 	bl	800028c <__adddf3>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  t38 = (t16 - t15) + 0.02949;
 8009b46:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8009b4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8009b4e:	f7f6 fb9b 	bl	8000288 <__aeabi_dsub>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4610      	mov	r0, r2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	f20f 4350 	addw	r3, pc, #1104	@ 0x450
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fb93 	bl	800028c <__adddf3>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  t44 = t28 * t28 + t36 * t36;
 8009b6e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009b72:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8009b76:	f7f6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4614      	mov	r4, r2
 8009b80:	461d      	mov	r5, r3
 8009b82:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009b86:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8009b8a:	f7f6 fd35 	bl	80005f8 <__aeabi_dmul>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 fb79 	bl	800028c <__adddf3>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  t47 = t2 * t28 * 0.16 + t4 * t36 * 0.16;
 8009ba2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009ba6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8009baa:	f7f6 fd25 	bl	80005f8 <__aeabi_dmul>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	a3ff      	add	r3, pc, #1020	@ (adr r3, 8009fb4 <leg_spd+0x5bc>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4614      	mov	r4, r2
 8009bc6:	461d      	mov	r5, r3
 8009bc8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009bd0:	f7f6 fd12 	bl	80005f8 <__aeabi_dmul>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4610      	mov	r0, r2
 8009bda:	4619      	mov	r1, r3
 8009bdc:	a3f5      	add	r3, pc, #980	@ (adr r3, 8009fb4 <leg_spd+0x5bc>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f7f6 fd09 	bl	80005f8 <__aeabi_dmul>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 fb4d 	bl	800028c <__adddf3>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  t48 = t3 * t28 * 0.16 + t5 * t36 * 0.16;
 8009bfa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009bfe:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8009c02:	f7f6 fcf9 	bl	80005f8 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	a3e9      	add	r3, pc, #932	@ (adr r3, 8009fb4 <leg_spd+0x5bc>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	f7f6 fcf0 	bl	80005f8 <__aeabi_dmul>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4614      	mov	r4, r2
 8009c1e:	461d      	mov	r5, r3
 8009c20:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009c24:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8009c28:	f7f6 fce6 	bl	80005f8 <__aeabi_dmul>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4610      	mov	r0, r2
 8009c32:	4619      	mov	r1, r3
 8009c34:	a3df      	add	r3, pc, #892	@ (adr r3, 8009fb4 <leg_spd+0x5bc>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	f7f6 fcdd 	bl	80005f8 <__aeabi_dmul>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4620      	mov	r0, r4
 8009c44:	4629      	mov	r1, r5
 8009c46:	f7f6 fb21 	bl	800028c <__adddf3>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  t52 = 1.0 / (t38 + t44);
 8009c52:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009c56:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8009c5a:	f7f6 fb17 	bl	800028c <__adddf3>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	49ca      	ldr	r1, [pc, #808]	@ (8009f90 <leg_spd+0x598>)
 8009c68:	f7f6 fdf0 	bl	800084c <__aeabi_ddiv>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  t53 = t52 * t52;
 8009c74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009c78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c7c:	f7f6 fcbc 	bl	80005f8 <__aeabi_dmul>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  t59 = sqrt((t30 * t30 + t38 * t38) - t44 * t44);
 8009c88:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8009c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009c90:	f7f6 fcb2 	bl	80005f8 <__aeabi_dmul>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4614      	mov	r4, r2
 8009c9a:	461d      	mov	r5, r3
 8009c9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009ca0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8009ca4:	f7f6 fca8 	bl	80005f8 <__aeabi_dmul>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 faec 	bl	800028c <__adddf3>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4614      	mov	r4, r2
 8009cba:	461d      	mov	r5, r3
 8009cbc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009cc0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009cc4:	f7f6 fc98 	bl	80005f8 <__aeabi_dmul>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 fada 	bl	8000288 <__aeabi_dsub>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	ec43 2b17 	vmov	d7, r2, r3
 8009cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8009ce0:	eef0 0a67 	vmov.f32	s1, s15
 8009ce4:	f018 f9b2 	bl	802204c <sqrt>
 8009ce8:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
  t60 = 1.0 / t59;
 8009cec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009cf0:	f04f 0000 	mov.w	r0, #0
 8009cf4:	49a6      	ldr	r1, [pc, #664]	@ (8009f90 <leg_spd+0x598>)
 8009cf6:	f7f6 fda9 	bl	800084c <__aeabi_ddiv>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  t36 = (t19 - t18) + t59;
 8009d02:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8009d06:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8009d0a:	f7f6 fabd 	bl	8000288 <__aeabi_dsub>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8009d16:	f7f6 fab9 	bl	800028c <__adddf3>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  t28 = atan(t52 * t36) * 2.0;
 8009d22:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d2a:	f7f6 fc65 	bl	80005f8 <__aeabi_dmul>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	ec43 2b17 	vmov	d7, r2, r3
 8009d36:	eeb0 0a47 	vmov.f32	s0, s14
 8009d3a:	eef0 0a67 	vmov.f32	s1, s15
 8009d3e:	f018 f9b3 	bl	80220a8 <atan>
 8009d42:	ec51 0b10 	vmov	r0, r1, d0
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	f7f6 fa9f 	bl	800028c <__adddf3>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  t70 = cos(t28);
 8009d56:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8009d5a:	f018 fb3d 	bl	80223d8 <cos>
 8009d5e:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
  t71 = sin(t28);
 8009d62:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8009d66:	f018 fb93 	bl	8022490 <sin>
 8009d6a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
  t76 = 1.0 / (t53 * (t36 * t36) + 1.0);
 8009d6e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009d72:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8009d76:	f7f6 fc3f 	bl	80005f8 <__aeabi_dmul>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4619      	mov	r1, r3
 8009d82:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009d86:	f7f6 fc37 	bl	80005f8 <__aeabi_dmul>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4610      	mov	r0, r2
 8009d90:	4619      	mov	r1, r3
 8009d92:	f04f 0200 	mov.w	r2, #0
 8009d96:	4b7e      	ldr	r3, [pc, #504]	@ (8009f90 <leg_spd+0x598>)
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	f04f 0000 	mov.w	r0, #0
 8009da4:	497a      	ldr	r1, [pc, #488]	@ (8009f90 <leg_spd+0x598>)
 8009da6:	f7f6 fd51 	bl	800084c <__aeabi_ddiv>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  t47 = (t18 + t47) * t53 * t36 +
 8009db2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009dba:	f7f6 fa67 	bl	800028c <__adddf3>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009dca:	f7f6 fc15 	bl	80005f8 <__aeabi_dmul>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4690      	mov	r8, r2
 8009de4:	4699      	mov	r9, r3
        t52 * (t15 -
               t60 * ((t2 * t30 * 0.048 + t4 * t38 * 0.048) - t44 * t47 * 2.0) /
 8009de6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8009dea:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8009dee:	f7f6 fc03 	bl	80005f8 <__aeabi_dmul>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	a363      	add	r3, pc, #396	@ (adr r3, 8009f88 <leg_spd+0x590>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f7f6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4614      	mov	r4, r2
 8009e0a:	461d      	mov	r5, r3
 8009e0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009e14:	f7f6 fbf0 	bl	80005f8 <__aeabi_dmul>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	4619      	mov	r1, r3
 8009e20:	a359      	add	r3, pc, #356	@ (adr r3, 8009f88 <leg_spd+0x590>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f7f6 fbe7 	bl	80005f8 <__aeabi_dmul>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fa2b 	bl	800028c <__adddf3>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4614      	mov	r4, r2
 8009e3c:	461d      	mov	r5, r3
 8009e3e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009e42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009e46:	f7f6 fbd7 	bl	80005f8 <__aeabi_dmul>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4610      	mov	r0, r2
 8009e50:	4619      	mov	r1, r3
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	f7f6 fa19 	bl	800028c <__adddf3>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fa11 	bl	8000288 <__aeabi_dsub>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009e72:	f7f6 fbc1 	bl	80005f8 <__aeabi_dmul>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e86:	f7f6 fce1 	bl	800084c <__aeabi_ddiv>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
        t52 * (t15 -
 8009e8e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8009e92:	f7f6 f9f9 	bl	8000288 <__aeabi_dsub>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009ea2:	f7f6 fba9 	bl	80005f8 <__aeabi_dmul>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
  t47 = (t18 + t47) * t53 * t36 +
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 f9ed 	bl	800028c <__adddf3>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
                   2.0);
  t28 = (t19 + t48) * t53 * t36 +
 8009eba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009ebe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8009ec2:	f7f6 f9e3 	bl	800028c <__adddf3>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4610      	mov	r0, r2
 8009ecc:	4619      	mov	r1, r3
 8009ece:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009ed2:	f7f6 fb91 	bl	80005f8 <__aeabi_dmul>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4610      	mov	r0, r2
 8009edc:	4619      	mov	r1, r3
 8009ede:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009ee2:	f7f6 fb89 	bl	80005f8 <__aeabi_dmul>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4690      	mov	r8, r2
 8009eec:	4699      	mov	r9, r3
        t52 * (t16 -
               t60 * ((t3 * t30 * 0.048 + t5 * t38 * 0.048) - t44 * t48 * 2.0) /
 8009eee:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8009ef2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8009ef6:	f7f6 fb7f 	bl	80005f8 <__aeabi_dmul>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4610      	mov	r0, r2
 8009f00:	4619      	mov	r1, r3
 8009f02:	a321      	add	r3, pc, #132	@ (adr r3, 8009f88 <leg_spd+0x590>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	f7f6 fb76 	bl	80005f8 <__aeabi_dmul>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4614      	mov	r4, r2
 8009f12:	461d      	mov	r5, r3
 8009f14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009f18:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8009f1c:	f7f6 fb6c 	bl	80005f8 <__aeabi_dmul>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4610      	mov	r0, r2
 8009f26:	4619      	mov	r1, r3
 8009f28:	a317      	add	r3, pc, #92	@ (adr r3, 8009f88 <leg_spd+0x590>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f7f6 fb63 	bl	80005f8 <__aeabi_dmul>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 f9a7 	bl	800028c <__adddf3>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4614      	mov	r4, r2
 8009f44:	461d      	mov	r5, r3
 8009f46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f4e:	f7f6 fb53 	bl	80005f8 <__aeabi_dmul>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4610      	mov	r0, r2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	f7f6 f995 	bl	800028c <__adddf3>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 f98d 	bl	8000288 <__aeabi_dsub>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4610      	mov	r0, r2
 8009f74:	4619      	mov	r1, r3
 8009f76:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009f7a:	f7f6 fb3d 	bl	80005f8 <__aeabi_dmul>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	e01b      	b.n	8009fbc <leg_spd+0x5c4>
 8009f84:	f3af 8000 	nop.w
 8009f88:	bc6a7efa 	.word	0xbc6a7efa
 8009f8c:	3fa89374 	.word	0x3fa89374
 8009f90:	3ff00000 	.word	0x3ff00000
 8009f94:	47ae147b 	.word	0x47ae147b
 8009f98:	3fb47ae1 	.word	0x3fb47ae1
 8009f9c:	bc6a7efa 	.word	0xbc6a7efa
 8009fa0:	3f989374 	.word	0x3f989374
 8009fa4:	5532617c 	.word	0x5532617c
 8009fa8:	3fb92a30 	.word	0x3fb92a30
 8009fac:	663c74fb 	.word	0x663c74fb
 8009fb0:	3f9e32a0 	.word	0x3f9e32a0
 8009fb4:	47ae147b 	.word	0x47ae147b
 8009fb8:	3fc47ae1 	.word	0x3fc47ae1
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009fc8:	f7f6 fc40 	bl	800084c <__aeabi_ddiv>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
        t52 * (t16 -
 8009fd0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8009fd4:	f7f6 f958 	bl	8000288 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009fe4:	f7f6 fb08 	bl	80005f8 <__aeabi_dmul>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
  t28 = (t19 + t48) * t53 * t36 +
 8009fec:	4640      	mov	r0, r8
 8009fee:	4649      	mov	r1, r9
 8009ff0:	f7f6 f94c 	bl	800028c <__adddf3>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
                   2.0);
  t4 = t12_tmp + t71 * 0.15;
 8009ffc:	f20f 432c 	addw	r3, pc, #1068	@ 0x42c
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800a008:	f7f6 faf6 	bl	80005f8 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a014:	f7f6 f93a 	bl	800028c <__adddf3>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
  t15 = (t10_tmp + t70 * 0.15) - 0.04915;
 800a020:	f20f 4308 	addw	r3, pc, #1032	@ 0x408
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800a02c:	f7f6 fae4 	bl	80005f8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4610      	mov	r0, r2
 800a036:	4619      	mov	r1, r3
 800a038:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800a03c:	f7f6 f926 	bl	800028c <__adddf3>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4610      	mov	r0, r2
 800a046:	4619      	mov	r1, r3
 800a048:	a3fa      	add	r3, pc, #1000	@ (adr r3, 800a434 <leg_spd+0xa3c>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f7f6 f91b 	bl	8000288 <__aeabi_dsub>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
  t59 = t70 * t76;
 800a05a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a05e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  t18 = t59 * t28;
 800a06e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800a072:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800a076:	f7f6 fabf 	bl	80005f8 <__aeabi_dmul>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
  t53 = t71 * t76;
 800a082:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a086:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800a08a:	f7f6 fab5 	bl	80005f8 <__aeabi_dmul>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  t2 = t53 * t28;
 800a096:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800a09a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800a09e:	f7f6 faab 	bl	80005f8 <__aeabi_dmul>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
  t28 = (-t10_tmp - t70 * 0.15) + 0.04915;
 800a0aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a0ae:	60bb      	str	r3, [r7, #8]
 800a0b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0b4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	a3dc      	add	r3, pc, #880	@ (adr r3, 800a42c <leg_spd+0xa34>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800a0c4:	f7f6 fa98 	bl	80005f8 <__aeabi_dmul>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0d0:	f7f6 f8da 	bl	8000288 <__aeabi_dsub>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4619      	mov	r1, r3
 800a0dc:	a3d5      	add	r3, pc, #852	@ (adr r3, 800a434 <leg_spd+0xa3c>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f8d3 	bl	800028c <__adddf3>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  t60 = t28 * t28;
 800a0ee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800a0f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800a0f6:	f7f6 fa7f 	bl	80005f8 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  t52 = 1.0 / t28;
 800a102:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800a106:	f04f 0000 	mov.w	r0, #0
 800a10a:	49c7      	ldr	r1, [pc, #796]	@ (800a428 <leg_spd+0xa30>)
 800a10c:	f7f6 fb9e 	bl	800084c <__aeabi_ddiv>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  t36 = t4 * t4;
 800a118:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800a11c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a120:	f7f6 fa6a 	bl	80005f8 <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  t28 = 1.0 / sqrt(t36 + t15 * t15);
 800a12c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800a130:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800a134:	f7f6 fa60 	bl	80005f8 <__aeabi_dmul>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4610      	mov	r0, r2
 800a13e:	4619      	mov	r1, r3
 800a140:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800a144:	f7f6 f8a2 	bl	800028c <__adddf3>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	ec43 2b17 	vmov	d7, r2, r3
 800a150:	eeb0 0a47 	vmov.f32	s0, s14
 800a154:	eef0 0a67 	vmov.f32	s1, s15
 800a158:	f017 ff78 	bl	802204c <sqrt>
 800a15c:	ec53 2b10 	vmov	r2, r3, d0
 800a160:	f04f 0000 	mov.w	r0, #0
 800a164:	49b0      	ldr	r1, [pc, #704]	@ (800a428 <leg_spd+0xa30>)
 800a166:	f7f6 fb71 	bl	800084c <__aeabi_ddiv>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  t48 = 1.0 / (t36 + t60);
 800a172:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a176:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800a17a:	f7f6 f887 	bl	800028c <__adddf3>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	f04f 0000 	mov.w	r0, #0
 800a186:	49a8      	ldr	r1, [pc, #672]	@ (800a428 <leg_spd+0xa30>)
 800a188:	f7f6 fb60 	bl	800084c <__aeabi_ddiv>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  t59 = t10_tmp - t59 * t47 * 0.3;
 800a194:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a198:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800a19c:	f7f6 fa2c 	bl	80005f8 <__aeabi_dmul>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	a39b      	add	r3, pc, #620	@ (adr r3, 800a418 <leg_spd+0xa20>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f7f6 fa23 	bl	80005f8 <__aeabi_dmul>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800a1ba:	f7f6 f865 	bl	8000288 <__aeabi_dsub>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  t36 = t12_tmp - t53 * t47 * 0.3;
 800a1c6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a1ca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800a1ce:	f7f6 fa13 	bl	80005f8 <__aeabi_dmul>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	4619      	mov	r1, r3
 800a1da:	a38f      	add	r3, pc, #572	@ (adr r3, 800a418 <leg_spd+0xa20>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 fa0a 	bl	80005f8 <__aeabi_dmul>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a1ec:	f7f6 f84c 	bl	8000288 <__aeabi_dsub>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  spd[0] = dphi4 * t28 * (t4 * t18 * 0.6 - t15 * t2 * 0.6) / 2.0 +
 800a1f8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800a1fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a200:	f7f6 f9fa 	bl	80005f8 <__aeabi_dmul>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	461d      	mov	r5, r3
 800a20c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800a210:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a214:	f7f6 f9f0 	bl	80005f8 <__aeabi_dmul>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4610      	mov	r0, r2
 800a21e:	4619      	mov	r1, r3
 800a220:	a37f      	add	r3, pc, #508	@ (adr r3, 800a420 <leg_spd+0xa28>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f6 f9e7 	bl	80005f8 <__aeabi_dmul>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4690      	mov	r8, r2
 800a230:	4699      	mov	r9, r3
 800a232:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800a236:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800a23a:	f7f6 f9dd 	bl	80005f8 <__aeabi_dmul>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4610      	mov	r0, r2
 800a244:	4619      	mov	r1, r3
 800a246:	a376      	add	r3, pc, #472	@ (adr r3, 800a420 <leg_spd+0xa28>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f6 f9d4 	bl	80005f8 <__aeabi_dmul>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4640      	mov	r0, r8
 800a256:	4649      	mov	r1, r9
 800a258:	f7f6 f816 	bl	8000288 <__aeabi_dsub>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 f9c8 	bl	80005f8 <__aeabi_dmul>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4610      	mov	r0, r2
 800a26e:	4619      	mov	r1, r3
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a278:	f7f6 fae8 	bl	800084c <__aeabi_ddiv>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4614      	mov	r4, r2
 800a282:	461d      	mov	r5, r3
           dphi1 * t28 * (t4 * t59 * 2.0 - t15 * t36 * 2.0) / 2.0;
 800a284:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800a288:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800a28c:	f7f6 f9b4 	bl	80005f8 <__aeabi_dmul>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4690      	mov	r8, r2
 800a296:	4699      	mov	r9, r3
 800a298:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a29c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a2a0:	f7f6 f9aa 	bl	80005f8 <__aeabi_dmul>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	f7f5 ffec 	bl	800028c <__adddf3>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4692      	mov	sl, r2
 800a2ba:	469b      	mov	fp, r3
 800a2bc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800a2c0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800a2c4:	f7f6 f998 	bl	80005f8 <__aeabi_dmul>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	f7f5 ffda 	bl	800028c <__adddf3>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4650      	mov	r0, sl
 800a2de:	4659      	mov	r1, fp
 800a2e0:	f7f5 ffd2 	bl	8000288 <__aeabi_dsub>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a300:	f7f6 faa4 	bl	800084c <__aeabi_ddiv>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
  spd[0] = dphi4 * t28 * (t4 * t18 * 0.6 - t15 * t2 * 0.6) / 2.0 +
 800a308:	4620      	mov	r0, r4
 800a30a:	4629      	mov	r1, r5
 800a30c:	f7f5 ffbe 	bl	800028c <__adddf3>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	6979      	ldr	r1, [r7, #20]
 800a316:	e9c1 2300 	strd	r2, r3, [r1]
  t28 = t4 * (1.0 / t60);
 800a31a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a31e:	f04f 0000 	mov.w	r0, #0
 800a322:	4941      	ldr	r1, [pc, #260]	@ (800a428 <leg_spd+0xa30>)
 800a324:	f7f6 fa92 	bl	800084c <__aeabi_ddiv>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a330:	f7f6 f962 	bl	80005f8 <__aeabi_dmul>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  spd[1] = -dphi1 * t60 * t48 * (t52 * t59 - t28 * t36) +
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a342:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800a346:	607b      	str	r3, [r7, #4]
 800a348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a34c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a350:	f7f6 f952 	bl	80005f8 <__aeabi_dmul>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4610      	mov	r0, r2
 800a35a:	4619      	mov	r1, r3
 800a35c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800a360:	f7f6 f94a 	bl	80005f8 <__aeabi_dmul>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4614      	mov	r4, r2
 800a36a:	461d      	mov	r5, r3
 800a36c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a370:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4690      	mov	r8, r2
 800a37e:	4699      	mov	r9, r3
 800a380:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800a384:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800a388:	f7f6 f936 	bl	80005f8 <__aeabi_dmul>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4640      	mov	r0, r8
 800a392:	4649      	mov	r1, r9
 800a394:	f7f5 ff78 	bl	8000288 <__aeabi_dsub>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4690      	mov	r8, r2
 800a3aa:	4699      	mov	r9, r3
           dphi4 * t60 * t48 * (t52 * (0.0 - t18 * 0.3) + t28 * (t2 * 0.3));
 800a3ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a3b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a3b4:	f7f6 f920 	bl	80005f8 <__aeabi_dmul>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4619      	mov	r1, r3
 800a3c0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800a3c4:	f7f6 f918 	bl	80005f8 <__aeabi_dmul>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	461d      	mov	r5, r3
 800a3d0:	a311      	add	r3, pc, #68	@ (adr r3, 800a418 <leg_spd+0xa20>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a3da:	f7f6 f90d 	bl	80005f8 <__aeabi_dmul>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	f04f 0000 	mov.w	r0, #0
 800a3e6:	f04f 0100 	mov.w	r1, #0
 800a3ea:	f7f5 ff4d 	bl	8000288 <__aeabi_dsub>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a3fa:	f7f6 f8fd 	bl	80005f8 <__aeabi_dmul>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4692      	mov	sl, r2
 800a404:	469b      	mov	fp, r3
 800a406:	a304      	add	r3, pc, #16	@ (adr r3, 800a418 <leg_spd+0xa20>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 800a410:	e014      	b.n	800a43c <leg_spd+0xa44>
 800a412:	bf00      	nop
 800a414:	f3af 8000 	nop.w
 800a418:	33333333 	.word	0x33333333
 800a41c:	3fd33333 	.word	0x3fd33333
 800a420:	33333333 	.word	0x33333333
 800a424:	3fe33333 	.word	0x3fe33333
 800a428:	3ff00000 	.word	0x3ff00000
 800a42c:	33333333 	.word	0x33333333
 800a430:	3fc33333 	.word	0x3fc33333
 800a434:	5532617c 	.word	0x5532617c
 800a438:	3fa92a30 	.word	0x3fa92a30
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4610      	mov	r0, r2
 800a446:	4619      	mov	r1, r3
 800a448:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800a44c:	f7f6 f8d4 	bl	80005f8 <__aeabi_dmul>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4650      	mov	r0, sl
 800a456:	4659      	mov	r1, fp
 800a458:	f7f5 ff18 	bl	800028c <__adddf3>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4610      	mov	r0, r2
 800a46e:	4619      	mov	r1, r3
  spd[1] = -dphi1 * t60 * t48 * (t52 * t59 - t28 * t36) +
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f103 0408 	add.w	r4, r3, #8
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4640      	mov	r0, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f5 ff05 	bl	800028c <__adddf3>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	e9c4 2300 	strd	r2, r3, [r4]
}
 800a48a:	bf00      	nop
 800a48c:	37f8      	adds	r7, #248	@ 0xf8
 800a48e:	46bd      	mov	sp, r7
 800a490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a494 <rt_powd_snf>:
 * Arguments    : double u0
 *                double u1
 * Return Type  : double
 */
static double rt_powd_snf(double u0, double u1)
{
 800a494:	b5b0      	push	{r4, r5, r7, lr}
 800a496:	b08c      	sub	sp, #48	@ 0x30
 800a498:	af00      	add	r7, sp, #0
 800a49a:	ed87 0b04 	vstr	d0, [r7, #16]
 800a49e:	ed87 1b02 	vstr	d1, [r7, #8]
  double y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800a4a2:	ed97 0b04 	vldr	d0, [r7, #16]
 800a4a6:	f003 f95d 	bl	800d764 <rtIsNaN>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d106      	bne.n	800a4be <rt_powd_snf+0x2a>
 800a4b0:	ed97 0b02 	vldr	d0, [r7, #8]
 800a4b4:	f003 f956 	bl	800d764 <rtIsNaN>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <rt_powd_snf+0x36>
    y = rtNaN;
 800a4be:	4b80      	ldr	r3, [pc, #512]	@ (800a6c0 <rt_powd_snf+0x22c>)
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a4c8:	e0ef      	b.n	800a6aa <rt_powd_snf+0x216>
  } else {
    double d;
    double d1;
    d = fabs(u0);
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	603b      	str	r3, [r7, #0]
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4d4:	607b      	str	r3, [r7, #4]
 800a4d6:	ed97 7b00 	vldr	d7, [r7]
 800a4da:	ed87 7b08 	vstr	d7, [r7, #32]
    d1 = fabs(u1);
 800a4de:	68bc      	ldr	r4, [r7, #8]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a4e6:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 800a4ea:	ed97 0b02 	vldr	d0, [r7, #8]
 800a4ee:	f003 f90b 	bl	800d708 <rtIsInf>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d049      	beq.n	800a58c <rt_powd_snf+0xf8>
      if (d == 1.0) {
 800a4f8:	f04f 0200 	mov.w	r2, #0
 800a4fc:	4b71      	ldr	r3, [pc, #452]	@ (800a6c4 <rt_powd_snf+0x230>)
 800a4fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a502:	f7f6 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <rt_powd_snf+0x84>
        y = 1.0;
 800a50c:	f04f 0200 	mov.w	r2, #0
 800a510:	4b6c      	ldr	r3, [pc, #432]	@ (800a6c4 <rt_powd_snf+0x230>)
 800a512:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a516:	e0c8      	b.n	800a6aa <rt_powd_snf+0x216>
      } else if (d > 1.0) {
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	4b69      	ldr	r3, [pc, #420]	@ (800a6c4 <rt_powd_snf+0x230>)
 800a51e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a522:	f7f6 faf9 	bl	8000b18 <__aeabi_dcmpgt>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d017      	beq.n	800a55c <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 800a52c:	f04f 0200 	mov.w	r2, #0
 800a530:	f04f 0300 	mov.w	r3, #0
 800a534:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a538:	f7f6 faee 	bl	8000b18 <__aeabi_dcmpgt>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d005      	beq.n	800a54e <rt_powd_snf+0xba>
          y = rtInf;
 800a542:	4b61      	ldr	r3, [pc, #388]	@ (800a6c8 <rt_powd_snf+0x234>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a54c:	e0ad      	b.n	800a6aa <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a55a:	e0a6      	b.n	800a6aa <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 800a55c:	f04f 0200 	mov.w	r2, #0
 800a560:	f04f 0300 	mov.w	r3, #0
 800a564:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a568:	f7f6 fad6 	bl	8000b18 <__aeabi_dcmpgt>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d006      	beq.n	800a580 <rt_powd_snf+0xec>
        y = 0.0;
 800a572:	f04f 0200 	mov.w	r2, #0
 800a576:	f04f 0300 	mov.w	r3, #0
 800a57a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a57e:	e094      	b.n	800a6aa <rt_powd_snf+0x216>
      } else {
        y = rtInf;
 800a580:	4b51      	ldr	r3, [pc, #324]	@ (800a6c8 <rt_powd_snf+0x234>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a58a:	e08e      	b.n	800a6aa <rt_powd_snf+0x216>
      }
    } else if (d1 == 0.0) {
 800a58c:	f04f 0200 	mov.w	r2, #0
 800a590:	f04f 0300 	mov.w	r3, #0
 800a594:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a598:	f7f6 fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <rt_powd_snf+0x11a>
      y = 1.0;
 800a5a2:	f04f 0200 	mov.w	r2, #0
 800a5a6:	4b47      	ldr	r3, [pc, #284]	@ (800a6c4 <rt_powd_snf+0x230>)
 800a5a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a5ac:	e07d      	b.n	800a6aa <rt_powd_snf+0x216>
    } else if (d1 == 1.0) {
 800a5ae:	f04f 0200 	mov.w	r2, #0
 800a5b2:	4b44      	ldr	r3, [pc, #272]	@ (800a6c4 <rt_powd_snf+0x230>)
 800a5b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a5b8:	f7f6 fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d01b      	beq.n	800a5fa <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5ce:	f7f6 faa3 	bl	8000b18 <__aeabi_dcmpgt>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <rt_powd_snf+0x14e>
        y = u0;
 800a5d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a5dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a5e0:	e063      	b.n	800a6aa <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 800a5e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a5e6:	f04f 0000 	mov.w	r0, #0
 800a5ea:	4936      	ldr	r1, [pc, #216]	@ (800a6c4 <rt_powd_snf+0x230>)
 800a5ec:	f7f6 f92e 	bl	800084c <__aeabi_ddiv>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a5f8:	e057      	b.n	800a6aa <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 800a5fa:	f04f 0200 	mov.w	r2, #0
 800a5fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a606:	f7f6 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00a      	beq.n	800a626 <rt_powd_snf+0x192>
      y = u0 * u0;
 800a610:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a614:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a618:	f7f5 ffee 	bl	80005f8 <__aeabi_dmul>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a624:	e041      	b.n	800a6aa <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	4b28      	ldr	r3, [pc, #160]	@ (800a6cc <rt_powd_snf+0x238>)
 800a62c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a630:	f7f6 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d011      	beq.n	800a65e <rt_powd_snf+0x1ca>
 800a63a:	f04f 0200 	mov.w	r2, #0
 800a63e:	f04f 0300 	mov.w	r3, #0
 800a642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a646:	f7f6 fa5d 	bl	8000b04 <__aeabi_dcmpge>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d006      	beq.n	800a65e <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 800a650:	ed97 0b04 	vldr	d0, [r7, #16]
 800a654:	f017 fcfa 	bl	802204c <sqrt>
 800a658:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 800a65c:	e025      	b.n	800a6aa <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 800a65e:	f04f 0200 	mov.w	r2, #0
 800a662:	f04f 0300 	mov.w	r3, #0
 800a666:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a66a:	f7f6 fa37 	bl	8000adc <__aeabi_dcmplt>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d012      	beq.n	800a69a <rt_powd_snf+0x206>
 800a674:	ed97 0b02 	vldr	d0, [r7, #8]
 800a678:	f018 f846 	bl	8022708 <floor>
 800a67c:	ec53 2b10 	vmov	r2, r3, d0
 800a680:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a684:	f7f6 fa48 	bl	8000b18 <__aeabi_dcmpgt>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <rt_powd_snf+0x206>
      y = rtNaN;
 800a68e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c0 <rt_powd_snf+0x22c>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a698:	e007      	b.n	800a6aa <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 800a69a:	ed97 1b02 	vldr	d1, [r7, #8]
 800a69e:	ed97 0b04 	vldr	d0, [r7, #16]
 800a6a2:	f017 fc63 	bl	8021f6c <pow>
 800a6a6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    }
  }
  return y;
 800a6aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a6ae:	ec43 2b17 	vmov	d7, r2, r3
}
 800a6b2:	eeb0 0a47 	vmov.f32	s0, s14
 800a6b6:	eef0 0a67 	vmov.f32	s1, s15
 800a6ba:	3730      	adds	r7, #48	@ 0x30
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bdb0      	pop	{r4, r5, r7, pc}
 800a6c0:	20000038 	.word	0x20000038
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	20000040 	.word	0x20000040
 800a6cc:	3fe00000 	.word	0x3fe00000

0800a6d0 <lqr_k>:
 * Arguments    : double L0
 *                double K[12]
 * Return Type  : void
 */
void lqr_k(double L0, double K[12])
{
 800a6d0:	b5b0      	push	{r4, r5, r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	ed87 0b02 	vstr	d0, [r7, #8]
 800a6da:	6078      	str	r0, [r7, #4]
  double t2;
  double t3;
  /*     This function was generated by the Symbolic Math Toolbox version 24.1.
   */
  /*     27-Jul-2024 17:35:25 */
  t2 = L0 * L0;
 800a6dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6e4:	f7f5 ff88 	bl	80005f8 <__aeabi_dmul>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
  t3 = rt_powd_snf(L0, 3.0);
 800a6f0:	ed9f 1bcf 	vldr	d1, [pc, #828]	@ 800aa30 <lqr_k+0x360>
 800a6f4:	ed97 0b02 	vldr	d0, [r7, #8]
 800a6f8:	f7ff fecc 	bl	800a494 <rt_powd_snf>
 800a6fc:	ed87 0b04 	vstr	d0, [r7, #16]
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 800a700:	a3cd      	add	r3, pc, #820	@ (adr r3, 800aa38 <lqr_k+0x368>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	4614      	mov	r4, r2
 800a714:	461d      	mov	r5, r3
 800a716:	a3ca      	add	r3, pc, #808	@ (adr r3, 800aa40 <lqr_k+0x370>)
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f7f5 fdae 	bl	800028c <__adddf3>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4614      	mov	r4, r2
 800a736:	461d      	mov	r5, r3
          t3 * 277.71747427878682) -
 800a738:	a3c3      	add	r3, pc, #780	@ (adr r3, 800aa48 <lqr_k+0x378>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a742:	f7f5 ff59 	bl	80005f8 <__aeabi_dmul>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 800a74a:	4620      	mov	r0, r4
 800a74c:	4629      	mov	r1, r5
 800a74e:	f7f5 fd9b 	bl	8000288 <__aeabi_dsub>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4610      	mov	r0, r2
 800a758:	4619      	mov	r1, r3
          t3 * 277.71747427878682) -
 800a75a:	a3bd      	add	r3, pc, #756	@ (adr r3, 800aa50 <lqr_k+0x380>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f7f5 fd92 	bl	8000288 <__aeabi_dsub>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
  K[0] = ((L0 * -50.738369120908537 + t2 * 168.73288676611921) -
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	e9c1 2300 	strd	r2, r3, [r1]
         2.6875305810977892;
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 800a76e:	a3ba      	add	r3, pc, #744	@ (adr r3, 800aa58 <lqr_k+0x388>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a778:	f7f5 ff3e 	bl	80005f8 <__aeabi_dmul>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4614      	mov	r4, r2
 800a782:	461d      	mov	r5, r3
 800a784:	a3b6      	add	r3, pc, #728	@ (adr r3, 800aa60 <lqr_k+0x390>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a78e:	f7f5 ff33 	bl	80005f8 <__aeabi_dmul>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	4620      	mov	r0, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f5 fd77 	bl	800028c <__adddf3>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	461d      	mov	r5, r3
          t3 * 62.862564037484013) +
 800a7a6:	a3b0      	add	r3, pc, #704	@ (adr r3, 800aa68 <lqr_k+0x398>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a7b0:	f7f5 ff22 	bl	80005f8 <__aeabi_dmul>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f7f5 fd64 	bl	8000288 <__aeabi_dsub>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f103 0408 	add.w	r4, r3, #8
          t3 * 62.862564037484013) +
 800a7ce:	a3a8      	add	r3, pc, #672	@ (adr r3, 800aa70 <lqr_k+0x3a0>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f7f5 fd5a 	bl	800028c <__adddf3>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
  K[1] = ((L0 * -16.41053558147425 + t2 * 52.304651493814013) -
 800a7dc:	e9c4 2300 	strd	r2, r3, [r4]
         2.4077773297174141;
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 800a7e0:	a3a5      	add	r3, pc, #660	@ (adr r3, 800aa78 <lqr_k+0x3a8>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7ea:	f7f5 ff05 	bl	80005f8 <__aeabi_dmul>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4614      	mov	r4, r2
 800a7f4:	461d      	mov	r5, r3
 800a7f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aa80 <lqr_k+0x3b0>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a800:	f7f5 fefa 	bl	80005f8 <__aeabi_dmul>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	4620      	mov	r0, r4
 800a80a:	4629      	mov	r1, r5
 800a80c:	f7f5 fd3e 	bl	800028c <__adddf3>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4614      	mov	r4, r2
 800a816:	461d      	mov	r5, r3
          t3 * 5.39712632191915) -
 800a818:	a39b      	add	r3, pc, #620	@ (adr r3, 800aa88 <lqr_k+0x3b8>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 800a82a:	4620      	mov	r0, r4
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7f5 fd2b 	bl	8000288 <__aeabi_dsub>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4610      	mov	r0, r2
 800a838:	4619      	mov	r1, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f103 0410 	add.w	r4, r3, #16
          t3 * 5.39712632191915) -
 800a840:	a393      	add	r3, pc, #588	@ (adr r3, 800aa90 <lqr_k+0x3c0>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fd1f 	bl	8000288 <__aeabi_dsub>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
  K[2] = ((L0 * -3.79285952438204 + t2 * 0.53795935804916) -
 800a84e:	e9c4 2300 	strd	r2, r3, [r4]
         0.34788258861362348;
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 800a852:	a391      	add	r3, pc, #580	@ (adr r3, 800aa98 <lqr_k+0x3c8>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a85c:	f7f5 fecc 	bl	80005f8 <__aeabi_dmul>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4614      	mov	r4, r2
 800a866:	461d      	mov	r5, r3
 800a868:	a38d      	add	r3, pc, #564	@ (adr r3, 800aaa0 <lqr_k+0x3d0>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a872:	f7f5 fec1 	bl	80005f8 <__aeabi_dmul>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4620      	mov	r0, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7f5 fd05 	bl	800028c <__adddf3>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	4614      	mov	r4, r2
 800a888:	461d      	mov	r5, r3
          t3 * 13.093348455609879) +
 800a88a:	a387      	add	r3, pc, #540	@ (adr r3, 800aaa8 <lqr_k+0x3d8>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a894:	f7f5 feb0 	bl	80005f8 <__aeabi_dmul>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 fcf2 	bl	8000288 <__aeabi_dsub>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f103 0418 	add.w	r4, r3, #24
          t3 * 13.093348455609879) +
 800a8b2:	a37f      	add	r3, pc, #508	@ (adr r3, 800aab0 <lqr_k+0x3e0>)
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f7f5 fce8 	bl	800028c <__adddf3>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
  K[3] = ((L0 * -2.3795519725084429 + t2 * 9.0534516314190316) -
 800a8c0:	e9c4 2300 	strd	r2, r3, [r4]
         0.33619836382767981;
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800a8c4:	a37c      	add	r3, pc, #496	@ (adr r3, 800aab8 <lqr_k+0x3e8>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8ce:	f7f5 fe93 	bl	80005f8 <__aeabi_dmul>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4614      	mov	r4, r2
 800a8d8:	461d      	mov	r5, r3
 800a8da:	a379      	add	r3, pc, #484	@ (adr r3, 800aac0 <lqr_k+0x3f0>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a8e4:	f7f5 fe88 	bl	80005f8 <__aeabi_dmul>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	f7f5 fccc 	bl	800028c <__adddf3>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4614      	mov	r4, r2
 800a8fa:	461d      	mov	r5, r3
          t3 * 83.5018738492099) -
 800a8fc:	a372      	add	r3, pc, #456	@ (adr r3, 800aac8 <lqr_k+0x3f8>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a906:	f7f5 fe77 	bl	80005f8 <__aeabi_dmul>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f5 fcb9 	bl	8000288 <__aeabi_dsub>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4610      	mov	r0, r2
 800a91c:	4619      	mov	r1, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f103 0420 	add.w	r4, r3, #32
          t3 * 83.5018738492099) -
 800a924:	a36a      	add	r3, pc, #424	@ (adr r3, 800aad0 <lqr_k+0x400>)
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	f7f5 fcad 	bl	8000288 <__aeabi_dsub>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
  K[4] = ((L0 * -9.1022802166686567 + t2 * 47.138826400659667) -
 800a932:	e9c4 2300 	strd	r2, r3, [r4]
         2.5346969801909141;
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800a936:	a368      	add	r3, pc, #416	@ (adr r3, 800aad8 <lqr_k+0x408>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a940:	f7f5 fe5a 	bl	80005f8 <__aeabi_dmul>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	4614      	mov	r4, r2
 800a94a:	461d      	mov	r5, r3
 800a94c:	a364      	add	r3, pc, #400	@ (adr r3, 800aae0 <lqr_k+0x410>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a956:	f7f5 fe4f 	bl	80005f8 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fc93 	bl	800028c <__adddf3>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4614      	mov	r4, r2
 800a96c:	461d      	mov	r5, r3
          t3 * 141.7488288180505) +
 800a96e:	a35e      	add	r3, pc, #376	@ (adr r3, 800aae8 <lqr_k+0x418>)
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a978:	f7f5 fe3e 	bl	80005f8 <__aeabi_dmul>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 fc80 	bl	8000288 <__aeabi_dsub>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4610      	mov	r0, r2
 800a98e:	4619      	mov	r1, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f103 0428 	add.w	r4, r3, #40	@ 0x28
          t3 * 141.7488288180505) +
 800a996:	a356      	add	r3, pc, #344	@ (adr r3, 800aaf0 <lqr_k+0x420>)
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f7f5 fc76 	bl	800028c <__adddf3>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
  K[5] = ((L0 * -21.7241886356339 + t2 * 91.16387942187157) -
 800a9a4:	e9c4 2300 	strd	r2, r3, [r4]
         2.2061564840746279;
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800a9a8:	a353      	add	r3, pc, #332	@ (adr r3, 800aaf8 <lqr_k+0x428>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9b2:	f7f5 fe21 	bl	80005f8 <__aeabi_dmul>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4614      	mov	r4, r2
 800a9bc:	461d      	mov	r5, r3
 800a9be:	a350      	add	r3, pc, #320	@ (adr r3, 800ab00 <lqr_k+0x430>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a9c8:	f7f5 fe16 	bl	80005f8 <__aeabi_dmul>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	f7f5 fc5a 	bl	800028c <__adddf3>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4614      	mov	r4, r2
 800a9de:	461d      	mov	r5, r3
          t3 * 12.33887280821885) -
 800a9e0:	a349      	add	r3, pc, #292	@ (adr r3, 800ab08 <lqr_k+0x438>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a9ea:	f7f5 fe05 	bl	80005f8 <__aeabi_dmul>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7f5 fc47 	bl	8000288 <__aeabi_dsub>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4610      	mov	r0, r2
 800aa00:	4619      	mov	r1, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f103 0430 	add.w	r4, r3, #48	@ 0x30
          t3 * 12.33887280821885) -
 800aa08:	a341      	add	r3, pc, #260	@ (adr r3, 800ab10 <lqr_k+0x440>)
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fc3b 	bl	8000288 <__aeabi_dsub>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
  K[6] = ((L0 * -2.423729393950476 + t2 * 6.5481993776432246) -
 800aa16:	e9c4 2300 	strd	r2, r3, [r4]
         2.3946300730855778;
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 800aa1a:	a33f      	add	r3, pc, #252	@ (adr r3, 800ab18 <lqr_k+0x448>)
 800aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa24:	f7f5 fde8 	bl	80005f8 <__aeabi_dmul>
 800aa28:	e07a      	b.n	800ab20 <lqr_k+0x450>
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w
 800aa30:	00000000 	.word	0x00000000
 800aa34:	40080000 	.word	0x40080000
 800aa38:	e11d56d7 	.word	0xe11d56d7
 800aa3c:	c0495e82 	.word	0xc0495e82
 800aa40:	cef284e7 	.word	0xcef284e7
 800aa44:	40651773 	.word	0x40651773
 800aa48:	c64f31c5 	.word	0xc64f31c5
 800aa4c:	40715b7a 	.word	0x40715b7a
 800aa50:	088684e0 	.word	0x088684e0
 800aa54:	40058010 	.word	0x40058010
 800aa58:	dc2046b8 	.word	0xdc2046b8
 800aa5c:	c0306918 	.word	0xc0306918
 800aa60:	d1f54deb 	.word	0xd1f54deb
 800aa64:	404a26fe 	.word	0x404a26fe
 800aa68:	7f95d98b 	.word	0x7f95d98b
 800aa6c:	404f6e68 	.word	0x404f6e68
 800aa70:	c2b97df5 	.word	0xc2b97df5
 800aa74:	40034320 	.word	0x40034320
 800aa78:	bbfc5804 	.word	0xbbfc5804
 800aa7c:	c00e57c6 	.word	0xc00e57c6
 800aa80:	8b2cbed8 	.word	0x8b2cbed8
 800aa84:	3fe136f6 	.word	0x3fe136f6
 800aa88:	48541815 	.word	0x48541815
 800aa8c:	401596a8 	.word	0x401596a8
 800aa90:	553c5f99 	.word	0x553c5f99
 800aa94:	3fd643b5 	.word	0x3fd643b5
 800aa98:	8b6872cc 	.word	0x8b6872cc
 800aa9c:	c0030952 	.word	0xc0030952
 800aaa0:	0321b9a5 	.word	0x0321b9a5
 800aaa4:	40221b5e 	.word	0x40221b5e
 800aaa8:	5e67f3fd 	.word	0x5e67f3fd
 800aaac:	402a2fcb 	.word	0x402a2fcb
 800aab0:	2466f335 	.word	0x2466f335
 800aab4:	3fd58446 	.word	0x3fd58446
 800aab8:	12933d46 	.word	0x12933d46
 800aabc:	c022345e 	.word	0xc022345e
 800aac0:	104153cc 	.word	0x104153cc
 800aac4:	404791c5 	.word	0x404791c5
 800aac8:	b37e44bf 	.word	0xb37e44bf
 800aacc:	4054e01e 	.word	0x4054e01e
 800aad0:	35d984fd 	.word	0x35d984fd
 800aad4:	4004470f 	.word	0x4004470f
 800aad8:	6d2a2eb6 	.word	0x6d2a2eb6
 800aadc:	c035b964 	.word	0xc035b964
 800aae0:	001d5b40 	.word	0x001d5b40
 800aae4:	4056ca7d 	.word	0x4056ca7d
 800aae8:	67da7a89 	.word	0x67da7a89
 800aaec:	4061b7f6 	.word	0x4061b7f6
 800aaf0:	5ee7abc5 	.word	0x5ee7abc5
 800aaf4:	4001a635 	.word	0x4001a635
 800aaf8:	3c8af835 	.word	0x3c8af835
 800aafc:	c00363cc 	.word	0xc00363cc
 800ab00:	2d7aa92b 	.word	0x2d7aa92b
 800ab04:	401a315b 	.word	0x401a315b
 800ab08:	bc999b77 	.word	0xbc999b77
 800ab0c:	4028ad80 	.word	0x4028ad80
 800ab10:	cfcf5d7c 	.word	0xcfcf5d7c
 800ab14:	40032833 	.word	0x40032833
 800ab18:	9ad97d7b 	.word	0x9ad97d7b
 800ab1c:	c03416fd 	.word	0xc03416fd
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4614      	mov	r4, r2
 800ab26:	461d      	mov	r5, r3
 800ab28:	a38b      	add	r3, pc, #556	@ (adr r3, 800ad58 <lqr_k+0x688>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ab32:	f7f5 fd61 	bl	80005f8 <__aeabi_dmul>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7f5 fba5 	bl	800028c <__adddf3>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4614      	mov	r4, r2
 800ab48:	461d      	mov	r5, r3
          t3 * 143.792464436029) +
 800ab4a:	a385      	add	r3, pc, #532	@ (adr r3, 800ad60 <lqr_k+0x690>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ab54:	f7f5 fd50 	bl	80005f8 <__aeabi_dmul>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 fb92 	bl	8000288 <__aeabi_dsub>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f103 0438 	add.w	r4, r3, #56	@ 0x38
          t3 * 143.792464436029) +
 800ab72:	a37d      	add	r3, pc, #500	@ (adr r3, 800ad68 <lqr_k+0x698>)
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 fb88 	bl	800028c <__adddf3>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
  K[7] = ((L0 * -20.089807203386481 + t2 * 88.835017296872024) -
 800ab80:	e9c4 2300 	strd	r2, r3, [r4]
         1.9279268694789149;
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 800ab84:	a37a      	add	r3, pc, #488	@ (adr r3, 800ad70 <lqr_k+0x6a0>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab8e:	f7f5 fd33 	bl	80005f8 <__aeabi_dmul>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	4614      	mov	r4, r2
 800ab98:	461d      	mov	r5, r3
 800ab9a:	a377      	add	r3, pc, #476	@ (adr r3, 800ad78 <lqr_k+0x6a8>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aba4:	f7f5 fd28 	bl	80005f8 <__aeabi_dmul>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4620      	mov	r0, r4
 800abae:	4629      	mov	r1, r5
 800abb0:	f7f5 fb6c 	bl	800028c <__adddf3>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	461d      	mov	r5, r3
          t3 * 448.24915472642982) +
 800abbc:	a370      	add	r3, pc, #448	@ (adr r3, 800ad80 <lqr_k+0x6b0>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800abc6:	f7f5 fd17 	bl	80005f8 <__aeabi_dmul>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 800abce:	4620      	mov	r0, r4
 800abd0:	4629      	mov	r1, r5
 800abd2:	f7f5 fb59 	bl	8000288 <__aeabi_dsub>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4610      	mov	r0, r2
 800abdc:	4619      	mov	r1, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
          t3 * 448.24915472642982) +
 800abe4:	a368      	add	r3, pc, #416	@ (adr r3, 800ad88 <lqr_k+0x6b8>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f7f5 fb4f 	bl	800028c <__adddf3>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
  K[8] = ((L0 * -68.697916407752459 + t2 * 288.2854993101) -
 800abf2:	e9c4 2300 	strd	r2, r3, [r4]
         6.9764793644248986;
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 800abf6:	a366      	add	r3, pc, #408	@ (adr r3, 800ad90 <lqr_k+0x6c0>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4614      	mov	r4, r2
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	a362      	add	r3, pc, #392	@ (adr r3, 800ad98 <lqr_k+0x6c8>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ac16:	f7f5 fcef 	bl	80005f8 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	f7f5 fb31 	bl	8000288 <__aeabi_dsub>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4614      	mov	r4, r2
 800ac2c:	461d      	mov	r5, r3
          t3 * 264.05611025542441) +
 800ac2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ada0 <lqr_k+0x6d0>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ac38:	f7f5 fcde 	bl	80005f8 <__aeabi_dmul>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 800ac40:	4620      	mov	r0, r4
 800ac42:	4629      	mov	r1, r5
 800ac44:	f7f5 fb22 	bl	800028c <__adddf3>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f103 0448 	add.w	r4, r3, #72	@ 0x48
          t3 * 264.05611025542441) +
 800ac56:	a354      	add	r3, pc, #336	@ (adr r3, 800ada8 <lqr_k+0x6d8>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f7f5 fb16 	bl	800028c <__adddf3>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
  K[9] = ((L0 * 28.783937385759788 - t2 * 149.06605765331221) +
 800ac64:	e9c4 2300 	strd	r2, r3, [r4]
         8.0154156357539623;
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 800ac68:	a351      	add	r3, pc, #324	@ (adr r3, 800adb0 <lqr_k+0x6e0>)
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac72:	f7f5 fcc1 	bl	80005f8 <__aeabi_dmul>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4614      	mov	r4, r2
 800ac7c:	461d      	mov	r5, r3
 800ac7e:	a34e      	add	r3, pc, #312	@ (adr r3, 800adb8 <lqr_k+0x6e8>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ac88:	f7f5 fcb6 	bl	80005f8 <__aeabi_dmul>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4620      	mov	r0, r4
 800ac92:	4629      	mov	r1, r5
 800ac94:	f7f5 fafa 	bl	800028c <__adddf3>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4614      	mov	r4, r2
 800ac9e:	461d      	mov	r5, r3
           t3 * 28.733067607751678) +
 800aca0:	a347      	add	r3, pc, #284	@ (adr r3, 800adc0 <lqr_k+0x6f0>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800acaa:	f7f5 fca5 	bl	80005f8 <__aeabi_dmul>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 800acb2:	4620      	mov	r0, r4
 800acb4:	4629      	mov	r1, r5
 800acb6:	f7f5 fae7 	bl	8000288 <__aeabi_dsub>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4610      	mov	r0, r2
 800acc0:	4619      	mov	r1, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f103 0450 	add.w	r4, r3, #80	@ 0x50
           t3 * 28.733067607751678) +
 800acc8:	a33f      	add	r3, pc, #252	@ (adr r3, 800adc8 <lqr_k+0x6f8>)
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	f7f5 fadd 	bl	800028c <__adddf3>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
  K[10] = ((L0 * -4.4723487119214784 + t2 * 18.486489601473991) -
 800acd6:	e9c4 2300 	strd	r2, r3, [r4]
          0.4913040439106548;
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 800acda:	a33d      	add	r3, pc, #244	@ (adr r3, 800add0 <lqr_k+0x700>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ace4:	f7f5 fc88 	bl	80005f8 <__aeabi_dmul>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4614      	mov	r4, r2
 800acee:	461d      	mov	r5, r3
 800acf0:	a339      	add	r3, pc, #228	@ (adr r3, 800add8 <lqr_k+0x708>)
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800acfa:	f7f5 fc7d 	bl	80005f8 <__aeabi_dmul>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4620      	mov	r0, r4
 800ad04:	4629      	mov	r1, r5
 800ad06:	f7f5 fabf 	bl	8000288 <__aeabi_dsub>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4614      	mov	r4, r2
 800ad10:	461d      	mov	r5, r3
           t3 * 17.281074817235439) +
 800ad12:	a333      	add	r3, pc, #204	@ (adr r3, 800ade0 <lqr_k+0x710>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ad1c:	f7f5 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fab0 	bl	800028c <__adddf3>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4610      	mov	r0, r2
 800ad32:	4619      	mov	r1, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f103 0458 	add.w	r4, r3, #88	@ 0x58
           t3 * 17.281074817235439) +
 800ad3a:	a32b      	add	r3, pc, #172	@ (adr r3, 800ade8 <lqr_k+0x718>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f7f5 faa4 	bl	800028c <__adddf3>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
  K[11] = ((L0 * 1.919723686726168 - t2 * 9.8175959315562586) +
 800ad48:	e9c4 2300 	strd	r2, r3, [r4]
          0.45590187076573768;
}
 800ad4c:	bf00      	nop
 800ad4e:	3720      	adds	r7, #32
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bdb0      	pop	{r4, r5, r7, pc}
 800ad54:	f3af 8000 	nop.w
 800ad58:	ec636a38 	.word	0xec636a38
 800ad5c:	40563570 	.word	0x40563570
 800ad60:	de607f9b 	.word	0xde607f9b
 800ad64:	4061f95b 	.word	0x4061f95b
 800ad68:	d857dd98 	.word	0xd857dd98
 800ad6c:	3ffed8c9 	.word	0x3ffed8c9
 800ad70:	a994a8df 	.word	0xa994a8df
 800ad74:	c0512caa 	.word	0xc0512caa
 800ad78:	67b97e90 	.word	0x67b97e90
 800ad7c:	40720491 	.word	0x40720491
 800ad80:	89aa9a8f 	.word	0x89aa9a8f
 800ad84:	407c03fc 	.word	0x407c03fc
 800ad88:	34ddb1fa 	.word	0x34ddb1fa
 800ad8c:	401be7ea 	.word	0x401be7ea
 800ad90:	1ed9f335 	.word	0x1ed9f335
 800ad94:	403cc8b0 	.word	0x403cc8b0
 800ad98:	24f0940c 	.word	0x24f0940c
 800ad9c:	4062a21d 	.word	0x4062a21d
 800ada0:	d3de004a 	.word	0xd3de004a
 800ada4:	407080e5 	.word	0x407080e5
 800ada8:	8ee6d215 	.word	0x8ee6d215
 800adac:	402007e4 	.word	0x402007e4
 800adb0:	61780aba 	.word	0x61780aba
 800adb4:	c011e3af 	.word	0xc011e3af
 800adb8:	95202cc4 	.word	0x95202cc4
 800adbc:	40327c8a 	.word	0x40327c8a
 800adc0:	51990ce8 	.word	0x51990ce8
 800adc4:	403cbbaa 	.word	0x403cbbaa
 800adc8:	843f48ab 	.word	0x843f48ab
 800adcc:	3fdf7186 	.word	0x3fdf7186
 800add0:	2f3d86ed 	.word	0x2f3d86ed
 800add4:	3ffeb730 	.word	0x3ffeb730
 800add8:	ef16c0ea 	.word	0xef16c0ea
 800addc:	4023a29b 	.word	0x4023a29b
 800ade0:	84ebc161 	.word	0x84ebc161
 800ade4:	403147f4 	.word	0x403147f4
 800ade8:	0a47f0a1 	.word	0x0a47f0a1
 800adec:	3fdd2d7f 	.word	0x3fdd2d7f

0800adf0 <master_task>:
QueueHandle_t uart_data_queue;

extern gimbal_control_t gimbal_ctrl_data;


void master_task(void* argument){
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	6078      	str	r0, [r7, #4]
//	imu_init();
//	led_green_off();
//	start_micros_timer();
//	led_toggle();

	gimbal_event_group = xEventGroupCreate();
 800adf8:	f00e fd99 	bl	801992e <xEventGroupCreate>
 800adfc:	4603      	mov	r3, r0
 800adfe:	4a73      	ldr	r2, [pc, #460]	@ (800afcc <master_task+0x1dc>)
 800ae00:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 800ae02:	f00e fd94 	bl	801992e <xEventGroupCreate>
 800ae06:	4603      	mov	r3, r0
 800ae08:	4a71      	ldr	r2, [pc, #452]	@ (800afd0 <master_task+0x1e0>)
 800ae0a:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 800ae0c:	f00e fd8f 	bl	801992e <xEventGroupCreate>
 800ae10:	4603      	mov	r3, r0
 800ae12:	4a70      	ldr	r2, [pc, #448]	@ (800afd4 <master_task+0x1e4>)
 800ae14:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 800ae16:	2203      	movs	r2, #3
 800ae18:	2100      	movs	r1, #0
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	f00e ffe9 	bl	8019df2 <xQueueGenericCreate>
 800ae20:	4603      	mov	r3, r0
 800ae22:	4a6d      	ldr	r2, [pc, #436]	@ (800afd8 <master_task+0x1e8>)
 800ae24:	6013      	str	r3, [r2, #0]


	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 800ae26:	2200      	movs	r2, #0
 800ae28:	2110      	movs	r1, #16
 800ae2a:	2005      	movs	r0, #5
 800ae2c:	f00e ffe1 	bl	8019df2 <xQueueGenericCreate>
 800ae30:	4603      	mov	r3, r0
 800ae32:	4a6a      	ldr	r2, [pc, #424]	@ (800afdc <master_task+0x1ec>)
 800ae34:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 800ae36:	2200      	movs	r2, #0
 800ae38:	2110      	movs	r1, #16
 800ae3a:	2005      	movs	r0, #5
 800ae3c:	f00e ffd9 	bl	8019df2 <xQueueGenericCreate>
 800ae40:	4603      	mov	r3, r0
 800ae42:	4a67      	ldr	r2, [pc, #412]	@ (800afe0 <master_task+0x1f0>)
 800ae44:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 800ae46:	2200      	movs	r2, #0
 800ae48:	210c      	movs	r1, #12
 800ae4a:	2005      	movs	r0, #5
 800ae4c:	f00e ffd1 	bl	8019df2 <xQueueGenericCreate>
 800ae50:	4603      	mov	r3, r0
 800ae52:	4a64      	ldr	r2, [pc, #400]	@ (800afe4 <master_task+0x1f4>)
 800ae54:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	g_buzzing_task_msg = xQueueCreate(48, sizeof(uint8_t));
 800ae56:	2200      	movs	r2, #0
 800ae58:	2101      	movs	r1, #1
 800ae5a:	2030      	movs	r0, #48	@ 0x30
 800ae5c:	f00e ffc9 	bl	8019df2 <xQueueGenericCreate>
 800ae60:	4603      	mov	r3, r0
 800ae62:	4a61      	ldr	r2, [pc, #388]	@ (800afe8 <master_task+0x1f8>)
 800ae64:	6013      	str	r3, [r2, #0]


	/* add threads, ... */
	//todo: adjust priorities
	//Threads creation
	xTaskCreate(Ctrl_Task, "Ctrl_Task_task",
 800ae66:	4b61      	ldr	r3, [pc, #388]	@ (800afec <master_task+0x1fc>)
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	2304      	movs	r3, #4
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	2301      	movs	r3, #1
 800ae70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae74:	495e      	ldr	r1, [pc, #376]	@ (800aff0 <master_task+0x200>)
 800ae76:	485f      	ldr	r0, [pc, #380]	@ (800aff4 <master_task+0x204>)
 800ae78:	f00f fcfc 	bl	801a874 <xTaskCreate>
					configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
							&Ctrl_Task_handle);

	xTaskCreate(LegPos_UpdateTask, "LegPos_UpdateTask",
 800ae7c:	4b5e      	ldr	r3, [pc, #376]	@ (800aff8 <master_task+0x208>)
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	2304      	movs	r3, #4
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	2301      	movs	r3, #1
 800ae86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae8a:	495c      	ldr	r1, [pc, #368]	@ (800affc <master_task+0x20c>)
 800ae8c:	485c      	ldr	r0, [pc, #368]	@ (800b000 <master_task+0x210>)
 800ae8e:	f00f fcf1 	bl	801a874 <xTaskCreate>
				configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
						&LegPos_UpdateTask_handle);

	xTaskCreate(Ctrl_TargetUpdateTask, "Ctrl_TargetUpdateTask",
 800ae92:	4b5c      	ldr	r3, [pc, #368]	@ (800b004 <master_task+0x214>)
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	2304      	movs	r3, #4
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aea0:	4959      	ldr	r1, [pc, #356]	@ (800b008 <master_task+0x218>)
 800aea2:	485a      	ldr	r0, [pc, #360]	@ (800b00c <master_task+0x21c>)
 800aea4:	f00f fce6 	bl	801a874 <xTaskCreate>
			configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
					&Ctrl_TargetUpdateTask_handle);

	xTaskCreate(motors_process_task, "motor_process",
 800aea8:	4b59      	ldr	r3, [pc, #356]	@ (800b010 <master_task+0x220>)
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	2304      	movs	r3, #4
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aeb6:	4957      	ldr	r1, [pc, #348]	@ (800b014 <master_task+0x224>)
 800aeb8:	4857      	ldr	r0, [pc, #348]	@ (800b018 <master_task+0x228>)
 800aeba:	f00f fcdb 	bl	801a874 <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
				&leg_kinematic_handle);

	xTaskCreate(balancing_task, "balancing_task",
 800aebe:	4b57      	ldr	r3, [pc, #348]	@ (800b01c <master_task+0x22c>)
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	2304      	movs	r3, #4
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	2301      	movs	r3, #1
 800aec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aecc:	4954      	ldr	r1, [pc, #336]	@ (800b020 <master_task+0x230>)
 800aece:	4855      	ldr	r0, [pc, #340]	@ (800b024 <master_task+0x234>)
 800aed0:	f00f fcd0 	bl	801a874 <xTaskCreate>
			configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
					&balancing_task_handle);

	xTaskCreate(leg_kinematic_task, "leg_kinematic",
 800aed4:	4b54      	ldr	r3, [pc, #336]	@ (800b028 <master_task+0x238>)
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	2304      	movs	r3, #4
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	2301      	movs	r3, #1
 800aede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aee2:	4952      	ldr	r1, [pc, #328]	@ (800b02c <master_task+0x23c>)
 800aee4:	4852      	ldr	r0, [pc, #328]	@ (800b030 <master_task+0x240>)
 800aee6:	f00f fcc5 	bl	801a874 <xTaskCreate>
			configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
					&motors_process_handle);

	xTaskCreate(imu_processing_task, "IMU_task",
 800aeea:	4b52      	ldr	r3, [pc, #328]	@ (800b034 <master_task+0x244>)
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	230f      	movs	r3, #15
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	2301      	movs	r3, #1
 800aef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aef8:	494f      	ldr	r1, [pc, #316]	@ (800b038 <master_task+0x248>)
 800aefa:	4850      	ldr	r0, [pc, #320]	@ (800b03c <master_task+0x24c>)
 800aefc:	f00f fcba 	bl	801a874 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 15,
			&imu_processing_task_handle);

	xTaskCreate(motor_calib_task, "motor_calib_task",
 800af00:	4b4f      	ldr	r3, [pc, #316]	@ (800b040 <master_task+0x250>)
 800af02:	9301      	str	r3, [sp, #4]
 800af04:	2309      	movs	r3, #9
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	2301      	movs	r3, #1
 800af0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af0e:	494d      	ldr	r1, [pc, #308]	@ (800b044 <master_task+0x254>)
 800af10:	484d      	ldr	r0, [pc, #308]	@ (800b048 <master_task+0x258>)
 800af12:	f00f fcaf 	bl	801a874 <xTaskCreate>
	} else {
//		xTaskCreate(launcher_control_task, "launcher_task",
//		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
//				&launcher_control_task_handle);
	}
	gimbal_ctrl_data.yaw_semaphore = xSemaphoreCreateBinary();
 800af16:	2203      	movs	r2, #3
 800af18:	2100      	movs	r1, #0
 800af1a:	2001      	movs	r0, #1
 800af1c:	f00e ff69 	bl	8019df2 <xQueueGenericCreate>
 800af20:	4603      	mov	r3, r0
 800af22:	4a4a      	ldr	r2, [pc, #296]	@ (800b04c <master_task+0x25c>)
 800af24:	6113      	str	r3, [r2, #16]
	xSemaphoreGive(gimbal_ctrl_data.yaw_semaphore);
 800af26:	4b49      	ldr	r3, [pc, #292]	@ (800b04c <master_task+0x25c>)
 800af28:	6918      	ldr	r0, [r3, #16]
 800af2a:	2300      	movs	r3, #0
 800af2c:	2200      	movs	r2, #0
 800af2e:	2100      	movs	r1, #0
 800af30:	f00e ffbe 	bl	8019eb0 <xQueueGenericSend>
	xTaskCreate(control_input_task, "RC_task",
 800af34:	4b46      	ldr	r3, [pc, #280]	@ (800b050 <master_task+0x260>)
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	2304      	movs	r3, #4
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	2301      	movs	r3, #1
 800af3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af42:	4944      	ldr	r1, [pc, #272]	@ (800b054 <master_task+0x264>)
 800af44:	4844      	ldr	r0, [pc, #272]	@ (800b058 <master_task+0x268>)
 800af46:	f00f fc95 	bl	801a874 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 4,
			&control_input_task_handle);
	xTaskCreate(referee_processing_task, "referee_task", 512, (void*) 1,
 800af4a:	4b44      	ldr	r3, [pc, #272]	@ (800b05c <master_task+0x26c>)
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	2302      	movs	r3, #2
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	2301      	movs	r3, #1
 800af54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af58:	4941      	ldr	r1, [pc, #260]	@ (800b060 <master_task+0x270>)
 800af5a:	4842      	ldr	r0, [pc, #264]	@ (800b064 <master_task+0x274>)
 800af5c:	f00f fc8a 	bl	801a874 <xTaskCreate>
			(UBaseType_t) 2, &referee_processing_task_handle);
	xTaskCreate(motor_control_task, "motor_control_task", 512, (void*) 3,
 800af60:	4b41      	ldr	r3, [pc, #260]	@ (800b068 <master_task+0x278>)
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	2308      	movs	r3, #8
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	2303      	movs	r3, #3
 800af6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af6e:	493f      	ldr	r1, [pc, #252]	@ (800b06c <master_task+0x27c>)
 800af70:	483f      	ldr	r0, [pc, #252]	@ (800b070 <master_task+0x280>)
 800af72:	f00f fc7f 	bl	801a874 <xTaskCreate>
			(UBaseType_t) 8, &motor_control_task_handle);
	xTaskCreate(buzzing_task, "buzzer_task",
 800af76:	4b3f      	ldr	r3, [pc, #252]	@ (800b074 <master_task+0x284>)
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	2301      	movs	r3, #1
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	2301      	movs	r3, #1
 800af80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af84:	493c      	ldr	r1, [pc, #240]	@ (800b078 <master_task+0x288>)
 800af86:	483d      	ldr	r0, [pc, #244]	@ (800b07c <master_task+0x28c>)
 800af88:	f00f fc74 	bl	801a874 <xTaskCreate>
	configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &buzzing_task_handle);
	if (usb_continue_semaphore == NULL) {
 800af8c:	4b12      	ldr	r3, [pc, #72]	@ (800afd8 <master_task+0x1e8>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00a      	beq.n	800afaa <master_task+0x1ba>
		//error handler
	} else {
		xTaskCreate(usb_task, "usb_task",
 800af94:	4b3a      	ldr	r3, [pc, #232]	@ (800b080 <master_task+0x290>)
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	2301      	movs	r3, #1
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	2301      	movs	r3, #1
 800af9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afa2:	4938      	ldr	r1, [pc, #224]	@ (800b084 <master_task+0x294>)
 800afa4:	4838      	ldr	r0, [pc, #224]	@ (800b088 <master_task+0x298>)
 800afa6:	f00f fc65 	bl	801a874 <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) 1, (UBaseType_t) 1, &usb_task_handle);
	}

//	xTaskCreate(telemetry_task, "telemetry_task", 700, (void*) 1,
//			(UBaseType_t) 5, &telemetry_task_handle);
	xTaskCreate(hud_task, "hud_task", 512, (void*) 3,
 800afaa:	4b38      	ldr	r3, [pc, #224]	@ (800b08c <master_task+0x29c>)
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	2305      	movs	r3, #5
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	2303      	movs	r3, #3
 800afb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afb8:	4935      	ldr	r1, [pc, #212]	@ (800b090 <master_task+0x2a0>)
 800afba:	4836      	ldr	r0, [pc, #216]	@ (800b094 <master_task+0x2a4>)
 800afbc:	f00f fc5a 	bl	801a874 <xTaskCreate>
			(UBaseType_t) 5, &hud_task_handle);


//	vTaskDelete(master_task_handle);
	while(1){
		vTaskDelay(1000);
 800afc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800afc4:	f00f fe5e 	bl	801ac84 <vTaskDelay>
 800afc8:	e7fa      	b.n	800afc0 <master_task+0x1d0>
 800afca:	bf00      	nop
 800afcc:	20003ba0 	.word	0x20003ba0
 800afd0:	20003ba4 	.word	0x20003ba4
 800afd4:	20003ba8 	.word	0x20003ba8
 800afd8:	20003bac 	.word	0x20003bac
 800afdc:	20003bb0 	.word	0x20003bb0
 800afe0:	20003bb4 	.word	0x20003bb4
 800afe4:	20003bb8 	.word	0x20003bb8
 800afe8:	20003bbc 	.word	0x20003bbc
 800afec:	20003b9c 	.word	0x20003b9c
 800aff0:	080243d8 	.word	0x080243d8
 800aff4:	08005341 	.word	0x08005341
 800aff8:	20003b98 	.word	0x20003b98
 800affc:	080243e8 	.word	0x080243e8
 800b000:	08005101 	.word	0x08005101
 800b004:	20003b94 	.word	0x20003b94
 800b008:	080243fc 	.word	0x080243fc
 800b00c:	08004f01 	.word	0x08004f01
 800b010:	20003b8c 	.word	0x20003b8c
 800b014:	08024414 	.word	0x08024414
 800b018:	0800cc19 	.word	0x0800cc19
 800b01c:	20003b90 	.word	0x20003b90
 800b020:	08024424 	.word	0x08024424
 800b024:	08004c71 	.word	0x08004c71
 800b028:	20003b88 	.word	0x20003b88
 800b02c:	08024434 	.word	0x08024434
 800b030:	08008c19 	.word	0x08008c19
 800b034:	20003b7c 	.word	0x20003b7c
 800b038:	08024444 	.word	0x08024444
 800b03c:	08008bc5 	.word	0x08008bc5
 800b040:	20003b74 	.word	0x20003b74
 800b044:	08024450 	.word	0x08024450
 800b048:	0800c445 	.word	0x0800c445
 800b04c:	200038c0 	.word	0x200038c0
 800b050:	20003b6c 	.word	0x20003b6c
 800b054:	08024464 	.word	0x08024464
 800b058:	08006da1 	.word	0x08006da1
 800b05c:	20003b68 	.word	0x20003b68
 800b060:	0802446c 	.word	0x0802446c
 800b064:	0800d2f1 	.word	0x0800d2f1
 800b068:	20003b80 	.word	0x20003b80
 800b06c:	0802447c 	.word	0x0802447c
 800b070:	0800c719 	.word	0x0800c719
 800b074:	20003b70 	.word	0x20003b70
 800b078:	08024490 	.word	0x08024490
 800b07c:	08006609 	.word	0x08006609
 800b080:	20003b78 	.word	0x20003b78
 800b084:	0802449c 	.word	0x0802449c
 800b088:	0800d87d 	.word	0x0800d87d
 800b08c:	20003b84 	.word	0x20003b84
 800b090:	080244a8 	.word	0x080244a8
 800b094:	08007bf9 	.word	0x08007bf9

0800b098 <set_motor_config>:
#include "motor_config.h"

extern QueueHandle_t g_buzzing_task_msg;
uint16_t g_motor_fault;

void set_motor_config(motor_data_t *motor) {
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	//general config:
	switch (motor->motor_type) {
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	789b      	ldrb	r3, [r3, #2]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	2b08      	cmp	r3, #8
 800b0a8:	f200 8115 	bhi.w	800b2d6 <set_motor_config+0x23e>
 800b0ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b4 <set_motor_config+0x1c>)
 800b0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b2:	bf00      	nop
 800b0b4:	0800b1a5 	.word	0x0800b1a5
 800b0b8:	0800b271 	.word	0x0800b271
 800b0bc:	0800b0d9 	.word	0x0800b0d9
 800b0c0:	0800b13d 	.word	0x0800b13d
 800b0c4:	0800b0d9 	.word	0x0800b0d9
 800b0c8:	0800b271 	.word	0x0800b271
 800b0cc:	0800b271 	.word	0x0800b271
 800b0d0:	0800b0d9 	.word	0x0800b0d9
 800b0d4:	0800b20b 	.word	0x0800b20b
	case TYPE_M3508_ANGLE:
	case TYPE_M3508_STEPS:
	case TYPE_M3508:
		motor->angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a84      	ldr	r2, [pc, #528]	@ (800b2ec <set_motor_config+0x254>)
 800b0dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = M3508_MAX_RPM;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a83      	ldr	r2, [pc, #524]	@ (800b2f0 <set_motor_config+0x258>)
 800b0e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800b0ee:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096 * M3508_GEARBOX_RATIO;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a80      	ldr	r2, [pc, #512]	@ (800b2f4 <set_motor_config+0x25c>)
 800b0f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096 * M3508_GEARBOX_RATIO;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a7f      	ldr	r2, [pc, #508]	@ (800b2f8 <set_motor_config+0x260>)
 800b0fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b10c:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -PI;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a79      	ldr	r2, [pc, #484]	@ (800b2fc <set_motor_config+0x264>)
 800b118:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = PI;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a78      	ldr	r2, [pc, #480]	@ (800b300 <set_motor_config+0x268>)
 800b120:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang - motor->angle_data.min_ang;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800b130:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800b13a:	e0cd      	b.n	800b2d8 <set_motor_config+0x240>
	case TYPE_M3508_NGEARBOX:
		motor->angle_data.gearbox_ratio = 1;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b142:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = M3508_MAX_RPM;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a69      	ldr	r2, [pc, #420]	@ (800b2f0 <set_motor_config+0x258>)
 800b14a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800b154:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a6a      	ldr	r2, [pc, #424]	@ (800b304 <set_motor_config+0x26c>)
 800b15a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b164:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b174:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -PI;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a5f      	ldr	r2, [pc, #380]	@ (800b2fc <set_motor_config+0x264>)
 800b180:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = PI;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a5e      	ldr	r2, [pc, #376]	@ (800b300 <set_motor_config+0x268>)
 800b188:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800b198:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800b1a2:	e099      	b.n	800b2d8 <set_motor_config+0x240>

	case TYPE_GM6020:
		motor->angle_data.gearbox_ratio = 1;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800b1aa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = GM6020_MAX_RPM;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a55      	ldr	r2, [pc, #340]	@ (800b308 <set_motor_config+0x270>)
 800b1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a54      	ldr	r2, [pc, #336]	@ (800b30c <set_motor_config+0x274>)
 800b1ba:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a51      	ldr	r2, [pc, #324]	@ (800b304 <set_motor_config+0x26c>)
 800b1c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b1ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b1da:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.max_ang = PI;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a46      	ldr	r2, [pc, #280]	@ (800b300 <set_motor_config+0x268>)
 800b1e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.min_ang = -PI;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a43      	ldr	r2, [pc, #268]	@ (800b2fc <set_motor_config+0x264>)
 800b1ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800b1fe:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800b208:	e066      	b.n	800b2d8 <set_motor_config+0x240>

	case TYPE_GM6020_720:
		motor->angle_data.gearbox_ratio = 0;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f04f 0200 	mov.w	r2, #0
 800b210:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = GM6020_MAX_RPM;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a3c      	ldr	r2, [pc, #240]	@ (800b308 <set_motor_config+0x270>)
 800b218:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = GM6020_MAX_OUTPUT;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a3b      	ldr	r2, [pc, #236]	@ (800b30c <set_motor_config+0x274>)
 800b220:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -8192;	//-4096*2
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a3a      	ldr	r2, [pc, #232]	@ (800b310 <set_motor_config+0x278>)
 800b226:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 8192;	//4096*2
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b230:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b240:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -2 * PI;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a32      	ldr	r2, [pc, #200]	@ (800b314 <set_motor_config+0x27c>)
 800b24c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = 2 * PI;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a31      	ldr	r2, [pc, #196]	@ (800b318 <set_motor_config+0x280>)
 800b254:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800b264:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800b26e:	e033      	b.n	800b2d8 <set_motor_config+0x240>
	case TYPE_M2006:
	case TYPE_M2006_STEPS:
	case TYPE_M2006_ANGLE:
		motor->angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a2a      	ldr	r2, [pc, #168]	@ (800b31c <set_motor_config+0x284>)
 800b274:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		motor->angle_pid.physical_max = M2006_MAX_RPM;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a29      	ldr	r2, [pc, #164]	@ (800b320 <set_motor_config+0x288>)
 800b27c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		motor->rpm_pid.physical_max = M2006_MAX_OUTPUT;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800b286:	65da      	str	r2, [r3, #92]	@ 0x5c
		motor->angle_data.min_ticks = -4096 * M2006_GEARBOX_RATIO;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a26      	ldr	r2, [pc, #152]	@ (800b324 <set_motor_config+0x28c>)
 800b28c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		motor->angle_data.max_ticks = 4096 * M2006_GEARBOX_RATIO;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f44f 3210 	mov.w	r2, #147456	@ 0x24000
 800b296:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
				- motor->angle_data.min_ticks;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2a6:	1ad2      	subs	r2, r2, r3
		motor->angle_data.tick_range = motor->angle_data.max_ticks
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		motor->angle_data.min_ang = -PI;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a12      	ldr	r2, [pc, #72]	@ (800b2fc <set_motor_config+0x264>)
 800b2b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		motor->angle_data.max_ang = PI;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a11      	ldr	r2, [pc, #68]	@ (800b300 <set_motor_config+0x268>)
 800b2ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
				- motor->angle_data.min_ang;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800b2ca:	ee77 7a67 	vsub.f32	s15, s14, s15
		motor->angle_data.ang_range = motor->angle_data.max_ang
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		break;
 800b2d4:	e000      	b.n	800b2d8 <set_motor_config+0x240>
	default:
		break;
 800b2d6:	bf00      	nop
	}

	motor->angle_data.init = 0;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	4199999a 	.word	0x4199999a
 800b2f0:	460fc000 	.word	0x460fc000
 800b2f4:	fffecccd 	.word	0xfffecccd
 800b2f8:	00013333 	.word	0x00013333
 800b2fc:	c0490fdb 	.word	0xc0490fdb
 800b300:	40490fdb 	.word	0x40490fdb
 800b304:	fffff000 	.word	0xfffff000
 800b308:	43c80000 	.word	0x43c80000
 800b30c:	469c4000 	.word	0x469c4000
 800b310:	ffffe000 	.word	0xffffe000
 800b314:	c0c90fdb 	.word	0xc0c90fdb
 800b318:	40c90fdb 	.word	0x40c90fdb
 800b31c:	42100000 	.word	0x42100000
 800b320:	466a6000 	.word	0x466a6000
 800b324:	fffdc000 	.word	0xfffdc000

0800b328 <config_motors>:

extern motor_data_t g_can_motors[24];
void config_motors() {
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 24; i++) {
 800b32e:	2300      	movs	r3, #0
 800b330:	71fb      	strb	r3, [r7, #7]
 800b332:	e042      	b.n	800b3ba <config_motors+0x92>
		//reset all the values to 0
		g_can_motors[i].motor_type = 0;
 800b334:	79fa      	ldrb	r2, [r7, #7]
 800b336:	49c4      	ldr	r1, [pc, #784]	@ (800b648 <config_motors+0x320>)
 800b338:	4613      	mov	r3, r2
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	1a9b      	subs	r3, r3, r2
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	440b      	add	r3, r1
 800b342:	3302      	adds	r3, #2
 800b344:	2200      	movs	r2, #0
 800b346:	701a      	strb	r2, [r3, #0]
		g_can_motors[i].rpm_pid.output = 0;
 800b348:	79fa      	ldrb	r2, [r7, #7]
 800b34a:	49bf      	ldr	r1, [pc, #764]	@ (800b648 <config_motors+0x320>)
 800b34c:	4613      	mov	r3, r2
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	1a9b      	subs	r3, r3, r2
 800b352:	011b      	lsls	r3, r3, #4
 800b354:	440b      	add	r3, r1
 800b356:	3358      	adds	r3, #88	@ 0x58
 800b358:	f04f 0200 	mov.w	r2, #0
 800b35c:	601a      	str	r2, [r3, #0]
		g_can_motors[i].rpm_pid.integral = 0;
 800b35e:	79fa      	ldrb	r2, [r7, #7]
 800b360:	49b9      	ldr	r1, [pc, #740]	@ (800b648 <config_motors+0x320>)
 800b362:	4613      	mov	r3, r2
 800b364:	011b      	lsls	r3, r3, #4
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	440b      	add	r3, r1
 800b36c:	334c      	adds	r3, #76	@ 0x4c
 800b36e:	f04f 0200 	mov.w	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_pid.output = 0;
 800b374:	79fa      	ldrb	r2, [r7, #7]
 800b376:	49b4      	ldr	r1, [pc, #720]	@ (800b648 <config_motors+0x320>)
 800b378:	4613      	mov	r3, r2
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	1a9b      	subs	r3, r3, r2
 800b37e:	011b      	lsls	r3, r3, #4
 800b380:	440b      	add	r3, r1
 800b382:	3388      	adds	r3, #136	@ 0x88
 800b384:	f04f 0200 	mov.w	r2, #0
 800b388:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_pid.integral = 0;
 800b38a:	79fa      	ldrb	r2, [r7, #7]
 800b38c:	49ae      	ldr	r1, [pc, #696]	@ (800b648 <config_motors+0x320>)
 800b38e:	4613      	mov	r3, r2
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	1a9b      	subs	r3, r3, r2
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	440b      	add	r3, r1
 800b398:	337c      	adds	r3, #124	@ 0x7c
 800b39a:	f04f 0200 	mov.w	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
		g_can_motors[i].angle_data.ticks = 0;
 800b3a0:	79fa      	ldrb	r2, [r7, #7]
 800b3a2:	49a9      	ldr	r1, [pc, #676]	@ (800b648 <config_motors+0x320>)
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	011b      	lsls	r3, r3, #4
 800b3a8:	1a9b      	subs	r3, r3, r2
 800b3aa:	011b      	lsls	r3, r3, #4
 800b3ac:	440b      	add	r3, r1
 800b3ae:	3398      	adds	r3, #152	@ 0x98
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 24; i++) {
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	71fb      	strb	r3, [r7, #7]
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	2b17      	cmp	r3, #23
 800b3be:	d9b9      	bls.n	800b334 <config_motors+0xc>
	}

	//initialise motor data
#ifdef LEFT_MOTOR_ID
	uint8_t motor_id = LEFT_MOTOR_ID - 1;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 800b3c4:	79ba      	ldrb	r2, [r7, #6]
 800b3c6:	49a0      	ldr	r1, [pc, #640]	@ (800b648 <config_motors+0x320>)
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	011b      	lsls	r3, r3, #4
 800b3cc:	1a9b      	subs	r3, r3, r2
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	440b      	add	r3, r1
 800b3d2:	3302      	adds	r3, #2
 800b3d4:	2203      	movs	r2, #3
 800b3d6:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800b3d8:	79ba      	ldrb	r2, [r7, #6]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	1a9b      	subs	r3, r3, r2
 800b3e0:	011b      	lsls	r3, r3, #4
 800b3e2:	4a99      	ldr	r2, [pc, #612]	@ (800b648 <config_motors+0x320>)
 800b3e4:	4413      	add	r3, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7ff fe56 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800b3ec:	79ba      	ldrb	r2, [r7, #6]
 800b3ee:	4996      	ldr	r1, [pc, #600]	@ (800b648 <config_motors+0x320>)
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	011b      	lsls	r3, r3, #4
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	011b      	lsls	r3, r3, #4
 800b3f8:	440b      	add	r3, r1
 800b3fa:	339c      	adds	r3, #156	@ 0x9c
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b400:	79ba      	ldrb	r2, [r7, #6]
 800b402:	4991      	ldr	r1, [pc, #580]	@ (800b648 <config_motors+0x320>)
 800b404:	4613      	mov	r3, r2
 800b406:	011b      	lsls	r3, r3, #4
 800b408:	1a9b      	subs	r3, r3, r2
 800b40a:	011b      	lsls	r3, r3, #4
 800b40c:	440b      	add	r3, r1
 800b40e:	33c4      	adds	r3, #196	@ 0xc4
 800b410:	4a8e      	ldr	r2, [pc, #568]	@ (800b64c <config_motors+0x324>)
 800b412:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b414:	79ba      	ldrb	r2, [r7, #6]
 800b416:	498c      	ldr	r1, [pc, #560]	@ (800b648 <config_motors+0x320>)
 800b418:	4613      	mov	r3, r2
 800b41a:	011b      	lsls	r3, r3, #4
 800b41c:	1a9b      	subs	r3, r3, r2
 800b41e:	011b      	lsls	r3, r3, #4
 800b420:	440b      	add	r3, r1
 800b422:	33c0      	adds	r3, #192	@ 0xc0
 800b424:	4a8a      	ldr	r2, [pc, #552]	@ (800b650 <config_motors+0x328>)
 800b426:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800b428:	79ba      	ldrb	r2, [r7, #6]
 800b42a:	4987      	ldr	r1, [pc, #540]	@ (800b648 <config_motors+0x320>)
 800b42c:	4613      	mov	r3, r2
 800b42e:	011b      	lsls	r3, r3, #4
 800b430:	1a9b      	subs	r3, r3, r2
 800b432:	011b      	lsls	r3, r3, #4
 800b434:	440b      	add	r3, r1
 800b436:	3338      	adds	r3, #56	@ 0x38
 800b438:	f04f 0200 	mov.w	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800b43e:	79ba      	ldrb	r2, [r7, #6]
 800b440:	4981      	ldr	r1, [pc, #516]	@ (800b648 <config_motors+0x320>)
 800b442:	4613      	mov	r3, r2
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	1a9b      	subs	r3, r3, r2
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	440b      	add	r3, r1
 800b44c:	333c      	adds	r3, #60	@ 0x3c
 800b44e:	f04f 0200 	mov.w	r2, #0
 800b452:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800b454:	79ba      	ldrb	r2, [r7, #6]
 800b456:	497c      	ldr	r1, [pc, #496]	@ (800b648 <config_motors+0x320>)
 800b458:	4613      	mov	r3, r2
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	1a9b      	subs	r3, r3, r2
 800b45e:	011b      	lsls	r3, r3, #4
 800b460:	440b      	add	r3, r1
 800b462:	3340      	adds	r3, #64	@ 0x40
 800b464:	f04f 0200 	mov.w	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800b46a:	79ba      	ldrb	r2, [r7, #6]
 800b46c:	4976      	ldr	r1, [pc, #472]	@ (800b648 <config_motors+0x320>)
 800b46e:	4613      	mov	r3, r2
 800b470:	011b      	lsls	r3, r3, #4
 800b472:	1a9b      	subs	r3, r3, r2
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	440b      	add	r3, r1
 800b478:	33d4      	adds	r3, #212	@ 0xd4
 800b47a:	4a76      	ldr	r2, [pc, #472]	@ (800b654 <config_motors+0x32c>)
 800b47c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800b47e:	79ba      	ldrb	r2, [r7, #6]
 800b480:	4971      	ldr	r1, [pc, #452]	@ (800b648 <config_motors+0x320>)
 800b482:	4613      	mov	r3, r2
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	011b      	lsls	r3, r3, #4
 800b48a:	440b      	add	r3, r1
 800b48c:	3350      	adds	r3, #80	@ 0x50
 800b48e:	f04f 0200 	mov.w	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800b494:	79ba      	ldrb	r2, [r7, #6]
 800b496:	496c      	ldr	r1, [pc, #432]	@ (800b648 <config_motors+0x320>)
 800b498:	4613      	mov	r3, r2
 800b49a:	011b      	lsls	r3, r3, #4
 800b49c:	1a9b      	subs	r3, r3, r2
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	440b      	add	r3, r1
 800b4a2:	3354      	adds	r3, #84	@ 0x54
 800b4a4:	f04f 0200 	mov.w	r2, #0
 800b4a8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 10;
 800b4aa:	79ba      	ldrb	r2, [r7, #6]
 800b4ac:	4966      	ldr	r1, [pc, #408]	@ (800b648 <config_motors+0x320>)
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	440b      	add	r3, r1
 800b4b8:	3330      	adds	r3, #48	@ 0x30
 800b4ba:	4a67      	ldr	r2, [pc, #412]	@ (800b658 <config_motors+0x330>)
 800b4bc:	601a      	str	r2, [r3, #0]
#endif

#ifdef RIGHT_MOTOR_ID
	motor_id = RIGHT_MOTOR_ID - 1;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508;
 800b4c2:	79ba      	ldrb	r2, [r7, #6]
 800b4c4:	4960      	ldr	r1, [pc, #384]	@ (800b648 <config_motors+0x320>)
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	011b      	lsls	r3, r3, #4
 800b4ca:	1a9b      	subs	r3, r3, r2
 800b4cc:	011b      	lsls	r3, r3, #4
 800b4ce:	440b      	add	r3, r1
 800b4d0:	3302      	adds	r3, #2
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800b4d6:	79ba      	ldrb	r2, [r7, #6]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	1a9b      	subs	r3, r3, r2
 800b4de:	011b      	lsls	r3, r3, #4
 800b4e0:	4a59      	ldr	r2, [pc, #356]	@ (800b648 <config_motors+0x320>)
 800b4e2:	4413      	add	r3, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff fdd7 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800b4ea:	79ba      	ldrb	r2, [r7, #6]
 800b4ec:	4956      	ldr	r1, [pc, #344]	@ (800b648 <config_motors+0x320>)
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	011b      	lsls	r3, r3, #4
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	011b      	lsls	r3, r3, #4
 800b4f6:	440b      	add	r3, r1
 800b4f8:	339c      	adds	r3, #156	@ 0x9c
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b4fe:	79ba      	ldrb	r2, [r7, #6]
 800b500:	4951      	ldr	r1, [pc, #324]	@ (800b648 <config_motors+0x320>)
 800b502:	4613      	mov	r3, r2
 800b504:	011b      	lsls	r3, r3, #4
 800b506:	1a9b      	subs	r3, r3, r2
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	440b      	add	r3, r1
 800b50c:	33c4      	adds	r3, #196	@ 0xc4
 800b50e:	4a4f      	ldr	r2, [pc, #316]	@ (800b64c <config_motors+0x324>)
 800b510:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b512:	79ba      	ldrb	r2, [r7, #6]
 800b514:	494c      	ldr	r1, [pc, #304]	@ (800b648 <config_motors+0x320>)
 800b516:	4613      	mov	r3, r2
 800b518:	011b      	lsls	r3, r3, #4
 800b51a:	1a9b      	subs	r3, r3, r2
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	440b      	add	r3, r1
 800b520:	33c0      	adds	r3, #192	@ 0xc0
 800b522:	4a4b      	ldr	r2, [pc, #300]	@ (800b650 <config_motors+0x328>)
 800b524:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800b526:	79ba      	ldrb	r2, [r7, #6]
 800b528:	4947      	ldr	r1, [pc, #284]	@ (800b648 <config_motors+0x320>)
 800b52a:	4613      	mov	r3, r2
 800b52c:	011b      	lsls	r3, r3, #4
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	011b      	lsls	r3, r3, #4
 800b532:	440b      	add	r3, r1
 800b534:	33d4      	adds	r3, #212	@ 0xd4
 800b536:	4a47      	ldr	r2, [pc, #284]	@ (800b654 <config_motors+0x32c>)
 800b538:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800b53a:	79ba      	ldrb	r2, [r7, #6]
 800b53c:	4942      	ldr	r1, [pc, #264]	@ (800b648 <config_motors+0x320>)
 800b53e:	4613      	mov	r3, r2
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	1a9b      	subs	r3, r3, r2
 800b544:	011b      	lsls	r3, r3, #4
 800b546:	440b      	add	r3, r1
 800b548:	3338      	adds	r3, #56	@ 0x38
 800b54a:	f04f 0200 	mov.w	r2, #0
 800b54e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800b550:	79ba      	ldrb	r2, [r7, #6]
 800b552:	493d      	ldr	r1, [pc, #244]	@ (800b648 <config_motors+0x320>)
 800b554:	4613      	mov	r3, r2
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	1a9b      	subs	r3, r3, r2
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	440b      	add	r3, r1
 800b55e:	333c      	adds	r3, #60	@ 0x3c
 800b560:	f04f 0200 	mov.w	r2, #0
 800b564:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800b566:	79ba      	ldrb	r2, [r7, #6]
 800b568:	4937      	ldr	r1, [pc, #220]	@ (800b648 <config_motors+0x320>)
 800b56a:	4613      	mov	r3, r2
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	1a9b      	subs	r3, r3, r2
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	440b      	add	r3, r1
 800b574:	3340      	adds	r3, #64	@ 0x40
 800b576:	f04f 0200 	mov.w	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800b57c:	79ba      	ldrb	r2, [r7, #6]
 800b57e:	4932      	ldr	r1, [pc, #200]	@ (800b648 <config_motors+0x320>)
 800b580:	4613      	mov	r3, r2
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	1a9b      	subs	r3, r3, r2
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	440b      	add	r3, r1
 800b58a:	3350      	adds	r3, #80	@ 0x50
 800b58c:	f04f 0200 	mov.w	r2, #0
 800b590:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800b592:	79ba      	ldrb	r2, [r7, #6]
 800b594:	492c      	ldr	r1, [pc, #176]	@ (800b648 <config_motors+0x320>)
 800b596:	4613      	mov	r3, r2
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	1a9b      	subs	r3, r3, r2
 800b59c:	011b      	lsls	r3, r3, #4
 800b59e:	440b      	add	r3, r1
 800b5a0:	3354      	adds	r3, #84	@ 0x54
 800b5a2:	f04f 0200 	mov.w	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 10;
 800b5a8:	79ba      	ldrb	r2, [r7, #6]
 800b5aa:	4927      	ldr	r1, [pc, #156]	@ (800b648 <config_motors+0x320>)
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	1a9b      	subs	r3, r3, r2
 800b5b2:	011b      	lsls	r3, r3, #4
 800b5b4:	440b      	add	r3, r1
 800b5b6:	3330      	adds	r3, #48	@ 0x30
 800b5b8:	4a27      	ldr	r2, [pc, #156]	@ (800b658 <config_motors+0x330>)
 800b5ba:	601a      	str	r2, [r3, #0]
#endif
#ifdef FR_MOTOR_ID
	motor_id = FR_MOTOR_ID - 1;
 800b5bc:	2304      	movs	r3, #4
 800b5be:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800b5c0:	79ba      	ldrb	r2, [r7, #6]
 800b5c2:	4921      	ldr	r1, [pc, #132]	@ (800b648 <config_motors+0x320>)
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	011b      	lsls	r3, r3, #4
 800b5c8:	1a9b      	subs	r3, r3, r2
 800b5ca:	011b      	lsls	r3, r3, #4
 800b5cc:	440b      	add	r3, r1
 800b5ce:	3302      	adds	r3, #2
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800b5d4:	79ba      	ldrb	r2, [r7, #6]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	4a1a      	ldr	r2, [pc, #104]	@ (800b648 <config_motors+0x320>)
 800b5e0:	4413      	add	r3, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7ff fd58 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800b5e8:	79ba      	ldrb	r2, [r7, #6]
 800b5ea:	4917      	ldr	r1, [pc, #92]	@ (800b648 <config_motors+0x320>)
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	011b      	lsls	r3, r3, #4
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	011b      	lsls	r3, r3, #4
 800b5f4:	440b      	add	r3, r1
 800b5f6:	339c      	adds	r3, #156	@ 0x9c
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b5fc:	79ba      	ldrb	r2, [r7, #6]
 800b5fe:	4912      	ldr	r1, [pc, #72]	@ (800b648 <config_motors+0x320>)
 800b600:	4613      	mov	r3, r2
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	1a9b      	subs	r3, r3, r2
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	440b      	add	r3, r1
 800b60a:	33c4      	adds	r3, #196	@ 0xc4
 800b60c:	4a0f      	ldr	r2, [pc, #60]	@ (800b64c <config_motors+0x324>)
 800b60e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b610:	79ba      	ldrb	r2, [r7, #6]
 800b612:	490d      	ldr	r1, [pc, #52]	@ (800b648 <config_motors+0x320>)
 800b614:	4613      	mov	r3, r2
 800b616:	011b      	lsls	r3, r3, #4
 800b618:	1a9b      	subs	r3, r3, r2
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	440b      	add	r3, r1
 800b61e:	33c0      	adds	r3, #192	@ 0xc0
 800b620:	4a0b      	ldr	r2, [pc, #44]	@ (800b650 <config_motors+0x328>)
 800b622:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800b624:	79ba      	ldrb	r2, [r7, #6]
 800b626:	4908      	ldr	r1, [pc, #32]	@ (800b648 <config_motors+0x320>)
 800b628:	4613      	mov	r3, r2
 800b62a:	011b      	lsls	r3, r3, #4
 800b62c:	1a9b      	subs	r3, r3, r2
 800b62e:	011b      	lsls	r3, r3, #4
 800b630:	440b      	add	r3, r1
 800b632:	3338      	adds	r3, #56	@ 0x38
 800b634:	f04f 0200 	mov.w	r2, #0
 800b638:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800b63a:	79ba      	ldrb	r2, [r7, #6]
 800b63c:	4902      	ldr	r1, [pc, #8]	@ (800b648 <config_motors+0x320>)
 800b63e:	4613      	mov	r3, r2
 800b640:	011b      	lsls	r3, r3, #4
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	011b      	lsls	r3, r3, #4
 800b646:	e009      	b.n	800b65c <config_motors+0x334>
 800b648:	20002220 	.word	0x20002220
 800b64c:	40c90fdb 	.word	0x40c90fdb
 800b650:	c0c90fdb 	.word	0xc0c90fdb
 800b654:	43eec2d1 	.word	0x43eec2d1
 800b658:	41200000 	.word	0x41200000
 800b65c:	440b      	add	r3, r1
 800b65e:	333c      	adds	r3, #60	@ 0x3c
 800b660:	f04f 0200 	mov.w	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800b666:	79ba      	ldrb	r2, [r7, #6]
 800b668:	49c4      	ldr	r1, [pc, #784]	@ (800b97c <config_motors+0x654>)
 800b66a:	4613      	mov	r3, r2
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	1a9b      	subs	r3, r3, r2
 800b670:	011b      	lsls	r3, r3, #4
 800b672:	440b      	add	r3, r1
 800b674:	3340      	adds	r3, #64	@ 0x40
 800b676:	f04f 0200 	mov.w	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800b67c:	79ba      	ldrb	r2, [r7, #6]
 800b67e:	49bf      	ldr	r1, [pc, #764]	@ (800b97c <config_motors+0x654>)
 800b680:	4613      	mov	r3, r2
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	1a9b      	subs	r3, r3, r2
 800b686:	011b      	lsls	r3, r3, #4
 800b688:	440b      	add	r3, r1
 800b68a:	33d4      	adds	r3, #212	@ 0xd4
 800b68c:	4abc      	ldr	r2, [pc, #752]	@ (800b980 <config_motors+0x658>)
 800b68e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800b690:	79ba      	ldrb	r2, [r7, #6]
 800b692:	49ba      	ldr	r1, [pc, #744]	@ (800b97c <config_motors+0x654>)
 800b694:	4613      	mov	r3, r2
 800b696:	011b      	lsls	r3, r3, #4
 800b698:	1a9b      	subs	r3, r3, r2
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	440b      	add	r3, r1
 800b69e:	3350      	adds	r3, #80	@ 0x50
 800b6a0:	f04f 0200 	mov.w	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800b6a6:	79ba      	ldrb	r2, [r7, #6]
 800b6a8:	49b4      	ldr	r1, [pc, #720]	@ (800b97c <config_motors+0x654>)
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	011b      	lsls	r3, r3, #4
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	440b      	add	r3, r1
 800b6b4:	3354      	adds	r3, #84	@ 0x54
 800b6b6:	f04f 0200 	mov.w	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800b6bc:	79ba      	ldrb	r2, [r7, #6]
 800b6be:	49af      	ldr	r1, [pc, #700]	@ (800b97c <config_motors+0x654>)
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	1a9b      	subs	r3, r3, r2
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	440b      	add	r3, r1
 800b6ca:	3330      	adds	r3, #48	@ 0x30
 800b6cc:	4aad      	ldr	r2, [pc, #692]	@ (800b984 <config_motors+0x65c>)
 800b6ce:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID - 1;
 800b6d0:	2305      	movs	r3, #5
 800b6d2:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800b6d4:	79ba      	ldrb	r2, [r7, #6]
 800b6d6:	49a9      	ldr	r1, [pc, #676]	@ (800b97c <config_motors+0x654>)
 800b6d8:	4613      	mov	r3, r2
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	440b      	add	r3, r1
 800b6e2:	3302      	adds	r3, #2
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800b6e8:	79ba      	ldrb	r2, [r7, #6]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	1a9b      	subs	r3, r3, r2
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	4aa2      	ldr	r2, [pc, #648]	@ (800b97c <config_motors+0x654>)
 800b6f4:	4413      	add	r3, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff fcce 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800b6fc:	79ba      	ldrb	r2, [r7, #6]
 800b6fe:	499f      	ldr	r1, [pc, #636]	@ (800b97c <config_motors+0x654>)
 800b700:	4613      	mov	r3, r2
 800b702:	011b      	lsls	r3, r3, #4
 800b704:	1a9b      	subs	r3, r3, r2
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	440b      	add	r3, r1
 800b70a:	339c      	adds	r3, #156	@ 0x9c
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b710:	79ba      	ldrb	r2, [r7, #6]
 800b712:	499a      	ldr	r1, [pc, #616]	@ (800b97c <config_motors+0x654>)
 800b714:	4613      	mov	r3, r2
 800b716:	011b      	lsls	r3, r3, #4
 800b718:	1a9b      	subs	r3, r3, r2
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	440b      	add	r3, r1
 800b71e:	33c4      	adds	r3, #196	@ 0xc4
 800b720:	4a99      	ldr	r2, [pc, #612]	@ (800b988 <config_motors+0x660>)
 800b722:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b724:	79ba      	ldrb	r2, [r7, #6]
 800b726:	4995      	ldr	r1, [pc, #596]	@ (800b97c <config_motors+0x654>)
 800b728:	4613      	mov	r3, r2
 800b72a:	011b      	lsls	r3, r3, #4
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	011b      	lsls	r3, r3, #4
 800b730:	440b      	add	r3, r1
 800b732:	33c0      	adds	r3, #192	@ 0xc0
 800b734:	4a95      	ldr	r2, [pc, #596]	@ (800b98c <config_motors+0x664>)
 800b736:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800b738:	79ba      	ldrb	r2, [r7, #6]
 800b73a:	4990      	ldr	r1, [pc, #576]	@ (800b97c <config_motors+0x654>)
 800b73c:	4613      	mov	r3, r2
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	1a9b      	subs	r3, r3, r2
 800b742:	011b      	lsls	r3, r3, #4
 800b744:	440b      	add	r3, r1
 800b746:	33d4      	adds	r3, #212	@ 0xd4
 800b748:	4a8d      	ldr	r2, [pc, #564]	@ (800b980 <config_motors+0x658>)
 800b74a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800b74c:	79ba      	ldrb	r2, [r7, #6]
 800b74e:	498b      	ldr	r1, [pc, #556]	@ (800b97c <config_motors+0x654>)
 800b750:	4613      	mov	r3, r2
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	1a9b      	subs	r3, r3, r2
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	440b      	add	r3, r1
 800b75a:	3338      	adds	r3, #56	@ 0x38
 800b75c:	f04f 0200 	mov.w	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800b762:	79ba      	ldrb	r2, [r7, #6]
 800b764:	4985      	ldr	r1, [pc, #532]	@ (800b97c <config_motors+0x654>)
 800b766:	4613      	mov	r3, r2
 800b768:	011b      	lsls	r3, r3, #4
 800b76a:	1a9b      	subs	r3, r3, r2
 800b76c:	011b      	lsls	r3, r3, #4
 800b76e:	440b      	add	r3, r1
 800b770:	333c      	adds	r3, #60	@ 0x3c
 800b772:	f04f 0200 	mov.w	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800b778:	79ba      	ldrb	r2, [r7, #6]
 800b77a:	4980      	ldr	r1, [pc, #512]	@ (800b97c <config_motors+0x654>)
 800b77c:	4613      	mov	r3, r2
 800b77e:	011b      	lsls	r3, r3, #4
 800b780:	1a9b      	subs	r3, r3, r2
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	440b      	add	r3, r1
 800b786:	3340      	adds	r3, #64	@ 0x40
 800b788:	f04f 0200 	mov.w	r2, #0
 800b78c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800b78e:	79ba      	ldrb	r2, [r7, #6]
 800b790:	497a      	ldr	r1, [pc, #488]	@ (800b97c <config_motors+0x654>)
 800b792:	4613      	mov	r3, r2
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	1a9b      	subs	r3, r3, r2
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	440b      	add	r3, r1
 800b79c:	3350      	adds	r3, #80	@ 0x50
 800b79e:	f04f 0200 	mov.w	r2, #0
 800b7a2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800b7a4:	79ba      	ldrb	r2, [r7, #6]
 800b7a6:	4975      	ldr	r1, [pc, #468]	@ (800b97c <config_motors+0x654>)
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	011b      	lsls	r3, r3, #4
 800b7b0:	440b      	add	r3, r1
 800b7b2:	3354      	adds	r3, #84	@ 0x54
 800b7b4:	f04f 0200 	mov.w	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800b7ba:	79ba      	ldrb	r2, [r7, #6]
 800b7bc:	496f      	ldr	r1, [pc, #444]	@ (800b97c <config_motors+0x654>)
 800b7be:	4613      	mov	r3, r2
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	440b      	add	r3, r1
 800b7c8:	3330      	adds	r3, #48	@ 0x30
 800b7ca:	4a6e      	ldr	r2, [pc, #440]	@ (800b984 <config_motors+0x65c>)
 800b7cc:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID - 1;
 800b7ce:	2306      	movs	r3, #6
 800b7d0:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800b7d2:	79ba      	ldrb	r2, [r7, #6]
 800b7d4:	4969      	ldr	r1, [pc, #420]	@ (800b97c <config_motors+0x654>)
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	011b      	lsls	r3, r3, #4
 800b7da:	1a9b      	subs	r3, r3, r2
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	440b      	add	r3, r1
 800b7e0:	3302      	adds	r3, #2
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800b7e6:	79ba      	ldrb	r2, [r7, #6]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	1a9b      	subs	r3, r3, r2
 800b7ee:	011b      	lsls	r3, r3, #4
 800b7f0:	4a62      	ldr	r2, [pc, #392]	@ (800b97c <config_motors+0x654>)
 800b7f2:	4413      	add	r3, r2
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff fc4f 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800b7fa:	79ba      	ldrb	r2, [r7, #6]
 800b7fc:	495f      	ldr	r1, [pc, #380]	@ (800b97c <config_motors+0x654>)
 800b7fe:	4613      	mov	r3, r2
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	1a9b      	subs	r3, r3, r2
 800b804:	011b      	lsls	r3, r3, #4
 800b806:	440b      	add	r3, r1
 800b808:	339c      	adds	r3, #156	@ 0x9c
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ang = 0;
 800b80e:	79ba      	ldrb	r2, [r7, #6]
 800b810:	495a      	ldr	r1, [pc, #360]	@ (800b97c <config_motors+0x654>)
 800b812:	4613      	mov	r3, r2
 800b814:	011b      	lsls	r3, r3, #4
 800b816:	1a9b      	subs	r3, r3, r2
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	440b      	add	r3, r1
 800b81c:	33b8      	adds	r3, #184	@ 0xb8
 800b81e:	f04f 0200 	mov.w	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.min_ang = 0;
 800b824:	79ba      	ldrb	r2, [r7, #6]
 800b826:	4955      	ldr	r1, [pc, #340]	@ (800b97c <config_motors+0x654>)
 800b828:	4613      	mov	r3, r2
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	1a9b      	subs	r3, r3, r2
 800b82e:	011b      	lsls	r3, r3, #4
 800b830:	440b      	add	r3, r1
 800b832:	33b4      	adds	r3, #180	@ 0xb4
 800b834:	f04f 0200 	mov.w	r2, #0
 800b838:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b83a:	79ba      	ldrb	r2, [r7, #6]
 800b83c:	494f      	ldr	r1, [pc, #316]	@ (800b97c <config_motors+0x654>)
 800b83e:	4613      	mov	r3, r2
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	1a9b      	subs	r3, r3, r2
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	440b      	add	r3, r1
 800b848:	33c4      	adds	r3, #196	@ 0xc4
 800b84a:	4a4f      	ldr	r2, [pc, #316]	@ (800b988 <config_motors+0x660>)
 800b84c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b84e:	79ba      	ldrb	r2, [r7, #6]
 800b850:	494a      	ldr	r1, [pc, #296]	@ (800b97c <config_motors+0x654>)
 800b852:	4613      	mov	r3, r2
 800b854:	011b      	lsls	r3, r3, #4
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	011b      	lsls	r3, r3, #4
 800b85a:	440b      	add	r3, r1
 800b85c:	33c0      	adds	r3, #192	@ 0xc0
 800b85e:	4a4b      	ldr	r2, [pc, #300]	@ (800b98c <config_motors+0x664>)
 800b860:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800b862:	79ba      	ldrb	r2, [r7, #6]
 800b864:	4945      	ldr	r1, [pc, #276]	@ (800b97c <config_motors+0x654>)
 800b866:	4613      	mov	r3, r2
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	1a9b      	subs	r3, r3, r2
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	440b      	add	r3, r1
 800b870:	33d4      	adds	r3, #212	@ 0xd4
 800b872:	4a43      	ldr	r2, [pc, #268]	@ (800b980 <config_motors+0x658>)
 800b874:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = 0;
 800b876:	79ba      	ldrb	r2, [r7, #6]
 800b878:	4940      	ldr	r1, [pc, #256]	@ (800b97c <config_motors+0x654>)
 800b87a:	4613      	mov	r3, r2
 800b87c:	011b      	lsls	r3, r3, #4
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	440b      	add	r3, r1
 800b884:	3368      	adds	r3, #104	@ 0x68
 800b886:	f04f 0200 	mov.w	r2, #0
 800b88a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = 0;
 800b88c:	79ba      	ldrb	r2, [r7, #6]
 800b88e:	493b      	ldr	r1, [pc, #236]	@ (800b97c <config_motors+0x654>)
 800b890:	4613      	mov	r3, r2
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	1a9b      	subs	r3, r3, r2
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	440b      	add	r3, r1
 800b89a:	336c      	adds	r3, #108	@ 0x6c
 800b89c:	f04f 0200 	mov.w	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = 0;
 800b8a2:	79ba      	ldrb	r2, [r7, #6]
 800b8a4:	4935      	ldr	r1, [pc, #212]	@ (800b97c <config_motors+0x654>)
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	011b      	lsls	r3, r3, #4
 800b8aa:	1a9b      	subs	r3, r3, r2
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	440b      	add	r3, r1
 800b8b0:	3370      	adds	r3, #112	@ 0x70
 800b8b2:	f04f 0200 	mov.w	r2, #0
 800b8b6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = 0;
 800b8b8:	79ba      	ldrb	r2, [r7, #6]
 800b8ba:	4930      	ldr	r1, [pc, #192]	@ (800b97c <config_motors+0x654>)
 800b8bc:	4613      	mov	r3, r2
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	1a9b      	subs	r3, r3, r2
 800b8c2:	011b      	lsls	r3, r3, #4
 800b8c4:	440b      	add	r3, r1
 800b8c6:	3380      	adds	r3, #128	@ 0x80
 800b8c8:	f04f 0200 	mov.w	r2, #0
 800b8cc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = 0;
 800b8ce:	79ba      	ldrb	r2, [r7, #6]
 800b8d0:	492a      	ldr	r1, [pc, #168]	@ (800b97c <config_motors+0x654>)
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	011b      	lsls	r3, r3, #4
 800b8d6:	1a9b      	subs	r3, r3, r2
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	440b      	add	r3, r1
 800b8dc:	3384      	adds	r3, #132	@ 0x84
 800b8de:	f04f 0200 	mov.w	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800b8e4:	79ba      	ldrb	r2, [r7, #6]
 800b8e6:	4925      	ldr	r1, [pc, #148]	@ (800b97c <config_motors+0x654>)
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	011b      	lsls	r3, r3, #4
 800b8ec:	1a9b      	subs	r3, r3, r2
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	440b      	add	r3, r1
 800b8f2:	3338      	adds	r3, #56	@ 0x38
 800b8f4:	f04f 0200 	mov.w	r2, #0
 800b8f8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800b8fa:	79ba      	ldrb	r2, [r7, #6]
 800b8fc:	491f      	ldr	r1, [pc, #124]	@ (800b97c <config_motors+0x654>)
 800b8fe:	4613      	mov	r3, r2
 800b900:	011b      	lsls	r3, r3, #4
 800b902:	1a9b      	subs	r3, r3, r2
 800b904:	011b      	lsls	r3, r3, #4
 800b906:	440b      	add	r3, r1
 800b908:	333c      	adds	r3, #60	@ 0x3c
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800b910:	79ba      	ldrb	r2, [r7, #6]
 800b912:	491a      	ldr	r1, [pc, #104]	@ (800b97c <config_motors+0x654>)
 800b914:	4613      	mov	r3, r2
 800b916:	011b      	lsls	r3, r3, #4
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	011b      	lsls	r3, r3, #4
 800b91c:	440b      	add	r3, r1
 800b91e:	3340      	adds	r3, #64	@ 0x40
 800b920:	f04f 0200 	mov.w	r2, #0
 800b924:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800b926:	79ba      	ldrb	r2, [r7, #6]
 800b928:	4914      	ldr	r1, [pc, #80]	@ (800b97c <config_motors+0x654>)
 800b92a:	4613      	mov	r3, r2
 800b92c:	011b      	lsls	r3, r3, #4
 800b92e:	1a9b      	subs	r3, r3, r2
 800b930:	011b      	lsls	r3, r3, #4
 800b932:	440b      	add	r3, r1
 800b934:	3350      	adds	r3, #80	@ 0x50
 800b936:	f04f 0200 	mov.w	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800b93c:	79ba      	ldrb	r2, [r7, #6]
 800b93e:	490f      	ldr	r1, [pc, #60]	@ (800b97c <config_motors+0x654>)
 800b940:	4613      	mov	r3, r2
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	440b      	add	r3, r1
 800b94a:	3354      	adds	r3, #84	@ 0x54
 800b94c:	f04f 0200 	mov.w	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800b952:	79ba      	ldrb	r2, [r7, #6]
 800b954:	4909      	ldr	r1, [pc, #36]	@ (800b97c <config_motors+0x654>)
 800b956:	4613      	mov	r3, r2
 800b958:	011b      	lsls	r3, r3, #4
 800b95a:	1a9b      	subs	r3, r3, r2
 800b95c:	011b      	lsls	r3, r3, #4
 800b95e:	440b      	add	r3, r1
 800b960:	3330      	adds	r3, #48	@ 0x30
 800b962:	4a08      	ldr	r2, [pc, #32]	@ (800b984 <config_motors+0x65c>)
 800b964:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID - 1;
 800b966:	2307      	movs	r3, #7
 800b968:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800b96a:	79ba      	ldrb	r2, [r7, #6]
 800b96c:	4903      	ldr	r1, [pc, #12]	@ (800b97c <config_motors+0x654>)
 800b96e:	4613      	mov	r3, r2
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	1a9b      	subs	r3, r3, r2
 800b974:	011b      	lsls	r3, r3, #4
 800b976:	440b      	add	r3, r1
 800b978:	3302      	adds	r3, #2
 800b97a:	e009      	b.n	800b990 <config_motors+0x668>
 800b97c:	20002220 	.word	0x20002220
 800b980:	43eec2d1 	.word	0x43eec2d1
 800b984:	447a0000 	.word	0x447a0000
 800b988:	40c90fdb 	.word	0x40c90fdb
 800b98c:	c0c90fdb 	.word	0xc0c90fdb
 800b990:	2201      	movs	r2, #1
 800b992:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800b994:	79ba      	ldrb	r2, [r7, #6]
 800b996:	4613      	mov	r3, r2
 800b998:	011b      	lsls	r3, r3, #4
 800b99a:	1a9b      	subs	r3, r3, r2
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	4ac3      	ldr	r2, [pc, #780]	@ (800bcac <config_motors+0x984>)
 800b9a0:	4413      	add	r3, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff fb78 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = 0;
 800b9a8:	79ba      	ldrb	r2, [r7, #6]
 800b9aa:	49c0      	ldr	r1, [pc, #768]	@ (800bcac <config_motors+0x984>)
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	011b      	lsls	r3, r3, #4
 800b9b0:	1a9b      	subs	r3, r3, r2
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	440b      	add	r3, r1
 800b9b6:	339c      	adds	r3, #156	@ 0x9c
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ang = 0;
 800b9bc:	79ba      	ldrb	r2, [r7, #6]
 800b9be:	49bb      	ldr	r1, [pc, #748]	@ (800bcac <config_motors+0x984>)
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	1a9b      	subs	r3, r3, r2
 800b9c6:	011b      	lsls	r3, r3, #4
 800b9c8:	440b      	add	r3, r1
 800b9ca:	33b8      	adds	r3, #184	@ 0xb8
 800b9cc:	f04f 0200 	mov.w	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.min_ang = 0;
 800b9d2:	79ba      	ldrb	r2, [r7, #6]
 800b9d4:	49b5      	ldr	r1, [pc, #724]	@ (800bcac <config_motors+0x984>)
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	1a9b      	subs	r3, r3, r2
 800b9dc:	011b      	lsls	r3, r3, #4
 800b9de:	440b      	add	r3, r1
 800b9e0:	33b4      	adds	r3, #180	@ 0xb4
 800b9e2:	f04f 0200 	mov.w	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = 2 * PI;
 800b9e8:	79ba      	ldrb	r2, [r7, #6]
 800b9ea:	49b0      	ldr	r1, [pc, #704]	@ (800bcac <config_motors+0x984>)
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	011b      	lsls	r3, r3, #4
 800b9f0:	1a9b      	subs	r3, r3, r2
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	440b      	add	r3, r1
 800b9f6:	33c4      	adds	r3, #196	@ 0xc4
 800b9f8:	4aad      	ldr	r2, [pc, #692]	@ (800bcb0 <config_motors+0x988>)
 800b9fa:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 800b9fc:	79ba      	ldrb	r2, [r7, #6]
 800b9fe:	49ab      	ldr	r1, [pc, #684]	@ (800bcac <config_motors+0x984>)
 800ba00:	4613      	mov	r3, r2
 800ba02:	011b      	lsls	r3, r3, #4
 800ba04:	1a9b      	subs	r3, r3, r2
 800ba06:	011b      	lsls	r3, r3, #4
 800ba08:	440b      	add	r3, r1
 800ba0a:	33c0      	adds	r3, #192	@ 0xc0
 800ba0c:	4aa9      	ldr	r2, [pc, #676]	@ (800bcb4 <config_motors+0x98c>)
 800ba0e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = WHEEL_CIRC;
 800ba10:	79ba      	ldrb	r2, [r7, #6]
 800ba12:	49a6      	ldr	r1, [pc, #664]	@ (800bcac <config_motors+0x984>)
 800ba14:	4613      	mov	r3, r2
 800ba16:	011b      	lsls	r3, r3, #4
 800ba18:	1a9b      	subs	r3, r3, r2
 800ba1a:	011b      	lsls	r3, r3, #4
 800ba1c:	440b      	add	r3, r1
 800ba1e:	33d4      	adds	r3, #212	@ 0xd4
 800ba20:	4aa5      	ldr	r2, [pc, #660]	@ (800bcb8 <config_motors+0x990>)
 800ba22:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = 0;
 800ba24:	79ba      	ldrb	r2, [r7, #6]
 800ba26:	49a1      	ldr	r1, [pc, #644]	@ (800bcac <config_motors+0x984>)
 800ba28:	4613      	mov	r3, r2
 800ba2a:	011b      	lsls	r3, r3, #4
 800ba2c:	1a9b      	subs	r3, r3, r2
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	440b      	add	r3, r1
 800ba32:	3368      	adds	r3, #104	@ 0x68
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = 0;
 800ba3a:	79ba      	ldrb	r2, [r7, #6]
 800ba3c:	499b      	ldr	r1, [pc, #620]	@ (800bcac <config_motors+0x984>)
 800ba3e:	4613      	mov	r3, r2
 800ba40:	011b      	lsls	r3, r3, #4
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	011b      	lsls	r3, r3, #4
 800ba46:	440b      	add	r3, r1
 800ba48:	336c      	adds	r3, #108	@ 0x6c
 800ba4a:	f04f 0200 	mov.w	r2, #0
 800ba4e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = 0;
 800ba50:	79ba      	ldrb	r2, [r7, #6]
 800ba52:	4996      	ldr	r1, [pc, #600]	@ (800bcac <config_motors+0x984>)
 800ba54:	4613      	mov	r3, r2
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	1a9b      	subs	r3, r3, r2
 800ba5a:	011b      	lsls	r3, r3, #4
 800ba5c:	440b      	add	r3, r1
 800ba5e:	3370      	adds	r3, #112	@ 0x70
 800ba60:	f04f 0200 	mov.w	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = 0;
 800ba66:	79ba      	ldrb	r2, [r7, #6]
 800ba68:	4990      	ldr	r1, [pc, #576]	@ (800bcac <config_motors+0x984>)
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	011b      	lsls	r3, r3, #4
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	011b      	lsls	r3, r3, #4
 800ba72:	440b      	add	r3, r1
 800ba74:	3380      	adds	r3, #128	@ 0x80
 800ba76:	f04f 0200 	mov.w	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = 0;
 800ba7c:	79ba      	ldrb	r2, [r7, #6]
 800ba7e:	498b      	ldr	r1, [pc, #556]	@ (800bcac <config_motors+0x984>)
 800ba80:	4613      	mov	r3, r2
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	1a9b      	subs	r3, r3, r2
 800ba86:	011b      	lsls	r3, r3, #4
 800ba88:	440b      	add	r3, r1
 800ba8a:	3384      	adds	r3, #132	@ 0x84
 800ba8c:	f04f 0200 	mov.w	r2, #0
 800ba90:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = CHASSIS_KP;
 800ba92:	79ba      	ldrb	r2, [r7, #6]
 800ba94:	4985      	ldr	r1, [pc, #532]	@ (800bcac <config_motors+0x984>)
 800ba96:	4613      	mov	r3, r2
 800ba98:	011b      	lsls	r3, r3, #4
 800ba9a:	1a9b      	subs	r3, r3, r2
 800ba9c:	011b      	lsls	r3, r3, #4
 800ba9e:	440b      	add	r3, r1
 800baa0:	3338      	adds	r3, #56	@ 0x38
 800baa2:	f04f 0200 	mov.w	r2, #0
 800baa6:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = CHASSIS_KI;
 800baa8:	79ba      	ldrb	r2, [r7, #6]
 800baaa:	4980      	ldr	r1, [pc, #512]	@ (800bcac <config_motors+0x984>)
 800baac:	4613      	mov	r3, r2
 800baae:	011b      	lsls	r3, r3, #4
 800bab0:	1a9b      	subs	r3, r3, r2
 800bab2:	011b      	lsls	r3, r3, #4
 800bab4:	440b      	add	r3, r1
 800bab6:	333c      	adds	r3, #60	@ 0x3c
 800bab8:	f04f 0200 	mov.w	r2, #0
 800babc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = CHASSIS_KD;
 800babe:	79ba      	ldrb	r2, [r7, #6]
 800bac0:	497a      	ldr	r1, [pc, #488]	@ (800bcac <config_motors+0x984>)
 800bac2:	4613      	mov	r3, r2
 800bac4:	011b      	lsls	r3, r3, #4
 800bac6:	1a9b      	subs	r3, r3, r2
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	440b      	add	r3, r1
 800bacc:	3340      	adds	r3, #64	@ 0x40
 800bace:	f04f 0200 	mov.w	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = CHASSIS_INT_MAX;
 800bad4:	79ba      	ldrb	r2, [r7, #6]
 800bad6:	4975      	ldr	r1, [pc, #468]	@ (800bcac <config_motors+0x984>)
 800bad8:	4613      	mov	r3, r2
 800bada:	011b      	lsls	r3, r3, #4
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	011b      	lsls	r3, r3, #4
 800bae0:	440b      	add	r3, r1
 800bae2:	3350      	adds	r3, #80	@ 0x50
 800bae4:	f04f 0200 	mov.w	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = CHASSIS_MAX_CURRENT;
 800baea:	79ba      	ldrb	r2, [r7, #6]
 800baec:	496f      	ldr	r1, [pc, #444]	@ (800bcac <config_motors+0x984>)
 800baee:	4613      	mov	r3, r2
 800baf0:	011b      	lsls	r3, r3, #4
 800baf2:	1a9b      	subs	r3, r3, r2
 800baf4:	011b      	lsls	r3, r3, #4
 800baf6:	440b      	add	r3, r1
 800baf8:	3354      	adds	r3, #84	@ 0x54
 800bafa:	f04f 0200 	mov.w	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].torqueRatio = 1000;
 800bb00:	79ba      	ldrb	r2, [r7, #6]
 800bb02:	496a      	ldr	r1, [pc, #424]	@ (800bcac <config_motors+0x984>)
 800bb04:	4613      	mov	r3, r2
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	1a9b      	subs	r3, r3, r2
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	440b      	add	r3, r1
 800bb0e:	3330      	adds	r3, #48	@ 0x30
 800bb10:	4a6a      	ldr	r2, [pc, #424]	@ (800bcbc <config_motors+0x994>)
 800bb12:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID - 1;
 800bb14:	2310      	movs	r3, #16
 800bb16:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 800bb18:	79ba      	ldrb	r2, [r7, #6]
 800bb1a:	4964      	ldr	r1, [pc, #400]	@ (800bcac <config_motors+0x984>)
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	011b      	lsls	r3, r3, #4
 800bb20:	1a9b      	subs	r3, r3, r2
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	440b      	add	r3, r1
 800bb26:	3302      	adds	r3, #2
 800bb28:	2204      	movs	r2, #4
 800bb2a:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800bb2c:	79ba      	ldrb	r2, [r7, #6]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	011b      	lsls	r3, r3, #4
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	4a5d      	ldr	r2, [pc, #372]	@ (800bcac <config_motors+0x984>)
 800bb38:	4413      	add	r3, r2
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff faac 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 800bb40:	79ba      	ldrb	r2, [r7, #6]
 800bb42:	495a      	ldr	r1, [pc, #360]	@ (800bcac <config_motors+0x984>)
 800bb44:	4613      	mov	r3, r2
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	1a9b      	subs	r3, r3, r2
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	440b      	add	r3, r1
 800bb4e:	33c8      	adds	r3, #200	@ 0xc8
 800bb50:	4a5b      	ldr	r2, [pc, #364]	@ (800bcc0 <config_motors+0x998>)
 800bb52:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 800bb54:	79ba      	ldrb	r2, [r7, #6]
 800bb56:	4955      	ldr	r1, [pc, #340]	@ (800bcac <config_motors+0x984>)
 800bb58:	4613      	mov	r3, r2
 800bb5a:	011b      	lsls	r3, r3, #4
 800bb5c:	1a9b      	subs	r3, r3, r2
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	440b      	add	r3, r1
 800bb62:	338c      	adds	r3, #140	@ 0x8c
 800bb64:	4a57      	ldr	r2, [pc, #348]	@ (800bcc4 <config_motors+0x99c>)
 800bb66:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800bb68:	79ba      	ldrb	r2, [r7, #6]
 800bb6a:	4950      	ldr	r1, [pc, #320]	@ (800bcac <config_motors+0x984>)
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	011b      	lsls	r3, r3, #4
 800bb70:	1a9b      	subs	r3, r3, r2
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	440b      	add	r3, r1
 800bb76:	3338      	adds	r3, #56	@ 0x38
 800bb78:	4a53      	ldr	r2, [pc, #332]	@ (800bcc8 <config_motors+0x9a0>)
 800bb7a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 800bb7c:	79ba      	ldrb	r2, [r7, #6]
 800bb7e:	494b      	ldr	r1, [pc, #300]	@ (800bcac <config_motors+0x984>)
 800bb80:	4613      	mov	r3, r2
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	1a9b      	subs	r3, r3, r2
 800bb86:	011b      	lsls	r3, r3, #4
 800bb88:	440b      	add	r3, r1
 800bb8a:	333c      	adds	r3, #60	@ 0x3c
 800bb8c:	4a4f      	ldr	r2, [pc, #316]	@ (800bccc <config_motors+0x9a4>)
 800bb8e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 800bb90:	79ba      	ldrb	r2, [r7, #6]
 800bb92:	4946      	ldr	r1, [pc, #280]	@ (800bcac <config_motors+0x984>)
 800bb94:	4613      	mov	r3, r2
 800bb96:	011b      	lsls	r3, r3, #4
 800bb98:	1a9b      	subs	r3, r3, r2
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	440b      	add	r3, r1
 800bb9e:	3340      	adds	r3, #64	@ 0x40
 800bba0:	f04f 0200 	mov.w	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800bba6:	79ba      	ldrb	r2, [r7, #6]
 800bba8:	4940      	ldr	r1, [pc, #256]	@ (800bcac <config_motors+0x984>)
 800bbaa:	4613      	mov	r3, r2
 800bbac:	011b      	lsls	r3, r3, #4
 800bbae:	1a9b      	subs	r3, r3, r2
 800bbb0:	011b      	lsls	r3, r3, #4
 800bbb2:	440b      	add	r3, r1
 800bbb4:	3350      	adds	r3, #80	@ 0x50
 800bbb6:	4a46      	ldr	r2, [pc, #280]	@ (800bcd0 <config_motors+0x9a8>)
 800bbb8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 800bbba:	79ba      	ldrb	r2, [r7, #6]
 800bbbc:	493b      	ldr	r1, [pc, #236]	@ (800bcac <config_motors+0x984>)
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	011b      	lsls	r3, r3, #4
 800bbc2:	1a9b      	subs	r3, r3, r2
 800bbc4:	011b      	lsls	r3, r3, #4
 800bbc6:	440b      	add	r3, r1
 800bbc8:	3354      	adds	r3, #84	@ 0x54
 800bbca:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800bbce:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID - 1;
 800bbd0:	2311      	movs	r3, #17
 800bbd2:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_M3508_NGEARBOX;
 800bbd4:	79ba      	ldrb	r2, [r7, #6]
 800bbd6:	4935      	ldr	r1, [pc, #212]	@ (800bcac <config_motors+0x984>)
 800bbd8:	4613      	mov	r3, r2
 800bbda:	011b      	lsls	r3, r3, #4
 800bbdc:	1a9b      	subs	r3, r3, r2
 800bbde:	011b      	lsls	r3, r3, #4
 800bbe0:	440b      	add	r3, r1
 800bbe2:	3302      	adds	r3, #2
 800bbe4:	2204      	movs	r2, #4
 800bbe6:	701a      	strb	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.physical_max = M3508_MAX_RPM;
 800bbe8:	79ba      	ldrb	r2, [r7, #6]
 800bbea:	4930      	ldr	r1, [pc, #192]	@ (800bcac <config_motors+0x984>)
 800bbec:	4613      	mov	r3, r2
 800bbee:	011b      	lsls	r3, r3, #4
 800bbf0:	1a9b      	subs	r3, r3, r2
 800bbf2:	011b      	lsls	r3, r3, #4
 800bbf4:	440b      	add	r3, r1
 800bbf6:	338c      	adds	r3, #140	@ 0x8c
 800bbf8:	4a32      	ldr	r2, [pc, #200]	@ (800bcc4 <config_motors+0x99c>)
 800bbfa:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FRICTION_KP;
 800bbfc:	79ba      	ldrb	r2, [r7, #6]
 800bbfe:	492b      	ldr	r1, [pc, #172]	@ (800bcac <config_motors+0x984>)
 800bc00:	4613      	mov	r3, r2
 800bc02:	011b      	lsls	r3, r3, #4
 800bc04:	1a9b      	subs	r3, r3, r2
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	440b      	add	r3, r1
 800bc0a:	3338      	adds	r3, #56	@ 0x38
 800bc0c:	4a2e      	ldr	r2, [pc, #184]	@ (800bcc8 <config_motors+0x9a0>)
 800bc0e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FRICTION_KI;
 800bc10:	79ba      	ldrb	r2, [r7, #6]
 800bc12:	4926      	ldr	r1, [pc, #152]	@ (800bcac <config_motors+0x984>)
 800bc14:	4613      	mov	r3, r2
 800bc16:	011b      	lsls	r3, r3, #4
 800bc18:	1a9b      	subs	r3, r3, r2
 800bc1a:	011b      	lsls	r3, r3, #4
 800bc1c:	440b      	add	r3, r1
 800bc1e:	333c      	adds	r3, #60	@ 0x3c
 800bc20:	4a2a      	ldr	r2, [pc, #168]	@ (800bccc <config_motors+0x9a4>)
 800bc22:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FRICTION_KD;
 800bc24:	79ba      	ldrb	r2, [r7, #6]
 800bc26:	4921      	ldr	r1, [pc, #132]	@ (800bcac <config_motors+0x984>)
 800bc28:	4613      	mov	r3, r2
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	1a9b      	subs	r3, r3, r2
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	440b      	add	r3, r1
 800bc32:	3340      	adds	r3, #64	@ 0x40
 800bc34:	f04f 0200 	mov.w	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FRICTION_MAX_INT;
 800bc3a:	79ba      	ldrb	r2, [r7, #6]
 800bc3c:	491b      	ldr	r1, [pc, #108]	@ (800bcac <config_motors+0x984>)
 800bc3e:	4613      	mov	r3, r2
 800bc40:	011b      	lsls	r3, r3, #4
 800bc42:	1a9b      	subs	r3, r3, r2
 800bc44:	011b      	lsls	r3, r3, #4
 800bc46:	440b      	add	r3, r1
 800bc48:	3350      	adds	r3, #80	@ 0x50
 800bc4a:	4a21      	ldr	r2, [pc, #132]	@ (800bcd0 <config_motors+0x9a8>)
 800bc4c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FRICTION_MAX_CURRENT;
 800bc4e:	79ba      	ldrb	r2, [r7, #6]
 800bc50:	4916      	ldr	r1, [pc, #88]	@ (800bcac <config_motors+0x984>)
 800bc52:	4613      	mov	r3, r2
 800bc54:	011b      	lsls	r3, r3, #4
 800bc56:	1a9b      	subs	r3, r3, r2
 800bc58:	011b      	lsls	r3, r3, #4
 800bc5a:	440b      	add	r3, r1
 800bc5c:	3354      	adds	r3, #84	@ 0x54
 800bc5e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800bc62:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.physical_max = M3508_MAX_OUTPUT;
 800bc64:	79ba      	ldrb	r2, [r7, #6]
 800bc66:	4911      	ldr	r1, [pc, #68]	@ (800bcac <config_motors+0x984>)
 800bc68:	4613      	mov	r3, r2
 800bc6a:	011b      	lsls	r3, r3, #4
 800bc6c:	1a9b      	subs	r3, r3, r2
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	440b      	add	r3, r1
 800bc72:	335c      	adds	r3, #92	@ 0x5c
 800bc74:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800bc78:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID - 1;
 800bc7a:	2309      	movs	r3, #9
 800bc7c:	71bb      	strb	r3, [r7, #6]
#ifdef ANGLE_FEEDER
	g_can_motors[motor_id].motor_type = TYPE_M3508_ANGLE;
#endif
#ifndef ANGLE_FEEDER
	g_can_motors[motor_id].motor_type = TYPE_M2006;
 800bc7e:	79ba      	ldrb	r2, [r7, #6]
 800bc80:	490a      	ldr	r1, [pc, #40]	@ (800bcac <config_motors+0x984>)
 800bc82:	4613      	mov	r3, r2
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	1a9b      	subs	r3, r3, r2
 800bc88:	011b      	lsls	r3, r3, #4
 800bc8a:	440b      	add	r3, r1
 800bc8c:	3302      	adds	r3, #2
 800bc8e:	2202      	movs	r2, #2
 800bc90:	701a      	strb	r2, [r3, #0]
#endif
	set_motor_config(&g_can_motors[motor_id]);
 800bc92:	79ba      	ldrb	r2, [r7, #6]
 800bc94:	4613      	mov	r3, r2
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	1a9b      	subs	r3, r3, r2
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	4a03      	ldr	r2, [pc, #12]	@ (800bcac <config_motors+0x984>)
 800bc9e:	4413      	add	r3, r2
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7ff f9f9 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.phy_max_ang = PI;
 800bca6:	79ba      	ldrb	r2, [r7, #6]
 800bca8:	e014      	b.n	800bcd4 <config_motors+0x9ac>
 800bcaa:	bf00      	nop
 800bcac:	20002220 	.word	0x20002220
 800bcb0:	40c90fdb 	.word	0x40c90fdb
 800bcb4:	c0c90fdb 	.word	0xc0c90fdb
 800bcb8:	43eec2d1 	.word	0x43eec2d1
 800bcbc:	447a0000 	.word	0x447a0000
 800bcc0:	4199999a 	.word	0x4199999a
 800bcc4:	460fc000 	.word	0x460fc000
 800bcc8:	40a00000 	.word	0x40a00000
 800bccc:	3b03126f 	.word	0x3b03126f
 800bcd0:	461c4000 	.word	0x461c4000
 800bcd4:	49c0      	ldr	r1, [pc, #768]	@ (800bfd8 <config_motors+0xcb0>)
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	1a9b      	subs	r3, r3, r2
 800bcdc:	011b      	lsls	r3, r3, #4
 800bcde:	440b      	add	r3, r1
 800bce0:	33c4      	adds	r3, #196	@ 0xc4
 800bce2:	4abe      	ldr	r2, [pc, #760]	@ (800bfdc <config_motors+0xcb4>)
 800bce4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = -PI;
 800bce6:	79ba      	ldrb	r2, [r7, #6]
 800bce8:	49bb      	ldr	r1, [pc, #748]	@ (800bfd8 <config_motors+0xcb0>)
 800bcea:	4613      	mov	r3, r2
 800bcec:	011b      	lsls	r3, r3, #4
 800bcee:	1a9b      	subs	r3, r3, r2
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	440b      	add	r3, r1
 800bcf4:	33c0      	adds	r3, #192	@ 0xc0
 800bcf6:	4aba      	ldr	r2, [pc, #744]	@ (800bfe0 <config_motors+0xcb8>)
 800bcf8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 800bcfa:	79ba      	ldrb	r2, [r7, #6]
 800bcfc:	49b6      	ldr	r1, [pc, #728]	@ (800bfd8 <config_motors+0xcb0>)
 800bcfe:	4613      	mov	r3, r2
 800bd00:	011b      	lsls	r3, r3, #4
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	440b      	add	r3, r1
 800bd08:	33d4      	adds	r3, #212	@ 0xd4
 800bd0a:	f04f 0200 	mov.w	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = FEEDER_ANGLE_KP;
 800bd10:	79ba      	ldrb	r2, [r7, #6]
 800bd12:	49b1      	ldr	r1, [pc, #708]	@ (800bfd8 <config_motors+0xcb0>)
 800bd14:	4613      	mov	r3, r2
 800bd16:	011b      	lsls	r3, r3, #4
 800bd18:	1a9b      	subs	r3, r3, r2
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	440b      	add	r3, r1
 800bd1e:	3368      	adds	r3, #104	@ 0x68
 800bd20:	4ab0      	ldr	r2, [pc, #704]	@ (800bfe4 <config_motors+0xcbc>)
 800bd22:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = FEEDER_ANGLE_KI;
 800bd24:	79ba      	ldrb	r2, [r7, #6]
 800bd26:	49ac      	ldr	r1, [pc, #688]	@ (800bfd8 <config_motors+0xcb0>)
 800bd28:	4613      	mov	r3, r2
 800bd2a:	011b      	lsls	r3, r3, #4
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	440b      	add	r3, r1
 800bd32:	336c      	adds	r3, #108	@ 0x6c
 800bd34:	f04f 0200 	mov.w	r2, #0
 800bd38:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = FEEDER_ANGLE_KD;
 800bd3a:	79ba      	ldrb	r2, [r7, #6]
 800bd3c:	49a6      	ldr	r1, [pc, #664]	@ (800bfd8 <config_motors+0xcb0>)
 800bd3e:	4613      	mov	r3, r2
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	011b      	lsls	r3, r3, #4
 800bd46:	440b      	add	r3, r1
 800bd48:	3370      	adds	r3, #112	@ 0x70
 800bd4a:	f04f 0200 	mov.w	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = FEEDER_ANGLE_INT_MAX;
 800bd50:	79ba      	ldrb	r2, [r7, #6]
 800bd52:	49a1      	ldr	r1, [pc, #644]	@ (800bfd8 <config_motors+0xcb0>)
 800bd54:	4613      	mov	r3, r2
 800bd56:	011b      	lsls	r3, r3, #4
 800bd58:	1a9b      	subs	r3, r3, r2
 800bd5a:	011b      	lsls	r3, r3, #4
 800bd5c:	440b      	add	r3, r1
 800bd5e:	3380      	adds	r3, #128	@ 0x80
 800bd60:	f04f 0200 	mov.w	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = FEEDER_MAX_RPM;
 800bd66:	79ba      	ldrb	r2, [r7, #6]
 800bd68:	499b      	ldr	r1, [pc, #620]	@ (800bfd8 <config_motors+0xcb0>)
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	011b      	lsls	r3, r3, #4
 800bd6e:	1a9b      	subs	r3, r3, r2
 800bd70:	011b      	lsls	r3, r3, #4
 800bd72:	440b      	add	r3, r1
 800bd74:	3384      	adds	r3, #132	@ 0x84
 800bd76:	4a9c      	ldr	r2, [pc, #624]	@ (800bfe8 <config_motors+0xcc0>)
 800bd78:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = FEEDER_KP;
 800bd7a:	79ba      	ldrb	r2, [r7, #6]
 800bd7c:	4996      	ldr	r1, [pc, #600]	@ (800bfd8 <config_motors+0xcb0>)
 800bd7e:	4613      	mov	r3, r2
 800bd80:	011b      	lsls	r3, r3, #4
 800bd82:	1a9b      	subs	r3, r3, r2
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	440b      	add	r3, r1
 800bd88:	3338      	adds	r3, #56	@ 0x38
 800bd8a:	4a98      	ldr	r2, [pc, #608]	@ (800bfec <config_motors+0xcc4>)
 800bd8c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = FEEDER_KI;
 800bd8e:	79ba      	ldrb	r2, [r7, #6]
 800bd90:	4991      	ldr	r1, [pc, #580]	@ (800bfd8 <config_motors+0xcb0>)
 800bd92:	4613      	mov	r3, r2
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	011b      	lsls	r3, r3, #4
 800bd9a:	440b      	add	r3, r1
 800bd9c:	333c      	adds	r3, #60	@ 0x3c
 800bd9e:	4a94      	ldr	r2, [pc, #592]	@ (800bff0 <config_motors+0xcc8>)
 800bda0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = FEEDER_KD;
 800bda2:	79ba      	ldrb	r2, [r7, #6]
 800bda4:	498c      	ldr	r1, [pc, #560]	@ (800bfd8 <config_motors+0xcb0>)
 800bda6:	4613      	mov	r3, r2
 800bda8:	011b      	lsls	r3, r3, #4
 800bdaa:	1a9b      	subs	r3, r3, r2
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	440b      	add	r3, r1
 800bdb0:	3340      	adds	r3, #64	@ 0x40
 800bdb2:	4a90      	ldr	r2, [pc, #576]	@ (800bff4 <config_motors+0xccc>)
 800bdb4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = FEEDER_MAX_INT;
 800bdb6:	79ba      	ldrb	r2, [r7, #6]
 800bdb8:	4987      	ldr	r1, [pc, #540]	@ (800bfd8 <config_motors+0xcb0>)
 800bdba:	4613      	mov	r3, r2
 800bdbc:	011b      	lsls	r3, r3, #4
 800bdbe:	1a9b      	subs	r3, r3, r2
 800bdc0:	011b      	lsls	r3, r3, #4
 800bdc2:	440b      	add	r3, r1
 800bdc4:	3350      	adds	r3, #80	@ 0x50
 800bdc6:	4a8c      	ldr	r2, [pc, #560]	@ (800bff8 <config_motors+0xcd0>)
 800bdc8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = FEEDER_MAX_CURRENT;
 800bdca:	79ba      	ldrb	r2, [r7, #6]
 800bdcc:	4982      	ldr	r1, [pc, #520]	@ (800bfd8 <config_motors+0xcb0>)
 800bdce:	4613      	mov	r3, r2
 800bdd0:	011b      	lsls	r3, r3, #4
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	011b      	lsls	r3, r3, #4
 800bdd6:	440b      	add	r3, r1
 800bdd8:	3354      	adds	r3, #84	@ 0x54
 800bdda:	4a87      	ldr	r2, [pc, #540]	@ (800bff8 <config_motors+0xcd0>)
 800bddc:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID - 1;
 800bdde:	2312      	movs	r3, #18
 800bde0:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800bde2:	79ba      	ldrb	r2, [r7, #6]
 800bde4:	497c      	ldr	r1, [pc, #496]	@ (800bfd8 <config_motors+0xcb0>)
 800bde6:	4613      	mov	r3, r2
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	1a9b      	subs	r3, r3, r2
 800bdec:	011b      	lsls	r3, r3, #4
 800bdee:	440b      	add	r3, r1
 800bdf0:	3302      	adds	r3, #2
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800bdf6:	79ba      	ldrb	r2, [r7, #6]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	011b      	lsls	r3, r3, #4
 800bdfc:	1a9b      	subs	r3, r3, r2
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	4a75      	ldr	r2, [pc, #468]	@ (800bfd8 <config_motors+0xcb0>)
 800be02:	4413      	add	r3, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff f947 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = PITCH_CENTER;
 800be0a:	79ba      	ldrb	r2, [r7, #6]
 800be0c:	4972      	ldr	r1, [pc, #456]	@ (800bfd8 <config_motors+0xcb0>)
 800be0e:	4613      	mov	r3, r2
 800be10:	011b      	lsls	r3, r3, #4
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	011b      	lsls	r3, r3, #4
 800be16:	440b      	add	r3, r1
 800be18:	339c      	adds	r3, #156	@ 0x9c
 800be1a:	f44f 628c 	mov.w	r2, #1120	@ 0x460
 800be1e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = PITCH_MAX_ANG;
 800be20:	79ba      	ldrb	r2, [r7, #6]
 800be22:	496d      	ldr	r1, [pc, #436]	@ (800bfd8 <config_motors+0xcb0>)
 800be24:	4613      	mov	r3, r2
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	1a9b      	subs	r3, r3, r2
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	440b      	add	r3, r1
 800be2e:	33c4      	adds	r3, #196	@ 0xc4
 800be30:	4a72      	ldr	r2, [pc, #456]	@ (800bffc <config_motors+0xcd4>)
 800be32:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = PITCH_MIN_ANG;
 800be34:	79ba      	ldrb	r2, [r7, #6]
 800be36:	4968      	ldr	r1, [pc, #416]	@ (800bfd8 <config_motors+0xcb0>)
 800be38:	4613      	mov	r3, r2
 800be3a:	011b      	lsls	r3, r3, #4
 800be3c:	1a9b      	subs	r3, r3, r2
 800be3e:	011b      	lsls	r3, r3, #4
 800be40:	440b      	add	r3, r1
 800be42:	33c0      	adds	r3, #192	@ 0xc0
 800be44:	4a6e      	ldr	r2, [pc, #440]	@ (800c000 <config_motors+0xcd8>)
 800be46:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 800be48:	79ba      	ldrb	r2, [r7, #6]
 800be4a:	4963      	ldr	r1, [pc, #396]	@ (800bfd8 <config_motors+0xcb0>)
 800be4c:	4613      	mov	r3, r2
 800be4e:	011b      	lsls	r3, r3, #4
 800be50:	1a9b      	subs	r3, r3, r2
 800be52:	011b      	lsls	r3, r3, #4
 800be54:	440b      	add	r3, r1
 800be56:	33d4      	adds	r3, #212	@ 0xd4
 800be58:	f04f 0200 	mov.w	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = PITCH_ANGLE_KP;
 800be5e:	79ba      	ldrb	r2, [r7, #6]
 800be60:	495d      	ldr	r1, [pc, #372]	@ (800bfd8 <config_motors+0xcb0>)
 800be62:	4613      	mov	r3, r2
 800be64:	011b      	lsls	r3, r3, #4
 800be66:	1a9b      	subs	r3, r3, r2
 800be68:	011b      	lsls	r3, r3, #4
 800be6a:	440b      	add	r3, r1
 800be6c:	3368      	adds	r3, #104	@ 0x68
 800be6e:	f04f 0200 	mov.w	r2, #0
 800be72:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = PITCH_ANGLE_KI;
 800be74:	79ba      	ldrb	r2, [r7, #6]
 800be76:	4958      	ldr	r1, [pc, #352]	@ (800bfd8 <config_motors+0xcb0>)
 800be78:	4613      	mov	r3, r2
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	1a9b      	subs	r3, r3, r2
 800be7e:	011b      	lsls	r3, r3, #4
 800be80:	440b      	add	r3, r1
 800be82:	336c      	adds	r3, #108	@ 0x6c
 800be84:	f04f 0200 	mov.w	r2, #0
 800be88:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = PITCH_ANGLE_KD;
 800be8a:	79ba      	ldrb	r2, [r7, #6]
 800be8c:	4952      	ldr	r1, [pc, #328]	@ (800bfd8 <config_motors+0xcb0>)
 800be8e:	4613      	mov	r3, r2
 800be90:	011b      	lsls	r3, r3, #4
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	011b      	lsls	r3, r3, #4
 800be96:	440b      	add	r3, r1
 800be98:	3370      	adds	r3, #112	@ 0x70
 800be9a:	f04f 0200 	mov.w	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = PITCH_ANGLE_INT_MAX;
 800bea0:	79ba      	ldrb	r2, [r7, #6]
 800bea2:	494d      	ldr	r1, [pc, #308]	@ (800bfd8 <config_motors+0xcb0>)
 800bea4:	4613      	mov	r3, r2
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	011b      	lsls	r3, r3, #4
 800beac:	440b      	add	r3, r1
 800beae:	3380      	adds	r3, #128	@ 0x80
 800beb0:	4a54      	ldr	r2, [pc, #336]	@ (800c004 <config_motors+0xcdc>)
 800beb2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = PITCH_MAX_RPM;
 800beb4:	79ba      	ldrb	r2, [r7, #6]
 800beb6:	4948      	ldr	r1, [pc, #288]	@ (800bfd8 <config_motors+0xcb0>)
 800beb8:	4613      	mov	r3, r2
 800beba:	011b      	lsls	r3, r3, #4
 800bebc:	1a9b      	subs	r3, r3, r2
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	440b      	add	r3, r1
 800bec2:	3384      	adds	r3, #132	@ 0x84
 800bec4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800bec8:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = PITCHRPM_KP;
 800beca:	79ba      	ldrb	r2, [r7, #6]
 800becc:	4942      	ldr	r1, [pc, #264]	@ (800bfd8 <config_motors+0xcb0>)
 800bece:	4613      	mov	r3, r2
 800bed0:	011b      	lsls	r3, r3, #4
 800bed2:	1a9b      	subs	r3, r3, r2
 800bed4:	011b      	lsls	r3, r3, #4
 800bed6:	440b      	add	r3, r1
 800bed8:	3338      	adds	r3, #56	@ 0x38
 800beda:	4a4b      	ldr	r2, [pc, #300]	@ (800c008 <config_motors+0xce0>)
 800bedc:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = PITCHRPM_KI;
 800bede:	79ba      	ldrb	r2, [r7, #6]
 800bee0:	493d      	ldr	r1, [pc, #244]	@ (800bfd8 <config_motors+0xcb0>)
 800bee2:	4613      	mov	r3, r2
 800bee4:	011b      	lsls	r3, r3, #4
 800bee6:	1a9b      	subs	r3, r3, r2
 800bee8:	011b      	lsls	r3, r3, #4
 800beea:	440b      	add	r3, r1
 800beec:	333c      	adds	r3, #60	@ 0x3c
 800beee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bef2:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = PITCHRPM_KD;
 800bef4:	79ba      	ldrb	r2, [r7, #6]
 800bef6:	4938      	ldr	r1, [pc, #224]	@ (800bfd8 <config_motors+0xcb0>)
 800bef8:	4613      	mov	r3, r2
 800befa:	011b      	lsls	r3, r3, #4
 800befc:	1a9b      	subs	r3, r3, r2
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	440b      	add	r3, r1
 800bf02:	3340      	adds	r3, #64	@ 0x40
 800bf04:	f04f 0200 	mov.w	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = PITCHRPM_INT_MAX;
 800bf0a:	79ba      	ldrb	r2, [r7, #6]
 800bf0c:	4932      	ldr	r1, [pc, #200]	@ (800bfd8 <config_motors+0xcb0>)
 800bf0e:	4613      	mov	r3, r2
 800bf10:	011b      	lsls	r3, r3, #4
 800bf12:	1a9b      	subs	r3, r3, r2
 800bf14:	011b      	lsls	r3, r3, #4
 800bf16:	440b      	add	r3, r1
 800bf18:	3350      	adds	r3, #80	@ 0x50
 800bf1a:	4a3c      	ldr	r2, [pc, #240]	@ (800c00c <config_motors+0xce4>)
 800bf1c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = PITCH_MAX_CURRENT;
 800bf1e:	79ba      	ldrb	r2, [r7, #6]
 800bf20:	492d      	ldr	r1, [pc, #180]	@ (800bfd8 <config_motors+0xcb0>)
 800bf22:	4613      	mov	r3, r2
 800bf24:	011b      	lsls	r3, r3, #4
 800bf26:	1a9b      	subs	r3, r3, r2
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3354      	adds	r3, #84	@ 0x54
 800bf2e:	4a38      	ldr	r2, [pc, #224]	@ (800c010 <config_motors+0xce8>)
 800bf30:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
#ifndef YAW_M3508
	motor_id = YAW_MOTOR_ID - 1;
 800bf32:	2313      	movs	r3, #19
 800bf34:	71bb      	strb	r3, [r7, #6]
	g_can_motors[motor_id].motor_type = TYPE_GM6020;
 800bf36:	79ba      	ldrb	r2, [r7, #6]
 800bf38:	4927      	ldr	r1, [pc, #156]	@ (800bfd8 <config_motors+0xcb0>)
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	011b      	lsls	r3, r3, #4
 800bf3e:	1a9b      	subs	r3, r3, r2
 800bf40:	011b      	lsls	r3, r3, #4
 800bf42:	440b      	add	r3, r1
 800bf44:	3302      	adds	r3, #2
 800bf46:	2201      	movs	r2, #1
 800bf48:	701a      	strb	r2, [r3, #0]
	set_motor_config(&g_can_motors[motor_id]);
 800bf4a:	79ba      	ldrb	r2, [r7, #6]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	011b      	lsls	r3, r3, #4
 800bf50:	1a9b      	subs	r3, r3, r2
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	4a20      	ldr	r2, [pc, #128]	@ (800bfd8 <config_motors+0xcb0>)
 800bf56:	4413      	add	r3, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff f89d 	bl	800b098 <set_motor_config>
	g_can_motors[motor_id].angle_data.center_ang = YAW_CENTER;
 800bf5e:	79ba      	ldrb	r2, [r7, #6]
 800bf60:	491d      	ldr	r1, [pc, #116]	@ (800bfd8 <config_motors+0xcb0>)
 800bf62:	4613      	mov	r3, r2
 800bf64:	011b      	lsls	r3, r3, #4
 800bf66:	1a9b      	subs	r3, r3, r2
 800bf68:	011b      	lsls	r3, r3, #4
 800bf6a:	440b      	add	r3, r1
 800bf6c:	339c      	adds	r3, #156	@ 0x9c
 800bf6e:	f640 62d8 	movw	r2, #3800	@ 0xed8
 800bf72:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_max_ang = YAW_MAX_ANG;
 800bf74:	79ba      	ldrb	r2, [r7, #6]
 800bf76:	4918      	ldr	r1, [pc, #96]	@ (800bfd8 <config_motors+0xcb0>)
 800bf78:	4613      	mov	r3, r2
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	1a9b      	subs	r3, r3, r2
 800bf7e:	011b      	lsls	r3, r3, #4
 800bf80:	440b      	add	r3, r1
 800bf82:	33c4      	adds	r3, #196	@ 0xc4
 800bf84:	4a23      	ldr	r2, [pc, #140]	@ (800c014 <config_motors+0xcec>)
 800bf86:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.phy_min_ang = YAW_MIN_ANG; //angle before it overflows
 800bf88:	79ba      	ldrb	r2, [r7, #6]
 800bf8a:	4913      	ldr	r1, [pc, #76]	@ (800bfd8 <config_motors+0xcb0>)
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	011b      	lsls	r3, r3, #4
 800bf90:	1a9b      	subs	r3, r3, r2
 800bf92:	011b      	lsls	r3, r3, #4
 800bf94:	440b      	add	r3, r1
 800bf96:	33c0      	adds	r3, #192	@ 0xc0
 800bf98:	4a1f      	ldr	r2, [pc, #124]	@ (800c018 <config_motors+0xcf0>)
 800bf9a:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.wheel_circ = 0;
 800bf9c:	79ba      	ldrb	r2, [r7, #6]
 800bf9e:	490e      	ldr	r1, [pc, #56]	@ (800bfd8 <config_motors+0xcb0>)
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	1a9b      	subs	r3, r3, r2
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	440b      	add	r3, r1
 800bfaa:	33d4      	adds	r3, #212	@ 0xd4
 800bfac:	f04f 0200 	mov.w	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kp = YAW_ANGLE_KP;
 800bfb2:	79ba      	ldrb	r2, [r7, #6]
 800bfb4:	4908      	ldr	r1, [pc, #32]	@ (800bfd8 <config_motors+0xcb0>)
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	011b      	lsls	r3, r3, #4
 800bfba:	1a9b      	subs	r3, r3, r2
 800bfbc:	011b      	lsls	r3, r3, #4
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3368      	adds	r3, #104	@ 0x68
 800bfc2:	4a16      	ldr	r2, [pc, #88]	@ (800c01c <config_motors+0xcf4>)
 800bfc4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.ki = YAW_ANGLE_KI;
 800bfc6:	79ba      	ldrb	r2, [r7, #6]
 800bfc8:	4903      	ldr	r1, [pc, #12]	@ (800bfd8 <config_motors+0xcb0>)
 800bfca:	4613      	mov	r3, r2
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	1a9b      	subs	r3, r3, r2
 800bfd0:	011b      	lsls	r3, r3, #4
 800bfd2:	440b      	add	r3, r1
 800bfd4:	336c      	adds	r3, #108	@ 0x6c
 800bfd6:	e023      	b.n	800c020 <config_motors+0xcf8>
 800bfd8:	20002220 	.word	0x20002220
 800bfdc:	40490fdb 	.word	0x40490fdb
 800bfe0:	c0490fdb 	.word	0xc0490fdb
 800bfe4:	447a0000 	.word	0x447a0000
 800bfe8:	42c80000 	.word	0x42c80000
 800bfec:	40a00000 	.word	0x40a00000
 800bff0:	3ca3d70a 	.word	0x3ca3d70a
 800bff4:	40400000 	.word	0x40400000
 800bff8:	461c4000 	.word	0x461c4000
 800bffc:	3f19999a 	.word	0x3f19999a
 800c000:	be800000 	.word	0xbe800000
 800c004:	3dcccccd 	.word	0x3dcccccd
 800c008:	45bb8000 	.word	0x45bb8000
 800c00c:	457a0000 	.word	0x457a0000
 800c010:	469c4000 	.word	0x469c4000
 800c014:	417b53d2 	.word	0x417b53d2
 800c018:	c17b53d2 	.word	0xc17b53d2
 800c01c:	41700000 	.word	0x41700000
 800c020:	f04f 0200 	mov.w	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.kd = YAW_ANGLE_KD;
 800c026:	79ba      	ldrb	r2, [r7, #6]
 800c028:	4929      	ldr	r1, [pc, #164]	@ (800c0d0 <config_motors+0xda8>)
 800c02a:	4613      	mov	r3, r2
 800c02c:	011b      	lsls	r3, r3, #4
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	011b      	lsls	r3, r3, #4
 800c032:	440b      	add	r3, r1
 800c034:	3370      	adds	r3, #112	@ 0x70
 800c036:	4a27      	ldr	r2, [pc, #156]	@ (800c0d4 <config_motors+0xdac>)
 800c038:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.int_max = YAW_ANGLE_INT_MAX;
 800c03a:	79ba      	ldrb	r2, [r7, #6]
 800c03c:	4924      	ldr	r1, [pc, #144]	@ (800c0d0 <config_motors+0xda8>)
 800c03e:	4613      	mov	r3, r2
 800c040:	011b      	lsls	r3, r3, #4
 800c042:	1a9b      	subs	r3, r3, r2
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	440b      	add	r3, r1
 800c048:	3380      	adds	r3, #128	@ 0x80
 800c04a:	4a23      	ldr	r2, [pc, #140]	@ (800c0d8 <config_motors+0xdb0>)
 800c04c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_pid.max_out = YAW_MAX_RPM;
 800c04e:	79ba      	ldrb	r2, [r7, #6]
 800c050:	491f      	ldr	r1, [pc, #124]	@ (800c0d0 <config_motors+0xda8>)
 800c052:	4613      	mov	r3, r2
 800c054:	011b      	lsls	r3, r3, #4
 800c056:	1a9b      	subs	r3, r3, r2
 800c058:	011b      	lsls	r3, r3, #4
 800c05a:	440b      	add	r3, r1
 800c05c:	3384      	adds	r3, #132	@ 0x84
 800c05e:	4a1d      	ldr	r2, [pc, #116]	@ (800c0d4 <config_motors+0xdac>)
 800c060:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kp = YAWRPM_KP;
 800c062:	79ba      	ldrb	r2, [r7, #6]
 800c064:	491a      	ldr	r1, [pc, #104]	@ (800c0d0 <config_motors+0xda8>)
 800c066:	4613      	mov	r3, r2
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	1a9b      	subs	r3, r3, r2
 800c06c:	011b      	lsls	r3, r3, #4
 800c06e:	440b      	add	r3, r1
 800c070:	3338      	adds	r3, #56	@ 0x38
 800c072:	4a1a      	ldr	r2, [pc, #104]	@ (800c0dc <config_motors+0xdb4>)
 800c074:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.ki = YAWRPM_KI;
 800c076:	79ba      	ldrb	r2, [r7, #6]
 800c078:	4915      	ldr	r1, [pc, #84]	@ (800c0d0 <config_motors+0xda8>)
 800c07a:	4613      	mov	r3, r2
 800c07c:	011b      	lsls	r3, r3, #4
 800c07e:	1a9b      	subs	r3, r3, r2
 800c080:	011b      	lsls	r3, r3, #4
 800c082:	440b      	add	r3, r1
 800c084:	333c      	adds	r3, #60	@ 0x3c
 800c086:	4a13      	ldr	r2, [pc, #76]	@ (800c0d4 <config_motors+0xdac>)
 800c088:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.kd = YAWRPM_KD;
 800c08a:	79ba      	ldrb	r2, [r7, #6]
 800c08c:	4910      	ldr	r1, [pc, #64]	@ (800c0d0 <config_motors+0xda8>)
 800c08e:	4613      	mov	r3, r2
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	1a9b      	subs	r3, r3, r2
 800c094:	011b      	lsls	r3, r3, #4
 800c096:	440b      	add	r3, r1
 800c098:	3340      	adds	r3, #64	@ 0x40
 800c09a:	4a11      	ldr	r2, [pc, #68]	@ (800c0e0 <config_motors+0xdb8>)
 800c09c:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.int_max = YAWRPM_INT_MAX;
 800c09e:	79ba      	ldrb	r2, [r7, #6]
 800c0a0:	490b      	ldr	r1, [pc, #44]	@ (800c0d0 <config_motors+0xda8>)
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	011b      	lsls	r3, r3, #4
 800c0a6:	1a9b      	subs	r3, r3, r2
 800c0a8:	011b      	lsls	r3, r3, #4
 800c0aa:	440b      	add	r3, r1
 800c0ac:	3350      	adds	r3, #80	@ 0x50
 800c0ae:	4a0d      	ldr	r2, [pc, #52]	@ (800c0e4 <config_motors+0xdbc>)
 800c0b0:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].rpm_pid.max_out = YAW_MAX_CURRENT;
 800c0b2:	79ba      	ldrb	r2, [r7, #6]
 800c0b4:	4906      	ldr	r1, [pc, #24]	@ (800c0d0 <config_motors+0xda8>)
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	011b      	lsls	r3, r3, #4
 800c0ba:	1a9b      	subs	r3, r3, r2
 800c0bc:	011b      	lsls	r3, r3, #4
 800c0be:	440b      	add	r3, r1
 800c0c0:	3354      	adds	r3, #84	@ 0x54
 800c0c2:	4a09      	ldr	r2, [pc, #36]	@ (800c0e8 <config_motors+0xdc0>)
 800c0c4:	601a      	str	r2, [r3, #0]
	g_can_motors[motor_id].angle_data.max_ticks = 4096 * g_can_motors[motor_id].angle_data.gearbox_ratio;
	g_can_motors[motor_id].angle_data.tick_range = g_can_motors[motor_id].angle_data.max_ticks
			- g_can_motors[motor_id].angle_data.min_ticks;
#endif
#endif
}
 800c0c6:	bf00      	nop
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20002220 	.word	0x20002220
 800c0d4:	41200000 	.word	0x41200000
 800c0d8:	3d4ccccd 	.word	0x3d4ccccd
 800c0dc:	466a6000 	.word	0x466a6000
 800c0e0:	447a0000 	.word	0x447a0000
 800c0e4:	459c4000 	.word	0x459c4000
 800c0e8:	469c4000 	.word	0x469c4000

0800c0ec <bz_buzzer>:

void bz_buzzer(uint8_t high, uint8_t low) {
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	460a      	mov	r2, r1
 800c0f6:	71fb      	strb	r3, [r7, #7]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_msg = bz_debug_high;
 800c0fc:	2309      	movs	r3, #9
 800c0fe:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < high; i++) {
 800c100:	2300      	movs	r3, #0
 800c102:	73fb      	strb	r3, [r7, #15]
 800c104:	e00a      	b.n	800c11c <bz_buzzer+0x30>
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c106:	4b1a      	ldr	r3, [pc, #104]	@ (800c170 <bz_buzzer+0x84>)
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f107 010d 	add.w	r1, r7, #13
 800c10e:	2300      	movs	r3, #0
 800c110:	2200      	movs	r2, #0
 800c112:	f00d fecd 	bl	8019eb0 <xQueueGenericSend>
	for (uint8_t i = 0; i < high; i++) {
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	3301      	adds	r3, #1
 800c11a:	73fb      	strb	r3, [r7, #15]
 800c11c:	7bfa      	ldrb	r2, [r7, #15]
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	429a      	cmp	r2, r3
 800c122:	d3f0      	bcc.n	800c106 <bz_buzzer+0x1a>
	}
	temp_msg = bz_debug_low;
 800c124:	2308      	movs	r3, #8
 800c126:	737b      	strb	r3, [r7, #13]
	for (int8_t i = 0; i < low; i++) {
 800c128:	2300      	movs	r3, #0
 800c12a:	73bb      	strb	r3, [r7, #14]
 800c12c:	e00d      	b.n	800c14a <bz_buzzer+0x5e>
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c12e:	4b10      	ldr	r3, [pc, #64]	@ (800c170 <bz_buzzer+0x84>)
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f107 010d 	add.w	r1, r7, #13
 800c136:	2300      	movs	r3, #0
 800c138:	2200      	movs	r2, #0
 800c13a:	f00d feb9 	bl	8019eb0 <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 800c13e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	3301      	adds	r3, #1
 800c146:	b2db      	uxtb	r3, r3
 800c148:	73bb      	strb	r3, [r7, #14]
 800c14a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800c14e:	79bb      	ldrb	r3, [r7, #6]
 800c150:	429a      	cmp	r2, r3
 800c152:	dbec      	blt.n	800c12e <bz_buzzer+0x42>
	}
	temp_msg = bz_debug_rest;
 800c154:	230a      	movs	r3, #10
 800c156:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c158:	4b05      	ldr	r3, [pc, #20]	@ (800c170 <bz_buzzer+0x84>)
 800c15a:	6818      	ldr	r0, [r3, #0]
 800c15c:	f107 010d 	add.w	r1, r7, #13
 800c160:	2300      	movs	r3, #0
 800c162:	2200      	movs	r2, #0
 800c164:	f00d fea4 	bl	8019eb0 <xQueueGenericSend>
}
 800c168:	bf00      	nop
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	20003bbc 	.word	0x20003bbc

0800c174 <motor_temp_bz>:

void motor_temp_bz(uint8_t hi, uint8_t low) {
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	460a      	mov	r2, r1
 800c17e:	71fb      	strb	r3, [r7, #7]
 800c180:	4613      	mov	r3, r2
 800c182:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_msg = bz_debug_hi_temp;
 800c184:	230b      	movs	r3, #11
 800c186:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c188:	4b27      	ldr	r3, [pc, #156]	@ (800c228 <motor_temp_bz+0xb4>)
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	f107 010d 	add.w	r1, r7, #13
 800c190:	2300      	movs	r3, #0
 800c192:	2200      	movs	r2, #0
 800c194:	f00d fe8c 	bl	8019eb0 <xQueueGenericSend>
	temp_msg = bz_debug_rest;
 800c198:	230a      	movs	r3, #10
 800c19a:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c19c:	4b22      	ldr	r3, [pc, #136]	@ (800c228 <motor_temp_bz+0xb4>)
 800c19e:	6818      	ldr	r0, [r3, #0]
 800c1a0:	f107 010d 	add.w	r1, r7, #13
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f00d fe82 	bl	8019eb0 <xQueueGenericSend>
	for (int8_t i = 0; i < hi; i++) {
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73fb      	strb	r3, [r7, #15]
 800c1b0:	e00f      	b.n	800c1d2 <motor_temp_bz+0x5e>
		temp_msg = bz_temp_hi;
 800c1b2:	230c      	movs	r3, #12
 800c1b4:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c1b6:	4b1c      	ldr	r3, [pc, #112]	@ (800c228 <motor_temp_bz+0xb4>)
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	f107 010d 	add.w	r1, r7, #13
 800c1be:	2300      	movs	r3, #0
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f00d fe75 	bl	8019eb0 <xQueueGenericSend>
	for (int8_t i = 0; i < hi; i++) {
 800c1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	73fb      	strb	r3, [r7, #15]
 800c1d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c1d6:	79fb      	ldrb	r3, [r7, #7]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	dbea      	blt.n	800c1b2 <motor_temp_bz+0x3e>
	}
	for (int8_t i = 0; i < low; i++) {
 800c1dc:	2300      	movs	r3, #0
 800c1de:	73bb      	strb	r3, [r7, #14]
 800c1e0:	e00f      	b.n	800c202 <motor_temp_bz+0x8e>
		temp_msg = bz_temp_low;
 800c1e2:	230d      	movs	r3, #13
 800c1e4:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c1e6:	4b10      	ldr	r3, [pc, #64]	@ (800c228 <motor_temp_bz+0xb4>)
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	f107 010d 	add.w	r1, r7, #13
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f00d fe5d 	bl	8019eb0 <xQueueGenericSend>
	for (int8_t i = 0; i < low; i++) {
 800c1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	73bb      	strb	r3, [r7, #14]
 800c202:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800c206:	79bb      	ldrb	r3, [r7, #6]
 800c208:	429a      	cmp	r2, r3
 800c20a:	dbea      	blt.n	800c1e2 <motor_temp_bz+0x6e>
	}
	temp_msg = bz_debug_rest;
 800c20c:	230a      	movs	r3, #10
 800c20e:	737b      	strb	r3, [r7, #13]
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c210:	4b05      	ldr	r3, [pc, #20]	@ (800c228 <motor_temp_bz+0xb4>)
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	f107 010d 	add.w	r1, r7, #13
 800c218:	2300      	movs	r3, #0
 800c21a:	2200      	movs	r2, #0
 800c21c:	f00d fe48 	bl	8019eb0 <xQueueGenericSend>

}
 800c220:	bf00      	nop
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	20003bbc 	.word	0x20003bbc

0800c22c <check_motors>:

uint16_t check_motors() {
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
	uint16_t error = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	80fb      	strh	r3, [r7, #6]
	uint32_t curr_time = get_microseconds();
 800c236:	f7f5 ffc3 	bl	80021c0 <get_microseconds>
 800c23a:	6038      	str	r0, [r7, #0]
	if (curr_time
				- g_can_motors[LEFT_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c23c:	4b7f      	ldr	r3, [pc, #508]	@ (800c43c <check_motors+0x210>)
 800c23e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c246:	4a7e      	ldr	r2, [pc, #504]	@ (800c440 <check_motors+0x214>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d904      	bls.n	800c256 <check_motors+0x2a>
			error |= 1 << (0);
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	f043 0301 	orr.w	r3, r3, #1
 800c252:	80fb      	strh	r3, [r7, #6]
 800c254:	e007      	b.n	800c266 <check_motors+0x3a>

		} else {
			if (g_can_motors[LEFT_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c256:	4b79      	ldr	r3, [pc, #484]	@ (800c43c <check_motors+0x210>)
 800c258:	7b1b      	ldrb	r3, [r3, #12]
 800c25a:	2b46      	cmp	r3, #70	@ 0x46
 800c25c:	d903      	bls.n	800c266 <check_motors+0x3a>
				motor_temp_bz(1, 1);
 800c25e:	2101      	movs	r1, #1
 800c260:	2001      	movs	r0, #1
 800c262:	f7ff ff87 	bl	800c174 <motor_temp_bz>
			} else {

			}
		}
	if (curr_time
				- g_can_motors[RIGHT_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c266:	4b75      	ldr	r3, [pc, #468]	@ (800c43c <check_motors+0x210>)
 800c268:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c270:	4a73      	ldr	r2, [pc, #460]	@ (800c440 <check_motors+0x214>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d904      	bls.n	800c280 <check_motors+0x54>
			error |= 1 << (0);
 800c276:	88fb      	ldrh	r3, [r7, #6]
 800c278:	f043 0301 	orr.w	r3, r3, #1
 800c27c:	80fb      	strh	r3, [r7, #6]
 800c27e:	e008      	b.n	800c292 <check_motors+0x66>

		} else {
			if (g_can_motors[RIGHT_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c280:	4b6e      	ldr	r3, [pc, #440]	@ (800c43c <check_motors+0x210>)
 800c282:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800c286:	2b46      	cmp	r3, #70	@ 0x46
 800c288:	d903      	bls.n	800c292 <check_motors+0x66>
				motor_temp_bz(1, 1);
 800c28a:	2101      	movs	r1, #1
 800c28c:	2001      	movs	r0, #1
 800c28e:	f7ff ff71 	bl	800c174 <motor_temp_bz>
			} else {

			}
		}
	if (curr_time
			- g_can_motors[FR_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c292:	4b6a      	ldr	r3, [pc, #424]	@ (800c43c <check_motors+0x210>)
 800c294:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c29c:	4a68      	ldr	r2, [pc, #416]	@ (800c440 <check_motors+0x214>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d904      	bls.n	800c2ac <check_motors+0x80>
		error |= 1 << (0);
 800c2a2:	88fb      	ldrh	r3, [r7, #6]
 800c2a4:	f043 0301 	orr.w	r3, r3, #1
 800c2a8:	80fb      	strh	r3, [r7, #6]
 800c2aa:	e008      	b.n	800c2be <check_motors+0x92>

	} else {
		if (g_can_motors[FR_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c2ac:	4b63      	ldr	r3, [pc, #396]	@ (800c43c <check_motors+0x210>)
 800c2ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c2b2:	2b46      	cmp	r3, #70	@ 0x46
 800c2b4:	d903      	bls.n	800c2be <check_motors+0x92>
			motor_temp_bz(1, 1);
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	f7ff ff5b 	bl	800c174 <motor_temp_bz>

		}
	}

	if (curr_time
			- g_can_motors[FL_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c2be:	4b5f      	ldr	r3, [pc, #380]	@ (800c43c <check_motors+0x210>)
 800c2c0:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800c2c4:	683a      	ldr	r2, [r7, #0]
 800c2c6:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c2c8:	4a5d      	ldr	r2, [pc, #372]	@ (800c440 <check_motors+0x214>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d904      	bls.n	800c2d8 <check_motors+0xac>
		error |= 1 << (1);
 800c2ce:	88fb      	ldrh	r3, [r7, #6]
 800c2d0:	f043 0302 	orr.w	r3, r3, #2
 800c2d4:	80fb      	strh	r3, [r7, #6]
 800c2d6:	e008      	b.n	800c2ea <check_motors+0xbe>

	} else {
		if (g_can_motors[FL_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c2d8:	4b58      	ldr	r3, [pc, #352]	@ (800c43c <check_motors+0x210>)
 800c2da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800c2de:	2b46      	cmp	r3, #70	@ 0x46
 800c2e0:	d903      	bls.n	800c2ea <check_motors+0xbe>
			motor_temp_bz(1, 2);
 800c2e2:	2102      	movs	r1, #2
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	f7ff ff45 	bl	800c174 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[BL_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c2ea:	4b54      	ldr	r3, [pc, #336]	@ (800c43c <check_motors+0x210>)
 800c2ec:	f8d3 3684 	ldr.w	r3, [r3, #1668]	@ 0x684
 800c2f0:	683a      	ldr	r2, [r7, #0]
 800c2f2:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c2f4:	4a52      	ldr	r2, [pc, #328]	@ (800c440 <check_motors+0x214>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d904      	bls.n	800c304 <check_motors+0xd8>
		error |= 1 << (2);
 800c2fa:	88fb      	ldrh	r3, [r7, #6]
 800c2fc:	f043 0304 	orr.w	r3, r3, #4
 800c300:	80fb      	strh	r3, [r7, #6]
 800c302:	e008      	b.n	800c316 <check_motors+0xea>
	} else {
		if (g_can_motors[BL_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c304:	4b4d      	ldr	r3, [pc, #308]	@ (800c43c <check_motors+0x210>)
 800c306:	f893 35ac 	ldrb.w	r3, [r3, #1452]	@ 0x5ac
 800c30a:	2b46      	cmp	r3, #70	@ 0x46
 800c30c:	d903      	bls.n	800c316 <check_motors+0xea>
			motor_temp_bz(1, 3);
 800c30e:	2103      	movs	r1, #3
 800c310:	2001      	movs	r0, #1
 800c312:	f7ff ff2f 	bl	800c174 <motor_temp_bz>
		}
	}
	if (curr_time
			- g_can_motors[BR_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c316:	4b49      	ldr	r3, [pc, #292]	@ (800c43c <check_motors+0x210>)
 800c318:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c320:	4a47      	ldr	r2, [pc, #284]	@ (800c440 <check_motors+0x214>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d904      	bls.n	800c330 <check_motors+0x104>
		error |= 1 << (3);
 800c326:	88fb      	ldrh	r3, [r7, #6]
 800c328:	f043 0308 	orr.w	r3, r3, #8
 800c32c:	80fb      	strh	r3, [r7, #6]
 800c32e:	e008      	b.n	800c342 <check_motors+0x116>
	} else {
		if (g_can_motors[BR_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c330:	4b42      	ldr	r3, [pc, #264]	@ (800c43c <check_motors+0x210>)
 800c332:	f893 369c 	ldrb.w	r3, [r3, #1692]	@ 0x69c
 800c336:	2b46      	cmp	r3, #70	@ 0x46
 800c338:	d903      	bls.n	800c342 <check_motors+0x116>
			motor_temp_bz(1, 4);
 800c33a:	2104      	movs	r1, #4
 800c33c:	2001      	movs	r0, #1
 800c33e:	f7ff ff19 	bl	800c174 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[LFRICTION_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c342:	4b3e      	ldr	r3, [pc, #248]	@ (800c43c <check_motors+0x210>)
 800c344:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 800c348:	683a      	ldr	r2, [r7, #0]
 800c34a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c34c:	4a3c      	ldr	r2, [pc, #240]	@ (800c440 <check_motors+0x214>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d904      	bls.n	800c35c <check_motors+0x130>
		error |= 1 << (4);
 800c352:	88fb      	ldrh	r3, [r7, #6]
 800c354:	f043 0310 	orr.w	r3, r3, #16
 800c358:	80fb      	strh	r3, [r7, #6]
 800c35a:	e008      	b.n	800c36e <check_motors+0x142>

	} else {
		if (g_can_motors[LFRICTION_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c35c:	4b37      	ldr	r3, [pc, #220]	@ (800c43c <check_motors+0x210>)
 800c35e:	f893 3f0c 	ldrb.w	r3, [r3, #3852]	@ 0xf0c
 800c362:	2b46      	cmp	r3, #70	@ 0x46
 800c364:	d903      	bls.n	800c36e <check_motors+0x142>
			motor_temp_bz(2, 1);
 800c366:	2101      	movs	r1, #1
 800c368:	2002      	movs	r0, #2
 800c36a:	f7ff ff03 	bl	800c174 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[RFRICTION_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c36e:	4b33      	ldr	r3, [pc, #204]	@ (800c43c <check_motors+0x210>)
 800c370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c374:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c378:	683a      	ldr	r2, [r7, #0]
 800c37a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c37c:	4a30      	ldr	r2, [pc, #192]	@ (800c440 <check_motors+0x214>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d904      	bls.n	800c38c <check_motors+0x160>
		error |= 1 << (5);
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	f043 0320 	orr.w	r3, r3, #32
 800c388:	80fb      	strh	r3, [r7, #6]
 800c38a:	e008      	b.n	800c39e <check_motors+0x172>

	} else {
		if (g_can_motors[RFRICTION_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c38c:	4b2b      	ldr	r3, [pc, #172]	@ (800c43c <check_motors+0x210>)
 800c38e:	f893 3ffc 	ldrb.w	r3, [r3, #4092]	@ 0xffc
 800c392:	2b46      	cmp	r3, #70	@ 0x46
 800c394:	d903      	bls.n	800c39e <check_motors+0x172>
			motor_temp_bz(2, 2);
 800c396:	2102      	movs	r1, #2
 800c398:	2002      	movs	r0, #2
 800c39a:	f7ff feeb 	bl	800c174 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[FEEDER_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c39e:	4b27      	ldr	r3, [pc, #156]	@ (800c43c <check_motors+0x210>)
 800c3a0:	f8d3 3954 	ldr.w	r3, [r3, #2388]	@ 0x954
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c3a8:	4a25      	ldr	r2, [pc, #148]	@ (800c440 <check_motors+0x214>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d904      	bls.n	800c3b8 <check_motors+0x18c>
		error |= 1 << 6;
 800c3ae:	88fb      	ldrh	r3, [r7, #6]
 800c3b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b4:	80fb      	strh	r3, [r7, #6]
 800c3b6:	e008      	b.n	800c3ca <check_motors+0x19e>

	} else {
		if (g_can_motors[FEEDER_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c3b8:	4b20      	ldr	r3, [pc, #128]	@ (800c43c <check_motors+0x210>)
 800c3ba:	f893 387c 	ldrb.w	r3, [r3, #2172]	@ 0x87c
 800c3be:	2b46      	cmp	r3, #70	@ 0x46
 800c3c0:	d903      	bls.n	800c3ca <check_motors+0x19e>
			motor_temp_bz(2, 3);
 800c3c2:	2103      	movs	r1, #3
 800c3c4:	2002      	movs	r0, #2
 800c3c6:	f7ff fed5 	bl	800c174 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[PITCH_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c3ca:	4b1c      	ldr	r3, [pc, #112]	@ (800c43c <check_motors+0x210>)
 800c3cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3d0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c3d8:	4a19      	ldr	r2, [pc, #100]	@ (800c440 <check_motors+0x214>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d904      	bls.n	800c3e8 <check_motors+0x1bc>
		error |= 1 << 7;
 800c3de:	88fb      	ldrh	r3, [r7, #6]
 800c3e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e4:	80fb      	strh	r3, [r7, #6]
 800c3e6:	e00a      	b.n	800c3fe <check_motors+0x1d2>

	} else {
		if (g_can_motors[PITCH_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c3e8:	4b14      	ldr	r3, [pc, #80]	@ (800c43c <check_motors+0x210>)
 800c3ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3ee:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c3f2:	2b46      	cmp	r3, #70	@ 0x46
 800c3f4:	d903      	bls.n	800c3fe <check_motors+0x1d2>
			motor_temp_bz(3, 1);
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	2003      	movs	r0, #3
 800c3fa:	f7ff febb 	bl	800c174 <motor_temp_bz>
		}
	}

	if (curr_time
			- g_can_motors[YAW_MOTOR_ID - 1].last_time[0]> MOTOR_TIMEOUT_MAX) {
 800c3fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c43c <check_motors+0x210>)
 800c400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	1ad3      	subs	r3, r2, r3
	if (curr_time
 800c40c:	4a0c      	ldr	r2, [pc, #48]	@ (800c440 <check_motors+0x214>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d904      	bls.n	800c41c <check_motors+0x1f0>
		error |= 1 << 8;
 800c412:	88fb      	ldrh	r3, [r7, #6]
 800c414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c418:	80fb      	strh	r3, [r7, #6]
 800c41a:	e00a      	b.n	800c432 <check_motors+0x206>

	} else {
		if (g_can_motors[YAW_MOTOR_ID - 1].raw_data.temp > HITEMP_WARNING) {
 800c41c:	4b07      	ldr	r3, [pc, #28]	@ (800c43c <check_motors+0x210>)
 800c41e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c422:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 800c426:	2b46      	cmp	r3, #70	@ 0x46
 800c428:	d903      	bls.n	800c432 <check_motors+0x206>
			motor_temp_bz(3, 2);
 800c42a:	2102      	movs	r1, #2
 800c42c:	2003      	movs	r0, #3
 800c42e:	f7ff fea1 	bl	800c174 <motor_temp_bz>
		}
	}
	return error;
 800c432:	88fb      	ldrh	r3, [r7, #6]

}
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20002220 	.word	0x20002220
 800c440:	000f4240 	.word	0x000f4240

0800c444 <motor_calib_task>:

void motor_calib_task(void *argument) {
 800c444:	b580      	push	{r7, lr}
 800c446:	b088      	sub	sp, #32
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 800c44c:	2200      	movs	r2, #0
 800c44e:	2100      	movs	r1, #0
 800c450:	4842      	ldr	r0, [pc, #264]	@ (800c55c <motor_calib_task+0x118>)
 800c452:	f7f4 fef3 	bl	800123c <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 800c456:	2200      	movs	r2, #0
 800c458:	2100      	movs	r1, #0
 800c45a:	4841      	ldr	r0, [pc, #260]	@ (800c560 <motor_calib_task+0x11c>)
 800c45c:	f7f4 feee 	bl	800123c <can_start>
	config_motors();
 800c460:	f7fe ff62 	bl	800b328 <config_motors>
	//insert can tester?
	uint16_t error = 0b111111111;
 800c464:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800c468:	82fb      	strh	r3, [r7, #22]
	vTaskDelay(50);
 800c46a:	2032      	movs	r0, #50	@ 0x32
 800c46c:	f00e fc0a 	bl	801ac84 <vTaskDelay>
			vTaskDelay(500);
		}
	}

	uint8_t temp_msg;
	if (error == 0) {
 800c470:	8afb      	ldrh	r3, [r7, #22]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d102      	bne.n	800c47c <motor_calib_task+0x38>
		temp_msg = ok;
 800c476:	2301      	movs	r3, #1
 800c478:	73fb      	strb	r3, [r7, #15]
 800c47a:	e001      	b.n	800c480 <motor_calib_task+0x3c>
	} else {
		temp_msg = not_ok;
 800c47c:	2302      	movs	r3, #2
 800c47e:	73fb      	strb	r3, [r7, #15]
	}
	xQueueSendToBack(g_buzzing_task_msg, &temp_msg, 0);
 800c480:	4b38      	ldr	r3, [pc, #224]	@ (800c564 <motor_calib_task+0x120>)
 800c482:	6818      	ldr	r0, [r3, #0]
 800c484:	f107 010f 	add.w	r1, r7, #15
 800c488:	2300      	movs	r3, #0
 800c48a:	2200      	movs	r2, #0
 800c48c:	f00d fd10 	bl	8019eb0 <xQueueGenericSend>
	uint32_t last_check = HAL_GetTick();
 800c490:	f001 fa32 	bl	800d8f8 <HAL_GetTick>
 800c494:	6138      	str	r0, [r7, #16]
	while (1) {
		error = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	82fb      	strh	r3, [r7, #22]

		error = check_motors();
 800c49a:	f7ff fec7 	bl	800c22c <check_motors>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	82fb      	strh	r3, [r7, #22]
		g_motor_fault = error;
 800c4a2:	4a31      	ldr	r2, [pc, #196]	@ (800c568 <motor_calib_task+0x124>)
 800c4a4:	8afb      	ldrh	r3, [r7, #22]
 800c4a6:	8013      	strh	r3, [r2, #0]
		uint32_t delay = 0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	61bb      	str	r3, [r7, #24]
		if (HAL_GetTick() - last_check > 30000) {
 800c4ac:	f001 fa24 	bl	800d8f8 <HAL_GetTick>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d949      	bls.n	800c552 <motor_calib_task+0x10e>
					bz_buzzer(0, 2);
					vTaskDelay(5000);
					continue;
				}
			} else {
				error = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	82fb      	strh	r3, [r7, #22]
			}
			for (uint8_t i = 0; i < 4; i++) {
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	777b      	strb	r3, [r7, #29]
 800c4c6:	e011      	b.n	800c4ec <motor_calib_task+0xa8>
				if (error & (1 << (i))) {
 800c4c8:	8afa      	ldrh	r2, [r7, #22]
 800c4ca:	7f7b      	ldrb	r3, [r7, #29]
 800c4cc:	fa42 f303 	asr.w	r3, r2, r3
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <motor_calib_task+0xa2>
					bz_buzzer(1, i + 1);
 800c4d8:	7f7b      	ldrb	r3, [r7, #29]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	4619      	mov	r1, r3
 800c4e0:	2001      	movs	r0, #1
 800c4e2:	f7ff fe03 	bl	800c0ec <bz_buzzer>
			for (uint8_t i = 0; i < 4; i++) {
 800c4e6:	7f7b      	ldrb	r3, [r7, #29]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	777b      	strb	r3, [r7, #29]
 800c4ec:	7f7b      	ldrb	r3, [r7, #29]
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d9ea      	bls.n	800c4c8 <motor_calib_task+0x84>
				} else {

				}
			}
			for (uint8_t i = 4; i < 7; i++) {
 800c4f2:	2304      	movs	r3, #4
 800c4f4:	77bb      	strb	r3, [r7, #30]
 800c4f6:	e011      	b.n	800c51c <motor_calib_task+0xd8>
				if (error & (1 << (i))) {
 800c4f8:	8afa      	ldrh	r2, [r7, #22]
 800c4fa:	7fbb      	ldrb	r3, [r7, #30]
 800c4fc:	fa42 f303 	asr.w	r3, r2, r3
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	d006      	beq.n	800c516 <motor_calib_task+0xd2>
					bz_buzzer(2, (i - 3));
 800c508:	7fbb      	ldrb	r3, [r7, #30]
 800c50a:	3b03      	subs	r3, #3
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	4619      	mov	r1, r3
 800c510:	2002      	movs	r0, #2
 800c512:	f7ff fdeb 	bl	800c0ec <bz_buzzer>
			for (uint8_t i = 4; i < 7; i++) {
 800c516:	7fbb      	ldrb	r3, [r7, #30]
 800c518:	3301      	adds	r3, #1
 800c51a:	77bb      	strb	r3, [r7, #30]
 800c51c:	7fbb      	ldrb	r3, [r7, #30]
 800c51e:	2b06      	cmp	r3, #6
 800c520:	d9ea      	bls.n	800c4f8 <motor_calib_task+0xb4>
				}
			}
			for (uint8_t i = 7; i < 9; i++) {
 800c522:	2307      	movs	r3, #7
 800c524:	77fb      	strb	r3, [r7, #31]
 800c526:	e011      	b.n	800c54c <motor_calib_task+0x108>
				if (error & (1 << (i))) {
 800c528:	8afa      	ldrh	r2, [r7, #22]
 800c52a:	7ffb      	ldrb	r3, [r7, #31]
 800c52c:	fa42 f303 	asr.w	r3, r2, r3
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d006      	beq.n	800c546 <motor_calib_task+0x102>
					bz_buzzer(3, (i - 6));
 800c538:	7ffb      	ldrb	r3, [r7, #31]
 800c53a:	3b06      	subs	r3, #6
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	4619      	mov	r1, r3
 800c540:	2003      	movs	r0, #3
 800c542:	f7ff fdd3 	bl	800c0ec <bz_buzzer>
			for (uint8_t i = 7; i < 9; i++) {
 800c546:	7ffb      	ldrb	r3, [r7, #31]
 800c548:	3301      	adds	r3, #1
 800c54a:	77fb      	strb	r3, [r7, #31]
 800c54c:	7ffb      	ldrb	r3, [r7, #31]
 800c54e:	2b08      	cmp	r3, #8
 800c550:	d9ea      	bls.n	800c528 <motor_calib_task+0xe4>
				}
			}
		}

		vTaskDelay(1000);
 800c552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c556:	f00e fb95 	bl	801ac84 <vTaskDelay>
	while (1) {
 800c55a:	e79c      	b.n	800c496 <motor_calib_task+0x52>
 800c55c:	20000914 	.word	0x20000914
 800c560:	2000093c 	.word	0x2000093c
 800c564:	20003bbc 	.word	0x20003bbc
 800c568:	20003bc0 	.word	0x20003bc0

0800c56c <speed_pid>:
 *
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */
void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	@ 0x28
 800c570:	af00      	add	r7, sp, #0
 800c572:	ed87 0b04 	vstr	d0, [r7, #16]
 800c576:	ed87 1b02 	vstr	d1, [r7, #8]
 800c57a:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->last_time[0] = get_microseconds();
 800c584:	f7f5 fe1c 	bl	80021c0 <get_microseconds>
 800c588:	4602      	mov	r2, r0
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	629a      	str	r2, [r3, #40]	@ 0x28
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 800c58e:	2301      	movs	r3, #1
 800c590:	627b      	str	r3, [r7, #36]	@ 0x24
	float Pout = 0;
 800c592:	f04f 0300 	mov.w	r3, #0
 800c596:	623b      	str	r3, [r7, #32]
	float Iout = 0;
 800c598:	f04f 0300 	mov.w	r3, #0
 800c59c:	61fb      	str	r3, [r7, #28]
	float Dout = 0;
 800c59e:	f04f 0300 	mov.w	r3, #0
 800c5a2:	61bb      	str	r3, [r7, #24]

	pid->error[1] = pid->error[0];
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	611a      	str	r2, [r3, #16]
	pid->error[0] = setpoint - curr_pt;
 800c5ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c5b4:	f7f3 fe68 	bl	8000288 <__aeabi_dsub>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4610      	mov	r0, r2
 800c5be:	4619      	mov	r1, r3
 800c5c0:	f7f4 fb12 	bl	8000be8 <__aeabi_d2f>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	ed93 7a03 	vldr	s14, [r3, #12]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	edd3 7a00 	vldr	s15, [r3]
 800c5d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	ee07 3a90 	vmov	s15, r3
 800c5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e8:	edc7 7a08 	vstr	s15, [r7, #32]
	Dout = (float)(pid->error[0] - pid->error[1]) * pid->kd * time_mult;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	ed93 7a03 	vldr	s14, [r3, #12]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	edd3 7a04 	vldr	s15, [r3, #16]
 800c5f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	edd3 7a02 	vldr	s15, [r3, #8]
 800c602:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	ee07 3a90 	vmov	s15, r3
 800c60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c614:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->integral += pid->error[0] * pid->ki * time_mult;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	ed93 7a05 	vldr	s14, [r3, #20]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	edd3 6a03 	vldr	s13, [r3, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	edd3 7a01 	vldr	s15, [r3, #4]
 800c62a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	ee07 3a90 	vmov	s15, r3
 800c634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c63c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f103 0214 	add.w	r2, r3, #20
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c652:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800c6a4 <speed_pid+0x138>
 800c656:	eeb0 0a67 	vmov.f32	s0, s15
 800c65a:	4610      	mov	r0, r2
 800c65c:	f000 f82b 	bl	800c6b6 <float_minmax>
	Iout = pid->integral;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	695b      	ldr	r3, [r3, #20]
 800c664:	61fb      	str	r3, [r7, #28]
	pid->output = Pout + Iout + Dout;
 800c666:	ed97 7a08 	vldr	s14, [r7, #32]
 800c66a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c66e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c672:	edd7 7a06 	vldr	s15, [r7, #24]
 800c676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	edc3 7a08 	vstr	s15, [r3, #32]
	float_minmax(&pid->output, pid->max_out, 0);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f103 0220 	add.w	r2, r3, #32
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	edd3 7a07 	vldr	s15, [r3, #28]
 800c68c:	eddf 0a05 	vldr	s1, [pc, #20]	@ 800c6a4 <speed_pid+0x138>
 800c690:	eeb0 0a67 	vmov.f32	s0, s15
 800c694:	4610      	mov	r0, r2
 800c696:	f000 f80e 	bl	800c6b6 <float_minmax>
}
 800c69a:	bf00      	nop
 800c69c:	3728      	adds	r7, #40	@ 0x28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	00000000 	.word	0x00000000

0800c6a8 <kill_can>:
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
	}
#endif
}

void kill_can() {
 800c6a8:	b480      	push	{r7}
 800c6aa:	af00      	add	r7, sp, #0

}
 800c6ac:	bf00      	nop
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 800c6b6:	b480      	push	{r7}
 800c6b8:	b085      	sub	sp, #20
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	60f8      	str	r0, [r7, #12]
 800c6be:	ed87 0a02 	vstr	s0, [r7, #8]
 800c6c2:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	edd3 7a00 	vldr	s15, [r3]
 800c6cc:	ed97 7a02 	vldr	s14, [r7, #8]
 800c6d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d8:	d503      	bpl.n	800c6e2 <float_minmax+0x2c>
		*motor_in = motor_max;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	601a      	str	r2, [r3, #0]

//	if (fabs(*motor_in) < motor_min) {
//		*motor_in = 0;
//	}

}
 800c6e0:	e013      	b.n	800c70a <float_minmax+0x54>
	} else if (*motor_in < -motor_max) {
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	ed93 7a00 	vldr	s14, [r3]
 800c6e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6ec:	eef1 7a67 	vneg.f32	s15, s15
 800c6f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f8:	d400      	bmi.n	800c6fc <float_minmax+0x46>
}
 800c6fa:	e006      	b.n	800c70a <float_minmax+0x54>
		*motor_in = -motor_max;
 800c6fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c700:	eef1 7a67 	vneg.f32	s15, s15
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	edc3 7a00 	vstr	s15, [r3]
}
 800c70a:	bf00      	nop
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
	...

0800c718 <motor_control_task>:
extern QueueHandle_t g_buzzing_task_msg;
extern remote_cmd_t g_remote_cmd;

extern uint8_t g_safety_toggle;
volatile uint32_t g_motor_control_time;
void motor_control_task(void *argument) {
 800c718:	b580      	push	{r7, lr}
 800c71a:	b090      	sub	sp, #64	@ 0x40
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 800c720:	2300      	movs	r3, #0
 800c722:	627b      	str	r3, [r7, #36]	@ 0x24
	CAN_tx_message.RTR = CAN_RTR_DATA;
 800c724:	2300      	movs	r3, #0
 800c726:	62bb      	str	r3, [r7, #40]	@ 0x28
	CAN_tx_message.DLC = 0x08;
 800c728:	2308      	movs	r3, #8
 800c72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t enabled_motors = 0;
 800c72c:	2300      	movs	r3, #0
 800c72e:	63bb      	str	r3, [r7, #56]	@ 0x38
	//initialise motor data
#ifdef LEFT_MOTOR_ID
	if (LEFT_MOTOR_ID < 25 && LEFT_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (LEFT_MOTOR_ID - 1);
 800c730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c732:	f043 0301 	orr.w	r3, r3, #1
 800c736:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef RIGHT_MOTOR_ID
	if (RIGHT_MOTOR_ID < 25 && RIGHT_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (RIGHT_MOTOR_ID - 1);
 800c738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73a:	f043 0302 	orr.w	r3, r3, #2
 800c73e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif
#ifdef FR_MOTOR_ID
	if (FR_MOTOR_ID < 25 && FR_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FR_MOTOR_ID - 1);
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	f043 0310 	orr.w	r3, r3, #16
 800c746:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef FL_MOTOR_ID
	if (FL_MOTOR_ID < 25 && FL_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FL_MOTOR_ID - 1);
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	f043 0320 	orr.w	r3, r3, #32
 800c74e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef BL_MOTOR_ID
	if (BL_MOTOR_ID < 25 && BL_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (BL_MOTOR_ID - 1);
 800c750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c756:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef BR_MOTOR_ID
	if (BR_MOTOR_ID < 25 && BR_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (BR_MOTOR_ID - 1);
 800c758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c75e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef LFRICTION_MOTOR_ID
	if (LFRICTION_MOTOR_ID < 25 && LFRICTION_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (LFRICTION_MOTOR_ID - 1);
 800c760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c766:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef RFRICTION_MOTOR_ID
	if (RFRICTION_MOTOR_ID < 25 && RFRICTION_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (RFRICTION_MOTOR_ID - 1);
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c76e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef FEEDER_MOTOR_ID
	if (FEEDER_MOTOR_ID < 25 && FEEDER_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (FEEDER_MOTOR_ID - 1);
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c776:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef PITCH_MOTOR_ID
	if (PITCH_MOTOR_ID < 25 && PITCH_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (PITCH_MOTOR_ID - 1);
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c77e:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif

#ifdef YAW_MOTOR_ID
	if (YAW_MOTOR_ID < 25 && YAW_MOTOR_ID > 0) {
		enabled_motors = enabled_motors | 1 << (YAW_MOTOR_ID - 1);
 800c780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c782:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c786:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
#endif
	TickType_t start_time;
//	uint32_t last_time;
	while (1) {
		start_time = xTaskGetTickCount();
 800c788:	f00e fbd0 	bl	801af2c <xTaskGetTickCount>
 800c78c:	4603      	mov	r3, r0
 800c78e:	60fb      	str	r3, [r7, #12]
		if (g_remote_cmd.right_switch == ge_RSW_SHUTDOWN){
 800c790:	4b30      	ldr	r3, [pc, #192]	@ (800c854 <motor_control_task+0x13c>)
 800c792:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d162      	bne.n	800c860 <motor_control_task+0x148>
			CAN_send_data[0] = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	76fb      	strb	r3, [r7, #27]
			CAN_tx_message.StdId = 0x200;
 800c7ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7be:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800c7c0:	f107 0310 	add.w	r3, r7, #16
 800c7c4:	f107 0214 	add.w	r2, r7, #20
 800c7c8:	f107 011c 	add.w	r1, r7, #28
 800c7cc:	4822      	ldr	r0, [pc, #136]	@ (800c858 <motor_control_task+0x140>)
 800c7ce:	f001 fd45 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800c7d2:	f107 0310 	add.w	r3, r7, #16
 800c7d6:	f107 0214 	add.w	r2, r7, #20
 800c7da:	f107 011c 	add.w	r1, r7, #28
 800c7de:	481f      	ldr	r0, [pc, #124]	@ (800c85c <motor_control_task+0x144>)
 800c7e0:	f001 fd3c 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelay(1);
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	f00e fa4d 	bl	801ac84 <vTaskDelay>
			CAN_tx_message.StdId = 0x1FF;
 800c7ea:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800c7ee:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800c7f0:	f107 0310 	add.w	r3, r7, #16
 800c7f4:	f107 0214 	add.w	r2, r7, #20
 800c7f8:	f107 011c 	add.w	r1, r7, #28
 800c7fc:	4816      	ldr	r0, [pc, #88]	@ (800c858 <motor_control_task+0x140>)
 800c7fe:	f001 fd2d 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800c802:	f107 0310 	add.w	r3, r7, #16
 800c806:	f107 0214 	add.w	r2, r7, #20
 800c80a:	f107 011c 	add.w	r1, r7, #28
 800c80e:	4813      	ldr	r0, [pc, #76]	@ (800c85c <motor_control_task+0x144>)
 800c810:	f001 fd24 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelay(1);;
 800c814:	2001      	movs	r0, #1
 800c816:	f00e fa35 	bl	801ac84 <vTaskDelay>
			CAN_tx_message.StdId = 0x2FF;
 800c81a:	f240 23ff 	movw	r3, #767	@ 0x2ff
 800c81e:	61fb      	str	r3, [r7, #28]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800c820:	f107 0310 	add.w	r3, r7, #16
 800c824:	f107 0214 	add.w	r2, r7, #20
 800c828:	f107 011c 	add.w	r1, r7, #28
 800c82c:	480a      	ldr	r0, [pc, #40]	@ (800c858 <motor_control_task+0x140>)
 800c82e:	f001 fd15 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);;
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800c832:	f107 0310 	add.w	r3, r7, #16
 800c836:	f107 0214 	add.w	r2, r7, #20
 800c83a:	f107 011c 	add.w	r1, r7, #28
 800c83e:	4807      	ldr	r0, [pc, #28]	@ (800c85c <motor_control_task+0x144>)
 800c840:	f001 fd0c 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			vTaskDelayUntil(&start_time, 5);
 800c844:	f107 030c 	add.w	r3, r7, #12
 800c848:	2105      	movs	r1, #5
 800c84a:	4618      	mov	r0, r3
 800c84c:	f00e f99a 	bl	801ab84 <vTaskDelayUntil>
			continue;
 800c850:	e1dd      	b.n	800cc0e <motor_control_task+0x4f6>
 800c852:	bf00      	nop
 800c854:	20000838 	.word	0x20000838
 800c858:	20000914 	.word	0x20000914
 800c85c:	2000093c 	.word	0x2000093c
		}
		TickType_t delay = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (enabled_motors & 0x00000F) {
 800c864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c866:	f003 030f 	and.w	r3, r3, #15
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d042      	beq.n	800c8f4 <motor_control_task+0x1dc>
			CAN_tx_message.StdId = 0x200;
 800c86e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c872:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x0].output;
 800c874:	4bb3      	ldr	r3, [pc, #716]	@ (800cb44 <motor_control_task+0x42c>)
 800c876:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 800c87a:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 800c87c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c880:	121b      	asrs	r3, r3, #8
 800c882:	b21b      	sxth	r3, r3
 800c884:	b2db      	uxtb	r3, r3
 800c886:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 800c888:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x1].output;
 800c88e:	4bad      	ldr	r3, [pc, #692]	@ (800cb44 <motor_control_task+0x42c>)
 800c890:	f8b3 31d0 	ldrh.w	r3, [r3, #464]	@ 0x1d0
 800c894:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800c896:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c89a:	121b      	asrs	r3, r3, #8
 800c89c:	b21b      	sxth	r3, r3
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 800c8a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0x2].output;
 800c8a8:	4ba6      	ldr	r3, [pc, #664]	@ (800cb44 <motor_control_task+0x42c>)
 800c8aa:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	@ 0x2c0
 800c8ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 800c8b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c8b4:	121b      	asrs	r3, r3, #8
 800c8b6:	b21b      	sxth	r3, r3
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 800c8bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0x3].output;
 800c8c2:	4ba0      	ldr	r3, [pc, #640]	@ (800cb44 <motor_control_task+0x42c>)
 800c8c4:	f8b3 33b0 	ldrh.w	r3, [r3, #944]	@ 0x3b0
 800c8c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 800c8ca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c8ce:	121b      	asrs	r3, r3, #8
 800c8d0:	b21b      	sxth	r3, r3
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800c8d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800c8dc:	f107 0310 	add.w	r3, r7, #16
 800c8e0:	f107 0214 	add.w	r2, r7, #20
 800c8e4:	f107 011c 	add.w	r1, r7, #28
 800c8e8:	4897      	ldr	r0, [pc, #604]	@ (800cb48 <motor_control_task+0x430>)
 800c8ea:	f001 fcb7 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800c8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		if (enabled_motors & 0x00F000) {
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d03e      	beq.n	800c97c <motor_control_task+0x264>
			CAN_tx_message.StdId = 0x200;
 800c8fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c902:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x0 + 12].output >> 8;
 800c904:	4b8f      	ldr	r3, [pc, #572]	@ (800cb44 <motor_control_task+0x42c>)
 800c906:	f9b3 3c20 	ldrsh.w	r3, [r3, #3104]	@ 0xc20
 800c90a:	121b      	asrs	r3, r3, #8
 800c90c:	b21b      	sxth	r3, r3
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x0 + 12].output;
 800c912:	4b8c      	ldr	r3, [pc, #560]	@ (800cb44 <motor_control_task+0x42c>)
 800c914:	f9b3 3c20 	ldrsh.w	r3, [r3, #3104]	@ 0xc20
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = g_can_motors[0x1 + 12].output >> 8;
 800c91c:	4b89      	ldr	r3, [pc, #548]	@ (800cb44 <motor_control_task+0x42c>)
 800c91e:	f9b3 3d10 	ldrsh.w	r3, [r3, #3344]	@ 0xd10
 800c922:	121b      	asrs	r3, r3, #8
 800c924:	b21b      	sxth	r3, r3
 800c926:	b2db      	uxtb	r3, r3
 800c928:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = g_can_motors[0x1 + 12].output;
 800c92a:	4b86      	ldr	r3, [pc, #536]	@ (800cb44 <motor_control_task+0x42c>)
 800c92c:	f9b3 3d10 	ldrsh.w	r3, [r3, #3344]	@ 0xd10
 800c930:	b2db      	uxtb	r3, r3
 800c932:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0x2 + 12].output >> 8;
 800c934:	4b83      	ldr	r3, [pc, #524]	@ (800cb44 <motor_control_task+0x42c>)
 800c936:	f9b3 3e00 	ldrsh.w	r3, [r3, #3584]	@ 0xe00
 800c93a:	121b      	asrs	r3, r3, #8
 800c93c:	b21b      	sxth	r3, r3
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0x2 + 12].output;
 800c942:	4b80      	ldr	r3, [pc, #512]	@ (800cb44 <motor_control_task+0x42c>)
 800c944:	f9b3 3e00 	ldrsh.w	r3, [r3, #3584]	@ 0xe00
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0x3 + 12].output >> 8;
 800c94c:	4b7d      	ldr	r3, [pc, #500]	@ (800cb44 <motor_control_task+0x42c>)
 800c94e:	f9b3 3ef0 	ldrsh.w	r3, [r3, #3824]	@ 0xef0
 800c952:	121b      	asrs	r3, r3, #8
 800c954:	b21b      	sxth	r3, r3
 800c956:	b2db      	uxtb	r3, r3
 800c958:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0x3 + 12].output;
 800c95a:	4b7a      	ldr	r3, [pc, #488]	@ (800cb44 <motor_control_task+0x42c>)
 800c95c:	f9b3 3ef0 	ldrsh.w	r3, [r3, #3824]	@ 0xef0
 800c960:	b2db      	uxtb	r3, r3
 800c962:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800c964:	f107 0310 	add.w	r3, r7, #16
 800c968:	f107 0214 	add.w	r2, r7, #20
 800c96c:	f107 011c 	add.w	r1, r7, #28
 800c970:	4876      	ldr	r0, [pc, #472]	@ (800cb4c <motor_control_task+0x434>)
 800c972:	f001 fc73 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800c976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c978:	3301      	adds	r3, #1
 800c97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		vTaskDelay(1);
 800c97c:	2001      	movs	r0, #1
 800c97e:	f00e f981 	bl	801ac84 <vTaskDelay>

		if (enabled_motors & 0x0000F0) {
 800c982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d042      	beq.n	800ca12 <motor_control_task+0x2fa>
			CAN_tx_message.StdId = 0x1FF;
 800c98c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800c990:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x4].output;
 800c992:	4b6c      	ldr	r3, [pc, #432]	@ (800cb44 <motor_control_task+0x42c>)
 800c994:	f8b3 34a0 	ldrh.w	r3, [r3, #1184]	@ 0x4a0
 800c998:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 800c99a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c99e:	121b      	asrs	r3, r3, #8
 800c9a0:	b21b      	sxth	r3, r3
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 800c9a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x5].output;
 800c9ac:	4b65      	ldr	r3, [pc, #404]	@ (800cb44 <motor_control_task+0x42c>)
 800c9ae:	f8b3 3590 	ldrh.w	r3, [r3, #1424]	@ 0x590
 800c9b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800c9b4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c9b8:	121b      	asrs	r3, r3, #8
 800c9ba:	b21b      	sxth	r3, r3
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 800c9c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0x6].output;
 800c9c6:	4b5f      	ldr	r3, [pc, #380]	@ (800cb44 <motor_control_task+0x42c>)
 800c9c8:	f8b3 3680 	ldrh.w	r3, [r3, #1664]	@ 0x680
 800c9cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 800c9ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c9d2:	121b      	asrs	r3, r3, #8
 800c9d4:	b21b      	sxth	r3, r3
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 800c9da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0x7].output;
 800c9e0:	4b58      	ldr	r3, [pc, #352]	@ (800cb44 <motor_control_task+0x42c>)
 800c9e2:	f8b3 3770 	ldrh.w	r3, [r3, #1904]	@ 0x770
 800c9e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 800c9e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c9ec:	121b      	asrs	r3, r3, #8
 800c9ee:	b21b      	sxth	r3, r3
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800c9f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800c9fa:	f107 0310 	add.w	r3, r7, #16
 800c9fe:	f107 0214 	add.w	r2, r7, #20
 800ca02:	f107 011c 	add.w	r1, r7, #28
 800ca06:	4850      	ldr	r0, [pc, #320]	@ (800cb48 <motor_control_task+0x430>)
 800ca08:	f001 fc28 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800ca0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca0e:	3301      	adds	r3, #1
 800ca10:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}


		if (enabled_motors & 0x0F0000) {
 800ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca14:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d04a      	beq.n	800cab2 <motor_control_task+0x39a>
			CAN_tx_message.StdId = 0x1FF;
 800ca1c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800ca20:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x4 + 12].output >> 8;
 800ca22:	4b48      	ldr	r3, [pc, #288]	@ (800cb44 <motor_control_task+0x42c>)
 800ca24:	f9b3 3fe0 	ldrsh.w	r3, [r3, #4064]	@ 0xfe0
 800ca28:	121b      	asrs	r3, r3, #8
 800ca2a:	b21b      	sxth	r3, r3
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x4 + 12].output;
 800ca30:	4b44      	ldr	r3, [pc, #272]	@ (800cb44 <motor_control_task+0x42c>)
 800ca32:	f9b3 3fe0 	ldrsh.w	r3, [r3, #4064]	@ 0xfe0
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] = g_can_motors[0x5 + 12].output >> 8;
 800ca3a:	4b42      	ldr	r3, [pc, #264]	@ (800cb44 <motor_control_task+0x42c>)
 800ca3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca40:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800ca44:	121b      	asrs	r3, r3, #8
 800ca46:	b21b      	sxth	r3, r3
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = g_can_motors[0x5 + 12].output;
 800ca4c:	4b3d      	ldr	r3, [pc, #244]	@ (800cb44 <motor_control_task+0x42c>)
 800ca4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca52:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0x6 + 12].output >> 8;
 800ca5a:	4b3a      	ldr	r3, [pc, #232]	@ (800cb44 <motor_control_task+0x42c>)
 800ca5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca60:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 800ca64:	121b      	asrs	r3, r3, #8
 800ca66:	b21b      	sxth	r3, r3
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0x6 + 12].output;
 800ca6c:	4b35      	ldr	r3, [pc, #212]	@ (800cb44 <motor_control_task+0x42c>)
 800ca6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca72:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	@ 0x1c0
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0x7 + 12].output >> 8;
 800ca7a:	4b32      	ldr	r3, [pc, #200]	@ (800cb44 <motor_control_task+0x42c>)
 800ca7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca80:	f9b3 32b0 	ldrsh.w	r3, [r3, #688]	@ 0x2b0
 800ca84:	121b      	asrs	r3, r3, #8
 800ca86:	b21b      	sxth	r3, r3
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0x7 + 12].output;
 800ca8c:	4b2d      	ldr	r3, [pc, #180]	@ (800cb44 <motor_control_task+0x42c>)
 800ca8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca92:	f9b3 32b0 	ldrsh.w	r3, [r3, #688]	@ 0x2b0
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800ca9a:	f107 0310 	add.w	r3, r7, #16
 800ca9e:	f107 0214 	add.w	r2, r7, #20
 800caa2:	f107 011c 	add.w	r1, r7, #28
 800caa6:	4829      	ldr	r0, [pc, #164]	@ (800cb4c <motor_control_task+0x434>)
 800caa8:	f001 fbd8 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800caac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caae:	3301      	adds	r3, #1
 800cab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}


		if (enabled_motors & 0x000F00) {
 800cab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d049      	beq.n	800cb50 <motor_control_task+0x438>
			CAN_tx_message.StdId = 0x2FF;
 800cabc:	f240 23ff 	movw	r3, #767	@ 0x2ff
 800cac0:	61fb      	str	r3, [r7, #28]
			temp_converter = g_can_motors[0x8].output;
 800cac2:	4b20      	ldr	r3, [pc, #128]	@ (800cb44 <motor_control_task+0x42c>)
 800cac4:	f8b3 3860 	ldrh.w	r3, [r3, #2144]	@ 0x860
 800cac8:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[0] = temp_converter >> 8;
 800caca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800cace:	121b      	asrs	r3, r3, #8
 800cad0:	b21b      	sxth	r3, r3
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = temp_converter;
 800cad6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	757b      	strb	r3, [r7, #21]
			temp_converter = g_can_motors[0x9].output;
 800cadc:	4b19      	ldr	r3, [pc, #100]	@ (800cb44 <motor_control_task+0x42c>)
 800cade:	f8b3 3950 	ldrh.w	r3, [r3, #2384]	@ 0x950
 800cae2:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[2] = temp_converter >> 8;
 800cae4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800cae8:	121b      	asrs	r3, r3, #8
 800caea:	b21b      	sxth	r3, r3
 800caec:	b2db      	uxtb	r3, r3
 800caee:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] = temp_converter;
 800caf0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	75fb      	strb	r3, [r7, #23]
			temp_converter = g_can_motors[0xA].output;
 800caf6:	4b13      	ldr	r3, [pc, #76]	@ (800cb44 <motor_control_task+0x42c>)
 800caf8:	f8b3 3a40 	ldrh.w	r3, [r3, #2624]	@ 0xa40
 800cafc:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[4] = temp_converter >> 8;
 800cafe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800cb02:	121b      	asrs	r3, r3, #8
 800cb04:	b21b      	sxth	r3, r3
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = temp_converter;
 800cb0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	767b      	strb	r3, [r7, #25]
			temp_converter = g_can_motors[0xB].output;
 800cb10:	4b0c      	ldr	r3, [pc, #48]	@ (800cb44 <motor_control_task+0x42c>)
 800cb12:	f8b3 3b30 	ldrh.w	r3, [r3, #2864]	@ 0xb30
 800cb16:	86fb      	strh	r3, [r7, #54]	@ 0x36
			CAN_send_data[6] = temp_converter >> 8;
 800cb18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800cb1c:	121b      	asrs	r3, r3, #8
 800cb1e:	b21b      	sxth	r3, r3
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = temp_converter;
 800cb24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data,
 800cb2a:	f107 0310 	add.w	r3, r7, #16
 800cb2e:	f107 0214 	add.w	r2, r7, #20
 800cb32:	f107 011c 	add.w	r1, r7, #28
 800cb36:	4804      	ldr	r0, [pc, #16]	@ (800cb48 <motor_control_task+0x430>)
 800cb38:	f001 fb90 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800cb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb3e:	3301      	adds	r3, #1
 800cb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb42:	e005      	b.n	800cb50 <motor_control_task+0x438>
 800cb44:	20002220 	.word	0x20002220
 800cb48:	20000914 	.word	0x20000914
 800cb4c:	2000093c 	.word	0x2000093c
		}

		if (enabled_motors & 0xF00000) {
 800cb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d04e      	beq.n	800cbf8 <motor_control_task+0x4e0>
			CAN_tx_message.StdId = 0x2FF;
 800cb5a:	f240 23ff 	movw	r3, #767	@ 0x2ff
 800cb5e:	61fb      	str	r3, [r7, #28]
			CAN_send_data[0] = g_can_motors[0x8 + 12].output >> 8;
 800cb60:	4b2b      	ldr	r3, [pc, #172]	@ (800cc10 <motor_control_task+0x4f8>)
 800cb62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb66:	f9b3 33a0 	ldrsh.w	r3, [r3, #928]	@ 0x3a0
 800cb6a:	121b      	asrs	r3, r3, #8
 800cb6c:	b21b      	sxth	r3, r3
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	753b      	strb	r3, [r7, #20]
			CAN_send_data[1] = g_can_motors[0x8 + 12].output;
 800cb72:	4b27      	ldr	r3, [pc, #156]	@ (800cc10 <motor_control_task+0x4f8>)
 800cb74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb78:	f9b3 33a0 	ldrsh.w	r3, [r3, #928]	@ 0x3a0
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	757b      	strb	r3, [r7, #21]
			CAN_send_data[2] =  g_can_motors[0x9 + 12].output >> 8;
 800cb80:	4b23      	ldr	r3, [pc, #140]	@ (800cc10 <motor_control_task+0x4f8>)
 800cb82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb86:	f9b3 3490 	ldrsh.w	r3, [r3, #1168]	@ 0x490
 800cb8a:	121b      	asrs	r3, r3, #8
 800cb8c:	b21b      	sxth	r3, r3
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	75bb      	strb	r3, [r7, #22]
			CAN_send_data[3] =  g_can_motors[0x9 + 12].output;
 800cb92:	4b1f      	ldr	r3, [pc, #124]	@ (800cc10 <motor_control_task+0x4f8>)
 800cb94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb98:	f9b3 3490 	ldrsh.w	r3, [r3, #1168]	@ 0x490
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	75fb      	strb	r3, [r7, #23]
			CAN_send_data[4] = g_can_motors[0xA + 12].output >> 8;
 800cba0:	4b1b      	ldr	r3, [pc, #108]	@ (800cc10 <motor_control_task+0x4f8>)
 800cba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cba6:	f9b3 3580 	ldrsh.w	r3, [r3, #1408]	@ 0x580
 800cbaa:	121b      	asrs	r3, r3, #8
 800cbac:	b21b      	sxth	r3, r3
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	763b      	strb	r3, [r7, #24]
			CAN_send_data[5] = g_can_motors[0xA + 12].output;
 800cbb2:	4b17      	ldr	r3, [pc, #92]	@ (800cc10 <motor_control_task+0x4f8>)
 800cbb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbb8:	f9b3 3580 	ldrsh.w	r3, [r3, #1408]	@ 0x580
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	767b      	strb	r3, [r7, #25]
			CAN_send_data[6] = g_can_motors[0xB + 12].output >> 8;
 800cbc0:	4b13      	ldr	r3, [pc, #76]	@ (800cc10 <motor_control_task+0x4f8>)
 800cbc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbc6:	f9b3 3670 	ldrsh.w	r3, [r3, #1648]	@ 0x670
 800cbca:	121b      	asrs	r3, r3, #8
 800cbcc:	b21b      	sxth	r3, r3
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	76bb      	strb	r3, [r7, #26]
			CAN_send_data[7] = g_can_motors[0xB + 12].output;
 800cbd2:	4b0f      	ldr	r3, [pc, #60]	@ (800cc10 <motor_control_task+0x4f8>)
 800cbd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbd8:	f9b3 3670 	ldrsh.w	r3, [r3, #1648]	@ 0x670
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	76fb      	strb	r3, [r7, #27]
			HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data,
 800cbe0:	f107 0310 	add.w	r3, r7, #16
 800cbe4:	f107 0214 	add.w	r2, r7, #20
 800cbe8:	f107 011c 	add.w	r1, r7, #28
 800cbec:	4809      	ldr	r0, [pc, #36]	@ (800cc14 <motor_control_task+0x4fc>)
 800cbee:	f001 fb35 	bl	800e25c <HAL_CAN_AddTxMessage>
					&send_mail_box);
			delay++;
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		delay = (delay > 5) ? delay : 5;
 800cbf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbfa:	2b05      	cmp	r3, #5
 800cbfc:	bf38      	it	cc
 800cbfe:	2305      	movcc	r3, #5
 800cc00:	63fb      	str	r3, [r7, #60]	@ 0x3c
//		last_time = get_microseconds();
		vTaskDelayUntil(&start_time, 2);
 800cc02:	f107 030c 	add.w	r3, r7, #12
 800cc06:	2102      	movs	r1, #2
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f00d ffbb 	bl	801ab84 <vTaskDelayUntil>
	while (1) {
 800cc0e:	e5bb      	b.n	800c788 <motor_control_task+0x70>
 800cc10:	20002220 	.word	0x20002220
 800cc14:	2000093c 	.word	0x2000093c

0800cc18 <motors_process_task>:
double rev[24] = {0};
extern float motorOutRatio;



void motors_process_task(void *argument) {
 800cc18:	b5b0      	push	{r4, r5, r7, lr}
 800cc1a:	b08e      	sub	sp, #56	@ 0x38
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	double starttime = 0;
 800cc20:	f04f 0200 	mov.w	r2, #0
 800cc24:	f04f 0300 	mov.w	r3, #0
 800cc28:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double endtime = 0;
 800cc2c:	f04f 0200 	mov.w	r2, #0
 800cc30:	f04f 0300 	mov.w	r3, #0
 800cc34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double dt;
	vTaskDelay(5);
 800cc38:	2005      	movs	r0, #5
 800cc3a:	f00e f823 	bl	801ac84 <vTaskDelay>
	double leftWheel_offset = (double)g_can_motors[LEFT_MOTOR_ID-1].raw_data.angle[0];
 800cc3e:	4b7c      	ldr	r3, [pc, #496]	@ (800ce30 <motors_process_task+0x218>)
 800cc40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7f3 fc6d 	bl	8000524 <__aeabi_i2d>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double rightWheel_offset = (double)g_can_motors[RIGHT_MOTOR_ID-1].raw_data.angle[0];
 800cc52:	4b77      	ldr	r3, [pc, #476]	@ (800ce30 <motors_process_task+0x218>)
 800cc54:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	@ 0xf4
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7f3 fc63 	bl	8000524 <__aeabi_i2d>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	e9c7 2306 	strd	r2, r3, [r7, #24]
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.kp = 5000;
 800cc66:	4b72      	ldr	r3, [pc, #456]	@ (800ce30 <motors_process_task+0x218>)
 800cc68:	4a72      	ldr	r2, [pc, #456]	@ (800ce34 <motors_process_task+0x21c>)
 800cc6a:	639a      	str	r2, [r3, #56]	@ 0x38
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.kp = 5000;
 800cc6c:	4b70      	ldr	r3, [pc, #448]	@ (800ce30 <motors_process_task+0x218>)
 800cc6e:	4a71      	ldr	r2, [pc, #452]	@ (800ce34 <motors_process_task+0x21c>)
 800cc70:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.ki = 0;
 800cc74:	4b6e      	ldr	r3, [pc, #440]	@ (800ce30 <motors_process_task+0x218>)
 800cc76:	f04f 0200 	mov.w	r2, #0
 800cc7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.ki = 0;
 800cc7c:	4b6c      	ldr	r3, [pc, #432]	@ (800ce30 <motors_process_task+0x218>)
 800cc7e:	f04f 0200 	mov.w	r2, #0
 800cc82:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.kd = 0;
 800cc86:	4b6a      	ldr	r3, [pc, #424]	@ (800ce30 <motors_process_task+0x218>)
 800cc88:	f04f 0200 	mov.w	r2, #0
 800cc8c:	641a      	str	r2, [r3, #64]	@ 0x40
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.kd = 0;
 800cc8e:	4b68      	ldr	r3, [pc, #416]	@ (800ce30 <motors_process_task+0x218>)
 800cc90:	f04f 0200 	mov.w	r2, #0
 800cc94:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.max_out = 10000;
 800cc98:	4b65      	ldr	r3, [pc, #404]	@ (800ce30 <motors_process_task+0x218>)
 800cc9a:	4a67      	ldr	r2, [pc, #412]	@ (800ce38 <motors_process_task+0x220>)
 800cc9c:	655a      	str	r2, [r3, #84]	@ 0x54
	g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.max_out = 10000;
 800cc9e:	4b64      	ldr	r3, [pc, #400]	@ (800ce30 <motors_process_task+0x218>)
 800cca0:	4a65      	ldr	r2, [pc, #404]	@ (800ce38 <motors_process_task+0x220>)
 800cca2:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    TickType_t start_time;
    while (1) {
        endtime = get_microseconds();
 800cca6:	f7f5 fa8b 	bl	80021c0 <get_microseconds>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7f3 fc29 	bl	8000504 <__aeabi_ui2d>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        dt = endtime - starttime;
 800ccba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ccbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ccc2:	f7f3 fae1 	bl	8000288 <__aeabi_dsub>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	e9c7 2304 	strd	r2, r3, [r7, #16]
        start_time = xTaskGetTickCount();
 800ccce:	f00e f92d 	bl	801af2c <xTaskGetTickCount>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	60fb      	str	r3, [r7, #12]
        raw_angle_to_rad(g_can_motors); // Pass the array directly
 800ccd6:	4856      	ldr	r0, [pc, #344]	@ (800ce30 <motors_process_task+0x218>)
 800ccd8:	f000 f8ca 	bl	800ce70 <raw_angle_to_rad>
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FR_MOTOR_ID-1], 0.95, -1);
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FL_MOTOR_ID-1], 0, 1);
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BL_MOTOR_ID-1], 4.19, -1);
//        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BR_MOTOR_ID-1], 0, 1);

        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FR_MOTOR_ID-1], PI/2, 1);
 800ccdc:	2101      	movs	r1, #1
 800ccde:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 800ce3c <motors_process_task+0x224>
 800cce2:	4857      	ldr	r0, [pc, #348]	@ (800ce40 <motors_process_task+0x228>)
 800cce4:	f000 f94c 	bl	800cf80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[FL_MOTOR_ID-1], 0.51, 1);
 800cce8:	2101      	movs	r1, #1
 800ccea:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 800ce44 <motors_process_task+0x22c>
 800ccee:	4856      	ldr	r0, [pc, #344]	@ (800ce48 <motors_process_task+0x230>)
 800ccf0:	f000 f946 	bl	800cf80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BL_MOTOR_ID-1], -3.11+PI/2, 1);
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800ce4c <motors_process_task+0x234>
 800ccfa:	4855      	ldr	r0, [pc, #340]	@ (800ce50 <motors_process_task+0x238>)
 800ccfc:	f000 f940 	bl	800cf80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[BR_MOTOR_ID-1], -5.75, 1);
 800cd00:	2101      	movs	r1, #1
 800cd02:	eeb9 0a07 	vmov.f32	s0, #151	@ 0xc0b80000 -5.750
 800cd06:	4853      	ldr	r0, [pc, #332]	@ (800ce54 <motors_process_task+0x23c>)
 800cd08:	f000 f93a 	bl	800cf80 <motors_raw_angle_to_desired_angle_dir>

        motors_raw_angle_to_desired_angle_dir(&g_can_motors[LEFT_MOTOR_ID-1], 0, -1);
 800cd0c:	f04f 31ff 	mov.w	r1, #4294967295
 800cd10:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 800ce58 <motors_process_task+0x240>
 800cd14:	4846      	ldr	r0, [pc, #280]	@ (800ce30 <motors_process_task+0x218>)
 800cd16:	f000 f933 	bl	800cf80 <motors_raw_angle_to_desired_angle_dir>
        motors_raw_angle_to_desired_angle_dir(&g_can_motors[RIGHT_MOTOR_ID-1], 0, 1);
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 800ce58 <motors_process_task+0x240>
 800cd20:	484e      	ldr	r0, [pc, #312]	@ (800ce5c <motors_process_task+0x244>)
 800cd22:	f000 f92d 	bl	800cf80 <motors_raw_angle_to_desired_angle_dir>

        motors_torque_to_current_6020(&g_can_motors[FR_MOTOR_ID-1],0,-1.0);
 800cd26:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 800ce20 <motors_process_task+0x208>
 800cd2a:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 800ce58 <motors_process_task+0x240>
 800cd2e:	4844      	ldr	r0, [pc, #272]	@ (800ce40 <motors_process_task+0x228>)
 800cd30:	f000 f986 	bl	800d040 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&g_can_motors[FL_MOTOR_ID-1],0,-1.0);
 800cd34:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 800ce20 <motors_process_task+0x208>
 800cd38:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800ce58 <motors_process_task+0x240>
 800cd3c:	4842      	ldr	r0, [pc, #264]	@ (800ce48 <motors_process_task+0x230>)
 800cd3e:	f000 f97f 	bl	800d040 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&g_can_motors[BL_MOTOR_ID-1],0,1.0);
 800cd42:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 800ce28 <motors_process_task+0x210>
 800cd46:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 800ce58 <motors_process_task+0x240>
 800cd4a:	4841      	ldr	r0, [pc, #260]	@ (800ce50 <motors_process_task+0x238>)
 800cd4c:	f000 f978 	bl	800d040 <motors_torque_to_current_6020>
        motors_torque_to_current_6020(&g_can_motors[BR_MOTOR_ID-1],0,1.0);
 800cd50:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 800ce28 <motors_process_task+0x210>
 800cd54:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800ce58 <motors_process_task+0x240>
 800cd58:	483e      	ldr	r0, [pc, #248]	@ (800ce54 <motors_process_task+0x23c>)
 800cd5a:	f000 f971 	bl	800d040 <motors_torque_to_current_6020>

        motors_torque_to_current_3508_gearbox(&g_can_motors[RIGHT_MOTOR_ID-1],15,1.0);
 800cd5e:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 800ce28 <motors_process_task+0x210>
 800cd62:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800cd66:	483d      	ldr	r0, [pc, #244]	@ (800ce5c <motors_process_task+0x244>)
 800cd68:	f000 f9f6 	bl	800d158 <motors_torque_to_current_3508_gearbox>
        motors_torque_to_current_3508_gearbox(&g_can_motors[LEFT_MOTOR_ID-1],15,-1.0);
 800cd6c:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 800ce20 <motors_process_task+0x208>
 800cd70:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800cd74:	482e      	ldr	r0, [pc, #184]	@ (800ce30 <motors_process_task+0x218>)
 800cd76:	f000 f9ef 	bl	800d158 <motors_torque_to_current_3508_gearbox>


        speed_pid((double)g_can_motors[LEFT_MOTOR_ID-1].torque ,(double)g_can_motors[LEFT_MOTOR_ID-1].raw_data.rpm/1000, &g_can_motors[LEFT_MOTOR_ID-1].rpm_pid);
 800cd7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ce30 <motors_process_task+0x218>)
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7f3 fbe2 	bl	8000548 <__aeabi_f2d>
 800cd84:	4604      	mov	r4, r0
 800cd86:	460d      	mov	r5, r1
 800cd88:	4b29      	ldr	r3, [pc, #164]	@ (800ce30 <motors_process_task+0x218>)
 800cd8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7f3 fbc8 	bl	8000524 <__aeabi_i2d>
 800cd94:	f04f 0200 	mov.w	r2, #0
 800cd98:	4b31      	ldr	r3, [pc, #196]	@ (800ce60 <motors_process_task+0x248>)
 800cd9a:	f7f3 fd57 	bl	800084c <__aeabi_ddiv>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	ec43 2b17 	vmov	d7, r2, r3
 800cda6:	482f      	ldr	r0, [pc, #188]	@ (800ce64 <motors_process_task+0x24c>)
 800cda8:	eeb0 1a47 	vmov.f32	s2, s14
 800cdac:	eef0 1a67 	vmov.f32	s3, s15
 800cdb0:	ec45 4b10 	vmov	d0, r4, r5
 800cdb4:	f7ff fbda 	bl	800c56c <speed_pid>
        speed_pid((double)g_can_motors[RIGHT_MOTOR_ID-1].torque ,(double)g_can_motors[RIGHT_MOTOR_ID-1].raw_data.rpm/1000, &g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid);
 800cdb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ce30 <motors_process_task+0x218>)
 800cdba:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7f3 fbc2 	bl	8000548 <__aeabi_f2d>
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	460d      	mov	r5, r1
 800cdc8:	4b19      	ldr	r3, [pc, #100]	@ (800ce30 <motors_process_task+0x218>)
 800cdca:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	@ 0xf8
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f3 fba8 	bl	8000524 <__aeabi_i2d>
 800cdd4:	f04f 0200 	mov.w	r2, #0
 800cdd8:	4b21      	ldr	r3, [pc, #132]	@ (800ce60 <motors_process_task+0x248>)
 800cdda:	f7f3 fd37 	bl	800084c <__aeabi_ddiv>
 800cdde:	4602      	mov	r2, r0
 800cde0:	460b      	mov	r3, r1
 800cde2:	ec43 2b17 	vmov	d7, r2, r3
 800cde6:	4820      	ldr	r0, [pc, #128]	@ (800ce68 <motors_process_task+0x250>)
 800cde8:	eeb0 1a47 	vmov.f32	s2, s14
 800cdec:	eef0 1a67 	vmov.f32	s3, s15
 800cdf0:	ec45 4b10 	vmov	d0, r4, r5
 800cdf4:	f7ff fbba 	bl	800c56c <speed_pid>
//        g_can_motors[LEFT_MOTOR_ID-1].output = g_can_motors[LEFT_MOTOR_ID-1].rpm_pid.output;
//        g_can_motors[RIGHT_MOTOR_ID-1].output = g_can_motors[RIGHT_MOTOR_ID-1].rpm_pid.output;
        starttime = get_microseconds();
 800cdf8:	f7f5 f9e2 	bl	80021c0 <get_microseconds>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7f3 fb80 	bl	8000504 <__aeabi_ui2d>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30




        vTaskDelayUntil(&start_time, 5);
 800ce0c:	f107 030c 	add.w	r3, r7, #12
 800ce10:	2105      	movs	r1, #5
 800ce12:	4618      	mov	r0, r3
 800ce14:	f00d feb6 	bl	801ab84 <vTaskDelayUntil>
        endtime = get_microseconds();
 800ce18:	bf00      	nop
 800ce1a:	e744      	b.n	800cca6 <motors_process_task+0x8e>
 800ce1c:	f3af 8000 	nop.w
 800ce20:	00000000 	.word	0x00000000
 800ce24:	bff00000 	.word	0xbff00000
 800ce28:	00000000 	.word	0x00000000
 800ce2c:	3ff00000 	.word	0x3ff00000
 800ce30:	20002220 	.word	0x20002220
 800ce34:	459c4000 	.word	0x459c4000
 800ce38:	461c4000 	.word	0x461c4000
 800ce3c:	3fc90fdb 	.word	0x3fc90fdb
 800ce40:	200025e0 	.word	0x200025e0
 800ce44:	3f028f5c 	.word	0x3f028f5c
 800ce48:	200026d0 	.word	0x200026d0
 800ce4c:	bfc504a0 	.word	0xbfc504a0
 800ce50:	200027c0 	.word	0x200027c0
 800ce54:	200028b0 	.word	0x200028b0
 800ce58:	00000000 	.word	0x00000000
 800ce5c:	20002310 	.word	0x20002310
 800ce60:	408f4000 	.word	0x408f4000
 800ce64:	20002258 	.word	0x20002258
 800ce68:	20002348 	.word	0x20002348
 800ce6c:	00000000 	.word	0x00000000

0800ce70 <raw_angle_to_rad>:
    }
}

void raw_angle_to_rad(motor_data_t motor[]) { // Change the parameter to accept an array
 800ce70:	b590      	push	{r4, r7, lr}
 800ce72:	b087      	sub	sp, #28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++) {
 800ce78:	2300      	movs	r3, #0
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	e06b      	b.n	800cf56 <raw_angle_to_rad+0xe6>
        // Update moving average history
        double continuous_angle = motor[i].raw_data.angle[0] + (-motor[i].angle_data.rev*8192);
 800ce7e:	697a      	ldr	r2, [r7, #20]
 800ce80:	4613      	mov	r3, r2
 800ce82:	011b      	lsls	r3, r3, #4
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	461a      	mov	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ce92:	4619      	mov	r1, r3
 800ce94:	697a      	ldr	r2, [r7, #20]
 800ce96:	4613      	mov	r3, r2
 800ce98:	011b      	lsls	r3, r3, #4
 800ce9a:	1a9b      	subs	r3, r3, r2
 800ce9c:	011b      	lsls	r3, r3, #4
 800ce9e:	461a      	mov	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4413      	add	r3, r2
 800cea4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800cea8:	4613      	mov	r3, r2
 800ceaa:	04db      	lsls	r3, r3, #19
 800ceac:	1a9b      	subs	r3, r3, r2
 800ceae:	035b      	lsls	r3, r3, #13
 800ceb0:	440b      	add	r3, r1
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7f3 fb36 	bl	8000524 <__aeabi_i2d>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor[i].raw_angle_rad = (continuous_angle / 8191.0) * 2 * PI;
 800cec0:	a32a      	add	r3, pc, #168	@ (adr r3, 800cf6c <raw_angle_to_rad+0xfc>)
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ceca:	f7f3 fcbf 	bl	800084c <__aeabi_ddiv>
 800cece:	4602      	mov	r2, r0
 800ced0:	460b      	mov	r3, r1
 800ced2:	4610      	mov	r0, r2
 800ced4:	4619      	mov	r1, r3
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	f7f3 f9d7 	bl	800028c <__adddf3>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4610      	mov	r0, r2
 800cee4:	4619      	mov	r1, r3
 800cee6:	a323      	add	r3, pc, #140	@ (adr r3, 800cf74 <raw_angle_to_rad+0x104>)
 800cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceec:	f7f3 fb84 	bl	80005f8 <__aeabi_dmul>
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4610      	mov	r0, r2
 800cef6:	4619      	mov	r1, r3
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	4613      	mov	r3, r2
 800cefc:	011b      	lsls	r3, r3, #4
 800cefe:	1a9b      	subs	r3, r3, r2
 800cf00:	011b      	lsls	r3, r3, #4
 800cf02:	461a      	mov	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	189c      	adds	r4, r3, r2
 800cf08:	f7f3 fe6e 	bl	8000be8 <__aeabi_d2f>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	6123      	str	r3, [r4, #16]
        motor[i].raw_angle_deg = (continuous_angle / 8191.0) * 360;
 800cf10:	a316      	add	r3, pc, #88	@ (adr r3, 800cf6c <raw_angle_to_rad+0xfc>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf1a:	f7f3 fc97 	bl	800084c <__aeabi_ddiv>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4610      	mov	r0, r2
 800cf24:	4619      	mov	r1, r3
 800cf26:	f04f 0200 	mov.w	r2, #0
 800cf2a:	4b0f      	ldr	r3, [pc, #60]	@ (800cf68 <raw_angle_to_rad+0xf8>)
 800cf2c:	f7f3 fb64 	bl	80005f8 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4610      	mov	r0, r2
 800cf36:	4619      	mov	r1, r3
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	011b      	lsls	r3, r3, #4
 800cf3e:	1a9b      	subs	r3, r3, r2
 800cf40:	011b      	lsls	r3, r3, #4
 800cf42:	461a      	mov	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	189c      	adds	r4, r3, r2
 800cf48:	f7f3 fe4e 	bl	8000be8 <__aeabi_d2f>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	6163      	str	r3, [r4, #20]
    for (int i = 0; i < 24; i++) {
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	3301      	adds	r3, #1
 800cf54:	617b      	str	r3, [r7, #20]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2b17      	cmp	r3, #23
 800cf5a:	dd90      	ble.n	800ce7e <raw_angle_to_rad+0xe>
    }
}
 800cf5c:	bf00      	nop
 800cf5e:	bf00      	nop
 800cf60:	371c      	adds	r7, #28
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd90      	pop	{r4, r7, pc}
 800cf66:	bf00      	nop
 800cf68:	40768000 	.word	0x40768000
 800cf6c:	00000000 	.word	0x00000000
 800cf70:	40bfff00 	.word	0x40bfff00
 800cf74:	60000000 	.word	0x60000000
 800cf78:	400921fb 	.word	0x400921fb
 800cf7c:	00000000 	.word	0x00000000

0800cf80 <motors_raw_angle_to_desired_angle_dir>:

void motors_raw_angle_to_desired_angle_dir(motor_data_t *motor, float offset, int dir) {
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	ed87 0a02 	vstr	s0, [r7, #8]
 800cf8c:	6079      	str	r1, [r7, #4]
    if (dir == -1) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf94:	d11b      	bne.n	800cfce <motors_raw_angle_to_desired_angle_dir+0x4e>
        motor->angle_rad = -motor->raw_angle_rad + offset;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	edd3 7a04 	vldr	s15, [r3, #16]
 800cf9c:	ed97 7a02 	vldr	s14, [r7, #8]
 800cfa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	edc3 7a06 	vstr	s15, [r3, #24]
        motor->speed = -motor->raw_data.rpm * 0.10472;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cfb0:	425b      	negs	r3, r3
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f3 fab6 	bl	8000524 <__aeabi_i2d>
 800cfb8:	a31d      	add	r3, pc, #116	@ (adr r3, 800d030 <motors_raw_angle_to_desired_angle_dir+0xb0>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 fb1b 	bl	80005f8 <__aeabi_dmul>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	68f9      	ldr	r1, [r7, #12]
 800cfc8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800cfcc:	e019      	b.n	800d002 <motors_raw_angle_to_desired_angle_dir+0x82>
    } else {
        motor->angle_rad = motor->raw_angle_rad + offset;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	ed93 7a04 	vldr	s14, [r3, #16]
 800cfd4:	edd7 7a02 	vldr	s15, [r7, #8]
 800cfd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	edc3 7a06 	vstr	s15, [r3, #24]
        motor->speed = motor->raw_data.rpm * 0.10472;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7f3 fa9b 	bl	8000524 <__aeabi_i2d>
 800cfee:	a310      	add	r3, pc, #64	@ (adr r3, 800d030 <motors_raw_angle_to_desired_angle_dir+0xb0>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	f7f3 fb00 	bl	80005f8 <__aeabi_dmul>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	68f9      	ldr	r1, [r7, #12]
 800cffe:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
    motor->angle_deg = motor->angle_rad * (180.0 / PI); // Update the degree value as well
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	4618      	mov	r0, r3
 800d008:	f7f3 fa9e 	bl	8000548 <__aeabi_f2d>
 800d00c:	a30a      	add	r3, pc, #40	@ (adr r3, 800d038 <motors_raw_angle_to_desired_angle_dir+0xb8>)
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	f7f3 faf1 	bl	80005f8 <__aeabi_dmul>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	4610      	mov	r0, r2
 800d01c:	4619      	mov	r1, r3
 800d01e:	f7f3 fde3 	bl	8000be8 <__aeabi_d2f>
 800d022:	4602      	mov	r2, r0
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	61da      	str	r2, [r3, #28]

}
 800d028:	bf00      	nop
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	0f3cb3e5 	.word	0x0f3cb3e5
 800d034:	3fbaceee 	.word	0x3fbaceee
 800d038:	0d03cf26 	.word	0x0d03cf26
 800d03c:	404ca5dc 	.word	0x404ca5dc

0800d040 <motors_torque_to_current_6020>:

void motors_torque_to_current_6020(motor_data_t *motor, float deadzone,double dir) {
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	ed87 0a02 	vstr	s0, [r7, #8]
 800d04c:	ed87 1b00 	vstr	d1, [r7]
	double current = 0;
 800d050:	f04f 0200 	mov.w	r2, #0
 800d054:	f04f 0300 	mov.w	r3, #0
 800d058:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (motor->torque > 0){
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06a:	dd17      	ble.n	800d09c <motors_torque_to_current_6020+0x5c>
		current = 1.8 * motor->torque + 0.2;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d070:	4618      	mov	r0, r3
 800d072:	f7f3 fa69 	bl	8000548 <__aeabi_f2d>
 800d076:	a333      	add	r3, pc, #204	@ (adr r3, 800d144 <motors_torque_to_current_6020+0x104>)
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	f7f3 fabc 	bl	80005f8 <__aeabi_dmul>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4610      	mov	r0, r2
 800d086:	4619      	mov	r1, r3
 800d088:	a330      	add	r3, pc, #192	@ (adr r3, 800d14c <motors_torque_to_current_6020+0x10c>)
 800d08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08e:	f7f3 f8fd 	bl	800028c <__adddf3>
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d09a:	e025      	b.n	800d0e8 <motors_torque_to_current_6020+0xa8>
	} else if(motor->torque < 0){
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d0a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0aa:	d517      	bpl.n	800d0dc <motors_torque_to_current_6020+0x9c>
		current = 1.8 * motor->torque - 0.2;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f3 fa49 	bl	8000548 <__aeabi_f2d>
 800d0b6:	a323      	add	r3, pc, #140	@ (adr r3, 800d144 <motors_torque_to_current_6020+0x104>)
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	f7f3 fa9c 	bl	80005f8 <__aeabi_dmul>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	a320      	add	r3, pc, #128	@ (adr r3, 800d14c <motors_torque_to_current_6020+0x10c>)
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	f7f3 f8db 	bl	8000288 <__aeabi_dsub>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d0da:	e005      	b.n	800d0e8 <motors_torque_to_current_6020+0xa8>
	} else{
		current = 0;
 800d0dc:	f04f 0200 	mov.w	r2, #0
 800d0e0:	f04f 0300 	mov.w	r3, #0
 800d0e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	motor->output = ((current * dir)/3.0)*16385.0;
 800d0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d0f0:	f7f3 fa82 	bl	80005f8 <__aeabi_dmul>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f04f 0200 	mov.w	r2, #0
 800d100:	4b0f      	ldr	r3, [pc, #60]	@ (800d140 <motors_torque_to_current_6020+0x100>)
 800d102:	f7f3 fba3 	bl	800084c <__aeabi_ddiv>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4610      	mov	r0, r2
 800d10c:	4619      	mov	r1, r3
 800d10e:	a30a      	add	r3, pc, #40	@ (adr r3, 800d138 <motors_torque_to_current_6020+0xf8>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 fa70 	bl	80005f8 <__aeabi_dmul>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	4610      	mov	r0, r2
 800d11e:	4619      	mov	r1, r3
 800d120:	f7f3 fd1a 	bl	8000b58 <__aeabi_d2iz>
 800d124:	4603      	mov	r3, r0
 800d126:	b21a      	sxth	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
}
 800d12e:	bf00      	nop
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	00000000 	.word	0x00000000
 800d13c:	40d00040 	.word	0x40d00040
 800d140:	40080000 	.word	0x40080000
 800d144:	cccccccd 	.word	0xcccccccd
 800d148:	3ffccccc 	.word	0x3ffccccc
 800d14c:	9999999a 	.word	0x9999999a
 800d150:	3fc99999 	.word	0x3fc99999
 800d154:	00000000 	.word	0x00000000

0800d158 <motors_torque_to_current_3508_gearbox>:
void motors_torque_to_current_3508_gearbox(motor_data_t *motor, float maxCurrent,double dir) {
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	ed87 0a02 	vstr	s0, [r7, #8]
 800d164:	ed87 1b00 	vstr	d1, [r7]
	double current = 0;
 800d168:	f04f 0200 	mov.w	r2, #0
 800d16c:	f04f 0300 	mov.w	r3, #0
 800d170:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (motor->torque > 0){
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d17a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d182:	dd20      	ble.n	800d1c6 <motors_torque_to_current_3508_gearbox+0x6e>
		current = (motor->torque / 4.5) * 20 + 0.08;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f3 f9dd 	bl	8000548 <__aeabi_f2d>
 800d18e:	f04f 0200 	mov.w	r2, #0
 800d192:	4b55      	ldr	r3, [pc, #340]	@ (800d2e8 <motors_torque_to_current_3508_gearbox+0x190>)
 800d194:	f7f3 fb5a 	bl	800084c <__aeabi_ddiv>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4610      	mov	r0, r2
 800d19e:	4619      	mov	r1, r3
 800d1a0:	f04f 0200 	mov.w	r2, #0
 800d1a4:	4b51      	ldr	r3, [pc, #324]	@ (800d2ec <motors_torque_to_current_3508_gearbox+0x194>)
 800d1a6:	f7f3 fa27 	bl	80005f8 <__aeabi_dmul>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	a349      	add	r3, pc, #292	@ (adr r3, 800d2d8 <motors_torque_to_current_3508_gearbox+0x180>)
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f7f3 f868 	bl	800028c <__adddf3>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d1c4:	e02e      	b.n	800d224 <motors_torque_to_current_3508_gearbox+0xcc>
	} else if(motor->torque < 0){
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800d1cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d4:	d520      	bpl.n	800d218 <motors_torque_to_current_3508_gearbox+0xc0>
		current = (motor->torque / 4.5) * 20 - 0.08;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f3 f9b4 	bl	8000548 <__aeabi_f2d>
 800d1e0:	f04f 0200 	mov.w	r2, #0
 800d1e4:	4b40      	ldr	r3, [pc, #256]	@ (800d2e8 <motors_torque_to_current_3508_gearbox+0x190>)
 800d1e6:	f7f3 fb31 	bl	800084c <__aeabi_ddiv>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	4b3d      	ldr	r3, [pc, #244]	@ (800d2ec <motors_torque_to_current_3508_gearbox+0x194>)
 800d1f8:	f7f3 f9fe 	bl	80005f8 <__aeabi_dmul>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4610      	mov	r0, r2
 800d202:	4619      	mov	r1, r3
 800d204:	a334      	add	r3, pc, #208	@ (adr r3, 800d2d8 <motors_torque_to_current_3508_gearbox+0x180>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	f7f3 f83d 	bl	8000288 <__aeabi_dsub>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d216:	e005      	b.n	800d224 <motors_torque_to_current_3508_gearbox+0xcc>
	} else{
		current = 0;
 800d218:	f04f 0200 	mov.w	r2, #0
 800d21c:	f04f 0300 	mov.w	r3, #0
 800d220:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	if (current > maxCurrent){
 800d224:	68b8      	ldr	r0, [r7, #8]
 800d226:	f7f3 f98f 	bl	8000548 <__aeabi_f2d>
 800d22a:	4602      	mov	r2, r0
 800d22c:	460b      	mov	r3, r1
 800d22e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d232:	f7f3 fc71 	bl	8000b18 <__aeabi_dcmpgt>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d007      	beq.n	800d24c <motors_torque_to_current_3508_gearbox+0xf4>
		current = maxCurrent;
 800d23c:	68b8      	ldr	r0, [r7, #8]
 800d23e:	f7f3 f983 	bl	8000548 <__aeabi_f2d>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d24a:	e01e      	b.n	800d28a <motors_torque_to_current_3508_gearbox+0x132>
	} else if(current < -maxCurrent){
 800d24c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d250:	eef1 7a67 	vneg.f32	s15, s15
 800d254:	ee17 3a90 	vmov	r3, s15
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f3 f975 	bl	8000548 <__aeabi_f2d>
 800d25e:	4602      	mov	r2, r0
 800d260:	460b      	mov	r3, r1
 800d262:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d266:	f7f3 fc39 	bl	8000adc <__aeabi_dcmplt>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00c      	beq.n	800d28a <motors_torque_to_current_3508_gearbox+0x132>
		current = -maxCurrent;
 800d270:	edd7 7a02 	vldr	s15, [r7, #8]
 800d274:	eef1 7a67 	vneg.f32	s15, s15
 800d278:	ee17 3a90 	vmov	r3, s15
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7f3 f963 	bl	8000548 <__aeabi_f2d>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
	motor->output = ((current * dir)/20.0)*16385.0;
 800d28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d28e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d292:	f7f3 f9b1 	bl	80005f8 <__aeabi_dmul>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4610      	mov	r0, r2
 800d29c:	4619      	mov	r1, r3
 800d29e:	f04f 0200 	mov.w	r2, #0
 800d2a2:	4b12      	ldr	r3, [pc, #72]	@ (800d2ec <motors_torque_to_current_3508_gearbox+0x194>)
 800d2a4:	f7f3 fad2 	bl	800084c <__aeabi_ddiv>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	a30b      	add	r3, pc, #44	@ (adr r3, 800d2e0 <motors_torque_to_current_3508_gearbox+0x188>)
 800d2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b6:	f7f3 f99f 	bl	80005f8 <__aeabi_dmul>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	4610      	mov	r0, r2
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	f7f3 fc49 	bl	8000b58 <__aeabi_d2iz>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	b21a      	sxth	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
}
 800d2d0:	bf00      	nop
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	47ae147b 	.word	0x47ae147b
 800d2dc:	3fb47ae1 	.word	0x3fb47ae1
 800d2e0:	00000000 	.word	0x00000000
 800d2e4:	40d00040 	.word	0x40d00040
 800d2e8:	40120000 	.word	0x40120000
 800d2ec:	40340000 	.word	0x40340000

0800d2f0 <referee_processing_task>:
uint32_t ref_mag_data_txno = 0;
uint8_t g_ref_tx_seq = 0;

queue_t referee_uart_q;

void referee_processing_task(void *argument) {
 800d2f0:	b5b0      	push	{r4, r5, r7, lr}
 800d2f2:	b088      	sub	sp, #32
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
	g_referee_limiters.robot_level = 0;
 800d2f8:	4ba3      	ldr	r3, [pc, #652]	@ (800d588 <referee_processing_task+0x298>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	731a      	strb	r2, [r3, #12]
	uint8_t ref_buffer[2];
	ref_processing_status_t proc_status;
	g_referee_limiters.feeding_speed = LV1_FEEDER;
 800d2fe:	4ba2      	ldr	r3, [pc, #648]	@ (800d588 <referee_processing_task+0x298>)
 800d300:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800d304:	801a      	strh	r2, [r3, #0]
	g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 800d306:	4ba0      	ldr	r3, [pc, #640]	@ (800d588 <referee_processing_task+0x298>)
 800d308:	2213      	movs	r2, #19
 800d30a:	805a      	strh	r2, [r3, #2]
//	g_referee_limiters.wheel_power_limit = LV1_POWER;
	g_referee_limiters.robot_level = 1;
 800d30c:	4b9e      	ldr	r3, [pc, #632]	@ (800d588 <referee_processing_task+0x298>)
 800d30e:	2201      	movs	r2, #1
 800d310:	731a      	strb	r2, [r3, #12]
	status_led(7, on_led);
 800d312:	2100      	movs	r1, #0
 800d314:	2007      	movs	r0, #7
 800d316:	f7f4 fe4f 	bl	8001fb8 <status_led>
	status_led(8, off_led);
 800d31a:	2101      	movs	r1, #1
 800d31c:	2008      	movs	r0, #8
 800d31e:	f7f4 fe4b 	bl	8001fb8 <status_led>
	ref_robot_data.robot_id = 0;
 800d322:	4b9a      	ldr	r3, [pc, #616]	@ (800d58c <referee_processing_task+0x29c>)
 800d324:	2200      	movs	r2, #0
 800d326:	701a      	strb	r2, [r3, #0]
	ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800d328:	f107 0108 	add.w	r1, r7, #8
 800d32c:	4b98      	ldr	r3, [pc, #608]	@ (800d590 <referee_processing_task+0x2a0>)
 800d32e:	2202      	movs	r2, #2
 800d330:	4898      	ldr	r0, [pc, #608]	@ (800d594 <referee_processing_task+0x2a4>)
 800d332:	f7f5 fbff 	bl	8002b34 <ref_usart_start>
	while (1) {

		uint8_t has_data = ulTaskNotifyTake(pdTRUE, 1000);
 800d336:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d33a:	2001      	movs	r0, #1
 800d33c:	f00e fa72 	bl	801b824 <ulTaskNotifyTake>
 800d340:	4603      	mov	r3, r0
 800d342:	75fb      	strb	r3, [r7, #23]
		status_led(5, on_led);
 800d344:	2100      	movs	r1, #0
 800d346:	2005      	movs	r0, #5
 800d348:	f7f4 fe36 	bl	8001fb8 <status_led>
		if (queue_get_size(&referee_uart_q) > 7) {
 800d34c:	4890      	ldr	r0, [pc, #576]	@ (800d590 <referee_processing_task+0x2a0>)
 800d34e:	f7f4 ff94 	bl	800227a <queue_get_size>
 800d352:	4603      	mov	r3, r0
 800d354:	2b07      	cmp	r3, #7
 800d356:	f240 80b8 	bls.w	800d4ca <referee_processing_task+0x1da>
			while (queue_get_size(&referee_uart_q) > 7) {
 800d35a:	e0ad      	b.n	800d4b8 <referee_processing_task+0x1c8>
				proc_status = ref_process_data(&referee_uart_q, &g_ref_msg_buffer);
 800d35c:	498e      	ldr	r1, [pc, #568]	@ (800d598 <referee_processing_task+0x2a8>)
 800d35e:	488c      	ldr	r0, [pc, #560]	@ (800d590 <referee_processing_task+0x2a0>)
 800d360:	f7f5 f8f8 	bl	8002554 <ref_process_data>
 800d364:	4603      	mov	r3, r0
 800d366:	75bb      	strb	r3, [r7, #22]
				if (proc_status == PROCESS_SUCCESS) {
 800d368:	7dbb      	ldrb	r3, [r7, #22]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f040 809f 	bne.w	800d4ae <referee_processing_task+0x1be>
					switch (g_ref_msg_buffer.cmd_id) {
 800d370:	4b89      	ldr	r3, [pc, #548]	@ (800d598 <referee_processing_task+0x2a8>)
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800d378:	f300 809d 	bgt.w	800d4b6 <referee_processing_task+0x1c6>
 800d37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d380:	dc04      	bgt.n	800d38c <referee_processing_task+0x9c>
 800d382:	2b01      	cmp	r3, #1
 800d384:	d029      	beq.n	800d3da <referee_processing_task+0xea>
 800d386:	2b03      	cmp	r3, #3
 800d388:	d071      	beq.n	800d46e <referee_processing_task+0x17e>
								sizeof(ref_magazine_data_t));
						ref_mag_data_txno++;
						//add in the memcpys here
						break;
					default:
						break;
 800d38a:	e094      	b.n	800d4b6 <referee_processing_task+0x1c6>
					switch (g_ref_msg_buffer.cmd_id) {
 800d38c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800d390:	2b07      	cmp	r3, #7
 800d392:	f200 8090 	bhi.w	800d4b6 <referee_processing_task+0x1c6>
 800d396:	a201      	add	r2, pc, #4	@ (adr r2, 800d39c <referee_processing_task+0xac>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d3f5 	.word	0x0800d3f5
 800d3a0:	0800d43d 	.word	0x0800d43d
 800d3a4:	0800d423 	.word	0x0800d423
 800d3a8:	0800d4b7 	.word	0x0800d4b7
 800d3ac:	0800d4b7 	.word	0x0800d4b7
 800d3b0:	0800d45b 	.word	0x0800d45b
 800d3b4:	0800d3bd 	.word	0x0800d3bd
 800d3b8:	0800d495 	.word	0x0800d495
						memcpy(&ref_shoot_data, &g_ref_msg_buffer.data,
 800d3bc:	4a77      	ldr	r2, [pc, #476]	@ (800d59c <referee_processing_task+0x2ac>)
 800d3be:	4b76      	ldr	r3, [pc, #472]	@ (800d598 <referee_processing_task+0x2a8>)
 800d3c0:	3302      	adds	r3, #2
 800d3c2:	6818      	ldr	r0, [r3, #0]
 800d3c4:	6010      	str	r0, [r2, #0]
 800d3c6:	8899      	ldrh	r1, [r3, #4]
 800d3c8:	799b      	ldrb	r3, [r3, #6]
 800d3ca:	8091      	strh	r1, [r2, #4]
 800d3cc:	7193      	strb	r3, [r2, #6]
						ref_shoot_data_txno++;
 800d3ce:	4b74      	ldr	r3, [pc, #464]	@ (800d5a0 <referee_processing_task+0x2b0>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	4a72      	ldr	r2, [pc, #456]	@ (800d5a0 <referee_processing_task+0x2b0>)
 800d3d6:	6013      	str	r3, [r2, #0]
						break;
 800d3d8:	e06e      	b.n	800d4b8 <referee_processing_task+0x1c8>
							memcpy(&ref_game_state, &g_ref_msg_buffer.data,
 800d3da:	4a72      	ldr	r2, [pc, #456]	@ (800d5a4 <referee_processing_task+0x2b4>)
 800d3dc:	4b6e      	ldr	r3, [pc, #440]	@ (800d598 <referee_processing_task+0x2a8>)
 800d3de:	3302      	adds	r3, #2
 800d3e0:	8819      	ldrh	r1, [r3, #0]
 800d3e2:	789b      	ldrb	r3, [r3, #2]
 800d3e4:	8011      	strh	r1, [r2, #0]
 800d3e6:	7093      	strb	r3, [r2, #2]
							ref_game_state_txno++;
 800d3e8:	4b6f      	ldr	r3, [pc, #444]	@ (800d5a8 <referee_processing_task+0x2b8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	4a6e      	ldr	r2, [pc, #440]	@ (800d5a8 <referee_processing_task+0x2b8>)
 800d3f0:	6013      	str	r3, [r2, #0]
							break;
 800d3f2:	e061      	b.n	800d4b8 <referee_processing_task+0x1c8>
						memcpy(&ref_robot_data, &g_ref_msg_buffer.data,
 800d3f4:	4a65      	ldr	r2, [pc, #404]	@ (800d58c <referee_processing_task+0x29c>)
 800d3f6:	4b68      	ldr	r3, [pc, #416]	@ (800d598 <referee_processing_task+0x2a8>)
 800d3f8:	4614      	mov	r4, r2
 800d3fa:	1c9d      	adds	r5, r3, #2
 800d3fc:	6828      	ldr	r0, [r5, #0]
 800d3fe:	6869      	ldr	r1, [r5, #4]
 800d400:	68aa      	ldr	r2, [r5, #8]
 800d402:	68eb      	ldr	r3, [r5, #12]
 800d404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d406:	6928      	ldr	r0, [r5, #16]
 800d408:	6969      	ldr	r1, [r5, #20]
 800d40a:	c403      	stmia	r4!, {r0, r1}
 800d40c:	8b2b      	ldrh	r3, [r5, #24]
 800d40e:	7eaa      	ldrb	r2, [r5, #26]
 800d410:	8023      	strh	r3, [r4, #0]
 800d412:	4613      	mov	r3, r2
 800d414:	70a3      	strb	r3, [r4, #2]
						ref_robot_data_txno++;
 800d416:	4b65      	ldr	r3, [pc, #404]	@ (800d5ac <referee_processing_task+0x2bc>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	4a63      	ldr	r2, [pc, #396]	@ (800d5ac <referee_processing_task+0x2bc>)
 800d41e:	6013      	str	r3, [r2, #0]
						break;
 800d420:	e04a      	b.n	800d4b8 <referee_processing_task+0x1c8>
						memcpy(&ref_robot_pos, &g_ref_msg_buffer.data,
 800d422:	4b63      	ldr	r3, [pc, #396]	@ (800d5b0 <referee_processing_task+0x2c0>)
 800d424:	4a5c      	ldr	r2, [pc, #368]	@ (800d598 <referee_processing_task+0x2a8>)
 800d426:	3202      	adds	r2, #2
 800d428:	6810      	ldr	r0, [r2, #0]
 800d42a:	6851      	ldr	r1, [r2, #4]
 800d42c:	6892      	ldr	r2, [r2, #8]
 800d42e:	c307      	stmia	r3!, {r0, r1, r2}
						ref_robot_pos_txno++;
 800d430:	4b60      	ldr	r3, [pc, #384]	@ (800d5b4 <referee_processing_task+0x2c4>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3301      	adds	r3, #1
 800d436:	4a5f      	ldr	r2, [pc, #380]	@ (800d5b4 <referee_processing_task+0x2c4>)
 800d438:	6013      	str	r3, [r2, #0]
						break;
 800d43a:	e03d      	b.n	800d4b8 <referee_processing_task+0x1c8>
						memcpy(&ref_power_data, &g_ref_msg_buffer.data,
 800d43c:	4a5e      	ldr	r2, [pc, #376]	@ (800d5b8 <referee_processing_task+0x2c8>)
 800d43e:	4b56      	ldr	r3, [pc, #344]	@ (800d598 <referee_processing_task+0x2a8>)
 800d440:	4614      	mov	r4, r2
 800d442:	3302      	adds	r3, #2
 800d444:	6818      	ldr	r0, [r3, #0]
 800d446:	6859      	ldr	r1, [r3, #4]
 800d448:	689a      	ldr	r2, [r3, #8]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
						ref_power_data_txno++;
 800d44e:	4b5b      	ldr	r3, [pc, #364]	@ (800d5bc <referee_processing_task+0x2cc>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3301      	adds	r3, #1
 800d454:	4a59      	ldr	r2, [pc, #356]	@ (800d5bc <referee_processing_task+0x2cc>)
 800d456:	6013      	str	r3, [r2, #0]
						break;
 800d458:	e02e      	b.n	800d4b8 <referee_processing_task+0x1c8>
						memcpy(&ref_dmg_data, &g_ref_msg_buffer.data,
 800d45a:	4b4f      	ldr	r3, [pc, #316]	@ (800d598 <referee_processing_task+0x2a8>)
 800d45c:	789a      	ldrb	r2, [r3, #2]
 800d45e:	4b58      	ldr	r3, [pc, #352]	@ (800d5c0 <referee_processing_task+0x2d0>)
 800d460:	701a      	strb	r2, [r3, #0]
						ref_dmg_data_txno++;
 800d462:	4b58      	ldr	r3, [pc, #352]	@ (800d5c4 <referee_processing_task+0x2d4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3301      	adds	r3, #1
 800d468:	4a56      	ldr	r2, [pc, #344]	@ (800d5c4 <referee_processing_task+0x2d4>)
 800d46a:	6013      	str	r3, [r2, #0]
						break;
 800d46c:	e024      	b.n	800d4b8 <referee_processing_task+0x1c8>
						memcpy(&ref_robot_hp, &g_ref_msg_buffer.data,
 800d46e:	4a56      	ldr	r2, [pc, #344]	@ (800d5c8 <referee_processing_task+0x2d8>)
 800d470:	4b49      	ldr	r3, [pc, #292]	@ (800d598 <referee_processing_task+0x2a8>)
 800d472:	4614      	mov	r4, r2
 800d474:	1c9d      	adds	r5, r3, #2
 800d476:	6828      	ldr	r0, [r5, #0]
 800d478:	6869      	ldr	r1, [r5, #4]
 800d47a:	68aa      	ldr	r2, [r5, #8]
 800d47c:	68eb      	ldr	r3, [r5, #12]
 800d47e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d480:	6928      	ldr	r0, [r5, #16]
 800d482:	6969      	ldr	r1, [r5, #20]
 800d484:	69aa      	ldr	r2, [r5, #24]
 800d486:	c407      	stmia	r4!, {r0, r1, r2}
						ref_robot_hp_txno++;
 800d488:	4b50      	ldr	r3, [pc, #320]	@ (800d5cc <referee_processing_task+0x2dc>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3301      	adds	r3, #1
 800d48e:	4a4f      	ldr	r2, [pc, #316]	@ (800d5cc <referee_processing_task+0x2dc>)
 800d490:	6013      	str	r3, [r2, #0]
						break;
 800d492:	e011      	b.n	800d4b8 <referee_processing_task+0x1c8>
						memcpy(&ref_mag_data, &g_ref_msg_buffer.data,
 800d494:	4a4e      	ldr	r2, [pc, #312]	@ (800d5d0 <referee_processing_task+0x2e0>)
 800d496:	4b40      	ldr	r3, [pc, #256]	@ (800d598 <referee_processing_task+0x2a8>)
 800d498:	3302      	adds	r3, #2
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	6010      	str	r0, [r2, #0]
 800d49e:	889b      	ldrh	r3, [r3, #4]
 800d4a0:	8093      	strh	r3, [r2, #4]
						ref_mag_data_txno++;
 800d4a2:	4b4c      	ldr	r3, [pc, #304]	@ (800d5d4 <referee_processing_task+0x2e4>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	4a4a      	ldr	r2, [pc, #296]	@ (800d5d4 <referee_processing_task+0x2e4>)
 800d4aa:	6013      	str	r3, [r2, #0]
						break;
 800d4ac:	e004      	b.n	800d4b8 <referee_processing_task+0x1c8>
					}
//						if (msg_buffer.cmd_id == REF_ROBOT_SHOOT_DATA_CMD_ID){
//							xQueueSend(uart_data_queue, &msg_buffer, 0);
//						}
				} else if (proc_status == INSUFFICIENT_DATA) {
 800d4ae:	7dbb      	ldrb	r3, [r7, #22]
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d009      	beq.n	800d4c8 <referee_processing_task+0x1d8>
 800d4b4:	e000      	b.n	800d4b8 <referee_processing_task+0x1c8>
						break;
 800d4b6:	bf00      	nop
			while (queue_get_size(&referee_uart_q) > 7) {
 800d4b8:	4835      	ldr	r0, [pc, #212]	@ (800d590 <referee_processing_task+0x2a0>)
 800d4ba:	f7f4 fede 	bl	800227a <queue_get_size>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b07      	cmp	r3, #7
 800d4c2:	f63f af4b 	bhi.w	800d35c <referee_processing_task+0x6c>
 800d4c6:	e000      	b.n	800d4ca <referee_processing_task+0x1da>
					break;
 800d4c8:	bf00      	nop
				}
			}
		}
		if (!has_data){
 800d4ca:	7dfb      	ldrb	r3, [r7, #23]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10e      	bne.n	800d4ee <referee_processing_task+0x1fe>
		    __HAL_DMA_ENABLE(&hdma_usart6_rx);
 800d4d0:	4b41      	ldr	r3, [pc, #260]	@ (800d5d8 <referee_processing_task+0x2e8>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	4b40      	ldr	r3, [pc, #256]	@ (800d5d8 <referee_processing_task+0x2e8>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f042 0201 	orr.w	r2, r2, #1
 800d4de:	601a      	str	r2, [r3, #0]
			ref_usart_start(&REFEREE_UART, ref_buffer, 2, &referee_uart_q);
 800d4e0:	f107 0108 	add.w	r1, r7, #8
 800d4e4:	4b2a      	ldr	r3, [pc, #168]	@ (800d590 <referee_processing_task+0x2a0>)
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	482a      	ldr	r0, [pc, #168]	@ (800d594 <referee_processing_task+0x2a4>)
 800d4ea:	f7f5 fb23 	bl	8002b34 <ref_usart_start>

		}

		status_led(5, off_led);
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	2005      	movs	r0, #5
 800d4f2:	f7f4 fd61 	bl	8001fb8 <status_led>


		status_led(5, on_led);
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	2005      	movs	r0, #5
 800d4fa:	f7f4 fd5d 	bl	8001fb8 <status_led>
		if (ref_robot_data.robot_level == 1) {
 800d4fe:	4b23      	ldr	r3, [pc, #140]	@ (800d58c <referee_processing_task+0x29c>)
 800d500:	785b      	ldrb	r3, [r3, #1]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d112      	bne.n	800d52c <referee_processing_task+0x23c>
			g_referee_limiters.feeding_speed = LV1_FEEDER;
 800d506:	4b20      	ldr	r3, [pc, #128]	@ (800d588 <referee_processing_task+0x298>)
 800d508:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800d50c:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 800d50e:	4b1e      	ldr	r3, [pc, #120]	@ (800d588 <referee_processing_task+0x298>)
 800d510:	2213      	movs	r2, #19
 800d512:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 1;
 800d514:	4b1c      	ldr	r3, [pc, #112]	@ (800d588 <referee_processing_task+0x298>)
 800d516:	2201      	movs	r2, #1
 800d518:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800d51a:	2100      	movs	r1, #0
 800d51c:	2007      	movs	r0, #7
 800d51e:	f7f4 fd4b 	bl	8001fb8 <status_led>
			status_led(8, off_led);
 800d522:	2101      	movs	r1, #1
 800d524:	2008      	movs	r0, #8
 800d526:	f7f4 fd47 	bl	8001fb8 <status_led>
 800d52a:	e05e      	b.n	800d5ea <referee_processing_task+0x2fa>
		} else if (ref_robot_data.robot_level == 2) {
 800d52c:	4b17      	ldr	r3, [pc, #92]	@ (800d58c <referee_processing_task+0x29c>)
 800d52e:	785b      	ldrb	r3, [r3, #1]
 800d530:	2b02      	cmp	r3, #2
 800d532:	d112      	bne.n	800d55a <referee_processing_task+0x26a>
			g_referee_limiters.feeding_speed = LV2_FEEDER;
 800d534:	4b14      	ldr	r3, [pc, #80]	@ (800d588 <referee_processing_task+0x298>)
 800d536:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800d53a:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV2_PROJECTILE;
 800d53c:	4b12      	ldr	r3, [pc, #72]	@ (800d588 <referee_processing_task+0x298>)
 800d53e:	2213      	movs	r2, #19
 800d540:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 2;
 800d542:	4b11      	ldr	r3, [pc, #68]	@ (800d588 <referee_processing_task+0x298>)
 800d544:	2202      	movs	r2, #2
 800d546:	731a      	strb	r2, [r3, #12]
			status_led(7, off_led);
 800d548:	2101      	movs	r1, #1
 800d54a:	2007      	movs	r0, #7
 800d54c:	f7f4 fd34 	bl	8001fb8 <status_led>
			status_led(8, on_led);
 800d550:	2100      	movs	r1, #0
 800d552:	2008      	movs	r0, #8
 800d554:	f7f4 fd30 	bl	8001fb8 <status_led>
 800d558:	e047      	b.n	800d5ea <referee_processing_task+0x2fa>
		} else if (ref_robot_data.robot_level == 3) {
 800d55a:	4b0c      	ldr	r3, [pc, #48]	@ (800d58c <referee_processing_task+0x29c>)
 800d55c:	785b      	ldrb	r3, [r3, #1]
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d13c      	bne.n	800d5dc <referee_processing_task+0x2ec>
			g_referee_limiters.feeding_speed = LV3_FEEDER;
 800d562:	4b09      	ldr	r3, [pc, #36]	@ (800d588 <referee_processing_task+0x298>)
 800d564:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800d568:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV3_PROJECTILE;
 800d56a:	4b07      	ldr	r3, [pc, #28]	@ (800d588 <referee_processing_task+0x298>)
 800d56c:	2213      	movs	r2, #19
 800d56e:	805a      	strh	r2, [r3, #2]
			g_referee_limiters.robot_level = 3;
 800d570:	4b05      	ldr	r3, [pc, #20]	@ (800d588 <referee_processing_task+0x298>)
 800d572:	2203      	movs	r2, #3
 800d574:	731a      	strb	r2, [r3, #12]
			status_led(7, on_led);
 800d576:	2100      	movs	r1, #0
 800d578:	2007      	movs	r0, #7
 800d57a:	f7f4 fd1d 	bl	8001fb8 <status_led>
			status_led(8, on_led);
 800d57e:	2100      	movs	r1, #0
 800d580:	2008      	movs	r0, #8
 800d582:	f7f4 fd19 	bl	8001fb8 <status_led>
 800d586:	e030      	b.n	800d5ea <referee_processing_task+0x2fa>
 800d588:	20003bc4 	.word	0x20003bc4
 800d58c:	20003c48 	.word	0x20003c48
 800d590:	20003cb0 	.word	0x20003cb0
 800d594:	20001ca0 	.word	0x20001ca0
 800d598:	20003bdc 	.word	0x20003bdc
 800d59c:	20003c94 	.word	0x20003c94
 800d5a0:	20003c9c 	.word	0x20003c9c
 800d5a4:	20003c20 	.word	0x20003c20
 800d5a8:	20003c24 	.word	0x20003c24
 800d5ac:	20003c64 	.word	0x20003c64
 800d5b0:	20003c7c 	.word	0x20003c7c
 800d5b4:	20003c88 	.word	0x20003c88
 800d5b8:	20003c68 	.word	0x20003c68
 800d5bc:	20003c78 	.word	0x20003c78
 800d5c0:	20003c8c 	.word	0x20003c8c
 800d5c4:	20003c90 	.word	0x20003c90
 800d5c8:	20003c28 	.word	0x20003c28
 800d5cc:	20003c44 	.word	0x20003c44
 800d5d0:	20003ca0 	.word	0x20003ca0
 800d5d4:	20003ca8 	.word	0x20003ca8
 800d5d8:	20001da4 	.word	0x20001da4
		} else {
			g_referee_limiters.feeding_speed = LV1_FEEDER;
 800d5dc:	4b43      	ldr	r3, [pc, #268]	@ (800d6ec <referee_processing_task+0x3fc>)
 800d5de:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800d5e2:	801a      	strh	r2, [r3, #0]
			g_referee_limiters.projectile_speed = LV1_PROJECTILE;
 800d5e4:	4b41      	ldr	r3, [pc, #260]	@ (800d6ec <referee_processing_task+0x3fc>)
 800d5e6:	2213      	movs	r2, #19
 800d5e8:	805a      	strh	r2, [r3, #2]
		}
		if (ref_robot_data.robot_level != 0) {
 800d5ea:	4b41      	ldr	r3, [pc, #260]	@ (800d6f0 <referee_processing_task+0x400>)
 800d5ec:	785b      	ldrb	r3, [r3, #1]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d070      	beq.n	800d6d4 <referee_processing_task+0x3e4>
			float temp_buffer = 1;
 800d5f2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800d5f6:	61fb      	str	r3, [r7, #28]
			if (ref_power_data.buffer_energy < 50){
 800d5f8:	4b3e      	ldr	r3, [pc, #248]	@ (800d6f4 <referee_processing_task+0x404>)
 800d5fa:	891b      	ldrh	r3, [r3, #8]
 800d5fc:	2b31      	cmp	r3, #49	@ 0x31
 800d5fe:	d819      	bhi.n	800d634 <referee_processing_task+0x344>
			temp_buffer = (float)ref_power_data.buffer_energy/50;
 800d600:	4b3c      	ldr	r3, [pc, #240]	@ (800d6f4 <referee_processing_task+0x404>)
 800d602:	891b      	ldrh	r3, [r3, #8]
 800d604:	ee07 3a90 	vmov	s15, r3
 800d608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d60c:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800d6f8 <referee_processing_task+0x408>
 800d610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d614:	edc7 7a07 	vstr	s15, [r7, #28]
			temp_buffer = (temp_buffer > 1) ? 1 : temp_buffer;
 800d618:	edd7 7a07 	vldr	s15, [r7, #28]
 800d61c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d620:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d628:	dd02      	ble.n	800d630 <referee_processing_task+0x340>
 800d62a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800d62e:	e000      	b.n	800d632 <referee_processing_task+0x342>
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	61fb      	str	r3, [r7, #28]
			}
#ifdef CHASSIS_POWER_BUFFER_LIMITER
			g_referee_limiters.wheel_buffer_limit = temp_buffer * temp_buffer;
 800d634:	edd7 7a07 	vldr	s15, [r7, #28]
 800d638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d63c:	4b2b      	ldr	r3, [pc, #172]	@ (800d6ec <referee_processing_task+0x3fc>)
 800d63e:	edc3 7a02 	vstr	s15, [r3, #8]
#else
			g_referee_limiters.wheel_buffer_limit = 1;
#endif

			static float prev_chassis_power;
			float max_power = CHASSIS_MAX_POWER;
 800d642:	4b2e      	ldr	r3, [pc, #184]	@ (800d6fc <referee_processing_task+0x40c>)
 800d644:	61bb      	str	r3, [r7, #24]
			float curr_chassis_power = prev_chassis_power * 0.5 + ref_power_data.chassis_power * 0.5;
 800d646:	4b2e      	ldr	r3, [pc, #184]	@ (800d700 <referee_processing_task+0x410>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7f2 ff7c 	bl	8000548 <__aeabi_f2d>
 800d650:	f04f 0200 	mov.w	r2, #0
 800d654:	4b2b      	ldr	r3, [pc, #172]	@ (800d704 <referee_processing_task+0x414>)
 800d656:	f7f2 ffcf 	bl	80005f8 <__aeabi_dmul>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4614      	mov	r4, r2
 800d660:	461d      	mov	r5, r3
 800d662:	4b24      	ldr	r3, [pc, #144]	@ (800d6f4 <referee_processing_task+0x404>)
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	4618      	mov	r0, r3
 800d668:	f7f2 ff6e 	bl	8000548 <__aeabi_f2d>
 800d66c:	f04f 0200 	mov.w	r2, #0
 800d670:	4b24      	ldr	r3, [pc, #144]	@ (800d704 <referee_processing_task+0x414>)
 800d672:	f7f2 ffc1 	bl	80005f8 <__aeabi_dmul>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	4620      	mov	r0, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	f7f2 fe05 	bl	800028c <__adddf3>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4610      	mov	r0, r2
 800d688:	4619      	mov	r1, r3
 800d68a:	f7f3 faad 	bl	8000be8 <__aeabi_d2f>
 800d68e:	4603      	mov	r3, r0
 800d690:	613b      	str	r3, [r7, #16]
			prev_chassis_power = ref_power_data.chassis_power;
 800d692:	4b18      	ldr	r3, [pc, #96]	@ (800d6f4 <referee_processing_task+0x404>)
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	4a1a      	ldr	r2, [pc, #104]	@ (800d700 <referee_processing_task+0x410>)
 800d698:	6013      	str	r3, [r2, #0]
			if (ref_robot_data.chassis_power_limit < CHASSIS_MAX_POWER){
 800d69a:	4b15      	ldr	r3, [pc, #84]	@ (800d6f0 <referee_processing_task+0x400>)
 800d69c:	8b1b      	ldrh	r3, [r3, #24]
 800d69e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800d6a2:	d207      	bcs.n	800d6b4 <referee_processing_task+0x3c4>
				max_power = ref_robot_data.chassis_power_limit;
 800d6a4:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <referee_processing_task+0x400>)
 800d6a6:	8b1b      	ldrh	r3, [r3, #24]
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b0:	edc7 7a06 	vstr	s15, [r7, #24]
			}
			float temp_power = (float) ((curr_chassis_power)/(max_power - CHASSIS_POWER_MARGIN));
 800d6b4:	edd7 7a06 	vldr	s15, [r7, #24]
 800d6b8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d6bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d6c0:	edd7 6a04 	vldr	s13, [r7, #16]
 800d6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c8:	edc7 7a03 	vstr	s15, [r7, #12]
//			temp_power = (temp_power > 1) ? 1 : temp_power;
			g_referee_limiters.wheel_power_limit = temp_power;
 800d6cc:	4a07      	ldr	r2, [pc, #28]	@ (800d6ec <referee_processing_task+0x3fc>)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6053      	str	r3, [r2, #4]
 800d6d2:	e007      	b.n	800d6e4 <referee_processing_task+0x3f4>
//			arm_sqrt_f32(temp_power, &referee_limiters.wheel_power_limit);
		} else {
			g_referee_limiters.wheel_buffer_limit = 1;
 800d6d4:	4b05      	ldr	r3, [pc, #20]	@ (800d6ec <referee_processing_task+0x3fc>)
 800d6d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d6da:	609a      	str	r2, [r3, #8]
			g_referee_limiters.wheel_power_limit = 1;
 800d6dc:	4b03      	ldr	r3, [pc, #12]	@ (800d6ec <referee_processing_task+0x3fc>)
 800d6de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d6e2:	605a      	str	r2, [r3, #4]

		}
		vTaskDelay(2);
 800d6e4:	2002      	movs	r0, #2
 800d6e6:	f00d facd 	bl	801ac84 <vTaskDelay>
	while (1) {
 800d6ea:	e624      	b.n	800d336 <referee_processing_task+0x46>
 800d6ec:	20003bc4 	.word	0x20003bc4
 800d6f0:	20003c48 	.word	0x20003c48
 800d6f4:	20003c68 	.word	0x20003c68
 800d6f8:	42480000 	.word	0x42480000
 800d6fc:	43c80000 	.word	0x43c80000
 800d700:	20003db8 	.word	0x20003db8
 800d704:	3fe00000 	.word	0x3fe00000

0800d708 <rtIsInf>:
 * Function: rtIsInf ==================================================
 *  Abstract:
 *  Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 800d708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) != 0U);
 800d712:	683c      	ldr	r4, [r7, #0]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800d71a:	2301      	movs	r3, #1
 800d71c:	461e      	mov	r6, r3
 800d71e:	f04f 32ff 	mov.w	r2, #4294967295
 800d722:	4b0f      	ldr	r3, [pc, #60]	@ (800d760 <rtIsInf+0x58>)
 800d724:	4620      	mov	r0, r4
 800d726:	4629      	mov	r1, r5
 800d728:	f7f3 fa00 	bl	8000b2c <__aeabi_dcmpun>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <rtIsInf+0x42>
 800d732:	f04f 32ff 	mov.w	r2, #4294967295
 800d736:	4b0a      	ldr	r3, [pc, #40]	@ (800d760 <rtIsInf+0x58>)
 800d738:	4620      	mov	r0, r4
 800d73a:	4629      	mov	r1, r5
 800d73c:	f7f3 f9d8 	bl	8000af0 <__aeabi_dcmple>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <rtIsInf+0x42>
 800d746:	2300      	movs	r3, #0
 800d748:	461e      	mov	r6, r3
 800d74a:	b2f3      	uxtb	r3, r6
 800d74c:	f083 0301 	eor.w	r3, r3, #1
 800d750:	b2db      	uxtb	r3, r3
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	b2db      	uxtb	r3, r3
}
 800d758:	4618      	mov	r0, r3
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d760:	7fefffff 	.word	0x7fefffff

0800d764 <rtIsNaN>:
 * Function: rtIsNaN ==================================================
 *  Abstract:
 *  Test if value is not a number
 */
boolean_T rtIsNaN(real_T value)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	ed87 0b00 	vstr	d0, [r7]
  return (isnan(value) != 0U);
 800d76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d772:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d776:	f7f3 f9d9 	bl	8000b2c <__aeabi_dcmpun>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <rtIsNaN+0x20>
 800d780:	2301      	movs	r3, #1
 800d782:	e000      	b.n	800d786 <rtIsNaN+0x22>
 800d784:	2300      	movs	r3, #0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <startup_task>:
#include "startup_task.h"
#include "gimbal_control_task.h"
#include "buzzing_task.h"
#include <can_msg_processor.h>

void startup_task() {
 800d78e:	b580      	push	{r7, lr}
 800d790:	af00      	add	r7, sp, #0
	//todo: shift all to an actual task, reimplement motor not connected errors
	led_on();
 800d792:	f7f4 fbeb 	bl	8001f6c <led_on>
	buzzer_init();
 800d796:	f7f3 fd0b 	bl	80011b0 <buzzer_init>
	imu_init();
 800d79a:	f7f4 f9f1 	bl	8001b80 <imu_init>
	led_green_off();
 800d79e:	f7f4 fbd7 	bl	8001f50 <led_green_off>
	start_micros_timer();
 800d7a2:	f7f4 fce9 	bl	8002178 <start_micros_timer>
	led_toggle();
 800d7a6:	f7f4 fbff 	bl	8001fa8 <led_toggle>

}
 800d7aa:	bf00      	nop
 800d7ac:	bd80      	pop	{r7, pc}
	...

0800d7b0 <usb_vcp_processing>:
uint8_t usb_waiting = 0;

//#define DATA_OUTPUT_MODE
#define USB_CONFIG_MODE

void usb_vcp_processing(uint8_t *buffer, uint32_t *len) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b0c4      	sub	sp, #272	@ 0x110
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d7be:	6018      	str	r0, [r3, #0]
 800d7c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d7c8:	6019      	str	r1, [r3, #0]
	uint8_t blank_buffer[MAX_CHAR_SIZE] = { 0 };
 800d7ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	3304      	adds	r3, #4
 800d7d8:	22fc      	movs	r2, #252	@ 0xfc
 800d7da:	2100      	movs	r1, #0
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f00f ff98 	bl	801d712 <memset>
	memcpy(blank_buffer, buffer, *len);
 800d7e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d7f6:	f107 0010 	add.w	r0, r7, #16
 800d7fa:	6819      	ldr	r1, [r3, #0]
 800d7fc:	f010 f832 	bl	801d864 <memcpy>
	memcpy(usb_input_buffer, blank_buffer, MAX_CHAR_SIZE);
 800d800:	4a1a      	ldr	r2, [pc, #104]	@ (800d86c <usb_vcp_processing+0xbc>)
 800d802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d806:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d80a:	4610      	mov	r0, r2
 800d80c:	4619      	mov	r1, r3
 800d80e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d812:	461a      	mov	r2, r3
 800d814:	f010 f826 	bl	801d864 <memcpy>
	usb_input_len = *len;
 800d818:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d81c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a12      	ldr	r2, [pc, #72]	@ (800d870 <usb_vcp_processing+0xc0>)
 800d826:	6013      	str	r3, [r2, #0]

	//Check if the currently running task needs to yield
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800d828:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d82c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR(usb_continue_semaphore, &xHigherPriorityTaskWoken);
 800d834:	4b0f      	ldr	r3, [pc, #60]	@ (800d874 <usb_vcp_processing+0xc4>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f107 020c 	add.w	r2, r7, #12
 800d83c:	4611      	mov	r1, r2
 800d83e:	4618      	mov	r0, r3
 800d840:	f00c fcd6 	bl	801a1f0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800d844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d007      	beq.n	800d862 <usb_vcp_processing+0xb2>
 800d852:	4b09      	ldr	r3, [pc, #36]	@ (800d878 <usb_vcp_processing+0xc8>)
 800d854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	f3bf 8f6f 	isb	sy
}
 800d862:	bf00      	nop
 800d864:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	20003dbc 	.word	0x20003dbc
 800d870:	20003ebc 	.word	0x20003ebc
 800d874:	20003bac 	.word	0x20003bac
 800d878:	e000ed04 	.word	0xe000ed04

0800d87c <usb_task>:
	return 0;

}


void usb_task(void *argument) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
//						CDC_Transmit_FS(usb_input_buffer, len);
//					}
//				}
//			}
//		}
		vTaskDelay(100);
 800d884:	2064      	movs	r0, #100	@ 0x64
 800d886:	f00d f9fd 	bl	801ac84 <vTaskDelay>
 800d88a:	e7fb      	b.n	800d884 <usb_task+0x8>

0800d88c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d890:	4b0e      	ldr	r3, [pc, #56]	@ (800d8cc <HAL_Init+0x40>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a0d      	ldr	r2, [pc, #52]	@ (800d8cc <HAL_Init+0x40>)
 800d896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d89a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d89c:	4b0b      	ldr	r3, [pc, #44]	@ (800d8cc <HAL_Init+0x40>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d8cc <HAL_Init+0x40>)
 800d8a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d8a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d8a8:	4b08      	ldr	r3, [pc, #32]	@ (800d8cc <HAL_Init+0x40>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a07      	ldr	r2, [pc, #28]	@ (800d8cc <HAL_Init+0x40>)
 800d8ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d8b4:	2003      	movs	r0, #3
 800d8b6:	f001 fa02 	bl	800ecbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d8ba:	200f      	movs	r0, #15
 800d8bc:	f7f6 f906 	bl	8003acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d8c0:	f7f6 f8d8 	bl	8003a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	40023c00 	.word	0x40023c00

0800d8d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d8d4:	4b06      	ldr	r3, [pc, #24]	@ (800d8f0 <HAL_IncTick+0x20>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4b06      	ldr	r3, [pc, #24]	@ (800d8f4 <HAL_IncTick+0x24>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4413      	add	r3, r2
 800d8e0:	4a04      	ldr	r2, [pc, #16]	@ (800d8f4 <HAL_IncTick+0x24>)
 800d8e2:	6013      	str	r3, [r2, #0]
}
 800d8e4:	bf00      	nop
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	2000004c 	.word	0x2000004c
 800d8f4:	20003ec0 	.word	0x20003ec0

0800d8f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	af00      	add	r7, sp, #0
  return uwTick;
 800d8fc:	4b03      	ldr	r3, [pc, #12]	@ (800d90c <HAL_GetTick+0x14>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
}
 800d900:	4618      	mov	r0, r3
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	20003ec0 	.word	0x20003ec0

0800d910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d918:	f7ff ffee 	bl	800d8f8 <HAL_GetTick>
 800d91c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d928:	d005      	beq.n	800d936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d92a:	4b0a      	ldr	r3, [pc, #40]	@ (800d954 <HAL_Delay+0x44>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	461a      	mov	r2, r3
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	4413      	add	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d936:	bf00      	nop
 800d938:	f7ff ffde 	bl	800d8f8 <HAL_GetTick>
 800d93c:	4602      	mov	r2, r0
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	429a      	cmp	r2, r3
 800d946:	d8f7      	bhi.n	800d938 <HAL_Delay+0x28>
  {
  }
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	2000004c 	.word	0x2000004c

0800d958 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d960:	2300      	movs	r3, #0
 800d962:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d101      	bne.n	800d96e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	e033      	b.n	800d9d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d972:	2b00      	cmp	r3, #0
 800d974:	d109      	bne.n	800d98a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7f5 fa0e 	bl	8002d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d98e:	f003 0310 	and.w	r3, r3, #16
 800d992:	2b00      	cmp	r3, #0
 800d994:	d118      	bne.n	800d9c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d99a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800d99e:	f023 0302 	bic.w	r3, r3, #2
 800d9a2:	f043 0202 	orr.w	r2, r3, #2
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f93a 	bl	800dc24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ba:	f023 0303 	bic.w	r3, r3, #3
 800d9be:	f043 0201 	orr.w	r2, r3, #1
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	641a      	str	r2, [r3, #64]	@ 0x40
 800d9c6:	e001      	b.n	800d9cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d101      	bne.n	800d9fc <HAL_ADC_ConfigChannel+0x1c>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	e105      	b.n	800dc08 <HAL_ADC_ConfigChannel+0x228>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b09      	cmp	r3, #9
 800da0a:	d925      	bls.n	800da58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68d9      	ldr	r1, [r3, #12]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	b29b      	uxth	r3, r3
 800da18:	461a      	mov	r2, r3
 800da1a:	4613      	mov	r3, r2
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	4413      	add	r3, r2
 800da20:	3b1e      	subs	r3, #30
 800da22:	2207      	movs	r2, #7
 800da24:	fa02 f303 	lsl.w	r3, r2, r3
 800da28:	43da      	mvns	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	400a      	ands	r2, r1
 800da30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68d9      	ldr	r1, [r3, #12]
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	689a      	ldr	r2, [r3, #8]
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	b29b      	uxth	r3, r3
 800da42:	4618      	mov	r0, r3
 800da44:	4603      	mov	r3, r0
 800da46:	005b      	lsls	r3, r3, #1
 800da48:	4403      	add	r3, r0
 800da4a:	3b1e      	subs	r3, #30
 800da4c:	409a      	lsls	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	60da      	str	r2, [r3, #12]
 800da56:	e022      	b.n	800da9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6919      	ldr	r1, [r3, #16]
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	b29b      	uxth	r3, r3
 800da64:	461a      	mov	r2, r3
 800da66:	4613      	mov	r3, r2
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	4413      	add	r3, r2
 800da6c:	2207      	movs	r2, #7
 800da6e:	fa02 f303 	lsl.w	r3, r2, r3
 800da72:	43da      	mvns	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	400a      	ands	r2, r1
 800da7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6919      	ldr	r1, [r3, #16]
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	689a      	ldr	r2, [r3, #8]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4618      	mov	r0, r3
 800da8e:	4603      	mov	r3, r0
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	4403      	add	r3, r0
 800da94:	409a      	lsls	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	430a      	orrs	r2, r1
 800da9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	2b06      	cmp	r3, #6
 800daa4:	d824      	bhi.n	800daf0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	685a      	ldr	r2, [r3, #4]
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	3b05      	subs	r3, #5
 800dab8:	221f      	movs	r2, #31
 800daba:	fa02 f303 	lsl.w	r3, r2, r3
 800dabe:	43da      	mvns	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	400a      	ands	r2, r1
 800dac6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4618      	mov	r0, r3
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	3b05      	subs	r3, #5
 800dae2:	fa00 f203 	lsl.w	r2, r0, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	430a      	orrs	r2, r1
 800daec:	635a      	str	r2, [r3, #52]	@ 0x34
 800daee:	e04c      	b.n	800db8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	2b0c      	cmp	r3, #12
 800daf6:	d824      	bhi.n	800db42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	685a      	ldr	r2, [r3, #4]
 800db02:	4613      	mov	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	3b23      	subs	r3, #35	@ 0x23
 800db0a:	221f      	movs	r2, #31
 800db0c:	fa02 f303 	lsl.w	r3, r2, r3
 800db10:	43da      	mvns	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	400a      	ands	r2, r1
 800db18:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	b29b      	uxth	r3, r3
 800db26:	4618      	mov	r0, r3
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	4613      	mov	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	3b23      	subs	r3, #35	@ 0x23
 800db34:	fa00 f203 	lsl.w	r2, r0, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	430a      	orrs	r2, r1
 800db3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800db40:	e023      	b.n	800db8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	4613      	mov	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	4413      	add	r3, r2
 800db52:	3b41      	subs	r3, #65	@ 0x41
 800db54:	221f      	movs	r2, #31
 800db56:	fa02 f303 	lsl.w	r3, r2, r3
 800db5a:	43da      	mvns	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	400a      	ands	r2, r1
 800db62:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	b29b      	uxth	r3, r3
 800db70:	4618      	mov	r0, r3
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	685a      	ldr	r2, [r3, #4]
 800db76:	4613      	mov	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	4413      	add	r3, r2
 800db7c:	3b41      	subs	r3, #65	@ 0x41
 800db7e:	fa00 f203 	lsl.w	r2, r0, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	430a      	orrs	r2, r1
 800db88:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800db8a:	4b22      	ldr	r3, [pc, #136]	@ (800dc14 <HAL_ADC_ConfigChannel+0x234>)
 800db8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a21      	ldr	r2, [pc, #132]	@ (800dc18 <HAL_ADC_ConfigChannel+0x238>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d109      	bne.n	800dbac <HAL_ADC_ConfigChannel+0x1cc>
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b12      	cmp	r3, #18
 800db9e:	d105      	bne.n	800dbac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a19      	ldr	r2, [pc, #100]	@ (800dc18 <HAL_ADC_ConfigChannel+0x238>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d123      	bne.n	800dbfe <HAL_ADC_ConfigChannel+0x21e>
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b10      	cmp	r3, #16
 800dbbc:	d003      	beq.n	800dbc6 <HAL_ADC_ConfigChannel+0x1e6>
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b11      	cmp	r3, #17
 800dbc4:	d11b      	bne.n	800dbfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b10      	cmp	r3, #16
 800dbd8:	d111      	bne.n	800dbfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800dbda:	4b10      	ldr	r3, [pc, #64]	@ (800dc1c <HAL_ADC_ConfigChannel+0x23c>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4a10      	ldr	r2, [pc, #64]	@ (800dc20 <HAL_ADC_ConfigChannel+0x240>)
 800dbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe4:	0c9a      	lsrs	r2, r3, #18
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	4413      	add	r3, r2
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800dbf0:	e002      	b.n	800dbf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1f9      	bne.n	800dbf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr
 800dc14:	40012300 	.word	0x40012300
 800dc18:	40012000 	.word	0x40012000
 800dc1c:	20000004 	.word	0x20000004
 800dc20:	431bde83 	.word	0x431bde83

0800dc24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800dc2c:	4b79      	ldr	r3, [pc, #484]	@ (800de14 <ADC_Init+0x1f0>)
 800dc2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	431a      	orrs	r2, r3
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	685a      	ldr	r2, [r3, #4]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dc58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6859      	ldr	r1, [r3, #4]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	021a      	lsls	r2, r3, #8
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800dc7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6859      	ldr	r1, [r3, #4]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	689a      	ldr	r2, [r3, #8]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	430a      	orrs	r2, r1
 800dc8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	6899      	ldr	r1, [r3, #8]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68da      	ldr	r2, [r3, #12]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	430a      	orrs	r2, r1
 800dcb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb6:	4a58      	ldr	r2, [pc, #352]	@ (800de18 <ADC_Init+0x1f4>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d022      	beq.n	800dd02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	689a      	ldr	r2, [r3, #8]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800dcca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6899      	ldr	r1, [r3, #8]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	430a      	orrs	r2, r1
 800dcdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	689a      	ldr	r2, [r3, #8]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800dcec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6899      	ldr	r1, [r3, #8]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	430a      	orrs	r2, r1
 800dcfe:	609a      	str	r2, [r3, #8]
 800dd00:	e00f      	b.n	800dd22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	689a      	ldr	r2, [r3, #8]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800dd10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	689a      	ldr	r2, [r3, #8]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800dd20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	689a      	ldr	r2, [r3, #8]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f022 0202 	bic.w	r2, r2, #2
 800dd30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6899      	ldr	r1, [r3, #8]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	7e1b      	ldrb	r3, [r3, #24]
 800dd3c:	005a      	lsls	r2, r3, #1
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	430a      	orrs	r2, r1
 800dd44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d01b      	beq.n	800dd88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800dd6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6859      	ldr	r1, [r3, #4]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	035a      	lsls	r2, r3, #13
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	430a      	orrs	r2, r1
 800dd84:	605a      	str	r2, [r3, #4]
 800dd86:	e007      	b.n	800dd98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dd96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800dda6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	69db      	ldr	r3, [r3, #28]
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	051a      	lsls	r2, r3, #20
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	689a      	ldr	r2, [r3, #8]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ddcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	6899      	ldr	r1, [r3, #8]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ddda:	025a      	lsls	r2, r3, #9
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	430a      	orrs	r2, r1
 800dde2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	689a      	ldr	r2, [r3, #8]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6899      	ldr	r1, [r3, #8]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	029a      	lsls	r2, r3, #10
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	430a      	orrs	r2, r1
 800de06:	609a      	str	r2, [r3, #8]
}
 800de08:	bf00      	nop
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	40012300 	.word	0x40012300
 800de18:	0f000001 	.word	0x0f000001

0800de1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e0ed      	b.n	800e00a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d102      	bne.n	800de40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7f5 f85c 	bl	8002ef8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f042 0201 	orr.w	r2, r2, #1
 800de4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de50:	f7ff fd52 	bl	800d8f8 <HAL_GetTick>
 800de54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800de56:	e012      	b.n	800de7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800de58:	f7ff fd4e 	bl	800d8f8 <HAL_GetTick>
 800de5c:	4602      	mov	r2, r0
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	2b0a      	cmp	r3, #10
 800de64:	d90b      	bls.n	800de7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2205      	movs	r2, #5
 800de76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	e0c5      	b.n	800e00a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d0e5      	beq.n	800de58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f022 0202 	bic.w	r2, r2, #2
 800de9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de9c:	f7ff fd2c 	bl	800d8f8 <HAL_GetTick>
 800dea0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800dea2:	e012      	b.n	800deca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800dea4:	f7ff fd28 	bl	800d8f8 <HAL_GetTick>
 800dea8:	4602      	mov	r2, r0
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	2b0a      	cmp	r3, #10
 800deb0:	d90b      	bls.n	800deca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deb6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2205      	movs	r2, #5
 800dec2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e09f      	b.n	800e00a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	f003 0302 	and.w	r3, r3, #2
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1e5      	bne.n	800dea4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	7e1b      	ldrb	r3, [r3, #24]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d108      	bne.n	800def2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	e007      	b.n	800df02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800df00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	7e5b      	ldrb	r3, [r3, #25]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d108      	bne.n	800df1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df18:	601a      	str	r2, [r3, #0]
 800df1a:	e007      	b.n	800df2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	7e9b      	ldrb	r3, [r3, #26]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d108      	bne.n	800df46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f042 0220 	orr.w	r2, r2, #32
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	e007      	b.n	800df56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f022 0220 	bic.w	r2, r2, #32
 800df54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	7edb      	ldrb	r3, [r3, #27]
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d108      	bne.n	800df70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f022 0210 	bic.w	r2, r2, #16
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	e007      	b.n	800df80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f042 0210 	orr.w	r2, r2, #16
 800df7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	7f1b      	ldrb	r3, [r3, #28]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d108      	bne.n	800df9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f042 0208 	orr.w	r2, r2, #8
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	e007      	b.n	800dfaa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f022 0208 	bic.w	r2, r2, #8
 800dfa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	7f5b      	ldrb	r3, [r3, #29]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d108      	bne.n	800dfc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f042 0204 	orr.w	r2, r2, #4
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	e007      	b.n	800dfd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f022 0204 	bic.w	r2, r2, #4
 800dfd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	689a      	ldr	r2, [r3, #8]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	431a      	orrs	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	431a      	orrs	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	695b      	ldr	r3, [r3, #20]
 800dfe8:	ea42 0103 	orr.w	r1, r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	1e5a      	subs	r2, r3, #1
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	430a      	orrs	r2, r1
 800dff8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
	...

0800e014 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e02a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800e02c:	7cfb      	ldrb	r3, [r7, #19]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d003      	beq.n	800e03a <HAL_CAN_ConfigFilter+0x26>
 800e032:	7cfb      	ldrb	r3, [r7, #19]
 800e034:	2b02      	cmp	r3, #2
 800e036:	f040 80be 	bne.w	800e1b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800e03a:	4b65      	ldr	r3, [pc, #404]	@ (800e1d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800e03c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e044:	f043 0201 	orr.w	r2, r3, #1
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e054:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e068:	021b      	lsls	r3, r3, #8
 800e06a:	431a      	orrs	r2, r3
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	695b      	ldr	r3, [r3, #20]
 800e076:	f003 031f 	and.w	r3, r3, #31
 800e07a:	2201      	movs	r2, #1
 800e07c:	fa02 f303 	lsl.w	r3, r2, r3
 800e080:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	43db      	mvns	r3, r3
 800e08c:	401a      	ands	r2, r3
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d123      	bne.n	800e0e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	43db      	mvns	r3, r3
 800e0a6:	401a      	ands	r2, r3
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800e0be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	3248      	adds	r2, #72	@ 0x48
 800e0c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e0d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e0da:	6979      	ldr	r1, [r7, #20]
 800e0dc:	3348      	adds	r3, #72	@ 0x48
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	440b      	add	r3, r1
 800e0e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	69db      	ldr	r3, [r3, #28]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d122      	bne.n	800e132 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	431a      	orrs	r2, r3
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e108:	683a      	ldr	r2, [r7, #0]
 800e10a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800e10c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	3248      	adds	r2, #72	@ 0x48
 800e112:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800e126:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800e128:	6979      	ldr	r1, [r7, #20]
 800e12a:	3348      	adds	r3, #72	@ 0x48
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	440b      	add	r3, r1
 800e130:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d109      	bne.n	800e14e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	43db      	mvns	r3, r3
 800e144:	401a      	ands	r2, r3
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800e14c:	e007      	b.n	800e15e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	431a      	orrs	r2, r3
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	691b      	ldr	r3, [r3, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d109      	bne.n	800e17a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	43db      	mvns	r3, r3
 800e170:	401a      	ands	r2, r3
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800e178:	e007      	b.n	800e18a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	431a      	orrs	r2, r3
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	6a1b      	ldr	r3, [r3, #32]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d107      	bne.n	800e1a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	431a      	orrs	r2, r3
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e1a8:	f023 0201 	bic.w	r2, r3, #1
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e006      	b.n	800e1c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
  }
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	371c      	adds	r7, #28
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	40006400 	.word	0x40006400

0800e1d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d12e      	bne.n	800e246 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2202      	movs	r2, #2
 800e1ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f022 0201 	bic.w	r2, r2, #1
 800e1fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e200:	f7ff fb7a 	bl	800d8f8 <HAL_GetTick>
 800e204:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e206:	e012      	b.n	800e22e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800e208:	f7ff fb76 	bl	800d8f8 <HAL_GetTick>
 800e20c:	4602      	mov	r2, r0
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	2b0a      	cmp	r3, #10
 800e214:	d90b      	bls.n	800e22e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e21a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2205      	movs	r2, #5
 800e226:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800e22a:	2301      	movs	r3, #1
 800e22c:	e012      	b.n	800e254 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1e5      	bne.n	800e208 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	e006      	b.n	800e254 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e24a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
  }
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b089      	sub	sp, #36	@ 0x24
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	607a      	str	r2, [r7, #4]
 800e268:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e270:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800e27a:	7ffb      	ldrb	r3, [r7, #31]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d003      	beq.n	800e288 <HAL_CAN_AddTxMessage+0x2c>
 800e280:	7ffb      	ldrb	r3, [r7, #31]
 800e282:	2b02      	cmp	r3, #2
 800e284:	f040 80b8 	bne.w	800e3f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10a      	bne.n	800e2a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d105      	bne.n	800e2a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 80a0 	beq.w	800e3e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	0e1b      	lsrs	r3, r3, #24
 800e2ac:	f003 0303 	and.w	r3, r3, #3
 800e2b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d907      	bls.n	800e2c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e09e      	b.n	800e406 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	409a      	lsls	r2, r3
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10d      	bne.n	800e2f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800e2e4:	68f9      	ldr	r1, [r7, #12]
 800e2e6:	6809      	ldr	r1, [r1, #0]
 800e2e8:	431a      	orrs	r2, r3
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	3318      	adds	r3, #24
 800e2ee:	011b      	lsls	r3, r3, #4
 800e2f0:	440b      	add	r3, r1
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	e00f      	b.n	800e316 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e300:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e306:	68f9      	ldr	r1, [r7, #12]
 800e308:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800e30a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	3318      	adds	r3, #24
 800e310:	011b      	lsls	r3, r3, #4
 800e312:	440b      	add	r3, r1
 800e314:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6819      	ldr	r1, [r3, #0]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	691a      	ldr	r2, [r3, #16]
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	3318      	adds	r3, #24
 800e322:	011b      	lsls	r3, r3, #4
 800e324:	440b      	add	r3, r1
 800e326:	3304      	adds	r3, #4
 800e328:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	7d1b      	ldrb	r3, [r3, #20]
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d111      	bne.n	800e356 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	3318      	adds	r3, #24
 800e33a:	011b      	lsls	r3, r3, #4
 800e33c:	4413      	add	r3, r2
 800e33e:	3304      	adds	r3, #4
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	6811      	ldr	r1, [r2, #0]
 800e346:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	3318      	adds	r3, #24
 800e34e:	011b      	lsls	r3, r3, #4
 800e350:	440b      	add	r3, r1
 800e352:	3304      	adds	r3, #4
 800e354:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3307      	adds	r3, #7
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	061a      	lsls	r2, r3, #24
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3306      	adds	r3, #6
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	041b      	lsls	r3, r3, #16
 800e366:	431a      	orrs	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3305      	adds	r3, #5
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	021b      	lsls	r3, r3, #8
 800e370:	4313      	orrs	r3, r2
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	3204      	adds	r2, #4
 800e376:	7812      	ldrb	r2, [r2, #0]
 800e378:	4610      	mov	r0, r2
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	6811      	ldr	r1, [r2, #0]
 800e37e:	ea43 0200 	orr.w	r2, r3, r0
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	011b      	lsls	r3, r3, #4
 800e386:	440b      	add	r3, r1
 800e388:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800e38c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	3303      	adds	r3, #3
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	061a      	lsls	r2, r3, #24
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3302      	adds	r3, #2
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	041b      	lsls	r3, r3, #16
 800e39e:	431a      	orrs	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	021b      	lsls	r3, r3, #8
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	7812      	ldrb	r2, [r2, #0]
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	6811      	ldr	r1, [r2, #0]
 800e3b4:	ea43 0200 	orr.w	r2, r3, r0
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	011b      	lsls	r3, r3, #4
 800e3bc:	440b      	add	r3, r1
 800e3be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800e3c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	3318      	adds	r3, #24
 800e3cc:	011b      	lsls	r3, r3, #4
 800e3ce:	4413      	add	r3, r2
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	6811      	ldr	r1, [r2, #0]
 800e3d6:	f043 0201 	orr.w	r2, r3, #1
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	3318      	adds	r3, #24
 800e3de:	011b      	lsls	r3, r3, #4
 800e3e0:	440b      	add	r3, r1
 800e3e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	e00e      	b.n	800e406 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e006      	b.n	800e406 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e404:	2301      	movs	r3, #1
  }
}
 800e406:	4618      	mov	r0, r3
 800e408:	3724      	adds	r7, #36	@ 0x24
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800e412:	b480      	push	{r7}
 800e414:	b087      	sub	sp, #28
 800e416:	af00      	add	r7, sp, #0
 800e418:	60f8      	str	r0, [r7, #12]
 800e41a:	60b9      	str	r1, [r7, #8]
 800e41c:	607a      	str	r2, [r7, #4]
 800e41e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e426:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800e428:	7dfb      	ldrb	r3, [r7, #23]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d003      	beq.n	800e436 <HAL_CAN_GetRxMessage+0x24>
 800e42e:	7dfb      	ldrb	r3, [r7, #23]
 800e430:	2b02      	cmp	r3, #2
 800e432:	f040 80f3 	bne.w	800e61c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10e      	bne.n	800e45a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	f003 0303 	and.w	r3, r3, #3
 800e446:	2b00      	cmp	r3, #0
 800e448:	d116      	bne.n	800e478 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e0e7      	b.n	800e62a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	f003 0303 	and.w	r3, r3, #3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d107      	bne.n	800e478 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e46c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800e474:	2301      	movs	r3, #1
 800e476:	e0d8      	b.n	800e62a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	331b      	adds	r3, #27
 800e480:	011b      	lsls	r3, r3, #4
 800e482:	4413      	add	r3, r2
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f003 0204 	and.w	r2, r3, #4
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10c      	bne.n	800e4b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	331b      	adds	r3, #27
 800e49e:	011b      	lsls	r3, r3, #4
 800e4a0:	4413      	add	r3, r2
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	0d5b      	lsrs	r3, r3, #21
 800e4a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	e00b      	b.n	800e4c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	331b      	adds	r3, #27
 800e4b8:	011b      	lsls	r3, r3, #4
 800e4ba:	4413      	add	r3, r2
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	08db      	lsrs	r3, r3, #3
 800e4c0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	331b      	adds	r3, #27
 800e4d0:	011b      	lsls	r3, r3, #4
 800e4d2:	4413      	add	r3, r2
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f003 0202 	and.w	r2, r3, #2
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	331b      	adds	r3, #27
 800e4e6:	011b      	lsls	r3, r3, #4
 800e4e8:	4413      	add	r3, r2
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f003 020f 	and.w	r2, r3, #15
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	331b      	adds	r3, #27
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	4413      	add	r3, r2
 800e502:	3304      	adds	r3, #4
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	0a1b      	lsrs	r3, r3, #8
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	331b      	adds	r3, #27
 800e516:	011b      	lsls	r3, r3, #4
 800e518:	4413      	add	r3, r2
 800e51a:	3304      	adds	r3, #4
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	0c1b      	lsrs	r3, r3, #16
 800e520:	b29a      	uxth	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	011b      	lsls	r3, r3, #4
 800e52e:	4413      	add	r3, r2
 800e530:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	b2da      	uxtb	r2, r3
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	011b      	lsls	r3, r3, #4
 800e544:	4413      	add	r3, r2
 800e546:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	0a1a      	lsrs	r2, r3, #8
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	3301      	adds	r3, #1
 800e552:	b2d2      	uxtb	r2, r2
 800e554:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	011b      	lsls	r3, r3, #4
 800e55e:	4413      	add	r3, r2
 800e560:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	0c1a      	lsrs	r2, r3, #16
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	3302      	adds	r3, #2
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	011b      	lsls	r3, r3, #4
 800e578:	4413      	add	r3, r2
 800e57a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	0e1a      	lsrs	r2, r3, #24
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	3303      	adds	r3, #3
 800e586:	b2d2      	uxtb	r2, r2
 800e588:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	011b      	lsls	r3, r3, #4
 800e592:	4413      	add	r3, r2
 800e594:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	3304      	adds	r3, #4
 800e59e:	b2d2      	uxtb	r2, r2
 800e5a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	011b      	lsls	r3, r3, #4
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	0a1a      	lsrs	r2, r3, #8
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	3305      	adds	r3, #5
 800e5b8:	b2d2      	uxtb	r2, r2
 800e5ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	011b      	lsls	r3, r3, #4
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	0c1a      	lsrs	r2, r3, #16
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	3306      	adds	r3, #6
 800e5d2:	b2d2      	uxtb	r2, r2
 800e5d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	011b      	lsls	r3, r3, #4
 800e5de:	4413      	add	r3, r2
 800e5e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	0e1a      	lsrs	r2, r3, #24
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	3307      	adds	r3, #7
 800e5ec:	b2d2      	uxtb	r2, r2
 800e5ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d108      	bne.n	800e608 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68da      	ldr	r2, [r3, #12]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f042 0220 	orr.w	r2, r2, #32
 800e604:	60da      	str	r2, [r3, #12]
 800e606:	e007      	b.n	800e618 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	691a      	ldr	r2, [r3, #16]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f042 0220 	orr.w	r2, r2, #32
 800e616:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	e006      	b.n	800e62a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e620:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e628:	2301      	movs	r3, #1
  }
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	371c      	adds	r7, #28
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr

0800e636 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800e636:	b480      	push	{r7}
 800e638:	b085      	sub	sp, #20
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e646:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800e648:	7bfb      	ldrb	r3, [r7, #15]
 800e64a:	2b01      	cmp	r3, #1
 800e64c:	d002      	beq.n	800e654 <HAL_CAN_ActivateNotification+0x1e>
 800e64e:	7bfb      	ldrb	r3, [r7, #15]
 800e650:	2b02      	cmp	r3, #2
 800e652:	d109      	bne.n	800e668 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	6959      	ldr	r1, [r3, #20]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	430a      	orrs	r2, r1
 800e662:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	e006      	b.n	800e676 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e66c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e674:	2301      	movs	r3, #1
  }
}
 800e676:	4618      	mov	r0, r3
 800e678:	3714      	adds	r7, #20
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr

0800e682 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800e682:	b480      	push	{r7}
 800e684:	b085      	sub	sp, #20
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
 800e68a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e692:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800e694:	7bfb      	ldrb	r3, [r7, #15]
 800e696:	2b01      	cmp	r3, #1
 800e698:	d002      	beq.n	800e6a0 <HAL_CAN_DeactivateNotification+0x1e>
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	d10a      	bne.n	800e6b6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6959      	ldr	r1, [r3, #20]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	43da      	mvns	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	400a      	ands	r2, r1
 800e6b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e006      	b.n	800e6c4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800e6c2:	2301      	movs	r3, #1
  }
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b08a      	sub	sp, #40	@ 0x28
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	695b      	ldr	r3, [r3, #20]
 800e6e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	699b      	ldr	r3, [r3, #24]
 800e70a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800e70c:	6a3b      	ldr	r3, [r7, #32]
 800e70e:	f003 0301 	and.w	r3, r3, #1
 800e712:	2b00      	cmp	r3, #0
 800e714:	d07c      	beq.n	800e810 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d023      	beq.n	800e768 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2201      	movs	r2, #1
 800e726:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	f003 0302 	and.w	r3, r3, #2
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f983 	bl	800ea3e <HAL_CAN_TxMailbox0CompleteCallback>
 800e738:	e016      	b.n	800e768 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	f003 0304 	and.w	r3, r3, #4
 800e740:	2b00      	cmp	r3, #0
 800e742:	d004      	beq.n	800e74e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800e744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e746:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e74a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e74c:	e00c      	b.n	800e768 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	f003 0308 	and.w	r3, r3, #8
 800e754:	2b00      	cmp	r3, #0
 800e756:	d004      	beq.n	800e762 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e75e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e760:	e002      	b.n	800e768 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 f989 	bl	800ea7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d024      	beq.n	800e7bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e77a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e782:	2b00      	cmp	r3, #0
 800e784:	d003      	beq.n	800e78e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f963 	bl	800ea52 <HAL_CAN_TxMailbox1CompleteCallback>
 800e78c:	e016      	b.n	800e7bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e794:	2b00      	cmp	r3, #0
 800e796:	d004      	beq.n	800e7a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800e798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e79e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7a0:	e00c      	b.n	800e7bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d004      	beq.n	800e7b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e7b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7b4:	e002      	b.n	800e7bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 f969 	bl	800ea8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d024      	beq.n	800e810 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e7ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 f943 	bl	800ea66 <HAL_CAN_TxMailbox2CompleteCallback>
 800e7e0:	e016      	b.n	800e810 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d004      	beq.n	800e7f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7f4:	e00c      	b.n	800e810 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d004      	beq.n	800e80a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800e800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e806:	627b      	str	r3, [r7, #36]	@ 0x24
 800e808:	e002      	b.n	800e810 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f949 	bl	800eaa2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	f003 0308 	and.w	r3, r3, #8
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00c      	beq.n	800e834 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	f003 0310 	and.w	r3, r3, #16
 800e820:	2b00      	cmp	r3, #0
 800e822:	d007      	beq.n	800e834 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800e824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e826:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e82a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2210      	movs	r2, #16
 800e832:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800e834:	6a3b      	ldr	r3, [r7, #32]
 800e836:	f003 0304 	and.w	r3, r3, #4
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00b      	beq.n	800e856 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f003 0308 	and.w	r3, r3, #8
 800e844:	2b00      	cmp	r3, #0
 800e846:	d006      	beq.n	800e856 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2208      	movs	r2, #8
 800e84e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f930 	bl	800eab6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	f003 0302 	and.w	r3, r3, #2
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d009      	beq.n	800e874 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	f003 0303 	and.w	r3, r3, #3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d002      	beq.n	800e874 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7f2 fcac 	bl	80011cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00c      	beq.n	800e898 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	f003 0310 	and.w	r3, r3, #16
 800e884:	2b00      	cmp	r3, #0
 800e886:	d007      	beq.n	800e898 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800e888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e88e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2210      	movs	r2, #16
 800e896:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00b      	beq.n	800e8ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	f003 0308 	and.w	r3, r3, #8
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d006      	beq.n	800e8ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2208      	movs	r2, #8
 800e8b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f908 	bl	800eaca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	f003 0310 	and.w	r3, r3, #16
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d009      	beq.n	800e8d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	f003 0303 	and.w	r3, r3, #3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d002      	beq.n	800e8d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7f2 fc85 	bl	80011e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00b      	beq.n	800e8fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	f003 0310 	and.w	r3, r3, #16
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d006      	beq.n	800e8fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2210      	movs	r2, #16
 800e8f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f8f2 	bl	800eade <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00b      	beq.n	800e91c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	f003 0308 	and.w	r3, r3, #8
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d006      	beq.n	800e91c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2208      	movs	r2, #8
 800e914:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f8eb 	bl	800eaf2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e922:	2b00      	cmp	r3, #0
 800e924:	d07b      	beq.n	800ea1e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	f003 0304 	and.w	r3, r3, #4
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d072      	beq.n	800ea16 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e936:	2b00      	cmp	r3, #0
 800e938:	d008      	beq.n	800e94c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e940:	2b00      	cmp	r3, #0
 800e942:	d003      	beq.n	800e94c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800e944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e946:	f043 0301 	orr.w	r3, r3, #1
 800e94a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e952:	2b00      	cmp	r3, #0
 800e954:	d008      	beq.n	800e968 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d003      	beq.n	800e968 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800e960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e962:	f043 0302 	orr.w	r3, r3, #2
 800e966:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d008      	beq.n	800e984 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d003      	beq.n	800e984 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800e97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e97e:	f043 0304 	orr.w	r3, r3, #4
 800e982:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d043      	beq.n	800ea16 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e994:	2b00      	cmp	r3, #0
 800e996:	d03e      	beq.n	800ea16 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e99e:	2b60      	cmp	r3, #96	@ 0x60
 800e9a0:	d02b      	beq.n	800e9fa <HAL_CAN_IRQHandler+0x32a>
 800e9a2:	2b60      	cmp	r3, #96	@ 0x60
 800e9a4:	d82e      	bhi.n	800ea04 <HAL_CAN_IRQHandler+0x334>
 800e9a6:	2b50      	cmp	r3, #80	@ 0x50
 800e9a8:	d022      	beq.n	800e9f0 <HAL_CAN_IRQHandler+0x320>
 800e9aa:	2b50      	cmp	r3, #80	@ 0x50
 800e9ac:	d82a      	bhi.n	800ea04 <HAL_CAN_IRQHandler+0x334>
 800e9ae:	2b40      	cmp	r3, #64	@ 0x40
 800e9b0:	d019      	beq.n	800e9e6 <HAL_CAN_IRQHandler+0x316>
 800e9b2:	2b40      	cmp	r3, #64	@ 0x40
 800e9b4:	d826      	bhi.n	800ea04 <HAL_CAN_IRQHandler+0x334>
 800e9b6:	2b30      	cmp	r3, #48	@ 0x30
 800e9b8:	d010      	beq.n	800e9dc <HAL_CAN_IRQHandler+0x30c>
 800e9ba:	2b30      	cmp	r3, #48	@ 0x30
 800e9bc:	d822      	bhi.n	800ea04 <HAL_CAN_IRQHandler+0x334>
 800e9be:	2b10      	cmp	r3, #16
 800e9c0:	d002      	beq.n	800e9c8 <HAL_CAN_IRQHandler+0x2f8>
 800e9c2:	2b20      	cmp	r3, #32
 800e9c4:	d005      	beq.n	800e9d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800e9c6:	e01d      	b.n	800ea04 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ca:	f043 0308 	orr.w	r3, r3, #8
 800e9ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e9d0:	e019      	b.n	800ea06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d4:	f043 0310 	orr.w	r3, r3, #16
 800e9d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e9da:	e014      	b.n	800ea06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9de:	f043 0320 	orr.w	r3, r3, #32
 800e9e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e9e4:	e00f      	b.n	800ea06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e9ee:	e00a      	b.n	800ea06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e9f8:	e005      	b.n	800ea06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800e9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea00:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800ea02:	e000      	b.n	800ea06 <HAL_CAN_IRQHandler+0x336>
            break;
 800ea04:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	699a      	ldr	r2, [r3, #24]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ea14:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2204      	movs	r2, #4
 800ea1c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d008      	beq.n	800ea36 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2a:	431a      	orrs	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 f868 	bl	800eb06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800ea36:	bf00      	nop
 800ea38:	3728      	adds	r7, #40	@ 0x28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	b083      	sub	sp, #12
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800ea46:	bf00      	nop
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ea52:	b480      	push	{r7}
 800ea54:	b083      	sub	sp, #12
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800ea5a:	bf00      	nop
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800ea66:	b480      	push	{r7}
 800ea68:	b083      	sub	sp, #12
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800ea6e:	bf00      	nop
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b083      	sub	sp, #12
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800ea82:	bf00      	nop
 800ea84:	370c      	adds	r7, #12
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800ea96:	bf00      	nop
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b083      	sub	sp, #12
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800eaaa:	bf00      	nop
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800eab6:	b480      	push	{r7}
 800eab8:	b083      	sub	sp, #12
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800eabe:	bf00      	nop
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800eaca:	b480      	push	{r7}
 800eacc:	b083      	sub	sp, #12
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800ead2:	bf00      	nop
 800ead4:	370c      	adds	r7, #12
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr

0800eade <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800eade:	b480      	push	{r7}
 800eae0:	b083      	sub	sp, #12
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800eae6:	bf00      	nop
 800eae8:	370c      	adds	r7, #12
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800eaf2:	b480      	push	{r7}
 800eaf4:	b083      	sub	sp, #12
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800eafa:	bf00      	nop
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800eb06:	b480      	push	{r7}
 800eb08:	b083      	sub	sp, #12
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800eb0e:	bf00      	nop
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
	...

0800eb1c <__NVIC_SetPriorityGrouping>:
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f003 0307 	and.w	r3, r3, #7
 800eb2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800eb2c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb60 <__NVIC_SetPriorityGrouping+0x44>)
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800eb38:	4013      	ands	r3, r2
 800eb3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800eb44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800eb48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800eb4e:	4a04      	ldr	r2, [pc, #16]	@ (800eb60 <__NVIC_SetPriorityGrouping+0x44>)
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	60d3      	str	r3, [r2, #12]
}
 800eb54:	bf00      	nop
 800eb56:	3714      	adds	r7, #20
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	e000ed00 	.word	0xe000ed00

0800eb64 <__NVIC_GetPriorityGrouping>:
{
 800eb64:	b480      	push	{r7}
 800eb66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800eb68:	4b04      	ldr	r3, [pc, #16]	@ (800eb7c <__NVIC_GetPriorityGrouping+0x18>)
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	0a1b      	lsrs	r3, r3, #8
 800eb6e:	f003 0307 	and.w	r3, r3, #7
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr
 800eb7c:	e000ed00 	.word	0xe000ed00

0800eb80 <__NVIC_EnableIRQ>:
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	4603      	mov	r3, r0
 800eb88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	db0b      	blt.n	800ebaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eb92:	79fb      	ldrb	r3, [r7, #7]
 800eb94:	f003 021f 	and.w	r2, r3, #31
 800eb98:	4907      	ldr	r1, [pc, #28]	@ (800ebb8 <__NVIC_EnableIRQ+0x38>)
 800eb9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb9e:	095b      	lsrs	r3, r3, #5
 800eba0:	2001      	movs	r0, #1
 800eba2:	fa00 f202 	lsl.w	r2, r0, r2
 800eba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ebaa:	bf00      	nop
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	e000e100 	.word	0xe000e100

0800ebbc <__NVIC_DisableIRQ>:
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ebc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	db12      	blt.n	800ebf4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	f003 021f 	and.w	r2, r3, #31
 800ebd4:	490a      	ldr	r1, [pc, #40]	@ (800ec00 <__NVIC_DisableIRQ+0x44>)
 800ebd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebda:	095b      	lsrs	r3, r3, #5
 800ebdc:	2001      	movs	r0, #1
 800ebde:	fa00 f202 	lsl.w	r2, r0, r2
 800ebe2:	3320      	adds	r3, #32
 800ebe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ebe8:	f3bf 8f4f 	dsb	sy
}
 800ebec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ebee:	f3bf 8f6f 	isb	sy
}
 800ebf2:	bf00      	nop
}
 800ebf4:	bf00      	nop
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	e000e100 	.word	0xe000e100

0800ec04 <__NVIC_SetPriority>:
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	6039      	str	r1, [r7, #0]
 800ec0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ec10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	db0a      	blt.n	800ec2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	490c      	ldr	r1, [pc, #48]	@ (800ec50 <__NVIC_SetPriority+0x4c>)
 800ec1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec22:	0112      	lsls	r2, r2, #4
 800ec24:	b2d2      	uxtb	r2, r2
 800ec26:	440b      	add	r3, r1
 800ec28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ec2c:	e00a      	b.n	800ec44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	4908      	ldr	r1, [pc, #32]	@ (800ec54 <__NVIC_SetPriority+0x50>)
 800ec34:	79fb      	ldrb	r3, [r7, #7]
 800ec36:	f003 030f 	and.w	r3, r3, #15
 800ec3a:	3b04      	subs	r3, #4
 800ec3c:	0112      	lsls	r2, r2, #4
 800ec3e:	b2d2      	uxtb	r2, r2
 800ec40:	440b      	add	r3, r1
 800ec42:	761a      	strb	r2, [r3, #24]
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	e000e100 	.word	0xe000e100
 800ec54:	e000ed00 	.word	0xe000ed00

0800ec58 <NVIC_EncodePriority>:
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b089      	sub	sp, #36	@ 0x24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f003 0307 	and.w	r3, r3, #7
 800ec6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	f1c3 0307 	rsb	r3, r3, #7
 800ec72:	2b04      	cmp	r3, #4
 800ec74:	bf28      	it	cs
 800ec76:	2304      	movcs	r3, #4
 800ec78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	2b06      	cmp	r3, #6
 800ec80:	d902      	bls.n	800ec88 <NVIC_EncodePriority+0x30>
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	3b03      	subs	r3, #3
 800ec86:	e000      	b.n	800ec8a <NVIC_EncodePriority+0x32>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ec8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	fa02 f303 	lsl.w	r3, r2, r3
 800ec96:	43da      	mvns	r2, r3
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	401a      	ands	r2, r3
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800eca0:	f04f 31ff 	mov.w	r1, #4294967295
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	fa01 f303 	lsl.w	r3, r1, r3
 800ecaa:	43d9      	mvns	r1, r3
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ecb0:	4313      	orrs	r3, r2
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3724      	adds	r7, #36	@ 0x24
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr

0800ecbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff ff28 	bl	800eb1c <__NVIC_SetPriorityGrouping>
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	4603      	mov	r3, r0
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
 800ece0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ece2:	2300      	movs	r3, #0
 800ece4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ece6:	f7ff ff3d 	bl	800eb64 <__NVIC_GetPriorityGrouping>
 800ecea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	68b9      	ldr	r1, [r7, #8]
 800ecf0:	6978      	ldr	r0, [r7, #20]
 800ecf2:	f7ff ffb1 	bl	800ec58 <NVIC_EncodePriority>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff ff80 	bl	800ec04 <__NVIC_SetPriority>
}
 800ed04:	bf00      	nop
 800ed06:	3718      	adds	r7, #24
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	4603      	mov	r3, r0
 800ed14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ed16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff ff30 	bl	800eb80 <__NVIC_EnableIRQ>
}
 800ed20:	bf00      	nop
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ed32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff ff40 	bl	800ebbc <__NVIC_DisableIRQ>
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b086      	sub	sp, #24
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ed50:	f7fe fdd2 	bl	800d8f8 <HAL_GetTick>
 800ed54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d101      	bne.n	800ed60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e099      	b.n	800ee94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2202      	movs	r2, #2
 800ed64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f022 0201 	bic.w	r2, r2, #1
 800ed7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ed80:	e00f      	b.n	800eda2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ed82:	f7fe fdb9 	bl	800d8f8 <HAL_GetTick>
 800ed86:	4602      	mov	r2, r0
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	2b05      	cmp	r3, #5
 800ed8e:	d908      	bls.n	800eda2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2220      	movs	r2, #32
 800ed94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2203      	movs	r2, #3
 800ed9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	e078      	b.n	800ee94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f003 0301 	and.w	r3, r3, #1
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e8      	bne.n	800ed82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	4b38      	ldr	r3, [pc, #224]	@ (800ee9c <HAL_DMA_Init+0x158>)
 800edbc:	4013      	ands	r3, r2
 800edbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	685a      	ldr	r2, [r3, #4]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800edce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800edda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	699b      	ldr	r3, [r3, #24]
 800ede0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ede6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a1b      	ldr	r3, [r3, #32]
 800edec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800edee:	697a      	ldr	r2, [r7, #20]
 800edf0:	4313      	orrs	r3, r2
 800edf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edf8:	2b04      	cmp	r3, #4
 800edfa:	d107      	bne.n	800ee0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee04:	4313      	orrs	r3, r2
 800ee06:	697a      	ldr	r2, [r7, #20]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	697a      	ldr	r2, [r7, #20]
 800ee12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	695b      	ldr	r3, [r3, #20]
 800ee1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f023 0307 	bic.w	r3, r3, #7
 800ee22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee32:	2b04      	cmp	r3, #4
 800ee34:	d117      	bne.n	800ee66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee3a:	697a      	ldr	r2, [r7, #20]
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00e      	beq.n	800ee66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fb0d 	bl	800f468 <DMA_CheckFifoParam>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d008      	beq.n	800ee66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2240      	movs	r2, #64	@ 0x40
 800ee58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800ee62:	2301      	movs	r3, #1
 800ee64:	e016      	b.n	800ee94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 fac4 	bl	800f3fc <DMA_CalcBaseAndBitshift>
 800ee74:	4603      	mov	r3, r0
 800ee76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee7c:	223f      	movs	r2, #63	@ 0x3f
 800ee7e:	409a      	lsls	r2, r3
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3718      	adds	r7, #24
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	f010803f 	.word	0xf010803f

0800eea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
 800eeac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eeb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d101      	bne.n	800eec6 <HAL_DMA_Start_IT+0x26>
 800eec2:	2302      	movs	r3, #2
 800eec4:	e040      	b.n	800ef48 <HAL_DMA_Start_IT+0xa8>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d12f      	bne.n	800ef3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2202      	movs	r2, #2
 800eede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	68b9      	ldr	r1, [r7, #8]
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f000 fa56 	bl	800f3a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eef8:	223f      	movs	r2, #63	@ 0x3f
 800eefa:	409a      	lsls	r2, r3
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f042 0216 	orr.w	r2, r2, #22
 800ef0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d007      	beq.n	800ef28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f042 0208 	orr.w	r2, r2, #8
 800ef26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f042 0201 	orr.w	r2, r2, #1
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	e005      	b.n	800ef46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ef42:	2302      	movs	r3, #2
 800ef44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ef5e:	f7fe fccb 	bl	800d8f8 <HAL_GetTick>
 800ef62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d008      	beq.n	800ef82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2280      	movs	r2, #128	@ 0x80
 800ef74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e052      	b.n	800f028 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f022 0216 	bic.w	r2, r2, #22
 800ef90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	695a      	ldr	r2, [r3, #20]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800efa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d103      	bne.n	800efb2 <HAL_DMA_Abort+0x62>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d007      	beq.n	800efc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f022 0208 	bic.w	r2, r2, #8
 800efc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f022 0201 	bic.w	r2, r2, #1
 800efd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800efd2:	e013      	b.n	800effc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800efd4:	f7fe fc90 	bl	800d8f8 <HAL_GetTick>
 800efd8:	4602      	mov	r2, r0
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	2b05      	cmp	r3, #5
 800efe0:	d90c      	bls.n	800effc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2220      	movs	r2, #32
 800efe6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2203      	movs	r2, #3
 800efec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800eff8:	2303      	movs	r3, #3
 800effa:	e015      	b.n	800f028 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 0301 	and.w	r3, r3, #1
 800f006:	2b00      	cmp	r3, #0
 800f008:	d1e4      	bne.n	800efd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f00e:	223f      	movs	r2, #63	@ 0x3f
 800f010:	409a      	lsls	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2201      	movs	r2, #1
 800f01a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	2b02      	cmp	r3, #2
 800f042:	d004      	beq.n	800f04e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2280      	movs	r2, #128	@ 0x80
 800f048:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800f04a:	2301      	movs	r3, #1
 800f04c:	e00c      	b.n	800f068 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2205      	movs	r2, #5
 800f052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f022 0201 	bic.w	r2, r2, #1
 800f064:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f07c:	2300      	movs	r3, #0
 800f07e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f080:	4b8e      	ldr	r3, [pc, #568]	@ (800f2bc <HAL_DMA_IRQHandler+0x248>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a8e      	ldr	r2, [pc, #568]	@ (800f2c0 <HAL_DMA_IRQHandler+0x24c>)
 800f086:	fba2 2303 	umull	r2, r3, r2, r3
 800f08a:	0a9b      	lsrs	r3, r3, #10
 800f08c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f092:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f09e:	2208      	movs	r2, #8
 800f0a0:	409a      	lsls	r2, r3
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	4013      	ands	r3, r2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01a      	beq.n	800f0e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f003 0304 	and.w	r3, r3, #4
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d013      	beq.n	800f0e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f022 0204 	bic.w	r2, r2, #4
 800f0c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0cc:	2208      	movs	r2, #8
 800f0ce:	409a      	lsls	r2, r3
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0d8:	f043 0201 	orr.w	r2, r3, #1
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	409a      	lsls	r2, r3
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	4013      	ands	r3, r2
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d012      	beq.n	800f116 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00b      	beq.n	800f116 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f102:	2201      	movs	r2, #1
 800f104:	409a      	lsls	r2, r3
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f10e:	f043 0202 	orr.w	r2, r3, #2
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f11a:	2204      	movs	r2, #4
 800f11c:	409a      	lsls	r2, r3
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	4013      	ands	r3, r2
 800f122:	2b00      	cmp	r3, #0
 800f124:	d012      	beq.n	800f14c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f003 0302 	and.w	r3, r3, #2
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00b      	beq.n	800f14c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f138:	2204      	movs	r2, #4
 800f13a:	409a      	lsls	r2, r3
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f144:	f043 0204 	orr.w	r2, r3, #4
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f150:	2210      	movs	r2, #16
 800f152:	409a      	lsls	r2, r3
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	4013      	ands	r3, r2
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d043      	beq.n	800f1e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f003 0308 	and.w	r3, r3, #8
 800f166:	2b00      	cmp	r3, #0
 800f168:	d03c      	beq.n	800f1e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f16e:	2210      	movs	r2, #16
 800f170:	409a      	lsls	r2, r3
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f180:	2b00      	cmp	r3, #0
 800f182:	d018      	beq.n	800f1b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d108      	bne.n	800f1a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f196:	2b00      	cmp	r3, #0
 800f198:	d024      	beq.n	800f1e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	4798      	blx	r3
 800f1a2:	e01f      	b.n	800f1e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d01b      	beq.n	800f1e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	4798      	blx	r3
 800f1b4:	e016      	b.n	800f1e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d107      	bne.n	800f1d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f022 0208 	bic.w	r2, r2, #8
 800f1d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d003      	beq.n	800f1e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f1e8:	2220      	movs	r2, #32
 800f1ea:	409a      	lsls	r2, r3
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	4013      	ands	r3, r2
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f000 808f 	beq.w	800f314 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f003 0310 	and.w	r3, r3, #16
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 8087 	beq.w	800f314 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f20a:	2220      	movs	r2, #32
 800f20c:	409a      	lsls	r2, r3
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b05      	cmp	r3, #5
 800f21c:	d136      	bne.n	800f28c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f022 0216 	bic.w	r2, r2, #22
 800f22c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	695a      	ldr	r2, [r3, #20]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f23c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f242:	2b00      	cmp	r3, #0
 800f244:	d103      	bne.n	800f24e <HAL_DMA_IRQHandler+0x1da>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d007      	beq.n	800f25e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f022 0208 	bic.w	r2, r2, #8
 800f25c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f262:	223f      	movs	r2, #63	@ 0x3f
 800f264:	409a      	lsls	r2, r3
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2201      	movs	r2, #1
 800f26e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d07e      	beq.n	800f380 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	4798      	blx	r3
        }
        return;
 800f28a:	e079      	b.n	800f380 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f296:	2b00      	cmp	r3, #0
 800f298:	d01d      	beq.n	800f2d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10d      	bne.n	800f2c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d031      	beq.n	800f314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	4798      	blx	r3
 800f2b8:	e02c      	b.n	800f314 <HAL_DMA_IRQHandler+0x2a0>
 800f2ba:	bf00      	nop
 800f2bc:	20000004 	.word	0x20000004
 800f2c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d023      	beq.n	800f314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	4798      	blx	r3
 800f2d4:	e01e      	b.n	800f314 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10f      	bne.n	800f304 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f022 0210 	bic.w	r2, r2, #16
 800f2f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d003      	beq.n	800f314 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d032      	beq.n	800f382 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d022      	beq.n	800f36e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2205      	movs	r2, #5
 800f32c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f022 0201 	bic.w	r2, r2, #1
 800f33e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	3301      	adds	r3, #1
 800f344:	60bb      	str	r3, [r7, #8]
 800f346:	697a      	ldr	r2, [r7, #20]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d307      	bcc.n	800f35c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1f2      	bne.n	800f340 <HAL_DMA_IRQHandler+0x2cc>
 800f35a:	e000      	b.n	800f35e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800f35c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2201      	movs	r2, #1
 800f362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f372:	2b00      	cmp	r3, #0
 800f374:	d005      	beq.n	800f382 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	4798      	blx	r3
 800f37e:	e000      	b.n	800f382 <HAL_DMA_IRQHandler+0x30e>
        return;
 800f380:	bf00      	nop
    }
  }
}
 800f382:	3718      	adds	r7, #24
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800f394:	4618      	mov	r0, r3
 800f396:	370c      	adds	r7, #12
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800f3bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	2b40      	cmp	r3, #64	@ 0x40
 800f3cc:	d108      	bne.n	800f3e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f3de:	e007      	b.n	800f3f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	60da      	str	r2, [r3, #12]
}
 800f3f0:	bf00      	nop
 800f3f2:	3714      	adds	r7, #20
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr

0800f3fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	3b10      	subs	r3, #16
 800f40c:	4a14      	ldr	r2, [pc, #80]	@ (800f460 <DMA_CalcBaseAndBitshift+0x64>)
 800f40e:	fba2 2303 	umull	r2, r3, r2, r3
 800f412:	091b      	lsrs	r3, r3, #4
 800f414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f416:	4a13      	ldr	r2, [pc, #76]	@ (800f464 <DMA_CalcBaseAndBitshift+0x68>)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	4413      	add	r3, r2
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	461a      	mov	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2b03      	cmp	r3, #3
 800f428:	d909      	bls.n	800f43e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800f432:	f023 0303 	bic.w	r3, r3, #3
 800f436:	1d1a      	adds	r2, r3, #4
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	659a      	str	r2, [r3, #88]	@ 0x58
 800f43c:	e007      	b.n	800f44e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800f446:	f023 0303 	bic.w	r3, r3, #3
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800f452:	4618      	mov	r0, r3
 800f454:	3714      	adds	r7, #20
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	aaaaaaab 	.word	0xaaaaaaab
 800f464:	08024b44 	.word	0x08024b44

0800f468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f470:	2300      	movs	r3, #0
 800f472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	699b      	ldr	r3, [r3, #24]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d11f      	bne.n	800f4c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2b03      	cmp	r3, #3
 800f486:	d856      	bhi.n	800f536 <DMA_CheckFifoParam+0xce>
 800f488:	a201      	add	r2, pc, #4	@ (adr r2, 800f490 <DMA_CheckFifoParam+0x28>)
 800f48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48e:	bf00      	nop
 800f490:	0800f4a1 	.word	0x0800f4a1
 800f494:	0800f4b3 	.word	0x0800f4b3
 800f498:	0800f4a1 	.word	0x0800f4a1
 800f49c:	0800f537 	.word	0x0800f537
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d046      	beq.n	800f53a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f4b0:	e043      	b.n	800f53a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800f4ba:	d140      	bne.n	800f53e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f4c0:	e03d      	b.n	800f53e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	699b      	ldr	r3, [r3, #24]
 800f4c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f4ca:	d121      	bne.n	800f510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2b03      	cmp	r3, #3
 800f4d0:	d837      	bhi.n	800f542 <DMA_CheckFifoParam+0xda>
 800f4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f4d8 <DMA_CheckFifoParam+0x70>)
 800f4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d8:	0800f4e9 	.word	0x0800f4e9
 800f4dc:	0800f4ef 	.word	0x0800f4ef
 800f4e0:	0800f4e9 	.word	0x0800f4e9
 800f4e4:	0800f501 	.word	0x0800f501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ec:	e030      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d025      	beq.n	800f546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f4fe:	e022      	b.n	800f546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f504:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800f508:	d11f      	bne.n	800f54a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800f50e:	e01c      	b.n	800f54a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2b02      	cmp	r3, #2
 800f514:	d903      	bls.n	800f51e <DMA_CheckFifoParam+0xb6>
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b03      	cmp	r3, #3
 800f51a:	d003      	beq.n	800f524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800f51c:	e018      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	73fb      	strb	r3, [r7, #15]
      break;
 800f522:	e015      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00e      	beq.n	800f54e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	73fb      	strb	r3, [r7, #15]
      break;
 800f534:	e00b      	b.n	800f54e <DMA_CheckFifoParam+0xe6>
      break;
 800f536:	bf00      	nop
 800f538:	e00a      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      break;
 800f53a:	bf00      	nop
 800f53c:	e008      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      break;
 800f53e:	bf00      	nop
 800f540:	e006      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      break;
 800f542:	bf00      	nop
 800f544:	e004      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      break;
 800f546:	bf00      	nop
 800f548:	e002      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      break;   
 800f54a:	bf00      	nop
 800f54c:	e000      	b.n	800f550 <DMA_CheckFifoParam+0xe8>
      break;
 800f54e:	bf00      	nop
    }
  } 
  
  return status; 
 800f550:	7bfb      	ldrb	r3, [r7, #15]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3714      	adds	r7, #20
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop

0800f560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f560:	b480      	push	{r7}
 800f562:	b089      	sub	sp, #36	@ 0x24
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800f56a:	2300      	movs	r3, #0
 800f56c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f56e:	2300      	movs	r3, #0
 800f570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800f572:	2300      	movs	r3, #0
 800f574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f576:	2300      	movs	r3, #0
 800f578:	61fb      	str	r3, [r7, #28]
 800f57a:	e16b      	b.n	800f854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f57c:	2201      	movs	r2, #1
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	fa02 f303 	lsl.w	r3, r2, r3
 800f584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	4013      	ands	r3, r2
 800f58e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800f590:	693a      	ldr	r2, [r7, #16]
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	429a      	cmp	r2, r3
 800f596:	f040 815a 	bne.w	800f84e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	f003 0303 	and.w	r3, r3, #3
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d005      	beq.n	800f5b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d130      	bne.n	800f614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	005b      	lsls	r3, r3, #1
 800f5bc:	2203      	movs	r2, #3
 800f5be:	fa02 f303 	lsl.w	r3, r2, r3
 800f5c2:	43db      	mvns	r3, r3
 800f5c4:	69ba      	ldr	r2, [r7, #24]
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	005b      	lsls	r3, r3, #1
 800f5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f5d6:	69ba      	ldr	r2, [r7, #24]
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	69ba      	ldr	r2, [r7, #24]
 800f5e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f5f0:	43db      	mvns	r3, r3
 800f5f2:	69ba      	ldr	r2, [r7, #24]
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	091b      	lsrs	r3, r3, #4
 800f5fe:	f003 0201 	and.w	r2, r3, #1
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	fa02 f303 	lsl.w	r3, r2, r3
 800f608:	69ba      	ldr	r2, [r7, #24]
 800f60a:	4313      	orrs	r3, r2
 800f60c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	69ba      	ldr	r2, [r7, #24]
 800f612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	f003 0303 	and.w	r3, r3, #3
 800f61c:	2b03      	cmp	r3, #3
 800f61e:	d017      	beq.n	800f650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	2203      	movs	r2, #3
 800f62c:	fa02 f303 	lsl.w	r3, r2, r3
 800f630:	43db      	mvns	r3, r3
 800f632:	69ba      	ldr	r2, [r7, #24]
 800f634:	4013      	ands	r3, r2
 800f636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	689a      	ldr	r2, [r3, #8]
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	005b      	lsls	r3, r3, #1
 800f640:	fa02 f303 	lsl.w	r3, r2, r3
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	4313      	orrs	r3, r2
 800f648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	69ba      	ldr	r2, [r7, #24]
 800f64e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	f003 0303 	and.w	r3, r3, #3
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d123      	bne.n	800f6a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	08da      	lsrs	r2, r3, #3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	3208      	adds	r2, #8
 800f664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	f003 0307 	and.w	r3, r3, #7
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	220f      	movs	r2, #15
 800f674:	fa02 f303 	lsl.w	r3, r2, r3
 800f678:	43db      	mvns	r3, r3
 800f67a:	69ba      	ldr	r2, [r7, #24]
 800f67c:	4013      	ands	r3, r2
 800f67e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	691a      	ldr	r2, [r3, #16]
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	f003 0307 	and.w	r3, r3, #7
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	fa02 f303 	lsl.w	r3, r2, r3
 800f690:	69ba      	ldr	r2, [r7, #24]
 800f692:	4313      	orrs	r3, r2
 800f694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	08da      	lsrs	r2, r3, #3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	3208      	adds	r2, #8
 800f69e:	69b9      	ldr	r1, [r7, #24]
 800f6a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	2203      	movs	r2, #3
 800f6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f6b4:	43db      	mvns	r3, r3
 800f6b6:	69ba      	ldr	r2, [r7, #24]
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	f003 0203 	and.w	r2, r3, #3
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	005b      	lsls	r3, r3, #1
 800f6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800f6cc:	69ba      	ldr	r2, [r7, #24]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	69ba      	ldr	r2, [r7, #24]
 800f6d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f000 80b4 	beq.w	800f84e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	4b60      	ldr	r3, [pc, #384]	@ (800f86c <HAL_GPIO_Init+0x30c>)
 800f6ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6ee:	4a5f      	ldr	r2, [pc, #380]	@ (800f86c <HAL_GPIO_Init+0x30c>)
 800f6f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f6f4:	6453      	str	r3, [r2, #68]	@ 0x44
 800f6f6:	4b5d      	ldr	r3, [pc, #372]	@ (800f86c <HAL_GPIO_Init+0x30c>)
 800f6f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f6fe:	60fb      	str	r3, [r7, #12]
 800f700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f702:	4a5b      	ldr	r2, [pc, #364]	@ (800f870 <HAL_GPIO_Init+0x310>)
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	089b      	lsrs	r3, r3, #2
 800f708:	3302      	adds	r3, #2
 800f70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f70e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	f003 0303 	and.w	r3, r3, #3
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	220f      	movs	r2, #15
 800f71a:	fa02 f303 	lsl.w	r3, r2, r3
 800f71e:	43db      	mvns	r3, r3
 800f720:	69ba      	ldr	r2, [r7, #24]
 800f722:	4013      	ands	r3, r2
 800f724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4a52      	ldr	r2, [pc, #328]	@ (800f874 <HAL_GPIO_Init+0x314>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d02b      	beq.n	800f786 <HAL_GPIO_Init+0x226>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4a51      	ldr	r2, [pc, #324]	@ (800f878 <HAL_GPIO_Init+0x318>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d025      	beq.n	800f782 <HAL_GPIO_Init+0x222>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a50      	ldr	r2, [pc, #320]	@ (800f87c <HAL_GPIO_Init+0x31c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d01f      	beq.n	800f77e <HAL_GPIO_Init+0x21e>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a4f      	ldr	r2, [pc, #316]	@ (800f880 <HAL_GPIO_Init+0x320>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d019      	beq.n	800f77a <HAL_GPIO_Init+0x21a>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a4e      	ldr	r2, [pc, #312]	@ (800f884 <HAL_GPIO_Init+0x324>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d013      	beq.n	800f776 <HAL_GPIO_Init+0x216>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a4d      	ldr	r2, [pc, #308]	@ (800f888 <HAL_GPIO_Init+0x328>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d00d      	beq.n	800f772 <HAL_GPIO_Init+0x212>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a4c      	ldr	r2, [pc, #304]	@ (800f88c <HAL_GPIO_Init+0x32c>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d007      	beq.n	800f76e <HAL_GPIO_Init+0x20e>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4a4b      	ldr	r2, [pc, #300]	@ (800f890 <HAL_GPIO_Init+0x330>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d101      	bne.n	800f76a <HAL_GPIO_Init+0x20a>
 800f766:	2307      	movs	r3, #7
 800f768:	e00e      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f76a:	2308      	movs	r3, #8
 800f76c:	e00c      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f76e:	2306      	movs	r3, #6
 800f770:	e00a      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f772:	2305      	movs	r3, #5
 800f774:	e008      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f776:	2304      	movs	r3, #4
 800f778:	e006      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f77a:	2303      	movs	r3, #3
 800f77c:	e004      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f77e:	2302      	movs	r3, #2
 800f780:	e002      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f782:	2301      	movs	r3, #1
 800f784:	e000      	b.n	800f788 <HAL_GPIO_Init+0x228>
 800f786:	2300      	movs	r3, #0
 800f788:	69fa      	ldr	r2, [r7, #28]
 800f78a:	f002 0203 	and.w	r2, r2, #3
 800f78e:	0092      	lsls	r2, r2, #2
 800f790:	4093      	lsls	r3, r2
 800f792:	69ba      	ldr	r2, [r7, #24]
 800f794:	4313      	orrs	r3, r2
 800f796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f798:	4935      	ldr	r1, [pc, #212]	@ (800f870 <HAL_GPIO_Init+0x310>)
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	089b      	lsrs	r3, r3, #2
 800f79e:	3302      	adds	r3, #2
 800f7a0:	69ba      	ldr	r2, [r7, #24]
 800f7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f7a6:	4b3b      	ldr	r3, [pc, #236]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	43db      	mvns	r3, r3
 800f7b0:	69ba      	ldr	r2, [r7, #24]
 800f7b2:	4013      	ands	r3, r2
 800f7b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d003      	beq.n	800f7ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800f7c2:	69ba      	ldr	r2, [r7, #24]
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800f7ca:	4a32      	ldr	r2, [pc, #200]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800f7d0:	4b30      	ldr	r3, [pc, #192]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	43db      	mvns	r3, r3
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	4013      	ands	r3, r2
 800f7de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d003      	beq.n	800f7f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800f7ec:	69ba      	ldr	r2, [r7, #24]
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800f7f4:	4a27      	ldr	r2, [pc, #156]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800f7fa:	4b26      	ldr	r3, [pc, #152]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	43db      	mvns	r3, r3
 800f804:	69ba      	ldr	r2, [r7, #24]
 800f806:	4013      	ands	r3, r2
 800f808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f812:	2b00      	cmp	r3, #0
 800f814:	d003      	beq.n	800f81e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800f816:	69ba      	ldr	r2, [r7, #24]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800f81e:	4a1d      	ldr	r2, [pc, #116]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f824:	4b1b      	ldr	r3, [pc, #108]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	43db      	mvns	r3, r3
 800f82e:	69ba      	ldr	r2, [r7, #24]
 800f830:	4013      	ands	r3, r2
 800f832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d003      	beq.n	800f848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800f840:	69ba      	ldr	r2, [r7, #24]
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	4313      	orrs	r3, r2
 800f846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800f848:	4a12      	ldr	r2, [pc, #72]	@ (800f894 <HAL_GPIO_Init+0x334>)
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	3301      	adds	r3, #1
 800f852:	61fb      	str	r3, [r7, #28]
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	2b0f      	cmp	r3, #15
 800f858:	f67f ae90 	bls.w	800f57c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800f85c:	bf00      	nop
 800f85e:	bf00      	nop
 800f860:	3724      	adds	r7, #36	@ 0x24
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	40023800 	.word	0x40023800
 800f870:	40013800 	.word	0x40013800
 800f874:	40020000 	.word	0x40020000
 800f878:	40020400 	.word	0x40020400
 800f87c:	40020800 	.word	0x40020800
 800f880:	40020c00 	.word	0x40020c00
 800f884:	40021000 	.word	0x40021000
 800f888:	40021400 	.word	0x40021400
 800f88c:	40021800 	.word	0x40021800
 800f890:	40021c00 	.word	0x40021c00
 800f894:	40013c00 	.word	0x40013c00

0800f898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	807b      	strh	r3, [r7, #2]
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f8a8:	787b      	ldrb	r3, [r7, #1]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d003      	beq.n	800f8b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f8ae:	887a      	ldrh	r2, [r7, #2]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f8b4:	e003      	b.n	800f8be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f8b6:	887b      	ldrh	r3, [r7, #2]
 800f8b8:	041a      	lsls	r2, r3, #16
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	619a      	str	r2, [r3, #24]
}
 800f8be:	bf00      	nop
 800f8c0:	370c      	adds	r7, #12
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
	...

0800f8cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f8d6:	4b08      	ldr	r3, [pc, #32]	@ (800f8f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f8d8:	695a      	ldr	r2, [r3, #20]
 800f8da:	88fb      	ldrh	r3, [r7, #6]
 800f8dc:	4013      	ands	r3, r2
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d006      	beq.n	800f8f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f8e2:	4a05      	ldr	r2, [pc, #20]	@ (800f8f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f8e4:	88fb      	ldrh	r3, [r7, #6]
 800f8e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f8e8:	88fb      	ldrh	r3, [r7, #6]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7f2 fac2 	bl	8001e74 <HAL_GPIO_EXTI_Callback>
  }
}
 800f8f0:	bf00      	nop
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	40013c00 	.word	0x40013c00

0800f8fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d101      	bne.n	800f90e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e12b      	b.n	800fb66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f914:	b2db      	uxtb	r3, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d106      	bne.n	800f928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2200      	movs	r2, #0
 800f91e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7f3 fde6 	bl	80034f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2224      	movs	r2, #36	@ 0x24
 800f92c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f022 0201 	bic.w	r2, r2, #1
 800f93e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f94e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f95e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800f960:	f003 fc04 	bl	801316c <HAL_RCC_GetPCLK1Freq>
 800f964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	4a81      	ldr	r2, [pc, #516]	@ (800fb70 <HAL_I2C_Init+0x274>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d807      	bhi.n	800f980 <HAL_I2C_Init+0x84>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	4a80      	ldr	r2, [pc, #512]	@ (800fb74 <HAL_I2C_Init+0x278>)
 800f974:	4293      	cmp	r3, r2
 800f976:	bf94      	ite	ls
 800f978:	2301      	movls	r3, #1
 800f97a:	2300      	movhi	r3, #0
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	e006      	b.n	800f98e <HAL_I2C_Init+0x92>
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	4a7d      	ldr	r2, [pc, #500]	@ (800fb78 <HAL_I2C_Init+0x27c>)
 800f984:	4293      	cmp	r3, r2
 800f986:	bf94      	ite	ls
 800f988:	2301      	movls	r3, #1
 800f98a:	2300      	movhi	r3, #0
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800f992:	2301      	movs	r3, #1
 800f994:	e0e7      	b.n	800fb66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	4a78      	ldr	r2, [pc, #480]	@ (800fb7c <HAL_I2C_Init+0x280>)
 800f99a:	fba2 2303 	umull	r2, r3, r2, r3
 800f99e:	0c9b      	lsrs	r3, r3, #18
 800f9a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	430a      	orrs	r2, r1
 800f9b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	6a1b      	ldr	r3, [r3, #32]
 800f9bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	4a6a      	ldr	r2, [pc, #424]	@ (800fb70 <HAL_I2C_Init+0x274>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d802      	bhi.n	800f9d0 <HAL_I2C_Init+0xd4>
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	e009      	b.n	800f9e4 <HAL_I2C_Init+0xe8>
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800f9d6:	fb02 f303 	mul.w	r3, r2, r3
 800f9da:	4a69      	ldr	r2, [pc, #420]	@ (800fb80 <HAL_I2C_Init+0x284>)
 800f9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f9e0:	099b      	lsrs	r3, r3, #6
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	6812      	ldr	r2, [r2, #0]
 800f9e8:	430b      	orrs	r3, r1
 800f9ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	69db      	ldr	r3, [r3, #28]
 800f9f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800f9f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	495c      	ldr	r1, [pc, #368]	@ (800fb70 <HAL_I2C_Init+0x274>)
 800fa00:	428b      	cmp	r3, r1
 800fa02:	d819      	bhi.n	800fa38 <HAL_I2C_Init+0x13c>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	1e59      	subs	r1, r3, #1
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	005b      	lsls	r3, r3, #1
 800fa0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa12:	1c59      	adds	r1, r3, #1
 800fa14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800fa18:	400b      	ands	r3, r1
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00a      	beq.n	800fa34 <HAL_I2C_Init+0x138>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	1e59      	subs	r1, r3, #1
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	005b      	lsls	r3, r3, #1
 800fa28:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa32:	e051      	b.n	800fad8 <HAL_I2C_Init+0x1dc>
 800fa34:	2304      	movs	r3, #4
 800fa36:	e04f      	b.n	800fad8 <HAL_I2C_Init+0x1dc>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d111      	bne.n	800fa64 <HAL_I2C_Init+0x168>
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	1e58      	subs	r0, r3, #1
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6859      	ldr	r1, [r3, #4]
 800fa48:	460b      	mov	r3, r1
 800fa4a:	005b      	lsls	r3, r3, #1
 800fa4c:	440b      	add	r3, r1
 800fa4e:	fbb0 f3f3 	udiv	r3, r0, r3
 800fa52:	3301      	adds	r3, #1
 800fa54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	bf0c      	ite	eq
 800fa5c:	2301      	moveq	r3, #1
 800fa5e:	2300      	movne	r3, #0
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	e012      	b.n	800fa8a <HAL_I2C_Init+0x18e>
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	1e58      	subs	r0, r3, #1
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6859      	ldr	r1, [r3, #4]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	440b      	add	r3, r1
 800fa72:	0099      	lsls	r1, r3, #2
 800fa74:	440b      	add	r3, r1
 800fa76:	fbb0 f3f3 	udiv	r3, r0, r3
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	bf0c      	ite	eq
 800fa84:	2301      	moveq	r3, #1
 800fa86:	2300      	movne	r3, #0
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d001      	beq.n	800fa92 <HAL_I2C_Init+0x196>
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e022      	b.n	800fad8 <HAL_I2C_Init+0x1dc>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10e      	bne.n	800fab8 <HAL_I2C_Init+0x1bc>
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	1e58      	subs	r0, r3, #1
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6859      	ldr	r1, [r3, #4]
 800faa2:	460b      	mov	r3, r1
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	440b      	add	r3, r1
 800faa8:	fbb0 f3f3 	udiv	r3, r0, r3
 800faac:	3301      	adds	r3, #1
 800faae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fab6:	e00f      	b.n	800fad8 <HAL_I2C_Init+0x1dc>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	1e58      	subs	r0, r3, #1
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6859      	ldr	r1, [r3, #4]
 800fac0:	460b      	mov	r3, r1
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	440b      	add	r3, r1
 800fac6:	0099      	lsls	r1, r3, #2
 800fac8:	440b      	add	r3, r1
 800faca:	fbb0 f3f3 	udiv	r3, r0, r3
 800face:	3301      	adds	r3, #1
 800fad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fad4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fad8:	6879      	ldr	r1, [r7, #4]
 800fada:	6809      	ldr	r1, [r1, #0]
 800fadc:	4313      	orrs	r3, r2
 800fade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	69da      	ldr	r2, [r3, #28]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6a1b      	ldr	r3, [r3, #32]
 800faf2:	431a      	orrs	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	430a      	orrs	r2, r1
 800fafa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800fb06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	6911      	ldr	r1, [r2, #16]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	68d2      	ldr	r2, [r2, #12]
 800fb12:	4311      	orrs	r1, r2
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	6812      	ldr	r2, [r2, #0]
 800fb18:	430b      	orrs	r3, r1
 800fb1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	695a      	ldr	r2, [r3, #20]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	431a      	orrs	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	430a      	orrs	r2, r1
 800fb36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f042 0201 	orr.w	r2, r2, #1
 800fb46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2220      	movs	r2, #32
 800fb52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800fb64:	2300      	movs	r3, #0
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	000186a0 	.word	0x000186a0
 800fb74:	001e847f 	.word	0x001e847f
 800fb78:	003d08ff 	.word	0x003d08ff
 800fb7c:	431bde83 	.word	0x431bde83
 800fb80:	10624dd3 	.word	0x10624dd3

0800fb84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b088      	sub	sp, #32
 800fb88:	af02      	add	r7, sp, #8
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	4608      	mov	r0, r1
 800fb8e:	4611      	mov	r1, r2
 800fb90:	461a      	mov	r2, r3
 800fb92:	4603      	mov	r3, r0
 800fb94:	817b      	strh	r3, [r7, #10]
 800fb96:	460b      	mov	r3, r1
 800fb98:	813b      	strh	r3, [r7, #8]
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800fb9e:	f7fd feab 	bl	800d8f8 <HAL_GetTick>
 800fba2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b20      	cmp	r3, #32
 800fbae:	f040 80d9 	bne.w	800fd64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	2319      	movs	r3, #25
 800fbb8:	2201      	movs	r2, #1
 800fbba:	496d      	ldr	r1, [pc, #436]	@ (800fd70 <HAL_I2C_Mem_Write+0x1ec>)
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f001 fa4b 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d001      	beq.n	800fbcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800fbc8:	2302      	movs	r3, #2
 800fbca:	e0cc      	b.n	800fd66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d101      	bne.n	800fbda <HAL_I2C_Mem_Write+0x56>
 800fbd6:	2302      	movs	r3, #2
 800fbd8:	e0c5      	b.n	800fd66 <HAL_I2C_Mem_Write+0x1e2>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f003 0301 	and.w	r3, r3, #1
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d007      	beq.n	800fc00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f042 0201 	orr.w	r2, r2, #1
 800fbfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fc0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2221      	movs	r2, #33	@ 0x21
 800fc14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2240      	movs	r2, #64	@ 0x40
 800fc1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6a3a      	ldr	r2, [r7, #32]
 800fc2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fc30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	4a4d      	ldr	r2, [pc, #308]	@ (800fd74 <HAL_I2C_Mem_Write+0x1f0>)
 800fc40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800fc42:	88f8      	ldrh	r0, [r7, #6]
 800fc44:	893a      	ldrh	r2, [r7, #8]
 800fc46:	8979      	ldrh	r1, [r7, #10]
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	9301      	str	r3, [sp, #4]
 800fc4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	4603      	mov	r3, r0
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 fec8 	bl	80109e8 <I2C_RequestMemoryWrite>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d052      	beq.n	800fd04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e081      	b.n	800fd66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc62:	697a      	ldr	r2, [r7, #20]
 800fc64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	f001 facc 	bl	8011204 <I2C_WaitOnTXEFlagUntilTimeout>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00d      	beq.n	800fc8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc76:	2b04      	cmp	r3, #4
 800fc78:	d107      	bne.n	800fc8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fc88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e06b      	b.n	800fd66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc92:	781a      	ldrb	r2, [r3, #0]
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	f003 0304 	and.w	r3, r3, #4
 800fcc8:	2b04      	cmp	r3, #4
 800fcca:	d11b      	bne.n	800fd04 <HAL_I2C_Mem_Write+0x180>
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d017      	beq.n	800fd04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcd8:	781a      	ldrb	r2, [r3, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fce4:	1c5a      	adds	r2, r3, #1
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1aa      	bne.n	800fc62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f001 fab8 	bl	8011286 <I2C_WaitOnBTFFlagUntilTimeout>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00d      	beq.n	800fd38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd20:	2b04      	cmp	r3, #4
 800fd22:	d107      	bne.n	800fd34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fd32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800fd34:	2301      	movs	r3, #1
 800fd36:	e016      	b.n	800fd66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fd46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2220      	movs	r2, #32
 800fd4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	e000      	b.n	800fd66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800fd64:	2302      	movs	r3, #2
  }
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3718      	adds	r7, #24
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	00100002 	.word	0x00100002
 800fd74:	ffff0000 	.word	0xffff0000

0800fd78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b08c      	sub	sp, #48	@ 0x30
 800fd7c:	af02      	add	r7, sp, #8
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	4608      	mov	r0, r1
 800fd82:	4611      	mov	r1, r2
 800fd84:	461a      	mov	r2, r3
 800fd86:	4603      	mov	r3, r0
 800fd88:	817b      	strh	r3, [r7, #10]
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	813b      	strh	r3, [r7, #8]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800fd92:	f7fd fdb1 	bl	800d8f8 <HAL_GetTick>
 800fd96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b20      	cmp	r3, #32
 800fda2:	f040 8208 	bne.w	80101b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800fda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	2319      	movs	r3, #25
 800fdac:	2201      	movs	r2, #1
 800fdae:	497b      	ldr	r1, [pc, #492]	@ (800ff9c <HAL_I2C_Mem_Read+0x224>)
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f001 f951 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d001      	beq.n	800fdc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800fdbc:	2302      	movs	r3, #2
 800fdbe:	e1fb      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d101      	bne.n	800fdce <HAL_I2C_Mem_Read+0x56>
 800fdca:	2302      	movs	r3, #2
 800fdcc:	e1f4      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f003 0301 	and.w	r3, r3, #1
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d007      	beq.n	800fdf4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f042 0201 	orr.w	r2, r2, #1
 800fdf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800fe02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2222      	movs	r2, #34	@ 0x22
 800fe08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2240      	movs	r2, #64	@ 0x40
 800fe10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800fe24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	4a5b      	ldr	r2, [pc, #364]	@ (800ffa0 <HAL_I2C_Mem_Read+0x228>)
 800fe34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800fe36:	88f8      	ldrh	r0, [r7, #6]
 800fe38:	893a      	ldrh	r2, [r7, #8]
 800fe3a:	8979      	ldrh	r1, [r7, #10]
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3e:	9301      	str	r3, [sp, #4]
 800fe40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	4603      	mov	r3, r0
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f000 fe64 	bl	8010b14 <I2C_RequestMemoryRead>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	e1b0      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d113      	bne.n	800fe86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe5e:	2300      	movs	r3, #0
 800fe60:	623b      	str	r3, [r7, #32]
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	695b      	ldr	r3, [r3, #20]
 800fe68:	623b      	str	r3, [r7, #32]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	699b      	ldr	r3, [r3, #24]
 800fe70:	623b      	str	r3, [r7, #32]
 800fe72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	681a      	ldr	r2, [r3, #0]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fe82:	601a      	str	r2, [r3, #0]
 800fe84:	e184      	b.n	8010190 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d11b      	bne.n	800fec6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fe9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fe9e:	2300      	movs	r3, #0
 800fea0:	61fb      	str	r3, [r7, #28]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	695b      	ldr	r3, [r3, #20]
 800fea8:	61fb      	str	r3, [r7, #28]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	699b      	ldr	r3, [r3, #24]
 800feb0:	61fb      	str	r3, [r7, #28]
 800feb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	e164      	b.n	8010190 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d11b      	bne.n	800ff06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fedc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800feec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800feee:	2300      	movs	r3, #0
 800fef0:	61bb      	str	r3, [r7, #24]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	695b      	ldr	r3, [r3, #20]
 800fef8:	61bb      	str	r3, [r7, #24]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	61bb      	str	r3, [r7, #24]
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	e144      	b.n	8010190 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ff06:	2300      	movs	r3, #0
 800ff08:	617b      	str	r3, [r7, #20]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	695b      	ldr	r3, [r3, #20]
 800ff10:	617b      	str	r3, [r7, #20]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	699b      	ldr	r3, [r3, #24]
 800ff18:	617b      	str	r3, [r7, #20]
 800ff1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ff1c:	e138      	b.n	8010190 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff22:	2b03      	cmp	r3, #3
 800ff24:	f200 80f1 	bhi.w	801010a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d123      	bne.n	800ff78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ff30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff34:	68f8      	ldr	r0, [r7, #12]
 800ff36:	f001 f9e7 	bl	8011308 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ff40:	2301      	movs	r3, #1
 800ff42:	e139      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff4e:	b2d2      	uxtb	r2, r2
 800ff50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff56:	1c5a      	adds	r2, r3, #1
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff60:	3b01      	subs	r3, #1
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ff76:	e10b      	b.n	8010190 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	d14e      	bne.n	801001e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ff80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff86:	2200      	movs	r2, #0
 800ff88:	4906      	ldr	r1, [pc, #24]	@ (800ffa4 <HAL_I2C_Mem_Read+0x22c>)
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f001 f864 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d008      	beq.n	800ffa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	e10e      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
 800ff9a:	bf00      	nop
 800ff9c:	00100002 	.word	0x00100002
 800ffa0:	ffff0000 	.word	0xffff0000
 800ffa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ffb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	691a      	ldr	r2, [r3, #16]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc2:	b2d2      	uxtb	r2, r2
 800ffc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffca:	1c5a      	adds	r2, r3, #1
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	3b01      	subs	r3, #1
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	691a      	ldr	r2, [r3, #16]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff4:	b2d2      	uxtb	r2, r2
 800fff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fffc:	1c5a      	adds	r2, r3, #1
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010006:	3b01      	subs	r3, #1
 8010008:	b29a      	uxth	r2, r3
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010012:	b29b      	uxth	r3, r3
 8010014:	3b01      	subs	r3, #1
 8010016:	b29a      	uxth	r2, r3
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801001c:	e0b8      	b.n	8010190 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801001e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010024:	2200      	movs	r2, #0
 8010026:	4966      	ldr	r1, [pc, #408]	@ (80101c0 <HAL_I2C_Mem_Read+0x448>)
 8010028:	68f8      	ldr	r0, [r7, #12]
 801002a:	f001 f815 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d001      	beq.n	8010038 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	e0bf      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	691a      	ldr	r2, [r3, #16]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010052:	b2d2      	uxtb	r2, r2
 8010054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801005a:	1c5a      	adds	r2, r3, #1
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010064:	3b01      	subs	r3, #1
 8010066:	b29a      	uxth	r2, r3
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010070:	b29b      	uxth	r3, r3
 8010072:	3b01      	subs	r3, #1
 8010074:	b29a      	uxth	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801007a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010080:	2200      	movs	r2, #0
 8010082:	494f      	ldr	r1, [pc, #316]	@ (80101c0 <HAL_I2C_Mem_Read+0x448>)
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	f000 ffe7 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d001      	beq.n	8010094 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	e091      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80100a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	691a      	ldr	r2, [r3, #16]
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ae:	b2d2      	uxtb	r2, r2
 80100b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100b6:	1c5a      	adds	r2, r3, #1
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100c0:	3b01      	subs	r3, #1
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	3b01      	subs	r3, #1
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	691a      	ldr	r2, [r3, #16]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e0:	b2d2      	uxtb	r2, r2
 80100e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e8:	1c5a      	adds	r2, r3, #1
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100f2:	3b01      	subs	r3, #1
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100fe:	b29b      	uxth	r3, r3
 8010100:	3b01      	subs	r3, #1
 8010102:	b29a      	uxth	r2, r3
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010108:	e042      	b.n	8010190 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801010a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801010c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f001 f8fa 	bl	8011308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010114:	4603      	mov	r3, r0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d001      	beq.n	801011e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e04c      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	691a      	ldr	r2, [r3, #16]
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010128:	b2d2      	uxtb	r2, r2
 801012a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010130:	1c5a      	adds	r2, r3, #1
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801013a:	3b01      	subs	r3, #1
 801013c:	b29a      	uxth	r2, r3
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010146:	b29b      	uxth	r3, r3
 8010148:	3b01      	subs	r3, #1
 801014a:	b29a      	uxth	r2, r3
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	695b      	ldr	r3, [r3, #20]
 8010156:	f003 0304 	and.w	r3, r3, #4
 801015a:	2b04      	cmp	r3, #4
 801015c:	d118      	bne.n	8010190 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	691a      	ldr	r2, [r3, #16]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010168:	b2d2      	uxtb	r2, r2
 801016a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010170:	1c5a      	adds	r2, r3, #1
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801017a:	3b01      	subs	r3, #1
 801017c:	b29a      	uxth	r2, r3
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010186:	b29b      	uxth	r3, r3
 8010188:	3b01      	subs	r3, #1
 801018a:	b29a      	uxth	r2, r3
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010194:	2b00      	cmp	r3, #0
 8010196:	f47f aec2 	bne.w	800ff1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2220      	movs	r2, #32
 801019e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2200      	movs	r2, #0
 80101ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80101b2:	2300      	movs	r3, #0
 80101b4:	e000      	b.n	80101b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80101b6:	2302      	movs	r3, #2
  }
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3728      	adds	r7, #40	@ 0x28
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	00010004 	.word	0x00010004

080101c4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b08c      	sub	sp, #48	@ 0x30
 80101c8:	af02      	add	r7, sp, #8
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	4608      	mov	r0, r1
 80101ce:	4611      	mov	r1, r2
 80101d0:	461a      	mov	r2, r3
 80101d2:	4603      	mov	r3, r0
 80101d4:	817b      	strh	r3, [r7, #10]
 80101d6:	460b      	mov	r3, r1
 80101d8:	813b      	strh	r3, [r7, #8]
 80101da:	4613      	mov	r3, r2
 80101dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80101de:	f7fd fb8b 	bl	800d8f8 <HAL_GetTick>
 80101e2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b20      	cmp	r3, #32
 80101f2:	f040 8176 	bne.w	80104e2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80101f6:	4b95      	ldr	r3, [pc, #596]	@ (801044c <HAL_I2C_Mem_Read_DMA+0x288>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	08db      	lsrs	r3, r3, #3
 80101fc:	4a94      	ldr	r2, [pc, #592]	@ (8010450 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80101fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010202:	0a1a      	lsrs	r2, r3, #8
 8010204:	4613      	mov	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4413      	add	r3, r2
 801020a:	009a      	lsls	r2, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	3b01      	subs	r3, #1
 8010214:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d116      	bne.n	801024a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2200      	movs	r2, #0
 8010220:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2220      	movs	r2, #32
 8010226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010236:	f043 0220 	orr.w	r2, r3, #32
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2200      	movs	r2, #0
 8010242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	e14c      	b.n	80104e4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	f003 0302 	and.w	r3, r3, #2
 8010254:	2b02      	cmp	r3, #2
 8010256:	d0db      	beq.n	8010210 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801025e:	2b01      	cmp	r3, #1
 8010260:	d101      	bne.n	8010266 <HAL_I2C_Mem_Read_DMA+0xa2>
 8010262:	2302      	movs	r3, #2
 8010264:	e13e      	b.n	80104e4 <HAL_I2C_Mem_Read_DMA+0x320>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2201      	movs	r2, #1
 801026a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f003 0301 	and.w	r3, r3, #1
 8010278:	2b01      	cmp	r3, #1
 801027a:	d007      	beq.n	801028c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f042 0201 	orr.w	r2, r2, #1
 801028a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801029a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2222      	movs	r2, #34	@ 0x22
 80102a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2240      	movs	r2, #64	@ 0x40
 80102a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2200      	movs	r2, #0
 80102b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80102bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	4a62      	ldr	r2, [pc, #392]	@ (8010454 <HAL_I2C_Mem_Read_DMA+0x290>)
 80102cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80102ce:	897a      	ldrh	r2, [r7, #10]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80102d4:	893a      	ldrh	r2, [r7, #8]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80102da:	88fa      	ldrh	r2, [r7, #6]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2200      	movs	r2, #0
 80102e4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f000 80cc 	beq.w	8010488 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d02d      	beq.n	8010354 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102fc:	4a56      	ldr	r2, [pc, #344]	@ (8010458 <HAL_I2C_Mem_Read_DMA+0x294>)
 80102fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010304:	4a55      	ldr	r2, [pc, #340]	@ (801045c <HAL_I2C_Mem_Read_DMA+0x298>)
 8010306:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801030c:	2200      	movs	r2, #0
 801030e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010314:	2200      	movs	r2, #0
 8010316:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801031c:	2200      	movs	r2, #0
 801031e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010324:	2200      	movs	r2, #0
 8010326:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	3310      	adds	r3, #16
 8010332:	4619      	mov	r1, r3
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010338:	461a      	mov	r2, r3
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801033e:	f7fe fdaf 	bl	800eea0 <HAL_DMA_Start_IT>
 8010342:	4603      	mov	r3, r0
 8010344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010348:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801034c:	2b00      	cmp	r3, #0
 801034e:	f040 8087 	bne.w	8010460 <HAL_I2C_Mem_Read_DMA+0x29c>
 8010352:	e013      	b.n	801037c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2220      	movs	r2, #32
 8010358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2200      	movs	r2, #0
 8010360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010368:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8010378:	2301      	movs	r3, #1
 801037a:	e0b3      	b.n	80104e4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801037c:	88f8      	ldrh	r0, [r7, #6]
 801037e:	893a      	ldrh	r2, [r7, #8]
 8010380:	8979      	ldrh	r1, [r7, #10]
 8010382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010384:	9301      	str	r3, [sp, #4]
 8010386:	2323      	movs	r3, #35	@ 0x23
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	4603      	mov	r3, r0
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	f000 fbc1 	bl	8010b14 <I2C_RequestMemoryRead>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d023      	beq.n	80103e0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801039c:	4618      	mov	r0, r3
 801039e:	f7fe fe47 	bl	800f030 <HAL_DMA_Abort_IT>
 80103a2:	4603      	mov	r3, r0
 80103a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ac:	2200      	movs	r2, #0
 80103ae:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80103be:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2200      	movs	r2, #0
 80103ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f022 0201 	bic.w	r2, r2, #1
 80103da:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80103dc:	2301      	movs	r3, #1
 80103de:	e081      	b.n	80104e4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d108      	bne.n	80103fa <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80103f6:	601a      	str	r2, [r3, #0]
 80103f8:	e007      	b.n	801040a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	685a      	ldr	r2, [r3, #4]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010408:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801040a:	2300      	movs	r3, #0
 801040c:	61bb      	str	r3, [r7, #24]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	61bb      	str	r3, [r7, #24]
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	699b      	ldr	r3, [r3, #24]
 801041c:	61bb      	str	r3, [r7, #24]
 801041e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	2200      	movs	r2, #0
 8010424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	685a      	ldr	r2, [r3, #4]
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010436:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010446:	605a      	str	r2, [r3, #4]
 8010448:	e049      	b.n	80104de <HAL_I2C_Mem_Read_DMA+0x31a>
 801044a:	bf00      	nop
 801044c:	20000004 	.word	0x20000004
 8010450:	14f8b589 	.word	0x14f8b589
 8010454:	ffff0000 	.word	0xffff0000
 8010458:	08010ce5 	.word	0x08010ce5
 801045c:	08010e8f 	.word	0x08010e8f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2220      	movs	r2, #32
 8010464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2200      	movs	r2, #0
 801046c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010474:	f043 0210 	orr.w	r2, r3, #16
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2200      	movs	r2, #0
 8010480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8010484:	2301      	movs	r3, #1
 8010486:	e02d      	b.n	80104e4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8010488:	88f8      	ldrh	r0, [r7, #6]
 801048a:	893a      	ldrh	r2, [r7, #8]
 801048c:	8979      	ldrh	r1, [r7, #10]
 801048e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010490:	9301      	str	r3, [sp, #4]
 8010492:	2323      	movs	r3, #35	@ 0x23
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	4603      	mov	r3, r0
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f000 fb3b 	bl	8010b14 <I2C_RequestMemoryRead>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d001      	beq.n	80104a8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
 80104a6:	e01d      	b.n	80104e4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80104a8:	2300      	movs	r3, #0
 80104aa:	617b      	str	r3, [r7, #20]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	695b      	ldr	r3, [r3, #20]
 80104b2:	617b      	str	r3, [r7, #20]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	699b      	ldr	r3, [r3, #24]
 80104ba:	617b      	str	r3, [r7, #20]
 80104bc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80104cc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2220      	movs	r2, #32
 80104d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2200      	movs	r2, #0
 80104da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	e000      	b.n	80104e4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80104e2:	2302      	movs	r3, #2
  }
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3728      	adds	r7, #40	@ 0x28
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b08a      	sub	sp, #40	@ 0x28
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	695b      	ldr	r3, [r3, #20]
 80104fa:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8010504:	2300      	movs	r3, #0
 8010506:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801050e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010510:	6a3b      	ldr	r3, [r7, #32]
 8010512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00d      	beq.n	8010536 <HAL_I2C_ER_IRQHandler+0x4a>
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010520:	2b00      	cmp	r3, #0
 8010522:	d008      	beq.n	8010536 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8010524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010526:	f043 0301 	orr.w	r3, r3, #1
 801052a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010534:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010536:	6a3b      	ldr	r3, [r7, #32]
 8010538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00d      	beq.n	801055c <HAL_I2C_ER_IRQHandler+0x70>
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010546:	2b00      	cmp	r3, #0
 8010548:	d008      	beq.n	801055c <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054c:	f043 0302 	orr.w	r3, r3, #2
 8010550:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 801055a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801055c:	6a3b      	ldr	r3, [r7, #32]
 801055e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010562:	2b00      	cmp	r3, #0
 8010564:	d03e      	beq.n	80105e4 <HAL_I2C_ER_IRQHandler+0xf8>
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801056c:	2b00      	cmp	r3, #0
 801056e:	d039      	beq.n	80105e4 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8010570:	7efb      	ldrb	r3, [r7, #27]
 8010572:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010578:	b29b      	uxth	r3, r3
 801057a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010582:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010588:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801058a:	7ebb      	ldrb	r3, [r7, #26]
 801058c:	2b20      	cmp	r3, #32
 801058e:	d112      	bne.n	80105b6 <HAL_I2C_ER_IRQHandler+0xca>
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d10f      	bne.n	80105b6 <HAL_I2C_ER_IRQHandler+0xca>
 8010596:	7cfb      	ldrb	r3, [r7, #19]
 8010598:	2b21      	cmp	r3, #33	@ 0x21
 801059a:	d008      	beq.n	80105ae <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801059c:	7cfb      	ldrb	r3, [r7, #19]
 801059e:	2b29      	cmp	r3, #41	@ 0x29
 80105a0:	d005      	beq.n	80105ae <HAL_I2C_ER_IRQHandler+0xc2>
 80105a2:	7cfb      	ldrb	r3, [r7, #19]
 80105a4:	2b28      	cmp	r3, #40	@ 0x28
 80105a6:	d106      	bne.n	80105b6 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2b21      	cmp	r3, #33	@ 0x21
 80105ac:	d103      	bne.n	80105b6 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 f878 	bl	80106a4 <I2C_Slave_AF>
 80105b4:	e016      	b.n	80105e4 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80105be:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80105c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c2:	f043 0304 	orr.w	r3, r3, #4
 80105c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80105c8:	7efb      	ldrb	r3, [r7, #27]
 80105ca:	2b10      	cmp	r3, #16
 80105cc:	d002      	beq.n	80105d4 <HAL_I2C_ER_IRQHandler+0xe8>
 80105ce:	7efb      	ldrb	r3, [r7, #27]
 80105d0:	2b40      	cmp	r3, #64	@ 0x40
 80105d2:	d107      	bne.n	80105e4 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80105e2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00d      	beq.n	801060a <HAL_I2C_ER_IRQHandler+0x11e>
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d008      	beq.n	801060a <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80105f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fa:	f043 0308 	orr.w	r3, r3, #8
 80105fe:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8010608:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060c:	2b00      	cmp	r3, #0
 801060e:	d008      	beq.n	8010622 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010616:	431a      	orrs	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f000 f8b1 	bl	8010784 <I2C_ITError>
  }
}
 8010622:	bf00      	nop
 8010624:	3728      	adds	r7, #40	@ 0x28
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801062a:	b480      	push	{r7}
 801062c:	b083      	sub	sp, #12
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010632:	bf00      	nop
 8010634:	370c      	adds	r7, #12
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr

0801063e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801063e:	b480      	push	{r7}
 8010640:	b083      	sub	sp, #12
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010646:	bf00      	nop
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010652:	b480      	push	{r7}
 8010654:	b083      	sub	sp, #12
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801065a:	bf00      	nop
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010666:	b480      	push	{r7}
 8010668:	b083      	sub	sp, #12
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801066e:	bf00      	nop
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr

0801067a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801067a:	b480      	push	{r7}
 801067c:	b083      	sub	sp, #12
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010682:	bf00      	nop
 8010684:	370c      	adds	r7, #12
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr

0801068e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801068e:	b480      	push	{r7}
 8010690:	b083      	sub	sp, #12
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
	...

080106a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80106b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b08      	cmp	r3, #8
 80106be:	d002      	beq.n	80106c6 <I2C_Slave_AF+0x22>
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	2b20      	cmp	r3, #32
 80106c4:	d129      	bne.n	801071a <I2C_Slave_AF+0x76>
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	2b28      	cmp	r3, #40	@ 0x28
 80106ca:	d126      	bne.n	801071a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4a2c      	ldr	r2, [pc, #176]	@ (8010780 <I2C_Slave_AF+0xdc>)
 80106d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	685a      	ldr	r2, [r3, #4]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80106e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80106ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80106fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2220      	movs	r2, #32
 8010706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f7ff ffa7 	bl	8010666 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8010718:	e02e      	b.n	8010778 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801071a:	7bfb      	ldrb	r3, [r7, #15]
 801071c:	2b21      	cmp	r3, #33	@ 0x21
 801071e:	d126      	bne.n	801076e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	4a17      	ldr	r2, [pc, #92]	@ (8010780 <I2C_Slave_AF+0xdc>)
 8010724:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2221      	movs	r2, #33	@ 0x21
 801072a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2220      	movs	r2, #32
 8010730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	685a      	ldr	r2, [r3, #4]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801074a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8010754:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010764:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff ff69 	bl	801063e <HAL_I2C_SlaveTxCpltCallback>
}
 801076c:	e004      	b.n	8010778 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8010776:	615a      	str	r2, [r3, #20]
}
 8010778:	bf00      	nop
 801077a:	3710      	adds	r7, #16
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	ffff0000 	.word	0xffff0000

08010784 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010792:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801079a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801079c:	7bbb      	ldrb	r3, [r7, #14]
 801079e:	2b10      	cmp	r3, #16
 80107a0:	d002      	beq.n	80107a8 <I2C_ITError+0x24>
 80107a2:	7bbb      	ldrb	r3, [r7, #14]
 80107a4:	2b40      	cmp	r3, #64	@ 0x40
 80107a6:	d10a      	bne.n	80107be <I2C_ITError+0x3a>
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	2b22      	cmp	r3, #34	@ 0x22
 80107ac:	d107      	bne.n	80107be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80107bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80107be:	7bfb      	ldrb	r3, [r7, #15]
 80107c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80107c4:	2b28      	cmp	r3, #40	@ 0x28
 80107c6:	d107      	bne.n	80107d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2228      	movs	r2, #40	@ 0x28
 80107d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80107d6:	e015      	b.n	8010804 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107e6:	d00a      	beq.n	80107fe <I2C_ITError+0x7a>
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	2b60      	cmp	r3, #96	@ 0x60
 80107ec:	d007      	beq.n	80107fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2220      	movs	r2, #32
 80107f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801080e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010812:	d162      	bne.n	80108da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	685a      	ldr	r2, [r3, #4]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010822:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2b01      	cmp	r3, #1
 8010830:	d020      	beq.n	8010874 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010836:	4a6a      	ldr	r2, [pc, #424]	@ (80109e0 <I2C_ITError+0x25c>)
 8010838:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801083e:	4618      	mov	r0, r3
 8010840:	f7fe fbf6 	bl	800f030 <HAL_DMA_Abort_IT>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	f000 8089 	beq.w	801095e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f022 0201 	bic.w	r2, r2, #1
 801085a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2220      	movs	r2, #32
 8010860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801086e:	4610      	mov	r0, r2
 8010870:	4798      	blx	r3
 8010872:	e074      	b.n	801095e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010878:	4a59      	ldr	r2, [pc, #356]	@ (80109e0 <I2C_ITError+0x25c>)
 801087a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010880:	4618      	mov	r0, r3
 8010882:	f7fe fbd5 	bl	800f030 <HAL_DMA_Abort_IT>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d068      	beq.n	801095e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	695b      	ldr	r3, [r3, #20]
 8010892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010896:	2b40      	cmp	r3, #64	@ 0x40
 8010898:	d10b      	bne.n	80108b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	691a      	ldr	r2, [r3, #16]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a4:	b2d2      	uxtb	r2, r2
 80108a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108ac:	1c5a      	adds	r2, r3, #1
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f022 0201 	bic.w	r2, r2, #1
 80108c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2220      	movs	r2, #32
 80108c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80108d4:	4610      	mov	r0, r2
 80108d6:	4798      	blx	r3
 80108d8:	e041      	b.n	801095e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b60      	cmp	r3, #96	@ 0x60
 80108e4:	d125      	bne.n	8010932 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2220      	movs	r2, #32
 80108ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2200      	movs	r2, #0
 80108f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	695b      	ldr	r3, [r3, #20]
 80108fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108fe:	2b40      	cmp	r3, #64	@ 0x40
 8010900:	d10b      	bne.n	801091a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	691a      	ldr	r2, [r3, #16]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801090c:	b2d2      	uxtb	r2, r2
 801090e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010914:	1c5a      	adds	r2, r3, #1
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f022 0201 	bic.w	r2, r2, #1
 8010928:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7ff feaf 	bl	801068e <HAL_I2C_AbortCpltCallback>
 8010930:	e015      	b.n	801095e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	695b      	ldr	r3, [r3, #20]
 8010938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801093c:	2b40      	cmp	r3, #64	@ 0x40
 801093e:	d10b      	bne.n	8010958 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	691a      	ldr	r2, [r3, #16]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801094a:	b2d2      	uxtb	r2, r2
 801094c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010952:	1c5a      	adds	r2, r3, #1
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7ff fe8e 	bl	801067a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010962:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d10e      	bne.n	801098c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010974:	2b00      	cmp	r3, #0
 8010976:	d109      	bne.n	801098c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801097e:	2b00      	cmp	r3, #0
 8010980:	d104      	bne.n	801098c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010988:	2b00      	cmp	r3, #0
 801098a:	d007      	beq.n	801099c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	685a      	ldr	r2, [r3, #4]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801099a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80109a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109a8:	f003 0304 	and.w	r3, r3, #4
 80109ac:	2b04      	cmp	r3, #4
 80109ae:	d113      	bne.n	80109d8 <I2C_ITError+0x254>
 80109b0:	7bfb      	ldrb	r3, [r7, #15]
 80109b2:	2b28      	cmp	r3, #40	@ 0x28
 80109b4:	d110      	bne.n	80109d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4a0a      	ldr	r2, [pc, #40]	@ (80109e4 <I2C_ITError+0x260>)
 80109ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2220      	movs	r2, #32
 80109c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7ff fe47 	bl	8010666 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80109d8:	bf00      	nop
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	08010f09 	.word	0x08010f09
 80109e4:	ffff0000 	.word	0xffff0000

080109e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af02      	add	r7, sp, #8
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	4608      	mov	r0, r1
 80109f2:	4611      	mov	r1, r2
 80109f4:	461a      	mov	r2, r3
 80109f6:	4603      	mov	r3, r0
 80109f8:	817b      	strh	r3, [r7, #10]
 80109fa:	460b      	mov	r3, r1
 80109fc:	813b      	strh	r3, [r7, #8]
 80109fe:	4613      	mov	r3, r2
 8010a00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f000 fb1a 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00d      	beq.n	8010a46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a38:	d103      	bne.n	8010a42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8010a42:	2303      	movs	r3, #3
 8010a44:	e05f      	b.n	8010b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010a46:	897b      	ldrh	r3, [r7, #10]
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8010a54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a58:	6a3a      	ldr	r2, [r7, #32]
 8010a5a:	492d      	ldr	r1, [pc, #180]	@ (8010b10 <I2C_RequestMemoryWrite+0x128>)
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f000 fb52 	bl	8011106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d001      	beq.n	8010a6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e04c      	b.n	8010b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	617b      	str	r3, [r7, #20]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	695b      	ldr	r3, [r3, #20]
 8010a76:	617b      	str	r3, [r7, #20]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	699b      	ldr	r3, [r3, #24]
 8010a7e:	617b      	str	r3, [r7, #20]
 8010a80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a84:	6a39      	ldr	r1, [r7, #32]
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	f000 fbbc 	bl	8011204 <I2C_WaitOnTXEFlagUntilTimeout>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00d      	beq.n	8010aae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a96:	2b04      	cmp	r3, #4
 8010a98:	d107      	bne.n	8010aaa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010aa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e02b      	b.n	8010b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010aae:	88fb      	ldrh	r3, [r7, #6]
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d105      	bne.n	8010ac0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010ab4:	893b      	ldrh	r3, [r7, #8]
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	611a      	str	r2, [r3, #16]
 8010abe:	e021      	b.n	8010b04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010ac0:	893b      	ldrh	r3, [r7, #8]
 8010ac2:	0a1b      	lsrs	r3, r3, #8
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ad0:	6a39      	ldr	r1, [r7, #32]
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	f000 fb96 	bl	8011204 <I2C_WaitOnTXEFlagUntilTimeout>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d00d      	beq.n	8010afa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ae2:	2b04      	cmp	r3, #4
 8010ae4:	d107      	bne.n	8010af6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010af4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	e005      	b.n	8010b06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010afa:	893b      	ldrh	r3, [r7, #8]
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	00010002 	.word	0x00010002

08010b14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b088      	sub	sp, #32
 8010b18:	af02      	add	r7, sp, #8
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	4608      	mov	r0, r1
 8010b1e:	4611      	mov	r1, r2
 8010b20:	461a      	mov	r2, r3
 8010b22:	4603      	mov	r3, r0
 8010b24:	817b      	strh	r3, [r7, #10]
 8010b26:	460b      	mov	r3, r1
 8010b28:	813b      	strh	r3, [r7, #8]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010b3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	681a      	ldr	r2, [r3, #0]
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010b4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	6a3b      	ldr	r3, [r7, #32]
 8010b54:	2200      	movs	r2, #0
 8010b56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f000 fa7c 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00d      	beq.n	8010b82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b74:	d103      	bne.n	8010b7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8010b7e:	2303      	movs	r3, #3
 8010b80:	e0aa      	b.n	8010cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010b82:	897b      	ldrh	r3, [r7, #10]
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	461a      	mov	r2, r3
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8010b90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b94:	6a3a      	ldr	r2, [r7, #32]
 8010b96:	4952      	ldr	r1, [pc, #328]	@ (8010ce0 <I2C_RequestMemoryRead+0x1cc>)
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f000 fab4 	bl	8011106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d001      	beq.n	8010ba8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e097      	b.n	8010cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010ba8:	2300      	movs	r3, #0
 8010baa:	617b      	str	r3, [r7, #20]
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	695b      	ldr	r3, [r3, #20]
 8010bb2:	617b      	str	r3, [r7, #20]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	699b      	ldr	r3, [r3, #24]
 8010bba:	617b      	str	r3, [r7, #20]
 8010bbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bc0:	6a39      	ldr	r1, [r7, #32]
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f000 fb1e 	bl	8011204 <I2C_WaitOnTXEFlagUntilTimeout>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00d      	beq.n	8010bea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bd2:	2b04      	cmp	r3, #4
 8010bd4:	d107      	bne.n	8010be6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010be4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010be6:	2301      	movs	r3, #1
 8010be8:	e076      	b.n	8010cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010bea:	88fb      	ldrh	r3, [r7, #6]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d105      	bne.n	8010bfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010bf0:	893b      	ldrh	r3, [r7, #8]
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	611a      	str	r2, [r3, #16]
 8010bfa:	e021      	b.n	8010c40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010bfc:	893b      	ldrh	r3, [r7, #8]
 8010bfe:	0a1b      	lsrs	r3, r3, #8
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	b2da      	uxtb	r2, r3
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c0c:	6a39      	ldr	r1, [r7, #32]
 8010c0e:	68f8      	ldr	r0, [r7, #12]
 8010c10:	f000 faf8 	bl	8011204 <I2C_WaitOnTXEFlagUntilTimeout>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00d      	beq.n	8010c36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c1e:	2b04      	cmp	r3, #4
 8010c20:	d107      	bne.n	8010c32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010c30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010c32:	2301      	movs	r3, #1
 8010c34:	e050      	b.n	8010cd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010c36:	893b      	ldrh	r3, [r7, #8]
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c42:	6a39      	ldr	r1, [r7, #32]
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f000 fadd 	bl	8011204 <I2C_WaitOnTXEFlagUntilTimeout>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00d      	beq.n	8010c6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c54:	2b04      	cmp	r3, #4
 8010c56:	d107      	bne.n	8010c68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010c66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010c68:	2301      	movs	r3, #1
 8010c6a:	e035      	b.n	8010cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010c7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	6a3b      	ldr	r3, [r7, #32]
 8010c82:	2200      	movs	r2, #0
 8010c84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f000 f9e5 	bl	8011058 <I2C_WaitOnFlagUntilTimeout>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00d      	beq.n	8010cb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ca2:	d103      	bne.n	8010cac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010caa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8010cac:	2303      	movs	r3, #3
 8010cae:	e013      	b.n	8010cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010cb0:	897b      	ldrh	r3, [r7, #10]
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	f043 0301 	orr.w	r3, r3, #1
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc2:	6a3a      	ldr	r2, [r7, #32]
 8010cc4:	4906      	ldr	r1, [pc, #24]	@ (8010ce0 <I2C_RequestMemoryRead+0x1cc>)
 8010cc6:	68f8      	ldr	r0, [r7, #12]
 8010cc8:	f000 fa1d 	bl	8011106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d001      	beq.n	8010cd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e000      	b.n	8010cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3718      	adds	r7, #24
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	00010002 	.word	0x00010002

08010ce4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b086      	sub	sp, #24
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cf0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010cf8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010d00:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d06:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	685a      	ldr	r2, [r3, #4]
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8010d16:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d003      	beq.n	8010d28 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d24:	2200      	movs	r2, #0
 8010d26:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d003      	beq.n	8010d38 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d34:	2200      	movs	r2, #0
 8010d36:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8010d38:	7cfb      	ldrb	r3, [r7, #19]
 8010d3a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8010d3e:	2b21      	cmp	r3, #33	@ 0x21
 8010d40:	d007      	beq.n	8010d52 <I2C_DMAXferCplt+0x6e>
 8010d42:	7cfb      	ldrb	r3, [r7, #19]
 8010d44:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8010d48:	2b22      	cmp	r3, #34	@ 0x22
 8010d4a:	d131      	bne.n	8010db0 <I2C_DMAXferCplt+0xcc>
 8010d4c:	7cbb      	ldrb	r3, [r7, #18]
 8010d4e:	2b20      	cmp	r3, #32
 8010d50:	d12e      	bne.n	8010db0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	685a      	ldr	r2, [r3, #4]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010d60:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	2200      	movs	r2, #0
 8010d66:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010d68:	7cfb      	ldrb	r3, [r7, #19]
 8010d6a:	2b29      	cmp	r3, #41	@ 0x29
 8010d6c:	d10a      	bne.n	8010d84 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	2221      	movs	r2, #33	@ 0x21
 8010d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2228      	movs	r2, #40	@ 0x28
 8010d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010d7c:	6978      	ldr	r0, [r7, #20]
 8010d7e:	f7ff fc5e 	bl	801063e <HAL_I2C_SlaveTxCpltCallback>
 8010d82:	e00c      	b.n	8010d9e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010d84:	7cfb      	ldrb	r3, [r7, #19]
 8010d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d88:	d109      	bne.n	8010d9e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	2222      	movs	r2, #34	@ 0x22
 8010d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	2228      	movs	r2, #40	@ 0x28
 8010d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010d98:	6978      	ldr	r0, [r7, #20]
 8010d9a:	f7ff fc5a 	bl	8010652 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	685a      	ldr	r2, [r3, #4]
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8010dac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010dae:	e06a      	b.n	8010e86 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d064      	beq.n	8010e86 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	d107      	bne.n	8010dd6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010dd4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	685a      	ldr	r2, [r3, #4]
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8010de4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010dec:	d009      	beq.n	8010e02 <I2C_DMAXferCplt+0x11e>
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2b08      	cmp	r3, #8
 8010df2:	d006      	beq.n	8010e02 <I2C_DMAXferCplt+0x11e>
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8010dfa:	d002      	beq.n	8010e02 <I2C_DMAXferCplt+0x11e>
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2b20      	cmp	r3, #32
 8010e00:	d107      	bne.n	8010e12 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010e10:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010e20:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	685a      	ldr	r2, [r3, #4]
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010e30:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	2200      	movs	r2, #0
 8010e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d003      	beq.n	8010e48 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010e40:	6978      	ldr	r0, [r7, #20]
 8010e42:	f7ff fc1a 	bl	801067a <HAL_I2C_ErrorCallback>
}
 8010e46:	e01e      	b.n	8010e86 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2220      	movs	r2, #32
 8010e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	2b40      	cmp	r3, #64	@ 0x40
 8010e5a:	d10a      	bne.n	8010e72 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	2200      	movs	r2, #0
 8010e68:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010e6a:	6978      	ldr	r0, [r7, #20]
 8010e6c:	f7f1 f834 	bl	8001ed8 <HAL_I2C_MemRxCpltCallback>
}
 8010e70:	e009      	b.n	8010e86 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	2212      	movs	r2, #18
 8010e7e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8010e80:	6978      	ldr	r0, [r7, #20]
 8010e82:	f7ff fbd2 	bl	801062a <HAL_I2C_MasterRxCpltCallback>
}
 8010e86:	bf00      	nop
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b084      	sub	sp, #16
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e9a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d003      	beq.n	8010eac <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d003      	beq.n	8010ebc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb8:	2200      	movs	r2, #0
 8010eba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7fe fa63 	bl	800f388 <HAL_DMA_GetError>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b02      	cmp	r3, #2
 8010ec6:	d01b      	beq.n	8010f00 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010ed6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2200      	movs	r2, #0
 8010edc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2220      	movs	r2, #32
 8010ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ef2:	f043 0210 	orr.w	r2, r3, #16
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010efa:	68f8      	ldr	r0, [r7, #12]
 8010efc:	f7ff fbbd 	bl	801067a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f00:	bf00      	nop
 8010f02:	3710      	adds	r7, #16
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010f10:	2300      	movs	r3, #0
 8010f12:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010f20:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010f22:	4b4b      	ldr	r3, [pc, #300]	@ (8011050 <I2C_DMAAbort+0x148>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	08db      	lsrs	r3, r3, #3
 8010f28:	4a4a      	ldr	r2, [pc, #296]	@ (8011054 <I2C_DMAAbort+0x14c>)
 8010f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8010f2e:	0a1a      	lsrs	r2, r3, #8
 8010f30:	4613      	mov	r3, r2
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	4413      	add	r3, r2
 8010f36:	00da      	lsls	r2, r3, #3
 8010f38:	1ad3      	subs	r3, r2, r3
 8010f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d106      	bne.n	8010f50 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f46:	f043 0220 	orr.w	r2, r3, #32
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8010f4e:	e00a      	b.n	8010f66 <I2C_DMAAbort+0x5e>
    }
    count--;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	3b01      	subs	r3, #1
 8010f54:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f64:	d0ea      	beq.n	8010f3c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d003      	beq.n	8010f76 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f72:	2200      	movs	r2, #0
 8010f74:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d003      	beq.n	8010f86 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f82:	2200      	movs	r2, #0
 8010f84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010f94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d003      	beq.n	8010fac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fa8:	2200      	movs	r2, #0
 8010faa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d003      	beq.n	8010fbc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fb8:	2200      	movs	r2, #0
 8010fba:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f022 0201 	bic.w	r2, r2, #1
 8010fca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	2b60      	cmp	r3, #96	@ 0x60
 8010fd6:	d10e      	bne.n	8010ff6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	2220      	movs	r2, #32
 8010fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	2200      	movs	r2, #0
 8010fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010fee:	6978      	ldr	r0, [r7, #20]
 8010ff0:	f7ff fb4d 	bl	801068e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010ff4:	e027      	b.n	8011046 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ff6:	7cfb      	ldrb	r3, [r7, #19]
 8010ff8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010ffc:	2b28      	cmp	r3, #40	@ 0x28
 8010ffe:	d117      	bne.n	8011030 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f042 0201 	orr.w	r2, r2, #1
 801100e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801101e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	2200      	movs	r2, #0
 8011024:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	2228      	movs	r2, #40	@ 0x28
 801102a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801102e:	e007      	b.n	8011040 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	2220      	movs	r2, #32
 8011034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	2200      	movs	r2, #0
 801103c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8011040:	6978      	ldr	r0, [r7, #20]
 8011042:	f7ff fb1a 	bl	801067a <HAL_I2C_ErrorCallback>
}
 8011046:	bf00      	nop
 8011048:	3718      	adds	r7, #24
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	20000004 	.word	0x20000004
 8011054:	14f8b589 	.word	0x14f8b589

08011058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	603b      	str	r3, [r7, #0]
 8011064:	4613      	mov	r3, r2
 8011066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011068:	e025      	b.n	80110b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011070:	d021      	beq.n	80110b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011072:	f7fc fc41 	bl	800d8f8 <HAL_GetTick>
 8011076:	4602      	mov	r2, r0
 8011078:	69bb      	ldr	r3, [r7, #24]
 801107a:	1ad3      	subs	r3, r2, r3
 801107c:	683a      	ldr	r2, [r7, #0]
 801107e:	429a      	cmp	r2, r3
 8011080:	d302      	bcc.n	8011088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d116      	bne.n	80110b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2220      	movs	r2, #32
 8011092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110a2:	f043 0220 	orr.w	r2, r3, #32
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2200      	movs	r2, #0
 80110ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	e023      	b.n	80110fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	0c1b      	lsrs	r3, r3, #16
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d10d      	bne.n	80110dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	695b      	ldr	r3, [r3, #20]
 80110c6:	43da      	mvns	r2, r3
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	4013      	ands	r3, r2
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	bf0c      	ite	eq
 80110d2:	2301      	moveq	r3, #1
 80110d4:	2300      	movne	r3, #0
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	461a      	mov	r2, r3
 80110da:	e00c      	b.n	80110f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	699b      	ldr	r3, [r3, #24]
 80110e2:	43da      	mvns	r2, r3
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	4013      	ands	r3, r2
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	bf0c      	ite	eq
 80110ee:	2301      	moveq	r3, #1
 80110f0:	2300      	movne	r3, #0
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	461a      	mov	r2, r3
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d0b6      	beq.n	801106a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80110fc:	2300      	movs	r3, #0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b084      	sub	sp, #16
 801110a:	af00      	add	r7, sp, #0
 801110c:	60f8      	str	r0, [r7, #12]
 801110e:	60b9      	str	r1, [r7, #8]
 8011110:	607a      	str	r2, [r7, #4]
 8011112:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011114:	e051      	b.n	80111ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	695b      	ldr	r3, [r3, #20]
 801111c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011124:	d123      	bne.n	801116e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011134:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 801113e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2200      	movs	r2, #0
 8011144:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2220      	movs	r2, #32
 801114a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801115a:	f043 0204 	orr.w	r2, r3, #4
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2200      	movs	r2, #0
 8011166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 801116a:	2301      	movs	r3, #1
 801116c:	e046      	b.n	80111fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011174:	d021      	beq.n	80111ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011176:	f7fc fbbf 	bl	800d8f8 <HAL_GetTick>
 801117a:	4602      	mov	r2, r0
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	429a      	cmp	r2, r3
 8011184:	d302      	bcc.n	801118c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d116      	bne.n	80111ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2200      	movs	r2, #0
 8011190:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2220      	movs	r2, #32
 8011196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2200      	movs	r2, #0
 801119e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111a6:	f043 0220 	orr.w	r2, r3, #32
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80111b6:	2301      	movs	r3, #1
 80111b8:	e020      	b.n	80111fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	0c1b      	lsrs	r3, r3, #16
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d10c      	bne.n	80111de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	695b      	ldr	r3, [r3, #20]
 80111ca:	43da      	mvns	r2, r3
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	4013      	ands	r3, r2
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	bf14      	ite	ne
 80111d6:	2301      	movne	r3, #1
 80111d8:	2300      	moveq	r3, #0
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	e00b      	b.n	80111f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	699b      	ldr	r3, [r3, #24]
 80111e4:	43da      	mvns	r2, r3
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	4013      	ands	r3, r2
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	bf14      	ite	ne
 80111f0:	2301      	movne	r3, #1
 80111f2:	2300      	moveq	r3, #0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d18d      	bne.n	8011116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3710      	adds	r7, #16
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011210:	e02d      	b.n	801126e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f000 f8ce 	bl	80113b4 <I2C_IsAcknowledgeFailed>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801121e:	2301      	movs	r3, #1
 8011220:	e02d      	b.n	801127e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011228:	d021      	beq.n	801126e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801122a:	f7fc fb65 	bl	800d8f8 <HAL_GetTick>
 801122e:	4602      	mov	r2, r0
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	429a      	cmp	r2, r3
 8011238:	d302      	bcc.n	8011240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d116      	bne.n	801126e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2200      	movs	r2, #0
 8011244:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2220      	movs	r2, #32
 801124a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801125a:	f043 0220 	orr.w	r2, r3, #32
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2200      	movs	r2, #0
 8011266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	e007      	b.n	801127e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	695b      	ldr	r3, [r3, #20]
 8011274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011278:	2b80      	cmp	r3, #128	@ 0x80
 801127a:	d1ca      	bne.n	8011212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}

08011286 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011286:	b580      	push	{r7, lr}
 8011288:	b084      	sub	sp, #16
 801128a:	af00      	add	r7, sp, #0
 801128c:	60f8      	str	r0, [r7, #12]
 801128e:	60b9      	str	r1, [r7, #8]
 8011290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8011292:	e02d      	b.n	80112f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f000 f88d 	bl	80113b4 <I2C_IsAcknowledgeFailed>
 801129a:	4603      	mov	r3, r0
 801129c:	2b00      	cmp	r3, #0
 801129e:	d001      	beq.n	80112a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80112a0:	2301      	movs	r3, #1
 80112a2:	e02d      	b.n	8011300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112aa:	d021      	beq.n	80112f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112ac:	f7fc fb24 	bl	800d8f8 <HAL_GetTick>
 80112b0:	4602      	mov	r2, r0
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	68ba      	ldr	r2, [r7, #8]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d302      	bcc.n	80112c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d116      	bne.n	80112f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2220      	movs	r2, #32
 80112cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112dc:	f043 0220 	orr.w	r2, r3, #32
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80112ec:	2301      	movs	r3, #1
 80112ee:	e007      	b.n	8011300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	695b      	ldr	r3, [r3, #20]
 80112f6:	f003 0304 	and.w	r3, r3, #4
 80112fa:	2b04      	cmp	r3, #4
 80112fc:	d1ca      	bne.n	8011294 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011314:	e042      	b.n	801139c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	695b      	ldr	r3, [r3, #20]
 801131c:	f003 0310 	and.w	r3, r3, #16
 8011320:	2b10      	cmp	r3, #16
 8011322:	d119      	bne.n	8011358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f06f 0210 	mvn.w	r2, #16
 801132c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2200      	movs	r2, #0
 8011332:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2220      	movs	r2, #32
 8011338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2200      	movs	r2, #0
 8011340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2200      	movs	r2, #0
 8011350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8011354:	2301      	movs	r3, #1
 8011356:	e029      	b.n	80113ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011358:	f7fc face 	bl	800d8f8 <HAL_GetTick>
 801135c:	4602      	mov	r2, r0
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	429a      	cmp	r2, r3
 8011366:	d302      	bcc.n	801136e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d116      	bne.n	801139c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2220      	movs	r2, #32
 8011378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2200      	movs	r2, #0
 8011380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011388:	f043 0220 	orr.w	r2, r3, #32
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2200      	movs	r2, #0
 8011394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8011398:	2301      	movs	r3, #1
 801139a:	e007      	b.n	80113ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	695b      	ldr	r3, [r3, #20]
 80113a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113a6:	2b40      	cmp	r3, #64	@ 0x40
 80113a8:	d1b5      	bne.n	8011316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80113aa:	2300      	movs	r3, #0
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3710      	adds	r7, #16
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	695b      	ldr	r3, [r3, #20]
 80113c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80113c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80113ca:	d11b      	bne.n	8011404 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80113d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2220      	movs	r2, #32
 80113e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113f0:	f043 0204 	orr.w	r2, r3, #4
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8011400:	2301      	movs	r3, #1
 8011402:	e000      	b.n	8011406 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011404:	2300      	movs	r3, #0
}
 8011406:	4618      	mov	r0, r3
 8011408:	370c      	adds	r7, #12
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr

08011412 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011414:	b08f      	sub	sp, #60	@ 0x3c
 8011416:	af0a      	add	r7, sp, #40	@ 0x28
 8011418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d101      	bne.n	8011424 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011420:	2301      	movs	r3, #1
 8011422:	e10f      	b.n	8011644 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8011430:	b2db      	uxtb	r3, r3
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f00b fd1a 	bl	801ce78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2203      	movs	r2, #3
 8011448:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011454:	2b00      	cmp	r3, #0
 8011456:	d102      	bne.n	801145e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	4618      	mov	r0, r3
 8011464:	f004 ff2b 	bl	80162be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	603b      	str	r3, [r7, #0]
 801146e:	687e      	ldr	r6, [r7, #4]
 8011470:	466d      	mov	r5, sp
 8011472:	f106 0410 	add.w	r4, r6, #16
 8011476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011482:	e885 0003 	stmia.w	r5, {r0, r1}
 8011486:	1d33      	adds	r3, r6, #4
 8011488:	cb0e      	ldmia	r3, {r1, r2, r3}
 801148a:	6838      	ldr	r0, [r7, #0]
 801148c:	f004 fe02 	bl	8016094 <USB_CoreInit>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d005      	beq.n	80114a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2202      	movs	r2, #2
 801149a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 801149e:	2301      	movs	r3, #1
 80114a0:	e0d0      	b.n	8011644 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2100      	movs	r1, #0
 80114a8:	4618      	mov	r0, r3
 80114aa:	f004 ff19 	bl	80162e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80114ae:	2300      	movs	r3, #0
 80114b0:	73fb      	strb	r3, [r7, #15]
 80114b2:	e04a      	b.n	801154a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80114b4:	7bfa      	ldrb	r2, [r7, #15]
 80114b6:	6879      	ldr	r1, [r7, #4]
 80114b8:	4613      	mov	r3, r2
 80114ba:	00db      	lsls	r3, r3, #3
 80114bc:	4413      	add	r3, r2
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	440b      	add	r3, r1
 80114c2:	333d      	adds	r3, #61	@ 0x3d
 80114c4:	2201      	movs	r2, #1
 80114c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80114c8:	7bfa      	ldrb	r2, [r7, #15]
 80114ca:	6879      	ldr	r1, [r7, #4]
 80114cc:	4613      	mov	r3, r2
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	4413      	add	r3, r2
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	440b      	add	r3, r1
 80114d6:	333c      	adds	r3, #60	@ 0x3c
 80114d8:	7bfa      	ldrb	r2, [r7, #15]
 80114da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80114dc:	7bfa      	ldrb	r2, [r7, #15]
 80114de:	7bfb      	ldrb	r3, [r7, #15]
 80114e0:	b298      	uxth	r0, r3
 80114e2:	6879      	ldr	r1, [r7, #4]
 80114e4:	4613      	mov	r3, r2
 80114e6:	00db      	lsls	r3, r3, #3
 80114e8:	4413      	add	r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	440b      	add	r3, r1
 80114ee:	3344      	adds	r3, #68	@ 0x44
 80114f0:	4602      	mov	r2, r0
 80114f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80114f4:	7bfa      	ldrb	r2, [r7, #15]
 80114f6:	6879      	ldr	r1, [r7, #4]
 80114f8:	4613      	mov	r3, r2
 80114fa:	00db      	lsls	r3, r3, #3
 80114fc:	4413      	add	r3, r2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	440b      	add	r3, r1
 8011502:	3340      	adds	r3, #64	@ 0x40
 8011504:	2200      	movs	r2, #0
 8011506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011508:	7bfa      	ldrb	r2, [r7, #15]
 801150a:	6879      	ldr	r1, [r7, #4]
 801150c:	4613      	mov	r3, r2
 801150e:	00db      	lsls	r3, r3, #3
 8011510:	4413      	add	r3, r2
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	440b      	add	r3, r1
 8011516:	3348      	adds	r3, #72	@ 0x48
 8011518:	2200      	movs	r2, #0
 801151a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801151c:	7bfa      	ldrb	r2, [r7, #15]
 801151e:	6879      	ldr	r1, [r7, #4]
 8011520:	4613      	mov	r3, r2
 8011522:	00db      	lsls	r3, r3, #3
 8011524:	4413      	add	r3, r2
 8011526:	009b      	lsls	r3, r3, #2
 8011528:	440b      	add	r3, r1
 801152a:	334c      	adds	r3, #76	@ 0x4c
 801152c:	2200      	movs	r2, #0
 801152e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011530:	7bfa      	ldrb	r2, [r7, #15]
 8011532:	6879      	ldr	r1, [r7, #4]
 8011534:	4613      	mov	r3, r2
 8011536:	00db      	lsls	r3, r3, #3
 8011538:	4413      	add	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	440b      	add	r3, r1
 801153e:	3354      	adds	r3, #84	@ 0x54
 8011540:	2200      	movs	r2, #0
 8011542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011544:	7bfb      	ldrb	r3, [r7, #15]
 8011546:	3301      	adds	r3, #1
 8011548:	73fb      	strb	r3, [r7, #15]
 801154a:	7bfa      	ldrb	r2, [r7, #15]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	429a      	cmp	r2, r3
 8011552:	d3af      	bcc.n	80114b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011554:	2300      	movs	r3, #0
 8011556:	73fb      	strb	r3, [r7, #15]
 8011558:	e044      	b.n	80115e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801155a:	7bfa      	ldrb	r2, [r7, #15]
 801155c:	6879      	ldr	r1, [r7, #4]
 801155e:	4613      	mov	r3, r2
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	4413      	add	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	440b      	add	r3, r1
 8011568:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 801156c:	2200      	movs	r2, #0
 801156e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011570:	7bfa      	ldrb	r2, [r7, #15]
 8011572:	6879      	ldr	r1, [r7, #4]
 8011574:	4613      	mov	r3, r2
 8011576:	00db      	lsls	r3, r3, #3
 8011578:	4413      	add	r3, r2
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	440b      	add	r3, r1
 801157e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8011582:	7bfa      	ldrb	r2, [r7, #15]
 8011584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011586:	7bfa      	ldrb	r2, [r7, #15]
 8011588:	6879      	ldr	r1, [r7, #4]
 801158a:	4613      	mov	r3, r2
 801158c:	00db      	lsls	r3, r3, #3
 801158e:	4413      	add	r3, r2
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	440b      	add	r3, r1
 8011594:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8011598:	2200      	movs	r2, #0
 801159a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801159c:	7bfa      	ldrb	r2, [r7, #15]
 801159e:	6879      	ldr	r1, [r7, #4]
 80115a0:	4613      	mov	r3, r2
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	4413      	add	r3, r2
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	440b      	add	r3, r1
 80115aa:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80115ae:	2200      	movs	r2, #0
 80115b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80115b2:	7bfa      	ldrb	r2, [r7, #15]
 80115b4:	6879      	ldr	r1, [r7, #4]
 80115b6:	4613      	mov	r3, r2
 80115b8:	00db      	lsls	r3, r3, #3
 80115ba:	4413      	add	r3, r2
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	440b      	add	r3, r1
 80115c0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80115c4:	2200      	movs	r2, #0
 80115c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80115c8:	7bfa      	ldrb	r2, [r7, #15]
 80115ca:	6879      	ldr	r1, [r7, #4]
 80115cc:	4613      	mov	r3, r2
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	4413      	add	r3, r2
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	440b      	add	r3, r1
 80115d6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80115da:	2200      	movs	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80115de:	7bfb      	ldrb	r3, [r7, #15]
 80115e0:	3301      	adds	r3, #1
 80115e2:	73fb      	strb	r3, [r7, #15]
 80115e4:	7bfa      	ldrb	r2, [r7, #15]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d3b5      	bcc.n	801155a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	603b      	str	r3, [r7, #0]
 80115f4:	687e      	ldr	r6, [r7, #4]
 80115f6:	466d      	mov	r5, sp
 80115f8:	f106 0410 	add.w	r4, r6, #16
 80115fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011604:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011608:	e885 0003 	stmia.w	r5, {r0, r1}
 801160c:	1d33      	adds	r3, r6, #4
 801160e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011610:	6838      	ldr	r0, [r7, #0]
 8011612:	f004 feb1 	bl	8016378 <USB_DevInit>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d005      	beq.n	8011628 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2202      	movs	r2, #2
 8011620:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8011624:	2301      	movs	r3, #1
 8011626:	e00d      	b.n	8011644 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2201      	movs	r2, #1
 8011634:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	4618      	mov	r0, r3
 801163e:	f006 f800 	bl	8017642 <USB_DevDisconnect>

  return HAL_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3714      	adds	r7, #20
 8011648:	46bd      	mov	sp, r7
 801164a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801164c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8011660:	2b01      	cmp	r3, #1
 8011662:	d101      	bne.n	8011668 <HAL_PCD_Start+0x1c>
 8011664:	2302      	movs	r3, #2
 8011666:	e020      	b.n	80116aa <HAL_PCD_Start+0x5e>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2201      	movs	r2, #1
 801166c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011674:	2b01      	cmp	r3, #1
 8011676:	d109      	bne.n	801168c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801167c:	2b01      	cmp	r3, #1
 801167e:	d005      	beq.n	801168c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011684:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4618      	mov	r0, r3
 8011692:	f004 fe03 	bl	801629c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	4618      	mov	r0, r3
 801169c:	f005 ffb0 	bl	8017600 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80116a8:	2300      	movs	r3, #0
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80116b2:	b590      	push	{r4, r7, lr}
 80116b4:	b08d      	sub	sp, #52	@ 0x34
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116c0:	6a3b      	ldr	r3, [r7, #32]
 80116c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f006 f86e 	bl	80177aa <USB_GetMode>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f040 848a 	bne.w	8011fea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4618      	mov	r0, r3
 80116dc:	f005 ffd2 	bl	8017684 <USB_ReadInterrupts>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f000 8480 	beq.w	8011fe8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	0a1b      	lsrs	r3, r3, #8
 80116f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4618      	mov	r0, r3
 8011702:	f005 ffbf 	bl	8017684 <USB_ReadInterrupts>
 8011706:	4603      	mov	r3, r0
 8011708:	f003 0302 	and.w	r3, r3, #2
 801170c:	2b02      	cmp	r3, #2
 801170e:	d107      	bne.n	8011720 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	695a      	ldr	r2, [r3, #20]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f002 0202 	and.w	r2, r2, #2
 801171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4618      	mov	r0, r3
 8011726:	f005 ffad 	bl	8017684 <USB_ReadInterrupts>
 801172a:	4603      	mov	r3, r0
 801172c:	f003 0310 	and.w	r3, r3, #16
 8011730:	2b10      	cmp	r3, #16
 8011732:	d161      	bne.n	80117f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	699a      	ldr	r2, [r3, #24]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f022 0210 	bic.w	r2, r2, #16
 8011742:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8011744:	6a3b      	ldr	r3, [r7, #32]
 8011746:	6a1b      	ldr	r3, [r3, #32]
 8011748:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	f003 020f 	and.w	r2, r3, #15
 8011750:	4613      	mov	r3, r2
 8011752:	00db      	lsls	r3, r3, #3
 8011754:	4413      	add	r3, r2
 8011756:	009b      	lsls	r3, r3, #2
 8011758:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	4413      	add	r3, r2
 8011760:	3304      	adds	r3, #4
 8011762:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	0c5b      	lsrs	r3, r3, #17
 8011768:	f003 030f 	and.w	r3, r3, #15
 801176c:	2b02      	cmp	r3, #2
 801176e:	d124      	bne.n	80117ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8011770:	69ba      	ldr	r2, [r7, #24]
 8011772:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8011776:	4013      	ands	r3, r2
 8011778:	2b00      	cmp	r3, #0
 801177a:	d035      	beq.n	80117e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	091b      	lsrs	r3, r3, #4
 8011784:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8011786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801178a:	b29b      	uxth	r3, r3
 801178c:	461a      	mov	r2, r3
 801178e:	6a38      	ldr	r0, [r7, #32]
 8011790:	f005 fde4 	bl	801735c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	691a      	ldr	r2, [r3, #16]
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	091b      	lsrs	r3, r3, #4
 801179c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117a0:	441a      	add	r2, r3
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	6a1a      	ldr	r2, [r3, #32]
 80117aa:	69bb      	ldr	r3, [r7, #24]
 80117ac:	091b      	lsrs	r3, r3, #4
 80117ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117b2:	441a      	add	r2, r3
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	621a      	str	r2, [r3, #32]
 80117b8:	e016      	b.n	80117e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80117ba:	69bb      	ldr	r3, [r7, #24]
 80117bc:	0c5b      	lsrs	r3, r3, #17
 80117be:	f003 030f 	and.w	r3, r3, #15
 80117c2:	2b06      	cmp	r3, #6
 80117c4:	d110      	bne.n	80117e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80117cc:	2208      	movs	r2, #8
 80117ce:	4619      	mov	r1, r3
 80117d0:	6a38      	ldr	r0, [r7, #32]
 80117d2:	f005 fdc3 	bl	801735c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	6a1a      	ldr	r2, [r3, #32]
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	091b      	lsrs	r3, r3, #4
 80117de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80117e2:	441a      	add	r2, r3
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	699a      	ldr	r2, [r3, #24]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f042 0210 	orr.w	r2, r2, #16
 80117f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f005 ff41 	bl	8017684 <USB_ReadInterrupts>
 8011802:	4603      	mov	r3, r0
 8011804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011808:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801180c:	f040 80a7 	bne.w	801195e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8011810:	2300      	movs	r3, #0
 8011812:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4618      	mov	r0, r3
 801181a:	f005 ff46 	bl	80176aa <USB_ReadDevAllOutEpInterrupt>
 801181e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8011820:	e099      	b.n	8011956 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8011822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011824:	f003 0301 	and.w	r3, r3, #1
 8011828:	2b00      	cmp	r3, #0
 801182a:	f000 808e 	beq.w	801194a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011834:	b2d2      	uxtb	r2, r2
 8011836:	4611      	mov	r1, r2
 8011838:	4618      	mov	r0, r3
 801183a:	f005 ff6a 	bl	8017712 <USB_ReadDevOutEPInterrupt>
 801183e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	f003 0301 	and.w	r3, r3, #1
 8011846:	2b00      	cmp	r3, #0
 8011848:	d00c      	beq.n	8011864 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184c:	015a      	lsls	r2, r3, #5
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	4413      	add	r3, r2
 8011852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011856:	461a      	mov	r2, r3
 8011858:	2301      	movs	r3, #1
 801185a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801185c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 fec2 	bl	80125e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	f003 0308 	and.w	r3, r3, #8
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00c      	beq.n	8011888 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011870:	015a      	lsls	r2, r3, #5
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	4413      	add	r3, r2
 8011876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801187a:	461a      	mov	r2, r3
 801187c:	2308      	movs	r3, #8
 801187e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8011880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 ff98 	bl	80127b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	f003 0310 	and.w	r3, r3, #16
 801188e:	2b00      	cmp	r3, #0
 8011890:	d008      	beq.n	80118a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8011892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011894:	015a      	lsls	r2, r3, #5
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	4413      	add	r3, r2
 801189a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801189e:	461a      	mov	r2, r3
 80118a0:	2310      	movs	r3, #16
 80118a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	f003 0302 	and.w	r3, r3, #2
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d030      	beq.n	8011910 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80118ae:	6a3b      	ldr	r3, [r7, #32]
 80118b0:	695b      	ldr	r3, [r3, #20]
 80118b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80118b6:	2b80      	cmp	r3, #128	@ 0x80
 80118b8:	d109      	bne.n	80118ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	69fa      	ldr	r2, [r7, #28]
 80118c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80118c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80118cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80118ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118d0:	4613      	mov	r3, r2
 80118d2:	00db      	lsls	r3, r3, #3
 80118d4:	4413      	add	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	4413      	add	r3, r2
 80118e0:	3304      	adds	r3, #4
 80118e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	78db      	ldrb	r3, [r3, #3]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d108      	bne.n	80118fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	2200      	movs	r2, #0
 80118f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80118f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	4619      	mov	r1, r3
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f00b fbc3 	bl	801d084 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80118fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011900:	015a      	lsls	r2, r3, #5
 8011902:	69fb      	ldr	r3, [r7, #28]
 8011904:	4413      	add	r3, r2
 8011906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801190a:	461a      	mov	r2, r3
 801190c:	2302      	movs	r3, #2
 801190e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	f003 0320 	and.w	r3, r3, #32
 8011916:	2b00      	cmp	r3, #0
 8011918:	d008      	beq.n	801192c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801191c:	015a      	lsls	r2, r3, #5
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	4413      	add	r3, r2
 8011922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011926:	461a      	mov	r2, r3
 8011928:	2320      	movs	r3, #32
 801192a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011932:	2b00      	cmp	r3, #0
 8011934:	d009      	beq.n	801194a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8011936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011938:	015a      	lsls	r2, r3, #5
 801193a:	69fb      	ldr	r3, [r7, #28]
 801193c:	4413      	add	r3, r2
 801193e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011942:	461a      	mov	r2, r3
 8011944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011948:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801194c:	3301      	adds	r3, #1
 801194e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8011950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011952:	085b      	lsrs	r3, r3, #1
 8011954:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8011956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011958:	2b00      	cmp	r3, #0
 801195a:	f47f af62 	bne.w	8011822 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	4618      	mov	r0, r3
 8011964:	f005 fe8e 	bl	8017684 <USB_ReadInterrupts>
 8011968:	4603      	mov	r3, r0
 801196a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801196e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011972:	f040 80db 	bne.w	8011b2c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4618      	mov	r0, r3
 801197c:	f005 feaf 	bl	80176de <USB_ReadDevAllInEpInterrupt>
 8011980:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8011982:	2300      	movs	r3, #0
 8011984:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8011986:	e0cd      	b.n	8011b24 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8011988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801198a:	f003 0301 	and.w	r3, r3, #1
 801198e:	2b00      	cmp	r3, #0
 8011990:	f000 80c2 	beq.w	8011b18 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801199a:	b2d2      	uxtb	r2, r2
 801199c:	4611      	mov	r1, r2
 801199e:	4618      	mov	r0, r3
 80119a0:	f005 fed5 	bl	801774e <USB_ReadDevInEPInterrupt>
 80119a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	f003 0301 	and.w	r3, r3, #1
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d057      	beq.n	8011a60 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80119b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b2:	f003 030f 	and.w	r3, r3, #15
 80119b6:	2201      	movs	r2, #1
 80119b8:	fa02 f303 	lsl.w	r3, r2, r3
 80119bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	43db      	mvns	r3, r3
 80119ca:	69f9      	ldr	r1, [r7, #28]
 80119cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80119d0:	4013      	ands	r3, r2
 80119d2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80119d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d6:	015a      	lsls	r2, r3, #5
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	4413      	add	r3, r2
 80119dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119e0:	461a      	mov	r2, r3
 80119e2:	2301      	movs	r3, #1
 80119e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	691b      	ldr	r3, [r3, #16]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d132      	bne.n	8011a54 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80119ee:	6879      	ldr	r1, [r7, #4]
 80119f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119f2:	4613      	mov	r3, r2
 80119f4:	00db      	lsls	r3, r3, #3
 80119f6:	4413      	add	r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	440b      	add	r3, r1
 80119fc:	334c      	adds	r3, #76	@ 0x4c
 80119fe:	6819      	ldr	r1, [r3, #0]
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a04:	4613      	mov	r3, r2
 8011a06:	00db      	lsls	r3, r3, #3
 8011a08:	4413      	add	r3, r2
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	4403      	add	r3, r0
 8011a0e:	3348      	adds	r3, #72	@ 0x48
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4419      	add	r1, r3
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a18:	4613      	mov	r3, r2
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	4413      	add	r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	4403      	add	r3, r0
 8011a22:	334c      	adds	r3, #76	@ 0x4c
 8011a24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8011a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d113      	bne.n	8011a54 <HAL_PCD_IRQHandler+0x3a2>
 8011a2c:	6879      	ldr	r1, [r7, #4]
 8011a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a30:	4613      	mov	r3, r2
 8011a32:	00db      	lsls	r3, r3, #3
 8011a34:	4413      	add	r3, r2
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	440b      	add	r3, r1
 8011a3a:	3354      	adds	r3, #84	@ 0x54
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d108      	bne.n	8011a54 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6818      	ldr	r0, [r3, #0]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	2101      	movs	r1, #1
 8011a50:	f005 fedc 	bl	801780c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8011a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	4619      	mov	r1, r3
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f00b fa8d 	bl	801cf7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	f003 0308 	and.w	r3, r3, #8
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d008      	beq.n	8011a7c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6c:	015a      	lsls	r2, r3, #5
 8011a6e:	69fb      	ldr	r3, [r7, #28]
 8011a70:	4413      	add	r3, r2
 8011a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a76:	461a      	mov	r2, r3
 8011a78:	2308      	movs	r3, #8
 8011a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	f003 0310 	and.w	r3, r3, #16
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d008      	beq.n	8011a98 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8011a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a88:	015a      	lsls	r2, r3, #5
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a92:	461a      	mov	r2, r3
 8011a94:	2310      	movs	r3, #16
 8011a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d008      	beq.n	8011ab4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa4:	015a      	lsls	r2, r3, #5
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aae:	461a      	mov	r2, r3
 8011ab0:	2340      	movs	r3, #64	@ 0x40
 8011ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	f003 0302 	and.w	r3, r3, #2
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d023      	beq.n	8011b06 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8011abe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ac0:	6a38      	ldr	r0, [r7, #32]
 8011ac2:	f004 fdbd 	bl	8016640 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8011ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ac8:	4613      	mov	r3, r2
 8011aca:	00db      	lsls	r3, r3, #3
 8011acc:	4413      	add	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	3338      	adds	r3, #56	@ 0x38
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	4413      	add	r3, r2
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	78db      	ldrb	r3, [r3, #3]
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d108      	bne.n	8011af4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	4619      	mov	r1, r3
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f00b fada 	bl	801d0a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8011af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af6:	015a      	lsls	r2, r3, #5
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	4413      	add	r3, r2
 8011afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b00:	461a      	mov	r2, r3
 8011b02:	2302      	movs	r3, #2
 8011b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d003      	beq.n	8011b18 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8011b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 fcdb 	bl	80124ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8011b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8011b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b20:	085b      	lsrs	r3, r3, #1
 8011b22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8011b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f47f af2e 	bne.w	8011988 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4618      	mov	r0, r3
 8011b32:	f005 fda7 	bl	8017684 <USB_ReadInterrupts>
 8011b36:	4603      	mov	r3, r0
 8011b38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b40:	d122      	bne.n	8011b88 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	69fa      	ldr	r2, [r7, #28]
 8011b4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011b50:	f023 0301 	bic.w	r3, r3, #1
 8011b54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d108      	bne.n	8011b72 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2200      	movs	r2, #0
 8011b64:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8011b68:	2100      	movs	r1, #0
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 fec2 	bl	80128f4 <HAL_PCDEx_LPM_Callback>
 8011b70:	e002      	b.n	8011b78 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f00b fa78 	bl	801d068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	695a      	ldr	r2, [r3, #20]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8011b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f005 fd79 	bl	8017684 <USB_ReadInterrupts>
 8011b92:	4603      	mov	r3, r0
 8011b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011b9c:	d112      	bne.n	8011bc4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	f003 0301 	and.w	r3, r3, #1
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d102      	bne.n	8011bb4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f00b fa34 	bl	801d01c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	695a      	ldr	r2, [r3, #20]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8011bc2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f005 fd5b 	bl	8017684 <USB_ReadInterrupts>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011bd8:	f040 80b7 	bne.w	8011d4a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	69fa      	ldr	r2, [r7, #28]
 8011be6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011bea:	f023 0301 	bic.w	r3, r3, #1
 8011bee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2110      	movs	r1, #16
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f004 fd22 	bl	8016640 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c00:	e046      	b.n	8011c90 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8011c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c04:	015a      	lsls	r2, r3, #5
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	4413      	add	r3, r2
 8011c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c0e:	461a      	mov	r2, r3
 8011c10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011c14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c18:	015a      	lsls	r2, r3, #5
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c26:	0151      	lsls	r1, r2, #5
 8011c28:	69fa      	ldr	r2, [r7, #28]
 8011c2a:	440a      	add	r2, r1
 8011c2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8011c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c38:	015a      	lsls	r2, r3, #5
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	4413      	add	r3, r2
 8011c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c42:	461a      	mov	r2, r3
 8011c44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011c48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c4c:	015a      	lsls	r2, r3, #5
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	4413      	add	r3, r2
 8011c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c5a:	0151      	lsls	r1, r2, #5
 8011c5c:	69fa      	ldr	r2, [r7, #28]
 8011c5e:	440a      	add	r2, r1
 8011c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011c64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c6c:	015a      	lsls	r2, r3, #5
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	4413      	add	r3, r2
 8011c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c7a:	0151      	lsls	r1, r2, #5
 8011c7c:	69fa      	ldr	r2, [r7, #28]
 8011c7e:	440a      	add	r2, r1
 8011c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011c84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011c88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d3b3      	bcc.n	8011c02 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8011c9a:	69fb      	ldr	r3, [r7, #28]
 8011c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ca0:	69db      	ldr	r3, [r3, #28]
 8011ca2:	69fa      	ldr	r2, [r7, #28]
 8011ca4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011ca8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8011cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d016      	beq.n	8011ce4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011cc0:	69fa      	ldr	r2, [r7, #28]
 8011cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011cc6:	f043 030b 	orr.w	r3, r3, #11
 8011cca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cd6:	69fa      	ldr	r2, [r7, #28]
 8011cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011cdc:	f043 030b 	orr.w	r3, r3, #11
 8011ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8011ce2:	e015      	b.n	8011d10 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cea:	695b      	ldr	r3, [r3, #20]
 8011cec:	69fa      	ldr	r2, [r7, #28]
 8011cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011cf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011cf6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8011cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	69fa      	ldr	r2, [r7, #28]
 8011d06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011d0a:	f043 030b 	orr.w	r3, r3, #11
 8011d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	69fa      	ldr	r2, [r7, #28]
 8011d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011d1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6818      	ldr	r0, [r3, #0]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	691b      	ldr	r3, [r3, #16]
 8011d2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8011d34:	461a      	mov	r2, r3
 8011d36:	f005 fd69 	bl	801780c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	695a      	ldr	r2, [r3, #20]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8011d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f005 fc98 	bl	8017684 <USB_ReadInterrupts>
 8011d54:	4603      	mov	r3, r0
 8011d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011d5e:	d124      	bne.n	8011daa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f005 fd2e 	bl	80177c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f004 fce3 	bl	801673a <USB_GetDevSpeed>
 8011d74:	4603      	mov	r3, r0
 8011d76:	461a      	mov	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681c      	ldr	r4, [r3, #0]
 8011d80:	f001 f9e8 	bl	8013154 <HAL_RCC_GetHCLKFreq>
 8011d84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011d8a:	b2db      	uxtb	r3, r3
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	4620      	mov	r0, r4
 8011d90:	f004 f9e2 	bl	8016158 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f00b f918 	bl	801cfca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	695a      	ldr	r2, [r3, #20]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8011da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4618      	mov	r0, r3
 8011db0:	f005 fc68 	bl	8017684 <USB_ReadInterrupts>
 8011db4:	4603      	mov	r3, r0
 8011db6:	f003 0308 	and.w	r3, r3, #8
 8011dba:	2b08      	cmp	r3, #8
 8011dbc:	d10a      	bne.n	8011dd4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f00b f8f5 	bl	801cfae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	695a      	ldr	r2, [r3, #20]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f002 0208 	and.w	r2, r2, #8
 8011dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f005 fc53 	bl	8017684 <USB_ReadInterrupts>
 8011dde:	4603      	mov	r3, r0
 8011de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011de4:	2b80      	cmp	r3, #128	@ 0x80
 8011de6:	d122      	bne.n	8011e2e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8011de8:	6a3b      	ldr	r3, [r7, #32]
 8011dea:	699b      	ldr	r3, [r3, #24]
 8011dec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011df4:	2301      	movs	r3, #1
 8011df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8011df8:	e014      	b.n	8011e24 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8011dfa:	6879      	ldr	r1, [r7, #4]
 8011dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dfe:	4613      	mov	r3, r2
 8011e00:	00db      	lsls	r3, r3, #3
 8011e02:	4413      	add	r3, r2
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	440b      	add	r3, r1
 8011e08:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d105      	bne.n	8011e1e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8011e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	4619      	mov	r1, r3
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f000 fb27 	bl	801246c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e20:	3301      	adds	r3, #1
 8011e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d3e5      	bcc.n	8011dfa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f005 fc26 	bl	8017684 <USB_ReadInterrupts>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011e42:	d13b      	bne.n	8011ebc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011e44:	2301      	movs	r3, #1
 8011e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e48:	e02b      	b.n	8011ea2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8011e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4c:	015a      	lsls	r2, r3, #5
 8011e4e:	69fb      	ldr	r3, [r7, #28]
 8011e50:	4413      	add	r3, r2
 8011e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8011e5a:	6879      	ldr	r1, [r7, #4]
 8011e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e5e:	4613      	mov	r3, r2
 8011e60:	00db      	lsls	r3, r3, #3
 8011e62:	4413      	add	r3, r2
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	440b      	add	r3, r1
 8011e68:	3340      	adds	r3, #64	@ 0x40
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d115      	bne.n	8011e9c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8011e70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	da12      	bge.n	8011e9c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	00db      	lsls	r3, r3, #3
 8011e7e:	4413      	add	r3, r2
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	440b      	add	r3, r1
 8011e84:	333f      	adds	r3, #63	@ 0x3f
 8011e86:	2201      	movs	r2, #1
 8011e88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8011e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	4619      	mov	r1, r3
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 fae8 	bl	801246c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d3ce      	bcc.n	8011e4a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	695a      	ldr	r2, [r3, #20]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8011eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f005 fbdf 	bl	8017684 <USB_ReadInterrupts>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011ed0:	d155      	bne.n	8011f7e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ed6:	e045      	b.n	8011f64 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eda:	015a      	lsls	r2, r3, #5
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	4413      	add	r3, r2
 8011ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011ee8:	6879      	ldr	r1, [r7, #4]
 8011eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eec:	4613      	mov	r3, r2
 8011eee:	00db      	lsls	r3, r3, #3
 8011ef0:	4413      	add	r3, r2
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	440b      	add	r3, r1
 8011ef6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d12e      	bne.n	8011f5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	da2b      	bge.n	8011f5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8011f12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d121      	bne.n	8011f5e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8011f1a:	6879      	ldr	r1, [r7, #4]
 8011f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f1e:	4613      	mov	r3, r2
 8011f20:	00db      	lsls	r3, r3, #3
 8011f22:	4413      	add	r3, r2
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	440b      	add	r3, r1
 8011f28:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8011f30:	6a3b      	ldr	r3, [r7, #32]
 8011f32:	699b      	ldr	r3, [r3, #24]
 8011f34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011f38:	6a3b      	ldr	r3, [r7, #32]
 8011f3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
 8011f3e:	695b      	ldr	r3, [r3, #20]
 8011f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d10a      	bne.n	8011f5e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	69fa      	ldr	r2, [r7, #28]
 8011f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011f5a:	6053      	str	r3, [r2, #4]
            break;
 8011f5c:	e007      	b.n	8011f6e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f60:	3301      	adds	r3, #1
 8011f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d3b4      	bcc.n	8011ed8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	695a      	ldr	r2, [r3, #20]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8011f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f005 fb7e 	bl	8017684 <USB_ReadInterrupts>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f92:	d10a      	bne.n	8011faa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f00b f899 	bl	801d0cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	695a      	ldr	r2, [r3, #20]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8011fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f005 fb68 	bl	8017684 <USB_ReadInterrupts>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	f003 0304 	and.w	r3, r3, #4
 8011fba:	2b04      	cmp	r3, #4
 8011fbc:	d115      	bne.n	8011fea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	f003 0304 	and.w	r3, r3, #4
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d002      	beq.n	8011fd6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f00b f889 	bl	801d0e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	6859      	ldr	r1, [r3, #4]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	69ba      	ldr	r2, [r7, #24]
 8011fe2:	430a      	orrs	r2, r1
 8011fe4:	605a      	str	r2, [r3, #4]
 8011fe6:	e000      	b.n	8011fea <HAL_PCD_IRQHandler+0x938>
      return;
 8011fe8:	bf00      	nop
    }
  }
}
 8011fea:	3734      	adds	r7, #52	@ 0x34
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd90      	pop	{r4, r7, pc}

08011ff0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8012002:	2b01      	cmp	r3, #1
 8012004:	d101      	bne.n	801200a <HAL_PCD_SetAddress+0x1a>
 8012006:	2302      	movs	r3, #2
 8012008:	e013      	b.n	8012032 <HAL_PCD_SetAddress+0x42>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2201      	movs	r2, #1
 801200e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	78fa      	ldrb	r2, [r7, #3]
 8012016:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	78fa      	ldrb	r2, [r7, #3]
 8012020:	4611      	mov	r1, r2
 8012022:	4618      	mov	r0, r3
 8012024:	f005 fac6 	bl	80175b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2200      	movs	r2, #0
 801202c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8012030:	2300      	movs	r3, #0
}
 8012032:	4618      	mov	r0, r3
 8012034:	3708      	adds	r7, #8
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}

0801203a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801203a:	b580      	push	{r7, lr}
 801203c:	b084      	sub	sp, #16
 801203e:	af00      	add	r7, sp, #0
 8012040:	6078      	str	r0, [r7, #4]
 8012042:	4608      	mov	r0, r1
 8012044:	4611      	mov	r1, r2
 8012046:	461a      	mov	r2, r3
 8012048:	4603      	mov	r3, r0
 801204a:	70fb      	strb	r3, [r7, #3]
 801204c:	460b      	mov	r3, r1
 801204e:	803b      	strh	r3, [r7, #0]
 8012050:	4613      	mov	r3, r2
 8012052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012054:	2300      	movs	r3, #0
 8012056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801205c:	2b00      	cmp	r3, #0
 801205e:	da0f      	bge.n	8012080 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012060:	78fb      	ldrb	r3, [r7, #3]
 8012062:	f003 020f 	and.w	r2, r3, #15
 8012066:	4613      	mov	r3, r2
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	4413      	add	r3, r2
 801206c:	009b      	lsls	r3, r3, #2
 801206e:	3338      	adds	r3, #56	@ 0x38
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	4413      	add	r3, r2
 8012074:	3304      	adds	r3, #4
 8012076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	2201      	movs	r2, #1
 801207c:	705a      	strb	r2, [r3, #1]
 801207e:	e00f      	b.n	80120a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012080:	78fb      	ldrb	r3, [r7, #3]
 8012082:	f003 020f 	and.w	r2, r3, #15
 8012086:	4613      	mov	r3, r2
 8012088:	00db      	lsls	r3, r3, #3
 801208a:	4413      	add	r3, r2
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	4413      	add	r3, r2
 8012096:	3304      	adds	r3, #4
 8012098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2200      	movs	r2, #0
 801209e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80120a0:	78fb      	ldrb	r3, [r7, #3]
 80120a2:	f003 030f 	and.w	r3, r3, #15
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80120ac:	883a      	ldrh	r2, [r7, #0]
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	78ba      	ldrb	r2, [r7, #2]
 80120b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	785b      	ldrb	r3, [r3, #1]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d004      	beq.n	80120ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	461a      	mov	r2, r3
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80120ca:	78bb      	ldrb	r3, [r7, #2]
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	d102      	bne.n	80120d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2200      	movs	r2, #0
 80120d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d101      	bne.n	80120e4 <HAL_PCD_EP_Open+0xaa>
 80120e0:	2302      	movs	r3, #2
 80120e2:	e00e      	b.n	8012102 <HAL_PCD_EP_Open+0xc8>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2201      	movs	r2, #1
 80120e8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	68f9      	ldr	r1, [r7, #12]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f004 fb46 	bl	8016784 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2200      	movs	r2, #0
 80120fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8012100:	7afb      	ldrb	r3, [r7, #11]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}

0801210a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801210a:	b580      	push	{r7, lr}
 801210c:	b084      	sub	sp, #16
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	460b      	mov	r3, r1
 8012114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801211a:	2b00      	cmp	r3, #0
 801211c:	da0f      	bge.n	801213e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801211e:	78fb      	ldrb	r3, [r7, #3]
 8012120:	f003 020f 	and.w	r2, r3, #15
 8012124:	4613      	mov	r3, r2
 8012126:	00db      	lsls	r3, r3, #3
 8012128:	4413      	add	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	3338      	adds	r3, #56	@ 0x38
 801212e:	687a      	ldr	r2, [r7, #4]
 8012130:	4413      	add	r3, r2
 8012132:	3304      	adds	r3, #4
 8012134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2201      	movs	r2, #1
 801213a:	705a      	strb	r2, [r3, #1]
 801213c:	e00f      	b.n	801215e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801213e:	78fb      	ldrb	r3, [r7, #3]
 8012140:	f003 020f 	and.w	r2, r3, #15
 8012144:	4613      	mov	r3, r2
 8012146:	00db      	lsls	r3, r3, #3
 8012148:	4413      	add	r3, r2
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	4413      	add	r3, r2
 8012154:	3304      	adds	r3, #4
 8012156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	2200      	movs	r2, #0
 801215c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801215e:	78fb      	ldrb	r3, [r7, #3]
 8012160:	f003 030f 	and.w	r3, r3, #15
 8012164:	b2da      	uxtb	r2, r3
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8012170:	2b01      	cmp	r3, #1
 8012172:	d101      	bne.n	8012178 <HAL_PCD_EP_Close+0x6e>
 8012174:	2302      	movs	r3, #2
 8012176:	e00e      	b.n	8012196 <HAL_PCD_EP_Close+0x8c>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2201      	movs	r2, #1
 801217c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	68f9      	ldr	r1, [r7, #12]
 8012186:	4618      	mov	r0, r3
 8012188:	f004 fb84 	bl	8016894 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8012194:	2300      	movs	r3, #0
}
 8012196:	4618      	mov	r0, r3
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b086      	sub	sp, #24
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	60f8      	str	r0, [r7, #12]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
 80121aa:	460b      	mov	r3, r1
 80121ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80121ae:	7afb      	ldrb	r3, [r7, #11]
 80121b0:	f003 020f 	and.w	r2, r3, #15
 80121b4:	4613      	mov	r3, r2
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	4413      	add	r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80121c0:	68fa      	ldr	r2, [r7, #12]
 80121c2:	4413      	add	r3, r2
 80121c4:	3304      	adds	r3, #4
 80121c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	683a      	ldr	r2, [r7, #0]
 80121d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2200      	movs	r2, #0
 80121d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	2200      	movs	r2, #0
 80121de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80121e0:	7afb      	ldrb	r3, [r7, #11]
 80121e2:	f003 030f 	and.w	r3, r3, #15
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	691b      	ldr	r3, [r3, #16]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d102      	bne.n	80121fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80121fa:	7afb      	ldrb	r3, [r7, #11]
 80121fc:	f003 030f 	and.w	r3, r3, #15
 8012200:	2b00      	cmp	r3, #0
 8012202:	d109      	bne.n	8012218 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6818      	ldr	r0, [r3, #0]
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	691b      	ldr	r3, [r3, #16]
 801220c:	b2db      	uxtb	r3, r3
 801220e:	461a      	mov	r2, r3
 8012210:	6979      	ldr	r1, [r7, #20]
 8012212:	f004 fe63 	bl	8016edc <USB_EP0StartXfer>
 8012216:	e008      	b.n	801222a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	6818      	ldr	r0, [r3, #0]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	691b      	ldr	r3, [r3, #16]
 8012220:	b2db      	uxtb	r3, r3
 8012222:	461a      	mov	r2, r3
 8012224:	6979      	ldr	r1, [r7, #20]
 8012226:	f004 fc11 	bl	8016a4c <USB_EPStartXfer>
  }

  return HAL_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3718      	adds	r7, #24
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012234:	b480      	push	{r7}
 8012236:	b083      	sub	sp, #12
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	460b      	mov	r3, r1
 801223e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012240:	78fb      	ldrb	r3, [r7, #3]
 8012242:	f003 020f 	and.w	r2, r3, #15
 8012246:	6879      	ldr	r1, [r7, #4]
 8012248:	4613      	mov	r3, r2
 801224a:	00db      	lsls	r3, r3, #3
 801224c:	4413      	add	r3, r2
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	440b      	add	r3, r1
 8012252:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8012256:	681b      	ldr	r3, [r3, #0]
}
 8012258:	4618      	mov	r0, r3
 801225a:	370c      	adds	r7, #12
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr

08012264 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	607a      	str	r2, [r7, #4]
 801226e:	603b      	str	r3, [r7, #0]
 8012270:	460b      	mov	r3, r1
 8012272:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012274:	7afb      	ldrb	r3, [r7, #11]
 8012276:	f003 020f 	and.w	r2, r3, #15
 801227a:	4613      	mov	r3, r2
 801227c:	00db      	lsls	r3, r3, #3
 801227e:	4413      	add	r3, r2
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	3338      	adds	r3, #56	@ 0x38
 8012284:	68fa      	ldr	r2, [r7, #12]
 8012286:	4413      	add	r3, r2
 8012288:	3304      	adds	r3, #4
 801228a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	683a      	ldr	r2, [r7, #0]
 8012296:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	2200      	movs	r2, #0
 801229c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	2201      	movs	r2, #1
 80122a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80122a4:	7afb      	ldrb	r3, [r7, #11]
 80122a6:	f003 030f 	and.w	r3, r3, #15
 80122aa:	b2da      	uxtb	r2, r3
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	691b      	ldr	r3, [r3, #16]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d102      	bne.n	80122be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80122be:	7afb      	ldrb	r3, [r7, #11]
 80122c0:	f003 030f 	and.w	r3, r3, #15
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d109      	bne.n	80122dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6818      	ldr	r0, [r3, #0]
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	691b      	ldr	r3, [r3, #16]
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	461a      	mov	r2, r3
 80122d4:	6979      	ldr	r1, [r7, #20]
 80122d6:	f004 fe01 	bl	8016edc <USB_EP0StartXfer>
 80122da:	e008      	b.n	80122ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	6818      	ldr	r0, [r3, #0]
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	461a      	mov	r2, r3
 80122e8:	6979      	ldr	r1, [r7, #20]
 80122ea:	f004 fbaf 	bl	8016a4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80122ee:	2300      	movs	r3, #0
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3718      	adds	r7, #24
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	460b      	mov	r3, r1
 8012302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012304:	78fb      	ldrb	r3, [r7, #3]
 8012306:	f003 020f 	and.w	r2, r3, #15
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	429a      	cmp	r2, r3
 8012310:	d901      	bls.n	8012316 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8012312:	2301      	movs	r3, #1
 8012314:	e050      	b.n	80123b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801231a:	2b00      	cmp	r3, #0
 801231c:	da0f      	bge.n	801233e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801231e:	78fb      	ldrb	r3, [r7, #3]
 8012320:	f003 020f 	and.w	r2, r3, #15
 8012324:	4613      	mov	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	4413      	add	r3, r2
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	3338      	adds	r3, #56	@ 0x38
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	4413      	add	r3, r2
 8012332:	3304      	adds	r3, #4
 8012334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2201      	movs	r2, #1
 801233a:	705a      	strb	r2, [r3, #1]
 801233c:	e00d      	b.n	801235a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801233e:	78fa      	ldrb	r2, [r7, #3]
 8012340:	4613      	mov	r3, r2
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	4413      	add	r3, r2
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	4413      	add	r3, r2
 8012350:	3304      	adds	r3, #4
 8012352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2200      	movs	r2, #0
 8012358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2201      	movs	r2, #1
 801235e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012360:	78fb      	ldrb	r3, [r7, #3]
 8012362:	f003 030f 	and.w	r3, r3, #15
 8012366:	b2da      	uxtb	r2, r3
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8012372:	2b01      	cmp	r3, #1
 8012374:	d101      	bne.n	801237a <HAL_PCD_EP_SetStall+0x82>
 8012376:	2302      	movs	r3, #2
 8012378:	e01e      	b.n	80123b8 <HAL_PCD_EP_SetStall+0xc0>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2201      	movs	r2, #1
 801237e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	68f9      	ldr	r1, [r7, #12]
 8012388:	4618      	mov	r0, r3
 801238a:	f005 f83f 	bl	801740c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801238e:	78fb      	ldrb	r3, [r7, #3]
 8012390:	f003 030f 	and.w	r3, r3, #15
 8012394:	2b00      	cmp	r3, #0
 8012396:	d10a      	bne.n	80123ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6818      	ldr	r0, [r3, #0]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	691b      	ldr	r3, [r3, #16]
 80123a0:	b2d9      	uxtb	r1, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80123a8:	461a      	mov	r2, r3
 80123aa:	f005 fa2f 	bl	801780c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2200      	movs	r2, #0
 80123b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80123b6:	2300      	movs	r3, #0
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3710      	adds	r7, #16
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b084      	sub	sp, #16
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	460b      	mov	r3, r1
 80123ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80123cc:	78fb      	ldrb	r3, [r7, #3]
 80123ce:	f003 020f 	and.w	r2, r3, #15
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d901      	bls.n	80123de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80123da:	2301      	movs	r3, #1
 80123dc:	e042      	b.n	8012464 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80123de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	da0f      	bge.n	8012406 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80123e6:	78fb      	ldrb	r3, [r7, #3]
 80123e8:	f003 020f 	and.w	r2, r3, #15
 80123ec:	4613      	mov	r3, r2
 80123ee:	00db      	lsls	r3, r3, #3
 80123f0:	4413      	add	r3, r2
 80123f2:	009b      	lsls	r3, r3, #2
 80123f4:	3338      	adds	r3, #56	@ 0x38
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	4413      	add	r3, r2
 80123fa:	3304      	adds	r3, #4
 80123fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2201      	movs	r2, #1
 8012402:	705a      	strb	r2, [r3, #1]
 8012404:	e00f      	b.n	8012426 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012406:	78fb      	ldrb	r3, [r7, #3]
 8012408:	f003 020f 	and.w	r2, r3, #15
 801240c:	4613      	mov	r3, r2
 801240e:	00db      	lsls	r3, r3, #3
 8012410:	4413      	add	r3, r2
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	4413      	add	r3, r2
 801241c:	3304      	adds	r3, #4
 801241e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2200      	movs	r2, #0
 8012424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2200      	movs	r2, #0
 801242a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801242c:	78fb      	ldrb	r3, [r7, #3]
 801242e:	f003 030f 	and.w	r3, r3, #15
 8012432:	b2da      	uxtb	r2, r3
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 801243e:	2b01      	cmp	r3, #1
 8012440:	d101      	bne.n	8012446 <HAL_PCD_EP_ClrStall+0x86>
 8012442:	2302      	movs	r3, #2
 8012444:	e00e      	b.n	8012464 <HAL_PCD_EP_ClrStall+0xa4>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2201      	movs	r2, #1
 801244a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	68f9      	ldr	r1, [r7, #12]
 8012454:	4618      	mov	r0, r3
 8012456:	f005 f847 	bl	80174e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8012462:	2300      	movs	r3, #0
}
 8012464:	4618      	mov	r0, r3
 8012466:	3710      	adds	r7, #16
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	460b      	mov	r3, r1
 8012476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8012478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801247c:	2b00      	cmp	r3, #0
 801247e:	da0c      	bge.n	801249a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012480:	78fb      	ldrb	r3, [r7, #3]
 8012482:	f003 020f 	and.w	r2, r3, #15
 8012486:	4613      	mov	r3, r2
 8012488:	00db      	lsls	r3, r3, #3
 801248a:	4413      	add	r3, r2
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	3338      	adds	r3, #56	@ 0x38
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	4413      	add	r3, r2
 8012494:	3304      	adds	r3, #4
 8012496:	60fb      	str	r3, [r7, #12]
 8012498:	e00c      	b.n	80124b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801249a:	78fb      	ldrb	r3, [r7, #3]
 801249c:	f003 020f 	and.w	r2, r3, #15
 80124a0:	4613      	mov	r3, r2
 80124a2:	00db      	lsls	r3, r3, #3
 80124a4:	4413      	add	r3, r2
 80124a6:	009b      	lsls	r3, r3, #2
 80124a8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	4413      	add	r3, r2
 80124b0:	3304      	adds	r3, #4
 80124b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	68f9      	ldr	r1, [r7, #12]
 80124ba:	4618      	mov	r0, r3
 80124bc:	f004 fe66 	bl	801718c <USB_EPStopXfer>
 80124c0:	4603      	mov	r3, r0
 80124c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80124c4:	7afb      	ldrb	r3, [r7, #11]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3710      	adds	r7, #16
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b08a      	sub	sp, #40	@ 0x28
 80124d2:	af02      	add	r7, sp, #8
 80124d4:	6078      	str	r0, [r7, #4]
 80124d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80124e2:	683a      	ldr	r2, [r7, #0]
 80124e4:	4613      	mov	r3, r2
 80124e6:	00db      	lsls	r3, r3, #3
 80124e8:	4413      	add	r3, r2
 80124ea:	009b      	lsls	r3, r3, #2
 80124ec:	3338      	adds	r3, #56	@ 0x38
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	4413      	add	r3, r2
 80124f2:	3304      	adds	r3, #4
 80124f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	6a1a      	ldr	r2, [r3, #32]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	699b      	ldr	r3, [r3, #24]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d901      	bls.n	8012506 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8012502:	2301      	movs	r3, #1
 8012504:	e06c      	b.n	80125e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	699a      	ldr	r2, [r3, #24]
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	6a1b      	ldr	r3, [r3, #32]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	69fa      	ldr	r2, [r7, #28]
 8012518:	429a      	cmp	r2, r3
 801251a:	d902      	bls.n	8012522 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	3303      	adds	r3, #3
 8012526:	089b      	lsrs	r3, r3, #2
 8012528:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801252a:	e02b      	b.n	8012584 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	699a      	ldr	r2, [r3, #24]
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	6a1b      	ldr	r3, [r3, #32]
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	69fa      	ldr	r2, [r7, #28]
 801253e:	429a      	cmp	r2, r3
 8012540:	d902      	bls.n	8012548 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	3303      	adds	r3, #3
 801254c:	089b      	lsrs	r3, r3, #2
 801254e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	6919      	ldr	r1, [r3, #16]
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	b2da      	uxtb	r2, r3
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012560:	b2db      	uxtb	r3, r3
 8012562:	9300      	str	r3, [sp, #0]
 8012564:	4603      	mov	r3, r0
 8012566:	6978      	ldr	r0, [r7, #20]
 8012568:	f004 feba 	bl	80172e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	691a      	ldr	r2, [r3, #16]
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	441a      	add	r2, r3
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6a1a      	ldr	r2, [r3, #32]
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	441a      	add	r2, r3
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	015a      	lsls	r2, r3, #5
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	4413      	add	r3, r2
 801258c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012590:	699b      	ldr	r3, [r3, #24]
 8012592:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012594:	69ba      	ldr	r2, [r7, #24]
 8012596:	429a      	cmp	r2, r3
 8012598:	d809      	bhi.n	80125ae <PCD_WriteEmptyTxFifo+0xe0>
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	6a1a      	ldr	r2, [r3, #32]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d203      	bcs.n	80125ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	699b      	ldr	r3, [r3, #24]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d1be      	bne.n	801252c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	699a      	ldr	r2, [r3, #24]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	6a1b      	ldr	r3, [r3, #32]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d811      	bhi.n	80125de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	f003 030f 	and.w	r3, r3, #15
 80125c0:	2201      	movs	r2, #1
 80125c2:	fa02 f303 	lsl.w	r3, r2, r3
 80125c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80125ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	43db      	mvns	r3, r3
 80125d4:	6939      	ldr	r1, [r7, #16]
 80125d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80125da:	4013      	ands	r3, r2
 80125dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80125de:	2300      	movs	r3, #0
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3720      	adds	r7, #32
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b088      	sub	sp, #32
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80125fc:	69fb      	ldr	r3, [r7, #28]
 80125fe:	333c      	adds	r3, #60	@ 0x3c
 8012600:	3304      	adds	r3, #4
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	015a      	lsls	r2, r3, #5
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	4413      	add	r3, r2
 801260e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012612:	689b      	ldr	r3, [r3, #8]
 8012614:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	691b      	ldr	r3, [r3, #16]
 801261a:	2b01      	cmp	r3, #1
 801261c:	d17b      	bne.n	8012716 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	f003 0308 	and.w	r3, r3, #8
 8012624:	2b00      	cmp	r3, #0
 8012626:	d015      	beq.n	8012654 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	4a61      	ldr	r2, [pc, #388]	@ (80127b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801262c:	4293      	cmp	r3, r2
 801262e:	f240 80b9 	bls.w	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012638:	2b00      	cmp	r3, #0
 801263a:	f000 80b3 	beq.w	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	015a      	lsls	r2, r3, #5
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	4413      	add	r3, r2
 8012646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801264a:	461a      	mov	r2, r3
 801264c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012650:	6093      	str	r3, [r2, #8]
 8012652:	e0a7      	b.n	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	f003 0320 	and.w	r3, r3, #32
 801265a:	2b00      	cmp	r3, #0
 801265c:	d009      	beq.n	8012672 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	015a      	lsls	r2, r3, #5
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	4413      	add	r3, r2
 8012666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801266a:	461a      	mov	r2, r3
 801266c:	2320      	movs	r3, #32
 801266e:	6093      	str	r3, [r2, #8]
 8012670:	e098      	b.n	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8012678:	2b00      	cmp	r3, #0
 801267a:	f040 8093 	bne.w	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	4a4b      	ldr	r2, [pc, #300]	@ (80127b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8012682:	4293      	cmp	r3, r2
 8012684:	d90f      	bls.n	80126a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00a      	beq.n	80126a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	015a      	lsls	r2, r3, #5
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	4413      	add	r3, r2
 8012698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801269c:	461a      	mov	r2, r3
 801269e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80126a2:	6093      	str	r3, [r2, #8]
 80126a4:	e07e      	b.n	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80126a6:	683a      	ldr	r2, [r7, #0]
 80126a8:	4613      	mov	r3, r2
 80126aa:	00db      	lsls	r3, r3, #3
 80126ac:	4413      	add	r3, r2
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	4413      	add	r3, r2
 80126b8:	3304      	adds	r3, #4
 80126ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	69da      	ldr	r2, [r3, #28]
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	0159      	lsls	r1, r3, #5
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	440b      	add	r3, r1
 80126c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80126cc:	691b      	ldr	r3, [r3, #16]
 80126ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80126d2:	1ad2      	subs	r2, r2, r3
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d114      	bne.n	8012708 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	699b      	ldr	r3, [r3, #24]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d109      	bne.n	80126fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6818      	ldr	r0, [r3, #0]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80126f0:	461a      	mov	r2, r3
 80126f2:	2101      	movs	r1, #1
 80126f4:	f005 f88a 	bl	801780c <USB_EP0_OutStart>
 80126f8:	e006      	b.n	8012708 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	691a      	ldr	r2, [r3, #16]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	6a1b      	ldr	r3, [r3, #32]
 8012702:	441a      	add	r2, r3
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	b2db      	uxtb	r3, r3
 801270c:	4619      	mov	r1, r3
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f00a fc18 	bl	801cf44 <HAL_PCD_DataOutStageCallback>
 8012714:	e046      	b.n	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	4a26      	ldr	r2, [pc, #152]	@ (80127b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801271a:	4293      	cmp	r3, r2
 801271c:	d124      	bne.n	8012768 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00a      	beq.n	801273e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	015a      	lsls	r2, r3, #5
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	4413      	add	r3, r2
 8012730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012734:	461a      	mov	r2, r3
 8012736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801273a:	6093      	str	r3, [r2, #8]
 801273c:	e032      	b.n	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	f003 0320 	and.w	r3, r3, #32
 8012744:	2b00      	cmp	r3, #0
 8012746:	d008      	beq.n	801275a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	015a      	lsls	r2, r3, #5
 801274c:	69bb      	ldr	r3, [r7, #24]
 801274e:	4413      	add	r3, r2
 8012750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012754:	461a      	mov	r2, r3
 8012756:	2320      	movs	r3, #32
 8012758:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	b2db      	uxtb	r3, r3
 801275e:	4619      	mov	r1, r3
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f00a fbef 	bl	801cf44 <HAL_PCD_DataOutStageCallback>
 8012766:	e01d      	b.n	80127a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d114      	bne.n	8012798 <PCD_EP_OutXfrComplete_int+0x1b0>
 801276e:	6879      	ldr	r1, [r7, #4]
 8012770:	683a      	ldr	r2, [r7, #0]
 8012772:	4613      	mov	r3, r2
 8012774:	00db      	lsls	r3, r3, #3
 8012776:	4413      	add	r3, r2
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	440b      	add	r3, r1
 801277c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d108      	bne.n	8012798 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6818      	ldr	r0, [r3, #0]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8012790:	461a      	mov	r2, r3
 8012792:	2100      	movs	r1, #0
 8012794:	f005 f83a 	bl	801780c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	b2db      	uxtb	r3, r3
 801279c:	4619      	mov	r1, r3
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f00a fbd0 	bl	801cf44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80127a4:	2300      	movs	r3, #0
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3720      	adds	r7, #32
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	4f54300a 	.word	0x4f54300a
 80127b4:	4f54310a 	.word	0x4f54310a

080127b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b086      	sub	sp, #24
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	333c      	adds	r3, #60	@ 0x3c
 80127d0:	3304      	adds	r3, #4
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	015a      	lsls	r2, r3, #5
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	4413      	add	r3, r2
 80127de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	4a15      	ldr	r2, [pc, #84]	@ (8012840 <PCD_EP_OutSetupPacket_int+0x88>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d90e      	bls.n	801280c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d009      	beq.n	801280c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	015a      	lsls	r2, r3, #5
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	4413      	add	r3, r2
 8012800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012804:	461a      	mov	r2, r3
 8012806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801280a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f00a fb87 	bl	801cf20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	4a0a      	ldr	r2, [pc, #40]	@ (8012840 <PCD_EP_OutSetupPacket_int+0x88>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d90c      	bls.n	8012834 <PCD_EP_OutSetupPacket_int+0x7c>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	691b      	ldr	r3, [r3, #16]
 801281e:	2b01      	cmp	r3, #1
 8012820:	d108      	bne.n	8012834 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6818      	ldr	r0, [r3, #0]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801282c:	461a      	mov	r2, r3
 801282e:	2101      	movs	r1, #1
 8012830:	f004 ffec 	bl	801780c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8012834:	2300      	movs	r3, #0
}
 8012836:	4618      	mov	r0, r3
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
 801283e:	bf00      	nop
 8012840:	4f54300a 	.word	0x4f54300a

08012844 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8012844:	b480      	push	{r7}
 8012846:	b085      	sub	sp, #20
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	460b      	mov	r3, r1
 801284e:	70fb      	strb	r3, [r7, #3]
 8012850:	4613      	mov	r3, r2
 8012852:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801285c:	78fb      	ldrb	r3, [r7, #3]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d107      	bne.n	8012872 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8012862:	883b      	ldrh	r3, [r7, #0]
 8012864:	0419      	lsls	r1, r3, #16
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	430a      	orrs	r2, r1
 801286e:	629a      	str	r2, [r3, #40]	@ 0x28
 8012870:	e028      	b.n	80128c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012878:	0c1b      	lsrs	r3, r3, #16
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	4413      	add	r3, r2
 801287e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8012880:	2300      	movs	r3, #0
 8012882:	73fb      	strb	r3, [r7, #15]
 8012884:	e00d      	b.n	80128a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	7bfb      	ldrb	r3, [r7, #15]
 801288c:	3340      	adds	r3, #64	@ 0x40
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	4413      	add	r3, r2
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	0c1b      	lsrs	r3, r3, #16
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	4413      	add	r3, r2
 801289a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801289c:	7bfb      	ldrb	r3, [r7, #15]
 801289e:	3301      	adds	r3, #1
 80128a0:	73fb      	strb	r3, [r7, #15]
 80128a2:	7bfa      	ldrb	r2, [r7, #15]
 80128a4:	78fb      	ldrb	r3, [r7, #3]
 80128a6:	3b01      	subs	r3, #1
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d3ec      	bcc.n	8012886 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80128ac:	883b      	ldrh	r3, [r7, #0]
 80128ae:	0418      	lsls	r0, r3, #16
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6819      	ldr	r1, [r3, #0]
 80128b4:	78fb      	ldrb	r3, [r7, #3]
 80128b6:	3b01      	subs	r3, #1
 80128b8:	68ba      	ldr	r2, [r7, #8]
 80128ba:	4302      	orrs	r2, r0
 80128bc:	3340      	adds	r3, #64	@ 0x40
 80128be:	009b      	lsls	r3, r3, #2
 80128c0:	440b      	add	r3, r1
 80128c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr

080128d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80128d2:	b480      	push	{r7}
 80128d4:	b083      	sub	sp, #12
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	460b      	mov	r3, r1
 80128dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	887a      	ldrh	r2, [r7, #2]
 80128e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	370c      	adds	r7, #12
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	460b      	mov	r3, r1
 80128fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8012900:	bf00      	nop
 8012902:	370c      	adds	r7, #12
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr

0801290c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d101      	bne.n	801291e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801291a:	2301      	movs	r3, #1
 801291c:	e267      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f003 0301 	and.w	r3, r3, #1
 8012926:	2b00      	cmp	r3, #0
 8012928:	d075      	beq.n	8012a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801292a:	4b88      	ldr	r3, [pc, #544]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	f003 030c 	and.w	r3, r3, #12
 8012932:	2b04      	cmp	r3, #4
 8012934:	d00c      	beq.n	8012950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012936:	4b85      	ldr	r3, [pc, #532]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801293e:	2b08      	cmp	r3, #8
 8012940:	d112      	bne.n	8012968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012942:	4b82      	ldr	r3, [pc, #520]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801294a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801294e:	d10b      	bne.n	8012968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012950:	4b7e      	ldr	r3, [pc, #504]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012958:	2b00      	cmp	r3, #0
 801295a:	d05b      	beq.n	8012a14 <HAL_RCC_OscConfig+0x108>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d157      	bne.n	8012a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012964:	2301      	movs	r3, #1
 8012966:	e242      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012970:	d106      	bne.n	8012980 <HAL_RCC_OscConfig+0x74>
 8012972:	4b76      	ldr	r3, [pc, #472]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4a75      	ldr	r2, [pc, #468]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801297c:	6013      	str	r3, [r2, #0]
 801297e:	e01d      	b.n	80129bc <HAL_RCC_OscConfig+0xb0>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012988:	d10c      	bne.n	80129a4 <HAL_RCC_OscConfig+0x98>
 801298a:	4b70      	ldr	r3, [pc, #448]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	4a6f      	ldr	r2, [pc, #444]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012994:	6013      	str	r3, [r2, #0]
 8012996:	4b6d      	ldr	r3, [pc, #436]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a6c      	ldr	r2, [pc, #432]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 801299c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80129a0:	6013      	str	r3, [r2, #0]
 80129a2:	e00b      	b.n	80129bc <HAL_RCC_OscConfig+0xb0>
 80129a4:	4b69      	ldr	r3, [pc, #420]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a68      	ldr	r2, [pc, #416]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 80129aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80129ae:	6013      	str	r3, [r2, #0]
 80129b0:	4b66      	ldr	r3, [pc, #408]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	4a65      	ldr	r2, [pc, #404]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 80129b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80129ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d013      	beq.n	80129ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80129c4:	f7fa ff98 	bl	800d8f8 <HAL_GetTick>
 80129c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129ca:	e008      	b.n	80129de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80129cc:	f7fa ff94 	bl	800d8f8 <HAL_GetTick>
 80129d0:	4602      	mov	r2, r0
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	1ad3      	subs	r3, r2, r3
 80129d6:	2b64      	cmp	r3, #100	@ 0x64
 80129d8:	d901      	bls.n	80129de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80129da:	2303      	movs	r3, #3
 80129dc:	e207      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129de:	4b5b      	ldr	r3, [pc, #364]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d0f0      	beq.n	80129cc <HAL_RCC_OscConfig+0xc0>
 80129ea:	e014      	b.n	8012a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80129ec:	f7fa ff84 	bl	800d8f8 <HAL_GetTick>
 80129f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80129f2:	e008      	b.n	8012a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80129f4:	f7fa ff80 	bl	800d8f8 <HAL_GetTick>
 80129f8:	4602      	mov	r2, r0
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	2b64      	cmp	r3, #100	@ 0x64
 8012a00:	d901      	bls.n	8012a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012a02:	2303      	movs	r3, #3
 8012a04:	e1f3      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a06:	4b51      	ldr	r3, [pc, #324]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d1f0      	bne.n	80129f4 <HAL_RCC_OscConfig+0xe8>
 8012a12:	e000      	b.n	8012a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f003 0302 	and.w	r3, r3, #2
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d063      	beq.n	8012aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a22:	4b4a      	ldr	r3, [pc, #296]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	f003 030c 	and.w	r3, r3, #12
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00b      	beq.n	8012a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a2e:	4b47      	ldr	r3, [pc, #284]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a36:	2b08      	cmp	r3, #8
 8012a38:	d11c      	bne.n	8012a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a3a:	4b44      	ldr	r3, [pc, #272]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d116      	bne.n	8012a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a46:	4b41      	ldr	r3, [pc, #260]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f003 0302 	and.w	r3, r3, #2
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d005      	beq.n	8012a5e <HAL_RCC_OscConfig+0x152>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d001      	beq.n	8012a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e1c7      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	691b      	ldr	r3, [r3, #16]
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	4937      	ldr	r1, [pc, #220]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a72:	e03a      	b.n	8012aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	68db      	ldr	r3, [r3, #12]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d020      	beq.n	8012abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012a7c:	4b34      	ldr	r3, [pc, #208]	@ (8012b50 <HAL_RCC_OscConfig+0x244>)
 8012a7e:	2201      	movs	r2, #1
 8012a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012a82:	f7fa ff39 	bl	800d8f8 <HAL_GetTick>
 8012a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a88:	e008      	b.n	8012a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012a8a:	f7fa ff35 	bl	800d8f8 <HAL_GetTick>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	1ad3      	subs	r3, r2, r3
 8012a94:	2b02      	cmp	r3, #2
 8012a96:	d901      	bls.n	8012a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012a98:	2303      	movs	r3, #3
 8012a9a:	e1a8      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f003 0302 	and.w	r3, r3, #2
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d0f0      	beq.n	8012a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012aa8:	4b28      	ldr	r3, [pc, #160]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	691b      	ldr	r3, [r3, #16]
 8012ab4:	00db      	lsls	r3, r3, #3
 8012ab6:	4925      	ldr	r1, [pc, #148]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	600b      	str	r3, [r1, #0]
 8012abc:	e015      	b.n	8012aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012abe:	4b24      	ldr	r3, [pc, #144]	@ (8012b50 <HAL_RCC_OscConfig+0x244>)
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ac4:	f7fa ff18 	bl	800d8f8 <HAL_GetTick>
 8012ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012aca:	e008      	b.n	8012ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012acc:	f7fa ff14 	bl	800d8f8 <HAL_GetTick>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	1ad3      	subs	r3, r2, r3
 8012ad6:	2b02      	cmp	r3, #2
 8012ad8:	d901      	bls.n	8012ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012ada:	2303      	movs	r3, #3
 8012adc:	e187      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012ade:	4b1b      	ldr	r3, [pc, #108]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f003 0302 	and.w	r3, r3, #2
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d1f0      	bne.n	8012acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f003 0308 	and.w	r3, r3, #8
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d036      	beq.n	8012b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	695b      	ldr	r3, [r3, #20]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d016      	beq.n	8012b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012afe:	4b15      	ldr	r3, [pc, #84]	@ (8012b54 <HAL_RCC_OscConfig+0x248>)
 8012b00:	2201      	movs	r2, #1
 8012b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b04:	f7fa fef8 	bl	800d8f8 <HAL_GetTick>
 8012b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b0a:	e008      	b.n	8012b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b0c:	f7fa fef4 	bl	800d8f8 <HAL_GetTick>
 8012b10:	4602      	mov	r2, r0
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	1ad3      	subs	r3, r2, r3
 8012b16:	2b02      	cmp	r3, #2
 8012b18:	d901      	bls.n	8012b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012b1a:	2303      	movs	r3, #3
 8012b1c:	e167      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8012b4c <HAL_RCC_OscConfig+0x240>)
 8012b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012b22:	f003 0302 	and.w	r3, r3, #2
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d0f0      	beq.n	8012b0c <HAL_RCC_OscConfig+0x200>
 8012b2a:	e01b      	b.n	8012b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012b2c:	4b09      	ldr	r3, [pc, #36]	@ (8012b54 <HAL_RCC_OscConfig+0x248>)
 8012b2e:	2200      	movs	r2, #0
 8012b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012b32:	f7fa fee1 	bl	800d8f8 <HAL_GetTick>
 8012b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b38:	e00e      	b.n	8012b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b3a:	f7fa fedd 	bl	800d8f8 <HAL_GetTick>
 8012b3e:	4602      	mov	r2, r0
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	1ad3      	subs	r3, r2, r3
 8012b44:	2b02      	cmp	r3, #2
 8012b46:	d907      	bls.n	8012b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8012b48:	2303      	movs	r3, #3
 8012b4a:	e150      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
 8012b4c:	40023800 	.word	0x40023800
 8012b50:	42470000 	.word	0x42470000
 8012b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b58:	4b88      	ldr	r3, [pc, #544]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012b5c:	f003 0302 	and.w	r3, r3, #2
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d1ea      	bne.n	8012b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f003 0304 	and.w	r3, r3, #4
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f000 8097 	beq.w	8012ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012b72:	2300      	movs	r3, #0
 8012b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012b76:	4b81      	ldr	r3, [pc, #516]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d10f      	bne.n	8012ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012b82:	2300      	movs	r3, #0
 8012b84:	60bb      	str	r3, [r7, #8]
 8012b86:	4b7d      	ldr	r3, [pc, #500]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8012b92:	4b7a      	ldr	r3, [pc, #488]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012b9a:	60bb      	str	r3, [r7, #8]
 8012b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012ba2:	4b77      	ldr	r3, [pc, #476]	@ (8012d80 <HAL_RCC_OscConfig+0x474>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d118      	bne.n	8012be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012bae:	4b74      	ldr	r3, [pc, #464]	@ (8012d80 <HAL_RCC_OscConfig+0x474>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4a73      	ldr	r2, [pc, #460]	@ (8012d80 <HAL_RCC_OscConfig+0x474>)
 8012bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012bba:	f7fa fe9d 	bl	800d8f8 <HAL_GetTick>
 8012bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bc0:	e008      	b.n	8012bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012bc2:	f7fa fe99 	bl	800d8f8 <HAL_GetTick>
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	2b02      	cmp	r3, #2
 8012bce:	d901      	bls.n	8012bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8012bd0:	2303      	movs	r3, #3
 8012bd2:	e10c      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8012d80 <HAL_RCC_OscConfig+0x474>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d0f0      	beq.n	8012bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	689b      	ldr	r3, [r3, #8]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d106      	bne.n	8012bf6 <HAL_RCC_OscConfig+0x2ea>
 8012be8:	4b64      	ldr	r3, [pc, #400]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bec:	4a63      	ldr	r2, [pc, #396]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012bee:	f043 0301 	orr.w	r3, r3, #1
 8012bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8012bf4:	e01c      	b.n	8012c30 <HAL_RCC_OscConfig+0x324>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	2b05      	cmp	r3, #5
 8012bfc:	d10c      	bne.n	8012c18 <HAL_RCC_OscConfig+0x30c>
 8012bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c02:	4a5e      	ldr	r2, [pc, #376]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c04:	f043 0304 	orr.w	r3, r3, #4
 8012c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8012c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c10:	f043 0301 	orr.w	r3, r3, #1
 8012c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8012c16:	e00b      	b.n	8012c30 <HAL_RCC_OscConfig+0x324>
 8012c18:	4b58      	ldr	r3, [pc, #352]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c1c:	4a57      	ldr	r2, [pc, #348]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c1e:	f023 0301 	bic.w	r3, r3, #1
 8012c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8012c24:	4b55      	ldr	r3, [pc, #340]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c28:	4a54      	ldr	r2, [pc, #336]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c2a:	f023 0304 	bic.w	r3, r3, #4
 8012c2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	689b      	ldr	r3, [r3, #8]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d015      	beq.n	8012c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c38:	f7fa fe5e 	bl	800d8f8 <HAL_GetTick>
 8012c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c3e:	e00a      	b.n	8012c56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c40:	f7fa fe5a 	bl	800d8f8 <HAL_GetTick>
 8012c44:	4602      	mov	r2, r0
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d901      	bls.n	8012c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8012c52:	2303      	movs	r3, #3
 8012c54:	e0cb      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c56:	4b49      	ldr	r3, [pc, #292]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c5a:	f003 0302 	and.w	r3, r3, #2
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d0ee      	beq.n	8012c40 <HAL_RCC_OscConfig+0x334>
 8012c62:	e014      	b.n	8012c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012c64:	f7fa fe48 	bl	800d8f8 <HAL_GetTick>
 8012c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c6a:	e00a      	b.n	8012c82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c6c:	f7fa fe44 	bl	800d8f8 <HAL_GetTick>
 8012c70:	4602      	mov	r2, r0
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	1ad3      	subs	r3, r2, r3
 8012c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d901      	bls.n	8012c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8012c7e:	2303      	movs	r3, #3
 8012c80:	e0b5      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c82:	4b3e      	ldr	r3, [pc, #248]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c86:	f003 0302 	and.w	r3, r3, #2
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d1ee      	bne.n	8012c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012c8e:	7dfb      	ldrb	r3, [r7, #23]
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d105      	bne.n	8012ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012c94:	4b39      	ldr	r3, [pc, #228]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c98:	4a38      	ldr	r2, [pc, #224]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012c9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	699b      	ldr	r3, [r3, #24]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f000 80a1 	beq.w	8012dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012caa:	4b34      	ldr	r3, [pc, #208]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012cac:	689b      	ldr	r3, [r3, #8]
 8012cae:	f003 030c 	and.w	r3, r3, #12
 8012cb2:	2b08      	cmp	r3, #8
 8012cb4:	d05c      	beq.n	8012d70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	699b      	ldr	r3, [r3, #24]
 8012cba:	2b02      	cmp	r3, #2
 8012cbc:	d141      	bne.n	8012d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012cbe:	4b31      	ldr	r3, [pc, #196]	@ (8012d84 <HAL_RCC_OscConfig+0x478>)
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012cc4:	f7fa fe18 	bl	800d8f8 <HAL_GetTick>
 8012cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012cca:	e008      	b.n	8012cde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ccc:	f7fa fe14 	bl	800d8f8 <HAL_GetTick>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	1ad3      	subs	r3, r2, r3
 8012cd6:	2b02      	cmp	r3, #2
 8012cd8:	d901      	bls.n	8012cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8012cda:	2303      	movs	r3, #3
 8012cdc:	e087      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012cde:	4b27      	ldr	r3, [pc, #156]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d1f0      	bne.n	8012ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	69da      	ldr	r2, [r3, #28]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6a1b      	ldr	r3, [r3, #32]
 8012cf2:	431a      	orrs	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cf8:	019b      	lsls	r3, r3, #6
 8012cfa:	431a      	orrs	r2, r3
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d00:	085b      	lsrs	r3, r3, #1
 8012d02:	3b01      	subs	r3, #1
 8012d04:	041b      	lsls	r3, r3, #16
 8012d06:	431a      	orrs	r2, r3
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d0c:	061b      	lsls	r3, r3, #24
 8012d0e:	491b      	ldr	r1, [pc, #108]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012d10:	4313      	orrs	r3, r2
 8012d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012d14:	4b1b      	ldr	r3, [pc, #108]	@ (8012d84 <HAL_RCC_OscConfig+0x478>)
 8012d16:	2201      	movs	r2, #1
 8012d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d1a:	f7fa fded 	bl	800d8f8 <HAL_GetTick>
 8012d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d20:	e008      	b.n	8012d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d22:	f7fa fde9 	bl	800d8f8 <HAL_GetTick>
 8012d26:	4602      	mov	r2, r0
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	d901      	bls.n	8012d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012d30:	2303      	movs	r3, #3
 8012d32:	e05c      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d34:	4b11      	ldr	r3, [pc, #68]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d0f0      	beq.n	8012d22 <HAL_RCC_OscConfig+0x416>
 8012d40:	e054      	b.n	8012dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d42:	4b10      	ldr	r3, [pc, #64]	@ (8012d84 <HAL_RCC_OscConfig+0x478>)
 8012d44:	2200      	movs	r2, #0
 8012d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d48:	f7fa fdd6 	bl	800d8f8 <HAL_GetTick>
 8012d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d4e:	e008      	b.n	8012d62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d50:	f7fa fdd2 	bl	800d8f8 <HAL_GetTick>
 8012d54:	4602      	mov	r2, r0
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	2b02      	cmp	r3, #2
 8012d5c:	d901      	bls.n	8012d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8012d5e:	2303      	movs	r3, #3
 8012d60:	e045      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d62:	4b06      	ldr	r3, [pc, #24]	@ (8012d7c <HAL_RCC_OscConfig+0x470>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d1f0      	bne.n	8012d50 <HAL_RCC_OscConfig+0x444>
 8012d6e:	e03d      	b.n	8012dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	699b      	ldr	r3, [r3, #24]
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d107      	bne.n	8012d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8012d78:	2301      	movs	r3, #1
 8012d7a:	e038      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
 8012d7c:	40023800 	.word	0x40023800
 8012d80:	40007000 	.word	0x40007000
 8012d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012d88:	4b1b      	ldr	r3, [pc, #108]	@ (8012df8 <HAL_RCC_OscConfig+0x4ec>)
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	699b      	ldr	r3, [r3, #24]
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	d028      	beq.n	8012de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d121      	bne.n	8012de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d11a      	bne.n	8012de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012db2:	68fa      	ldr	r2, [r7, #12]
 8012db4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8012db8:	4013      	ands	r3, r2
 8012dba:	687a      	ldr	r2, [r7, #4]
 8012dbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8012dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	d111      	bne.n	8012de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dce:	085b      	lsrs	r3, r3, #1
 8012dd0:	3b01      	subs	r3, #1
 8012dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d107      	bne.n	8012de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d001      	beq.n	8012dec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8012de8:	2301      	movs	r3, #1
 8012dea:	e000      	b.n	8012dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8012dec:	2300      	movs	r3, #0
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3718      	adds	r7, #24
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	40023800 	.word	0x40023800

08012dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d101      	bne.n	8012e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e0cc      	b.n	8012faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012e10:	4b68      	ldr	r3, [pc, #416]	@ (8012fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f003 0307 	and.w	r3, r3, #7
 8012e18:	683a      	ldr	r2, [r7, #0]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d90c      	bls.n	8012e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e1e:	4b65      	ldr	r3, [pc, #404]	@ (8012fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8012e20:	683a      	ldr	r2, [r7, #0]
 8012e22:	b2d2      	uxtb	r2, r2
 8012e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012e26:	4b63      	ldr	r3, [pc, #396]	@ (8012fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f003 0307 	and.w	r3, r3, #7
 8012e2e:	683a      	ldr	r2, [r7, #0]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d001      	beq.n	8012e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012e34:	2301      	movs	r3, #1
 8012e36:	e0b8      	b.n	8012faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f003 0302 	and.w	r3, r3, #2
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d020      	beq.n	8012e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f003 0304 	and.w	r3, r3, #4
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d005      	beq.n	8012e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012e50:	4b59      	ldr	r3, [pc, #356]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012e52:	689b      	ldr	r3, [r3, #8]
 8012e54:	4a58      	ldr	r2, [pc, #352]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8012e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	f003 0308 	and.w	r3, r3, #8
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d005      	beq.n	8012e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012e68:	4b53      	ldr	r3, [pc, #332]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012e6a:	689b      	ldr	r3, [r3, #8]
 8012e6c:	4a52      	ldr	r2, [pc, #328]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012e6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8012e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012e74:	4b50      	ldr	r3, [pc, #320]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012e76:	689b      	ldr	r3, [r3, #8]
 8012e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	494d      	ldr	r1, [pc, #308]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012e82:	4313      	orrs	r3, r2
 8012e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f003 0301 	and.w	r3, r3, #1
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d044      	beq.n	8012f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	685b      	ldr	r3, [r3, #4]
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d107      	bne.n	8012eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012e9a:	4b47      	ldr	r3, [pc, #284]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d119      	bne.n	8012eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e07f      	b.n	8012faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	2b02      	cmp	r3, #2
 8012eb0:	d003      	beq.n	8012eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012eb6:	2b03      	cmp	r3, #3
 8012eb8:	d107      	bne.n	8012eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012eba:	4b3f      	ldr	r3, [pc, #252]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d109      	bne.n	8012eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e06f      	b.n	8012faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012eca:	4b3b      	ldr	r3, [pc, #236]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f003 0302 	and.w	r3, r3, #2
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d101      	bne.n	8012eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e067      	b.n	8012faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012eda:	4b37      	ldr	r3, [pc, #220]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012edc:	689b      	ldr	r3, [r3, #8]
 8012ede:	f023 0203 	bic.w	r2, r3, #3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	4934      	ldr	r1, [pc, #208]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012eec:	f7fa fd04 	bl	800d8f8 <HAL_GetTick>
 8012ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012ef2:	e00a      	b.n	8012f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ef4:	f7fa fd00 	bl	800d8f8 <HAL_GetTick>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	1ad3      	subs	r3, r2, r3
 8012efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d901      	bls.n	8012f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012f06:	2303      	movs	r3, #3
 8012f08:	e04f      	b.n	8012faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f0c:	689b      	ldr	r3, [r3, #8]
 8012f0e:	f003 020c 	and.w	r2, r3, #12
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d1eb      	bne.n	8012ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012f1c:	4b25      	ldr	r3, [pc, #148]	@ (8012fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f003 0307 	and.w	r3, r3, #7
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d20c      	bcs.n	8012f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012f2a:	4b22      	ldr	r3, [pc, #136]	@ (8012fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8012f2c:	683a      	ldr	r2, [r7, #0]
 8012f2e:	b2d2      	uxtb	r2, r2
 8012f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012f32:	4b20      	ldr	r3, [pc, #128]	@ (8012fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	f003 0307 	and.w	r3, r3, #7
 8012f3a:	683a      	ldr	r2, [r7, #0]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d001      	beq.n	8012f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012f40:	2301      	movs	r3, #1
 8012f42:	e032      	b.n	8012faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f003 0304 	and.w	r3, r3, #4
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d008      	beq.n	8012f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012f50:	4b19      	ldr	r3, [pc, #100]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f52:	689b      	ldr	r3, [r3, #8]
 8012f54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	4916      	ldr	r1, [pc, #88]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f5e:	4313      	orrs	r3, r2
 8012f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	f003 0308 	and.w	r3, r3, #8
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d009      	beq.n	8012f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012f6e:	4b12      	ldr	r3, [pc, #72]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	691b      	ldr	r3, [r3, #16]
 8012f7a:	00db      	lsls	r3, r3, #3
 8012f7c:	490e      	ldr	r1, [pc, #56]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012f82:	f000 f821 	bl	8012fc8 <HAL_RCC_GetSysClockFreq>
 8012f86:	4602      	mov	r2, r0
 8012f88:	4b0b      	ldr	r3, [pc, #44]	@ (8012fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f8a:	689b      	ldr	r3, [r3, #8]
 8012f8c:	091b      	lsrs	r3, r3, #4
 8012f8e:	f003 030f 	and.w	r3, r3, #15
 8012f92:	490a      	ldr	r1, [pc, #40]	@ (8012fbc <HAL_RCC_ClockConfig+0x1c0>)
 8012f94:	5ccb      	ldrb	r3, [r1, r3]
 8012f96:	fa22 f303 	lsr.w	r3, r2, r3
 8012f9a:	4a09      	ldr	r2, [pc, #36]	@ (8012fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8012f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012f9e:	4b09      	ldr	r3, [pc, #36]	@ (8012fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7f0 fd92 	bl	8003acc <HAL_InitTick>

  return HAL_OK;
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	40023c00 	.word	0x40023c00
 8012fb8:	40023800 	.word	0x40023800
 8012fbc:	0802483c 	.word	0x0802483c
 8012fc0:	20000004 	.word	0x20000004
 8012fc4:	20000048 	.word	0x20000048

08012fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012fcc:	b090      	sub	sp, #64	@ 0x40
 8012fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fd8:	2300      	movs	r3, #0
 8012fda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012fe0:	4b59      	ldr	r3, [pc, #356]	@ (8013148 <HAL_RCC_GetSysClockFreq+0x180>)
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	f003 030c 	and.w	r3, r3, #12
 8012fe8:	2b08      	cmp	r3, #8
 8012fea:	d00d      	beq.n	8013008 <HAL_RCC_GetSysClockFreq+0x40>
 8012fec:	2b08      	cmp	r3, #8
 8012fee:	f200 80a1 	bhi.w	8013134 <HAL_RCC_GetSysClockFreq+0x16c>
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d002      	beq.n	8012ffc <HAL_RCC_GetSysClockFreq+0x34>
 8012ff6:	2b04      	cmp	r3, #4
 8012ff8:	d003      	beq.n	8013002 <HAL_RCC_GetSysClockFreq+0x3a>
 8012ffa:	e09b      	b.n	8013134 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012ffc:	4b53      	ldr	r3, [pc, #332]	@ (801314c <HAL_RCC_GetSysClockFreq+0x184>)
 8012ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8013000:	e09b      	b.n	801313a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013002:	4b53      	ldr	r3, [pc, #332]	@ (8013150 <HAL_RCC_GetSysClockFreq+0x188>)
 8013004:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8013006:	e098      	b.n	801313a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013008:	4b4f      	ldr	r3, [pc, #316]	@ (8013148 <HAL_RCC_GetSysClockFreq+0x180>)
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013010:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013012:	4b4d      	ldr	r3, [pc, #308]	@ (8013148 <HAL_RCC_GetSysClockFreq+0x180>)
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801301a:	2b00      	cmp	r3, #0
 801301c:	d028      	beq.n	8013070 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801301e:	4b4a      	ldr	r3, [pc, #296]	@ (8013148 <HAL_RCC_GetSysClockFreq+0x180>)
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	099b      	lsrs	r3, r3, #6
 8013024:	2200      	movs	r2, #0
 8013026:	623b      	str	r3, [r7, #32]
 8013028:	627a      	str	r2, [r7, #36]	@ 0x24
 801302a:	6a3b      	ldr	r3, [r7, #32]
 801302c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8013030:	2100      	movs	r1, #0
 8013032:	4b47      	ldr	r3, [pc, #284]	@ (8013150 <HAL_RCC_GetSysClockFreq+0x188>)
 8013034:	fb03 f201 	mul.w	r2, r3, r1
 8013038:	2300      	movs	r3, #0
 801303a:	fb00 f303 	mul.w	r3, r0, r3
 801303e:	4413      	add	r3, r2
 8013040:	4a43      	ldr	r2, [pc, #268]	@ (8013150 <HAL_RCC_GetSysClockFreq+0x188>)
 8013042:	fba0 1202 	umull	r1, r2, r0, r2
 8013046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013048:	460a      	mov	r2, r1
 801304a:	62ba      	str	r2, [r7, #40]	@ 0x28
 801304c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801304e:	4413      	add	r3, r2
 8013050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013054:	2200      	movs	r2, #0
 8013056:	61bb      	str	r3, [r7, #24]
 8013058:	61fa      	str	r2, [r7, #28]
 801305a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801305e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8013062:	f7ed fe11 	bl	8000c88 <__aeabi_uldivmod>
 8013066:	4602      	mov	r2, r0
 8013068:	460b      	mov	r3, r1
 801306a:	4613      	mov	r3, r2
 801306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801306e:	e053      	b.n	8013118 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013070:	4b35      	ldr	r3, [pc, #212]	@ (8013148 <HAL_RCC_GetSysClockFreq+0x180>)
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	099b      	lsrs	r3, r3, #6
 8013076:	2200      	movs	r2, #0
 8013078:	613b      	str	r3, [r7, #16]
 801307a:	617a      	str	r2, [r7, #20]
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8013082:	f04f 0b00 	mov.w	fp, #0
 8013086:	4652      	mov	r2, sl
 8013088:	465b      	mov	r3, fp
 801308a:	f04f 0000 	mov.w	r0, #0
 801308e:	f04f 0100 	mov.w	r1, #0
 8013092:	0159      	lsls	r1, r3, #5
 8013094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013098:	0150      	lsls	r0, r2, #5
 801309a:	4602      	mov	r2, r0
 801309c:	460b      	mov	r3, r1
 801309e:	ebb2 080a 	subs.w	r8, r2, sl
 80130a2:	eb63 090b 	sbc.w	r9, r3, fp
 80130a6:	f04f 0200 	mov.w	r2, #0
 80130aa:	f04f 0300 	mov.w	r3, #0
 80130ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80130b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80130b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80130ba:	ebb2 0408 	subs.w	r4, r2, r8
 80130be:	eb63 0509 	sbc.w	r5, r3, r9
 80130c2:	f04f 0200 	mov.w	r2, #0
 80130c6:	f04f 0300 	mov.w	r3, #0
 80130ca:	00eb      	lsls	r3, r5, #3
 80130cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80130d0:	00e2      	lsls	r2, r4, #3
 80130d2:	4614      	mov	r4, r2
 80130d4:	461d      	mov	r5, r3
 80130d6:	eb14 030a 	adds.w	r3, r4, sl
 80130da:	603b      	str	r3, [r7, #0]
 80130dc:	eb45 030b 	adc.w	r3, r5, fp
 80130e0:	607b      	str	r3, [r7, #4]
 80130e2:	f04f 0200 	mov.w	r2, #0
 80130e6:	f04f 0300 	mov.w	r3, #0
 80130ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80130ee:	4629      	mov	r1, r5
 80130f0:	028b      	lsls	r3, r1, #10
 80130f2:	4621      	mov	r1, r4
 80130f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80130f8:	4621      	mov	r1, r4
 80130fa:	028a      	lsls	r2, r1, #10
 80130fc:	4610      	mov	r0, r2
 80130fe:	4619      	mov	r1, r3
 8013100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013102:	2200      	movs	r2, #0
 8013104:	60bb      	str	r3, [r7, #8]
 8013106:	60fa      	str	r2, [r7, #12]
 8013108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801310c:	f7ed fdbc 	bl	8000c88 <__aeabi_uldivmod>
 8013110:	4602      	mov	r2, r0
 8013112:	460b      	mov	r3, r1
 8013114:	4613      	mov	r3, r2
 8013116:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013118:	4b0b      	ldr	r3, [pc, #44]	@ (8013148 <HAL_RCC_GetSysClockFreq+0x180>)
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	0c1b      	lsrs	r3, r3, #16
 801311e:	f003 0303 	and.w	r3, r3, #3
 8013122:	3301      	adds	r3, #1
 8013124:	005b      	lsls	r3, r3, #1
 8013126:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8013128:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013130:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8013132:	e002      	b.n	801313a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013134:	4b05      	ldr	r3, [pc, #20]	@ (801314c <HAL_RCC_GetSysClockFreq+0x184>)
 8013136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8013138:	bf00      	nop
    }
  }
  return sysclockfreq;
 801313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 801313c:	4618      	mov	r0, r3
 801313e:	3740      	adds	r7, #64	@ 0x40
 8013140:	46bd      	mov	sp, r7
 8013142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013146:	bf00      	nop
 8013148:	40023800 	.word	0x40023800
 801314c:	00f42400 	.word	0x00f42400
 8013150:	00b71b00 	.word	0x00b71b00

08013154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013154:	b480      	push	{r7}
 8013156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013158:	4b03      	ldr	r3, [pc, #12]	@ (8013168 <HAL_RCC_GetHCLKFreq+0x14>)
 801315a:	681b      	ldr	r3, [r3, #0]
}
 801315c:	4618      	mov	r0, r3
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr
 8013166:	bf00      	nop
 8013168:	20000004 	.word	0x20000004

0801316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013170:	f7ff fff0 	bl	8013154 <HAL_RCC_GetHCLKFreq>
 8013174:	4602      	mov	r2, r0
 8013176:	4b05      	ldr	r3, [pc, #20]	@ (801318c <HAL_RCC_GetPCLK1Freq+0x20>)
 8013178:	689b      	ldr	r3, [r3, #8]
 801317a:	0a9b      	lsrs	r3, r3, #10
 801317c:	f003 0307 	and.w	r3, r3, #7
 8013180:	4903      	ldr	r1, [pc, #12]	@ (8013190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013182:	5ccb      	ldrb	r3, [r1, r3]
 8013184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013188:	4618      	mov	r0, r3
 801318a:	bd80      	pop	{r7, pc}
 801318c:	40023800 	.word	0x40023800
 8013190:	0802484c 	.word	0x0802484c

08013194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013198:	f7ff ffdc 	bl	8013154 <HAL_RCC_GetHCLKFreq>
 801319c:	4602      	mov	r2, r0
 801319e:	4b05      	ldr	r3, [pc, #20]	@ (80131b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80131a0:	689b      	ldr	r3, [r3, #8]
 80131a2:	0b5b      	lsrs	r3, r3, #13
 80131a4:	f003 0307 	and.w	r3, r3, #7
 80131a8:	4903      	ldr	r1, [pc, #12]	@ (80131b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80131aa:	5ccb      	ldrb	r3, [r1, r3]
 80131ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	40023800 	.word	0x40023800
 80131b8:	0802484c 	.word	0x0802484c

080131bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	220f      	movs	r2, #15
 80131ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80131cc:	4b12      	ldr	r3, [pc, #72]	@ (8013218 <HAL_RCC_GetClockConfig+0x5c>)
 80131ce:	689b      	ldr	r3, [r3, #8]
 80131d0:	f003 0203 	and.w	r2, r3, #3
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80131d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013218 <HAL_RCC_GetClockConfig+0x5c>)
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80131e4:	4b0c      	ldr	r3, [pc, #48]	@ (8013218 <HAL_RCC_GetClockConfig+0x5c>)
 80131e6:	689b      	ldr	r3, [r3, #8]
 80131e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80131f0:	4b09      	ldr	r3, [pc, #36]	@ (8013218 <HAL_RCC_GetClockConfig+0x5c>)
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	08db      	lsrs	r3, r3, #3
 80131f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80131fe:	4b07      	ldr	r3, [pc, #28]	@ (801321c <HAL_RCC_GetClockConfig+0x60>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f003 0207 	and.w	r2, r3, #7
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	601a      	str	r2, [r3, #0]
}
 801320a:	bf00      	nop
 801320c:	370c      	adds	r7, #12
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	40023800 	.word	0x40023800
 801321c:	40023c00 	.word	0x40023c00

08013220 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d101      	bne.n	8013232 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801322e:	2301      	movs	r3, #1
 8013230:	e01c      	b.n	801326c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	795b      	ldrb	r3, [r3, #5]
 8013236:	b2db      	uxtb	r3, r3
 8013238:	2b00      	cmp	r3, #0
 801323a:	d105      	bne.n	8013248 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2200      	movs	r2, #0
 8013240:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f7f0 faf2 	bl	800382c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2202      	movs	r2, #2
 801324c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f042 0204 	orr.w	r2, r2, #4
 801325c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2201      	movs	r2, #1
 8013262:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2200      	movs	r2, #0
 8013268:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801326a:	2300      	movs	r3, #0
}
 801326c:	4618      	mov	r0, r3
 801326e:	3708      	adds	r7, #8
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d101      	bne.n	8013286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013282:	2301      	movs	r3, #1
 8013284:	e07b      	b.n	801337e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801328a:	2b00      	cmp	r3, #0
 801328c:	d108      	bne.n	80132a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	685b      	ldr	r3, [r3, #4]
 8013292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013296:	d009      	beq.n	80132ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2200      	movs	r2, #0
 801329c:	61da      	str	r2, [r3, #28]
 801329e:	e005      	b.n	80132ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2200      	movs	r2, #0
 80132aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2200      	movs	r2, #0
 80132b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d106      	bne.n	80132cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2200      	movs	r2, #0
 80132c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f7f0 fb08 	bl	80038dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2202      	movs	r2, #2
 80132d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80132e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	689b      	ldr	r3, [r3, #8]
 80132f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80132f4:	431a      	orrs	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80132fe:	431a      	orrs	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	691b      	ldr	r3, [r3, #16]
 8013304:	f003 0302 	and.w	r3, r3, #2
 8013308:	431a      	orrs	r2, r3
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	695b      	ldr	r3, [r3, #20]
 801330e:	f003 0301 	and.w	r3, r3, #1
 8013312:	431a      	orrs	r2, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	699b      	ldr	r3, [r3, #24]
 8013318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801331c:	431a      	orrs	r2, r3
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	69db      	ldr	r3, [r3, #28]
 8013322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013326:	431a      	orrs	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6a1b      	ldr	r3, [r3, #32]
 801332c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013330:	ea42 0103 	orr.w	r1, r2, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013338:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	430a      	orrs	r2, r1
 8013342:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	699b      	ldr	r3, [r3, #24]
 8013348:	0c1b      	lsrs	r3, r3, #16
 801334a:	f003 0104 	and.w	r1, r3, #4
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013352:	f003 0210 	and.w	r2, r3, #16
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	430a      	orrs	r2, r1
 801335c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	69da      	ldr	r2, [r3, #28]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801336c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2200      	movs	r2, #0
 8013372:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2201      	movs	r2, #1
 8013378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 801337c:	2300      	movs	r3, #0
}
 801337e:	4618      	mov	r0, r3
 8013380:	3708      	adds	r7, #8
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013386:	b580      	push	{r7, lr}
 8013388:	b088      	sub	sp, #32
 801338a:	af02      	add	r7, sp, #8
 801338c:	60f8      	str	r0, [r7, #12]
 801338e:	60b9      	str	r1, [r7, #8]
 8013390:	603b      	str	r3, [r7, #0]
 8013392:	4613      	mov	r3, r2
 8013394:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013396:	2300      	movs	r3, #0
 8013398:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80133a2:	d112      	bne.n	80133ca <HAL_SPI_Receive+0x44>
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	689b      	ldr	r3, [r3, #8]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10e      	bne.n	80133ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	2204      	movs	r2, #4
 80133b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80133b4:	88fa      	ldrh	r2, [r7, #6]
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	9300      	str	r3, [sp, #0]
 80133ba:	4613      	mov	r3, r2
 80133bc:	68ba      	ldr	r2, [r7, #8]
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	68f8      	ldr	r0, [r7, #12]
 80133c2:	f000 f8f1 	bl	80135a8 <HAL_SPI_TransmitReceive>
 80133c6:	4603      	mov	r3, r0
 80133c8:	e0ea      	b.n	80135a0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d101      	bne.n	80133d8 <HAL_SPI_Receive+0x52>
 80133d4:	2302      	movs	r3, #2
 80133d6:	e0e3      	b.n	80135a0 <HAL_SPI_Receive+0x21a>
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2201      	movs	r2, #1
 80133dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80133e0:	f7fa fa8a 	bl	800d8f8 <HAL_GetTick>
 80133e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	2b01      	cmp	r3, #1
 80133f0:	d002      	beq.n	80133f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80133f2:	2302      	movs	r3, #2
 80133f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80133f6:	e0ca      	b.n	801358e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d002      	beq.n	8013404 <HAL_SPI_Receive+0x7e>
 80133fe:	88fb      	ldrh	r3, [r7, #6]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d102      	bne.n	801340a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013404:	2301      	movs	r3, #1
 8013406:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013408:	e0c1      	b.n	801358e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	2204      	movs	r2, #4
 801340e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2200      	movs	r2, #0
 8013416:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	68ba      	ldr	r2, [r7, #8]
 801341c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	88fa      	ldrh	r2, [r7, #6]
 8013422:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	88fa      	ldrh	r2, [r7, #6]
 8013428:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	2200      	movs	r2, #0
 801342e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2200      	movs	r2, #0
 8013434:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2200      	movs	r2, #0
 801343a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2200      	movs	r2, #0
 8013440:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2200      	movs	r2, #0
 8013446:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	689b      	ldr	r3, [r3, #8]
 801344c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013450:	d10f      	bne.n	8013472 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	681a      	ldr	r2, [r3, #0]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013460:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8013470:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801347c:	2b40      	cmp	r3, #64	@ 0x40
 801347e:	d007      	beq.n	8013490 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801348e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	68db      	ldr	r3, [r3, #12]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d162      	bne.n	801355e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013498:	e02e      	b.n	80134f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	689b      	ldr	r3, [r3, #8]
 80134a0:	f003 0301 	and.w	r3, r3, #1
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d115      	bne.n	80134d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f103 020c 	add.w	r2, r3, #12
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134b4:	7812      	ldrb	r2, [r2, #0]
 80134b6:	b2d2      	uxtb	r2, r2
 80134b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134be:	1c5a      	adds	r2, r3, #1
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	3b01      	subs	r3, #1
 80134cc:	b29a      	uxth	r2, r3
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80134d2:	e011      	b.n	80134f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80134d4:	f7fa fa10 	bl	800d8f8 <HAL_GetTick>
 80134d8:	4602      	mov	r2, r0
 80134da:	693b      	ldr	r3, [r7, #16]
 80134dc:	1ad3      	subs	r3, r2, r3
 80134de:	683a      	ldr	r2, [r7, #0]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d803      	bhi.n	80134ec <HAL_SPI_Receive+0x166>
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134ea:	d102      	bne.n	80134f2 <HAL_SPI_Receive+0x16c>
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d102      	bne.n	80134f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80134f2:	2303      	movs	r3, #3
 80134f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80134f6:	e04a      	b.n	801358e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1cb      	bne.n	801349a <HAL_SPI_Receive+0x114>
 8013502:	e031      	b.n	8013568 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	689b      	ldr	r3, [r3, #8]
 801350a:	f003 0301 	and.w	r3, r3, #1
 801350e:	2b01      	cmp	r3, #1
 8013510:	d113      	bne.n	801353a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	68da      	ldr	r2, [r3, #12]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801351c:	b292      	uxth	r2, r2
 801351e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013524:	1c9a      	adds	r2, r3, #2
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801352e:	b29b      	uxth	r3, r3
 8013530:	3b01      	subs	r3, #1
 8013532:	b29a      	uxth	r2, r3
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8013538:	e011      	b.n	801355e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801353a:	f7fa f9dd 	bl	800d8f8 <HAL_GetTick>
 801353e:	4602      	mov	r2, r0
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	1ad3      	subs	r3, r2, r3
 8013544:	683a      	ldr	r2, [r7, #0]
 8013546:	429a      	cmp	r2, r3
 8013548:	d803      	bhi.n	8013552 <HAL_SPI_Receive+0x1cc>
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013550:	d102      	bne.n	8013558 <HAL_SPI_Receive+0x1d2>
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d102      	bne.n	801355e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013558:	2303      	movs	r3, #3
 801355a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801355c:	e017      	b.n	801358e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013562:	b29b      	uxth	r3, r3
 8013564:	2b00      	cmp	r3, #0
 8013566:	d1cd      	bne.n	8013504 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013568:	693a      	ldr	r2, [r7, #16]
 801356a:	6839      	ldr	r1, [r7, #0]
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f000 fa45 	bl	80139fc <SPI_EndRxTransaction>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d002      	beq.n	801357e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2220      	movs	r2, #32
 801357c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013582:	2b00      	cmp	r3, #0
 8013584:	d002      	beq.n	801358c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8013586:	2301      	movs	r3, #1
 8013588:	75fb      	strb	r3, [r7, #23]
 801358a:	e000      	b.n	801358e <HAL_SPI_Receive+0x208>
  }

error :
 801358c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2201      	movs	r2, #1
 8013592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2200      	movs	r2, #0
 801359a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 801359e:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3718      	adds	r7, #24
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b08c      	sub	sp, #48	@ 0x30
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
 80135b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80135b6:	2301      	movs	r3, #1
 80135b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80135ba:	2300      	movs	r3, #0
 80135bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d101      	bne.n	80135ce <HAL_SPI_TransmitReceive+0x26>
 80135ca:	2302      	movs	r3, #2
 80135cc:	e18a      	b.n	80138e4 <HAL_SPI_TransmitReceive+0x33c>
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2201      	movs	r2, #1
 80135d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80135d6:	f7fa f98f 	bl	800d8f8 <HAL_GetTick>
 80135da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80135e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80135ec:	887b      	ldrh	r3, [r7, #2]
 80135ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80135f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d00f      	beq.n	8013618 <HAL_SPI_TransmitReceive+0x70>
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80135fe:	d107      	bne.n	8013610 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	689b      	ldr	r3, [r3, #8]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d103      	bne.n	8013610 <HAL_SPI_TransmitReceive+0x68>
 8013608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801360c:	2b04      	cmp	r3, #4
 801360e:	d003      	beq.n	8013618 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013610:	2302      	movs	r3, #2
 8013612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8013616:	e15b      	b.n	80138d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d005      	beq.n	801362a <HAL_SPI_TransmitReceive+0x82>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d002      	beq.n	801362a <HAL_SPI_TransmitReceive+0x82>
 8013624:	887b      	ldrh	r3, [r7, #2]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d103      	bne.n	8013632 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801362a:	2301      	movs	r3, #1
 801362c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8013630:	e14e      	b.n	80138d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013638:	b2db      	uxtb	r3, r3
 801363a:	2b04      	cmp	r3, #4
 801363c:	d003      	beq.n	8013646 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2205      	movs	r2, #5
 8013642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2200      	movs	r2, #0
 801364a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	887a      	ldrh	r2, [r7, #2]
 8013656:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	887a      	ldrh	r2, [r7, #2]
 801365c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	887a      	ldrh	r2, [r7, #2]
 8013668:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	887a      	ldrh	r2, [r7, #2]
 801366e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2200      	movs	r2, #0
 8013674:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	2200      	movs	r2, #0
 801367a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013686:	2b40      	cmp	r3, #64	@ 0x40
 8013688:	d007      	beq.n	801369a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80136a2:	d178      	bne.n	8013796 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <HAL_SPI_TransmitReceive+0x10a>
 80136ac:	8b7b      	ldrh	r3, [r7, #26]
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d166      	bne.n	8013780 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136b6:	881a      	ldrh	r2, [r3, #0]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136c2:	1c9a      	adds	r2, r3, #2
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	3b01      	subs	r3, #1
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80136d6:	e053      	b.n	8013780 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	689b      	ldr	r3, [r3, #8]
 80136de:	f003 0302 	and.w	r3, r3, #2
 80136e2:	2b02      	cmp	r3, #2
 80136e4:	d11b      	bne.n	801371e <HAL_SPI_TransmitReceive+0x176>
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d016      	beq.n	801371e <HAL_SPI_TransmitReceive+0x176>
 80136f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d113      	bne.n	801371e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136fa:	881a      	ldrh	r2, [r3, #0]
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013706:	1c9a      	adds	r2, r3, #2
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013710:	b29b      	uxth	r3, r3
 8013712:	3b01      	subs	r3, #1
 8013714:	b29a      	uxth	r2, r3
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801371a:	2300      	movs	r3, #0
 801371c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	689b      	ldr	r3, [r3, #8]
 8013724:	f003 0301 	and.w	r3, r3, #1
 8013728:	2b01      	cmp	r3, #1
 801372a:	d119      	bne.n	8013760 <HAL_SPI_TransmitReceive+0x1b8>
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013730:	b29b      	uxth	r3, r3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d014      	beq.n	8013760 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	68da      	ldr	r2, [r3, #12]
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013740:	b292      	uxth	r2, r2
 8013742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013748:	1c9a      	adds	r2, r3, #2
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013752:	b29b      	uxth	r3, r3
 8013754:	3b01      	subs	r3, #1
 8013756:	b29a      	uxth	r2, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801375c:	2301      	movs	r3, #1
 801375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013760:	f7fa f8ca 	bl	800d8f8 <HAL_GetTick>
 8013764:	4602      	mov	r2, r0
 8013766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013768:	1ad3      	subs	r3, r2, r3
 801376a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801376c:	429a      	cmp	r2, r3
 801376e:	d807      	bhi.n	8013780 <HAL_SPI_TransmitReceive+0x1d8>
 8013770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013776:	d003      	beq.n	8013780 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013778:	2303      	movs	r3, #3
 801377a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 801377e:	e0a7      	b.n	80138d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013784:	b29b      	uxth	r3, r3
 8013786:	2b00      	cmp	r3, #0
 8013788:	d1a6      	bne.n	80136d8 <HAL_SPI_TransmitReceive+0x130>
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801378e:	b29b      	uxth	r3, r3
 8013790:	2b00      	cmp	r3, #0
 8013792:	d1a1      	bne.n	80136d8 <HAL_SPI_TransmitReceive+0x130>
 8013794:	e07c      	b.n	8013890 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d002      	beq.n	80137a4 <HAL_SPI_TransmitReceive+0x1fc>
 801379e:	8b7b      	ldrh	r3, [r7, #26]
 80137a0:	2b01      	cmp	r3, #1
 80137a2:	d16b      	bne.n	801387c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	330c      	adds	r3, #12
 80137ae:	7812      	ldrb	r2, [r2, #0]
 80137b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137b6:	1c5a      	adds	r2, r3, #1
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	3b01      	subs	r3, #1
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80137ca:	e057      	b.n	801387c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	689b      	ldr	r3, [r3, #8]
 80137d2:	f003 0302 	and.w	r3, r3, #2
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	d11c      	bne.n	8013814 <HAL_SPI_TransmitReceive+0x26c>
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80137de:	b29b      	uxth	r3, r3
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d017      	beq.n	8013814 <HAL_SPI_TransmitReceive+0x26c>
 80137e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e6:	2b01      	cmp	r3, #1
 80137e8:	d114      	bne.n	8013814 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	330c      	adds	r3, #12
 80137f4:	7812      	ldrb	r2, [r2, #0]
 80137f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137fc:	1c5a      	adds	r2, r3, #1
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013806:	b29b      	uxth	r3, r3
 8013808:	3b01      	subs	r3, #1
 801380a:	b29a      	uxth	r2, r3
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013810:	2300      	movs	r3, #0
 8013812:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	689b      	ldr	r3, [r3, #8]
 801381a:	f003 0301 	and.w	r3, r3, #1
 801381e:	2b01      	cmp	r3, #1
 8013820:	d119      	bne.n	8013856 <HAL_SPI_TransmitReceive+0x2ae>
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013826:	b29b      	uxth	r3, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	d014      	beq.n	8013856 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	68da      	ldr	r2, [r3, #12]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013836:	b2d2      	uxtb	r2, r2
 8013838:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801383e:	1c5a      	adds	r2, r3, #1
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013848:	b29b      	uxth	r3, r3
 801384a:	3b01      	subs	r3, #1
 801384c:	b29a      	uxth	r2, r3
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013852:	2301      	movs	r3, #1
 8013854:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013856:	f7fa f84f 	bl	800d8f8 <HAL_GetTick>
 801385a:	4602      	mov	r2, r0
 801385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801385e:	1ad3      	subs	r3, r2, r3
 8013860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013862:	429a      	cmp	r2, r3
 8013864:	d803      	bhi.n	801386e <HAL_SPI_TransmitReceive+0x2c6>
 8013866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801386c:	d102      	bne.n	8013874 <HAL_SPI_TransmitReceive+0x2cc>
 801386e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013870:	2b00      	cmp	r3, #0
 8013872:	d103      	bne.n	801387c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013874:	2303      	movs	r3, #3
 8013876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 801387a:	e029      	b.n	80138d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013880:	b29b      	uxth	r3, r3
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1a2      	bne.n	80137cc <HAL_SPI_TransmitReceive+0x224>
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801388a:	b29b      	uxth	r3, r3
 801388c:	2b00      	cmp	r3, #0
 801388e:	d19d      	bne.n	80137cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013892:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f000 f917 	bl	8013ac8 <SPI_EndRxTxTransaction>
 801389a:	4603      	mov	r3, r0
 801389c:	2b00      	cmp	r3, #0
 801389e:	d006      	beq.n	80138ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80138a0:	2301      	movs	r3, #1
 80138a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2220      	movs	r2, #32
 80138aa:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80138ac:	e010      	b.n	80138d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d10b      	bne.n	80138ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80138b6:	2300      	movs	r3, #0
 80138b8:	617b      	str	r3, [r7, #20]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	617b      	str	r3, [r7, #20]
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	689b      	ldr	r3, [r3, #8]
 80138c8:	617b      	str	r3, [r7, #20]
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	e000      	b.n	80138d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80138ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2201      	movs	r2, #1
 80138d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2200      	movs	r2, #0
 80138dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80138e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3730      	adds	r7, #48	@ 0x30
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b088      	sub	sp, #32
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	603b      	str	r3, [r7, #0]
 80138f8:	4613      	mov	r3, r2
 80138fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80138fc:	f7f9 fffc 	bl	800d8f8 <HAL_GetTick>
 8013900:	4602      	mov	r2, r0
 8013902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013904:	1a9b      	subs	r3, r3, r2
 8013906:	683a      	ldr	r2, [r7, #0]
 8013908:	4413      	add	r3, r2
 801390a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801390c:	f7f9 fff4 	bl	800d8f8 <HAL_GetTick>
 8013910:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013912:	4b39      	ldr	r3, [pc, #228]	@ (80139f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	015b      	lsls	r3, r3, #5
 8013918:	0d1b      	lsrs	r3, r3, #20
 801391a:	69fa      	ldr	r2, [r7, #28]
 801391c:	fb02 f303 	mul.w	r3, r2, r3
 8013920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013922:	e054      	b.n	80139ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801392a:	d050      	beq.n	80139ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801392c:	f7f9 ffe4 	bl	800d8f8 <HAL_GetTick>
 8013930:	4602      	mov	r2, r0
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	1ad3      	subs	r3, r2, r3
 8013936:	69fa      	ldr	r2, [r7, #28]
 8013938:	429a      	cmp	r2, r3
 801393a:	d902      	bls.n	8013942 <SPI_WaitFlagStateUntilTimeout+0x56>
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d13d      	bne.n	80139be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	685a      	ldr	r2, [r3, #4]
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8013950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801395a:	d111      	bne.n	8013980 <SPI_WaitFlagStateUntilTimeout+0x94>
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013964:	d004      	beq.n	8013970 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	689b      	ldr	r3, [r3, #8]
 801396a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801396e:	d107      	bne.n	8013980 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801397e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013988:	d10f      	bne.n	80139aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013998:	601a      	str	r2, [r3, #0]
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80139a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2201      	movs	r2, #1
 80139ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	2200      	movs	r2, #0
 80139b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80139ba:	2303      	movs	r3, #3
 80139bc:	e017      	b.n	80139ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d101      	bne.n	80139c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80139c4:	2300      	movs	r3, #0
 80139c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	3b01      	subs	r3, #1
 80139cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	689a      	ldr	r2, [r3, #8]
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	4013      	ands	r3, r2
 80139d8:	68ba      	ldr	r2, [r7, #8]
 80139da:	429a      	cmp	r2, r3
 80139dc:	bf0c      	ite	eq
 80139de:	2301      	moveq	r3, #1
 80139e0:	2300      	movne	r3, #0
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	461a      	mov	r2, r3
 80139e6:	79fb      	ldrb	r3, [r7, #7]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d19b      	bne.n	8013924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80139ec:	2300      	movs	r3, #0
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3720      	adds	r7, #32
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	20000004 	.word	0x20000004

080139fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b086      	sub	sp, #24
 8013a00:	af02      	add	r7, sp, #8
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013a10:	d111      	bne.n	8013a36 <SPI_EndRxTransaction+0x3a>
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	689b      	ldr	r3, [r3, #8]
 8013a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013a1a:	d004      	beq.n	8013a26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	689b      	ldr	r3, [r3, #8]
 8013a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013a24:	d107      	bne.n	8013a36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013a34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	685b      	ldr	r3, [r3, #4]
 8013a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013a3e:	d12a      	bne.n	8013a96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	689b      	ldr	r3, [r3, #8]
 8013a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013a48:	d012      	beq.n	8013a70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	9300      	str	r3, [sp, #0]
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	2200      	movs	r2, #0
 8013a52:	2180      	movs	r1, #128	@ 0x80
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	f7ff ff49 	bl	80138ec <SPI_WaitFlagStateUntilTimeout>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d02d      	beq.n	8013abc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a64:	f043 0220 	orr.w	r2, r3, #32
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8013a6c:	2303      	movs	r3, #3
 8013a6e:	e026      	b.n	8013abe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	2200      	movs	r2, #0
 8013a78:	2101      	movs	r1, #1
 8013a7a:	68f8      	ldr	r0, [r7, #12]
 8013a7c:	f7ff ff36 	bl	80138ec <SPI_WaitFlagStateUntilTimeout>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d01a      	beq.n	8013abc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a8a:	f043 0220 	orr.w	r2, r3, #32
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8013a92:	2303      	movs	r3, #3
 8013a94:	e013      	b.n	8013abe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	2101      	movs	r1, #1
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f7ff ff23 	bl	80138ec <SPI_WaitFlagStateUntilTimeout>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d007      	beq.n	8013abc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ab0:	f043 0220 	orr.w	r2, r3, #32
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8013ab8:	2303      	movs	r3, #3
 8013aba:	e000      	b.n	8013abe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
	...

08013ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b088      	sub	sp, #32
 8013acc:	af02      	add	r7, sp, #8
 8013ace:	60f8      	str	r0, [r7, #12]
 8013ad0:	60b9      	str	r1, [r7, #8]
 8013ad2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8013b44 <SPI_EndRxTxTransaction+0x7c>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8013b48 <SPI_EndRxTxTransaction+0x80>)
 8013ada:	fba2 2303 	umull	r2, r3, r2, r3
 8013ade:	0d5b      	lsrs	r3, r3, #21
 8013ae0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013ae4:	fb02 f303 	mul.w	r3, r2, r3
 8013ae8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	685b      	ldr	r3, [r3, #4]
 8013aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8013af2:	d112      	bne.n	8013b1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	2200      	movs	r2, #0
 8013afc:	2180      	movs	r1, #128	@ 0x80
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	f7ff fef4 	bl	80138ec <SPI_WaitFlagStateUntilTimeout>
 8013b04:	4603      	mov	r3, r0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d016      	beq.n	8013b38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b0e:	f043 0220 	orr.w	r2, r3, #32
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8013b16:	2303      	movs	r3, #3
 8013b18:	e00f      	b.n	8013b3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d00a      	beq.n	8013b36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	3b01      	subs	r3, #1
 8013b24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013b30:	2b80      	cmp	r3, #128	@ 0x80
 8013b32:	d0f2      	beq.n	8013b1a <SPI_EndRxTxTransaction+0x52>
 8013b34:	e000      	b.n	8013b38 <SPI_EndRxTxTransaction+0x70>
        break;
 8013b36:	bf00      	nop
  }

  return HAL_OK;
 8013b38:	2300      	movs	r3, #0
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3718      	adds	r7, #24
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
 8013b42:	bf00      	nop
 8013b44:	20000004 	.word	0x20000004
 8013b48:	165e9f81 	.word	0x165e9f81

08013b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d101      	bne.n	8013b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e041      	b.n	8013be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d106      	bne.n	8013b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7f0 fc1a 	bl	80043ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2202      	movs	r2, #2
 8013b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681a      	ldr	r2, [r3, #0]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	3304      	adds	r3, #4
 8013b88:	4619      	mov	r1, r3
 8013b8a:	4610      	mov	r0, r2
 8013b8c:	f000 fd24 	bl	80145d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2201      	movs	r2, #1
 8013b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2201      	movs	r2, #1
 8013bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2201      	movs	r2, #1
 8013bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013be0:	2300      	movs	r3, #0
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3708      	adds	r7, #8
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
	...

08013bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b085      	sub	sp, #20
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013bfa:	b2db      	uxtb	r3, r3
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d001      	beq.n	8013c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013c00:	2301      	movs	r3, #1
 8013c02:	e04e      	b.n	8013ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2202      	movs	r2, #2
 8013c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	68da      	ldr	r2, [r3, #12]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	f042 0201 	orr.w	r2, r2, #1
 8013c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	4a23      	ldr	r2, [pc, #140]	@ (8013cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d022      	beq.n	8013c6c <HAL_TIM_Base_Start_IT+0x80>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c2e:	d01d      	beq.n	8013c6c <HAL_TIM_Base_Start_IT+0x80>
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4a1f      	ldr	r2, [pc, #124]	@ (8013cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8013c36:	4293      	cmp	r3, r2
 8013c38:	d018      	beq.n	8013c6c <HAL_TIM_Base_Start_IT+0x80>
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8013cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8013c40:	4293      	cmp	r3, r2
 8013c42:	d013      	beq.n	8013c6c <HAL_TIM_Base_Start_IT+0x80>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	4a1c      	ldr	r2, [pc, #112]	@ (8013cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8013c4a:	4293      	cmp	r3, r2
 8013c4c:	d00e      	beq.n	8013c6c <HAL_TIM_Base_Start_IT+0x80>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	4a1b      	ldr	r2, [pc, #108]	@ (8013cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8013c54:	4293      	cmp	r3, r2
 8013c56:	d009      	beq.n	8013c6c <HAL_TIM_Base_Start_IT+0x80>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	4a19      	ldr	r2, [pc, #100]	@ (8013cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	d004      	beq.n	8013c6c <HAL_TIM_Base_Start_IT+0x80>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	4a18      	ldr	r2, [pc, #96]	@ (8013cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	d111      	bne.n	8013c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	f003 0307 	and.w	r3, r3, #7
 8013c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2b06      	cmp	r3, #6
 8013c7c:	d010      	beq.n	8013ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	f042 0201 	orr.w	r2, r2, #1
 8013c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c8e:	e007      	b.n	8013ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	681a      	ldr	r2, [r3, #0]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f042 0201 	orr.w	r2, r2, #1
 8013c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3714      	adds	r7, #20
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cac:	4770      	bx	lr
 8013cae:	bf00      	nop
 8013cb0:	40010000 	.word	0x40010000
 8013cb4:	40000400 	.word	0x40000400
 8013cb8:	40000800 	.word	0x40000800
 8013cbc:	40000c00 	.word	0x40000c00
 8013cc0:	40010400 	.word	0x40010400
 8013cc4:	40014000 	.word	0x40014000
 8013cc8:	40001800 	.word	0x40001800

08013ccc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d101      	bne.n	8013cde <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8013cda:	2301      	movs	r3, #1
 8013cdc:	e041      	b.n	8013d62 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d106      	bne.n	8013cf8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2200      	movs	r2, #0
 8013cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 f839 	bl	8013d6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2202      	movs	r2, #2
 8013cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	3304      	adds	r3, #4
 8013d08:	4619      	mov	r1, r3
 8013d0a:	4610      	mov	r0, r2
 8013d0c:	f000 fc64 	bl	80145d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2201      	movs	r2, #1
 8013d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2201      	movs	r2, #1
 8013d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2201      	movs	r2, #1
 8013d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2201      	movs	r2, #1
 8013d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2201      	movs	r2, #1
 8013d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2201      	movs	r2, #1
 8013d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8013d6a:	b480      	push	{r7}
 8013d6c:	b083      	sub	sp, #12
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8013d72:	bf00      	nop
 8013d74:	370c      	adds	r7, #12
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr

08013d7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013d7e:	b580      	push	{r7, lr}
 8013d80:	b082      	sub	sp, #8
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d101      	bne.n	8013d90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	e041      	b.n	8013e14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d106      	bne.n	8013daa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f7f0 fb3f 	bl	8004428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2202      	movs	r2, #2
 8013dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681a      	ldr	r2, [r3, #0]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	3304      	adds	r3, #4
 8013dba:	4619      	mov	r1, r3
 8013dbc:	4610      	mov	r0, r2
 8013dbe:	f000 fc0b 	bl	80145d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2201      	movs	r2, #1
 8013dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2201      	movs	r2, #1
 8013dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2201      	movs	r2, #1
 8013de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2201      	movs	r2, #1
 8013dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2201      	movs	r2, #1
 8013df6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2201      	movs	r2, #1
 8013e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013e12:	2300      	movs	r3, #0
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3708      	adds	r7, #8
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}

08013e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d109      	bne.n	8013e40 <HAL_TIM_PWM_Start+0x24>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	bf14      	ite	ne
 8013e38:	2301      	movne	r3, #1
 8013e3a:	2300      	moveq	r3, #0
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	e022      	b.n	8013e86 <HAL_TIM_PWM_Start+0x6a>
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	2b04      	cmp	r3, #4
 8013e44:	d109      	bne.n	8013e5a <HAL_TIM_PWM_Start+0x3e>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	2b01      	cmp	r3, #1
 8013e50:	bf14      	ite	ne
 8013e52:	2301      	movne	r3, #1
 8013e54:	2300      	moveq	r3, #0
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	e015      	b.n	8013e86 <HAL_TIM_PWM_Start+0x6a>
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	2b08      	cmp	r3, #8
 8013e5e:	d109      	bne.n	8013e74 <HAL_TIM_PWM_Start+0x58>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013e66:	b2db      	uxtb	r3, r3
 8013e68:	2b01      	cmp	r3, #1
 8013e6a:	bf14      	ite	ne
 8013e6c:	2301      	movne	r3, #1
 8013e6e:	2300      	moveq	r3, #0
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	e008      	b.n	8013e86 <HAL_TIM_PWM_Start+0x6a>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	bf14      	ite	ne
 8013e80:	2301      	movne	r3, #1
 8013e82:	2300      	moveq	r3, #0
 8013e84:	b2db      	uxtb	r3, r3
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e07c      	b.n	8013f88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d104      	bne.n	8013e9e <HAL_TIM_PWM_Start+0x82>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2202      	movs	r2, #2
 8013e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013e9c:	e013      	b.n	8013ec6 <HAL_TIM_PWM_Start+0xaa>
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	2b04      	cmp	r3, #4
 8013ea2:	d104      	bne.n	8013eae <HAL_TIM_PWM_Start+0x92>
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2202      	movs	r2, #2
 8013ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013eac:	e00b      	b.n	8013ec6 <HAL_TIM_PWM_Start+0xaa>
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	2b08      	cmp	r3, #8
 8013eb2:	d104      	bne.n	8013ebe <HAL_TIM_PWM_Start+0xa2>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2202      	movs	r2, #2
 8013eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013ebc:	e003      	b.n	8013ec6 <HAL_TIM_PWM_Start+0xaa>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2202      	movs	r2, #2
 8013ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2201      	movs	r2, #1
 8013ecc:	6839      	ldr	r1, [r7, #0]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f000 fe6c 	bl	8014bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8013f90 <HAL_TIM_PWM_Start+0x174>)
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d004      	beq.n	8013ee8 <HAL_TIM_PWM_Start+0xcc>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8013f94 <HAL_TIM_PWM_Start+0x178>)
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d101      	bne.n	8013eec <HAL_TIM_PWM_Start+0xd0>
 8013ee8:	2301      	movs	r3, #1
 8013eea:	e000      	b.n	8013eee <HAL_TIM_PWM_Start+0xd2>
 8013eec:	2300      	movs	r3, #0
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d007      	beq.n	8013f02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013f00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	4a22      	ldr	r2, [pc, #136]	@ (8013f90 <HAL_TIM_PWM_Start+0x174>)
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	d022      	beq.n	8013f52 <HAL_TIM_PWM_Start+0x136>
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013f14:	d01d      	beq.n	8013f52 <HAL_TIM_PWM_Start+0x136>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8013f98 <HAL_TIM_PWM_Start+0x17c>)
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d018      	beq.n	8013f52 <HAL_TIM_PWM_Start+0x136>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	4a1d      	ldr	r2, [pc, #116]	@ (8013f9c <HAL_TIM_PWM_Start+0x180>)
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d013      	beq.n	8013f52 <HAL_TIM_PWM_Start+0x136>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8013fa0 <HAL_TIM_PWM_Start+0x184>)
 8013f30:	4293      	cmp	r3, r2
 8013f32:	d00e      	beq.n	8013f52 <HAL_TIM_PWM_Start+0x136>
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4a16      	ldr	r2, [pc, #88]	@ (8013f94 <HAL_TIM_PWM_Start+0x178>)
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d009      	beq.n	8013f52 <HAL_TIM_PWM_Start+0x136>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4a18      	ldr	r2, [pc, #96]	@ (8013fa4 <HAL_TIM_PWM_Start+0x188>)
 8013f44:	4293      	cmp	r3, r2
 8013f46:	d004      	beq.n	8013f52 <HAL_TIM_PWM_Start+0x136>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4a16      	ldr	r2, [pc, #88]	@ (8013fa8 <HAL_TIM_PWM_Start+0x18c>)
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	d111      	bne.n	8013f76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	689b      	ldr	r3, [r3, #8]
 8013f58:	f003 0307 	and.w	r3, r3, #7
 8013f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	2b06      	cmp	r3, #6
 8013f62:	d010      	beq.n	8013f86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	f042 0201 	orr.w	r2, r2, #1
 8013f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f74:	e007      	b.n	8013f86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	681a      	ldr	r2, [r3, #0]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	f042 0201 	orr.w	r2, r2, #1
 8013f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013f86:	2300      	movs	r3, #0
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3710      	adds	r7, #16
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	40010000 	.word	0x40010000
 8013f94:	40010400 	.word	0x40010400
 8013f98:	40000400 	.word	0x40000400
 8013f9c:	40000800 	.word	0x40000800
 8013fa0:	40000c00 	.word	0x40000c00
 8013fa4:	40014000 	.word	0x40014000
 8013fa8:	40001800 	.word	0x40001800

08013fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	691b      	ldr	r3, [r3, #16]
 8013fba:	f003 0302 	and.w	r3, r3, #2
 8013fbe:	2b02      	cmp	r3, #2
 8013fc0:	d122      	bne.n	8014008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	f003 0302 	and.w	r3, r3, #2
 8013fcc:	2b02      	cmp	r3, #2
 8013fce:	d11b      	bne.n	8014008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f06f 0202 	mvn.w	r2, #2
 8013fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2201      	movs	r2, #1
 8013fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	699b      	ldr	r3, [r3, #24]
 8013fe6:	f003 0303 	and.w	r3, r3, #3
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d003      	beq.n	8013ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f000 fad3 	bl	801459a <HAL_TIM_IC_CaptureCallback>
 8013ff4:	e005      	b.n	8014002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f000 fac5 	bl	8014586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 fad6 	bl	80145ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2200      	movs	r2, #0
 8014006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	691b      	ldr	r3, [r3, #16]
 801400e:	f003 0304 	and.w	r3, r3, #4
 8014012:	2b04      	cmp	r3, #4
 8014014:	d122      	bne.n	801405c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	f003 0304 	and.w	r3, r3, #4
 8014020:	2b04      	cmp	r3, #4
 8014022:	d11b      	bne.n	801405c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f06f 0204 	mvn.w	r2, #4
 801402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2202      	movs	r2, #2
 8014032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	699b      	ldr	r3, [r3, #24]
 801403a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801403e:	2b00      	cmp	r3, #0
 8014040:	d003      	beq.n	801404a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 faa9 	bl	801459a <HAL_TIM_IC_CaptureCallback>
 8014048:	e005      	b.n	8014056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 fa9b 	bl	8014586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 faac 	bl	80145ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2200      	movs	r2, #0
 801405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	691b      	ldr	r3, [r3, #16]
 8014062:	f003 0308 	and.w	r3, r3, #8
 8014066:	2b08      	cmp	r3, #8
 8014068:	d122      	bne.n	80140b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	f003 0308 	and.w	r3, r3, #8
 8014074:	2b08      	cmp	r3, #8
 8014076:	d11b      	bne.n	80140b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	f06f 0208 	mvn.w	r2, #8
 8014080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2204      	movs	r2, #4
 8014086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	69db      	ldr	r3, [r3, #28]
 801408e:	f003 0303 	and.w	r3, r3, #3
 8014092:	2b00      	cmp	r3, #0
 8014094:	d003      	beq.n	801409e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f000 fa7f 	bl	801459a <HAL_TIM_IC_CaptureCallback>
 801409c:	e005      	b.n	80140aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f000 fa71 	bl	8014586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f000 fa82 	bl	80145ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2200      	movs	r2, #0
 80140ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	691b      	ldr	r3, [r3, #16]
 80140b6:	f003 0310 	and.w	r3, r3, #16
 80140ba:	2b10      	cmp	r3, #16
 80140bc:	d122      	bne.n	8014104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	f003 0310 	and.w	r3, r3, #16
 80140c8:	2b10      	cmp	r3, #16
 80140ca:	d11b      	bne.n	8014104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	f06f 0210 	mvn.w	r2, #16
 80140d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2208      	movs	r2, #8
 80140da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	69db      	ldr	r3, [r3, #28]
 80140e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d003      	beq.n	80140f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 fa55 	bl	801459a <HAL_TIM_IC_CaptureCallback>
 80140f0:	e005      	b.n	80140fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 fa47 	bl	8014586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f000 fa58 	bl	80145ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2200      	movs	r2, #0
 8014102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	691b      	ldr	r3, [r3, #16]
 801410a:	f003 0301 	and.w	r3, r3, #1
 801410e:	2b01      	cmp	r3, #1
 8014110:	d10e      	bne.n	8014130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	f003 0301 	and.w	r3, r3, #1
 801411c:	2b01      	cmp	r3, #1
 801411e:	d107      	bne.n	8014130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	f06f 0201 	mvn.w	r2, #1
 8014128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7ef fb52 	bl	80037d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	691b      	ldr	r3, [r3, #16]
 8014136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801413a:	2b80      	cmp	r3, #128	@ 0x80
 801413c:	d10e      	bne.n	801415c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	68db      	ldr	r3, [r3, #12]
 8014144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014148:	2b80      	cmp	r3, #128	@ 0x80
 801414a:	d107      	bne.n	801415c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8014154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 fdd4 	bl	8014d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	691b      	ldr	r3, [r3, #16]
 8014162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014166:	2b40      	cmp	r3, #64	@ 0x40
 8014168:	d10e      	bne.n	8014188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014174:	2b40      	cmp	r3, #64	@ 0x40
 8014176:	d107      	bne.n	8014188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8014180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 fa1d 	bl	80145c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	691b      	ldr	r3, [r3, #16]
 801418e:	f003 0320 	and.w	r3, r3, #32
 8014192:	2b20      	cmp	r3, #32
 8014194:	d10e      	bne.n	80141b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	f003 0320 	and.w	r3, r3, #32
 80141a0:	2b20      	cmp	r3, #32
 80141a2:	d107      	bne.n	80141b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	f06f 0220 	mvn.w	r2, #32
 80141ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f000 fd9e 	bl	8014cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80141b4:	bf00      	nop
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b086      	sub	sp, #24
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80141d2:	2b01      	cmp	r3, #1
 80141d4:	d101      	bne.n	80141da <HAL_TIM_OC_ConfigChannel+0x1e>
 80141d6:	2302      	movs	r3, #2
 80141d8:	e048      	b.n	801426c <HAL_TIM_OC_ConfigChannel+0xb0>
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2201      	movs	r2, #1
 80141de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2b0c      	cmp	r3, #12
 80141e6:	d839      	bhi.n	801425c <HAL_TIM_OC_ConfigChannel+0xa0>
 80141e8:	a201      	add	r2, pc, #4	@ (adr r2, 80141f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80141ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ee:	bf00      	nop
 80141f0:	08014225 	.word	0x08014225
 80141f4:	0801425d 	.word	0x0801425d
 80141f8:	0801425d 	.word	0x0801425d
 80141fc:	0801425d 	.word	0x0801425d
 8014200:	08014233 	.word	0x08014233
 8014204:	0801425d 	.word	0x0801425d
 8014208:	0801425d 	.word	0x0801425d
 801420c:	0801425d 	.word	0x0801425d
 8014210:	08014241 	.word	0x08014241
 8014214:	0801425d 	.word	0x0801425d
 8014218:	0801425d 	.word	0x0801425d
 801421c:	0801425d 	.word	0x0801425d
 8014220:	0801424f 	.word	0x0801424f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	68b9      	ldr	r1, [r7, #8]
 801422a:	4618      	mov	r0, r3
 801422c:	f000 fa74 	bl	8014718 <TIM_OC1_SetConfig>
      break;
 8014230:	e017      	b.n	8014262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	68b9      	ldr	r1, [r7, #8]
 8014238:	4618      	mov	r0, r3
 801423a:	f000 fadd 	bl	80147f8 <TIM_OC2_SetConfig>
      break;
 801423e:	e010      	b.n	8014262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	68b9      	ldr	r1, [r7, #8]
 8014246:	4618      	mov	r0, r3
 8014248:	f000 fb4c 	bl	80148e4 <TIM_OC3_SetConfig>
      break;
 801424c:	e009      	b.n	8014262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	68b9      	ldr	r1, [r7, #8]
 8014254:	4618      	mov	r0, r3
 8014256:	f000 fbb9 	bl	80149cc <TIM_OC4_SetConfig>
      break;
 801425a:	e002      	b.n	8014262 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801425c:	2301      	movs	r3, #1
 801425e:	75fb      	strb	r3, [r7, #23]
      break;
 8014260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	2200      	movs	r2, #0
 8014266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801426a:	7dfb      	ldrb	r3, [r7, #23]
}
 801426c:	4618      	mov	r0, r3
 801426e:	3718      	adds	r7, #24
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b086      	sub	sp, #24
 8014278:	af00      	add	r7, sp, #0
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	60b9      	str	r1, [r7, #8]
 801427e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014280:	2300      	movs	r3, #0
 8014282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801428a:	2b01      	cmp	r3, #1
 801428c:	d101      	bne.n	8014292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801428e:	2302      	movs	r3, #2
 8014290:	e0ae      	b.n	80143f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	2201      	movs	r2, #1
 8014296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2b0c      	cmp	r3, #12
 801429e:	f200 809f 	bhi.w	80143e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80142a2:	a201      	add	r2, pc, #4	@ (adr r2, 80142a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80142a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a8:	080142dd 	.word	0x080142dd
 80142ac:	080143e1 	.word	0x080143e1
 80142b0:	080143e1 	.word	0x080143e1
 80142b4:	080143e1 	.word	0x080143e1
 80142b8:	0801431d 	.word	0x0801431d
 80142bc:	080143e1 	.word	0x080143e1
 80142c0:	080143e1 	.word	0x080143e1
 80142c4:	080143e1 	.word	0x080143e1
 80142c8:	0801435f 	.word	0x0801435f
 80142cc:	080143e1 	.word	0x080143e1
 80142d0:	080143e1 	.word	0x080143e1
 80142d4:	080143e1 	.word	0x080143e1
 80142d8:	0801439f 	.word	0x0801439f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	68b9      	ldr	r1, [r7, #8]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f000 fa18 	bl	8014718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	699a      	ldr	r2, [r3, #24]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f042 0208 	orr.w	r2, r2, #8
 80142f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	699a      	ldr	r2, [r3, #24]
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f022 0204 	bic.w	r2, r2, #4
 8014306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	6999      	ldr	r1, [r3, #24]
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	691a      	ldr	r2, [r3, #16]
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	430a      	orrs	r2, r1
 8014318:	619a      	str	r2, [r3, #24]
      break;
 801431a:	e064      	b.n	80143e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	68b9      	ldr	r1, [r7, #8]
 8014322:	4618      	mov	r0, r3
 8014324:	f000 fa68 	bl	80147f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	699a      	ldr	r2, [r3, #24]
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	699a      	ldr	r2, [r3, #24]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8014346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	6999      	ldr	r1, [r3, #24]
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	691b      	ldr	r3, [r3, #16]
 8014352:	021a      	lsls	r2, r3, #8
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	430a      	orrs	r2, r1
 801435a:	619a      	str	r2, [r3, #24]
      break;
 801435c:	e043      	b.n	80143e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	68b9      	ldr	r1, [r7, #8]
 8014364:	4618      	mov	r0, r3
 8014366:	f000 fabd 	bl	80148e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	69da      	ldr	r2, [r3, #28]
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	f042 0208 	orr.w	r2, r2, #8
 8014378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	69da      	ldr	r2, [r3, #28]
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	f022 0204 	bic.w	r2, r2, #4
 8014388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	69d9      	ldr	r1, [r3, #28]
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	691a      	ldr	r2, [r3, #16]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	430a      	orrs	r2, r1
 801439a:	61da      	str	r2, [r3, #28]
      break;
 801439c:	e023      	b.n	80143e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	68b9      	ldr	r1, [r7, #8]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f000 fb11 	bl	80149cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	69da      	ldr	r2, [r3, #28]
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80143b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	69da      	ldr	r2, [r3, #28]
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80143c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	69d9      	ldr	r1, [r3, #28]
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	691b      	ldr	r3, [r3, #16]
 80143d4:	021a      	lsls	r2, r3, #8
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	430a      	orrs	r2, r1
 80143dc:	61da      	str	r2, [r3, #28]
      break;
 80143de:	e002      	b.n	80143e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80143e0:	2301      	movs	r3, #1
 80143e2:	75fb      	strb	r3, [r7, #23]
      break;
 80143e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2200      	movs	r2, #0
 80143ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80143ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3718      	adds	r7, #24
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014402:	2300      	movs	r3, #0
 8014404:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801440c:	2b01      	cmp	r3, #1
 801440e:	d101      	bne.n	8014414 <HAL_TIM_ConfigClockSource+0x1c>
 8014410:	2302      	movs	r3, #2
 8014412:	e0b4      	b.n	801457e <HAL_TIM_ConfigClockSource+0x186>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2201      	movs	r2, #1
 8014418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2202      	movs	r2, #2
 8014420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	689b      	ldr	r3, [r3, #8]
 801442a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8014432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801443a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	68ba      	ldr	r2, [r7, #8]
 8014442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801444c:	d03e      	beq.n	80144cc <HAL_TIM_ConfigClockSource+0xd4>
 801444e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8014452:	f200 8087 	bhi.w	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 8014456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801445a:	f000 8086 	beq.w	801456a <HAL_TIM_ConfigClockSource+0x172>
 801445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014462:	d87f      	bhi.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 8014464:	2b70      	cmp	r3, #112	@ 0x70
 8014466:	d01a      	beq.n	801449e <HAL_TIM_ConfigClockSource+0xa6>
 8014468:	2b70      	cmp	r3, #112	@ 0x70
 801446a:	d87b      	bhi.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 801446c:	2b60      	cmp	r3, #96	@ 0x60
 801446e:	d050      	beq.n	8014512 <HAL_TIM_ConfigClockSource+0x11a>
 8014470:	2b60      	cmp	r3, #96	@ 0x60
 8014472:	d877      	bhi.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 8014474:	2b50      	cmp	r3, #80	@ 0x50
 8014476:	d03c      	beq.n	80144f2 <HAL_TIM_ConfigClockSource+0xfa>
 8014478:	2b50      	cmp	r3, #80	@ 0x50
 801447a:	d873      	bhi.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 801447c:	2b40      	cmp	r3, #64	@ 0x40
 801447e:	d058      	beq.n	8014532 <HAL_TIM_ConfigClockSource+0x13a>
 8014480:	2b40      	cmp	r3, #64	@ 0x40
 8014482:	d86f      	bhi.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 8014484:	2b30      	cmp	r3, #48	@ 0x30
 8014486:	d064      	beq.n	8014552 <HAL_TIM_ConfigClockSource+0x15a>
 8014488:	2b30      	cmp	r3, #48	@ 0x30
 801448a:	d86b      	bhi.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 801448c:	2b20      	cmp	r3, #32
 801448e:	d060      	beq.n	8014552 <HAL_TIM_ConfigClockSource+0x15a>
 8014490:	2b20      	cmp	r3, #32
 8014492:	d867      	bhi.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
 8014494:	2b00      	cmp	r3, #0
 8014496:	d05c      	beq.n	8014552 <HAL_TIM_ConfigClockSource+0x15a>
 8014498:	2b10      	cmp	r3, #16
 801449a:	d05a      	beq.n	8014552 <HAL_TIM_ConfigClockSource+0x15a>
 801449c:	e062      	b.n	8014564 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	6818      	ldr	r0, [r3, #0]
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	6899      	ldr	r1, [r3, #8]
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	685a      	ldr	r2, [r3, #4]
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	f000 fb5d 	bl	8014b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	689b      	ldr	r3, [r3, #8]
 80144b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80144c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	68ba      	ldr	r2, [r7, #8]
 80144c8:	609a      	str	r2, [r3, #8]
      break;
 80144ca:	e04f      	b.n	801456c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6818      	ldr	r0, [r3, #0]
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	6899      	ldr	r1, [r3, #8]
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	685a      	ldr	r2, [r3, #4]
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	f000 fb46 	bl	8014b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	689a      	ldr	r2, [r3, #8]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80144ee:	609a      	str	r2, [r3, #8]
      break;
 80144f0:	e03c      	b.n	801456c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6818      	ldr	r0, [r3, #0]
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	6859      	ldr	r1, [r3, #4]
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	461a      	mov	r2, r3
 8014500:	f000 faba 	bl	8014a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	2150      	movs	r1, #80	@ 0x50
 801450a:	4618      	mov	r0, r3
 801450c:	f000 fb13 	bl	8014b36 <TIM_ITRx_SetConfig>
      break;
 8014510:	e02c      	b.n	801456c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6818      	ldr	r0, [r3, #0]
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	6859      	ldr	r1, [r3, #4]
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	68db      	ldr	r3, [r3, #12]
 801451e:	461a      	mov	r2, r3
 8014520:	f000 fad9 	bl	8014ad6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2160      	movs	r1, #96	@ 0x60
 801452a:	4618      	mov	r0, r3
 801452c:	f000 fb03 	bl	8014b36 <TIM_ITRx_SetConfig>
      break;
 8014530:	e01c      	b.n	801456c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6818      	ldr	r0, [r3, #0]
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	6859      	ldr	r1, [r3, #4]
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	68db      	ldr	r3, [r3, #12]
 801453e:	461a      	mov	r2, r3
 8014540:	f000 fa9a 	bl	8014a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2140      	movs	r1, #64	@ 0x40
 801454a:	4618      	mov	r0, r3
 801454c:	f000 faf3 	bl	8014b36 <TIM_ITRx_SetConfig>
      break;
 8014550:	e00c      	b.n	801456c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4619      	mov	r1, r3
 801455c:	4610      	mov	r0, r2
 801455e:	f000 faea 	bl	8014b36 <TIM_ITRx_SetConfig>
      break;
 8014562:	e003      	b.n	801456c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8014564:	2301      	movs	r3, #1
 8014566:	73fb      	strb	r3, [r7, #15]
      break;
 8014568:	e000      	b.n	801456c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801456a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2201      	movs	r2, #1
 8014570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2200      	movs	r2, #0
 8014578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801457c:	7bfb      	ldrb	r3, [r7, #15]
}
 801457e:	4618      	mov	r0, r3
 8014580:	3710      	adds	r7, #16
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}

08014586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014586:	b480      	push	{r7}
 8014588:	b083      	sub	sp, #12
 801458a:	af00      	add	r7, sp, #0
 801458c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801458e:	bf00      	nop
 8014590:	370c      	adds	r7, #12
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr

0801459a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801459a:	b480      	push	{r7}
 801459c:	b083      	sub	sp, #12
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80145a2:	bf00      	nop
 80145a4:	370c      	adds	r7, #12
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr

080145ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80145ae:	b480      	push	{r7}
 80145b0:	b083      	sub	sp, #12
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80145b6:	bf00      	nop
 80145b8:	370c      	adds	r7, #12
 80145ba:	46bd      	mov	sp, r7
 80145bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c0:	4770      	bx	lr

080145c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80145c2:	b480      	push	{r7}
 80145c4:	b083      	sub	sp, #12
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80145ca:	bf00      	nop
 80145cc:	370c      	adds	r7, #12
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr
	...

080145d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80145d8:	b480      	push	{r7}
 80145da:	b085      	sub	sp, #20
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	4a40      	ldr	r2, [pc, #256]	@ (80146ec <TIM_Base_SetConfig+0x114>)
 80145ec:	4293      	cmp	r3, r2
 80145ee:	d013      	beq.n	8014618 <TIM_Base_SetConfig+0x40>
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80145f6:	d00f      	beq.n	8014618 <TIM_Base_SetConfig+0x40>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	4a3d      	ldr	r2, [pc, #244]	@ (80146f0 <TIM_Base_SetConfig+0x118>)
 80145fc:	4293      	cmp	r3, r2
 80145fe:	d00b      	beq.n	8014618 <TIM_Base_SetConfig+0x40>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	4a3c      	ldr	r2, [pc, #240]	@ (80146f4 <TIM_Base_SetConfig+0x11c>)
 8014604:	4293      	cmp	r3, r2
 8014606:	d007      	beq.n	8014618 <TIM_Base_SetConfig+0x40>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	4a3b      	ldr	r2, [pc, #236]	@ (80146f8 <TIM_Base_SetConfig+0x120>)
 801460c:	4293      	cmp	r3, r2
 801460e:	d003      	beq.n	8014618 <TIM_Base_SetConfig+0x40>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	4a3a      	ldr	r2, [pc, #232]	@ (80146fc <TIM_Base_SetConfig+0x124>)
 8014614:	4293      	cmp	r3, r2
 8014616:	d108      	bne.n	801462a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801461e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	685b      	ldr	r3, [r3, #4]
 8014624:	68fa      	ldr	r2, [r7, #12]
 8014626:	4313      	orrs	r3, r2
 8014628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	4a2f      	ldr	r2, [pc, #188]	@ (80146ec <TIM_Base_SetConfig+0x114>)
 801462e:	4293      	cmp	r3, r2
 8014630:	d02b      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014638:	d027      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	4a2c      	ldr	r2, [pc, #176]	@ (80146f0 <TIM_Base_SetConfig+0x118>)
 801463e:	4293      	cmp	r3, r2
 8014640:	d023      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	4a2b      	ldr	r2, [pc, #172]	@ (80146f4 <TIM_Base_SetConfig+0x11c>)
 8014646:	4293      	cmp	r3, r2
 8014648:	d01f      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4a2a      	ldr	r2, [pc, #168]	@ (80146f8 <TIM_Base_SetConfig+0x120>)
 801464e:	4293      	cmp	r3, r2
 8014650:	d01b      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4a29      	ldr	r2, [pc, #164]	@ (80146fc <TIM_Base_SetConfig+0x124>)
 8014656:	4293      	cmp	r3, r2
 8014658:	d017      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	4a28      	ldr	r2, [pc, #160]	@ (8014700 <TIM_Base_SetConfig+0x128>)
 801465e:	4293      	cmp	r3, r2
 8014660:	d013      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4a27      	ldr	r2, [pc, #156]	@ (8014704 <TIM_Base_SetConfig+0x12c>)
 8014666:	4293      	cmp	r3, r2
 8014668:	d00f      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4a26      	ldr	r2, [pc, #152]	@ (8014708 <TIM_Base_SetConfig+0x130>)
 801466e:	4293      	cmp	r3, r2
 8014670:	d00b      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	4a25      	ldr	r2, [pc, #148]	@ (801470c <TIM_Base_SetConfig+0x134>)
 8014676:	4293      	cmp	r3, r2
 8014678:	d007      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4a24      	ldr	r2, [pc, #144]	@ (8014710 <TIM_Base_SetConfig+0x138>)
 801467e:	4293      	cmp	r3, r2
 8014680:	d003      	beq.n	801468a <TIM_Base_SetConfig+0xb2>
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	4a23      	ldr	r2, [pc, #140]	@ (8014714 <TIM_Base_SetConfig+0x13c>)
 8014686:	4293      	cmp	r3, r2
 8014688:	d108      	bne.n	801469c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	68db      	ldr	r3, [r3, #12]
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	4313      	orrs	r3, r2
 801469a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	695b      	ldr	r3, [r3, #20]
 80146a6:	4313      	orrs	r3, r2
 80146a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	68fa      	ldr	r2, [r7, #12]
 80146ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	689a      	ldr	r2, [r3, #8]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	4a0a      	ldr	r2, [pc, #40]	@ (80146ec <TIM_Base_SetConfig+0x114>)
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d003      	beq.n	80146d0 <TIM_Base_SetConfig+0xf8>
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	4a0c      	ldr	r2, [pc, #48]	@ (80146fc <TIM_Base_SetConfig+0x124>)
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d103      	bne.n	80146d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	691a      	ldr	r2, [r3, #16]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2201      	movs	r2, #1
 80146dc:	615a      	str	r2, [r3, #20]
}
 80146de:	bf00      	nop
 80146e0:	3714      	adds	r7, #20
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop
 80146ec:	40010000 	.word	0x40010000
 80146f0:	40000400 	.word	0x40000400
 80146f4:	40000800 	.word	0x40000800
 80146f8:	40000c00 	.word	0x40000c00
 80146fc:	40010400 	.word	0x40010400
 8014700:	40014000 	.word	0x40014000
 8014704:	40014400 	.word	0x40014400
 8014708:	40014800 	.word	0x40014800
 801470c:	40001800 	.word	0x40001800
 8014710:	40001c00 	.word	0x40001c00
 8014714:	40002000 	.word	0x40002000

08014718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014718:	b480      	push	{r7}
 801471a:	b087      	sub	sp, #28
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	6a1b      	ldr	r3, [r3, #32]
 8014726:	f023 0201 	bic.w	r2, r3, #1
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6a1b      	ldr	r3, [r3, #32]
 8014732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	685b      	ldr	r3, [r3, #4]
 8014738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	699b      	ldr	r3, [r3, #24]
 801473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f023 0303 	bic.w	r3, r3, #3
 801474e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	68fa      	ldr	r2, [r7, #12]
 8014756:	4313      	orrs	r3, r2
 8014758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	f023 0302 	bic.w	r3, r3, #2
 8014760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014762:	683b      	ldr	r3, [r7, #0]
 8014764:	689b      	ldr	r3, [r3, #8]
 8014766:	697a      	ldr	r2, [r7, #20]
 8014768:	4313      	orrs	r3, r2
 801476a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	4a20      	ldr	r2, [pc, #128]	@ (80147f0 <TIM_OC1_SetConfig+0xd8>)
 8014770:	4293      	cmp	r3, r2
 8014772:	d003      	beq.n	801477c <TIM_OC1_SetConfig+0x64>
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	4a1f      	ldr	r2, [pc, #124]	@ (80147f4 <TIM_OC1_SetConfig+0xdc>)
 8014778:	4293      	cmp	r3, r2
 801477a:	d10c      	bne.n	8014796 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	f023 0308 	bic.w	r3, r3, #8
 8014782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	697a      	ldr	r2, [r7, #20]
 801478a:	4313      	orrs	r3, r2
 801478c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	f023 0304 	bic.w	r3, r3, #4
 8014794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	4a15      	ldr	r2, [pc, #84]	@ (80147f0 <TIM_OC1_SetConfig+0xd8>)
 801479a:	4293      	cmp	r3, r2
 801479c:	d003      	beq.n	80147a6 <TIM_OC1_SetConfig+0x8e>
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	4a14      	ldr	r2, [pc, #80]	@ (80147f4 <TIM_OC1_SetConfig+0xdc>)
 80147a2:	4293      	cmp	r3, r2
 80147a4:	d111      	bne.n	80147ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80147ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80147b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	695b      	ldr	r3, [r3, #20]
 80147ba:	693a      	ldr	r2, [r7, #16]
 80147bc:	4313      	orrs	r3, r2
 80147be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	699b      	ldr	r3, [r3, #24]
 80147c4:	693a      	ldr	r2, [r7, #16]
 80147c6:	4313      	orrs	r3, r2
 80147c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	693a      	ldr	r2, [r7, #16]
 80147ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	685a      	ldr	r2, [r3, #4]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	697a      	ldr	r2, [r7, #20]
 80147e2:	621a      	str	r2, [r3, #32]
}
 80147e4:	bf00      	nop
 80147e6:	371c      	adds	r7, #28
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr
 80147f0:	40010000 	.word	0x40010000
 80147f4:	40010400 	.word	0x40010400

080147f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80147f8:	b480      	push	{r7}
 80147fa:	b087      	sub	sp, #28
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6a1b      	ldr	r3, [r3, #32]
 8014806:	f023 0210 	bic.w	r2, r3, #16
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6a1b      	ldr	r3, [r3, #32]
 8014812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	685b      	ldr	r3, [r3, #4]
 8014818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	699b      	ldr	r3, [r3, #24]
 801481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8014826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801482e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	021b      	lsls	r3, r3, #8
 8014836:	68fa      	ldr	r2, [r7, #12]
 8014838:	4313      	orrs	r3, r2
 801483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	f023 0320 	bic.w	r3, r3, #32
 8014842:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	689b      	ldr	r3, [r3, #8]
 8014848:	011b      	lsls	r3, r3, #4
 801484a:	697a      	ldr	r2, [r7, #20]
 801484c:	4313      	orrs	r3, r2
 801484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	4a22      	ldr	r2, [pc, #136]	@ (80148dc <TIM_OC2_SetConfig+0xe4>)
 8014854:	4293      	cmp	r3, r2
 8014856:	d003      	beq.n	8014860 <TIM_OC2_SetConfig+0x68>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4a21      	ldr	r2, [pc, #132]	@ (80148e0 <TIM_OC2_SetConfig+0xe8>)
 801485c:	4293      	cmp	r3, r2
 801485e:	d10d      	bne.n	801487c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	011b      	lsls	r3, r3, #4
 801486e:	697a      	ldr	r2, [r7, #20]
 8014870:	4313      	orrs	r3, r2
 8014872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801487a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	4a17      	ldr	r2, [pc, #92]	@ (80148dc <TIM_OC2_SetConfig+0xe4>)
 8014880:	4293      	cmp	r3, r2
 8014882:	d003      	beq.n	801488c <TIM_OC2_SetConfig+0x94>
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	4a16      	ldr	r2, [pc, #88]	@ (80148e0 <TIM_OC2_SetConfig+0xe8>)
 8014888:	4293      	cmp	r3, r2
 801488a:	d113      	bne.n	80148b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801489a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	695b      	ldr	r3, [r3, #20]
 80148a0:	009b      	lsls	r3, r3, #2
 80148a2:	693a      	ldr	r2, [r7, #16]
 80148a4:	4313      	orrs	r3, r2
 80148a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	699b      	ldr	r3, [r3, #24]
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	693a      	ldr	r2, [r7, #16]
 80148b0:	4313      	orrs	r3, r2
 80148b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	693a      	ldr	r2, [r7, #16]
 80148b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	685a      	ldr	r2, [r3, #4]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	697a      	ldr	r2, [r7, #20]
 80148cc:	621a      	str	r2, [r3, #32]
}
 80148ce:	bf00      	nop
 80148d0:	371c      	adds	r7, #28
 80148d2:	46bd      	mov	sp, r7
 80148d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d8:	4770      	bx	lr
 80148da:	bf00      	nop
 80148dc:	40010000 	.word	0x40010000
 80148e0:	40010400 	.word	0x40010400

080148e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b087      	sub	sp, #28
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6a1b      	ldr	r3, [r3, #32]
 80148f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6a1b      	ldr	r3, [r3, #32]
 80148fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	69db      	ldr	r3, [r3, #28]
 801490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f023 0303 	bic.w	r3, r3, #3
 801491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	68fa      	ldr	r2, [r7, #12]
 8014922:	4313      	orrs	r3, r2
 8014924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	021b      	lsls	r3, r3, #8
 8014934:	697a      	ldr	r2, [r7, #20]
 8014936:	4313      	orrs	r3, r2
 8014938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	4a21      	ldr	r2, [pc, #132]	@ (80149c4 <TIM_OC3_SetConfig+0xe0>)
 801493e:	4293      	cmp	r3, r2
 8014940:	d003      	beq.n	801494a <TIM_OC3_SetConfig+0x66>
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	4a20      	ldr	r2, [pc, #128]	@ (80149c8 <TIM_OC3_SetConfig+0xe4>)
 8014946:	4293      	cmp	r3, r2
 8014948:	d10d      	bne.n	8014966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	021b      	lsls	r3, r3, #8
 8014958:	697a      	ldr	r2, [r7, #20]
 801495a:	4313      	orrs	r3, r2
 801495c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8014964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4a16      	ldr	r2, [pc, #88]	@ (80149c4 <TIM_OC3_SetConfig+0xe0>)
 801496a:	4293      	cmp	r3, r2
 801496c:	d003      	beq.n	8014976 <TIM_OC3_SetConfig+0x92>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	4a15      	ldr	r2, [pc, #84]	@ (80149c8 <TIM_OC3_SetConfig+0xe4>)
 8014972:	4293      	cmp	r3, r2
 8014974:	d113      	bne.n	801499e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014976:	693b      	ldr	r3, [r7, #16]
 8014978:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801497c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	695b      	ldr	r3, [r3, #20]
 801498a:	011b      	lsls	r3, r3, #4
 801498c:	693a      	ldr	r2, [r7, #16]
 801498e:	4313      	orrs	r3, r2
 8014990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	699b      	ldr	r3, [r3, #24]
 8014996:	011b      	lsls	r3, r3, #4
 8014998:	693a      	ldr	r2, [r7, #16]
 801499a:	4313      	orrs	r3, r2
 801499c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	693a      	ldr	r2, [r7, #16]
 80149a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	68fa      	ldr	r2, [r7, #12]
 80149a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	685a      	ldr	r2, [r3, #4]
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	697a      	ldr	r2, [r7, #20]
 80149b6:	621a      	str	r2, [r3, #32]
}
 80149b8:	bf00      	nop
 80149ba:	371c      	adds	r7, #28
 80149bc:	46bd      	mov	sp, r7
 80149be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c2:	4770      	bx	lr
 80149c4:	40010000 	.word	0x40010000
 80149c8:	40010400 	.word	0x40010400

080149cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80149cc:	b480      	push	{r7}
 80149ce:	b087      	sub	sp, #28
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6a1b      	ldr	r3, [r3, #32]
 80149da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6a1b      	ldr	r3, [r3, #32]
 80149e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	69db      	ldr	r3, [r3, #28]
 80149f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80149fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	021b      	lsls	r3, r3, #8
 8014a0a:	68fa      	ldr	r2, [r7, #12]
 8014a0c:	4313      	orrs	r3, r2
 8014a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8014a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	689b      	ldr	r3, [r3, #8]
 8014a1c:	031b      	lsls	r3, r3, #12
 8014a1e:	693a      	ldr	r2, [r7, #16]
 8014a20:	4313      	orrs	r3, r2
 8014a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	4a12      	ldr	r2, [pc, #72]	@ (8014a70 <TIM_OC4_SetConfig+0xa4>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d003      	beq.n	8014a34 <TIM_OC4_SetConfig+0x68>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	4a11      	ldr	r2, [pc, #68]	@ (8014a74 <TIM_OC4_SetConfig+0xa8>)
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d109      	bne.n	8014a48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8014a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	695b      	ldr	r3, [r3, #20]
 8014a40:	019b      	lsls	r3, r3, #6
 8014a42:	697a      	ldr	r2, [r7, #20]
 8014a44:	4313      	orrs	r3, r2
 8014a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	697a      	ldr	r2, [r7, #20]
 8014a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	68fa      	ldr	r2, [r7, #12]
 8014a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	685a      	ldr	r2, [r3, #4]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	693a      	ldr	r2, [r7, #16]
 8014a60:	621a      	str	r2, [r3, #32]
}
 8014a62:	bf00      	nop
 8014a64:	371c      	adds	r7, #28
 8014a66:	46bd      	mov	sp, r7
 8014a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop
 8014a70:	40010000 	.word	0x40010000
 8014a74:	40010400 	.word	0x40010400

08014a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b087      	sub	sp, #28
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	60b9      	str	r1, [r7, #8]
 8014a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	6a1b      	ldr	r3, [r3, #32]
 8014a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	6a1b      	ldr	r3, [r3, #32]
 8014a8e:	f023 0201 	bic.w	r2, r3, #1
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	699b      	ldr	r3, [r3, #24]
 8014a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	011b      	lsls	r3, r3, #4
 8014aa8:	693a      	ldr	r2, [r7, #16]
 8014aaa:	4313      	orrs	r3, r2
 8014aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	f023 030a 	bic.w	r3, r3, #10
 8014ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014ab6:	697a      	ldr	r2, [r7, #20]
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	4313      	orrs	r3, r2
 8014abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	693a      	ldr	r2, [r7, #16]
 8014ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	697a      	ldr	r2, [r7, #20]
 8014ac8:	621a      	str	r2, [r3, #32]
}
 8014aca:	bf00      	nop
 8014acc:	371c      	adds	r7, #28
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad4:	4770      	bx	lr

08014ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014ad6:	b480      	push	{r7}
 8014ad8:	b087      	sub	sp, #28
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	60f8      	str	r0, [r7, #12]
 8014ade:	60b9      	str	r1, [r7, #8]
 8014ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	6a1b      	ldr	r3, [r3, #32]
 8014ae6:	f023 0210 	bic.w	r2, r3, #16
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	699b      	ldr	r3, [r3, #24]
 8014af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	6a1b      	ldr	r3, [r3, #32]
 8014af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014afa:	697b      	ldr	r3, [r7, #20]
 8014afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8014b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	031b      	lsls	r3, r3, #12
 8014b06:	697a      	ldr	r2, [r7, #20]
 8014b08:	4313      	orrs	r3, r2
 8014b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014b12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	011b      	lsls	r3, r3, #4
 8014b18:	693a      	ldr	r2, [r7, #16]
 8014b1a:	4313      	orrs	r3, r2
 8014b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	697a      	ldr	r2, [r7, #20]
 8014b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	693a      	ldr	r2, [r7, #16]
 8014b28:	621a      	str	r2, [r3, #32]
}
 8014b2a:	bf00      	nop
 8014b2c:	371c      	adds	r7, #28
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b34:	4770      	bx	lr

08014b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014b36:	b480      	push	{r7}
 8014b38:	b085      	sub	sp, #20
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
 8014b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	689b      	ldr	r3, [r3, #8]
 8014b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014b4e:	683a      	ldr	r2, [r7, #0]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	4313      	orrs	r3, r2
 8014b54:	f043 0307 	orr.w	r3, r3, #7
 8014b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	68fa      	ldr	r2, [r7, #12]
 8014b5e:	609a      	str	r2, [r3, #8]
}
 8014b60:	bf00      	nop
 8014b62:	3714      	adds	r7, #20
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b087      	sub	sp, #28
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	607a      	str	r2, [r7, #4]
 8014b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	689b      	ldr	r3, [r3, #8]
 8014b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8014b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	021a      	lsls	r2, r3, #8
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	431a      	orrs	r2, r3
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	4313      	orrs	r3, r2
 8014b94:	697a      	ldr	r2, [r7, #20]
 8014b96:	4313      	orrs	r3, r2
 8014b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	697a      	ldr	r2, [r7, #20]
 8014b9e:	609a      	str	r2, [r3, #8]
}
 8014ba0:	bf00      	nop
 8014ba2:	371c      	adds	r7, #28
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014baa:	4770      	bx	lr

08014bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b087      	sub	sp, #28
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	f003 031f 	and.w	r3, r3, #31
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8014bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	6a1a      	ldr	r2, [r3, #32]
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	43db      	mvns	r3, r3
 8014bce:	401a      	ands	r2, r3
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6a1a      	ldr	r2, [r3, #32]
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	f003 031f 	and.w	r3, r3, #31
 8014bde:	6879      	ldr	r1, [r7, #4]
 8014be0:	fa01 f303 	lsl.w	r3, r1, r3
 8014be4:	431a      	orrs	r2, r3
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	621a      	str	r2, [r3, #32]
}
 8014bea:	bf00      	nop
 8014bec:	371c      	adds	r7, #28
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf4:	4770      	bx	lr
	...

08014bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b085      	sub	sp, #20
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d101      	bne.n	8014c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014c0c:	2302      	movs	r3, #2
 8014c0e:	e05a      	b.n	8014cc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2201      	movs	r2, #1
 8014c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2202      	movs	r2, #2
 8014c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	685b      	ldr	r3, [r3, #4]
 8014c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	689b      	ldr	r3, [r3, #8]
 8014c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	68fa      	ldr	r2, [r7, #12]
 8014c3e:	4313      	orrs	r3, r2
 8014c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	68fa      	ldr	r2, [r7, #12]
 8014c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	4a21      	ldr	r2, [pc, #132]	@ (8014cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014c50:	4293      	cmp	r3, r2
 8014c52:	d022      	beq.n	8014c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014c5c:	d01d      	beq.n	8014c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	4a1d      	ldr	r2, [pc, #116]	@ (8014cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8014c64:	4293      	cmp	r3, r2
 8014c66:	d018      	beq.n	8014c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8014cdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	d013      	beq.n	8014c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	4a1a      	ldr	r2, [pc, #104]	@ (8014ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d00e      	beq.n	8014c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	4a18      	ldr	r2, [pc, #96]	@ (8014ce4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8014c82:	4293      	cmp	r3, r2
 8014c84:	d009      	beq.n	8014c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4a17      	ldr	r2, [pc, #92]	@ (8014ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014c8c:	4293      	cmp	r3, r2
 8014c8e:	d004      	beq.n	8014c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	4a15      	ldr	r2, [pc, #84]	@ (8014cec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014c96:	4293      	cmp	r3, r2
 8014c98:	d10c      	bne.n	8014cb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	68ba      	ldr	r2, [r7, #8]
 8014ca8:	4313      	orrs	r3, r2
 8014caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8014cc4:	2300      	movs	r3, #0
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3714      	adds	r7, #20
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop
 8014cd4:	40010000 	.word	0x40010000
 8014cd8:	40000400 	.word	0x40000400
 8014cdc:	40000800 	.word	0x40000800
 8014ce0:	40000c00 	.word	0x40000c00
 8014ce4:	40010400 	.word	0x40010400
 8014ce8:	40014000 	.word	0x40014000
 8014cec:	40001800 	.word	0x40001800

08014cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014cf0:	b480      	push	{r7}
 8014cf2:	b083      	sub	sp, #12
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014cf8:	bf00      	nop
 8014cfa:	370c      	adds	r7, #12
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d02:	4770      	bx	lr

08014d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014d0c:	bf00      	nop
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr

08014d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d101      	bne.n	8014d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014d26:	2301      	movs	r3, #1
 8014d28:	e03f      	b.n	8014daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d106      	bne.n	8014d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f7ef fcb6 	bl	80046b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2224      	movs	r2, #36	@ 0x24
 8014d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	68da      	ldr	r2, [r3, #12]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8014d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f000 fe51 	bl	8015a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	691a      	ldr	r2, [r3, #16]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	695a      	ldr	r2, [r3, #20]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	68da      	ldr	r2, [r3, #12]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8014d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2200      	movs	r2, #0
 8014d96:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2220      	movs	r2, #32
 8014d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2220      	movs	r2, #32
 8014da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8014da8:	2300      	movs	r3, #0
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3708      	adds	r7, #8
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
	...

08014db4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b08c      	sub	sp, #48	@ 0x30
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	2b20      	cmp	r3, #32
 8014dcc:	d165      	bne.n	8014e9a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d002      	beq.n	8014dda <HAL_UART_Transmit_DMA+0x26>
 8014dd4:	88fb      	ldrh	r3, [r7, #6]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d101      	bne.n	8014dde <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e05e      	b.n	8014e9c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d101      	bne.n	8014dec <HAL_UART_Transmit_DMA+0x38>
 8014de8:	2302      	movs	r3, #2
 8014dea:	e057      	b.n	8014e9c <HAL_UART_Transmit_DMA+0xe8>
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2201      	movs	r2, #1
 8014df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8014df4:	68ba      	ldr	r2, [r7, #8]
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	88fa      	ldrh	r2, [r7, #6]
 8014dfe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	88fa      	ldrh	r2, [r7, #6]
 8014e04:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2221      	movs	r2, #33	@ 0x21
 8014e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e18:	4a22      	ldr	r2, [pc, #136]	@ (8014ea4 <HAL_UART_Transmit_DMA+0xf0>)
 8014e1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e20:	4a21      	ldr	r2, [pc, #132]	@ (8014ea8 <HAL_UART_Transmit_DMA+0xf4>)
 8014e22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e28:	4a20      	ldr	r2, [pc, #128]	@ (8014eac <HAL_UART_Transmit_DMA+0xf8>)
 8014e2a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e30:	2200      	movs	r2, #0
 8014e32:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8014e34:	f107 0308 	add.w	r3, r7, #8
 8014e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e40:	6819      	ldr	r1, [r3, #0]
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	3304      	adds	r3, #4
 8014e48:	461a      	mov	r2, r3
 8014e4a:	88fb      	ldrh	r3, [r7, #6]
 8014e4c:	f7fa f828 	bl	800eea0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8014e58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	3314      	adds	r3, #20
 8014e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	e853 3f00 	ldrex	r3, [r3]
 8014e70:	617b      	str	r3, [r7, #20]
   return(result);
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	3314      	adds	r3, #20
 8014e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014e82:	627a      	str	r2, [r7, #36]	@ 0x24
 8014e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e86:	6a39      	ldr	r1, [r7, #32]
 8014e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e8a:	e841 2300 	strex	r3, r2, [r1]
 8014e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d1e5      	bne.n	8014e62 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8014e96:	2300      	movs	r3, #0
 8014e98:	e000      	b.n	8014e9c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8014e9a:	2302      	movs	r3, #2
  }
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3730      	adds	r7, #48	@ 0x30
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	08015535 	.word	0x08015535
 8014ea8:	080155cf 	.word	0x080155cf
 8014eac:	080155eb 	.word	0x080155eb

08014eb0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b090      	sub	sp, #64	@ 0x40
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	695b      	ldr	r3, [r3, #20]
 8014ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014ec6:	2b80      	cmp	r3, #128	@ 0x80
 8014ec8:	bf0c      	ite	eq
 8014eca:	2301      	moveq	r3, #1
 8014ecc:	2300      	movne	r3, #0
 8014ece:	b2db      	uxtb	r3, r3
 8014ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	2b21      	cmp	r3, #33	@ 0x21
 8014edc:	d128      	bne.n	8014f30 <HAL_UART_DMAStop+0x80>
 8014ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d025      	beq.n	8014f30 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	3314      	adds	r3, #20
 8014eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eee:	e853 3f00 	ldrex	r3, [r3]
 8014ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8014ef4:	6a3b      	ldr	r3, [r7, #32]
 8014ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	3314      	adds	r3, #20
 8014f02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f04:	633a      	str	r2, [r7, #48]	@ 0x30
 8014f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f0c:	e841 2300 	strex	r3, r2, [r1]
 8014f10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d1e5      	bne.n	8014ee4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d004      	beq.n	8014f2a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7fa f813 	bl	800ef50 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f000 fba7 	bl	801567e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	695b      	ldr	r3, [r3, #20]
 8014f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f3a:	2b40      	cmp	r3, #64	@ 0x40
 8014f3c:	bf0c      	ite	eq
 8014f3e:	2301      	moveq	r3, #1
 8014f40:	2300      	movne	r3, #0
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	2b22      	cmp	r3, #34	@ 0x22
 8014f50:	d128      	bne.n	8014fa4 <HAL_UART_DMAStop+0xf4>
 8014f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d025      	beq.n	8014fa4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	3314      	adds	r3, #20
 8014f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	e853 3f00 	ldrex	r3, [r3]
 8014f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	3314      	adds	r3, #20
 8014f76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014f78:	61fa      	str	r2, [r7, #28]
 8014f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f7c:	69b9      	ldr	r1, [r7, #24]
 8014f7e:	69fa      	ldr	r2, [r7, #28]
 8014f80:	e841 2300 	strex	r3, r2, [r1]
 8014f84:	617b      	str	r3, [r7, #20]
   return(result);
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d1e5      	bne.n	8014f58 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d004      	beq.n	8014f9e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7f9 ffd9 	bl	800ef50 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f000 fb95 	bl	80156ce <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014fa4:	2300      	movs	r3, #0
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3740      	adds	r7, #64	@ 0x40
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
	...

08014fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	68db      	ldr	r3, [r3, #12]
 8014fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	695b      	ldr	r3, [r3, #20]
 8014fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8014fdc:	2300      	movs	r3, #0
 8014fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8014fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014fe6:	f003 030f 	and.w	r3, r3, #15
 8014fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8014fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d10f      	bne.n	8015016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014ffa:	f003 0320 	and.w	r3, r3, #32
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d009      	beq.n	8015016 <HAL_UART_IRQHandler+0x66>
 8015002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015006:	f003 0320 	and.w	r3, r3, #32
 801500a:	2b00      	cmp	r3, #0
 801500c:	d003      	beq.n	8015016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 fc3c 	bl	801588c <UART_Receive_IT>
      return;
 8015014:	e256      	b.n	80154c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8015016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801501a:	2b00      	cmp	r3, #0
 801501c:	f000 80de 	beq.w	80151dc <HAL_UART_IRQHandler+0x22c>
 8015020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015024:	f003 0301 	and.w	r3, r3, #1
 8015028:	2b00      	cmp	r3, #0
 801502a:	d106      	bne.n	801503a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015030:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8015034:	2b00      	cmp	r3, #0
 8015036:	f000 80d1 	beq.w	80151dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801503e:	f003 0301 	and.w	r3, r3, #1
 8015042:	2b00      	cmp	r3, #0
 8015044:	d00b      	beq.n	801505e <HAL_UART_IRQHandler+0xae>
 8015046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801504e:	2b00      	cmp	r3, #0
 8015050:	d005      	beq.n	801505e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015056:	f043 0201 	orr.w	r2, r3, #1
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015062:	f003 0304 	and.w	r3, r3, #4
 8015066:	2b00      	cmp	r3, #0
 8015068:	d00b      	beq.n	8015082 <HAL_UART_IRQHandler+0xd2>
 801506a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801506e:	f003 0301 	and.w	r3, r3, #1
 8015072:	2b00      	cmp	r3, #0
 8015074:	d005      	beq.n	8015082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801507a:	f043 0202 	orr.w	r2, r3, #2
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015086:	f003 0302 	and.w	r3, r3, #2
 801508a:	2b00      	cmp	r3, #0
 801508c:	d00b      	beq.n	80150a6 <HAL_UART_IRQHandler+0xf6>
 801508e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015092:	f003 0301 	and.w	r3, r3, #1
 8015096:	2b00      	cmp	r3, #0
 8015098:	d005      	beq.n	80150a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801509e:	f043 0204 	orr.w	r2, r3, #4
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80150a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80150aa:	f003 0308 	and.w	r3, r3, #8
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d011      	beq.n	80150d6 <HAL_UART_IRQHandler+0x126>
 80150b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80150b6:	f003 0320 	and.w	r3, r3, #32
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d105      	bne.n	80150ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80150be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80150c2:	f003 0301 	and.w	r3, r3, #1
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d005      	beq.n	80150d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150ce:	f043 0208 	orr.w	r2, r3, #8
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150da:	2b00      	cmp	r3, #0
 80150dc:	f000 81ed 	beq.w	80154ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80150e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80150e4:	f003 0320 	and.w	r3, r3, #32
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d008      	beq.n	80150fe <HAL_UART_IRQHandler+0x14e>
 80150ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80150f0:	f003 0320 	and.w	r3, r3, #32
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d002      	beq.n	80150fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f000 fbc7 	bl	801588c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	695b      	ldr	r3, [r3, #20]
 8015104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015108:	2b40      	cmp	r3, #64	@ 0x40
 801510a:	bf0c      	ite	eq
 801510c:	2301      	moveq	r3, #1
 801510e:	2300      	movne	r3, #0
 8015110:	b2db      	uxtb	r3, r3
 8015112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801511a:	f003 0308 	and.w	r3, r3, #8
 801511e:	2b00      	cmp	r3, #0
 8015120:	d103      	bne.n	801512a <HAL_UART_IRQHandler+0x17a>
 8015122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8015126:	2b00      	cmp	r3, #0
 8015128:	d04f      	beq.n	80151ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f000 facf 	bl	80156ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	695b      	ldr	r3, [r3, #20]
 8015136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801513a:	2b40      	cmp	r3, #64	@ 0x40
 801513c:	d141      	bne.n	80151c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	3314      	adds	r3, #20
 8015144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801514c:	e853 3f00 	ldrex	r3, [r3]
 8015150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8015154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801515c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	3314      	adds	r3, #20
 8015166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801516a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801516e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8015176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801517a:	e841 2300 	strex	r3, r2, [r1]
 801517e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8015182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015186:	2b00      	cmp	r3, #0
 8015188:	d1d9      	bne.n	801513e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801518e:	2b00      	cmp	r3, #0
 8015190:	d013      	beq.n	80151ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015196:	4a7d      	ldr	r2, [pc, #500]	@ (801538c <HAL_UART_IRQHandler+0x3dc>)
 8015198:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801519e:	4618      	mov	r0, r3
 80151a0:	f7f9 ff46 	bl	800f030 <HAL_DMA_Abort_IT>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d016      	beq.n	80151d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151b0:	687a      	ldr	r2, [r7, #4]
 80151b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80151b4:	4610      	mov	r0, r2
 80151b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80151b8:	e00e      	b.n	80151d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f000 f9a4 	bl	8015508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80151c0:	e00a      	b.n	80151d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f000 f9a0 	bl	8015508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80151c8:	e006      	b.n	80151d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f000 f99c 	bl	8015508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2200      	movs	r2, #0
 80151d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80151d6:	e170      	b.n	80154ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80151d8:	bf00      	nop
    return;
 80151da:	e16e      	b.n	80154ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151e0:	2b01      	cmp	r3, #1
 80151e2:	f040 814a 	bne.w	801547a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80151e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80151ea:	f003 0310 	and.w	r3, r3, #16
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f000 8143 	beq.w	801547a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80151f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80151f8:	f003 0310 	and.w	r3, r3, #16
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f000 813c 	beq.w	801547a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015202:	2300      	movs	r3, #0
 8015204:	60bb      	str	r3, [r7, #8]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	60bb      	str	r3, [r7, #8]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	60bb      	str	r3, [r7, #8]
 8015216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	695b      	ldr	r3, [r3, #20]
 801521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015222:	2b40      	cmp	r3, #64	@ 0x40
 8015224:	f040 80b4 	bne.w	8015390 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8015238:	2b00      	cmp	r3, #0
 801523a:	f000 8140 	beq.w	80154be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8015242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8015246:	429a      	cmp	r2, r3
 8015248:	f080 8139 	bcs.w	80154be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8015252:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015258:	69db      	ldr	r3, [r3, #28]
 801525a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801525e:	f000 8088 	beq.w	8015372 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	330c      	adds	r3, #12
 8015268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801526c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015270:	e853 3f00 	ldrex	r3, [r3]
 8015274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8015278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801527c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	330c      	adds	r3, #12
 801528a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801528e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8015292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015296:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801529a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801529e:	e841 2300 	strex	r3, r2, [r1]
 80152a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80152a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d1d9      	bne.n	8015262 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	3314      	adds	r3, #20
 80152b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80152b8:	e853 3f00 	ldrex	r3, [r3]
 80152bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80152be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80152c0:	f023 0301 	bic.w	r3, r3, #1
 80152c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	3314      	adds	r3, #20
 80152ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80152d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80152d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80152da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80152de:	e841 2300 	strex	r3, r2, [r1]
 80152e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80152e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d1e1      	bne.n	80152ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	3314      	adds	r3, #20
 80152f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80152f4:	e853 3f00 	ldrex	r3, [r3]
 80152f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80152fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	3314      	adds	r3, #20
 801530a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801530e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8015310:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015312:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8015316:	e841 2300 	strex	r3, r2, [r1]
 801531a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801531c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801531e:	2b00      	cmp	r3, #0
 8015320:	d1e3      	bne.n	80152ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2220      	movs	r2, #32
 8015326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	2200      	movs	r2, #0
 801532e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	330c      	adds	r3, #12
 8015336:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801533a:	e853 3f00 	ldrex	r3, [r3]
 801533e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015342:	f023 0310 	bic.w	r3, r3, #16
 8015346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	330c      	adds	r3, #12
 8015350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8015354:	65ba      	str	r2, [r7, #88]	@ 0x58
 8015356:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015358:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801535a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801535c:	e841 2300 	strex	r3, r2, [r1]
 8015360:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8015362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015364:	2b00      	cmp	r3, #0
 8015366:	d1e3      	bne.n	8015330 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801536c:	4618      	mov	r0, r3
 801536e:	f7f9 fdef 	bl	800ef50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801537a:	b29b      	uxth	r3, r3
 801537c:	1ad3      	subs	r3, r2, r3
 801537e:	b29b      	uxth	r3, r3
 8015380:	4619      	mov	r1, r3
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f000 f8ca 	bl	801551c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8015388:	e099      	b.n	80154be <HAL_UART_IRQHandler+0x50e>
 801538a:	bf00      	nop
 801538c:	08015795 	.word	0x08015795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8015398:	b29b      	uxth	r3, r3
 801539a:	1ad3      	subs	r3, r2, r3
 801539c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80153a4:	b29b      	uxth	r3, r3
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	f000 808b 	beq.w	80154c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80153ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f000 8086 	beq.w	80154c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	330c      	adds	r3, #12
 80153bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153c0:	e853 3f00 	ldrex	r3, [r3]
 80153c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80153c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80153cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	330c      	adds	r3, #12
 80153d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80153da:	647a      	str	r2, [r7, #68]	@ 0x44
 80153dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80153e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80153e2:	e841 2300 	strex	r3, r2, [r1]
 80153e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80153e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d1e3      	bne.n	80153b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	3314      	adds	r3, #20
 80153f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153f8:	e853 3f00 	ldrex	r3, [r3]
 80153fc:	623b      	str	r3, [r7, #32]
   return(result);
 80153fe:	6a3b      	ldr	r3, [r7, #32]
 8015400:	f023 0301 	bic.w	r3, r3, #1
 8015404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	3314      	adds	r3, #20
 801540e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8015412:	633a      	str	r2, [r7, #48]	@ 0x30
 8015414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801541a:	e841 2300 	strex	r3, r2, [r1]
 801541e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015422:	2b00      	cmp	r3, #0
 8015424:	d1e3      	bne.n	80153ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2220      	movs	r2, #32
 801542a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2200      	movs	r2, #0
 8015432:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	330c      	adds	r3, #12
 801543a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	e853 3f00 	ldrex	r3, [r3]
 8015442:	60fb      	str	r3, [r7, #12]
   return(result);
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f023 0310 	bic.w	r3, r3, #16
 801544a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	330c      	adds	r3, #12
 8015454:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8015458:	61fa      	str	r2, [r7, #28]
 801545a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801545c:	69b9      	ldr	r1, [r7, #24]
 801545e:	69fa      	ldr	r2, [r7, #28]
 8015460:	e841 2300 	strex	r3, r2, [r1]
 8015464:	617b      	str	r3, [r7, #20]
   return(result);
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d1e3      	bne.n	8015434 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801546c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8015470:	4619      	mov	r1, r3
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f000 f852 	bl	801551c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8015478:	e023      	b.n	80154c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801547e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015482:	2b00      	cmp	r3, #0
 8015484:	d009      	beq.n	801549a <HAL_UART_IRQHandler+0x4ea>
 8015486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801548a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801548e:	2b00      	cmp	r3, #0
 8015490:	d003      	beq.n	801549a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f000 f992 	bl	80157bc <UART_Transmit_IT>
    return;
 8015498:	e014      	b.n	80154c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d00e      	beq.n	80154c4 <HAL_UART_IRQHandler+0x514>
 80154a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80154aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d008      	beq.n	80154c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f000 f9d2 	bl	801585c <UART_EndTransmit_IT>
    return;
 80154b8:	e004      	b.n	80154c4 <HAL_UART_IRQHandler+0x514>
    return;
 80154ba:	bf00      	nop
 80154bc:	e002      	b.n	80154c4 <HAL_UART_IRQHandler+0x514>
      return;
 80154be:	bf00      	nop
 80154c0:	e000      	b.n	80154c4 <HAL_UART_IRQHandler+0x514>
      return;
 80154c2:	bf00      	nop
  }
}
 80154c4:	37e8      	adds	r7, #232	@ 0xe8
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop

080154cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80154d4:	bf00      	nop
 80154d6:	370c      	adds	r7, #12
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr

080154e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80154e8:	bf00      	nop
 80154ea:	370c      	adds	r7, #12
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80154fc:	bf00      	nop
 80154fe:	370c      	adds	r7, #12
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr

08015508 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8015510:	bf00      	nop
 8015512:	370c      	adds	r7, #12
 8015514:	46bd      	mov	sp, r7
 8015516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551a:	4770      	bx	lr

0801551c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801551c:	b480      	push	{r7}
 801551e:	b083      	sub	sp, #12
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
 8015524:	460b      	mov	r3, r1
 8015526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015528:	bf00      	nop
 801552a:	370c      	adds	r7, #12
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr

08015534 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b090      	sub	sp, #64	@ 0x40
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801554c:	2b00      	cmp	r3, #0
 801554e:	d137      	bne.n	80155c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8015550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015552:	2200      	movs	r2, #0
 8015554:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	3314      	adds	r3, #20
 801555c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015560:	e853 3f00 	ldrex	r3, [r3]
 8015564:	623b      	str	r3, [r7, #32]
   return(result);
 8015566:	6a3b      	ldr	r3, [r7, #32]
 8015568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801556c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801556e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	3314      	adds	r3, #20
 8015574:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015576:	633a      	str	r2, [r7, #48]	@ 0x30
 8015578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801557a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801557c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801557e:	e841 2300 	strex	r3, r2, [r1]
 8015582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015586:	2b00      	cmp	r3, #0
 8015588:	d1e5      	bne.n	8015556 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801558a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	330c      	adds	r3, #12
 8015590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	e853 3f00 	ldrex	r3, [r3]
 8015598:	60fb      	str	r3, [r7, #12]
   return(result);
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80155a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80155a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	330c      	adds	r3, #12
 80155a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155aa:	61fa      	str	r2, [r7, #28]
 80155ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155ae:	69b9      	ldr	r1, [r7, #24]
 80155b0:	69fa      	ldr	r2, [r7, #28]
 80155b2:	e841 2300 	strex	r3, r2, [r1]
 80155b6:	617b      	str	r3, [r7, #20]
   return(result);
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d1e5      	bne.n	801558a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80155be:	e002      	b.n	80155c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80155c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80155c2:	f7ff ff83 	bl	80154cc <HAL_UART_TxCpltCallback>
}
 80155c6:	bf00      	nop
 80155c8:	3740      	adds	r7, #64	@ 0x40
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b084      	sub	sp, #16
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f7ff ff7f 	bl	80154e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80155e2:	bf00      	nop
 80155e4:	3710      	adds	r7, #16
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b084      	sub	sp, #16
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80155f2:	2300      	movs	r3, #0
 80155f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	695b      	ldr	r3, [r3, #20]
 8015602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015606:	2b80      	cmp	r3, #128	@ 0x80
 8015608:	bf0c      	ite	eq
 801560a:	2301      	moveq	r3, #1
 801560c:	2300      	movne	r3, #0
 801560e:	b2db      	uxtb	r3, r3
 8015610:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015618:	b2db      	uxtb	r3, r3
 801561a:	2b21      	cmp	r3, #33	@ 0x21
 801561c:	d108      	bne.n	8015630 <UART_DMAError+0x46>
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d005      	beq.n	8015630 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	2200      	movs	r2, #0
 8015628:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 801562a:	68b8      	ldr	r0, [r7, #8]
 801562c:	f000 f827 	bl	801567e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	695b      	ldr	r3, [r3, #20]
 8015636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801563a:	2b40      	cmp	r3, #64	@ 0x40
 801563c:	bf0c      	ite	eq
 801563e:	2301      	moveq	r3, #1
 8015640:	2300      	movne	r3, #0
 8015642:	b2db      	uxtb	r3, r3
 8015644:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801564c:	b2db      	uxtb	r3, r3
 801564e:	2b22      	cmp	r3, #34	@ 0x22
 8015650:	d108      	bne.n	8015664 <UART_DMAError+0x7a>
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d005      	beq.n	8015664 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	2200      	movs	r2, #0
 801565c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 801565e:	68b8      	ldr	r0, [r7, #8]
 8015660:	f000 f835 	bl	80156ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015668:	f043 0210 	orr.w	r2, r3, #16
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015670:	68b8      	ldr	r0, [r7, #8]
 8015672:	f7ff ff49 	bl	8015508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015676:	bf00      	nop
 8015678:	3710      	adds	r7, #16
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}

0801567e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801567e:	b480      	push	{r7}
 8015680:	b089      	sub	sp, #36	@ 0x24
 8015682:	af00      	add	r7, sp, #0
 8015684:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	330c      	adds	r3, #12
 801568c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	e853 3f00 	ldrex	r3, [r3]
 8015694:	60bb      	str	r3, [r7, #8]
   return(result);
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801569c:	61fb      	str	r3, [r7, #28]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	330c      	adds	r3, #12
 80156a4:	69fa      	ldr	r2, [r7, #28]
 80156a6:	61ba      	str	r2, [r7, #24]
 80156a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156aa:	6979      	ldr	r1, [r7, #20]
 80156ac:	69ba      	ldr	r2, [r7, #24]
 80156ae:	e841 2300 	strex	r3, r2, [r1]
 80156b2:	613b      	str	r3, [r7, #16]
   return(result);
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d1e5      	bne.n	8015686 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2220      	movs	r2, #32
 80156be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80156c2:	bf00      	nop
 80156c4:	3724      	adds	r7, #36	@ 0x24
 80156c6:	46bd      	mov	sp, r7
 80156c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156cc:	4770      	bx	lr

080156ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80156ce:	b480      	push	{r7}
 80156d0:	b095      	sub	sp, #84	@ 0x54
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	330c      	adds	r3, #12
 80156dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156e0:	e853 3f00 	ldrex	r3, [r3]
 80156e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80156e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80156ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	330c      	adds	r3, #12
 80156f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80156f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80156f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80156fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156fe:	e841 2300 	strex	r3, r2, [r1]
 8015702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1e5      	bne.n	80156d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	3314      	adds	r3, #20
 8015710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015712:	6a3b      	ldr	r3, [r7, #32]
 8015714:	e853 3f00 	ldrex	r3, [r3]
 8015718:	61fb      	str	r3, [r7, #28]
   return(result);
 801571a:	69fb      	ldr	r3, [r7, #28]
 801571c:	f023 0301 	bic.w	r3, r3, #1
 8015720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	3314      	adds	r3, #20
 8015728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801572a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801572c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801572e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015732:	e841 2300 	strex	r3, r2, [r1]
 8015736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801573a:	2b00      	cmp	r3, #0
 801573c:	d1e5      	bne.n	801570a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015742:	2b01      	cmp	r3, #1
 8015744:	d119      	bne.n	801577a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	330c      	adds	r3, #12
 801574c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	e853 3f00 	ldrex	r3, [r3]
 8015754:	60bb      	str	r3, [r7, #8]
   return(result);
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	f023 0310 	bic.w	r3, r3, #16
 801575c:	647b      	str	r3, [r7, #68]	@ 0x44
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	330c      	adds	r3, #12
 8015764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015766:	61ba      	str	r2, [r7, #24]
 8015768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801576a:	6979      	ldr	r1, [r7, #20]
 801576c:	69ba      	ldr	r2, [r7, #24]
 801576e:	e841 2300 	strex	r3, r2, [r1]
 8015772:	613b      	str	r3, [r7, #16]
   return(result);
 8015774:	693b      	ldr	r3, [r7, #16]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d1e5      	bne.n	8015746 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2220      	movs	r2, #32
 801577e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2200      	movs	r2, #0
 8015786:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8015788:	bf00      	nop
 801578a:	3754      	adds	r7, #84	@ 0x54
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr

08015794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	2200      	movs	r2, #0
 80157a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	2200      	movs	r2, #0
 80157ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80157ae:	68f8      	ldr	r0, [r7, #12]
 80157b0:	f7ff feaa 	bl	8015508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80157b4:	bf00      	nop
 80157b6:	3710      	adds	r7, #16
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80157bc:	b480      	push	{r7}
 80157be:	b085      	sub	sp, #20
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	2b21      	cmp	r3, #33	@ 0x21
 80157ce:	d13e      	bne.n	801584e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	689b      	ldr	r3, [r3, #8]
 80157d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80157d8:	d114      	bne.n	8015804 <UART_Transmit_IT+0x48>
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	691b      	ldr	r3, [r3, #16]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d110      	bne.n	8015804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6a1b      	ldr	r3, [r3, #32]
 80157e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	881b      	ldrh	r3, [r3, #0]
 80157ec:	461a      	mov	r2, r3
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80157f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6a1b      	ldr	r3, [r3, #32]
 80157fc:	1c9a      	adds	r2, r3, #2
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	621a      	str	r2, [r3, #32]
 8015802:	e008      	b.n	8015816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6a1b      	ldr	r3, [r3, #32]
 8015808:	1c59      	adds	r1, r3, #1
 801580a:	687a      	ldr	r2, [r7, #4]
 801580c:	6211      	str	r1, [r2, #32]
 801580e:	781a      	ldrb	r2, [r3, #0]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801581a:	b29b      	uxth	r3, r3
 801581c:	3b01      	subs	r3, #1
 801581e:	b29b      	uxth	r3, r3
 8015820:	687a      	ldr	r2, [r7, #4]
 8015822:	4619      	mov	r1, r3
 8015824:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8015826:	2b00      	cmp	r3, #0
 8015828:	d10f      	bne.n	801584a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	68da      	ldr	r2, [r3, #12]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	68da      	ldr	r2, [r3, #12]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801584a:	2300      	movs	r3, #0
 801584c:	e000      	b.n	8015850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801584e:	2302      	movs	r3, #2
  }
}
 8015850:	4618      	mov	r0, r3
 8015852:	3714      	adds	r7, #20
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr

0801585c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	68da      	ldr	r2, [r3, #12]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8015872:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2220      	movs	r2, #32
 8015878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f7ff fe25 	bl	80154cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8015882:	2300      	movs	r3, #0
}
 8015884:	4618      	mov	r0, r3
 8015886:	3708      	adds	r7, #8
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}

0801588c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b08c      	sub	sp, #48	@ 0x30
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801589a:	b2db      	uxtb	r3, r3
 801589c:	2b22      	cmp	r3, #34	@ 0x22
 801589e:	f040 80ab 	bne.w	80159f8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80158aa:	d117      	bne.n	80158dc <UART_Receive_IT+0x50>
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	691b      	ldr	r3, [r3, #16]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d113      	bne.n	80158dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80158b4:	2300      	movs	r3, #0
 80158b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	685b      	ldr	r3, [r3, #4]
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80158ca:	b29a      	uxth	r2, r3
 80158cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158d4:	1c9a      	adds	r2, r3, #2
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80158da:	e026      	b.n	801592a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80158e2:	2300      	movs	r3, #0
 80158e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	689b      	ldr	r3, [r3, #8]
 80158ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80158ee:	d007      	beq.n	8015900 <UART_Receive_IT+0x74>
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	689b      	ldr	r3, [r3, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d10a      	bne.n	801590e <UART_Receive_IT+0x82>
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	691b      	ldr	r3, [r3, #16]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d106      	bne.n	801590e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	b2da      	uxtb	r2, r3
 8015908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801590a:	701a      	strb	r2, [r3, #0]
 801590c:	e008      	b.n	8015920 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	b2db      	uxtb	r3, r3
 8015916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801591a:	b2da      	uxtb	r2, r3
 801591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801591e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015924:	1c5a      	adds	r2, r3, #1
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801592e:	b29b      	uxth	r3, r3
 8015930:	3b01      	subs	r3, #1
 8015932:	b29b      	uxth	r3, r3
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	4619      	mov	r1, r3
 8015938:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 801593a:	2b00      	cmp	r3, #0
 801593c:	d15a      	bne.n	80159f4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	68da      	ldr	r2, [r3, #12]
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f022 0220 	bic.w	r2, r2, #32
 801594c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	68da      	ldr	r2, [r3, #12]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801595c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	695a      	ldr	r2, [r3, #20]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	f022 0201 	bic.w	r2, r2, #1
 801596c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2220      	movs	r2, #32
 8015972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801597a:	2b01      	cmp	r3, #1
 801597c:	d135      	bne.n	80159ea <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2200      	movs	r2, #0
 8015982:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	330c      	adds	r3, #12
 801598a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801598c:	697b      	ldr	r3, [r7, #20]
 801598e:	e853 3f00 	ldrex	r3, [r3]
 8015992:	613b      	str	r3, [r7, #16]
   return(result);
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	f023 0310 	bic.w	r3, r3, #16
 801599a:	627b      	str	r3, [r7, #36]	@ 0x24
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	330c      	adds	r3, #12
 80159a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159a4:	623a      	str	r2, [r7, #32]
 80159a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159a8:	69f9      	ldr	r1, [r7, #28]
 80159aa:	6a3a      	ldr	r2, [r7, #32]
 80159ac:	e841 2300 	strex	r3, r2, [r1]
 80159b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d1e5      	bne.n	8015984 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	f003 0310 	and.w	r3, r3, #16
 80159c2:	2b10      	cmp	r3, #16
 80159c4:	d10a      	bne.n	80159dc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80159c6:	2300      	movs	r3, #0
 80159c8:	60fb      	str	r3, [r7, #12]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	60fb      	str	r3, [r7, #12]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	60fb      	str	r3, [r7, #12]
 80159da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80159e0:	4619      	mov	r1, r3
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7ff fd9a 	bl	801551c <HAL_UARTEx_RxEventCallback>
 80159e8:	e002      	b.n	80159f0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f7ff fd82 	bl	80154f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80159f0:	2300      	movs	r3, #0
 80159f2:	e002      	b.n	80159fa <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80159f4:	2300      	movs	r3, #0
 80159f6:	e000      	b.n	80159fa <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80159f8:	2302      	movs	r3, #2
  }
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3730      	adds	r7, #48	@ 0x30
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
	...

08015a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015a08:	b0c0      	sub	sp, #256	@ 0x100
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	691b      	ldr	r3, [r3, #16]
 8015a18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8015a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a20:	68d9      	ldr	r1, [r3, #12]
 8015a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a26:	681a      	ldr	r2, [r3, #0]
 8015a28:	ea40 0301 	orr.w	r3, r0, r1
 8015a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a32:	689a      	ldr	r2, [r3, #8]
 8015a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a38:	691b      	ldr	r3, [r3, #16]
 8015a3a:	431a      	orrs	r2, r3
 8015a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a40:	695b      	ldr	r3, [r3, #20]
 8015a42:	431a      	orrs	r2, r3
 8015a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a48:	69db      	ldr	r3, [r3, #28]
 8015a4a:	4313      	orrs	r3, r2
 8015a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8015a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	68db      	ldr	r3, [r3, #12]
 8015a58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8015a5c:	f021 010c 	bic.w	r1, r1, #12
 8015a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a64:	681a      	ldr	r2, [r3, #0]
 8015a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8015a6a:	430b      	orrs	r3, r1
 8015a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	695b      	ldr	r3, [r3, #20]
 8015a76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8015a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a7e:	6999      	ldr	r1, [r3, #24]
 8015a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a84:	681a      	ldr	r2, [r3, #0]
 8015a86:	ea40 0301 	orr.w	r3, r0, r1
 8015a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	4b8f      	ldr	r3, [pc, #572]	@ (8015cd0 <UART_SetConfig+0x2cc>)
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d005      	beq.n	8015aa4 <UART_SetConfig+0xa0>
 8015a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8015cd4 <UART_SetConfig+0x2d0>)
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d104      	bne.n	8015aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015aa4:	f7fd fb76 	bl	8013194 <HAL_RCC_GetPCLK2Freq>
 8015aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8015aac:	e003      	b.n	8015ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015aae:	f7fd fb5d 	bl	801316c <HAL_RCC_GetPCLK1Freq>
 8015ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015aba:	69db      	ldr	r3, [r3, #28]
 8015abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015ac0:	f040 810c 	bne.w	8015cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015ac8:	2200      	movs	r2, #0
 8015aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015ace:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8015ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8015ad6:	4622      	mov	r2, r4
 8015ad8:	462b      	mov	r3, r5
 8015ada:	1891      	adds	r1, r2, r2
 8015adc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8015ade:	415b      	adcs	r3, r3
 8015ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015ae6:	4621      	mov	r1, r4
 8015ae8:	eb12 0801 	adds.w	r8, r2, r1
 8015aec:	4629      	mov	r1, r5
 8015aee:	eb43 0901 	adc.w	r9, r3, r1
 8015af2:	f04f 0200 	mov.w	r2, #0
 8015af6:	f04f 0300 	mov.w	r3, #0
 8015afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8015afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8015b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8015b06:	4690      	mov	r8, r2
 8015b08:	4699      	mov	r9, r3
 8015b0a:	4623      	mov	r3, r4
 8015b0c:	eb18 0303 	adds.w	r3, r8, r3
 8015b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8015b14:	462b      	mov	r3, r5
 8015b16:	eb49 0303 	adc.w	r3, r9, r3
 8015b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	2200      	movs	r2, #0
 8015b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8015b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8015b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8015b32:	460b      	mov	r3, r1
 8015b34:	18db      	adds	r3, r3, r3
 8015b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8015b38:	4613      	mov	r3, r2
 8015b3a:	eb42 0303 	adc.w	r3, r2, r3
 8015b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8015b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8015b48:	f7eb f89e 	bl	8000c88 <__aeabi_uldivmod>
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	460b      	mov	r3, r1
 8015b50:	4b61      	ldr	r3, [pc, #388]	@ (8015cd8 <UART_SetConfig+0x2d4>)
 8015b52:	fba3 2302 	umull	r2, r3, r3, r2
 8015b56:	095b      	lsrs	r3, r3, #5
 8015b58:	011c      	lsls	r4, r3, #4
 8015b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015b5e:	2200      	movs	r2, #0
 8015b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015b64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8015b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8015b6c:	4642      	mov	r2, r8
 8015b6e:	464b      	mov	r3, r9
 8015b70:	1891      	adds	r1, r2, r2
 8015b72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8015b74:	415b      	adcs	r3, r3
 8015b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8015b7c:	4641      	mov	r1, r8
 8015b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8015b82:	4649      	mov	r1, r9
 8015b84:	eb43 0b01 	adc.w	fp, r3, r1
 8015b88:	f04f 0200 	mov.w	r2, #0
 8015b8c:	f04f 0300 	mov.w	r3, #0
 8015b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8015b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015b9c:	4692      	mov	sl, r2
 8015b9e:	469b      	mov	fp, r3
 8015ba0:	4643      	mov	r3, r8
 8015ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8015ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015baa:	464b      	mov	r3, r9
 8015bac:	eb4b 0303 	adc.w	r3, fp, r3
 8015bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015bb8:	685b      	ldr	r3, [r3, #4]
 8015bba:	2200      	movs	r2, #0
 8015bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8015bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8015bc8:	460b      	mov	r3, r1
 8015bca:	18db      	adds	r3, r3, r3
 8015bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8015bce:	4613      	mov	r3, r2
 8015bd0:	eb42 0303 	adc.w	r3, r2, r3
 8015bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8015bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8015bde:	f7eb f853 	bl	8000c88 <__aeabi_uldivmod>
 8015be2:	4602      	mov	r2, r0
 8015be4:	460b      	mov	r3, r1
 8015be6:	4611      	mov	r1, r2
 8015be8:	4b3b      	ldr	r3, [pc, #236]	@ (8015cd8 <UART_SetConfig+0x2d4>)
 8015bea:	fba3 2301 	umull	r2, r3, r3, r1
 8015bee:	095b      	lsrs	r3, r3, #5
 8015bf0:	2264      	movs	r2, #100	@ 0x64
 8015bf2:	fb02 f303 	mul.w	r3, r2, r3
 8015bf6:	1acb      	subs	r3, r1, r3
 8015bf8:	00db      	lsls	r3, r3, #3
 8015bfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8015bfe:	4b36      	ldr	r3, [pc, #216]	@ (8015cd8 <UART_SetConfig+0x2d4>)
 8015c00:	fba3 2302 	umull	r2, r3, r3, r2
 8015c04:	095b      	lsrs	r3, r3, #5
 8015c06:	005b      	lsls	r3, r3, #1
 8015c08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8015c0c:	441c      	add	r4, r3
 8015c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015c12:	2200      	movs	r2, #0
 8015c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015c18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8015c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8015c20:	4642      	mov	r2, r8
 8015c22:	464b      	mov	r3, r9
 8015c24:	1891      	adds	r1, r2, r2
 8015c26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8015c28:	415b      	adcs	r3, r3
 8015c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8015c30:	4641      	mov	r1, r8
 8015c32:	1851      	adds	r1, r2, r1
 8015c34:	6339      	str	r1, [r7, #48]	@ 0x30
 8015c36:	4649      	mov	r1, r9
 8015c38:	414b      	adcs	r3, r1
 8015c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c3c:	f04f 0200 	mov.w	r2, #0
 8015c40:	f04f 0300 	mov.w	r3, #0
 8015c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8015c48:	4659      	mov	r1, fp
 8015c4a:	00cb      	lsls	r3, r1, #3
 8015c4c:	4651      	mov	r1, sl
 8015c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015c52:	4651      	mov	r1, sl
 8015c54:	00ca      	lsls	r2, r1, #3
 8015c56:	4610      	mov	r0, r2
 8015c58:	4619      	mov	r1, r3
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	4642      	mov	r2, r8
 8015c5e:	189b      	adds	r3, r3, r2
 8015c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015c64:	464b      	mov	r3, r9
 8015c66:	460a      	mov	r2, r1
 8015c68:	eb42 0303 	adc.w	r3, r2, r3
 8015c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	2200      	movs	r2, #0
 8015c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8015c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8015c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8015c84:	460b      	mov	r3, r1
 8015c86:	18db      	adds	r3, r3, r3
 8015c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	eb42 0303 	adc.w	r3, r2, r3
 8015c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8015c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8015c9a:	f7ea fff5 	bl	8000c88 <__aeabi_uldivmod>
 8015c9e:	4602      	mov	r2, r0
 8015ca0:	460b      	mov	r3, r1
 8015ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8015cd8 <UART_SetConfig+0x2d4>)
 8015ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8015ca8:	095b      	lsrs	r3, r3, #5
 8015caa:	2164      	movs	r1, #100	@ 0x64
 8015cac:	fb01 f303 	mul.w	r3, r1, r3
 8015cb0:	1ad3      	subs	r3, r2, r3
 8015cb2:	00db      	lsls	r3, r3, #3
 8015cb4:	3332      	adds	r3, #50	@ 0x32
 8015cb6:	4a08      	ldr	r2, [pc, #32]	@ (8015cd8 <UART_SetConfig+0x2d4>)
 8015cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8015cbc:	095b      	lsrs	r3, r3, #5
 8015cbe:	f003 0207 	and.w	r2, r3, #7
 8015cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	4422      	add	r2, r4
 8015cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015ccc:	e106      	b.n	8015edc <UART_SetConfig+0x4d8>
 8015cce:	bf00      	nop
 8015cd0:	40011000 	.word	0x40011000
 8015cd4:	40011400 	.word	0x40011400
 8015cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8015cee:	4642      	mov	r2, r8
 8015cf0:	464b      	mov	r3, r9
 8015cf2:	1891      	adds	r1, r2, r2
 8015cf4:	6239      	str	r1, [r7, #32]
 8015cf6:	415b      	adcs	r3, r3
 8015cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8015cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015cfe:	4641      	mov	r1, r8
 8015d00:	1854      	adds	r4, r2, r1
 8015d02:	4649      	mov	r1, r9
 8015d04:	eb43 0501 	adc.w	r5, r3, r1
 8015d08:	f04f 0200 	mov.w	r2, #0
 8015d0c:	f04f 0300 	mov.w	r3, #0
 8015d10:	00eb      	lsls	r3, r5, #3
 8015d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8015d16:	00e2      	lsls	r2, r4, #3
 8015d18:	4614      	mov	r4, r2
 8015d1a:	461d      	mov	r5, r3
 8015d1c:	4643      	mov	r3, r8
 8015d1e:	18e3      	adds	r3, r4, r3
 8015d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8015d24:	464b      	mov	r3, r9
 8015d26:	eb45 0303 	adc.w	r3, r5, r3
 8015d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015d32:	685b      	ldr	r3, [r3, #4]
 8015d34:	2200      	movs	r2, #0
 8015d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8015d3e:	f04f 0200 	mov.w	r2, #0
 8015d42:	f04f 0300 	mov.w	r3, #0
 8015d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8015d4a:	4629      	mov	r1, r5
 8015d4c:	008b      	lsls	r3, r1, #2
 8015d4e:	4621      	mov	r1, r4
 8015d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015d54:	4621      	mov	r1, r4
 8015d56:	008a      	lsls	r2, r1, #2
 8015d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8015d5c:	f7ea ff94 	bl	8000c88 <__aeabi_uldivmod>
 8015d60:	4602      	mov	r2, r0
 8015d62:	460b      	mov	r3, r1
 8015d64:	4b60      	ldr	r3, [pc, #384]	@ (8015ee8 <UART_SetConfig+0x4e4>)
 8015d66:	fba3 2302 	umull	r2, r3, r3, r2
 8015d6a:	095b      	lsrs	r3, r3, #5
 8015d6c:	011c      	lsls	r4, r3, #4
 8015d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015d72:	2200      	movs	r2, #0
 8015d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8015d78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8015d80:	4642      	mov	r2, r8
 8015d82:	464b      	mov	r3, r9
 8015d84:	1891      	adds	r1, r2, r2
 8015d86:	61b9      	str	r1, [r7, #24]
 8015d88:	415b      	adcs	r3, r3
 8015d8a:	61fb      	str	r3, [r7, #28]
 8015d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015d90:	4641      	mov	r1, r8
 8015d92:	1851      	adds	r1, r2, r1
 8015d94:	6139      	str	r1, [r7, #16]
 8015d96:	4649      	mov	r1, r9
 8015d98:	414b      	adcs	r3, r1
 8015d9a:	617b      	str	r3, [r7, #20]
 8015d9c:	f04f 0200 	mov.w	r2, #0
 8015da0:	f04f 0300 	mov.w	r3, #0
 8015da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015da8:	4659      	mov	r1, fp
 8015daa:	00cb      	lsls	r3, r1, #3
 8015dac:	4651      	mov	r1, sl
 8015dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015db2:	4651      	mov	r1, sl
 8015db4:	00ca      	lsls	r2, r1, #3
 8015db6:	4610      	mov	r0, r2
 8015db8:	4619      	mov	r1, r3
 8015dba:	4603      	mov	r3, r0
 8015dbc:	4642      	mov	r2, r8
 8015dbe:	189b      	adds	r3, r3, r2
 8015dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8015dc4:	464b      	mov	r3, r9
 8015dc6:	460a      	mov	r2, r1
 8015dc8:	eb42 0303 	adc.w	r3, r2, r3
 8015dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015dda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8015ddc:	f04f 0200 	mov.w	r2, #0
 8015de0:	f04f 0300 	mov.w	r3, #0
 8015de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8015de8:	4649      	mov	r1, r9
 8015dea:	008b      	lsls	r3, r1, #2
 8015dec:	4641      	mov	r1, r8
 8015dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015df2:	4641      	mov	r1, r8
 8015df4:	008a      	lsls	r2, r1, #2
 8015df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8015dfa:	f7ea ff45 	bl	8000c88 <__aeabi_uldivmod>
 8015dfe:	4602      	mov	r2, r0
 8015e00:	460b      	mov	r3, r1
 8015e02:	4611      	mov	r1, r2
 8015e04:	4b38      	ldr	r3, [pc, #224]	@ (8015ee8 <UART_SetConfig+0x4e4>)
 8015e06:	fba3 2301 	umull	r2, r3, r3, r1
 8015e0a:	095b      	lsrs	r3, r3, #5
 8015e0c:	2264      	movs	r2, #100	@ 0x64
 8015e0e:	fb02 f303 	mul.w	r3, r2, r3
 8015e12:	1acb      	subs	r3, r1, r3
 8015e14:	011b      	lsls	r3, r3, #4
 8015e16:	3332      	adds	r3, #50	@ 0x32
 8015e18:	4a33      	ldr	r2, [pc, #204]	@ (8015ee8 <UART_SetConfig+0x4e4>)
 8015e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8015e1e:	095b      	lsrs	r3, r3, #5
 8015e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015e24:	441c      	add	r4, r3
 8015e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8015e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8015e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8015e34:	4642      	mov	r2, r8
 8015e36:	464b      	mov	r3, r9
 8015e38:	1891      	adds	r1, r2, r2
 8015e3a:	60b9      	str	r1, [r7, #8]
 8015e3c:	415b      	adcs	r3, r3
 8015e3e:	60fb      	str	r3, [r7, #12]
 8015e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015e44:	4641      	mov	r1, r8
 8015e46:	1851      	adds	r1, r2, r1
 8015e48:	6039      	str	r1, [r7, #0]
 8015e4a:	4649      	mov	r1, r9
 8015e4c:	414b      	adcs	r3, r1
 8015e4e:	607b      	str	r3, [r7, #4]
 8015e50:	f04f 0200 	mov.w	r2, #0
 8015e54:	f04f 0300 	mov.w	r3, #0
 8015e58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8015e5c:	4659      	mov	r1, fp
 8015e5e:	00cb      	lsls	r3, r1, #3
 8015e60:	4651      	mov	r1, sl
 8015e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015e66:	4651      	mov	r1, sl
 8015e68:	00ca      	lsls	r2, r1, #3
 8015e6a:	4610      	mov	r0, r2
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	4603      	mov	r3, r0
 8015e70:	4642      	mov	r2, r8
 8015e72:	189b      	adds	r3, r3, r2
 8015e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015e76:	464b      	mov	r3, r9
 8015e78:	460a      	mov	r2, r1
 8015e7a:	eb42 0303 	adc.w	r3, r2, r3
 8015e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	2200      	movs	r2, #0
 8015e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8015e8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8015e8c:	f04f 0200 	mov.w	r2, #0
 8015e90:	f04f 0300 	mov.w	r3, #0
 8015e94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8015e98:	4649      	mov	r1, r9
 8015e9a:	008b      	lsls	r3, r1, #2
 8015e9c:	4641      	mov	r1, r8
 8015e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015ea2:	4641      	mov	r1, r8
 8015ea4:	008a      	lsls	r2, r1, #2
 8015ea6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8015eaa:	f7ea feed 	bl	8000c88 <__aeabi_uldivmod>
 8015eae:	4602      	mov	r2, r0
 8015eb0:	460b      	mov	r3, r1
 8015eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8015ee8 <UART_SetConfig+0x4e4>)
 8015eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8015eb8:	095b      	lsrs	r3, r3, #5
 8015eba:	2164      	movs	r1, #100	@ 0x64
 8015ebc:	fb01 f303 	mul.w	r3, r1, r3
 8015ec0:	1ad3      	subs	r3, r2, r3
 8015ec2:	011b      	lsls	r3, r3, #4
 8015ec4:	3332      	adds	r3, #50	@ 0x32
 8015ec6:	4a08      	ldr	r2, [pc, #32]	@ (8015ee8 <UART_SetConfig+0x4e4>)
 8015ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8015ecc:	095b      	lsrs	r3, r3, #5
 8015ece:	f003 020f 	and.w	r2, r3, #15
 8015ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4422      	add	r2, r4
 8015eda:	609a      	str	r2, [r3, #8]
}
 8015edc:	bf00      	nop
 8015ede:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015ee8:	51eb851f 	.word	0x51eb851f

08015eec <LL_TIM_SetPrescaler>:
{
 8015eec:	b480      	push	{r7}
 8015eee:	b083      	sub	sp, #12
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	683a      	ldr	r2, [r7, #0]
 8015efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8015efc:	bf00      	nop
 8015efe:	370c      	adds	r7, #12
 8015f00:	46bd      	mov	sp, r7
 8015f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f06:	4770      	bx	lr

08015f08 <LL_TIM_SetAutoReload>:
{
 8015f08:	b480      	push	{r7}
 8015f0a:	b083      	sub	sp, #12
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	683a      	ldr	r2, [r7, #0]
 8015f16:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8015f18:	bf00      	nop
 8015f1a:	370c      	adds	r7, #12
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f22:	4770      	bx	lr

08015f24 <LL_TIM_SetRepetitionCounter>:
{
 8015f24:	b480      	push	{r7}
 8015f26:	b083      	sub	sp, #12
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	683a      	ldr	r2, [r7, #0]
 8015f32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8015f34:	bf00      	nop
 8015f36:	370c      	adds	r7, #12
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr

08015f40 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8015f40:	b480      	push	{r7}
 8015f42:	b083      	sub	sp, #12
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	695b      	ldr	r3, [r3, #20]
 8015f4c:	f043 0201 	orr.w	r2, r3, #1
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	615a      	str	r2, [r3, #20]
}
 8015f54:	bf00      	nop
 8015f56:	370c      	adds	r7, #12
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5e:	4770      	bx	lr

08015f60 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b084      	sub	sp, #16
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	4a3d      	ldr	r2, [pc, #244]	@ (8016068 <LL_TIM_Init+0x108>)
 8015f74:	4293      	cmp	r3, r2
 8015f76:	d013      	beq.n	8015fa0 <LL_TIM_Init+0x40>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015f7e:	d00f      	beq.n	8015fa0 <LL_TIM_Init+0x40>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	4a3a      	ldr	r2, [pc, #232]	@ (801606c <LL_TIM_Init+0x10c>)
 8015f84:	4293      	cmp	r3, r2
 8015f86:	d00b      	beq.n	8015fa0 <LL_TIM_Init+0x40>
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	4a39      	ldr	r2, [pc, #228]	@ (8016070 <LL_TIM_Init+0x110>)
 8015f8c:	4293      	cmp	r3, r2
 8015f8e:	d007      	beq.n	8015fa0 <LL_TIM_Init+0x40>
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	4a38      	ldr	r2, [pc, #224]	@ (8016074 <LL_TIM_Init+0x114>)
 8015f94:	4293      	cmp	r3, r2
 8015f96:	d003      	beq.n	8015fa0 <LL_TIM_Init+0x40>
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	4a37      	ldr	r2, [pc, #220]	@ (8016078 <LL_TIM_Init+0x118>)
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	d106      	bne.n	8015fae <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	4313      	orrs	r3, r2
 8015fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8016068 <LL_TIM_Init+0x108>)
 8015fb2:	4293      	cmp	r3, r2
 8015fb4:	d02b      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015fbc:	d027      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	4a2a      	ldr	r2, [pc, #168]	@ (801606c <LL_TIM_Init+0x10c>)
 8015fc2:	4293      	cmp	r3, r2
 8015fc4:	d023      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	4a29      	ldr	r2, [pc, #164]	@ (8016070 <LL_TIM_Init+0x110>)
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	d01f      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	4a28      	ldr	r2, [pc, #160]	@ (8016074 <LL_TIM_Init+0x114>)
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	d01b      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	4a27      	ldr	r2, [pc, #156]	@ (8016078 <LL_TIM_Init+0x118>)
 8015fda:	4293      	cmp	r3, r2
 8015fdc:	d017      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	4a26      	ldr	r2, [pc, #152]	@ (801607c <LL_TIM_Init+0x11c>)
 8015fe2:	4293      	cmp	r3, r2
 8015fe4:	d013      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	4a25      	ldr	r2, [pc, #148]	@ (8016080 <LL_TIM_Init+0x120>)
 8015fea:	4293      	cmp	r3, r2
 8015fec:	d00f      	beq.n	801600e <LL_TIM_Init+0xae>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	4a24      	ldr	r2, [pc, #144]	@ (8016084 <LL_TIM_Init+0x124>)
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	d00b      	beq.n	801600e <LL_TIM_Init+0xae>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	4a23      	ldr	r2, [pc, #140]	@ (8016088 <LL_TIM_Init+0x128>)
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	d007      	beq.n	801600e <LL_TIM_Init+0xae>
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	4a22      	ldr	r2, [pc, #136]	@ (801608c <LL_TIM_Init+0x12c>)
 8016002:	4293      	cmp	r3, r2
 8016004:	d003      	beq.n	801600e <LL_TIM_Init+0xae>
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	4a21      	ldr	r2, [pc, #132]	@ (8016090 <LL_TIM_Init+0x130>)
 801600a:	4293      	cmp	r3, r2
 801600c:	d106      	bne.n	801601c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	68db      	ldr	r3, [r3, #12]
 8016018:	4313      	orrs	r3, r2
 801601a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	68fa      	ldr	r2, [r7, #12]
 8016020:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	689b      	ldr	r3, [r3, #8]
 8016026:	4619      	mov	r1, r3
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7ff ff6d 	bl	8015f08 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	881b      	ldrh	r3, [r3, #0]
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7ff ff59 	bl	8015eec <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	4a0a      	ldr	r2, [pc, #40]	@ (8016068 <LL_TIM_Init+0x108>)
 801603e:	4293      	cmp	r3, r2
 8016040:	d003      	beq.n	801604a <LL_TIM_Init+0xea>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	4a0c      	ldr	r2, [pc, #48]	@ (8016078 <LL_TIM_Init+0x118>)
 8016046:	4293      	cmp	r3, r2
 8016048:	d105      	bne.n	8016056 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	691b      	ldr	r3, [r3, #16]
 801604e:	4619      	mov	r1, r3
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7ff ff67 	bl	8015f24 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f7ff ff72 	bl	8015f40 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 801605c:	2300      	movs	r3, #0
}
 801605e:	4618      	mov	r0, r3
 8016060:	3710      	adds	r7, #16
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	40010000 	.word	0x40010000
 801606c:	40000400 	.word	0x40000400
 8016070:	40000800 	.word	0x40000800
 8016074:	40000c00 	.word	0x40000c00
 8016078:	40010400 	.word	0x40010400
 801607c:	40014000 	.word	0x40014000
 8016080:	40014400 	.word	0x40014400
 8016084:	40014800 	.word	0x40014800
 8016088:	40001800 	.word	0x40001800
 801608c:	40001c00 	.word	0x40001c00
 8016090:	40002000 	.word	0x40002000

08016094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016094:	b084      	sub	sp, #16
 8016096:	b580      	push	{r7, lr}
 8016098:	b084      	sub	sp, #16
 801609a:	af00      	add	r7, sp, #0
 801609c:	6078      	str	r0, [r7, #4]
 801609e:	f107 001c 	add.w	r0, r7, #28
 80160a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80160a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160a8:	2b01      	cmp	r3, #1
 80160aa:	d122      	bne.n	80160f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80160c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	68db      	ldr	r3, [r3, #12]
 80160cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80160d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	d105      	bne.n	80160e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	68db      	ldr	r3, [r3, #12]
 80160de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f001 fbee 	bl	80178c8 <USB_CoreReset>
 80160ec:	4603      	mov	r3, r0
 80160ee:	73fb      	strb	r3, [r7, #15]
 80160f0:	e01a      	b.n	8016128 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f001 fbe2 	bl	80178c8 <USB_CoreReset>
 8016104:	4603      	mov	r3, r0
 8016106:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8016108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801610a:	2b00      	cmp	r3, #0
 801610c:	d106      	bne.n	801611c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016112:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	639a      	str	r2, [r3, #56]	@ 0x38
 801611a:	e005      	b.n	8016128 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016120:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8016128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801612a:	2b01      	cmp	r3, #1
 801612c:	d10b      	bne.n	8016146 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	689b      	ldr	r3, [r3, #8]
 8016132:	f043 0206 	orr.w	r2, r3, #6
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	689b      	ldr	r3, [r3, #8]
 801613e:	f043 0220 	orr.w	r2, r3, #32
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8016146:	7bfb      	ldrb	r3, [r7, #15]
}
 8016148:	4618      	mov	r0, r3
 801614a:	3710      	adds	r7, #16
 801614c:	46bd      	mov	sp, r7
 801614e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016152:	b004      	add	sp, #16
 8016154:	4770      	bx	lr
	...

08016158 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016158:	b480      	push	{r7}
 801615a:	b087      	sub	sp, #28
 801615c:	af00      	add	r7, sp, #0
 801615e:	60f8      	str	r0, [r7, #12]
 8016160:	60b9      	str	r1, [r7, #8]
 8016162:	4613      	mov	r3, r2
 8016164:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016166:	79fb      	ldrb	r3, [r7, #7]
 8016168:	2b02      	cmp	r3, #2
 801616a:	d165      	bne.n	8016238 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	4a41      	ldr	r2, [pc, #260]	@ (8016274 <USB_SetTurnaroundTime+0x11c>)
 8016170:	4293      	cmp	r3, r2
 8016172:	d906      	bls.n	8016182 <USB_SetTurnaroundTime+0x2a>
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	4a40      	ldr	r2, [pc, #256]	@ (8016278 <USB_SetTurnaroundTime+0x120>)
 8016178:	4293      	cmp	r3, r2
 801617a:	d202      	bcs.n	8016182 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801617c:	230f      	movs	r3, #15
 801617e:	617b      	str	r3, [r7, #20]
 8016180:	e062      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	4a3c      	ldr	r2, [pc, #240]	@ (8016278 <USB_SetTurnaroundTime+0x120>)
 8016186:	4293      	cmp	r3, r2
 8016188:	d306      	bcc.n	8016198 <USB_SetTurnaroundTime+0x40>
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	4a3b      	ldr	r2, [pc, #236]	@ (801627c <USB_SetTurnaroundTime+0x124>)
 801618e:	4293      	cmp	r3, r2
 8016190:	d202      	bcs.n	8016198 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8016192:	230e      	movs	r3, #14
 8016194:	617b      	str	r3, [r7, #20]
 8016196:	e057      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	4a38      	ldr	r2, [pc, #224]	@ (801627c <USB_SetTurnaroundTime+0x124>)
 801619c:	4293      	cmp	r3, r2
 801619e:	d306      	bcc.n	80161ae <USB_SetTurnaroundTime+0x56>
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	4a37      	ldr	r2, [pc, #220]	@ (8016280 <USB_SetTurnaroundTime+0x128>)
 80161a4:	4293      	cmp	r3, r2
 80161a6:	d202      	bcs.n	80161ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80161a8:	230d      	movs	r3, #13
 80161aa:	617b      	str	r3, [r7, #20]
 80161ac:	e04c      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	4a33      	ldr	r2, [pc, #204]	@ (8016280 <USB_SetTurnaroundTime+0x128>)
 80161b2:	4293      	cmp	r3, r2
 80161b4:	d306      	bcc.n	80161c4 <USB_SetTurnaroundTime+0x6c>
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	4a32      	ldr	r2, [pc, #200]	@ (8016284 <USB_SetTurnaroundTime+0x12c>)
 80161ba:	4293      	cmp	r3, r2
 80161bc:	d802      	bhi.n	80161c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80161be:	230c      	movs	r3, #12
 80161c0:	617b      	str	r3, [r7, #20]
 80161c2:	e041      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	4a2f      	ldr	r2, [pc, #188]	@ (8016284 <USB_SetTurnaroundTime+0x12c>)
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d906      	bls.n	80161da <USB_SetTurnaroundTime+0x82>
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	4a2e      	ldr	r2, [pc, #184]	@ (8016288 <USB_SetTurnaroundTime+0x130>)
 80161d0:	4293      	cmp	r3, r2
 80161d2:	d802      	bhi.n	80161da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80161d4:	230b      	movs	r3, #11
 80161d6:	617b      	str	r3, [r7, #20]
 80161d8:	e036      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	4a2a      	ldr	r2, [pc, #168]	@ (8016288 <USB_SetTurnaroundTime+0x130>)
 80161de:	4293      	cmp	r3, r2
 80161e0:	d906      	bls.n	80161f0 <USB_SetTurnaroundTime+0x98>
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	4a29      	ldr	r2, [pc, #164]	@ (801628c <USB_SetTurnaroundTime+0x134>)
 80161e6:	4293      	cmp	r3, r2
 80161e8:	d802      	bhi.n	80161f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80161ea:	230a      	movs	r3, #10
 80161ec:	617b      	str	r3, [r7, #20]
 80161ee:	e02b      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	4a26      	ldr	r2, [pc, #152]	@ (801628c <USB_SetTurnaroundTime+0x134>)
 80161f4:	4293      	cmp	r3, r2
 80161f6:	d906      	bls.n	8016206 <USB_SetTurnaroundTime+0xae>
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	4a25      	ldr	r2, [pc, #148]	@ (8016290 <USB_SetTurnaroundTime+0x138>)
 80161fc:	4293      	cmp	r3, r2
 80161fe:	d202      	bcs.n	8016206 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8016200:	2309      	movs	r3, #9
 8016202:	617b      	str	r3, [r7, #20]
 8016204:	e020      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	4a21      	ldr	r2, [pc, #132]	@ (8016290 <USB_SetTurnaroundTime+0x138>)
 801620a:	4293      	cmp	r3, r2
 801620c:	d306      	bcc.n	801621c <USB_SetTurnaroundTime+0xc4>
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	4a20      	ldr	r2, [pc, #128]	@ (8016294 <USB_SetTurnaroundTime+0x13c>)
 8016212:	4293      	cmp	r3, r2
 8016214:	d802      	bhi.n	801621c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8016216:	2308      	movs	r3, #8
 8016218:	617b      	str	r3, [r7, #20]
 801621a:	e015      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	4a1d      	ldr	r2, [pc, #116]	@ (8016294 <USB_SetTurnaroundTime+0x13c>)
 8016220:	4293      	cmp	r3, r2
 8016222:	d906      	bls.n	8016232 <USB_SetTurnaroundTime+0xda>
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	4a1c      	ldr	r2, [pc, #112]	@ (8016298 <USB_SetTurnaroundTime+0x140>)
 8016228:	4293      	cmp	r3, r2
 801622a:	d202      	bcs.n	8016232 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801622c:	2307      	movs	r3, #7
 801622e:	617b      	str	r3, [r7, #20]
 8016230:	e00a      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8016232:	2306      	movs	r3, #6
 8016234:	617b      	str	r3, [r7, #20]
 8016236:	e007      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8016238:	79fb      	ldrb	r3, [r7, #7]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d102      	bne.n	8016244 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801623e:	2309      	movs	r3, #9
 8016240:	617b      	str	r3, [r7, #20]
 8016242:	e001      	b.n	8016248 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016244:	2309      	movs	r3, #9
 8016246:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	68db      	ldr	r3, [r3, #12]
 801624c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	68da      	ldr	r2, [r3, #12]
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	029b      	lsls	r3, r3, #10
 801625c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8016260:	431a      	orrs	r2, r3
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016266:	2300      	movs	r3, #0
}
 8016268:	4618      	mov	r0, r3
 801626a:	371c      	adds	r7, #28
 801626c:	46bd      	mov	sp, r7
 801626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016272:	4770      	bx	lr
 8016274:	00d8acbf 	.word	0x00d8acbf
 8016278:	00e4e1c0 	.word	0x00e4e1c0
 801627c:	00f42400 	.word	0x00f42400
 8016280:	01067380 	.word	0x01067380
 8016284:	011a499f 	.word	0x011a499f
 8016288:	01312cff 	.word	0x01312cff
 801628c:	014ca43f 	.word	0x014ca43f
 8016290:	016e3600 	.word	0x016e3600
 8016294:	01a6ab1f 	.word	0x01a6ab1f
 8016298:	01e84800 	.word	0x01e84800

0801629c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801629c:	b480      	push	{r7}
 801629e:	b083      	sub	sp, #12
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	689b      	ldr	r3, [r3, #8]
 80162a8:	f043 0201 	orr.w	r2, r3, #1
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80162b0:	2300      	movs	r3, #0
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	370c      	adds	r7, #12
 80162b6:	46bd      	mov	sp, r7
 80162b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162bc:	4770      	bx	lr

080162be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80162be:	b480      	push	{r7}
 80162c0:	b083      	sub	sp, #12
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	689b      	ldr	r3, [r3, #8]
 80162ca:	f023 0201 	bic.w	r2, r3, #1
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80162d2:	2300      	movs	r3, #0
}
 80162d4:	4618      	mov	r0, r3
 80162d6:	370c      	adds	r7, #12
 80162d8:	46bd      	mov	sp, r7
 80162da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162de:	4770      	bx	lr

080162e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b084      	sub	sp, #16
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	460b      	mov	r3, r1
 80162ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80162ec:	2300      	movs	r3, #0
 80162ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	68db      	ldr	r3, [r3, #12]
 80162f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80162fc:	78fb      	ldrb	r3, [r7, #3]
 80162fe:	2b01      	cmp	r3, #1
 8016300:	d115      	bne.n	801632e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	68db      	ldr	r3, [r3, #12]
 8016306:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801630e:	2001      	movs	r0, #1
 8016310:	f7f7 fafe 	bl	800d910 <HAL_Delay>
      ms++;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	3301      	adds	r3, #1
 8016318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f001 fa45 	bl	80177aa <USB_GetMode>
 8016320:	4603      	mov	r3, r0
 8016322:	2b01      	cmp	r3, #1
 8016324:	d01e      	beq.n	8016364 <USB_SetCurrentMode+0x84>
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	2b31      	cmp	r3, #49	@ 0x31
 801632a:	d9f0      	bls.n	801630e <USB_SetCurrentMode+0x2e>
 801632c:	e01a      	b.n	8016364 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801632e:	78fb      	ldrb	r3, [r7, #3]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d115      	bne.n	8016360 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	68db      	ldr	r3, [r3, #12]
 8016338:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016340:	2001      	movs	r0, #1
 8016342:	f7f7 fae5 	bl	800d910 <HAL_Delay>
      ms++;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	3301      	adds	r3, #1
 801634a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f001 fa2c 	bl	80177aa <USB_GetMode>
 8016352:	4603      	mov	r3, r0
 8016354:	2b00      	cmp	r3, #0
 8016356:	d005      	beq.n	8016364 <USB_SetCurrentMode+0x84>
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	2b31      	cmp	r3, #49	@ 0x31
 801635c:	d9f0      	bls.n	8016340 <USB_SetCurrentMode+0x60>
 801635e:	e001      	b.n	8016364 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016360:	2301      	movs	r3, #1
 8016362:	e005      	b.n	8016370 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	2b32      	cmp	r3, #50	@ 0x32
 8016368:	d101      	bne.n	801636e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801636a:	2301      	movs	r3, #1
 801636c:	e000      	b.n	8016370 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801636e:	2300      	movs	r3, #0
}
 8016370:	4618      	mov	r0, r3
 8016372:	3710      	adds	r7, #16
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016378:	b084      	sub	sp, #16
 801637a:	b580      	push	{r7, lr}
 801637c:	b086      	sub	sp, #24
 801637e:	af00      	add	r7, sp, #0
 8016380:	6078      	str	r0, [r7, #4]
 8016382:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8016386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801638a:	2300      	movs	r3, #0
 801638c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016392:	2300      	movs	r3, #0
 8016394:	613b      	str	r3, [r7, #16]
 8016396:	e009      	b.n	80163ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8016398:	687a      	ldr	r2, [r7, #4]
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	3340      	adds	r3, #64	@ 0x40
 801639e:	009b      	lsls	r3, r3, #2
 80163a0:	4413      	add	r3, r2
 80163a2:	2200      	movs	r2, #0
 80163a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	3301      	adds	r3, #1
 80163aa:	613b      	str	r3, [r7, #16]
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	2b0e      	cmp	r3, #14
 80163b0:	d9f2      	bls.n	8016398 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80163b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d11c      	bne.n	80163f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80163be:	685b      	ldr	r3, [r3, #4]
 80163c0:	68fa      	ldr	r2, [r7, #12]
 80163c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80163c6:	f043 0302 	orr.w	r3, r3, #2
 80163ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163dc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163e8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80163f0:	e00b      	b.n	801640a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016402:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016410:	461a      	mov	r2, r3
 8016412:	2300      	movs	r3, #0
 8016414:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801641c:	4619      	mov	r1, r3
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016424:	461a      	mov	r2, r3
 8016426:	680b      	ldr	r3, [r1, #0]
 8016428:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801642c:	2b01      	cmp	r3, #1
 801642e:	d10c      	bne.n	801644a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8016430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016432:	2b00      	cmp	r3, #0
 8016434:	d104      	bne.n	8016440 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8016436:	2100      	movs	r1, #0
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	f000 f965 	bl	8016708 <USB_SetDevSpeed>
 801643e:	e008      	b.n	8016452 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8016440:	2101      	movs	r1, #1
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f000 f960 	bl	8016708 <USB_SetDevSpeed>
 8016448:	e003      	b.n	8016452 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801644a:	2103      	movs	r1, #3
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f000 f95b 	bl	8016708 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8016452:	2110      	movs	r1, #16
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f000 f8f3 	bl	8016640 <USB_FlushTxFifo>
 801645a:	4603      	mov	r3, r0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d001      	beq.n	8016464 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8016460:	2301      	movs	r3, #1
 8016462:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f000 f91f 	bl	80166a8 <USB_FlushRxFifo>
 801646a:	4603      	mov	r3, r0
 801646c:	2b00      	cmp	r3, #0
 801646e:	d001      	beq.n	8016474 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8016470:	2301      	movs	r3, #1
 8016472:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801647a:	461a      	mov	r2, r3
 801647c:	2300      	movs	r3, #0
 801647e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016486:	461a      	mov	r2, r3
 8016488:	2300      	movs	r3, #0
 801648a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016492:	461a      	mov	r2, r3
 8016494:	2300      	movs	r3, #0
 8016496:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016498:	2300      	movs	r3, #0
 801649a:	613b      	str	r3, [r7, #16]
 801649c:	e043      	b.n	8016526 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	015a      	lsls	r2, r3, #5
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	4413      	add	r3, r2
 80164a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80164b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80164b4:	d118      	bne.n	80164e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d10a      	bne.n	80164d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80164bc:	693b      	ldr	r3, [r7, #16]
 80164be:	015a      	lsls	r2, r3, #5
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	4413      	add	r3, r2
 80164c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164c8:	461a      	mov	r2, r3
 80164ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80164ce:	6013      	str	r3, [r2, #0]
 80164d0:	e013      	b.n	80164fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	015a      	lsls	r2, r3, #5
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	4413      	add	r3, r2
 80164da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164de:	461a      	mov	r2, r3
 80164e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80164e4:	6013      	str	r3, [r2, #0]
 80164e6:	e008      	b.n	80164fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80164e8:	693b      	ldr	r3, [r7, #16]
 80164ea:	015a      	lsls	r2, r3, #5
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	4413      	add	r3, r2
 80164f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164f4:	461a      	mov	r2, r3
 80164f6:	2300      	movs	r3, #0
 80164f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80164fa:	693b      	ldr	r3, [r7, #16]
 80164fc:	015a      	lsls	r2, r3, #5
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	4413      	add	r3, r2
 8016502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016506:	461a      	mov	r2, r3
 8016508:	2300      	movs	r3, #0
 801650a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801650c:	693b      	ldr	r3, [r7, #16]
 801650e:	015a      	lsls	r2, r3, #5
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	4413      	add	r3, r2
 8016514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016518:	461a      	mov	r2, r3
 801651a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801651e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	3301      	adds	r3, #1
 8016524:	613b      	str	r3, [r7, #16]
 8016526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016528:	693a      	ldr	r2, [r7, #16]
 801652a:	429a      	cmp	r2, r3
 801652c:	d3b7      	bcc.n	801649e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801652e:	2300      	movs	r3, #0
 8016530:	613b      	str	r3, [r7, #16]
 8016532:	e043      	b.n	80165bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016534:	693b      	ldr	r3, [r7, #16]
 8016536:	015a      	lsls	r2, r3, #5
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	4413      	add	r3, r2
 801653c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016546:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801654a:	d118      	bne.n	801657e <USB_DevInit+0x206>
    {
      if (i == 0U)
 801654c:	693b      	ldr	r3, [r7, #16]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d10a      	bne.n	8016568 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	015a      	lsls	r2, r3, #5
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	4413      	add	r3, r2
 801655a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801655e:	461a      	mov	r2, r3
 8016560:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8016564:	6013      	str	r3, [r2, #0]
 8016566:	e013      	b.n	8016590 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016568:	693b      	ldr	r3, [r7, #16]
 801656a:	015a      	lsls	r2, r3, #5
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	4413      	add	r3, r2
 8016570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016574:	461a      	mov	r2, r3
 8016576:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801657a:	6013      	str	r3, [r2, #0]
 801657c:	e008      	b.n	8016590 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	015a      	lsls	r2, r3, #5
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	4413      	add	r3, r2
 8016586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801658a:	461a      	mov	r2, r3
 801658c:	2300      	movs	r3, #0
 801658e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8016590:	693b      	ldr	r3, [r7, #16]
 8016592:	015a      	lsls	r2, r3, #5
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	4413      	add	r3, r2
 8016598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801659c:	461a      	mov	r2, r3
 801659e:	2300      	movs	r3, #0
 80165a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	015a      	lsls	r2, r3, #5
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	4413      	add	r3, r2
 80165aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80165ae:	461a      	mov	r2, r3
 80165b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80165b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	3301      	adds	r3, #1
 80165ba:	613b      	str	r3, [r7, #16]
 80165bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165be:	693a      	ldr	r2, [r7, #16]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d3b7      	bcc.n	8016534 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165ca:	691b      	ldr	r3, [r3, #16]
 80165cc:	68fa      	ldr	r2, [r7, #12]
 80165ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80165d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80165d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2200      	movs	r2, #0
 80165dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80165e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80165e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d105      	bne.n	80165f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	699b      	ldr	r3, [r3, #24]
 80165f0:	f043 0210 	orr.w	r2, r3, #16
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	699a      	ldr	r2, [r3, #24]
 80165fc:	4b0f      	ldr	r3, [pc, #60]	@ (801663c <USB_DevInit+0x2c4>)
 80165fe:	4313      	orrs	r3, r2
 8016600:	687a      	ldr	r2, [r7, #4]
 8016602:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8016604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016606:	2b00      	cmp	r3, #0
 8016608:	d005      	beq.n	8016616 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	699b      	ldr	r3, [r3, #24]
 801660e:	f043 0208 	orr.w	r2, r3, #8
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8016616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016618:	2b01      	cmp	r3, #1
 801661a:	d107      	bne.n	801662c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	699b      	ldr	r3, [r3, #24]
 8016620:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016624:	f043 0304 	orr.w	r3, r3, #4
 8016628:	687a      	ldr	r2, [r7, #4]
 801662a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801662c:	7dfb      	ldrb	r3, [r7, #23]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3718      	adds	r7, #24
 8016632:	46bd      	mov	sp, r7
 8016634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016638:	b004      	add	sp, #16
 801663a:	4770      	bx	lr
 801663c:	803c3800 	.word	0x803c3800

08016640 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8016640:	b480      	push	{r7}
 8016642:	b085      	sub	sp, #20
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801664a:	2300      	movs	r3, #0
 801664c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	3301      	adds	r3, #1
 8016652:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	4a13      	ldr	r2, [pc, #76]	@ (80166a4 <USB_FlushTxFifo+0x64>)
 8016658:	4293      	cmp	r3, r2
 801665a:	d901      	bls.n	8016660 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801665c:	2303      	movs	r3, #3
 801665e:	e01b      	b.n	8016698 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	691b      	ldr	r3, [r3, #16]
 8016664:	2b00      	cmp	r3, #0
 8016666:	daf2      	bge.n	801664e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8016668:	2300      	movs	r3, #0
 801666a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	019b      	lsls	r3, r3, #6
 8016670:	f043 0220 	orr.w	r2, r3, #32
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	3301      	adds	r3, #1
 801667c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	4a08      	ldr	r2, [pc, #32]	@ (80166a4 <USB_FlushTxFifo+0x64>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d901      	bls.n	801668a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8016686:	2303      	movs	r3, #3
 8016688:	e006      	b.n	8016698 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	691b      	ldr	r3, [r3, #16]
 801668e:	f003 0320 	and.w	r3, r3, #32
 8016692:	2b20      	cmp	r3, #32
 8016694:	d0f0      	beq.n	8016678 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8016696:	2300      	movs	r3, #0
}
 8016698:	4618      	mov	r0, r3
 801669a:	3714      	adds	r7, #20
 801669c:	46bd      	mov	sp, r7
 801669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a2:	4770      	bx	lr
 80166a4:	00030d40 	.word	0x00030d40

080166a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80166a8:	b480      	push	{r7}
 80166aa:	b085      	sub	sp, #20
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80166b0:	2300      	movs	r3, #0
 80166b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	3301      	adds	r3, #1
 80166b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	4a11      	ldr	r2, [pc, #68]	@ (8016704 <USB_FlushRxFifo+0x5c>)
 80166be:	4293      	cmp	r3, r2
 80166c0:	d901      	bls.n	80166c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80166c2:	2303      	movs	r3, #3
 80166c4:	e018      	b.n	80166f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	691b      	ldr	r3, [r3, #16]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	daf2      	bge.n	80166b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80166ce:	2300      	movs	r3, #0
 80166d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2210      	movs	r2, #16
 80166d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	3301      	adds	r3, #1
 80166dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	4a08      	ldr	r2, [pc, #32]	@ (8016704 <USB_FlushRxFifo+0x5c>)
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d901      	bls.n	80166ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80166e6:	2303      	movs	r3, #3
 80166e8:	e006      	b.n	80166f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	691b      	ldr	r3, [r3, #16]
 80166ee:	f003 0310 	and.w	r3, r3, #16
 80166f2:	2b10      	cmp	r3, #16
 80166f4:	d0f0      	beq.n	80166d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80166f6:	2300      	movs	r3, #0
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3714      	adds	r7, #20
 80166fc:	46bd      	mov	sp, r7
 80166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016702:	4770      	bx	lr
 8016704:	00030d40 	.word	0x00030d40

08016708 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016708:	b480      	push	{r7}
 801670a:	b085      	sub	sp, #20
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	460b      	mov	r3, r1
 8016712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	78fb      	ldrb	r3, [r7, #3]
 8016722:	68f9      	ldr	r1, [r7, #12]
 8016724:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016728:	4313      	orrs	r3, r2
 801672a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801672c:	2300      	movs	r3, #0
}
 801672e:	4618      	mov	r0, r3
 8016730:	3714      	adds	r7, #20
 8016732:	46bd      	mov	sp, r7
 8016734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016738:	4770      	bx	lr

0801673a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801673a:	b480      	push	{r7}
 801673c:	b087      	sub	sp, #28
 801673e:	af00      	add	r7, sp, #0
 8016740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801674c:	689b      	ldr	r3, [r3, #8]
 801674e:	f003 0306 	and.w	r3, r3, #6
 8016752:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d102      	bne.n	8016760 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801675a:	2300      	movs	r3, #0
 801675c:	75fb      	strb	r3, [r7, #23]
 801675e:	e00a      	b.n	8016776 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	2b02      	cmp	r3, #2
 8016764:	d002      	beq.n	801676c <USB_GetDevSpeed+0x32>
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	2b06      	cmp	r3, #6
 801676a:	d102      	bne.n	8016772 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801676c:	2302      	movs	r3, #2
 801676e:	75fb      	strb	r3, [r7, #23]
 8016770:	e001      	b.n	8016776 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8016772:	230f      	movs	r3, #15
 8016774:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016776:	7dfb      	ldrb	r3, [r7, #23]
}
 8016778:	4618      	mov	r0, r3
 801677a:	371c      	adds	r7, #28
 801677c:	46bd      	mov	sp, r7
 801677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016782:	4770      	bx	lr

08016784 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016784:	b480      	push	{r7}
 8016786:	b085      	sub	sp, #20
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
 801678c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	781b      	ldrb	r3, [r3, #0]
 8016796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	785b      	ldrb	r3, [r3, #1]
 801679c:	2b01      	cmp	r3, #1
 801679e:	d13a      	bne.n	8016816 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80167a6:	69da      	ldr	r2, [r3, #28]
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	f003 030f 	and.w	r3, r3, #15
 80167b0:	2101      	movs	r1, #1
 80167b2:	fa01 f303 	lsl.w	r3, r1, r3
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	68f9      	ldr	r1, [r7, #12]
 80167ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80167be:	4313      	orrs	r3, r2
 80167c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	015a      	lsls	r2, r3, #5
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	4413      	add	r3, r2
 80167ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d155      	bne.n	8016884 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	015a      	lsls	r2, r3, #5
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	4413      	add	r3, r2
 80167e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	68db      	ldr	r3, [r3, #12]
 80167ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	791b      	ldrb	r3, [r3, #4]
 80167f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80167f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	059b      	lsls	r3, r3, #22
 80167fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80167fc:	4313      	orrs	r3, r2
 80167fe:	68ba      	ldr	r2, [r7, #8]
 8016800:	0151      	lsls	r1, r2, #5
 8016802:	68fa      	ldr	r2, [r7, #12]
 8016804:	440a      	add	r2, r1
 8016806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801680a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801680e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016812:	6013      	str	r3, [r2, #0]
 8016814:	e036      	b.n	8016884 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801681c:	69da      	ldr	r2, [r3, #28]
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	781b      	ldrb	r3, [r3, #0]
 8016822:	f003 030f 	and.w	r3, r3, #15
 8016826:	2101      	movs	r1, #1
 8016828:	fa01 f303 	lsl.w	r3, r1, r3
 801682c:	041b      	lsls	r3, r3, #16
 801682e:	68f9      	ldr	r1, [r7, #12]
 8016830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016834:	4313      	orrs	r3, r2
 8016836:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	015a      	lsls	r2, r3, #5
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	4413      	add	r3, r2
 8016840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801684a:	2b00      	cmp	r3, #0
 801684c:	d11a      	bne.n	8016884 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	015a      	lsls	r2, r3, #5
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	4413      	add	r3, r2
 8016856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	791b      	ldrb	r3, [r3, #4]
 8016868:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801686a:	430b      	orrs	r3, r1
 801686c:	4313      	orrs	r3, r2
 801686e:	68ba      	ldr	r2, [r7, #8]
 8016870:	0151      	lsls	r1, r2, #5
 8016872:	68fa      	ldr	r2, [r7, #12]
 8016874:	440a      	add	r2, r1
 8016876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801687a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801687e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016882:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016884:	2300      	movs	r3, #0
}
 8016886:	4618      	mov	r0, r3
 8016888:	3714      	adds	r7, #20
 801688a:	46bd      	mov	sp, r7
 801688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016890:	4770      	bx	lr
	...

08016894 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016894:	b480      	push	{r7}
 8016896:	b085      	sub	sp, #20
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	785b      	ldrb	r3, [r3, #1]
 80168ac:	2b01      	cmp	r3, #1
 80168ae:	d161      	bne.n	8016974 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	015a      	lsls	r2, r3, #5
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	4413      	add	r3, r2
 80168b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80168c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80168c6:	d11f      	bne.n	8016908 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	015a      	lsls	r2, r3, #5
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	4413      	add	r3, r2
 80168d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	68ba      	ldr	r2, [r7, #8]
 80168d8:	0151      	lsls	r1, r2, #5
 80168da:	68fa      	ldr	r2, [r7, #12]
 80168dc:	440a      	add	r2, r1
 80168de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80168e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80168e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	015a      	lsls	r2, r3, #5
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	4413      	add	r3, r2
 80168f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	68ba      	ldr	r2, [r7, #8]
 80168f8:	0151      	lsls	r1, r2, #5
 80168fa:	68fa      	ldr	r2, [r7, #12]
 80168fc:	440a      	add	r2, r1
 80168fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016902:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016906:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801690e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	f003 030f 	and.w	r3, r3, #15
 8016918:	2101      	movs	r1, #1
 801691a:	fa01 f303 	lsl.w	r3, r1, r3
 801691e:	b29b      	uxth	r3, r3
 8016920:	43db      	mvns	r3, r3
 8016922:	68f9      	ldr	r1, [r7, #12]
 8016924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016928:	4013      	ands	r3, r2
 801692a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016932:	69da      	ldr	r2, [r3, #28]
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	f003 030f 	and.w	r3, r3, #15
 801693c:	2101      	movs	r1, #1
 801693e:	fa01 f303 	lsl.w	r3, r1, r3
 8016942:	b29b      	uxth	r3, r3
 8016944:	43db      	mvns	r3, r3
 8016946:	68f9      	ldr	r1, [r7, #12]
 8016948:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801694c:	4013      	ands	r3, r2
 801694e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8016950:	68bb      	ldr	r3, [r7, #8]
 8016952:	015a      	lsls	r2, r3, #5
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	4413      	add	r3, r2
 8016958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801695c:	681a      	ldr	r2, [r3, #0]
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	0159      	lsls	r1, r3, #5
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	440b      	add	r3, r1
 8016966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801696a:	4619      	mov	r1, r3
 801696c:	4b35      	ldr	r3, [pc, #212]	@ (8016a44 <USB_DeactivateEndpoint+0x1b0>)
 801696e:	4013      	ands	r3, r2
 8016970:	600b      	str	r3, [r1, #0]
 8016972:	e060      	b.n	8016a36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	015a      	lsls	r2, r3, #5
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	4413      	add	r3, r2
 801697c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801698a:	d11f      	bne.n	80169cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	015a      	lsls	r2, r3, #5
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	4413      	add	r3, r2
 8016994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	68ba      	ldr	r2, [r7, #8]
 801699c:	0151      	lsls	r1, r2, #5
 801699e:	68fa      	ldr	r2, [r7, #12]
 80169a0:	440a      	add	r2, r1
 80169a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80169a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80169aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	015a      	lsls	r2, r3, #5
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	4413      	add	r3, r2
 80169b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	68ba      	ldr	r2, [r7, #8]
 80169bc:	0151      	lsls	r1, r2, #5
 80169be:	68fa      	ldr	r2, [r7, #12]
 80169c0:	440a      	add	r2, r1
 80169c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80169c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80169ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80169d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	f003 030f 	and.w	r3, r3, #15
 80169dc:	2101      	movs	r1, #1
 80169de:	fa01 f303 	lsl.w	r3, r1, r3
 80169e2:	041b      	lsls	r3, r3, #16
 80169e4:	43db      	mvns	r3, r3
 80169e6:	68f9      	ldr	r1, [r7, #12]
 80169e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80169ec:	4013      	ands	r3, r2
 80169ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80169f6:	69da      	ldr	r2, [r3, #28]
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	781b      	ldrb	r3, [r3, #0]
 80169fc:	f003 030f 	and.w	r3, r3, #15
 8016a00:	2101      	movs	r1, #1
 8016a02:	fa01 f303 	lsl.w	r3, r1, r3
 8016a06:	041b      	lsls	r3, r3, #16
 8016a08:	43db      	mvns	r3, r3
 8016a0a:	68f9      	ldr	r1, [r7, #12]
 8016a0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016a10:	4013      	ands	r3, r2
 8016a12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	015a      	lsls	r2, r3, #5
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	4413      	add	r3, r2
 8016a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016a20:	681a      	ldr	r2, [r3, #0]
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	0159      	lsls	r1, r3, #5
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	440b      	add	r3, r1
 8016a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016a2e:	4619      	mov	r1, r3
 8016a30:	4b05      	ldr	r3, [pc, #20]	@ (8016a48 <USB_DeactivateEndpoint+0x1b4>)
 8016a32:	4013      	ands	r3, r2
 8016a34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016a36:	2300      	movs	r3, #0
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3714      	adds	r7, #20
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a42:	4770      	bx	lr
 8016a44:	ec337800 	.word	0xec337800
 8016a48:	eff37800 	.word	0xeff37800

08016a4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b08a      	sub	sp, #40	@ 0x28
 8016a50:	af02      	add	r7, sp, #8
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	60b9      	str	r1, [r7, #8]
 8016a56:	4613      	mov	r3, r2
 8016a58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	781b      	ldrb	r3, [r3, #0]
 8016a62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	785b      	ldrb	r3, [r3, #1]
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	f040 815c 	bne.w	8016d26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	699b      	ldr	r3, [r3, #24]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d132      	bne.n	8016adc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	015a      	lsls	r2, r3, #5
 8016a7a:	69fb      	ldr	r3, [r7, #28]
 8016a7c:	4413      	add	r3, r2
 8016a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016a82:	691b      	ldr	r3, [r3, #16]
 8016a84:	69ba      	ldr	r2, [r7, #24]
 8016a86:	0151      	lsls	r1, r2, #5
 8016a88:	69fa      	ldr	r2, [r7, #28]
 8016a8a:	440a      	add	r2, r1
 8016a8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016a90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8016a94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8016a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016a9a:	69bb      	ldr	r3, [r7, #24]
 8016a9c:	015a      	lsls	r2, r3, #5
 8016a9e:	69fb      	ldr	r3, [r7, #28]
 8016aa0:	4413      	add	r3, r2
 8016aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016aa6:	691b      	ldr	r3, [r3, #16]
 8016aa8:	69ba      	ldr	r2, [r7, #24]
 8016aaa:	0151      	lsls	r1, r2, #5
 8016aac:	69fa      	ldr	r2, [r7, #28]
 8016aae:	440a      	add	r2, r1
 8016ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016ab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016aba:	69bb      	ldr	r3, [r7, #24]
 8016abc:	015a      	lsls	r2, r3, #5
 8016abe:	69fb      	ldr	r3, [r7, #28]
 8016ac0:	4413      	add	r3, r2
 8016ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ac6:	691b      	ldr	r3, [r3, #16]
 8016ac8:	69ba      	ldr	r2, [r7, #24]
 8016aca:	0151      	lsls	r1, r2, #5
 8016acc:	69fa      	ldr	r2, [r7, #28]
 8016ace:	440a      	add	r2, r1
 8016ad0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016ad4:	0cdb      	lsrs	r3, r3, #19
 8016ad6:	04db      	lsls	r3, r3, #19
 8016ad8:	6113      	str	r3, [r2, #16]
 8016ada:	e074      	b.n	8016bc6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016adc:	69bb      	ldr	r3, [r7, #24]
 8016ade:	015a      	lsls	r2, r3, #5
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	4413      	add	r3, r2
 8016ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ae8:	691b      	ldr	r3, [r3, #16]
 8016aea:	69ba      	ldr	r2, [r7, #24]
 8016aec:	0151      	lsls	r1, r2, #5
 8016aee:	69fa      	ldr	r2, [r7, #28]
 8016af0:	440a      	add	r2, r1
 8016af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016af6:	0cdb      	lsrs	r3, r3, #19
 8016af8:	04db      	lsls	r3, r3, #19
 8016afa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016afc:	69bb      	ldr	r3, [r7, #24]
 8016afe:	015a      	lsls	r2, r3, #5
 8016b00:	69fb      	ldr	r3, [r7, #28]
 8016b02:	4413      	add	r3, r2
 8016b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b08:	691b      	ldr	r3, [r3, #16]
 8016b0a:	69ba      	ldr	r2, [r7, #24]
 8016b0c:	0151      	lsls	r1, r2, #5
 8016b0e:	69fa      	ldr	r2, [r7, #28]
 8016b10:	440a      	add	r2, r1
 8016b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016b16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8016b1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8016b1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016b20:	69bb      	ldr	r3, [r7, #24]
 8016b22:	015a      	lsls	r2, r3, #5
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	4413      	add	r3, r2
 8016b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b2c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8016b2e:	68bb      	ldr	r3, [r7, #8]
 8016b30:	6999      	ldr	r1, [r3, #24]
 8016b32:	68bb      	ldr	r3, [r7, #8]
 8016b34:	68db      	ldr	r3, [r3, #12]
 8016b36:	440b      	add	r3, r1
 8016b38:	1e59      	subs	r1, r3, #1
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	68db      	ldr	r3, [r3, #12]
 8016b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8016b42:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016b44:	4b9d      	ldr	r3, [pc, #628]	@ (8016dbc <USB_EPStartXfer+0x370>)
 8016b46:	400b      	ands	r3, r1
 8016b48:	69b9      	ldr	r1, [r7, #24]
 8016b4a:	0148      	lsls	r0, r1, #5
 8016b4c:	69f9      	ldr	r1, [r7, #28]
 8016b4e:	4401      	add	r1, r0
 8016b50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016b54:	4313      	orrs	r3, r2
 8016b56:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016b58:	69bb      	ldr	r3, [r7, #24]
 8016b5a:	015a      	lsls	r2, r3, #5
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	4413      	add	r3, r2
 8016b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b64:	691a      	ldr	r2, [r3, #16]
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	699b      	ldr	r3, [r3, #24]
 8016b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016b6e:	69b9      	ldr	r1, [r7, #24]
 8016b70:	0148      	lsls	r0, r1, #5
 8016b72:	69f9      	ldr	r1, [r7, #28]
 8016b74:	4401      	add	r1, r0
 8016b76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016b7a:	4313      	orrs	r3, r2
 8016b7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	791b      	ldrb	r3, [r3, #4]
 8016b82:	2b01      	cmp	r3, #1
 8016b84:	d11f      	bne.n	8016bc6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	015a      	lsls	r2, r3, #5
 8016b8a:	69fb      	ldr	r3, [r7, #28]
 8016b8c:	4413      	add	r3, r2
 8016b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b92:	691b      	ldr	r3, [r3, #16]
 8016b94:	69ba      	ldr	r2, [r7, #24]
 8016b96:	0151      	lsls	r1, r2, #5
 8016b98:	69fa      	ldr	r2, [r7, #28]
 8016b9a:	440a      	add	r2, r1
 8016b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016ba0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8016ba4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	015a      	lsls	r2, r3, #5
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	4413      	add	r3, r2
 8016bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016bb2:	691b      	ldr	r3, [r3, #16]
 8016bb4:	69ba      	ldr	r2, [r7, #24]
 8016bb6:	0151      	lsls	r1, r2, #5
 8016bb8:	69fa      	ldr	r2, [r7, #28]
 8016bba:	440a      	add	r2, r1
 8016bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016bc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016bc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8016bc6:	79fb      	ldrb	r3, [r7, #7]
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d14b      	bne.n	8016c64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016bcc:	68bb      	ldr	r3, [r7, #8]
 8016bce:	695b      	ldr	r3, [r3, #20]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d009      	beq.n	8016be8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8016bd4:	69bb      	ldr	r3, [r7, #24]
 8016bd6:	015a      	lsls	r2, r3, #5
 8016bd8:	69fb      	ldr	r3, [r7, #28]
 8016bda:	4413      	add	r3, r2
 8016bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016be0:	461a      	mov	r2, r3
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	695b      	ldr	r3, [r3, #20]
 8016be6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	791b      	ldrb	r3, [r3, #4]
 8016bec:	2b01      	cmp	r3, #1
 8016bee:	d128      	bne.n	8016c42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016bf6:	689b      	ldr	r3, [r3, #8]
 8016bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d110      	bne.n	8016c22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016c00:	69bb      	ldr	r3, [r7, #24]
 8016c02:	015a      	lsls	r2, r3, #5
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	4413      	add	r3, r2
 8016c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	69ba      	ldr	r2, [r7, #24]
 8016c10:	0151      	lsls	r1, r2, #5
 8016c12:	69fa      	ldr	r2, [r7, #28]
 8016c14:	440a      	add	r2, r1
 8016c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016c1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016c1e:	6013      	str	r3, [r2, #0]
 8016c20:	e00f      	b.n	8016c42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016c22:	69bb      	ldr	r3, [r7, #24]
 8016c24:	015a      	lsls	r2, r3, #5
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	4413      	add	r3, r2
 8016c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	69ba      	ldr	r2, [r7, #24]
 8016c32:	0151      	lsls	r1, r2, #5
 8016c34:	69fa      	ldr	r2, [r7, #28]
 8016c36:	440a      	add	r2, r1
 8016c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016c40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016c42:	69bb      	ldr	r3, [r7, #24]
 8016c44:	015a      	lsls	r2, r3, #5
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	4413      	add	r3, r2
 8016c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	69ba      	ldr	r2, [r7, #24]
 8016c52:	0151      	lsls	r1, r2, #5
 8016c54:	69fa      	ldr	r2, [r7, #28]
 8016c56:	440a      	add	r2, r1
 8016c58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016c5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016c60:	6013      	str	r3, [r2, #0]
 8016c62:	e133      	b.n	8016ecc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016c64:	69bb      	ldr	r3, [r7, #24]
 8016c66:	015a      	lsls	r2, r3, #5
 8016c68:	69fb      	ldr	r3, [r7, #28]
 8016c6a:	4413      	add	r3, r2
 8016c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	69ba      	ldr	r2, [r7, #24]
 8016c74:	0151      	lsls	r1, r2, #5
 8016c76:	69fa      	ldr	r2, [r7, #28]
 8016c78:	440a      	add	r2, r1
 8016c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016c7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016c82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	791b      	ldrb	r3, [r3, #4]
 8016c88:	2b01      	cmp	r3, #1
 8016c8a:	d015      	beq.n	8016cb8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8016c8c:	68bb      	ldr	r3, [r7, #8]
 8016c8e:	699b      	ldr	r3, [r3, #24]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	f000 811b 	beq.w	8016ecc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016c96:	69fb      	ldr	r3, [r7, #28]
 8016c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	f003 030f 	and.w	r3, r3, #15
 8016ca6:	2101      	movs	r1, #1
 8016ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8016cac:	69f9      	ldr	r1, [r7, #28]
 8016cae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016cb2:	4313      	orrs	r3, r2
 8016cb4:	634b      	str	r3, [r1, #52]	@ 0x34
 8016cb6:	e109      	b.n	8016ecc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016cbe:	689b      	ldr	r3, [r3, #8]
 8016cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d110      	bne.n	8016cea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016cc8:	69bb      	ldr	r3, [r7, #24]
 8016cca:	015a      	lsls	r2, r3, #5
 8016ccc:	69fb      	ldr	r3, [r7, #28]
 8016cce:	4413      	add	r3, r2
 8016cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	69ba      	ldr	r2, [r7, #24]
 8016cd8:	0151      	lsls	r1, r2, #5
 8016cda:	69fa      	ldr	r2, [r7, #28]
 8016cdc:	440a      	add	r2, r1
 8016cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016ce2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016ce6:	6013      	str	r3, [r2, #0]
 8016ce8:	e00f      	b.n	8016d0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016cea:	69bb      	ldr	r3, [r7, #24]
 8016cec:	015a      	lsls	r2, r3, #5
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	4413      	add	r3, r2
 8016cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	69ba      	ldr	r2, [r7, #24]
 8016cfa:	0151      	lsls	r1, r2, #5
 8016cfc:	69fa      	ldr	r2, [r7, #28]
 8016cfe:	440a      	add	r2, r1
 8016d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016d08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	6919      	ldr	r1, [r3, #16]
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	781a      	ldrb	r2, [r3, #0]
 8016d12:	68bb      	ldr	r3, [r7, #8]
 8016d14:	699b      	ldr	r3, [r3, #24]
 8016d16:	b298      	uxth	r0, r3
 8016d18:	79fb      	ldrb	r3, [r7, #7]
 8016d1a:	9300      	str	r3, [sp, #0]
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	68f8      	ldr	r0, [r7, #12]
 8016d20:	f000 fade 	bl	80172e0 <USB_WritePacket>
 8016d24:	e0d2      	b.n	8016ecc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8016d26:	69bb      	ldr	r3, [r7, #24]
 8016d28:	015a      	lsls	r2, r3, #5
 8016d2a:	69fb      	ldr	r3, [r7, #28]
 8016d2c:	4413      	add	r3, r2
 8016d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d32:	691b      	ldr	r3, [r3, #16]
 8016d34:	69ba      	ldr	r2, [r7, #24]
 8016d36:	0151      	lsls	r1, r2, #5
 8016d38:	69fa      	ldr	r2, [r7, #28]
 8016d3a:	440a      	add	r2, r1
 8016d3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016d40:	0cdb      	lsrs	r3, r3, #19
 8016d42:	04db      	lsls	r3, r3, #19
 8016d44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	015a      	lsls	r2, r3, #5
 8016d4a:	69fb      	ldr	r3, [r7, #28]
 8016d4c:	4413      	add	r3, r2
 8016d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d52:	691b      	ldr	r3, [r3, #16]
 8016d54:	69ba      	ldr	r2, [r7, #24]
 8016d56:	0151      	lsls	r1, r2, #5
 8016d58:	69fa      	ldr	r2, [r7, #28]
 8016d5a:	440a      	add	r2, r1
 8016d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016d60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8016d64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8016d68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8016d6a:	68bb      	ldr	r3, [r7, #8]
 8016d6c:	699b      	ldr	r3, [r3, #24]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d126      	bne.n	8016dc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	015a      	lsls	r2, r3, #5
 8016d76:	69fb      	ldr	r3, [r7, #28]
 8016d78:	4413      	add	r3, r2
 8016d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016d7e:	691a      	ldr	r2, [r3, #16]
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	68db      	ldr	r3, [r3, #12]
 8016d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016d88:	69b9      	ldr	r1, [r7, #24]
 8016d8a:	0148      	lsls	r0, r1, #5
 8016d8c:	69f9      	ldr	r1, [r7, #28]
 8016d8e:	4401      	add	r1, r0
 8016d90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016d94:	4313      	orrs	r3, r2
 8016d96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016d98:	69bb      	ldr	r3, [r7, #24]
 8016d9a:	015a      	lsls	r2, r3, #5
 8016d9c:	69fb      	ldr	r3, [r7, #28]
 8016d9e:	4413      	add	r3, r2
 8016da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016da4:	691b      	ldr	r3, [r3, #16]
 8016da6:	69ba      	ldr	r2, [r7, #24]
 8016da8:	0151      	lsls	r1, r2, #5
 8016daa:	69fa      	ldr	r2, [r7, #28]
 8016dac:	440a      	add	r2, r1
 8016dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016db2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016db6:	6113      	str	r3, [r2, #16]
 8016db8:	e03a      	b.n	8016e30 <USB_EPStartXfer+0x3e4>
 8016dba:	bf00      	nop
 8016dbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	699a      	ldr	r2, [r3, #24]
 8016dc4:	68bb      	ldr	r3, [r7, #8]
 8016dc6:	68db      	ldr	r3, [r3, #12]
 8016dc8:	4413      	add	r3, r2
 8016dca:	1e5a      	subs	r2, r3, #1
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	68db      	ldr	r3, [r3, #12]
 8016dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8016dd4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	68db      	ldr	r3, [r3, #12]
 8016dda:	8afa      	ldrh	r2, [r7, #22]
 8016ddc:	fb03 f202 	mul.w	r2, r3, r2
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8016de4:	69bb      	ldr	r3, [r7, #24]
 8016de6:	015a      	lsls	r2, r3, #5
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	4413      	add	r3, r2
 8016dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016df0:	691a      	ldr	r2, [r3, #16]
 8016df2:	8afb      	ldrh	r3, [r7, #22]
 8016df4:	04d9      	lsls	r1, r3, #19
 8016df6:	4b38      	ldr	r3, [pc, #224]	@ (8016ed8 <USB_EPStartXfer+0x48c>)
 8016df8:	400b      	ands	r3, r1
 8016dfa:	69b9      	ldr	r1, [r7, #24]
 8016dfc:	0148      	lsls	r0, r1, #5
 8016dfe:	69f9      	ldr	r1, [r7, #28]
 8016e00:	4401      	add	r1, r0
 8016e02:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016e06:	4313      	orrs	r3, r2
 8016e08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8016e0a:	69bb      	ldr	r3, [r7, #24]
 8016e0c:	015a      	lsls	r2, r3, #5
 8016e0e:	69fb      	ldr	r3, [r7, #28]
 8016e10:	4413      	add	r3, r2
 8016e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016e16:	691a      	ldr	r2, [r3, #16]
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	69db      	ldr	r3, [r3, #28]
 8016e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016e20:	69b9      	ldr	r1, [r7, #24]
 8016e22:	0148      	lsls	r0, r1, #5
 8016e24:	69f9      	ldr	r1, [r7, #28]
 8016e26:	4401      	add	r1, r0
 8016e28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016e2c:	4313      	orrs	r3, r2
 8016e2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016e30:	79fb      	ldrb	r3, [r7, #7]
 8016e32:	2b01      	cmp	r3, #1
 8016e34:	d10d      	bne.n	8016e52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	691b      	ldr	r3, [r3, #16]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d009      	beq.n	8016e52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	6919      	ldr	r1, [r3, #16]
 8016e42:	69bb      	ldr	r3, [r7, #24]
 8016e44:	015a      	lsls	r2, r3, #5
 8016e46:	69fb      	ldr	r3, [r7, #28]
 8016e48:	4413      	add	r3, r2
 8016e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016e4e:	460a      	mov	r2, r1
 8016e50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8016e52:	68bb      	ldr	r3, [r7, #8]
 8016e54:	791b      	ldrb	r3, [r3, #4]
 8016e56:	2b01      	cmp	r3, #1
 8016e58:	d128      	bne.n	8016eac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016e5a:	69fb      	ldr	r3, [r7, #28]
 8016e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016e60:	689b      	ldr	r3, [r3, #8]
 8016e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d110      	bne.n	8016e8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8016e6a:	69bb      	ldr	r3, [r7, #24]
 8016e6c:	015a      	lsls	r2, r3, #5
 8016e6e:	69fb      	ldr	r3, [r7, #28]
 8016e70:	4413      	add	r3, r2
 8016e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	69ba      	ldr	r2, [r7, #24]
 8016e7a:	0151      	lsls	r1, r2, #5
 8016e7c:	69fa      	ldr	r2, [r7, #28]
 8016e7e:	440a      	add	r2, r1
 8016e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016e84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016e88:	6013      	str	r3, [r2, #0]
 8016e8a:	e00f      	b.n	8016eac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8016e8c:	69bb      	ldr	r3, [r7, #24]
 8016e8e:	015a      	lsls	r2, r3, #5
 8016e90:	69fb      	ldr	r3, [r7, #28]
 8016e92:	4413      	add	r3, r2
 8016e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	69ba      	ldr	r2, [r7, #24]
 8016e9c:	0151      	lsls	r1, r2, #5
 8016e9e:	69fa      	ldr	r2, [r7, #28]
 8016ea0:	440a      	add	r2, r1
 8016ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016eaa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8016eac:	69bb      	ldr	r3, [r7, #24]
 8016eae:	015a      	lsls	r2, r3, #5
 8016eb0:	69fb      	ldr	r3, [r7, #28]
 8016eb2:	4413      	add	r3, r2
 8016eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	69ba      	ldr	r2, [r7, #24]
 8016ebc:	0151      	lsls	r1, r2, #5
 8016ebe:	69fa      	ldr	r2, [r7, #28]
 8016ec0:	440a      	add	r2, r1
 8016ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016ec6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016eca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016ecc:	2300      	movs	r3, #0
}
 8016ece:	4618      	mov	r0, r3
 8016ed0:	3720      	adds	r7, #32
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}
 8016ed6:	bf00      	nop
 8016ed8:	1ff80000 	.word	0x1ff80000

08016edc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016edc:	b480      	push	{r7}
 8016ede:	b087      	sub	sp, #28
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	785b      	ldrb	r3, [r3, #1]
 8016ef8:	2b01      	cmp	r3, #1
 8016efa:	f040 80ce 	bne.w	801709a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016efe:	68bb      	ldr	r3, [r7, #8]
 8016f00:	699b      	ldr	r3, [r3, #24]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d132      	bne.n	8016f6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	015a      	lsls	r2, r3, #5
 8016f0a:	697b      	ldr	r3, [r7, #20]
 8016f0c:	4413      	add	r3, r2
 8016f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f12:	691b      	ldr	r3, [r3, #16]
 8016f14:	693a      	ldr	r2, [r7, #16]
 8016f16:	0151      	lsls	r1, r2, #5
 8016f18:	697a      	ldr	r2, [r7, #20]
 8016f1a:	440a      	add	r2, r1
 8016f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f20:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8016f24:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8016f28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	015a      	lsls	r2, r3, #5
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	4413      	add	r3, r2
 8016f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f36:	691b      	ldr	r3, [r3, #16]
 8016f38:	693a      	ldr	r2, [r7, #16]
 8016f3a:	0151      	lsls	r1, r2, #5
 8016f3c:	697a      	ldr	r2, [r7, #20]
 8016f3e:	440a      	add	r2, r1
 8016f40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016f48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	015a      	lsls	r2, r3, #5
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	4413      	add	r3, r2
 8016f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f56:	691b      	ldr	r3, [r3, #16]
 8016f58:	693a      	ldr	r2, [r7, #16]
 8016f5a:	0151      	lsls	r1, r2, #5
 8016f5c:	697a      	ldr	r2, [r7, #20]
 8016f5e:	440a      	add	r2, r1
 8016f60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f64:	0cdb      	lsrs	r3, r3, #19
 8016f66:	04db      	lsls	r3, r3, #19
 8016f68:	6113      	str	r3, [r2, #16]
 8016f6a:	e04e      	b.n	801700a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016f6c:	693b      	ldr	r3, [r7, #16]
 8016f6e:	015a      	lsls	r2, r3, #5
 8016f70:	697b      	ldr	r3, [r7, #20]
 8016f72:	4413      	add	r3, r2
 8016f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f78:	691b      	ldr	r3, [r3, #16]
 8016f7a:	693a      	ldr	r2, [r7, #16]
 8016f7c:	0151      	lsls	r1, r2, #5
 8016f7e:	697a      	ldr	r2, [r7, #20]
 8016f80:	440a      	add	r2, r1
 8016f82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f86:	0cdb      	lsrs	r3, r3, #19
 8016f88:	04db      	lsls	r3, r3, #19
 8016f8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	015a      	lsls	r2, r3, #5
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	4413      	add	r3, r2
 8016f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016f98:	691b      	ldr	r3, [r3, #16]
 8016f9a:	693a      	ldr	r2, [r7, #16]
 8016f9c:	0151      	lsls	r1, r2, #5
 8016f9e:	697a      	ldr	r2, [r7, #20]
 8016fa0:	440a      	add	r2, r1
 8016fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016fa6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8016faa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8016fae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8016fb0:	68bb      	ldr	r3, [r7, #8]
 8016fb2:	699a      	ldr	r2, [r3, #24]
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	68db      	ldr	r3, [r3, #12]
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	d903      	bls.n	8016fc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	68da      	ldr	r2, [r3, #12]
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	015a      	lsls	r2, r3, #5
 8016fc8:	697b      	ldr	r3, [r7, #20]
 8016fca:	4413      	add	r3, r2
 8016fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016fd0:	691b      	ldr	r3, [r3, #16]
 8016fd2:	693a      	ldr	r2, [r7, #16]
 8016fd4:	0151      	lsls	r1, r2, #5
 8016fd6:	697a      	ldr	r2, [r7, #20]
 8016fd8:	440a      	add	r2, r1
 8016fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016fde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016fe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	015a      	lsls	r2, r3, #5
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	4413      	add	r3, r2
 8016fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ff0:	691a      	ldr	r2, [r3, #16]
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	699b      	ldr	r3, [r3, #24]
 8016ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016ffa:	6939      	ldr	r1, [r7, #16]
 8016ffc:	0148      	lsls	r0, r1, #5
 8016ffe:	6979      	ldr	r1, [r7, #20]
 8017000:	4401      	add	r1, r0
 8017002:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8017006:	4313      	orrs	r3, r2
 8017008:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801700a:	79fb      	ldrb	r3, [r7, #7]
 801700c:	2b01      	cmp	r3, #1
 801700e:	d11e      	bne.n	801704e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	695b      	ldr	r3, [r3, #20]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d009      	beq.n	801702c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8017018:	693b      	ldr	r3, [r7, #16]
 801701a:	015a      	lsls	r2, r3, #5
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	4413      	add	r3, r2
 8017020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017024:	461a      	mov	r2, r3
 8017026:	68bb      	ldr	r3, [r7, #8]
 8017028:	695b      	ldr	r3, [r3, #20]
 801702a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801702c:	693b      	ldr	r3, [r7, #16]
 801702e:	015a      	lsls	r2, r3, #5
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	4413      	add	r3, r2
 8017034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	693a      	ldr	r2, [r7, #16]
 801703c:	0151      	lsls	r1, r2, #5
 801703e:	697a      	ldr	r2, [r7, #20]
 8017040:	440a      	add	r2, r1
 8017042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017046:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801704a:	6013      	str	r3, [r2, #0]
 801704c:	e097      	b.n	801717e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	015a      	lsls	r2, r3, #5
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	4413      	add	r3, r2
 8017056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	693a      	ldr	r2, [r7, #16]
 801705e:	0151      	lsls	r1, r2, #5
 8017060:	697a      	ldr	r2, [r7, #20]
 8017062:	440a      	add	r2, r1
 8017064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017068:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801706c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	699b      	ldr	r3, [r3, #24]
 8017072:	2b00      	cmp	r3, #0
 8017074:	f000 8083 	beq.w	801717e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801707e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	f003 030f 	and.w	r3, r3, #15
 8017088:	2101      	movs	r1, #1
 801708a:	fa01 f303 	lsl.w	r3, r1, r3
 801708e:	6979      	ldr	r1, [r7, #20]
 8017090:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8017094:	4313      	orrs	r3, r2
 8017096:	634b      	str	r3, [r1, #52]	@ 0x34
 8017098:	e071      	b.n	801717e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801709a:	693b      	ldr	r3, [r7, #16]
 801709c:	015a      	lsls	r2, r3, #5
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	4413      	add	r3, r2
 80170a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80170a6:	691b      	ldr	r3, [r3, #16]
 80170a8:	693a      	ldr	r2, [r7, #16]
 80170aa:	0151      	lsls	r1, r2, #5
 80170ac:	697a      	ldr	r2, [r7, #20]
 80170ae:	440a      	add	r2, r1
 80170b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80170b4:	0cdb      	lsrs	r3, r3, #19
 80170b6:	04db      	lsls	r3, r3, #19
 80170b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	015a      	lsls	r2, r3, #5
 80170be:	697b      	ldr	r3, [r7, #20]
 80170c0:	4413      	add	r3, r2
 80170c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80170c6:	691b      	ldr	r3, [r3, #16]
 80170c8:	693a      	ldr	r2, [r7, #16]
 80170ca:	0151      	lsls	r1, r2, #5
 80170cc:	697a      	ldr	r2, [r7, #20]
 80170ce:	440a      	add	r2, r1
 80170d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80170d4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80170d8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80170dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	699b      	ldr	r3, [r3, #24]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d003      	beq.n	80170ee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	68da      	ldr	r2, [r3, #12]
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	68da      	ldr	r2, [r3, #12]
 80170f2:	68bb      	ldr	r3, [r7, #8]
 80170f4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80170f6:	693b      	ldr	r3, [r7, #16]
 80170f8:	015a      	lsls	r2, r3, #5
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	4413      	add	r3, r2
 80170fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017102:	691b      	ldr	r3, [r3, #16]
 8017104:	693a      	ldr	r2, [r7, #16]
 8017106:	0151      	lsls	r1, r2, #5
 8017108:	697a      	ldr	r2, [r7, #20]
 801710a:	440a      	add	r2, r1
 801710c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8017114:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	015a      	lsls	r2, r3, #5
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	4413      	add	r3, r2
 801711e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017122:	691a      	ldr	r2, [r3, #16]
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	69db      	ldr	r3, [r3, #28]
 8017128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801712c:	6939      	ldr	r1, [r7, #16]
 801712e:	0148      	lsls	r0, r1, #5
 8017130:	6979      	ldr	r1, [r7, #20]
 8017132:	4401      	add	r1, r0
 8017134:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8017138:	4313      	orrs	r3, r2
 801713a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801713c:	79fb      	ldrb	r3, [r7, #7]
 801713e:	2b01      	cmp	r3, #1
 8017140:	d10d      	bne.n	801715e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	691b      	ldr	r3, [r3, #16]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d009      	beq.n	801715e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	6919      	ldr	r1, [r3, #16]
 801714e:	693b      	ldr	r3, [r7, #16]
 8017150:	015a      	lsls	r2, r3, #5
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	4413      	add	r3, r2
 8017156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801715a:	460a      	mov	r2, r1
 801715c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801715e:	693b      	ldr	r3, [r7, #16]
 8017160:	015a      	lsls	r2, r3, #5
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	4413      	add	r3, r2
 8017166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	693a      	ldr	r2, [r7, #16]
 801716e:	0151      	lsls	r1, r2, #5
 8017170:	697a      	ldr	r2, [r7, #20]
 8017172:	440a      	add	r2, r1
 8017174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017178:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801717c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801717e:	2300      	movs	r3, #0
}
 8017180:	4618      	mov	r0, r3
 8017182:	371c      	adds	r7, #28
 8017184:	46bd      	mov	sp, r7
 8017186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718a:	4770      	bx	lr

0801718c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801718c:	b480      	push	{r7}
 801718e:	b087      	sub	sp, #28
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
 8017194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8017196:	2300      	movs	r3, #0
 8017198:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801719a:	2300      	movs	r3, #0
 801719c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	785b      	ldrb	r3, [r3, #1]
 80171a6:	2b01      	cmp	r3, #1
 80171a8:	d14a      	bne.n	8017240 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	015a      	lsls	r2, r3, #5
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	4413      	add	r3, r2
 80171b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80171be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80171c2:	f040 8086 	bne.w	80172d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	015a      	lsls	r2, r3, #5
 80171cc:	693b      	ldr	r3, [r7, #16]
 80171ce:	4413      	add	r3, r2
 80171d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	683a      	ldr	r2, [r7, #0]
 80171d8:	7812      	ldrb	r2, [r2, #0]
 80171da:	0151      	lsls	r1, r2, #5
 80171dc:	693a      	ldr	r2, [r7, #16]
 80171de:	440a      	add	r2, r1
 80171e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80171e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80171e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	781b      	ldrb	r3, [r3, #0]
 80171ee:	015a      	lsls	r2, r3, #5
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	4413      	add	r3, r2
 80171f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	683a      	ldr	r2, [r7, #0]
 80171fc:	7812      	ldrb	r2, [r2, #0]
 80171fe:	0151      	lsls	r1, r2, #5
 8017200:	693a      	ldr	r2, [r7, #16]
 8017202:	440a      	add	r2, r1
 8017204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8017208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801720c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	3301      	adds	r3, #1
 8017212:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	f242 7210 	movw	r2, #10000	@ 0x2710
 801721a:	4293      	cmp	r3, r2
 801721c:	d902      	bls.n	8017224 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801721e:	2301      	movs	r3, #1
 8017220:	75fb      	strb	r3, [r7, #23]
          break;
 8017222:	e056      	b.n	80172d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	781b      	ldrb	r3, [r3, #0]
 8017228:	015a      	lsls	r2, r3, #5
 801722a:	693b      	ldr	r3, [r7, #16]
 801722c:	4413      	add	r3, r2
 801722e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801723c:	d0e7      	beq.n	801720e <USB_EPStopXfer+0x82>
 801723e:	e048      	b.n	80172d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	015a      	lsls	r2, r3, #5
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	4413      	add	r3, r2
 801724a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8017254:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017258:	d13b      	bne.n	80172d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	015a      	lsls	r2, r3, #5
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	4413      	add	r3, r2
 8017264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	683a      	ldr	r2, [r7, #0]
 801726c:	7812      	ldrb	r2, [r2, #0]
 801726e:	0151      	lsls	r1, r2, #5
 8017270:	693a      	ldr	r2, [r7, #16]
 8017272:	440a      	add	r2, r1
 8017274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017278:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801727c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	781b      	ldrb	r3, [r3, #0]
 8017282:	015a      	lsls	r2, r3, #5
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	4413      	add	r3, r2
 8017288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	683a      	ldr	r2, [r7, #0]
 8017290:	7812      	ldrb	r2, [r2, #0]
 8017292:	0151      	lsls	r1, r2, #5
 8017294:	693a      	ldr	r2, [r7, #16]
 8017296:	440a      	add	r2, r1
 8017298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801729c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80172a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	3301      	adds	r3, #1
 80172a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80172ae:	4293      	cmp	r3, r2
 80172b0:	d902      	bls.n	80172b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80172b2:	2301      	movs	r3, #1
 80172b4:	75fb      	strb	r3, [r7, #23]
          break;
 80172b6:	e00c      	b.n	80172d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	015a      	lsls	r2, r3, #5
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	4413      	add	r3, r2
 80172c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80172cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80172d0:	d0e7      	beq.n	80172a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80172d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	371c      	adds	r7, #28
 80172d8:	46bd      	mov	sp, r7
 80172da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172de:	4770      	bx	lr

080172e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80172e0:	b480      	push	{r7}
 80172e2:	b089      	sub	sp, #36	@ 0x24
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	4611      	mov	r1, r2
 80172ec:	461a      	mov	r2, r3
 80172ee:	460b      	mov	r3, r1
 80172f0:	71fb      	strb	r3, [r7, #7]
 80172f2:	4613      	mov	r3, r2
 80172f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80172fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017302:	2b00      	cmp	r3, #0
 8017304:	d123      	bne.n	801734e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8017306:	88bb      	ldrh	r3, [r7, #4]
 8017308:	3303      	adds	r3, #3
 801730a:	089b      	lsrs	r3, r3, #2
 801730c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801730e:	2300      	movs	r3, #0
 8017310:	61bb      	str	r3, [r7, #24]
 8017312:	e018      	b.n	8017346 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8017314:	79fb      	ldrb	r3, [r7, #7]
 8017316:	031a      	lsls	r2, r3, #12
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	4413      	add	r3, r2
 801731c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017320:	461a      	mov	r2, r3
 8017322:	69fb      	ldr	r3, [r7, #28]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	6013      	str	r3, [r2, #0]
      pSrc++;
 8017328:	69fb      	ldr	r3, [r7, #28]
 801732a:	3301      	adds	r3, #1
 801732c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801732e:	69fb      	ldr	r3, [r7, #28]
 8017330:	3301      	adds	r3, #1
 8017332:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017334:	69fb      	ldr	r3, [r7, #28]
 8017336:	3301      	adds	r3, #1
 8017338:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801733a:	69fb      	ldr	r3, [r7, #28]
 801733c:	3301      	adds	r3, #1
 801733e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8017340:	69bb      	ldr	r3, [r7, #24]
 8017342:	3301      	adds	r3, #1
 8017344:	61bb      	str	r3, [r7, #24]
 8017346:	69ba      	ldr	r2, [r7, #24]
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	429a      	cmp	r2, r3
 801734c:	d3e2      	bcc.n	8017314 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801734e:	2300      	movs	r3, #0
}
 8017350:	4618      	mov	r0, r3
 8017352:	3724      	adds	r7, #36	@ 0x24
 8017354:	46bd      	mov	sp, r7
 8017356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735a:	4770      	bx	lr

0801735c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801735c:	b480      	push	{r7}
 801735e:	b08b      	sub	sp, #44	@ 0x2c
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	4613      	mov	r3, r2
 8017368:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801736e:	68bb      	ldr	r3, [r7, #8]
 8017370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8017372:	88fb      	ldrh	r3, [r7, #6]
 8017374:	089b      	lsrs	r3, r3, #2
 8017376:	b29b      	uxth	r3, r3
 8017378:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801737a:	88fb      	ldrh	r3, [r7, #6]
 801737c:	f003 0303 	and.w	r3, r3, #3
 8017380:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8017382:	2300      	movs	r3, #0
 8017384:	623b      	str	r3, [r7, #32]
 8017386:	e014      	b.n	80173b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8017388:	69bb      	ldr	r3, [r7, #24]
 801738a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801738e:	681a      	ldr	r2, [r3, #0]
 8017390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017392:	601a      	str	r2, [r3, #0]
    pDest++;
 8017394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017396:	3301      	adds	r3, #1
 8017398:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801739c:	3301      	adds	r3, #1
 801739e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80173a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a2:	3301      	adds	r3, #1
 80173a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80173a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a8:	3301      	adds	r3, #1
 80173aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80173ac:	6a3b      	ldr	r3, [r7, #32]
 80173ae:	3301      	adds	r3, #1
 80173b0:	623b      	str	r3, [r7, #32]
 80173b2:	6a3a      	ldr	r2, [r7, #32]
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d3e6      	bcc.n	8017388 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80173ba:	8bfb      	ldrh	r3, [r7, #30]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d01e      	beq.n	80173fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80173c0:	2300      	movs	r3, #0
 80173c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80173ca:	461a      	mov	r2, r3
 80173cc:	f107 0310 	add.w	r3, r7, #16
 80173d0:	6812      	ldr	r2, [r2, #0]
 80173d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80173d4:	693a      	ldr	r2, [r7, #16]
 80173d6:	6a3b      	ldr	r3, [r7, #32]
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	00db      	lsls	r3, r3, #3
 80173dc:	fa22 f303 	lsr.w	r3, r2, r3
 80173e0:	b2da      	uxtb	r2, r3
 80173e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173e4:	701a      	strb	r2, [r3, #0]
      i++;
 80173e6:	6a3b      	ldr	r3, [r7, #32]
 80173e8:	3301      	adds	r3, #1
 80173ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80173ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ee:	3301      	adds	r3, #1
 80173f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80173f2:	8bfb      	ldrh	r3, [r7, #30]
 80173f4:	3b01      	subs	r3, #1
 80173f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80173f8:	8bfb      	ldrh	r3, [r7, #30]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d1ea      	bne.n	80173d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80173fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017400:	4618      	mov	r0, r3
 8017402:	372c      	adds	r7, #44	@ 0x2c
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr

0801740c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801740c:	b480      	push	{r7}
 801740e:	b085      	sub	sp, #20
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	785b      	ldrb	r3, [r3, #1]
 8017424:	2b01      	cmp	r3, #1
 8017426:	d12c      	bne.n	8017482 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	015a      	lsls	r2, r3, #5
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	4413      	add	r3, r2
 8017430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	2b00      	cmp	r3, #0
 8017438:	db12      	blt.n	8017460 <USB_EPSetStall+0x54>
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d00f      	beq.n	8017460 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	015a      	lsls	r2, r3, #5
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	4413      	add	r3, r2
 8017448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	68ba      	ldr	r2, [r7, #8]
 8017450:	0151      	lsls	r1, r2, #5
 8017452:	68fa      	ldr	r2, [r7, #12]
 8017454:	440a      	add	r2, r1
 8017456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801745a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801745e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	015a      	lsls	r2, r3, #5
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	4413      	add	r3, r2
 8017468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	68ba      	ldr	r2, [r7, #8]
 8017470:	0151      	lsls	r1, r2, #5
 8017472:	68fa      	ldr	r2, [r7, #12]
 8017474:	440a      	add	r2, r1
 8017476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801747a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801747e:	6013      	str	r3, [r2, #0]
 8017480:	e02b      	b.n	80174da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	015a      	lsls	r2, r3, #5
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	4413      	add	r3, r2
 801748a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	2b00      	cmp	r3, #0
 8017492:	db12      	blt.n	80174ba <USB_EPSetStall+0xae>
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d00f      	beq.n	80174ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	015a      	lsls	r2, r3, #5
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	4413      	add	r3, r2
 80174a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	68ba      	ldr	r2, [r7, #8]
 80174aa:	0151      	lsls	r1, r2, #5
 80174ac:	68fa      	ldr	r2, [r7, #12]
 80174ae:	440a      	add	r2, r1
 80174b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80174b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80174b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	015a      	lsls	r2, r3, #5
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	4413      	add	r3, r2
 80174c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	68ba      	ldr	r2, [r7, #8]
 80174ca:	0151      	lsls	r1, r2, #5
 80174cc:	68fa      	ldr	r2, [r7, #12]
 80174ce:	440a      	add	r2, r1
 80174d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80174d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80174d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80174da:	2300      	movs	r3, #0
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3714      	adds	r7, #20
 80174e0:	46bd      	mov	sp, r7
 80174e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e6:	4770      	bx	lr

080174e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80174e8:	b480      	push	{r7}
 80174ea:	b085      	sub	sp, #20
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	785b      	ldrb	r3, [r3, #1]
 8017500:	2b01      	cmp	r3, #1
 8017502:	d128      	bne.n	8017556 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	015a      	lsls	r2, r3, #5
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	4413      	add	r3, r2
 801750c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	68ba      	ldr	r2, [r7, #8]
 8017514:	0151      	lsls	r1, r2, #5
 8017516:	68fa      	ldr	r2, [r7, #12]
 8017518:	440a      	add	r2, r1
 801751a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801751e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017522:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	791b      	ldrb	r3, [r3, #4]
 8017528:	2b03      	cmp	r3, #3
 801752a:	d003      	beq.n	8017534 <USB_EPClearStall+0x4c>
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	791b      	ldrb	r3, [r3, #4]
 8017530:	2b02      	cmp	r3, #2
 8017532:	d138      	bne.n	80175a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	015a      	lsls	r2, r3, #5
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	4413      	add	r3, r2
 801753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	68ba      	ldr	r2, [r7, #8]
 8017544:	0151      	lsls	r1, r2, #5
 8017546:	68fa      	ldr	r2, [r7, #12]
 8017548:	440a      	add	r2, r1
 801754a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801754e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017552:	6013      	str	r3, [r2, #0]
 8017554:	e027      	b.n	80175a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8017556:	68bb      	ldr	r3, [r7, #8]
 8017558:	015a      	lsls	r2, r3, #5
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	4413      	add	r3, r2
 801755e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	68ba      	ldr	r2, [r7, #8]
 8017566:	0151      	lsls	r1, r2, #5
 8017568:	68fa      	ldr	r2, [r7, #12]
 801756a:	440a      	add	r2, r1
 801756c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017570:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017574:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	791b      	ldrb	r3, [r3, #4]
 801757a:	2b03      	cmp	r3, #3
 801757c:	d003      	beq.n	8017586 <USB_EPClearStall+0x9e>
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	791b      	ldrb	r3, [r3, #4]
 8017582:	2b02      	cmp	r3, #2
 8017584:	d10f      	bne.n	80175a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017586:	68bb      	ldr	r3, [r7, #8]
 8017588:	015a      	lsls	r2, r3, #5
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	4413      	add	r3, r2
 801758e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	68ba      	ldr	r2, [r7, #8]
 8017596:	0151      	lsls	r1, r2, #5
 8017598:	68fa      	ldr	r2, [r7, #12]
 801759a:	440a      	add	r2, r1
 801759c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80175a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80175a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80175a6:	2300      	movs	r3, #0
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3714      	adds	r7, #20
 80175ac:	46bd      	mov	sp, r7
 80175ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b2:	4770      	bx	lr

080175b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80175b4:	b480      	push	{r7}
 80175b6:	b085      	sub	sp, #20
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
 80175bc:	460b      	mov	r3, r1
 80175be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80175d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80175d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80175de:	681a      	ldr	r2, [r3, #0]
 80175e0:	78fb      	ldrb	r3, [r7, #3]
 80175e2:	011b      	lsls	r3, r3, #4
 80175e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80175e8:	68f9      	ldr	r1, [r7, #12]
 80175ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80175ee:	4313      	orrs	r3, r2
 80175f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80175f2:	2300      	movs	r3, #0
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3714      	adds	r7, #20
 80175f8:	46bd      	mov	sp, r7
 80175fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fe:	4770      	bx	lr

08017600 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017600:	b480      	push	{r7}
 8017602:	b085      	sub	sp, #20
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801761a:	f023 0303 	bic.w	r3, r3, #3
 801761e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	68fa      	ldr	r2, [r7, #12]
 801762a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801762e:	f023 0302 	bic.w	r3, r3, #2
 8017632:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017634:	2300      	movs	r3, #0
}
 8017636:	4618      	mov	r0, r3
 8017638:	3714      	adds	r7, #20
 801763a:	46bd      	mov	sp, r7
 801763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017640:	4770      	bx	lr

08017642 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017642:	b480      	push	{r7}
 8017644:	b085      	sub	sp, #20
 8017646:	af00      	add	r7, sp, #0
 8017648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	68fa      	ldr	r2, [r7, #12]
 8017658:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801765c:	f023 0303 	bic.w	r3, r3, #3
 8017660:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017668:	685b      	ldr	r3, [r3, #4]
 801766a:	68fa      	ldr	r2, [r7, #12]
 801766c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017670:	f043 0302 	orr.w	r3, r3, #2
 8017674:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017676:	2300      	movs	r3, #0
}
 8017678:	4618      	mov	r0, r3
 801767a:	3714      	adds	r7, #20
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8017684:	b480      	push	{r7}
 8017686:	b085      	sub	sp, #20
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	695b      	ldr	r3, [r3, #20]
 8017690:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	699b      	ldr	r3, [r3, #24]
 8017696:	68fa      	ldr	r2, [r7, #12]
 8017698:	4013      	ands	r3, r2
 801769a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801769c:	68fb      	ldr	r3, [r7, #12]
}
 801769e:	4618      	mov	r0, r3
 80176a0:	3714      	adds	r7, #20
 80176a2:	46bd      	mov	sp, r7
 80176a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a8:	4770      	bx	lr

080176aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80176aa:	b480      	push	{r7}
 80176ac:	b085      	sub	sp, #20
 80176ae:	af00      	add	r7, sp, #0
 80176b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80176bc:	699b      	ldr	r3, [r3, #24]
 80176be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80176c6:	69db      	ldr	r3, [r3, #28]
 80176c8:	68ba      	ldr	r2, [r7, #8]
 80176ca:	4013      	ands	r3, r2
 80176cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	0c1b      	lsrs	r3, r3, #16
}
 80176d2:	4618      	mov	r0, r3
 80176d4:	3714      	adds	r7, #20
 80176d6:	46bd      	mov	sp, r7
 80176d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176dc:	4770      	bx	lr

080176de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80176de:	b480      	push	{r7}
 80176e0:	b085      	sub	sp, #20
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80176f0:	699b      	ldr	r3, [r3, #24]
 80176f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80176fa:	69db      	ldr	r3, [r3, #28]
 80176fc:	68ba      	ldr	r2, [r7, #8]
 80176fe:	4013      	ands	r3, r2
 8017700:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017702:	68bb      	ldr	r3, [r7, #8]
 8017704:	b29b      	uxth	r3, r3
}
 8017706:	4618      	mov	r0, r3
 8017708:	3714      	adds	r7, #20
 801770a:	46bd      	mov	sp, r7
 801770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017710:	4770      	bx	lr

08017712 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017712:	b480      	push	{r7}
 8017714:	b085      	sub	sp, #20
 8017716:	af00      	add	r7, sp, #0
 8017718:	6078      	str	r0, [r7, #4]
 801771a:	460b      	mov	r3, r1
 801771c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017722:	78fb      	ldrb	r3, [r7, #3]
 8017724:	015a      	lsls	r2, r3, #5
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	4413      	add	r3, r2
 801772a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801772e:	689b      	ldr	r3, [r3, #8]
 8017730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017738:	695b      	ldr	r3, [r3, #20]
 801773a:	68ba      	ldr	r2, [r7, #8]
 801773c:	4013      	ands	r3, r2
 801773e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017740:	68bb      	ldr	r3, [r7, #8]
}
 8017742:	4618      	mov	r0, r3
 8017744:	3714      	adds	r7, #20
 8017746:	46bd      	mov	sp, r7
 8017748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774c:	4770      	bx	lr

0801774e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801774e:	b480      	push	{r7}
 8017750:	b087      	sub	sp, #28
 8017752:	af00      	add	r7, sp, #0
 8017754:	6078      	str	r0, [r7, #4]
 8017756:	460b      	mov	r3, r1
 8017758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801775e:	697b      	ldr	r3, [r7, #20]
 8017760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017764:	691b      	ldr	r3, [r3, #16]
 8017766:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801776e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017770:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8017772:	78fb      	ldrb	r3, [r7, #3]
 8017774:	f003 030f 	and.w	r3, r3, #15
 8017778:	68fa      	ldr	r2, [r7, #12]
 801777a:	fa22 f303 	lsr.w	r3, r2, r3
 801777e:	01db      	lsls	r3, r3, #7
 8017780:	b2db      	uxtb	r3, r3
 8017782:	693a      	ldr	r2, [r7, #16]
 8017784:	4313      	orrs	r3, r2
 8017786:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8017788:	78fb      	ldrb	r3, [r7, #3]
 801778a:	015a      	lsls	r2, r3, #5
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	4413      	add	r3, r2
 8017790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017794:	689b      	ldr	r3, [r3, #8]
 8017796:	693a      	ldr	r2, [r7, #16]
 8017798:	4013      	ands	r3, r2
 801779a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801779c:	68bb      	ldr	r3, [r7, #8]
}
 801779e:	4618      	mov	r0, r3
 80177a0:	371c      	adds	r7, #28
 80177a2:	46bd      	mov	sp, r7
 80177a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a8:	4770      	bx	lr

080177aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80177aa:	b480      	push	{r7}
 80177ac:	b083      	sub	sp, #12
 80177ae:	af00      	add	r7, sp, #0
 80177b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	695b      	ldr	r3, [r3, #20]
 80177b6:	f003 0301 	and.w	r3, r3, #1
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	370c      	adds	r7, #12
 80177be:	46bd      	mov	sp, r7
 80177c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c4:	4770      	bx	lr

080177c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80177c6:	b480      	push	{r7}
 80177c8:	b085      	sub	sp, #20
 80177ca:	af00      	add	r7, sp, #0
 80177cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	68fa      	ldr	r2, [r7, #12]
 80177dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80177e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80177e4:	f023 0307 	bic.w	r3, r3, #7
 80177e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	68fa      	ldr	r2, [r7, #12]
 80177f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80177f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80177fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80177fe:	2300      	movs	r3, #0
}
 8017800:	4618      	mov	r0, r3
 8017802:	3714      	adds	r7, #20
 8017804:	46bd      	mov	sp, r7
 8017806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780a:	4770      	bx	lr

0801780c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801780c:	b480      	push	{r7}
 801780e:	b087      	sub	sp, #28
 8017810:	af00      	add	r7, sp, #0
 8017812:	60f8      	str	r0, [r7, #12]
 8017814:	460b      	mov	r3, r1
 8017816:	607a      	str	r2, [r7, #4]
 8017818:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	333c      	adds	r3, #60	@ 0x3c
 8017822:	3304      	adds	r3, #4
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	4a26      	ldr	r2, [pc, #152]	@ (80178c4 <USB_EP0_OutStart+0xb8>)
 801782c:	4293      	cmp	r3, r2
 801782e:	d90a      	bls.n	8017846 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801783c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017840:	d101      	bne.n	8017846 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8017842:	2300      	movs	r3, #0
 8017844:	e037      	b.n	80178b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8017846:	697b      	ldr	r3, [r7, #20]
 8017848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801784c:	461a      	mov	r2, r3
 801784e:	2300      	movs	r3, #0
 8017850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017858:	691b      	ldr	r3, [r3, #16]
 801785a:	697a      	ldr	r2, [r7, #20]
 801785c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8017864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801786c:	691b      	ldr	r3, [r3, #16]
 801786e:	697a      	ldr	r2, [r7, #20]
 8017870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017874:	f043 0318 	orr.w	r3, r3, #24
 8017878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017880:	691b      	ldr	r3, [r3, #16]
 8017882:	697a      	ldr	r2, [r7, #20]
 8017884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017888:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801788c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801788e:	7afb      	ldrb	r3, [r7, #11]
 8017890:	2b01      	cmp	r3, #1
 8017892:	d10f      	bne.n	80178b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8017894:	697b      	ldr	r3, [r7, #20]
 8017896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801789a:	461a      	mov	r2, r3
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80178a0:	697b      	ldr	r3, [r7, #20]
 80178a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	697a      	ldr	r2, [r7, #20]
 80178aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80178ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80178b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80178b4:	2300      	movs	r3, #0
}
 80178b6:	4618      	mov	r0, r3
 80178b8:	371c      	adds	r7, #28
 80178ba:	46bd      	mov	sp, r7
 80178bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c0:	4770      	bx	lr
 80178c2:	bf00      	nop
 80178c4:	4f54300a 	.word	0x4f54300a

080178c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80178c8:	b480      	push	{r7}
 80178ca:	b085      	sub	sp, #20
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80178d0:	2300      	movs	r3, #0
 80178d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	3301      	adds	r3, #1
 80178d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	4a13      	ldr	r2, [pc, #76]	@ (801792c <USB_CoreReset+0x64>)
 80178de:	4293      	cmp	r3, r2
 80178e0:	d901      	bls.n	80178e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80178e2:	2303      	movs	r3, #3
 80178e4:	e01b      	b.n	801791e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	691b      	ldr	r3, [r3, #16]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	daf2      	bge.n	80178d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80178ee:	2300      	movs	r3, #0
 80178f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	691b      	ldr	r3, [r3, #16]
 80178f6:	f043 0201 	orr.w	r2, r3, #1
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	3301      	adds	r3, #1
 8017902:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	4a09      	ldr	r2, [pc, #36]	@ (801792c <USB_CoreReset+0x64>)
 8017908:	4293      	cmp	r3, r2
 801790a:	d901      	bls.n	8017910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801790c:	2303      	movs	r3, #3
 801790e:	e006      	b.n	801791e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	691b      	ldr	r3, [r3, #16]
 8017914:	f003 0301 	and.w	r3, r3, #1
 8017918:	2b01      	cmp	r3, #1
 801791a:	d0f0      	beq.n	80178fe <USB_CoreReset+0x36>

  return HAL_OK;
 801791c:	2300      	movs	r3, #0
}
 801791e:	4618      	mov	r0, r3
 8017920:	3714      	adds	r7, #20
 8017922:	46bd      	mov	sp, r7
 8017924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop
 801792c:	00030d40 	.word	0x00030d40

08017930 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b084      	sub	sp, #16
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
 8017938:	460b      	mov	r3, r1
 801793a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801793c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8017940:	f005 fd6a 	bl	801d418 <USBD_static_malloc>
 8017944:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d109      	bne.n	8017960 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	32b0      	adds	r2, #176	@ 0xb0
 8017956:	2100      	movs	r1, #0
 8017958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801795c:	2302      	movs	r3, #2
 801795e:	e0d4      	b.n	8017b0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8017960:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8017964:	2100      	movs	r1, #0
 8017966:	68f8      	ldr	r0, [r7, #12]
 8017968:	f005 fed3 	bl	801d712 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	32b0      	adds	r2, #176	@ 0xb0
 8017976:	68f9      	ldr	r1, [r7, #12]
 8017978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	32b0      	adds	r2, #176	@ 0xb0
 8017986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	7c1b      	ldrb	r3, [r3, #16]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d138      	bne.n	8017a0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017998:	4b5e      	ldr	r3, [pc, #376]	@ (8017b14 <USBD_CDC_Init+0x1e4>)
 801799a:	7819      	ldrb	r1, [r3, #0]
 801799c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80179a0:	2202      	movs	r2, #2
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f005 fc15 	bl	801d1d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80179a8:	4b5a      	ldr	r3, [pc, #360]	@ (8017b14 <USBD_CDC_Init+0x1e4>)
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	f003 020f 	and.w	r2, r3, #15
 80179b0:	6879      	ldr	r1, [r7, #4]
 80179b2:	4613      	mov	r3, r2
 80179b4:	009b      	lsls	r3, r3, #2
 80179b6:	4413      	add	r3, r2
 80179b8:	009b      	lsls	r3, r3, #2
 80179ba:	440b      	add	r3, r1
 80179bc:	3324      	adds	r3, #36	@ 0x24
 80179be:	2201      	movs	r2, #1
 80179c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80179c2:	4b55      	ldr	r3, [pc, #340]	@ (8017b18 <USBD_CDC_Init+0x1e8>)
 80179c4:	7819      	ldrb	r1, [r3, #0]
 80179c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80179ca:	2202      	movs	r2, #2
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f005 fc00 	bl	801d1d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80179d2:	4b51      	ldr	r3, [pc, #324]	@ (8017b18 <USBD_CDC_Init+0x1e8>)
 80179d4:	781b      	ldrb	r3, [r3, #0]
 80179d6:	f003 020f 	and.w	r2, r3, #15
 80179da:	6879      	ldr	r1, [r7, #4]
 80179dc:	4613      	mov	r3, r2
 80179de:	009b      	lsls	r3, r3, #2
 80179e0:	4413      	add	r3, r2
 80179e2:	009b      	lsls	r3, r3, #2
 80179e4:	440b      	add	r3, r1
 80179e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80179ea:	2201      	movs	r2, #1
 80179ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80179ee:	4b4b      	ldr	r3, [pc, #300]	@ (8017b1c <USBD_CDC_Init+0x1ec>)
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	f003 020f 	and.w	r2, r3, #15
 80179f6:	6879      	ldr	r1, [r7, #4]
 80179f8:	4613      	mov	r3, r2
 80179fa:	009b      	lsls	r3, r3, #2
 80179fc:	4413      	add	r3, r2
 80179fe:	009b      	lsls	r3, r3, #2
 8017a00:	440b      	add	r3, r1
 8017a02:	3326      	adds	r3, #38	@ 0x26
 8017a04:	2210      	movs	r2, #16
 8017a06:	801a      	strh	r2, [r3, #0]
 8017a08:	e035      	b.n	8017a76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017a0a:	4b42      	ldr	r3, [pc, #264]	@ (8017b14 <USBD_CDC_Init+0x1e4>)
 8017a0c:	7819      	ldrb	r1, [r3, #0]
 8017a0e:	2340      	movs	r3, #64	@ 0x40
 8017a10:	2202      	movs	r2, #2
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f005 fbdd 	bl	801d1d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017a18:	4b3e      	ldr	r3, [pc, #248]	@ (8017b14 <USBD_CDC_Init+0x1e4>)
 8017a1a:	781b      	ldrb	r3, [r3, #0]
 8017a1c:	f003 020f 	and.w	r2, r3, #15
 8017a20:	6879      	ldr	r1, [r7, #4]
 8017a22:	4613      	mov	r3, r2
 8017a24:	009b      	lsls	r3, r3, #2
 8017a26:	4413      	add	r3, r2
 8017a28:	009b      	lsls	r3, r3, #2
 8017a2a:	440b      	add	r3, r1
 8017a2c:	3324      	adds	r3, #36	@ 0x24
 8017a2e:	2201      	movs	r2, #1
 8017a30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017a32:	4b39      	ldr	r3, [pc, #228]	@ (8017b18 <USBD_CDC_Init+0x1e8>)
 8017a34:	7819      	ldrb	r1, [r3, #0]
 8017a36:	2340      	movs	r3, #64	@ 0x40
 8017a38:	2202      	movs	r2, #2
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f005 fbc9 	bl	801d1d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017a40:	4b35      	ldr	r3, [pc, #212]	@ (8017b18 <USBD_CDC_Init+0x1e8>)
 8017a42:	781b      	ldrb	r3, [r3, #0]
 8017a44:	f003 020f 	and.w	r2, r3, #15
 8017a48:	6879      	ldr	r1, [r7, #4]
 8017a4a:	4613      	mov	r3, r2
 8017a4c:	009b      	lsls	r3, r3, #2
 8017a4e:	4413      	add	r3, r2
 8017a50:	009b      	lsls	r3, r3, #2
 8017a52:	440b      	add	r3, r1
 8017a54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017a58:	2201      	movs	r2, #1
 8017a5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8017b1c <USBD_CDC_Init+0x1ec>)
 8017a5e:	781b      	ldrb	r3, [r3, #0]
 8017a60:	f003 020f 	and.w	r2, r3, #15
 8017a64:	6879      	ldr	r1, [r7, #4]
 8017a66:	4613      	mov	r3, r2
 8017a68:	009b      	lsls	r3, r3, #2
 8017a6a:	4413      	add	r3, r2
 8017a6c:	009b      	lsls	r3, r3, #2
 8017a6e:	440b      	add	r3, r1
 8017a70:	3326      	adds	r3, #38	@ 0x26
 8017a72:	2210      	movs	r2, #16
 8017a74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017a76:	4b29      	ldr	r3, [pc, #164]	@ (8017b1c <USBD_CDC_Init+0x1ec>)
 8017a78:	7819      	ldrb	r1, [r3, #0]
 8017a7a:	2308      	movs	r3, #8
 8017a7c:	2203      	movs	r2, #3
 8017a7e:	6878      	ldr	r0, [r7, #4]
 8017a80:	f005 fba7 	bl	801d1d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8017a84:	4b25      	ldr	r3, [pc, #148]	@ (8017b1c <USBD_CDC_Init+0x1ec>)
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	f003 020f 	and.w	r2, r3, #15
 8017a8c:	6879      	ldr	r1, [r7, #4]
 8017a8e:	4613      	mov	r3, r2
 8017a90:	009b      	lsls	r3, r3, #2
 8017a92:	4413      	add	r3, r2
 8017a94:	009b      	lsls	r3, r3, #2
 8017a96:	440b      	add	r3, r1
 8017a98:	3324      	adds	r3, #36	@ 0x24
 8017a9a:	2201      	movs	r2, #1
 8017a9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017aac:	687a      	ldr	r2, [r7, #4]
 8017aae:	33b0      	adds	r3, #176	@ 0xb0
 8017ab0:	009b      	lsls	r3, r3, #2
 8017ab2:	4413      	add	r3, r2
 8017ab4:	685b      	ldr	r3, [r3, #4]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2200      	movs	r2, #0
 8017abe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d101      	bne.n	8017ad8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8017ad4:	2302      	movs	r3, #2
 8017ad6:	e018      	b.n	8017b0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	7c1b      	ldrb	r3, [r3, #16]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d10a      	bne.n	8017af6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8017b18 <USBD_CDC_Init+0x1e8>)
 8017ae2:	7819      	ldrb	r1, [r3, #0]
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017aee:	6878      	ldr	r0, [r7, #4]
 8017af0:	f005 fc5e 	bl	801d3b0 <USBD_LL_PrepareReceive>
 8017af4:	e008      	b.n	8017b08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017af6:	4b08      	ldr	r3, [pc, #32]	@ (8017b18 <USBD_CDC_Init+0x1e8>)
 8017af8:	7819      	ldrb	r1, [r3, #0]
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017b00:	2340      	movs	r3, #64	@ 0x40
 8017b02:	6878      	ldr	r0, [r7, #4]
 8017b04:	f005 fc54 	bl	801d3b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017b08:	2300      	movs	r3, #0
}
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	3710      	adds	r7, #16
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	bd80      	pop	{r7, pc}
 8017b12:	bf00      	nop
 8017b14:	200000d7 	.word	0x200000d7
 8017b18:	200000d8 	.word	0x200000d8
 8017b1c:	200000d9 	.word	0x200000d9

08017b20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b082      	sub	sp, #8
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	460b      	mov	r3, r1
 8017b2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8017b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8017c18 <USBD_CDC_DeInit+0xf8>)
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	4619      	mov	r1, r3
 8017b32:	6878      	ldr	r0, [r7, #4]
 8017b34:	f005 fb73 	bl	801d21e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8017b38:	4b37      	ldr	r3, [pc, #220]	@ (8017c18 <USBD_CDC_DeInit+0xf8>)
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	f003 020f 	and.w	r2, r3, #15
 8017b40:	6879      	ldr	r1, [r7, #4]
 8017b42:	4613      	mov	r3, r2
 8017b44:	009b      	lsls	r3, r3, #2
 8017b46:	4413      	add	r3, r2
 8017b48:	009b      	lsls	r3, r3, #2
 8017b4a:	440b      	add	r3, r1
 8017b4c:	3324      	adds	r3, #36	@ 0x24
 8017b4e:	2200      	movs	r2, #0
 8017b50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8017b52:	4b32      	ldr	r3, [pc, #200]	@ (8017c1c <USBD_CDC_DeInit+0xfc>)
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	4619      	mov	r1, r3
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f005 fb60 	bl	801d21e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8017b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8017c1c <USBD_CDC_DeInit+0xfc>)
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	f003 020f 	and.w	r2, r3, #15
 8017b66:	6879      	ldr	r1, [r7, #4]
 8017b68:	4613      	mov	r3, r2
 8017b6a:	009b      	lsls	r3, r3, #2
 8017b6c:	4413      	add	r3, r2
 8017b6e:	009b      	lsls	r3, r3, #2
 8017b70:	440b      	add	r3, r1
 8017b72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017b76:	2200      	movs	r2, #0
 8017b78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8017b7a:	4b29      	ldr	r3, [pc, #164]	@ (8017c20 <USBD_CDC_DeInit+0x100>)
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	4619      	mov	r1, r3
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f005 fb4c 	bl	801d21e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8017b86:	4b26      	ldr	r3, [pc, #152]	@ (8017c20 <USBD_CDC_DeInit+0x100>)
 8017b88:	781b      	ldrb	r3, [r3, #0]
 8017b8a:	f003 020f 	and.w	r2, r3, #15
 8017b8e:	6879      	ldr	r1, [r7, #4]
 8017b90:	4613      	mov	r3, r2
 8017b92:	009b      	lsls	r3, r3, #2
 8017b94:	4413      	add	r3, r2
 8017b96:	009b      	lsls	r3, r3, #2
 8017b98:	440b      	add	r3, r1
 8017b9a:	3324      	adds	r3, #36	@ 0x24
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8017ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8017c20 <USBD_CDC_DeInit+0x100>)
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	f003 020f 	and.w	r2, r3, #15
 8017ba8:	6879      	ldr	r1, [r7, #4]
 8017baa:	4613      	mov	r3, r2
 8017bac:	009b      	lsls	r3, r3, #2
 8017bae:	4413      	add	r3, r2
 8017bb0:	009b      	lsls	r3, r3, #2
 8017bb2:	440b      	add	r3, r1
 8017bb4:	3326      	adds	r3, #38	@ 0x26
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	32b0      	adds	r2, #176	@ 0xb0
 8017bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d01f      	beq.n	8017c0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017bd2:	687a      	ldr	r2, [r7, #4]
 8017bd4:	33b0      	adds	r3, #176	@ 0xb0
 8017bd6:	009b      	lsls	r3, r3, #2
 8017bd8:	4413      	add	r3, r2
 8017bda:	685b      	ldr	r3, [r3, #4]
 8017bdc:	685b      	ldr	r3, [r3, #4]
 8017bde:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	32b0      	adds	r2, #176	@ 0xb0
 8017bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f005 fc20 	bl	801d434 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	32b0      	adds	r2, #176	@ 0xb0
 8017bfe:	2100      	movs	r1, #0
 8017c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	2200      	movs	r2, #0
 8017c08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8017c0c:	2300      	movs	r3, #0
}
 8017c0e:	4618      	mov	r0, r3
 8017c10:	3708      	adds	r7, #8
 8017c12:	46bd      	mov	sp, r7
 8017c14:	bd80      	pop	{r7, pc}
 8017c16:	bf00      	nop
 8017c18:	200000d7 	.word	0x200000d7
 8017c1c:	200000d8 	.word	0x200000d8
 8017c20:	200000d9 	.word	0x200000d9

08017c24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b086      	sub	sp, #24
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
 8017c2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	32b0      	adds	r2, #176	@ 0xb0
 8017c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017c42:	2300      	movs	r3, #0
 8017c44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c46:	2300      	movs	r3, #0
 8017c48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8017c4a:	693b      	ldr	r3, [r7, #16]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d101      	bne.n	8017c54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8017c50:	2303      	movs	r3, #3
 8017c52:	e0bf      	b.n	8017dd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	781b      	ldrb	r3, [r3, #0]
 8017c58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d050      	beq.n	8017d02 <USBD_CDC_Setup+0xde>
 8017c60:	2b20      	cmp	r3, #32
 8017c62:	f040 80af 	bne.w	8017dc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8017c66:	683b      	ldr	r3, [r7, #0]
 8017c68:	88db      	ldrh	r3, [r3, #6]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d03a      	beq.n	8017ce4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	b25b      	sxtb	r3, r3
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	da1b      	bge.n	8017cb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	33b0      	adds	r3, #176	@ 0xb0
 8017c82:	009b      	lsls	r3, r3, #2
 8017c84:	4413      	add	r3, r2
 8017c86:	685b      	ldr	r3, [r3, #4]
 8017c88:	689b      	ldr	r3, [r3, #8]
 8017c8a:	683a      	ldr	r2, [r7, #0]
 8017c8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8017c8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017c90:	683a      	ldr	r2, [r7, #0]
 8017c92:	88d2      	ldrh	r2, [r2, #6]
 8017c94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	88db      	ldrh	r3, [r3, #6]
 8017c9a:	2b07      	cmp	r3, #7
 8017c9c:	bf28      	it	cs
 8017c9e:	2307      	movcs	r3, #7
 8017ca0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017ca2:	693b      	ldr	r3, [r7, #16]
 8017ca4:	89fa      	ldrh	r2, [r7, #14]
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f001 fd41 	bl	8019730 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8017cae:	e090      	b.n	8017dd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	785a      	ldrb	r2, [r3, #1]
 8017cb4:	693b      	ldr	r3, [r7, #16]
 8017cb6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	88db      	ldrh	r3, [r3, #6]
 8017cbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8017cc0:	d803      	bhi.n	8017cca <USBD_CDC_Setup+0xa6>
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	88db      	ldrh	r3, [r3, #6]
 8017cc6:	b2da      	uxtb	r2, r3
 8017cc8:	e000      	b.n	8017ccc <USBD_CDC_Setup+0xa8>
 8017cca:	2240      	movs	r2, #64	@ 0x40
 8017ccc:	693b      	ldr	r3, [r7, #16]
 8017cce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8017cd2:	6939      	ldr	r1, [r7, #16]
 8017cd4:	693b      	ldr	r3, [r7, #16]
 8017cd6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8017cda:	461a      	mov	r2, r3
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f001 fd53 	bl	8019788 <USBD_CtlPrepareRx>
      break;
 8017ce2:	e076      	b.n	8017dd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017cea:	687a      	ldr	r2, [r7, #4]
 8017cec:	33b0      	adds	r3, #176	@ 0xb0
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	4413      	add	r3, r2
 8017cf2:	685b      	ldr	r3, [r3, #4]
 8017cf4:	689b      	ldr	r3, [r3, #8]
 8017cf6:	683a      	ldr	r2, [r7, #0]
 8017cf8:	7850      	ldrb	r0, [r2, #1]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	6839      	ldr	r1, [r7, #0]
 8017cfe:	4798      	blx	r3
      break;
 8017d00:	e067      	b.n	8017dd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017d02:	683b      	ldr	r3, [r7, #0]
 8017d04:	785b      	ldrb	r3, [r3, #1]
 8017d06:	2b0b      	cmp	r3, #11
 8017d08:	d851      	bhi.n	8017dae <USBD_CDC_Setup+0x18a>
 8017d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8017d10 <USBD_CDC_Setup+0xec>)
 8017d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d10:	08017d41 	.word	0x08017d41
 8017d14:	08017dbd 	.word	0x08017dbd
 8017d18:	08017daf 	.word	0x08017daf
 8017d1c:	08017daf 	.word	0x08017daf
 8017d20:	08017daf 	.word	0x08017daf
 8017d24:	08017daf 	.word	0x08017daf
 8017d28:	08017daf 	.word	0x08017daf
 8017d2c:	08017daf 	.word	0x08017daf
 8017d30:	08017daf 	.word	0x08017daf
 8017d34:	08017daf 	.word	0x08017daf
 8017d38:	08017d6b 	.word	0x08017d6b
 8017d3c:	08017d95 	.word	0x08017d95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d46:	b2db      	uxtb	r3, r3
 8017d48:	2b03      	cmp	r3, #3
 8017d4a:	d107      	bne.n	8017d5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8017d4c:	f107 030a 	add.w	r3, r7, #10
 8017d50:	2202      	movs	r2, #2
 8017d52:	4619      	mov	r1, r3
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f001 fceb 	bl	8019730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017d5a:	e032      	b.n	8017dc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8017d5c:	6839      	ldr	r1, [r7, #0]
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f001 fc75 	bl	801964e <USBD_CtlError>
            ret = USBD_FAIL;
 8017d64:	2303      	movs	r3, #3
 8017d66:	75fb      	strb	r3, [r7, #23]
          break;
 8017d68:	e02b      	b.n	8017dc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d70:	b2db      	uxtb	r3, r3
 8017d72:	2b03      	cmp	r3, #3
 8017d74:	d107      	bne.n	8017d86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8017d76:	f107 030d 	add.w	r3, r7, #13
 8017d7a:	2201      	movs	r2, #1
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	6878      	ldr	r0, [r7, #4]
 8017d80:	f001 fcd6 	bl	8019730 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017d84:	e01d      	b.n	8017dc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8017d86:	6839      	ldr	r1, [r7, #0]
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f001 fc60 	bl	801964e <USBD_CtlError>
            ret = USBD_FAIL;
 8017d8e:	2303      	movs	r3, #3
 8017d90:	75fb      	strb	r3, [r7, #23]
          break;
 8017d92:	e016      	b.n	8017dc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d9a:	b2db      	uxtb	r3, r3
 8017d9c:	2b03      	cmp	r3, #3
 8017d9e:	d00f      	beq.n	8017dc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8017da0:	6839      	ldr	r1, [r7, #0]
 8017da2:	6878      	ldr	r0, [r7, #4]
 8017da4:	f001 fc53 	bl	801964e <USBD_CtlError>
            ret = USBD_FAIL;
 8017da8:	2303      	movs	r3, #3
 8017daa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017dac:	e008      	b.n	8017dc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8017dae:	6839      	ldr	r1, [r7, #0]
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f001 fc4c 	bl	801964e <USBD_CtlError>
          ret = USBD_FAIL;
 8017db6:	2303      	movs	r3, #3
 8017db8:	75fb      	strb	r3, [r7, #23]
          break;
 8017dba:	e002      	b.n	8017dc2 <USBD_CDC_Setup+0x19e>
          break;
 8017dbc:	bf00      	nop
 8017dbe:	e008      	b.n	8017dd2 <USBD_CDC_Setup+0x1ae>
          break;
 8017dc0:	bf00      	nop
      }
      break;
 8017dc2:	e006      	b.n	8017dd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8017dc4:	6839      	ldr	r1, [r7, #0]
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	f001 fc41 	bl	801964e <USBD_CtlError>
      ret = USBD_FAIL;
 8017dcc:	2303      	movs	r3, #3
 8017dce:	75fb      	strb	r3, [r7, #23]
      break;
 8017dd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8017dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3718      	adds	r7, #24
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}

08017ddc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b084      	sub	sp, #16
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
 8017de4:	460b      	mov	r3, r1
 8017de6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017dee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	32b0      	adds	r2, #176	@ 0xb0
 8017dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d101      	bne.n	8017e06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8017e02:	2303      	movs	r3, #3
 8017e04:	e065      	b.n	8017ed2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	32b0      	adds	r2, #176	@ 0xb0
 8017e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8017e16:	78fb      	ldrb	r3, [r7, #3]
 8017e18:	f003 020f 	and.w	r2, r3, #15
 8017e1c:	6879      	ldr	r1, [r7, #4]
 8017e1e:	4613      	mov	r3, r2
 8017e20:	009b      	lsls	r3, r3, #2
 8017e22:	4413      	add	r3, r2
 8017e24:	009b      	lsls	r3, r3, #2
 8017e26:	440b      	add	r3, r1
 8017e28:	3318      	adds	r3, #24
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d02f      	beq.n	8017e90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8017e30:	78fb      	ldrb	r3, [r7, #3]
 8017e32:	f003 020f 	and.w	r2, r3, #15
 8017e36:	6879      	ldr	r1, [r7, #4]
 8017e38:	4613      	mov	r3, r2
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	4413      	add	r3, r2
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	440b      	add	r3, r1
 8017e42:	3318      	adds	r3, #24
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	78fb      	ldrb	r3, [r7, #3]
 8017e48:	f003 010f 	and.w	r1, r3, #15
 8017e4c:	68f8      	ldr	r0, [r7, #12]
 8017e4e:	460b      	mov	r3, r1
 8017e50:	00db      	lsls	r3, r3, #3
 8017e52:	440b      	add	r3, r1
 8017e54:	009b      	lsls	r3, r3, #2
 8017e56:	4403      	add	r3, r0
 8017e58:	3348      	adds	r3, #72	@ 0x48
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8017e60:	fb01 f303 	mul.w	r3, r1, r3
 8017e64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d112      	bne.n	8017e90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8017e6a:	78fb      	ldrb	r3, [r7, #3]
 8017e6c:	f003 020f 	and.w	r2, r3, #15
 8017e70:	6879      	ldr	r1, [r7, #4]
 8017e72:	4613      	mov	r3, r2
 8017e74:	009b      	lsls	r3, r3, #2
 8017e76:	4413      	add	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	440b      	add	r3, r1
 8017e7c:	3318      	adds	r3, #24
 8017e7e:	2200      	movs	r2, #0
 8017e80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017e82:	78f9      	ldrb	r1, [r7, #3]
 8017e84:	2300      	movs	r3, #0
 8017e86:	2200      	movs	r2, #0
 8017e88:	6878      	ldr	r0, [r7, #4]
 8017e8a:	f005 fa70 	bl	801d36e <USBD_LL_Transmit>
 8017e8e:	e01f      	b.n	8017ed0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8017e90:	68bb      	ldr	r3, [r7, #8]
 8017e92:	2200      	movs	r2, #0
 8017e94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017e9e:	687a      	ldr	r2, [r7, #4]
 8017ea0:	33b0      	adds	r3, #176	@ 0xb0
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	4413      	add	r3, r2
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	691b      	ldr	r3, [r3, #16]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d010      	beq.n	8017ed0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017eb4:	687a      	ldr	r2, [r7, #4]
 8017eb6:	33b0      	adds	r3, #176	@ 0xb0
 8017eb8:	009b      	lsls	r3, r3, #2
 8017eba:	4413      	add	r3, r2
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	691b      	ldr	r3, [r3, #16]
 8017ec0:	68ba      	ldr	r2, [r7, #8]
 8017ec2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8017ec6:	68ba      	ldr	r2, [r7, #8]
 8017ec8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8017ecc:	78fa      	ldrb	r2, [r7, #3]
 8017ece:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017ed0:	2300      	movs	r3, #0
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	3710      	adds	r7, #16
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}

08017eda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017eda:	b580      	push	{r7, lr}
 8017edc:	b084      	sub	sp, #16
 8017ede:	af00      	add	r7, sp, #0
 8017ee0:	6078      	str	r0, [r7, #4]
 8017ee2:	460b      	mov	r3, r1
 8017ee4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	32b0      	adds	r2, #176	@ 0xb0
 8017ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ef4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	32b0      	adds	r2, #176	@ 0xb0
 8017f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d101      	bne.n	8017f0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8017f08:	2303      	movs	r3, #3
 8017f0a:	e01a      	b.n	8017f42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017f0c:	78fb      	ldrb	r3, [r7, #3]
 8017f0e:	4619      	mov	r1, r3
 8017f10:	6878      	ldr	r0, [r7, #4]
 8017f12:	f005 fa6e 	bl	801d3f2 <USBD_LL_GetRxDataSize>
 8017f16:	4602      	mov	r2, r0
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	33b0      	adds	r3, #176	@ 0xb0
 8017f28:	009b      	lsls	r3, r3, #2
 8017f2a:	4413      	add	r3, r2
 8017f2c:	685b      	ldr	r3, [r3, #4]
 8017f2e:	68db      	ldr	r3, [r3, #12]
 8017f30:	68fa      	ldr	r2, [r7, #12]
 8017f32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8017f36:	68fa      	ldr	r2, [r7, #12]
 8017f38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8017f3c:	4611      	mov	r1, r2
 8017f3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8017f40:	2300      	movs	r3, #0
}
 8017f42:	4618      	mov	r0, r3
 8017f44:	3710      	adds	r7, #16
 8017f46:	46bd      	mov	sp, r7
 8017f48:	bd80      	pop	{r7, pc}

08017f4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017f4a:	b580      	push	{r7, lr}
 8017f4c:	b084      	sub	sp, #16
 8017f4e:	af00      	add	r7, sp, #0
 8017f50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	32b0      	adds	r2, #176	@ 0xb0
 8017f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d101      	bne.n	8017f6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017f68:	2303      	movs	r3, #3
 8017f6a:	e024      	b.n	8017fb6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	33b0      	adds	r3, #176	@ 0xb0
 8017f76:	009b      	lsls	r3, r3, #2
 8017f78:	4413      	add	r3, r2
 8017f7a:	685b      	ldr	r3, [r3, #4]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d019      	beq.n	8017fb4 <USBD_CDC_EP0_RxReady+0x6a>
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8017f86:	2bff      	cmp	r3, #255	@ 0xff
 8017f88:	d014      	beq.n	8017fb4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017f90:	687a      	ldr	r2, [r7, #4]
 8017f92:	33b0      	adds	r3, #176	@ 0xb0
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	4413      	add	r3, r2
 8017f98:	685b      	ldr	r3, [r3, #4]
 8017f9a:	689b      	ldr	r3, [r3, #8]
 8017f9c:	68fa      	ldr	r2, [r7, #12]
 8017f9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8017fa2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8017fa4:	68fa      	ldr	r2, [r7, #12]
 8017fa6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8017faa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	22ff      	movs	r2, #255	@ 0xff
 8017fb0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8017fb4:	2300      	movs	r3, #0
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}
	...

08017fc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b086      	sub	sp, #24
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8017fc8:	2182      	movs	r1, #130	@ 0x82
 8017fca:	4818      	ldr	r0, [pc, #96]	@ (801802c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8017fcc:	f000 fd09 	bl	80189e2 <USBD_GetEpDesc>
 8017fd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8017fd2:	2101      	movs	r1, #1
 8017fd4:	4815      	ldr	r0, [pc, #84]	@ (801802c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8017fd6:	f000 fd04 	bl	80189e2 <USBD_GetEpDesc>
 8017fda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8017fdc:	2181      	movs	r1, #129	@ 0x81
 8017fde:	4813      	ldr	r0, [pc, #76]	@ (801802c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8017fe0:	f000 fcff 	bl	80189e2 <USBD_GetEpDesc>
 8017fe4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d002      	beq.n	8017ff2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	2210      	movs	r2, #16
 8017ff0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8017ff2:	693b      	ldr	r3, [r7, #16]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d006      	beq.n	8018006 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018000:	711a      	strb	r2, [r3, #4]
 8018002:	2200      	movs	r2, #0
 8018004:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d006      	beq.n	801801a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	2200      	movs	r2, #0
 8018010:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018014:	711a      	strb	r2, [r3, #4]
 8018016:	2200      	movs	r2, #0
 8018018:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	2243      	movs	r2, #67	@ 0x43
 801801e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018020:	4b02      	ldr	r3, [pc, #8]	@ (801802c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8018022:	4618      	mov	r0, r3
 8018024:	3718      	adds	r7, #24
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	20000094 	.word	0x20000094

08018030 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b086      	sub	sp, #24
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018038:	2182      	movs	r1, #130	@ 0x82
 801803a:	4818      	ldr	r0, [pc, #96]	@ (801809c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801803c:	f000 fcd1 	bl	80189e2 <USBD_GetEpDesc>
 8018040:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018042:	2101      	movs	r1, #1
 8018044:	4815      	ldr	r0, [pc, #84]	@ (801809c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018046:	f000 fccc 	bl	80189e2 <USBD_GetEpDesc>
 801804a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801804c:	2181      	movs	r1, #129	@ 0x81
 801804e:	4813      	ldr	r0, [pc, #76]	@ (801809c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018050:	f000 fcc7 	bl	80189e2 <USBD_GetEpDesc>
 8018054:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d002      	beq.n	8018062 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	2210      	movs	r2, #16
 8018060:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d006      	beq.n	8018076 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018068:	693b      	ldr	r3, [r7, #16]
 801806a:	2200      	movs	r2, #0
 801806c:	711a      	strb	r2, [r3, #4]
 801806e:	2200      	movs	r2, #0
 8018070:	f042 0202 	orr.w	r2, r2, #2
 8018074:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d006      	beq.n	801808a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	2200      	movs	r2, #0
 8018080:	711a      	strb	r2, [r3, #4]
 8018082:	2200      	movs	r2, #0
 8018084:	f042 0202 	orr.w	r2, r2, #2
 8018088:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2243      	movs	r2, #67	@ 0x43
 801808e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018090:	4b02      	ldr	r3, [pc, #8]	@ (801809c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8018092:	4618      	mov	r0, r3
 8018094:	3718      	adds	r7, #24
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	20000094 	.word	0x20000094

080180a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b086      	sub	sp, #24
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80180a8:	2182      	movs	r1, #130	@ 0x82
 80180aa:	4818      	ldr	r0, [pc, #96]	@ (801810c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80180ac:	f000 fc99 	bl	80189e2 <USBD_GetEpDesc>
 80180b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80180b2:	2101      	movs	r1, #1
 80180b4:	4815      	ldr	r0, [pc, #84]	@ (801810c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80180b6:	f000 fc94 	bl	80189e2 <USBD_GetEpDesc>
 80180ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80180bc:	2181      	movs	r1, #129	@ 0x81
 80180be:	4813      	ldr	r0, [pc, #76]	@ (801810c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80180c0:	f000 fc8f 	bl	80189e2 <USBD_GetEpDesc>
 80180c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d002      	beq.n	80180d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80180cc:	697b      	ldr	r3, [r7, #20]
 80180ce:	2210      	movs	r2, #16
 80180d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80180d2:	693b      	ldr	r3, [r7, #16]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d006      	beq.n	80180e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80180d8:	693b      	ldr	r3, [r7, #16]
 80180da:	2200      	movs	r2, #0
 80180dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80180e0:	711a      	strb	r2, [r3, #4]
 80180e2:	2200      	movs	r2, #0
 80180e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d006      	beq.n	80180fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	2200      	movs	r2, #0
 80180f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80180f4:	711a      	strb	r2, [r3, #4]
 80180f6:	2200      	movs	r2, #0
 80180f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	2243      	movs	r2, #67	@ 0x43
 80180fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018100:	4b02      	ldr	r3, [pc, #8]	@ (801810c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8018102:	4618      	mov	r0, r3
 8018104:	3718      	adds	r7, #24
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	20000094 	.word	0x20000094

08018110 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018110:	b480      	push	{r7}
 8018112:	b083      	sub	sp, #12
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	220a      	movs	r2, #10
 801811c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801811e:	4b03      	ldr	r3, [pc, #12]	@ (801812c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018120:	4618      	mov	r0, r3
 8018122:	370c      	adds	r7, #12
 8018124:	46bd      	mov	sp, r7
 8018126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812a:	4770      	bx	lr
 801812c:	20000050 	.word	0x20000050

08018130 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018130:	b480      	push	{r7}
 8018132:	b083      	sub	sp, #12
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
 8018138:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d101      	bne.n	8018144 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8018140:	2303      	movs	r3, #3
 8018142:	e009      	b.n	8018158 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801814a:	687a      	ldr	r2, [r7, #4]
 801814c:	33b0      	adds	r3, #176	@ 0xb0
 801814e:	009b      	lsls	r3, r3, #2
 8018150:	4413      	add	r3, r2
 8018152:	683a      	ldr	r2, [r7, #0]
 8018154:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8018156:	2300      	movs	r3, #0
}
 8018158:	4618      	mov	r0, r3
 801815a:	370c      	adds	r7, #12
 801815c:	46bd      	mov	sp, r7
 801815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018162:	4770      	bx	lr

08018164 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8018164:	b480      	push	{r7}
 8018166:	b087      	sub	sp, #28
 8018168:	af00      	add	r7, sp, #0
 801816a:	60f8      	str	r0, [r7, #12]
 801816c:	60b9      	str	r1, [r7, #8]
 801816e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	32b0      	adds	r2, #176	@ 0xb0
 801817a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801817e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8018180:	697b      	ldr	r3, [r7, #20]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d101      	bne.n	801818a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8018186:	2303      	movs	r3, #3
 8018188:	e008      	b.n	801819c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801818a:	697b      	ldr	r3, [r7, #20]
 801818c:	68ba      	ldr	r2, [r7, #8]
 801818e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	687a      	ldr	r2, [r7, #4]
 8018196:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801819a:	2300      	movs	r3, #0
}
 801819c:	4618      	mov	r0, r3
 801819e:	371c      	adds	r7, #28
 80181a0:	46bd      	mov	sp, r7
 80181a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a6:	4770      	bx	lr

080181a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80181a8:	b480      	push	{r7}
 80181aa:	b085      	sub	sp, #20
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	32b0      	adds	r2, #176	@ 0xb0
 80181bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d101      	bne.n	80181cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80181c8:	2303      	movs	r3, #3
 80181ca:	e004      	b.n	80181d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	683a      	ldr	r2, [r7, #0]
 80181d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80181d4:	2300      	movs	r3, #0
}
 80181d6:	4618      	mov	r0, r3
 80181d8:	3714      	adds	r7, #20
 80181da:	46bd      	mov	sp, r7
 80181dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e0:	4770      	bx	lr
	...

080181e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	32b0      	adds	r2, #176	@ 0xb0
 80181f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	32b0      	adds	r2, #176	@ 0xb0
 8018206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d101      	bne.n	8018212 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801820e:	2303      	movs	r3, #3
 8018210:	e018      	b.n	8018244 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	7c1b      	ldrb	r3, [r3, #16]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d10a      	bne.n	8018230 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801821a:	4b0c      	ldr	r3, [pc, #48]	@ (801824c <USBD_CDC_ReceivePacket+0x68>)
 801821c:	7819      	ldrb	r1, [r3, #0]
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8018224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018228:	6878      	ldr	r0, [r7, #4]
 801822a:	f005 f8c1 	bl	801d3b0 <USBD_LL_PrepareReceive>
 801822e:	e008      	b.n	8018242 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018230:	4b06      	ldr	r3, [pc, #24]	@ (801824c <USBD_CDC_ReceivePacket+0x68>)
 8018232:	7819      	ldrb	r1, [r3, #0]
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801823a:	2340      	movs	r3, #64	@ 0x40
 801823c:	6878      	ldr	r0, [r7, #4]
 801823e:	f005 f8b7 	bl	801d3b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018242:	2300      	movs	r3, #0
}
 8018244:	4618      	mov	r0, r3
 8018246:	3710      	adds	r7, #16
 8018248:	46bd      	mov	sp, r7
 801824a:	bd80      	pop	{r7, pc}
 801824c:	200000d8 	.word	0x200000d8

08018250 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b086      	sub	sp, #24
 8018254:	af00      	add	r7, sp, #0
 8018256:	60f8      	str	r0, [r7, #12]
 8018258:	60b9      	str	r1, [r7, #8]
 801825a:	4613      	mov	r3, r2
 801825c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d101      	bne.n	8018268 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018264:	2303      	movs	r3, #3
 8018266:	e01f      	b.n	80182a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	2200      	movs	r2, #0
 801826c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	2200      	movs	r2, #0
 8018274:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2200      	movs	r2, #0
 801827c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8018280:	68bb      	ldr	r3, [r7, #8]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d003      	beq.n	801828e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	68ba      	ldr	r2, [r7, #8]
 801828a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	2201      	movs	r2, #1
 8018292:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	79fa      	ldrb	r2, [r7, #7]
 801829a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801829c:	68f8      	ldr	r0, [r7, #12]
 801829e:	f004 ff31 	bl	801d104 <USBD_LL_Init>
 80182a2:	4603      	mov	r3, r0
 80182a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80182a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3718      	adds	r7, #24
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}

080182b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b084      	sub	sp, #16
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
 80182b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80182ba:	2300      	movs	r3, #0
 80182bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d101      	bne.n	80182c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80182c4:	2303      	movs	r3, #3
 80182c6:	e025      	b.n	8018314 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	683a      	ldr	r2, [r7, #0]
 80182cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	32ae      	adds	r2, #174	@ 0xae
 80182da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d00f      	beq.n	8018304 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	32ae      	adds	r2, #174	@ 0xae
 80182ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182f4:	f107 020e 	add.w	r2, r7, #14
 80182f8:	4610      	mov	r0, r2
 80182fa:	4798      	blx	r3
 80182fc:	4602      	mov	r2, r0
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801830a:	1c5a      	adds	r2, r3, #1
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8018312:	2300      	movs	r3, #0
}
 8018314:	4618      	mov	r0, r3
 8018316:	3710      	adds	r7, #16
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}

0801831c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b082      	sub	sp, #8
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f004 ff39 	bl	801d19c <USBD_LL_Start>
 801832a:	4603      	mov	r3, r0
}
 801832c:	4618      	mov	r0, r3
 801832e:	3708      	adds	r7, #8
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}

08018334 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8018334:	b480      	push	{r7}
 8018336:	b083      	sub	sp, #12
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801833c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801833e:	4618      	mov	r0, r3
 8018340:	370c      	adds	r7, #12
 8018342:	46bd      	mov	sp, r7
 8018344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018348:	4770      	bx	lr

0801834a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801834a:	b580      	push	{r7, lr}
 801834c:	b084      	sub	sp, #16
 801834e:	af00      	add	r7, sp, #0
 8018350:	6078      	str	r0, [r7, #4]
 8018352:	460b      	mov	r3, r1
 8018354:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018356:	2300      	movs	r3, #0
 8018358:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018360:	2b00      	cmp	r3, #0
 8018362:	d009      	beq.n	8018378 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	78fa      	ldrb	r2, [r7, #3]
 801836e:	4611      	mov	r1, r2
 8018370:	6878      	ldr	r0, [r7, #4]
 8018372:	4798      	blx	r3
 8018374:	4603      	mov	r3, r0
 8018376:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018378:	7bfb      	ldrb	r3, [r7, #15]
}
 801837a:	4618      	mov	r0, r3
 801837c:	3710      	adds	r7, #16
 801837e:	46bd      	mov	sp, r7
 8018380:	bd80      	pop	{r7, pc}

08018382 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018382:	b580      	push	{r7, lr}
 8018384:	b084      	sub	sp, #16
 8018386:	af00      	add	r7, sp, #0
 8018388:	6078      	str	r0, [r7, #4]
 801838a:	460b      	mov	r3, r1
 801838c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801838e:	2300      	movs	r3, #0
 8018390:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018398:	685b      	ldr	r3, [r3, #4]
 801839a:	78fa      	ldrb	r2, [r7, #3]
 801839c:	4611      	mov	r1, r2
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	4798      	blx	r3
 80183a2:	4603      	mov	r3, r0
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d001      	beq.n	80183ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80183a8:	2303      	movs	r3, #3
 80183aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80183ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3710      	adds	r7, #16
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}

080183b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80183b6:	b580      	push	{r7, lr}
 80183b8:	b084      	sub	sp, #16
 80183ba:	af00      	add	r7, sp, #0
 80183bc:	6078      	str	r0, [r7, #4]
 80183be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80183c6:	6839      	ldr	r1, [r7, #0]
 80183c8:	4618      	mov	r0, r3
 80183ca:	f001 f906 	bl	80195da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	2201      	movs	r2, #1
 80183d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80183dc:	461a      	mov	r2, r3
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80183ea:	f003 031f 	and.w	r3, r3, #31
 80183ee:	2b02      	cmp	r3, #2
 80183f0:	d01a      	beq.n	8018428 <USBD_LL_SetupStage+0x72>
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d822      	bhi.n	801843c <USBD_LL_SetupStage+0x86>
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d002      	beq.n	8018400 <USBD_LL_SetupStage+0x4a>
 80183fa:	2b01      	cmp	r3, #1
 80183fc:	d00a      	beq.n	8018414 <USBD_LL_SetupStage+0x5e>
 80183fe:	e01d      	b.n	801843c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018406:	4619      	mov	r1, r3
 8018408:	6878      	ldr	r0, [r7, #4]
 801840a:	f000 fb5d 	bl	8018ac8 <USBD_StdDevReq>
 801840e:	4603      	mov	r3, r0
 8018410:	73fb      	strb	r3, [r7, #15]
      break;
 8018412:	e020      	b.n	8018456 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801841a:	4619      	mov	r1, r3
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	f000 fbc5 	bl	8018bac <USBD_StdItfReq>
 8018422:	4603      	mov	r3, r0
 8018424:	73fb      	strb	r3, [r7, #15]
      break;
 8018426:	e016      	b.n	8018456 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801842e:	4619      	mov	r1, r3
 8018430:	6878      	ldr	r0, [r7, #4]
 8018432:	f000 fc27 	bl	8018c84 <USBD_StdEPReq>
 8018436:	4603      	mov	r3, r0
 8018438:	73fb      	strb	r3, [r7, #15]
      break;
 801843a:	e00c      	b.n	8018456 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018442:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018446:	b2db      	uxtb	r3, r3
 8018448:	4619      	mov	r1, r3
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f004 ff06 	bl	801d25c <USBD_LL_StallEP>
 8018450:	4603      	mov	r3, r0
 8018452:	73fb      	strb	r3, [r7, #15]
      break;
 8018454:	bf00      	nop
  }

  return ret;
 8018456:	7bfb      	ldrb	r3, [r7, #15]
}
 8018458:	4618      	mov	r0, r3
 801845a:	3710      	adds	r7, #16
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}

08018460 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b086      	sub	sp, #24
 8018464:	af00      	add	r7, sp, #0
 8018466:	60f8      	str	r0, [r7, #12]
 8018468:	460b      	mov	r3, r1
 801846a:	607a      	str	r2, [r7, #4]
 801846c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801846e:	2300      	movs	r3, #0
 8018470:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8018472:	7afb      	ldrb	r3, [r7, #11]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d16e      	bne.n	8018556 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801847e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018486:	2b03      	cmp	r3, #3
 8018488:	f040 8098 	bne.w	80185bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801848c:	693b      	ldr	r3, [r7, #16]
 801848e:	689a      	ldr	r2, [r3, #8]
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	68db      	ldr	r3, [r3, #12]
 8018494:	429a      	cmp	r2, r3
 8018496:	d913      	bls.n	80184c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8018498:	693b      	ldr	r3, [r7, #16]
 801849a:	689a      	ldr	r2, [r3, #8]
 801849c:	693b      	ldr	r3, [r7, #16]
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	1ad2      	subs	r2, r2, r3
 80184a2:	693b      	ldr	r3, [r7, #16]
 80184a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80184a6:	693b      	ldr	r3, [r7, #16]
 80184a8:	68da      	ldr	r2, [r3, #12]
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	689b      	ldr	r3, [r3, #8]
 80184ae:	4293      	cmp	r3, r2
 80184b0:	bf28      	it	cs
 80184b2:	4613      	movcs	r3, r2
 80184b4:	461a      	mov	r2, r3
 80184b6:	6879      	ldr	r1, [r7, #4]
 80184b8:	68f8      	ldr	r0, [r7, #12]
 80184ba:	f001 f982 	bl	80197c2 <USBD_CtlContinueRx>
 80184be:	e07d      	b.n	80185bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80184c6:	f003 031f 	and.w	r3, r3, #31
 80184ca:	2b02      	cmp	r3, #2
 80184cc:	d014      	beq.n	80184f8 <USBD_LL_DataOutStage+0x98>
 80184ce:	2b02      	cmp	r3, #2
 80184d0:	d81d      	bhi.n	801850e <USBD_LL_DataOutStage+0xae>
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d002      	beq.n	80184dc <USBD_LL_DataOutStage+0x7c>
 80184d6:	2b01      	cmp	r3, #1
 80184d8:	d003      	beq.n	80184e2 <USBD_LL_DataOutStage+0x82>
 80184da:	e018      	b.n	801850e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80184dc:	2300      	movs	r3, #0
 80184de:	75bb      	strb	r3, [r7, #22]
            break;
 80184e0:	e018      	b.n	8018514 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	4619      	mov	r1, r3
 80184ec:	68f8      	ldr	r0, [r7, #12]
 80184ee:	f000 fa5e 	bl	80189ae <USBD_CoreFindIF>
 80184f2:	4603      	mov	r3, r0
 80184f4:	75bb      	strb	r3, [r7, #22]
            break;
 80184f6:	e00d      	b.n	8018514 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80184fe:	b2db      	uxtb	r3, r3
 8018500:	4619      	mov	r1, r3
 8018502:	68f8      	ldr	r0, [r7, #12]
 8018504:	f000 fa60 	bl	80189c8 <USBD_CoreFindEP>
 8018508:	4603      	mov	r3, r0
 801850a:	75bb      	strb	r3, [r7, #22]
            break;
 801850c:	e002      	b.n	8018514 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801850e:	2300      	movs	r3, #0
 8018510:	75bb      	strb	r3, [r7, #22]
            break;
 8018512:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8018514:	7dbb      	ldrb	r3, [r7, #22]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d119      	bne.n	801854e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018520:	b2db      	uxtb	r3, r3
 8018522:	2b03      	cmp	r3, #3
 8018524:	d113      	bne.n	801854e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8018526:	7dba      	ldrb	r2, [r7, #22]
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	32ae      	adds	r2, #174	@ 0xae
 801852c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018530:	691b      	ldr	r3, [r3, #16]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d00b      	beq.n	801854e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8018536:	7dba      	ldrb	r2, [r7, #22]
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801853e:	7dba      	ldrb	r2, [r7, #22]
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	32ae      	adds	r2, #174	@ 0xae
 8018544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018548:	691b      	ldr	r3, [r3, #16]
 801854a:	68f8      	ldr	r0, [r7, #12]
 801854c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801854e:	68f8      	ldr	r0, [r7, #12]
 8018550:	f001 f948 	bl	80197e4 <USBD_CtlSendStatus>
 8018554:	e032      	b.n	80185bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8018556:	7afb      	ldrb	r3, [r7, #11]
 8018558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801855c:	b2db      	uxtb	r3, r3
 801855e:	4619      	mov	r1, r3
 8018560:	68f8      	ldr	r0, [r7, #12]
 8018562:	f000 fa31 	bl	80189c8 <USBD_CoreFindEP>
 8018566:	4603      	mov	r3, r0
 8018568:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801856a:	7dbb      	ldrb	r3, [r7, #22]
 801856c:	2bff      	cmp	r3, #255	@ 0xff
 801856e:	d025      	beq.n	80185bc <USBD_LL_DataOutStage+0x15c>
 8018570:	7dbb      	ldrb	r3, [r7, #22]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d122      	bne.n	80185bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801857c:	b2db      	uxtb	r3, r3
 801857e:	2b03      	cmp	r3, #3
 8018580:	d117      	bne.n	80185b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8018582:	7dba      	ldrb	r2, [r7, #22]
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	32ae      	adds	r2, #174	@ 0xae
 8018588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801858c:	699b      	ldr	r3, [r3, #24]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d00f      	beq.n	80185b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8018592:	7dba      	ldrb	r2, [r7, #22]
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801859a:	7dba      	ldrb	r2, [r7, #22]
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	32ae      	adds	r2, #174	@ 0xae
 80185a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185a4:	699b      	ldr	r3, [r3, #24]
 80185a6:	7afa      	ldrb	r2, [r7, #11]
 80185a8:	4611      	mov	r1, r2
 80185aa:	68f8      	ldr	r0, [r7, #12]
 80185ac:	4798      	blx	r3
 80185ae:	4603      	mov	r3, r0
 80185b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80185b2:	7dfb      	ldrb	r3, [r7, #23]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d001      	beq.n	80185bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80185b8:	7dfb      	ldrb	r3, [r7, #23]
 80185ba:	e000      	b.n	80185be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80185bc:	2300      	movs	r3, #0
}
 80185be:	4618      	mov	r0, r3
 80185c0:	3718      	adds	r7, #24
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}

080185c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80185c6:	b580      	push	{r7, lr}
 80185c8:	b086      	sub	sp, #24
 80185ca:	af00      	add	r7, sp, #0
 80185cc:	60f8      	str	r0, [r7, #12]
 80185ce:	460b      	mov	r3, r1
 80185d0:	607a      	str	r2, [r7, #4]
 80185d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80185d4:	7afb      	ldrb	r3, [r7, #11]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d16f      	bne.n	80186ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	3314      	adds	r3, #20
 80185de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80185e6:	2b02      	cmp	r3, #2
 80185e8:	d15a      	bne.n	80186a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	689a      	ldr	r2, [r3, #8]
 80185ee:	693b      	ldr	r3, [r7, #16]
 80185f0:	68db      	ldr	r3, [r3, #12]
 80185f2:	429a      	cmp	r2, r3
 80185f4:	d914      	bls.n	8018620 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80185f6:	693b      	ldr	r3, [r7, #16]
 80185f8:	689a      	ldr	r2, [r3, #8]
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	68db      	ldr	r3, [r3, #12]
 80185fe:	1ad2      	subs	r2, r2, r3
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	689b      	ldr	r3, [r3, #8]
 8018608:	461a      	mov	r2, r3
 801860a:	6879      	ldr	r1, [r7, #4]
 801860c:	68f8      	ldr	r0, [r7, #12]
 801860e:	f001 f8aa 	bl	8019766 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018612:	2300      	movs	r3, #0
 8018614:	2200      	movs	r2, #0
 8018616:	2100      	movs	r1, #0
 8018618:	68f8      	ldr	r0, [r7, #12]
 801861a:	f004 fec9 	bl	801d3b0 <USBD_LL_PrepareReceive>
 801861e:	e03f      	b.n	80186a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018620:	693b      	ldr	r3, [r7, #16]
 8018622:	68da      	ldr	r2, [r3, #12]
 8018624:	693b      	ldr	r3, [r7, #16]
 8018626:	689b      	ldr	r3, [r3, #8]
 8018628:	429a      	cmp	r2, r3
 801862a:	d11c      	bne.n	8018666 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801862c:	693b      	ldr	r3, [r7, #16]
 801862e:	685a      	ldr	r2, [r3, #4]
 8018630:	693b      	ldr	r3, [r7, #16]
 8018632:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018634:	429a      	cmp	r2, r3
 8018636:	d316      	bcc.n	8018666 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8018638:	693b      	ldr	r3, [r7, #16]
 801863a:	685a      	ldr	r2, [r3, #4]
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018642:	429a      	cmp	r2, r3
 8018644:	d20f      	bcs.n	8018666 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018646:	2200      	movs	r2, #0
 8018648:	2100      	movs	r1, #0
 801864a:	68f8      	ldr	r0, [r7, #12]
 801864c:	f001 f88b 	bl	8019766 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	2200      	movs	r2, #0
 8018654:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018658:	2300      	movs	r3, #0
 801865a:	2200      	movs	r2, #0
 801865c:	2100      	movs	r1, #0
 801865e:	68f8      	ldr	r0, [r7, #12]
 8018660:	f004 fea6 	bl	801d3b0 <USBD_LL_PrepareReceive>
 8018664:	e01c      	b.n	80186a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801866c:	b2db      	uxtb	r3, r3
 801866e:	2b03      	cmp	r3, #3
 8018670:	d10f      	bne.n	8018692 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018678:	68db      	ldr	r3, [r3, #12]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d009      	beq.n	8018692 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	2200      	movs	r2, #0
 8018682:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801868c:	68db      	ldr	r3, [r3, #12]
 801868e:	68f8      	ldr	r0, [r7, #12]
 8018690:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018692:	2180      	movs	r1, #128	@ 0x80
 8018694:	68f8      	ldr	r0, [r7, #12]
 8018696:	f004 fde1 	bl	801d25c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801869a:	68f8      	ldr	r0, [r7, #12]
 801869c:	f001 f8b5 	bl	801980a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d03a      	beq.n	8018720 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80186aa:	68f8      	ldr	r0, [r7, #12]
 80186ac:	f7ff fe42 	bl	8018334 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	2200      	movs	r2, #0
 80186b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80186b8:	e032      	b.n	8018720 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80186ba:	7afb      	ldrb	r3, [r7, #11]
 80186bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80186c0:	b2db      	uxtb	r3, r3
 80186c2:	4619      	mov	r1, r3
 80186c4:	68f8      	ldr	r0, [r7, #12]
 80186c6:	f000 f97f 	bl	80189c8 <USBD_CoreFindEP>
 80186ca:	4603      	mov	r3, r0
 80186cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80186ce:	7dfb      	ldrb	r3, [r7, #23]
 80186d0:	2bff      	cmp	r3, #255	@ 0xff
 80186d2:	d025      	beq.n	8018720 <USBD_LL_DataInStage+0x15a>
 80186d4:	7dfb      	ldrb	r3, [r7, #23]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d122      	bne.n	8018720 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80186e0:	b2db      	uxtb	r3, r3
 80186e2:	2b03      	cmp	r3, #3
 80186e4:	d11c      	bne.n	8018720 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80186e6:	7dfa      	ldrb	r2, [r7, #23]
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	32ae      	adds	r2, #174	@ 0xae
 80186ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186f0:	695b      	ldr	r3, [r3, #20]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d014      	beq.n	8018720 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80186f6:	7dfa      	ldrb	r2, [r7, #23]
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80186fe:	7dfa      	ldrb	r2, [r7, #23]
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	32ae      	adds	r2, #174	@ 0xae
 8018704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018708:	695b      	ldr	r3, [r3, #20]
 801870a:	7afa      	ldrb	r2, [r7, #11]
 801870c:	4611      	mov	r1, r2
 801870e:	68f8      	ldr	r0, [r7, #12]
 8018710:	4798      	blx	r3
 8018712:	4603      	mov	r3, r0
 8018714:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018716:	7dbb      	ldrb	r3, [r7, #22]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d001      	beq.n	8018720 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801871c:	7dbb      	ldrb	r3, [r7, #22]
 801871e:	e000      	b.n	8018722 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018720:	2300      	movs	r3, #0
}
 8018722:	4618      	mov	r0, r3
 8018724:	3718      	adds	r7, #24
 8018726:	46bd      	mov	sp, r7
 8018728:	bd80      	pop	{r7, pc}

0801872a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801872a:	b580      	push	{r7, lr}
 801872c:	b084      	sub	sp, #16
 801872e:	af00      	add	r7, sp, #0
 8018730:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8018732:	2300      	movs	r3, #0
 8018734:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	2201      	movs	r2, #1
 801873a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	2200      	movs	r2, #0
 8018742:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	2200      	movs	r2, #0
 801874a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	2200      	movs	r2, #0
 8018750:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2200      	movs	r2, #0
 8018758:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018762:	2b00      	cmp	r3, #0
 8018764:	d014      	beq.n	8018790 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801876c:	685b      	ldr	r3, [r3, #4]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d00e      	beq.n	8018790 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018778:	685b      	ldr	r3, [r3, #4]
 801877a:	687a      	ldr	r2, [r7, #4]
 801877c:	6852      	ldr	r2, [r2, #4]
 801877e:	b2d2      	uxtb	r2, r2
 8018780:	4611      	mov	r1, r2
 8018782:	6878      	ldr	r0, [r7, #4]
 8018784:	4798      	blx	r3
 8018786:	4603      	mov	r3, r0
 8018788:	2b00      	cmp	r3, #0
 801878a:	d001      	beq.n	8018790 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801878c:	2303      	movs	r3, #3
 801878e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018790:	2340      	movs	r3, #64	@ 0x40
 8018792:	2200      	movs	r2, #0
 8018794:	2100      	movs	r1, #0
 8018796:	6878      	ldr	r0, [r7, #4]
 8018798:	f004 fd1b 	bl	801d1d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2201      	movs	r2, #1
 80187a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2240      	movs	r2, #64	@ 0x40
 80187a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80187ac:	2340      	movs	r3, #64	@ 0x40
 80187ae:	2200      	movs	r2, #0
 80187b0:	2180      	movs	r1, #128	@ 0x80
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f004 fd0d 	bl	801d1d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2201      	movs	r2, #1
 80187bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	2240      	movs	r2, #64	@ 0x40
 80187c2:	621a      	str	r2, [r3, #32]

  return ret;
 80187c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}

080187ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80187ce:	b480      	push	{r7}
 80187d0:	b083      	sub	sp, #12
 80187d2:	af00      	add	r7, sp, #0
 80187d4:	6078      	str	r0, [r7, #4]
 80187d6:	460b      	mov	r3, r1
 80187d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	78fa      	ldrb	r2, [r7, #3]
 80187de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80187e0:	2300      	movs	r3, #0
}
 80187e2:	4618      	mov	r0, r3
 80187e4:	370c      	adds	r7, #12
 80187e6:	46bd      	mov	sp, r7
 80187e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ec:	4770      	bx	lr

080187ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80187ee:	b480      	push	{r7}
 80187f0:	b083      	sub	sp, #12
 80187f2:	af00      	add	r7, sp, #0
 80187f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80187fc:	b2da      	uxtb	r2, r3
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2204      	movs	r2, #4
 8018808:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801880c:	2300      	movs	r3, #0
}
 801880e:	4618      	mov	r0, r3
 8018810:	370c      	adds	r7, #12
 8018812:	46bd      	mov	sp, r7
 8018814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018818:	4770      	bx	lr

0801881a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801881a:	b480      	push	{r7}
 801881c:	b083      	sub	sp, #12
 801881e:	af00      	add	r7, sp, #0
 8018820:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018828:	b2db      	uxtb	r3, r3
 801882a:	2b04      	cmp	r3, #4
 801882c:	d106      	bne.n	801883c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8018834:	b2da      	uxtb	r2, r3
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801883c:	2300      	movs	r3, #0
}
 801883e:	4618      	mov	r0, r3
 8018840:	370c      	adds	r7, #12
 8018842:	46bd      	mov	sp, r7
 8018844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018848:	4770      	bx	lr

0801884a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801884a:	b580      	push	{r7, lr}
 801884c:	b082      	sub	sp, #8
 801884e:	af00      	add	r7, sp, #0
 8018850:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018858:	b2db      	uxtb	r3, r3
 801885a:	2b03      	cmp	r3, #3
 801885c:	d110      	bne.n	8018880 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018864:	2b00      	cmp	r3, #0
 8018866:	d00b      	beq.n	8018880 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801886e:	69db      	ldr	r3, [r3, #28]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d005      	beq.n	8018880 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801887a:	69db      	ldr	r3, [r3, #28]
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8018880:	2300      	movs	r3, #0
}
 8018882:	4618      	mov	r0, r3
 8018884:	3708      	adds	r7, #8
 8018886:	46bd      	mov	sp, r7
 8018888:	bd80      	pop	{r7, pc}

0801888a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801888a:	b580      	push	{r7, lr}
 801888c:	b082      	sub	sp, #8
 801888e:	af00      	add	r7, sp, #0
 8018890:	6078      	str	r0, [r7, #4]
 8018892:	460b      	mov	r3, r1
 8018894:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	32ae      	adds	r2, #174	@ 0xae
 80188a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d101      	bne.n	80188ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80188a8:	2303      	movs	r3, #3
 80188aa:	e01c      	b.n	80188e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80188b2:	b2db      	uxtb	r3, r3
 80188b4:	2b03      	cmp	r3, #3
 80188b6:	d115      	bne.n	80188e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	32ae      	adds	r2, #174	@ 0xae
 80188c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188c6:	6a1b      	ldr	r3, [r3, #32]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d00b      	beq.n	80188e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	32ae      	adds	r2, #174	@ 0xae
 80188d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188da:	6a1b      	ldr	r3, [r3, #32]
 80188dc:	78fa      	ldrb	r2, [r7, #3]
 80188de:	4611      	mov	r1, r2
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80188e4:	2300      	movs	r3, #0
}
 80188e6:	4618      	mov	r0, r3
 80188e8:	3708      	adds	r7, #8
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}

080188ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80188ee:	b580      	push	{r7, lr}
 80188f0:	b082      	sub	sp, #8
 80188f2:	af00      	add	r7, sp, #0
 80188f4:	6078      	str	r0, [r7, #4]
 80188f6:	460b      	mov	r3, r1
 80188f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	32ae      	adds	r2, #174	@ 0xae
 8018904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d101      	bne.n	8018910 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801890c:	2303      	movs	r3, #3
 801890e:	e01c      	b.n	801894a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018916:	b2db      	uxtb	r3, r3
 8018918:	2b03      	cmp	r3, #3
 801891a:	d115      	bne.n	8018948 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	32ae      	adds	r2, #174	@ 0xae
 8018926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801892c:	2b00      	cmp	r3, #0
 801892e:	d00b      	beq.n	8018948 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	32ae      	adds	r2, #174	@ 0xae
 801893a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801893e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018940:	78fa      	ldrb	r2, [r7, #3]
 8018942:	4611      	mov	r1, r2
 8018944:	6878      	ldr	r0, [r7, #4]
 8018946:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018948:	2300      	movs	r3, #0
}
 801894a:	4618      	mov	r0, r3
 801894c:	3708      	adds	r7, #8
 801894e:	46bd      	mov	sp, r7
 8018950:	bd80      	pop	{r7, pc}

08018952 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018952:	b480      	push	{r7}
 8018954:	b083      	sub	sp, #12
 8018956:	af00      	add	r7, sp, #0
 8018958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801895a:	2300      	movs	r3, #0
}
 801895c:	4618      	mov	r0, r3
 801895e:	370c      	adds	r7, #12
 8018960:	46bd      	mov	sp, r7
 8018962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018966:	4770      	bx	lr

08018968 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8018970:	2300      	movs	r3, #0
 8018972:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	2201      	movs	r2, #1
 8018978:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018982:	2b00      	cmp	r3, #0
 8018984:	d00e      	beq.n	80189a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801898c:	685b      	ldr	r3, [r3, #4]
 801898e:	687a      	ldr	r2, [r7, #4]
 8018990:	6852      	ldr	r2, [r2, #4]
 8018992:	b2d2      	uxtb	r2, r2
 8018994:	4611      	mov	r1, r2
 8018996:	6878      	ldr	r0, [r7, #4]
 8018998:	4798      	blx	r3
 801899a:	4603      	mov	r3, r0
 801899c:	2b00      	cmp	r3, #0
 801899e:	d001      	beq.n	80189a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80189a0:	2303      	movs	r3, #3
 80189a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80189a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80189a6:	4618      	mov	r0, r3
 80189a8:	3710      	adds	r7, #16
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}

080189ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80189ae:	b480      	push	{r7}
 80189b0:	b083      	sub	sp, #12
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	6078      	str	r0, [r7, #4]
 80189b6:	460b      	mov	r3, r1
 80189b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80189ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80189bc:	4618      	mov	r0, r3
 80189be:	370c      	adds	r7, #12
 80189c0:	46bd      	mov	sp, r7
 80189c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c6:	4770      	bx	lr

080189c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80189c8:	b480      	push	{r7}
 80189ca:	b083      	sub	sp, #12
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	460b      	mov	r3, r1
 80189d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80189d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	370c      	adds	r7, #12
 80189da:	46bd      	mov	sp, r7
 80189dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e0:	4770      	bx	lr

080189e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80189e2:	b580      	push	{r7, lr}
 80189e4:	b086      	sub	sp, #24
 80189e6:	af00      	add	r7, sp, #0
 80189e8:	6078      	str	r0, [r7, #4]
 80189ea:	460b      	mov	r3, r1
 80189ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80189f6:	2300      	movs	r3, #0
 80189f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	885b      	ldrh	r3, [r3, #2]
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	68fa      	ldr	r2, [r7, #12]
 8018a02:	7812      	ldrb	r2, [r2, #0]
 8018a04:	4293      	cmp	r3, r2
 8018a06:	d91f      	bls.n	8018a48 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	781b      	ldrb	r3, [r3, #0]
 8018a0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018a0e:	e013      	b.n	8018a38 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018a10:	f107 030a 	add.w	r3, r7, #10
 8018a14:	4619      	mov	r1, r3
 8018a16:	6978      	ldr	r0, [r7, #20]
 8018a18:	f000 f81b 	bl	8018a52 <USBD_GetNextDesc>
 8018a1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018a1e:	697b      	ldr	r3, [r7, #20]
 8018a20:	785b      	ldrb	r3, [r3, #1]
 8018a22:	2b05      	cmp	r3, #5
 8018a24:	d108      	bne.n	8018a38 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8018a26:	697b      	ldr	r3, [r7, #20]
 8018a28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	789b      	ldrb	r3, [r3, #2]
 8018a2e:	78fa      	ldrb	r2, [r7, #3]
 8018a30:	429a      	cmp	r2, r3
 8018a32:	d008      	beq.n	8018a46 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018a34:	2300      	movs	r3, #0
 8018a36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	885b      	ldrh	r3, [r3, #2]
 8018a3c:	b29a      	uxth	r2, r3
 8018a3e:	897b      	ldrh	r3, [r7, #10]
 8018a40:	429a      	cmp	r2, r3
 8018a42:	d8e5      	bhi.n	8018a10 <USBD_GetEpDesc+0x2e>
 8018a44:	e000      	b.n	8018a48 <USBD_GetEpDesc+0x66>
          break;
 8018a46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8018a48:	693b      	ldr	r3, [r7, #16]
}
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	3718      	adds	r7, #24
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}

08018a52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8018a52:	b480      	push	{r7}
 8018a54:	b085      	sub	sp, #20
 8018a56:	af00      	add	r7, sp, #0
 8018a58:	6078      	str	r0, [r7, #4]
 8018a5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	881b      	ldrh	r3, [r3, #0]
 8018a64:	68fa      	ldr	r2, [r7, #12]
 8018a66:	7812      	ldrb	r2, [r2, #0]
 8018a68:	4413      	add	r3, r2
 8018a6a:	b29a      	uxth	r2, r3
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	461a      	mov	r2, r3
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	4413      	add	r3, r2
 8018a7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018a7c:	68fb      	ldr	r3, [r7, #12]
}
 8018a7e:	4618      	mov	r0, r3
 8018a80:	3714      	adds	r7, #20
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr

08018a8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018a8a:	b480      	push	{r7}
 8018a8c:	b087      	sub	sp, #28
 8018a8e:	af00      	add	r7, sp, #0
 8018a90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	3301      	adds	r3, #1
 8018aa0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018aa8:	8a3b      	ldrh	r3, [r7, #16]
 8018aaa:	021b      	lsls	r3, r3, #8
 8018aac:	b21a      	sxth	r2, r3
 8018aae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018ab2:	4313      	orrs	r3, r2
 8018ab4:	b21b      	sxth	r3, r3
 8018ab6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8018aba:	4618      	mov	r0, r3
 8018abc:	371c      	adds	r7, #28
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac4:	4770      	bx	lr
	...

08018ac8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b084      	sub	sp, #16
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
 8018ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018ade:	2b40      	cmp	r3, #64	@ 0x40
 8018ae0:	d005      	beq.n	8018aee <USBD_StdDevReq+0x26>
 8018ae2:	2b40      	cmp	r3, #64	@ 0x40
 8018ae4:	d857      	bhi.n	8018b96 <USBD_StdDevReq+0xce>
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d00f      	beq.n	8018b0a <USBD_StdDevReq+0x42>
 8018aea:	2b20      	cmp	r3, #32
 8018aec:	d153      	bne.n	8018b96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	32ae      	adds	r2, #174	@ 0xae
 8018af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018afc:	689b      	ldr	r3, [r3, #8]
 8018afe:	6839      	ldr	r1, [r7, #0]
 8018b00:	6878      	ldr	r0, [r7, #4]
 8018b02:	4798      	blx	r3
 8018b04:	4603      	mov	r3, r0
 8018b06:	73fb      	strb	r3, [r7, #15]
      break;
 8018b08:	e04a      	b.n	8018ba0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	785b      	ldrb	r3, [r3, #1]
 8018b0e:	2b09      	cmp	r3, #9
 8018b10:	d83b      	bhi.n	8018b8a <USBD_StdDevReq+0xc2>
 8018b12:	a201      	add	r2, pc, #4	@ (adr r2, 8018b18 <USBD_StdDevReq+0x50>)
 8018b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b18:	08018b6d 	.word	0x08018b6d
 8018b1c:	08018b81 	.word	0x08018b81
 8018b20:	08018b8b 	.word	0x08018b8b
 8018b24:	08018b77 	.word	0x08018b77
 8018b28:	08018b8b 	.word	0x08018b8b
 8018b2c:	08018b4b 	.word	0x08018b4b
 8018b30:	08018b41 	.word	0x08018b41
 8018b34:	08018b8b 	.word	0x08018b8b
 8018b38:	08018b63 	.word	0x08018b63
 8018b3c:	08018b55 	.word	0x08018b55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018b40:	6839      	ldr	r1, [r7, #0]
 8018b42:	6878      	ldr	r0, [r7, #4]
 8018b44:	f000 fa3c 	bl	8018fc0 <USBD_GetDescriptor>
          break;
 8018b48:	e024      	b.n	8018b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018b4a:	6839      	ldr	r1, [r7, #0]
 8018b4c:	6878      	ldr	r0, [r7, #4]
 8018b4e:	f000 fba1 	bl	8019294 <USBD_SetAddress>
          break;
 8018b52:	e01f      	b.n	8018b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018b54:	6839      	ldr	r1, [r7, #0]
 8018b56:	6878      	ldr	r0, [r7, #4]
 8018b58:	f000 fbe0 	bl	801931c <USBD_SetConfig>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	73fb      	strb	r3, [r7, #15]
          break;
 8018b60:	e018      	b.n	8018b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018b62:	6839      	ldr	r1, [r7, #0]
 8018b64:	6878      	ldr	r0, [r7, #4]
 8018b66:	f000 fc83 	bl	8019470 <USBD_GetConfig>
          break;
 8018b6a:	e013      	b.n	8018b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018b6c:	6839      	ldr	r1, [r7, #0]
 8018b6e:	6878      	ldr	r0, [r7, #4]
 8018b70:	f000 fcb4 	bl	80194dc <USBD_GetStatus>
          break;
 8018b74:	e00e      	b.n	8018b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018b76:	6839      	ldr	r1, [r7, #0]
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f000 fce3 	bl	8019544 <USBD_SetFeature>
          break;
 8018b7e:	e009      	b.n	8018b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018b80:	6839      	ldr	r1, [r7, #0]
 8018b82:	6878      	ldr	r0, [r7, #4]
 8018b84:	f000 fd07 	bl	8019596 <USBD_ClrFeature>
          break;
 8018b88:	e004      	b.n	8018b94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8018b8a:	6839      	ldr	r1, [r7, #0]
 8018b8c:	6878      	ldr	r0, [r7, #4]
 8018b8e:	f000 fd5e 	bl	801964e <USBD_CtlError>
          break;
 8018b92:	bf00      	nop
      }
      break;
 8018b94:	e004      	b.n	8018ba0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8018b96:	6839      	ldr	r1, [r7, #0]
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f000 fd58 	bl	801964e <USBD_CtlError>
      break;
 8018b9e:	bf00      	nop
  }

  return ret;
 8018ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop

08018bac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b084      	sub	sp, #16
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
 8018bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018bc2:	2b40      	cmp	r3, #64	@ 0x40
 8018bc4:	d005      	beq.n	8018bd2 <USBD_StdItfReq+0x26>
 8018bc6:	2b40      	cmp	r3, #64	@ 0x40
 8018bc8:	d852      	bhi.n	8018c70 <USBD_StdItfReq+0xc4>
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d001      	beq.n	8018bd2 <USBD_StdItfReq+0x26>
 8018bce:	2b20      	cmp	r3, #32
 8018bd0:	d14e      	bne.n	8018c70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	3b01      	subs	r3, #1
 8018bdc:	2b02      	cmp	r3, #2
 8018bde:	d840      	bhi.n	8018c62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	889b      	ldrh	r3, [r3, #4]
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d836      	bhi.n	8018c58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	889b      	ldrh	r3, [r3, #4]
 8018bee:	b2db      	uxtb	r3, r3
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	6878      	ldr	r0, [r7, #4]
 8018bf4:	f7ff fedb 	bl	80189ae <USBD_CoreFindIF>
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018bfc:	7bbb      	ldrb	r3, [r7, #14]
 8018bfe:	2bff      	cmp	r3, #255	@ 0xff
 8018c00:	d01d      	beq.n	8018c3e <USBD_StdItfReq+0x92>
 8018c02:	7bbb      	ldrb	r3, [r7, #14]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d11a      	bne.n	8018c3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8018c08:	7bba      	ldrb	r2, [r7, #14]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	32ae      	adds	r2, #174	@ 0xae
 8018c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c12:	689b      	ldr	r3, [r3, #8]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d00f      	beq.n	8018c38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8018c18:	7bba      	ldrb	r2, [r7, #14]
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018c20:	7bba      	ldrb	r2, [r7, #14]
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	32ae      	adds	r2, #174	@ 0xae
 8018c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c2a:	689b      	ldr	r3, [r3, #8]
 8018c2c:	6839      	ldr	r1, [r7, #0]
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	4798      	blx	r3
 8018c32:	4603      	mov	r3, r0
 8018c34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018c36:	e004      	b.n	8018c42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8018c38:	2303      	movs	r3, #3
 8018c3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018c3c:	e001      	b.n	8018c42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8018c3e:	2303      	movs	r3, #3
 8018c40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018c42:	683b      	ldr	r3, [r7, #0]
 8018c44:	88db      	ldrh	r3, [r3, #6]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d110      	bne.n	8018c6c <USBD_StdItfReq+0xc0>
 8018c4a:	7bfb      	ldrb	r3, [r7, #15]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d10d      	bne.n	8018c6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f000 fdc7 	bl	80197e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018c56:	e009      	b.n	8018c6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8018c58:	6839      	ldr	r1, [r7, #0]
 8018c5a:	6878      	ldr	r0, [r7, #4]
 8018c5c:	f000 fcf7 	bl	801964e <USBD_CtlError>
          break;
 8018c60:	e004      	b.n	8018c6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8018c62:	6839      	ldr	r1, [r7, #0]
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f000 fcf2 	bl	801964e <USBD_CtlError>
          break;
 8018c6a:	e000      	b.n	8018c6e <USBD_StdItfReq+0xc2>
          break;
 8018c6c:	bf00      	nop
      }
      break;
 8018c6e:	e004      	b.n	8018c7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8018c70:	6839      	ldr	r1, [r7, #0]
 8018c72:	6878      	ldr	r0, [r7, #4]
 8018c74:	f000 fceb 	bl	801964e <USBD_CtlError>
      break;
 8018c78:	bf00      	nop
  }

  return ret;
 8018c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3710      	adds	r7, #16
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b084      	sub	sp, #16
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
 8018c8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8018c8e:	2300      	movs	r3, #0
 8018c90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	889b      	ldrh	r3, [r3, #4]
 8018c96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018ca0:	2b40      	cmp	r3, #64	@ 0x40
 8018ca2:	d007      	beq.n	8018cb4 <USBD_StdEPReq+0x30>
 8018ca4:	2b40      	cmp	r3, #64	@ 0x40
 8018ca6:	f200 817f 	bhi.w	8018fa8 <USBD_StdEPReq+0x324>
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d02a      	beq.n	8018d04 <USBD_StdEPReq+0x80>
 8018cae:	2b20      	cmp	r3, #32
 8018cb0:	f040 817a 	bne.w	8018fa8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8018cb4:	7bbb      	ldrb	r3, [r7, #14]
 8018cb6:	4619      	mov	r1, r3
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	f7ff fe85 	bl	80189c8 <USBD_CoreFindEP>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018cc2:	7b7b      	ldrb	r3, [r7, #13]
 8018cc4:	2bff      	cmp	r3, #255	@ 0xff
 8018cc6:	f000 8174 	beq.w	8018fb2 <USBD_StdEPReq+0x32e>
 8018cca:	7b7b      	ldrb	r3, [r7, #13]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	f040 8170 	bne.w	8018fb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8018cd2:	7b7a      	ldrb	r2, [r7, #13]
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8018cda:	7b7a      	ldrb	r2, [r7, #13]
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	32ae      	adds	r2, #174	@ 0xae
 8018ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ce4:	689b      	ldr	r3, [r3, #8]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	f000 8163 	beq.w	8018fb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018cec:	7b7a      	ldrb	r2, [r7, #13]
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	32ae      	adds	r2, #174	@ 0xae
 8018cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018cf6:	689b      	ldr	r3, [r3, #8]
 8018cf8:	6839      	ldr	r1, [r7, #0]
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	4798      	blx	r3
 8018cfe:	4603      	mov	r3, r0
 8018d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8018d02:	e156      	b.n	8018fb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	785b      	ldrb	r3, [r3, #1]
 8018d08:	2b03      	cmp	r3, #3
 8018d0a:	d008      	beq.n	8018d1e <USBD_StdEPReq+0x9a>
 8018d0c:	2b03      	cmp	r3, #3
 8018d0e:	f300 8145 	bgt.w	8018f9c <USBD_StdEPReq+0x318>
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	f000 809b 	beq.w	8018e4e <USBD_StdEPReq+0x1ca>
 8018d18:	2b01      	cmp	r3, #1
 8018d1a:	d03c      	beq.n	8018d96 <USBD_StdEPReq+0x112>
 8018d1c:	e13e      	b.n	8018f9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	2b02      	cmp	r3, #2
 8018d28:	d002      	beq.n	8018d30 <USBD_StdEPReq+0xac>
 8018d2a:	2b03      	cmp	r3, #3
 8018d2c:	d016      	beq.n	8018d5c <USBD_StdEPReq+0xd8>
 8018d2e:	e02c      	b.n	8018d8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018d30:	7bbb      	ldrb	r3, [r7, #14]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d00d      	beq.n	8018d52 <USBD_StdEPReq+0xce>
 8018d36:	7bbb      	ldrb	r3, [r7, #14]
 8018d38:	2b80      	cmp	r3, #128	@ 0x80
 8018d3a:	d00a      	beq.n	8018d52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018d3c:	7bbb      	ldrb	r3, [r7, #14]
 8018d3e:	4619      	mov	r1, r3
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f004 fa8b 	bl	801d25c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018d46:	2180      	movs	r1, #128	@ 0x80
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f004 fa87 	bl	801d25c <USBD_LL_StallEP>
 8018d4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018d50:	e020      	b.n	8018d94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8018d52:	6839      	ldr	r1, [r7, #0]
 8018d54:	6878      	ldr	r0, [r7, #4]
 8018d56:	f000 fc7a 	bl	801964e <USBD_CtlError>
              break;
 8018d5a:	e01b      	b.n	8018d94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	885b      	ldrh	r3, [r3, #2]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d10e      	bne.n	8018d82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018d64:	7bbb      	ldrb	r3, [r7, #14]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d00b      	beq.n	8018d82 <USBD_StdEPReq+0xfe>
 8018d6a:	7bbb      	ldrb	r3, [r7, #14]
 8018d6c:	2b80      	cmp	r3, #128	@ 0x80
 8018d6e:	d008      	beq.n	8018d82 <USBD_StdEPReq+0xfe>
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	88db      	ldrh	r3, [r3, #6]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d104      	bne.n	8018d82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8018d78:	7bbb      	ldrb	r3, [r7, #14]
 8018d7a:	4619      	mov	r1, r3
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f004 fa6d 	bl	801d25c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8018d82:	6878      	ldr	r0, [r7, #4]
 8018d84:	f000 fd2e 	bl	80197e4 <USBD_CtlSendStatus>

              break;
 8018d88:	e004      	b.n	8018d94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8018d8a:	6839      	ldr	r1, [r7, #0]
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f000 fc5e 	bl	801964e <USBD_CtlError>
              break;
 8018d92:	bf00      	nop
          }
          break;
 8018d94:	e107      	b.n	8018fa6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d9c:	b2db      	uxtb	r3, r3
 8018d9e:	2b02      	cmp	r3, #2
 8018da0:	d002      	beq.n	8018da8 <USBD_StdEPReq+0x124>
 8018da2:	2b03      	cmp	r3, #3
 8018da4:	d016      	beq.n	8018dd4 <USBD_StdEPReq+0x150>
 8018da6:	e04b      	b.n	8018e40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018da8:	7bbb      	ldrb	r3, [r7, #14]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d00d      	beq.n	8018dca <USBD_StdEPReq+0x146>
 8018dae:	7bbb      	ldrb	r3, [r7, #14]
 8018db0:	2b80      	cmp	r3, #128	@ 0x80
 8018db2:	d00a      	beq.n	8018dca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018db4:	7bbb      	ldrb	r3, [r7, #14]
 8018db6:	4619      	mov	r1, r3
 8018db8:	6878      	ldr	r0, [r7, #4]
 8018dba:	f004 fa4f 	bl	801d25c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018dbe:	2180      	movs	r1, #128	@ 0x80
 8018dc0:	6878      	ldr	r0, [r7, #4]
 8018dc2:	f004 fa4b 	bl	801d25c <USBD_LL_StallEP>
 8018dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018dc8:	e040      	b.n	8018e4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8018dca:	6839      	ldr	r1, [r7, #0]
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f000 fc3e 	bl	801964e <USBD_CtlError>
              break;
 8018dd2:	e03b      	b.n	8018e4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	885b      	ldrh	r3, [r3, #2]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d136      	bne.n	8018e4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018ddc:	7bbb      	ldrb	r3, [r7, #14]
 8018dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d004      	beq.n	8018df0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018de6:	7bbb      	ldrb	r3, [r7, #14]
 8018de8:	4619      	mov	r1, r3
 8018dea:	6878      	ldr	r0, [r7, #4]
 8018dec:	f004 fa55 	bl	801d29a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f000 fcf7 	bl	80197e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8018df6:	7bbb      	ldrb	r3, [r7, #14]
 8018df8:	4619      	mov	r1, r3
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f7ff fde4 	bl	80189c8 <USBD_CoreFindEP>
 8018e00:	4603      	mov	r3, r0
 8018e02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018e04:	7b7b      	ldrb	r3, [r7, #13]
 8018e06:	2bff      	cmp	r3, #255	@ 0xff
 8018e08:	d01f      	beq.n	8018e4a <USBD_StdEPReq+0x1c6>
 8018e0a:	7b7b      	ldrb	r3, [r7, #13]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d11c      	bne.n	8018e4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8018e10:	7b7a      	ldrb	r2, [r7, #13]
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8018e18:	7b7a      	ldrb	r2, [r7, #13]
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	32ae      	adds	r2, #174	@ 0xae
 8018e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e22:	689b      	ldr	r3, [r3, #8]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d010      	beq.n	8018e4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018e28:	7b7a      	ldrb	r2, [r7, #13]
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	32ae      	adds	r2, #174	@ 0xae
 8018e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e32:	689b      	ldr	r3, [r3, #8]
 8018e34:	6839      	ldr	r1, [r7, #0]
 8018e36:	6878      	ldr	r0, [r7, #4]
 8018e38:	4798      	blx	r3
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8018e3e:	e004      	b.n	8018e4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8018e40:	6839      	ldr	r1, [r7, #0]
 8018e42:	6878      	ldr	r0, [r7, #4]
 8018e44:	f000 fc03 	bl	801964e <USBD_CtlError>
              break;
 8018e48:	e000      	b.n	8018e4c <USBD_StdEPReq+0x1c8>
              break;
 8018e4a:	bf00      	nop
          }
          break;
 8018e4c:	e0ab      	b.n	8018fa6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e54:	b2db      	uxtb	r3, r3
 8018e56:	2b02      	cmp	r3, #2
 8018e58:	d002      	beq.n	8018e60 <USBD_StdEPReq+0x1dc>
 8018e5a:	2b03      	cmp	r3, #3
 8018e5c:	d032      	beq.n	8018ec4 <USBD_StdEPReq+0x240>
 8018e5e:	e097      	b.n	8018f90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018e60:	7bbb      	ldrb	r3, [r7, #14]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d007      	beq.n	8018e76 <USBD_StdEPReq+0x1f2>
 8018e66:	7bbb      	ldrb	r3, [r7, #14]
 8018e68:	2b80      	cmp	r3, #128	@ 0x80
 8018e6a:	d004      	beq.n	8018e76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8018e6c:	6839      	ldr	r1, [r7, #0]
 8018e6e:	6878      	ldr	r0, [r7, #4]
 8018e70:	f000 fbed 	bl	801964e <USBD_CtlError>
                break;
 8018e74:	e091      	b.n	8018f9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	da0b      	bge.n	8018e96 <USBD_StdEPReq+0x212>
 8018e7e:	7bbb      	ldrb	r3, [r7, #14]
 8018e80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018e84:	4613      	mov	r3, r2
 8018e86:	009b      	lsls	r3, r3, #2
 8018e88:	4413      	add	r3, r2
 8018e8a:	009b      	lsls	r3, r3, #2
 8018e8c:	3310      	adds	r3, #16
 8018e8e:	687a      	ldr	r2, [r7, #4]
 8018e90:	4413      	add	r3, r2
 8018e92:	3304      	adds	r3, #4
 8018e94:	e00b      	b.n	8018eae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018e96:	7bbb      	ldrb	r3, [r7, #14]
 8018e98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018e9c:	4613      	mov	r3, r2
 8018e9e:	009b      	lsls	r3, r3, #2
 8018ea0:	4413      	add	r3, r2
 8018ea2:	009b      	lsls	r3, r3, #2
 8018ea4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8018ea8:	687a      	ldr	r2, [r7, #4]
 8018eaa:	4413      	add	r3, r2
 8018eac:	3304      	adds	r3, #4
 8018eae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018eb6:	68bb      	ldr	r3, [r7, #8]
 8018eb8:	2202      	movs	r2, #2
 8018eba:	4619      	mov	r1, r3
 8018ebc:	6878      	ldr	r0, [r7, #4]
 8018ebe:	f000 fc37 	bl	8019730 <USBD_CtlSendData>
              break;
 8018ec2:	e06a      	b.n	8018f9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	da11      	bge.n	8018ef0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018ecc:	7bbb      	ldrb	r3, [r7, #14]
 8018ece:	f003 020f 	and.w	r2, r3, #15
 8018ed2:	6879      	ldr	r1, [r7, #4]
 8018ed4:	4613      	mov	r3, r2
 8018ed6:	009b      	lsls	r3, r3, #2
 8018ed8:	4413      	add	r3, r2
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	440b      	add	r3, r1
 8018ede:	3324      	adds	r3, #36	@ 0x24
 8018ee0:	881b      	ldrh	r3, [r3, #0]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d117      	bne.n	8018f16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018ee6:	6839      	ldr	r1, [r7, #0]
 8018ee8:	6878      	ldr	r0, [r7, #4]
 8018eea:	f000 fbb0 	bl	801964e <USBD_CtlError>
                  break;
 8018eee:	e054      	b.n	8018f9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018ef0:	7bbb      	ldrb	r3, [r7, #14]
 8018ef2:	f003 020f 	and.w	r2, r3, #15
 8018ef6:	6879      	ldr	r1, [r7, #4]
 8018ef8:	4613      	mov	r3, r2
 8018efa:	009b      	lsls	r3, r3, #2
 8018efc:	4413      	add	r3, r2
 8018efe:	009b      	lsls	r3, r3, #2
 8018f00:	440b      	add	r3, r1
 8018f02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018f06:	881b      	ldrh	r3, [r3, #0]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d104      	bne.n	8018f16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018f0c:	6839      	ldr	r1, [r7, #0]
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f000 fb9d 	bl	801964e <USBD_CtlError>
                  break;
 8018f14:	e041      	b.n	8018f9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	da0b      	bge.n	8018f36 <USBD_StdEPReq+0x2b2>
 8018f1e:	7bbb      	ldrb	r3, [r7, #14]
 8018f20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018f24:	4613      	mov	r3, r2
 8018f26:	009b      	lsls	r3, r3, #2
 8018f28:	4413      	add	r3, r2
 8018f2a:	009b      	lsls	r3, r3, #2
 8018f2c:	3310      	adds	r3, #16
 8018f2e:	687a      	ldr	r2, [r7, #4]
 8018f30:	4413      	add	r3, r2
 8018f32:	3304      	adds	r3, #4
 8018f34:	e00b      	b.n	8018f4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018f36:	7bbb      	ldrb	r3, [r7, #14]
 8018f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018f3c:	4613      	mov	r3, r2
 8018f3e:	009b      	lsls	r3, r3, #2
 8018f40:	4413      	add	r3, r2
 8018f42:	009b      	lsls	r3, r3, #2
 8018f44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8018f48:	687a      	ldr	r2, [r7, #4]
 8018f4a:	4413      	add	r3, r2
 8018f4c:	3304      	adds	r3, #4
 8018f4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018f50:	7bbb      	ldrb	r3, [r7, #14]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d002      	beq.n	8018f5c <USBD_StdEPReq+0x2d8>
 8018f56:	7bbb      	ldrb	r3, [r7, #14]
 8018f58:	2b80      	cmp	r3, #128	@ 0x80
 8018f5a:	d103      	bne.n	8018f64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8018f5c:	68bb      	ldr	r3, [r7, #8]
 8018f5e:	2200      	movs	r2, #0
 8018f60:	601a      	str	r2, [r3, #0]
 8018f62:	e00e      	b.n	8018f82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018f64:	7bbb      	ldrb	r3, [r7, #14]
 8018f66:	4619      	mov	r1, r3
 8018f68:	6878      	ldr	r0, [r7, #4]
 8018f6a:	f004 f9b5 	bl	801d2d8 <USBD_LL_IsStallEP>
 8018f6e:	4603      	mov	r3, r0
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d003      	beq.n	8018f7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	2201      	movs	r2, #1
 8018f78:	601a      	str	r2, [r3, #0]
 8018f7a:	e002      	b.n	8018f82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8018f7c:	68bb      	ldr	r3, [r7, #8]
 8018f7e:	2200      	movs	r2, #0
 8018f80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018f82:	68bb      	ldr	r3, [r7, #8]
 8018f84:	2202      	movs	r2, #2
 8018f86:	4619      	mov	r1, r3
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f000 fbd1 	bl	8019730 <USBD_CtlSendData>
              break;
 8018f8e:	e004      	b.n	8018f9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8018f90:	6839      	ldr	r1, [r7, #0]
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f000 fb5b 	bl	801964e <USBD_CtlError>
              break;
 8018f98:	bf00      	nop
          }
          break;
 8018f9a:	e004      	b.n	8018fa6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8018f9c:	6839      	ldr	r1, [r7, #0]
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	f000 fb55 	bl	801964e <USBD_CtlError>
          break;
 8018fa4:	bf00      	nop
      }
      break;
 8018fa6:	e005      	b.n	8018fb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8018fa8:	6839      	ldr	r1, [r7, #0]
 8018faa:	6878      	ldr	r0, [r7, #4]
 8018fac:	f000 fb4f 	bl	801964e <USBD_CtlError>
      break;
 8018fb0:	e000      	b.n	8018fb4 <USBD_StdEPReq+0x330>
      break;
 8018fb2:	bf00      	nop
  }

  return ret;
 8018fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	3710      	adds	r7, #16
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}
	...

08018fc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b084      	sub	sp, #16
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
 8018fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018fca:	2300      	movs	r3, #0
 8018fcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	885b      	ldrh	r3, [r3, #2]
 8018fda:	0a1b      	lsrs	r3, r3, #8
 8018fdc:	b29b      	uxth	r3, r3
 8018fde:	3b01      	subs	r3, #1
 8018fe0:	2b06      	cmp	r3, #6
 8018fe2:	f200 8128 	bhi.w	8019236 <USBD_GetDescriptor+0x276>
 8018fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8018fec <USBD_GetDescriptor+0x2c>)
 8018fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fec:	08019009 	.word	0x08019009
 8018ff0:	08019021 	.word	0x08019021
 8018ff4:	08019061 	.word	0x08019061
 8018ff8:	08019237 	.word	0x08019237
 8018ffc:	08019237 	.word	0x08019237
 8019000:	080191d7 	.word	0x080191d7
 8019004:	08019203 	.word	0x08019203
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	687a      	ldr	r2, [r7, #4]
 8019012:	7c12      	ldrb	r2, [r2, #16]
 8019014:	f107 0108 	add.w	r1, r7, #8
 8019018:	4610      	mov	r0, r2
 801901a:	4798      	blx	r3
 801901c:	60f8      	str	r0, [r7, #12]
      break;
 801901e:	e112      	b.n	8019246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	7c1b      	ldrb	r3, [r3, #16]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d10d      	bne.n	8019044 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801902e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019030:	f107 0208 	add.w	r2, r7, #8
 8019034:	4610      	mov	r0, r2
 8019036:	4798      	blx	r3
 8019038:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	3301      	adds	r3, #1
 801903e:	2202      	movs	r2, #2
 8019040:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8019042:	e100      	b.n	8019246 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801904a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801904c:	f107 0208 	add.w	r2, r7, #8
 8019050:	4610      	mov	r0, r2
 8019052:	4798      	blx	r3
 8019054:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	3301      	adds	r3, #1
 801905a:	2202      	movs	r2, #2
 801905c:	701a      	strb	r2, [r3, #0]
      break;
 801905e:	e0f2      	b.n	8019246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8019060:	683b      	ldr	r3, [r7, #0]
 8019062:	885b      	ldrh	r3, [r3, #2]
 8019064:	b2db      	uxtb	r3, r3
 8019066:	2b05      	cmp	r3, #5
 8019068:	f200 80ac 	bhi.w	80191c4 <USBD_GetDescriptor+0x204>
 801906c:	a201      	add	r2, pc, #4	@ (adr r2, 8019074 <USBD_GetDescriptor+0xb4>)
 801906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019072:	bf00      	nop
 8019074:	0801908d 	.word	0x0801908d
 8019078:	080190c1 	.word	0x080190c1
 801907c:	080190f5 	.word	0x080190f5
 8019080:	08019129 	.word	0x08019129
 8019084:	0801915d 	.word	0x0801915d
 8019088:	08019191 	.word	0x08019191
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019092:	685b      	ldr	r3, [r3, #4]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d00b      	beq.n	80190b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801909e:	685b      	ldr	r3, [r3, #4]
 80190a0:	687a      	ldr	r2, [r7, #4]
 80190a2:	7c12      	ldrb	r2, [r2, #16]
 80190a4:	f107 0108 	add.w	r1, r7, #8
 80190a8:	4610      	mov	r0, r2
 80190aa:	4798      	blx	r3
 80190ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80190ae:	e091      	b.n	80191d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80190b0:	6839      	ldr	r1, [r7, #0]
 80190b2:	6878      	ldr	r0, [r7, #4]
 80190b4:	f000 facb 	bl	801964e <USBD_CtlError>
            err++;
 80190b8:	7afb      	ldrb	r3, [r7, #11]
 80190ba:	3301      	adds	r3, #1
 80190bc:	72fb      	strb	r3, [r7, #11]
          break;
 80190be:	e089      	b.n	80191d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80190c6:	689b      	ldr	r3, [r3, #8]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d00b      	beq.n	80190e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80190d2:	689b      	ldr	r3, [r3, #8]
 80190d4:	687a      	ldr	r2, [r7, #4]
 80190d6:	7c12      	ldrb	r2, [r2, #16]
 80190d8:	f107 0108 	add.w	r1, r7, #8
 80190dc:	4610      	mov	r0, r2
 80190de:	4798      	blx	r3
 80190e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80190e2:	e077      	b.n	80191d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80190e4:	6839      	ldr	r1, [r7, #0]
 80190e6:	6878      	ldr	r0, [r7, #4]
 80190e8:	f000 fab1 	bl	801964e <USBD_CtlError>
            err++;
 80190ec:	7afb      	ldrb	r3, [r7, #11]
 80190ee:	3301      	adds	r3, #1
 80190f0:	72fb      	strb	r3, [r7, #11]
          break;
 80190f2:	e06f      	b.n	80191d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80190fa:	68db      	ldr	r3, [r3, #12]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d00b      	beq.n	8019118 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019106:	68db      	ldr	r3, [r3, #12]
 8019108:	687a      	ldr	r2, [r7, #4]
 801910a:	7c12      	ldrb	r2, [r2, #16]
 801910c:	f107 0108 	add.w	r1, r7, #8
 8019110:	4610      	mov	r0, r2
 8019112:	4798      	blx	r3
 8019114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019116:	e05d      	b.n	80191d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019118:	6839      	ldr	r1, [r7, #0]
 801911a:	6878      	ldr	r0, [r7, #4]
 801911c:	f000 fa97 	bl	801964e <USBD_CtlError>
            err++;
 8019120:	7afb      	ldrb	r3, [r7, #11]
 8019122:	3301      	adds	r3, #1
 8019124:	72fb      	strb	r3, [r7, #11]
          break;
 8019126:	e055      	b.n	80191d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801912e:	691b      	ldr	r3, [r3, #16]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d00b      	beq.n	801914c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801913a:	691b      	ldr	r3, [r3, #16]
 801913c:	687a      	ldr	r2, [r7, #4]
 801913e:	7c12      	ldrb	r2, [r2, #16]
 8019140:	f107 0108 	add.w	r1, r7, #8
 8019144:	4610      	mov	r0, r2
 8019146:	4798      	blx	r3
 8019148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801914a:	e043      	b.n	80191d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801914c:	6839      	ldr	r1, [r7, #0]
 801914e:	6878      	ldr	r0, [r7, #4]
 8019150:	f000 fa7d 	bl	801964e <USBD_CtlError>
            err++;
 8019154:	7afb      	ldrb	r3, [r7, #11]
 8019156:	3301      	adds	r3, #1
 8019158:	72fb      	strb	r3, [r7, #11]
          break;
 801915a:	e03b      	b.n	80191d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019162:	695b      	ldr	r3, [r3, #20]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d00b      	beq.n	8019180 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801916e:	695b      	ldr	r3, [r3, #20]
 8019170:	687a      	ldr	r2, [r7, #4]
 8019172:	7c12      	ldrb	r2, [r2, #16]
 8019174:	f107 0108 	add.w	r1, r7, #8
 8019178:	4610      	mov	r0, r2
 801917a:	4798      	blx	r3
 801917c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801917e:	e029      	b.n	80191d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019180:	6839      	ldr	r1, [r7, #0]
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	f000 fa63 	bl	801964e <USBD_CtlError>
            err++;
 8019188:	7afb      	ldrb	r3, [r7, #11]
 801918a:	3301      	adds	r3, #1
 801918c:	72fb      	strb	r3, [r7, #11]
          break;
 801918e:	e021      	b.n	80191d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019196:	699b      	ldr	r3, [r3, #24]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d00b      	beq.n	80191b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80191a2:	699b      	ldr	r3, [r3, #24]
 80191a4:	687a      	ldr	r2, [r7, #4]
 80191a6:	7c12      	ldrb	r2, [r2, #16]
 80191a8:	f107 0108 	add.w	r1, r7, #8
 80191ac:	4610      	mov	r0, r2
 80191ae:	4798      	blx	r3
 80191b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80191b2:	e00f      	b.n	80191d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80191b4:	6839      	ldr	r1, [r7, #0]
 80191b6:	6878      	ldr	r0, [r7, #4]
 80191b8:	f000 fa49 	bl	801964e <USBD_CtlError>
            err++;
 80191bc:	7afb      	ldrb	r3, [r7, #11]
 80191be:	3301      	adds	r3, #1
 80191c0:	72fb      	strb	r3, [r7, #11]
          break;
 80191c2:	e007      	b.n	80191d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80191c4:	6839      	ldr	r1, [r7, #0]
 80191c6:	6878      	ldr	r0, [r7, #4]
 80191c8:	f000 fa41 	bl	801964e <USBD_CtlError>
          err++;
 80191cc:	7afb      	ldrb	r3, [r7, #11]
 80191ce:	3301      	adds	r3, #1
 80191d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80191d2:	bf00      	nop
      }
      break;
 80191d4:	e037      	b.n	8019246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	7c1b      	ldrb	r3, [r3, #16]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d109      	bne.n	80191f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80191e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80191e6:	f107 0208 	add.w	r2, r7, #8
 80191ea:	4610      	mov	r0, r2
 80191ec:	4798      	blx	r3
 80191ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80191f0:	e029      	b.n	8019246 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80191f2:	6839      	ldr	r1, [r7, #0]
 80191f4:	6878      	ldr	r0, [r7, #4]
 80191f6:	f000 fa2a 	bl	801964e <USBD_CtlError>
        err++;
 80191fa:	7afb      	ldrb	r3, [r7, #11]
 80191fc:	3301      	adds	r3, #1
 80191fe:	72fb      	strb	r3, [r7, #11]
      break;
 8019200:	e021      	b.n	8019246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	7c1b      	ldrb	r3, [r3, #16]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d10d      	bne.n	8019226 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019212:	f107 0208 	add.w	r2, r7, #8
 8019216:	4610      	mov	r0, r2
 8019218:	4798      	blx	r3
 801921a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	3301      	adds	r3, #1
 8019220:	2207      	movs	r2, #7
 8019222:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019224:	e00f      	b.n	8019246 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8019226:	6839      	ldr	r1, [r7, #0]
 8019228:	6878      	ldr	r0, [r7, #4]
 801922a:	f000 fa10 	bl	801964e <USBD_CtlError>
        err++;
 801922e:	7afb      	ldrb	r3, [r7, #11]
 8019230:	3301      	adds	r3, #1
 8019232:	72fb      	strb	r3, [r7, #11]
      break;
 8019234:	e007      	b.n	8019246 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8019236:	6839      	ldr	r1, [r7, #0]
 8019238:	6878      	ldr	r0, [r7, #4]
 801923a:	f000 fa08 	bl	801964e <USBD_CtlError>
      err++;
 801923e:	7afb      	ldrb	r3, [r7, #11]
 8019240:	3301      	adds	r3, #1
 8019242:	72fb      	strb	r3, [r7, #11]
      break;
 8019244:	bf00      	nop
  }

  if (err != 0U)
 8019246:	7afb      	ldrb	r3, [r7, #11]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d11e      	bne.n	801928a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	88db      	ldrh	r3, [r3, #6]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d016      	beq.n	8019282 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8019254:	893b      	ldrh	r3, [r7, #8]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d00e      	beq.n	8019278 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	88da      	ldrh	r2, [r3, #6]
 801925e:	893b      	ldrh	r3, [r7, #8]
 8019260:	4293      	cmp	r3, r2
 8019262:	bf28      	it	cs
 8019264:	4613      	movcs	r3, r2
 8019266:	b29b      	uxth	r3, r3
 8019268:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801926a:	893b      	ldrh	r3, [r7, #8]
 801926c:	461a      	mov	r2, r3
 801926e:	68f9      	ldr	r1, [r7, #12]
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f000 fa5d 	bl	8019730 <USBD_CtlSendData>
 8019276:	e009      	b.n	801928c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019278:	6839      	ldr	r1, [r7, #0]
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f000 f9e7 	bl	801964e <USBD_CtlError>
 8019280:	e004      	b.n	801928c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8019282:	6878      	ldr	r0, [r7, #4]
 8019284:	f000 faae 	bl	80197e4 <USBD_CtlSendStatus>
 8019288:	e000      	b.n	801928c <USBD_GetDescriptor+0x2cc>
    return;
 801928a:	bf00      	nop
  }
}
 801928c:	3710      	adds	r7, #16
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
 8019292:	bf00      	nop

08019294 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b084      	sub	sp, #16
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
 801929c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	889b      	ldrh	r3, [r3, #4]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d131      	bne.n	801930a <USBD_SetAddress+0x76>
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	88db      	ldrh	r3, [r3, #6]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d12d      	bne.n	801930a <USBD_SetAddress+0x76>
 80192ae:	683b      	ldr	r3, [r7, #0]
 80192b0:	885b      	ldrh	r3, [r3, #2]
 80192b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80192b4:	d829      	bhi.n	801930a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	885b      	ldrh	r3, [r3, #2]
 80192ba:	b2db      	uxtb	r3, r3
 80192bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80192c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80192c8:	b2db      	uxtb	r3, r3
 80192ca:	2b03      	cmp	r3, #3
 80192cc:	d104      	bne.n	80192d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80192ce:	6839      	ldr	r1, [r7, #0]
 80192d0:	6878      	ldr	r0, [r7, #4]
 80192d2:	f000 f9bc 	bl	801964e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80192d6:	e01d      	b.n	8019314 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	7bfa      	ldrb	r2, [r7, #15]
 80192dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80192e0:	7bfb      	ldrb	r3, [r7, #15]
 80192e2:	4619      	mov	r1, r3
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f004 f823 	bl	801d330 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80192ea:	6878      	ldr	r0, [r7, #4]
 80192ec:	f000 fa7a 	bl	80197e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80192f0:	7bfb      	ldrb	r3, [r7, #15]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d004      	beq.n	8019300 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	2202      	movs	r2, #2
 80192fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80192fe:	e009      	b.n	8019314 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	2201      	movs	r2, #1
 8019304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019308:	e004      	b.n	8019314 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801930a:	6839      	ldr	r1, [r7, #0]
 801930c:	6878      	ldr	r0, [r7, #4]
 801930e:	f000 f99e 	bl	801964e <USBD_CtlError>
  }
}
 8019312:	bf00      	nop
 8019314:	bf00      	nop
 8019316:	3710      	adds	r7, #16
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}

0801931c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b084      	sub	sp, #16
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
 8019324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019326:	2300      	movs	r3, #0
 8019328:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	885b      	ldrh	r3, [r3, #2]
 801932e:	b2da      	uxtb	r2, r3
 8019330:	4b4e      	ldr	r3, [pc, #312]	@ (801946c <USBD_SetConfig+0x150>)
 8019332:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8019334:	4b4d      	ldr	r3, [pc, #308]	@ (801946c <USBD_SetConfig+0x150>)
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	2b01      	cmp	r3, #1
 801933a:	d905      	bls.n	8019348 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801933c:	6839      	ldr	r1, [r7, #0]
 801933e:	6878      	ldr	r0, [r7, #4]
 8019340:	f000 f985 	bl	801964e <USBD_CtlError>
    return USBD_FAIL;
 8019344:	2303      	movs	r3, #3
 8019346:	e08c      	b.n	8019462 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801934e:	b2db      	uxtb	r3, r3
 8019350:	2b02      	cmp	r3, #2
 8019352:	d002      	beq.n	801935a <USBD_SetConfig+0x3e>
 8019354:	2b03      	cmp	r3, #3
 8019356:	d029      	beq.n	80193ac <USBD_SetConfig+0x90>
 8019358:	e075      	b.n	8019446 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801935a:	4b44      	ldr	r3, [pc, #272]	@ (801946c <USBD_SetConfig+0x150>)
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d020      	beq.n	80193a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8019362:	4b42      	ldr	r3, [pc, #264]	@ (801946c <USBD_SetConfig+0x150>)
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	461a      	mov	r2, r3
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801936c:	4b3f      	ldr	r3, [pc, #252]	@ (801946c <USBD_SetConfig+0x150>)
 801936e:	781b      	ldrb	r3, [r3, #0]
 8019370:	4619      	mov	r1, r3
 8019372:	6878      	ldr	r0, [r7, #4]
 8019374:	f7fe ffe9 	bl	801834a <USBD_SetClassConfig>
 8019378:	4603      	mov	r3, r0
 801937a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801937c:	7bfb      	ldrb	r3, [r7, #15]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d008      	beq.n	8019394 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8019382:	6839      	ldr	r1, [r7, #0]
 8019384:	6878      	ldr	r0, [r7, #4]
 8019386:	f000 f962 	bl	801964e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2202      	movs	r2, #2
 801938e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019392:	e065      	b.n	8019460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019394:	6878      	ldr	r0, [r7, #4]
 8019396:	f000 fa25 	bl	80197e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2203      	movs	r2, #3
 801939e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80193a2:	e05d      	b.n	8019460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f000 fa1d 	bl	80197e4 <USBD_CtlSendStatus>
      break;
 80193aa:	e059      	b.n	8019460 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80193ac:	4b2f      	ldr	r3, [pc, #188]	@ (801946c <USBD_SetConfig+0x150>)
 80193ae:	781b      	ldrb	r3, [r3, #0]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d112      	bne.n	80193da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2202      	movs	r2, #2
 80193b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80193bc:	4b2b      	ldr	r3, [pc, #172]	@ (801946c <USBD_SetConfig+0x150>)
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	461a      	mov	r2, r3
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80193c6:	4b29      	ldr	r3, [pc, #164]	@ (801946c <USBD_SetConfig+0x150>)
 80193c8:	781b      	ldrb	r3, [r3, #0]
 80193ca:	4619      	mov	r1, r3
 80193cc:	6878      	ldr	r0, [r7, #4]
 80193ce:	f7fe ffd8 	bl	8018382 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80193d2:	6878      	ldr	r0, [r7, #4]
 80193d4:	f000 fa06 	bl	80197e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80193d8:	e042      	b.n	8019460 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80193da:	4b24      	ldr	r3, [pc, #144]	@ (801946c <USBD_SetConfig+0x150>)
 80193dc:	781b      	ldrb	r3, [r3, #0]
 80193de:	461a      	mov	r2, r3
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d02a      	beq.n	801943e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	685b      	ldr	r3, [r3, #4]
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	4619      	mov	r1, r3
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f7fe ffc6 	bl	8018382 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80193f6:	4b1d      	ldr	r3, [pc, #116]	@ (801946c <USBD_SetConfig+0x150>)
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	461a      	mov	r2, r3
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019400:	4b1a      	ldr	r3, [pc, #104]	@ (801946c <USBD_SetConfig+0x150>)
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	4619      	mov	r1, r3
 8019406:	6878      	ldr	r0, [r7, #4]
 8019408:	f7fe ff9f 	bl	801834a <USBD_SetClassConfig>
 801940c:	4603      	mov	r3, r0
 801940e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8019410:	7bfb      	ldrb	r3, [r7, #15]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d00f      	beq.n	8019436 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8019416:	6839      	ldr	r1, [r7, #0]
 8019418:	6878      	ldr	r0, [r7, #4]
 801941a:	f000 f918 	bl	801964e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	685b      	ldr	r3, [r3, #4]
 8019422:	b2db      	uxtb	r3, r3
 8019424:	4619      	mov	r1, r3
 8019426:	6878      	ldr	r0, [r7, #4]
 8019428:	f7fe ffab 	bl	8018382 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	2202      	movs	r2, #2
 8019430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8019434:	e014      	b.n	8019460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019436:	6878      	ldr	r0, [r7, #4]
 8019438:	f000 f9d4 	bl	80197e4 <USBD_CtlSendStatus>
      break;
 801943c:	e010      	b.n	8019460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801943e:	6878      	ldr	r0, [r7, #4]
 8019440:	f000 f9d0 	bl	80197e4 <USBD_CtlSendStatus>
      break;
 8019444:	e00c      	b.n	8019460 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8019446:	6839      	ldr	r1, [r7, #0]
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f000 f900 	bl	801964e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801944e:	4b07      	ldr	r3, [pc, #28]	@ (801946c <USBD_SetConfig+0x150>)
 8019450:	781b      	ldrb	r3, [r3, #0]
 8019452:	4619      	mov	r1, r3
 8019454:	6878      	ldr	r0, [r7, #4]
 8019456:	f7fe ff94 	bl	8018382 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801945a:	2303      	movs	r3, #3
 801945c:	73fb      	strb	r3, [r7, #15]
      break;
 801945e:	bf00      	nop
  }

  return ret;
 8019460:	7bfb      	ldrb	r3, [r7, #15]
}
 8019462:	4618      	mov	r0, r3
 8019464:	3710      	adds	r7, #16
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}
 801946a:	bf00      	nop
 801946c:	20003ec4 	.word	0x20003ec4

08019470 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
 8019478:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	88db      	ldrh	r3, [r3, #6]
 801947e:	2b01      	cmp	r3, #1
 8019480:	d004      	beq.n	801948c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8019482:	6839      	ldr	r1, [r7, #0]
 8019484:	6878      	ldr	r0, [r7, #4]
 8019486:	f000 f8e2 	bl	801964e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801948a:	e023      	b.n	80194d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019492:	b2db      	uxtb	r3, r3
 8019494:	2b02      	cmp	r3, #2
 8019496:	dc02      	bgt.n	801949e <USBD_GetConfig+0x2e>
 8019498:	2b00      	cmp	r3, #0
 801949a:	dc03      	bgt.n	80194a4 <USBD_GetConfig+0x34>
 801949c:	e015      	b.n	80194ca <USBD_GetConfig+0x5a>
 801949e:	2b03      	cmp	r3, #3
 80194a0:	d00b      	beq.n	80194ba <USBD_GetConfig+0x4a>
 80194a2:	e012      	b.n	80194ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2200      	movs	r2, #0
 80194a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	3308      	adds	r3, #8
 80194ae:	2201      	movs	r2, #1
 80194b0:	4619      	mov	r1, r3
 80194b2:	6878      	ldr	r0, [r7, #4]
 80194b4:	f000 f93c 	bl	8019730 <USBD_CtlSendData>
        break;
 80194b8:	e00c      	b.n	80194d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	3304      	adds	r3, #4
 80194be:	2201      	movs	r2, #1
 80194c0:	4619      	mov	r1, r3
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f000 f934 	bl	8019730 <USBD_CtlSendData>
        break;
 80194c8:	e004      	b.n	80194d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80194ca:	6839      	ldr	r1, [r7, #0]
 80194cc:	6878      	ldr	r0, [r7, #4]
 80194ce:	f000 f8be 	bl	801964e <USBD_CtlError>
        break;
 80194d2:	bf00      	nop
}
 80194d4:	bf00      	nop
 80194d6:	3708      	adds	r7, #8
 80194d8:	46bd      	mov	sp, r7
 80194da:	bd80      	pop	{r7, pc}

080194dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b082      	sub	sp, #8
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
 80194e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	3b01      	subs	r3, #1
 80194f0:	2b02      	cmp	r3, #2
 80194f2:	d81e      	bhi.n	8019532 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	88db      	ldrh	r3, [r3, #6]
 80194f8:	2b02      	cmp	r3, #2
 80194fa:	d004      	beq.n	8019506 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80194fc:	6839      	ldr	r1, [r7, #0]
 80194fe:	6878      	ldr	r0, [r7, #4]
 8019500:	f000 f8a5 	bl	801964e <USBD_CtlError>
        break;
 8019504:	e01a      	b.n	801953c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	2201      	movs	r2, #1
 801950a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8019512:	2b00      	cmp	r3, #0
 8019514:	d005      	beq.n	8019522 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	68db      	ldr	r3, [r3, #12]
 801951a:	f043 0202 	orr.w	r2, r3, #2
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	330c      	adds	r3, #12
 8019526:	2202      	movs	r2, #2
 8019528:	4619      	mov	r1, r3
 801952a:	6878      	ldr	r0, [r7, #4]
 801952c:	f000 f900 	bl	8019730 <USBD_CtlSendData>
      break;
 8019530:	e004      	b.n	801953c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019532:	6839      	ldr	r1, [r7, #0]
 8019534:	6878      	ldr	r0, [r7, #4]
 8019536:	f000 f88a 	bl	801964e <USBD_CtlError>
      break;
 801953a:	bf00      	nop
  }
}
 801953c:	bf00      	nop
 801953e:	3708      	adds	r7, #8
 8019540:	46bd      	mov	sp, r7
 8019542:	bd80      	pop	{r7, pc}

08019544 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b082      	sub	sp, #8
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	885b      	ldrh	r3, [r3, #2]
 8019552:	2b01      	cmp	r3, #1
 8019554:	d107      	bne.n	8019566 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	2201      	movs	r2, #1
 801955a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801955e:	6878      	ldr	r0, [r7, #4]
 8019560:	f000 f940 	bl	80197e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8019564:	e013      	b.n	801958e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	885b      	ldrh	r3, [r3, #2]
 801956a:	2b02      	cmp	r3, #2
 801956c:	d10b      	bne.n	8019586 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801956e:	683b      	ldr	r3, [r7, #0]
 8019570:	889b      	ldrh	r3, [r3, #4]
 8019572:	0a1b      	lsrs	r3, r3, #8
 8019574:	b29b      	uxth	r3, r3
 8019576:	b2da      	uxtb	r2, r3
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801957e:	6878      	ldr	r0, [r7, #4]
 8019580:	f000 f930 	bl	80197e4 <USBD_CtlSendStatus>
}
 8019584:	e003      	b.n	801958e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8019586:	6839      	ldr	r1, [r7, #0]
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	f000 f860 	bl	801964e <USBD_CtlError>
}
 801958e:	bf00      	nop
 8019590:	3708      	adds	r7, #8
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}

08019596 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019596:	b580      	push	{r7, lr}
 8019598:	b082      	sub	sp, #8
 801959a:	af00      	add	r7, sp, #0
 801959c:	6078      	str	r0, [r7, #4]
 801959e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80195a6:	b2db      	uxtb	r3, r3
 80195a8:	3b01      	subs	r3, #1
 80195aa:	2b02      	cmp	r3, #2
 80195ac:	d80b      	bhi.n	80195c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	885b      	ldrh	r3, [r3, #2]
 80195b2:	2b01      	cmp	r3, #1
 80195b4:	d10c      	bne.n	80195d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2200      	movs	r2, #0
 80195ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80195be:	6878      	ldr	r0, [r7, #4]
 80195c0:	f000 f910 	bl	80197e4 <USBD_CtlSendStatus>
      }
      break;
 80195c4:	e004      	b.n	80195d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80195c6:	6839      	ldr	r1, [r7, #0]
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f000 f840 	bl	801964e <USBD_CtlError>
      break;
 80195ce:	e000      	b.n	80195d2 <USBD_ClrFeature+0x3c>
      break;
 80195d0:	bf00      	nop
  }
}
 80195d2:	bf00      	nop
 80195d4:	3708      	adds	r7, #8
 80195d6:	46bd      	mov	sp, r7
 80195d8:	bd80      	pop	{r7, pc}

080195da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80195da:	b580      	push	{r7, lr}
 80195dc:	b084      	sub	sp, #16
 80195de:	af00      	add	r7, sp, #0
 80195e0:	6078      	str	r0, [r7, #4]
 80195e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	781a      	ldrb	r2, [r3, #0]
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	3301      	adds	r3, #1
 80195f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	781a      	ldrb	r2, [r3, #0]
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	3301      	adds	r3, #1
 8019602:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8019604:	68f8      	ldr	r0, [r7, #12]
 8019606:	f7ff fa40 	bl	8018a8a <SWAPBYTE>
 801960a:	4603      	mov	r3, r0
 801960c:	461a      	mov	r2, r3
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	3301      	adds	r3, #1
 8019616:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	3301      	adds	r3, #1
 801961c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801961e:	68f8      	ldr	r0, [r7, #12]
 8019620:	f7ff fa33 	bl	8018a8a <SWAPBYTE>
 8019624:	4603      	mov	r3, r0
 8019626:	461a      	mov	r2, r3
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	3301      	adds	r3, #1
 8019630:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	3301      	adds	r3, #1
 8019636:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019638:	68f8      	ldr	r0, [r7, #12]
 801963a:	f7ff fa26 	bl	8018a8a <SWAPBYTE>
 801963e:	4603      	mov	r3, r0
 8019640:	461a      	mov	r2, r3
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	80da      	strh	r2, [r3, #6]
}
 8019646:	bf00      	nop
 8019648:	3710      	adds	r7, #16
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}

0801964e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801964e:	b580      	push	{r7, lr}
 8019650:	b082      	sub	sp, #8
 8019652:	af00      	add	r7, sp, #0
 8019654:	6078      	str	r0, [r7, #4]
 8019656:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019658:	2180      	movs	r1, #128	@ 0x80
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f003 fdfe 	bl	801d25c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019660:	2100      	movs	r1, #0
 8019662:	6878      	ldr	r0, [r7, #4]
 8019664:	f003 fdfa 	bl	801d25c <USBD_LL_StallEP>
}
 8019668:	bf00      	nop
 801966a:	3708      	adds	r7, #8
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b086      	sub	sp, #24
 8019674:	af00      	add	r7, sp, #0
 8019676:	60f8      	str	r0, [r7, #12]
 8019678:	60b9      	str	r1, [r7, #8]
 801967a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801967c:	2300      	movs	r3, #0
 801967e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d036      	beq.n	80196f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801968a:	6938      	ldr	r0, [r7, #16]
 801968c:	f000 f836 	bl	80196fc <USBD_GetLen>
 8019690:	4603      	mov	r3, r0
 8019692:	3301      	adds	r3, #1
 8019694:	b29b      	uxth	r3, r3
 8019696:	005b      	lsls	r3, r3, #1
 8019698:	b29a      	uxth	r2, r3
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801969e:	7dfb      	ldrb	r3, [r7, #23]
 80196a0:	68ba      	ldr	r2, [r7, #8]
 80196a2:	4413      	add	r3, r2
 80196a4:	687a      	ldr	r2, [r7, #4]
 80196a6:	7812      	ldrb	r2, [r2, #0]
 80196a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80196aa:	7dfb      	ldrb	r3, [r7, #23]
 80196ac:	3301      	adds	r3, #1
 80196ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80196b0:	7dfb      	ldrb	r3, [r7, #23]
 80196b2:	68ba      	ldr	r2, [r7, #8]
 80196b4:	4413      	add	r3, r2
 80196b6:	2203      	movs	r2, #3
 80196b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80196ba:	7dfb      	ldrb	r3, [r7, #23]
 80196bc:	3301      	adds	r3, #1
 80196be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80196c0:	e013      	b.n	80196ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80196c2:	7dfb      	ldrb	r3, [r7, #23]
 80196c4:	68ba      	ldr	r2, [r7, #8]
 80196c6:	4413      	add	r3, r2
 80196c8:	693a      	ldr	r2, [r7, #16]
 80196ca:	7812      	ldrb	r2, [r2, #0]
 80196cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80196ce:	693b      	ldr	r3, [r7, #16]
 80196d0:	3301      	adds	r3, #1
 80196d2:	613b      	str	r3, [r7, #16]
    idx++;
 80196d4:	7dfb      	ldrb	r3, [r7, #23]
 80196d6:	3301      	adds	r3, #1
 80196d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80196da:	7dfb      	ldrb	r3, [r7, #23]
 80196dc:	68ba      	ldr	r2, [r7, #8]
 80196de:	4413      	add	r3, r2
 80196e0:	2200      	movs	r2, #0
 80196e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80196e4:	7dfb      	ldrb	r3, [r7, #23]
 80196e6:	3301      	adds	r3, #1
 80196e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80196ea:	693b      	ldr	r3, [r7, #16]
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d1e7      	bne.n	80196c2 <USBD_GetString+0x52>
 80196f2:	e000      	b.n	80196f6 <USBD_GetString+0x86>
    return;
 80196f4:	bf00      	nop
  }
}
 80196f6:	3718      	adds	r7, #24
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80196fc:	b480      	push	{r7}
 80196fe:	b085      	sub	sp, #20
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019704:	2300      	movs	r3, #0
 8019706:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801970c:	e005      	b.n	801971a <USBD_GetLen+0x1e>
  {
    len++;
 801970e:	7bfb      	ldrb	r3, [r7, #15]
 8019710:	3301      	adds	r3, #1
 8019712:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	3301      	adds	r3, #1
 8019718:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801971a:	68bb      	ldr	r3, [r7, #8]
 801971c:	781b      	ldrb	r3, [r3, #0]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d1f5      	bne.n	801970e <USBD_GetLen+0x12>
  }

  return len;
 8019722:	7bfb      	ldrb	r3, [r7, #15]
}
 8019724:	4618      	mov	r0, r3
 8019726:	3714      	adds	r7, #20
 8019728:	46bd      	mov	sp, r7
 801972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801972e:	4770      	bx	lr

08019730 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b084      	sub	sp, #16
 8019734:	af00      	add	r7, sp, #0
 8019736:	60f8      	str	r0, [r7, #12]
 8019738:	60b9      	str	r1, [r7, #8]
 801973a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	2202      	movs	r2, #2
 8019740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	687a      	ldr	r2, [r7, #4]
 8019748:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	687a      	ldr	r2, [r7, #4]
 801974e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	68ba      	ldr	r2, [r7, #8]
 8019754:	2100      	movs	r1, #0
 8019756:	68f8      	ldr	r0, [r7, #12]
 8019758:	f003 fe09 	bl	801d36e <USBD_LL_Transmit>

  return USBD_OK;
 801975c:	2300      	movs	r3, #0
}
 801975e:	4618      	mov	r0, r3
 8019760:	3710      	adds	r7, #16
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}

08019766 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019766:	b580      	push	{r7, lr}
 8019768:	b084      	sub	sp, #16
 801976a:	af00      	add	r7, sp, #0
 801976c:	60f8      	str	r0, [r7, #12]
 801976e:	60b9      	str	r1, [r7, #8]
 8019770:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	68ba      	ldr	r2, [r7, #8]
 8019776:	2100      	movs	r1, #0
 8019778:	68f8      	ldr	r0, [r7, #12]
 801977a:	f003 fdf8 	bl	801d36e <USBD_LL_Transmit>

  return USBD_OK;
 801977e:	2300      	movs	r3, #0
}
 8019780:	4618      	mov	r0, r3
 8019782:	3710      	adds	r7, #16
 8019784:	46bd      	mov	sp, r7
 8019786:	bd80      	pop	{r7, pc}

08019788 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b084      	sub	sp, #16
 801978c:	af00      	add	r7, sp, #0
 801978e:	60f8      	str	r0, [r7, #12]
 8019790:	60b9      	str	r1, [r7, #8]
 8019792:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	2203      	movs	r2, #3
 8019798:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	687a      	ldr	r2, [r7, #4]
 80197a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	68ba      	ldr	r2, [r7, #8]
 80197b0:	2100      	movs	r1, #0
 80197b2:	68f8      	ldr	r0, [r7, #12]
 80197b4:	f003 fdfc 	bl	801d3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80197b8:	2300      	movs	r3, #0
}
 80197ba:	4618      	mov	r0, r3
 80197bc:	3710      	adds	r7, #16
 80197be:	46bd      	mov	sp, r7
 80197c0:	bd80      	pop	{r7, pc}

080197c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80197c2:	b580      	push	{r7, lr}
 80197c4:	b084      	sub	sp, #16
 80197c6:	af00      	add	r7, sp, #0
 80197c8:	60f8      	str	r0, [r7, #12]
 80197ca:	60b9      	str	r1, [r7, #8]
 80197cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	68ba      	ldr	r2, [r7, #8]
 80197d2:	2100      	movs	r1, #0
 80197d4:	68f8      	ldr	r0, [r7, #12]
 80197d6:	f003 fdeb 	bl	801d3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80197da:	2300      	movs	r3, #0
}
 80197dc:	4618      	mov	r0, r3
 80197de:	3710      	adds	r7, #16
 80197e0:	46bd      	mov	sp, r7
 80197e2:	bd80      	pop	{r7, pc}

080197e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b082      	sub	sp, #8
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	2204      	movs	r2, #4
 80197f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80197f4:	2300      	movs	r3, #0
 80197f6:	2200      	movs	r2, #0
 80197f8:	2100      	movs	r1, #0
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f003 fdb7 	bl	801d36e <USBD_LL_Transmit>

  return USBD_OK;
 8019800:	2300      	movs	r3, #0
}
 8019802:	4618      	mov	r0, r3
 8019804:	3708      	adds	r7, #8
 8019806:	46bd      	mov	sp, r7
 8019808:	bd80      	pop	{r7, pc}

0801980a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801980a:	b580      	push	{r7, lr}
 801980c:	b082      	sub	sp, #8
 801980e:	af00      	add	r7, sp, #0
 8019810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2205      	movs	r2, #5
 8019816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801981a:	2300      	movs	r3, #0
 801981c:	2200      	movs	r2, #0
 801981e:	2100      	movs	r1, #0
 8019820:	6878      	ldr	r0, [r7, #4]
 8019822:	f003 fdc5 	bl	801d3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019826:	2300      	movs	r3, #0
}
 8019828:	4618      	mov	r0, r3
 801982a:	3708      	adds	r7, #8
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}

08019830 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8019830:	b480      	push	{r7}
 8019832:	b085      	sub	sp, #20
 8019834:	af00      	add	r7, sp, #0
 8019836:	4603      	mov	r3, r0
 8019838:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801983a:	2300      	movs	r3, #0
 801983c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801983e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019842:	2b84      	cmp	r3, #132	@ 0x84
 8019844:	d005      	beq.n	8019852 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8019846:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	4413      	add	r3, r2
 801984e:	3303      	adds	r3, #3
 8019850:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8019852:	68fb      	ldr	r3, [r7, #12]
}
 8019854:	4618      	mov	r0, r3
 8019856:	3714      	adds	r7, #20
 8019858:	46bd      	mov	sp, r7
 801985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985e:	4770      	bx	lr

08019860 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8019860:	b580      	push	{r7, lr}
 8019862:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8019864:	f001 fa44 	bl	801acf0 <vTaskStartScheduler>
  
  return osOK;
 8019868:	2300      	movs	r3, #0
}
 801986a:	4618      	mov	r0, r3
 801986c:	bd80      	pop	{r7, pc}

0801986e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801986e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019870:	b089      	sub	sp, #36	@ 0x24
 8019872:	af04      	add	r7, sp, #16
 8019874:	6078      	str	r0, [r7, #4]
 8019876:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	695b      	ldr	r3, [r3, #20]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d020      	beq.n	80198c2 <osThreadCreate+0x54>
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	699b      	ldr	r3, [r3, #24]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d01c      	beq.n	80198c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	685c      	ldr	r4, [r3, #4]
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	691e      	ldr	r6, [r3, #16]
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801989a:	4618      	mov	r0, r3
 801989c:	f7ff ffc8 	bl	8019830 <makeFreeRtosPriority>
 80198a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	695b      	ldr	r3, [r3, #20]
 80198a6:	687a      	ldr	r2, [r7, #4]
 80198a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80198aa:	9202      	str	r2, [sp, #8]
 80198ac:	9301      	str	r3, [sp, #4]
 80198ae:	9100      	str	r1, [sp, #0]
 80198b0:	683b      	ldr	r3, [r7, #0]
 80198b2:	4632      	mov	r2, r6
 80198b4:	4629      	mov	r1, r5
 80198b6:	4620      	mov	r0, r4
 80198b8:	f000 ff7a 	bl	801a7b0 <xTaskCreateStatic>
 80198bc:	4603      	mov	r3, r0
 80198be:	60fb      	str	r3, [r7, #12]
 80198c0:	e01c      	b.n	80198fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	685c      	ldr	r4, [r3, #4]
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80198ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7ff ffaa 	bl	8019830 <makeFreeRtosPriority>
 80198dc:	4602      	mov	r2, r0
 80198de:	f107 030c 	add.w	r3, r7, #12
 80198e2:	9301      	str	r3, [sp, #4]
 80198e4:	9200      	str	r2, [sp, #0]
 80198e6:	683b      	ldr	r3, [r7, #0]
 80198e8:	4632      	mov	r2, r6
 80198ea:	4629      	mov	r1, r5
 80198ec:	4620      	mov	r0, r4
 80198ee:	f000 ffc1 	bl	801a874 <xTaskCreate>
 80198f2:	4603      	mov	r3, r0
 80198f4:	2b01      	cmp	r3, #1
 80198f6:	d001      	beq.n	80198fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80198f8:	2300      	movs	r3, #0
 80198fa:	e000      	b.n	80198fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80198fc:	68fb      	ldr	r3, [r7, #12]
}
 80198fe:	4618      	mov	r0, r3
 8019900:	3714      	adds	r7, #20
 8019902:	46bd      	mov	sp, r7
 8019904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019906 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8019906:	b580      	push	{r7, lr}
 8019908:	b084      	sub	sp, #16
 801990a:	af00      	add	r7, sp, #0
 801990c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d001      	beq.n	801991c <osDelay+0x16>
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	e000      	b.n	801991e <osDelay+0x18>
 801991c:	2301      	movs	r3, #1
 801991e:	4618      	mov	r0, r3
 8019920:	f001 f9b0 	bl	801ac84 <vTaskDelay>
  
  return osOK;
 8019924:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8019926:	4618      	mov	r0, r3
 8019928:	3710      	adds	r7, #16
 801992a:	46bd      	mov	sp, r7
 801992c:	bd80      	pop	{r7, pc}

0801992e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801992e:	b580      	push	{r7, lr}
 8019930:	b082      	sub	sp, #8
 8019932:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8019934:	2020      	movs	r0, #32
 8019936:	f002 fe89 	bl	801c64c <pvPortMalloc>
 801993a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d00a      	beq.n	8019958 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2200      	movs	r2, #0
 8019946:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	3304      	adds	r3, #4
 801994c:	4618      	mov	r0, r3
 801994e:	f000 f8b5 	bl	8019abc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2200      	movs	r2, #0
 8019956:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8019958:	687b      	ldr	r3, [r7, #4]
	}
 801995a:	4618      	mov	r0, r3
 801995c:	3708      	adds	r7, #8
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}

08019962 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8019962:	b580      	push	{r7, lr}
 8019964:	b08e      	sub	sp, #56	@ 0x38
 8019966:	af00      	add	r7, sp, #0
 8019968:	6078      	str	r0, [r7, #4]
 801996a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801996c:	2300      	movs	r3, #0
 801996e:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8019974:	2300      	movs	r3, #0
 8019976:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d10b      	bne.n	8019996 <xEventGroupSetBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801997e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019982:	f383 8811 	msr	BASEPRI, r3
 8019986:	f3bf 8f6f 	isb	sy
 801998a:	f3bf 8f4f 	dsb	sy
 801998e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019990:	bf00      	nop
 8019992:	bf00      	nop
 8019994:	e7fd      	b.n	8019992 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801999c:	d30b      	bcc.n	80199b6 <xEventGroupSetBits+0x54>
	__asm volatile
 801999e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199a2:	f383 8811 	msr	BASEPRI, r3
 80199a6:	f3bf 8f6f 	isb	sy
 80199aa:	f3bf 8f4f 	dsb	sy
 80199ae:	60fb      	str	r3, [r7, #12]
}
 80199b0:	bf00      	nop
 80199b2:	bf00      	nop
 80199b4:	e7fd      	b.n	80199b2 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80199b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199b8:	3304      	adds	r3, #4
 80199ba:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80199bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199be:	3308      	adds	r3, #8
 80199c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80199c2:	f001 fa07 	bl	801add4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80199c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199c8:	68db      	ldr	r3, [r3, #12]
 80199ca:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80199cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199ce:	681a      	ldr	r2, [r3, #0]
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	431a      	orrs	r2, r3
 80199d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80199d8:	e03c      	b.n	8019a54 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80199da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80199e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80199e6:	2300      	movs	r3, #0
 80199e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80199ea:	69bb      	ldr	r3, [r7, #24]
 80199ec:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80199f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80199f2:	69bb      	ldr	r3, [r7, #24]
 80199f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80199f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80199fa:	697b      	ldr	r3, [r7, #20]
 80199fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d108      	bne.n	8019a16 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8019a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a06:	681a      	ldr	r2, [r3, #0]
 8019a08:	69bb      	ldr	r3, [r7, #24]
 8019a0a:	4013      	ands	r3, r2
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d00b      	beq.n	8019a28 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8019a10:	2301      	movs	r3, #1
 8019a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a14:	e008      	b.n	8019a28 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8019a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a18:	681a      	ldr	r2, [r3, #0]
 8019a1a:	69bb      	ldr	r3, [r7, #24]
 8019a1c:	4013      	ands	r3, r2
 8019a1e:	69ba      	ldr	r2, [r7, #24]
 8019a20:	429a      	cmp	r2, r3
 8019a22:	d101      	bne.n	8019a28 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8019a24:	2301      	movs	r3, #1
 8019a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8019a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d010      	beq.n	8019a50 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d003      	beq.n	8019a40 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8019a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019a3a:	69bb      	ldr	r3, [r7, #24]
 8019a3c:	4313      	orrs	r3, r2
 8019a3e:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8019a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8019a48:	4619      	mov	r1, r3
 8019a4a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019a4c:	f001 fc7e 	bl	801b34c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8019a50:	69fb      	ldr	r3, [r7, #28]
 8019a52:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8019a54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019a56:	6a3b      	ldr	r3, [r7, #32]
 8019a58:	429a      	cmp	r2, r3
 8019a5a:	d1be      	bne.n	80199da <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8019a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a5e:	681a      	ldr	r2, [r3, #0]
 8019a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a62:	43db      	mvns	r3, r3
 8019a64:	401a      	ands	r2, r3
 8019a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a68:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8019a6a:	f001 f9c1 	bl	801adf0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8019a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a70:	681b      	ldr	r3, [r3, #0]
}
 8019a72:	4618      	mov	r0, r3
 8019a74:	3738      	adds	r7, #56	@ 0x38
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bd80      	pop	{r7, pc}

08019a7a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8019a7a:	b580      	push	{r7, lr}
 8019a7c:	b082      	sub	sp, #8
 8019a7e:	af00      	add	r7, sp, #0
 8019a80:	6078      	str	r0, [r7, #4]
 8019a82:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8019a84:	6839      	ldr	r1, [r7, #0]
 8019a86:	6878      	ldr	r0, [r7, #4]
 8019a88:	f7ff ff6b 	bl	8019962 <xEventGroupSetBits>
}
 8019a8c:	bf00      	nop
 8019a8e:	3708      	adds	r7, #8
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd80      	pop	{r7, pc}

08019a94 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b086      	sub	sp, #24
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	60f8      	str	r0, [r7, #12]
 8019a9c:	60b9      	str	r1, [r7, #8]
 8019a9e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	68ba      	ldr	r2, [r7, #8]
 8019aa4:	68f9      	ldr	r1, [r7, #12]
 8019aa6:	4804      	ldr	r0, [pc, #16]	@ (8019ab8 <xEventGroupSetBitsFromISR+0x24>)
 8019aa8:	f002 fb5e 	bl	801c168 <xTimerPendFunctionCallFromISR>
 8019aac:	6178      	str	r0, [r7, #20]

		return xReturn;
 8019aae:	697b      	ldr	r3, [r7, #20]
	}
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	3718      	adds	r7, #24
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bd80      	pop	{r7, pc}
 8019ab8:	08019a7b 	.word	0x08019a7b

08019abc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019abc:	b480      	push	{r7}
 8019abe:	b083      	sub	sp, #12
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	f103 0208 	add.w	r2, r3, #8
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8019ad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	f103 0208 	add.w	r2, r3, #8
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	f103 0208 	add.w	r2, r3, #8
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	2200      	movs	r2, #0
 8019aee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019af0:	bf00      	nop
 8019af2:	370c      	adds	r7, #12
 8019af4:	46bd      	mov	sp, r7
 8019af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019afa:	4770      	bx	lr

08019afc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019afc:	b480      	push	{r7}
 8019afe:	b083      	sub	sp, #12
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2200      	movs	r2, #0
 8019b08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019b0a:	bf00      	nop
 8019b0c:	370c      	adds	r7, #12
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b14:	4770      	bx	lr

08019b16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019b16:	b480      	push	{r7}
 8019b18:	b085      	sub	sp, #20
 8019b1a:	af00      	add	r7, sp, #0
 8019b1c:	6078      	str	r0, [r7, #4]
 8019b1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	685b      	ldr	r3, [r3, #4]
 8019b24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	68fa      	ldr	r2, [r7, #12]
 8019b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	689a      	ldr	r2, [r3, #8]
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	689b      	ldr	r3, [r3, #8]
 8019b38:	683a      	ldr	r2, [r7, #0]
 8019b3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	683a      	ldr	r2, [r7, #0]
 8019b40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019b42:	683b      	ldr	r3, [r7, #0]
 8019b44:	687a      	ldr	r2, [r7, #4]
 8019b46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	1c5a      	adds	r2, r3, #1
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	601a      	str	r2, [r3, #0]
}
 8019b52:	bf00      	nop
 8019b54:	3714      	adds	r7, #20
 8019b56:	46bd      	mov	sp, r7
 8019b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5c:	4770      	bx	lr

08019b5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019b5e:	b480      	push	{r7}
 8019b60:	b085      	sub	sp, #20
 8019b62:	af00      	add	r7, sp, #0
 8019b64:	6078      	str	r0, [r7, #4]
 8019b66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019b68:	683b      	ldr	r3, [r7, #0]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019b6e:	68bb      	ldr	r3, [r7, #8]
 8019b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b74:	d103      	bne.n	8019b7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	691b      	ldr	r3, [r3, #16]
 8019b7a:	60fb      	str	r3, [r7, #12]
 8019b7c:	e00c      	b.n	8019b98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	3308      	adds	r3, #8
 8019b82:	60fb      	str	r3, [r7, #12]
 8019b84:	e002      	b.n	8019b8c <vListInsert+0x2e>
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	685b      	ldr	r3, [r3, #4]
 8019b8a:	60fb      	str	r3, [r7, #12]
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	685b      	ldr	r3, [r3, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	68ba      	ldr	r2, [r7, #8]
 8019b94:	429a      	cmp	r2, r3
 8019b96:	d2f6      	bcs.n	8019b86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	685a      	ldr	r2, [r3, #4]
 8019b9c:	683b      	ldr	r3, [r7, #0]
 8019b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	685b      	ldr	r3, [r3, #4]
 8019ba4:	683a      	ldr	r2, [r7, #0]
 8019ba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	68fa      	ldr	r2, [r7, #12]
 8019bac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	683a      	ldr	r2, [r7, #0]
 8019bb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	687a      	ldr	r2, [r7, #4]
 8019bb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	1c5a      	adds	r2, r3, #1
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	601a      	str	r2, [r3, #0]
}
 8019bc4:	bf00      	nop
 8019bc6:	3714      	adds	r7, #20
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bce:	4770      	bx	lr

08019bd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019bd0:	b480      	push	{r7}
 8019bd2:	b085      	sub	sp, #20
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	691b      	ldr	r3, [r3, #16]
 8019bdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	685b      	ldr	r3, [r3, #4]
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	6892      	ldr	r2, [r2, #8]
 8019be6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	689b      	ldr	r3, [r3, #8]
 8019bec:	687a      	ldr	r2, [r7, #4]
 8019bee:	6852      	ldr	r2, [r2, #4]
 8019bf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	685b      	ldr	r3, [r3, #4]
 8019bf6:	687a      	ldr	r2, [r7, #4]
 8019bf8:	429a      	cmp	r2, r3
 8019bfa:	d103      	bne.n	8019c04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	689a      	ldr	r2, [r3, #8]
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	2200      	movs	r2, #0
 8019c08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	1e5a      	subs	r2, r3, #1
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	681b      	ldr	r3, [r3, #0]
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3714      	adds	r7, #20
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c22:	4770      	bx	lr

08019c24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b084      	sub	sp, #16
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
 8019c2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d10b      	bne.n	8019c50 <xQueueGenericReset+0x2c>
	__asm volatile
 8019c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c3c:	f383 8811 	msr	BASEPRI, r3
 8019c40:	f3bf 8f6f 	isb	sy
 8019c44:	f3bf 8f4f 	dsb	sy
 8019c48:	60bb      	str	r3, [r7, #8]
}
 8019c4a:	bf00      	nop
 8019c4c:	bf00      	nop
 8019c4e:	e7fd      	b.n	8019c4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019c50:	f002 fbda 	bl	801c408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	681a      	ldr	r2, [r3, #0]
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019c5c:	68f9      	ldr	r1, [r7, #12]
 8019c5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019c60:	fb01 f303 	mul.w	r3, r1, r3
 8019c64:	441a      	add	r2, r3
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	681a      	ldr	r2, [r3, #0]
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019c80:	3b01      	subs	r3, #1
 8019c82:	68f9      	ldr	r1, [r7, #12]
 8019c84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019c86:	fb01 f303 	mul.w	r3, r1, r3
 8019c8a:	441a      	add	r2, r3
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	22ff      	movs	r2, #255	@ 0xff
 8019c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	22ff      	movs	r2, #255	@ 0xff
 8019c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d114      	bne.n	8019cd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	691b      	ldr	r3, [r3, #16]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d01a      	beq.n	8019ce4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	3310      	adds	r3, #16
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f001 fae6 	bl	801b284 <xTaskRemoveFromEventList>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d012      	beq.n	8019ce4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8019cf4 <xQueueGenericReset+0xd0>)
 8019cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019cc4:	601a      	str	r2, [r3, #0]
 8019cc6:	f3bf 8f4f 	dsb	sy
 8019cca:	f3bf 8f6f 	isb	sy
 8019cce:	e009      	b.n	8019ce4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	3310      	adds	r3, #16
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	f7ff fef1 	bl	8019abc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	3324      	adds	r3, #36	@ 0x24
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f7ff feec 	bl	8019abc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019ce4:	f002 fbc2 	bl	801c46c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019ce8:	2301      	movs	r3, #1
}
 8019cea:	4618      	mov	r0, r3
 8019cec:	3710      	adds	r7, #16
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	bd80      	pop	{r7, pc}
 8019cf2:	bf00      	nop
 8019cf4:	e000ed04 	.word	0xe000ed04

08019cf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b08e      	sub	sp, #56	@ 0x38
 8019cfc:	af02      	add	r7, sp, #8
 8019cfe:	60f8      	str	r0, [r7, #12]
 8019d00:	60b9      	str	r1, [r7, #8]
 8019d02:	607a      	str	r2, [r7, #4]
 8019d04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d10b      	bne.n	8019d24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8019d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d10:	f383 8811 	msr	BASEPRI, r3
 8019d14:	f3bf 8f6f 	isb	sy
 8019d18:	f3bf 8f4f 	dsb	sy
 8019d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019d1e:	bf00      	nop
 8019d20:	bf00      	nop
 8019d22:	e7fd      	b.n	8019d20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d10b      	bne.n	8019d42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8019d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d2e:	f383 8811 	msr	BASEPRI, r3
 8019d32:	f3bf 8f6f 	isb	sy
 8019d36:	f3bf 8f4f 	dsb	sy
 8019d3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019d3c:	bf00      	nop
 8019d3e:	bf00      	nop
 8019d40:	e7fd      	b.n	8019d3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d002      	beq.n	8019d4e <xQueueGenericCreateStatic+0x56>
 8019d48:	68bb      	ldr	r3, [r7, #8]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d001      	beq.n	8019d52 <xQueueGenericCreateStatic+0x5a>
 8019d4e:	2301      	movs	r3, #1
 8019d50:	e000      	b.n	8019d54 <xQueueGenericCreateStatic+0x5c>
 8019d52:	2300      	movs	r3, #0
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d10b      	bne.n	8019d70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8019d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d5c:	f383 8811 	msr	BASEPRI, r3
 8019d60:	f3bf 8f6f 	isb	sy
 8019d64:	f3bf 8f4f 	dsb	sy
 8019d68:	623b      	str	r3, [r7, #32]
}
 8019d6a:	bf00      	nop
 8019d6c:	bf00      	nop
 8019d6e:	e7fd      	b.n	8019d6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d102      	bne.n	8019d7c <xQueueGenericCreateStatic+0x84>
 8019d76:	68bb      	ldr	r3, [r7, #8]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d101      	bne.n	8019d80 <xQueueGenericCreateStatic+0x88>
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	e000      	b.n	8019d82 <xQueueGenericCreateStatic+0x8a>
 8019d80:	2300      	movs	r3, #0
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d10b      	bne.n	8019d9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8019d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d8a:	f383 8811 	msr	BASEPRI, r3
 8019d8e:	f3bf 8f6f 	isb	sy
 8019d92:	f3bf 8f4f 	dsb	sy
 8019d96:	61fb      	str	r3, [r7, #28]
}
 8019d98:	bf00      	nop
 8019d9a:	bf00      	nop
 8019d9c:	e7fd      	b.n	8019d9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019d9e:	2350      	movs	r3, #80	@ 0x50
 8019da0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019da2:	697b      	ldr	r3, [r7, #20]
 8019da4:	2b50      	cmp	r3, #80	@ 0x50
 8019da6:	d00b      	beq.n	8019dc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8019da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019dac:	f383 8811 	msr	BASEPRI, r3
 8019db0:	f3bf 8f6f 	isb	sy
 8019db4:	f3bf 8f4f 	dsb	sy
 8019db8:	61bb      	str	r3, [r7, #24]
}
 8019dba:	bf00      	nop
 8019dbc:	bf00      	nop
 8019dbe:	e7fd      	b.n	8019dbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019dc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8019dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d00d      	beq.n	8019de8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dce:	2201      	movs	r2, #1
 8019dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019dd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dda:	9300      	str	r3, [sp, #0]
 8019ddc:	4613      	mov	r3, r2
 8019dde:	687a      	ldr	r2, [r7, #4]
 8019de0:	68b9      	ldr	r1, [r7, #8]
 8019de2:	68f8      	ldr	r0, [r7, #12]
 8019de4:	f000 f840 	bl	8019e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8019dea:	4618      	mov	r0, r3
 8019dec:	3730      	adds	r7, #48	@ 0x30
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}

08019df2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019df2:	b580      	push	{r7, lr}
 8019df4:	b08a      	sub	sp, #40	@ 0x28
 8019df6:	af02      	add	r7, sp, #8
 8019df8:	60f8      	str	r0, [r7, #12]
 8019dfa:	60b9      	str	r1, [r7, #8]
 8019dfc:	4613      	mov	r3, r2
 8019dfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d10b      	bne.n	8019e1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8019e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e0a:	f383 8811 	msr	BASEPRI, r3
 8019e0e:	f3bf 8f6f 	isb	sy
 8019e12:	f3bf 8f4f 	dsb	sy
 8019e16:	613b      	str	r3, [r7, #16]
}
 8019e18:	bf00      	nop
 8019e1a:	bf00      	nop
 8019e1c:	e7fd      	b.n	8019e1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	68ba      	ldr	r2, [r7, #8]
 8019e22:	fb02 f303 	mul.w	r3, r2, r3
 8019e26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019e28:	69fb      	ldr	r3, [r7, #28]
 8019e2a:	3350      	adds	r3, #80	@ 0x50
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f002 fc0d 	bl	801c64c <pvPortMalloc>
 8019e32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019e34:	69bb      	ldr	r3, [r7, #24]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d011      	beq.n	8019e5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019e3a:	69bb      	ldr	r3, [r7, #24]
 8019e3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	3350      	adds	r3, #80	@ 0x50
 8019e42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019e44:	69bb      	ldr	r3, [r7, #24]
 8019e46:	2200      	movs	r2, #0
 8019e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019e4c:	79fa      	ldrb	r2, [r7, #7]
 8019e4e:	69bb      	ldr	r3, [r7, #24]
 8019e50:	9300      	str	r3, [sp, #0]
 8019e52:	4613      	mov	r3, r2
 8019e54:	697a      	ldr	r2, [r7, #20]
 8019e56:	68b9      	ldr	r1, [r7, #8]
 8019e58:	68f8      	ldr	r0, [r7, #12]
 8019e5a:	f000 f805 	bl	8019e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8019e60:	4618      	mov	r0, r3
 8019e62:	3720      	adds	r7, #32
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}

08019e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b084      	sub	sp, #16
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	60f8      	str	r0, [r7, #12]
 8019e70:	60b9      	str	r1, [r7, #8]
 8019e72:	607a      	str	r2, [r7, #4]
 8019e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019e76:	68bb      	ldr	r3, [r7, #8]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d103      	bne.n	8019e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019e7c:	69bb      	ldr	r3, [r7, #24]
 8019e7e:	69ba      	ldr	r2, [r7, #24]
 8019e80:	601a      	str	r2, [r3, #0]
 8019e82:	e002      	b.n	8019e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019e84:	69bb      	ldr	r3, [r7, #24]
 8019e86:	687a      	ldr	r2, [r7, #4]
 8019e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019e8a:	69bb      	ldr	r3, [r7, #24]
 8019e8c:	68fa      	ldr	r2, [r7, #12]
 8019e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019e90:	69bb      	ldr	r3, [r7, #24]
 8019e92:	68ba      	ldr	r2, [r7, #8]
 8019e94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019e96:	2101      	movs	r1, #1
 8019e98:	69b8      	ldr	r0, [r7, #24]
 8019e9a:	f7ff fec3 	bl	8019c24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019e9e:	69bb      	ldr	r3, [r7, #24]
 8019ea0:	78fa      	ldrb	r2, [r7, #3]
 8019ea2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019ea6:	bf00      	nop
 8019ea8:	3710      	adds	r7, #16
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	bd80      	pop	{r7, pc}
	...

08019eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b08e      	sub	sp, #56	@ 0x38
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	60f8      	str	r0, [r7, #12]
 8019eb8:	60b9      	str	r1, [r7, #8]
 8019eba:	607a      	str	r2, [r7, #4]
 8019ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8019ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d10b      	bne.n	8019ee4 <xQueueGenericSend+0x34>
	__asm volatile
 8019ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ed0:	f383 8811 	msr	BASEPRI, r3
 8019ed4:	f3bf 8f6f 	isb	sy
 8019ed8:	f3bf 8f4f 	dsb	sy
 8019edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8019ede:	bf00      	nop
 8019ee0:	bf00      	nop
 8019ee2:	e7fd      	b.n	8019ee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019ee4:	68bb      	ldr	r3, [r7, #8]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d103      	bne.n	8019ef2 <xQueueGenericSend+0x42>
 8019eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d101      	bne.n	8019ef6 <xQueueGenericSend+0x46>
 8019ef2:	2301      	movs	r3, #1
 8019ef4:	e000      	b.n	8019ef8 <xQueueGenericSend+0x48>
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d10b      	bne.n	8019f14 <xQueueGenericSend+0x64>
	__asm volatile
 8019efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f00:	f383 8811 	msr	BASEPRI, r3
 8019f04:	f3bf 8f6f 	isb	sy
 8019f08:	f3bf 8f4f 	dsb	sy
 8019f0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8019f0e:	bf00      	nop
 8019f10:	bf00      	nop
 8019f12:	e7fd      	b.n	8019f10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019f14:	683b      	ldr	r3, [r7, #0]
 8019f16:	2b02      	cmp	r3, #2
 8019f18:	d103      	bne.n	8019f22 <xQueueGenericSend+0x72>
 8019f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f1e:	2b01      	cmp	r3, #1
 8019f20:	d101      	bne.n	8019f26 <xQueueGenericSend+0x76>
 8019f22:	2301      	movs	r3, #1
 8019f24:	e000      	b.n	8019f28 <xQueueGenericSend+0x78>
 8019f26:	2300      	movs	r3, #0
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d10b      	bne.n	8019f44 <xQueueGenericSend+0x94>
	__asm volatile
 8019f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f30:	f383 8811 	msr	BASEPRI, r3
 8019f34:	f3bf 8f6f 	isb	sy
 8019f38:	f3bf 8f4f 	dsb	sy
 8019f3c:	623b      	str	r3, [r7, #32]
}
 8019f3e:	bf00      	nop
 8019f40:	bf00      	nop
 8019f42:	e7fd      	b.n	8019f40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019f44:	f001 fbc8 	bl	801b6d8 <xTaskGetSchedulerState>
 8019f48:	4603      	mov	r3, r0
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d102      	bne.n	8019f54 <xQueueGenericSend+0xa4>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d101      	bne.n	8019f58 <xQueueGenericSend+0xa8>
 8019f54:	2301      	movs	r3, #1
 8019f56:	e000      	b.n	8019f5a <xQueueGenericSend+0xaa>
 8019f58:	2300      	movs	r3, #0
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d10b      	bne.n	8019f76 <xQueueGenericSend+0xc6>
	__asm volatile
 8019f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f62:	f383 8811 	msr	BASEPRI, r3
 8019f66:	f3bf 8f6f 	isb	sy
 8019f6a:	f3bf 8f4f 	dsb	sy
 8019f6e:	61fb      	str	r3, [r7, #28]
}
 8019f70:	bf00      	nop
 8019f72:	bf00      	nop
 8019f74:	e7fd      	b.n	8019f72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019f76:	f002 fa47 	bl	801c408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019f82:	429a      	cmp	r2, r3
 8019f84:	d302      	bcc.n	8019f8c <xQueueGenericSend+0xdc>
 8019f86:	683b      	ldr	r3, [r7, #0]
 8019f88:	2b02      	cmp	r3, #2
 8019f8a:	d129      	bne.n	8019fe0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019f8c:	683a      	ldr	r2, [r7, #0]
 8019f8e:	68b9      	ldr	r1, [r7, #8]
 8019f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019f92:	f000 fa9f 	bl	801a4d4 <prvCopyDataToQueue>
 8019f96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d010      	beq.n	8019fc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fa2:	3324      	adds	r3, #36	@ 0x24
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f001 f96d 	bl	801b284 <xTaskRemoveFromEventList>
 8019faa:	4603      	mov	r3, r0
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d013      	beq.n	8019fd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019fb0:	4b3f      	ldr	r3, [pc, #252]	@ (801a0b0 <xQueueGenericSend+0x200>)
 8019fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019fb6:	601a      	str	r2, [r3, #0]
 8019fb8:	f3bf 8f4f 	dsb	sy
 8019fbc:	f3bf 8f6f 	isb	sy
 8019fc0:	e00a      	b.n	8019fd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d007      	beq.n	8019fd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019fc8:	4b39      	ldr	r3, [pc, #228]	@ (801a0b0 <xQueueGenericSend+0x200>)
 8019fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019fce:	601a      	str	r2, [r3, #0]
 8019fd0:	f3bf 8f4f 	dsb	sy
 8019fd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019fd8:	f002 fa48 	bl	801c46c <vPortExitCritical>
				return pdPASS;
 8019fdc:	2301      	movs	r3, #1
 8019fde:	e063      	b.n	801a0a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d103      	bne.n	8019fee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019fe6:	f002 fa41 	bl	801c46c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019fea:	2300      	movs	r3, #0
 8019fec:	e05c      	b.n	801a0a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d106      	bne.n	801a002 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019ff4:	f107 0314 	add.w	r3, r7, #20
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f001 fa0b 	bl	801b414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019ffe:	2301      	movs	r3, #1
 801a000:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a002:	f002 fa33 	bl	801c46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a006:	f000 fee5 	bl	801add4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a00a:	f002 f9fd 	bl	801c408 <vPortEnterCritical>
 801a00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a010:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a014:	b25b      	sxtb	r3, r3
 801a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a01a:	d103      	bne.n	801a024 <xQueueGenericSend+0x174>
 801a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a01e:	2200      	movs	r2, #0
 801a020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a026:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a02a:	b25b      	sxtb	r3, r3
 801a02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a030:	d103      	bne.n	801a03a <xQueueGenericSend+0x18a>
 801a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a034:	2200      	movs	r2, #0
 801a036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a03a:	f002 fa17 	bl	801c46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a03e:	1d3a      	adds	r2, r7, #4
 801a040:	f107 0314 	add.w	r3, r7, #20
 801a044:	4611      	mov	r1, r2
 801a046:	4618      	mov	r0, r3
 801a048:	f001 f9fa 	bl	801b440 <xTaskCheckForTimeOut>
 801a04c:	4603      	mov	r3, r0
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d124      	bne.n	801a09c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a054:	f000 fb36 	bl	801a6c4 <prvIsQueueFull>
 801a058:	4603      	mov	r3, r0
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d018      	beq.n	801a090 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a060:	3310      	adds	r3, #16
 801a062:	687a      	ldr	r2, [r7, #4]
 801a064:	4611      	mov	r1, r2
 801a066:	4618      	mov	r0, r3
 801a068:	f001 f8ba 	bl	801b1e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a06c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a06e:	f000 fac1 	bl	801a5f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a072:	f000 febd 	bl	801adf0 <xTaskResumeAll>
 801a076:	4603      	mov	r3, r0
 801a078:	2b00      	cmp	r3, #0
 801a07a:	f47f af7c 	bne.w	8019f76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801a07e:	4b0c      	ldr	r3, [pc, #48]	@ (801a0b0 <xQueueGenericSend+0x200>)
 801a080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a084:	601a      	str	r2, [r3, #0]
 801a086:	f3bf 8f4f 	dsb	sy
 801a08a:	f3bf 8f6f 	isb	sy
 801a08e:	e772      	b.n	8019f76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a092:	f000 faaf 	bl	801a5f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a096:	f000 feab 	bl	801adf0 <xTaskResumeAll>
 801a09a:	e76c      	b.n	8019f76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a09c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a09e:	f000 faa9 	bl	801a5f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a0a2:	f000 fea5 	bl	801adf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a0a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	3738      	adds	r7, #56	@ 0x38
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd80      	pop	{r7, pc}
 801a0b0:	e000ed04 	.word	0xe000ed04

0801a0b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b090      	sub	sp, #64	@ 0x40
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	60f8      	str	r0, [r7, #12]
 801a0bc:	60b9      	str	r1, [r7, #8]
 801a0be:	607a      	str	r2, [r7, #4]
 801a0c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801a0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d10b      	bne.n	801a0e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801a0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a0d0:	f383 8811 	msr	BASEPRI, r3
 801a0d4:	f3bf 8f6f 	isb	sy
 801a0d8:	f3bf 8f4f 	dsb	sy
 801a0dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801a0de:	bf00      	nop
 801a0e0:	bf00      	nop
 801a0e2:	e7fd      	b.n	801a0e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a0e4:	68bb      	ldr	r3, [r7, #8]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d103      	bne.n	801a0f2 <xQueueGenericSendFromISR+0x3e>
 801a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d101      	bne.n	801a0f6 <xQueueGenericSendFromISR+0x42>
 801a0f2:	2301      	movs	r3, #1
 801a0f4:	e000      	b.n	801a0f8 <xQueueGenericSendFromISR+0x44>
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d10b      	bne.n	801a114 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801a0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a100:	f383 8811 	msr	BASEPRI, r3
 801a104:	f3bf 8f6f 	isb	sy
 801a108:	f3bf 8f4f 	dsb	sy
 801a10c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801a10e:	bf00      	nop
 801a110:	bf00      	nop
 801a112:	e7fd      	b.n	801a110 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	2b02      	cmp	r3, #2
 801a118:	d103      	bne.n	801a122 <xQueueGenericSendFromISR+0x6e>
 801a11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a11c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a11e:	2b01      	cmp	r3, #1
 801a120:	d101      	bne.n	801a126 <xQueueGenericSendFromISR+0x72>
 801a122:	2301      	movs	r3, #1
 801a124:	e000      	b.n	801a128 <xQueueGenericSendFromISR+0x74>
 801a126:	2300      	movs	r3, #0
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d10b      	bne.n	801a144 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801a12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a130:	f383 8811 	msr	BASEPRI, r3
 801a134:	f3bf 8f6f 	isb	sy
 801a138:	f3bf 8f4f 	dsb	sy
 801a13c:	623b      	str	r3, [r7, #32]
}
 801a13e:	bf00      	nop
 801a140:	bf00      	nop
 801a142:	e7fd      	b.n	801a140 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a144:	f002 fa40 	bl	801c5c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a148:	f3ef 8211 	mrs	r2, BASEPRI
 801a14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a150:	f383 8811 	msr	BASEPRI, r3
 801a154:	f3bf 8f6f 	isb	sy
 801a158:	f3bf 8f4f 	dsb	sy
 801a15c:	61fa      	str	r2, [r7, #28]
 801a15e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a160:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a162:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a16c:	429a      	cmp	r2, r3
 801a16e:	d302      	bcc.n	801a176 <xQueueGenericSendFromISR+0xc2>
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	2b02      	cmp	r3, #2
 801a174:	d12f      	bne.n	801a1d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a17c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a184:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a186:	683a      	ldr	r2, [r7, #0]
 801a188:	68b9      	ldr	r1, [r7, #8]
 801a18a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a18c:	f000 f9a2 	bl	801a4d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a190:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801a194:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a198:	d112      	bne.n	801a1c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d016      	beq.n	801a1d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1a4:	3324      	adds	r3, #36	@ 0x24
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	f001 f86c 	bl	801b284 <xTaskRemoveFromEventList>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d00e      	beq.n	801a1d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d00b      	beq.n	801a1d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	2201      	movs	r2, #1
 801a1bc:	601a      	str	r2, [r3, #0]
 801a1be:	e007      	b.n	801a1d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a1c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	b2db      	uxtb	r3, r3
 801a1c8:	b25a      	sxtb	r2, r3
 801a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801a1d4:	e001      	b.n	801a1da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a1de:	697b      	ldr	r3, [r7, #20]
 801a1e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a1e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	3740      	adds	r7, #64	@ 0x40
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}

0801a1f0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b08e      	sub	sp, #56	@ 0x38
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
 801a1f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a200:	2b00      	cmp	r3, #0
 801a202:	d10b      	bne.n	801a21c <xQueueGiveFromISR+0x2c>
	__asm volatile
 801a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a208:	f383 8811 	msr	BASEPRI, r3
 801a20c:	f3bf 8f6f 	isb	sy
 801a210:	f3bf 8f4f 	dsb	sy
 801a214:	623b      	str	r3, [r7, #32]
}
 801a216:	bf00      	nop
 801a218:	bf00      	nop
 801a21a:	e7fd      	b.n	801a218 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a220:	2b00      	cmp	r3, #0
 801a222:	d00b      	beq.n	801a23c <xQueueGiveFromISR+0x4c>
	__asm volatile
 801a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a228:	f383 8811 	msr	BASEPRI, r3
 801a22c:	f3bf 8f6f 	isb	sy
 801a230:	f3bf 8f4f 	dsb	sy
 801a234:	61fb      	str	r3, [r7, #28]
}
 801a236:	bf00      	nop
 801a238:	bf00      	nop
 801a23a:	e7fd      	b.n	801a238 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801a23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d103      	bne.n	801a24c <xQueueGiveFromISR+0x5c>
 801a244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a246:	689b      	ldr	r3, [r3, #8]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d101      	bne.n	801a250 <xQueueGiveFromISR+0x60>
 801a24c:	2301      	movs	r3, #1
 801a24e:	e000      	b.n	801a252 <xQueueGiveFromISR+0x62>
 801a250:	2300      	movs	r3, #0
 801a252:	2b00      	cmp	r3, #0
 801a254:	d10b      	bne.n	801a26e <xQueueGiveFromISR+0x7e>
	__asm volatile
 801a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a25a:	f383 8811 	msr	BASEPRI, r3
 801a25e:	f3bf 8f6f 	isb	sy
 801a262:	f3bf 8f4f 	dsb	sy
 801a266:	61bb      	str	r3, [r7, #24]
}
 801a268:	bf00      	nop
 801a26a:	bf00      	nop
 801a26c:	e7fd      	b.n	801a26a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a26e:	f002 f9ab 	bl	801c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 801a272:	f3ef 8211 	mrs	r2, BASEPRI
 801a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a27a:	f383 8811 	msr	BASEPRI, r3
 801a27e:	f3bf 8f6f 	isb	sy
 801a282:	f3bf 8f4f 	dsb	sy
 801a286:	617a      	str	r2, [r7, #20]
 801a288:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a28a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a28c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a292:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a298:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a29a:	429a      	cmp	r2, r3
 801a29c:	d22b      	bcs.n	801a2f6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a2a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2aa:	1c5a      	adds	r2, r3, #1
 801a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a2b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2b8:	d112      	bne.n	801a2e0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d016      	beq.n	801a2f0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2c4:	3324      	adds	r3, #36	@ 0x24
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f000 ffdc 	bl	801b284 <xTaskRemoveFromEventList>
 801a2cc:	4603      	mov	r3, r0
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d00e      	beq.n	801a2f0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d00b      	beq.n	801a2f0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a2d8:	683b      	ldr	r3, [r7, #0]
 801a2da:	2201      	movs	r2, #1
 801a2dc:	601a      	str	r2, [r3, #0]
 801a2de:	e007      	b.n	801a2f0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2e4:	3301      	adds	r3, #1
 801a2e6:	b2db      	uxtb	r3, r3
 801a2e8:	b25a      	sxtb	r2, r3
 801a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801a2f0:	2301      	movs	r3, #1
 801a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a2f4:	e001      	b.n	801a2fa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
 801a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	f383 8811 	msr	BASEPRI, r3
}
 801a304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3738      	adds	r7, #56	@ 0x38
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}

0801a310 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b08c      	sub	sp, #48	@ 0x30
 801a314:	af00      	add	r7, sp, #0
 801a316:	60f8      	str	r0, [r7, #12]
 801a318:	60b9      	str	r1, [r7, #8]
 801a31a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a31c:	2300      	movs	r3, #0
 801a31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a326:	2b00      	cmp	r3, #0
 801a328:	d10b      	bne.n	801a342 <xQueueReceive+0x32>
	__asm volatile
 801a32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a32e:	f383 8811 	msr	BASEPRI, r3
 801a332:	f3bf 8f6f 	isb	sy
 801a336:	f3bf 8f4f 	dsb	sy
 801a33a:	623b      	str	r3, [r7, #32]
}
 801a33c:	bf00      	nop
 801a33e:	bf00      	nop
 801a340:	e7fd      	b.n	801a33e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a342:	68bb      	ldr	r3, [r7, #8]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d103      	bne.n	801a350 <xQueueReceive+0x40>
 801a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a34a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d101      	bne.n	801a354 <xQueueReceive+0x44>
 801a350:	2301      	movs	r3, #1
 801a352:	e000      	b.n	801a356 <xQueueReceive+0x46>
 801a354:	2300      	movs	r3, #0
 801a356:	2b00      	cmp	r3, #0
 801a358:	d10b      	bne.n	801a372 <xQueueReceive+0x62>
	__asm volatile
 801a35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a35e:	f383 8811 	msr	BASEPRI, r3
 801a362:	f3bf 8f6f 	isb	sy
 801a366:	f3bf 8f4f 	dsb	sy
 801a36a:	61fb      	str	r3, [r7, #28]
}
 801a36c:	bf00      	nop
 801a36e:	bf00      	nop
 801a370:	e7fd      	b.n	801a36e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a372:	f001 f9b1 	bl	801b6d8 <xTaskGetSchedulerState>
 801a376:	4603      	mov	r3, r0
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d102      	bne.n	801a382 <xQueueReceive+0x72>
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d101      	bne.n	801a386 <xQueueReceive+0x76>
 801a382:	2301      	movs	r3, #1
 801a384:	e000      	b.n	801a388 <xQueueReceive+0x78>
 801a386:	2300      	movs	r3, #0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d10b      	bne.n	801a3a4 <xQueueReceive+0x94>
	__asm volatile
 801a38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a390:	f383 8811 	msr	BASEPRI, r3
 801a394:	f3bf 8f6f 	isb	sy
 801a398:	f3bf 8f4f 	dsb	sy
 801a39c:	61bb      	str	r3, [r7, #24]
}
 801a39e:	bf00      	nop
 801a3a0:	bf00      	nop
 801a3a2:	e7fd      	b.n	801a3a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a3a4:	f002 f830 	bl	801c408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a3ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d01f      	beq.n	801a3f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a3b4:	68b9      	ldr	r1, [r7, #8]
 801a3b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a3b8:	f000 f8f6 	bl	801a5a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3be:	1e5a      	subs	r2, r3, #1
 801a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3c6:	691b      	ldr	r3, [r3, #16]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d00f      	beq.n	801a3ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a3ce:	3310      	adds	r3, #16
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	f000 ff57 	bl	801b284 <xTaskRemoveFromEventList>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d007      	beq.n	801a3ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a3dc:	4b3c      	ldr	r3, [pc, #240]	@ (801a4d0 <xQueueReceive+0x1c0>)
 801a3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a3e2:	601a      	str	r2, [r3, #0]
 801a3e4:	f3bf 8f4f 	dsb	sy
 801a3e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a3ec:	f002 f83e 	bl	801c46c <vPortExitCritical>
				return pdPASS;
 801a3f0:	2301      	movs	r3, #1
 801a3f2:	e069      	b.n	801a4c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d103      	bne.n	801a402 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a3fa:	f002 f837 	bl	801c46c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a3fe:	2300      	movs	r3, #0
 801a400:	e062      	b.n	801a4c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a404:	2b00      	cmp	r3, #0
 801a406:	d106      	bne.n	801a416 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a408:	f107 0310 	add.w	r3, r7, #16
 801a40c:	4618      	mov	r0, r3
 801a40e:	f001 f801 	bl	801b414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a412:	2301      	movs	r3, #1
 801a414:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a416:	f002 f829 	bl	801c46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a41a:	f000 fcdb 	bl	801add4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a41e:	f001 fff3 	bl	801c408 <vPortEnterCritical>
 801a422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a428:	b25b      	sxtb	r3, r3
 801a42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a42e:	d103      	bne.n	801a438 <xQueueReceive+0x128>
 801a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a432:	2200      	movs	r2, #0
 801a434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a43a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a43e:	b25b      	sxtb	r3, r3
 801a440:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a444:	d103      	bne.n	801a44e <xQueueReceive+0x13e>
 801a446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a448:	2200      	movs	r2, #0
 801a44a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a44e:	f002 f80d 	bl	801c46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a452:	1d3a      	adds	r2, r7, #4
 801a454:	f107 0310 	add.w	r3, r7, #16
 801a458:	4611      	mov	r1, r2
 801a45a:	4618      	mov	r0, r3
 801a45c:	f000 fff0 	bl	801b440 <xTaskCheckForTimeOut>
 801a460:	4603      	mov	r3, r0
 801a462:	2b00      	cmp	r3, #0
 801a464:	d123      	bne.n	801a4ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a468:	f000 f916 	bl	801a698 <prvIsQueueEmpty>
 801a46c:	4603      	mov	r3, r0
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d017      	beq.n	801a4a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a474:	3324      	adds	r3, #36	@ 0x24
 801a476:	687a      	ldr	r2, [r7, #4]
 801a478:	4611      	mov	r1, r2
 801a47a:	4618      	mov	r0, r3
 801a47c:	f000 feb0 	bl	801b1e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a482:	f000 f8b7 	bl	801a5f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a486:	f000 fcb3 	bl	801adf0 <xTaskResumeAll>
 801a48a:	4603      	mov	r3, r0
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d189      	bne.n	801a3a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801a490:	4b0f      	ldr	r3, [pc, #60]	@ (801a4d0 <xQueueReceive+0x1c0>)
 801a492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a496:	601a      	str	r2, [r3, #0]
 801a498:	f3bf 8f4f 	dsb	sy
 801a49c:	f3bf 8f6f 	isb	sy
 801a4a0:	e780      	b.n	801a3a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a4a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a4a4:	f000 f8a6 	bl	801a5f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a4a8:	f000 fca2 	bl	801adf0 <xTaskResumeAll>
 801a4ac:	e77a      	b.n	801a3a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a4ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a4b0:	f000 f8a0 	bl	801a5f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a4b4:	f000 fc9c 	bl	801adf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a4b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a4ba:	f000 f8ed 	bl	801a698 <prvIsQueueEmpty>
 801a4be:	4603      	mov	r3, r0
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	f43f af6f 	beq.w	801a3a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a4c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	3730      	adds	r7, #48	@ 0x30
 801a4cc:	46bd      	mov	sp, r7
 801a4ce:	bd80      	pop	{r7, pc}
 801a4d0:	e000ed04 	.word	0xe000ed04

0801a4d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b086      	sub	sp, #24
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	60f8      	str	r0, [r7, #12]
 801a4dc:	60b9      	str	r1, [r7, #8]
 801a4de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a4e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d10d      	bne.n	801a50e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d14d      	bne.n	801a596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	689b      	ldr	r3, [r3, #8]
 801a4fe:	4618      	mov	r0, r3
 801a500:	f001 f908 	bl	801b714 <xTaskPriorityDisinherit>
 801a504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	2200      	movs	r2, #0
 801a50a:	609a      	str	r2, [r3, #8]
 801a50c:	e043      	b.n	801a596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d119      	bne.n	801a548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	6858      	ldr	r0, [r3, #4]
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a51c:	461a      	mov	r2, r3
 801a51e:	68b9      	ldr	r1, [r7, #8]
 801a520:	f003 f9a0 	bl	801d864 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	685a      	ldr	r2, [r3, #4]
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a52c:	441a      	add	r2, r3
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	685a      	ldr	r2, [r3, #4]
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	689b      	ldr	r3, [r3, #8]
 801a53a:	429a      	cmp	r2, r3
 801a53c:	d32b      	bcc.n	801a596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	681a      	ldr	r2, [r3, #0]
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	605a      	str	r2, [r3, #4]
 801a546:	e026      	b.n	801a596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	68d8      	ldr	r0, [r3, #12]
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a550:	461a      	mov	r2, r3
 801a552:	68b9      	ldr	r1, [r7, #8]
 801a554:	f003 f986 	bl	801d864 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	68da      	ldr	r2, [r3, #12]
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a560:	425b      	negs	r3, r3
 801a562:	441a      	add	r2, r3
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	68da      	ldr	r2, [r3, #12]
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	429a      	cmp	r2, r3
 801a572:	d207      	bcs.n	801a584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	689a      	ldr	r2, [r3, #8]
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a57c:	425b      	negs	r3, r3
 801a57e:	441a      	add	r2, r3
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2b02      	cmp	r3, #2
 801a588:	d105      	bne.n	801a596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a58a:	693b      	ldr	r3, [r7, #16]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d002      	beq.n	801a596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	3b01      	subs	r3, #1
 801a594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a596:	693b      	ldr	r3, [r7, #16]
 801a598:	1c5a      	adds	r2, r3, #1
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801a59e:	697b      	ldr	r3, [r7, #20]
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3718      	adds	r7, #24
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bd80      	pop	{r7, pc}

0801a5a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b082      	sub	sp, #8
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d018      	beq.n	801a5ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	68da      	ldr	r2, [r3, #12]
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a5c2:	441a      	add	r2, r3
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	68da      	ldr	r2, [r3, #12]
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	689b      	ldr	r3, [r3, #8]
 801a5d0:	429a      	cmp	r2, r3
 801a5d2:	d303      	bcc.n	801a5dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681a      	ldr	r2, [r3, #0]
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	68d9      	ldr	r1, [r3, #12]
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	6838      	ldr	r0, [r7, #0]
 801a5e8:	f003 f93c 	bl	801d864 <memcpy>
	}
}
 801a5ec:	bf00      	nop
 801a5ee:	3708      	adds	r7, #8
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	bd80      	pop	{r7, pc}

0801a5f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b084      	sub	sp, #16
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a5fc:	f001 ff04 	bl	801c408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a608:	e011      	b.n	801a62e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d012      	beq.n	801a638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	3324      	adds	r3, #36	@ 0x24
 801a616:	4618      	mov	r0, r3
 801a618:	f000 fe34 	bl	801b284 <xTaskRemoveFromEventList>
 801a61c:	4603      	mov	r3, r0
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d001      	beq.n	801a626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a622:	f000 ff71 	bl	801b508 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a626:	7bfb      	ldrb	r3, [r7, #15]
 801a628:	3b01      	subs	r3, #1
 801a62a:	b2db      	uxtb	r3, r3
 801a62c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a632:	2b00      	cmp	r3, #0
 801a634:	dce9      	bgt.n	801a60a <prvUnlockQueue+0x16>
 801a636:	e000      	b.n	801a63a <prvUnlockQueue+0x46>
					break;
 801a638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	22ff      	movs	r2, #255	@ 0xff
 801a63e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801a642:	f001 ff13 	bl	801c46c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a646:	f001 fedf 	bl	801c408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a652:	e011      	b.n	801a678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	691b      	ldr	r3, [r3, #16]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d012      	beq.n	801a682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	3310      	adds	r3, #16
 801a660:	4618      	mov	r0, r3
 801a662:	f000 fe0f 	bl	801b284 <xTaskRemoveFromEventList>
 801a666:	4603      	mov	r3, r0
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d001      	beq.n	801a670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a66c:	f000 ff4c 	bl	801b508 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a670:	7bbb      	ldrb	r3, [r7, #14]
 801a672:	3b01      	subs	r3, #1
 801a674:	b2db      	uxtb	r3, r3
 801a676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	dce9      	bgt.n	801a654 <prvUnlockQueue+0x60>
 801a680:	e000      	b.n	801a684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	22ff      	movs	r2, #255	@ 0xff
 801a688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801a68c:	f001 feee 	bl	801c46c <vPortExitCritical>
}
 801a690:	bf00      	nop
 801a692:	3710      	adds	r7, #16
 801a694:	46bd      	mov	sp, r7
 801a696:	bd80      	pop	{r7, pc}

0801a698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b084      	sub	sp, #16
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a6a0:	f001 feb2 	bl	801c408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d102      	bne.n	801a6b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a6ac:	2301      	movs	r3, #1
 801a6ae:	60fb      	str	r3, [r7, #12]
 801a6b0:	e001      	b.n	801a6b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a6b6:	f001 fed9 	bl	801c46c <vPortExitCritical>

	return xReturn;
 801a6ba:	68fb      	ldr	r3, [r7, #12]
}
 801a6bc:	4618      	mov	r0, r3
 801a6be:	3710      	adds	r7, #16
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	bd80      	pop	{r7, pc}

0801a6c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	b084      	sub	sp, #16
 801a6c8:	af00      	add	r7, sp, #0
 801a6ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a6cc:	f001 fe9c 	bl	801c408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a6d8:	429a      	cmp	r2, r3
 801a6da:	d102      	bne.n	801a6e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a6dc:	2301      	movs	r3, #1
 801a6de:	60fb      	str	r3, [r7, #12]
 801a6e0:	e001      	b.n	801a6e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a6e6:	f001 fec1 	bl	801c46c <vPortExitCritical>

	return xReturn;
 801a6ea:	68fb      	ldr	r3, [r7, #12]
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	3710      	adds	r7, #16
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bd80      	pop	{r7, pc}

0801a6f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a6f4:	b480      	push	{r7}
 801a6f6:	b085      	sub	sp, #20
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
 801a6fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a6fe:	2300      	movs	r3, #0
 801a700:	60fb      	str	r3, [r7, #12]
 801a702:	e014      	b.n	801a72e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a704:	4a0f      	ldr	r2, [pc, #60]	@ (801a744 <vQueueAddToRegistry+0x50>)
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d10b      	bne.n	801a728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a710:	490c      	ldr	r1, [pc, #48]	@ (801a744 <vQueueAddToRegistry+0x50>)
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	683a      	ldr	r2, [r7, #0]
 801a716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a71a:	4a0a      	ldr	r2, [pc, #40]	@ (801a744 <vQueueAddToRegistry+0x50>)
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	00db      	lsls	r3, r3, #3
 801a720:	4413      	add	r3, r2
 801a722:	687a      	ldr	r2, [r7, #4]
 801a724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a726:	e006      	b.n	801a736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	3301      	adds	r3, #1
 801a72c:	60fb      	str	r3, [r7, #12]
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	2b07      	cmp	r3, #7
 801a732:	d9e7      	bls.n	801a704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a734:	bf00      	nop
 801a736:	bf00      	nop
 801a738:	3714      	adds	r7, #20
 801a73a:	46bd      	mov	sp, r7
 801a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a740:	4770      	bx	lr
 801a742:	bf00      	nop
 801a744:	20003ec8 	.word	0x20003ec8

0801a748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a748:	b580      	push	{r7, lr}
 801a74a:	b086      	sub	sp, #24
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	60f8      	str	r0, [r7, #12]
 801a750:	60b9      	str	r1, [r7, #8]
 801a752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a758:	f001 fe56 	bl	801c408 <vPortEnterCritical>
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a762:	b25b      	sxtb	r3, r3
 801a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a768:	d103      	bne.n	801a772 <vQueueWaitForMessageRestricted+0x2a>
 801a76a:	697b      	ldr	r3, [r7, #20]
 801a76c:	2200      	movs	r2, #0
 801a76e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a772:	697b      	ldr	r3, [r7, #20]
 801a774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801a778:	b25b      	sxtb	r3, r3
 801a77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a77e:	d103      	bne.n	801a788 <vQueueWaitForMessageRestricted+0x40>
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	2200      	movs	r2, #0
 801a784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801a788:	f001 fe70 	bl	801c46c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a790:	2b00      	cmp	r3, #0
 801a792:	d106      	bne.n	801a7a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a794:	697b      	ldr	r3, [r7, #20]
 801a796:	3324      	adds	r3, #36	@ 0x24
 801a798:	687a      	ldr	r2, [r7, #4]
 801a79a:	68b9      	ldr	r1, [r7, #8]
 801a79c:	4618      	mov	r0, r3
 801a79e:	f000 fd45 	bl	801b22c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a7a2:	6978      	ldr	r0, [r7, #20]
 801a7a4:	f7ff ff26 	bl	801a5f4 <prvUnlockQueue>
	}
 801a7a8:	bf00      	nop
 801a7aa:	3718      	adds	r7, #24
 801a7ac:	46bd      	mov	sp, r7
 801a7ae:	bd80      	pop	{r7, pc}

0801a7b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b08e      	sub	sp, #56	@ 0x38
 801a7b4:	af04      	add	r7, sp, #16
 801a7b6:	60f8      	str	r0, [r7, #12]
 801a7b8:	60b9      	str	r1, [r7, #8]
 801a7ba:	607a      	str	r2, [r7, #4]
 801a7bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d10b      	bne.n	801a7dc <xTaskCreateStatic+0x2c>
	__asm volatile
 801a7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7c8:	f383 8811 	msr	BASEPRI, r3
 801a7cc:	f3bf 8f6f 	isb	sy
 801a7d0:	f3bf 8f4f 	dsb	sy
 801a7d4:	623b      	str	r3, [r7, #32]
}
 801a7d6:	bf00      	nop
 801a7d8:	bf00      	nop
 801a7da:	e7fd      	b.n	801a7d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d10b      	bne.n	801a7fa <xTaskCreateStatic+0x4a>
	__asm volatile
 801a7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a7e6:	f383 8811 	msr	BASEPRI, r3
 801a7ea:	f3bf 8f6f 	isb	sy
 801a7ee:	f3bf 8f4f 	dsb	sy
 801a7f2:	61fb      	str	r3, [r7, #28]
}
 801a7f4:	bf00      	nop
 801a7f6:	bf00      	nop
 801a7f8:	e7fd      	b.n	801a7f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a7fa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801a7fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a800:	693b      	ldr	r3, [r7, #16]
 801a802:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 801a806:	d00b      	beq.n	801a820 <xTaskCreateStatic+0x70>
	__asm volatile
 801a808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a80c:	f383 8811 	msr	BASEPRI, r3
 801a810:	f3bf 8f6f 	isb	sy
 801a814:	f3bf 8f4f 	dsb	sy
 801a818:	61bb      	str	r3, [r7, #24]
}
 801a81a:	bf00      	nop
 801a81c:	bf00      	nop
 801a81e:	e7fd      	b.n	801a81c <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a820:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a824:	2b00      	cmp	r3, #0
 801a826:	d01e      	beq.n	801a866 <xTaskCreateStatic+0xb6>
 801a828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d01b      	beq.n	801a866 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a830:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a836:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a83a:	2202      	movs	r2, #2
 801a83c:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a840:	2300      	movs	r3, #0
 801a842:	9303      	str	r3, [sp, #12]
 801a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a846:	9302      	str	r3, [sp, #8]
 801a848:	f107 0314 	add.w	r3, r7, #20
 801a84c:	9301      	str	r3, [sp, #4]
 801a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a850:	9300      	str	r3, [sp, #0]
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	687a      	ldr	r2, [r7, #4]
 801a856:	68b9      	ldr	r1, [r7, #8]
 801a858:	68f8      	ldr	r0, [r7, #12]
 801a85a:	f000 f851 	bl	801a900 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a85e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a860:	f000 f922 	bl	801aaa8 <prvAddNewTaskToReadyList>
 801a864:	e001      	b.n	801a86a <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 801a866:	2300      	movs	r3, #0
 801a868:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a86a:	697b      	ldr	r3, [r7, #20]
	}
 801a86c:	4618      	mov	r0, r3
 801a86e:	3728      	adds	r7, #40	@ 0x28
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}

0801a874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a874:	b580      	push	{r7, lr}
 801a876:	b08c      	sub	sp, #48	@ 0x30
 801a878:	af04      	add	r7, sp, #16
 801a87a:	60f8      	str	r0, [r7, #12]
 801a87c:	60b9      	str	r1, [r7, #8]
 801a87e:	603b      	str	r3, [r7, #0]
 801a880:	4613      	mov	r3, r2
 801a882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a884:	88fb      	ldrh	r3, [r7, #6]
 801a886:	009b      	lsls	r3, r3, #2
 801a888:	4618      	mov	r0, r3
 801a88a:	f001 fedf 	bl	801c64c <pvPortMalloc>
 801a88e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a890:	697b      	ldr	r3, [r7, #20]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d00f      	beq.n	801a8b6 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a896:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801a89a:	f001 fed7 	bl	801c64c <pvPortMalloc>
 801a89e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a8a0:	69fb      	ldr	r3, [r7, #28]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d003      	beq.n	801a8ae <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a8a6:	69fb      	ldr	r3, [r7, #28]
 801a8a8:	697a      	ldr	r2, [r7, #20]
 801a8aa:	631a      	str	r2, [r3, #48]	@ 0x30
 801a8ac:	e005      	b.n	801a8ba <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a8ae:	6978      	ldr	r0, [r7, #20]
 801a8b0:	f001 ff9a 	bl	801c7e8 <vPortFree>
 801a8b4:	e001      	b.n	801a8ba <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a8ba:	69fb      	ldr	r3, [r7, #28]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d017      	beq.n	801a8f0 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a8c0:	69fb      	ldr	r3, [r7, #28]
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a8c8:	88fa      	ldrh	r2, [r7, #6]
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	9303      	str	r3, [sp, #12]
 801a8ce:	69fb      	ldr	r3, [r7, #28]
 801a8d0:	9302      	str	r3, [sp, #8]
 801a8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8d4:	9301      	str	r3, [sp, #4]
 801a8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8d8:	9300      	str	r3, [sp, #0]
 801a8da:	683b      	ldr	r3, [r7, #0]
 801a8dc:	68b9      	ldr	r1, [r7, #8]
 801a8de:	68f8      	ldr	r0, [r7, #12]
 801a8e0:	f000 f80e 	bl	801a900 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a8e4:	69f8      	ldr	r0, [r7, #28]
 801a8e6:	f000 f8df 	bl	801aaa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a8ea:	2301      	movs	r3, #1
 801a8ec:	61bb      	str	r3, [r7, #24]
 801a8ee:	e002      	b.n	801a8f6 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a8f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a8f6:	69bb      	ldr	r3, [r7, #24]
	}
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	3720      	adds	r7, #32
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}

0801a900 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b088      	sub	sp, #32
 801a904:	af00      	add	r7, sp, #0
 801a906:	60f8      	str	r0, [r7, #12]
 801a908:	60b9      	str	r1, [r7, #8]
 801a90a:	607a      	str	r2, [r7, #4]
 801a90c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a910:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	009b      	lsls	r3, r3, #2
 801a916:	461a      	mov	r2, r3
 801a918:	21a5      	movs	r1, #165	@ 0xa5
 801a91a:	f002 fefa 	bl	801d712 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801a928:	3b01      	subs	r3, #1
 801a92a:	009b      	lsls	r3, r3, #2
 801a92c:	4413      	add	r3, r2
 801a92e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a930:	69bb      	ldr	r3, [r7, #24]
 801a932:	f023 0307 	bic.w	r3, r3, #7
 801a936:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a938:	69bb      	ldr	r3, [r7, #24]
 801a93a:	f003 0307 	and.w	r3, r3, #7
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d00b      	beq.n	801a95a <prvInitialiseNewTask+0x5a>
	__asm volatile
 801a942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a946:	f383 8811 	msr	BASEPRI, r3
 801a94a:	f3bf 8f6f 	isb	sy
 801a94e:	f3bf 8f4f 	dsb	sy
 801a952:	617b      	str	r3, [r7, #20]
}
 801a954:	bf00      	nop
 801a956:	bf00      	nop
 801a958:	e7fd      	b.n	801a956 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d01f      	beq.n	801a9a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a960:	2300      	movs	r3, #0
 801a962:	61fb      	str	r3, [r7, #28]
 801a964:	e012      	b.n	801a98c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a966:	68ba      	ldr	r2, [r7, #8]
 801a968:	69fb      	ldr	r3, [r7, #28]
 801a96a:	4413      	add	r3, r2
 801a96c:	7819      	ldrb	r1, [r3, #0]
 801a96e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a970:	69fb      	ldr	r3, [r7, #28]
 801a972:	4413      	add	r3, r2
 801a974:	3334      	adds	r3, #52	@ 0x34
 801a976:	460a      	mov	r2, r1
 801a978:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a97a:	68ba      	ldr	r2, [r7, #8]
 801a97c:	69fb      	ldr	r3, [r7, #28]
 801a97e:	4413      	add	r3, r2
 801a980:	781b      	ldrb	r3, [r3, #0]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d006      	beq.n	801a994 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a986:	69fb      	ldr	r3, [r7, #28]
 801a988:	3301      	adds	r3, #1
 801a98a:	61fb      	str	r3, [r7, #28]
 801a98c:	69fb      	ldr	r3, [r7, #28]
 801a98e:	2b0f      	cmp	r3, #15
 801a990:	d9e9      	bls.n	801a966 <prvInitialiseNewTask+0x66>
 801a992:	e000      	b.n	801a996 <prvInitialiseNewTask+0x96>
			{
				break;
 801a994:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a998:	2200      	movs	r2, #0
 801a99a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801a99e:	e003      	b.n	801a9a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9aa:	2b0e      	cmp	r3, #14
 801a9ac:	d901      	bls.n	801a9b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a9ae:	230e      	movs	r3, #14
 801a9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a9b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a9bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9c6:	3304      	adds	r3, #4
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f7ff f897 	bl	8019afc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9d0:	3318      	adds	r3, #24
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f7ff f892 	bl	8019afc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a9e0:	f1c3 020f 	rsb	r2, r3, #15
 801a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9fe:	2200      	movs	r2, #0
 801aa00:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801aa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa06:	3358      	adds	r3, #88	@ 0x58
 801aa08:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801aa0c:	2100      	movs	r1, #0
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f002 fe7f 	bl	801d712 <memset>
 801aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa16:	4a21      	ldr	r2, [pc, #132]	@ (801aa9c <prvInitialiseNewTask+0x19c>)
 801aa18:	65da      	str	r2, [r3, #92]	@ 0x5c
 801aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa1c:	4a20      	ldr	r2, [pc, #128]	@ (801aaa0 <prvInitialiseNewTask+0x1a0>)
 801aa1e:	661a      	str	r2, [r3, #96]	@ 0x60
 801aa20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa22:	4a20      	ldr	r2, [pc, #128]	@ (801aaa4 <prvInitialiseNewTask+0x1a4>)
 801aa24:	665a      	str	r2, [r3, #100]	@ 0x64
 801aa26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801aa28:	f04f 0201 	mov.w	r2, #1
 801aa2c:	f04f 0300 	mov.w	r3, #0
 801aa30:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 801aa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa36:	f243 320e 	movw	r2, #13070	@ 0x330e
 801aa3a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 801aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa40:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 801aa44:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 801aa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa4a:	f241 2234 	movw	r2, #4660	@ 0x1234
 801aa4e:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 801aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa54:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 801aa58:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 801aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa5e:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 801aa62:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 801aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa68:	2205      	movs	r2, #5
 801aa6a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 801aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa70:	220b      	movs	r2, #11
 801aa72:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801aa76:	683a      	ldr	r2, [r7, #0]
 801aa78:	68f9      	ldr	r1, [r7, #12]
 801aa7a:	69b8      	ldr	r0, [r7, #24]
 801aa7c:	f001 fb94 	bl	801c1a8 <pxPortInitialiseStack>
 801aa80:	4602      	mov	r2, r0
 801aa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801aa86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d002      	beq.n	801aa92 <prvInitialiseNewTask+0x192>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801aa8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801aa92:	bf00      	nop
 801aa94:	3720      	adds	r7, #32
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd80      	pop	{r7, pc}
 801aa9a:	bf00      	nop
 801aa9c:	2000d370 	.word	0x2000d370
 801aaa0:	2000d3d8 	.word	0x2000d3d8
 801aaa4:	2000d440 	.word	0x2000d440

0801aaa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b082      	sub	sp, #8
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801aab0:	f001 fcaa 	bl	801c408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801aab4:	4b2c      	ldr	r3, [pc, #176]	@ (801ab68 <prvAddNewTaskToReadyList+0xc0>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	3301      	adds	r3, #1
 801aaba:	4a2b      	ldr	r2, [pc, #172]	@ (801ab68 <prvAddNewTaskToReadyList+0xc0>)
 801aabc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801aabe:	4b2b      	ldr	r3, [pc, #172]	@ (801ab6c <prvAddNewTaskToReadyList+0xc4>)
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d109      	bne.n	801aada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801aac6:	4a29      	ldr	r2, [pc, #164]	@ (801ab6c <prvAddNewTaskToReadyList+0xc4>)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801aacc:	4b26      	ldr	r3, [pc, #152]	@ (801ab68 <prvAddNewTaskToReadyList+0xc0>)
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	2b01      	cmp	r3, #1
 801aad2:	d110      	bne.n	801aaf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801aad4:	f000 fd3c 	bl	801b550 <prvInitialiseTaskLists>
 801aad8:	e00d      	b.n	801aaf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801aada:	4b25      	ldr	r3, [pc, #148]	@ (801ab70 <prvAddNewTaskToReadyList+0xc8>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d109      	bne.n	801aaf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801aae2:	4b22      	ldr	r3, [pc, #136]	@ (801ab6c <prvAddNewTaskToReadyList+0xc4>)
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aaec:	429a      	cmp	r2, r3
 801aaee:	d802      	bhi.n	801aaf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801aaf0:	4a1e      	ldr	r2, [pc, #120]	@ (801ab6c <prvAddNewTaskToReadyList+0xc4>)
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801aaf6:	4b1f      	ldr	r3, [pc, #124]	@ (801ab74 <prvAddNewTaskToReadyList+0xcc>)
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	3301      	adds	r3, #1
 801aafc:	4a1d      	ldr	r2, [pc, #116]	@ (801ab74 <prvAddNewTaskToReadyList+0xcc>)
 801aafe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801ab00:	4b1c      	ldr	r3, [pc, #112]	@ (801ab74 <prvAddNewTaskToReadyList+0xcc>)
 801ab02:	681a      	ldr	r2, [r3, #0]
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab0c:	2201      	movs	r2, #1
 801ab0e:	409a      	lsls	r2, r3
 801ab10:	4b19      	ldr	r3, [pc, #100]	@ (801ab78 <prvAddNewTaskToReadyList+0xd0>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	4313      	orrs	r3, r2
 801ab16:	4a18      	ldr	r2, [pc, #96]	@ (801ab78 <prvAddNewTaskToReadyList+0xd0>)
 801ab18:	6013      	str	r3, [r2, #0]
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab1e:	4613      	mov	r3, r2
 801ab20:	009b      	lsls	r3, r3, #2
 801ab22:	4413      	add	r3, r2
 801ab24:	009b      	lsls	r3, r3, #2
 801ab26:	4a15      	ldr	r2, [pc, #84]	@ (801ab7c <prvAddNewTaskToReadyList+0xd4>)
 801ab28:	441a      	add	r2, r3
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	3304      	adds	r3, #4
 801ab2e:	4619      	mov	r1, r3
 801ab30:	4610      	mov	r0, r2
 801ab32:	f7fe fff0 	bl	8019b16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801ab36:	f001 fc99 	bl	801c46c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (801ab70 <prvAddNewTaskToReadyList+0xc8>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d00e      	beq.n	801ab60 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801ab42:	4b0a      	ldr	r3, [pc, #40]	@ (801ab6c <prvAddNewTaskToReadyList+0xc4>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab4c:	429a      	cmp	r2, r3
 801ab4e:	d207      	bcs.n	801ab60 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801ab50:	4b0b      	ldr	r3, [pc, #44]	@ (801ab80 <prvAddNewTaskToReadyList+0xd8>)
 801ab52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ab56:	601a      	str	r2, [r3, #0]
 801ab58:	f3bf 8f4f 	dsb	sy
 801ab5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ab60:	bf00      	nop
 801ab62:	3708      	adds	r7, #8
 801ab64:	46bd      	mov	sp, r7
 801ab66:	bd80      	pop	{r7, pc}
 801ab68:	200040a8 	.word	0x200040a8
 801ab6c:	20003f08 	.word	0x20003f08
 801ab70:	200040b4 	.word	0x200040b4
 801ab74:	200040c4 	.word	0x200040c4
 801ab78:	200040b0 	.word	0x200040b0
 801ab7c:	20003f0c 	.word	0x20003f0c
 801ab80:	e000ed04 	.word	0xe000ed04

0801ab84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b08a      	sub	sp, #40	@ 0x28
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
 801ab8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801ab8e:	2300      	movs	r3, #0
 801ab90:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d10b      	bne.n	801abb0 <vTaskDelayUntil+0x2c>
	__asm volatile
 801ab98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ab9c:	f383 8811 	msr	BASEPRI, r3
 801aba0:	f3bf 8f6f 	isb	sy
 801aba4:	f3bf 8f4f 	dsb	sy
 801aba8:	617b      	str	r3, [r7, #20]
}
 801abaa:	bf00      	nop
 801abac:	bf00      	nop
 801abae:	e7fd      	b.n	801abac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801abb0:	683b      	ldr	r3, [r7, #0]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d10b      	bne.n	801abce <vTaskDelayUntil+0x4a>
	__asm volatile
 801abb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801abba:	f383 8811 	msr	BASEPRI, r3
 801abbe:	f3bf 8f6f 	isb	sy
 801abc2:	f3bf 8f4f 	dsb	sy
 801abc6:	613b      	str	r3, [r7, #16]
}
 801abc8:	bf00      	nop
 801abca:	bf00      	nop
 801abcc:	e7fd      	b.n	801abca <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801abce:	4b2a      	ldr	r3, [pc, #168]	@ (801ac78 <vTaskDelayUntil+0xf4>)
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d00b      	beq.n	801abee <vTaskDelayUntil+0x6a>
	__asm volatile
 801abd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801abda:	f383 8811 	msr	BASEPRI, r3
 801abde:	f3bf 8f6f 	isb	sy
 801abe2:	f3bf 8f4f 	dsb	sy
 801abe6:	60fb      	str	r3, [r7, #12]
}
 801abe8:	bf00      	nop
 801abea:	bf00      	nop
 801abec:	e7fd      	b.n	801abea <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801abee:	f000 f8f1 	bl	801add4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801abf2:	4b22      	ldr	r3, [pc, #136]	@ (801ac7c <vTaskDelayUntil+0xf8>)
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	683a      	ldr	r2, [r7, #0]
 801abfe:	4413      	add	r3, r2
 801ac00:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	6a3a      	ldr	r2, [r7, #32]
 801ac08:	429a      	cmp	r2, r3
 801ac0a:	d20b      	bcs.n	801ac24 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	69fa      	ldr	r2, [r7, #28]
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d211      	bcs.n	801ac3a <vTaskDelayUntil+0xb6>
 801ac16:	69fa      	ldr	r2, [r7, #28]
 801ac18:	6a3b      	ldr	r3, [r7, #32]
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	d90d      	bls.n	801ac3a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801ac1e:	2301      	movs	r3, #1
 801ac20:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac22:	e00a      	b.n	801ac3a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	69fa      	ldr	r2, [r7, #28]
 801ac2a:	429a      	cmp	r2, r3
 801ac2c:	d303      	bcc.n	801ac36 <vTaskDelayUntil+0xb2>
 801ac2e:	69fa      	ldr	r2, [r7, #28]
 801ac30:	6a3b      	ldr	r3, [r7, #32]
 801ac32:	429a      	cmp	r2, r3
 801ac34:	d901      	bls.n	801ac3a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801ac36:	2301      	movs	r3, #1
 801ac38:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	69fa      	ldr	r2, [r7, #28]
 801ac3e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d006      	beq.n	801ac54 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801ac46:	69fa      	ldr	r2, [r7, #28]
 801ac48:	6a3b      	ldr	r3, [r7, #32]
 801ac4a:	1ad3      	subs	r3, r2, r3
 801ac4c:	2100      	movs	r1, #0
 801ac4e:	4618      	mov	r0, r3
 801ac50:	f000 feca 	bl	801b9e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801ac54:	f000 f8cc 	bl	801adf0 <xTaskResumeAll>
 801ac58:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ac5a:	69bb      	ldr	r3, [r7, #24]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d107      	bne.n	801ac70 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 801ac60:	4b07      	ldr	r3, [pc, #28]	@ (801ac80 <vTaskDelayUntil+0xfc>)
 801ac62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ac66:	601a      	str	r2, [r3, #0]
 801ac68:	f3bf 8f4f 	dsb	sy
 801ac6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ac70:	bf00      	nop
 801ac72:	3728      	adds	r7, #40	@ 0x28
 801ac74:	46bd      	mov	sp, r7
 801ac76:	bd80      	pop	{r7, pc}
 801ac78:	200040d0 	.word	0x200040d0
 801ac7c:	200040ac 	.word	0x200040ac
 801ac80:	e000ed04 	.word	0xe000ed04

0801ac84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b084      	sub	sp, #16
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d018      	beq.n	801acc8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ac96:	4b14      	ldr	r3, [pc, #80]	@ (801ace8 <vTaskDelay+0x64>)
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d00b      	beq.n	801acb6 <vTaskDelay+0x32>
	__asm volatile
 801ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801aca2:	f383 8811 	msr	BASEPRI, r3
 801aca6:	f3bf 8f6f 	isb	sy
 801acaa:	f3bf 8f4f 	dsb	sy
 801acae:	60bb      	str	r3, [r7, #8]
}
 801acb0:	bf00      	nop
 801acb2:	bf00      	nop
 801acb4:	e7fd      	b.n	801acb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801acb6:	f000 f88d 	bl	801add4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801acba:	2100      	movs	r1, #0
 801acbc:	6878      	ldr	r0, [r7, #4]
 801acbe:	f000 fe93 	bl	801b9e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801acc2:	f000 f895 	bl	801adf0 <xTaskResumeAll>
 801acc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d107      	bne.n	801acde <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801acce:	4b07      	ldr	r3, [pc, #28]	@ (801acec <vTaskDelay+0x68>)
 801acd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801acd4:	601a      	str	r2, [r3, #0]
 801acd6:	f3bf 8f4f 	dsb	sy
 801acda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801acde:	bf00      	nop
 801ace0:	3710      	adds	r7, #16
 801ace2:	46bd      	mov	sp, r7
 801ace4:	bd80      	pop	{r7, pc}
 801ace6:	bf00      	nop
 801ace8:	200040d0 	.word	0x200040d0
 801acec:	e000ed04 	.word	0xe000ed04

0801acf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b08a      	sub	sp, #40	@ 0x28
 801acf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801acf6:	2300      	movs	r3, #0
 801acf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801acfa:	2300      	movs	r3, #0
 801acfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801acfe:	463a      	mov	r2, r7
 801ad00:	1d39      	adds	r1, r7, #4
 801ad02:	f107 0308 	add.w	r3, r7, #8
 801ad06:	4618      	mov	r0, r3
 801ad08:	f7e8 fa36 	bl	8003178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ad0c:	6839      	ldr	r1, [r7, #0]
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	68ba      	ldr	r2, [r7, #8]
 801ad12:	9202      	str	r2, [sp, #8]
 801ad14:	9301      	str	r3, [sp, #4]
 801ad16:	2300      	movs	r3, #0
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	460a      	mov	r2, r1
 801ad1e:	4925      	ldr	r1, [pc, #148]	@ (801adb4 <vTaskStartScheduler+0xc4>)
 801ad20:	4825      	ldr	r0, [pc, #148]	@ (801adb8 <vTaskStartScheduler+0xc8>)
 801ad22:	f7ff fd45 	bl	801a7b0 <xTaskCreateStatic>
 801ad26:	4603      	mov	r3, r0
 801ad28:	4a24      	ldr	r2, [pc, #144]	@ (801adbc <vTaskStartScheduler+0xcc>)
 801ad2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801ad2c:	4b23      	ldr	r3, [pc, #140]	@ (801adbc <vTaskStartScheduler+0xcc>)
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d002      	beq.n	801ad3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801ad34:	2301      	movs	r3, #1
 801ad36:	617b      	str	r3, [r7, #20]
 801ad38:	e001      	b.n	801ad3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801ad3e:	697b      	ldr	r3, [r7, #20]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d102      	bne.n	801ad4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801ad44:	f000 feb6 	bl	801bab4 <xTimerCreateTimerTask>
 801ad48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801ad4a:	697b      	ldr	r3, [r7, #20]
 801ad4c:	2b01      	cmp	r3, #1
 801ad4e:	d11d      	bne.n	801ad8c <vTaskStartScheduler+0x9c>
	__asm volatile
 801ad50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad54:	f383 8811 	msr	BASEPRI, r3
 801ad58:	f3bf 8f6f 	isb	sy
 801ad5c:	f3bf 8f4f 	dsb	sy
 801ad60:	613b      	str	r3, [r7, #16]
}
 801ad62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801ad64:	4b16      	ldr	r3, [pc, #88]	@ (801adc0 <vTaskStartScheduler+0xd0>)
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	3358      	adds	r3, #88	@ 0x58
 801ad6a:	4a16      	ldr	r2, [pc, #88]	@ (801adc4 <vTaskStartScheduler+0xd4>)
 801ad6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801ad6e:	4b16      	ldr	r3, [pc, #88]	@ (801adc8 <vTaskStartScheduler+0xd8>)
 801ad70:	f04f 32ff 	mov.w	r2, #4294967295
 801ad74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801ad76:	4b15      	ldr	r3, [pc, #84]	@ (801adcc <vTaskStartScheduler+0xdc>)
 801ad78:	2201      	movs	r2, #1
 801ad7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801ad7c:	4b14      	ldr	r3, [pc, #80]	@ (801add0 <vTaskStartScheduler+0xe0>)
 801ad7e:	2200      	movs	r2, #0
 801ad80:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801ad82:	f7e8 f9df 	bl	8003144 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801ad86:	f001 fa9b 	bl	801c2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801ad8a:	e00f      	b.n	801adac <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801ad8c:	697b      	ldr	r3, [r7, #20]
 801ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad92:	d10b      	bne.n	801adac <vTaskStartScheduler+0xbc>
	__asm volatile
 801ad94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ad98:	f383 8811 	msr	BASEPRI, r3
 801ad9c:	f3bf 8f6f 	isb	sy
 801ada0:	f3bf 8f4f 	dsb	sy
 801ada4:	60fb      	str	r3, [r7, #12]
}
 801ada6:	bf00      	nop
 801ada8:	bf00      	nop
 801adaa:	e7fd      	b.n	801ada8 <vTaskStartScheduler+0xb8>
}
 801adac:	bf00      	nop
 801adae:	3718      	adds	r7, #24
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}
 801adb4:	080244b4 	.word	0x080244b4
 801adb8:	0801b521 	.word	0x0801b521
 801adbc:	200040cc 	.word	0x200040cc
 801adc0:	20003f08 	.word	0x20003f08
 801adc4:	20000150 	.word	0x20000150
 801adc8:	200040c8 	.word	0x200040c8
 801adcc:	200040b4 	.word	0x200040b4
 801add0:	200040ac 	.word	0x200040ac

0801add4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801add4:	b480      	push	{r7}
 801add6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801add8:	4b04      	ldr	r3, [pc, #16]	@ (801adec <vTaskSuspendAll+0x18>)
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	3301      	adds	r3, #1
 801adde:	4a03      	ldr	r2, [pc, #12]	@ (801adec <vTaskSuspendAll+0x18>)
 801ade0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801ade2:	bf00      	nop
 801ade4:	46bd      	mov	sp, r7
 801ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adea:	4770      	bx	lr
 801adec:	200040d0 	.word	0x200040d0

0801adf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b084      	sub	sp, #16
 801adf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801adf6:	2300      	movs	r3, #0
 801adf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801adfa:	2300      	movs	r3, #0
 801adfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801adfe:	4b42      	ldr	r3, [pc, #264]	@ (801af08 <xTaskResumeAll+0x118>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d10b      	bne.n	801ae1e <xTaskResumeAll+0x2e>
	__asm volatile
 801ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801ae0a:	f383 8811 	msr	BASEPRI, r3
 801ae0e:	f3bf 8f6f 	isb	sy
 801ae12:	f3bf 8f4f 	dsb	sy
 801ae16:	603b      	str	r3, [r7, #0]
}
 801ae18:	bf00      	nop
 801ae1a:	bf00      	nop
 801ae1c:	e7fd      	b.n	801ae1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801ae1e:	f001 faf3 	bl	801c408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801ae22:	4b39      	ldr	r3, [pc, #228]	@ (801af08 <xTaskResumeAll+0x118>)
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	3b01      	subs	r3, #1
 801ae28:	4a37      	ldr	r2, [pc, #220]	@ (801af08 <xTaskResumeAll+0x118>)
 801ae2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ae2c:	4b36      	ldr	r3, [pc, #216]	@ (801af08 <xTaskResumeAll+0x118>)
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d161      	bne.n	801aef8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801ae34:	4b35      	ldr	r3, [pc, #212]	@ (801af0c <xTaskResumeAll+0x11c>)
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d05d      	beq.n	801aef8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ae3c:	e02e      	b.n	801ae9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae3e:	4b34      	ldr	r3, [pc, #208]	@ (801af10 <xTaskResumeAll+0x120>)
 801ae40:	68db      	ldr	r3, [r3, #12]
 801ae42:	68db      	ldr	r3, [r3, #12]
 801ae44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	3318      	adds	r3, #24
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f7fe fec0 	bl	8019bd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	3304      	adds	r3, #4
 801ae54:	4618      	mov	r0, r3
 801ae56:	f7fe febb 	bl	8019bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae5e:	2201      	movs	r2, #1
 801ae60:	409a      	lsls	r2, r3
 801ae62:	4b2c      	ldr	r3, [pc, #176]	@ (801af14 <xTaskResumeAll+0x124>)
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	4313      	orrs	r3, r2
 801ae68:	4a2a      	ldr	r2, [pc, #168]	@ (801af14 <xTaskResumeAll+0x124>)
 801ae6a:	6013      	str	r3, [r2, #0]
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ae70:	4613      	mov	r3, r2
 801ae72:	009b      	lsls	r3, r3, #2
 801ae74:	4413      	add	r3, r2
 801ae76:	009b      	lsls	r3, r3, #2
 801ae78:	4a27      	ldr	r2, [pc, #156]	@ (801af18 <xTaskResumeAll+0x128>)
 801ae7a:	441a      	add	r2, r3
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	3304      	adds	r3, #4
 801ae80:	4619      	mov	r1, r3
 801ae82:	4610      	mov	r0, r2
 801ae84:	f7fe fe47 	bl	8019b16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ae8c:	4b23      	ldr	r3, [pc, #140]	@ (801af1c <xTaskResumeAll+0x12c>)
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae92:	429a      	cmp	r2, r3
 801ae94:	d302      	bcc.n	801ae9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801ae96:	4b22      	ldr	r3, [pc, #136]	@ (801af20 <xTaskResumeAll+0x130>)
 801ae98:	2201      	movs	r2, #1
 801ae9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ae9c:	4b1c      	ldr	r3, [pc, #112]	@ (801af10 <xTaskResumeAll+0x120>)
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d1cc      	bne.n	801ae3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d001      	beq.n	801aeae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801aeaa:	f000 fbf5 	bl	801b698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801aeae:	4b1d      	ldr	r3, [pc, #116]	@ (801af24 <xTaskResumeAll+0x134>)
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d010      	beq.n	801aedc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801aeba:	f000 f847 	bl	801af4c <xTaskIncrementTick>
 801aebe:	4603      	mov	r3, r0
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d002      	beq.n	801aeca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801aec4:	4b16      	ldr	r3, [pc, #88]	@ (801af20 <xTaskResumeAll+0x130>)
 801aec6:	2201      	movs	r2, #1
 801aec8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	3b01      	subs	r3, #1
 801aece:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d1f1      	bne.n	801aeba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801aed6:	4b13      	ldr	r3, [pc, #76]	@ (801af24 <xTaskResumeAll+0x134>)
 801aed8:	2200      	movs	r2, #0
 801aeda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801aedc:	4b10      	ldr	r3, [pc, #64]	@ (801af20 <xTaskResumeAll+0x130>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d009      	beq.n	801aef8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801aee4:	2301      	movs	r3, #1
 801aee6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801aee8:	4b0f      	ldr	r3, [pc, #60]	@ (801af28 <xTaskResumeAll+0x138>)
 801aeea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801aeee:	601a      	str	r2, [r3, #0]
 801aef0:	f3bf 8f4f 	dsb	sy
 801aef4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801aef8:	f001 fab8 	bl	801c46c <vPortExitCritical>

	return xAlreadyYielded;
 801aefc:	68bb      	ldr	r3, [r7, #8]
}
 801aefe:	4618      	mov	r0, r3
 801af00:	3710      	adds	r7, #16
 801af02:	46bd      	mov	sp, r7
 801af04:	bd80      	pop	{r7, pc}
 801af06:	bf00      	nop
 801af08:	200040d0 	.word	0x200040d0
 801af0c:	200040a8 	.word	0x200040a8
 801af10:	20004068 	.word	0x20004068
 801af14:	200040b0 	.word	0x200040b0
 801af18:	20003f0c 	.word	0x20003f0c
 801af1c:	20003f08 	.word	0x20003f08
 801af20:	200040bc 	.word	0x200040bc
 801af24:	200040b8 	.word	0x200040b8
 801af28:	e000ed04 	.word	0xe000ed04

0801af2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801af2c:	b480      	push	{r7}
 801af2e:	b083      	sub	sp, #12
 801af30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801af32:	4b05      	ldr	r3, [pc, #20]	@ (801af48 <xTaskGetTickCount+0x1c>)
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801af38:	687b      	ldr	r3, [r7, #4]
}
 801af3a:	4618      	mov	r0, r3
 801af3c:	370c      	adds	r7, #12
 801af3e:	46bd      	mov	sp, r7
 801af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af44:	4770      	bx	lr
 801af46:	bf00      	nop
 801af48:	200040ac 	.word	0x200040ac

0801af4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b086      	sub	sp, #24
 801af50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801af52:	2300      	movs	r3, #0
 801af54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801af56:	4b4f      	ldr	r3, [pc, #316]	@ (801b094 <xTaskIncrementTick+0x148>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	f040 808f 	bne.w	801b07e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801af60:	4b4d      	ldr	r3, [pc, #308]	@ (801b098 <xTaskIncrementTick+0x14c>)
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	3301      	adds	r3, #1
 801af66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801af68:	4a4b      	ldr	r2, [pc, #300]	@ (801b098 <xTaskIncrementTick+0x14c>)
 801af6a:	693b      	ldr	r3, [r7, #16]
 801af6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801af6e:	693b      	ldr	r3, [r7, #16]
 801af70:	2b00      	cmp	r3, #0
 801af72:	d121      	bne.n	801afb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801af74:	4b49      	ldr	r3, [pc, #292]	@ (801b09c <xTaskIncrementTick+0x150>)
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d00b      	beq.n	801af96 <xTaskIncrementTick+0x4a>
	__asm volatile
 801af7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801af82:	f383 8811 	msr	BASEPRI, r3
 801af86:	f3bf 8f6f 	isb	sy
 801af8a:	f3bf 8f4f 	dsb	sy
 801af8e:	603b      	str	r3, [r7, #0]
}
 801af90:	bf00      	nop
 801af92:	bf00      	nop
 801af94:	e7fd      	b.n	801af92 <xTaskIncrementTick+0x46>
 801af96:	4b41      	ldr	r3, [pc, #260]	@ (801b09c <xTaskIncrementTick+0x150>)
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	60fb      	str	r3, [r7, #12]
 801af9c:	4b40      	ldr	r3, [pc, #256]	@ (801b0a0 <xTaskIncrementTick+0x154>)
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	4a3e      	ldr	r2, [pc, #248]	@ (801b09c <xTaskIncrementTick+0x150>)
 801afa2:	6013      	str	r3, [r2, #0]
 801afa4:	4a3e      	ldr	r2, [pc, #248]	@ (801b0a0 <xTaskIncrementTick+0x154>)
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	6013      	str	r3, [r2, #0]
 801afaa:	4b3e      	ldr	r3, [pc, #248]	@ (801b0a4 <xTaskIncrementTick+0x158>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	3301      	adds	r3, #1
 801afb0:	4a3c      	ldr	r2, [pc, #240]	@ (801b0a4 <xTaskIncrementTick+0x158>)
 801afb2:	6013      	str	r3, [r2, #0]
 801afb4:	f000 fb70 	bl	801b698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801afb8:	4b3b      	ldr	r3, [pc, #236]	@ (801b0a8 <xTaskIncrementTick+0x15c>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	693a      	ldr	r2, [r7, #16]
 801afbe:	429a      	cmp	r2, r3
 801afc0:	d348      	bcc.n	801b054 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801afc2:	4b36      	ldr	r3, [pc, #216]	@ (801b09c <xTaskIncrementTick+0x150>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d104      	bne.n	801afd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801afcc:	4b36      	ldr	r3, [pc, #216]	@ (801b0a8 <xTaskIncrementTick+0x15c>)
 801afce:	f04f 32ff 	mov.w	r2, #4294967295
 801afd2:	601a      	str	r2, [r3, #0]
					break;
 801afd4:	e03e      	b.n	801b054 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801afd6:	4b31      	ldr	r3, [pc, #196]	@ (801b09c <xTaskIncrementTick+0x150>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	68db      	ldr	r3, [r3, #12]
 801afdc:	68db      	ldr	r3, [r3, #12]
 801afde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801afe0:	68bb      	ldr	r3, [r7, #8]
 801afe2:	685b      	ldr	r3, [r3, #4]
 801afe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801afe6:	693a      	ldr	r2, [r7, #16]
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	429a      	cmp	r2, r3
 801afec:	d203      	bcs.n	801aff6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801afee:	4a2e      	ldr	r2, [pc, #184]	@ (801b0a8 <xTaskIncrementTick+0x15c>)
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801aff4:	e02e      	b.n	801b054 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801aff6:	68bb      	ldr	r3, [r7, #8]
 801aff8:	3304      	adds	r3, #4
 801affa:	4618      	mov	r0, r3
 801affc:	f7fe fde8 	bl	8019bd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b004:	2b00      	cmp	r3, #0
 801b006:	d004      	beq.n	801b012 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b008:	68bb      	ldr	r3, [r7, #8]
 801b00a:	3318      	adds	r3, #24
 801b00c:	4618      	mov	r0, r3
 801b00e:	f7fe fddf 	bl	8019bd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b012:	68bb      	ldr	r3, [r7, #8]
 801b014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b016:	2201      	movs	r2, #1
 801b018:	409a      	lsls	r2, r3
 801b01a:	4b24      	ldr	r3, [pc, #144]	@ (801b0ac <xTaskIncrementTick+0x160>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	4313      	orrs	r3, r2
 801b020:	4a22      	ldr	r2, [pc, #136]	@ (801b0ac <xTaskIncrementTick+0x160>)
 801b022:	6013      	str	r3, [r2, #0]
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b028:	4613      	mov	r3, r2
 801b02a:	009b      	lsls	r3, r3, #2
 801b02c:	4413      	add	r3, r2
 801b02e:	009b      	lsls	r3, r3, #2
 801b030:	4a1f      	ldr	r2, [pc, #124]	@ (801b0b0 <xTaskIncrementTick+0x164>)
 801b032:	441a      	add	r2, r3
 801b034:	68bb      	ldr	r3, [r7, #8]
 801b036:	3304      	adds	r3, #4
 801b038:	4619      	mov	r1, r3
 801b03a:	4610      	mov	r0, r2
 801b03c:	f7fe fd6b 	bl	8019b16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b040:	68bb      	ldr	r3, [r7, #8]
 801b042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b044:	4b1b      	ldr	r3, [pc, #108]	@ (801b0b4 <xTaskIncrementTick+0x168>)
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b04a:	429a      	cmp	r2, r3
 801b04c:	d3b9      	bcc.n	801afc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801b04e:	2301      	movs	r3, #1
 801b050:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b052:	e7b6      	b.n	801afc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b054:	4b17      	ldr	r3, [pc, #92]	@ (801b0b4 <xTaskIncrementTick+0x168>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b05a:	4915      	ldr	r1, [pc, #84]	@ (801b0b0 <xTaskIncrementTick+0x164>)
 801b05c:	4613      	mov	r3, r2
 801b05e:	009b      	lsls	r3, r3, #2
 801b060:	4413      	add	r3, r2
 801b062:	009b      	lsls	r3, r3, #2
 801b064:	440b      	add	r3, r1
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	2b01      	cmp	r3, #1
 801b06a:	d901      	bls.n	801b070 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801b06c:	2301      	movs	r3, #1
 801b06e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b070:	4b11      	ldr	r3, [pc, #68]	@ (801b0b8 <xTaskIncrementTick+0x16c>)
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d007      	beq.n	801b088 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801b078:	2301      	movs	r3, #1
 801b07a:	617b      	str	r3, [r7, #20]
 801b07c:	e004      	b.n	801b088 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b07e:	4b0f      	ldr	r3, [pc, #60]	@ (801b0bc <xTaskIncrementTick+0x170>)
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	3301      	adds	r3, #1
 801b084:	4a0d      	ldr	r2, [pc, #52]	@ (801b0bc <xTaskIncrementTick+0x170>)
 801b086:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b088:	697b      	ldr	r3, [r7, #20]
}
 801b08a:	4618      	mov	r0, r3
 801b08c:	3718      	adds	r7, #24
 801b08e:	46bd      	mov	sp, r7
 801b090:	bd80      	pop	{r7, pc}
 801b092:	bf00      	nop
 801b094:	200040d0 	.word	0x200040d0
 801b098:	200040ac 	.word	0x200040ac
 801b09c:	20004060 	.word	0x20004060
 801b0a0:	20004064 	.word	0x20004064
 801b0a4:	200040c0 	.word	0x200040c0
 801b0a8:	200040c8 	.word	0x200040c8
 801b0ac:	200040b0 	.word	0x200040b0
 801b0b0:	20003f0c 	.word	0x20003f0c
 801b0b4:	20003f08 	.word	0x20003f08
 801b0b8:	200040bc 	.word	0x200040bc
 801b0bc:	200040b8 	.word	0x200040b8

0801b0c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b086      	sub	sp, #24
 801b0c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b0c6:	4b3e      	ldr	r3, [pc, #248]	@ (801b1c0 <vTaskSwitchContext+0x100>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d003      	beq.n	801b0d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b0ce:	4b3d      	ldr	r3, [pc, #244]	@ (801b1c4 <vTaskSwitchContext+0x104>)
 801b0d0:	2201      	movs	r2, #1
 801b0d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b0d4:	e06f      	b.n	801b1b6 <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 801b0d6:	4b3b      	ldr	r3, [pc, #236]	@ (801b1c4 <vTaskSwitchContext+0x104>)
 801b0d8:	2200      	movs	r2, #0
 801b0da:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801b0dc:	f7e8 f839 	bl	8003152 <getRunTimeCounterValue>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	4a39      	ldr	r2, [pc, #228]	@ (801b1c8 <vTaskSwitchContext+0x108>)
 801b0e4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801b0e6:	4b38      	ldr	r3, [pc, #224]	@ (801b1c8 <vTaskSwitchContext+0x108>)
 801b0e8:	681a      	ldr	r2, [r3, #0]
 801b0ea:	4b38      	ldr	r3, [pc, #224]	@ (801b1cc <vTaskSwitchContext+0x10c>)
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	429a      	cmp	r2, r3
 801b0f0:	d909      	bls.n	801b106 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801b0f2:	4b37      	ldr	r3, [pc, #220]	@ (801b1d0 <vTaskSwitchContext+0x110>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801b0f8:	4a33      	ldr	r2, [pc, #204]	@ (801b1c8 <vTaskSwitchContext+0x108>)
 801b0fa:	6810      	ldr	r0, [r2, #0]
 801b0fc:	4a33      	ldr	r2, [pc, #204]	@ (801b1cc <vTaskSwitchContext+0x10c>)
 801b0fe:	6812      	ldr	r2, [r2, #0]
 801b100:	1a82      	subs	r2, r0, r2
 801b102:	440a      	add	r2, r1
 801b104:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801b106:	4b30      	ldr	r3, [pc, #192]	@ (801b1c8 <vTaskSwitchContext+0x108>)
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	4a30      	ldr	r2, [pc, #192]	@ (801b1cc <vTaskSwitchContext+0x10c>)
 801b10c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801b10e:	4b30      	ldr	r3, [pc, #192]	@ (801b1d0 <vTaskSwitchContext+0x110>)
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	681a      	ldr	r2, [r3, #0]
 801b114:	4b2e      	ldr	r3, [pc, #184]	@ (801b1d0 <vTaskSwitchContext+0x110>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b11a:	429a      	cmp	r2, r3
 801b11c:	d808      	bhi.n	801b130 <vTaskSwitchContext+0x70>
 801b11e:	4b2c      	ldr	r3, [pc, #176]	@ (801b1d0 <vTaskSwitchContext+0x110>)
 801b120:	681a      	ldr	r2, [r3, #0]
 801b122:	4b2b      	ldr	r3, [pc, #172]	@ (801b1d0 <vTaskSwitchContext+0x110>)
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	3334      	adds	r3, #52	@ 0x34
 801b128:	4619      	mov	r1, r3
 801b12a:	4610      	mov	r0, r2
 801b12c:	f7e8 f819 	bl	8003162 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b130:	4b28      	ldr	r3, [pc, #160]	@ (801b1d4 <vTaskSwitchContext+0x114>)
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	fab3 f383 	clz	r3, r3
 801b13c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801b13e:	7afb      	ldrb	r3, [r7, #11]
 801b140:	f1c3 031f 	rsb	r3, r3, #31
 801b144:	617b      	str	r3, [r7, #20]
 801b146:	4924      	ldr	r1, [pc, #144]	@ (801b1d8 <vTaskSwitchContext+0x118>)
 801b148:	697a      	ldr	r2, [r7, #20]
 801b14a:	4613      	mov	r3, r2
 801b14c:	009b      	lsls	r3, r3, #2
 801b14e:	4413      	add	r3, r2
 801b150:	009b      	lsls	r3, r3, #2
 801b152:	440b      	add	r3, r1
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d10b      	bne.n	801b172 <vTaskSwitchContext+0xb2>
	__asm volatile
 801b15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b15e:	f383 8811 	msr	BASEPRI, r3
 801b162:	f3bf 8f6f 	isb	sy
 801b166:	f3bf 8f4f 	dsb	sy
 801b16a:	607b      	str	r3, [r7, #4]
}
 801b16c:	bf00      	nop
 801b16e:	bf00      	nop
 801b170:	e7fd      	b.n	801b16e <vTaskSwitchContext+0xae>
 801b172:	697a      	ldr	r2, [r7, #20]
 801b174:	4613      	mov	r3, r2
 801b176:	009b      	lsls	r3, r3, #2
 801b178:	4413      	add	r3, r2
 801b17a:	009b      	lsls	r3, r3, #2
 801b17c:	4a16      	ldr	r2, [pc, #88]	@ (801b1d8 <vTaskSwitchContext+0x118>)
 801b17e:	4413      	add	r3, r2
 801b180:	613b      	str	r3, [r7, #16]
 801b182:	693b      	ldr	r3, [r7, #16]
 801b184:	685b      	ldr	r3, [r3, #4]
 801b186:	685a      	ldr	r2, [r3, #4]
 801b188:	693b      	ldr	r3, [r7, #16]
 801b18a:	605a      	str	r2, [r3, #4]
 801b18c:	693b      	ldr	r3, [r7, #16]
 801b18e:	685a      	ldr	r2, [r3, #4]
 801b190:	693b      	ldr	r3, [r7, #16]
 801b192:	3308      	adds	r3, #8
 801b194:	429a      	cmp	r2, r3
 801b196:	d104      	bne.n	801b1a2 <vTaskSwitchContext+0xe2>
 801b198:	693b      	ldr	r3, [r7, #16]
 801b19a:	685b      	ldr	r3, [r3, #4]
 801b19c:	685a      	ldr	r2, [r3, #4]
 801b19e:	693b      	ldr	r3, [r7, #16]
 801b1a0:	605a      	str	r2, [r3, #4]
 801b1a2:	693b      	ldr	r3, [r7, #16]
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	4a09      	ldr	r2, [pc, #36]	@ (801b1d0 <vTaskSwitchContext+0x110>)
 801b1aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b1ac:	4b08      	ldr	r3, [pc, #32]	@ (801b1d0 <vTaskSwitchContext+0x110>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	3358      	adds	r3, #88	@ 0x58
 801b1b2:	4a0a      	ldr	r2, [pc, #40]	@ (801b1dc <vTaskSwitchContext+0x11c>)
 801b1b4:	6013      	str	r3, [r2, #0]
}
 801b1b6:	bf00      	nop
 801b1b8:	3718      	adds	r7, #24
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	200040d0 	.word	0x200040d0
 801b1c4:	200040bc 	.word	0x200040bc
 801b1c8:	200040d8 	.word	0x200040d8
 801b1cc:	200040d4 	.word	0x200040d4
 801b1d0:	20003f08 	.word	0x20003f08
 801b1d4:	200040b0 	.word	0x200040b0
 801b1d8:	20003f0c 	.word	0x20003f0c
 801b1dc:	20000150 	.word	0x20000150

0801b1e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b1e0:	b580      	push	{r7, lr}
 801b1e2:	b084      	sub	sp, #16
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	6078      	str	r0, [r7, #4]
 801b1e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d10b      	bne.n	801b208 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801b1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b1f4:	f383 8811 	msr	BASEPRI, r3
 801b1f8:	f3bf 8f6f 	isb	sy
 801b1fc:	f3bf 8f4f 	dsb	sy
 801b200:	60fb      	str	r3, [r7, #12]
}
 801b202:	bf00      	nop
 801b204:	bf00      	nop
 801b206:	e7fd      	b.n	801b204 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b208:	4b07      	ldr	r3, [pc, #28]	@ (801b228 <vTaskPlaceOnEventList+0x48>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	3318      	adds	r3, #24
 801b20e:	4619      	mov	r1, r3
 801b210:	6878      	ldr	r0, [r7, #4]
 801b212:	f7fe fca4 	bl	8019b5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b216:	2101      	movs	r1, #1
 801b218:	6838      	ldr	r0, [r7, #0]
 801b21a:	f000 fbe5 	bl	801b9e8 <prvAddCurrentTaskToDelayedList>
}
 801b21e:	bf00      	nop
 801b220:	3710      	adds	r7, #16
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
 801b226:	bf00      	nop
 801b228:	20003f08 	.word	0x20003f08

0801b22c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b086      	sub	sp, #24
 801b230:	af00      	add	r7, sp, #0
 801b232:	60f8      	str	r0, [r7, #12]
 801b234:	60b9      	str	r1, [r7, #8]
 801b236:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d10b      	bne.n	801b256 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b242:	f383 8811 	msr	BASEPRI, r3
 801b246:	f3bf 8f6f 	isb	sy
 801b24a:	f3bf 8f4f 	dsb	sy
 801b24e:	617b      	str	r3, [r7, #20]
}
 801b250:	bf00      	nop
 801b252:	bf00      	nop
 801b254:	e7fd      	b.n	801b252 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b256:	4b0a      	ldr	r3, [pc, #40]	@ (801b280 <vTaskPlaceOnEventListRestricted+0x54>)
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	3318      	adds	r3, #24
 801b25c:	4619      	mov	r1, r3
 801b25e:	68f8      	ldr	r0, [r7, #12]
 801b260:	f7fe fc59 	bl	8019b16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d002      	beq.n	801b270 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801b26a:	f04f 33ff 	mov.w	r3, #4294967295
 801b26e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b270:	6879      	ldr	r1, [r7, #4]
 801b272:	68b8      	ldr	r0, [r7, #8]
 801b274:	f000 fbb8 	bl	801b9e8 <prvAddCurrentTaskToDelayedList>
	}
 801b278:	bf00      	nop
 801b27a:	3718      	adds	r7, #24
 801b27c:	46bd      	mov	sp, r7
 801b27e:	bd80      	pop	{r7, pc}
 801b280:	20003f08 	.word	0x20003f08

0801b284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b284:	b580      	push	{r7, lr}
 801b286:	b086      	sub	sp, #24
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	68db      	ldr	r3, [r3, #12]
 801b290:	68db      	ldr	r3, [r3, #12]
 801b292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b294:	693b      	ldr	r3, [r7, #16]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d10b      	bne.n	801b2b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801b29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b29e:	f383 8811 	msr	BASEPRI, r3
 801b2a2:	f3bf 8f6f 	isb	sy
 801b2a6:	f3bf 8f4f 	dsb	sy
 801b2aa:	60fb      	str	r3, [r7, #12]
}
 801b2ac:	bf00      	nop
 801b2ae:	bf00      	nop
 801b2b0:	e7fd      	b.n	801b2ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b2b2:	693b      	ldr	r3, [r7, #16]
 801b2b4:	3318      	adds	r3, #24
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	f7fe fc8a 	bl	8019bd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b2bc:	4b1d      	ldr	r3, [pc, #116]	@ (801b334 <xTaskRemoveFromEventList+0xb0>)
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d11c      	bne.n	801b2fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b2c4:	693b      	ldr	r3, [r7, #16]
 801b2c6:	3304      	adds	r3, #4
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f7fe fc81 	bl	8019bd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b2ce:	693b      	ldr	r3, [r7, #16]
 801b2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b2d2:	2201      	movs	r2, #1
 801b2d4:	409a      	lsls	r2, r3
 801b2d6:	4b18      	ldr	r3, [pc, #96]	@ (801b338 <xTaskRemoveFromEventList+0xb4>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	4313      	orrs	r3, r2
 801b2dc:	4a16      	ldr	r2, [pc, #88]	@ (801b338 <xTaskRemoveFromEventList+0xb4>)
 801b2de:	6013      	str	r3, [r2, #0]
 801b2e0:	693b      	ldr	r3, [r7, #16]
 801b2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b2e4:	4613      	mov	r3, r2
 801b2e6:	009b      	lsls	r3, r3, #2
 801b2e8:	4413      	add	r3, r2
 801b2ea:	009b      	lsls	r3, r3, #2
 801b2ec:	4a13      	ldr	r2, [pc, #76]	@ (801b33c <xTaskRemoveFromEventList+0xb8>)
 801b2ee:	441a      	add	r2, r3
 801b2f0:	693b      	ldr	r3, [r7, #16]
 801b2f2:	3304      	adds	r3, #4
 801b2f4:	4619      	mov	r1, r3
 801b2f6:	4610      	mov	r0, r2
 801b2f8:	f7fe fc0d 	bl	8019b16 <vListInsertEnd>
 801b2fc:	e005      	b.n	801b30a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b2fe:	693b      	ldr	r3, [r7, #16]
 801b300:	3318      	adds	r3, #24
 801b302:	4619      	mov	r1, r3
 801b304:	480e      	ldr	r0, [pc, #56]	@ (801b340 <xTaskRemoveFromEventList+0xbc>)
 801b306:	f7fe fc06 	bl	8019b16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b30a:	693b      	ldr	r3, [r7, #16]
 801b30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b30e:	4b0d      	ldr	r3, [pc, #52]	@ (801b344 <xTaskRemoveFromEventList+0xc0>)
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b314:	429a      	cmp	r2, r3
 801b316:	d905      	bls.n	801b324 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b318:	2301      	movs	r3, #1
 801b31a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b31c:	4b0a      	ldr	r3, [pc, #40]	@ (801b348 <xTaskRemoveFromEventList+0xc4>)
 801b31e:	2201      	movs	r2, #1
 801b320:	601a      	str	r2, [r3, #0]
 801b322:	e001      	b.n	801b328 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801b324:	2300      	movs	r3, #0
 801b326:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b328:	697b      	ldr	r3, [r7, #20]
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	3718      	adds	r7, #24
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}
 801b332:	bf00      	nop
 801b334:	200040d0 	.word	0x200040d0
 801b338:	200040b0 	.word	0x200040b0
 801b33c:	20003f0c 	.word	0x20003f0c
 801b340:	20004068 	.word	0x20004068
 801b344:	20003f08 	.word	0x20003f08
 801b348:	200040bc 	.word	0x200040bc

0801b34c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b086      	sub	sp, #24
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
 801b354:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801b356:	4b2a      	ldr	r3, [pc, #168]	@ (801b400 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d10b      	bne.n	801b376 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 801b35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b362:	f383 8811 	msr	BASEPRI, r3
 801b366:	f3bf 8f6f 	isb	sy
 801b36a:	f3bf 8f4f 	dsb	sy
 801b36e:	613b      	str	r3, [r7, #16]
}
 801b370:	bf00      	nop
 801b372:	bf00      	nop
 801b374:	e7fd      	b.n	801b372 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	68db      	ldr	r3, [r3, #12]
 801b384:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d10b      	bne.n	801b3a4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 801b38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b390:	f383 8811 	msr	BASEPRI, r3
 801b394:	f3bf 8f6f 	isb	sy
 801b398:	f3bf 8f4f 	dsb	sy
 801b39c:	60fb      	str	r3, [r7, #12]
}
 801b39e:	bf00      	nop
 801b3a0:	bf00      	nop
 801b3a2:	e7fd      	b.n	801b3a0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 801b3a4:	6878      	ldr	r0, [r7, #4]
 801b3a6:	f7fe fc13 	bl	8019bd0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	3304      	adds	r3, #4
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7fe fc0e 	bl	8019bd0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801b3b4:	697b      	ldr	r3, [r7, #20]
 801b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3b8:	2201      	movs	r2, #1
 801b3ba:	409a      	lsls	r2, r3
 801b3bc:	4b11      	ldr	r3, [pc, #68]	@ (801b404 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	4313      	orrs	r3, r2
 801b3c2:	4a10      	ldr	r2, [pc, #64]	@ (801b404 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801b3c4:	6013      	str	r3, [r2, #0]
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3ca:	4613      	mov	r3, r2
 801b3cc:	009b      	lsls	r3, r3, #2
 801b3ce:	4413      	add	r3, r2
 801b3d0:	009b      	lsls	r3, r3, #2
 801b3d2:	4a0d      	ldr	r2, [pc, #52]	@ (801b408 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801b3d4:	441a      	add	r2, r3
 801b3d6:	697b      	ldr	r3, [r7, #20]
 801b3d8:	3304      	adds	r3, #4
 801b3da:	4619      	mov	r1, r3
 801b3dc:	4610      	mov	r0, r2
 801b3de:	f7fe fb9a 	bl	8019b16 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b3e2:	697b      	ldr	r3, [r7, #20]
 801b3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b3e6:	4b09      	ldr	r3, [pc, #36]	@ (801b40c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ec:	429a      	cmp	r2, r3
 801b3ee:	d902      	bls.n	801b3f6 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801b3f0:	4b07      	ldr	r3, [pc, #28]	@ (801b410 <vTaskRemoveFromUnorderedEventList+0xc4>)
 801b3f2:	2201      	movs	r2, #1
 801b3f4:	601a      	str	r2, [r3, #0]
	}
}
 801b3f6:	bf00      	nop
 801b3f8:	3718      	adds	r7, #24
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}
 801b3fe:	bf00      	nop
 801b400:	200040d0 	.word	0x200040d0
 801b404:	200040b0 	.word	0x200040b0
 801b408:	20003f0c 	.word	0x20003f0c
 801b40c:	20003f08 	.word	0x20003f08
 801b410:	200040bc 	.word	0x200040bc

0801b414 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b414:	b480      	push	{r7}
 801b416:	b083      	sub	sp, #12
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b41c:	4b06      	ldr	r3, [pc, #24]	@ (801b438 <vTaskInternalSetTimeOutState+0x24>)
 801b41e:	681a      	ldr	r2, [r3, #0]
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b424:	4b05      	ldr	r3, [pc, #20]	@ (801b43c <vTaskInternalSetTimeOutState+0x28>)
 801b426:	681a      	ldr	r2, [r3, #0]
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	605a      	str	r2, [r3, #4]
}
 801b42c:	bf00      	nop
 801b42e:	370c      	adds	r7, #12
 801b430:	46bd      	mov	sp, r7
 801b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b436:	4770      	bx	lr
 801b438:	200040c0 	.word	0x200040c0
 801b43c:	200040ac 	.word	0x200040ac

0801b440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b088      	sub	sp, #32
 801b444:	af00      	add	r7, sp, #0
 801b446:	6078      	str	r0, [r7, #4]
 801b448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d10b      	bne.n	801b468 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801b450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b454:	f383 8811 	msr	BASEPRI, r3
 801b458:	f3bf 8f6f 	isb	sy
 801b45c:	f3bf 8f4f 	dsb	sy
 801b460:	613b      	str	r3, [r7, #16]
}
 801b462:	bf00      	nop
 801b464:	bf00      	nop
 801b466:	e7fd      	b.n	801b464 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b468:	683b      	ldr	r3, [r7, #0]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d10b      	bne.n	801b486 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801b46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b472:	f383 8811 	msr	BASEPRI, r3
 801b476:	f3bf 8f6f 	isb	sy
 801b47a:	f3bf 8f4f 	dsb	sy
 801b47e:	60fb      	str	r3, [r7, #12]
}
 801b480:	bf00      	nop
 801b482:	bf00      	nop
 801b484:	e7fd      	b.n	801b482 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801b486:	f000 ffbf 	bl	801c408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b48a:	4b1d      	ldr	r3, [pc, #116]	@ (801b500 <xTaskCheckForTimeOut+0xc0>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	685b      	ldr	r3, [r3, #4]
 801b494:	69ba      	ldr	r2, [r7, #24]
 801b496:	1ad3      	subs	r3, r2, r3
 801b498:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b49a:	683b      	ldr	r3, [r7, #0]
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b4a2:	d102      	bne.n	801b4aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	61fb      	str	r3, [r7, #28]
 801b4a8:	e023      	b.n	801b4f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	681a      	ldr	r2, [r3, #0]
 801b4ae:	4b15      	ldr	r3, [pc, #84]	@ (801b504 <xTaskCheckForTimeOut+0xc4>)
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	429a      	cmp	r2, r3
 801b4b4:	d007      	beq.n	801b4c6 <xTaskCheckForTimeOut+0x86>
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	685b      	ldr	r3, [r3, #4]
 801b4ba:	69ba      	ldr	r2, [r7, #24]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d302      	bcc.n	801b4c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b4c0:	2301      	movs	r3, #1
 801b4c2:	61fb      	str	r3, [r7, #28]
 801b4c4:	e015      	b.n	801b4f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b4c6:	683b      	ldr	r3, [r7, #0]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	697a      	ldr	r2, [r7, #20]
 801b4cc:	429a      	cmp	r2, r3
 801b4ce:	d20b      	bcs.n	801b4e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b4d0:	683b      	ldr	r3, [r7, #0]
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	697b      	ldr	r3, [r7, #20]
 801b4d6:	1ad2      	subs	r2, r2, r3
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b4dc:	6878      	ldr	r0, [r7, #4]
 801b4de:	f7ff ff99 	bl	801b414 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	61fb      	str	r3, [r7, #28]
 801b4e6:	e004      	b.n	801b4f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801b4e8:	683b      	ldr	r3, [r7, #0]
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b4f2:	f000 ffbb 	bl	801c46c <vPortExitCritical>

	return xReturn;
 801b4f6:	69fb      	ldr	r3, [r7, #28]
}
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	3720      	adds	r7, #32
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}
 801b500:	200040ac 	.word	0x200040ac
 801b504:	200040c0 	.word	0x200040c0

0801b508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b508:	b480      	push	{r7}
 801b50a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b50c:	4b03      	ldr	r3, [pc, #12]	@ (801b51c <vTaskMissedYield+0x14>)
 801b50e:	2201      	movs	r2, #1
 801b510:	601a      	str	r2, [r3, #0]
}
 801b512:	bf00      	nop
 801b514:	46bd      	mov	sp, r7
 801b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b51a:	4770      	bx	lr
 801b51c:	200040bc 	.word	0x200040bc

0801b520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b520:	b580      	push	{r7, lr}
 801b522:	b082      	sub	sp, #8
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b528:	f000 f852 	bl	801b5d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b52c:	4b06      	ldr	r3, [pc, #24]	@ (801b548 <prvIdleTask+0x28>)
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	2b01      	cmp	r3, #1
 801b532:	d9f9      	bls.n	801b528 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b534:	4b05      	ldr	r3, [pc, #20]	@ (801b54c <prvIdleTask+0x2c>)
 801b536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b53a:	601a      	str	r2, [r3, #0]
 801b53c:	f3bf 8f4f 	dsb	sy
 801b540:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b544:	e7f0      	b.n	801b528 <prvIdleTask+0x8>
 801b546:	bf00      	nop
 801b548:	20003f0c 	.word	0x20003f0c
 801b54c:	e000ed04 	.word	0xe000ed04

0801b550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b550:	b580      	push	{r7, lr}
 801b552:	b082      	sub	sp, #8
 801b554:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b556:	2300      	movs	r3, #0
 801b558:	607b      	str	r3, [r7, #4]
 801b55a:	e00c      	b.n	801b576 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	4613      	mov	r3, r2
 801b560:	009b      	lsls	r3, r3, #2
 801b562:	4413      	add	r3, r2
 801b564:	009b      	lsls	r3, r3, #2
 801b566:	4a12      	ldr	r2, [pc, #72]	@ (801b5b0 <prvInitialiseTaskLists+0x60>)
 801b568:	4413      	add	r3, r2
 801b56a:	4618      	mov	r0, r3
 801b56c:	f7fe faa6 	bl	8019abc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	3301      	adds	r3, #1
 801b574:	607b      	str	r3, [r7, #4]
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2b0e      	cmp	r3, #14
 801b57a:	d9ef      	bls.n	801b55c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b57c:	480d      	ldr	r0, [pc, #52]	@ (801b5b4 <prvInitialiseTaskLists+0x64>)
 801b57e:	f7fe fa9d 	bl	8019abc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b582:	480d      	ldr	r0, [pc, #52]	@ (801b5b8 <prvInitialiseTaskLists+0x68>)
 801b584:	f7fe fa9a 	bl	8019abc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b588:	480c      	ldr	r0, [pc, #48]	@ (801b5bc <prvInitialiseTaskLists+0x6c>)
 801b58a:	f7fe fa97 	bl	8019abc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b58e:	480c      	ldr	r0, [pc, #48]	@ (801b5c0 <prvInitialiseTaskLists+0x70>)
 801b590:	f7fe fa94 	bl	8019abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b594:	480b      	ldr	r0, [pc, #44]	@ (801b5c4 <prvInitialiseTaskLists+0x74>)
 801b596:	f7fe fa91 	bl	8019abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b59a:	4b0b      	ldr	r3, [pc, #44]	@ (801b5c8 <prvInitialiseTaskLists+0x78>)
 801b59c:	4a05      	ldr	r2, [pc, #20]	@ (801b5b4 <prvInitialiseTaskLists+0x64>)
 801b59e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b5a0:	4b0a      	ldr	r3, [pc, #40]	@ (801b5cc <prvInitialiseTaskLists+0x7c>)
 801b5a2:	4a05      	ldr	r2, [pc, #20]	@ (801b5b8 <prvInitialiseTaskLists+0x68>)
 801b5a4:	601a      	str	r2, [r3, #0]
}
 801b5a6:	bf00      	nop
 801b5a8:	3708      	adds	r7, #8
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	bd80      	pop	{r7, pc}
 801b5ae:	bf00      	nop
 801b5b0:	20003f0c 	.word	0x20003f0c
 801b5b4:	20004038 	.word	0x20004038
 801b5b8:	2000404c 	.word	0x2000404c
 801b5bc:	20004068 	.word	0x20004068
 801b5c0:	2000407c 	.word	0x2000407c
 801b5c4:	20004094 	.word	0x20004094
 801b5c8:	20004060 	.word	0x20004060
 801b5cc:	20004064 	.word	0x20004064

0801b5d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b5d0:	b580      	push	{r7, lr}
 801b5d2:	b082      	sub	sp, #8
 801b5d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b5d6:	e019      	b.n	801b60c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b5d8:	f000 ff16 	bl	801c408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b5dc:	4b10      	ldr	r3, [pc, #64]	@ (801b620 <prvCheckTasksWaitingTermination+0x50>)
 801b5de:	68db      	ldr	r3, [r3, #12]
 801b5e0:	68db      	ldr	r3, [r3, #12]
 801b5e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	3304      	adds	r3, #4
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	f7fe faf1 	bl	8019bd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b5ee:	4b0d      	ldr	r3, [pc, #52]	@ (801b624 <prvCheckTasksWaitingTermination+0x54>)
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	3b01      	subs	r3, #1
 801b5f4:	4a0b      	ldr	r2, [pc, #44]	@ (801b624 <prvCheckTasksWaitingTermination+0x54>)
 801b5f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b5f8:	4b0b      	ldr	r3, [pc, #44]	@ (801b628 <prvCheckTasksWaitingTermination+0x58>)
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	3b01      	subs	r3, #1
 801b5fe:	4a0a      	ldr	r2, [pc, #40]	@ (801b628 <prvCheckTasksWaitingTermination+0x58>)
 801b600:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b602:	f000 ff33 	bl	801c46c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b606:	6878      	ldr	r0, [r7, #4]
 801b608:	f000 f810 	bl	801b62c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b60c:	4b06      	ldr	r3, [pc, #24]	@ (801b628 <prvCheckTasksWaitingTermination+0x58>)
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d1e1      	bne.n	801b5d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b614:	bf00      	nop
 801b616:	bf00      	nop
 801b618:	3708      	adds	r7, #8
 801b61a:	46bd      	mov	sp, r7
 801b61c:	bd80      	pop	{r7, pc}
 801b61e:	bf00      	nop
 801b620:	2000407c 	.word	0x2000407c
 801b624:	200040a8 	.word	0x200040a8
 801b628:	20004090 	.word	0x20004090

0801b62c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b084      	sub	sp, #16
 801b630:	af00      	add	r7, sp, #0
 801b632:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	3358      	adds	r3, #88	@ 0x58
 801b638:	4618      	mov	r0, r3
 801b63a:	f002 f883 	bl	801d744 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b644:	2b00      	cmp	r3, #0
 801b646:	d108      	bne.n	801b65a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b64c:	4618      	mov	r0, r3
 801b64e:	f001 f8cb 	bl	801c7e8 <vPortFree>
				vPortFree( pxTCB );
 801b652:	6878      	ldr	r0, [r7, #4]
 801b654:	f001 f8c8 	bl	801c7e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b658:	e019      	b.n	801b68e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b660:	2b01      	cmp	r3, #1
 801b662:	d103      	bne.n	801b66c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b664:	6878      	ldr	r0, [r7, #4]
 801b666:	f001 f8bf 	bl	801c7e8 <vPortFree>
	}
 801b66a:	e010      	b.n	801b68e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 801b672:	2b02      	cmp	r3, #2
 801b674:	d00b      	beq.n	801b68e <prvDeleteTCB+0x62>
	__asm volatile
 801b676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b67a:	f383 8811 	msr	BASEPRI, r3
 801b67e:	f3bf 8f6f 	isb	sy
 801b682:	f3bf 8f4f 	dsb	sy
 801b686:	60fb      	str	r3, [r7, #12]
}
 801b688:	bf00      	nop
 801b68a:	bf00      	nop
 801b68c:	e7fd      	b.n	801b68a <prvDeleteTCB+0x5e>
	}
 801b68e:	bf00      	nop
 801b690:	3710      	adds	r7, #16
 801b692:	46bd      	mov	sp, r7
 801b694:	bd80      	pop	{r7, pc}
	...

0801b698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b698:	b480      	push	{r7}
 801b69a:	b083      	sub	sp, #12
 801b69c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b69e:	4b0c      	ldr	r3, [pc, #48]	@ (801b6d0 <prvResetNextTaskUnblockTime+0x38>)
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d104      	bne.n	801b6b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b6a8:	4b0a      	ldr	r3, [pc, #40]	@ (801b6d4 <prvResetNextTaskUnblockTime+0x3c>)
 801b6aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b6ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b6b0:	e008      	b.n	801b6c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b6b2:	4b07      	ldr	r3, [pc, #28]	@ (801b6d0 <prvResetNextTaskUnblockTime+0x38>)
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	68db      	ldr	r3, [r3, #12]
 801b6b8:	68db      	ldr	r3, [r3, #12]
 801b6ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	685b      	ldr	r3, [r3, #4]
 801b6c0:	4a04      	ldr	r2, [pc, #16]	@ (801b6d4 <prvResetNextTaskUnblockTime+0x3c>)
 801b6c2:	6013      	str	r3, [r2, #0]
}
 801b6c4:	bf00      	nop
 801b6c6:	370c      	adds	r7, #12
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ce:	4770      	bx	lr
 801b6d0:	20004060 	.word	0x20004060
 801b6d4:	200040c8 	.word	0x200040c8

0801b6d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b6d8:	b480      	push	{r7}
 801b6da:	b083      	sub	sp, #12
 801b6dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b6de:	4b0b      	ldr	r3, [pc, #44]	@ (801b70c <xTaskGetSchedulerState+0x34>)
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d102      	bne.n	801b6ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b6e6:	2301      	movs	r3, #1
 801b6e8:	607b      	str	r3, [r7, #4]
 801b6ea:	e008      	b.n	801b6fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b6ec:	4b08      	ldr	r3, [pc, #32]	@ (801b710 <xTaskGetSchedulerState+0x38>)
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d102      	bne.n	801b6fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b6f4:	2302      	movs	r3, #2
 801b6f6:	607b      	str	r3, [r7, #4]
 801b6f8:	e001      	b.n	801b6fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b6fe:	687b      	ldr	r3, [r7, #4]
	}
 801b700:	4618      	mov	r0, r3
 801b702:	370c      	adds	r7, #12
 801b704:	46bd      	mov	sp, r7
 801b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b70a:	4770      	bx	lr
 801b70c:	200040b4 	.word	0x200040b4
 801b710:	200040d0 	.word	0x200040d0

0801b714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b714:	b580      	push	{r7, lr}
 801b716:	b086      	sub	sp, #24
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b720:	2300      	movs	r3, #0
 801b722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	2b00      	cmp	r3, #0
 801b728:	d070      	beq.n	801b80c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b72a:	4b3b      	ldr	r3, [pc, #236]	@ (801b818 <xTaskPriorityDisinherit+0x104>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	693a      	ldr	r2, [r7, #16]
 801b730:	429a      	cmp	r2, r3
 801b732:	d00b      	beq.n	801b74c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801b734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b738:	f383 8811 	msr	BASEPRI, r3
 801b73c:	f3bf 8f6f 	isb	sy
 801b740:	f3bf 8f4f 	dsb	sy
 801b744:	60fb      	str	r3, [r7, #12]
}
 801b746:	bf00      	nop
 801b748:	bf00      	nop
 801b74a:	e7fd      	b.n	801b748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b74c:	693b      	ldr	r3, [r7, #16]
 801b74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b750:	2b00      	cmp	r3, #0
 801b752:	d10b      	bne.n	801b76c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801b754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b758:	f383 8811 	msr	BASEPRI, r3
 801b75c:	f3bf 8f6f 	isb	sy
 801b760:	f3bf 8f4f 	dsb	sy
 801b764:	60bb      	str	r3, [r7, #8]
}
 801b766:	bf00      	nop
 801b768:	bf00      	nop
 801b76a:	e7fd      	b.n	801b768 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801b76c:	693b      	ldr	r3, [r7, #16]
 801b76e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b770:	1e5a      	subs	r2, r3, #1
 801b772:	693b      	ldr	r3, [r7, #16]
 801b774:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b776:	693b      	ldr	r3, [r7, #16]
 801b778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b77a:	693b      	ldr	r3, [r7, #16]
 801b77c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b77e:	429a      	cmp	r2, r3
 801b780:	d044      	beq.n	801b80c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b782:	693b      	ldr	r3, [r7, #16]
 801b784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b786:	2b00      	cmp	r3, #0
 801b788:	d140      	bne.n	801b80c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b78a:	693b      	ldr	r3, [r7, #16]
 801b78c:	3304      	adds	r3, #4
 801b78e:	4618      	mov	r0, r3
 801b790:	f7fe fa1e 	bl	8019bd0 <uxListRemove>
 801b794:	4603      	mov	r3, r0
 801b796:	2b00      	cmp	r3, #0
 801b798:	d115      	bne.n	801b7c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b79a:	693b      	ldr	r3, [r7, #16]
 801b79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b79e:	491f      	ldr	r1, [pc, #124]	@ (801b81c <xTaskPriorityDisinherit+0x108>)
 801b7a0:	4613      	mov	r3, r2
 801b7a2:	009b      	lsls	r3, r3, #2
 801b7a4:	4413      	add	r3, r2
 801b7a6:	009b      	lsls	r3, r3, #2
 801b7a8:	440b      	add	r3, r1
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d10a      	bne.n	801b7c6 <xTaskPriorityDisinherit+0xb2>
 801b7b0:	693b      	ldr	r3, [r7, #16]
 801b7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7b4:	2201      	movs	r2, #1
 801b7b6:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ba:	43da      	mvns	r2, r3
 801b7bc:	4b18      	ldr	r3, [pc, #96]	@ (801b820 <xTaskPriorityDisinherit+0x10c>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	4013      	ands	r3, r2
 801b7c2:	4a17      	ldr	r2, [pc, #92]	@ (801b820 <xTaskPriorityDisinherit+0x10c>)
 801b7c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b7c6:	693b      	ldr	r3, [r7, #16]
 801b7c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b7ca:	693b      	ldr	r3, [r7, #16]
 801b7cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b7ce:	693b      	ldr	r3, [r7, #16]
 801b7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7d2:	f1c3 020f 	rsb	r2, r3, #15
 801b7d6:	693b      	ldr	r3, [r7, #16]
 801b7d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b7da:	693b      	ldr	r3, [r7, #16]
 801b7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7de:	2201      	movs	r2, #1
 801b7e0:	409a      	lsls	r2, r3
 801b7e2:	4b0f      	ldr	r3, [pc, #60]	@ (801b820 <xTaskPriorityDisinherit+0x10c>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	4313      	orrs	r3, r2
 801b7e8:	4a0d      	ldr	r2, [pc, #52]	@ (801b820 <xTaskPriorityDisinherit+0x10c>)
 801b7ea:	6013      	str	r3, [r2, #0]
 801b7ec:	693b      	ldr	r3, [r7, #16]
 801b7ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b7f0:	4613      	mov	r3, r2
 801b7f2:	009b      	lsls	r3, r3, #2
 801b7f4:	4413      	add	r3, r2
 801b7f6:	009b      	lsls	r3, r3, #2
 801b7f8:	4a08      	ldr	r2, [pc, #32]	@ (801b81c <xTaskPriorityDisinherit+0x108>)
 801b7fa:	441a      	add	r2, r3
 801b7fc:	693b      	ldr	r3, [r7, #16]
 801b7fe:	3304      	adds	r3, #4
 801b800:	4619      	mov	r1, r3
 801b802:	4610      	mov	r0, r2
 801b804:	f7fe f987 	bl	8019b16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b808:	2301      	movs	r3, #1
 801b80a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b80c:	697b      	ldr	r3, [r7, #20]
	}
 801b80e:	4618      	mov	r0, r3
 801b810:	3718      	adds	r7, #24
 801b812:	46bd      	mov	sp, r7
 801b814:	bd80      	pop	{r7, pc}
 801b816:	bf00      	nop
 801b818:	20003f08 	.word	0x20003f08
 801b81c:	20003f0c 	.word	0x20003f0c
 801b820:	200040b0 	.word	0x200040b0

0801b824 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801b824:	b580      	push	{r7, lr}
 801b826:	b084      	sub	sp, #16
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
 801b82c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801b82e:	f000 fdeb 	bl	801c408 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801b832:	4b20      	ldr	r3, [pc, #128]	@ (801b8b4 <ulTaskNotifyTake+0x90>)
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d113      	bne.n	801b866 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801b83e:	4b1d      	ldr	r3, [pc, #116]	@ (801b8b4 <ulTaskNotifyTake+0x90>)
 801b840:	681b      	ldr	r3, [r3, #0]
 801b842:	2201      	movs	r2, #1
 801b844:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

				if( xTicksToWait > ( TickType_t ) 0 )
 801b848:	683b      	ldr	r3, [r7, #0]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d00b      	beq.n	801b866 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b84e:	2101      	movs	r1, #1
 801b850:	6838      	ldr	r0, [r7, #0]
 801b852:	f000 f8c9 	bl	801b9e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801b856:	4b18      	ldr	r3, [pc, #96]	@ (801b8b8 <ulTaskNotifyTake+0x94>)
 801b858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b85c:	601a      	str	r2, [r3, #0]
 801b85e:	f3bf 8f4f 	dsb	sy
 801b862:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801b866:	f000 fe01 	bl	801c46c <vPortExitCritical>

		taskENTER_CRITICAL();
 801b86a:	f000 fdcd 	bl	801c408 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801b86e:	4b11      	ldr	r3, [pc, #68]	@ (801b8b4 <ulTaskNotifyTake+0x90>)
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801b876:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d00e      	beq.n	801b89c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	2b00      	cmp	r3, #0
 801b882:	d005      	beq.n	801b890 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801b884:	4b0b      	ldr	r3, [pc, #44]	@ (801b8b4 <ulTaskNotifyTake+0x90>)
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	2200      	movs	r2, #0
 801b88a:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 801b88e:	e005      	b.n	801b89c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801b890:	4b08      	ldr	r3, [pc, #32]	@ (801b8b4 <ulTaskNotifyTake+0x90>)
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	68fa      	ldr	r2, [r7, #12]
 801b896:	3a01      	subs	r2, #1
 801b898:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b89c:	4b05      	ldr	r3, [pc, #20]	@ (801b8b4 <ulTaskNotifyTake+0x90>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
		}
		taskEXIT_CRITICAL();
 801b8a6:	f000 fde1 	bl	801c46c <vPortExitCritical>

		return ulReturn;
 801b8aa:	68fb      	ldr	r3, [r7, #12]
	}
 801b8ac:	4618      	mov	r0, r3
 801b8ae:	3710      	adds	r7, #16
 801b8b0:	46bd      	mov	sp, r7
 801b8b2:	bd80      	pop	{r7, pc}
 801b8b4:	20003f08 	.word	0x20003f08
 801b8b8:	e000ed04 	.word	0xe000ed04

0801b8bc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	b08a      	sub	sp, #40	@ 0x28
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
 801b8c4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d10b      	bne.n	801b8e4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 801b8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b8d0:	f383 8811 	msr	BASEPRI, r3
 801b8d4:	f3bf 8f6f 	isb	sy
 801b8d8:	f3bf 8f4f 	dsb	sy
 801b8dc:	61bb      	str	r3, [r7, #24]
}
 801b8de:	bf00      	nop
 801b8e0:	bf00      	nop
 801b8e2:	e7fd      	b.n	801b8e0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801b8e4:	f000 fe70 	bl	801c5c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 801b8ec:	f3ef 8211 	mrs	r2, BASEPRI
 801b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b8f4:	f383 8811 	msr	BASEPRI, r3
 801b8f8:	f3bf 8f6f 	isb	sy
 801b8fc:	f3bf 8f4f 	dsb	sy
 801b900:	617a      	str	r2, [r7, #20]
 801b902:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801b904:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801b906:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b90a:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 801b90e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801b910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b912:	2202      	movs	r2, #2
 801b914:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 801b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b91a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801b91e:	1c5a      	adds	r2, r3, #1
 801b920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b922:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801b926:	7ffb      	ldrb	r3, [r7, #31]
 801b928:	2b01      	cmp	r3, #1
 801b92a:	d146      	bne.n	801b9ba <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b930:	2b00      	cmp	r3, #0
 801b932:	d00b      	beq.n	801b94c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 801b934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b938:	f383 8811 	msr	BASEPRI, r3
 801b93c:	f3bf 8f6f 	isb	sy
 801b940:	f3bf 8f4f 	dsb	sy
 801b944:	60fb      	str	r3, [r7, #12]
}
 801b946:	bf00      	nop
 801b948:	bf00      	nop
 801b94a:	e7fd      	b.n	801b948 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b94c:	4b20      	ldr	r3, [pc, #128]	@ (801b9d0 <vTaskNotifyGiveFromISR+0x114>)
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	2b00      	cmp	r3, #0
 801b952:	d11c      	bne.n	801b98e <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b956:	3304      	adds	r3, #4
 801b958:	4618      	mov	r0, r3
 801b95a:	f7fe f939 	bl	8019bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b962:	2201      	movs	r2, #1
 801b964:	409a      	lsls	r2, r3
 801b966:	4b1b      	ldr	r3, [pc, #108]	@ (801b9d4 <vTaskNotifyGiveFromISR+0x118>)
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	4313      	orrs	r3, r2
 801b96c:	4a19      	ldr	r2, [pc, #100]	@ (801b9d4 <vTaskNotifyGiveFromISR+0x118>)
 801b96e:	6013      	str	r3, [r2, #0]
 801b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b974:	4613      	mov	r3, r2
 801b976:	009b      	lsls	r3, r3, #2
 801b978:	4413      	add	r3, r2
 801b97a:	009b      	lsls	r3, r3, #2
 801b97c:	4a16      	ldr	r2, [pc, #88]	@ (801b9d8 <vTaskNotifyGiveFromISR+0x11c>)
 801b97e:	441a      	add	r2, r3
 801b980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b982:	3304      	adds	r3, #4
 801b984:	4619      	mov	r1, r3
 801b986:	4610      	mov	r0, r2
 801b988:	f7fe f8c5 	bl	8019b16 <vListInsertEnd>
 801b98c:	e005      	b.n	801b99a <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801b98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b990:	3318      	adds	r3, #24
 801b992:	4619      	mov	r1, r3
 801b994:	4811      	ldr	r0, [pc, #68]	@ (801b9dc <vTaskNotifyGiveFromISR+0x120>)
 801b996:	f7fe f8be 	bl	8019b16 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b99e:	4b10      	ldr	r3, [pc, #64]	@ (801b9e0 <vTaskNotifyGiveFromISR+0x124>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d908      	bls.n	801b9ba <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801b9a8:	683b      	ldr	r3, [r7, #0]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d002      	beq.n	801b9b4 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801b9ae:	683b      	ldr	r3, [r7, #0]
 801b9b0:	2201      	movs	r2, #1
 801b9b2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801b9b4:	4b0b      	ldr	r3, [pc, #44]	@ (801b9e4 <vTaskNotifyGiveFromISR+0x128>)
 801b9b6:	2201      	movs	r2, #1
 801b9b8:	601a      	str	r2, [r3, #0]
 801b9ba:	6a3b      	ldr	r3, [r7, #32]
 801b9bc:	60bb      	str	r3, [r7, #8]
	__asm volatile
 801b9be:	68bb      	ldr	r3, [r7, #8]
 801b9c0:	f383 8811 	msr	BASEPRI, r3
}
 801b9c4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 801b9c6:	bf00      	nop
 801b9c8:	3728      	adds	r7, #40	@ 0x28
 801b9ca:	46bd      	mov	sp, r7
 801b9cc:	bd80      	pop	{r7, pc}
 801b9ce:	bf00      	nop
 801b9d0:	200040d0 	.word	0x200040d0
 801b9d4:	200040b0 	.word	0x200040b0
 801b9d8:	20003f0c 	.word	0x20003f0c
 801b9dc:	20004068 	.word	0x20004068
 801b9e0:	20003f08 	.word	0x20003f08
 801b9e4:	200040bc 	.word	0x200040bc

0801b9e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b084      	sub	sp, #16
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
 801b9f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b9f2:	4b29      	ldr	r3, [pc, #164]	@ (801ba98 <prvAddCurrentTaskToDelayedList+0xb0>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b9f8:	4b28      	ldr	r3, [pc, #160]	@ (801ba9c <prvAddCurrentTaskToDelayedList+0xb4>)
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	3304      	adds	r3, #4
 801b9fe:	4618      	mov	r0, r3
 801ba00:	f7fe f8e6 	bl	8019bd0 <uxListRemove>
 801ba04:	4603      	mov	r3, r0
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d10b      	bne.n	801ba22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801ba0a:	4b24      	ldr	r3, [pc, #144]	@ (801ba9c <prvAddCurrentTaskToDelayedList+0xb4>)
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba10:	2201      	movs	r2, #1
 801ba12:	fa02 f303 	lsl.w	r3, r2, r3
 801ba16:	43da      	mvns	r2, r3
 801ba18:	4b21      	ldr	r3, [pc, #132]	@ (801baa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	4013      	ands	r3, r2
 801ba1e:	4a20      	ldr	r2, [pc, #128]	@ (801baa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801ba20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba28:	d10a      	bne.n	801ba40 <prvAddCurrentTaskToDelayedList+0x58>
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d007      	beq.n	801ba40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba30:	4b1a      	ldr	r3, [pc, #104]	@ (801ba9c <prvAddCurrentTaskToDelayedList+0xb4>)
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	3304      	adds	r3, #4
 801ba36:	4619      	mov	r1, r3
 801ba38:	481a      	ldr	r0, [pc, #104]	@ (801baa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801ba3a:	f7fe f86c 	bl	8019b16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ba3e:	e026      	b.n	801ba8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ba40:	68fa      	ldr	r2, [r7, #12]
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	4413      	add	r3, r2
 801ba46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801ba48:	4b14      	ldr	r3, [pc, #80]	@ (801ba9c <prvAddCurrentTaskToDelayedList+0xb4>)
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	68ba      	ldr	r2, [r7, #8]
 801ba4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ba50:	68ba      	ldr	r2, [r7, #8]
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	429a      	cmp	r2, r3
 801ba56:	d209      	bcs.n	801ba6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba58:	4b13      	ldr	r3, [pc, #76]	@ (801baa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801ba5a:	681a      	ldr	r2, [r3, #0]
 801ba5c:	4b0f      	ldr	r3, [pc, #60]	@ (801ba9c <prvAddCurrentTaskToDelayedList+0xb4>)
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	3304      	adds	r3, #4
 801ba62:	4619      	mov	r1, r3
 801ba64:	4610      	mov	r0, r2
 801ba66:	f7fe f87a 	bl	8019b5e <vListInsert>
}
 801ba6a:	e010      	b.n	801ba8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba6c:	4b0f      	ldr	r3, [pc, #60]	@ (801baac <prvAddCurrentTaskToDelayedList+0xc4>)
 801ba6e:	681a      	ldr	r2, [r3, #0]
 801ba70:	4b0a      	ldr	r3, [pc, #40]	@ (801ba9c <prvAddCurrentTaskToDelayedList+0xb4>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	3304      	adds	r3, #4
 801ba76:	4619      	mov	r1, r3
 801ba78:	4610      	mov	r0, r2
 801ba7a:	f7fe f870 	bl	8019b5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ba7e:	4b0c      	ldr	r3, [pc, #48]	@ (801bab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	68ba      	ldr	r2, [r7, #8]
 801ba84:	429a      	cmp	r2, r3
 801ba86:	d202      	bcs.n	801ba8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801ba88:	4a09      	ldr	r2, [pc, #36]	@ (801bab0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801ba8a:	68bb      	ldr	r3, [r7, #8]
 801ba8c:	6013      	str	r3, [r2, #0]
}
 801ba8e:	bf00      	nop
 801ba90:	3710      	adds	r7, #16
 801ba92:	46bd      	mov	sp, r7
 801ba94:	bd80      	pop	{r7, pc}
 801ba96:	bf00      	nop
 801ba98:	200040ac 	.word	0x200040ac
 801ba9c:	20003f08 	.word	0x20003f08
 801baa0:	200040b0 	.word	0x200040b0
 801baa4:	20004094 	.word	0x20004094
 801baa8:	20004064 	.word	0x20004064
 801baac:	20004060 	.word	0x20004060
 801bab0:	200040c8 	.word	0x200040c8

0801bab4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b08a      	sub	sp, #40	@ 0x28
 801bab8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801baba:	2300      	movs	r3, #0
 801babc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801babe:	f000 fb13 	bl	801c0e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bac2:	4b1d      	ldr	r3, [pc, #116]	@ (801bb38 <xTimerCreateTimerTask+0x84>)
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d021      	beq.n	801bb0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801baca:	2300      	movs	r3, #0
 801bacc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801bace:	2300      	movs	r3, #0
 801bad0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801bad2:	1d3a      	adds	r2, r7, #4
 801bad4:	f107 0108 	add.w	r1, r7, #8
 801bad8:	f107 030c 	add.w	r3, r7, #12
 801badc:	4618      	mov	r0, r3
 801bade:	f7e7 fb65 	bl	80031ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bae2:	6879      	ldr	r1, [r7, #4]
 801bae4:	68bb      	ldr	r3, [r7, #8]
 801bae6:	68fa      	ldr	r2, [r7, #12]
 801bae8:	9202      	str	r2, [sp, #8]
 801baea:	9301      	str	r3, [sp, #4]
 801baec:	2302      	movs	r3, #2
 801baee:	9300      	str	r3, [sp, #0]
 801baf0:	2300      	movs	r3, #0
 801baf2:	460a      	mov	r2, r1
 801baf4:	4911      	ldr	r1, [pc, #68]	@ (801bb3c <xTimerCreateTimerTask+0x88>)
 801baf6:	4812      	ldr	r0, [pc, #72]	@ (801bb40 <xTimerCreateTimerTask+0x8c>)
 801baf8:	f7fe fe5a 	bl	801a7b0 <xTaskCreateStatic>
 801bafc:	4603      	mov	r3, r0
 801bafe:	4a11      	ldr	r2, [pc, #68]	@ (801bb44 <xTimerCreateTimerTask+0x90>)
 801bb00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801bb02:	4b10      	ldr	r3, [pc, #64]	@ (801bb44 <xTimerCreateTimerTask+0x90>)
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d001      	beq.n	801bb0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bb0a:	2301      	movs	r3, #1
 801bb0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bb0e:	697b      	ldr	r3, [r7, #20]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d10b      	bne.n	801bb2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 801bb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb18:	f383 8811 	msr	BASEPRI, r3
 801bb1c:	f3bf 8f6f 	isb	sy
 801bb20:	f3bf 8f4f 	dsb	sy
 801bb24:	613b      	str	r3, [r7, #16]
}
 801bb26:	bf00      	nop
 801bb28:	bf00      	nop
 801bb2a:	e7fd      	b.n	801bb28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bb2c:	697b      	ldr	r3, [r7, #20]
}
 801bb2e:	4618      	mov	r0, r3
 801bb30:	3718      	adds	r7, #24
 801bb32:	46bd      	mov	sp, r7
 801bb34:	bd80      	pop	{r7, pc}
 801bb36:	bf00      	nop
 801bb38:	2000410c 	.word	0x2000410c
 801bb3c:	080244e4 	.word	0x080244e4
 801bb40:	0801bc81 	.word	0x0801bc81
 801bb44:	20004110 	.word	0x20004110

0801bb48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b08a      	sub	sp, #40	@ 0x28
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	60f8      	str	r0, [r7, #12]
 801bb50:	60b9      	str	r1, [r7, #8]
 801bb52:	607a      	str	r2, [r7, #4]
 801bb54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801bb56:	2300      	movs	r3, #0
 801bb58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d10b      	bne.n	801bb78 <xTimerGenericCommand+0x30>
	__asm volatile
 801bb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb64:	f383 8811 	msr	BASEPRI, r3
 801bb68:	f3bf 8f6f 	isb	sy
 801bb6c:	f3bf 8f4f 	dsb	sy
 801bb70:	623b      	str	r3, [r7, #32]
}
 801bb72:	bf00      	nop
 801bb74:	bf00      	nop
 801bb76:	e7fd      	b.n	801bb74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801bb78:	4b19      	ldr	r3, [pc, #100]	@ (801bbe0 <xTimerGenericCommand+0x98>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d02a      	beq.n	801bbd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bb80:	68bb      	ldr	r3, [r7, #8]
 801bb82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bb8c:	68bb      	ldr	r3, [r7, #8]
 801bb8e:	2b05      	cmp	r3, #5
 801bb90:	dc18      	bgt.n	801bbc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bb92:	f7ff fda1 	bl	801b6d8 <xTaskGetSchedulerState>
 801bb96:	4603      	mov	r3, r0
 801bb98:	2b02      	cmp	r3, #2
 801bb9a:	d109      	bne.n	801bbb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bb9c:	4b10      	ldr	r3, [pc, #64]	@ (801bbe0 <xTimerGenericCommand+0x98>)
 801bb9e:	6818      	ldr	r0, [r3, #0]
 801bba0:	f107 0110 	add.w	r1, r7, #16
 801bba4:	2300      	movs	r3, #0
 801bba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bba8:	f7fe f982 	bl	8019eb0 <xQueueGenericSend>
 801bbac:	6278      	str	r0, [r7, #36]	@ 0x24
 801bbae:	e012      	b.n	801bbd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bbb0:	4b0b      	ldr	r3, [pc, #44]	@ (801bbe0 <xTimerGenericCommand+0x98>)
 801bbb2:	6818      	ldr	r0, [r3, #0]
 801bbb4:	f107 0110 	add.w	r1, r7, #16
 801bbb8:	2300      	movs	r3, #0
 801bbba:	2200      	movs	r2, #0
 801bbbc:	f7fe f978 	bl	8019eb0 <xQueueGenericSend>
 801bbc0:	6278      	str	r0, [r7, #36]	@ 0x24
 801bbc2:	e008      	b.n	801bbd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bbc4:	4b06      	ldr	r3, [pc, #24]	@ (801bbe0 <xTimerGenericCommand+0x98>)
 801bbc6:	6818      	ldr	r0, [r3, #0]
 801bbc8:	f107 0110 	add.w	r1, r7, #16
 801bbcc:	2300      	movs	r3, #0
 801bbce:	683a      	ldr	r2, [r7, #0]
 801bbd0:	f7fe fa70 	bl	801a0b4 <xQueueGenericSendFromISR>
 801bbd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801bbd8:	4618      	mov	r0, r3
 801bbda:	3728      	adds	r7, #40	@ 0x28
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	2000410c 	.word	0x2000410c

0801bbe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b088      	sub	sp, #32
 801bbe8:	af02      	add	r7, sp, #8
 801bbea:	6078      	str	r0, [r7, #4]
 801bbec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bbee:	4b23      	ldr	r3, [pc, #140]	@ (801bc7c <prvProcessExpiredTimer+0x98>)
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	68db      	ldr	r3, [r3, #12]
 801bbf4:	68db      	ldr	r3, [r3, #12]
 801bbf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bbf8:	697b      	ldr	r3, [r7, #20]
 801bbfa:	3304      	adds	r3, #4
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	f7fd ffe7 	bl	8019bd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bc02:	697b      	ldr	r3, [r7, #20]
 801bc04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bc08:	f003 0304 	and.w	r3, r3, #4
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d023      	beq.n	801bc58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	699a      	ldr	r2, [r3, #24]
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	18d1      	adds	r1, r2, r3
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	683a      	ldr	r2, [r7, #0]
 801bc1c:	6978      	ldr	r0, [r7, #20]
 801bc1e:	f000 f8d5 	bl	801bdcc <prvInsertTimerInActiveList>
 801bc22:	4603      	mov	r3, r0
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d020      	beq.n	801bc6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bc28:	2300      	movs	r3, #0
 801bc2a:	9300      	str	r3, [sp, #0]
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	687a      	ldr	r2, [r7, #4]
 801bc30:	2100      	movs	r1, #0
 801bc32:	6978      	ldr	r0, [r7, #20]
 801bc34:	f7ff ff88 	bl	801bb48 <xTimerGenericCommand>
 801bc38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bc3a:	693b      	ldr	r3, [r7, #16]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d114      	bne.n	801bc6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 801bc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bc44:	f383 8811 	msr	BASEPRI, r3
 801bc48:	f3bf 8f6f 	isb	sy
 801bc4c:	f3bf 8f4f 	dsb	sy
 801bc50:	60fb      	str	r3, [r7, #12]
}
 801bc52:	bf00      	nop
 801bc54:	bf00      	nop
 801bc56:	e7fd      	b.n	801bc54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bc58:	697b      	ldr	r3, [r7, #20]
 801bc5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bc5e:	f023 0301 	bic.w	r3, r3, #1
 801bc62:	b2da      	uxtb	r2, r3
 801bc64:	697b      	ldr	r3, [r7, #20]
 801bc66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bc6a:	697b      	ldr	r3, [r7, #20]
 801bc6c:	6a1b      	ldr	r3, [r3, #32]
 801bc6e:	6978      	ldr	r0, [r7, #20]
 801bc70:	4798      	blx	r3
}
 801bc72:	bf00      	nop
 801bc74:	3718      	adds	r7, #24
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}
 801bc7a:	bf00      	nop
 801bc7c:	20004104 	.word	0x20004104

0801bc80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b084      	sub	sp, #16
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bc88:	f107 0308 	add.w	r3, r7, #8
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	f000 f859 	bl	801bd44 <prvGetNextExpireTime>
 801bc92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bc94:	68bb      	ldr	r3, [r7, #8]
 801bc96:	4619      	mov	r1, r3
 801bc98:	68f8      	ldr	r0, [r7, #12]
 801bc9a:	f000 f805 	bl	801bca8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bc9e:	f000 f8d7 	bl	801be50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bca2:	bf00      	nop
 801bca4:	e7f0      	b.n	801bc88 <prvTimerTask+0x8>
	...

0801bca8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b084      	sub	sp, #16
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
 801bcb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bcb2:	f7ff f88f 	bl	801add4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bcb6:	f107 0308 	add.w	r3, r7, #8
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f000 f866 	bl	801bd8c <prvSampleTimeNow>
 801bcc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bcc2:	68bb      	ldr	r3, [r7, #8]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d130      	bne.n	801bd2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bcc8:	683b      	ldr	r3, [r7, #0]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d10a      	bne.n	801bce4 <prvProcessTimerOrBlockTask+0x3c>
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d806      	bhi.n	801bce4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bcd6:	f7ff f88b 	bl	801adf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bcda:	68f9      	ldr	r1, [r7, #12]
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f7ff ff81 	bl	801bbe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bce2:	e024      	b.n	801bd2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bce4:	683b      	ldr	r3, [r7, #0]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d008      	beq.n	801bcfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bcea:	4b13      	ldr	r3, [pc, #76]	@ (801bd38 <prvProcessTimerOrBlockTask+0x90>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d101      	bne.n	801bcf8 <prvProcessTimerOrBlockTask+0x50>
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	e000      	b.n	801bcfa <prvProcessTimerOrBlockTask+0x52>
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bcfc:	4b0f      	ldr	r3, [pc, #60]	@ (801bd3c <prvProcessTimerOrBlockTask+0x94>)
 801bcfe:	6818      	ldr	r0, [r3, #0]
 801bd00:	687a      	ldr	r2, [r7, #4]
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	1ad3      	subs	r3, r2, r3
 801bd06:	683a      	ldr	r2, [r7, #0]
 801bd08:	4619      	mov	r1, r3
 801bd0a:	f7fe fd1d 	bl	801a748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bd0e:	f7ff f86f 	bl	801adf0 <xTaskResumeAll>
 801bd12:	4603      	mov	r3, r0
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d10a      	bne.n	801bd2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bd18:	4b09      	ldr	r3, [pc, #36]	@ (801bd40 <prvProcessTimerOrBlockTask+0x98>)
 801bd1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bd1e:	601a      	str	r2, [r3, #0]
 801bd20:	f3bf 8f4f 	dsb	sy
 801bd24:	f3bf 8f6f 	isb	sy
}
 801bd28:	e001      	b.n	801bd2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bd2a:	f7ff f861 	bl	801adf0 <xTaskResumeAll>
}
 801bd2e:	bf00      	nop
 801bd30:	3710      	adds	r7, #16
 801bd32:	46bd      	mov	sp, r7
 801bd34:	bd80      	pop	{r7, pc}
 801bd36:	bf00      	nop
 801bd38:	20004108 	.word	0x20004108
 801bd3c:	2000410c 	.word	0x2000410c
 801bd40:	e000ed04 	.word	0xe000ed04

0801bd44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bd44:	b480      	push	{r7}
 801bd46:	b085      	sub	sp, #20
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bd4c:	4b0e      	ldr	r3, [pc, #56]	@ (801bd88 <prvGetNextExpireTime+0x44>)
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d101      	bne.n	801bd5a <prvGetNextExpireTime+0x16>
 801bd56:	2201      	movs	r2, #1
 801bd58:	e000      	b.n	801bd5c <prvGetNextExpireTime+0x18>
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d105      	bne.n	801bd74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bd68:	4b07      	ldr	r3, [pc, #28]	@ (801bd88 <prvGetNextExpireTime+0x44>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	68db      	ldr	r3, [r3, #12]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	60fb      	str	r3, [r7, #12]
 801bd72:	e001      	b.n	801bd78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bd74:	2300      	movs	r3, #0
 801bd76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bd78:	68fb      	ldr	r3, [r7, #12]
}
 801bd7a:	4618      	mov	r0, r3
 801bd7c:	3714      	adds	r7, #20
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd84:	4770      	bx	lr
 801bd86:	bf00      	nop
 801bd88:	20004104 	.word	0x20004104

0801bd8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b084      	sub	sp, #16
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bd94:	f7ff f8ca 	bl	801af2c <xTaskGetTickCount>
 801bd98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bd9a:	4b0b      	ldr	r3, [pc, #44]	@ (801bdc8 <prvSampleTimeNow+0x3c>)
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	68fa      	ldr	r2, [r7, #12]
 801bda0:	429a      	cmp	r2, r3
 801bda2:	d205      	bcs.n	801bdb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bda4:	f000 f93a 	bl	801c01c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	2201      	movs	r2, #1
 801bdac:	601a      	str	r2, [r3, #0]
 801bdae:	e002      	b.n	801bdb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bdb6:	4a04      	ldr	r2, [pc, #16]	@ (801bdc8 <prvSampleTimeNow+0x3c>)
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bdbc:	68fb      	ldr	r3, [r7, #12]
}
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	3710      	adds	r7, #16
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bd80      	pop	{r7, pc}
 801bdc6:	bf00      	nop
 801bdc8:	20004114 	.word	0x20004114

0801bdcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b086      	sub	sp, #24
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	60f8      	str	r0, [r7, #12]
 801bdd4:	60b9      	str	r1, [r7, #8]
 801bdd6:	607a      	str	r2, [r7, #4]
 801bdd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bdda:	2300      	movs	r3, #0
 801bddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	68ba      	ldr	r2, [r7, #8]
 801bde2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	68fa      	ldr	r2, [r7, #12]
 801bde8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801bdea:	68ba      	ldr	r2, [r7, #8]
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	429a      	cmp	r2, r3
 801bdf0:	d812      	bhi.n	801be18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bdf2:	687a      	ldr	r2, [r7, #4]
 801bdf4:	683b      	ldr	r3, [r7, #0]
 801bdf6:	1ad2      	subs	r2, r2, r3
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	699b      	ldr	r3, [r3, #24]
 801bdfc:	429a      	cmp	r2, r3
 801bdfe:	d302      	bcc.n	801be06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801be00:	2301      	movs	r3, #1
 801be02:	617b      	str	r3, [r7, #20]
 801be04:	e01b      	b.n	801be3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801be06:	4b10      	ldr	r3, [pc, #64]	@ (801be48 <prvInsertTimerInActiveList+0x7c>)
 801be08:	681a      	ldr	r2, [r3, #0]
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	3304      	adds	r3, #4
 801be0e:	4619      	mov	r1, r3
 801be10:	4610      	mov	r0, r2
 801be12:	f7fd fea4 	bl	8019b5e <vListInsert>
 801be16:	e012      	b.n	801be3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801be18:	687a      	ldr	r2, [r7, #4]
 801be1a:	683b      	ldr	r3, [r7, #0]
 801be1c:	429a      	cmp	r2, r3
 801be1e:	d206      	bcs.n	801be2e <prvInsertTimerInActiveList+0x62>
 801be20:	68ba      	ldr	r2, [r7, #8]
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	429a      	cmp	r2, r3
 801be26:	d302      	bcc.n	801be2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801be28:	2301      	movs	r3, #1
 801be2a:	617b      	str	r3, [r7, #20]
 801be2c:	e007      	b.n	801be3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801be2e:	4b07      	ldr	r3, [pc, #28]	@ (801be4c <prvInsertTimerInActiveList+0x80>)
 801be30:	681a      	ldr	r2, [r3, #0]
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	3304      	adds	r3, #4
 801be36:	4619      	mov	r1, r3
 801be38:	4610      	mov	r0, r2
 801be3a:	f7fd fe90 	bl	8019b5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801be3e:	697b      	ldr	r3, [r7, #20]
}
 801be40:	4618      	mov	r0, r3
 801be42:	3718      	adds	r7, #24
 801be44:	46bd      	mov	sp, r7
 801be46:	bd80      	pop	{r7, pc}
 801be48:	20004108 	.word	0x20004108
 801be4c:	20004104 	.word	0x20004104

0801be50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b08e      	sub	sp, #56	@ 0x38
 801be54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801be56:	e0ce      	b.n	801bff6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	da19      	bge.n	801be92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801be5e:	1d3b      	adds	r3, r7, #4
 801be60:	3304      	adds	r3, #4
 801be62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801be64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be66:	2b00      	cmp	r3, #0
 801be68:	d10b      	bne.n	801be82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801be6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be6e:	f383 8811 	msr	BASEPRI, r3
 801be72:	f3bf 8f6f 	isb	sy
 801be76:	f3bf 8f4f 	dsb	sy
 801be7a:	61fb      	str	r3, [r7, #28]
}
 801be7c:	bf00      	nop
 801be7e:	bf00      	nop
 801be80:	e7fd      	b.n	801be7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801be82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801be88:	6850      	ldr	r0, [r2, #4]
 801be8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801be8c:	6892      	ldr	r2, [r2, #8]
 801be8e:	4611      	mov	r1, r2
 801be90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	2b00      	cmp	r3, #0
 801be96:	f2c0 80ae 	blt.w	801bff6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801be9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bea0:	695b      	ldr	r3, [r3, #20]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d004      	beq.n	801beb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bea8:	3304      	adds	r3, #4
 801beaa:	4618      	mov	r0, r3
 801beac:	f7fd fe90 	bl	8019bd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801beb0:	463b      	mov	r3, r7
 801beb2:	4618      	mov	r0, r3
 801beb4:	f7ff ff6a 	bl	801bd8c <prvSampleTimeNow>
 801beb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	2b09      	cmp	r3, #9
 801bebe:	f200 8097 	bhi.w	801bff0 <prvProcessReceivedCommands+0x1a0>
 801bec2:	a201      	add	r2, pc, #4	@ (adr r2, 801bec8 <prvProcessReceivedCommands+0x78>)
 801bec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bec8:	0801bef1 	.word	0x0801bef1
 801becc:	0801bef1 	.word	0x0801bef1
 801bed0:	0801bef1 	.word	0x0801bef1
 801bed4:	0801bf67 	.word	0x0801bf67
 801bed8:	0801bf7b 	.word	0x0801bf7b
 801bedc:	0801bfc7 	.word	0x0801bfc7
 801bee0:	0801bef1 	.word	0x0801bef1
 801bee4:	0801bef1 	.word	0x0801bef1
 801bee8:	0801bf67 	.word	0x0801bf67
 801beec:	0801bf7b 	.word	0x0801bf7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bef6:	f043 0301 	orr.w	r3, r3, #1
 801befa:	b2da      	uxtb	r2, r3
 801befc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801befe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801bf02:	68ba      	ldr	r2, [r7, #8]
 801bf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf06:	699b      	ldr	r3, [r3, #24]
 801bf08:	18d1      	adds	r1, r2, r3
 801bf0a:	68bb      	ldr	r3, [r7, #8]
 801bf0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf10:	f7ff ff5c 	bl	801bdcc <prvInsertTimerInActiveList>
 801bf14:	4603      	mov	r3, r0
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d06c      	beq.n	801bff4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf1c:	6a1b      	ldr	r3, [r3, #32]
 801bf1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bf22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf28:	f003 0304 	and.w	r3, r3, #4
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d061      	beq.n	801bff4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801bf30:	68ba      	ldr	r2, [r7, #8]
 801bf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf34:	699b      	ldr	r3, [r3, #24]
 801bf36:	441a      	add	r2, r3
 801bf38:	2300      	movs	r3, #0
 801bf3a:	9300      	str	r3, [sp, #0]
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	2100      	movs	r1, #0
 801bf40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf42:	f7ff fe01 	bl	801bb48 <xTimerGenericCommand>
 801bf46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801bf48:	6a3b      	ldr	r3, [r7, #32]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d152      	bne.n	801bff4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801bf4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf52:	f383 8811 	msr	BASEPRI, r3
 801bf56:	f3bf 8f6f 	isb	sy
 801bf5a:	f3bf 8f4f 	dsb	sy
 801bf5e:	61bb      	str	r3, [r7, #24]
}
 801bf60:	bf00      	nop
 801bf62:	bf00      	nop
 801bf64:	e7fd      	b.n	801bf62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf6c:	f023 0301 	bic.w	r3, r3, #1
 801bf70:	b2da      	uxtb	r2, r3
 801bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801bf78:	e03d      	b.n	801bff6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bf80:	f043 0301 	orr.w	r3, r3, #1
 801bf84:	b2da      	uxtb	r2, r3
 801bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801bf8c:	68ba      	ldr	r2, [r7, #8]
 801bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf94:	699b      	ldr	r3, [r3, #24]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d10b      	bne.n	801bfb2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801bf9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf9e:	f383 8811 	msr	BASEPRI, r3
 801bfa2:	f3bf 8f6f 	isb	sy
 801bfa6:	f3bf 8f4f 	dsb	sy
 801bfaa:	617b      	str	r3, [r7, #20]
}
 801bfac:	bf00      	nop
 801bfae:	bf00      	nop
 801bfb0:	e7fd      	b.n	801bfae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfb4:	699a      	ldr	r2, [r3, #24]
 801bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfb8:	18d1      	adds	r1, r2, r3
 801bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bfc0:	f7ff ff04 	bl	801bdcc <prvInsertTimerInActiveList>
					break;
 801bfc4:	e017      	b.n	801bff6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bfcc:	f003 0302 	and.w	r3, r3, #2
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d103      	bne.n	801bfdc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801bfd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bfd6:	f000 fc07 	bl	801c7e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801bfda:	e00c      	b.n	801bff6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801bfe2:	f023 0301 	bic.w	r3, r3, #1
 801bfe6:	b2da      	uxtb	r2, r3
 801bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801bfee:	e002      	b.n	801bff6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801bff0:	bf00      	nop
 801bff2:	e000      	b.n	801bff6 <prvProcessReceivedCommands+0x1a6>
					break;
 801bff4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bff6:	4b08      	ldr	r3, [pc, #32]	@ (801c018 <prvProcessReceivedCommands+0x1c8>)
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	1d39      	adds	r1, r7, #4
 801bffc:	2200      	movs	r2, #0
 801bffe:	4618      	mov	r0, r3
 801c000:	f7fe f986 	bl	801a310 <xQueueReceive>
 801c004:	4603      	mov	r3, r0
 801c006:	2b00      	cmp	r3, #0
 801c008:	f47f af26 	bne.w	801be58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c00c:	bf00      	nop
 801c00e:	bf00      	nop
 801c010:	3730      	adds	r7, #48	@ 0x30
 801c012:	46bd      	mov	sp, r7
 801c014:	bd80      	pop	{r7, pc}
 801c016:	bf00      	nop
 801c018:	2000410c 	.word	0x2000410c

0801c01c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b088      	sub	sp, #32
 801c020:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c022:	e049      	b.n	801c0b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c024:	4b2e      	ldr	r3, [pc, #184]	@ (801c0e0 <prvSwitchTimerLists+0xc4>)
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	68db      	ldr	r3, [r3, #12]
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c02e:	4b2c      	ldr	r3, [pc, #176]	@ (801c0e0 <prvSwitchTimerLists+0xc4>)
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	68db      	ldr	r3, [r3, #12]
 801c034:	68db      	ldr	r3, [r3, #12]
 801c036:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	3304      	adds	r3, #4
 801c03c:	4618      	mov	r0, r3
 801c03e:	f7fd fdc7 	bl	8019bd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	6a1b      	ldr	r3, [r3, #32]
 801c046:	68f8      	ldr	r0, [r7, #12]
 801c048:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c050:	f003 0304 	and.w	r3, r3, #4
 801c054:	2b00      	cmp	r3, #0
 801c056:	d02f      	beq.n	801c0b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	699b      	ldr	r3, [r3, #24]
 801c05c:	693a      	ldr	r2, [r7, #16]
 801c05e:	4413      	add	r3, r2
 801c060:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c062:	68ba      	ldr	r2, [r7, #8]
 801c064:	693b      	ldr	r3, [r7, #16]
 801c066:	429a      	cmp	r2, r3
 801c068:	d90e      	bls.n	801c088 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	68ba      	ldr	r2, [r7, #8]
 801c06e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	68fa      	ldr	r2, [r7, #12]
 801c074:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c076:	4b1a      	ldr	r3, [pc, #104]	@ (801c0e0 <prvSwitchTimerLists+0xc4>)
 801c078:	681a      	ldr	r2, [r3, #0]
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	3304      	adds	r3, #4
 801c07e:	4619      	mov	r1, r3
 801c080:	4610      	mov	r0, r2
 801c082:	f7fd fd6c 	bl	8019b5e <vListInsert>
 801c086:	e017      	b.n	801c0b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c088:	2300      	movs	r3, #0
 801c08a:	9300      	str	r3, [sp, #0]
 801c08c:	2300      	movs	r3, #0
 801c08e:	693a      	ldr	r2, [r7, #16]
 801c090:	2100      	movs	r1, #0
 801c092:	68f8      	ldr	r0, [r7, #12]
 801c094:	f7ff fd58 	bl	801bb48 <xTimerGenericCommand>
 801c098:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d10b      	bne.n	801c0b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801c0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c0a4:	f383 8811 	msr	BASEPRI, r3
 801c0a8:	f3bf 8f6f 	isb	sy
 801c0ac:	f3bf 8f4f 	dsb	sy
 801c0b0:	603b      	str	r3, [r7, #0]
}
 801c0b2:	bf00      	nop
 801c0b4:	bf00      	nop
 801c0b6:	e7fd      	b.n	801c0b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c0b8:	4b09      	ldr	r3, [pc, #36]	@ (801c0e0 <prvSwitchTimerLists+0xc4>)
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	681b      	ldr	r3, [r3, #0]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d1b0      	bne.n	801c024 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c0c2:	4b07      	ldr	r3, [pc, #28]	@ (801c0e0 <prvSwitchTimerLists+0xc4>)
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c0c8:	4b06      	ldr	r3, [pc, #24]	@ (801c0e4 <prvSwitchTimerLists+0xc8>)
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	4a04      	ldr	r2, [pc, #16]	@ (801c0e0 <prvSwitchTimerLists+0xc4>)
 801c0ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c0d0:	4a04      	ldr	r2, [pc, #16]	@ (801c0e4 <prvSwitchTimerLists+0xc8>)
 801c0d2:	697b      	ldr	r3, [r7, #20]
 801c0d4:	6013      	str	r3, [r2, #0]
}
 801c0d6:	bf00      	nop
 801c0d8:	3718      	adds	r7, #24
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd80      	pop	{r7, pc}
 801c0de:	bf00      	nop
 801c0e0:	20004104 	.word	0x20004104
 801c0e4:	20004108 	.word	0x20004108

0801c0e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b082      	sub	sp, #8
 801c0ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c0ee:	f000 f98b 	bl	801c408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c0f2:	4b15      	ldr	r3, [pc, #84]	@ (801c148 <prvCheckForValidListAndQueue+0x60>)
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d120      	bne.n	801c13c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c0fa:	4814      	ldr	r0, [pc, #80]	@ (801c14c <prvCheckForValidListAndQueue+0x64>)
 801c0fc:	f7fd fcde 	bl	8019abc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c100:	4813      	ldr	r0, [pc, #76]	@ (801c150 <prvCheckForValidListAndQueue+0x68>)
 801c102:	f7fd fcdb 	bl	8019abc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c106:	4b13      	ldr	r3, [pc, #76]	@ (801c154 <prvCheckForValidListAndQueue+0x6c>)
 801c108:	4a10      	ldr	r2, [pc, #64]	@ (801c14c <prvCheckForValidListAndQueue+0x64>)
 801c10a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c10c:	4b12      	ldr	r3, [pc, #72]	@ (801c158 <prvCheckForValidListAndQueue+0x70>)
 801c10e:	4a10      	ldr	r2, [pc, #64]	@ (801c150 <prvCheckForValidListAndQueue+0x68>)
 801c110:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c112:	2300      	movs	r3, #0
 801c114:	9300      	str	r3, [sp, #0]
 801c116:	4b11      	ldr	r3, [pc, #68]	@ (801c15c <prvCheckForValidListAndQueue+0x74>)
 801c118:	4a11      	ldr	r2, [pc, #68]	@ (801c160 <prvCheckForValidListAndQueue+0x78>)
 801c11a:	2110      	movs	r1, #16
 801c11c:	200a      	movs	r0, #10
 801c11e:	f7fd fdeb 	bl	8019cf8 <xQueueGenericCreateStatic>
 801c122:	4603      	mov	r3, r0
 801c124:	4a08      	ldr	r2, [pc, #32]	@ (801c148 <prvCheckForValidListAndQueue+0x60>)
 801c126:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c128:	4b07      	ldr	r3, [pc, #28]	@ (801c148 <prvCheckForValidListAndQueue+0x60>)
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d005      	beq.n	801c13c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c130:	4b05      	ldr	r3, [pc, #20]	@ (801c148 <prvCheckForValidListAndQueue+0x60>)
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	490b      	ldr	r1, [pc, #44]	@ (801c164 <prvCheckForValidListAndQueue+0x7c>)
 801c136:	4618      	mov	r0, r3
 801c138:	f7fe fadc 	bl	801a6f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c13c:	f000 f996 	bl	801c46c <vPortExitCritical>
}
 801c140:	bf00      	nop
 801c142:	46bd      	mov	sp, r7
 801c144:	bd80      	pop	{r7, pc}
 801c146:	bf00      	nop
 801c148:	2000410c 	.word	0x2000410c
 801c14c:	200040dc 	.word	0x200040dc
 801c150:	200040f0 	.word	0x200040f0
 801c154:	20004104 	.word	0x20004104
 801c158:	20004108 	.word	0x20004108
 801c15c:	200041b8 	.word	0x200041b8
 801c160:	20004118 	.word	0x20004118
 801c164:	080244ec 	.word	0x080244ec

0801c168 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801c168:	b580      	push	{r7, lr}
 801c16a:	b08a      	sub	sp, #40	@ 0x28
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	60f8      	str	r0, [r7, #12]
 801c170:	60b9      	str	r1, [r7, #8]
 801c172:	607a      	str	r2, [r7, #4]
 801c174:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801c176:	f06f 0301 	mvn.w	r3, #1
 801c17a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801c180:	68bb      	ldr	r3, [r7, #8]
 801c182:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c188:	4b06      	ldr	r3, [pc, #24]	@ (801c1a4 <xTimerPendFunctionCallFromISR+0x3c>)
 801c18a:	6818      	ldr	r0, [r3, #0]
 801c18c:	f107 0114 	add.w	r1, r7, #20
 801c190:	2300      	movs	r3, #0
 801c192:	683a      	ldr	r2, [r7, #0]
 801c194:	f7fd ff8e 	bl	801a0b4 <xQueueGenericSendFromISR>
 801c198:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801c19c:	4618      	mov	r0, r3
 801c19e:	3728      	adds	r7, #40	@ 0x28
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	bd80      	pop	{r7, pc}
 801c1a4:	2000410c 	.word	0x2000410c

0801c1a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c1a8:	b480      	push	{r7}
 801c1aa:	b085      	sub	sp, #20
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	60f8      	str	r0, [r7, #12]
 801c1b0:	60b9      	str	r1, [r7, #8]
 801c1b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	3b04      	subs	r3, #4
 801c1b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801c1c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	3b04      	subs	r3, #4
 801c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c1c8:	68bb      	ldr	r3, [r7, #8]
 801c1ca:	f023 0201 	bic.w	r2, r3, #1
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	3b04      	subs	r3, #4
 801c1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c1d8:	4a0c      	ldr	r2, [pc, #48]	@ (801c20c <pxPortInitialiseStack+0x64>)
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	3b14      	subs	r3, #20
 801c1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c1e4:	687a      	ldr	r2, [r7, #4]
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	3b04      	subs	r3, #4
 801c1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	f06f 0202 	mvn.w	r2, #2
 801c1f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	3b20      	subs	r3, #32
 801c1fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c1fe:	68fb      	ldr	r3, [r7, #12]
}
 801c200:	4618      	mov	r0, r3
 801c202:	3714      	adds	r7, #20
 801c204:	46bd      	mov	sp, r7
 801c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c20a:	4770      	bx	lr
 801c20c:	0801c211 	.word	0x0801c211

0801c210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c210:	b480      	push	{r7}
 801c212:	b085      	sub	sp, #20
 801c214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c216:	2300      	movs	r3, #0
 801c218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c21a:	4b13      	ldr	r3, [pc, #76]	@ (801c268 <prvTaskExitError+0x58>)
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c222:	d00b      	beq.n	801c23c <prvTaskExitError+0x2c>
	__asm volatile
 801c224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c228:	f383 8811 	msr	BASEPRI, r3
 801c22c:	f3bf 8f6f 	isb	sy
 801c230:	f3bf 8f4f 	dsb	sy
 801c234:	60fb      	str	r3, [r7, #12]
}
 801c236:	bf00      	nop
 801c238:	bf00      	nop
 801c23a:	e7fd      	b.n	801c238 <prvTaskExitError+0x28>
	__asm volatile
 801c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c240:	f383 8811 	msr	BASEPRI, r3
 801c244:	f3bf 8f6f 	isb	sy
 801c248:	f3bf 8f4f 	dsb	sy
 801c24c:	60bb      	str	r3, [r7, #8]
}
 801c24e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c250:	bf00      	nop
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d0fc      	beq.n	801c252 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c258:	bf00      	nop
 801c25a:	bf00      	nop
 801c25c:	3714      	adds	r7, #20
 801c25e:	46bd      	mov	sp, r7
 801c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c264:	4770      	bx	lr
 801c266:	bf00      	nop
 801c268:	200000dc 	.word	0x200000dc
 801c26c:	00000000 	.word	0x00000000

0801c270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c270:	4b07      	ldr	r3, [pc, #28]	@ (801c290 <pxCurrentTCBConst2>)
 801c272:	6819      	ldr	r1, [r3, #0]
 801c274:	6808      	ldr	r0, [r1, #0]
 801c276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c27a:	f380 8809 	msr	PSP, r0
 801c27e:	f3bf 8f6f 	isb	sy
 801c282:	f04f 0000 	mov.w	r0, #0
 801c286:	f380 8811 	msr	BASEPRI, r0
 801c28a:	4770      	bx	lr
 801c28c:	f3af 8000 	nop.w

0801c290 <pxCurrentTCBConst2>:
 801c290:	20003f08 	.word	0x20003f08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c294:	bf00      	nop
 801c296:	bf00      	nop

0801c298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c298:	4808      	ldr	r0, [pc, #32]	@ (801c2bc <prvPortStartFirstTask+0x24>)
 801c29a:	6800      	ldr	r0, [r0, #0]
 801c29c:	6800      	ldr	r0, [r0, #0]
 801c29e:	f380 8808 	msr	MSP, r0
 801c2a2:	f04f 0000 	mov.w	r0, #0
 801c2a6:	f380 8814 	msr	CONTROL, r0
 801c2aa:	b662      	cpsie	i
 801c2ac:	b661      	cpsie	f
 801c2ae:	f3bf 8f4f 	dsb	sy
 801c2b2:	f3bf 8f6f 	isb	sy
 801c2b6:	df00      	svc	0
 801c2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c2ba:	bf00      	nop
 801c2bc:	e000ed08 	.word	0xe000ed08

0801c2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b086      	sub	sp, #24
 801c2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c2c6:	4b47      	ldr	r3, [pc, #284]	@ (801c3e4 <xPortStartScheduler+0x124>)
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	4a47      	ldr	r2, [pc, #284]	@ (801c3e8 <xPortStartScheduler+0x128>)
 801c2cc:	4293      	cmp	r3, r2
 801c2ce:	d10b      	bne.n	801c2e8 <xPortStartScheduler+0x28>
	__asm volatile
 801c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c2d4:	f383 8811 	msr	BASEPRI, r3
 801c2d8:	f3bf 8f6f 	isb	sy
 801c2dc:	f3bf 8f4f 	dsb	sy
 801c2e0:	613b      	str	r3, [r7, #16]
}
 801c2e2:	bf00      	nop
 801c2e4:	bf00      	nop
 801c2e6:	e7fd      	b.n	801c2e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c2e8:	4b3e      	ldr	r3, [pc, #248]	@ (801c3e4 <xPortStartScheduler+0x124>)
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	4a3f      	ldr	r2, [pc, #252]	@ (801c3ec <xPortStartScheduler+0x12c>)
 801c2ee:	4293      	cmp	r3, r2
 801c2f0:	d10b      	bne.n	801c30a <xPortStartScheduler+0x4a>
	__asm volatile
 801c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c2f6:	f383 8811 	msr	BASEPRI, r3
 801c2fa:	f3bf 8f6f 	isb	sy
 801c2fe:	f3bf 8f4f 	dsb	sy
 801c302:	60fb      	str	r3, [r7, #12]
}
 801c304:	bf00      	nop
 801c306:	bf00      	nop
 801c308:	e7fd      	b.n	801c306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c30a:	4b39      	ldr	r3, [pc, #228]	@ (801c3f0 <xPortStartScheduler+0x130>)
 801c30c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c30e:	697b      	ldr	r3, [r7, #20]
 801c310:	781b      	ldrb	r3, [r3, #0]
 801c312:	b2db      	uxtb	r3, r3
 801c314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c316:	697b      	ldr	r3, [r7, #20]
 801c318:	22ff      	movs	r2, #255	@ 0xff
 801c31a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c31c:	697b      	ldr	r3, [r7, #20]
 801c31e:	781b      	ldrb	r3, [r3, #0]
 801c320:	b2db      	uxtb	r3, r3
 801c322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c324:	78fb      	ldrb	r3, [r7, #3]
 801c326:	b2db      	uxtb	r3, r3
 801c328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801c32c:	b2da      	uxtb	r2, r3
 801c32e:	4b31      	ldr	r3, [pc, #196]	@ (801c3f4 <xPortStartScheduler+0x134>)
 801c330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c332:	4b31      	ldr	r3, [pc, #196]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c334:	2207      	movs	r2, #7
 801c336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c338:	e009      	b.n	801c34e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801c33a:	4b2f      	ldr	r3, [pc, #188]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	3b01      	subs	r3, #1
 801c340:	4a2d      	ldr	r2, [pc, #180]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c344:	78fb      	ldrb	r3, [r7, #3]
 801c346:	b2db      	uxtb	r3, r3
 801c348:	005b      	lsls	r3, r3, #1
 801c34a:	b2db      	uxtb	r3, r3
 801c34c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c34e:	78fb      	ldrb	r3, [r7, #3]
 801c350:	b2db      	uxtb	r3, r3
 801c352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c356:	2b80      	cmp	r3, #128	@ 0x80
 801c358:	d0ef      	beq.n	801c33a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c35a:	4b27      	ldr	r3, [pc, #156]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	f1c3 0307 	rsb	r3, r3, #7
 801c362:	2b04      	cmp	r3, #4
 801c364:	d00b      	beq.n	801c37e <xPortStartScheduler+0xbe>
	__asm volatile
 801c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c36a:	f383 8811 	msr	BASEPRI, r3
 801c36e:	f3bf 8f6f 	isb	sy
 801c372:	f3bf 8f4f 	dsb	sy
 801c376:	60bb      	str	r3, [r7, #8]
}
 801c378:	bf00      	nop
 801c37a:	bf00      	nop
 801c37c:	e7fd      	b.n	801c37a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c37e:	4b1e      	ldr	r3, [pc, #120]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	021b      	lsls	r3, r3, #8
 801c384:	4a1c      	ldr	r2, [pc, #112]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c388:	4b1b      	ldr	r3, [pc, #108]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c390:	4a19      	ldr	r2, [pc, #100]	@ (801c3f8 <xPortStartScheduler+0x138>)
 801c392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	b2da      	uxtb	r2, r3
 801c398:	697b      	ldr	r3, [r7, #20]
 801c39a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c39c:	4b17      	ldr	r3, [pc, #92]	@ (801c3fc <xPortStartScheduler+0x13c>)
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	4a16      	ldr	r2, [pc, #88]	@ (801c3fc <xPortStartScheduler+0x13c>)
 801c3a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801c3a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c3a8:	4b14      	ldr	r3, [pc, #80]	@ (801c3fc <xPortStartScheduler+0x13c>)
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	4a13      	ldr	r2, [pc, #76]	@ (801c3fc <xPortStartScheduler+0x13c>)
 801c3ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801c3b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c3b4:	f000 f8da 	bl	801c56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c3b8:	4b11      	ldr	r3, [pc, #68]	@ (801c400 <xPortStartScheduler+0x140>)
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c3be:	f000 f8f9 	bl	801c5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c3c2:	4b10      	ldr	r3, [pc, #64]	@ (801c404 <xPortStartScheduler+0x144>)
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	4a0f      	ldr	r2, [pc, #60]	@ (801c404 <xPortStartScheduler+0x144>)
 801c3c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801c3cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c3ce:	f7ff ff63 	bl	801c298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c3d2:	f7fe fe75 	bl	801b0c0 <vTaskSwitchContext>
	prvTaskExitError();
 801c3d6:	f7ff ff1b 	bl	801c210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c3da:	2300      	movs	r3, #0
}
 801c3dc:	4618      	mov	r0, r3
 801c3de:	3718      	adds	r7, #24
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	bd80      	pop	{r7, pc}
 801c3e4:	e000ed00 	.word	0xe000ed00
 801c3e8:	410fc271 	.word	0x410fc271
 801c3ec:	410fc270 	.word	0x410fc270
 801c3f0:	e000e400 	.word	0xe000e400
 801c3f4:	20004208 	.word	0x20004208
 801c3f8:	2000420c 	.word	0x2000420c
 801c3fc:	e000ed20 	.word	0xe000ed20
 801c400:	200000dc 	.word	0x200000dc
 801c404:	e000ef34 	.word	0xe000ef34

0801c408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c408:	b480      	push	{r7}
 801c40a:	b083      	sub	sp, #12
 801c40c:	af00      	add	r7, sp, #0
	__asm volatile
 801c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c412:	f383 8811 	msr	BASEPRI, r3
 801c416:	f3bf 8f6f 	isb	sy
 801c41a:	f3bf 8f4f 	dsb	sy
 801c41e:	607b      	str	r3, [r7, #4]
}
 801c420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c422:	4b10      	ldr	r3, [pc, #64]	@ (801c464 <vPortEnterCritical+0x5c>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	3301      	adds	r3, #1
 801c428:	4a0e      	ldr	r2, [pc, #56]	@ (801c464 <vPortEnterCritical+0x5c>)
 801c42a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c42c:	4b0d      	ldr	r3, [pc, #52]	@ (801c464 <vPortEnterCritical+0x5c>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	2b01      	cmp	r3, #1
 801c432:	d110      	bne.n	801c456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c434:	4b0c      	ldr	r3, [pc, #48]	@ (801c468 <vPortEnterCritical+0x60>)
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	b2db      	uxtb	r3, r3
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d00b      	beq.n	801c456 <vPortEnterCritical+0x4e>
	__asm volatile
 801c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c442:	f383 8811 	msr	BASEPRI, r3
 801c446:	f3bf 8f6f 	isb	sy
 801c44a:	f3bf 8f4f 	dsb	sy
 801c44e:	603b      	str	r3, [r7, #0]
}
 801c450:	bf00      	nop
 801c452:	bf00      	nop
 801c454:	e7fd      	b.n	801c452 <vPortEnterCritical+0x4a>
	}
}
 801c456:	bf00      	nop
 801c458:	370c      	adds	r7, #12
 801c45a:	46bd      	mov	sp, r7
 801c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c460:	4770      	bx	lr
 801c462:	bf00      	nop
 801c464:	200000dc 	.word	0x200000dc
 801c468:	e000ed04 	.word	0xe000ed04

0801c46c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c46c:	b480      	push	{r7}
 801c46e:	b083      	sub	sp, #12
 801c470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c472:	4b12      	ldr	r3, [pc, #72]	@ (801c4bc <vPortExitCritical+0x50>)
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d10b      	bne.n	801c492 <vPortExitCritical+0x26>
	__asm volatile
 801c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c47e:	f383 8811 	msr	BASEPRI, r3
 801c482:	f3bf 8f6f 	isb	sy
 801c486:	f3bf 8f4f 	dsb	sy
 801c48a:	607b      	str	r3, [r7, #4]
}
 801c48c:	bf00      	nop
 801c48e:	bf00      	nop
 801c490:	e7fd      	b.n	801c48e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c492:	4b0a      	ldr	r3, [pc, #40]	@ (801c4bc <vPortExitCritical+0x50>)
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	3b01      	subs	r3, #1
 801c498:	4a08      	ldr	r2, [pc, #32]	@ (801c4bc <vPortExitCritical+0x50>)
 801c49a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c49c:	4b07      	ldr	r3, [pc, #28]	@ (801c4bc <vPortExitCritical+0x50>)
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d105      	bne.n	801c4b0 <vPortExitCritical+0x44>
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c4a8:	683b      	ldr	r3, [r7, #0]
 801c4aa:	f383 8811 	msr	BASEPRI, r3
}
 801c4ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c4b0:	bf00      	nop
 801c4b2:	370c      	adds	r7, #12
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ba:	4770      	bx	lr
 801c4bc:	200000dc 	.word	0x200000dc

0801c4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c4c0:	f3ef 8009 	mrs	r0, PSP
 801c4c4:	f3bf 8f6f 	isb	sy
 801c4c8:	4b15      	ldr	r3, [pc, #84]	@ (801c520 <pxCurrentTCBConst>)
 801c4ca:	681a      	ldr	r2, [r3, #0]
 801c4cc:	f01e 0f10 	tst.w	lr, #16
 801c4d0:	bf08      	it	eq
 801c4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4da:	6010      	str	r0, [r2, #0]
 801c4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c4e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801c4e4:	f380 8811 	msr	BASEPRI, r0
 801c4e8:	f3bf 8f4f 	dsb	sy
 801c4ec:	f3bf 8f6f 	isb	sy
 801c4f0:	f7fe fde6 	bl	801b0c0 <vTaskSwitchContext>
 801c4f4:	f04f 0000 	mov.w	r0, #0
 801c4f8:	f380 8811 	msr	BASEPRI, r0
 801c4fc:	bc09      	pop	{r0, r3}
 801c4fe:	6819      	ldr	r1, [r3, #0]
 801c500:	6808      	ldr	r0, [r1, #0]
 801c502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c506:	f01e 0f10 	tst.w	lr, #16
 801c50a:	bf08      	it	eq
 801c50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c510:	f380 8809 	msr	PSP, r0
 801c514:	f3bf 8f6f 	isb	sy
 801c518:	4770      	bx	lr
 801c51a:	bf00      	nop
 801c51c:	f3af 8000 	nop.w

0801c520 <pxCurrentTCBConst>:
 801c520:	20003f08 	.word	0x20003f08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c524:	bf00      	nop
 801c526:	bf00      	nop

0801c528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c528:	b580      	push	{r7, lr}
 801c52a:	b082      	sub	sp, #8
 801c52c:	af00      	add	r7, sp, #0
	__asm volatile
 801c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c532:	f383 8811 	msr	BASEPRI, r3
 801c536:	f3bf 8f6f 	isb	sy
 801c53a:	f3bf 8f4f 	dsb	sy
 801c53e:	607b      	str	r3, [r7, #4]
}
 801c540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c542:	f7fe fd03 	bl	801af4c <xTaskIncrementTick>
 801c546:	4603      	mov	r3, r0
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d003      	beq.n	801c554 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c54c:	4b06      	ldr	r3, [pc, #24]	@ (801c568 <SysTick_Handler+0x40>)
 801c54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c552:	601a      	str	r2, [r3, #0]
 801c554:	2300      	movs	r3, #0
 801c556:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c558:	683b      	ldr	r3, [r7, #0]
 801c55a:	f383 8811 	msr	BASEPRI, r3
}
 801c55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c560:	bf00      	nop
 801c562:	3708      	adds	r7, #8
 801c564:	46bd      	mov	sp, r7
 801c566:	bd80      	pop	{r7, pc}
 801c568:	e000ed04 	.word	0xe000ed04

0801c56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c56c:	b480      	push	{r7}
 801c56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c570:	4b0b      	ldr	r3, [pc, #44]	@ (801c5a0 <vPortSetupTimerInterrupt+0x34>)
 801c572:	2200      	movs	r2, #0
 801c574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c576:	4b0b      	ldr	r3, [pc, #44]	@ (801c5a4 <vPortSetupTimerInterrupt+0x38>)
 801c578:	2200      	movs	r2, #0
 801c57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c57c:	4b0a      	ldr	r3, [pc, #40]	@ (801c5a8 <vPortSetupTimerInterrupt+0x3c>)
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	4a0a      	ldr	r2, [pc, #40]	@ (801c5ac <vPortSetupTimerInterrupt+0x40>)
 801c582:	fba2 2303 	umull	r2, r3, r2, r3
 801c586:	099b      	lsrs	r3, r3, #6
 801c588:	4a09      	ldr	r2, [pc, #36]	@ (801c5b0 <vPortSetupTimerInterrupt+0x44>)
 801c58a:	3b01      	subs	r3, #1
 801c58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c58e:	4b04      	ldr	r3, [pc, #16]	@ (801c5a0 <vPortSetupTimerInterrupt+0x34>)
 801c590:	2207      	movs	r2, #7
 801c592:	601a      	str	r2, [r3, #0]
}
 801c594:	bf00      	nop
 801c596:	46bd      	mov	sp, r7
 801c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c59c:	4770      	bx	lr
 801c59e:	bf00      	nop
 801c5a0:	e000e010 	.word	0xe000e010
 801c5a4:	e000e018 	.word	0xe000e018
 801c5a8:	20000004 	.word	0x20000004
 801c5ac:	10624dd3 	.word	0x10624dd3
 801c5b0:	e000e014 	.word	0xe000e014

0801c5b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801c5c4 <vPortEnableVFP+0x10>
 801c5b8:	6801      	ldr	r1, [r0, #0]
 801c5ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801c5be:	6001      	str	r1, [r0, #0]
 801c5c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c5c2:	bf00      	nop
 801c5c4:	e000ed88 	.word	0xe000ed88

0801c5c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c5c8:	b480      	push	{r7}
 801c5ca:	b085      	sub	sp, #20
 801c5cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c5ce:	f3ef 8305 	mrs	r3, IPSR
 801c5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	2b0f      	cmp	r3, #15
 801c5d8:	d915      	bls.n	801c606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c5da:	4a18      	ldr	r2, [pc, #96]	@ (801c63c <vPortValidateInterruptPriority+0x74>)
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	4413      	add	r3, r2
 801c5e0:	781b      	ldrb	r3, [r3, #0]
 801c5e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c5e4:	4b16      	ldr	r3, [pc, #88]	@ (801c640 <vPortValidateInterruptPriority+0x78>)
 801c5e6:	781b      	ldrb	r3, [r3, #0]
 801c5e8:	7afa      	ldrb	r2, [r7, #11]
 801c5ea:	429a      	cmp	r2, r3
 801c5ec:	d20b      	bcs.n	801c606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c5f2:	f383 8811 	msr	BASEPRI, r3
 801c5f6:	f3bf 8f6f 	isb	sy
 801c5fa:	f3bf 8f4f 	dsb	sy
 801c5fe:	607b      	str	r3, [r7, #4]
}
 801c600:	bf00      	nop
 801c602:	bf00      	nop
 801c604:	e7fd      	b.n	801c602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c606:	4b0f      	ldr	r3, [pc, #60]	@ (801c644 <vPortValidateInterruptPriority+0x7c>)
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801c60e:	4b0e      	ldr	r3, [pc, #56]	@ (801c648 <vPortValidateInterruptPriority+0x80>)
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	429a      	cmp	r2, r3
 801c614:	d90b      	bls.n	801c62e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c61a:	f383 8811 	msr	BASEPRI, r3
 801c61e:	f3bf 8f6f 	isb	sy
 801c622:	f3bf 8f4f 	dsb	sy
 801c626:	603b      	str	r3, [r7, #0]
}
 801c628:	bf00      	nop
 801c62a:	bf00      	nop
 801c62c:	e7fd      	b.n	801c62a <vPortValidateInterruptPriority+0x62>
	}
 801c62e:	bf00      	nop
 801c630:	3714      	adds	r7, #20
 801c632:	46bd      	mov	sp, r7
 801c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c638:	4770      	bx	lr
 801c63a:	bf00      	nop
 801c63c:	e000e3f0 	.word	0xe000e3f0
 801c640:	20004208 	.word	0x20004208
 801c644:	e000ed0c 	.word	0xe000ed0c
 801c648:	2000420c 	.word	0x2000420c

0801c64c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b08a      	sub	sp, #40	@ 0x28
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c654:	2300      	movs	r3, #0
 801c656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c658:	f7fe fbbc 	bl	801add4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c65c:	4b5c      	ldr	r3, [pc, #368]	@ (801c7d0 <pvPortMalloc+0x184>)
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d101      	bne.n	801c668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c664:	f000 f924 	bl	801c8b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c668:	4b5a      	ldr	r3, [pc, #360]	@ (801c7d4 <pvPortMalloc+0x188>)
 801c66a:	681a      	ldr	r2, [r3, #0]
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	4013      	ands	r3, r2
 801c670:	2b00      	cmp	r3, #0
 801c672:	f040 8095 	bne.w	801c7a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d01e      	beq.n	801c6ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801c67c:	2208      	movs	r2, #8
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	4413      	add	r3, r2
 801c682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	f003 0307 	and.w	r3, r3, #7
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d015      	beq.n	801c6ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	f023 0307 	bic.w	r3, r3, #7
 801c694:	3308      	adds	r3, #8
 801c696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	f003 0307 	and.w	r3, r3, #7
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d00b      	beq.n	801c6ba <pvPortMalloc+0x6e>
	__asm volatile
 801c6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c6a6:	f383 8811 	msr	BASEPRI, r3
 801c6aa:	f3bf 8f6f 	isb	sy
 801c6ae:	f3bf 8f4f 	dsb	sy
 801c6b2:	617b      	str	r3, [r7, #20]
}
 801c6b4:	bf00      	nop
 801c6b6:	bf00      	nop
 801c6b8:	e7fd      	b.n	801c6b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d06f      	beq.n	801c7a0 <pvPortMalloc+0x154>
 801c6c0:	4b45      	ldr	r3, [pc, #276]	@ (801c7d8 <pvPortMalloc+0x18c>)
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	687a      	ldr	r2, [r7, #4]
 801c6c6:	429a      	cmp	r2, r3
 801c6c8:	d86a      	bhi.n	801c7a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c6ca:	4b44      	ldr	r3, [pc, #272]	@ (801c7dc <pvPortMalloc+0x190>)
 801c6cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c6ce:	4b43      	ldr	r3, [pc, #268]	@ (801c7dc <pvPortMalloc+0x190>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c6d4:	e004      	b.n	801c6e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6e2:	685b      	ldr	r3, [r3, #4]
 801c6e4:	687a      	ldr	r2, [r7, #4]
 801c6e6:	429a      	cmp	r2, r3
 801c6e8:	d903      	bls.n	801c6f2 <pvPortMalloc+0xa6>
 801c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d1f1      	bne.n	801c6d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c6f2:	4b37      	ldr	r3, [pc, #220]	@ (801c7d0 <pvPortMalloc+0x184>)
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6f8:	429a      	cmp	r2, r3
 801c6fa:	d051      	beq.n	801c7a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c6fc:	6a3b      	ldr	r3, [r7, #32]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	2208      	movs	r2, #8
 801c702:	4413      	add	r3, r2
 801c704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c708:	681a      	ldr	r2, [r3, #0]
 801c70a:	6a3b      	ldr	r3, [r7, #32]
 801c70c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c710:	685a      	ldr	r2, [r3, #4]
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	1ad2      	subs	r2, r2, r3
 801c716:	2308      	movs	r3, #8
 801c718:	005b      	lsls	r3, r3, #1
 801c71a:	429a      	cmp	r2, r3
 801c71c:	d920      	bls.n	801c760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	4413      	add	r3, r2
 801c724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c726:	69bb      	ldr	r3, [r7, #24]
 801c728:	f003 0307 	and.w	r3, r3, #7
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d00b      	beq.n	801c748 <pvPortMalloc+0xfc>
	__asm volatile
 801c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c734:	f383 8811 	msr	BASEPRI, r3
 801c738:	f3bf 8f6f 	isb	sy
 801c73c:	f3bf 8f4f 	dsb	sy
 801c740:	613b      	str	r3, [r7, #16]
}
 801c742:	bf00      	nop
 801c744:	bf00      	nop
 801c746:	e7fd      	b.n	801c744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c74a:	685a      	ldr	r2, [r3, #4]
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	1ad2      	subs	r2, r2, r3
 801c750:	69bb      	ldr	r3, [r7, #24]
 801c752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c756:	687a      	ldr	r2, [r7, #4]
 801c758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c75a:	69b8      	ldr	r0, [r7, #24]
 801c75c:	f000 f90a 	bl	801c974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c760:	4b1d      	ldr	r3, [pc, #116]	@ (801c7d8 <pvPortMalloc+0x18c>)
 801c762:	681a      	ldr	r2, [r3, #0]
 801c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	1ad3      	subs	r3, r2, r3
 801c76a:	4a1b      	ldr	r2, [pc, #108]	@ (801c7d8 <pvPortMalloc+0x18c>)
 801c76c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c76e:	4b1a      	ldr	r3, [pc, #104]	@ (801c7d8 <pvPortMalloc+0x18c>)
 801c770:	681a      	ldr	r2, [r3, #0]
 801c772:	4b1b      	ldr	r3, [pc, #108]	@ (801c7e0 <pvPortMalloc+0x194>)
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	429a      	cmp	r2, r3
 801c778:	d203      	bcs.n	801c782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c77a:	4b17      	ldr	r3, [pc, #92]	@ (801c7d8 <pvPortMalloc+0x18c>)
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	4a18      	ldr	r2, [pc, #96]	@ (801c7e0 <pvPortMalloc+0x194>)
 801c780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c784:	685a      	ldr	r2, [r3, #4]
 801c786:	4b13      	ldr	r3, [pc, #76]	@ (801c7d4 <pvPortMalloc+0x188>)
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	431a      	orrs	r2, r3
 801c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c78e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c792:	2200      	movs	r2, #0
 801c794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c796:	4b13      	ldr	r3, [pc, #76]	@ (801c7e4 <pvPortMalloc+0x198>)
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	3301      	adds	r3, #1
 801c79c:	4a11      	ldr	r2, [pc, #68]	@ (801c7e4 <pvPortMalloc+0x198>)
 801c79e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c7a0:	f7fe fb26 	bl	801adf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c7a4:	69fb      	ldr	r3, [r7, #28]
 801c7a6:	f003 0307 	and.w	r3, r3, #7
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d00b      	beq.n	801c7c6 <pvPortMalloc+0x17a>
	__asm volatile
 801c7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c7b2:	f383 8811 	msr	BASEPRI, r3
 801c7b6:	f3bf 8f6f 	isb	sy
 801c7ba:	f3bf 8f4f 	dsb	sy
 801c7be:	60fb      	str	r3, [r7, #12]
}
 801c7c0:	bf00      	nop
 801c7c2:	bf00      	nop
 801c7c4:	e7fd      	b.n	801c7c2 <pvPortMalloc+0x176>
	return pvReturn;
 801c7c6:	69fb      	ldr	r3, [r7, #28]
}
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	3728      	adds	r7, #40	@ 0x28
 801c7cc:	46bd      	mov	sp, r7
 801c7ce:	bd80      	pop	{r7, pc}
 801c7d0:	2000b748 	.word	0x2000b748
 801c7d4:	2000b75c 	.word	0x2000b75c
 801c7d8:	2000b74c 	.word	0x2000b74c
 801c7dc:	2000b740 	.word	0x2000b740
 801c7e0:	2000b750 	.word	0x2000b750
 801c7e4:	2000b754 	.word	0x2000b754

0801c7e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c7e8:	b580      	push	{r7, lr}
 801c7ea:	b086      	sub	sp, #24
 801c7ec:	af00      	add	r7, sp, #0
 801c7ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d04f      	beq.n	801c89a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c7fa:	2308      	movs	r3, #8
 801c7fc:	425b      	negs	r3, r3
 801c7fe:	697a      	ldr	r2, [r7, #20]
 801c800:	4413      	add	r3, r2
 801c802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c804:	697b      	ldr	r3, [r7, #20]
 801c806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c808:	693b      	ldr	r3, [r7, #16]
 801c80a:	685a      	ldr	r2, [r3, #4]
 801c80c:	4b25      	ldr	r3, [pc, #148]	@ (801c8a4 <vPortFree+0xbc>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	4013      	ands	r3, r2
 801c812:	2b00      	cmp	r3, #0
 801c814:	d10b      	bne.n	801c82e <vPortFree+0x46>
	__asm volatile
 801c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c81a:	f383 8811 	msr	BASEPRI, r3
 801c81e:	f3bf 8f6f 	isb	sy
 801c822:	f3bf 8f4f 	dsb	sy
 801c826:	60fb      	str	r3, [r7, #12]
}
 801c828:	bf00      	nop
 801c82a:	bf00      	nop
 801c82c:	e7fd      	b.n	801c82a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c82e:	693b      	ldr	r3, [r7, #16]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d00b      	beq.n	801c84e <vPortFree+0x66>
	__asm volatile
 801c836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c83a:	f383 8811 	msr	BASEPRI, r3
 801c83e:	f3bf 8f6f 	isb	sy
 801c842:	f3bf 8f4f 	dsb	sy
 801c846:	60bb      	str	r3, [r7, #8]
}
 801c848:	bf00      	nop
 801c84a:	bf00      	nop
 801c84c:	e7fd      	b.n	801c84a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c84e:	693b      	ldr	r3, [r7, #16]
 801c850:	685a      	ldr	r2, [r3, #4]
 801c852:	4b14      	ldr	r3, [pc, #80]	@ (801c8a4 <vPortFree+0xbc>)
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	4013      	ands	r3, r2
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d01e      	beq.n	801c89a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c85c:	693b      	ldr	r3, [r7, #16]
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d11a      	bne.n	801c89a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c864:	693b      	ldr	r3, [r7, #16]
 801c866:	685a      	ldr	r2, [r3, #4]
 801c868:	4b0e      	ldr	r3, [pc, #56]	@ (801c8a4 <vPortFree+0xbc>)
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	43db      	mvns	r3, r3
 801c86e:	401a      	ands	r2, r3
 801c870:	693b      	ldr	r3, [r7, #16]
 801c872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c874:	f7fe faae 	bl	801add4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c878:	693b      	ldr	r3, [r7, #16]
 801c87a:	685a      	ldr	r2, [r3, #4]
 801c87c:	4b0a      	ldr	r3, [pc, #40]	@ (801c8a8 <vPortFree+0xc0>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	4413      	add	r3, r2
 801c882:	4a09      	ldr	r2, [pc, #36]	@ (801c8a8 <vPortFree+0xc0>)
 801c884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c886:	6938      	ldr	r0, [r7, #16]
 801c888:	f000 f874 	bl	801c974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c88c:	4b07      	ldr	r3, [pc, #28]	@ (801c8ac <vPortFree+0xc4>)
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	3301      	adds	r3, #1
 801c892:	4a06      	ldr	r2, [pc, #24]	@ (801c8ac <vPortFree+0xc4>)
 801c894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c896:	f7fe faab 	bl	801adf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c89a:	bf00      	nop
 801c89c:	3718      	adds	r7, #24
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	bd80      	pop	{r7, pc}
 801c8a2:	bf00      	nop
 801c8a4:	2000b75c 	.word	0x2000b75c
 801c8a8:	2000b74c 	.word	0x2000b74c
 801c8ac:	2000b758 	.word	0x2000b758

0801c8b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c8b0:	b480      	push	{r7}
 801c8b2:	b085      	sub	sp, #20
 801c8b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c8b6:	f247 5330 	movw	r3, #30000	@ 0x7530
 801c8ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c8bc:	4b27      	ldr	r3, [pc, #156]	@ (801c95c <prvHeapInit+0xac>)
 801c8be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	f003 0307 	and.w	r3, r3, #7
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d00c      	beq.n	801c8e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	3307      	adds	r3, #7
 801c8ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	f023 0307 	bic.w	r3, r3, #7
 801c8d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c8d8:	68ba      	ldr	r2, [r7, #8]
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	1ad3      	subs	r3, r2, r3
 801c8de:	4a1f      	ldr	r2, [pc, #124]	@ (801c95c <prvHeapInit+0xac>)
 801c8e0:	4413      	add	r3, r2
 801c8e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c8e8:	4a1d      	ldr	r2, [pc, #116]	@ (801c960 <prvHeapInit+0xb0>)
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c8ee:	4b1c      	ldr	r3, [pc, #112]	@ (801c960 <prvHeapInit+0xb0>)
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	68ba      	ldr	r2, [r7, #8]
 801c8f8:	4413      	add	r3, r2
 801c8fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c8fc:	2208      	movs	r2, #8
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	1a9b      	subs	r3, r3, r2
 801c902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	f023 0307 	bic.w	r3, r3, #7
 801c90a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	4a15      	ldr	r2, [pc, #84]	@ (801c964 <prvHeapInit+0xb4>)
 801c910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c912:	4b14      	ldr	r3, [pc, #80]	@ (801c964 <prvHeapInit+0xb4>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	2200      	movs	r2, #0
 801c918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c91a:	4b12      	ldr	r3, [pc, #72]	@ (801c964 <prvHeapInit+0xb4>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	2200      	movs	r2, #0
 801c920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c926:	683b      	ldr	r3, [r7, #0]
 801c928:	68fa      	ldr	r2, [r7, #12]
 801c92a:	1ad2      	subs	r2, r2, r3
 801c92c:	683b      	ldr	r3, [r7, #0]
 801c92e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c930:	4b0c      	ldr	r3, [pc, #48]	@ (801c964 <prvHeapInit+0xb4>)
 801c932:	681a      	ldr	r2, [r3, #0]
 801c934:	683b      	ldr	r3, [r7, #0]
 801c936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c938:	683b      	ldr	r3, [r7, #0]
 801c93a:	685b      	ldr	r3, [r3, #4]
 801c93c:	4a0a      	ldr	r2, [pc, #40]	@ (801c968 <prvHeapInit+0xb8>)
 801c93e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c940:	683b      	ldr	r3, [r7, #0]
 801c942:	685b      	ldr	r3, [r3, #4]
 801c944:	4a09      	ldr	r2, [pc, #36]	@ (801c96c <prvHeapInit+0xbc>)
 801c946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c948:	4b09      	ldr	r3, [pc, #36]	@ (801c970 <prvHeapInit+0xc0>)
 801c94a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801c94e:	601a      	str	r2, [r3, #0]
}
 801c950:	bf00      	nop
 801c952:	3714      	adds	r7, #20
 801c954:	46bd      	mov	sp, r7
 801c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c95a:	4770      	bx	lr
 801c95c:	20004210 	.word	0x20004210
 801c960:	2000b740 	.word	0x2000b740
 801c964:	2000b748 	.word	0x2000b748
 801c968:	2000b750 	.word	0x2000b750
 801c96c:	2000b74c 	.word	0x2000b74c
 801c970:	2000b75c 	.word	0x2000b75c

0801c974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c974:	b480      	push	{r7}
 801c976:	b085      	sub	sp, #20
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c97c:	4b28      	ldr	r3, [pc, #160]	@ (801ca20 <prvInsertBlockIntoFreeList+0xac>)
 801c97e:	60fb      	str	r3, [r7, #12]
 801c980:	e002      	b.n	801c988 <prvInsertBlockIntoFreeList+0x14>
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	60fb      	str	r3, [r7, #12]
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	687a      	ldr	r2, [r7, #4]
 801c98e:	429a      	cmp	r2, r3
 801c990:	d8f7      	bhi.n	801c982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	685b      	ldr	r3, [r3, #4]
 801c99a:	68ba      	ldr	r2, [r7, #8]
 801c99c:	4413      	add	r3, r2
 801c99e:	687a      	ldr	r2, [r7, #4]
 801c9a0:	429a      	cmp	r2, r3
 801c9a2:	d108      	bne.n	801c9b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	685a      	ldr	r2, [r3, #4]
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	685b      	ldr	r3, [r3, #4]
 801c9ac:	441a      	add	r2, r3
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	685b      	ldr	r3, [r3, #4]
 801c9be:	68ba      	ldr	r2, [r7, #8]
 801c9c0:	441a      	add	r2, r3
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	429a      	cmp	r2, r3
 801c9c8:	d118      	bne.n	801c9fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	681a      	ldr	r2, [r3, #0]
 801c9ce:	4b15      	ldr	r3, [pc, #84]	@ (801ca24 <prvInsertBlockIntoFreeList+0xb0>)
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	429a      	cmp	r2, r3
 801c9d4:	d00d      	beq.n	801c9f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	685a      	ldr	r2, [r3, #4]
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	685b      	ldr	r3, [r3, #4]
 801c9e0:	441a      	add	r2, r3
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	681a      	ldr	r2, [r3, #0]
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	601a      	str	r2, [r3, #0]
 801c9f0:	e008      	b.n	801ca04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c9f2:	4b0c      	ldr	r3, [pc, #48]	@ (801ca24 <prvInsertBlockIntoFreeList+0xb0>)
 801c9f4:	681a      	ldr	r2, [r3, #0]
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	601a      	str	r2, [r3, #0]
 801c9fa:	e003      	b.n	801ca04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	681a      	ldr	r2, [r3, #0]
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ca04:	68fa      	ldr	r2, [r7, #12]
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d002      	beq.n	801ca12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	687a      	ldr	r2, [r7, #4]
 801ca10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ca12:	bf00      	nop
 801ca14:	3714      	adds	r7, #20
 801ca16:	46bd      	mov	sp, r7
 801ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1c:	4770      	bx	lr
 801ca1e:	bf00      	nop
 801ca20:	2000b740 	.word	0x2000b740
 801ca24:	2000b748 	.word	0x2000b748

0801ca28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801ca2c:	2200      	movs	r2, #0
 801ca2e:	4912      	ldr	r1, [pc, #72]	@ (801ca78 <MX_USB_DEVICE_Init+0x50>)
 801ca30:	4812      	ldr	r0, [pc, #72]	@ (801ca7c <MX_USB_DEVICE_Init+0x54>)
 801ca32:	f7fb fc0d 	bl	8018250 <USBD_Init>
 801ca36:	4603      	mov	r3, r0
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d001      	beq.n	801ca40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801ca3c:	f7e6 fedc 	bl	80037f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801ca40:	490f      	ldr	r1, [pc, #60]	@ (801ca80 <MX_USB_DEVICE_Init+0x58>)
 801ca42:	480e      	ldr	r0, [pc, #56]	@ (801ca7c <MX_USB_DEVICE_Init+0x54>)
 801ca44:	f7fb fc34 	bl	80182b0 <USBD_RegisterClass>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d001      	beq.n	801ca52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ca4e:	f7e6 fed3 	bl	80037f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801ca52:	490c      	ldr	r1, [pc, #48]	@ (801ca84 <MX_USB_DEVICE_Init+0x5c>)
 801ca54:	4809      	ldr	r0, [pc, #36]	@ (801ca7c <MX_USB_DEVICE_Init+0x54>)
 801ca56:	f7fb fb6b 	bl	8018130 <USBD_CDC_RegisterInterface>
 801ca5a:	4603      	mov	r3, r0
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d001      	beq.n	801ca64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801ca60:	f7e6 feca 	bl	80037f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ca64:	4805      	ldr	r0, [pc, #20]	@ (801ca7c <MX_USB_DEVICE_Init+0x54>)
 801ca66:	f7fb fc59 	bl	801831c <USBD_Start>
 801ca6a:	4603      	mov	r3, r0
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d001      	beq.n	801ca74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801ca70:	f7e6 fec2 	bl	80037f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ca74:	bf00      	nop
 801ca76:	bd80      	pop	{r7, pc}
 801ca78:	200000f4 	.word	0x200000f4
 801ca7c:	2000b760 	.word	0x2000b760
 801ca80:	2000005c 	.word	0x2000005c
 801ca84:	200000e0 	.word	0x200000e0

0801ca88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801ca88:	b580      	push	{r7, lr}
 801ca8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	4905      	ldr	r1, [pc, #20]	@ (801caa4 <CDC_Init_FS+0x1c>)
 801ca90:	4805      	ldr	r0, [pc, #20]	@ (801caa8 <CDC_Init_FS+0x20>)
 801ca92:	f7fb fb67 	bl	8018164 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ca96:	4905      	ldr	r1, [pc, #20]	@ (801caac <CDC_Init_FS+0x24>)
 801ca98:	4803      	ldr	r0, [pc, #12]	@ (801caa8 <CDC_Init_FS+0x20>)
 801ca9a:	f7fb fb85 	bl	80181a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ca9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801caa0:	4618      	mov	r0, r3
 801caa2:	bd80      	pop	{r7, pc}
 801caa4:	2000c244 	.word	0x2000c244
 801caa8:	2000b760 	.word	0x2000b760
 801caac:	2000ba44 	.word	0x2000ba44

0801cab0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801cab0:	b480      	push	{r7}
 801cab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801cab4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cab6:	4618      	mov	r0, r3
 801cab8:	46bd      	mov	sp, r7
 801caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cabe:	4770      	bx	lr

0801cac0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801cac0:	b480      	push	{r7}
 801cac2:	b083      	sub	sp, #12
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	4603      	mov	r3, r0
 801cac8:	6039      	str	r1, [r7, #0]
 801caca:	71fb      	strb	r3, [r7, #7]
 801cacc:	4613      	mov	r3, r2
 801cace:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801cad0:	79fb      	ldrb	r3, [r7, #7]
 801cad2:	2b23      	cmp	r3, #35	@ 0x23
 801cad4:	f200 808c 	bhi.w	801cbf0 <CDC_Control_FS+0x130>
 801cad8:	a201      	add	r2, pc, #4	@ (adr r2, 801cae0 <CDC_Control_FS+0x20>)
 801cada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cade:	bf00      	nop
 801cae0:	0801cbf1 	.word	0x0801cbf1
 801cae4:	0801cbf1 	.word	0x0801cbf1
 801cae8:	0801cbf1 	.word	0x0801cbf1
 801caec:	0801cbf1 	.word	0x0801cbf1
 801caf0:	0801cbf1 	.word	0x0801cbf1
 801caf4:	0801cbf1 	.word	0x0801cbf1
 801caf8:	0801cbf1 	.word	0x0801cbf1
 801cafc:	0801cbf1 	.word	0x0801cbf1
 801cb00:	0801cbf1 	.word	0x0801cbf1
 801cb04:	0801cbf1 	.word	0x0801cbf1
 801cb08:	0801cbf1 	.word	0x0801cbf1
 801cb0c:	0801cbf1 	.word	0x0801cbf1
 801cb10:	0801cbf1 	.word	0x0801cbf1
 801cb14:	0801cbf1 	.word	0x0801cbf1
 801cb18:	0801cbf1 	.word	0x0801cbf1
 801cb1c:	0801cbf1 	.word	0x0801cbf1
 801cb20:	0801cbf1 	.word	0x0801cbf1
 801cb24:	0801cbf1 	.word	0x0801cbf1
 801cb28:	0801cbf1 	.word	0x0801cbf1
 801cb2c:	0801cbf1 	.word	0x0801cbf1
 801cb30:	0801cbf1 	.word	0x0801cbf1
 801cb34:	0801cbf1 	.word	0x0801cbf1
 801cb38:	0801cbf1 	.word	0x0801cbf1
 801cb3c:	0801cbf1 	.word	0x0801cbf1
 801cb40:	0801cbf1 	.word	0x0801cbf1
 801cb44:	0801cbf1 	.word	0x0801cbf1
 801cb48:	0801cbf1 	.word	0x0801cbf1
 801cb4c:	0801cbf1 	.word	0x0801cbf1
 801cb50:	0801cbf1 	.word	0x0801cbf1
 801cb54:	0801cbf1 	.word	0x0801cbf1
 801cb58:	0801cbf1 	.word	0x0801cbf1
 801cb5c:	0801cbf1 	.word	0x0801cbf1
 801cb60:	0801cb71 	.word	0x0801cb71
 801cb64:	0801cbab 	.word	0x0801cbab
 801cb68:	0801cbf1 	.word	0x0801cbf1
 801cb6c:	0801cbf1 	.word	0x0801cbf1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 801cb70:	683b      	ldr	r3, [r7, #0]
 801cb72:	781a      	ldrb	r2, [r3, #0]
 801cb74:	4b22      	ldr	r3, [pc, #136]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cb76:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 801cb78:	683b      	ldr	r3, [r7, #0]
 801cb7a:	785a      	ldrb	r2, [r3, #1]
 801cb7c:	4b20      	ldr	r3, [pc, #128]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cb7e:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 801cb80:	683b      	ldr	r3, [r7, #0]
 801cb82:	789a      	ldrb	r2, [r3, #2]
 801cb84:	4b1e      	ldr	r3, [pc, #120]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cb86:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 801cb88:	683b      	ldr	r3, [r7, #0]
 801cb8a:	78da      	ldrb	r2, [r3, #3]
 801cb8c:	4b1c      	ldr	r3, [pc, #112]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cb8e:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	791a      	ldrb	r2, [r3, #4]
 801cb94:	4b1a      	ldr	r3, [pc, #104]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cb96:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 801cb98:	683b      	ldr	r3, [r7, #0]
 801cb9a:	795a      	ldrb	r2, [r3, #5]
 801cb9c:	4b18      	ldr	r3, [pc, #96]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cb9e:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 801cba0:	683b      	ldr	r3, [r7, #0]
 801cba2:	799a      	ldrb	r2, [r3, #6]
 801cba4:	4b16      	ldr	r3, [pc, #88]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cba6:	719a      	strb	r2, [r3, #6]
      break;
 801cba8:	e023      	b.n	801cbf2 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801cbaa:	4b15      	ldr	r3, [pc, #84]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cbac:	781a      	ldrb	r2, [r3, #0]
 801cbae:	683b      	ldr	r3, [r7, #0]
 801cbb0:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 801cbb2:	683b      	ldr	r3, [r7, #0]
 801cbb4:	3301      	adds	r3, #1
 801cbb6:	4a12      	ldr	r2, [pc, #72]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cbb8:	7852      	ldrb	r2, [r2, #1]
 801cbba:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801cbbc:	683b      	ldr	r3, [r7, #0]
 801cbbe:	3302      	adds	r3, #2
 801cbc0:	4a0f      	ldr	r2, [pc, #60]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cbc2:	7892      	ldrb	r2, [r2, #2]
 801cbc4:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 801cbc6:	683b      	ldr	r3, [r7, #0]
 801cbc8:	3303      	adds	r3, #3
 801cbca:	4a0d      	ldr	r2, [pc, #52]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cbcc:	78d2      	ldrb	r2, [r2, #3]
 801cbce:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 801cbd0:	683b      	ldr	r3, [r7, #0]
 801cbd2:	3304      	adds	r3, #4
 801cbd4:	4a0a      	ldr	r2, [pc, #40]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cbd6:	7912      	ldrb	r2, [r2, #4]
 801cbd8:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801cbda:	683b      	ldr	r3, [r7, #0]
 801cbdc:	3305      	adds	r3, #5
 801cbde:	4a08      	ldr	r2, [pc, #32]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cbe0:	7952      	ldrb	r2, [r2, #5]
 801cbe2:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 801cbe4:	683b      	ldr	r3, [r7, #0]
 801cbe6:	3306      	adds	r3, #6
 801cbe8:	4a05      	ldr	r2, [pc, #20]	@ (801cc00 <CDC_Control_FS+0x140>)
 801cbea:	7992      	ldrb	r2, [r2, #6]
 801cbec:	701a      	strb	r2, [r3, #0]
      break;
 801cbee:	e000      	b.n	801cbf2 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801cbf0:	bf00      	nop
  }

  return (USBD_OK);
 801cbf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	370c      	adds	r7, #12
 801cbf8:	46bd      	mov	sp, r7
 801cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbfe:	4770      	bx	lr
 801cc00:	2000ba3c 	.word	0x2000ba3c

0801cc04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b082      	sub	sp, #8
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	6078      	str	r0, [r7, #4]
 801cc0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cc0e:	6879      	ldr	r1, [r7, #4]
 801cc10:	4807      	ldr	r0, [pc, #28]	@ (801cc30 <CDC_Receive_FS+0x2c>)
 801cc12:	f7fb fac9 	bl	80181a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cc16:	4806      	ldr	r0, [pc, #24]	@ (801cc30 <CDC_Receive_FS+0x2c>)
 801cc18:	f7fb fae4 	bl	80181e4 <USBD_CDC_ReceivePacket>
  usb_vcp_processing(Buf, Len);
 801cc1c:	6839      	ldr	r1, [r7, #0]
 801cc1e:	6878      	ldr	r0, [r7, #4]
 801cc20:	f7f0 fdc6 	bl	800d7b0 <usb_vcp_processing>
  return (USBD_OK);
 801cc24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cc26:	4618      	mov	r0, r3
 801cc28:	3708      	adds	r7, #8
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd80      	pop	{r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	2000b760 	.word	0x2000b760

0801cc34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801cc34:	b480      	push	{r7}
 801cc36:	b087      	sub	sp, #28
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	60f8      	str	r0, [r7, #12]
 801cc3c:	60b9      	str	r1, [r7, #8]
 801cc3e:	4613      	mov	r3, r2
 801cc40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801cc42:	2300      	movs	r3, #0
 801cc44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801cc46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	371c      	adds	r7, #28
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc54:	4770      	bx	lr
	...

0801cc58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cc58:	b480      	push	{r7}
 801cc5a:	b083      	sub	sp, #12
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	4603      	mov	r3, r0
 801cc60:	6039      	str	r1, [r7, #0]
 801cc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cc64:	683b      	ldr	r3, [r7, #0]
 801cc66:	2212      	movs	r2, #18
 801cc68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cc6a:	4b03      	ldr	r3, [pc, #12]	@ (801cc78 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cc6c:	4618      	mov	r0, r3
 801cc6e:	370c      	adds	r7, #12
 801cc70:	46bd      	mov	sp, r7
 801cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc76:	4770      	bx	lr
 801cc78:	20000110 	.word	0x20000110

0801cc7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cc7c:	b480      	push	{r7}
 801cc7e:	b083      	sub	sp, #12
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	4603      	mov	r3, r0
 801cc84:	6039      	str	r1, [r7, #0]
 801cc86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cc88:	683b      	ldr	r3, [r7, #0]
 801cc8a:	2204      	movs	r2, #4
 801cc8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cc8e:	4b03      	ldr	r3, [pc, #12]	@ (801cc9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cc90:	4618      	mov	r0, r3
 801cc92:	370c      	adds	r7, #12
 801cc94:	46bd      	mov	sp, r7
 801cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc9a:	4770      	bx	lr
 801cc9c:	20000124 	.word	0x20000124

0801cca0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cca0:	b580      	push	{r7, lr}
 801cca2:	b082      	sub	sp, #8
 801cca4:	af00      	add	r7, sp, #0
 801cca6:	4603      	mov	r3, r0
 801cca8:	6039      	str	r1, [r7, #0]
 801ccaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ccac:	79fb      	ldrb	r3, [r7, #7]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d105      	bne.n	801ccbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ccb2:	683a      	ldr	r2, [r7, #0]
 801ccb4:	4907      	ldr	r1, [pc, #28]	@ (801ccd4 <USBD_FS_ProductStrDescriptor+0x34>)
 801ccb6:	4808      	ldr	r0, [pc, #32]	@ (801ccd8 <USBD_FS_ProductStrDescriptor+0x38>)
 801ccb8:	f7fc fcda 	bl	8019670 <USBD_GetString>
 801ccbc:	e004      	b.n	801ccc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ccbe:	683a      	ldr	r2, [r7, #0]
 801ccc0:	4904      	ldr	r1, [pc, #16]	@ (801ccd4 <USBD_FS_ProductStrDescriptor+0x34>)
 801ccc2:	4805      	ldr	r0, [pc, #20]	@ (801ccd8 <USBD_FS_ProductStrDescriptor+0x38>)
 801ccc4:	f7fc fcd4 	bl	8019670 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ccc8:	4b02      	ldr	r3, [pc, #8]	@ (801ccd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801ccca:	4618      	mov	r0, r3
 801cccc:	3708      	adds	r7, #8
 801ccce:	46bd      	mov	sp, r7
 801ccd0:	bd80      	pop	{r7, pc}
 801ccd2:	bf00      	nop
 801ccd4:	2000ca44 	.word	0x2000ca44
 801ccd8:	080244f4 	.word	0x080244f4

0801ccdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b082      	sub	sp, #8
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	4603      	mov	r3, r0
 801cce4:	6039      	str	r1, [r7, #0]
 801cce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cce8:	683a      	ldr	r2, [r7, #0]
 801ccea:	4904      	ldr	r1, [pc, #16]	@ (801ccfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801ccec:	4804      	ldr	r0, [pc, #16]	@ (801cd00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ccee:	f7fc fcbf 	bl	8019670 <USBD_GetString>
  return USBD_StrDesc;
 801ccf2:	4b02      	ldr	r3, [pc, #8]	@ (801ccfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	3708      	adds	r7, #8
 801ccf8:	46bd      	mov	sp, r7
 801ccfa:	bd80      	pop	{r7, pc}
 801ccfc:	2000ca44 	.word	0x2000ca44
 801cd00:	0802450c 	.word	0x0802450c

0801cd04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd04:	b580      	push	{r7, lr}
 801cd06:	b082      	sub	sp, #8
 801cd08:	af00      	add	r7, sp, #0
 801cd0a:	4603      	mov	r3, r0
 801cd0c:	6039      	str	r1, [r7, #0]
 801cd0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cd10:	683b      	ldr	r3, [r7, #0]
 801cd12:	221a      	movs	r2, #26
 801cd14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cd16:	f000 f843 	bl	801cda0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cd1a:	4b02      	ldr	r3, [pc, #8]	@ (801cd24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	3708      	adds	r7, #8
 801cd20:	46bd      	mov	sp, r7
 801cd22:	bd80      	pop	{r7, pc}
 801cd24:	20000128 	.word	0x20000128

0801cd28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b082      	sub	sp, #8
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	4603      	mov	r3, r0
 801cd30:	6039      	str	r1, [r7, #0]
 801cd32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801cd34:	79fb      	ldrb	r3, [r7, #7]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d105      	bne.n	801cd46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cd3a:	683a      	ldr	r2, [r7, #0]
 801cd3c:	4907      	ldr	r1, [pc, #28]	@ (801cd5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801cd3e:	4808      	ldr	r0, [pc, #32]	@ (801cd60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801cd40:	f7fc fc96 	bl	8019670 <USBD_GetString>
 801cd44:	e004      	b.n	801cd50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cd46:	683a      	ldr	r2, [r7, #0]
 801cd48:	4904      	ldr	r1, [pc, #16]	@ (801cd5c <USBD_FS_ConfigStrDescriptor+0x34>)
 801cd4a:	4805      	ldr	r0, [pc, #20]	@ (801cd60 <USBD_FS_ConfigStrDescriptor+0x38>)
 801cd4c:	f7fc fc90 	bl	8019670 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cd50:	4b02      	ldr	r3, [pc, #8]	@ (801cd5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801cd52:	4618      	mov	r0, r3
 801cd54:	3708      	adds	r7, #8
 801cd56:	46bd      	mov	sp, r7
 801cd58:	bd80      	pop	{r7, pc}
 801cd5a:	bf00      	nop
 801cd5c:	2000ca44 	.word	0x2000ca44
 801cd60:	08024520 	.word	0x08024520

0801cd64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b082      	sub	sp, #8
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	4603      	mov	r3, r0
 801cd6c:	6039      	str	r1, [r7, #0]
 801cd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cd70:	79fb      	ldrb	r3, [r7, #7]
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d105      	bne.n	801cd82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cd76:	683a      	ldr	r2, [r7, #0]
 801cd78:	4907      	ldr	r1, [pc, #28]	@ (801cd98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cd7a:	4808      	ldr	r0, [pc, #32]	@ (801cd9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cd7c:	f7fc fc78 	bl	8019670 <USBD_GetString>
 801cd80:	e004      	b.n	801cd8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cd82:	683a      	ldr	r2, [r7, #0]
 801cd84:	4904      	ldr	r1, [pc, #16]	@ (801cd98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cd86:	4805      	ldr	r0, [pc, #20]	@ (801cd9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cd88:	f7fc fc72 	bl	8019670 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cd8c:	4b02      	ldr	r3, [pc, #8]	@ (801cd98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801cd8e:	4618      	mov	r0, r3
 801cd90:	3708      	adds	r7, #8
 801cd92:	46bd      	mov	sp, r7
 801cd94:	bd80      	pop	{r7, pc}
 801cd96:	bf00      	nop
 801cd98:	2000ca44 	.word	0x2000ca44
 801cd9c:	0802452c 	.word	0x0802452c

0801cda0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b084      	sub	sp, #16
 801cda4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cda6:	4b0f      	ldr	r3, [pc, #60]	@ (801cde4 <Get_SerialNum+0x44>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cdac:	4b0e      	ldr	r3, [pc, #56]	@ (801cde8 <Get_SerialNum+0x48>)
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cdb2:	4b0e      	ldr	r3, [pc, #56]	@ (801cdec <Get_SerialNum+0x4c>)
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cdb8:	68fa      	ldr	r2, [r7, #12]
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	4413      	add	r3, r2
 801cdbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cdc0:	68fb      	ldr	r3, [r7, #12]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d009      	beq.n	801cdda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cdc6:	2208      	movs	r2, #8
 801cdc8:	4909      	ldr	r1, [pc, #36]	@ (801cdf0 <Get_SerialNum+0x50>)
 801cdca:	68f8      	ldr	r0, [r7, #12]
 801cdcc:	f000 f814 	bl	801cdf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cdd0:	2204      	movs	r2, #4
 801cdd2:	4908      	ldr	r1, [pc, #32]	@ (801cdf4 <Get_SerialNum+0x54>)
 801cdd4:	68b8      	ldr	r0, [r7, #8]
 801cdd6:	f000 f80f 	bl	801cdf8 <IntToUnicode>
  }
}
 801cdda:	bf00      	nop
 801cddc:	3710      	adds	r7, #16
 801cdde:	46bd      	mov	sp, r7
 801cde0:	bd80      	pop	{r7, pc}
 801cde2:	bf00      	nop
 801cde4:	1fff7a10 	.word	0x1fff7a10
 801cde8:	1fff7a14 	.word	0x1fff7a14
 801cdec:	1fff7a18 	.word	0x1fff7a18
 801cdf0:	2000012a 	.word	0x2000012a
 801cdf4:	2000013a 	.word	0x2000013a

0801cdf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cdf8:	b480      	push	{r7}
 801cdfa:	b087      	sub	sp, #28
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	60f8      	str	r0, [r7, #12]
 801ce00:	60b9      	str	r1, [r7, #8]
 801ce02:	4613      	mov	r3, r2
 801ce04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ce06:	2300      	movs	r3, #0
 801ce08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	75fb      	strb	r3, [r7, #23]
 801ce0e:	e027      	b.n	801ce60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	0f1b      	lsrs	r3, r3, #28
 801ce14:	2b09      	cmp	r3, #9
 801ce16:	d80b      	bhi.n	801ce30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	0f1b      	lsrs	r3, r3, #28
 801ce1c:	b2da      	uxtb	r2, r3
 801ce1e:	7dfb      	ldrb	r3, [r7, #23]
 801ce20:	005b      	lsls	r3, r3, #1
 801ce22:	4619      	mov	r1, r3
 801ce24:	68bb      	ldr	r3, [r7, #8]
 801ce26:	440b      	add	r3, r1
 801ce28:	3230      	adds	r2, #48	@ 0x30
 801ce2a:	b2d2      	uxtb	r2, r2
 801ce2c:	701a      	strb	r2, [r3, #0]
 801ce2e:	e00a      	b.n	801ce46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ce30:	68fb      	ldr	r3, [r7, #12]
 801ce32:	0f1b      	lsrs	r3, r3, #28
 801ce34:	b2da      	uxtb	r2, r3
 801ce36:	7dfb      	ldrb	r3, [r7, #23]
 801ce38:	005b      	lsls	r3, r3, #1
 801ce3a:	4619      	mov	r1, r3
 801ce3c:	68bb      	ldr	r3, [r7, #8]
 801ce3e:	440b      	add	r3, r1
 801ce40:	3237      	adds	r2, #55	@ 0x37
 801ce42:	b2d2      	uxtb	r2, r2
 801ce44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	011b      	lsls	r3, r3, #4
 801ce4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801ce4c:	7dfb      	ldrb	r3, [r7, #23]
 801ce4e:	005b      	lsls	r3, r3, #1
 801ce50:	3301      	adds	r3, #1
 801ce52:	68ba      	ldr	r2, [r7, #8]
 801ce54:	4413      	add	r3, r2
 801ce56:	2200      	movs	r2, #0
 801ce58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801ce5a:	7dfb      	ldrb	r3, [r7, #23]
 801ce5c:	3301      	adds	r3, #1
 801ce5e:	75fb      	strb	r3, [r7, #23]
 801ce60:	7dfa      	ldrb	r2, [r7, #23]
 801ce62:	79fb      	ldrb	r3, [r7, #7]
 801ce64:	429a      	cmp	r2, r3
 801ce66:	d3d3      	bcc.n	801ce10 <IntToUnicode+0x18>
  }
}
 801ce68:	bf00      	nop
 801ce6a:	bf00      	nop
 801ce6c:	371c      	adds	r7, #28
 801ce6e:	46bd      	mov	sp, r7
 801ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce74:	4770      	bx	lr
	...

0801ce78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b08a      	sub	sp, #40	@ 0x28
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ce80:	f107 0314 	add.w	r3, r7, #20
 801ce84:	2200      	movs	r2, #0
 801ce86:	601a      	str	r2, [r3, #0]
 801ce88:	605a      	str	r2, [r3, #4]
 801ce8a:	609a      	str	r2, [r3, #8]
 801ce8c:	60da      	str	r2, [r3, #12]
 801ce8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ce98:	d13a      	bne.n	801cf10 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	613b      	str	r3, [r7, #16]
 801ce9e:	4b1e      	ldr	r3, [pc, #120]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801cea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cea2:	4a1d      	ldr	r2, [pc, #116]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801cea4:	f043 0301 	orr.w	r3, r3, #1
 801cea8:	6313      	str	r3, [r2, #48]	@ 0x30
 801ceaa:	4b1b      	ldr	r3, [pc, #108]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801ceac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ceae:	f003 0301 	and.w	r3, r3, #1
 801ceb2:	613b      	str	r3, [r7, #16]
 801ceb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801ceb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801ceba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cebc:	2302      	movs	r3, #2
 801cebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cec0:	2300      	movs	r3, #0
 801cec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cec4:	2303      	movs	r3, #3
 801cec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801cec8:	230a      	movs	r3, #10
 801ceca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cecc:	f107 0314 	add.w	r3, r7, #20
 801ced0:	4619      	mov	r1, r3
 801ced2:	4812      	ldr	r0, [pc, #72]	@ (801cf1c <HAL_PCD_MspInit+0xa4>)
 801ced4:	f7f2 fb44 	bl	800f560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ced8:	4b0f      	ldr	r3, [pc, #60]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801ceda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cedc:	4a0e      	ldr	r2, [pc, #56]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801cede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cee2:	6353      	str	r3, [r2, #52]	@ 0x34
 801cee4:	2300      	movs	r3, #0
 801cee6:	60fb      	str	r3, [r7, #12]
 801cee8:	4b0b      	ldr	r3, [pc, #44]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801ceea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ceec:	4a0a      	ldr	r2, [pc, #40]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801ceee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801cef2:	6453      	str	r3, [r2, #68]	@ 0x44
 801cef4:	4b08      	ldr	r3, [pc, #32]	@ (801cf18 <HAL_PCD_MspInit+0xa0>)
 801cef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801cefc:	60fb      	str	r3, [r7, #12]
 801cefe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801cf00:	2200      	movs	r2, #0
 801cf02:	2105      	movs	r1, #5
 801cf04:	2043      	movs	r0, #67	@ 0x43
 801cf06:	f7f1 fee5 	bl	800ecd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801cf0a:	2043      	movs	r0, #67	@ 0x43
 801cf0c:	f7f1 fefe 	bl	800ed0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801cf10:	bf00      	nop
 801cf12:	3728      	adds	r7, #40	@ 0x28
 801cf14:	46bd      	mov	sp, r7
 801cf16:	bd80      	pop	{r7, pc}
 801cf18:	40023800 	.word	0x40023800
 801cf1c:	40020000 	.word	0x40020000

0801cf20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf20:	b580      	push	{r7, lr}
 801cf22:	b082      	sub	sp, #8
 801cf24:	af00      	add	r7, sp, #0
 801cf26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 801cf34:	4619      	mov	r1, r3
 801cf36:	4610      	mov	r0, r2
 801cf38:	f7fb fa3d 	bl	80183b6 <USBD_LL_SetupStage>
}
 801cf3c:	bf00      	nop
 801cf3e:	3708      	adds	r7, #8
 801cf40:	46bd      	mov	sp, r7
 801cf42:	bd80      	pop	{r7, pc}

0801cf44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	b082      	sub	sp, #8
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	6078      	str	r0, [r7, #4]
 801cf4c:	460b      	mov	r3, r1
 801cf4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801cf56:	78fa      	ldrb	r2, [r7, #3]
 801cf58:	6879      	ldr	r1, [r7, #4]
 801cf5a:	4613      	mov	r3, r2
 801cf5c:	00db      	lsls	r3, r3, #3
 801cf5e:	4413      	add	r3, r2
 801cf60:	009b      	lsls	r3, r3, #2
 801cf62:	440b      	add	r3, r1
 801cf64:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 801cf68:	681a      	ldr	r2, [r3, #0]
 801cf6a:	78fb      	ldrb	r3, [r7, #3]
 801cf6c:	4619      	mov	r1, r3
 801cf6e:	f7fb fa77 	bl	8018460 <USBD_LL_DataOutStage>
}
 801cf72:	bf00      	nop
 801cf74:	3708      	adds	r7, #8
 801cf76:	46bd      	mov	sp, r7
 801cf78:	bd80      	pop	{r7, pc}

0801cf7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf7a:	b580      	push	{r7, lr}
 801cf7c:	b082      	sub	sp, #8
 801cf7e:	af00      	add	r7, sp, #0
 801cf80:	6078      	str	r0, [r7, #4]
 801cf82:	460b      	mov	r3, r1
 801cf84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801cf8c:	78fa      	ldrb	r2, [r7, #3]
 801cf8e:	6879      	ldr	r1, [r7, #4]
 801cf90:	4613      	mov	r3, r2
 801cf92:	00db      	lsls	r3, r3, #3
 801cf94:	4413      	add	r3, r2
 801cf96:	009b      	lsls	r3, r3, #2
 801cf98:	440b      	add	r3, r1
 801cf9a:	334c      	adds	r3, #76	@ 0x4c
 801cf9c:	681a      	ldr	r2, [r3, #0]
 801cf9e:	78fb      	ldrb	r3, [r7, #3]
 801cfa0:	4619      	mov	r1, r3
 801cfa2:	f7fb fb10 	bl	80185c6 <USBD_LL_DataInStage>
}
 801cfa6:	bf00      	nop
 801cfa8:	3708      	adds	r7, #8
 801cfaa:	46bd      	mov	sp, r7
 801cfac:	bd80      	pop	{r7, pc}

0801cfae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cfae:	b580      	push	{r7, lr}
 801cfb0:	b082      	sub	sp, #8
 801cfb2:	af00      	add	r7, sp, #0
 801cfb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	f7fb fc44 	bl	801884a <USBD_LL_SOF>
}
 801cfc2:	bf00      	nop
 801cfc4:	3708      	adds	r7, #8
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	bd80      	pop	{r7, pc}

0801cfca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cfca:	b580      	push	{r7, lr}
 801cfcc:	b084      	sub	sp, #16
 801cfce:	af00      	add	r7, sp, #0
 801cfd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cfd2:	2301      	movs	r3, #1
 801cfd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	68db      	ldr	r3, [r3, #12]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d102      	bne.n	801cfe4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801cfde:	2300      	movs	r3, #0
 801cfe0:	73fb      	strb	r3, [r7, #15]
 801cfe2:	e008      	b.n	801cff6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	68db      	ldr	r3, [r3, #12]
 801cfe8:	2b02      	cmp	r3, #2
 801cfea:	d102      	bne.n	801cff2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801cfec:	2301      	movs	r3, #1
 801cfee:	73fb      	strb	r3, [r7, #15]
 801cff0:	e001      	b.n	801cff6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801cff2:	f7e6 fc01 	bl	80037f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801cffc:	7bfa      	ldrb	r2, [r7, #15]
 801cffe:	4611      	mov	r1, r2
 801d000:	4618      	mov	r0, r3
 801d002:	f7fb fbe4 	bl	80187ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801d00c:	4618      	mov	r0, r3
 801d00e:	f7fb fb8c 	bl	801872a <USBD_LL_Reset>
}
 801d012:	bf00      	nop
 801d014:	3710      	adds	r7, #16
 801d016:	46bd      	mov	sp, r7
 801d018:	bd80      	pop	{r7, pc}
	...

0801d01c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b082      	sub	sp, #8
 801d020:	af00      	add	r7, sp, #0
 801d022:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801d02a:	4618      	mov	r0, r3
 801d02c:	f7fb fbdf 	bl	80187ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	687a      	ldr	r2, [r7, #4]
 801d03c:	6812      	ldr	r2, [r2, #0]
 801d03e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d042:	f043 0301 	orr.w	r3, r3, #1
 801d046:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
//  gv_usb_connected = 0;
  if (hpcd->Init.low_power_enable)
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	6a1b      	ldr	r3, [r3, #32]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	d005      	beq.n	801d05c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d050:	4b04      	ldr	r3, [pc, #16]	@ (801d064 <HAL_PCD_SuspendCallback+0x48>)
 801d052:	691b      	ldr	r3, [r3, #16]
 801d054:	4a03      	ldr	r2, [pc, #12]	@ (801d064 <HAL_PCD_SuspendCallback+0x48>)
 801d056:	f043 0306 	orr.w	r3, r3, #6
 801d05a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d05c:	bf00      	nop
 801d05e:	3708      	adds	r7, #8
 801d060:	46bd      	mov	sp, r7
 801d062:	bd80      	pop	{r7, pc}
 801d064:	e000ed00 	.word	0xe000ed00

0801d068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d068:	b580      	push	{r7, lr}
 801d06a:	b082      	sub	sp, #8
 801d06c:	af00      	add	r7, sp, #0
 801d06e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
//	gv_usb_connected = 1;
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801d076:	4618      	mov	r0, r3
 801d078:	f7fb fbcf 	bl	801881a <USBD_LL_Resume>
}
 801d07c:	bf00      	nop
 801d07e:	3708      	adds	r7, #8
 801d080:	46bd      	mov	sp, r7
 801d082:	bd80      	pop	{r7, pc}

0801d084 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b082      	sub	sp, #8
 801d088:	af00      	add	r7, sp, #0
 801d08a:	6078      	str	r0, [r7, #4]
 801d08c:	460b      	mov	r3, r1
 801d08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801d096:	78fa      	ldrb	r2, [r7, #3]
 801d098:	4611      	mov	r1, r2
 801d09a:	4618      	mov	r0, r3
 801d09c:	f7fb fc27 	bl	80188ee <USBD_LL_IsoOUTIncomplete>
}
 801d0a0:	bf00      	nop
 801d0a2:	3708      	adds	r7, #8
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bd80      	pop	{r7, pc}

0801d0a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0a8:	b580      	push	{r7, lr}
 801d0aa:	b082      	sub	sp, #8
 801d0ac:	af00      	add	r7, sp, #0
 801d0ae:	6078      	str	r0, [r7, #4]
 801d0b0:	460b      	mov	r3, r1
 801d0b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801d0ba:	78fa      	ldrb	r2, [r7, #3]
 801d0bc:	4611      	mov	r1, r2
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7fb fbe3 	bl	801888a <USBD_LL_IsoINIncomplete>
}
 801d0c4:	bf00      	nop
 801d0c6:	3708      	adds	r7, #8
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	bd80      	pop	{r7, pc}

0801d0cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b082      	sub	sp, #8
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7fb fc39 	bl	8018952 <USBD_LL_DevConnected>
}
 801d0e0:	bf00      	nop
 801d0e2:	3708      	adds	r7, #8
 801d0e4:	46bd      	mov	sp, r7
 801d0e6:	bd80      	pop	{r7, pc}

0801d0e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b082      	sub	sp, #8
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f7fb fc36 	bl	8018968 <USBD_LL_DevDisconnected>
}
 801d0fc:	bf00      	nop
 801d0fe:	3708      	adds	r7, #8
 801d100:	46bd      	mov	sp, r7
 801d102:	bd80      	pop	{r7, pc}

0801d104 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d104:	b580      	push	{r7, lr}
 801d106:	b082      	sub	sp, #8
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	781b      	ldrb	r3, [r3, #0]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d13c      	bne.n	801d18e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d114:	4a20      	ldr	r2, [pc, #128]	@ (801d198 <USBD_LL_Init+0x94>)
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	4a1e      	ldr	r2, [pc, #120]	@ (801d198 <USBD_LL_Init+0x94>)
 801d120:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d124:	4b1c      	ldr	r3, [pc, #112]	@ (801d198 <USBD_LL_Init+0x94>)
 801d126:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d12a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d12c:	4b1a      	ldr	r3, [pc, #104]	@ (801d198 <USBD_LL_Init+0x94>)
 801d12e:	2204      	movs	r2, #4
 801d130:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d132:	4b19      	ldr	r3, [pc, #100]	@ (801d198 <USBD_LL_Init+0x94>)
 801d134:	2202      	movs	r2, #2
 801d136:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d138:	4b17      	ldr	r3, [pc, #92]	@ (801d198 <USBD_LL_Init+0x94>)
 801d13a:	2200      	movs	r2, #0
 801d13c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d13e:	4b16      	ldr	r3, [pc, #88]	@ (801d198 <USBD_LL_Init+0x94>)
 801d140:	2202      	movs	r2, #2
 801d142:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d144:	4b14      	ldr	r3, [pc, #80]	@ (801d198 <USBD_LL_Init+0x94>)
 801d146:	2200      	movs	r2, #0
 801d148:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d14a:	4b13      	ldr	r3, [pc, #76]	@ (801d198 <USBD_LL_Init+0x94>)
 801d14c:	2200      	movs	r2, #0
 801d14e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d150:	4b11      	ldr	r3, [pc, #68]	@ (801d198 <USBD_LL_Init+0x94>)
 801d152:	2200      	movs	r2, #0
 801d154:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d156:	4b10      	ldr	r3, [pc, #64]	@ (801d198 <USBD_LL_Init+0x94>)
 801d158:	2200      	movs	r2, #0
 801d15a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d15c:	4b0e      	ldr	r3, [pc, #56]	@ (801d198 <USBD_LL_Init+0x94>)
 801d15e:	2200      	movs	r2, #0
 801d160:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d162:	480d      	ldr	r0, [pc, #52]	@ (801d198 <USBD_LL_Init+0x94>)
 801d164:	f7f4 f955 	bl	8011412 <HAL_PCD_Init>
 801d168:	4603      	mov	r3, r0
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d001      	beq.n	801d172 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d16e:	f7e6 fb43 	bl	80037f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d172:	2180      	movs	r1, #128	@ 0x80
 801d174:	4808      	ldr	r0, [pc, #32]	@ (801d198 <USBD_LL_Init+0x94>)
 801d176:	f7f5 fbac 	bl	80128d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d17a:	2240      	movs	r2, #64	@ 0x40
 801d17c:	2100      	movs	r1, #0
 801d17e:	4806      	ldr	r0, [pc, #24]	@ (801d198 <USBD_LL_Init+0x94>)
 801d180:	f7f5 fb60 	bl	8012844 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d184:	2280      	movs	r2, #128	@ 0x80
 801d186:	2101      	movs	r1, #1
 801d188:	4803      	ldr	r0, [pc, #12]	@ (801d198 <USBD_LL_Init+0x94>)
 801d18a:	f7f5 fb5b 	bl	8012844 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d18e:	2300      	movs	r3, #0
}
 801d190:	4618      	mov	r0, r3
 801d192:	3708      	adds	r7, #8
 801d194:	46bd      	mov	sp, r7
 801d196:	bd80      	pop	{r7, pc}
 801d198:	2000cc44 	.word	0x2000cc44

0801d19c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b084      	sub	sp, #16
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1a8:	2300      	movs	r3, #0
 801d1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	f7f4 fa4a 	bl	801164c <HAL_PCD_Start>
 801d1b8:	4603      	mov	r3, r0
 801d1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d1bc:	7bfb      	ldrb	r3, [r7, #15]
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f000 f942 	bl	801d448 <USBD_Get_USB_Status>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	3710      	adds	r7, #16
 801d1ce:	46bd      	mov	sp, r7
 801d1d0:	bd80      	pop	{r7, pc}

0801d1d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d1d2:	b580      	push	{r7, lr}
 801d1d4:	b084      	sub	sp, #16
 801d1d6:	af00      	add	r7, sp, #0
 801d1d8:	6078      	str	r0, [r7, #4]
 801d1da:	4608      	mov	r0, r1
 801d1dc:	4611      	mov	r1, r2
 801d1de:	461a      	mov	r2, r3
 801d1e0:	4603      	mov	r3, r0
 801d1e2:	70fb      	strb	r3, [r7, #3]
 801d1e4:	460b      	mov	r3, r1
 801d1e6:	70bb      	strb	r3, [r7, #2]
 801d1e8:	4613      	mov	r3, r2
 801d1ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1ec:	2300      	movs	r3, #0
 801d1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d1fa:	78bb      	ldrb	r3, [r7, #2]
 801d1fc:	883a      	ldrh	r2, [r7, #0]
 801d1fe:	78f9      	ldrb	r1, [r7, #3]
 801d200:	f7f4 ff1b 	bl	801203a <HAL_PCD_EP_Open>
 801d204:	4603      	mov	r3, r0
 801d206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d208:	7bfb      	ldrb	r3, [r7, #15]
 801d20a:	4618      	mov	r0, r3
 801d20c:	f000 f91c 	bl	801d448 <USBD_Get_USB_Status>
 801d210:	4603      	mov	r3, r0
 801d212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d214:	7bbb      	ldrb	r3, [r7, #14]
}
 801d216:	4618      	mov	r0, r3
 801d218:	3710      	adds	r7, #16
 801d21a:	46bd      	mov	sp, r7
 801d21c:	bd80      	pop	{r7, pc}

0801d21e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d21e:	b580      	push	{r7, lr}
 801d220:	b084      	sub	sp, #16
 801d222:	af00      	add	r7, sp, #0
 801d224:	6078      	str	r0, [r7, #4]
 801d226:	460b      	mov	r3, r1
 801d228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d22a:	2300      	movs	r3, #0
 801d22c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d22e:	2300      	movs	r3, #0
 801d230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d238:	78fa      	ldrb	r2, [r7, #3]
 801d23a:	4611      	mov	r1, r2
 801d23c:	4618      	mov	r0, r3
 801d23e:	f7f4 ff64 	bl	801210a <HAL_PCD_EP_Close>
 801d242:	4603      	mov	r3, r0
 801d244:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d246:	7bfb      	ldrb	r3, [r7, #15]
 801d248:	4618      	mov	r0, r3
 801d24a:	f000 f8fd 	bl	801d448 <USBD_Get_USB_Status>
 801d24e:	4603      	mov	r3, r0
 801d250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d252:	7bbb      	ldrb	r3, [r7, #14]
}
 801d254:	4618      	mov	r0, r3
 801d256:	3710      	adds	r7, #16
 801d258:	46bd      	mov	sp, r7
 801d25a:	bd80      	pop	{r7, pc}

0801d25c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b084      	sub	sp, #16
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
 801d264:	460b      	mov	r3, r1
 801d266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d268:	2300      	movs	r3, #0
 801d26a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d26c:	2300      	movs	r3, #0
 801d26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d276:	78fa      	ldrb	r2, [r7, #3]
 801d278:	4611      	mov	r1, r2
 801d27a:	4618      	mov	r0, r3
 801d27c:	f7f5 f83c 	bl	80122f8 <HAL_PCD_EP_SetStall>
 801d280:	4603      	mov	r3, r0
 801d282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d284:	7bfb      	ldrb	r3, [r7, #15]
 801d286:	4618      	mov	r0, r3
 801d288:	f000 f8de 	bl	801d448 <USBD_Get_USB_Status>
 801d28c:	4603      	mov	r3, r0
 801d28e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d290:	7bbb      	ldrb	r3, [r7, #14]
}
 801d292:	4618      	mov	r0, r3
 801d294:	3710      	adds	r7, #16
 801d296:	46bd      	mov	sp, r7
 801d298:	bd80      	pop	{r7, pc}

0801d29a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d29a:	b580      	push	{r7, lr}
 801d29c:	b084      	sub	sp, #16
 801d29e:	af00      	add	r7, sp, #0
 801d2a0:	6078      	str	r0, [r7, #4]
 801d2a2:	460b      	mov	r3, r1
 801d2a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d2a6:	2300      	movs	r3, #0
 801d2a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d2b4:	78fa      	ldrb	r2, [r7, #3]
 801d2b6:	4611      	mov	r1, r2
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	f7f5 f881 	bl	80123c0 <HAL_PCD_EP_ClrStall>
 801d2be:	4603      	mov	r3, r0
 801d2c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d2c2:	7bfb      	ldrb	r3, [r7, #15]
 801d2c4:	4618      	mov	r0, r3
 801d2c6:	f000 f8bf 	bl	801d448 <USBD_Get_USB_Status>
 801d2ca:	4603      	mov	r3, r0
 801d2cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d2ce:	7bbb      	ldrb	r3, [r7, #14]
}
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	3710      	adds	r7, #16
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	bd80      	pop	{r7, pc}

0801d2d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d2d8:	b480      	push	{r7}
 801d2da:	b085      	sub	sp, #20
 801d2dc:	af00      	add	r7, sp, #0
 801d2de:	6078      	str	r0, [r7, #4]
 801d2e0:	460b      	mov	r3, r1
 801d2e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d2ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d2ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	da0b      	bge.n	801d30c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d2f4:	78fb      	ldrb	r3, [r7, #3]
 801d2f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d2fa:	68f9      	ldr	r1, [r7, #12]
 801d2fc:	4613      	mov	r3, r2
 801d2fe:	00db      	lsls	r3, r3, #3
 801d300:	4413      	add	r3, r2
 801d302:	009b      	lsls	r3, r3, #2
 801d304:	440b      	add	r3, r1
 801d306:	333e      	adds	r3, #62	@ 0x3e
 801d308:	781b      	ldrb	r3, [r3, #0]
 801d30a:	e00b      	b.n	801d324 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d30c:	78fb      	ldrb	r3, [r7, #3]
 801d30e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d312:	68f9      	ldr	r1, [r7, #12]
 801d314:	4613      	mov	r3, r2
 801d316:	00db      	lsls	r3, r3, #3
 801d318:	4413      	add	r3, r2
 801d31a:	009b      	lsls	r3, r3, #2
 801d31c:	440b      	add	r3, r1
 801d31e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 801d322:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d324:	4618      	mov	r0, r3
 801d326:	3714      	adds	r7, #20
 801d328:	46bd      	mov	sp, r7
 801d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d32e:	4770      	bx	lr

0801d330 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d330:	b580      	push	{r7, lr}
 801d332:	b084      	sub	sp, #16
 801d334:	af00      	add	r7, sp, #0
 801d336:	6078      	str	r0, [r7, #4]
 801d338:	460b      	mov	r3, r1
 801d33a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d33c:	2300      	movs	r3, #0
 801d33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d340:	2300      	movs	r3, #0
 801d342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d34a:	78fa      	ldrb	r2, [r7, #3]
 801d34c:	4611      	mov	r1, r2
 801d34e:	4618      	mov	r0, r3
 801d350:	f7f4 fe4e 	bl	8011ff0 <HAL_PCD_SetAddress>
 801d354:	4603      	mov	r3, r0
 801d356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d358:	7bfb      	ldrb	r3, [r7, #15]
 801d35a:	4618      	mov	r0, r3
 801d35c:	f000 f874 	bl	801d448 <USBD_Get_USB_Status>
 801d360:	4603      	mov	r3, r0
 801d362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d364:	7bbb      	ldrb	r3, [r7, #14]
}
 801d366:	4618      	mov	r0, r3
 801d368:	3710      	adds	r7, #16
 801d36a:	46bd      	mov	sp, r7
 801d36c:	bd80      	pop	{r7, pc}

0801d36e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d36e:	b580      	push	{r7, lr}
 801d370:	b086      	sub	sp, #24
 801d372:	af00      	add	r7, sp, #0
 801d374:	60f8      	str	r0, [r7, #12]
 801d376:	607a      	str	r2, [r7, #4]
 801d378:	603b      	str	r3, [r7, #0]
 801d37a:	460b      	mov	r3, r1
 801d37c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d37e:	2300      	movs	r3, #0
 801d380:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d382:	2300      	movs	r3, #0
 801d384:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d38c:	7af9      	ldrb	r1, [r7, #11]
 801d38e:	683b      	ldr	r3, [r7, #0]
 801d390:	687a      	ldr	r2, [r7, #4]
 801d392:	f7f4 ff67 	bl	8012264 <HAL_PCD_EP_Transmit>
 801d396:	4603      	mov	r3, r0
 801d398:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d39a:	7dfb      	ldrb	r3, [r7, #23]
 801d39c:	4618      	mov	r0, r3
 801d39e:	f000 f853 	bl	801d448 <USBD_Get_USB_Status>
 801d3a2:	4603      	mov	r3, r0
 801d3a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d3a6:	7dbb      	ldrb	r3, [r7, #22]
}
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	3718      	adds	r7, #24
 801d3ac:	46bd      	mov	sp, r7
 801d3ae:	bd80      	pop	{r7, pc}

0801d3b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d3b0:	b580      	push	{r7, lr}
 801d3b2:	b086      	sub	sp, #24
 801d3b4:	af00      	add	r7, sp, #0
 801d3b6:	60f8      	str	r0, [r7, #12]
 801d3b8:	607a      	str	r2, [r7, #4]
 801d3ba:	603b      	str	r3, [r7, #0]
 801d3bc:	460b      	mov	r3, r1
 801d3be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3c4:	2300      	movs	r3, #0
 801d3c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d3ce:	7af9      	ldrb	r1, [r7, #11]
 801d3d0:	683b      	ldr	r3, [r7, #0]
 801d3d2:	687a      	ldr	r2, [r7, #4]
 801d3d4:	f7f4 fee3 	bl	801219e <HAL_PCD_EP_Receive>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3dc:	7dfb      	ldrb	r3, [r7, #23]
 801d3de:	4618      	mov	r0, r3
 801d3e0:	f000 f832 	bl	801d448 <USBD_Get_USB_Status>
 801d3e4:	4603      	mov	r3, r0
 801d3e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d3e8:	7dbb      	ldrb	r3, [r7, #22]
}
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	3718      	adds	r7, #24
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	bd80      	pop	{r7, pc}

0801d3f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d3f2:	b580      	push	{r7, lr}
 801d3f4:	b082      	sub	sp, #8
 801d3f6:	af00      	add	r7, sp, #0
 801d3f8:	6078      	str	r0, [r7, #4]
 801d3fa:	460b      	mov	r3, r1
 801d3fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d404:	78fa      	ldrb	r2, [r7, #3]
 801d406:	4611      	mov	r1, r2
 801d408:	4618      	mov	r0, r3
 801d40a:	f7f4 ff13 	bl	8012234 <HAL_PCD_EP_GetRxCount>
 801d40e:	4603      	mov	r3, r0
}
 801d410:	4618      	mov	r0, r3
 801d412:	3708      	adds	r7, #8
 801d414:	46bd      	mov	sp, r7
 801d416:	bd80      	pop	{r7, pc}

0801d418 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d418:	b480      	push	{r7}
 801d41a:	b083      	sub	sp, #12
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d420:	4b03      	ldr	r3, [pc, #12]	@ (801d430 <USBD_static_malloc+0x18>)
}
 801d422:	4618      	mov	r0, r3
 801d424:	370c      	adds	r7, #12
 801d426:	46bd      	mov	sp, r7
 801d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d42c:	4770      	bx	lr
 801d42e:	bf00      	nop
 801d430:	2000d150 	.word	0x2000d150

0801d434 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d434:	b480      	push	{r7}
 801d436:	b083      	sub	sp, #12
 801d438:	af00      	add	r7, sp, #0
 801d43a:	6078      	str	r0, [r7, #4]

}
 801d43c:	bf00      	nop
 801d43e:	370c      	adds	r7, #12
 801d440:	46bd      	mov	sp, r7
 801d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d446:	4770      	bx	lr

0801d448 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d448:	b480      	push	{r7}
 801d44a:	b085      	sub	sp, #20
 801d44c:	af00      	add	r7, sp, #0
 801d44e:	4603      	mov	r3, r0
 801d450:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d452:	2300      	movs	r3, #0
 801d454:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d456:	79fb      	ldrb	r3, [r7, #7]
 801d458:	2b03      	cmp	r3, #3
 801d45a:	d817      	bhi.n	801d48c <USBD_Get_USB_Status+0x44>
 801d45c:	a201      	add	r2, pc, #4	@ (adr r2, 801d464 <USBD_Get_USB_Status+0x1c>)
 801d45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d462:	bf00      	nop
 801d464:	0801d475 	.word	0x0801d475
 801d468:	0801d47b 	.word	0x0801d47b
 801d46c:	0801d481 	.word	0x0801d481
 801d470:	0801d487 	.word	0x0801d487
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d474:	2300      	movs	r3, #0
 801d476:	73fb      	strb	r3, [r7, #15]
    break;
 801d478:	e00b      	b.n	801d492 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d47a:	2303      	movs	r3, #3
 801d47c:	73fb      	strb	r3, [r7, #15]
    break;
 801d47e:	e008      	b.n	801d492 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d480:	2301      	movs	r3, #1
 801d482:	73fb      	strb	r3, [r7, #15]
    break;
 801d484:	e005      	b.n	801d492 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d486:	2303      	movs	r3, #3
 801d488:	73fb      	strb	r3, [r7, #15]
    break;
 801d48a:	e002      	b.n	801d492 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d48c:	2303      	movs	r3, #3
 801d48e:	73fb      	strb	r3, [r7, #15]
    break;
 801d490:	bf00      	nop
  }
  return usb_status;
 801d492:	7bfb      	ldrb	r3, [r7, #15]
}
 801d494:	4618      	mov	r0, r3
 801d496:	3714      	adds	r7, #20
 801d498:	46bd      	mov	sp, r7
 801d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d49e:	4770      	bx	lr

0801d4a0 <std>:
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	b510      	push	{r4, lr}
 801d4a4:	4604      	mov	r4, r0
 801d4a6:	e9c0 3300 	strd	r3, r3, [r0]
 801d4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d4ae:	6083      	str	r3, [r0, #8]
 801d4b0:	8181      	strh	r1, [r0, #12]
 801d4b2:	6643      	str	r3, [r0, #100]	@ 0x64
 801d4b4:	81c2      	strh	r2, [r0, #14]
 801d4b6:	6183      	str	r3, [r0, #24]
 801d4b8:	4619      	mov	r1, r3
 801d4ba:	2208      	movs	r2, #8
 801d4bc:	305c      	adds	r0, #92	@ 0x5c
 801d4be:	f000 f928 	bl	801d712 <memset>
 801d4c2:	4b0d      	ldr	r3, [pc, #52]	@ (801d4f8 <std+0x58>)
 801d4c4:	6223      	str	r3, [r4, #32]
 801d4c6:	4b0d      	ldr	r3, [pc, #52]	@ (801d4fc <std+0x5c>)
 801d4c8:	6263      	str	r3, [r4, #36]	@ 0x24
 801d4ca:	4b0d      	ldr	r3, [pc, #52]	@ (801d500 <std+0x60>)
 801d4cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (801d504 <std+0x64>)
 801d4d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d4d2:	4b0d      	ldr	r3, [pc, #52]	@ (801d508 <std+0x68>)
 801d4d4:	61e4      	str	r4, [r4, #28]
 801d4d6:	429c      	cmp	r4, r3
 801d4d8:	d006      	beq.n	801d4e8 <std+0x48>
 801d4da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d4de:	4294      	cmp	r4, r2
 801d4e0:	d002      	beq.n	801d4e8 <std+0x48>
 801d4e2:	33d0      	adds	r3, #208	@ 0xd0
 801d4e4:	429c      	cmp	r4, r3
 801d4e6:	d105      	bne.n	801d4f4 <std+0x54>
 801d4e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4f0:	f000 b9b4 	b.w	801d85c <__retarget_lock_init_recursive>
 801d4f4:	bd10      	pop	{r4, pc}
 801d4f6:	bf00      	nop
 801d4f8:	0801d68d 	.word	0x0801d68d
 801d4fc:	0801d6af 	.word	0x0801d6af
 801d500:	0801d6e7 	.word	0x0801d6e7
 801d504:	0801d70b 	.word	0x0801d70b
 801d508:	2000d370 	.word	0x2000d370

0801d50c <stdio_exit_handler>:
 801d50c:	4a02      	ldr	r2, [pc, #8]	@ (801d518 <stdio_exit_handler+0xc>)
 801d50e:	4903      	ldr	r1, [pc, #12]	@ (801d51c <stdio_exit_handler+0x10>)
 801d510:	4803      	ldr	r0, [pc, #12]	@ (801d520 <stdio_exit_handler+0x14>)
 801d512:	f000 b869 	b.w	801d5e8 <_fwalk_sglue>
 801d516:	bf00      	nop
 801d518:	20000144 	.word	0x20000144
 801d51c:	0801f315 	.word	0x0801f315
 801d520:	20000158 	.word	0x20000158

0801d524 <cleanup_stdio>:
 801d524:	6841      	ldr	r1, [r0, #4]
 801d526:	4b0c      	ldr	r3, [pc, #48]	@ (801d558 <cleanup_stdio+0x34>)
 801d528:	4299      	cmp	r1, r3
 801d52a:	b510      	push	{r4, lr}
 801d52c:	4604      	mov	r4, r0
 801d52e:	d001      	beq.n	801d534 <cleanup_stdio+0x10>
 801d530:	f001 fef0 	bl	801f314 <_fclose_r>
 801d534:	68a1      	ldr	r1, [r4, #8]
 801d536:	4b09      	ldr	r3, [pc, #36]	@ (801d55c <cleanup_stdio+0x38>)
 801d538:	4299      	cmp	r1, r3
 801d53a:	d002      	beq.n	801d542 <cleanup_stdio+0x1e>
 801d53c:	4620      	mov	r0, r4
 801d53e:	f001 fee9 	bl	801f314 <_fclose_r>
 801d542:	68e1      	ldr	r1, [r4, #12]
 801d544:	4b06      	ldr	r3, [pc, #24]	@ (801d560 <cleanup_stdio+0x3c>)
 801d546:	4299      	cmp	r1, r3
 801d548:	d004      	beq.n	801d554 <cleanup_stdio+0x30>
 801d54a:	4620      	mov	r0, r4
 801d54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d550:	f001 bee0 	b.w	801f314 <_fclose_r>
 801d554:	bd10      	pop	{r4, pc}
 801d556:	bf00      	nop
 801d558:	2000d370 	.word	0x2000d370
 801d55c:	2000d3d8 	.word	0x2000d3d8
 801d560:	2000d440 	.word	0x2000d440

0801d564 <global_stdio_init.part.0>:
 801d564:	b510      	push	{r4, lr}
 801d566:	4b0b      	ldr	r3, [pc, #44]	@ (801d594 <global_stdio_init.part.0+0x30>)
 801d568:	4c0b      	ldr	r4, [pc, #44]	@ (801d598 <global_stdio_init.part.0+0x34>)
 801d56a:	4a0c      	ldr	r2, [pc, #48]	@ (801d59c <global_stdio_init.part.0+0x38>)
 801d56c:	601a      	str	r2, [r3, #0]
 801d56e:	4620      	mov	r0, r4
 801d570:	2200      	movs	r2, #0
 801d572:	2104      	movs	r1, #4
 801d574:	f7ff ff94 	bl	801d4a0 <std>
 801d578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d57c:	2201      	movs	r2, #1
 801d57e:	2109      	movs	r1, #9
 801d580:	f7ff ff8e 	bl	801d4a0 <std>
 801d584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d588:	2202      	movs	r2, #2
 801d58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d58e:	2112      	movs	r1, #18
 801d590:	f7ff bf86 	b.w	801d4a0 <std>
 801d594:	2000d4a8 	.word	0x2000d4a8
 801d598:	2000d370 	.word	0x2000d370
 801d59c:	0801d50d 	.word	0x0801d50d

0801d5a0 <__sfp_lock_acquire>:
 801d5a0:	4801      	ldr	r0, [pc, #4]	@ (801d5a8 <__sfp_lock_acquire+0x8>)
 801d5a2:	f000 b95d 	b.w	801d860 <__retarget_lock_acquire_recursive>
 801d5a6:	bf00      	nop
 801d5a8:	2000d4b2 	.word	0x2000d4b2

0801d5ac <__sfp_lock_release>:
 801d5ac:	4801      	ldr	r0, [pc, #4]	@ (801d5b4 <__sfp_lock_release+0x8>)
 801d5ae:	f000 b958 	b.w	801d862 <__retarget_lock_release_recursive>
 801d5b2:	bf00      	nop
 801d5b4:	2000d4b2 	.word	0x2000d4b2

0801d5b8 <__sinit>:
 801d5b8:	b510      	push	{r4, lr}
 801d5ba:	4604      	mov	r4, r0
 801d5bc:	f7ff fff0 	bl	801d5a0 <__sfp_lock_acquire>
 801d5c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d5c2:	b11b      	cbz	r3, 801d5cc <__sinit+0x14>
 801d5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5c8:	f7ff bff0 	b.w	801d5ac <__sfp_lock_release>
 801d5cc:	4b04      	ldr	r3, [pc, #16]	@ (801d5e0 <__sinit+0x28>)
 801d5ce:	6363      	str	r3, [r4, #52]	@ 0x34
 801d5d0:	4b04      	ldr	r3, [pc, #16]	@ (801d5e4 <__sinit+0x2c>)
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d1f5      	bne.n	801d5c4 <__sinit+0xc>
 801d5d8:	f7ff ffc4 	bl	801d564 <global_stdio_init.part.0>
 801d5dc:	e7f2      	b.n	801d5c4 <__sinit+0xc>
 801d5de:	bf00      	nop
 801d5e0:	0801d525 	.word	0x0801d525
 801d5e4:	2000d4a8 	.word	0x2000d4a8

0801d5e8 <_fwalk_sglue>:
 801d5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d5ec:	4607      	mov	r7, r0
 801d5ee:	4688      	mov	r8, r1
 801d5f0:	4614      	mov	r4, r2
 801d5f2:	2600      	movs	r6, #0
 801d5f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d5f8:	f1b9 0901 	subs.w	r9, r9, #1
 801d5fc:	d505      	bpl.n	801d60a <_fwalk_sglue+0x22>
 801d5fe:	6824      	ldr	r4, [r4, #0]
 801d600:	2c00      	cmp	r4, #0
 801d602:	d1f7      	bne.n	801d5f4 <_fwalk_sglue+0xc>
 801d604:	4630      	mov	r0, r6
 801d606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d60a:	89ab      	ldrh	r3, [r5, #12]
 801d60c:	2b01      	cmp	r3, #1
 801d60e:	d907      	bls.n	801d620 <_fwalk_sglue+0x38>
 801d610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d614:	3301      	adds	r3, #1
 801d616:	d003      	beq.n	801d620 <_fwalk_sglue+0x38>
 801d618:	4629      	mov	r1, r5
 801d61a:	4638      	mov	r0, r7
 801d61c:	47c0      	blx	r8
 801d61e:	4306      	orrs	r6, r0
 801d620:	3568      	adds	r5, #104	@ 0x68
 801d622:	e7e9      	b.n	801d5f8 <_fwalk_sglue+0x10>

0801d624 <snprintf>:
 801d624:	b40c      	push	{r2, r3}
 801d626:	b530      	push	{r4, r5, lr}
 801d628:	4b17      	ldr	r3, [pc, #92]	@ (801d688 <snprintf+0x64>)
 801d62a:	1e0c      	subs	r4, r1, #0
 801d62c:	681d      	ldr	r5, [r3, #0]
 801d62e:	b09d      	sub	sp, #116	@ 0x74
 801d630:	da08      	bge.n	801d644 <snprintf+0x20>
 801d632:	238b      	movs	r3, #139	@ 0x8b
 801d634:	602b      	str	r3, [r5, #0]
 801d636:	f04f 30ff 	mov.w	r0, #4294967295
 801d63a:	b01d      	add	sp, #116	@ 0x74
 801d63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d640:	b002      	add	sp, #8
 801d642:	4770      	bx	lr
 801d644:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d648:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d64c:	bf14      	ite	ne
 801d64e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d652:	4623      	moveq	r3, r4
 801d654:	9304      	str	r3, [sp, #16]
 801d656:	9307      	str	r3, [sp, #28]
 801d658:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d65c:	9002      	str	r0, [sp, #8]
 801d65e:	9006      	str	r0, [sp, #24]
 801d660:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d664:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d666:	ab21      	add	r3, sp, #132	@ 0x84
 801d668:	a902      	add	r1, sp, #8
 801d66a:	4628      	mov	r0, r5
 801d66c:	9301      	str	r3, [sp, #4]
 801d66e:	f000 fc73 	bl	801df58 <_svfprintf_r>
 801d672:	1c43      	adds	r3, r0, #1
 801d674:	bfbc      	itt	lt
 801d676:	238b      	movlt	r3, #139	@ 0x8b
 801d678:	602b      	strlt	r3, [r5, #0]
 801d67a:	2c00      	cmp	r4, #0
 801d67c:	d0dd      	beq.n	801d63a <snprintf+0x16>
 801d67e:	9b02      	ldr	r3, [sp, #8]
 801d680:	2200      	movs	r2, #0
 801d682:	701a      	strb	r2, [r3, #0]
 801d684:	e7d9      	b.n	801d63a <snprintf+0x16>
 801d686:	bf00      	nop
 801d688:	20000150 	.word	0x20000150

0801d68c <__sread>:
 801d68c:	b510      	push	{r4, lr}
 801d68e:	460c      	mov	r4, r1
 801d690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d694:	f000 f894 	bl	801d7c0 <_read_r>
 801d698:	2800      	cmp	r0, #0
 801d69a:	bfab      	itete	ge
 801d69c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 801d69e:	89a3      	ldrhlt	r3, [r4, #12]
 801d6a0:	181b      	addge	r3, r3, r0
 801d6a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d6a6:	bfac      	ite	ge
 801d6a8:	6523      	strge	r3, [r4, #80]	@ 0x50
 801d6aa:	81a3      	strhlt	r3, [r4, #12]
 801d6ac:	bd10      	pop	{r4, pc}

0801d6ae <__swrite>:
 801d6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6b2:	461f      	mov	r7, r3
 801d6b4:	898b      	ldrh	r3, [r1, #12]
 801d6b6:	05db      	lsls	r3, r3, #23
 801d6b8:	4605      	mov	r5, r0
 801d6ba:	460c      	mov	r4, r1
 801d6bc:	4616      	mov	r6, r2
 801d6be:	d505      	bpl.n	801d6cc <__swrite+0x1e>
 801d6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6c4:	2302      	movs	r3, #2
 801d6c6:	2200      	movs	r2, #0
 801d6c8:	f000 f868 	bl	801d79c <_lseek_r>
 801d6cc:	89a3      	ldrh	r3, [r4, #12]
 801d6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d6d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d6d6:	81a3      	strh	r3, [r4, #12]
 801d6d8:	4632      	mov	r2, r6
 801d6da:	463b      	mov	r3, r7
 801d6dc:	4628      	mov	r0, r5
 801d6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d6e2:	f000 b87f 	b.w	801d7e4 <_write_r>

0801d6e6 <__sseek>:
 801d6e6:	b510      	push	{r4, lr}
 801d6e8:	460c      	mov	r4, r1
 801d6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6ee:	f000 f855 	bl	801d79c <_lseek_r>
 801d6f2:	1c43      	adds	r3, r0, #1
 801d6f4:	89a3      	ldrh	r3, [r4, #12]
 801d6f6:	bf15      	itete	ne
 801d6f8:	6520      	strne	r0, [r4, #80]	@ 0x50
 801d6fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d6fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d702:	81a3      	strheq	r3, [r4, #12]
 801d704:	bf18      	it	ne
 801d706:	81a3      	strhne	r3, [r4, #12]
 801d708:	bd10      	pop	{r4, pc}

0801d70a <__sclose>:
 801d70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d70e:	f000 b809 	b.w	801d724 <_close_r>

0801d712 <memset>:
 801d712:	4402      	add	r2, r0
 801d714:	4603      	mov	r3, r0
 801d716:	4293      	cmp	r3, r2
 801d718:	d100      	bne.n	801d71c <memset+0xa>
 801d71a:	4770      	bx	lr
 801d71c:	f803 1b01 	strb.w	r1, [r3], #1
 801d720:	e7f9      	b.n	801d716 <memset+0x4>
	...

0801d724 <_close_r>:
 801d724:	b538      	push	{r3, r4, r5, lr}
 801d726:	4d06      	ldr	r5, [pc, #24]	@ (801d740 <_close_r+0x1c>)
 801d728:	2300      	movs	r3, #0
 801d72a:	4604      	mov	r4, r0
 801d72c:	4608      	mov	r0, r1
 801d72e:	602b      	str	r3, [r5, #0]
 801d730:	f7e6 fba0 	bl	8003e74 <_close>
 801d734:	1c43      	adds	r3, r0, #1
 801d736:	d102      	bne.n	801d73e <_close_r+0x1a>
 801d738:	682b      	ldr	r3, [r5, #0]
 801d73a:	b103      	cbz	r3, 801d73e <_close_r+0x1a>
 801d73c:	6023      	str	r3, [r4, #0]
 801d73e:	bd38      	pop	{r3, r4, r5, pc}
 801d740:	2000d4ac 	.word	0x2000d4ac

0801d744 <_reclaim_reent>:
 801d744:	4b14      	ldr	r3, [pc, #80]	@ (801d798 <_reclaim_reent+0x54>)
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	4283      	cmp	r3, r0
 801d74a:	b570      	push	{r4, r5, r6, lr}
 801d74c:	4604      	mov	r4, r0
 801d74e:	d022      	beq.n	801d796 <_reclaim_reent+0x52>
 801d750:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d752:	b153      	cbz	r3, 801d76a <_reclaim_reent+0x26>
 801d754:	2500      	movs	r5, #0
 801d756:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801d758:	5959      	ldr	r1, [r3, r5]
 801d75a:	b9b1      	cbnz	r1, 801d78a <_reclaim_reent+0x46>
 801d75c:	3504      	adds	r5, #4
 801d75e:	2d80      	cmp	r5, #128	@ 0x80
 801d760:	d1f9      	bne.n	801d756 <_reclaim_reent+0x12>
 801d762:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d764:	4620      	mov	r0, r4
 801d766:	f000 f8f1 	bl	801d94c <_free_r>
 801d76a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d76c:	b111      	cbz	r1, 801d774 <_reclaim_reent+0x30>
 801d76e:	4620      	mov	r0, r4
 801d770:	f000 f8ec 	bl	801d94c <_free_r>
 801d774:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 801d776:	b111      	cbz	r1, 801d77e <_reclaim_reent+0x3a>
 801d778:	4620      	mov	r0, r4
 801d77a:	f000 f8e7 	bl	801d94c <_free_r>
 801d77e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d780:	b14b      	cbz	r3, 801d796 <_reclaim_reent+0x52>
 801d782:	4620      	mov	r0, r4
 801d784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d788:	4718      	bx	r3
 801d78a:	680e      	ldr	r6, [r1, #0]
 801d78c:	4620      	mov	r0, r4
 801d78e:	f000 f8dd 	bl	801d94c <_free_r>
 801d792:	4631      	mov	r1, r6
 801d794:	e7e1      	b.n	801d75a <_reclaim_reent+0x16>
 801d796:	bd70      	pop	{r4, r5, r6, pc}
 801d798:	20000150 	.word	0x20000150

0801d79c <_lseek_r>:
 801d79c:	b538      	push	{r3, r4, r5, lr}
 801d79e:	4d07      	ldr	r5, [pc, #28]	@ (801d7bc <_lseek_r+0x20>)
 801d7a0:	4604      	mov	r4, r0
 801d7a2:	4608      	mov	r0, r1
 801d7a4:	4611      	mov	r1, r2
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	602a      	str	r2, [r5, #0]
 801d7aa:	461a      	mov	r2, r3
 801d7ac:	f7e6 fb89 	bl	8003ec2 <_lseek>
 801d7b0:	1c43      	adds	r3, r0, #1
 801d7b2:	d102      	bne.n	801d7ba <_lseek_r+0x1e>
 801d7b4:	682b      	ldr	r3, [r5, #0]
 801d7b6:	b103      	cbz	r3, 801d7ba <_lseek_r+0x1e>
 801d7b8:	6023      	str	r3, [r4, #0]
 801d7ba:	bd38      	pop	{r3, r4, r5, pc}
 801d7bc:	2000d4ac 	.word	0x2000d4ac

0801d7c0 <_read_r>:
 801d7c0:	b538      	push	{r3, r4, r5, lr}
 801d7c2:	4d07      	ldr	r5, [pc, #28]	@ (801d7e0 <_read_r+0x20>)
 801d7c4:	4604      	mov	r4, r0
 801d7c6:	4608      	mov	r0, r1
 801d7c8:	4611      	mov	r1, r2
 801d7ca:	2200      	movs	r2, #0
 801d7cc:	602a      	str	r2, [r5, #0]
 801d7ce:	461a      	mov	r2, r3
 801d7d0:	f7e6 fb17 	bl	8003e02 <_read>
 801d7d4:	1c43      	adds	r3, r0, #1
 801d7d6:	d102      	bne.n	801d7de <_read_r+0x1e>
 801d7d8:	682b      	ldr	r3, [r5, #0]
 801d7da:	b103      	cbz	r3, 801d7de <_read_r+0x1e>
 801d7dc:	6023      	str	r3, [r4, #0]
 801d7de:	bd38      	pop	{r3, r4, r5, pc}
 801d7e0:	2000d4ac 	.word	0x2000d4ac

0801d7e4 <_write_r>:
 801d7e4:	b538      	push	{r3, r4, r5, lr}
 801d7e6:	4d07      	ldr	r5, [pc, #28]	@ (801d804 <_write_r+0x20>)
 801d7e8:	4604      	mov	r4, r0
 801d7ea:	4608      	mov	r0, r1
 801d7ec:	4611      	mov	r1, r2
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	602a      	str	r2, [r5, #0]
 801d7f2:	461a      	mov	r2, r3
 801d7f4:	f7e6 fb22 	bl	8003e3c <_write>
 801d7f8:	1c43      	adds	r3, r0, #1
 801d7fa:	d102      	bne.n	801d802 <_write_r+0x1e>
 801d7fc:	682b      	ldr	r3, [r5, #0]
 801d7fe:	b103      	cbz	r3, 801d802 <_write_r+0x1e>
 801d800:	6023      	str	r3, [r4, #0]
 801d802:	bd38      	pop	{r3, r4, r5, pc}
 801d804:	2000d4ac 	.word	0x2000d4ac

0801d808 <__errno>:
 801d808:	4b01      	ldr	r3, [pc, #4]	@ (801d810 <__errno+0x8>)
 801d80a:	6818      	ldr	r0, [r3, #0]
 801d80c:	4770      	bx	lr
 801d80e:	bf00      	nop
 801d810:	20000150 	.word	0x20000150

0801d814 <__libc_init_array>:
 801d814:	b570      	push	{r4, r5, r6, lr}
 801d816:	4d0d      	ldr	r5, [pc, #52]	@ (801d84c <__libc_init_array+0x38>)
 801d818:	4c0d      	ldr	r4, [pc, #52]	@ (801d850 <__libc_init_array+0x3c>)
 801d81a:	1b64      	subs	r4, r4, r5
 801d81c:	10a4      	asrs	r4, r4, #2
 801d81e:	2600      	movs	r6, #0
 801d820:	42a6      	cmp	r6, r4
 801d822:	d109      	bne.n	801d838 <__libc_init_array+0x24>
 801d824:	4d0b      	ldr	r5, [pc, #44]	@ (801d854 <__libc_init_array+0x40>)
 801d826:	4c0c      	ldr	r4, [pc, #48]	@ (801d858 <__libc_init_array+0x44>)
 801d828:	f006 fd8a 	bl	8024340 <_init>
 801d82c:	1b64      	subs	r4, r4, r5
 801d82e:	10a4      	asrs	r4, r4, #2
 801d830:	2600      	movs	r6, #0
 801d832:	42a6      	cmp	r6, r4
 801d834:	d105      	bne.n	801d842 <__libc_init_array+0x2e>
 801d836:	bd70      	pop	{r4, r5, r6, pc}
 801d838:	f855 3b04 	ldr.w	r3, [r5], #4
 801d83c:	4798      	blx	r3
 801d83e:	3601      	adds	r6, #1
 801d840:	e7ee      	b.n	801d820 <__libc_init_array+0xc>
 801d842:	f855 3b04 	ldr.w	r3, [r5], #4
 801d846:	4798      	blx	r3
 801d848:	3601      	adds	r6, #1
 801d84a:	e7f2      	b.n	801d832 <__libc_init_array+0x1e>
 801d84c:	08025158 	.word	0x08025158
 801d850:	08025158 	.word	0x08025158
 801d854:	08025158 	.word	0x08025158
 801d858:	08025160 	.word	0x08025160

0801d85c <__retarget_lock_init_recursive>:
 801d85c:	4770      	bx	lr

0801d85e <__retarget_lock_close_recursive>:
 801d85e:	4770      	bx	lr

0801d860 <__retarget_lock_acquire_recursive>:
 801d860:	4770      	bx	lr

0801d862 <__retarget_lock_release_recursive>:
 801d862:	4770      	bx	lr

0801d864 <memcpy>:
 801d864:	440a      	add	r2, r1
 801d866:	4291      	cmp	r1, r2
 801d868:	f100 33ff 	add.w	r3, r0, #4294967295
 801d86c:	d100      	bne.n	801d870 <memcpy+0xc>
 801d86e:	4770      	bx	lr
 801d870:	b510      	push	{r4, lr}
 801d872:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d876:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d87a:	4291      	cmp	r1, r2
 801d87c:	d1f9      	bne.n	801d872 <memcpy+0xe>
 801d87e:	bd10      	pop	{r4, pc}

0801d880 <register_fini>:
 801d880:	4b02      	ldr	r3, [pc, #8]	@ (801d88c <register_fini+0xc>)
 801d882:	b113      	cbz	r3, 801d88a <register_fini+0xa>
 801d884:	4802      	ldr	r0, [pc, #8]	@ (801d890 <register_fini+0x10>)
 801d886:	f000 b805 	b.w	801d894 <atexit>
 801d88a:	4770      	bx	lr
 801d88c:	00000000 	.word	0x00000000
 801d890:	0801f575 	.word	0x0801f575

0801d894 <atexit>:
 801d894:	2300      	movs	r3, #0
 801d896:	4601      	mov	r1, r0
 801d898:	461a      	mov	r2, r3
 801d89a:	4618      	mov	r0, r3
 801d89c:	f001 bec0 	b.w	801f620 <__register_exitproc>

0801d8a0 <_malloc_trim_r>:
 801d8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8a4:	4606      	mov	r6, r0
 801d8a6:	2008      	movs	r0, #8
 801d8a8:	4689      	mov	r9, r1
 801d8aa:	f001 fe77 	bl	801f59c <sysconf>
 801d8ae:	4f24      	ldr	r7, [pc, #144]	@ (801d940 <_malloc_trim_r+0xa0>)
 801d8b0:	4680      	mov	r8, r0
 801d8b2:	4630      	mov	r0, r6
 801d8b4:	f000 fb44 	bl	801df40 <__malloc_lock>
 801d8b8:	68bb      	ldr	r3, [r7, #8]
 801d8ba:	685d      	ldr	r5, [r3, #4]
 801d8bc:	f025 0503 	bic.w	r5, r5, #3
 801d8c0:	f1a5 0411 	sub.w	r4, r5, #17
 801d8c4:	eba4 0409 	sub.w	r4, r4, r9
 801d8c8:	4444      	add	r4, r8
 801d8ca:	fbb4 f4f8 	udiv	r4, r4, r8
 801d8ce:	3c01      	subs	r4, #1
 801d8d0:	fb08 f404 	mul.w	r4, r8, r4
 801d8d4:	45a0      	cmp	r8, r4
 801d8d6:	dd05      	ble.n	801d8e4 <_malloc_trim_r+0x44>
 801d8d8:	4630      	mov	r0, r6
 801d8da:	f000 fb37 	bl	801df4c <__malloc_unlock>
 801d8de:	2000      	movs	r0, #0
 801d8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8e4:	2100      	movs	r1, #0
 801d8e6:	4630      	mov	r0, r6
 801d8e8:	f001 fe34 	bl	801f554 <_sbrk_r>
 801d8ec:	68bb      	ldr	r3, [r7, #8]
 801d8ee:	442b      	add	r3, r5
 801d8f0:	4298      	cmp	r0, r3
 801d8f2:	d1f1      	bne.n	801d8d8 <_malloc_trim_r+0x38>
 801d8f4:	4261      	negs	r1, r4
 801d8f6:	4630      	mov	r0, r6
 801d8f8:	f001 fe2c 	bl	801f554 <_sbrk_r>
 801d8fc:	3001      	adds	r0, #1
 801d8fe:	d110      	bne.n	801d922 <_malloc_trim_r+0x82>
 801d900:	2100      	movs	r1, #0
 801d902:	4630      	mov	r0, r6
 801d904:	f001 fe26 	bl	801f554 <_sbrk_r>
 801d908:	68ba      	ldr	r2, [r7, #8]
 801d90a:	1a83      	subs	r3, r0, r2
 801d90c:	2b0f      	cmp	r3, #15
 801d90e:	dde3      	ble.n	801d8d8 <_malloc_trim_r+0x38>
 801d910:	490c      	ldr	r1, [pc, #48]	@ (801d944 <_malloc_trim_r+0xa4>)
 801d912:	6809      	ldr	r1, [r1, #0]
 801d914:	1a40      	subs	r0, r0, r1
 801d916:	490c      	ldr	r1, [pc, #48]	@ (801d948 <_malloc_trim_r+0xa8>)
 801d918:	f043 0301 	orr.w	r3, r3, #1
 801d91c:	6008      	str	r0, [r1, #0]
 801d91e:	6053      	str	r3, [r2, #4]
 801d920:	e7da      	b.n	801d8d8 <_malloc_trim_r+0x38>
 801d922:	68bb      	ldr	r3, [r7, #8]
 801d924:	4a08      	ldr	r2, [pc, #32]	@ (801d948 <_malloc_trim_r+0xa8>)
 801d926:	1b2d      	subs	r5, r5, r4
 801d928:	f045 0501 	orr.w	r5, r5, #1
 801d92c:	605d      	str	r5, [r3, #4]
 801d92e:	6813      	ldr	r3, [r2, #0]
 801d930:	4630      	mov	r0, r6
 801d932:	1b1b      	subs	r3, r3, r4
 801d934:	6013      	str	r3, [r2, #0]
 801d936:	f000 fb09 	bl	801df4c <__malloc_unlock>
 801d93a:	2001      	movs	r0, #1
 801d93c:	e7d0      	b.n	801d8e0 <_malloc_trim_r+0x40>
 801d93e:	bf00      	nop
 801d940:	20000284 	.word	0x20000284
 801d944:	2000027c 	.word	0x2000027c
 801d948:	2000d4b8 	.word	0x2000d4b8

0801d94c <_free_r>:
 801d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d94e:	4604      	mov	r4, r0
 801d950:	460f      	mov	r7, r1
 801d952:	2900      	cmp	r1, #0
 801d954:	f000 80b1 	beq.w	801daba <_free_r+0x16e>
 801d958:	f000 faf2 	bl	801df40 <__malloc_lock>
 801d95c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801d960:	4d56      	ldr	r5, [pc, #344]	@ (801dabc <_free_r+0x170>)
 801d962:	f022 0001 	bic.w	r0, r2, #1
 801d966:	f1a7 0308 	sub.w	r3, r7, #8
 801d96a:	eb03 0c00 	add.w	ip, r3, r0
 801d96e:	68a9      	ldr	r1, [r5, #8]
 801d970:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801d974:	4561      	cmp	r1, ip
 801d976:	f026 0603 	bic.w	r6, r6, #3
 801d97a:	f002 0201 	and.w	r2, r2, #1
 801d97e:	d11b      	bne.n	801d9b8 <_free_r+0x6c>
 801d980:	4406      	add	r6, r0
 801d982:	b93a      	cbnz	r2, 801d994 <_free_r+0x48>
 801d984:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801d988:	1a9b      	subs	r3, r3, r2
 801d98a:	4416      	add	r6, r2
 801d98c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801d990:	60ca      	str	r2, [r1, #12]
 801d992:	6091      	str	r1, [r2, #8]
 801d994:	f046 0201 	orr.w	r2, r6, #1
 801d998:	605a      	str	r2, [r3, #4]
 801d99a:	60ab      	str	r3, [r5, #8]
 801d99c:	4b48      	ldr	r3, [pc, #288]	@ (801dac0 <_free_r+0x174>)
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	42b3      	cmp	r3, r6
 801d9a2:	d804      	bhi.n	801d9ae <_free_r+0x62>
 801d9a4:	4b47      	ldr	r3, [pc, #284]	@ (801dac4 <_free_r+0x178>)
 801d9a6:	4620      	mov	r0, r4
 801d9a8:	6819      	ldr	r1, [r3, #0]
 801d9aa:	f7ff ff79 	bl	801d8a0 <_malloc_trim_r>
 801d9ae:	4620      	mov	r0, r4
 801d9b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d9b4:	f000 baca 	b.w	801df4c <__malloc_unlock>
 801d9b8:	f8cc 6004 	str.w	r6, [ip, #4]
 801d9bc:	2a00      	cmp	r2, #0
 801d9be:	d138      	bne.n	801da32 <_free_r+0xe6>
 801d9c0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801d9c4:	1a5b      	subs	r3, r3, r1
 801d9c6:	4408      	add	r0, r1
 801d9c8:	6899      	ldr	r1, [r3, #8]
 801d9ca:	f105 0708 	add.w	r7, r5, #8
 801d9ce:	42b9      	cmp	r1, r7
 801d9d0:	d031      	beq.n	801da36 <_free_r+0xea>
 801d9d2:	68df      	ldr	r7, [r3, #12]
 801d9d4:	60cf      	str	r7, [r1, #12]
 801d9d6:	60b9      	str	r1, [r7, #8]
 801d9d8:	eb0c 0106 	add.w	r1, ip, r6
 801d9dc:	6849      	ldr	r1, [r1, #4]
 801d9de:	07c9      	lsls	r1, r1, #31
 801d9e0:	d40b      	bmi.n	801d9fa <_free_r+0xae>
 801d9e2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801d9e6:	4430      	add	r0, r6
 801d9e8:	bb3a      	cbnz	r2, 801da3a <_free_r+0xee>
 801d9ea:	4e37      	ldr	r6, [pc, #220]	@ (801dac8 <_free_r+0x17c>)
 801d9ec:	42b1      	cmp	r1, r6
 801d9ee:	d124      	bne.n	801da3a <_free_r+0xee>
 801d9f0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801d9f4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801d9f8:	2201      	movs	r2, #1
 801d9fa:	f040 0101 	orr.w	r1, r0, #1
 801d9fe:	6059      	str	r1, [r3, #4]
 801da00:	5018      	str	r0, [r3, r0]
 801da02:	2a00      	cmp	r2, #0
 801da04:	d1d3      	bne.n	801d9ae <_free_r+0x62>
 801da06:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801da0a:	d21b      	bcs.n	801da44 <_free_r+0xf8>
 801da0c:	08c2      	lsrs	r2, r0, #3
 801da0e:	2101      	movs	r1, #1
 801da10:	0940      	lsrs	r0, r0, #5
 801da12:	4081      	lsls	r1, r0
 801da14:	6868      	ldr	r0, [r5, #4]
 801da16:	3201      	adds	r2, #1
 801da18:	4301      	orrs	r1, r0
 801da1a:	6069      	str	r1, [r5, #4]
 801da1c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 801da20:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 801da24:	3908      	subs	r1, #8
 801da26:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801da2a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 801da2e:	60c3      	str	r3, [r0, #12]
 801da30:	e7bd      	b.n	801d9ae <_free_r+0x62>
 801da32:	2200      	movs	r2, #0
 801da34:	e7d0      	b.n	801d9d8 <_free_r+0x8c>
 801da36:	2201      	movs	r2, #1
 801da38:	e7ce      	b.n	801d9d8 <_free_r+0x8c>
 801da3a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801da3e:	60ce      	str	r6, [r1, #12]
 801da40:	60b1      	str	r1, [r6, #8]
 801da42:	e7da      	b.n	801d9fa <_free_r+0xae>
 801da44:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 801da48:	ea4f 2250 	mov.w	r2, r0, lsr #9
 801da4c:	d214      	bcs.n	801da78 <_free_r+0x12c>
 801da4e:	0982      	lsrs	r2, r0, #6
 801da50:	3238      	adds	r2, #56	@ 0x38
 801da52:	1c51      	adds	r1, r2, #1
 801da54:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801da58:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801da5c:	428e      	cmp	r6, r1
 801da5e:	d125      	bne.n	801daac <_free_r+0x160>
 801da60:	2001      	movs	r0, #1
 801da62:	1092      	asrs	r2, r2, #2
 801da64:	fa00 f202 	lsl.w	r2, r0, r2
 801da68:	6868      	ldr	r0, [r5, #4]
 801da6a:	4302      	orrs	r2, r0
 801da6c:	606a      	str	r2, [r5, #4]
 801da6e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801da72:	60b3      	str	r3, [r6, #8]
 801da74:	60cb      	str	r3, [r1, #12]
 801da76:	e79a      	b.n	801d9ae <_free_r+0x62>
 801da78:	2a14      	cmp	r2, #20
 801da7a:	d801      	bhi.n	801da80 <_free_r+0x134>
 801da7c:	325b      	adds	r2, #91	@ 0x5b
 801da7e:	e7e8      	b.n	801da52 <_free_r+0x106>
 801da80:	2a54      	cmp	r2, #84	@ 0x54
 801da82:	d802      	bhi.n	801da8a <_free_r+0x13e>
 801da84:	0b02      	lsrs	r2, r0, #12
 801da86:	326e      	adds	r2, #110	@ 0x6e
 801da88:	e7e3      	b.n	801da52 <_free_r+0x106>
 801da8a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801da8e:	d802      	bhi.n	801da96 <_free_r+0x14a>
 801da90:	0bc2      	lsrs	r2, r0, #15
 801da92:	3277      	adds	r2, #119	@ 0x77
 801da94:	e7dd      	b.n	801da52 <_free_r+0x106>
 801da96:	f240 5154 	movw	r1, #1364	@ 0x554
 801da9a:	428a      	cmp	r2, r1
 801da9c:	bf9a      	itte	ls
 801da9e:	0c82      	lsrls	r2, r0, #18
 801daa0:	327c      	addls	r2, #124	@ 0x7c
 801daa2:	227e      	movhi	r2, #126	@ 0x7e
 801daa4:	e7d5      	b.n	801da52 <_free_r+0x106>
 801daa6:	6889      	ldr	r1, [r1, #8]
 801daa8:	428e      	cmp	r6, r1
 801daaa:	d004      	beq.n	801dab6 <_free_r+0x16a>
 801daac:	684a      	ldr	r2, [r1, #4]
 801daae:	f022 0203 	bic.w	r2, r2, #3
 801dab2:	4282      	cmp	r2, r0
 801dab4:	d8f7      	bhi.n	801daa6 <_free_r+0x15a>
 801dab6:	68ce      	ldr	r6, [r1, #12]
 801dab8:	e7d9      	b.n	801da6e <_free_r+0x122>
 801daba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dabc:	20000284 	.word	0x20000284
 801dac0:	20000280 	.word	0x20000280
 801dac4:	2000d4e8 	.word	0x2000d4e8
 801dac8:	2000028c 	.word	0x2000028c

0801dacc <_malloc_r>:
 801dacc:	f101 030b 	add.w	r3, r1, #11
 801dad0:	2b16      	cmp	r3, #22
 801dad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad6:	4605      	mov	r5, r0
 801dad8:	d906      	bls.n	801dae8 <_malloc_r+0x1c>
 801dada:	f033 0707 	bics.w	r7, r3, #7
 801dade:	d504      	bpl.n	801daea <_malloc_r+0x1e>
 801dae0:	230c      	movs	r3, #12
 801dae2:	602b      	str	r3, [r5, #0]
 801dae4:	2400      	movs	r4, #0
 801dae6:	e1a3      	b.n	801de30 <_malloc_r+0x364>
 801dae8:	2710      	movs	r7, #16
 801daea:	42b9      	cmp	r1, r7
 801daec:	d8f8      	bhi.n	801dae0 <_malloc_r+0x14>
 801daee:	4628      	mov	r0, r5
 801daf0:	f000 fa26 	bl	801df40 <__malloc_lock>
 801daf4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 801daf8:	4eaf      	ldr	r6, [pc, #700]	@ (801ddb8 <_malloc_r+0x2ec>)
 801dafa:	d237      	bcs.n	801db6c <_malloc_r+0xa0>
 801dafc:	f107 0208 	add.w	r2, r7, #8
 801db00:	4432      	add	r2, r6
 801db02:	f1a2 0108 	sub.w	r1, r2, #8
 801db06:	6854      	ldr	r4, [r2, #4]
 801db08:	428c      	cmp	r4, r1
 801db0a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801db0e:	d102      	bne.n	801db16 <_malloc_r+0x4a>
 801db10:	68d4      	ldr	r4, [r2, #12]
 801db12:	42a2      	cmp	r2, r4
 801db14:	d010      	beq.n	801db38 <_malloc_r+0x6c>
 801db16:	6863      	ldr	r3, [r4, #4]
 801db18:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801db1c:	f023 0303 	bic.w	r3, r3, #3
 801db20:	60ca      	str	r2, [r1, #12]
 801db22:	4423      	add	r3, r4
 801db24:	6091      	str	r1, [r2, #8]
 801db26:	685a      	ldr	r2, [r3, #4]
 801db28:	f042 0201 	orr.w	r2, r2, #1
 801db2c:	605a      	str	r2, [r3, #4]
 801db2e:	4628      	mov	r0, r5
 801db30:	f000 fa0c 	bl	801df4c <__malloc_unlock>
 801db34:	3408      	adds	r4, #8
 801db36:	e17b      	b.n	801de30 <_malloc_r+0x364>
 801db38:	3302      	adds	r3, #2
 801db3a:	6934      	ldr	r4, [r6, #16]
 801db3c:	499f      	ldr	r1, [pc, #636]	@ (801ddbc <_malloc_r+0x2f0>)
 801db3e:	428c      	cmp	r4, r1
 801db40:	d077      	beq.n	801dc32 <_malloc_r+0x166>
 801db42:	6862      	ldr	r2, [r4, #4]
 801db44:	f022 0c03 	bic.w	ip, r2, #3
 801db48:	ebac 0007 	sub.w	r0, ip, r7
 801db4c:	280f      	cmp	r0, #15
 801db4e:	dd48      	ble.n	801dbe2 <_malloc_r+0x116>
 801db50:	19e2      	adds	r2, r4, r7
 801db52:	f040 0301 	orr.w	r3, r0, #1
 801db56:	f047 0701 	orr.w	r7, r7, #1
 801db5a:	6067      	str	r7, [r4, #4]
 801db5c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801db60:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801db64:	6053      	str	r3, [r2, #4]
 801db66:	f844 000c 	str.w	r0, [r4, ip]
 801db6a:	e7e0      	b.n	801db2e <_malloc_r+0x62>
 801db6c:	0a7b      	lsrs	r3, r7, #9
 801db6e:	d02a      	beq.n	801dbc6 <_malloc_r+0xfa>
 801db70:	2b04      	cmp	r3, #4
 801db72:	d812      	bhi.n	801db9a <_malloc_r+0xce>
 801db74:	09bb      	lsrs	r3, r7, #6
 801db76:	3338      	adds	r3, #56	@ 0x38
 801db78:	1c5a      	adds	r2, r3, #1
 801db7a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801db7e:	f1a2 0c08 	sub.w	ip, r2, #8
 801db82:	6854      	ldr	r4, [r2, #4]
 801db84:	4564      	cmp	r4, ip
 801db86:	d006      	beq.n	801db96 <_malloc_r+0xca>
 801db88:	6862      	ldr	r2, [r4, #4]
 801db8a:	f022 0203 	bic.w	r2, r2, #3
 801db8e:	1bd0      	subs	r0, r2, r7
 801db90:	280f      	cmp	r0, #15
 801db92:	dd1c      	ble.n	801dbce <_malloc_r+0x102>
 801db94:	3b01      	subs	r3, #1
 801db96:	3301      	adds	r3, #1
 801db98:	e7cf      	b.n	801db3a <_malloc_r+0x6e>
 801db9a:	2b14      	cmp	r3, #20
 801db9c:	d801      	bhi.n	801dba2 <_malloc_r+0xd6>
 801db9e:	335b      	adds	r3, #91	@ 0x5b
 801dba0:	e7ea      	b.n	801db78 <_malloc_r+0xac>
 801dba2:	2b54      	cmp	r3, #84	@ 0x54
 801dba4:	d802      	bhi.n	801dbac <_malloc_r+0xe0>
 801dba6:	0b3b      	lsrs	r3, r7, #12
 801dba8:	336e      	adds	r3, #110	@ 0x6e
 801dbaa:	e7e5      	b.n	801db78 <_malloc_r+0xac>
 801dbac:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 801dbb0:	d802      	bhi.n	801dbb8 <_malloc_r+0xec>
 801dbb2:	0bfb      	lsrs	r3, r7, #15
 801dbb4:	3377      	adds	r3, #119	@ 0x77
 801dbb6:	e7df      	b.n	801db78 <_malloc_r+0xac>
 801dbb8:	f240 5254 	movw	r2, #1364	@ 0x554
 801dbbc:	4293      	cmp	r3, r2
 801dbbe:	d804      	bhi.n	801dbca <_malloc_r+0xfe>
 801dbc0:	0cbb      	lsrs	r3, r7, #18
 801dbc2:	337c      	adds	r3, #124	@ 0x7c
 801dbc4:	e7d8      	b.n	801db78 <_malloc_r+0xac>
 801dbc6:	233f      	movs	r3, #63	@ 0x3f
 801dbc8:	e7d6      	b.n	801db78 <_malloc_r+0xac>
 801dbca:	237e      	movs	r3, #126	@ 0x7e
 801dbcc:	e7d4      	b.n	801db78 <_malloc_r+0xac>
 801dbce:	2800      	cmp	r0, #0
 801dbd0:	68e1      	ldr	r1, [r4, #12]
 801dbd2:	db04      	blt.n	801dbde <_malloc_r+0x112>
 801dbd4:	68a3      	ldr	r3, [r4, #8]
 801dbd6:	60d9      	str	r1, [r3, #12]
 801dbd8:	608b      	str	r3, [r1, #8]
 801dbda:	18a3      	adds	r3, r4, r2
 801dbdc:	e7a3      	b.n	801db26 <_malloc_r+0x5a>
 801dbde:	460c      	mov	r4, r1
 801dbe0:	e7d0      	b.n	801db84 <_malloc_r+0xb8>
 801dbe2:	2800      	cmp	r0, #0
 801dbe4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801dbe8:	db07      	blt.n	801dbfa <_malloc_r+0x12e>
 801dbea:	44a4      	add	ip, r4
 801dbec:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801dbf0:	f043 0301 	orr.w	r3, r3, #1
 801dbf4:	f8cc 3004 	str.w	r3, [ip, #4]
 801dbf8:	e799      	b.n	801db2e <_malloc_r+0x62>
 801dbfa:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 801dbfe:	6870      	ldr	r0, [r6, #4]
 801dc00:	f080 8095 	bcs.w	801dd2e <_malloc_r+0x262>
 801dc04:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801dc08:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801dc0c:	f04f 0c01 	mov.w	ip, #1
 801dc10:	3201      	adds	r2, #1
 801dc12:	fa0c fc0e 	lsl.w	ip, ip, lr
 801dc16:	ea4c 0000 	orr.w	r0, ip, r0
 801dc1a:	6070      	str	r0, [r6, #4]
 801dc1c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801dc20:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801dc24:	3808      	subs	r0, #8
 801dc26:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801dc2a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801dc2e:	f8cc 400c 	str.w	r4, [ip, #12]
 801dc32:	1098      	asrs	r0, r3, #2
 801dc34:	2201      	movs	r2, #1
 801dc36:	4082      	lsls	r2, r0
 801dc38:	6870      	ldr	r0, [r6, #4]
 801dc3a:	4290      	cmp	r0, r2
 801dc3c:	d326      	bcc.n	801dc8c <_malloc_r+0x1c0>
 801dc3e:	4210      	tst	r0, r2
 801dc40:	d106      	bne.n	801dc50 <_malloc_r+0x184>
 801dc42:	f023 0303 	bic.w	r3, r3, #3
 801dc46:	0052      	lsls	r2, r2, #1
 801dc48:	4210      	tst	r0, r2
 801dc4a:	f103 0304 	add.w	r3, r3, #4
 801dc4e:	d0fa      	beq.n	801dc46 <_malloc_r+0x17a>
 801dc50:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801dc54:	46c1      	mov	r9, r8
 801dc56:	469e      	mov	lr, r3
 801dc58:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801dc5c:	454c      	cmp	r4, r9
 801dc5e:	f040 80b9 	bne.w	801ddd4 <_malloc_r+0x308>
 801dc62:	f10e 0e01 	add.w	lr, lr, #1
 801dc66:	f01e 0f03 	tst.w	lr, #3
 801dc6a:	f109 0908 	add.w	r9, r9, #8
 801dc6e:	d1f3      	bne.n	801dc58 <_malloc_r+0x18c>
 801dc70:	0798      	lsls	r0, r3, #30
 801dc72:	f040 80e3 	bne.w	801de3c <_malloc_r+0x370>
 801dc76:	6873      	ldr	r3, [r6, #4]
 801dc78:	ea23 0302 	bic.w	r3, r3, r2
 801dc7c:	6073      	str	r3, [r6, #4]
 801dc7e:	6870      	ldr	r0, [r6, #4]
 801dc80:	0052      	lsls	r2, r2, #1
 801dc82:	4290      	cmp	r0, r2
 801dc84:	d302      	bcc.n	801dc8c <_malloc_r+0x1c0>
 801dc86:	2a00      	cmp	r2, #0
 801dc88:	f040 80e5 	bne.w	801de56 <_malloc_r+0x38a>
 801dc8c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801dc90:	f8da 3004 	ldr.w	r3, [sl, #4]
 801dc94:	f023 0903 	bic.w	r9, r3, #3
 801dc98:	45b9      	cmp	r9, r7
 801dc9a:	d304      	bcc.n	801dca6 <_malloc_r+0x1da>
 801dc9c:	eba9 0207 	sub.w	r2, r9, r7
 801dca0:	2a0f      	cmp	r2, #15
 801dca2:	f300 8141 	bgt.w	801df28 <_malloc_r+0x45c>
 801dca6:	4b46      	ldr	r3, [pc, #280]	@ (801ddc0 <_malloc_r+0x2f4>)
 801dca8:	6819      	ldr	r1, [r3, #0]
 801dcaa:	3110      	adds	r1, #16
 801dcac:	4439      	add	r1, r7
 801dcae:	2008      	movs	r0, #8
 801dcb0:	9101      	str	r1, [sp, #4]
 801dcb2:	f001 fc73 	bl	801f59c <sysconf>
 801dcb6:	4a43      	ldr	r2, [pc, #268]	@ (801ddc4 <_malloc_r+0x2f8>)
 801dcb8:	9901      	ldr	r1, [sp, #4]
 801dcba:	6813      	ldr	r3, [r2, #0]
 801dcbc:	3301      	adds	r3, #1
 801dcbe:	bf1f      	itttt	ne
 801dcc0:	f101 31ff 	addne.w	r1, r1, #4294967295
 801dcc4:	1809      	addne	r1, r1, r0
 801dcc6:	4243      	negne	r3, r0
 801dcc8:	4019      	andne	r1, r3
 801dcca:	4680      	mov	r8, r0
 801dccc:	4628      	mov	r0, r5
 801dcce:	9101      	str	r1, [sp, #4]
 801dcd0:	f001 fc40 	bl	801f554 <_sbrk_r>
 801dcd4:	1c42      	adds	r2, r0, #1
 801dcd6:	eb0a 0b09 	add.w	fp, sl, r9
 801dcda:	4604      	mov	r4, r0
 801dcdc:	f000 80f7 	beq.w	801dece <_malloc_r+0x402>
 801dce0:	4583      	cmp	fp, r0
 801dce2:	9901      	ldr	r1, [sp, #4]
 801dce4:	4a37      	ldr	r2, [pc, #220]	@ (801ddc4 <_malloc_r+0x2f8>)
 801dce6:	d902      	bls.n	801dcee <_malloc_r+0x222>
 801dce8:	45b2      	cmp	sl, r6
 801dcea:	f040 80f0 	bne.w	801dece <_malloc_r+0x402>
 801dcee:	4b36      	ldr	r3, [pc, #216]	@ (801ddc8 <_malloc_r+0x2fc>)
 801dcf0:	6818      	ldr	r0, [r3, #0]
 801dcf2:	45a3      	cmp	fp, r4
 801dcf4:	eb00 0e01 	add.w	lr, r0, r1
 801dcf8:	f8c3 e000 	str.w	lr, [r3]
 801dcfc:	f108 3cff 	add.w	ip, r8, #4294967295
 801dd00:	f040 80ab 	bne.w	801de5a <_malloc_r+0x38e>
 801dd04:	ea1b 0f0c 	tst.w	fp, ip
 801dd08:	f040 80a7 	bne.w	801de5a <_malloc_r+0x38e>
 801dd0c:	68b2      	ldr	r2, [r6, #8]
 801dd0e:	4449      	add	r1, r9
 801dd10:	f041 0101 	orr.w	r1, r1, #1
 801dd14:	6051      	str	r1, [r2, #4]
 801dd16:	4a2d      	ldr	r2, [pc, #180]	@ (801ddcc <_malloc_r+0x300>)
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	6811      	ldr	r1, [r2, #0]
 801dd1c:	428b      	cmp	r3, r1
 801dd1e:	bf88      	it	hi
 801dd20:	6013      	strhi	r3, [r2, #0]
 801dd22:	4a2b      	ldr	r2, [pc, #172]	@ (801ddd0 <_malloc_r+0x304>)
 801dd24:	6811      	ldr	r1, [r2, #0]
 801dd26:	428b      	cmp	r3, r1
 801dd28:	bf88      	it	hi
 801dd2a:	6013      	strhi	r3, [r2, #0]
 801dd2c:	e0cf      	b.n	801dece <_malloc_r+0x402>
 801dd2e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 801dd32:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801dd36:	d218      	bcs.n	801dd6a <_malloc_r+0x29e>
 801dd38:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801dd3c:	3238      	adds	r2, #56	@ 0x38
 801dd3e:	f102 0e01 	add.w	lr, r2, #1
 801dd42:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801dd46:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801dd4a:	45f0      	cmp	r8, lr
 801dd4c:	d12b      	bne.n	801dda6 <_malloc_r+0x2da>
 801dd4e:	1092      	asrs	r2, r2, #2
 801dd50:	f04f 0c01 	mov.w	ip, #1
 801dd54:	fa0c f202 	lsl.w	r2, ip, r2
 801dd58:	4302      	orrs	r2, r0
 801dd5a:	6072      	str	r2, [r6, #4]
 801dd5c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801dd60:	f8c8 4008 	str.w	r4, [r8, #8]
 801dd64:	f8ce 400c 	str.w	r4, [lr, #12]
 801dd68:	e763      	b.n	801dc32 <_malloc_r+0x166>
 801dd6a:	2a14      	cmp	r2, #20
 801dd6c:	d801      	bhi.n	801dd72 <_malloc_r+0x2a6>
 801dd6e:	325b      	adds	r2, #91	@ 0x5b
 801dd70:	e7e5      	b.n	801dd3e <_malloc_r+0x272>
 801dd72:	2a54      	cmp	r2, #84	@ 0x54
 801dd74:	d803      	bhi.n	801dd7e <_malloc_r+0x2b2>
 801dd76:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801dd7a:	326e      	adds	r2, #110	@ 0x6e
 801dd7c:	e7df      	b.n	801dd3e <_malloc_r+0x272>
 801dd7e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801dd82:	d803      	bhi.n	801dd8c <_malloc_r+0x2c0>
 801dd84:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801dd88:	3277      	adds	r2, #119	@ 0x77
 801dd8a:	e7d8      	b.n	801dd3e <_malloc_r+0x272>
 801dd8c:	f240 5e54 	movw	lr, #1364	@ 0x554
 801dd90:	4572      	cmp	r2, lr
 801dd92:	bf9a      	itte	ls
 801dd94:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801dd98:	327c      	addls	r2, #124	@ 0x7c
 801dd9a:	227e      	movhi	r2, #126	@ 0x7e
 801dd9c:	e7cf      	b.n	801dd3e <_malloc_r+0x272>
 801dd9e:	f8de e008 	ldr.w	lr, [lr, #8]
 801dda2:	45f0      	cmp	r8, lr
 801dda4:	d005      	beq.n	801ddb2 <_malloc_r+0x2e6>
 801dda6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ddaa:	f022 0203 	bic.w	r2, r2, #3
 801ddae:	4562      	cmp	r2, ip
 801ddb0:	d8f5      	bhi.n	801dd9e <_malloc_r+0x2d2>
 801ddb2:	f8de 800c 	ldr.w	r8, [lr, #12]
 801ddb6:	e7d1      	b.n	801dd5c <_malloc_r+0x290>
 801ddb8:	20000284 	.word	0x20000284
 801ddbc:	2000028c 	.word	0x2000028c
 801ddc0:	2000d4e8 	.word	0x2000d4e8
 801ddc4:	2000027c 	.word	0x2000027c
 801ddc8:	2000d4b8 	.word	0x2000d4b8
 801ddcc:	2000d4e4 	.word	0x2000d4e4
 801ddd0:	2000d4e0 	.word	0x2000d4e0
 801ddd4:	6860      	ldr	r0, [r4, #4]
 801ddd6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801ddda:	f020 0003 	bic.w	r0, r0, #3
 801ddde:	eba0 0a07 	sub.w	sl, r0, r7
 801dde2:	f1ba 0f0f 	cmp.w	sl, #15
 801dde6:	dd12      	ble.n	801de0e <_malloc_r+0x342>
 801dde8:	68a3      	ldr	r3, [r4, #8]
 801ddea:	19e2      	adds	r2, r4, r7
 801ddec:	f047 0701 	orr.w	r7, r7, #1
 801ddf0:	6067      	str	r7, [r4, #4]
 801ddf2:	f8c3 c00c 	str.w	ip, [r3, #12]
 801ddf6:	f8cc 3008 	str.w	r3, [ip, #8]
 801ddfa:	f04a 0301 	orr.w	r3, sl, #1
 801ddfe:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801de02:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801de06:	6053      	str	r3, [r2, #4]
 801de08:	f844 a000 	str.w	sl, [r4, r0]
 801de0c:	e68f      	b.n	801db2e <_malloc_r+0x62>
 801de0e:	f1ba 0f00 	cmp.w	sl, #0
 801de12:	db11      	blt.n	801de38 <_malloc_r+0x36c>
 801de14:	4420      	add	r0, r4
 801de16:	6843      	ldr	r3, [r0, #4]
 801de18:	f043 0301 	orr.w	r3, r3, #1
 801de1c:	6043      	str	r3, [r0, #4]
 801de1e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801de22:	4628      	mov	r0, r5
 801de24:	f8c3 c00c 	str.w	ip, [r3, #12]
 801de28:	f8cc 3008 	str.w	r3, [ip, #8]
 801de2c:	f000 f88e 	bl	801df4c <__malloc_unlock>
 801de30:	4620      	mov	r0, r4
 801de32:	b003      	add	sp, #12
 801de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de38:	4664      	mov	r4, ip
 801de3a:	e70f      	b.n	801dc5c <_malloc_r+0x190>
 801de3c:	f858 0908 	ldr.w	r0, [r8], #-8
 801de40:	4540      	cmp	r0, r8
 801de42:	f103 33ff 	add.w	r3, r3, #4294967295
 801de46:	f43f af13 	beq.w	801dc70 <_malloc_r+0x1a4>
 801de4a:	e718      	b.n	801dc7e <_malloc_r+0x1b2>
 801de4c:	3304      	adds	r3, #4
 801de4e:	0052      	lsls	r2, r2, #1
 801de50:	4210      	tst	r0, r2
 801de52:	d0fb      	beq.n	801de4c <_malloc_r+0x380>
 801de54:	e6fc      	b.n	801dc50 <_malloc_r+0x184>
 801de56:	4673      	mov	r3, lr
 801de58:	e7fa      	b.n	801de50 <_malloc_r+0x384>
 801de5a:	6810      	ldr	r0, [r2, #0]
 801de5c:	3001      	adds	r0, #1
 801de5e:	bf1b      	ittet	ne
 801de60:	eba4 0b0b 	subne.w	fp, r4, fp
 801de64:	eb0b 020e 	addne.w	r2, fp, lr
 801de68:	6014      	streq	r4, [r2, #0]
 801de6a:	601a      	strne	r2, [r3, #0]
 801de6c:	f014 0b07 	ands.w	fp, r4, #7
 801de70:	bf1a      	itte	ne
 801de72:	f1cb 0008 	rsbne	r0, fp, #8
 801de76:	1824      	addne	r4, r4, r0
 801de78:	4658      	moveq	r0, fp
 801de7a:	1862      	adds	r2, r4, r1
 801de7c:	ea02 010c 	and.w	r1, r2, ip
 801de80:	4480      	add	r8, r0
 801de82:	eba8 0801 	sub.w	r8, r8, r1
 801de86:	ea08 080c 	and.w	r8, r8, ip
 801de8a:	4641      	mov	r1, r8
 801de8c:	4628      	mov	r0, r5
 801de8e:	9201      	str	r2, [sp, #4]
 801de90:	f001 fb60 	bl	801f554 <_sbrk_r>
 801de94:	1c43      	adds	r3, r0, #1
 801de96:	9a01      	ldr	r2, [sp, #4]
 801de98:	4b28      	ldr	r3, [pc, #160]	@ (801df3c <_malloc_r+0x470>)
 801de9a:	d107      	bne.n	801deac <_malloc_r+0x3e0>
 801de9c:	f1bb 0f00 	cmp.w	fp, #0
 801dea0:	d023      	beq.n	801deea <_malloc_r+0x41e>
 801dea2:	f1ab 0008 	sub.w	r0, fp, #8
 801dea6:	4410      	add	r0, r2
 801dea8:	f04f 0800 	mov.w	r8, #0
 801deac:	681a      	ldr	r2, [r3, #0]
 801deae:	60b4      	str	r4, [r6, #8]
 801deb0:	1b00      	subs	r0, r0, r4
 801deb2:	4440      	add	r0, r8
 801deb4:	4442      	add	r2, r8
 801deb6:	f040 0001 	orr.w	r0, r0, #1
 801deba:	45b2      	cmp	sl, r6
 801debc:	601a      	str	r2, [r3, #0]
 801debe:	6060      	str	r0, [r4, #4]
 801dec0:	f43f af29 	beq.w	801dd16 <_malloc_r+0x24a>
 801dec4:	f1b9 0f0f 	cmp.w	r9, #15
 801dec8:	d812      	bhi.n	801def0 <_malloc_r+0x424>
 801deca:	2301      	movs	r3, #1
 801decc:	6063      	str	r3, [r4, #4]
 801dece:	68b3      	ldr	r3, [r6, #8]
 801ded0:	685b      	ldr	r3, [r3, #4]
 801ded2:	f023 0303 	bic.w	r3, r3, #3
 801ded6:	42bb      	cmp	r3, r7
 801ded8:	eba3 0207 	sub.w	r2, r3, r7
 801dedc:	d301      	bcc.n	801dee2 <_malloc_r+0x416>
 801dede:	2a0f      	cmp	r2, #15
 801dee0:	dc22      	bgt.n	801df28 <_malloc_r+0x45c>
 801dee2:	4628      	mov	r0, r5
 801dee4:	f000 f832 	bl	801df4c <__malloc_unlock>
 801dee8:	e5fc      	b.n	801dae4 <_malloc_r+0x18>
 801deea:	4610      	mov	r0, r2
 801deec:	46d8      	mov	r8, fp
 801deee:	e7dd      	b.n	801deac <_malloc_r+0x3e0>
 801def0:	f8da 2004 	ldr.w	r2, [sl, #4]
 801def4:	f1a9 090c 	sub.w	r9, r9, #12
 801def8:	f029 0907 	bic.w	r9, r9, #7
 801defc:	f002 0201 	and.w	r2, r2, #1
 801df00:	ea42 0209 	orr.w	r2, r2, r9
 801df04:	f8ca 2004 	str.w	r2, [sl, #4]
 801df08:	2105      	movs	r1, #5
 801df0a:	eb0a 0209 	add.w	r2, sl, r9
 801df0e:	f1b9 0f0f 	cmp.w	r9, #15
 801df12:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801df16:	f67f aefe 	bls.w	801dd16 <_malloc_r+0x24a>
 801df1a:	f10a 0108 	add.w	r1, sl, #8
 801df1e:	4628      	mov	r0, r5
 801df20:	f7ff fd14 	bl	801d94c <_free_r>
 801df24:	4b05      	ldr	r3, [pc, #20]	@ (801df3c <_malloc_r+0x470>)
 801df26:	e6f6      	b.n	801dd16 <_malloc_r+0x24a>
 801df28:	68b4      	ldr	r4, [r6, #8]
 801df2a:	f047 0301 	orr.w	r3, r7, #1
 801df2e:	4427      	add	r7, r4
 801df30:	f042 0201 	orr.w	r2, r2, #1
 801df34:	6063      	str	r3, [r4, #4]
 801df36:	60b7      	str	r7, [r6, #8]
 801df38:	607a      	str	r2, [r7, #4]
 801df3a:	e5f8      	b.n	801db2e <_malloc_r+0x62>
 801df3c:	2000d4b8 	.word	0x2000d4b8

0801df40 <__malloc_lock>:
 801df40:	4801      	ldr	r0, [pc, #4]	@ (801df48 <__malloc_lock+0x8>)
 801df42:	f7ff bc8d 	b.w	801d860 <__retarget_lock_acquire_recursive>
 801df46:	bf00      	nop
 801df48:	2000d4b0 	.word	0x2000d4b0

0801df4c <__malloc_unlock>:
 801df4c:	4801      	ldr	r0, [pc, #4]	@ (801df54 <__malloc_unlock+0x8>)
 801df4e:	f7ff bc88 	b.w	801d862 <__retarget_lock_release_recursive>
 801df52:	bf00      	nop
 801df54:	2000d4b0 	.word	0x2000d4b0

0801df58 <_svfprintf_r>:
 801df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df5c:	b0d3      	sub	sp, #332	@ 0x14c
 801df5e:	468b      	mov	fp, r1
 801df60:	4691      	mov	r9, r2
 801df62:	461e      	mov	r6, r3
 801df64:	9003      	str	r0, [sp, #12]
 801df66:	f001 faf1 	bl	801f54c <_localeconv_r>
 801df6a:	6803      	ldr	r3, [r0, #0]
 801df6c:	9316      	str	r3, [sp, #88]	@ 0x58
 801df6e:	4618      	mov	r0, r3
 801df70:	f7e2 f92e 	bl	80001d0 <strlen>
 801df74:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801df78:	900d      	str	r0, [sp, #52]	@ 0x34
 801df7a:	061b      	lsls	r3, r3, #24
 801df7c:	d515      	bpl.n	801dfaa <_svfprintf_r+0x52>
 801df7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 801df82:	b993      	cbnz	r3, 801dfaa <_svfprintf_r+0x52>
 801df84:	9803      	ldr	r0, [sp, #12]
 801df86:	2140      	movs	r1, #64	@ 0x40
 801df88:	f7ff fda0 	bl	801dacc <_malloc_r>
 801df8c:	f8cb 0000 	str.w	r0, [fp]
 801df90:	f8cb 0010 	str.w	r0, [fp, #16]
 801df94:	b930      	cbnz	r0, 801dfa4 <_svfprintf_r+0x4c>
 801df96:	9a03      	ldr	r2, [sp, #12]
 801df98:	230c      	movs	r3, #12
 801df9a:	6013      	str	r3, [r2, #0]
 801df9c:	f04f 33ff 	mov.w	r3, #4294967295
 801dfa0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dfa2:	e1f7      	b.n	801e394 <_svfprintf_r+0x43c>
 801dfa4:	2340      	movs	r3, #64	@ 0x40
 801dfa6:	f8cb 3014 	str.w	r3, [fp, #20]
 801dfaa:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 801e1f8 <_svfprintf_r+0x2a0>
 801dfae:	2300      	movs	r3, #0
 801dfb0:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801dfb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801dfb8:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801dfbc:	ac29      	add	r4, sp, #164	@ 0xa4
 801dfbe:	9426      	str	r4, [sp, #152]	@ 0x98
 801dfc0:	9304      	str	r3, [sp, #16]
 801dfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfc4:	9312      	str	r3, [sp, #72]	@ 0x48
 801dfc6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dfc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dfca:	464b      	mov	r3, r9
 801dfcc:	461d      	mov	r5, r3
 801dfce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dfd2:	b10a      	cbz	r2, 801dfd8 <_svfprintf_r+0x80>
 801dfd4:	2a25      	cmp	r2, #37	@ 0x25
 801dfd6:	d1f9      	bne.n	801dfcc <_svfprintf_r+0x74>
 801dfd8:	ebb5 0709 	subs.w	r7, r5, r9
 801dfdc:	d00d      	beq.n	801dffa <_svfprintf_r+0xa2>
 801dfde:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dfe0:	443b      	add	r3, r7
 801dfe2:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dfe4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dfe6:	3301      	adds	r3, #1
 801dfe8:	2b07      	cmp	r3, #7
 801dfea:	e9c4 9700 	strd	r9, r7, [r4]
 801dfee:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dff0:	dc75      	bgt.n	801e0de <_svfprintf_r+0x186>
 801dff2:	3408      	adds	r4, #8
 801dff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dff6:	443b      	add	r3, r7
 801dff8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dffa:	782b      	ldrb	r3, [r5, #0]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	f001 8148 	beq.w	801f292 <_svfprintf_r+0x133a>
 801e002:	2200      	movs	r2, #0
 801e004:	1c6b      	adds	r3, r5, #1
 801e006:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801e00a:	f04f 38ff 	mov.w	r8, #4294967295
 801e00e:	920e      	str	r2, [sp, #56]	@ 0x38
 801e010:	4615      	mov	r5, r2
 801e012:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e016:	9206      	str	r2, [sp, #24]
 801e018:	930c      	str	r3, [sp, #48]	@ 0x30
 801e01a:	9b06      	ldr	r3, [sp, #24]
 801e01c:	3b20      	subs	r3, #32
 801e01e:	2b5a      	cmp	r3, #90	@ 0x5a
 801e020:	f200 85a4 	bhi.w	801eb6c <_svfprintf_r+0xc14>
 801e024:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e028:	05a2009d 	.word	0x05a2009d
 801e02c:	00a505a2 	.word	0x00a505a2
 801e030:	05a205a2 	.word	0x05a205a2
 801e034:	008505a2 	.word	0x008505a2
 801e038:	05a205a2 	.word	0x05a205a2
 801e03c:	00b200a8 	.word	0x00b200a8
 801e040:	00af05a2 	.word	0x00af05a2
 801e044:	05a200b4 	.word	0x05a200b4
 801e048:	00d100ce 	.word	0x00d100ce
 801e04c:	00d100d1 	.word	0x00d100d1
 801e050:	00d100d1 	.word	0x00d100d1
 801e054:	00d100d1 	.word	0x00d100d1
 801e058:	00d100d1 	.word	0x00d100d1
 801e05c:	05a205a2 	.word	0x05a205a2
 801e060:	05a205a2 	.word	0x05a205a2
 801e064:	05a205a2 	.word	0x05a205a2
 801e068:	014705a2 	.word	0x014705a2
 801e06c:	010805a2 	.word	0x010805a2
 801e070:	0147011b 	.word	0x0147011b
 801e074:	01470147 	.word	0x01470147
 801e078:	05a205a2 	.word	0x05a205a2
 801e07c:	05a205a2 	.word	0x05a205a2
 801e080:	05a200e2 	.word	0x05a200e2
 801e084:	049d05a2 	.word	0x049d05a2
 801e088:	05a205a2 	.word	0x05a205a2
 801e08c:	04e705a2 	.word	0x04e705a2
 801e090:	050805a2 	.word	0x050805a2
 801e094:	05a205a2 	.word	0x05a205a2
 801e098:	05a2052a 	.word	0x05a2052a
 801e09c:	05a205a2 	.word	0x05a205a2
 801e0a0:	05a205a2 	.word	0x05a205a2
 801e0a4:	05a205a2 	.word	0x05a205a2
 801e0a8:	014705a2 	.word	0x014705a2
 801e0ac:	010805a2 	.word	0x010805a2
 801e0b0:	0147011d 	.word	0x0147011d
 801e0b4:	01470147 	.word	0x01470147
 801e0b8:	011d00ee 	.word	0x011d00ee
 801e0bc:	05a20102 	.word	0x05a20102
 801e0c0:	05a200fb 	.word	0x05a200fb
 801e0c4:	049f047e 	.word	0x049f047e
 801e0c8:	010204d6 	.word	0x010204d6
 801e0cc:	04e705a2 	.word	0x04e705a2
 801e0d0:	050a009b 	.word	0x050a009b
 801e0d4:	05a205a2 	.word	0x05a205a2
 801e0d8:	05a20065 	.word	0x05a20065
 801e0dc:	009b      	.short	0x009b
 801e0de:	9803      	ldr	r0, [sp, #12]
 801e0e0:	aa26      	add	r2, sp, #152	@ 0x98
 801e0e2:	4659      	mov	r1, fp
 801e0e4:	f002 fe0b 	bl	8020cfe <__ssprint_r>
 801e0e8:	2800      	cmp	r0, #0
 801e0ea:	f040 814e 	bne.w	801e38a <_svfprintf_r+0x432>
 801e0ee:	ac29      	add	r4, sp, #164	@ 0xa4
 801e0f0:	e780      	b.n	801dff4 <_svfprintf_r+0x9c>
 801e0f2:	4b43      	ldr	r3, [pc, #268]	@ (801e200 <_svfprintf_r+0x2a8>)
 801e0f4:	9319      	str	r3, [sp, #100]	@ 0x64
 801e0f6:	f015 0320 	ands.w	r3, r5, #32
 801e0fa:	f000 84c2 	beq.w	801ea82 <_svfprintf_r+0xb2a>
 801e0fe:	3607      	adds	r6, #7
 801e100:	f026 0307 	bic.w	r3, r6, #7
 801e104:	461a      	mov	r2, r3
 801e106:	685f      	ldr	r7, [r3, #4]
 801e108:	f852 6b08 	ldr.w	r6, [r2], #8
 801e10c:	9207      	str	r2, [sp, #28]
 801e10e:	07eb      	lsls	r3, r5, #31
 801e110:	d50a      	bpl.n	801e128 <_svfprintf_r+0x1d0>
 801e112:	ea56 0307 	orrs.w	r3, r6, r7
 801e116:	d007      	beq.n	801e128 <_svfprintf_r+0x1d0>
 801e118:	2330      	movs	r3, #48	@ 0x30
 801e11a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801e11e:	9b06      	ldr	r3, [sp, #24]
 801e120:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801e124:	f045 0502 	orr.w	r5, r5, #2
 801e128:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801e12c:	2302      	movs	r3, #2
 801e12e:	f000 bc28 	b.w	801e982 <_svfprintf_r+0xa2a>
 801e132:	9803      	ldr	r0, [sp, #12]
 801e134:	f001 fa0a 	bl	801f54c <_localeconv_r>
 801e138:	6843      	ldr	r3, [r0, #4]
 801e13a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e13c:	4618      	mov	r0, r3
 801e13e:	f7e2 f847 	bl	80001d0 <strlen>
 801e142:	9012      	str	r0, [sp, #72]	@ 0x48
 801e144:	9803      	ldr	r0, [sp, #12]
 801e146:	f001 fa01 	bl	801f54c <_localeconv_r>
 801e14a:	6883      	ldr	r3, [r0, #8]
 801e14c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e14e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e150:	b12b      	cbz	r3, 801e15e <_svfprintf_r+0x206>
 801e152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e154:	b11b      	cbz	r3, 801e15e <_svfprintf_r+0x206>
 801e156:	781b      	ldrb	r3, [r3, #0]
 801e158:	b10b      	cbz	r3, 801e15e <_svfprintf_r+0x206>
 801e15a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801e15e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e160:	e757      	b.n	801e012 <_svfprintf_r+0xba>
 801e162:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801e166:	2b00      	cmp	r3, #0
 801e168:	d1f9      	bne.n	801e15e <_svfprintf_r+0x206>
 801e16a:	2320      	movs	r3, #32
 801e16c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e170:	e7f5      	b.n	801e15e <_svfprintf_r+0x206>
 801e172:	f045 0501 	orr.w	r5, r5, #1
 801e176:	e7f2      	b.n	801e15e <_svfprintf_r+0x206>
 801e178:	f856 3b04 	ldr.w	r3, [r6], #4
 801e17c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e17e:	2b00      	cmp	r3, #0
 801e180:	daed      	bge.n	801e15e <_svfprintf_r+0x206>
 801e182:	425b      	negs	r3, r3
 801e184:	930e      	str	r3, [sp, #56]	@ 0x38
 801e186:	f045 0504 	orr.w	r5, r5, #4
 801e18a:	e7e8      	b.n	801e15e <_svfprintf_r+0x206>
 801e18c:	232b      	movs	r3, #43	@ 0x2b
 801e18e:	e7ed      	b.n	801e16c <_svfprintf_r+0x214>
 801e190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e192:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e196:	9206      	str	r2, [sp, #24]
 801e198:	2a2a      	cmp	r2, #42	@ 0x2a
 801e19a:	d10f      	bne.n	801e1bc <_svfprintf_r+0x264>
 801e19c:	f856 2b04 	ldr.w	r2, [r6], #4
 801e1a0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e1a2:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 801e1a6:	e7da      	b.n	801e15e <_svfprintf_r+0x206>
 801e1a8:	fb01 2808 	mla	r8, r1, r8, r2
 801e1ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1b0:	9206      	str	r2, [sp, #24]
 801e1b2:	9a06      	ldr	r2, [sp, #24]
 801e1b4:	3a30      	subs	r2, #48	@ 0x30
 801e1b6:	2a09      	cmp	r2, #9
 801e1b8:	d9f6      	bls.n	801e1a8 <_svfprintf_r+0x250>
 801e1ba:	e72d      	b.n	801e018 <_svfprintf_r+0xc0>
 801e1bc:	f04f 0800 	mov.w	r8, #0
 801e1c0:	210a      	movs	r1, #10
 801e1c2:	e7f6      	b.n	801e1b2 <_svfprintf_r+0x25a>
 801e1c4:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801e1c8:	e7c9      	b.n	801e15e <_svfprintf_r+0x206>
 801e1ca:	2200      	movs	r2, #0
 801e1cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e1ce:	920e      	str	r2, [sp, #56]	@ 0x38
 801e1d0:	210a      	movs	r1, #10
 801e1d2:	9a06      	ldr	r2, [sp, #24]
 801e1d4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e1d6:	3a30      	subs	r2, #48	@ 0x30
 801e1d8:	fb01 2200 	mla	r2, r1, r0, r2
 801e1dc:	920e      	str	r2, [sp, #56]	@ 0x38
 801e1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1e2:	9206      	str	r2, [sp, #24]
 801e1e4:	3a30      	subs	r2, #48	@ 0x30
 801e1e6:	2a09      	cmp	r2, #9
 801e1e8:	d9f3      	bls.n	801e1d2 <_svfprintf_r+0x27a>
 801e1ea:	e715      	b.n	801e018 <_svfprintf_r+0xc0>
 801e1ec:	f045 0508 	orr.w	r5, r5, #8
 801e1f0:	e7b5      	b.n	801e15e <_svfprintf_r+0x206>
 801e1f2:	bf00      	nop
 801e1f4:	f3af 8000 	nop.w
	...
 801e200:	08024b5c 	.word	0x08024b5c
 801e204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e206:	781b      	ldrb	r3, [r3, #0]
 801e208:	2b68      	cmp	r3, #104	@ 0x68
 801e20a:	bf01      	itttt	eq
 801e20c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801e20e:	3301      	addeq	r3, #1
 801e210:	930c      	streq	r3, [sp, #48]	@ 0x30
 801e212:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801e216:	bf18      	it	ne
 801e218:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801e21c:	e79f      	b.n	801e15e <_svfprintf_r+0x206>
 801e21e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e220:	781b      	ldrb	r3, [r3, #0]
 801e222:	2b6c      	cmp	r3, #108	@ 0x6c
 801e224:	d105      	bne.n	801e232 <_svfprintf_r+0x2da>
 801e226:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e228:	3301      	adds	r3, #1
 801e22a:	930c      	str	r3, [sp, #48]	@ 0x30
 801e22c:	f045 0520 	orr.w	r5, r5, #32
 801e230:	e795      	b.n	801e15e <_svfprintf_r+0x206>
 801e232:	f045 0510 	orr.w	r5, r5, #16
 801e236:	e792      	b.n	801e15e <_svfprintf_r+0x206>
 801e238:	4632      	mov	r2, r6
 801e23a:	f852 3b04 	ldr.w	r3, [r2], #4
 801e23e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801e242:	2300      	movs	r3, #0
 801e244:	9207      	str	r2, [sp, #28]
 801e246:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e24a:	469a      	mov	sl, r3
 801e24c:	f04f 0801 	mov.w	r8, #1
 801e250:	9310      	str	r3, [sp, #64]	@ 0x40
 801e252:	461f      	mov	r7, r3
 801e254:	9308      	str	r3, [sp, #32]
 801e256:	461e      	mov	r6, r3
 801e258:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801e25c:	e1d2      	b.n	801e604 <_svfprintf_r+0x6ac>
 801e25e:	f045 0510 	orr.w	r5, r5, #16
 801e262:	06af      	lsls	r7, r5, #26
 801e264:	d512      	bpl.n	801e28c <_svfprintf_r+0x334>
 801e266:	3607      	adds	r6, #7
 801e268:	f026 0307 	bic.w	r3, r6, #7
 801e26c:	461a      	mov	r2, r3
 801e26e:	685f      	ldr	r7, [r3, #4]
 801e270:	f852 6b08 	ldr.w	r6, [r2], #8
 801e274:	9207      	str	r2, [sp, #28]
 801e276:	2f00      	cmp	r7, #0
 801e278:	da06      	bge.n	801e288 <_svfprintf_r+0x330>
 801e27a:	4276      	negs	r6, r6
 801e27c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801e280:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801e284:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e288:	2301      	movs	r3, #1
 801e28a:	e37d      	b.n	801e988 <_svfprintf_r+0xa30>
 801e28c:	4633      	mov	r3, r6
 801e28e:	06ee      	lsls	r6, r5, #27
 801e290:	f853 7b04 	ldr.w	r7, [r3], #4
 801e294:	9307      	str	r3, [sp, #28]
 801e296:	d502      	bpl.n	801e29e <_svfprintf_r+0x346>
 801e298:	463e      	mov	r6, r7
 801e29a:	17ff      	asrs	r7, r7, #31
 801e29c:	e7eb      	b.n	801e276 <_svfprintf_r+0x31e>
 801e29e:	0668      	lsls	r0, r5, #25
 801e2a0:	d503      	bpl.n	801e2aa <_svfprintf_r+0x352>
 801e2a2:	b23e      	sxth	r6, r7
 801e2a4:	f347 37c0 	sbfx	r7, r7, #15, #1
 801e2a8:	e7e5      	b.n	801e276 <_svfprintf_r+0x31e>
 801e2aa:	05a9      	lsls	r1, r5, #22
 801e2ac:	d5f4      	bpl.n	801e298 <_svfprintf_r+0x340>
 801e2ae:	b27e      	sxtb	r6, r7
 801e2b0:	f347 17c0 	sbfx	r7, r7, #7, #1
 801e2b4:	e7df      	b.n	801e276 <_svfprintf_r+0x31e>
 801e2b6:	3607      	adds	r6, #7
 801e2b8:	f026 0307 	bic.w	r3, r6, #7
 801e2bc:	ecb3 7b02 	vldmia	r3!, {d7}
 801e2c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801e2c4:	9307      	str	r3, [sp, #28]
 801e2c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e2c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801e2ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e2cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e2d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e2d2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801e2d6:	4b81      	ldr	r3, [pc, #516]	@ (801e4dc <_svfprintf_r+0x584>)
 801e2d8:	f04f 32ff 	mov.w	r2, #4294967295
 801e2dc:	f7e2 fc26 	bl	8000b2c <__aeabi_dcmpun>
 801e2e0:	bb10      	cbnz	r0, 801e328 <_svfprintf_r+0x3d0>
 801e2e2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801e2e6:	4b7d      	ldr	r3, [pc, #500]	@ (801e4dc <_svfprintf_r+0x584>)
 801e2e8:	f04f 32ff 	mov.w	r2, #4294967295
 801e2ec:	f7e2 fc00 	bl	8000af0 <__aeabi_dcmple>
 801e2f0:	b9d0      	cbnz	r0, 801e328 <_svfprintf_r+0x3d0>
 801e2f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801e2f6:	2200      	movs	r2, #0
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	f7e2 fbef 	bl	8000adc <__aeabi_dcmplt>
 801e2fe:	b110      	cbz	r0, 801e306 <_svfprintf_r+0x3ae>
 801e300:	232d      	movs	r3, #45	@ 0x2d
 801e302:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e306:	4a76      	ldr	r2, [pc, #472]	@ (801e4e0 <_svfprintf_r+0x588>)
 801e308:	4b76      	ldr	r3, [pc, #472]	@ (801e4e4 <_svfprintf_r+0x58c>)
 801e30a:	9906      	ldr	r1, [sp, #24]
 801e30c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801e310:	2947      	cmp	r1, #71	@ 0x47
 801e312:	bfd4      	ite	le
 801e314:	4691      	movle	r9, r2
 801e316:	4699      	movgt	r9, r3
 801e318:	f04f 0a00 	mov.w	sl, #0
 801e31c:	f04f 0803 	mov.w	r8, #3
 801e320:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 801e324:	f000 bfec 	b.w	801f300 <_svfprintf_r+0x13a8>
 801e328:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801e32c:	4610      	mov	r0, r2
 801e32e:	4619      	mov	r1, r3
 801e330:	f7e2 fbfc 	bl	8000b2c <__aeabi_dcmpun>
 801e334:	4682      	mov	sl, r0
 801e336:	b140      	cbz	r0, 801e34a <_svfprintf_r+0x3f2>
 801e338:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e33a:	4a6b      	ldr	r2, [pc, #428]	@ (801e4e8 <_svfprintf_r+0x590>)
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	bfbc      	itt	lt
 801e340:	232d      	movlt	r3, #45	@ 0x2d
 801e342:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801e346:	4b69      	ldr	r3, [pc, #420]	@ (801e4ec <_svfprintf_r+0x594>)
 801e348:	e7df      	b.n	801e30a <_svfprintf_r+0x3b2>
 801e34a:	9b06      	ldr	r3, [sp, #24]
 801e34c:	2b61      	cmp	r3, #97	@ 0x61
 801e34e:	d025      	beq.n	801e39c <_svfprintf_r+0x444>
 801e350:	2b41      	cmp	r3, #65	@ 0x41
 801e352:	d125      	bne.n	801e3a0 <_svfprintf_r+0x448>
 801e354:	2358      	movs	r3, #88	@ 0x58
 801e356:	2230      	movs	r2, #48	@ 0x30
 801e358:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801e35c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801e360:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801e364:	f045 0502 	orr.w	r5, r5, #2
 801e368:	f340 80a5 	ble.w	801e4b6 <_svfprintf_r+0x55e>
 801e36c:	9803      	ldr	r0, [sp, #12]
 801e36e:	f108 0101 	add.w	r1, r8, #1
 801e372:	f7ff fbab 	bl	801dacc <_malloc_r>
 801e376:	4681      	mov	r9, r0
 801e378:	2800      	cmp	r0, #0
 801e37a:	f040 80a1 	bne.w	801e4c0 <_svfprintf_r+0x568>
 801e37e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801e382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e386:	f8ab 300c 	strh.w	r3, [fp, #12]
 801e38a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801e38e:	065b      	lsls	r3, r3, #25
 801e390:	f53f ae04 	bmi.w	801df9c <_svfprintf_r+0x44>
 801e394:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e396:	b053      	add	sp, #332	@ 0x14c
 801e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e39c:	2378      	movs	r3, #120	@ 0x78
 801e39e:	e7da      	b.n	801e356 <_svfprintf_r+0x3fe>
 801e3a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e3a4:	f000 808e 	beq.w	801e4c4 <_svfprintf_r+0x56c>
 801e3a8:	9b06      	ldr	r3, [sp, #24]
 801e3aa:	f023 0320 	bic.w	r3, r3, #32
 801e3ae:	2b47      	cmp	r3, #71	@ 0x47
 801e3b0:	d105      	bne.n	801e3be <_svfprintf_r+0x466>
 801e3b2:	f1b8 0f00 	cmp.w	r8, #0
 801e3b6:	d102      	bne.n	801e3be <_svfprintf_r+0x466>
 801e3b8:	46c2      	mov	sl, r8
 801e3ba:	f04f 0801 	mov.w	r8, #1
 801e3be:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801e3c2:	9311      	str	r3, [sp, #68]	@ 0x44
 801e3c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	da7f      	bge.n	801e4ca <_svfprintf_r+0x572>
 801e3ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3cc:	9314      	str	r3, [sp, #80]	@ 0x50
 801e3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e3d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801e3d4:	9315      	str	r3, [sp, #84]	@ 0x54
 801e3d6:	232d      	movs	r3, #45	@ 0x2d
 801e3d8:	931c      	str	r3, [sp, #112]	@ 0x70
 801e3da:	9b06      	ldr	r3, [sp, #24]
 801e3dc:	f023 0320 	bic.w	r3, r3, #32
 801e3e0:	2b41      	cmp	r3, #65	@ 0x41
 801e3e2:	9308      	str	r3, [sp, #32]
 801e3e4:	f040 81e6 	bne.w	801e7b4 <_svfprintf_r+0x85c>
 801e3e8:	a820      	add	r0, sp, #128	@ 0x80
 801e3ea:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801e3ee:	f001 f8e1 	bl	801f5b4 <frexp>
 801e3f2:	2200      	movs	r2, #0
 801e3f4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801e3f8:	ec51 0b10 	vmov	r0, r1, d0
 801e3fc:	f7e2 f8fc 	bl	80005f8 <__aeabi_dmul>
 801e400:	4602      	mov	r2, r0
 801e402:	460b      	mov	r3, r1
 801e404:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e408:	2200      	movs	r2, #0
 801e40a:	2300      	movs	r3, #0
 801e40c:	f7e2 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 801e410:	b108      	cbz	r0, 801e416 <_svfprintf_r+0x4be>
 801e412:	2301      	movs	r3, #1
 801e414:	9320      	str	r3, [sp, #128]	@ 0x80
 801e416:	4a36      	ldr	r2, [pc, #216]	@ (801e4f0 <_svfprintf_r+0x598>)
 801e418:	4b36      	ldr	r3, [pc, #216]	@ (801e4f4 <_svfprintf_r+0x59c>)
 801e41a:	9906      	ldr	r1, [sp, #24]
 801e41c:	2961      	cmp	r1, #97	@ 0x61
 801e41e:	bf18      	it	ne
 801e420:	461a      	movne	r2, r3
 801e422:	9210      	str	r2, [sp, #64]	@ 0x40
 801e424:	f108 37ff 	add.w	r7, r8, #4294967295
 801e428:	464e      	mov	r6, r9
 801e42a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e42e:	4b32      	ldr	r3, [pc, #200]	@ (801e4f8 <_svfprintf_r+0x5a0>)
 801e430:	2200      	movs	r2, #0
 801e432:	f7e2 f8e1 	bl	80005f8 <__aeabi_dmul>
 801e436:	4602      	mov	r2, r0
 801e438:	460b      	mov	r3, r1
 801e43a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e43e:	f7e2 fb8b 	bl	8000b58 <__aeabi_d2iz>
 801e442:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e444:	f7e2 f86e 	bl	8000524 <__aeabi_i2d>
 801e448:	4602      	mov	r2, r0
 801e44a:	460b      	mov	r3, r1
 801e44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e450:	f7e1 ff1a 	bl	8000288 <__aeabi_dsub>
 801e454:	4602      	mov	r2, r0
 801e456:	460b      	mov	r3, r1
 801e458:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e45c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e45e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e460:	5c9b      	ldrb	r3, [r3, r2]
 801e462:	f806 3b01 	strb.w	r3, [r6], #1
 801e466:	1c7a      	adds	r2, r7, #1
 801e468:	d006      	beq.n	801e478 <_svfprintf_r+0x520>
 801e46a:	1e7b      	subs	r3, r7, #1
 801e46c:	931d      	str	r3, [sp, #116]	@ 0x74
 801e46e:	2200      	movs	r2, #0
 801e470:	2300      	movs	r3, #0
 801e472:	f7e2 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 801e476:	b370      	cbz	r0, 801e4d6 <_svfprintf_r+0x57e>
 801e478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e47c:	4b1f      	ldr	r3, [pc, #124]	@ (801e4fc <_svfprintf_r+0x5a4>)
 801e47e:	2200      	movs	r2, #0
 801e480:	f7e2 fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 801e484:	2800      	cmp	r0, #0
 801e486:	d13b      	bne.n	801e500 <_svfprintf_r+0x5a8>
 801e488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e48c:	4b1b      	ldr	r3, [pc, #108]	@ (801e4fc <_svfprintf_r+0x5a4>)
 801e48e:	2200      	movs	r2, #0
 801e490:	f7e2 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 801e494:	b110      	cbz	r0, 801e49c <_svfprintf_r+0x544>
 801e496:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e498:	07db      	lsls	r3, r3, #31
 801e49a:	d431      	bmi.n	801e500 <_svfprintf_r+0x5a8>
 801e49c:	4633      	mov	r3, r6
 801e49e:	19f1      	adds	r1, r6, r7
 801e4a0:	2030      	movs	r0, #48	@ 0x30
 801e4a2:	1aca      	subs	r2, r1, r3
 801e4a4:	2a00      	cmp	r2, #0
 801e4a6:	f280 8182 	bge.w	801e7ae <_svfprintf_r+0x856>
 801e4aa:	1c7b      	adds	r3, r7, #1
 801e4ac:	3701      	adds	r7, #1
 801e4ae:	bfb8      	it	lt
 801e4b0:	2300      	movlt	r3, #0
 801e4b2:	441e      	add	r6, r3
 801e4b4:	e038      	b.n	801e528 <_svfprintf_r+0x5d0>
 801e4b6:	f04f 0a00 	mov.w	sl, #0
 801e4ba:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801e4be:	e77e      	b.n	801e3be <_svfprintf_r+0x466>
 801e4c0:	4682      	mov	sl, r0
 801e4c2:	e77c      	b.n	801e3be <_svfprintf_r+0x466>
 801e4c4:	f04f 0806 	mov.w	r8, #6
 801e4c8:	e779      	b.n	801e3be <_svfprintf_r+0x466>
 801e4ca:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 801e4ce:	2300      	movs	r3, #0
 801e4d0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801e4d4:	e780      	b.n	801e3d8 <_svfprintf_r+0x480>
 801e4d6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801e4d8:	e7a7      	b.n	801e42a <_svfprintf_r+0x4d2>
 801e4da:	bf00      	nop
 801e4dc:	7fefffff 	.word	0x7fefffff
 801e4e0:	08024b4c 	.word	0x08024b4c
 801e4e4:	08024b50 	.word	0x08024b50
 801e4e8:	08024b54 	.word	0x08024b54
 801e4ec:	08024b58 	.word	0x08024b58
 801e4f0:	08024b5c 	.word	0x08024b5c
 801e4f4:	08024b6d 	.word	0x08024b6d
 801e4f8:	40300000 	.word	0x40300000
 801e4fc:	3fe00000 	.word	0x3fe00000
 801e500:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e502:	9624      	str	r6, [sp, #144]	@ 0x90
 801e504:	7bd9      	ldrb	r1, [r3, #15]
 801e506:	2030      	movs	r0, #48	@ 0x30
 801e508:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e50a:	1e53      	subs	r3, r2, #1
 801e50c:	9324      	str	r3, [sp, #144]	@ 0x90
 801e50e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801e512:	428b      	cmp	r3, r1
 801e514:	f000 8148 	beq.w	801e7a8 <_svfprintf_r+0x850>
 801e518:	2b39      	cmp	r3, #57	@ 0x39
 801e51a:	bf0b      	itete	eq
 801e51c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801e51e:	3301      	addne	r3, #1
 801e520:	7a9b      	ldrbeq	r3, [r3, #10]
 801e522:	b2db      	uxtbne	r3, r3
 801e524:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e528:	eba6 0309 	sub.w	r3, r6, r9
 801e52c:	9304      	str	r3, [sp, #16]
 801e52e:	9b08      	ldr	r3, [sp, #32]
 801e530:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e532:	2b47      	cmp	r3, #71	@ 0x47
 801e534:	f040 8187 	bne.w	801e846 <_svfprintf_r+0x8ee>
 801e538:	1cf1      	adds	r1, r6, #3
 801e53a:	db02      	blt.n	801e542 <_svfprintf_r+0x5ea>
 801e53c:	4546      	cmp	r6, r8
 801e53e:	f340 81a5 	ble.w	801e88c <_svfprintf_r+0x934>
 801e542:	9b06      	ldr	r3, [sp, #24]
 801e544:	3b02      	subs	r3, #2
 801e546:	9306      	str	r3, [sp, #24]
 801e548:	9906      	ldr	r1, [sp, #24]
 801e54a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801e54e:	f021 0120 	bic.w	r1, r1, #32
 801e552:	2941      	cmp	r1, #65	@ 0x41
 801e554:	bf08      	it	eq
 801e556:	320f      	addeq	r2, #15
 801e558:	f106 33ff 	add.w	r3, r6, #4294967295
 801e55c:	bf06      	itte	eq
 801e55e:	b2d2      	uxtbeq	r2, r2
 801e560:	2101      	moveq	r1, #1
 801e562:	2100      	movne	r1, #0
 801e564:	2b00      	cmp	r3, #0
 801e566:	9320      	str	r3, [sp, #128]	@ 0x80
 801e568:	bfb8      	it	lt
 801e56a:	f1c6 0301 	rsblt	r3, r6, #1
 801e56e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801e572:	bfb4      	ite	lt
 801e574:	222d      	movlt	r2, #45	@ 0x2d
 801e576:	222b      	movge	r2, #43	@ 0x2b
 801e578:	2b09      	cmp	r3, #9
 801e57a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801e57e:	f340 8178 	ble.w	801e872 <_svfprintf_r+0x91a>
 801e582:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801e586:	270a      	movs	r7, #10
 801e588:	4602      	mov	r2, r0
 801e58a:	fbb3 f6f7 	udiv	r6, r3, r7
 801e58e:	fb07 3116 	mls	r1, r7, r6, r3
 801e592:	3130      	adds	r1, #48	@ 0x30
 801e594:	f802 1c01 	strb.w	r1, [r2, #-1]
 801e598:	4619      	mov	r1, r3
 801e59a:	2963      	cmp	r1, #99	@ 0x63
 801e59c:	f100 30ff 	add.w	r0, r0, #4294967295
 801e5a0:	4633      	mov	r3, r6
 801e5a2:	dcf1      	bgt.n	801e588 <_svfprintf_r+0x630>
 801e5a4:	3330      	adds	r3, #48	@ 0x30
 801e5a6:	1e91      	subs	r1, r2, #2
 801e5a8:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e5ac:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801e5b0:	460b      	mov	r3, r1
 801e5b2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801e5b6:	4283      	cmp	r3, r0
 801e5b8:	f0c0 8156 	bcc.w	801e868 <_svfprintf_r+0x910>
 801e5bc:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801e5c0:	1a9b      	subs	r3, r3, r2
 801e5c2:	4281      	cmp	r1, r0
 801e5c4:	bf88      	it	hi
 801e5c6:	2300      	movhi	r3, #0
 801e5c8:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801e5cc:	441a      	add	r2, r3
 801e5ce:	ab22      	add	r3, sp, #136	@ 0x88
 801e5d0:	1ad3      	subs	r3, r2, r3
 801e5d2:	9a04      	ldr	r2, [sp, #16]
 801e5d4:	9318      	str	r3, [sp, #96]	@ 0x60
 801e5d6:	2a01      	cmp	r2, #1
 801e5d8:	eb03 0802 	add.w	r8, r3, r2
 801e5dc:	dc01      	bgt.n	801e5e2 <_svfprintf_r+0x68a>
 801e5de:	07ea      	lsls	r2, r5, #31
 801e5e0:	d501      	bpl.n	801e5e6 <_svfprintf_r+0x68e>
 801e5e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e5e4:	4498      	add	r8, r3
 801e5e6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801e5ea:	2700      	movs	r7, #0
 801e5ec:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801e5f0:	9311      	str	r3, [sp, #68]	@ 0x44
 801e5f2:	9708      	str	r7, [sp, #32]
 801e5f4:	463e      	mov	r6, r7
 801e5f6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	f040 818f 	bne.w	801e91c <_svfprintf_r+0x9c4>
 801e5fe:	2300      	movs	r3, #0
 801e600:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e602:	9310      	str	r3, [sp, #64]	@ 0x40
 801e604:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e606:	4543      	cmp	r3, r8
 801e608:	bfb8      	it	lt
 801e60a:	4643      	movlt	r3, r8
 801e60c:	9311      	str	r3, [sp, #68]	@ 0x44
 801e60e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801e612:	b113      	cbz	r3, 801e61a <_svfprintf_r+0x6c2>
 801e614:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e616:	3301      	adds	r3, #1
 801e618:	9311      	str	r3, [sp, #68]	@ 0x44
 801e61a:	f015 0302 	ands.w	r3, r5, #2
 801e61e:	931c      	str	r3, [sp, #112]	@ 0x70
 801e620:	bf1e      	ittt	ne
 801e622:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801e624:	3302      	addne	r3, #2
 801e626:	9311      	strne	r3, [sp, #68]	@ 0x44
 801e628:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801e62c:	931d      	str	r3, [sp, #116]	@ 0x74
 801e62e:	d122      	bne.n	801e676 <_svfprintf_r+0x71e>
 801e630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e632:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e634:	1a9b      	subs	r3, r3, r2
 801e636:	2b00      	cmp	r3, #0
 801e638:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e63a:	dd1c      	ble.n	801e676 <_svfprintf_r+0x71e>
 801e63c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e63e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801e642:	2810      	cmp	r0, #16
 801e644:	489e      	ldr	r0, [pc, #632]	@ (801e8c0 <_svfprintf_r+0x968>)
 801e646:	6020      	str	r0, [r4, #0]
 801e648:	f102 0201 	add.w	r2, r2, #1
 801e64c:	f104 0108 	add.w	r1, r4, #8
 801e650:	f300 8298 	bgt.w	801eb84 <_svfprintf_r+0xc2c>
 801e654:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e656:	6060      	str	r0, [r4, #4]
 801e658:	4403      	add	r3, r0
 801e65a:	2a07      	cmp	r2, #7
 801e65c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e660:	f340 82a5 	ble.w	801ebae <_svfprintf_r+0xc56>
 801e664:	9803      	ldr	r0, [sp, #12]
 801e666:	aa26      	add	r2, sp, #152	@ 0x98
 801e668:	4659      	mov	r1, fp
 801e66a:	f002 fb48 	bl	8020cfe <__ssprint_r>
 801e66e:	2800      	cmp	r0, #0
 801e670:	f040 85ed 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801e674:	ac29      	add	r4, sp, #164	@ 0xa4
 801e676:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801e67a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e67c:	b16a      	cbz	r2, 801e69a <_svfprintf_r+0x742>
 801e67e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801e682:	6022      	str	r2, [r4, #0]
 801e684:	2201      	movs	r2, #1
 801e686:	4413      	add	r3, r2
 801e688:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e68a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e68c:	6062      	str	r2, [r4, #4]
 801e68e:	4413      	add	r3, r2
 801e690:	2b07      	cmp	r3, #7
 801e692:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e694:	f300 828d 	bgt.w	801ebb2 <_svfprintf_r+0xc5a>
 801e698:	3408      	adds	r4, #8
 801e69a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801e69c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e69e:	b162      	cbz	r2, 801e6ba <_svfprintf_r+0x762>
 801e6a0:	aa1f      	add	r2, sp, #124	@ 0x7c
 801e6a2:	6022      	str	r2, [r4, #0]
 801e6a4:	2202      	movs	r2, #2
 801e6a6:	4413      	add	r3, r2
 801e6a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e6aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e6ac:	6062      	str	r2, [r4, #4]
 801e6ae:	3301      	adds	r3, #1
 801e6b0:	2b07      	cmp	r3, #7
 801e6b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e6b4:	f300 8287 	bgt.w	801ebc6 <_svfprintf_r+0xc6e>
 801e6b8:	3408      	adds	r4, #8
 801e6ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e6bc:	2b80      	cmp	r3, #128	@ 0x80
 801e6be:	d122      	bne.n	801e706 <_svfprintf_r+0x7ae>
 801e6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e6c4:	1a9b      	subs	r3, r3, r2
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e6ca:	dd1c      	ble.n	801e706 <_svfprintf_r+0x7ae>
 801e6cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e6ce:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801e6d2:	2810      	cmp	r0, #16
 801e6d4:	487b      	ldr	r0, [pc, #492]	@ (801e8c4 <_svfprintf_r+0x96c>)
 801e6d6:	6020      	str	r0, [r4, #0]
 801e6d8:	f102 0201 	add.w	r2, r2, #1
 801e6dc:	f104 0108 	add.w	r1, r4, #8
 801e6e0:	f300 827b 	bgt.w	801ebda <_svfprintf_r+0xc82>
 801e6e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e6e6:	6060      	str	r0, [r4, #4]
 801e6e8:	4403      	add	r3, r0
 801e6ea:	2a07      	cmp	r2, #7
 801e6ec:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e6f0:	f340 8288 	ble.w	801ec04 <_svfprintf_r+0xcac>
 801e6f4:	9803      	ldr	r0, [sp, #12]
 801e6f6:	aa26      	add	r2, sp, #152	@ 0x98
 801e6f8:	4659      	mov	r1, fp
 801e6fa:	f002 fb00 	bl	8020cfe <__ssprint_r>
 801e6fe:	2800      	cmp	r0, #0
 801e700:	f040 85a5 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801e704:	ac29      	add	r4, sp, #164	@ 0xa4
 801e706:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e708:	eba3 0308 	sub.w	r3, r3, r8
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e710:	dd1c      	ble.n	801e74c <_svfprintf_r+0x7f4>
 801e712:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e714:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801e718:	2810      	cmp	r0, #16
 801e71a:	486a      	ldr	r0, [pc, #424]	@ (801e8c4 <_svfprintf_r+0x96c>)
 801e71c:	6020      	str	r0, [r4, #0]
 801e71e:	f102 0201 	add.w	r2, r2, #1
 801e722:	f104 0108 	add.w	r1, r4, #8
 801e726:	f300 826f 	bgt.w	801ec08 <_svfprintf_r+0xcb0>
 801e72a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e72c:	6060      	str	r0, [r4, #4]
 801e72e:	4403      	add	r3, r0
 801e730:	2a07      	cmp	r2, #7
 801e732:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e736:	f340 827c 	ble.w	801ec32 <_svfprintf_r+0xcda>
 801e73a:	9803      	ldr	r0, [sp, #12]
 801e73c:	aa26      	add	r2, sp, #152	@ 0x98
 801e73e:	4659      	mov	r1, fp
 801e740:	f002 fadd 	bl	8020cfe <__ssprint_r>
 801e744:	2800      	cmp	r0, #0
 801e746:	f040 8582 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801e74a:	ac29      	add	r4, sp, #164	@ 0xa4
 801e74c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e74e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e750:	05ea      	lsls	r2, r5, #23
 801e752:	f100 8275 	bmi.w	801ec40 <_svfprintf_r+0xce8>
 801e756:	4443      	add	r3, r8
 801e758:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e75a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e75c:	3301      	adds	r3, #1
 801e75e:	2b07      	cmp	r3, #7
 801e760:	e9c4 9800 	strd	r9, r8, [r4]
 801e764:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e766:	f300 82b1 	bgt.w	801eccc <_svfprintf_r+0xd74>
 801e76a:	3408      	adds	r4, #8
 801e76c:	076a      	lsls	r2, r5, #29
 801e76e:	f100 8550 	bmi.w	801f212 <_svfprintf_r+0x12ba>
 801e772:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801e776:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e778:	428a      	cmp	r2, r1
 801e77a:	bfac      	ite	ge
 801e77c:	189b      	addge	r3, r3, r2
 801e77e:	185b      	addlt	r3, r3, r1
 801e780:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e782:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e784:	b13b      	cbz	r3, 801e796 <_svfprintf_r+0x83e>
 801e786:	9803      	ldr	r0, [sp, #12]
 801e788:	aa26      	add	r2, sp, #152	@ 0x98
 801e78a:	4659      	mov	r1, fp
 801e78c:	f002 fab7 	bl	8020cfe <__ssprint_r>
 801e790:	2800      	cmp	r0, #0
 801e792:	f040 855c 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801e796:	2300      	movs	r3, #0
 801e798:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e79a:	f1ba 0f00 	cmp.w	sl, #0
 801e79e:	f040 8572 	bne.w	801f286 <_svfprintf_r+0x132e>
 801e7a2:	9e07      	ldr	r6, [sp, #28]
 801e7a4:	ac29      	add	r4, sp, #164	@ 0xa4
 801e7a6:	e0c6      	b.n	801e936 <_svfprintf_r+0x9de>
 801e7a8:	f802 0c01 	strb.w	r0, [r2, #-1]
 801e7ac:	e6ac      	b.n	801e508 <_svfprintf_r+0x5b0>
 801e7ae:	f803 0b01 	strb.w	r0, [r3], #1
 801e7b2:	e676      	b.n	801e4a2 <_svfprintf_r+0x54a>
 801e7b4:	9b08      	ldr	r3, [sp, #32]
 801e7b6:	2b46      	cmp	r3, #70	@ 0x46
 801e7b8:	d005      	beq.n	801e7c6 <_svfprintf_r+0x86e>
 801e7ba:	2b45      	cmp	r3, #69	@ 0x45
 801e7bc:	d11a      	bne.n	801e7f4 <_svfprintf_r+0x89c>
 801e7be:	f108 0601 	add.w	r6, r8, #1
 801e7c2:	2102      	movs	r1, #2
 801e7c4:	e001      	b.n	801e7ca <_svfprintf_r+0x872>
 801e7c6:	4646      	mov	r6, r8
 801e7c8:	2103      	movs	r1, #3
 801e7ca:	ab24      	add	r3, sp, #144	@ 0x90
 801e7cc:	9301      	str	r3, [sp, #4]
 801e7ce:	ab21      	add	r3, sp, #132	@ 0x84
 801e7d0:	9300      	str	r3, [sp, #0]
 801e7d2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801e7d6:	ab20      	add	r3, sp, #128	@ 0x80
 801e7d8:	9803      	ldr	r0, [sp, #12]
 801e7da:	4632      	mov	r2, r6
 801e7dc:	f000 ffe8 	bl	801f7b0 <_dtoa_r>
 801e7e0:	9b08      	ldr	r3, [sp, #32]
 801e7e2:	2b47      	cmp	r3, #71	@ 0x47
 801e7e4:	4681      	mov	r9, r0
 801e7e6:	d119      	bne.n	801e81c <_svfprintf_r+0x8c4>
 801e7e8:	07e8      	lsls	r0, r5, #31
 801e7ea:	d405      	bmi.n	801e7f8 <_svfprintf_r+0x8a0>
 801e7ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e7ee:	eba3 0309 	sub.w	r3, r3, r9
 801e7f2:	e69b      	b.n	801e52c <_svfprintf_r+0x5d4>
 801e7f4:	4646      	mov	r6, r8
 801e7f6:	e7e4      	b.n	801e7c2 <_svfprintf_r+0x86a>
 801e7f8:	eb09 0706 	add.w	r7, r9, r6
 801e7fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801e800:	2200      	movs	r2, #0
 801e802:	2300      	movs	r3, #0
 801e804:	f7e2 f960 	bl	8000ac8 <__aeabi_dcmpeq>
 801e808:	b100      	cbz	r0, 801e80c <_svfprintf_r+0x8b4>
 801e80a:	9724      	str	r7, [sp, #144]	@ 0x90
 801e80c:	2230      	movs	r2, #48	@ 0x30
 801e80e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e810:	429f      	cmp	r7, r3
 801e812:	d9eb      	bls.n	801e7ec <_svfprintf_r+0x894>
 801e814:	1c59      	adds	r1, r3, #1
 801e816:	9124      	str	r1, [sp, #144]	@ 0x90
 801e818:	701a      	strb	r2, [r3, #0]
 801e81a:	e7f8      	b.n	801e80e <_svfprintf_r+0x8b6>
 801e81c:	9b08      	ldr	r3, [sp, #32]
 801e81e:	2b46      	cmp	r3, #70	@ 0x46
 801e820:	eb00 0706 	add.w	r7, r0, r6
 801e824:	d1ea      	bne.n	801e7fc <_svfprintf_r+0x8a4>
 801e826:	7803      	ldrb	r3, [r0, #0]
 801e828:	2b30      	cmp	r3, #48	@ 0x30
 801e82a:	d109      	bne.n	801e840 <_svfprintf_r+0x8e8>
 801e82c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801e830:	2200      	movs	r2, #0
 801e832:	2300      	movs	r3, #0
 801e834:	f7e2 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 801e838:	b910      	cbnz	r0, 801e840 <_svfprintf_r+0x8e8>
 801e83a:	f1c6 0601 	rsb	r6, r6, #1
 801e83e:	9620      	str	r6, [sp, #128]	@ 0x80
 801e840:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e842:	441f      	add	r7, r3
 801e844:	e7da      	b.n	801e7fc <_svfprintf_r+0x8a4>
 801e846:	9b08      	ldr	r3, [sp, #32]
 801e848:	2b46      	cmp	r3, #70	@ 0x46
 801e84a:	f47f ae7d 	bne.w	801e548 <_svfprintf_r+0x5f0>
 801e84e:	f005 0301 	and.w	r3, r5, #1
 801e852:	2e00      	cmp	r6, #0
 801e854:	ea43 0308 	orr.w	r3, r3, r8
 801e858:	dd25      	ble.n	801e8a6 <_svfprintf_r+0x94e>
 801e85a:	b37b      	cbz	r3, 801e8bc <_svfprintf_r+0x964>
 801e85c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e85e:	18f3      	adds	r3, r6, r3
 801e860:	4498      	add	r8, r3
 801e862:	2366      	movs	r3, #102	@ 0x66
 801e864:	9306      	str	r3, [sp, #24]
 801e866:	e033      	b.n	801e8d0 <_svfprintf_r+0x978>
 801e868:	f813 7b01 	ldrb.w	r7, [r3], #1
 801e86c:	f806 7f01 	strb.w	r7, [r6, #1]!
 801e870:	e6a1      	b.n	801e5b6 <_svfprintf_r+0x65e>
 801e872:	b941      	cbnz	r1, 801e886 <_svfprintf_r+0x92e>
 801e874:	2230      	movs	r2, #48	@ 0x30
 801e876:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801e87a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801e87e:	3330      	adds	r3, #48	@ 0x30
 801e880:	f802 3b01 	strb.w	r3, [r2], #1
 801e884:	e6a3      	b.n	801e5ce <_svfprintf_r+0x676>
 801e886:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801e88a:	e7f8      	b.n	801e87e <_svfprintf_r+0x926>
 801e88c:	9b04      	ldr	r3, [sp, #16]
 801e88e:	429e      	cmp	r6, r3
 801e890:	da0d      	bge.n	801e8ae <_svfprintf_r+0x956>
 801e892:	9b04      	ldr	r3, [sp, #16]
 801e894:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e896:	2e00      	cmp	r6, #0
 801e898:	eb03 0802 	add.w	r8, r3, r2
 801e89c:	dc0c      	bgt.n	801e8b8 <_svfprintf_r+0x960>
 801e89e:	f1c6 0301 	rsb	r3, r6, #1
 801e8a2:	4498      	add	r8, r3
 801e8a4:	e008      	b.n	801e8b8 <_svfprintf_r+0x960>
 801e8a6:	b17b      	cbz	r3, 801e8c8 <_svfprintf_r+0x970>
 801e8a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8aa:	3301      	adds	r3, #1
 801e8ac:	e7d8      	b.n	801e860 <_svfprintf_r+0x908>
 801e8ae:	07eb      	lsls	r3, r5, #31
 801e8b0:	d521      	bpl.n	801e8f6 <_svfprintf_r+0x99e>
 801e8b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8b4:	eb06 0803 	add.w	r8, r6, r3
 801e8b8:	2367      	movs	r3, #103	@ 0x67
 801e8ba:	e7d3      	b.n	801e864 <_svfprintf_r+0x90c>
 801e8bc:	46b0      	mov	r8, r6
 801e8be:	e7d0      	b.n	801e862 <_svfprintf_r+0x90a>
 801e8c0:	08024b90 	.word	0x08024b90
 801e8c4:	08024b80 	.word	0x08024b80
 801e8c8:	2366      	movs	r3, #102	@ 0x66
 801e8ca:	9306      	str	r3, [sp, #24]
 801e8cc:	f04f 0801 	mov.w	r8, #1
 801e8d0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801e8d4:	9308      	str	r3, [sp, #32]
 801e8d6:	d01f      	beq.n	801e918 <_svfprintf_r+0x9c0>
 801e8d8:	2700      	movs	r7, #0
 801e8da:	2e00      	cmp	r6, #0
 801e8dc:	9708      	str	r7, [sp, #32]
 801e8de:	f77f ae8a 	ble.w	801e5f6 <_svfprintf_r+0x69e>
 801e8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8e4:	781b      	ldrb	r3, [r3, #0]
 801e8e6:	2bff      	cmp	r3, #255	@ 0xff
 801e8e8:	d107      	bne.n	801e8fa <_svfprintf_r+0x9a2>
 801e8ea:	9b08      	ldr	r3, [sp, #32]
 801e8ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e8ee:	443b      	add	r3, r7
 801e8f0:	fb02 8803 	mla	r8, r2, r3, r8
 801e8f4:	e67f      	b.n	801e5f6 <_svfprintf_r+0x69e>
 801e8f6:	46b0      	mov	r8, r6
 801e8f8:	e7de      	b.n	801e8b8 <_svfprintf_r+0x960>
 801e8fa:	42b3      	cmp	r3, r6
 801e8fc:	daf5      	bge.n	801e8ea <_svfprintf_r+0x992>
 801e8fe:	1af6      	subs	r6, r6, r3
 801e900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e902:	785b      	ldrb	r3, [r3, #1]
 801e904:	b133      	cbz	r3, 801e914 <_svfprintf_r+0x9bc>
 801e906:	9b08      	ldr	r3, [sp, #32]
 801e908:	3301      	adds	r3, #1
 801e90a:	9308      	str	r3, [sp, #32]
 801e90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e90e:	3301      	adds	r3, #1
 801e910:	9309      	str	r3, [sp, #36]	@ 0x24
 801e912:	e7e6      	b.n	801e8e2 <_svfprintf_r+0x98a>
 801e914:	3701      	adds	r7, #1
 801e916:	e7e4      	b.n	801e8e2 <_svfprintf_r+0x98a>
 801e918:	9f08      	ldr	r7, [sp, #32]
 801e91a:	e66c      	b.n	801e5f6 <_svfprintf_r+0x69e>
 801e91c:	232d      	movs	r3, #45	@ 0x2d
 801e91e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e922:	e66c      	b.n	801e5fe <_svfprintf_r+0x6a6>
 801e924:	06af      	lsls	r7, r5, #26
 801e926:	d50a      	bpl.n	801e93e <_svfprintf_r+0x9e6>
 801e928:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e92a:	6833      	ldr	r3, [r6, #0]
 801e92c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e92e:	17d2      	asrs	r2, r2, #31
 801e930:	e9c3 1200 	strd	r1, r2, [r3]
 801e934:	3604      	adds	r6, #4
 801e936:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801e93a:	f7ff bb46 	b.w	801dfca <_svfprintf_r+0x72>
 801e93e:	06e8      	lsls	r0, r5, #27
 801e940:	d503      	bpl.n	801e94a <_svfprintf_r+0x9f2>
 801e942:	6833      	ldr	r3, [r6, #0]
 801e944:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e946:	601a      	str	r2, [r3, #0]
 801e948:	e7f4      	b.n	801e934 <_svfprintf_r+0x9dc>
 801e94a:	0669      	lsls	r1, r5, #25
 801e94c:	d503      	bpl.n	801e956 <_svfprintf_r+0x9fe>
 801e94e:	6833      	ldr	r3, [r6, #0]
 801e950:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e952:	801a      	strh	r2, [r3, #0]
 801e954:	e7ee      	b.n	801e934 <_svfprintf_r+0x9dc>
 801e956:	05aa      	lsls	r2, r5, #22
 801e958:	d5f3      	bpl.n	801e942 <_svfprintf_r+0x9ea>
 801e95a:	6833      	ldr	r3, [r6, #0]
 801e95c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e95e:	701a      	strb	r2, [r3, #0]
 801e960:	e7e8      	b.n	801e934 <_svfprintf_r+0x9dc>
 801e962:	f045 0510 	orr.w	r5, r5, #16
 801e966:	f015 0320 	ands.w	r3, r5, #32
 801e96a:	d020      	beq.n	801e9ae <_svfprintf_r+0xa56>
 801e96c:	3607      	adds	r6, #7
 801e96e:	f026 0307 	bic.w	r3, r6, #7
 801e972:	461a      	mov	r2, r3
 801e974:	685f      	ldr	r7, [r3, #4]
 801e976:	f852 6b08 	ldr.w	r6, [r2], #8
 801e97a:	9207      	str	r2, [sp, #28]
 801e97c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801e980:	2300      	movs	r3, #0
 801e982:	2200      	movs	r2, #0
 801e984:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801e988:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e98c:	f000 848c 	beq.w	801f2a8 <_svfprintf_r+0x1350>
 801e990:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801e994:	9208      	str	r2, [sp, #32]
 801e996:	ea56 0207 	orrs.w	r2, r6, r7
 801e99a:	f040 848a 	bne.w	801f2b2 <_svfprintf_r+0x135a>
 801e99e:	f1b8 0f00 	cmp.w	r8, #0
 801e9a2:	f000 80db 	beq.w	801eb5c <_svfprintf_r+0xc04>
 801e9a6:	2b01      	cmp	r3, #1
 801e9a8:	f040 8486 	bne.w	801f2b8 <_svfprintf_r+0x1360>
 801e9ac:	e083      	b.n	801eab6 <_svfprintf_r+0xb5e>
 801e9ae:	4632      	mov	r2, r6
 801e9b0:	f015 0710 	ands.w	r7, r5, #16
 801e9b4:	f852 6b04 	ldr.w	r6, [r2], #4
 801e9b8:	9207      	str	r2, [sp, #28]
 801e9ba:	d001      	beq.n	801e9c0 <_svfprintf_r+0xa68>
 801e9bc:	461f      	mov	r7, r3
 801e9be:	e7dd      	b.n	801e97c <_svfprintf_r+0xa24>
 801e9c0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801e9c4:	d001      	beq.n	801e9ca <_svfprintf_r+0xa72>
 801e9c6:	b2b6      	uxth	r6, r6
 801e9c8:	e7d8      	b.n	801e97c <_svfprintf_r+0xa24>
 801e9ca:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801e9ce:	d0d5      	beq.n	801e97c <_svfprintf_r+0xa24>
 801e9d0:	b2f6      	uxtb	r6, r6
 801e9d2:	e7f3      	b.n	801e9bc <_svfprintf_r+0xa64>
 801e9d4:	4633      	mov	r3, r6
 801e9d6:	2278      	movs	r2, #120	@ 0x78
 801e9d8:	f853 6b04 	ldr.w	r6, [r3], #4
 801e9dc:	9307      	str	r3, [sp, #28]
 801e9de:	f647 0330 	movw	r3, #30768	@ 0x7830
 801e9e2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801e9e6:	4b94      	ldr	r3, [pc, #592]	@ (801ec38 <_svfprintf_r+0xce0>)
 801e9e8:	9319      	str	r3, [sp, #100]	@ 0x64
 801e9ea:	2700      	movs	r7, #0
 801e9ec:	f045 0502 	orr.w	r5, r5, #2
 801e9f0:	2302      	movs	r3, #2
 801e9f2:	9206      	str	r2, [sp, #24]
 801e9f4:	e7c5      	b.n	801e982 <_svfprintf_r+0xa2a>
 801e9f6:	4633      	mov	r3, r6
 801e9f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e9fc:	f853 9b04 	ldr.w	r9, [r3], #4
 801ea00:	9307      	str	r3, [sp, #28]
 801ea02:	f04f 0600 	mov.w	r6, #0
 801ea06:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801ea0a:	d00f      	beq.n	801ea2c <_svfprintf_r+0xad4>
 801ea0c:	4642      	mov	r2, r8
 801ea0e:	4631      	mov	r1, r6
 801ea10:	4648      	mov	r0, r9
 801ea12:	f7e1 fbe5 	bl	80001e0 <memchr>
 801ea16:	4682      	mov	sl, r0
 801ea18:	2800      	cmp	r0, #0
 801ea1a:	f43f ac81 	beq.w	801e320 <_svfprintf_r+0x3c8>
 801ea1e:	eba0 0809 	sub.w	r8, r0, r9
 801ea22:	46b2      	mov	sl, r6
 801ea24:	9610      	str	r6, [sp, #64]	@ 0x40
 801ea26:	4637      	mov	r7, r6
 801ea28:	9608      	str	r6, [sp, #32]
 801ea2a:	e5eb      	b.n	801e604 <_svfprintf_r+0x6ac>
 801ea2c:	4648      	mov	r0, r9
 801ea2e:	f7e1 fbcf 	bl	80001d0 <strlen>
 801ea32:	46b2      	mov	sl, r6
 801ea34:	4680      	mov	r8, r0
 801ea36:	e473      	b.n	801e320 <_svfprintf_r+0x3c8>
 801ea38:	f045 0510 	orr.w	r5, r5, #16
 801ea3c:	f015 0320 	ands.w	r3, r5, #32
 801ea40:	d009      	beq.n	801ea56 <_svfprintf_r+0xafe>
 801ea42:	3607      	adds	r6, #7
 801ea44:	f026 0307 	bic.w	r3, r6, #7
 801ea48:	461a      	mov	r2, r3
 801ea4a:	685f      	ldr	r7, [r3, #4]
 801ea4c:	f852 6b08 	ldr.w	r6, [r2], #8
 801ea50:	9207      	str	r2, [sp, #28]
 801ea52:	2301      	movs	r3, #1
 801ea54:	e795      	b.n	801e982 <_svfprintf_r+0xa2a>
 801ea56:	4632      	mov	r2, r6
 801ea58:	f015 0710 	ands.w	r7, r5, #16
 801ea5c:	f852 6b04 	ldr.w	r6, [r2], #4
 801ea60:	9207      	str	r2, [sp, #28]
 801ea62:	d001      	beq.n	801ea68 <_svfprintf_r+0xb10>
 801ea64:	461f      	mov	r7, r3
 801ea66:	e7f4      	b.n	801ea52 <_svfprintf_r+0xafa>
 801ea68:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801ea6c:	d001      	beq.n	801ea72 <_svfprintf_r+0xb1a>
 801ea6e:	b2b6      	uxth	r6, r6
 801ea70:	e7ef      	b.n	801ea52 <_svfprintf_r+0xafa>
 801ea72:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801ea76:	d0ec      	beq.n	801ea52 <_svfprintf_r+0xafa>
 801ea78:	b2f6      	uxtb	r6, r6
 801ea7a:	e7f3      	b.n	801ea64 <_svfprintf_r+0xb0c>
 801ea7c:	4b6f      	ldr	r3, [pc, #444]	@ (801ec3c <_svfprintf_r+0xce4>)
 801ea7e:	f7ff bb39 	b.w	801e0f4 <_svfprintf_r+0x19c>
 801ea82:	4632      	mov	r2, r6
 801ea84:	f015 0710 	ands.w	r7, r5, #16
 801ea88:	f852 6b04 	ldr.w	r6, [r2], #4
 801ea8c:	9207      	str	r2, [sp, #28]
 801ea8e:	d002      	beq.n	801ea96 <_svfprintf_r+0xb3e>
 801ea90:	461f      	mov	r7, r3
 801ea92:	f7ff bb3c 	b.w	801e10e <_svfprintf_r+0x1b6>
 801ea96:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801ea9a:	d002      	beq.n	801eaa2 <_svfprintf_r+0xb4a>
 801ea9c:	b2b6      	uxth	r6, r6
 801ea9e:	f7ff bb36 	b.w	801e10e <_svfprintf_r+0x1b6>
 801eaa2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801eaa6:	f43f ab32 	beq.w	801e10e <_svfprintf_r+0x1b6>
 801eaaa:	b2f6      	uxtb	r6, r6
 801eaac:	e7f0      	b.n	801ea90 <_svfprintf_r+0xb38>
 801eaae:	2e0a      	cmp	r6, #10
 801eab0:	f177 0300 	sbcs.w	r3, r7, #0
 801eab4:	d207      	bcs.n	801eac6 <_svfprintf_r+0xb6e>
 801eab6:	3630      	adds	r6, #48	@ 0x30
 801eab8:	b2f6      	uxtb	r6, r6
 801eaba:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801eabe:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 801eac2:	f000 bc15 	b.w	801f2f0 <_svfprintf_r+0x1398>
 801eac6:	2300      	movs	r3, #0
 801eac8:	9304      	str	r3, [sp, #16]
 801eaca:	9b08      	ldr	r3, [sp, #32]
 801eacc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801ead0:	ad52      	add	r5, sp, #328	@ 0x148
 801ead2:	9310      	str	r3, [sp, #64]	@ 0x40
 801ead4:	220a      	movs	r2, #10
 801ead6:	2300      	movs	r3, #0
 801ead8:	4630      	mov	r0, r6
 801eada:	4639      	mov	r1, r7
 801eadc:	f7e2 f8d4 	bl	8000c88 <__aeabi_uldivmod>
 801eae0:	9b04      	ldr	r3, [sp, #16]
 801eae2:	9011      	str	r0, [sp, #68]	@ 0x44
 801eae4:	3301      	adds	r3, #1
 801eae6:	9304      	str	r3, [sp, #16]
 801eae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eaea:	3230      	adds	r2, #48	@ 0x30
 801eaec:	468a      	mov	sl, r1
 801eaee:	f105 39ff 	add.w	r9, r5, #4294967295
 801eaf2:	f805 2c01 	strb.w	r2, [r5, #-1]
 801eaf6:	b1d3      	cbz	r3, 801eb2e <_svfprintf_r+0xbd6>
 801eaf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eafa:	9a04      	ldr	r2, [sp, #16]
 801eafc:	781b      	ldrb	r3, [r3, #0]
 801eafe:	429a      	cmp	r2, r3
 801eb00:	d115      	bne.n	801eb2e <_svfprintf_r+0xbd6>
 801eb02:	2aff      	cmp	r2, #255	@ 0xff
 801eb04:	d013      	beq.n	801eb2e <_svfprintf_r+0xbd6>
 801eb06:	2e0a      	cmp	r6, #10
 801eb08:	f177 0300 	sbcs.w	r3, r7, #0
 801eb0c:	d30f      	bcc.n	801eb2e <_svfprintf_r+0xbd6>
 801eb0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801eb10:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801eb12:	eba9 0903 	sub.w	r9, r9, r3
 801eb16:	461a      	mov	r2, r3
 801eb18:	4648      	mov	r0, r9
 801eb1a:	f000 fcfe 	bl	801f51a <strncpy>
 801eb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb20:	785b      	ldrb	r3, [r3, #1]
 801eb22:	b11b      	cbz	r3, 801eb2c <_svfprintf_r+0xbd4>
 801eb24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb26:	3301      	adds	r3, #1
 801eb28:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb2a:	2300      	movs	r3, #0
 801eb2c:	9304      	str	r3, [sp, #16]
 801eb2e:	2e0a      	cmp	r6, #10
 801eb30:	f177 0700 	sbcs.w	r7, r7, #0
 801eb34:	f0c0 83dc 	bcc.w	801f2f0 <_svfprintf_r+0x1398>
 801eb38:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801eb3a:	4657      	mov	r7, sl
 801eb3c:	464d      	mov	r5, r9
 801eb3e:	e7c9      	b.n	801ead4 <_svfprintf_r+0xb7c>
 801eb40:	f006 030f 	and.w	r3, r6, #15
 801eb44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801eb46:	0936      	lsrs	r6, r6, #4
 801eb48:	5cd3      	ldrb	r3, [r2, r3]
 801eb4a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801eb4e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801eb52:	093f      	lsrs	r7, r7, #4
 801eb54:	ea56 0307 	orrs.w	r3, r6, r7
 801eb58:	d1f2      	bne.n	801eb40 <_svfprintf_r+0xbe8>
 801eb5a:	e3c9      	b.n	801f2f0 <_svfprintf_r+0x1398>
 801eb5c:	b91b      	cbnz	r3, 801eb66 <_svfprintf_r+0xc0e>
 801eb5e:	07e9      	lsls	r1, r5, #31
 801eb60:	d501      	bpl.n	801eb66 <_svfprintf_r+0xc0e>
 801eb62:	2630      	movs	r6, #48	@ 0x30
 801eb64:	e7a9      	b.n	801eaba <_svfprintf_r+0xb62>
 801eb66:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801eb6a:	e3c1      	b.n	801f2f0 <_svfprintf_r+0x1398>
 801eb6c:	9b06      	ldr	r3, [sp, #24]
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	f000 838f 	beq.w	801f292 <_svfprintf_r+0x133a>
 801eb74:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801eb78:	2300      	movs	r3, #0
 801eb7a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801eb7e:	9607      	str	r6, [sp, #28]
 801eb80:	f7ff bb63 	b.w	801e24a <_svfprintf_r+0x2f2>
 801eb84:	2010      	movs	r0, #16
 801eb86:	4403      	add	r3, r0
 801eb88:	2a07      	cmp	r2, #7
 801eb8a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801eb8e:	6060      	str	r0, [r4, #4]
 801eb90:	dd08      	ble.n	801eba4 <_svfprintf_r+0xc4c>
 801eb92:	9803      	ldr	r0, [sp, #12]
 801eb94:	aa26      	add	r2, sp, #152	@ 0x98
 801eb96:	4659      	mov	r1, fp
 801eb98:	f002 f8b1 	bl	8020cfe <__ssprint_r>
 801eb9c:	2800      	cmp	r0, #0
 801eb9e:	f040 8356 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801eba2:	a929      	add	r1, sp, #164	@ 0xa4
 801eba4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eba6:	3b10      	subs	r3, #16
 801eba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ebaa:	460c      	mov	r4, r1
 801ebac:	e546      	b.n	801e63c <_svfprintf_r+0x6e4>
 801ebae:	460c      	mov	r4, r1
 801ebb0:	e561      	b.n	801e676 <_svfprintf_r+0x71e>
 801ebb2:	9803      	ldr	r0, [sp, #12]
 801ebb4:	aa26      	add	r2, sp, #152	@ 0x98
 801ebb6:	4659      	mov	r1, fp
 801ebb8:	f002 f8a1 	bl	8020cfe <__ssprint_r>
 801ebbc:	2800      	cmp	r0, #0
 801ebbe:	f040 8346 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ebc2:	ac29      	add	r4, sp, #164	@ 0xa4
 801ebc4:	e569      	b.n	801e69a <_svfprintf_r+0x742>
 801ebc6:	9803      	ldr	r0, [sp, #12]
 801ebc8:	aa26      	add	r2, sp, #152	@ 0x98
 801ebca:	4659      	mov	r1, fp
 801ebcc:	f002 f897 	bl	8020cfe <__ssprint_r>
 801ebd0:	2800      	cmp	r0, #0
 801ebd2:	f040 833c 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ebd6:	ac29      	add	r4, sp, #164	@ 0xa4
 801ebd8:	e56f      	b.n	801e6ba <_svfprintf_r+0x762>
 801ebda:	2010      	movs	r0, #16
 801ebdc:	4403      	add	r3, r0
 801ebde:	2a07      	cmp	r2, #7
 801ebe0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801ebe4:	6060      	str	r0, [r4, #4]
 801ebe6:	dd08      	ble.n	801ebfa <_svfprintf_r+0xca2>
 801ebe8:	9803      	ldr	r0, [sp, #12]
 801ebea:	aa26      	add	r2, sp, #152	@ 0x98
 801ebec:	4659      	mov	r1, fp
 801ebee:	f002 f886 	bl	8020cfe <__ssprint_r>
 801ebf2:	2800      	cmp	r0, #0
 801ebf4:	f040 832b 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ebf8:	a929      	add	r1, sp, #164	@ 0xa4
 801ebfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ebfc:	3b10      	subs	r3, #16
 801ebfe:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ec00:	460c      	mov	r4, r1
 801ec02:	e563      	b.n	801e6cc <_svfprintf_r+0x774>
 801ec04:	460c      	mov	r4, r1
 801ec06:	e57e      	b.n	801e706 <_svfprintf_r+0x7ae>
 801ec08:	2010      	movs	r0, #16
 801ec0a:	4403      	add	r3, r0
 801ec0c:	2a07      	cmp	r2, #7
 801ec0e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801ec12:	6060      	str	r0, [r4, #4]
 801ec14:	dd08      	ble.n	801ec28 <_svfprintf_r+0xcd0>
 801ec16:	9803      	ldr	r0, [sp, #12]
 801ec18:	aa26      	add	r2, sp, #152	@ 0x98
 801ec1a:	4659      	mov	r1, fp
 801ec1c:	f002 f86f 	bl	8020cfe <__ssprint_r>
 801ec20:	2800      	cmp	r0, #0
 801ec22:	f040 8314 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ec26:	a929      	add	r1, sp, #164	@ 0xa4
 801ec28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ec2a:	3b10      	subs	r3, #16
 801ec2c:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec2e:	460c      	mov	r4, r1
 801ec30:	e56f      	b.n	801e712 <_svfprintf_r+0x7ba>
 801ec32:	460c      	mov	r4, r1
 801ec34:	e58a      	b.n	801e74c <_svfprintf_r+0x7f4>
 801ec36:	bf00      	nop
 801ec38:	08024b5c 	.word	0x08024b5c
 801ec3c:	08024b6d 	.word	0x08024b6d
 801ec40:	9b06      	ldr	r3, [sp, #24]
 801ec42:	2b65      	cmp	r3, #101	@ 0x65
 801ec44:	f340 8246 	ble.w	801f0d4 <_svfprintf_r+0x117c>
 801ec48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ec4c:	2200      	movs	r2, #0
 801ec4e:	2300      	movs	r3, #0
 801ec50:	f7e1 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 801ec54:	2800      	cmp	r0, #0
 801ec56:	d06a      	beq.n	801ed2e <_svfprintf_r+0xdd6>
 801ec58:	4b73      	ldr	r3, [pc, #460]	@ (801ee28 <_svfprintf_r+0xed0>)
 801ec5a:	6023      	str	r3, [r4, #0]
 801ec5c:	2301      	movs	r3, #1
 801ec5e:	6063      	str	r3, [r4, #4]
 801ec60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ec62:	3301      	adds	r3, #1
 801ec64:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ec66:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ec68:	3301      	adds	r3, #1
 801ec6a:	2b07      	cmp	r3, #7
 801ec6c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ec6e:	dc37      	bgt.n	801ece0 <_svfprintf_r+0xd88>
 801ec70:	3408      	adds	r4, #8
 801ec72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ec74:	9a04      	ldr	r2, [sp, #16]
 801ec76:	4293      	cmp	r3, r2
 801ec78:	db02      	blt.n	801ec80 <_svfprintf_r+0xd28>
 801ec7a:	07ef      	lsls	r7, r5, #31
 801ec7c:	f57f ad76 	bpl.w	801e76c <_svfprintf_r+0x814>
 801ec80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ec82:	6023      	str	r3, [r4, #0]
 801ec84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ec86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ec88:	6063      	str	r3, [r4, #4]
 801ec8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ec8c:	4413      	add	r3, r2
 801ec8e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ec90:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ec92:	3301      	adds	r3, #1
 801ec94:	2b07      	cmp	r3, #7
 801ec96:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ec98:	dc2c      	bgt.n	801ecf4 <_svfprintf_r+0xd9c>
 801ec9a:	3408      	adds	r4, #8
 801ec9c:	9b04      	ldr	r3, [sp, #16]
 801ec9e:	1e5e      	subs	r6, r3, #1
 801eca0:	2e00      	cmp	r6, #0
 801eca2:	f77f ad63 	ble.w	801e76c <_svfprintf_r+0x814>
 801eca6:	4f61      	ldr	r7, [pc, #388]	@ (801ee2c <_svfprintf_r+0xed4>)
 801eca8:	f04f 0810 	mov.w	r8, #16
 801ecac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ecb0:	2e10      	cmp	r6, #16
 801ecb2:	f103 0301 	add.w	r3, r3, #1
 801ecb6:	f104 0108 	add.w	r1, r4, #8
 801ecba:	6027      	str	r7, [r4, #0]
 801ecbc:	dc24      	bgt.n	801ed08 <_svfprintf_r+0xdb0>
 801ecbe:	6066      	str	r6, [r4, #4]
 801ecc0:	2b07      	cmp	r3, #7
 801ecc2:	4416      	add	r6, r2
 801ecc4:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801ecc8:	f340 82a0 	ble.w	801f20c <_svfprintf_r+0x12b4>
 801eccc:	9803      	ldr	r0, [sp, #12]
 801ecce:	aa26      	add	r2, sp, #152	@ 0x98
 801ecd0:	4659      	mov	r1, fp
 801ecd2:	f002 f814 	bl	8020cfe <__ssprint_r>
 801ecd6:	2800      	cmp	r0, #0
 801ecd8:	f040 82b9 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ecdc:	ac29      	add	r4, sp, #164	@ 0xa4
 801ecde:	e545      	b.n	801e76c <_svfprintf_r+0x814>
 801ece0:	9803      	ldr	r0, [sp, #12]
 801ece2:	aa26      	add	r2, sp, #152	@ 0x98
 801ece4:	4659      	mov	r1, fp
 801ece6:	f002 f80a 	bl	8020cfe <__ssprint_r>
 801ecea:	2800      	cmp	r0, #0
 801ecec:	f040 82af 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ecf0:	ac29      	add	r4, sp, #164	@ 0xa4
 801ecf2:	e7be      	b.n	801ec72 <_svfprintf_r+0xd1a>
 801ecf4:	9803      	ldr	r0, [sp, #12]
 801ecf6:	aa26      	add	r2, sp, #152	@ 0x98
 801ecf8:	4659      	mov	r1, fp
 801ecfa:	f002 f800 	bl	8020cfe <__ssprint_r>
 801ecfe:	2800      	cmp	r0, #0
 801ed00:	f040 82a5 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ed04:	ac29      	add	r4, sp, #164	@ 0xa4
 801ed06:	e7c9      	b.n	801ec9c <_svfprintf_r+0xd44>
 801ed08:	3210      	adds	r2, #16
 801ed0a:	2b07      	cmp	r3, #7
 801ed0c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ed10:	f8c4 8004 	str.w	r8, [r4, #4]
 801ed14:	dd08      	ble.n	801ed28 <_svfprintf_r+0xdd0>
 801ed16:	9803      	ldr	r0, [sp, #12]
 801ed18:	aa26      	add	r2, sp, #152	@ 0x98
 801ed1a:	4659      	mov	r1, fp
 801ed1c:	f001 ffef 	bl	8020cfe <__ssprint_r>
 801ed20:	2800      	cmp	r0, #0
 801ed22:	f040 8294 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ed26:	a929      	add	r1, sp, #164	@ 0xa4
 801ed28:	3e10      	subs	r6, #16
 801ed2a:	460c      	mov	r4, r1
 801ed2c:	e7be      	b.n	801ecac <_svfprintf_r+0xd54>
 801ed2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	dc7d      	bgt.n	801ee30 <_svfprintf_r+0xed8>
 801ed34:	4b3c      	ldr	r3, [pc, #240]	@ (801ee28 <_svfprintf_r+0xed0>)
 801ed36:	6023      	str	r3, [r4, #0]
 801ed38:	2301      	movs	r3, #1
 801ed3a:	6063      	str	r3, [r4, #4]
 801ed3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ed3e:	3301      	adds	r3, #1
 801ed40:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ed42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ed44:	3301      	adds	r3, #1
 801ed46:	2b07      	cmp	r3, #7
 801ed48:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ed4a:	dc46      	bgt.n	801edda <_svfprintf_r+0xe82>
 801ed4c:	3408      	adds	r4, #8
 801ed4e:	9904      	ldr	r1, [sp, #16]
 801ed50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ed52:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801ed54:	430b      	orrs	r3, r1
 801ed56:	f005 0101 	and.w	r1, r5, #1
 801ed5a:	430b      	orrs	r3, r1
 801ed5c:	f43f ad06 	beq.w	801e76c <_svfprintf_r+0x814>
 801ed60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ed62:	6023      	str	r3, [r4, #0]
 801ed64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed66:	6063      	str	r3, [r4, #4]
 801ed68:	441a      	add	r2, r3
 801ed6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ed6c:	9228      	str	r2, [sp, #160]	@ 0xa0
 801ed6e:	3301      	adds	r3, #1
 801ed70:	2b07      	cmp	r3, #7
 801ed72:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ed74:	dc3b      	bgt.n	801edee <_svfprintf_r+0xe96>
 801ed76:	f104 0308 	add.w	r3, r4, #8
 801ed7a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ed7c:	2e00      	cmp	r6, #0
 801ed7e:	da1b      	bge.n	801edb8 <_svfprintf_r+0xe60>
 801ed80:	4f2a      	ldr	r7, [pc, #168]	@ (801ee2c <_svfprintf_r+0xed4>)
 801ed82:	4276      	negs	r6, r6
 801ed84:	461a      	mov	r2, r3
 801ed86:	2410      	movs	r4, #16
 801ed88:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801ed8c:	2e10      	cmp	r6, #16
 801ed8e:	f101 0101 	add.w	r1, r1, #1
 801ed92:	f103 0308 	add.w	r3, r3, #8
 801ed96:	6017      	str	r7, [r2, #0]
 801ed98:	dc33      	bgt.n	801ee02 <_svfprintf_r+0xeaa>
 801ed9a:	6056      	str	r6, [r2, #4]
 801ed9c:	2907      	cmp	r1, #7
 801ed9e:	4406      	add	r6, r0
 801eda0:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801eda4:	dd08      	ble.n	801edb8 <_svfprintf_r+0xe60>
 801eda6:	9803      	ldr	r0, [sp, #12]
 801eda8:	aa26      	add	r2, sp, #152	@ 0x98
 801edaa:	4659      	mov	r1, fp
 801edac:	f001 ffa7 	bl	8020cfe <__ssprint_r>
 801edb0:	2800      	cmp	r0, #0
 801edb2:	f040 824c 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801edb6:	ab29      	add	r3, sp, #164	@ 0xa4
 801edb8:	9a04      	ldr	r2, [sp, #16]
 801edba:	9904      	ldr	r1, [sp, #16]
 801edbc:	605a      	str	r2, [r3, #4]
 801edbe:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801edc0:	f8c3 9000 	str.w	r9, [r3]
 801edc4:	440a      	add	r2, r1
 801edc6:	9228      	str	r2, [sp, #160]	@ 0xa0
 801edc8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801edca:	3201      	adds	r2, #1
 801edcc:	2a07      	cmp	r2, #7
 801edce:	9227      	str	r2, [sp, #156]	@ 0x9c
 801edd0:	f73f af7c 	bgt.w	801eccc <_svfprintf_r+0xd74>
 801edd4:	f103 0408 	add.w	r4, r3, #8
 801edd8:	e4c8      	b.n	801e76c <_svfprintf_r+0x814>
 801edda:	9803      	ldr	r0, [sp, #12]
 801eddc:	aa26      	add	r2, sp, #152	@ 0x98
 801edde:	4659      	mov	r1, fp
 801ede0:	f001 ff8d 	bl	8020cfe <__ssprint_r>
 801ede4:	2800      	cmp	r0, #0
 801ede6:	f040 8232 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801edea:	ac29      	add	r4, sp, #164	@ 0xa4
 801edec:	e7af      	b.n	801ed4e <_svfprintf_r+0xdf6>
 801edee:	9803      	ldr	r0, [sp, #12]
 801edf0:	aa26      	add	r2, sp, #152	@ 0x98
 801edf2:	4659      	mov	r1, fp
 801edf4:	f001 ff83 	bl	8020cfe <__ssprint_r>
 801edf8:	2800      	cmp	r0, #0
 801edfa:	f040 8228 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801edfe:	ab29      	add	r3, sp, #164	@ 0xa4
 801ee00:	e7bb      	b.n	801ed7a <_svfprintf_r+0xe22>
 801ee02:	3010      	adds	r0, #16
 801ee04:	2907      	cmp	r1, #7
 801ee06:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801ee0a:	6054      	str	r4, [r2, #4]
 801ee0c:	dd08      	ble.n	801ee20 <_svfprintf_r+0xec8>
 801ee0e:	9803      	ldr	r0, [sp, #12]
 801ee10:	aa26      	add	r2, sp, #152	@ 0x98
 801ee12:	4659      	mov	r1, fp
 801ee14:	f001 ff73 	bl	8020cfe <__ssprint_r>
 801ee18:	2800      	cmp	r0, #0
 801ee1a:	f040 8218 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ee1e:	ab29      	add	r3, sp, #164	@ 0xa4
 801ee20:	3e10      	subs	r6, #16
 801ee22:	461a      	mov	r2, r3
 801ee24:	e7b0      	b.n	801ed88 <_svfprintf_r+0xe30>
 801ee26:	bf00      	nop
 801ee28:	08024b7e 	.word	0x08024b7e
 801ee2c:	08024b80 	.word	0x08024b80
 801ee30:	9b04      	ldr	r3, [sp, #16]
 801ee32:	444b      	add	r3, r9
 801ee34:	9306      	str	r3, [sp, #24]
 801ee36:	9b04      	ldr	r3, [sp, #16]
 801ee38:	42b3      	cmp	r3, r6
 801ee3a:	bfa8      	it	ge
 801ee3c:	4633      	movge	r3, r6
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	4698      	mov	r8, r3
 801ee42:	dd0b      	ble.n	801ee5c <_svfprintf_r+0xf04>
 801ee44:	e9c4 9300 	strd	r9, r3, [r4]
 801ee48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ee4a:	4443      	add	r3, r8
 801ee4c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ee4e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ee50:	3301      	adds	r3, #1
 801ee52:	2b07      	cmp	r3, #7
 801ee54:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ee56:	f300 8089 	bgt.w	801ef6c <_svfprintf_r+0x1014>
 801ee5a:	3408      	adds	r4, #8
 801ee5c:	4643      	mov	r3, r8
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	bfac      	ite	ge
 801ee62:	eba6 0808 	subge.w	r8, r6, r8
 801ee66:	46b0      	movlt	r8, r6
 801ee68:	f1b8 0f00 	cmp.w	r8, #0
 801ee6c:	dd1b      	ble.n	801eea6 <_svfprintf_r+0xf4e>
 801ee6e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801ee72:	4897      	ldr	r0, [pc, #604]	@ (801f0d0 <_svfprintf_r+0x1178>)
 801ee74:	6020      	str	r0, [r4, #0]
 801ee76:	f1b8 0f10 	cmp.w	r8, #16
 801ee7a:	f102 0201 	add.w	r2, r2, #1
 801ee7e:	f104 0108 	add.w	r1, r4, #8
 801ee82:	dc7d      	bgt.n	801ef80 <_svfprintf_r+0x1028>
 801ee84:	4443      	add	r3, r8
 801ee86:	2a07      	cmp	r2, #7
 801ee88:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801ee8c:	f8c4 8004 	str.w	r8, [r4, #4]
 801ee90:	f340 808a 	ble.w	801efa8 <_svfprintf_r+0x1050>
 801ee94:	9803      	ldr	r0, [sp, #12]
 801ee96:	aa26      	add	r2, sp, #152	@ 0x98
 801ee98:	4659      	mov	r1, fp
 801ee9a:	f001 ff30 	bl	8020cfe <__ssprint_r>
 801ee9e:	2800      	cmp	r0, #0
 801eea0:	f040 81d5 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801eea4:	ac29      	add	r4, sp, #164	@ 0xa4
 801eea6:	eb09 0806 	add.w	r8, r9, r6
 801eeaa:	056e      	lsls	r6, r5, #21
 801eeac:	d508      	bpl.n	801eec0 <_svfprintf_r+0xf68>
 801eeae:	9b08      	ldr	r3, [sp, #32]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d17b      	bne.n	801efac <_svfprintf_r+0x1054>
 801eeb4:	2f00      	cmp	r7, #0
 801eeb6:	d17b      	bne.n	801efb0 <_svfprintf_r+0x1058>
 801eeb8:	9b06      	ldr	r3, [sp, #24]
 801eeba:	4598      	cmp	r8, r3
 801eebc:	bf28      	it	cs
 801eebe:	4698      	movcs	r8, r3
 801eec0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801eec2:	9a04      	ldr	r2, [sp, #16]
 801eec4:	4293      	cmp	r3, r2
 801eec6:	db01      	blt.n	801eecc <_svfprintf_r+0xf74>
 801eec8:	07e8      	lsls	r0, r5, #31
 801eeca:	d50e      	bpl.n	801eeea <_svfprintf_r+0xf92>
 801eecc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801eece:	6023      	str	r3, [r4, #0]
 801eed0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eed2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eed4:	6063      	str	r3, [r4, #4]
 801eed6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eed8:	4413      	add	r3, r2
 801eeda:	9328      	str	r3, [sp, #160]	@ 0xa0
 801eedc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eede:	3301      	adds	r3, #1
 801eee0:	2b07      	cmp	r3, #7
 801eee2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801eee4:	f300 80df 	bgt.w	801f0a6 <_svfprintf_r+0x114e>
 801eee8:	3408      	adds	r4, #8
 801eeea:	9b04      	ldr	r3, [sp, #16]
 801eeec:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801eeee:	1bdf      	subs	r7, r3, r7
 801eef0:	9b06      	ldr	r3, [sp, #24]
 801eef2:	eba3 0308 	sub.w	r3, r3, r8
 801eef6:	429f      	cmp	r7, r3
 801eef8:	bfa8      	it	ge
 801eefa:	461f      	movge	r7, r3
 801eefc:	2f00      	cmp	r7, #0
 801eefe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ef00:	dd0a      	ble.n	801ef18 <_svfprintf_r+0xfc0>
 801ef02:	443b      	add	r3, r7
 801ef04:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ef06:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ef08:	3301      	adds	r3, #1
 801ef0a:	2b07      	cmp	r3, #7
 801ef0c:	e9c4 8700 	strd	r8, r7, [r4]
 801ef10:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ef12:	f300 80d2 	bgt.w	801f0ba <_svfprintf_r+0x1162>
 801ef16:	3408      	adds	r4, #8
 801ef18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ef1a:	9b04      	ldr	r3, [sp, #16]
 801ef1c:	2f00      	cmp	r7, #0
 801ef1e:	eba3 0606 	sub.w	r6, r3, r6
 801ef22:	bfa8      	it	ge
 801ef24:	1bf6      	subge	r6, r6, r7
 801ef26:	2e00      	cmp	r6, #0
 801ef28:	f77f ac20 	ble.w	801e76c <_svfprintf_r+0x814>
 801ef2c:	4f68      	ldr	r7, [pc, #416]	@ (801f0d0 <_svfprintf_r+0x1178>)
 801ef2e:	f04f 0810 	mov.w	r8, #16
 801ef32:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ef36:	2e10      	cmp	r6, #16
 801ef38:	f103 0301 	add.w	r3, r3, #1
 801ef3c:	f104 0108 	add.w	r1, r4, #8
 801ef40:	6027      	str	r7, [r4, #0]
 801ef42:	f77f aebc 	ble.w	801ecbe <_svfprintf_r+0xd66>
 801ef46:	3210      	adds	r2, #16
 801ef48:	2b07      	cmp	r3, #7
 801ef4a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ef4e:	f8c4 8004 	str.w	r8, [r4, #4]
 801ef52:	dd08      	ble.n	801ef66 <_svfprintf_r+0x100e>
 801ef54:	9803      	ldr	r0, [sp, #12]
 801ef56:	aa26      	add	r2, sp, #152	@ 0x98
 801ef58:	4659      	mov	r1, fp
 801ef5a:	f001 fed0 	bl	8020cfe <__ssprint_r>
 801ef5e:	2800      	cmp	r0, #0
 801ef60:	f040 8175 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ef64:	a929      	add	r1, sp, #164	@ 0xa4
 801ef66:	3e10      	subs	r6, #16
 801ef68:	460c      	mov	r4, r1
 801ef6a:	e7e2      	b.n	801ef32 <_svfprintf_r+0xfda>
 801ef6c:	9803      	ldr	r0, [sp, #12]
 801ef6e:	aa26      	add	r2, sp, #152	@ 0x98
 801ef70:	4659      	mov	r1, fp
 801ef72:	f001 fec4 	bl	8020cfe <__ssprint_r>
 801ef76:	2800      	cmp	r0, #0
 801ef78:	f040 8169 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ef7c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ef7e:	e76d      	b.n	801ee5c <_svfprintf_r+0xf04>
 801ef80:	2010      	movs	r0, #16
 801ef82:	4403      	add	r3, r0
 801ef84:	2a07      	cmp	r2, #7
 801ef86:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801ef8a:	6060      	str	r0, [r4, #4]
 801ef8c:	dd08      	ble.n	801efa0 <_svfprintf_r+0x1048>
 801ef8e:	9803      	ldr	r0, [sp, #12]
 801ef90:	aa26      	add	r2, sp, #152	@ 0x98
 801ef92:	4659      	mov	r1, fp
 801ef94:	f001 feb3 	bl	8020cfe <__ssprint_r>
 801ef98:	2800      	cmp	r0, #0
 801ef9a:	f040 8158 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801ef9e:	a929      	add	r1, sp, #164	@ 0xa4
 801efa0:	f1a8 0810 	sub.w	r8, r8, #16
 801efa4:	460c      	mov	r4, r1
 801efa6:	e762      	b.n	801ee6e <_svfprintf_r+0xf16>
 801efa8:	460c      	mov	r4, r1
 801efaa:	e77c      	b.n	801eea6 <_svfprintf_r+0xf4e>
 801efac:	2f00      	cmp	r7, #0
 801efae:	d04a      	beq.n	801f046 <_svfprintf_r+0x10ee>
 801efb0:	3f01      	subs	r7, #1
 801efb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801efb4:	6023      	str	r3, [r4, #0]
 801efb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801efb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801efba:	6063      	str	r3, [r4, #4]
 801efbc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801efbe:	4413      	add	r3, r2
 801efc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801efc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801efc4:	3301      	adds	r3, #1
 801efc6:	2b07      	cmp	r3, #7
 801efc8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801efca:	dc43      	bgt.n	801f054 <_svfprintf_r+0x10fc>
 801efcc:	3408      	adds	r4, #8
 801efce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efd0:	781a      	ldrb	r2, [r3, #0]
 801efd2:	9b06      	ldr	r3, [sp, #24]
 801efd4:	eba3 0308 	sub.w	r3, r3, r8
 801efd8:	429a      	cmp	r2, r3
 801efda:	bfa8      	it	ge
 801efdc:	461a      	movge	r2, r3
 801efde:	2a00      	cmp	r2, #0
 801efe0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801efe2:	4691      	mov	r9, r2
 801efe4:	dd09      	ble.n	801effa <_svfprintf_r+0x10a2>
 801efe6:	4413      	add	r3, r2
 801efe8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801efea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801efec:	3301      	adds	r3, #1
 801efee:	2b07      	cmp	r3, #7
 801eff0:	e9c4 8200 	strd	r8, r2, [r4]
 801eff4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801eff6:	dc37      	bgt.n	801f068 <_svfprintf_r+0x1110>
 801eff8:	3408      	adds	r4, #8
 801effa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801effc:	781e      	ldrb	r6, [r3, #0]
 801effe:	f1b9 0f00 	cmp.w	r9, #0
 801f002:	bfa8      	it	ge
 801f004:	eba6 0609 	subge.w	r6, r6, r9
 801f008:	2e00      	cmp	r6, #0
 801f00a:	dd18      	ble.n	801f03e <_svfprintf_r+0x10e6>
 801f00c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801f010:	482f      	ldr	r0, [pc, #188]	@ (801f0d0 <_svfprintf_r+0x1178>)
 801f012:	6020      	str	r0, [r4, #0]
 801f014:	2e10      	cmp	r6, #16
 801f016:	f103 0301 	add.w	r3, r3, #1
 801f01a:	f104 0108 	add.w	r1, r4, #8
 801f01e:	dc2d      	bgt.n	801f07c <_svfprintf_r+0x1124>
 801f020:	6066      	str	r6, [r4, #4]
 801f022:	2b07      	cmp	r3, #7
 801f024:	4416      	add	r6, r2
 801f026:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801f02a:	dd3a      	ble.n	801f0a2 <_svfprintf_r+0x114a>
 801f02c:	9803      	ldr	r0, [sp, #12]
 801f02e:	aa26      	add	r2, sp, #152	@ 0x98
 801f030:	4659      	mov	r1, fp
 801f032:	f001 fe64 	bl	8020cfe <__ssprint_r>
 801f036:	2800      	cmp	r0, #0
 801f038:	f040 8109 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801f03c:	ac29      	add	r4, sp, #164	@ 0xa4
 801f03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f040:	781b      	ldrb	r3, [r3, #0]
 801f042:	4498      	add	r8, r3
 801f044:	e733      	b.n	801eeae <_svfprintf_r+0xf56>
 801f046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f048:	3b01      	subs	r3, #1
 801f04a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f04c:	9b08      	ldr	r3, [sp, #32]
 801f04e:	3b01      	subs	r3, #1
 801f050:	9308      	str	r3, [sp, #32]
 801f052:	e7ae      	b.n	801efb2 <_svfprintf_r+0x105a>
 801f054:	9803      	ldr	r0, [sp, #12]
 801f056:	aa26      	add	r2, sp, #152	@ 0x98
 801f058:	4659      	mov	r1, fp
 801f05a:	f001 fe50 	bl	8020cfe <__ssprint_r>
 801f05e:	2800      	cmp	r0, #0
 801f060:	f040 80f5 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801f064:	ac29      	add	r4, sp, #164	@ 0xa4
 801f066:	e7b2      	b.n	801efce <_svfprintf_r+0x1076>
 801f068:	9803      	ldr	r0, [sp, #12]
 801f06a:	aa26      	add	r2, sp, #152	@ 0x98
 801f06c:	4659      	mov	r1, fp
 801f06e:	f001 fe46 	bl	8020cfe <__ssprint_r>
 801f072:	2800      	cmp	r0, #0
 801f074:	f040 80eb 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801f078:	ac29      	add	r4, sp, #164	@ 0xa4
 801f07a:	e7be      	b.n	801effa <_svfprintf_r+0x10a2>
 801f07c:	2010      	movs	r0, #16
 801f07e:	4402      	add	r2, r0
 801f080:	2b07      	cmp	r3, #7
 801f082:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801f086:	6060      	str	r0, [r4, #4]
 801f088:	dd08      	ble.n	801f09c <_svfprintf_r+0x1144>
 801f08a:	9803      	ldr	r0, [sp, #12]
 801f08c:	aa26      	add	r2, sp, #152	@ 0x98
 801f08e:	4659      	mov	r1, fp
 801f090:	f001 fe35 	bl	8020cfe <__ssprint_r>
 801f094:	2800      	cmp	r0, #0
 801f096:	f040 80da 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801f09a:	a929      	add	r1, sp, #164	@ 0xa4
 801f09c:	3e10      	subs	r6, #16
 801f09e:	460c      	mov	r4, r1
 801f0a0:	e7b4      	b.n	801f00c <_svfprintf_r+0x10b4>
 801f0a2:	460c      	mov	r4, r1
 801f0a4:	e7cb      	b.n	801f03e <_svfprintf_r+0x10e6>
 801f0a6:	9803      	ldr	r0, [sp, #12]
 801f0a8:	aa26      	add	r2, sp, #152	@ 0x98
 801f0aa:	4659      	mov	r1, fp
 801f0ac:	f001 fe27 	bl	8020cfe <__ssprint_r>
 801f0b0:	2800      	cmp	r0, #0
 801f0b2:	f040 80cc 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801f0b6:	ac29      	add	r4, sp, #164	@ 0xa4
 801f0b8:	e717      	b.n	801eeea <_svfprintf_r+0xf92>
 801f0ba:	9803      	ldr	r0, [sp, #12]
 801f0bc:	aa26      	add	r2, sp, #152	@ 0x98
 801f0be:	4659      	mov	r1, fp
 801f0c0:	f001 fe1d 	bl	8020cfe <__ssprint_r>
 801f0c4:	2800      	cmp	r0, #0
 801f0c6:	f040 80c2 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801f0ca:	ac29      	add	r4, sp, #164	@ 0xa4
 801f0cc:	e724      	b.n	801ef18 <_svfprintf_r+0xfc0>
 801f0ce:	bf00      	nop
 801f0d0:	08024b80 	.word	0x08024b80
 801f0d4:	9904      	ldr	r1, [sp, #16]
 801f0d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f0d8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801f0da:	2901      	cmp	r1, #1
 801f0dc:	f103 0301 	add.w	r3, r3, #1
 801f0e0:	f102 0201 	add.w	r2, r2, #1
 801f0e4:	f104 0608 	add.w	r6, r4, #8
 801f0e8:	dc02      	bgt.n	801f0f0 <_svfprintf_r+0x1198>
 801f0ea:	07e9      	lsls	r1, r5, #31
 801f0ec:	f140 8083 	bpl.w	801f1f6 <_svfprintf_r+0x129e>
 801f0f0:	2101      	movs	r1, #1
 801f0f2:	2a07      	cmp	r2, #7
 801f0f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801f0f8:	f8c4 9000 	str.w	r9, [r4]
 801f0fc:	6061      	str	r1, [r4, #4]
 801f0fe:	dd08      	ble.n	801f112 <_svfprintf_r+0x11ba>
 801f100:	9803      	ldr	r0, [sp, #12]
 801f102:	aa26      	add	r2, sp, #152	@ 0x98
 801f104:	4659      	mov	r1, fp
 801f106:	f001 fdfa 	bl	8020cfe <__ssprint_r>
 801f10a:	2800      	cmp	r0, #0
 801f10c:	f040 809f 	bne.w	801f24e <_svfprintf_r+0x12f6>
 801f110:	ae29      	add	r6, sp, #164	@ 0xa4
 801f112:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f114:	6033      	str	r3, [r6, #0]
 801f116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f118:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f11a:	6073      	str	r3, [r6, #4]
 801f11c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f11e:	4413      	add	r3, r2
 801f120:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f122:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f124:	3301      	adds	r3, #1
 801f126:	2b07      	cmp	r3, #7
 801f128:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f12a:	dc33      	bgt.n	801f194 <_svfprintf_r+0x123c>
 801f12c:	3608      	adds	r6, #8
 801f12e:	9b04      	ldr	r3, [sp, #16]
 801f130:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801f134:	1e5c      	subs	r4, r3, #1
 801f136:	2200      	movs	r2, #0
 801f138:	2300      	movs	r3, #0
 801f13a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801f13e:	f7e1 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 801f142:	2800      	cmp	r0, #0
 801f144:	d12f      	bne.n	801f1a6 <_svfprintf_r+0x124e>
 801f146:	f109 0201 	add.w	r2, r9, #1
 801f14a:	e9c6 2400 	strd	r2, r4, [r6]
 801f14e:	9a04      	ldr	r2, [sp, #16]
 801f150:	f108 0301 	add.w	r3, r8, #1
 801f154:	3f01      	subs	r7, #1
 801f156:	4417      	add	r7, r2
 801f158:	2b07      	cmp	r3, #7
 801f15a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801f15e:	dd53      	ble.n	801f208 <_svfprintf_r+0x12b0>
 801f160:	9803      	ldr	r0, [sp, #12]
 801f162:	aa26      	add	r2, sp, #152	@ 0x98
 801f164:	4659      	mov	r1, fp
 801f166:	f001 fdca 	bl	8020cfe <__ssprint_r>
 801f16a:	2800      	cmp	r0, #0
 801f16c:	d16f      	bne.n	801f24e <_svfprintf_r+0x12f6>
 801f16e:	ae29      	add	r6, sp, #164	@ 0xa4
 801f170:	ab22      	add	r3, sp, #136	@ 0x88
 801f172:	6033      	str	r3, [r6, #0]
 801f174:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f176:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f178:	6073      	str	r3, [r6, #4]
 801f17a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f17c:	4413      	add	r3, r2
 801f17e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f180:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f182:	3301      	adds	r3, #1
 801f184:	2b07      	cmp	r3, #7
 801f186:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f188:	f73f ada0 	bgt.w	801eccc <_svfprintf_r+0xd74>
 801f18c:	f106 0408 	add.w	r4, r6, #8
 801f190:	f7ff baec 	b.w	801e76c <_svfprintf_r+0x814>
 801f194:	9803      	ldr	r0, [sp, #12]
 801f196:	aa26      	add	r2, sp, #152	@ 0x98
 801f198:	4659      	mov	r1, fp
 801f19a:	f001 fdb0 	bl	8020cfe <__ssprint_r>
 801f19e:	2800      	cmp	r0, #0
 801f1a0:	d155      	bne.n	801f24e <_svfprintf_r+0x12f6>
 801f1a2:	ae29      	add	r6, sp, #164	@ 0xa4
 801f1a4:	e7c3      	b.n	801f12e <_svfprintf_r+0x11d6>
 801f1a6:	9b04      	ldr	r3, [sp, #16]
 801f1a8:	2b01      	cmp	r3, #1
 801f1aa:	dde1      	ble.n	801f170 <_svfprintf_r+0x1218>
 801f1ac:	4f57      	ldr	r7, [pc, #348]	@ (801f30c <_svfprintf_r+0x13b4>)
 801f1ae:	f04f 0810 	mov.w	r8, #16
 801f1b2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801f1b6:	2c10      	cmp	r4, #16
 801f1b8:	f103 0301 	add.w	r3, r3, #1
 801f1bc:	f106 0108 	add.w	r1, r6, #8
 801f1c0:	6037      	str	r7, [r6, #0]
 801f1c2:	dc07      	bgt.n	801f1d4 <_svfprintf_r+0x127c>
 801f1c4:	6074      	str	r4, [r6, #4]
 801f1c6:	2b07      	cmp	r3, #7
 801f1c8:	4414      	add	r4, r2
 801f1ca:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801f1ce:	dcc7      	bgt.n	801f160 <_svfprintf_r+0x1208>
 801f1d0:	460e      	mov	r6, r1
 801f1d2:	e7cd      	b.n	801f170 <_svfprintf_r+0x1218>
 801f1d4:	3210      	adds	r2, #16
 801f1d6:	2b07      	cmp	r3, #7
 801f1d8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801f1dc:	f8c6 8004 	str.w	r8, [r6, #4]
 801f1e0:	dd06      	ble.n	801f1f0 <_svfprintf_r+0x1298>
 801f1e2:	9803      	ldr	r0, [sp, #12]
 801f1e4:	aa26      	add	r2, sp, #152	@ 0x98
 801f1e6:	4659      	mov	r1, fp
 801f1e8:	f001 fd89 	bl	8020cfe <__ssprint_r>
 801f1ec:	bb78      	cbnz	r0, 801f24e <_svfprintf_r+0x12f6>
 801f1ee:	a929      	add	r1, sp, #164	@ 0xa4
 801f1f0:	3c10      	subs	r4, #16
 801f1f2:	460e      	mov	r6, r1
 801f1f4:	e7dd      	b.n	801f1b2 <_svfprintf_r+0x125a>
 801f1f6:	2101      	movs	r1, #1
 801f1f8:	2a07      	cmp	r2, #7
 801f1fa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801f1fe:	f8c4 9000 	str.w	r9, [r4]
 801f202:	6061      	str	r1, [r4, #4]
 801f204:	ddb4      	ble.n	801f170 <_svfprintf_r+0x1218>
 801f206:	e7ab      	b.n	801f160 <_svfprintf_r+0x1208>
 801f208:	3608      	adds	r6, #8
 801f20a:	e7b1      	b.n	801f170 <_svfprintf_r+0x1218>
 801f20c:	460c      	mov	r4, r1
 801f20e:	f7ff baad 	b.w	801e76c <_svfprintf_r+0x814>
 801f212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f214:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f216:	1a9d      	subs	r5, r3, r2
 801f218:	2d00      	cmp	r5, #0
 801f21a:	f77f aaaa 	ble.w	801e772 <_svfprintf_r+0x81a>
 801f21e:	4e3c      	ldr	r6, [pc, #240]	@ (801f310 <_svfprintf_r+0x13b8>)
 801f220:	2710      	movs	r7, #16
 801f222:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801f226:	2d10      	cmp	r5, #16
 801f228:	f103 0301 	add.w	r3, r3, #1
 801f22c:	6026      	str	r6, [r4, #0]
 801f22e:	dc18      	bgt.n	801f262 <_svfprintf_r+0x130a>
 801f230:	442a      	add	r2, r5
 801f232:	2b07      	cmp	r3, #7
 801f234:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801f238:	6065      	str	r5, [r4, #4]
 801f23a:	f77f aa9a 	ble.w	801e772 <_svfprintf_r+0x81a>
 801f23e:	9803      	ldr	r0, [sp, #12]
 801f240:	aa26      	add	r2, sp, #152	@ 0x98
 801f242:	4659      	mov	r1, fp
 801f244:	f001 fd5b 	bl	8020cfe <__ssprint_r>
 801f248:	2800      	cmp	r0, #0
 801f24a:	f43f aa92 	beq.w	801e772 <_svfprintf_r+0x81a>
 801f24e:	f1ba 0f00 	cmp.w	sl, #0
 801f252:	f43f a89a 	beq.w	801e38a <_svfprintf_r+0x432>
 801f256:	9803      	ldr	r0, [sp, #12]
 801f258:	4651      	mov	r1, sl
 801f25a:	f7fe fb77 	bl	801d94c <_free_r>
 801f25e:	f7ff b894 	b.w	801e38a <_svfprintf_r+0x432>
 801f262:	3210      	adds	r2, #16
 801f264:	2b07      	cmp	r3, #7
 801f266:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801f26a:	6067      	str	r7, [r4, #4]
 801f26c:	dc02      	bgt.n	801f274 <_svfprintf_r+0x131c>
 801f26e:	3408      	adds	r4, #8
 801f270:	3d10      	subs	r5, #16
 801f272:	e7d6      	b.n	801f222 <_svfprintf_r+0x12ca>
 801f274:	9803      	ldr	r0, [sp, #12]
 801f276:	aa26      	add	r2, sp, #152	@ 0x98
 801f278:	4659      	mov	r1, fp
 801f27a:	f001 fd40 	bl	8020cfe <__ssprint_r>
 801f27e:	2800      	cmp	r0, #0
 801f280:	d1e5      	bne.n	801f24e <_svfprintf_r+0x12f6>
 801f282:	ac29      	add	r4, sp, #164	@ 0xa4
 801f284:	e7f4      	b.n	801f270 <_svfprintf_r+0x1318>
 801f286:	9803      	ldr	r0, [sp, #12]
 801f288:	4651      	mov	r1, sl
 801f28a:	f7fe fb5f 	bl	801d94c <_free_r>
 801f28e:	f7ff ba88 	b.w	801e7a2 <_svfprintf_r+0x84a>
 801f292:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f294:	2b00      	cmp	r3, #0
 801f296:	f43f a878 	beq.w	801e38a <_svfprintf_r+0x432>
 801f29a:	9803      	ldr	r0, [sp, #12]
 801f29c:	aa26      	add	r2, sp, #152	@ 0x98
 801f29e:	4659      	mov	r1, fp
 801f2a0:	f001 fd2d 	bl	8020cfe <__ssprint_r>
 801f2a4:	f7ff b871 	b.w	801e38a <_svfprintf_r+0x432>
 801f2a8:	ea56 0207 	orrs.w	r2, r6, r7
 801f2ac:	9508      	str	r5, [sp, #32]
 801f2ae:	f43f ab7a 	beq.w	801e9a6 <_svfprintf_r+0xa4e>
 801f2b2:	2b01      	cmp	r3, #1
 801f2b4:	f43f abfb 	beq.w	801eaae <_svfprintf_r+0xb56>
 801f2b8:	2b02      	cmp	r3, #2
 801f2ba:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801f2be:	f43f ac3f 	beq.w	801eb40 <_svfprintf_r+0xbe8>
 801f2c2:	f006 0307 	and.w	r3, r6, #7
 801f2c6:	08f6      	lsrs	r6, r6, #3
 801f2c8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801f2cc:	08ff      	lsrs	r7, r7, #3
 801f2ce:	3330      	adds	r3, #48	@ 0x30
 801f2d0:	ea56 0107 	orrs.w	r1, r6, r7
 801f2d4:	464a      	mov	r2, r9
 801f2d6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801f2da:	d1f2      	bne.n	801f2c2 <_svfprintf_r+0x136a>
 801f2dc:	9908      	ldr	r1, [sp, #32]
 801f2de:	07c8      	lsls	r0, r1, #31
 801f2e0:	d506      	bpl.n	801f2f0 <_svfprintf_r+0x1398>
 801f2e2:	2b30      	cmp	r3, #48	@ 0x30
 801f2e4:	d004      	beq.n	801f2f0 <_svfprintf_r+0x1398>
 801f2e6:	2330      	movs	r3, #48	@ 0x30
 801f2e8:	f809 3c01 	strb.w	r3, [r9, #-1]
 801f2ec:	f1a2 0902 	sub.w	r9, r2, #2
 801f2f0:	ab52      	add	r3, sp, #328	@ 0x148
 801f2f2:	9d08      	ldr	r5, [sp, #32]
 801f2f4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 801f2f8:	f04f 0a00 	mov.w	sl, #0
 801f2fc:	eba3 0809 	sub.w	r8, r3, r9
 801f300:	4657      	mov	r7, sl
 801f302:	f8cd a020 	str.w	sl, [sp, #32]
 801f306:	4656      	mov	r6, sl
 801f308:	f7ff b97c 	b.w	801e604 <_svfprintf_r+0x6ac>
 801f30c:	08024b80 	.word	0x08024b80
 801f310:	08024b90 	.word	0x08024b90

0801f314 <_fclose_r>:
 801f314:	b570      	push	{r4, r5, r6, lr}
 801f316:	4605      	mov	r5, r0
 801f318:	460c      	mov	r4, r1
 801f31a:	b1b1      	cbz	r1, 801f34a <_fclose_r+0x36>
 801f31c:	b118      	cbz	r0, 801f326 <_fclose_r+0x12>
 801f31e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801f320:	b90b      	cbnz	r3, 801f326 <_fclose_r+0x12>
 801f322:	f7fe f949 	bl	801d5b8 <__sinit>
 801f326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f328:	07de      	lsls	r6, r3, #31
 801f32a:	d405      	bmi.n	801f338 <_fclose_r+0x24>
 801f32c:	89a3      	ldrh	r3, [r4, #12]
 801f32e:	0598      	lsls	r0, r3, #22
 801f330:	d402      	bmi.n	801f338 <_fclose_r+0x24>
 801f332:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f334:	f7fe fa94 	bl	801d860 <__retarget_lock_acquire_recursive>
 801f338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f33c:	b943      	cbnz	r3, 801f350 <_fclose_r+0x3c>
 801f33e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f340:	07d9      	lsls	r1, r3, #31
 801f342:	d402      	bmi.n	801f34a <_fclose_r+0x36>
 801f344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f346:	f7fe fa8c 	bl	801d862 <__retarget_lock_release_recursive>
 801f34a:	2600      	movs	r6, #0
 801f34c:	4630      	mov	r0, r6
 801f34e:	bd70      	pop	{r4, r5, r6, pc}
 801f350:	4621      	mov	r1, r4
 801f352:	4628      	mov	r0, r5
 801f354:	f000 f834 	bl	801f3c0 <__sflush_r>
 801f358:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801f35a:	4606      	mov	r6, r0
 801f35c:	b133      	cbz	r3, 801f36c <_fclose_r+0x58>
 801f35e:	69e1      	ldr	r1, [r4, #28]
 801f360:	4628      	mov	r0, r5
 801f362:	4798      	blx	r3
 801f364:	2800      	cmp	r0, #0
 801f366:	bfb8      	it	lt
 801f368:	f04f 36ff 	movlt.w	r6, #4294967295
 801f36c:	89a3      	ldrh	r3, [r4, #12]
 801f36e:	061a      	lsls	r2, r3, #24
 801f370:	d503      	bpl.n	801f37a <_fclose_r+0x66>
 801f372:	6921      	ldr	r1, [r4, #16]
 801f374:	4628      	mov	r0, r5
 801f376:	f7fe fae9 	bl	801d94c <_free_r>
 801f37a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f37c:	b141      	cbz	r1, 801f390 <_fclose_r+0x7c>
 801f37e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801f382:	4299      	cmp	r1, r3
 801f384:	d002      	beq.n	801f38c <_fclose_r+0x78>
 801f386:	4628      	mov	r0, r5
 801f388:	f7fe fae0 	bl	801d94c <_free_r>
 801f38c:	2300      	movs	r3, #0
 801f38e:	6323      	str	r3, [r4, #48]	@ 0x30
 801f390:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801f392:	b121      	cbz	r1, 801f39e <_fclose_r+0x8a>
 801f394:	4628      	mov	r0, r5
 801f396:	f7fe fad9 	bl	801d94c <_free_r>
 801f39a:	2300      	movs	r3, #0
 801f39c:	6463      	str	r3, [r4, #68]	@ 0x44
 801f39e:	f7fe f8ff 	bl	801d5a0 <__sfp_lock_acquire>
 801f3a2:	2300      	movs	r3, #0
 801f3a4:	81a3      	strh	r3, [r4, #12]
 801f3a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f3a8:	07db      	lsls	r3, r3, #31
 801f3aa:	d402      	bmi.n	801f3b2 <_fclose_r+0x9e>
 801f3ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f3ae:	f7fe fa58 	bl	801d862 <__retarget_lock_release_recursive>
 801f3b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f3b4:	f7fe fa53 	bl	801d85e <__retarget_lock_close_recursive>
 801f3b8:	f7fe f8f8 	bl	801d5ac <__sfp_lock_release>
 801f3bc:	e7c6      	b.n	801f34c <_fclose_r+0x38>
	...

0801f3c0 <__sflush_r>:
 801f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3c4:	4605      	mov	r5, r0
 801f3c6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801f3ca:	0706      	lsls	r6, r0, #28
 801f3cc:	460c      	mov	r4, r1
 801f3ce:	d457      	bmi.n	801f480 <__sflush_r+0xc0>
 801f3d0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 801f3d4:	818b      	strh	r3, [r1, #12]
 801f3d6:	684b      	ldr	r3, [r1, #4]
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	dc02      	bgt.n	801f3e2 <__sflush_r+0x22>
 801f3dc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	dd4c      	ble.n	801f47c <__sflush_r+0xbc>
 801f3e2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f3e4:	2e00      	cmp	r6, #0
 801f3e6:	d049      	beq.n	801f47c <__sflush_r+0xbc>
 801f3e8:	2300      	movs	r3, #0
 801f3ea:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801f3ee:	682f      	ldr	r7, [r5, #0]
 801f3f0:	69e1      	ldr	r1, [r4, #28]
 801f3f2:	602b      	str	r3, [r5, #0]
 801f3f4:	d034      	beq.n	801f460 <__sflush_r+0xa0>
 801f3f6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801f3f8:	89a3      	ldrh	r3, [r4, #12]
 801f3fa:	0759      	lsls	r1, r3, #29
 801f3fc:	d505      	bpl.n	801f40a <__sflush_r+0x4a>
 801f3fe:	6863      	ldr	r3, [r4, #4]
 801f400:	1ad2      	subs	r2, r2, r3
 801f402:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f404:	b10b      	cbz	r3, 801f40a <__sflush_r+0x4a>
 801f406:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801f408:	1ad2      	subs	r2, r2, r3
 801f40a:	2300      	movs	r3, #0
 801f40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f40e:	69e1      	ldr	r1, [r4, #28]
 801f410:	4628      	mov	r0, r5
 801f412:	47b0      	blx	r6
 801f414:	1c43      	adds	r3, r0, #1
 801f416:	d106      	bne.n	801f426 <__sflush_r+0x66>
 801f418:	682a      	ldr	r2, [r5, #0]
 801f41a:	2a1d      	cmp	r2, #29
 801f41c:	d848      	bhi.n	801f4b0 <__sflush_r+0xf0>
 801f41e:	4b2b      	ldr	r3, [pc, #172]	@ (801f4cc <__sflush_r+0x10c>)
 801f420:	4113      	asrs	r3, r2
 801f422:	07de      	lsls	r6, r3, #31
 801f424:	d444      	bmi.n	801f4b0 <__sflush_r+0xf0>
 801f426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f42a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801f42e:	81a2      	strh	r2, [r4, #12]
 801f430:	2200      	movs	r2, #0
 801f432:	6062      	str	r2, [r4, #4]
 801f434:	04d9      	lsls	r1, r3, #19
 801f436:	6922      	ldr	r2, [r4, #16]
 801f438:	6022      	str	r2, [r4, #0]
 801f43a:	d504      	bpl.n	801f446 <__sflush_r+0x86>
 801f43c:	1c42      	adds	r2, r0, #1
 801f43e:	d101      	bne.n	801f444 <__sflush_r+0x84>
 801f440:	682b      	ldr	r3, [r5, #0]
 801f442:	b903      	cbnz	r3, 801f446 <__sflush_r+0x86>
 801f444:	6520      	str	r0, [r4, #80]	@ 0x50
 801f446:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f448:	602f      	str	r7, [r5, #0]
 801f44a:	b1b9      	cbz	r1, 801f47c <__sflush_r+0xbc>
 801f44c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801f450:	4299      	cmp	r1, r3
 801f452:	d002      	beq.n	801f45a <__sflush_r+0x9a>
 801f454:	4628      	mov	r0, r5
 801f456:	f7fe fa79 	bl	801d94c <_free_r>
 801f45a:	2300      	movs	r3, #0
 801f45c:	6323      	str	r3, [r4, #48]	@ 0x30
 801f45e:	e00d      	b.n	801f47c <__sflush_r+0xbc>
 801f460:	2301      	movs	r3, #1
 801f462:	4628      	mov	r0, r5
 801f464:	47b0      	blx	r6
 801f466:	4602      	mov	r2, r0
 801f468:	1c50      	adds	r0, r2, #1
 801f46a:	d1c5      	bne.n	801f3f8 <__sflush_r+0x38>
 801f46c:	682b      	ldr	r3, [r5, #0]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d0c2      	beq.n	801f3f8 <__sflush_r+0x38>
 801f472:	2b1d      	cmp	r3, #29
 801f474:	d001      	beq.n	801f47a <__sflush_r+0xba>
 801f476:	2b16      	cmp	r3, #22
 801f478:	d11a      	bne.n	801f4b0 <__sflush_r+0xf0>
 801f47a:	602f      	str	r7, [r5, #0]
 801f47c:	2000      	movs	r0, #0
 801f47e:	e01e      	b.n	801f4be <__sflush_r+0xfe>
 801f480:	690f      	ldr	r7, [r1, #16]
 801f482:	2f00      	cmp	r7, #0
 801f484:	d0fa      	beq.n	801f47c <__sflush_r+0xbc>
 801f486:	0783      	lsls	r3, r0, #30
 801f488:	680e      	ldr	r6, [r1, #0]
 801f48a:	bf08      	it	eq
 801f48c:	694b      	ldreq	r3, [r1, #20]
 801f48e:	600f      	str	r7, [r1, #0]
 801f490:	bf18      	it	ne
 801f492:	2300      	movne	r3, #0
 801f494:	eba6 0807 	sub.w	r8, r6, r7
 801f498:	608b      	str	r3, [r1, #8]
 801f49a:	f1b8 0f00 	cmp.w	r8, #0
 801f49e:	dded      	ble.n	801f47c <__sflush_r+0xbc>
 801f4a0:	69e1      	ldr	r1, [r4, #28]
 801f4a2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801f4a4:	4643      	mov	r3, r8
 801f4a6:	463a      	mov	r2, r7
 801f4a8:	4628      	mov	r0, r5
 801f4aa:	47b0      	blx	r6
 801f4ac:	2800      	cmp	r0, #0
 801f4ae:	dc08      	bgt.n	801f4c2 <__sflush_r+0x102>
 801f4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f4b8:	81a3      	strh	r3, [r4, #12]
 801f4ba:	f04f 30ff 	mov.w	r0, #4294967295
 801f4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f4c2:	4407      	add	r7, r0
 801f4c4:	eba8 0800 	sub.w	r8, r8, r0
 801f4c8:	e7e7      	b.n	801f49a <__sflush_r+0xda>
 801f4ca:	bf00      	nop
 801f4cc:	dfbffffe 	.word	0xdfbffffe

0801f4d0 <_fflush_r>:
 801f4d0:	b538      	push	{r3, r4, r5, lr}
 801f4d2:	460c      	mov	r4, r1
 801f4d4:	4605      	mov	r5, r0
 801f4d6:	b118      	cbz	r0, 801f4e0 <_fflush_r+0x10>
 801f4d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801f4da:	b90b      	cbnz	r3, 801f4e0 <_fflush_r+0x10>
 801f4dc:	f7fe f86c 	bl	801d5b8 <__sinit>
 801f4e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801f4e4:	b1b8      	cbz	r0, 801f516 <_fflush_r+0x46>
 801f4e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f4e8:	07db      	lsls	r3, r3, #31
 801f4ea:	d404      	bmi.n	801f4f6 <_fflush_r+0x26>
 801f4ec:	0581      	lsls	r1, r0, #22
 801f4ee:	d402      	bmi.n	801f4f6 <_fflush_r+0x26>
 801f4f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f4f2:	f7fe f9b5 	bl	801d860 <__retarget_lock_acquire_recursive>
 801f4f6:	4628      	mov	r0, r5
 801f4f8:	4621      	mov	r1, r4
 801f4fa:	f7ff ff61 	bl	801f3c0 <__sflush_r>
 801f4fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f500:	07da      	lsls	r2, r3, #31
 801f502:	4605      	mov	r5, r0
 801f504:	d405      	bmi.n	801f512 <_fflush_r+0x42>
 801f506:	89a3      	ldrh	r3, [r4, #12]
 801f508:	059b      	lsls	r3, r3, #22
 801f50a:	d402      	bmi.n	801f512 <_fflush_r+0x42>
 801f50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f50e:	f7fe f9a8 	bl	801d862 <__retarget_lock_release_recursive>
 801f512:	4628      	mov	r0, r5
 801f514:	bd38      	pop	{r3, r4, r5, pc}
 801f516:	4605      	mov	r5, r0
 801f518:	e7fb      	b.n	801f512 <_fflush_r+0x42>

0801f51a <strncpy>:
 801f51a:	b510      	push	{r4, lr}
 801f51c:	3901      	subs	r1, #1
 801f51e:	4603      	mov	r3, r0
 801f520:	b132      	cbz	r2, 801f530 <strncpy+0x16>
 801f522:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f526:	f803 4b01 	strb.w	r4, [r3], #1
 801f52a:	3a01      	subs	r2, #1
 801f52c:	2c00      	cmp	r4, #0
 801f52e:	d1f7      	bne.n	801f520 <strncpy+0x6>
 801f530:	441a      	add	r2, r3
 801f532:	2100      	movs	r1, #0
 801f534:	4293      	cmp	r3, r2
 801f536:	d100      	bne.n	801f53a <strncpy+0x20>
 801f538:	bd10      	pop	{r4, pc}
 801f53a:	f803 1b01 	strb.w	r1, [r3], #1
 801f53e:	e7f9      	b.n	801f534 <strncpy+0x1a>

0801f540 <__locale_mb_cur_max>:
 801f540:	4b01      	ldr	r3, [pc, #4]	@ (801f548 <__locale_mb_cur_max+0x8>)
 801f542:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801f546:	4770      	bx	lr
 801f548:	2000068c 	.word	0x2000068c

0801f54c <_localeconv_r>:
 801f54c:	4800      	ldr	r0, [pc, #0]	@ (801f550 <_localeconv_r+0x4>)
 801f54e:	4770      	bx	lr
 801f550:	2000077c 	.word	0x2000077c

0801f554 <_sbrk_r>:
 801f554:	b538      	push	{r3, r4, r5, lr}
 801f556:	4d06      	ldr	r5, [pc, #24]	@ (801f570 <_sbrk_r+0x1c>)
 801f558:	2300      	movs	r3, #0
 801f55a:	4604      	mov	r4, r0
 801f55c:	4608      	mov	r0, r1
 801f55e:	602b      	str	r3, [r5, #0]
 801f560:	f7e4 fcbc 	bl	8003edc <_sbrk>
 801f564:	1c43      	adds	r3, r0, #1
 801f566:	d102      	bne.n	801f56e <_sbrk_r+0x1a>
 801f568:	682b      	ldr	r3, [r5, #0]
 801f56a:	b103      	cbz	r3, 801f56e <_sbrk_r+0x1a>
 801f56c:	6023      	str	r3, [r4, #0]
 801f56e:	bd38      	pop	{r3, r4, r5, pc}
 801f570:	2000d4ac 	.word	0x2000d4ac

0801f574 <__libc_fini_array>:
 801f574:	b538      	push	{r3, r4, r5, lr}
 801f576:	4d07      	ldr	r5, [pc, #28]	@ (801f594 <__libc_fini_array+0x20>)
 801f578:	4c07      	ldr	r4, [pc, #28]	@ (801f598 <__libc_fini_array+0x24>)
 801f57a:	1b64      	subs	r4, r4, r5
 801f57c:	10a4      	asrs	r4, r4, #2
 801f57e:	b91c      	cbnz	r4, 801f588 <__libc_fini_array+0x14>
 801f580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f584:	f004 bee2 	b.w	802434c <_fini>
 801f588:	3c01      	subs	r4, #1
 801f58a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801f58e:	4798      	blx	r3
 801f590:	e7f5      	b.n	801f57e <__libc_fini_array+0xa>
 801f592:	bf00      	nop
 801f594:	08025160 	.word	0x08025160
 801f598:	08025164 	.word	0x08025164

0801f59c <sysconf>:
 801f59c:	2808      	cmp	r0, #8
 801f59e:	b508      	push	{r3, lr}
 801f5a0:	d006      	beq.n	801f5b0 <sysconf+0x14>
 801f5a2:	f7fe f931 	bl	801d808 <__errno>
 801f5a6:	2316      	movs	r3, #22
 801f5a8:	6003      	str	r3, [r0, #0]
 801f5aa:	f04f 30ff 	mov.w	r0, #4294967295
 801f5ae:	bd08      	pop	{r3, pc}
 801f5b0:	2080      	movs	r0, #128	@ 0x80
 801f5b2:	e7fc      	b.n	801f5ae <sysconf+0x12>

0801f5b4 <frexp>:
 801f5b4:	b570      	push	{r4, r5, r6, lr}
 801f5b6:	2100      	movs	r1, #0
 801f5b8:	ec55 4b10 	vmov	r4, r5, d0
 801f5bc:	6001      	str	r1, [r0, #0]
 801f5be:	4915      	ldr	r1, [pc, #84]	@ (801f614 <frexp+0x60>)
 801f5c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f5c4:	428a      	cmp	r2, r1
 801f5c6:	4606      	mov	r6, r0
 801f5c8:	462b      	mov	r3, r5
 801f5ca:	d820      	bhi.n	801f60e <frexp+0x5a>
 801f5cc:	4621      	mov	r1, r4
 801f5ce:	4311      	orrs	r1, r2
 801f5d0:	d01d      	beq.n	801f60e <frexp+0x5a>
 801f5d2:	4911      	ldr	r1, [pc, #68]	@ (801f618 <frexp+0x64>)
 801f5d4:	4029      	ands	r1, r5
 801f5d6:	b961      	cbnz	r1, 801f5f2 <frexp+0x3e>
 801f5d8:	4b10      	ldr	r3, [pc, #64]	@ (801f61c <frexp+0x68>)
 801f5da:	2200      	movs	r2, #0
 801f5dc:	4620      	mov	r0, r4
 801f5de:	4629      	mov	r1, r5
 801f5e0:	f7e1 f80a 	bl	80005f8 <__aeabi_dmul>
 801f5e4:	460b      	mov	r3, r1
 801f5e6:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801f5ea:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801f5ee:	4604      	mov	r4, r0
 801f5f0:	6031      	str	r1, [r6, #0]
 801f5f2:	6831      	ldr	r1, [r6, #0]
 801f5f4:	1512      	asrs	r2, r2, #20
 801f5f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f5fa:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 801f5fe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f602:	4411      	add	r1, r2
 801f604:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801f608:	6031      	str	r1, [r6, #0]
 801f60a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801f60e:	ec45 4b10 	vmov	d0, r4, r5
 801f612:	bd70      	pop	{r4, r5, r6, pc}
 801f614:	7fefffff 	.word	0x7fefffff
 801f618:	7ff00000 	.word	0x7ff00000
 801f61c:	43500000 	.word	0x43500000

0801f620 <__register_exitproc>:
 801f620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f624:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801f69c <__register_exitproc+0x7c>
 801f628:	4606      	mov	r6, r0
 801f62a:	f8da 0000 	ldr.w	r0, [sl]
 801f62e:	4698      	mov	r8, r3
 801f630:	460f      	mov	r7, r1
 801f632:	4691      	mov	r9, r2
 801f634:	f7fe f914 	bl	801d860 <__retarget_lock_acquire_recursive>
 801f638:	4b16      	ldr	r3, [pc, #88]	@ (801f694 <__register_exitproc+0x74>)
 801f63a:	681c      	ldr	r4, [r3, #0]
 801f63c:	b90c      	cbnz	r4, 801f642 <__register_exitproc+0x22>
 801f63e:	4c16      	ldr	r4, [pc, #88]	@ (801f698 <__register_exitproc+0x78>)
 801f640:	601c      	str	r4, [r3, #0]
 801f642:	6865      	ldr	r5, [r4, #4]
 801f644:	f8da 0000 	ldr.w	r0, [sl]
 801f648:	2d1f      	cmp	r5, #31
 801f64a:	dd05      	ble.n	801f658 <__register_exitproc+0x38>
 801f64c:	f7fe f909 	bl	801d862 <__retarget_lock_release_recursive>
 801f650:	f04f 30ff 	mov.w	r0, #4294967295
 801f654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f658:	b19e      	cbz	r6, 801f682 <__register_exitproc+0x62>
 801f65a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801f65e:	2201      	movs	r2, #1
 801f660:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801f664:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801f668:	40aa      	lsls	r2, r5
 801f66a:	4313      	orrs	r3, r2
 801f66c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 801f670:	2e02      	cmp	r6, #2
 801f672:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801f676:	bf02      	ittt	eq
 801f678:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801f67c:	4313      	orreq	r3, r2
 801f67e:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801f682:	1c6b      	adds	r3, r5, #1
 801f684:	3502      	adds	r5, #2
 801f686:	6063      	str	r3, [r4, #4]
 801f688:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801f68c:	f7fe f8e9 	bl	801d862 <__retarget_lock_release_recursive>
 801f690:	2000      	movs	r0, #0
 801f692:	e7df      	b.n	801f654 <__register_exitproc+0x34>
 801f694:	2000d4b4 	.word	0x2000d4b4
 801f698:	2000d4ec 	.word	0x2000d4ec
 801f69c:	20000278 	.word	0x20000278

0801f6a0 <quorem>:
 801f6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6a4:	6903      	ldr	r3, [r0, #16]
 801f6a6:	690c      	ldr	r4, [r1, #16]
 801f6a8:	42a3      	cmp	r3, r4
 801f6aa:	4607      	mov	r7, r0
 801f6ac:	db7e      	blt.n	801f7ac <quorem+0x10c>
 801f6ae:	3c01      	subs	r4, #1
 801f6b0:	f101 0814 	add.w	r8, r1, #20
 801f6b4:	00a3      	lsls	r3, r4, #2
 801f6b6:	f100 0514 	add.w	r5, r0, #20
 801f6ba:	9300      	str	r3, [sp, #0]
 801f6bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f6c0:	9301      	str	r3, [sp, #4]
 801f6c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f6c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f6ca:	3301      	adds	r3, #1
 801f6cc:	429a      	cmp	r2, r3
 801f6ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f6d2:	fbb2 f6f3 	udiv	r6, r2, r3
 801f6d6:	d32e      	bcc.n	801f736 <quorem+0x96>
 801f6d8:	f04f 0a00 	mov.w	sl, #0
 801f6dc:	46c4      	mov	ip, r8
 801f6de:	46ae      	mov	lr, r5
 801f6e0:	46d3      	mov	fp, sl
 801f6e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f6e6:	b298      	uxth	r0, r3
 801f6e8:	fb06 a000 	mla	r0, r6, r0, sl
 801f6ec:	0c02      	lsrs	r2, r0, #16
 801f6ee:	0c1b      	lsrs	r3, r3, #16
 801f6f0:	fb06 2303 	mla	r3, r6, r3, r2
 801f6f4:	f8de 2000 	ldr.w	r2, [lr]
 801f6f8:	b280      	uxth	r0, r0
 801f6fa:	b292      	uxth	r2, r2
 801f6fc:	1a12      	subs	r2, r2, r0
 801f6fe:	445a      	add	r2, fp
 801f700:	f8de 0000 	ldr.w	r0, [lr]
 801f704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f708:	b29b      	uxth	r3, r3
 801f70a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f70e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f712:	b292      	uxth	r2, r2
 801f714:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f718:	45e1      	cmp	r9, ip
 801f71a:	f84e 2b04 	str.w	r2, [lr], #4
 801f71e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f722:	d2de      	bcs.n	801f6e2 <quorem+0x42>
 801f724:	9b00      	ldr	r3, [sp, #0]
 801f726:	58eb      	ldr	r3, [r5, r3]
 801f728:	b92b      	cbnz	r3, 801f736 <quorem+0x96>
 801f72a:	9b01      	ldr	r3, [sp, #4]
 801f72c:	3b04      	subs	r3, #4
 801f72e:	429d      	cmp	r5, r3
 801f730:	461a      	mov	r2, r3
 801f732:	d32f      	bcc.n	801f794 <quorem+0xf4>
 801f734:	613c      	str	r4, [r7, #16]
 801f736:	4638      	mov	r0, r7
 801f738:	f001 f824 	bl	8020784 <__mcmp>
 801f73c:	2800      	cmp	r0, #0
 801f73e:	db25      	blt.n	801f78c <quorem+0xec>
 801f740:	4629      	mov	r1, r5
 801f742:	2000      	movs	r0, #0
 801f744:	f858 2b04 	ldr.w	r2, [r8], #4
 801f748:	f8d1 c000 	ldr.w	ip, [r1]
 801f74c:	fa1f fe82 	uxth.w	lr, r2
 801f750:	fa1f f38c 	uxth.w	r3, ip
 801f754:	eba3 030e 	sub.w	r3, r3, lr
 801f758:	4403      	add	r3, r0
 801f75a:	0c12      	lsrs	r2, r2, #16
 801f75c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f760:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f764:	b29b      	uxth	r3, r3
 801f766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f76a:	45c1      	cmp	r9, r8
 801f76c:	f841 3b04 	str.w	r3, [r1], #4
 801f770:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f774:	d2e6      	bcs.n	801f744 <quorem+0xa4>
 801f776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f77e:	b922      	cbnz	r2, 801f78a <quorem+0xea>
 801f780:	3b04      	subs	r3, #4
 801f782:	429d      	cmp	r5, r3
 801f784:	461a      	mov	r2, r3
 801f786:	d30b      	bcc.n	801f7a0 <quorem+0x100>
 801f788:	613c      	str	r4, [r7, #16]
 801f78a:	3601      	adds	r6, #1
 801f78c:	4630      	mov	r0, r6
 801f78e:	b003      	add	sp, #12
 801f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f794:	6812      	ldr	r2, [r2, #0]
 801f796:	3b04      	subs	r3, #4
 801f798:	2a00      	cmp	r2, #0
 801f79a:	d1cb      	bne.n	801f734 <quorem+0x94>
 801f79c:	3c01      	subs	r4, #1
 801f79e:	e7c6      	b.n	801f72e <quorem+0x8e>
 801f7a0:	6812      	ldr	r2, [r2, #0]
 801f7a2:	3b04      	subs	r3, #4
 801f7a4:	2a00      	cmp	r2, #0
 801f7a6:	d1ef      	bne.n	801f788 <quorem+0xe8>
 801f7a8:	3c01      	subs	r4, #1
 801f7aa:	e7ea      	b.n	801f782 <quorem+0xe2>
 801f7ac:	2000      	movs	r0, #0
 801f7ae:	e7ee      	b.n	801f78e <quorem+0xee>

0801f7b0 <_dtoa_r>:
 801f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b4:	b099      	sub	sp, #100	@ 0x64
 801f7b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f7ba:	9109      	str	r1, [sp, #36]	@ 0x24
 801f7bc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801f7be:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f7c0:	920e      	str	r2, [sp, #56]	@ 0x38
 801f7c2:	ec55 4b10 	vmov	r4, r5, d0
 801f7c6:	4683      	mov	fp, r0
 801f7c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f7ca:	b149      	cbz	r1, 801f7e0 <_dtoa_r+0x30>
 801f7cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f7ce:	604a      	str	r2, [r1, #4]
 801f7d0:	2301      	movs	r3, #1
 801f7d2:	4093      	lsls	r3, r2
 801f7d4:	608b      	str	r3, [r1, #8]
 801f7d6:	f000 fdce 	bl	8020376 <_Bfree>
 801f7da:	2300      	movs	r3, #0
 801f7dc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 801f7e0:	1e2b      	subs	r3, r5, #0
 801f7e2:	bfb9      	ittee	lt
 801f7e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f7e8:	9303      	strlt	r3, [sp, #12]
 801f7ea:	2300      	movge	r3, #0
 801f7ec:	6033      	strge	r3, [r6, #0]
 801f7ee:	9f03      	ldr	r7, [sp, #12]
 801f7f0:	4b97      	ldr	r3, [pc, #604]	@ (801fa50 <_dtoa_r+0x2a0>)
 801f7f2:	bfbc      	itt	lt
 801f7f4:	2201      	movlt	r2, #1
 801f7f6:	6032      	strlt	r2, [r6, #0]
 801f7f8:	43bb      	bics	r3, r7
 801f7fa:	d114      	bne.n	801f826 <_dtoa_r+0x76>
 801f7fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f7fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f802:	6013      	str	r3, [r2, #0]
 801f804:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f808:	4323      	orrs	r3, r4
 801f80a:	f000 854c 	beq.w	80202a6 <_dtoa_r+0xaf6>
 801f80e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f810:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801fa68 <_dtoa_r+0x2b8>
 801f814:	b11b      	cbz	r3, 801f81e <_dtoa_r+0x6e>
 801f816:	f10a 0303 	add.w	r3, sl, #3
 801f81a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f81c:	6013      	str	r3, [r2, #0]
 801f81e:	4650      	mov	r0, sl
 801f820:	b019      	add	sp, #100	@ 0x64
 801f822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f826:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f82a:	2200      	movs	r2, #0
 801f82c:	ec51 0b17 	vmov	r0, r1, d7
 801f830:	2300      	movs	r3, #0
 801f832:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f836:	f7e1 f947 	bl	8000ac8 <__aeabi_dcmpeq>
 801f83a:	4680      	mov	r8, r0
 801f83c:	b150      	cbz	r0, 801f854 <_dtoa_r+0xa4>
 801f83e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f840:	2301      	movs	r3, #1
 801f842:	6013      	str	r3, [r2, #0]
 801f844:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f846:	b113      	cbz	r3, 801f84e <_dtoa_r+0x9e>
 801f848:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f84a:	4b82      	ldr	r3, [pc, #520]	@ (801fa54 <_dtoa_r+0x2a4>)
 801f84c:	6013      	str	r3, [r2, #0]
 801f84e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801fa6c <_dtoa_r+0x2bc>
 801f852:	e7e4      	b.n	801f81e <_dtoa_r+0x6e>
 801f854:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f858:	aa16      	add	r2, sp, #88	@ 0x58
 801f85a:	a917      	add	r1, sp, #92	@ 0x5c
 801f85c:	4658      	mov	r0, fp
 801f85e:	f001 f841 	bl	80208e4 <__d2b>
 801f862:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f866:	4681      	mov	r9, r0
 801f868:	2e00      	cmp	r6, #0
 801f86a:	d077      	beq.n	801f95c <_dtoa_r+0x1ac>
 801f86c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f86e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f87a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f87e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f882:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f886:	4619      	mov	r1, r3
 801f888:	2200      	movs	r2, #0
 801f88a:	4b73      	ldr	r3, [pc, #460]	@ (801fa58 <_dtoa_r+0x2a8>)
 801f88c:	f7e0 fcfc 	bl	8000288 <__aeabi_dsub>
 801f890:	a369      	add	r3, pc, #420	@ (adr r3, 801fa38 <_dtoa_r+0x288>)
 801f892:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f896:	f7e0 feaf 	bl	80005f8 <__aeabi_dmul>
 801f89a:	a369      	add	r3, pc, #420	@ (adr r3, 801fa40 <_dtoa_r+0x290>)
 801f89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8a0:	f7e0 fcf4 	bl	800028c <__adddf3>
 801f8a4:	4604      	mov	r4, r0
 801f8a6:	4630      	mov	r0, r6
 801f8a8:	460d      	mov	r5, r1
 801f8aa:	f7e0 fe3b 	bl	8000524 <__aeabi_i2d>
 801f8ae:	a366      	add	r3, pc, #408	@ (adr r3, 801fa48 <_dtoa_r+0x298>)
 801f8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8b4:	f7e0 fea0 	bl	80005f8 <__aeabi_dmul>
 801f8b8:	4602      	mov	r2, r0
 801f8ba:	460b      	mov	r3, r1
 801f8bc:	4620      	mov	r0, r4
 801f8be:	4629      	mov	r1, r5
 801f8c0:	f7e0 fce4 	bl	800028c <__adddf3>
 801f8c4:	4604      	mov	r4, r0
 801f8c6:	460d      	mov	r5, r1
 801f8c8:	f7e1 f946 	bl	8000b58 <__aeabi_d2iz>
 801f8cc:	2200      	movs	r2, #0
 801f8ce:	4607      	mov	r7, r0
 801f8d0:	2300      	movs	r3, #0
 801f8d2:	4620      	mov	r0, r4
 801f8d4:	4629      	mov	r1, r5
 801f8d6:	f7e1 f901 	bl	8000adc <__aeabi_dcmplt>
 801f8da:	b140      	cbz	r0, 801f8ee <_dtoa_r+0x13e>
 801f8dc:	4638      	mov	r0, r7
 801f8de:	f7e0 fe21 	bl	8000524 <__aeabi_i2d>
 801f8e2:	4622      	mov	r2, r4
 801f8e4:	462b      	mov	r3, r5
 801f8e6:	f7e1 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 801f8ea:	b900      	cbnz	r0, 801f8ee <_dtoa_r+0x13e>
 801f8ec:	3f01      	subs	r7, #1
 801f8ee:	2f16      	cmp	r7, #22
 801f8f0:	d851      	bhi.n	801f996 <_dtoa_r+0x1e6>
 801f8f2:	4b5a      	ldr	r3, [pc, #360]	@ (801fa5c <_dtoa_r+0x2ac>)
 801f8f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f900:	f7e1 f8ec 	bl	8000adc <__aeabi_dcmplt>
 801f904:	2800      	cmp	r0, #0
 801f906:	d048      	beq.n	801f99a <_dtoa_r+0x1ea>
 801f908:	3f01      	subs	r7, #1
 801f90a:	2300      	movs	r3, #0
 801f90c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f90e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f910:	1b9b      	subs	r3, r3, r6
 801f912:	1e5a      	subs	r2, r3, #1
 801f914:	bf44      	itt	mi
 801f916:	f1c3 0801 	rsbmi	r8, r3, #1
 801f91a:	2300      	movmi	r3, #0
 801f91c:	9208      	str	r2, [sp, #32]
 801f91e:	bf54      	ite	pl
 801f920:	f04f 0800 	movpl.w	r8, #0
 801f924:	9308      	strmi	r3, [sp, #32]
 801f926:	2f00      	cmp	r7, #0
 801f928:	db39      	blt.n	801f99e <_dtoa_r+0x1ee>
 801f92a:	9b08      	ldr	r3, [sp, #32]
 801f92c:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f92e:	443b      	add	r3, r7
 801f930:	9308      	str	r3, [sp, #32]
 801f932:	2300      	movs	r3, #0
 801f934:	930a      	str	r3, [sp, #40]	@ 0x28
 801f936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f938:	2b09      	cmp	r3, #9
 801f93a:	d865      	bhi.n	801fa08 <_dtoa_r+0x258>
 801f93c:	2b05      	cmp	r3, #5
 801f93e:	bfc4      	itt	gt
 801f940:	3b04      	subgt	r3, #4
 801f942:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f946:	f1a3 0302 	sub.w	r3, r3, #2
 801f94a:	bfcc      	ite	gt
 801f94c:	2400      	movgt	r4, #0
 801f94e:	2401      	movle	r4, #1
 801f950:	2b03      	cmp	r3, #3
 801f952:	d864      	bhi.n	801fa1e <_dtoa_r+0x26e>
 801f954:	e8df f003 	tbb	[pc, r3]
 801f958:	5635372a 	.word	0x5635372a
 801f95c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f960:	441e      	add	r6, r3
 801f962:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f966:	2b20      	cmp	r3, #32
 801f968:	bfc1      	itttt	gt
 801f96a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f96e:	409f      	lslgt	r7, r3
 801f970:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f974:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f978:	bfd6      	itet	le
 801f97a:	f1c3 0320 	rsble	r3, r3, #32
 801f97e:	ea47 0003 	orrgt.w	r0, r7, r3
 801f982:	fa04 f003 	lslle.w	r0, r4, r3
 801f986:	f7e0 fdbd 	bl	8000504 <__aeabi_ui2d>
 801f98a:	2201      	movs	r2, #1
 801f98c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f990:	3e01      	subs	r6, #1
 801f992:	9214      	str	r2, [sp, #80]	@ 0x50
 801f994:	e777      	b.n	801f886 <_dtoa_r+0xd6>
 801f996:	2301      	movs	r3, #1
 801f998:	e7b8      	b.n	801f90c <_dtoa_r+0x15c>
 801f99a:	9012      	str	r0, [sp, #72]	@ 0x48
 801f99c:	e7b7      	b.n	801f90e <_dtoa_r+0x15e>
 801f99e:	427b      	negs	r3, r7
 801f9a0:	930a      	str	r3, [sp, #40]	@ 0x28
 801f9a2:	2300      	movs	r3, #0
 801f9a4:	eba8 0807 	sub.w	r8, r8, r7
 801f9a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f9aa:	e7c4      	b.n	801f936 <_dtoa_r+0x186>
 801f9ac:	2300      	movs	r3, #0
 801f9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f9b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	dc36      	bgt.n	801fa24 <_dtoa_r+0x274>
 801f9b6:	2301      	movs	r3, #1
 801f9b8:	9300      	str	r3, [sp, #0]
 801f9ba:	9307      	str	r3, [sp, #28]
 801f9bc:	461a      	mov	r2, r3
 801f9be:	920e      	str	r2, [sp, #56]	@ 0x38
 801f9c0:	e00b      	b.n	801f9da <_dtoa_r+0x22a>
 801f9c2:	2301      	movs	r3, #1
 801f9c4:	e7f3      	b.n	801f9ae <_dtoa_r+0x1fe>
 801f9c6:	2300      	movs	r3, #0
 801f9c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f9ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f9cc:	18fb      	adds	r3, r7, r3
 801f9ce:	9300      	str	r3, [sp, #0]
 801f9d0:	3301      	adds	r3, #1
 801f9d2:	2b01      	cmp	r3, #1
 801f9d4:	9307      	str	r3, [sp, #28]
 801f9d6:	bfb8      	it	lt
 801f9d8:	2301      	movlt	r3, #1
 801f9da:	2100      	movs	r1, #0
 801f9dc:	2204      	movs	r2, #4
 801f9de:	f102 0014 	add.w	r0, r2, #20
 801f9e2:	4298      	cmp	r0, r3
 801f9e4:	d922      	bls.n	801fa2c <_dtoa_r+0x27c>
 801f9e6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 801f9ea:	4658      	mov	r0, fp
 801f9ec:	f000 fc9e 	bl	802032c <_Balloc>
 801f9f0:	4682      	mov	sl, r0
 801f9f2:	2800      	cmp	r0, #0
 801f9f4:	d13c      	bne.n	801fa70 <_dtoa_r+0x2c0>
 801f9f6:	4b1a      	ldr	r3, [pc, #104]	@ (801fa60 <_dtoa_r+0x2b0>)
 801f9f8:	4602      	mov	r2, r0
 801f9fa:	f240 11af 	movw	r1, #431	@ 0x1af
 801f9fe:	4819      	ldr	r0, [pc, #100]	@ (801fa64 <_dtoa_r+0x2b4>)
 801fa00:	f001 fa14 	bl	8020e2c <__assert_func>
 801fa04:	2301      	movs	r3, #1
 801fa06:	e7df      	b.n	801f9c8 <_dtoa_r+0x218>
 801fa08:	2401      	movs	r4, #1
 801fa0a:	2300      	movs	r3, #0
 801fa0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fa10:	f04f 33ff 	mov.w	r3, #4294967295
 801fa14:	9300      	str	r3, [sp, #0]
 801fa16:	9307      	str	r3, [sp, #28]
 801fa18:	2200      	movs	r2, #0
 801fa1a:	2312      	movs	r3, #18
 801fa1c:	e7cf      	b.n	801f9be <_dtoa_r+0x20e>
 801fa1e:	2301      	movs	r3, #1
 801fa20:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fa22:	e7f5      	b.n	801fa10 <_dtoa_r+0x260>
 801fa24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa26:	9300      	str	r3, [sp, #0]
 801fa28:	9307      	str	r3, [sp, #28]
 801fa2a:	e7d6      	b.n	801f9da <_dtoa_r+0x22a>
 801fa2c:	3101      	adds	r1, #1
 801fa2e:	0052      	lsls	r2, r2, #1
 801fa30:	e7d5      	b.n	801f9de <_dtoa_r+0x22e>
 801fa32:	bf00      	nop
 801fa34:	f3af 8000 	nop.w
 801fa38:	636f4361 	.word	0x636f4361
 801fa3c:	3fd287a7 	.word	0x3fd287a7
 801fa40:	8b60c8b3 	.word	0x8b60c8b3
 801fa44:	3fc68a28 	.word	0x3fc68a28
 801fa48:	509f79fb 	.word	0x509f79fb
 801fa4c:	3fd34413 	.word	0x3fd34413
 801fa50:	7ff00000 	.word	0x7ff00000
 801fa54:	08024b7f 	.word	0x08024b7f
 801fa58:	3ff80000 	.word	0x3ff80000
 801fa5c:	08024cb0 	.word	0x08024cb0
 801fa60:	08024bb7 	.word	0x08024bb7
 801fa64:	08024bc8 	.word	0x08024bc8
 801fa68:	08024bb3 	.word	0x08024bb3
 801fa6c:	08024b7e 	.word	0x08024b7e
 801fa70:	9b07      	ldr	r3, [sp, #28]
 801fa72:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 801fa76:	2b0e      	cmp	r3, #14
 801fa78:	f200 80a4 	bhi.w	801fbc4 <_dtoa_r+0x414>
 801fa7c:	2c00      	cmp	r4, #0
 801fa7e:	f000 80a1 	beq.w	801fbc4 <_dtoa_r+0x414>
 801fa82:	2f00      	cmp	r7, #0
 801fa84:	dd33      	ble.n	801faee <_dtoa_r+0x33e>
 801fa86:	4bae      	ldr	r3, [pc, #696]	@ (801fd40 <_dtoa_r+0x590>)
 801fa88:	f007 020f 	and.w	r2, r7, #15
 801fa8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fa90:	ed93 7b00 	vldr	d7, [r3]
 801fa94:	05f8      	lsls	r0, r7, #23
 801fa96:	ed8d 7b04 	vstr	d7, [sp, #16]
 801fa9a:	ea4f 1427 	mov.w	r4, r7, asr #4
 801fa9e:	d516      	bpl.n	801face <_dtoa_r+0x31e>
 801faa0:	4ba8      	ldr	r3, [pc, #672]	@ (801fd44 <_dtoa_r+0x594>)
 801faa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801faa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801faaa:	f7e0 fecf 	bl	800084c <__aeabi_ddiv>
 801faae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fab2:	f004 040f 	and.w	r4, r4, #15
 801fab6:	2603      	movs	r6, #3
 801fab8:	4da2      	ldr	r5, [pc, #648]	@ (801fd44 <_dtoa_r+0x594>)
 801faba:	b954      	cbnz	r4, 801fad2 <_dtoa_r+0x322>
 801fabc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fac4:	f7e0 fec2 	bl	800084c <__aeabi_ddiv>
 801fac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801facc:	e028      	b.n	801fb20 <_dtoa_r+0x370>
 801face:	2602      	movs	r6, #2
 801fad0:	e7f2      	b.n	801fab8 <_dtoa_r+0x308>
 801fad2:	07e1      	lsls	r1, r4, #31
 801fad4:	d508      	bpl.n	801fae8 <_dtoa_r+0x338>
 801fad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801fada:	e9d5 2300 	ldrd	r2, r3, [r5]
 801fade:	f7e0 fd8b 	bl	80005f8 <__aeabi_dmul>
 801fae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801fae6:	3601      	adds	r6, #1
 801fae8:	1064      	asrs	r4, r4, #1
 801faea:	3508      	adds	r5, #8
 801faec:	e7e5      	b.n	801faba <_dtoa_r+0x30a>
 801faee:	f000 80d2 	beq.w	801fc96 <_dtoa_r+0x4e6>
 801faf2:	427c      	negs	r4, r7
 801faf4:	4b92      	ldr	r3, [pc, #584]	@ (801fd40 <_dtoa_r+0x590>)
 801faf6:	4d93      	ldr	r5, [pc, #588]	@ (801fd44 <_dtoa_r+0x594>)
 801faf8:	f004 020f 	and.w	r2, r4, #15
 801fafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801fb08:	f7e0 fd76 	bl	80005f8 <__aeabi_dmul>
 801fb0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fb10:	1124      	asrs	r4, r4, #4
 801fb12:	2300      	movs	r3, #0
 801fb14:	2602      	movs	r6, #2
 801fb16:	2c00      	cmp	r4, #0
 801fb18:	f040 80b2 	bne.w	801fc80 <_dtoa_r+0x4d0>
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d1d3      	bne.n	801fac8 <_dtoa_r+0x318>
 801fb20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fb22:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	f000 80b7 	beq.w	801fc9a <_dtoa_r+0x4ea>
 801fb2c:	4b86      	ldr	r3, [pc, #536]	@ (801fd48 <_dtoa_r+0x598>)
 801fb2e:	2200      	movs	r2, #0
 801fb30:	4620      	mov	r0, r4
 801fb32:	4629      	mov	r1, r5
 801fb34:	f7e0 ffd2 	bl	8000adc <__aeabi_dcmplt>
 801fb38:	2800      	cmp	r0, #0
 801fb3a:	f000 80ae 	beq.w	801fc9a <_dtoa_r+0x4ea>
 801fb3e:	9b07      	ldr	r3, [sp, #28]
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	f000 80aa 	beq.w	801fc9a <_dtoa_r+0x4ea>
 801fb46:	9b00      	ldr	r3, [sp, #0]
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	dd37      	ble.n	801fbbc <_dtoa_r+0x40c>
 801fb4c:	1e7b      	subs	r3, r7, #1
 801fb4e:	9304      	str	r3, [sp, #16]
 801fb50:	4620      	mov	r0, r4
 801fb52:	4b7e      	ldr	r3, [pc, #504]	@ (801fd4c <_dtoa_r+0x59c>)
 801fb54:	2200      	movs	r2, #0
 801fb56:	4629      	mov	r1, r5
 801fb58:	f7e0 fd4e 	bl	80005f8 <__aeabi_dmul>
 801fb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fb60:	9c00      	ldr	r4, [sp, #0]
 801fb62:	3601      	adds	r6, #1
 801fb64:	4630      	mov	r0, r6
 801fb66:	f7e0 fcdd 	bl	8000524 <__aeabi_i2d>
 801fb6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fb6e:	f7e0 fd43 	bl	80005f8 <__aeabi_dmul>
 801fb72:	4b77      	ldr	r3, [pc, #476]	@ (801fd50 <_dtoa_r+0x5a0>)
 801fb74:	2200      	movs	r2, #0
 801fb76:	f7e0 fb89 	bl	800028c <__adddf3>
 801fb7a:	4605      	mov	r5, r0
 801fb7c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801fb80:	2c00      	cmp	r4, #0
 801fb82:	f040 808d 	bne.w	801fca0 <_dtoa_r+0x4f0>
 801fb86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fb8a:	4b72      	ldr	r3, [pc, #456]	@ (801fd54 <_dtoa_r+0x5a4>)
 801fb8c:	2200      	movs	r2, #0
 801fb8e:	f7e0 fb7b 	bl	8000288 <__aeabi_dsub>
 801fb92:	4602      	mov	r2, r0
 801fb94:	460b      	mov	r3, r1
 801fb96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fb9a:	462a      	mov	r2, r5
 801fb9c:	4633      	mov	r3, r6
 801fb9e:	f7e0 ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 801fba2:	2800      	cmp	r0, #0
 801fba4:	f040 828c 	bne.w	80200c0 <_dtoa_r+0x910>
 801fba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fbac:	462a      	mov	r2, r5
 801fbae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801fbb2:	f7e0 ff93 	bl	8000adc <__aeabi_dcmplt>
 801fbb6:	2800      	cmp	r0, #0
 801fbb8:	f040 8129 	bne.w	801fe0e <_dtoa_r+0x65e>
 801fbbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801fbc0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801fbc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	f2c0 815b 	blt.w	801fe82 <_dtoa_r+0x6d2>
 801fbcc:	2f0e      	cmp	r7, #14
 801fbce:	f300 8158 	bgt.w	801fe82 <_dtoa_r+0x6d2>
 801fbd2:	4b5b      	ldr	r3, [pc, #364]	@ (801fd40 <_dtoa_r+0x590>)
 801fbd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801fbd8:	ed93 7b00 	vldr	d7, [r3]
 801fbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	ed8d 7b00 	vstr	d7, [sp]
 801fbe4:	da03      	bge.n	801fbee <_dtoa_r+0x43e>
 801fbe6:	9b07      	ldr	r3, [sp, #28]
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	f340 8102 	ble.w	801fdf2 <_dtoa_r+0x642>
 801fbee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801fbf2:	4656      	mov	r6, sl
 801fbf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fbf8:	4620      	mov	r0, r4
 801fbfa:	4629      	mov	r1, r5
 801fbfc:	f7e0 fe26 	bl	800084c <__aeabi_ddiv>
 801fc00:	f7e0 ffaa 	bl	8000b58 <__aeabi_d2iz>
 801fc04:	4680      	mov	r8, r0
 801fc06:	f7e0 fc8d 	bl	8000524 <__aeabi_i2d>
 801fc0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fc0e:	f7e0 fcf3 	bl	80005f8 <__aeabi_dmul>
 801fc12:	4602      	mov	r2, r0
 801fc14:	460b      	mov	r3, r1
 801fc16:	4620      	mov	r0, r4
 801fc18:	4629      	mov	r1, r5
 801fc1a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801fc1e:	f7e0 fb33 	bl	8000288 <__aeabi_dsub>
 801fc22:	f806 4b01 	strb.w	r4, [r6], #1
 801fc26:	9d07      	ldr	r5, [sp, #28]
 801fc28:	eba6 040a 	sub.w	r4, r6, sl
 801fc2c:	42a5      	cmp	r5, r4
 801fc2e:	4602      	mov	r2, r0
 801fc30:	460b      	mov	r3, r1
 801fc32:	f040 8118 	bne.w	801fe66 <_dtoa_r+0x6b6>
 801fc36:	f7e0 fb29 	bl	800028c <__adddf3>
 801fc3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fc3e:	4604      	mov	r4, r0
 801fc40:	460d      	mov	r5, r1
 801fc42:	f7e0 ff69 	bl	8000b18 <__aeabi_dcmpgt>
 801fc46:	2800      	cmp	r0, #0
 801fc48:	f040 80fa 	bne.w	801fe40 <_dtoa_r+0x690>
 801fc4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fc50:	4620      	mov	r0, r4
 801fc52:	4629      	mov	r1, r5
 801fc54:	f7e0 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 801fc58:	b118      	cbz	r0, 801fc62 <_dtoa_r+0x4b2>
 801fc5a:	f018 0f01 	tst.w	r8, #1
 801fc5e:	f040 80ef 	bne.w	801fe40 <_dtoa_r+0x690>
 801fc62:	4649      	mov	r1, r9
 801fc64:	4658      	mov	r0, fp
 801fc66:	f000 fb86 	bl	8020376 <_Bfree>
 801fc6a:	2300      	movs	r3, #0
 801fc6c:	7033      	strb	r3, [r6, #0]
 801fc6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc70:	3701      	adds	r7, #1
 801fc72:	601f      	str	r7, [r3, #0]
 801fc74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	f43f add1 	beq.w	801f81e <_dtoa_r+0x6e>
 801fc7c:	601e      	str	r6, [r3, #0]
 801fc7e:	e5ce      	b.n	801f81e <_dtoa_r+0x6e>
 801fc80:	07e2      	lsls	r2, r4, #31
 801fc82:	d505      	bpl.n	801fc90 <_dtoa_r+0x4e0>
 801fc84:	e9d5 2300 	ldrd	r2, r3, [r5]
 801fc88:	f7e0 fcb6 	bl	80005f8 <__aeabi_dmul>
 801fc8c:	3601      	adds	r6, #1
 801fc8e:	2301      	movs	r3, #1
 801fc90:	1064      	asrs	r4, r4, #1
 801fc92:	3508      	adds	r5, #8
 801fc94:	e73f      	b.n	801fb16 <_dtoa_r+0x366>
 801fc96:	2602      	movs	r6, #2
 801fc98:	e742      	b.n	801fb20 <_dtoa_r+0x370>
 801fc9a:	9c07      	ldr	r4, [sp, #28]
 801fc9c:	9704      	str	r7, [sp, #16]
 801fc9e:	e761      	b.n	801fb64 <_dtoa_r+0x3b4>
 801fca0:	4b27      	ldr	r3, [pc, #156]	@ (801fd40 <_dtoa_r+0x590>)
 801fca2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801fcac:	4454      	add	r4, sl
 801fcae:	2900      	cmp	r1, #0
 801fcb0:	d054      	beq.n	801fd5c <_dtoa_r+0x5ac>
 801fcb2:	4929      	ldr	r1, [pc, #164]	@ (801fd58 <_dtoa_r+0x5a8>)
 801fcb4:	2000      	movs	r0, #0
 801fcb6:	f7e0 fdc9 	bl	800084c <__aeabi_ddiv>
 801fcba:	4633      	mov	r3, r6
 801fcbc:	462a      	mov	r2, r5
 801fcbe:	f7e0 fae3 	bl	8000288 <__aeabi_dsub>
 801fcc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801fcc6:	4656      	mov	r6, sl
 801fcc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fccc:	f7e0 ff44 	bl	8000b58 <__aeabi_d2iz>
 801fcd0:	4605      	mov	r5, r0
 801fcd2:	f7e0 fc27 	bl	8000524 <__aeabi_i2d>
 801fcd6:	4602      	mov	r2, r0
 801fcd8:	460b      	mov	r3, r1
 801fcda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fcde:	f7e0 fad3 	bl	8000288 <__aeabi_dsub>
 801fce2:	3530      	adds	r5, #48	@ 0x30
 801fce4:	4602      	mov	r2, r0
 801fce6:	460b      	mov	r3, r1
 801fce8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fcec:	f806 5b01 	strb.w	r5, [r6], #1
 801fcf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801fcf4:	f7e0 fef2 	bl	8000adc <__aeabi_dcmplt>
 801fcf8:	2800      	cmp	r0, #0
 801fcfa:	d172      	bne.n	801fde2 <_dtoa_r+0x632>
 801fcfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fd00:	4911      	ldr	r1, [pc, #68]	@ (801fd48 <_dtoa_r+0x598>)
 801fd02:	2000      	movs	r0, #0
 801fd04:	f7e0 fac0 	bl	8000288 <__aeabi_dsub>
 801fd08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801fd0c:	f7e0 fee6 	bl	8000adc <__aeabi_dcmplt>
 801fd10:	2800      	cmp	r0, #0
 801fd12:	f040 8096 	bne.w	801fe42 <_dtoa_r+0x692>
 801fd16:	42a6      	cmp	r6, r4
 801fd18:	f43f af50 	beq.w	801fbbc <_dtoa_r+0x40c>
 801fd1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801fd20:	4b0a      	ldr	r3, [pc, #40]	@ (801fd4c <_dtoa_r+0x59c>)
 801fd22:	2200      	movs	r2, #0
 801fd24:	f7e0 fc68 	bl	80005f8 <__aeabi_dmul>
 801fd28:	4b08      	ldr	r3, [pc, #32]	@ (801fd4c <_dtoa_r+0x59c>)
 801fd2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801fd2e:	2200      	movs	r2, #0
 801fd30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fd34:	f7e0 fc60 	bl	80005f8 <__aeabi_dmul>
 801fd38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fd3c:	e7c4      	b.n	801fcc8 <_dtoa_r+0x518>
 801fd3e:	bf00      	nop
 801fd40:	08024cb0 	.word	0x08024cb0
 801fd44:	08024c88 	.word	0x08024c88
 801fd48:	3ff00000 	.word	0x3ff00000
 801fd4c:	40240000 	.word	0x40240000
 801fd50:	401c0000 	.word	0x401c0000
 801fd54:	40140000 	.word	0x40140000
 801fd58:	3fe00000 	.word	0x3fe00000
 801fd5c:	4631      	mov	r1, r6
 801fd5e:	4628      	mov	r0, r5
 801fd60:	f7e0 fc4a 	bl	80005f8 <__aeabi_dmul>
 801fd64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801fd68:	9415      	str	r4, [sp, #84]	@ 0x54
 801fd6a:	4656      	mov	r6, sl
 801fd6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fd70:	f7e0 fef2 	bl	8000b58 <__aeabi_d2iz>
 801fd74:	4605      	mov	r5, r0
 801fd76:	f7e0 fbd5 	bl	8000524 <__aeabi_i2d>
 801fd7a:	4602      	mov	r2, r0
 801fd7c:	460b      	mov	r3, r1
 801fd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fd82:	f7e0 fa81 	bl	8000288 <__aeabi_dsub>
 801fd86:	3530      	adds	r5, #48	@ 0x30
 801fd88:	f806 5b01 	strb.w	r5, [r6], #1
 801fd8c:	4602      	mov	r2, r0
 801fd8e:	460b      	mov	r3, r1
 801fd90:	42a6      	cmp	r6, r4
 801fd92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fd96:	f04f 0200 	mov.w	r2, #0
 801fd9a:	d124      	bne.n	801fde6 <_dtoa_r+0x636>
 801fd9c:	4bac      	ldr	r3, [pc, #688]	@ (8020050 <_dtoa_r+0x8a0>)
 801fd9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801fda2:	f7e0 fa73 	bl	800028c <__adddf3>
 801fda6:	4602      	mov	r2, r0
 801fda8:	460b      	mov	r3, r1
 801fdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fdae:	f7e0 feb3 	bl	8000b18 <__aeabi_dcmpgt>
 801fdb2:	2800      	cmp	r0, #0
 801fdb4:	d145      	bne.n	801fe42 <_dtoa_r+0x692>
 801fdb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801fdba:	49a5      	ldr	r1, [pc, #660]	@ (8020050 <_dtoa_r+0x8a0>)
 801fdbc:	2000      	movs	r0, #0
 801fdbe:	f7e0 fa63 	bl	8000288 <__aeabi_dsub>
 801fdc2:	4602      	mov	r2, r0
 801fdc4:	460b      	mov	r3, r1
 801fdc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fdca:	f7e0 fe87 	bl	8000adc <__aeabi_dcmplt>
 801fdce:	2800      	cmp	r0, #0
 801fdd0:	f43f aef4 	beq.w	801fbbc <_dtoa_r+0x40c>
 801fdd4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801fdd6:	1e73      	subs	r3, r6, #1
 801fdd8:	9315      	str	r3, [sp, #84]	@ 0x54
 801fdda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fdde:	2b30      	cmp	r3, #48	@ 0x30
 801fde0:	d0f8      	beq.n	801fdd4 <_dtoa_r+0x624>
 801fde2:	9f04      	ldr	r7, [sp, #16]
 801fde4:	e73d      	b.n	801fc62 <_dtoa_r+0x4b2>
 801fde6:	4b9b      	ldr	r3, [pc, #620]	@ (8020054 <_dtoa_r+0x8a4>)
 801fde8:	f7e0 fc06 	bl	80005f8 <__aeabi_dmul>
 801fdec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fdf0:	e7bc      	b.n	801fd6c <_dtoa_r+0x5bc>
 801fdf2:	d10c      	bne.n	801fe0e <_dtoa_r+0x65e>
 801fdf4:	4b98      	ldr	r3, [pc, #608]	@ (8020058 <_dtoa_r+0x8a8>)
 801fdf6:	2200      	movs	r2, #0
 801fdf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fdfc:	f7e0 fbfc 	bl	80005f8 <__aeabi_dmul>
 801fe00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fe04:	f7e0 fe7e 	bl	8000b04 <__aeabi_dcmpge>
 801fe08:	2800      	cmp	r0, #0
 801fe0a:	f000 8157 	beq.w	80200bc <_dtoa_r+0x90c>
 801fe0e:	2400      	movs	r4, #0
 801fe10:	4625      	mov	r5, r4
 801fe12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe14:	43db      	mvns	r3, r3
 801fe16:	9304      	str	r3, [sp, #16]
 801fe18:	4656      	mov	r6, sl
 801fe1a:	2700      	movs	r7, #0
 801fe1c:	4621      	mov	r1, r4
 801fe1e:	4658      	mov	r0, fp
 801fe20:	f000 faa9 	bl	8020376 <_Bfree>
 801fe24:	2d00      	cmp	r5, #0
 801fe26:	d0dc      	beq.n	801fde2 <_dtoa_r+0x632>
 801fe28:	b12f      	cbz	r7, 801fe36 <_dtoa_r+0x686>
 801fe2a:	42af      	cmp	r7, r5
 801fe2c:	d003      	beq.n	801fe36 <_dtoa_r+0x686>
 801fe2e:	4639      	mov	r1, r7
 801fe30:	4658      	mov	r0, fp
 801fe32:	f000 faa0 	bl	8020376 <_Bfree>
 801fe36:	4629      	mov	r1, r5
 801fe38:	4658      	mov	r0, fp
 801fe3a:	f000 fa9c 	bl	8020376 <_Bfree>
 801fe3e:	e7d0      	b.n	801fde2 <_dtoa_r+0x632>
 801fe40:	9704      	str	r7, [sp, #16]
 801fe42:	4633      	mov	r3, r6
 801fe44:	461e      	mov	r6, r3
 801fe46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fe4a:	2a39      	cmp	r2, #57	@ 0x39
 801fe4c:	d107      	bne.n	801fe5e <_dtoa_r+0x6ae>
 801fe4e:	459a      	cmp	sl, r3
 801fe50:	d1f8      	bne.n	801fe44 <_dtoa_r+0x694>
 801fe52:	9a04      	ldr	r2, [sp, #16]
 801fe54:	3201      	adds	r2, #1
 801fe56:	9204      	str	r2, [sp, #16]
 801fe58:	2230      	movs	r2, #48	@ 0x30
 801fe5a:	f88a 2000 	strb.w	r2, [sl]
 801fe5e:	781a      	ldrb	r2, [r3, #0]
 801fe60:	3201      	adds	r2, #1
 801fe62:	701a      	strb	r2, [r3, #0]
 801fe64:	e7bd      	b.n	801fde2 <_dtoa_r+0x632>
 801fe66:	4b7b      	ldr	r3, [pc, #492]	@ (8020054 <_dtoa_r+0x8a4>)
 801fe68:	2200      	movs	r2, #0
 801fe6a:	f7e0 fbc5 	bl	80005f8 <__aeabi_dmul>
 801fe6e:	2200      	movs	r2, #0
 801fe70:	2300      	movs	r3, #0
 801fe72:	4604      	mov	r4, r0
 801fe74:	460d      	mov	r5, r1
 801fe76:	f7e0 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 801fe7a:	2800      	cmp	r0, #0
 801fe7c:	f43f aeba 	beq.w	801fbf4 <_dtoa_r+0x444>
 801fe80:	e6ef      	b.n	801fc62 <_dtoa_r+0x4b2>
 801fe82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fe84:	2a00      	cmp	r2, #0
 801fe86:	f000 80db 	beq.w	8020040 <_dtoa_r+0x890>
 801fe8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe8c:	2a01      	cmp	r2, #1
 801fe8e:	f300 80bf 	bgt.w	8020010 <_dtoa_r+0x860>
 801fe92:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fe94:	2a00      	cmp	r2, #0
 801fe96:	f000 80b7 	beq.w	8020008 <_dtoa_r+0x858>
 801fe9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801fe9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fea0:	4646      	mov	r6, r8
 801fea2:	9a08      	ldr	r2, [sp, #32]
 801fea4:	2101      	movs	r1, #1
 801fea6:	441a      	add	r2, r3
 801fea8:	4658      	mov	r0, fp
 801feaa:	4498      	add	r8, r3
 801feac:	9208      	str	r2, [sp, #32]
 801feae:	f000 fafd 	bl	80204ac <__i2b>
 801feb2:	4605      	mov	r5, r0
 801feb4:	b15e      	cbz	r6, 801fece <_dtoa_r+0x71e>
 801feb6:	9b08      	ldr	r3, [sp, #32]
 801feb8:	2b00      	cmp	r3, #0
 801feba:	dd08      	ble.n	801fece <_dtoa_r+0x71e>
 801febc:	42b3      	cmp	r3, r6
 801febe:	9a08      	ldr	r2, [sp, #32]
 801fec0:	bfa8      	it	ge
 801fec2:	4633      	movge	r3, r6
 801fec4:	eba8 0803 	sub.w	r8, r8, r3
 801fec8:	1af6      	subs	r6, r6, r3
 801feca:	1ad3      	subs	r3, r2, r3
 801fecc:	9308      	str	r3, [sp, #32]
 801fece:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fed0:	b1f3      	cbz	r3, 801ff10 <_dtoa_r+0x760>
 801fed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	f000 80b7 	beq.w	8020048 <_dtoa_r+0x898>
 801feda:	b18c      	cbz	r4, 801ff00 <_dtoa_r+0x750>
 801fedc:	4629      	mov	r1, r5
 801fede:	4622      	mov	r2, r4
 801fee0:	4658      	mov	r0, fp
 801fee2:	f000 fba3 	bl	802062c <__pow5mult>
 801fee6:	464a      	mov	r2, r9
 801fee8:	4601      	mov	r1, r0
 801feea:	4605      	mov	r5, r0
 801feec:	4658      	mov	r0, fp
 801feee:	f000 faf3 	bl	80204d8 <__multiply>
 801fef2:	4649      	mov	r1, r9
 801fef4:	9004      	str	r0, [sp, #16]
 801fef6:	4658      	mov	r0, fp
 801fef8:	f000 fa3d 	bl	8020376 <_Bfree>
 801fefc:	9b04      	ldr	r3, [sp, #16]
 801fefe:	4699      	mov	r9, r3
 801ff00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ff02:	1b1a      	subs	r2, r3, r4
 801ff04:	d004      	beq.n	801ff10 <_dtoa_r+0x760>
 801ff06:	4649      	mov	r1, r9
 801ff08:	4658      	mov	r0, fp
 801ff0a:	f000 fb8f 	bl	802062c <__pow5mult>
 801ff0e:	4681      	mov	r9, r0
 801ff10:	2101      	movs	r1, #1
 801ff12:	4658      	mov	r0, fp
 801ff14:	f000 faca 	bl	80204ac <__i2b>
 801ff18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff1a:	4604      	mov	r4, r0
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	f000 81cc 	beq.w	80202ba <_dtoa_r+0xb0a>
 801ff22:	461a      	mov	r2, r3
 801ff24:	4601      	mov	r1, r0
 801ff26:	4658      	mov	r0, fp
 801ff28:	f000 fb80 	bl	802062c <__pow5mult>
 801ff2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff2e:	2b01      	cmp	r3, #1
 801ff30:	4604      	mov	r4, r0
 801ff32:	f300 8095 	bgt.w	8020060 <_dtoa_r+0x8b0>
 801ff36:	9b02      	ldr	r3, [sp, #8]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	f040 8087 	bne.w	802004c <_dtoa_r+0x89c>
 801ff3e:	9b03      	ldr	r3, [sp, #12]
 801ff40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	f040 8089 	bne.w	802005c <_dtoa_r+0x8ac>
 801ff4a:	9b03      	ldr	r3, [sp, #12]
 801ff4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ff50:	0d1b      	lsrs	r3, r3, #20
 801ff52:	051b      	lsls	r3, r3, #20
 801ff54:	b12b      	cbz	r3, 801ff62 <_dtoa_r+0x7b2>
 801ff56:	9b08      	ldr	r3, [sp, #32]
 801ff58:	3301      	adds	r3, #1
 801ff5a:	9308      	str	r3, [sp, #32]
 801ff5c:	f108 0801 	add.w	r8, r8, #1
 801ff60:	2301      	movs	r3, #1
 801ff62:	930a      	str	r3, [sp, #40]	@ 0x28
 801ff64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	f000 81ad 	beq.w	80202c6 <_dtoa_r+0xb16>
 801ff6c:	6923      	ldr	r3, [r4, #16]
 801ff6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ff72:	6918      	ldr	r0, [r3, #16]
 801ff74:	f000 fa4e 	bl	8020414 <__hi0bits>
 801ff78:	f1c0 0020 	rsb	r0, r0, #32
 801ff7c:	9b08      	ldr	r3, [sp, #32]
 801ff7e:	4418      	add	r0, r3
 801ff80:	f010 001f 	ands.w	r0, r0, #31
 801ff84:	d077      	beq.n	8020076 <_dtoa_r+0x8c6>
 801ff86:	f1c0 0320 	rsb	r3, r0, #32
 801ff8a:	2b04      	cmp	r3, #4
 801ff8c:	dd6b      	ble.n	8020066 <_dtoa_r+0x8b6>
 801ff8e:	9b08      	ldr	r3, [sp, #32]
 801ff90:	f1c0 001c 	rsb	r0, r0, #28
 801ff94:	4403      	add	r3, r0
 801ff96:	4480      	add	r8, r0
 801ff98:	4406      	add	r6, r0
 801ff9a:	9308      	str	r3, [sp, #32]
 801ff9c:	f1b8 0f00 	cmp.w	r8, #0
 801ffa0:	dd05      	ble.n	801ffae <_dtoa_r+0x7fe>
 801ffa2:	4649      	mov	r1, r9
 801ffa4:	4642      	mov	r2, r8
 801ffa6:	4658      	mov	r0, fp
 801ffa8:	f000 fb80 	bl	80206ac <__lshift>
 801ffac:	4681      	mov	r9, r0
 801ffae:	9b08      	ldr	r3, [sp, #32]
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	dd05      	ble.n	801ffc0 <_dtoa_r+0x810>
 801ffb4:	4621      	mov	r1, r4
 801ffb6:	461a      	mov	r2, r3
 801ffb8:	4658      	mov	r0, fp
 801ffba:	f000 fb77 	bl	80206ac <__lshift>
 801ffbe:	4604      	mov	r4, r0
 801ffc0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d059      	beq.n	802007a <_dtoa_r+0x8ca>
 801ffc6:	4621      	mov	r1, r4
 801ffc8:	4648      	mov	r0, r9
 801ffca:	f000 fbdb 	bl	8020784 <__mcmp>
 801ffce:	2800      	cmp	r0, #0
 801ffd0:	da53      	bge.n	802007a <_dtoa_r+0x8ca>
 801ffd2:	1e7b      	subs	r3, r7, #1
 801ffd4:	9304      	str	r3, [sp, #16]
 801ffd6:	4649      	mov	r1, r9
 801ffd8:	2300      	movs	r3, #0
 801ffda:	220a      	movs	r2, #10
 801ffdc:	4658      	mov	r0, fp
 801ffde:	f000 f9d3 	bl	8020388 <__multadd>
 801ffe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ffe4:	4681      	mov	r9, r0
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	f000 816f 	beq.w	80202ca <_dtoa_r+0xb1a>
 801ffec:	2300      	movs	r3, #0
 801ffee:	4629      	mov	r1, r5
 801fff0:	220a      	movs	r2, #10
 801fff2:	4658      	mov	r0, fp
 801fff4:	f000 f9c8 	bl	8020388 <__multadd>
 801fff8:	9b00      	ldr	r3, [sp, #0]
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	4605      	mov	r5, r0
 801fffe:	dc67      	bgt.n	80200d0 <_dtoa_r+0x920>
 8020000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020002:	2b02      	cmp	r3, #2
 8020004:	dc41      	bgt.n	802008a <_dtoa_r+0x8da>
 8020006:	e063      	b.n	80200d0 <_dtoa_r+0x920>
 8020008:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802000a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802000e:	e746      	b.n	801fe9e <_dtoa_r+0x6ee>
 8020010:	9b07      	ldr	r3, [sp, #28]
 8020012:	1e5c      	subs	r4, r3, #1
 8020014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020016:	42a3      	cmp	r3, r4
 8020018:	bfbf      	itttt	lt
 802001a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802001c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802001e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8020020:	1ae3      	sublt	r3, r4, r3
 8020022:	bfb4      	ite	lt
 8020024:	18d2      	addlt	r2, r2, r3
 8020026:	1b1c      	subge	r4, r3, r4
 8020028:	9b07      	ldr	r3, [sp, #28]
 802002a:	bfbc      	itt	lt
 802002c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802002e:	2400      	movlt	r4, #0
 8020030:	2b00      	cmp	r3, #0
 8020032:	bfb5      	itete	lt
 8020034:	eba8 0603 	sublt.w	r6, r8, r3
 8020038:	9b07      	ldrge	r3, [sp, #28]
 802003a:	2300      	movlt	r3, #0
 802003c:	4646      	movge	r6, r8
 802003e:	e730      	b.n	801fea2 <_dtoa_r+0x6f2>
 8020040:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020042:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020044:	4646      	mov	r6, r8
 8020046:	e735      	b.n	801feb4 <_dtoa_r+0x704>
 8020048:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802004a:	e75c      	b.n	801ff06 <_dtoa_r+0x756>
 802004c:	2300      	movs	r3, #0
 802004e:	e788      	b.n	801ff62 <_dtoa_r+0x7b2>
 8020050:	3fe00000 	.word	0x3fe00000
 8020054:	40240000 	.word	0x40240000
 8020058:	40140000 	.word	0x40140000
 802005c:	9b02      	ldr	r3, [sp, #8]
 802005e:	e780      	b.n	801ff62 <_dtoa_r+0x7b2>
 8020060:	2300      	movs	r3, #0
 8020062:	930a      	str	r3, [sp, #40]	@ 0x28
 8020064:	e782      	b.n	801ff6c <_dtoa_r+0x7bc>
 8020066:	d099      	beq.n	801ff9c <_dtoa_r+0x7ec>
 8020068:	9a08      	ldr	r2, [sp, #32]
 802006a:	331c      	adds	r3, #28
 802006c:	441a      	add	r2, r3
 802006e:	4498      	add	r8, r3
 8020070:	441e      	add	r6, r3
 8020072:	9208      	str	r2, [sp, #32]
 8020074:	e792      	b.n	801ff9c <_dtoa_r+0x7ec>
 8020076:	4603      	mov	r3, r0
 8020078:	e7f6      	b.n	8020068 <_dtoa_r+0x8b8>
 802007a:	9b07      	ldr	r3, [sp, #28]
 802007c:	9704      	str	r7, [sp, #16]
 802007e:	2b00      	cmp	r3, #0
 8020080:	dc20      	bgt.n	80200c4 <_dtoa_r+0x914>
 8020082:	9300      	str	r3, [sp, #0]
 8020084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020086:	2b02      	cmp	r3, #2
 8020088:	dd1e      	ble.n	80200c8 <_dtoa_r+0x918>
 802008a:	9b00      	ldr	r3, [sp, #0]
 802008c:	2b00      	cmp	r3, #0
 802008e:	f47f aec0 	bne.w	801fe12 <_dtoa_r+0x662>
 8020092:	4621      	mov	r1, r4
 8020094:	2205      	movs	r2, #5
 8020096:	4658      	mov	r0, fp
 8020098:	f000 f976 	bl	8020388 <__multadd>
 802009c:	4601      	mov	r1, r0
 802009e:	4604      	mov	r4, r0
 80200a0:	4648      	mov	r0, r9
 80200a2:	f000 fb6f 	bl	8020784 <__mcmp>
 80200a6:	2800      	cmp	r0, #0
 80200a8:	f77f aeb3 	ble.w	801fe12 <_dtoa_r+0x662>
 80200ac:	4656      	mov	r6, sl
 80200ae:	2331      	movs	r3, #49	@ 0x31
 80200b0:	f806 3b01 	strb.w	r3, [r6], #1
 80200b4:	9b04      	ldr	r3, [sp, #16]
 80200b6:	3301      	adds	r3, #1
 80200b8:	9304      	str	r3, [sp, #16]
 80200ba:	e6ae      	b.n	801fe1a <_dtoa_r+0x66a>
 80200bc:	9c07      	ldr	r4, [sp, #28]
 80200be:	9704      	str	r7, [sp, #16]
 80200c0:	4625      	mov	r5, r4
 80200c2:	e7f3      	b.n	80200ac <_dtoa_r+0x8fc>
 80200c4:	9b07      	ldr	r3, [sp, #28]
 80200c6:	9300      	str	r3, [sp, #0]
 80200c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	f000 8101 	beq.w	80202d2 <_dtoa_r+0xb22>
 80200d0:	2e00      	cmp	r6, #0
 80200d2:	dd05      	ble.n	80200e0 <_dtoa_r+0x930>
 80200d4:	4629      	mov	r1, r5
 80200d6:	4632      	mov	r2, r6
 80200d8:	4658      	mov	r0, fp
 80200da:	f000 fae7 	bl	80206ac <__lshift>
 80200de:	4605      	mov	r5, r0
 80200e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d059      	beq.n	802019a <_dtoa_r+0x9ea>
 80200e6:	6869      	ldr	r1, [r5, #4]
 80200e8:	4658      	mov	r0, fp
 80200ea:	f000 f91f 	bl	802032c <_Balloc>
 80200ee:	4606      	mov	r6, r0
 80200f0:	b920      	cbnz	r0, 80200fc <_dtoa_r+0x94c>
 80200f2:	4b83      	ldr	r3, [pc, #524]	@ (8020300 <_dtoa_r+0xb50>)
 80200f4:	4602      	mov	r2, r0
 80200f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80200fa:	e480      	b.n	801f9fe <_dtoa_r+0x24e>
 80200fc:	692a      	ldr	r2, [r5, #16]
 80200fe:	3202      	adds	r2, #2
 8020100:	0092      	lsls	r2, r2, #2
 8020102:	f105 010c 	add.w	r1, r5, #12
 8020106:	300c      	adds	r0, #12
 8020108:	f7fd fbac 	bl	801d864 <memcpy>
 802010c:	2201      	movs	r2, #1
 802010e:	4631      	mov	r1, r6
 8020110:	4658      	mov	r0, fp
 8020112:	f000 facb 	bl	80206ac <__lshift>
 8020116:	f10a 0301 	add.w	r3, sl, #1
 802011a:	9307      	str	r3, [sp, #28]
 802011c:	9b00      	ldr	r3, [sp, #0]
 802011e:	4453      	add	r3, sl
 8020120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020122:	9b02      	ldr	r3, [sp, #8]
 8020124:	f003 0301 	and.w	r3, r3, #1
 8020128:	462f      	mov	r7, r5
 802012a:	930a      	str	r3, [sp, #40]	@ 0x28
 802012c:	4605      	mov	r5, r0
 802012e:	9b07      	ldr	r3, [sp, #28]
 8020130:	4621      	mov	r1, r4
 8020132:	3b01      	subs	r3, #1
 8020134:	4648      	mov	r0, r9
 8020136:	9300      	str	r3, [sp, #0]
 8020138:	f7ff fab2 	bl	801f6a0 <quorem>
 802013c:	4639      	mov	r1, r7
 802013e:	9002      	str	r0, [sp, #8]
 8020140:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8020144:	4648      	mov	r0, r9
 8020146:	f000 fb1d 	bl	8020784 <__mcmp>
 802014a:	462a      	mov	r2, r5
 802014c:	9008      	str	r0, [sp, #32]
 802014e:	4621      	mov	r1, r4
 8020150:	4658      	mov	r0, fp
 8020152:	f000 fb33 	bl	80207bc <__mdiff>
 8020156:	68c2      	ldr	r2, [r0, #12]
 8020158:	4606      	mov	r6, r0
 802015a:	bb02      	cbnz	r2, 802019e <_dtoa_r+0x9ee>
 802015c:	4601      	mov	r1, r0
 802015e:	4648      	mov	r0, r9
 8020160:	f000 fb10 	bl	8020784 <__mcmp>
 8020164:	4602      	mov	r2, r0
 8020166:	4631      	mov	r1, r6
 8020168:	4658      	mov	r0, fp
 802016a:	920e      	str	r2, [sp, #56]	@ 0x38
 802016c:	f000 f903 	bl	8020376 <_Bfree>
 8020170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020174:	9e07      	ldr	r6, [sp, #28]
 8020176:	ea43 0102 	orr.w	r1, r3, r2
 802017a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802017c:	4319      	orrs	r1, r3
 802017e:	d110      	bne.n	80201a2 <_dtoa_r+0x9f2>
 8020180:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8020184:	d029      	beq.n	80201da <_dtoa_r+0xa2a>
 8020186:	9b08      	ldr	r3, [sp, #32]
 8020188:	2b00      	cmp	r3, #0
 802018a:	dd02      	ble.n	8020192 <_dtoa_r+0x9e2>
 802018c:	9b02      	ldr	r3, [sp, #8]
 802018e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8020192:	9b00      	ldr	r3, [sp, #0]
 8020194:	f883 8000 	strb.w	r8, [r3]
 8020198:	e640      	b.n	801fe1c <_dtoa_r+0x66c>
 802019a:	4628      	mov	r0, r5
 802019c:	e7bb      	b.n	8020116 <_dtoa_r+0x966>
 802019e:	2201      	movs	r2, #1
 80201a0:	e7e1      	b.n	8020166 <_dtoa_r+0x9b6>
 80201a2:	9b08      	ldr	r3, [sp, #32]
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	db04      	blt.n	80201b2 <_dtoa_r+0xa02>
 80201a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80201aa:	430b      	orrs	r3, r1
 80201ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80201ae:	430b      	orrs	r3, r1
 80201b0:	d120      	bne.n	80201f4 <_dtoa_r+0xa44>
 80201b2:	2a00      	cmp	r2, #0
 80201b4:	dded      	ble.n	8020192 <_dtoa_r+0x9e2>
 80201b6:	4649      	mov	r1, r9
 80201b8:	2201      	movs	r2, #1
 80201ba:	4658      	mov	r0, fp
 80201bc:	f000 fa76 	bl	80206ac <__lshift>
 80201c0:	4621      	mov	r1, r4
 80201c2:	4681      	mov	r9, r0
 80201c4:	f000 fade 	bl	8020784 <__mcmp>
 80201c8:	2800      	cmp	r0, #0
 80201ca:	dc03      	bgt.n	80201d4 <_dtoa_r+0xa24>
 80201cc:	d1e1      	bne.n	8020192 <_dtoa_r+0x9e2>
 80201ce:	f018 0f01 	tst.w	r8, #1
 80201d2:	d0de      	beq.n	8020192 <_dtoa_r+0x9e2>
 80201d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80201d8:	d1d8      	bne.n	802018c <_dtoa_r+0x9dc>
 80201da:	9a00      	ldr	r2, [sp, #0]
 80201dc:	2339      	movs	r3, #57	@ 0x39
 80201de:	7013      	strb	r3, [r2, #0]
 80201e0:	4633      	mov	r3, r6
 80201e2:	461e      	mov	r6, r3
 80201e4:	3b01      	subs	r3, #1
 80201e6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80201ea:	2a39      	cmp	r2, #57	@ 0x39
 80201ec:	d052      	beq.n	8020294 <_dtoa_r+0xae4>
 80201ee:	3201      	adds	r2, #1
 80201f0:	701a      	strb	r2, [r3, #0]
 80201f2:	e613      	b.n	801fe1c <_dtoa_r+0x66c>
 80201f4:	2a00      	cmp	r2, #0
 80201f6:	dd07      	ble.n	8020208 <_dtoa_r+0xa58>
 80201f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80201fc:	d0ed      	beq.n	80201da <_dtoa_r+0xa2a>
 80201fe:	9a00      	ldr	r2, [sp, #0]
 8020200:	f108 0301 	add.w	r3, r8, #1
 8020204:	7013      	strb	r3, [r2, #0]
 8020206:	e609      	b.n	801fe1c <_dtoa_r+0x66c>
 8020208:	9b07      	ldr	r3, [sp, #28]
 802020a:	9a07      	ldr	r2, [sp, #28]
 802020c:	f803 8c01 	strb.w	r8, [r3, #-1]
 8020210:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020212:	4293      	cmp	r3, r2
 8020214:	d028      	beq.n	8020268 <_dtoa_r+0xab8>
 8020216:	4649      	mov	r1, r9
 8020218:	2300      	movs	r3, #0
 802021a:	220a      	movs	r2, #10
 802021c:	4658      	mov	r0, fp
 802021e:	f000 f8b3 	bl	8020388 <__multadd>
 8020222:	42af      	cmp	r7, r5
 8020224:	4681      	mov	r9, r0
 8020226:	f04f 0300 	mov.w	r3, #0
 802022a:	f04f 020a 	mov.w	r2, #10
 802022e:	4639      	mov	r1, r7
 8020230:	4658      	mov	r0, fp
 8020232:	d107      	bne.n	8020244 <_dtoa_r+0xa94>
 8020234:	f000 f8a8 	bl	8020388 <__multadd>
 8020238:	4607      	mov	r7, r0
 802023a:	4605      	mov	r5, r0
 802023c:	9b07      	ldr	r3, [sp, #28]
 802023e:	3301      	adds	r3, #1
 8020240:	9307      	str	r3, [sp, #28]
 8020242:	e774      	b.n	802012e <_dtoa_r+0x97e>
 8020244:	f000 f8a0 	bl	8020388 <__multadd>
 8020248:	4629      	mov	r1, r5
 802024a:	4607      	mov	r7, r0
 802024c:	2300      	movs	r3, #0
 802024e:	220a      	movs	r2, #10
 8020250:	4658      	mov	r0, fp
 8020252:	f000 f899 	bl	8020388 <__multadd>
 8020256:	4605      	mov	r5, r0
 8020258:	e7f0      	b.n	802023c <_dtoa_r+0xa8c>
 802025a:	9b00      	ldr	r3, [sp, #0]
 802025c:	2b00      	cmp	r3, #0
 802025e:	bfcc      	ite	gt
 8020260:	461e      	movgt	r6, r3
 8020262:	2601      	movle	r6, #1
 8020264:	4456      	add	r6, sl
 8020266:	2700      	movs	r7, #0
 8020268:	4649      	mov	r1, r9
 802026a:	2201      	movs	r2, #1
 802026c:	4658      	mov	r0, fp
 802026e:	f000 fa1d 	bl	80206ac <__lshift>
 8020272:	4621      	mov	r1, r4
 8020274:	4681      	mov	r9, r0
 8020276:	f000 fa85 	bl	8020784 <__mcmp>
 802027a:	2800      	cmp	r0, #0
 802027c:	dcb0      	bgt.n	80201e0 <_dtoa_r+0xa30>
 802027e:	d102      	bne.n	8020286 <_dtoa_r+0xad6>
 8020280:	f018 0f01 	tst.w	r8, #1
 8020284:	d1ac      	bne.n	80201e0 <_dtoa_r+0xa30>
 8020286:	4633      	mov	r3, r6
 8020288:	461e      	mov	r6, r3
 802028a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802028e:	2a30      	cmp	r2, #48	@ 0x30
 8020290:	d0fa      	beq.n	8020288 <_dtoa_r+0xad8>
 8020292:	e5c3      	b.n	801fe1c <_dtoa_r+0x66c>
 8020294:	459a      	cmp	sl, r3
 8020296:	d1a4      	bne.n	80201e2 <_dtoa_r+0xa32>
 8020298:	9b04      	ldr	r3, [sp, #16]
 802029a:	3301      	adds	r3, #1
 802029c:	9304      	str	r3, [sp, #16]
 802029e:	2331      	movs	r3, #49	@ 0x31
 80202a0:	f88a 3000 	strb.w	r3, [sl]
 80202a4:	e5ba      	b.n	801fe1c <_dtoa_r+0x66c>
 80202a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80202a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8020304 <_dtoa_r+0xb54>
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	f43f aab6 	beq.w	801f81e <_dtoa_r+0x6e>
 80202b2:	f10a 0308 	add.w	r3, sl, #8
 80202b6:	f7ff bab0 	b.w	801f81a <_dtoa_r+0x6a>
 80202ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202bc:	2b01      	cmp	r3, #1
 80202be:	f77f ae3a 	ble.w	801ff36 <_dtoa_r+0x786>
 80202c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80202c6:	2001      	movs	r0, #1
 80202c8:	e658      	b.n	801ff7c <_dtoa_r+0x7cc>
 80202ca:	9b00      	ldr	r3, [sp, #0]
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	f77f aed9 	ble.w	8020084 <_dtoa_r+0x8d4>
 80202d2:	4656      	mov	r6, sl
 80202d4:	4621      	mov	r1, r4
 80202d6:	4648      	mov	r0, r9
 80202d8:	f7ff f9e2 	bl	801f6a0 <quorem>
 80202dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80202e0:	f806 8b01 	strb.w	r8, [r6], #1
 80202e4:	9b00      	ldr	r3, [sp, #0]
 80202e6:	eba6 020a 	sub.w	r2, r6, sl
 80202ea:	4293      	cmp	r3, r2
 80202ec:	ddb5      	ble.n	802025a <_dtoa_r+0xaaa>
 80202ee:	4649      	mov	r1, r9
 80202f0:	2300      	movs	r3, #0
 80202f2:	220a      	movs	r2, #10
 80202f4:	4658      	mov	r0, fp
 80202f6:	f000 f847 	bl	8020388 <__multadd>
 80202fa:	4681      	mov	r9, r0
 80202fc:	e7ea      	b.n	80202d4 <_dtoa_r+0xb24>
 80202fe:	bf00      	nop
 8020300:	08024bb7 	.word	0x08024bb7
 8020304:	08024baa 	.word	0x08024baa

08020308 <__ascii_mbtowc>:
 8020308:	b082      	sub	sp, #8
 802030a:	b901      	cbnz	r1, 802030e <__ascii_mbtowc+0x6>
 802030c:	a901      	add	r1, sp, #4
 802030e:	b142      	cbz	r2, 8020322 <__ascii_mbtowc+0x1a>
 8020310:	b14b      	cbz	r3, 8020326 <__ascii_mbtowc+0x1e>
 8020312:	7813      	ldrb	r3, [r2, #0]
 8020314:	600b      	str	r3, [r1, #0]
 8020316:	7812      	ldrb	r2, [r2, #0]
 8020318:	1e10      	subs	r0, r2, #0
 802031a:	bf18      	it	ne
 802031c:	2001      	movne	r0, #1
 802031e:	b002      	add	sp, #8
 8020320:	4770      	bx	lr
 8020322:	4610      	mov	r0, r2
 8020324:	e7fb      	b.n	802031e <__ascii_mbtowc+0x16>
 8020326:	f06f 0001 	mvn.w	r0, #1
 802032a:	e7f8      	b.n	802031e <__ascii_mbtowc+0x16>

0802032c <_Balloc>:
 802032c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802032e:	b570      	push	{r4, r5, r6, lr}
 8020330:	4605      	mov	r5, r0
 8020332:	460c      	mov	r4, r1
 8020334:	b17b      	cbz	r3, 8020356 <_Balloc+0x2a>
 8020336:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8020338:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802033c:	b9a0      	cbnz	r0, 8020368 <_Balloc+0x3c>
 802033e:	2101      	movs	r1, #1
 8020340:	fa01 f604 	lsl.w	r6, r1, r4
 8020344:	1d72      	adds	r2, r6, #5
 8020346:	0092      	lsls	r2, r2, #2
 8020348:	4628      	mov	r0, r5
 802034a:	f000 fd8d 	bl	8020e68 <_calloc_r>
 802034e:	b148      	cbz	r0, 8020364 <_Balloc+0x38>
 8020350:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8020354:	e00b      	b.n	802036e <_Balloc+0x42>
 8020356:	2221      	movs	r2, #33	@ 0x21
 8020358:	2104      	movs	r1, #4
 802035a:	f000 fd85 	bl	8020e68 <_calloc_r>
 802035e:	6468      	str	r0, [r5, #68]	@ 0x44
 8020360:	2800      	cmp	r0, #0
 8020362:	d1e8      	bne.n	8020336 <_Balloc+0xa>
 8020364:	2000      	movs	r0, #0
 8020366:	bd70      	pop	{r4, r5, r6, pc}
 8020368:	6802      	ldr	r2, [r0, #0]
 802036a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802036e:	2300      	movs	r3, #0
 8020370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020374:	e7f7      	b.n	8020366 <_Balloc+0x3a>

08020376 <_Bfree>:
 8020376:	b131      	cbz	r1, 8020386 <_Bfree+0x10>
 8020378:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802037a:	684a      	ldr	r2, [r1, #4]
 802037c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020380:	6008      	str	r0, [r1, #0]
 8020382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8020386:	4770      	bx	lr

08020388 <__multadd>:
 8020388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802038c:	690d      	ldr	r5, [r1, #16]
 802038e:	4607      	mov	r7, r0
 8020390:	460c      	mov	r4, r1
 8020392:	461e      	mov	r6, r3
 8020394:	f101 0c14 	add.w	ip, r1, #20
 8020398:	2000      	movs	r0, #0
 802039a:	f8dc 3000 	ldr.w	r3, [ip]
 802039e:	b299      	uxth	r1, r3
 80203a0:	fb02 6101 	mla	r1, r2, r1, r6
 80203a4:	0c1e      	lsrs	r6, r3, #16
 80203a6:	0c0b      	lsrs	r3, r1, #16
 80203a8:	fb02 3306 	mla	r3, r2, r6, r3
 80203ac:	b289      	uxth	r1, r1
 80203ae:	3001      	adds	r0, #1
 80203b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80203b4:	4285      	cmp	r5, r0
 80203b6:	f84c 1b04 	str.w	r1, [ip], #4
 80203ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80203be:	dcec      	bgt.n	802039a <__multadd+0x12>
 80203c0:	b30e      	cbz	r6, 8020406 <__multadd+0x7e>
 80203c2:	68a3      	ldr	r3, [r4, #8]
 80203c4:	42ab      	cmp	r3, r5
 80203c6:	dc19      	bgt.n	80203fc <__multadd+0x74>
 80203c8:	6861      	ldr	r1, [r4, #4]
 80203ca:	4638      	mov	r0, r7
 80203cc:	3101      	adds	r1, #1
 80203ce:	f7ff ffad 	bl	802032c <_Balloc>
 80203d2:	4680      	mov	r8, r0
 80203d4:	b928      	cbnz	r0, 80203e2 <__multadd+0x5a>
 80203d6:	4602      	mov	r2, r0
 80203d8:	4b0c      	ldr	r3, [pc, #48]	@ (802040c <__multadd+0x84>)
 80203da:	480d      	ldr	r0, [pc, #52]	@ (8020410 <__multadd+0x88>)
 80203dc:	21ba      	movs	r1, #186	@ 0xba
 80203de:	f000 fd25 	bl	8020e2c <__assert_func>
 80203e2:	6922      	ldr	r2, [r4, #16]
 80203e4:	3202      	adds	r2, #2
 80203e6:	f104 010c 	add.w	r1, r4, #12
 80203ea:	0092      	lsls	r2, r2, #2
 80203ec:	300c      	adds	r0, #12
 80203ee:	f7fd fa39 	bl	801d864 <memcpy>
 80203f2:	4621      	mov	r1, r4
 80203f4:	4638      	mov	r0, r7
 80203f6:	f7ff ffbe 	bl	8020376 <_Bfree>
 80203fa:	4644      	mov	r4, r8
 80203fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020400:	3501      	adds	r5, #1
 8020402:	615e      	str	r6, [r3, #20]
 8020404:	6125      	str	r5, [r4, #16]
 8020406:	4620      	mov	r0, r4
 8020408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802040c:	08024bb7 	.word	0x08024bb7
 8020410:	08024c20 	.word	0x08024c20

08020414 <__hi0bits>:
 8020414:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8020418:	4603      	mov	r3, r0
 802041a:	bf36      	itet	cc
 802041c:	0403      	lslcc	r3, r0, #16
 802041e:	2000      	movcs	r0, #0
 8020420:	2010      	movcc	r0, #16
 8020422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020426:	bf3c      	itt	cc
 8020428:	021b      	lslcc	r3, r3, #8
 802042a:	3008      	addcc	r0, #8
 802042c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020430:	bf3c      	itt	cc
 8020432:	011b      	lslcc	r3, r3, #4
 8020434:	3004      	addcc	r0, #4
 8020436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802043a:	bf3c      	itt	cc
 802043c:	009b      	lslcc	r3, r3, #2
 802043e:	3002      	addcc	r0, #2
 8020440:	2b00      	cmp	r3, #0
 8020442:	db05      	blt.n	8020450 <__hi0bits+0x3c>
 8020444:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8020448:	f100 0001 	add.w	r0, r0, #1
 802044c:	bf08      	it	eq
 802044e:	2020      	moveq	r0, #32
 8020450:	4770      	bx	lr

08020452 <__lo0bits>:
 8020452:	6803      	ldr	r3, [r0, #0]
 8020454:	4602      	mov	r2, r0
 8020456:	f013 0007 	ands.w	r0, r3, #7
 802045a:	d00b      	beq.n	8020474 <__lo0bits+0x22>
 802045c:	07d9      	lsls	r1, r3, #31
 802045e:	d421      	bmi.n	80204a4 <__lo0bits+0x52>
 8020460:	0798      	lsls	r0, r3, #30
 8020462:	bf49      	itett	mi
 8020464:	085b      	lsrmi	r3, r3, #1
 8020466:	089b      	lsrpl	r3, r3, #2
 8020468:	2001      	movmi	r0, #1
 802046a:	6013      	strmi	r3, [r2, #0]
 802046c:	bf5c      	itt	pl
 802046e:	6013      	strpl	r3, [r2, #0]
 8020470:	2002      	movpl	r0, #2
 8020472:	4770      	bx	lr
 8020474:	b299      	uxth	r1, r3
 8020476:	b909      	cbnz	r1, 802047c <__lo0bits+0x2a>
 8020478:	0c1b      	lsrs	r3, r3, #16
 802047a:	2010      	movs	r0, #16
 802047c:	b2d9      	uxtb	r1, r3
 802047e:	b909      	cbnz	r1, 8020484 <__lo0bits+0x32>
 8020480:	3008      	adds	r0, #8
 8020482:	0a1b      	lsrs	r3, r3, #8
 8020484:	0719      	lsls	r1, r3, #28
 8020486:	bf04      	itt	eq
 8020488:	091b      	lsreq	r3, r3, #4
 802048a:	3004      	addeq	r0, #4
 802048c:	0799      	lsls	r1, r3, #30
 802048e:	bf04      	itt	eq
 8020490:	089b      	lsreq	r3, r3, #2
 8020492:	3002      	addeq	r0, #2
 8020494:	07d9      	lsls	r1, r3, #31
 8020496:	d403      	bmi.n	80204a0 <__lo0bits+0x4e>
 8020498:	085b      	lsrs	r3, r3, #1
 802049a:	f100 0001 	add.w	r0, r0, #1
 802049e:	d003      	beq.n	80204a8 <__lo0bits+0x56>
 80204a0:	6013      	str	r3, [r2, #0]
 80204a2:	4770      	bx	lr
 80204a4:	2000      	movs	r0, #0
 80204a6:	4770      	bx	lr
 80204a8:	2020      	movs	r0, #32
 80204aa:	4770      	bx	lr

080204ac <__i2b>:
 80204ac:	b510      	push	{r4, lr}
 80204ae:	460c      	mov	r4, r1
 80204b0:	2101      	movs	r1, #1
 80204b2:	f7ff ff3b 	bl	802032c <_Balloc>
 80204b6:	4602      	mov	r2, r0
 80204b8:	b928      	cbnz	r0, 80204c6 <__i2b+0x1a>
 80204ba:	4b05      	ldr	r3, [pc, #20]	@ (80204d0 <__i2b+0x24>)
 80204bc:	4805      	ldr	r0, [pc, #20]	@ (80204d4 <__i2b+0x28>)
 80204be:	f240 1145 	movw	r1, #325	@ 0x145
 80204c2:	f000 fcb3 	bl	8020e2c <__assert_func>
 80204c6:	2301      	movs	r3, #1
 80204c8:	6144      	str	r4, [r0, #20]
 80204ca:	6103      	str	r3, [r0, #16]
 80204cc:	bd10      	pop	{r4, pc}
 80204ce:	bf00      	nop
 80204d0:	08024bb7 	.word	0x08024bb7
 80204d4:	08024c20 	.word	0x08024c20

080204d8 <__multiply>:
 80204d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204dc:	4614      	mov	r4, r2
 80204de:	690a      	ldr	r2, [r1, #16]
 80204e0:	6923      	ldr	r3, [r4, #16]
 80204e2:	429a      	cmp	r2, r3
 80204e4:	bfa8      	it	ge
 80204e6:	4623      	movge	r3, r4
 80204e8:	460f      	mov	r7, r1
 80204ea:	bfa4      	itt	ge
 80204ec:	460c      	movge	r4, r1
 80204ee:	461f      	movge	r7, r3
 80204f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80204f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80204f8:	68a3      	ldr	r3, [r4, #8]
 80204fa:	6861      	ldr	r1, [r4, #4]
 80204fc:	eb0a 0609 	add.w	r6, sl, r9
 8020500:	42b3      	cmp	r3, r6
 8020502:	b085      	sub	sp, #20
 8020504:	bfb8      	it	lt
 8020506:	3101      	addlt	r1, #1
 8020508:	f7ff ff10 	bl	802032c <_Balloc>
 802050c:	b930      	cbnz	r0, 802051c <__multiply+0x44>
 802050e:	4602      	mov	r2, r0
 8020510:	4b44      	ldr	r3, [pc, #272]	@ (8020624 <__multiply+0x14c>)
 8020512:	4845      	ldr	r0, [pc, #276]	@ (8020628 <__multiply+0x150>)
 8020514:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8020518:	f000 fc88 	bl	8020e2c <__assert_func>
 802051c:	f100 0514 	add.w	r5, r0, #20
 8020520:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020524:	462b      	mov	r3, r5
 8020526:	2200      	movs	r2, #0
 8020528:	4543      	cmp	r3, r8
 802052a:	d321      	bcc.n	8020570 <__multiply+0x98>
 802052c:	f107 0114 	add.w	r1, r7, #20
 8020530:	f104 0214 	add.w	r2, r4, #20
 8020534:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8020538:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802053c:	9302      	str	r3, [sp, #8]
 802053e:	1b13      	subs	r3, r2, r4
 8020540:	3b15      	subs	r3, #21
 8020542:	f023 0303 	bic.w	r3, r3, #3
 8020546:	3304      	adds	r3, #4
 8020548:	f104 0715 	add.w	r7, r4, #21
 802054c:	42ba      	cmp	r2, r7
 802054e:	bf38      	it	cc
 8020550:	2304      	movcc	r3, #4
 8020552:	9301      	str	r3, [sp, #4]
 8020554:	9b02      	ldr	r3, [sp, #8]
 8020556:	9103      	str	r1, [sp, #12]
 8020558:	428b      	cmp	r3, r1
 802055a:	d80c      	bhi.n	8020576 <__multiply+0x9e>
 802055c:	2e00      	cmp	r6, #0
 802055e:	dd03      	ble.n	8020568 <__multiply+0x90>
 8020560:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020564:	2b00      	cmp	r3, #0
 8020566:	d05b      	beq.n	8020620 <__multiply+0x148>
 8020568:	6106      	str	r6, [r0, #16]
 802056a:	b005      	add	sp, #20
 802056c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020570:	f843 2b04 	str.w	r2, [r3], #4
 8020574:	e7d8      	b.n	8020528 <__multiply+0x50>
 8020576:	f8b1 a000 	ldrh.w	sl, [r1]
 802057a:	f1ba 0f00 	cmp.w	sl, #0
 802057e:	d024      	beq.n	80205ca <__multiply+0xf2>
 8020580:	f104 0e14 	add.w	lr, r4, #20
 8020584:	46a9      	mov	r9, r5
 8020586:	f04f 0c00 	mov.w	ip, #0
 802058a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802058e:	f8d9 3000 	ldr.w	r3, [r9]
 8020592:	fa1f fb87 	uxth.w	fp, r7
 8020596:	b29b      	uxth	r3, r3
 8020598:	fb0a 330b 	mla	r3, sl, fp, r3
 802059c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80205a0:	f8d9 7000 	ldr.w	r7, [r9]
 80205a4:	4463      	add	r3, ip
 80205a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80205aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80205ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80205b2:	b29b      	uxth	r3, r3
 80205b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80205b8:	4572      	cmp	r2, lr
 80205ba:	f849 3b04 	str.w	r3, [r9], #4
 80205be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80205c2:	d8e2      	bhi.n	802058a <__multiply+0xb2>
 80205c4:	9b01      	ldr	r3, [sp, #4]
 80205c6:	f845 c003 	str.w	ip, [r5, r3]
 80205ca:	9b03      	ldr	r3, [sp, #12]
 80205cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80205d0:	3104      	adds	r1, #4
 80205d2:	f1b9 0f00 	cmp.w	r9, #0
 80205d6:	d021      	beq.n	802061c <__multiply+0x144>
 80205d8:	682b      	ldr	r3, [r5, #0]
 80205da:	f104 0c14 	add.w	ip, r4, #20
 80205de:	46ae      	mov	lr, r5
 80205e0:	f04f 0a00 	mov.w	sl, #0
 80205e4:	f8bc b000 	ldrh.w	fp, [ip]
 80205e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80205ec:	fb09 770b 	mla	r7, r9, fp, r7
 80205f0:	4457      	add	r7, sl
 80205f2:	b29b      	uxth	r3, r3
 80205f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80205f8:	f84e 3b04 	str.w	r3, [lr], #4
 80205fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020600:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020604:	f8be 3000 	ldrh.w	r3, [lr]
 8020608:	fb09 330a 	mla	r3, r9, sl, r3
 802060c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8020610:	4562      	cmp	r2, ip
 8020612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020616:	d8e5      	bhi.n	80205e4 <__multiply+0x10c>
 8020618:	9f01      	ldr	r7, [sp, #4]
 802061a:	51eb      	str	r3, [r5, r7]
 802061c:	3504      	adds	r5, #4
 802061e:	e799      	b.n	8020554 <__multiply+0x7c>
 8020620:	3e01      	subs	r6, #1
 8020622:	e79b      	b.n	802055c <__multiply+0x84>
 8020624:	08024bb7 	.word	0x08024bb7
 8020628:	08024c20 	.word	0x08024c20

0802062c <__pow5mult>:
 802062c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020630:	4615      	mov	r5, r2
 8020632:	f012 0203 	ands.w	r2, r2, #3
 8020636:	4607      	mov	r7, r0
 8020638:	460e      	mov	r6, r1
 802063a:	d007      	beq.n	802064c <__pow5mult+0x20>
 802063c:	4c1a      	ldr	r4, [pc, #104]	@ (80206a8 <__pow5mult+0x7c>)
 802063e:	3a01      	subs	r2, #1
 8020640:	2300      	movs	r3, #0
 8020642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020646:	f7ff fe9f 	bl	8020388 <__multadd>
 802064a:	4606      	mov	r6, r0
 802064c:	10ad      	asrs	r5, r5, #2
 802064e:	d027      	beq.n	80206a0 <__pow5mult+0x74>
 8020650:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8020652:	b944      	cbnz	r4, 8020666 <__pow5mult+0x3a>
 8020654:	f240 2171 	movw	r1, #625	@ 0x271
 8020658:	4638      	mov	r0, r7
 802065a:	f7ff ff27 	bl	80204ac <__i2b>
 802065e:	2300      	movs	r3, #0
 8020660:	6438      	str	r0, [r7, #64]	@ 0x40
 8020662:	4604      	mov	r4, r0
 8020664:	6003      	str	r3, [r0, #0]
 8020666:	f04f 0900 	mov.w	r9, #0
 802066a:	07eb      	lsls	r3, r5, #31
 802066c:	d50a      	bpl.n	8020684 <__pow5mult+0x58>
 802066e:	4631      	mov	r1, r6
 8020670:	4622      	mov	r2, r4
 8020672:	4638      	mov	r0, r7
 8020674:	f7ff ff30 	bl	80204d8 <__multiply>
 8020678:	4631      	mov	r1, r6
 802067a:	4680      	mov	r8, r0
 802067c:	4638      	mov	r0, r7
 802067e:	f7ff fe7a 	bl	8020376 <_Bfree>
 8020682:	4646      	mov	r6, r8
 8020684:	106d      	asrs	r5, r5, #1
 8020686:	d00b      	beq.n	80206a0 <__pow5mult+0x74>
 8020688:	6820      	ldr	r0, [r4, #0]
 802068a:	b938      	cbnz	r0, 802069c <__pow5mult+0x70>
 802068c:	4622      	mov	r2, r4
 802068e:	4621      	mov	r1, r4
 8020690:	4638      	mov	r0, r7
 8020692:	f7ff ff21 	bl	80204d8 <__multiply>
 8020696:	6020      	str	r0, [r4, #0]
 8020698:	f8c0 9000 	str.w	r9, [r0]
 802069c:	4604      	mov	r4, r0
 802069e:	e7e4      	b.n	802066a <__pow5mult+0x3e>
 80206a0:	4630      	mov	r0, r6
 80206a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206a6:	bf00      	nop
 80206a8:	08024c7c 	.word	0x08024c7c

080206ac <__lshift>:
 80206ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206b0:	460c      	mov	r4, r1
 80206b2:	6849      	ldr	r1, [r1, #4]
 80206b4:	6923      	ldr	r3, [r4, #16]
 80206b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80206ba:	68a3      	ldr	r3, [r4, #8]
 80206bc:	4607      	mov	r7, r0
 80206be:	4691      	mov	r9, r2
 80206c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80206c4:	f108 0601 	add.w	r6, r8, #1
 80206c8:	42b3      	cmp	r3, r6
 80206ca:	db0b      	blt.n	80206e4 <__lshift+0x38>
 80206cc:	4638      	mov	r0, r7
 80206ce:	f7ff fe2d 	bl	802032c <_Balloc>
 80206d2:	4605      	mov	r5, r0
 80206d4:	b948      	cbnz	r0, 80206ea <__lshift+0x3e>
 80206d6:	4602      	mov	r2, r0
 80206d8:	4b28      	ldr	r3, [pc, #160]	@ (802077c <__lshift+0xd0>)
 80206da:	4829      	ldr	r0, [pc, #164]	@ (8020780 <__lshift+0xd4>)
 80206dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80206e0:	f000 fba4 	bl	8020e2c <__assert_func>
 80206e4:	3101      	adds	r1, #1
 80206e6:	005b      	lsls	r3, r3, #1
 80206e8:	e7ee      	b.n	80206c8 <__lshift+0x1c>
 80206ea:	2300      	movs	r3, #0
 80206ec:	f100 0114 	add.w	r1, r0, #20
 80206f0:	f100 0210 	add.w	r2, r0, #16
 80206f4:	4618      	mov	r0, r3
 80206f6:	4553      	cmp	r3, sl
 80206f8:	db33      	blt.n	8020762 <__lshift+0xb6>
 80206fa:	6920      	ldr	r0, [r4, #16]
 80206fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020700:	f104 0314 	add.w	r3, r4, #20
 8020704:	f019 091f 	ands.w	r9, r9, #31
 8020708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802070c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020710:	d02b      	beq.n	802076a <__lshift+0xbe>
 8020712:	f1c9 0e20 	rsb	lr, r9, #32
 8020716:	468a      	mov	sl, r1
 8020718:	2200      	movs	r2, #0
 802071a:	6818      	ldr	r0, [r3, #0]
 802071c:	fa00 f009 	lsl.w	r0, r0, r9
 8020720:	4310      	orrs	r0, r2
 8020722:	f84a 0b04 	str.w	r0, [sl], #4
 8020726:	f853 2b04 	ldr.w	r2, [r3], #4
 802072a:	459c      	cmp	ip, r3
 802072c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020730:	d8f3      	bhi.n	802071a <__lshift+0x6e>
 8020732:	ebac 0304 	sub.w	r3, ip, r4
 8020736:	3b15      	subs	r3, #21
 8020738:	f023 0303 	bic.w	r3, r3, #3
 802073c:	3304      	adds	r3, #4
 802073e:	f104 0015 	add.w	r0, r4, #21
 8020742:	4584      	cmp	ip, r0
 8020744:	bf38      	it	cc
 8020746:	2304      	movcc	r3, #4
 8020748:	50ca      	str	r2, [r1, r3]
 802074a:	b10a      	cbz	r2, 8020750 <__lshift+0xa4>
 802074c:	f108 0602 	add.w	r6, r8, #2
 8020750:	3e01      	subs	r6, #1
 8020752:	4638      	mov	r0, r7
 8020754:	612e      	str	r6, [r5, #16]
 8020756:	4621      	mov	r1, r4
 8020758:	f7ff fe0d 	bl	8020376 <_Bfree>
 802075c:	4628      	mov	r0, r5
 802075e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020762:	f842 0f04 	str.w	r0, [r2, #4]!
 8020766:	3301      	adds	r3, #1
 8020768:	e7c5      	b.n	80206f6 <__lshift+0x4a>
 802076a:	3904      	subs	r1, #4
 802076c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020770:	f841 2f04 	str.w	r2, [r1, #4]!
 8020774:	459c      	cmp	ip, r3
 8020776:	d8f9      	bhi.n	802076c <__lshift+0xc0>
 8020778:	e7ea      	b.n	8020750 <__lshift+0xa4>
 802077a:	bf00      	nop
 802077c:	08024bb7 	.word	0x08024bb7
 8020780:	08024c20 	.word	0x08024c20

08020784 <__mcmp>:
 8020784:	690a      	ldr	r2, [r1, #16]
 8020786:	4603      	mov	r3, r0
 8020788:	6900      	ldr	r0, [r0, #16]
 802078a:	1a80      	subs	r0, r0, r2
 802078c:	b530      	push	{r4, r5, lr}
 802078e:	d10e      	bne.n	80207ae <__mcmp+0x2a>
 8020790:	3314      	adds	r3, #20
 8020792:	3114      	adds	r1, #20
 8020794:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020798:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802079c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80207a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80207a4:	4295      	cmp	r5, r2
 80207a6:	d003      	beq.n	80207b0 <__mcmp+0x2c>
 80207a8:	d205      	bcs.n	80207b6 <__mcmp+0x32>
 80207aa:	f04f 30ff 	mov.w	r0, #4294967295
 80207ae:	bd30      	pop	{r4, r5, pc}
 80207b0:	42a3      	cmp	r3, r4
 80207b2:	d3f3      	bcc.n	802079c <__mcmp+0x18>
 80207b4:	e7fb      	b.n	80207ae <__mcmp+0x2a>
 80207b6:	2001      	movs	r0, #1
 80207b8:	e7f9      	b.n	80207ae <__mcmp+0x2a>
	...

080207bc <__mdiff>:
 80207bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207c0:	4689      	mov	r9, r1
 80207c2:	4606      	mov	r6, r0
 80207c4:	4611      	mov	r1, r2
 80207c6:	4648      	mov	r0, r9
 80207c8:	4614      	mov	r4, r2
 80207ca:	f7ff ffdb 	bl	8020784 <__mcmp>
 80207ce:	1e05      	subs	r5, r0, #0
 80207d0:	d112      	bne.n	80207f8 <__mdiff+0x3c>
 80207d2:	4629      	mov	r1, r5
 80207d4:	4630      	mov	r0, r6
 80207d6:	f7ff fda9 	bl	802032c <_Balloc>
 80207da:	4602      	mov	r2, r0
 80207dc:	b928      	cbnz	r0, 80207ea <__mdiff+0x2e>
 80207de:	4b3f      	ldr	r3, [pc, #252]	@ (80208dc <__mdiff+0x120>)
 80207e0:	f240 2137 	movw	r1, #567	@ 0x237
 80207e4:	483e      	ldr	r0, [pc, #248]	@ (80208e0 <__mdiff+0x124>)
 80207e6:	f000 fb21 	bl	8020e2c <__assert_func>
 80207ea:	2301      	movs	r3, #1
 80207ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80207f0:	4610      	mov	r0, r2
 80207f2:	b003      	add	sp, #12
 80207f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207f8:	bfbc      	itt	lt
 80207fa:	464b      	movlt	r3, r9
 80207fc:	46a1      	movlt	r9, r4
 80207fe:	4630      	mov	r0, r6
 8020800:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020804:	bfba      	itte	lt
 8020806:	461c      	movlt	r4, r3
 8020808:	2501      	movlt	r5, #1
 802080a:	2500      	movge	r5, #0
 802080c:	f7ff fd8e 	bl	802032c <_Balloc>
 8020810:	4602      	mov	r2, r0
 8020812:	b918      	cbnz	r0, 802081c <__mdiff+0x60>
 8020814:	4b31      	ldr	r3, [pc, #196]	@ (80208dc <__mdiff+0x120>)
 8020816:	f240 2145 	movw	r1, #581	@ 0x245
 802081a:	e7e3      	b.n	80207e4 <__mdiff+0x28>
 802081c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8020820:	6926      	ldr	r6, [r4, #16]
 8020822:	60c5      	str	r5, [r0, #12]
 8020824:	f109 0310 	add.w	r3, r9, #16
 8020828:	f109 0514 	add.w	r5, r9, #20
 802082c:	f104 0e14 	add.w	lr, r4, #20
 8020830:	f100 0b14 	add.w	fp, r0, #20
 8020834:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8020838:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802083c:	9301      	str	r3, [sp, #4]
 802083e:	46d9      	mov	r9, fp
 8020840:	f04f 0c00 	mov.w	ip, #0
 8020844:	9b01      	ldr	r3, [sp, #4]
 8020846:	f85e 0b04 	ldr.w	r0, [lr], #4
 802084a:	f853 af04 	ldr.w	sl, [r3, #4]!
 802084e:	9301      	str	r3, [sp, #4]
 8020850:	fa1f f38a 	uxth.w	r3, sl
 8020854:	4619      	mov	r1, r3
 8020856:	b283      	uxth	r3, r0
 8020858:	1acb      	subs	r3, r1, r3
 802085a:	0c00      	lsrs	r0, r0, #16
 802085c:	4463      	add	r3, ip
 802085e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8020862:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8020866:	b29b      	uxth	r3, r3
 8020868:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802086c:	4576      	cmp	r6, lr
 802086e:	f849 3b04 	str.w	r3, [r9], #4
 8020872:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020876:	d8e5      	bhi.n	8020844 <__mdiff+0x88>
 8020878:	1b33      	subs	r3, r6, r4
 802087a:	3b15      	subs	r3, #21
 802087c:	f023 0303 	bic.w	r3, r3, #3
 8020880:	3415      	adds	r4, #21
 8020882:	3304      	adds	r3, #4
 8020884:	42a6      	cmp	r6, r4
 8020886:	bf38      	it	cc
 8020888:	2304      	movcc	r3, #4
 802088a:	441d      	add	r5, r3
 802088c:	445b      	add	r3, fp
 802088e:	461e      	mov	r6, r3
 8020890:	462c      	mov	r4, r5
 8020892:	4544      	cmp	r4, r8
 8020894:	d30e      	bcc.n	80208b4 <__mdiff+0xf8>
 8020896:	f108 0103 	add.w	r1, r8, #3
 802089a:	1b49      	subs	r1, r1, r5
 802089c:	f021 0103 	bic.w	r1, r1, #3
 80208a0:	3d03      	subs	r5, #3
 80208a2:	45a8      	cmp	r8, r5
 80208a4:	bf38      	it	cc
 80208a6:	2100      	movcc	r1, #0
 80208a8:	440b      	add	r3, r1
 80208aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80208ae:	b191      	cbz	r1, 80208d6 <__mdiff+0x11a>
 80208b0:	6117      	str	r7, [r2, #16]
 80208b2:	e79d      	b.n	80207f0 <__mdiff+0x34>
 80208b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80208b8:	46e6      	mov	lr, ip
 80208ba:	0c08      	lsrs	r0, r1, #16
 80208bc:	fa1c fc81 	uxtah	ip, ip, r1
 80208c0:	4471      	add	r1, lr
 80208c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80208c6:	b289      	uxth	r1, r1
 80208c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80208cc:	f846 1b04 	str.w	r1, [r6], #4
 80208d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80208d4:	e7dd      	b.n	8020892 <__mdiff+0xd6>
 80208d6:	3f01      	subs	r7, #1
 80208d8:	e7e7      	b.n	80208aa <__mdiff+0xee>
 80208da:	bf00      	nop
 80208dc:	08024bb7 	.word	0x08024bb7
 80208e0:	08024c20 	.word	0x08024c20

080208e4 <__d2b>:
 80208e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80208e8:	460f      	mov	r7, r1
 80208ea:	2101      	movs	r1, #1
 80208ec:	ec59 8b10 	vmov	r8, r9, d0
 80208f0:	4616      	mov	r6, r2
 80208f2:	f7ff fd1b 	bl	802032c <_Balloc>
 80208f6:	4604      	mov	r4, r0
 80208f8:	b930      	cbnz	r0, 8020908 <__d2b+0x24>
 80208fa:	4602      	mov	r2, r0
 80208fc:	4b23      	ldr	r3, [pc, #140]	@ (802098c <__d2b+0xa8>)
 80208fe:	4824      	ldr	r0, [pc, #144]	@ (8020990 <__d2b+0xac>)
 8020900:	f240 310f 	movw	r1, #783	@ 0x30f
 8020904:	f000 fa92 	bl	8020e2c <__assert_func>
 8020908:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802090c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020910:	b10d      	cbz	r5, 8020916 <__d2b+0x32>
 8020912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020916:	9301      	str	r3, [sp, #4]
 8020918:	f1b8 0300 	subs.w	r3, r8, #0
 802091c:	d023      	beq.n	8020966 <__d2b+0x82>
 802091e:	4668      	mov	r0, sp
 8020920:	9300      	str	r3, [sp, #0]
 8020922:	f7ff fd96 	bl	8020452 <__lo0bits>
 8020926:	e9dd 1200 	ldrd	r1, r2, [sp]
 802092a:	b1d0      	cbz	r0, 8020962 <__d2b+0x7e>
 802092c:	f1c0 0320 	rsb	r3, r0, #32
 8020930:	fa02 f303 	lsl.w	r3, r2, r3
 8020934:	430b      	orrs	r3, r1
 8020936:	40c2      	lsrs	r2, r0
 8020938:	6163      	str	r3, [r4, #20]
 802093a:	9201      	str	r2, [sp, #4]
 802093c:	9b01      	ldr	r3, [sp, #4]
 802093e:	61a3      	str	r3, [r4, #24]
 8020940:	2b00      	cmp	r3, #0
 8020942:	bf0c      	ite	eq
 8020944:	2201      	moveq	r2, #1
 8020946:	2202      	movne	r2, #2
 8020948:	6122      	str	r2, [r4, #16]
 802094a:	b1a5      	cbz	r5, 8020976 <__d2b+0x92>
 802094c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8020950:	4405      	add	r5, r0
 8020952:	603d      	str	r5, [r7, #0]
 8020954:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8020958:	6030      	str	r0, [r6, #0]
 802095a:	4620      	mov	r0, r4
 802095c:	b003      	add	sp, #12
 802095e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020962:	6161      	str	r1, [r4, #20]
 8020964:	e7ea      	b.n	802093c <__d2b+0x58>
 8020966:	a801      	add	r0, sp, #4
 8020968:	f7ff fd73 	bl	8020452 <__lo0bits>
 802096c:	9b01      	ldr	r3, [sp, #4]
 802096e:	6163      	str	r3, [r4, #20]
 8020970:	3020      	adds	r0, #32
 8020972:	2201      	movs	r2, #1
 8020974:	e7e8      	b.n	8020948 <__d2b+0x64>
 8020976:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802097a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802097e:	6038      	str	r0, [r7, #0]
 8020980:	6918      	ldr	r0, [r3, #16]
 8020982:	f7ff fd47 	bl	8020414 <__hi0bits>
 8020986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802098a:	e7e5      	b.n	8020958 <__d2b+0x74>
 802098c:	08024bb7 	.word	0x08024bb7
 8020990:	08024c20 	.word	0x08024c20

08020994 <_realloc_r>:
 8020994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020998:	4682      	mov	sl, r0
 802099a:	4693      	mov	fp, r2
 802099c:	460c      	mov	r4, r1
 802099e:	b929      	cbnz	r1, 80209ac <_realloc_r+0x18>
 80209a0:	4611      	mov	r1, r2
 80209a2:	b003      	add	sp, #12
 80209a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209a8:	f7fd b890 	b.w	801dacc <_malloc_r>
 80209ac:	f7fd fac8 	bl	801df40 <__malloc_lock>
 80209b0:	f10b 080b 	add.w	r8, fp, #11
 80209b4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80209b8:	f1b8 0f16 	cmp.w	r8, #22
 80209bc:	f1a4 0908 	sub.w	r9, r4, #8
 80209c0:	f025 0603 	bic.w	r6, r5, #3
 80209c4:	d908      	bls.n	80209d8 <_realloc_r+0x44>
 80209c6:	f038 0807 	bics.w	r8, r8, #7
 80209ca:	d507      	bpl.n	80209dc <_realloc_r+0x48>
 80209cc:	230c      	movs	r3, #12
 80209ce:	f8ca 3000 	str.w	r3, [sl]
 80209d2:	f04f 0b00 	mov.w	fp, #0
 80209d6:	e032      	b.n	8020a3e <_realloc_r+0xaa>
 80209d8:	f04f 0810 	mov.w	r8, #16
 80209dc:	45c3      	cmp	fp, r8
 80209de:	d8f5      	bhi.n	80209cc <_realloc_r+0x38>
 80209e0:	4546      	cmp	r6, r8
 80209e2:	f280 8174 	bge.w	8020cce <_realloc_r+0x33a>
 80209e6:	4b9e      	ldr	r3, [pc, #632]	@ (8020c60 <_realloc_r+0x2cc>)
 80209e8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80209ec:	eb09 0106 	add.w	r1, r9, r6
 80209f0:	458c      	cmp	ip, r1
 80209f2:	6848      	ldr	r0, [r1, #4]
 80209f4:	d005      	beq.n	8020a02 <_realloc_r+0x6e>
 80209f6:	f020 0201 	bic.w	r2, r0, #1
 80209fa:	440a      	add	r2, r1
 80209fc:	6852      	ldr	r2, [r2, #4]
 80209fe:	07d7      	lsls	r7, r2, #31
 8020a00:	d449      	bmi.n	8020a96 <_realloc_r+0x102>
 8020a02:	f020 0003 	bic.w	r0, r0, #3
 8020a06:	458c      	cmp	ip, r1
 8020a08:	eb06 0700 	add.w	r7, r6, r0
 8020a0c:	d11b      	bne.n	8020a46 <_realloc_r+0xb2>
 8020a0e:	f108 0210 	add.w	r2, r8, #16
 8020a12:	42ba      	cmp	r2, r7
 8020a14:	dc41      	bgt.n	8020a9a <_realloc_r+0x106>
 8020a16:	eb09 0208 	add.w	r2, r9, r8
 8020a1a:	eba7 0708 	sub.w	r7, r7, r8
 8020a1e:	f047 0701 	orr.w	r7, r7, #1
 8020a22:	609a      	str	r2, [r3, #8]
 8020a24:	6057      	str	r7, [r2, #4]
 8020a26:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020a2a:	f003 0301 	and.w	r3, r3, #1
 8020a2e:	ea43 0308 	orr.w	r3, r3, r8
 8020a32:	f844 3c04 	str.w	r3, [r4, #-4]
 8020a36:	4650      	mov	r0, sl
 8020a38:	f7fd fa88 	bl	801df4c <__malloc_unlock>
 8020a3c:	46a3      	mov	fp, r4
 8020a3e:	4658      	mov	r0, fp
 8020a40:	b003      	add	sp, #12
 8020a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a46:	45b8      	cmp	r8, r7
 8020a48:	dc27      	bgt.n	8020a9a <_realloc_r+0x106>
 8020a4a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8020a4e:	60d3      	str	r3, [r2, #12]
 8020a50:	609a      	str	r2, [r3, #8]
 8020a52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020a56:	eba7 0008 	sub.w	r0, r7, r8
 8020a5a:	280f      	cmp	r0, #15
 8020a5c:	f003 0301 	and.w	r3, r3, #1
 8020a60:	eb09 0207 	add.w	r2, r9, r7
 8020a64:	f240 8135 	bls.w	8020cd2 <_realloc_r+0x33e>
 8020a68:	eb09 0108 	add.w	r1, r9, r8
 8020a6c:	ea48 0303 	orr.w	r3, r8, r3
 8020a70:	f040 0001 	orr.w	r0, r0, #1
 8020a74:	f8c9 3004 	str.w	r3, [r9, #4]
 8020a78:	6048      	str	r0, [r1, #4]
 8020a7a:	6853      	ldr	r3, [r2, #4]
 8020a7c:	f043 0301 	orr.w	r3, r3, #1
 8020a80:	6053      	str	r3, [r2, #4]
 8020a82:	3108      	adds	r1, #8
 8020a84:	4650      	mov	r0, sl
 8020a86:	f7fc ff61 	bl	801d94c <_free_r>
 8020a8a:	4650      	mov	r0, sl
 8020a8c:	f7fd fa5e 	bl	801df4c <__malloc_unlock>
 8020a90:	f109 0b08 	add.w	fp, r9, #8
 8020a94:	e7d3      	b.n	8020a3e <_realloc_r+0xaa>
 8020a96:	2000      	movs	r0, #0
 8020a98:	4601      	mov	r1, r0
 8020a9a:	07ea      	lsls	r2, r5, #31
 8020a9c:	f100 80c7 	bmi.w	8020c2e <_realloc_r+0x29a>
 8020aa0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8020aa4:	eba9 0505 	sub.w	r5, r9, r5
 8020aa8:	686a      	ldr	r2, [r5, #4]
 8020aaa:	f022 0203 	bic.w	r2, r2, #3
 8020aae:	4432      	add	r2, r6
 8020ab0:	9201      	str	r2, [sp, #4]
 8020ab2:	2900      	cmp	r1, #0
 8020ab4:	f000 8086 	beq.w	8020bc4 <_realloc_r+0x230>
 8020ab8:	458c      	cmp	ip, r1
 8020aba:	eb00 0702 	add.w	r7, r0, r2
 8020abe:	d149      	bne.n	8020b54 <_realloc_r+0x1c0>
 8020ac0:	f108 0210 	add.w	r2, r8, #16
 8020ac4:	42ba      	cmp	r2, r7
 8020ac6:	dc7d      	bgt.n	8020bc4 <_realloc_r+0x230>
 8020ac8:	46ab      	mov	fp, r5
 8020aca:	68ea      	ldr	r2, [r5, #12]
 8020acc:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8020ad0:	60ca      	str	r2, [r1, #12]
 8020ad2:	6091      	str	r1, [r2, #8]
 8020ad4:	1f32      	subs	r2, r6, #4
 8020ad6:	2a24      	cmp	r2, #36	@ 0x24
 8020ad8:	d836      	bhi.n	8020b48 <_realloc_r+0x1b4>
 8020ada:	2a13      	cmp	r2, #19
 8020adc:	d932      	bls.n	8020b44 <_realloc_r+0x1b0>
 8020ade:	6821      	ldr	r1, [r4, #0]
 8020ae0:	60a9      	str	r1, [r5, #8]
 8020ae2:	6861      	ldr	r1, [r4, #4]
 8020ae4:	60e9      	str	r1, [r5, #12]
 8020ae6:	2a1b      	cmp	r2, #27
 8020ae8:	d81a      	bhi.n	8020b20 <_realloc_r+0x18c>
 8020aea:	3408      	adds	r4, #8
 8020aec:	f105 0210 	add.w	r2, r5, #16
 8020af0:	6821      	ldr	r1, [r4, #0]
 8020af2:	6011      	str	r1, [r2, #0]
 8020af4:	6861      	ldr	r1, [r4, #4]
 8020af6:	6051      	str	r1, [r2, #4]
 8020af8:	68a1      	ldr	r1, [r4, #8]
 8020afa:	6091      	str	r1, [r2, #8]
 8020afc:	eb05 0208 	add.w	r2, r5, r8
 8020b00:	eba7 0708 	sub.w	r7, r7, r8
 8020b04:	f047 0701 	orr.w	r7, r7, #1
 8020b08:	609a      	str	r2, [r3, #8]
 8020b0a:	6057      	str	r7, [r2, #4]
 8020b0c:	686b      	ldr	r3, [r5, #4]
 8020b0e:	f003 0301 	and.w	r3, r3, #1
 8020b12:	ea43 0308 	orr.w	r3, r3, r8
 8020b16:	606b      	str	r3, [r5, #4]
 8020b18:	4650      	mov	r0, sl
 8020b1a:	f7fd fa17 	bl	801df4c <__malloc_unlock>
 8020b1e:	e78e      	b.n	8020a3e <_realloc_r+0xaa>
 8020b20:	68a1      	ldr	r1, [r4, #8]
 8020b22:	6129      	str	r1, [r5, #16]
 8020b24:	68e1      	ldr	r1, [r4, #12]
 8020b26:	6169      	str	r1, [r5, #20]
 8020b28:	2a24      	cmp	r2, #36	@ 0x24
 8020b2a:	bf01      	itttt	eq
 8020b2c:	6922      	ldreq	r2, [r4, #16]
 8020b2e:	61aa      	streq	r2, [r5, #24]
 8020b30:	6961      	ldreq	r1, [r4, #20]
 8020b32:	61e9      	streq	r1, [r5, #28]
 8020b34:	bf19      	ittee	ne
 8020b36:	3410      	addne	r4, #16
 8020b38:	f105 0218 	addne.w	r2, r5, #24
 8020b3c:	f105 0220 	addeq.w	r2, r5, #32
 8020b40:	3418      	addeq	r4, #24
 8020b42:	e7d5      	b.n	8020af0 <_realloc_r+0x15c>
 8020b44:	465a      	mov	r2, fp
 8020b46:	e7d3      	b.n	8020af0 <_realloc_r+0x15c>
 8020b48:	4621      	mov	r1, r4
 8020b4a:	4658      	mov	r0, fp
 8020b4c:	f000 f954 	bl	8020df8 <memmove>
 8020b50:	4b43      	ldr	r3, [pc, #268]	@ (8020c60 <_realloc_r+0x2cc>)
 8020b52:	e7d3      	b.n	8020afc <_realloc_r+0x168>
 8020b54:	45b8      	cmp	r8, r7
 8020b56:	dc35      	bgt.n	8020bc4 <_realloc_r+0x230>
 8020b58:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8020b5c:	4628      	mov	r0, r5
 8020b5e:	60d3      	str	r3, [r2, #12]
 8020b60:	609a      	str	r2, [r3, #8]
 8020b62:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8020b66:	68eb      	ldr	r3, [r5, #12]
 8020b68:	60d3      	str	r3, [r2, #12]
 8020b6a:	609a      	str	r2, [r3, #8]
 8020b6c:	1f32      	subs	r2, r6, #4
 8020b6e:	2a24      	cmp	r2, #36	@ 0x24
 8020b70:	d824      	bhi.n	8020bbc <_realloc_r+0x228>
 8020b72:	2a13      	cmp	r2, #19
 8020b74:	d908      	bls.n	8020b88 <_realloc_r+0x1f4>
 8020b76:	6823      	ldr	r3, [r4, #0]
 8020b78:	60ab      	str	r3, [r5, #8]
 8020b7a:	6863      	ldr	r3, [r4, #4]
 8020b7c:	60eb      	str	r3, [r5, #12]
 8020b7e:	2a1b      	cmp	r2, #27
 8020b80:	d80a      	bhi.n	8020b98 <_realloc_r+0x204>
 8020b82:	3408      	adds	r4, #8
 8020b84:	f105 0010 	add.w	r0, r5, #16
 8020b88:	6823      	ldr	r3, [r4, #0]
 8020b8a:	6003      	str	r3, [r0, #0]
 8020b8c:	6863      	ldr	r3, [r4, #4]
 8020b8e:	6043      	str	r3, [r0, #4]
 8020b90:	68a3      	ldr	r3, [r4, #8]
 8020b92:	6083      	str	r3, [r0, #8]
 8020b94:	46a9      	mov	r9, r5
 8020b96:	e75c      	b.n	8020a52 <_realloc_r+0xbe>
 8020b98:	68a3      	ldr	r3, [r4, #8]
 8020b9a:	612b      	str	r3, [r5, #16]
 8020b9c:	68e3      	ldr	r3, [r4, #12]
 8020b9e:	616b      	str	r3, [r5, #20]
 8020ba0:	2a24      	cmp	r2, #36	@ 0x24
 8020ba2:	bf01      	itttt	eq
 8020ba4:	6923      	ldreq	r3, [r4, #16]
 8020ba6:	61ab      	streq	r3, [r5, #24]
 8020ba8:	6963      	ldreq	r3, [r4, #20]
 8020baa:	61eb      	streq	r3, [r5, #28]
 8020bac:	bf19      	ittee	ne
 8020bae:	3410      	addne	r4, #16
 8020bb0:	f105 0018 	addne.w	r0, r5, #24
 8020bb4:	f105 0020 	addeq.w	r0, r5, #32
 8020bb8:	3418      	addeq	r4, #24
 8020bba:	e7e5      	b.n	8020b88 <_realloc_r+0x1f4>
 8020bbc:	4621      	mov	r1, r4
 8020bbe:	f000 f91b 	bl	8020df8 <memmove>
 8020bc2:	e7e7      	b.n	8020b94 <_realloc_r+0x200>
 8020bc4:	9b01      	ldr	r3, [sp, #4]
 8020bc6:	4598      	cmp	r8, r3
 8020bc8:	dc31      	bgt.n	8020c2e <_realloc_r+0x29a>
 8020bca:	4628      	mov	r0, r5
 8020bcc:	68eb      	ldr	r3, [r5, #12]
 8020bce:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8020bd2:	60d3      	str	r3, [r2, #12]
 8020bd4:	609a      	str	r2, [r3, #8]
 8020bd6:	1f32      	subs	r2, r6, #4
 8020bd8:	2a24      	cmp	r2, #36	@ 0x24
 8020bda:	d824      	bhi.n	8020c26 <_realloc_r+0x292>
 8020bdc:	2a13      	cmp	r2, #19
 8020bde:	d908      	bls.n	8020bf2 <_realloc_r+0x25e>
 8020be0:	6823      	ldr	r3, [r4, #0]
 8020be2:	60ab      	str	r3, [r5, #8]
 8020be4:	6863      	ldr	r3, [r4, #4]
 8020be6:	60eb      	str	r3, [r5, #12]
 8020be8:	2a1b      	cmp	r2, #27
 8020bea:	d80a      	bhi.n	8020c02 <_realloc_r+0x26e>
 8020bec:	3408      	adds	r4, #8
 8020bee:	f105 0010 	add.w	r0, r5, #16
 8020bf2:	6823      	ldr	r3, [r4, #0]
 8020bf4:	6003      	str	r3, [r0, #0]
 8020bf6:	6863      	ldr	r3, [r4, #4]
 8020bf8:	6043      	str	r3, [r0, #4]
 8020bfa:	68a3      	ldr	r3, [r4, #8]
 8020bfc:	6083      	str	r3, [r0, #8]
 8020bfe:	9f01      	ldr	r7, [sp, #4]
 8020c00:	e7c8      	b.n	8020b94 <_realloc_r+0x200>
 8020c02:	68a3      	ldr	r3, [r4, #8]
 8020c04:	612b      	str	r3, [r5, #16]
 8020c06:	68e3      	ldr	r3, [r4, #12]
 8020c08:	616b      	str	r3, [r5, #20]
 8020c0a:	2a24      	cmp	r2, #36	@ 0x24
 8020c0c:	bf01      	itttt	eq
 8020c0e:	6923      	ldreq	r3, [r4, #16]
 8020c10:	61ab      	streq	r3, [r5, #24]
 8020c12:	6963      	ldreq	r3, [r4, #20]
 8020c14:	61eb      	streq	r3, [r5, #28]
 8020c16:	bf19      	ittee	ne
 8020c18:	3410      	addne	r4, #16
 8020c1a:	f105 0018 	addne.w	r0, r5, #24
 8020c1e:	f105 0020 	addeq.w	r0, r5, #32
 8020c22:	3418      	addeq	r4, #24
 8020c24:	e7e5      	b.n	8020bf2 <_realloc_r+0x25e>
 8020c26:	4621      	mov	r1, r4
 8020c28:	f000 f8e6 	bl	8020df8 <memmove>
 8020c2c:	e7e7      	b.n	8020bfe <_realloc_r+0x26a>
 8020c2e:	4659      	mov	r1, fp
 8020c30:	4650      	mov	r0, sl
 8020c32:	f7fc ff4b 	bl	801dacc <_malloc_r>
 8020c36:	4683      	mov	fp, r0
 8020c38:	b918      	cbnz	r0, 8020c42 <_realloc_r+0x2ae>
 8020c3a:	4650      	mov	r0, sl
 8020c3c:	f7fd f986 	bl	801df4c <__malloc_unlock>
 8020c40:	e6c7      	b.n	80209d2 <_realloc_r+0x3e>
 8020c42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020c46:	f023 0301 	bic.w	r3, r3, #1
 8020c4a:	444b      	add	r3, r9
 8020c4c:	f1a0 0208 	sub.w	r2, r0, #8
 8020c50:	4293      	cmp	r3, r2
 8020c52:	d107      	bne.n	8020c64 <_realloc_r+0x2d0>
 8020c54:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8020c58:	f027 0703 	bic.w	r7, r7, #3
 8020c5c:	4437      	add	r7, r6
 8020c5e:	e6f8      	b.n	8020a52 <_realloc_r+0xbe>
 8020c60:	20000284 	.word	0x20000284
 8020c64:	1f32      	subs	r2, r6, #4
 8020c66:	2a24      	cmp	r2, #36	@ 0x24
 8020c68:	d82d      	bhi.n	8020cc6 <_realloc_r+0x332>
 8020c6a:	2a13      	cmp	r2, #19
 8020c6c:	d928      	bls.n	8020cc0 <_realloc_r+0x32c>
 8020c6e:	6823      	ldr	r3, [r4, #0]
 8020c70:	6003      	str	r3, [r0, #0]
 8020c72:	6863      	ldr	r3, [r4, #4]
 8020c74:	6043      	str	r3, [r0, #4]
 8020c76:	2a1b      	cmp	r2, #27
 8020c78:	d80e      	bhi.n	8020c98 <_realloc_r+0x304>
 8020c7a:	f104 0208 	add.w	r2, r4, #8
 8020c7e:	f100 0308 	add.w	r3, r0, #8
 8020c82:	6811      	ldr	r1, [r2, #0]
 8020c84:	6019      	str	r1, [r3, #0]
 8020c86:	6851      	ldr	r1, [r2, #4]
 8020c88:	6059      	str	r1, [r3, #4]
 8020c8a:	6892      	ldr	r2, [r2, #8]
 8020c8c:	609a      	str	r2, [r3, #8]
 8020c8e:	4621      	mov	r1, r4
 8020c90:	4650      	mov	r0, sl
 8020c92:	f7fc fe5b 	bl	801d94c <_free_r>
 8020c96:	e73f      	b.n	8020b18 <_realloc_r+0x184>
 8020c98:	68a3      	ldr	r3, [r4, #8]
 8020c9a:	6083      	str	r3, [r0, #8]
 8020c9c:	68e3      	ldr	r3, [r4, #12]
 8020c9e:	60c3      	str	r3, [r0, #12]
 8020ca0:	2a24      	cmp	r2, #36	@ 0x24
 8020ca2:	bf01      	itttt	eq
 8020ca4:	6923      	ldreq	r3, [r4, #16]
 8020ca6:	6103      	streq	r3, [r0, #16]
 8020ca8:	6961      	ldreq	r1, [r4, #20]
 8020caa:	6141      	streq	r1, [r0, #20]
 8020cac:	bf19      	ittee	ne
 8020cae:	f104 0210 	addne.w	r2, r4, #16
 8020cb2:	f100 0310 	addne.w	r3, r0, #16
 8020cb6:	f104 0218 	addeq.w	r2, r4, #24
 8020cba:	f100 0318 	addeq.w	r3, r0, #24
 8020cbe:	e7e0      	b.n	8020c82 <_realloc_r+0x2ee>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	4622      	mov	r2, r4
 8020cc4:	e7dd      	b.n	8020c82 <_realloc_r+0x2ee>
 8020cc6:	4621      	mov	r1, r4
 8020cc8:	f000 f896 	bl	8020df8 <memmove>
 8020ccc:	e7df      	b.n	8020c8e <_realloc_r+0x2fa>
 8020cce:	4637      	mov	r7, r6
 8020cd0:	e6bf      	b.n	8020a52 <_realloc_r+0xbe>
 8020cd2:	431f      	orrs	r7, r3
 8020cd4:	f8c9 7004 	str.w	r7, [r9, #4]
 8020cd8:	6853      	ldr	r3, [r2, #4]
 8020cda:	f043 0301 	orr.w	r3, r3, #1
 8020cde:	6053      	str	r3, [r2, #4]
 8020ce0:	e6d3      	b.n	8020a8a <_realloc_r+0xf6>
 8020ce2:	bf00      	nop

08020ce4 <__ascii_wctomb>:
 8020ce4:	4603      	mov	r3, r0
 8020ce6:	4608      	mov	r0, r1
 8020ce8:	b141      	cbz	r1, 8020cfc <__ascii_wctomb+0x18>
 8020cea:	2aff      	cmp	r2, #255	@ 0xff
 8020cec:	d904      	bls.n	8020cf8 <__ascii_wctomb+0x14>
 8020cee:	228a      	movs	r2, #138	@ 0x8a
 8020cf0:	601a      	str	r2, [r3, #0]
 8020cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8020cf6:	4770      	bx	lr
 8020cf8:	700a      	strb	r2, [r1, #0]
 8020cfa:	2001      	movs	r0, #1
 8020cfc:	4770      	bx	lr

08020cfe <__ssprint_r>:
 8020cfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d02:	6893      	ldr	r3, [r2, #8]
 8020d04:	f8d2 b000 	ldr.w	fp, [r2]
 8020d08:	9001      	str	r0, [sp, #4]
 8020d0a:	460c      	mov	r4, r1
 8020d0c:	4617      	mov	r7, r2
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d157      	bne.n	8020dc2 <__ssprint_r+0xc4>
 8020d12:	2000      	movs	r0, #0
 8020d14:	2300      	movs	r3, #0
 8020d16:	607b      	str	r3, [r7, #4]
 8020d18:	b003      	add	sp, #12
 8020d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d1e:	e9db a800 	ldrd	sl, r8, [fp]
 8020d22:	f10b 0b08 	add.w	fp, fp, #8
 8020d26:	68a6      	ldr	r6, [r4, #8]
 8020d28:	6820      	ldr	r0, [r4, #0]
 8020d2a:	f1b8 0f00 	cmp.w	r8, #0
 8020d2e:	d0f6      	beq.n	8020d1e <__ssprint_r+0x20>
 8020d30:	45b0      	cmp	r8, r6
 8020d32:	d32e      	bcc.n	8020d92 <__ssprint_r+0x94>
 8020d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020d3c:	d029      	beq.n	8020d92 <__ssprint_r+0x94>
 8020d3e:	6921      	ldr	r1, [r4, #16]
 8020d40:	6965      	ldr	r5, [r4, #20]
 8020d42:	eba0 0901 	sub.w	r9, r0, r1
 8020d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020d4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020d4e:	f109 0001 	add.w	r0, r9, #1
 8020d52:	106d      	asrs	r5, r5, #1
 8020d54:	4440      	add	r0, r8
 8020d56:	4285      	cmp	r5, r0
 8020d58:	bf38      	it	cc
 8020d5a:	4605      	movcc	r5, r0
 8020d5c:	0553      	lsls	r3, r2, #21
 8020d5e:	d534      	bpl.n	8020dca <__ssprint_r+0xcc>
 8020d60:	9801      	ldr	r0, [sp, #4]
 8020d62:	4629      	mov	r1, r5
 8020d64:	f7fc feb2 	bl	801dacc <_malloc_r>
 8020d68:	4606      	mov	r6, r0
 8020d6a:	2800      	cmp	r0, #0
 8020d6c:	d038      	beq.n	8020de0 <__ssprint_r+0xe2>
 8020d6e:	464a      	mov	r2, r9
 8020d70:	6921      	ldr	r1, [r4, #16]
 8020d72:	f7fc fd77 	bl	801d864 <memcpy>
 8020d76:	89a2      	ldrh	r2, [r4, #12]
 8020d78:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8020d7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8020d80:	81a2      	strh	r2, [r4, #12]
 8020d82:	6126      	str	r6, [r4, #16]
 8020d84:	6165      	str	r5, [r4, #20]
 8020d86:	444e      	add	r6, r9
 8020d88:	eba5 0509 	sub.w	r5, r5, r9
 8020d8c:	6026      	str	r6, [r4, #0]
 8020d8e:	60a5      	str	r5, [r4, #8]
 8020d90:	4646      	mov	r6, r8
 8020d92:	4546      	cmp	r6, r8
 8020d94:	bf28      	it	cs
 8020d96:	4646      	movcs	r6, r8
 8020d98:	4632      	mov	r2, r6
 8020d9a:	4651      	mov	r1, sl
 8020d9c:	6820      	ldr	r0, [r4, #0]
 8020d9e:	f000 f82b 	bl	8020df8 <memmove>
 8020da2:	68a2      	ldr	r2, [r4, #8]
 8020da4:	1b92      	subs	r2, r2, r6
 8020da6:	60a2      	str	r2, [r4, #8]
 8020da8:	6822      	ldr	r2, [r4, #0]
 8020daa:	4432      	add	r2, r6
 8020dac:	6022      	str	r2, [r4, #0]
 8020dae:	68ba      	ldr	r2, [r7, #8]
 8020db0:	eba2 0308 	sub.w	r3, r2, r8
 8020db4:	44c2      	add	sl, r8
 8020db6:	60bb      	str	r3, [r7, #8]
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d0aa      	beq.n	8020d12 <__ssprint_r+0x14>
 8020dbc:	f04f 0800 	mov.w	r8, #0
 8020dc0:	e7b1      	b.n	8020d26 <__ssprint_r+0x28>
 8020dc2:	f04f 0a00 	mov.w	sl, #0
 8020dc6:	46d0      	mov	r8, sl
 8020dc8:	e7ad      	b.n	8020d26 <__ssprint_r+0x28>
 8020dca:	9801      	ldr	r0, [sp, #4]
 8020dcc:	462a      	mov	r2, r5
 8020dce:	f7ff fde1 	bl	8020994 <_realloc_r>
 8020dd2:	4606      	mov	r6, r0
 8020dd4:	2800      	cmp	r0, #0
 8020dd6:	d1d4      	bne.n	8020d82 <__ssprint_r+0x84>
 8020dd8:	6921      	ldr	r1, [r4, #16]
 8020dda:	9801      	ldr	r0, [sp, #4]
 8020ddc:	f7fc fdb6 	bl	801d94c <_free_r>
 8020de0:	9a01      	ldr	r2, [sp, #4]
 8020de2:	230c      	movs	r3, #12
 8020de4:	6013      	str	r3, [r2, #0]
 8020de6:	89a3      	ldrh	r3, [r4, #12]
 8020de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020dec:	81a3      	strh	r3, [r4, #12]
 8020dee:	2300      	movs	r3, #0
 8020df0:	60bb      	str	r3, [r7, #8]
 8020df2:	f04f 30ff 	mov.w	r0, #4294967295
 8020df6:	e78d      	b.n	8020d14 <__ssprint_r+0x16>

08020df8 <memmove>:
 8020df8:	4288      	cmp	r0, r1
 8020dfa:	b510      	push	{r4, lr}
 8020dfc:	eb01 0402 	add.w	r4, r1, r2
 8020e00:	d902      	bls.n	8020e08 <memmove+0x10>
 8020e02:	4284      	cmp	r4, r0
 8020e04:	4623      	mov	r3, r4
 8020e06:	d807      	bhi.n	8020e18 <memmove+0x20>
 8020e08:	1e43      	subs	r3, r0, #1
 8020e0a:	42a1      	cmp	r1, r4
 8020e0c:	d008      	beq.n	8020e20 <memmove+0x28>
 8020e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020e16:	e7f8      	b.n	8020e0a <memmove+0x12>
 8020e18:	4402      	add	r2, r0
 8020e1a:	4601      	mov	r1, r0
 8020e1c:	428a      	cmp	r2, r1
 8020e1e:	d100      	bne.n	8020e22 <memmove+0x2a>
 8020e20:	bd10      	pop	{r4, pc}
 8020e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020e2a:	e7f7      	b.n	8020e1c <memmove+0x24>

08020e2c <__assert_func>:
 8020e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020e2e:	4614      	mov	r4, r2
 8020e30:	461a      	mov	r2, r3
 8020e32:	4b09      	ldr	r3, [pc, #36]	@ (8020e58 <__assert_func+0x2c>)
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	4605      	mov	r5, r0
 8020e38:	68d8      	ldr	r0, [r3, #12]
 8020e3a:	b954      	cbnz	r4, 8020e52 <__assert_func+0x26>
 8020e3c:	4b07      	ldr	r3, [pc, #28]	@ (8020e5c <__assert_func+0x30>)
 8020e3e:	461c      	mov	r4, r3
 8020e40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020e44:	9100      	str	r1, [sp, #0]
 8020e46:	462b      	mov	r3, r5
 8020e48:	4905      	ldr	r1, [pc, #20]	@ (8020e60 <__assert_func+0x34>)
 8020e4a:	f000 f843 	bl	8020ed4 <fiprintf>
 8020e4e:	f000 ff59 	bl	8021d04 <abort>
 8020e52:	4b04      	ldr	r3, [pc, #16]	@ (8020e64 <__assert_func+0x38>)
 8020e54:	e7f4      	b.n	8020e40 <__assert_func+0x14>
 8020e56:	bf00      	nop
 8020e58:	20000150 	.word	0x20000150
 8020e5c:	08024eb4 	.word	0x08024eb4
 8020e60:	08024e86 	.word	0x08024e86
 8020e64:	08024e79 	.word	0x08024e79

08020e68 <_calloc_r>:
 8020e68:	b538      	push	{r3, r4, r5, lr}
 8020e6a:	fba1 1502 	umull	r1, r5, r1, r2
 8020e6e:	b935      	cbnz	r5, 8020e7e <_calloc_r+0x16>
 8020e70:	f7fc fe2c 	bl	801dacc <_malloc_r>
 8020e74:	4604      	mov	r4, r0
 8020e76:	b938      	cbnz	r0, 8020e88 <_calloc_r+0x20>
 8020e78:	2400      	movs	r4, #0
 8020e7a:	4620      	mov	r0, r4
 8020e7c:	bd38      	pop	{r3, r4, r5, pc}
 8020e7e:	f7fc fcc3 	bl	801d808 <__errno>
 8020e82:	230c      	movs	r3, #12
 8020e84:	6003      	str	r3, [r0, #0]
 8020e86:	e7f7      	b.n	8020e78 <_calloc_r+0x10>
 8020e88:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8020e8c:	f022 0203 	bic.w	r2, r2, #3
 8020e90:	3a04      	subs	r2, #4
 8020e92:	2a24      	cmp	r2, #36	@ 0x24
 8020e94:	d819      	bhi.n	8020eca <_calloc_r+0x62>
 8020e96:	2a13      	cmp	r2, #19
 8020e98:	d915      	bls.n	8020ec6 <_calloc_r+0x5e>
 8020e9a:	2a1b      	cmp	r2, #27
 8020e9c:	e9c0 5500 	strd	r5, r5, [r0]
 8020ea0:	d806      	bhi.n	8020eb0 <_calloc_r+0x48>
 8020ea2:	f100 0308 	add.w	r3, r0, #8
 8020ea6:	2200      	movs	r2, #0
 8020ea8:	e9c3 2200 	strd	r2, r2, [r3]
 8020eac:	609a      	str	r2, [r3, #8]
 8020eae:	e7e4      	b.n	8020e7a <_calloc_r+0x12>
 8020eb0:	2a24      	cmp	r2, #36	@ 0x24
 8020eb2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8020eb6:	bf11      	iteee	ne
 8020eb8:	f100 0310 	addne.w	r3, r0, #16
 8020ebc:	6105      	streq	r5, [r0, #16]
 8020ebe:	f100 0318 	addeq.w	r3, r0, #24
 8020ec2:	6145      	streq	r5, [r0, #20]
 8020ec4:	e7ef      	b.n	8020ea6 <_calloc_r+0x3e>
 8020ec6:	4603      	mov	r3, r0
 8020ec8:	e7ed      	b.n	8020ea6 <_calloc_r+0x3e>
 8020eca:	4629      	mov	r1, r5
 8020ecc:	f7fc fc21 	bl	801d712 <memset>
 8020ed0:	e7d3      	b.n	8020e7a <_calloc_r+0x12>
	...

08020ed4 <fiprintf>:
 8020ed4:	b40e      	push	{r1, r2, r3}
 8020ed6:	b503      	push	{r0, r1, lr}
 8020ed8:	4601      	mov	r1, r0
 8020eda:	ab03      	add	r3, sp, #12
 8020edc:	4805      	ldr	r0, [pc, #20]	@ (8020ef4 <fiprintf+0x20>)
 8020ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ee2:	6800      	ldr	r0, [r0, #0]
 8020ee4:	9301      	str	r3, [sp, #4]
 8020ee6:	f000 f839 	bl	8020f5c <_vfiprintf_r>
 8020eea:	b002      	add	sp, #8
 8020eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ef0:	b003      	add	sp, #12
 8020ef2:	4770      	bx	lr
 8020ef4:	20000150 	.word	0x20000150

08020ef8 <__sprint_r>:
 8020ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020efc:	6893      	ldr	r3, [r2, #8]
 8020efe:	4680      	mov	r8, r0
 8020f00:	460e      	mov	r6, r1
 8020f02:	4614      	mov	r4, r2
 8020f04:	b343      	cbz	r3, 8020f58 <__sprint_r+0x60>
 8020f06:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8020f08:	049d      	lsls	r5, r3, #18
 8020f0a:	d522      	bpl.n	8020f52 <__sprint_r+0x5a>
 8020f0c:	6815      	ldr	r5, [r2, #0]
 8020f0e:	68a0      	ldr	r0, [r4, #8]
 8020f10:	3508      	adds	r5, #8
 8020f12:	b928      	cbnz	r0, 8020f20 <__sprint_r+0x28>
 8020f14:	2300      	movs	r3, #0
 8020f16:	60a3      	str	r3, [r4, #8]
 8020f18:	2300      	movs	r3, #0
 8020f1a:	6063      	str	r3, [r4, #4]
 8020f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f20:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8020f24:	f04f 0900 	mov.w	r9, #0
 8020f28:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8020f2c:	45ca      	cmp	sl, r9
 8020f2e:	dc05      	bgt.n	8020f3c <__sprint_r+0x44>
 8020f30:	68a3      	ldr	r3, [r4, #8]
 8020f32:	f027 0703 	bic.w	r7, r7, #3
 8020f36:	1bdb      	subs	r3, r3, r7
 8020f38:	60a3      	str	r3, [r4, #8]
 8020f3a:	e7e8      	b.n	8020f0e <__sprint_r+0x16>
 8020f3c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8020f40:	4632      	mov	r2, r6
 8020f42:	4640      	mov	r0, r8
 8020f44:	f000 feb5 	bl	8021cb2 <_fputwc_r>
 8020f48:	1c43      	adds	r3, r0, #1
 8020f4a:	d0e3      	beq.n	8020f14 <__sprint_r+0x1c>
 8020f4c:	f109 0901 	add.w	r9, r9, #1
 8020f50:	e7ec      	b.n	8020f2c <__sprint_r+0x34>
 8020f52:	f000 fccb 	bl	80218ec <__sfvwrite_r>
 8020f56:	e7dd      	b.n	8020f14 <__sprint_r+0x1c>
 8020f58:	4618      	mov	r0, r3
 8020f5a:	e7dd      	b.n	8020f18 <__sprint_r+0x20>

08020f5c <_vfiprintf_r>:
 8020f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f60:	b0bb      	sub	sp, #236	@ 0xec
 8020f62:	460f      	mov	r7, r1
 8020f64:	4693      	mov	fp, r2
 8020f66:	461c      	mov	r4, r3
 8020f68:	461d      	mov	r5, r3
 8020f6a:	9000      	str	r0, [sp, #0]
 8020f6c:	b118      	cbz	r0, 8020f76 <_vfiprintf_r+0x1a>
 8020f6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8020f70:	b90b      	cbnz	r3, 8020f76 <_vfiprintf_r+0x1a>
 8020f72:	f7fc fb21 	bl	801d5b8 <__sinit>
 8020f76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020f78:	07db      	lsls	r3, r3, #31
 8020f7a:	d405      	bmi.n	8020f88 <_vfiprintf_r+0x2c>
 8020f7c:	89bb      	ldrh	r3, [r7, #12]
 8020f7e:	059e      	lsls	r6, r3, #22
 8020f80:	d402      	bmi.n	8020f88 <_vfiprintf_r+0x2c>
 8020f82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020f84:	f7fc fc6c 	bl	801d860 <__retarget_lock_acquire_recursive>
 8020f88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8020f8c:	0498      	lsls	r0, r3, #18
 8020f8e:	d406      	bmi.n	8020f9e <_vfiprintf_r+0x42>
 8020f90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020f94:	81bb      	strh	r3, [r7, #12]
 8020f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020f98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020f9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8020f9e:	89bb      	ldrh	r3, [r7, #12]
 8020fa0:	0719      	lsls	r1, r3, #28
 8020fa2:	d501      	bpl.n	8020fa8 <_vfiprintf_r+0x4c>
 8020fa4:	693b      	ldr	r3, [r7, #16]
 8020fa6:	b9ab      	cbnz	r3, 8020fd4 <_vfiprintf_r+0x78>
 8020fa8:	9800      	ldr	r0, [sp, #0]
 8020faa:	4639      	mov	r1, r7
 8020fac:	f000 fdea 	bl	8021b84 <__swsetup_r>
 8020fb0:	b180      	cbz	r0, 8020fd4 <_vfiprintf_r+0x78>
 8020fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020fb4:	07da      	lsls	r2, r3, #31
 8020fb6:	d506      	bpl.n	8020fc6 <_vfiprintf_r+0x6a>
 8020fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8020fbc:	9303      	str	r3, [sp, #12]
 8020fbe:	9803      	ldr	r0, [sp, #12]
 8020fc0:	b03b      	add	sp, #236	@ 0xec
 8020fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fc6:	89bb      	ldrh	r3, [r7, #12]
 8020fc8:	059b      	lsls	r3, r3, #22
 8020fca:	d4f5      	bmi.n	8020fb8 <_vfiprintf_r+0x5c>
 8020fcc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020fce:	f7fc fc48 	bl	801d862 <__retarget_lock_release_recursive>
 8020fd2:	e7f1      	b.n	8020fb8 <_vfiprintf_r+0x5c>
 8020fd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8020fd8:	f003 021a 	and.w	r2, r3, #26
 8020fdc:	2a0a      	cmp	r2, #10
 8020fde:	d114      	bne.n	802100a <_vfiprintf_r+0xae>
 8020fe0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8020fe4:	2a00      	cmp	r2, #0
 8020fe6:	db10      	blt.n	802100a <_vfiprintf_r+0xae>
 8020fe8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8020fea:	07d6      	lsls	r6, r2, #31
 8020fec:	d404      	bmi.n	8020ff8 <_vfiprintf_r+0x9c>
 8020fee:	059d      	lsls	r5, r3, #22
 8020ff0:	d402      	bmi.n	8020ff8 <_vfiprintf_r+0x9c>
 8020ff2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020ff4:	f7fc fc35 	bl	801d862 <__retarget_lock_release_recursive>
 8020ff8:	9800      	ldr	r0, [sp, #0]
 8020ffa:	4623      	mov	r3, r4
 8020ffc:	465a      	mov	r2, fp
 8020ffe:	4639      	mov	r1, r7
 8021000:	b03b      	add	sp, #236	@ 0xec
 8021002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021006:	f000 bc31 	b.w	802186c <__sbprintf>
 802100a:	2300      	movs	r3, #0
 802100c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8021010:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021014:	ae11      	add	r6, sp, #68	@ 0x44
 8021016:	960e      	str	r6, [sp, #56]	@ 0x38
 8021018:	9307      	str	r3, [sp, #28]
 802101a:	9309      	str	r3, [sp, #36]	@ 0x24
 802101c:	9303      	str	r3, [sp, #12]
 802101e:	465b      	mov	r3, fp
 8021020:	461c      	mov	r4, r3
 8021022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021026:	b10a      	cbz	r2, 802102c <_vfiprintf_r+0xd0>
 8021028:	2a25      	cmp	r2, #37	@ 0x25
 802102a:	d1f9      	bne.n	8021020 <_vfiprintf_r+0xc4>
 802102c:	ebb4 080b 	subs.w	r8, r4, fp
 8021030:	d00d      	beq.n	802104e <_vfiprintf_r+0xf2>
 8021032:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021034:	4443      	add	r3, r8
 8021036:	9310      	str	r3, [sp, #64]	@ 0x40
 8021038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802103a:	3301      	adds	r3, #1
 802103c:	2b07      	cmp	r3, #7
 802103e:	e9c6 b800 	strd	fp, r8, [r6]
 8021042:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021044:	dc75      	bgt.n	8021132 <_vfiprintf_r+0x1d6>
 8021046:	3608      	adds	r6, #8
 8021048:	9b03      	ldr	r3, [sp, #12]
 802104a:	4443      	add	r3, r8
 802104c:	9303      	str	r3, [sp, #12]
 802104e:	7823      	ldrb	r3, [r4, #0]
 8021050:	2b00      	cmp	r3, #0
 8021052:	f000 83cd 	beq.w	80217f0 <_vfiprintf_r+0x894>
 8021056:	2300      	movs	r3, #0
 8021058:	f04f 32ff 	mov.w	r2, #4294967295
 802105c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021060:	3401      	adds	r4, #1
 8021062:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8021066:	469a      	mov	sl, r3
 8021068:	46a3      	mov	fp, r4
 802106a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802106e:	f1a3 0220 	sub.w	r2, r3, #32
 8021072:	2a5a      	cmp	r2, #90	@ 0x5a
 8021074:	f200 8316 	bhi.w	80216a4 <_vfiprintf_r+0x748>
 8021078:	e8df f012 	tbh	[pc, r2, lsl #1]
 802107c:	0314009a 	.word	0x0314009a
 8021080:	00a20314 	.word	0x00a20314
 8021084:	03140314 	.word	0x03140314
 8021088:	00820314 	.word	0x00820314
 802108c:	03140314 	.word	0x03140314
 8021090:	00af00a5 	.word	0x00af00a5
 8021094:	00ac0314 	.word	0x00ac0314
 8021098:	031400b1 	.word	0x031400b1
 802109c:	00d000cd 	.word	0x00d000cd
 80210a0:	00d000d0 	.word	0x00d000d0
 80210a4:	00d000d0 	.word	0x00d000d0
 80210a8:	00d000d0 	.word	0x00d000d0
 80210ac:	00d000d0 	.word	0x00d000d0
 80210b0:	03140314 	.word	0x03140314
 80210b4:	03140314 	.word	0x03140314
 80210b8:	03140314 	.word	0x03140314
 80210bc:	03140314 	.word	0x03140314
 80210c0:	00f70314 	.word	0x00f70314
 80210c4:	03140104 	.word	0x03140104
 80210c8:	03140314 	.word	0x03140314
 80210cc:	03140314 	.word	0x03140314
 80210d0:	03140314 	.word	0x03140314
 80210d4:	03140314 	.word	0x03140314
 80210d8:	01520314 	.word	0x01520314
 80210dc:	03140314 	.word	0x03140314
 80210e0:	019a0314 	.word	0x019a0314
 80210e4:	027a0314 	.word	0x027a0314
 80210e8:	03140314 	.word	0x03140314
 80210ec:	0314029a 	.word	0x0314029a
 80210f0:	03140314 	.word	0x03140314
 80210f4:	03140314 	.word	0x03140314
 80210f8:	03140314 	.word	0x03140314
 80210fc:	03140314 	.word	0x03140314
 8021100:	00f70314 	.word	0x00f70314
 8021104:	03140106 	.word	0x03140106
 8021108:	03140314 	.word	0x03140314
 802110c:	010600e0 	.word	0x010600e0
 8021110:	031400f1 	.word	0x031400f1
 8021114:	031400eb 	.word	0x031400eb
 8021118:	01540132 	.word	0x01540132
 802111c:	00f10189 	.word	0x00f10189
 8021120:	019a0314 	.word	0x019a0314
 8021124:	027c0098 	.word	0x027c0098
 8021128:	03140314 	.word	0x03140314
 802112c:	03140065 	.word	0x03140065
 8021130:	0098      	.short	0x0098
 8021132:	9800      	ldr	r0, [sp, #0]
 8021134:	aa0e      	add	r2, sp, #56	@ 0x38
 8021136:	4639      	mov	r1, r7
 8021138:	f7ff fede 	bl	8020ef8 <__sprint_r>
 802113c:	2800      	cmp	r0, #0
 802113e:	f040 8336 	bne.w	80217ae <_vfiprintf_r+0x852>
 8021142:	ae11      	add	r6, sp, #68	@ 0x44
 8021144:	e780      	b.n	8021048 <_vfiprintf_r+0xec>
 8021146:	4a99      	ldr	r2, [pc, #612]	@ (80213ac <_vfiprintf_r+0x450>)
 8021148:	9205      	str	r2, [sp, #20]
 802114a:	f01a 0220 	ands.w	r2, sl, #32
 802114e:	f000 8231 	beq.w	80215b4 <_vfiprintf_r+0x658>
 8021152:	3507      	adds	r5, #7
 8021154:	f025 0507 	bic.w	r5, r5, #7
 8021158:	46a8      	mov	r8, r5
 802115a:	686d      	ldr	r5, [r5, #4]
 802115c:	f858 4b08 	ldr.w	r4, [r8], #8
 8021160:	f01a 0f01 	tst.w	sl, #1
 8021164:	d009      	beq.n	802117a <_vfiprintf_r+0x21e>
 8021166:	ea54 0205 	orrs.w	r2, r4, r5
 802116a:	bf1f      	itttt	ne
 802116c:	2230      	movne	r2, #48	@ 0x30
 802116e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8021172:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8021176:	f04a 0a02 	orrne.w	sl, sl, #2
 802117a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802117e:	e112      	b.n	80213a6 <_vfiprintf_r+0x44a>
 8021180:	9800      	ldr	r0, [sp, #0]
 8021182:	f7fe f9e3 	bl	801f54c <_localeconv_r>
 8021186:	6843      	ldr	r3, [r0, #4]
 8021188:	9309      	str	r3, [sp, #36]	@ 0x24
 802118a:	4618      	mov	r0, r3
 802118c:	f7df f820 	bl	80001d0 <strlen>
 8021190:	9007      	str	r0, [sp, #28]
 8021192:	9800      	ldr	r0, [sp, #0]
 8021194:	f7fe f9da 	bl	801f54c <_localeconv_r>
 8021198:	6883      	ldr	r3, [r0, #8]
 802119a:	9306      	str	r3, [sp, #24]
 802119c:	9b07      	ldr	r3, [sp, #28]
 802119e:	b12b      	cbz	r3, 80211ac <_vfiprintf_r+0x250>
 80211a0:	9b06      	ldr	r3, [sp, #24]
 80211a2:	b11b      	cbz	r3, 80211ac <_vfiprintf_r+0x250>
 80211a4:	781b      	ldrb	r3, [r3, #0]
 80211a6:	b10b      	cbz	r3, 80211ac <_vfiprintf_r+0x250>
 80211a8:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 80211ac:	465c      	mov	r4, fp
 80211ae:	e75b      	b.n	8021068 <_vfiprintf_r+0x10c>
 80211b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80211b4:	2b00      	cmp	r3, #0
 80211b6:	d1f9      	bne.n	80211ac <_vfiprintf_r+0x250>
 80211b8:	2320      	movs	r3, #32
 80211ba:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80211be:	e7f5      	b.n	80211ac <_vfiprintf_r+0x250>
 80211c0:	f04a 0a01 	orr.w	sl, sl, #1
 80211c4:	e7f2      	b.n	80211ac <_vfiprintf_r+0x250>
 80211c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80211ca:	9302      	str	r3, [sp, #8]
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	daed      	bge.n	80211ac <_vfiprintf_r+0x250>
 80211d0:	425b      	negs	r3, r3
 80211d2:	9302      	str	r3, [sp, #8]
 80211d4:	f04a 0a04 	orr.w	sl, sl, #4
 80211d8:	e7e8      	b.n	80211ac <_vfiprintf_r+0x250>
 80211da:	232b      	movs	r3, #43	@ 0x2b
 80211dc:	e7ed      	b.n	80211ba <_vfiprintf_r+0x25e>
 80211de:	465a      	mov	r2, fp
 80211e0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80211e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80211e6:	d112      	bne.n	802120e <_vfiprintf_r+0x2b2>
 80211e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80211ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80211f0:	9301      	str	r3, [sp, #4]
 80211f2:	4693      	mov	fp, r2
 80211f4:	e7da      	b.n	80211ac <_vfiprintf_r+0x250>
 80211f6:	9b01      	ldr	r3, [sp, #4]
 80211f8:	fb00 1303 	mla	r3, r0, r3, r1
 80211fc:	9301      	str	r3, [sp, #4]
 80211fe:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021202:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8021206:	2909      	cmp	r1, #9
 8021208:	d9f5      	bls.n	80211f6 <_vfiprintf_r+0x29a>
 802120a:	4693      	mov	fp, r2
 802120c:	e72f      	b.n	802106e <_vfiprintf_r+0x112>
 802120e:	2100      	movs	r1, #0
 8021210:	9101      	str	r1, [sp, #4]
 8021212:	200a      	movs	r0, #10
 8021214:	e7f5      	b.n	8021202 <_vfiprintf_r+0x2a6>
 8021216:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802121a:	e7c7      	b.n	80211ac <_vfiprintf_r+0x250>
 802121c:	2100      	movs	r1, #0
 802121e:	465a      	mov	r2, fp
 8021220:	9102      	str	r1, [sp, #8]
 8021222:	200a      	movs	r0, #10
 8021224:	9902      	ldr	r1, [sp, #8]
 8021226:	3b30      	subs	r3, #48	@ 0x30
 8021228:	fb00 3301 	mla	r3, r0, r1, r3
 802122c:	9302      	str	r3, [sp, #8]
 802122e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021232:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8021236:	2909      	cmp	r1, #9
 8021238:	d9f4      	bls.n	8021224 <_vfiprintf_r+0x2c8>
 802123a:	e7e6      	b.n	802120a <_vfiprintf_r+0x2ae>
 802123c:	f89b 3000 	ldrb.w	r3, [fp]
 8021240:	2b68      	cmp	r3, #104	@ 0x68
 8021242:	bf06      	itte	eq
 8021244:	f10b 0b01 	addeq.w	fp, fp, #1
 8021248:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802124c:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8021250:	e7ac      	b.n	80211ac <_vfiprintf_r+0x250>
 8021252:	f89b 3000 	ldrb.w	r3, [fp]
 8021256:	2b6c      	cmp	r3, #108	@ 0x6c
 8021258:	d104      	bne.n	8021264 <_vfiprintf_r+0x308>
 802125a:	f10b 0b01 	add.w	fp, fp, #1
 802125e:	f04a 0a20 	orr.w	sl, sl, #32
 8021262:	e7a3      	b.n	80211ac <_vfiprintf_r+0x250>
 8021264:	f04a 0a10 	orr.w	sl, sl, #16
 8021268:	e7a0      	b.n	80211ac <_vfiprintf_r+0x250>
 802126a:	46a8      	mov	r8, r5
 802126c:	2400      	movs	r4, #0
 802126e:	f858 3b04 	ldr.w	r3, [r8], #4
 8021272:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8021276:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802127a:	2301      	movs	r3, #1
 802127c:	9301      	str	r3, [sp, #4]
 802127e:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8021282:	e0ab      	b.n	80213dc <_vfiprintf_r+0x480>
 8021284:	f04a 0a10 	orr.w	sl, sl, #16
 8021288:	f01a 0f20 	tst.w	sl, #32
 802128c:	d011      	beq.n	80212b2 <_vfiprintf_r+0x356>
 802128e:	3507      	adds	r5, #7
 8021290:	f025 0507 	bic.w	r5, r5, #7
 8021294:	46a8      	mov	r8, r5
 8021296:	686d      	ldr	r5, [r5, #4]
 8021298:	f858 4b08 	ldr.w	r4, [r8], #8
 802129c:	2d00      	cmp	r5, #0
 802129e:	da06      	bge.n	80212ae <_vfiprintf_r+0x352>
 80212a0:	4264      	negs	r4, r4
 80212a2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80212a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80212aa:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80212ae:	2301      	movs	r3, #1
 80212b0:	e048      	b.n	8021344 <_vfiprintf_r+0x3e8>
 80212b2:	46a8      	mov	r8, r5
 80212b4:	f01a 0f10 	tst.w	sl, #16
 80212b8:	f858 5b04 	ldr.w	r5, [r8], #4
 80212bc:	d002      	beq.n	80212c4 <_vfiprintf_r+0x368>
 80212be:	462c      	mov	r4, r5
 80212c0:	17ed      	asrs	r5, r5, #31
 80212c2:	e7eb      	b.n	802129c <_vfiprintf_r+0x340>
 80212c4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80212c8:	d003      	beq.n	80212d2 <_vfiprintf_r+0x376>
 80212ca:	b22c      	sxth	r4, r5
 80212cc:	f345 35c0 	sbfx	r5, r5, #15, #1
 80212d0:	e7e4      	b.n	802129c <_vfiprintf_r+0x340>
 80212d2:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80212d6:	d0f2      	beq.n	80212be <_vfiprintf_r+0x362>
 80212d8:	b26c      	sxtb	r4, r5
 80212da:	f345 15c0 	sbfx	r5, r5, #7, #1
 80212de:	e7dd      	b.n	802129c <_vfiprintf_r+0x340>
 80212e0:	f01a 0f20 	tst.w	sl, #32
 80212e4:	d007      	beq.n	80212f6 <_vfiprintf_r+0x39a>
 80212e6:	9a03      	ldr	r2, [sp, #12]
 80212e8:	682b      	ldr	r3, [r5, #0]
 80212ea:	9903      	ldr	r1, [sp, #12]
 80212ec:	17d2      	asrs	r2, r2, #31
 80212ee:	e9c3 1200 	strd	r1, r2, [r3]
 80212f2:	3504      	adds	r5, #4
 80212f4:	e693      	b.n	802101e <_vfiprintf_r+0xc2>
 80212f6:	f01a 0f10 	tst.w	sl, #16
 80212fa:	d003      	beq.n	8021304 <_vfiprintf_r+0x3a8>
 80212fc:	682b      	ldr	r3, [r5, #0]
 80212fe:	9a03      	ldr	r2, [sp, #12]
 8021300:	601a      	str	r2, [r3, #0]
 8021302:	e7f6      	b.n	80212f2 <_vfiprintf_r+0x396>
 8021304:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8021308:	d003      	beq.n	8021312 <_vfiprintf_r+0x3b6>
 802130a:	682b      	ldr	r3, [r5, #0]
 802130c:	9a03      	ldr	r2, [sp, #12]
 802130e:	801a      	strh	r2, [r3, #0]
 8021310:	e7ef      	b.n	80212f2 <_vfiprintf_r+0x396>
 8021312:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8021316:	d0f1      	beq.n	80212fc <_vfiprintf_r+0x3a0>
 8021318:	682b      	ldr	r3, [r5, #0]
 802131a:	9a03      	ldr	r2, [sp, #12]
 802131c:	701a      	strb	r2, [r3, #0]
 802131e:	e7e8      	b.n	80212f2 <_vfiprintf_r+0x396>
 8021320:	f04a 0a10 	orr.w	sl, sl, #16
 8021324:	f01a 0320 	ands.w	r3, sl, #32
 8021328:	d01f      	beq.n	802136a <_vfiprintf_r+0x40e>
 802132a:	3507      	adds	r5, #7
 802132c:	f025 0507 	bic.w	r5, r5, #7
 8021330:	46a8      	mov	r8, r5
 8021332:	686d      	ldr	r5, [r5, #4]
 8021334:	f858 4b08 	ldr.w	r4, [r8], #8
 8021338:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802133c:	2300      	movs	r3, #0
 802133e:	2200      	movs	r2, #0
 8021340:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8021344:	9a01      	ldr	r2, [sp, #4]
 8021346:	3201      	adds	r2, #1
 8021348:	f000 825f 	beq.w	802180a <_vfiprintf_r+0x8ae>
 802134c:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8021350:	9204      	str	r2, [sp, #16]
 8021352:	ea54 0205 	orrs.w	r2, r4, r5
 8021356:	f040 825e 	bne.w	8021816 <_vfiprintf_r+0x8ba>
 802135a:	9a01      	ldr	r2, [sp, #4]
 802135c:	2a00      	cmp	r2, #0
 802135e:	f000 8198 	beq.w	8021692 <_vfiprintf_r+0x736>
 8021362:	2b01      	cmp	r3, #1
 8021364:	f040 825a 	bne.w	802181c <_vfiprintf_r+0x8c0>
 8021368:	e13b      	b.n	80215e2 <_vfiprintf_r+0x686>
 802136a:	46a8      	mov	r8, r5
 802136c:	f01a 0510 	ands.w	r5, sl, #16
 8021370:	f858 4b04 	ldr.w	r4, [r8], #4
 8021374:	d001      	beq.n	802137a <_vfiprintf_r+0x41e>
 8021376:	461d      	mov	r5, r3
 8021378:	e7de      	b.n	8021338 <_vfiprintf_r+0x3dc>
 802137a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802137e:	d001      	beq.n	8021384 <_vfiprintf_r+0x428>
 8021380:	b2a4      	uxth	r4, r4
 8021382:	e7d9      	b.n	8021338 <_vfiprintf_r+0x3dc>
 8021384:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8021388:	d0d6      	beq.n	8021338 <_vfiprintf_r+0x3dc>
 802138a:	b2e4      	uxtb	r4, r4
 802138c:	e7f3      	b.n	8021376 <_vfiprintf_r+0x41a>
 802138e:	46a8      	mov	r8, r5
 8021390:	f647 0330 	movw	r3, #30768	@ 0x7830
 8021394:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8021398:	f858 4b04 	ldr.w	r4, [r8], #4
 802139c:	4b03      	ldr	r3, [pc, #12]	@ (80213ac <_vfiprintf_r+0x450>)
 802139e:	9305      	str	r3, [sp, #20]
 80213a0:	2500      	movs	r5, #0
 80213a2:	f04a 0a02 	orr.w	sl, sl, #2
 80213a6:	2302      	movs	r3, #2
 80213a8:	e7c9      	b.n	802133e <_vfiprintf_r+0x3e2>
 80213aa:	bf00      	nop
 80213ac:	08024b5c 	.word	0x08024b5c
 80213b0:	9b01      	ldr	r3, [sp, #4]
 80213b2:	46a8      	mov	r8, r5
 80213b4:	1c5c      	adds	r4, r3, #1
 80213b6:	f04f 0500 	mov.w	r5, #0
 80213ba:	f858 9b04 	ldr.w	r9, [r8], #4
 80213be:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80213c2:	f000 80d0 	beq.w	8021566 <_vfiprintf_r+0x60a>
 80213c6:	461a      	mov	r2, r3
 80213c8:	4629      	mov	r1, r5
 80213ca:	4648      	mov	r0, r9
 80213cc:	f7de ff08 	bl	80001e0 <memchr>
 80213d0:	4604      	mov	r4, r0
 80213d2:	b118      	cbz	r0, 80213dc <_vfiprintf_r+0x480>
 80213d4:	eba0 0309 	sub.w	r3, r0, r9
 80213d8:	9301      	str	r3, [sp, #4]
 80213da:	462c      	mov	r4, r5
 80213dc:	9b01      	ldr	r3, [sp, #4]
 80213de:	42a3      	cmp	r3, r4
 80213e0:	bfb8      	it	lt
 80213e2:	4623      	movlt	r3, r4
 80213e4:	9304      	str	r3, [sp, #16]
 80213e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80213ea:	b113      	cbz	r3, 80213f2 <_vfiprintf_r+0x496>
 80213ec:	9b04      	ldr	r3, [sp, #16]
 80213ee:	3301      	adds	r3, #1
 80213f0:	9304      	str	r3, [sp, #16]
 80213f2:	f01a 0302 	ands.w	r3, sl, #2
 80213f6:	9308      	str	r3, [sp, #32]
 80213f8:	bf1e      	ittt	ne
 80213fa:	9b04      	ldrne	r3, [sp, #16]
 80213fc:	3302      	addne	r3, #2
 80213fe:	9304      	strne	r3, [sp, #16]
 8021400:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8021404:	930a      	str	r3, [sp, #40]	@ 0x28
 8021406:	d11f      	bne.n	8021448 <_vfiprintf_r+0x4ec>
 8021408:	9b02      	ldr	r3, [sp, #8]
 802140a:	9a04      	ldr	r2, [sp, #16]
 802140c:	1a9d      	subs	r5, r3, r2
 802140e:	2d00      	cmp	r5, #0
 8021410:	dd1a      	ble.n	8021448 <_vfiprintf_r+0x4ec>
 8021412:	4ba9      	ldr	r3, [pc, #676]	@ (80216b8 <_vfiprintf_r+0x75c>)
 8021414:	6033      	str	r3, [r6, #0]
 8021416:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802141a:	2d10      	cmp	r5, #16
 802141c:	f102 0201 	add.w	r2, r2, #1
 8021420:	f106 0008 	add.w	r0, r6, #8
 8021424:	f300 814e 	bgt.w	80216c4 <_vfiprintf_r+0x768>
 8021428:	6075      	str	r5, [r6, #4]
 802142a:	2a07      	cmp	r2, #7
 802142c:	4465      	add	r5, ip
 802142e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8021432:	f340 815a 	ble.w	80216ea <_vfiprintf_r+0x78e>
 8021436:	9800      	ldr	r0, [sp, #0]
 8021438:	aa0e      	add	r2, sp, #56	@ 0x38
 802143a:	4639      	mov	r1, r7
 802143c:	f7ff fd5c 	bl	8020ef8 <__sprint_r>
 8021440:	2800      	cmp	r0, #0
 8021442:	f040 81b4 	bne.w	80217ae <_vfiprintf_r+0x852>
 8021446:	ae11      	add	r6, sp, #68	@ 0x44
 8021448:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802144c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8021450:	b161      	cbz	r1, 802146c <_vfiprintf_r+0x510>
 8021452:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8021456:	3301      	adds	r3, #1
 8021458:	6031      	str	r1, [r6, #0]
 802145a:	2101      	movs	r1, #1
 802145c:	440a      	add	r2, r1
 802145e:	2b07      	cmp	r3, #7
 8021460:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8021464:	6071      	str	r1, [r6, #4]
 8021466:	f300 8142 	bgt.w	80216ee <_vfiprintf_r+0x792>
 802146a:	3608      	adds	r6, #8
 802146c:	9908      	ldr	r1, [sp, #32]
 802146e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8021472:	b159      	cbz	r1, 802148c <_vfiprintf_r+0x530>
 8021474:	a90d      	add	r1, sp, #52	@ 0x34
 8021476:	3301      	adds	r3, #1
 8021478:	6031      	str	r1, [r6, #0]
 802147a:	2102      	movs	r1, #2
 802147c:	440a      	add	r2, r1
 802147e:	2b07      	cmp	r3, #7
 8021480:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8021484:	6071      	str	r1, [r6, #4]
 8021486:	f300 813b 	bgt.w	8021700 <_vfiprintf_r+0x7a4>
 802148a:	3608      	adds	r6, #8
 802148c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802148e:	2b80      	cmp	r3, #128	@ 0x80
 8021490:	d11f      	bne.n	80214d2 <_vfiprintf_r+0x576>
 8021492:	9b02      	ldr	r3, [sp, #8]
 8021494:	9a04      	ldr	r2, [sp, #16]
 8021496:	1a9d      	subs	r5, r3, r2
 8021498:	2d00      	cmp	r5, #0
 802149a:	dd1a      	ble.n	80214d2 <_vfiprintf_r+0x576>
 802149c:	4b87      	ldr	r3, [pc, #540]	@ (80216bc <_vfiprintf_r+0x760>)
 802149e:	6033      	str	r3, [r6, #0]
 80214a0:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80214a4:	2d10      	cmp	r5, #16
 80214a6:	f102 0201 	add.w	r2, r2, #1
 80214aa:	f106 0008 	add.w	r0, r6, #8
 80214ae:	f300 8130 	bgt.w	8021712 <_vfiprintf_r+0x7b6>
 80214b2:	6075      	str	r5, [r6, #4]
 80214b4:	2a07      	cmp	r2, #7
 80214b6:	4465      	add	r5, ip
 80214b8:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80214bc:	f340 813c 	ble.w	8021738 <_vfiprintf_r+0x7dc>
 80214c0:	9800      	ldr	r0, [sp, #0]
 80214c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80214c4:	4639      	mov	r1, r7
 80214c6:	f7ff fd17 	bl	8020ef8 <__sprint_r>
 80214ca:	2800      	cmp	r0, #0
 80214cc:	f040 816f 	bne.w	80217ae <_vfiprintf_r+0x852>
 80214d0:	ae11      	add	r6, sp, #68	@ 0x44
 80214d2:	9b01      	ldr	r3, [sp, #4]
 80214d4:	1ae4      	subs	r4, r4, r3
 80214d6:	2c00      	cmp	r4, #0
 80214d8:	dd1a      	ble.n	8021510 <_vfiprintf_r+0x5b4>
 80214da:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80214de:	4877      	ldr	r0, [pc, #476]	@ (80216bc <_vfiprintf_r+0x760>)
 80214e0:	6030      	str	r0, [r6, #0]
 80214e2:	2c10      	cmp	r4, #16
 80214e4:	f103 0301 	add.w	r3, r3, #1
 80214e8:	f106 0108 	add.w	r1, r6, #8
 80214ec:	f300 8126 	bgt.w	802173c <_vfiprintf_r+0x7e0>
 80214f0:	6074      	str	r4, [r6, #4]
 80214f2:	2b07      	cmp	r3, #7
 80214f4:	4414      	add	r4, r2
 80214f6:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80214fa:	f340 8130 	ble.w	802175e <_vfiprintf_r+0x802>
 80214fe:	9800      	ldr	r0, [sp, #0]
 8021500:	aa0e      	add	r2, sp, #56	@ 0x38
 8021502:	4639      	mov	r1, r7
 8021504:	f7ff fcf8 	bl	8020ef8 <__sprint_r>
 8021508:	2800      	cmp	r0, #0
 802150a:	f040 8150 	bne.w	80217ae <_vfiprintf_r+0x852>
 802150e:	ae11      	add	r6, sp, #68	@ 0x44
 8021510:	9b01      	ldr	r3, [sp, #4]
 8021512:	9a01      	ldr	r2, [sp, #4]
 8021514:	6073      	str	r3, [r6, #4]
 8021516:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021518:	f8c6 9000 	str.w	r9, [r6]
 802151c:	4413      	add	r3, r2
 802151e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021522:	3301      	adds	r3, #1
 8021524:	2b07      	cmp	r3, #7
 8021526:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021528:	f300 811b 	bgt.w	8021762 <_vfiprintf_r+0x806>
 802152c:	f106 0308 	add.w	r3, r6, #8
 8021530:	f01a 0f04 	tst.w	sl, #4
 8021534:	f040 811d 	bne.w	8021772 <_vfiprintf_r+0x816>
 8021538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802153c:	9904      	ldr	r1, [sp, #16]
 802153e:	428a      	cmp	r2, r1
 8021540:	bfac      	ite	ge
 8021542:	189b      	addge	r3, r3, r2
 8021544:	185b      	addlt	r3, r3, r1
 8021546:	9303      	str	r3, [sp, #12]
 8021548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802154a:	b13b      	cbz	r3, 802155c <_vfiprintf_r+0x600>
 802154c:	9800      	ldr	r0, [sp, #0]
 802154e:	aa0e      	add	r2, sp, #56	@ 0x38
 8021550:	4639      	mov	r1, r7
 8021552:	f7ff fcd1 	bl	8020ef8 <__sprint_r>
 8021556:	2800      	cmp	r0, #0
 8021558:	f040 8129 	bne.w	80217ae <_vfiprintf_r+0x852>
 802155c:	2300      	movs	r3, #0
 802155e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021560:	4645      	mov	r5, r8
 8021562:	ae11      	add	r6, sp, #68	@ 0x44
 8021564:	e55b      	b.n	802101e <_vfiprintf_r+0xc2>
 8021566:	4648      	mov	r0, r9
 8021568:	f7de fe32 	bl	80001d0 <strlen>
 802156c:	9001      	str	r0, [sp, #4]
 802156e:	e734      	b.n	80213da <_vfiprintf_r+0x47e>
 8021570:	f04a 0a10 	orr.w	sl, sl, #16
 8021574:	f01a 0320 	ands.w	r3, sl, #32
 8021578:	d008      	beq.n	802158c <_vfiprintf_r+0x630>
 802157a:	3507      	adds	r5, #7
 802157c:	f025 0507 	bic.w	r5, r5, #7
 8021580:	46a8      	mov	r8, r5
 8021582:	686d      	ldr	r5, [r5, #4]
 8021584:	f858 4b08 	ldr.w	r4, [r8], #8
 8021588:	2301      	movs	r3, #1
 802158a:	e6d8      	b.n	802133e <_vfiprintf_r+0x3e2>
 802158c:	46a8      	mov	r8, r5
 802158e:	f01a 0510 	ands.w	r5, sl, #16
 8021592:	f858 4b04 	ldr.w	r4, [r8], #4
 8021596:	d001      	beq.n	802159c <_vfiprintf_r+0x640>
 8021598:	461d      	mov	r5, r3
 802159a:	e7f5      	b.n	8021588 <_vfiprintf_r+0x62c>
 802159c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80215a0:	d001      	beq.n	80215a6 <_vfiprintf_r+0x64a>
 80215a2:	b2a4      	uxth	r4, r4
 80215a4:	e7f0      	b.n	8021588 <_vfiprintf_r+0x62c>
 80215a6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80215aa:	d0ed      	beq.n	8021588 <_vfiprintf_r+0x62c>
 80215ac:	b2e4      	uxtb	r4, r4
 80215ae:	e7f3      	b.n	8021598 <_vfiprintf_r+0x63c>
 80215b0:	4a43      	ldr	r2, [pc, #268]	@ (80216c0 <_vfiprintf_r+0x764>)
 80215b2:	e5c9      	b.n	8021148 <_vfiprintf_r+0x1ec>
 80215b4:	46a8      	mov	r8, r5
 80215b6:	f01a 0510 	ands.w	r5, sl, #16
 80215ba:	f858 4b04 	ldr.w	r4, [r8], #4
 80215be:	d001      	beq.n	80215c4 <_vfiprintf_r+0x668>
 80215c0:	4615      	mov	r5, r2
 80215c2:	e5cd      	b.n	8021160 <_vfiprintf_r+0x204>
 80215c4:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80215c8:	d001      	beq.n	80215ce <_vfiprintf_r+0x672>
 80215ca:	b2a4      	uxth	r4, r4
 80215cc:	e5c8      	b.n	8021160 <_vfiprintf_r+0x204>
 80215ce:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80215d2:	f43f adc5 	beq.w	8021160 <_vfiprintf_r+0x204>
 80215d6:	b2e4      	uxtb	r4, r4
 80215d8:	e7f2      	b.n	80215c0 <_vfiprintf_r+0x664>
 80215da:	2c0a      	cmp	r4, #10
 80215dc:	f175 0300 	sbcs.w	r3, r5, #0
 80215e0:	d206      	bcs.n	80215f0 <_vfiprintf_r+0x694>
 80215e2:	3430      	adds	r4, #48	@ 0x30
 80215e4:	b2e4      	uxtb	r4, r4
 80215e6:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80215ea:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80215ee:	e131      	b.n	8021854 <_vfiprintf_r+0x8f8>
 80215f0:	ab3a      	add	r3, sp, #232	@ 0xe8
 80215f2:	9308      	str	r3, [sp, #32]
 80215f4:	9b04      	ldr	r3, [sp, #16]
 80215f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80215fa:	f04f 0a00 	mov.w	sl, #0
 80215fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8021600:	220a      	movs	r2, #10
 8021602:	2300      	movs	r3, #0
 8021604:	4620      	mov	r0, r4
 8021606:	4629      	mov	r1, r5
 8021608:	f7df fb3e 	bl	8000c88 <__aeabi_uldivmod>
 802160c:	460b      	mov	r3, r1
 802160e:	9908      	ldr	r1, [sp, #32]
 8021610:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021612:	3230      	adds	r2, #48	@ 0x30
 8021614:	f801 2c01 	strb.w	r2, [r1, #-1]
 8021618:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802161a:	f101 39ff 	add.w	r9, r1, #4294967295
 802161e:	f10a 0a01 	add.w	sl, sl, #1
 8021622:	b1e2      	cbz	r2, 802165e <_vfiprintf_r+0x702>
 8021624:	9a06      	ldr	r2, [sp, #24]
 8021626:	7812      	ldrb	r2, [r2, #0]
 8021628:	4552      	cmp	r2, sl
 802162a:	d118      	bne.n	802165e <_vfiprintf_r+0x702>
 802162c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8021630:	d015      	beq.n	802165e <_vfiprintf_r+0x702>
 8021632:	2c0a      	cmp	r4, #10
 8021634:	f175 0200 	sbcs.w	r2, r5, #0
 8021638:	d311      	bcc.n	802165e <_vfiprintf_r+0x702>
 802163a:	9308      	str	r3, [sp, #32]
 802163c:	9b07      	ldr	r3, [sp, #28]
 802163e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021640:	eba9 0903 	sub.w	r9, r9, r3
 8021644:	461a      	mov	r2, r3
 8021646:	4648      	mov	r0, r9
 8021648:	f7fd ff67 	bl	801f51a <strncpy>
 802164c:	9b06      	ldr	r3, [sp, #24]
 802164e:	785a      	ldrb	r2, [r3, #1]
 8021650:	9b08      	ldr	r3, [sp, #32]
 8021652:	b172      	cbz	r2, 8021672 <_vfiprintf_r+0x716>
 8021654:	9a06      	ldr	r2, [sp, #24]
 8021656:	3201      	adds	r2, #1
 8021658:	9206      	str	r2, [sp, #24]
 802165a:	f04f 0a00 	mov.w	sl, #0
 802165e:	2c0a      	cmp	r4, #10
 8021660:	f175 0500 	sbcs.w	r5, r5, #0
 8021664:	f0c0 80f6 	bcc.w	8021854 <_vfiprintf_r+0x8f8>
 8021668:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802166a:	f8cd 9020 	str.w	r9, [sp, #32]
 802166e:	461d      	mov	r5, r3
 8021670:	e7c6      	b.n	8021600 <_vfiprintf_r+0x6a4>
 8021672:	4692      	mov	sl, r2
 8021674:	e7f3      	b.n	802165e <_vfiprintf_r+0x702>
 8021676:	f004 030f 	and.w	r3, r4, #15
 802167a:	9a05      	ldr	r2, [sp, #20]
 802167c:	0924      	lsrs	r4, r4, #4
 802167e:	5cd3      	ldrb	r3, [r2, r3]
 8021680:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8021684:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8021688:	092d      	lsrs	r5, r5, #4
 802168a:	ea54 0305 	orrs.w	r3, r4, r5
 802168e:	d1f2      	bne.n	8021676 <_vfiprintf_r+0x71a>
 8021690:	e0e0      	b.n	8021854 <_vfiprintf_r+0x8f8>
 8021692:	b923      	cbnz	r3, 802169e <_vfiprintf_r+0x742>
 8021694:	f01a 0f01 	tst.w	sl, #1
 8021698:	d001      	beq.n	802169e <_vfiprintf_r+0x742>
 802169a:	2430      	movs	r4, #48	@ 0x30
 802169c:	e7a3      	b.n	80215e6 <_vfiprintf_r+0x68a>
 802169e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80216a2:	e0d7      	b.n	8021854 <_vfiprintf_r+0x8f8>
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	f000 80a3 	beq.w	80217f0 <_vfiprintf_r+0x894>
 80216aa:	2400      	movs	r4, #0
 80216ac:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80216b0:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80216b4:	46a8      	mov	r8, r5
 80216b6:	e5e0      	b.n	802127a <_vfiprintf_r+0x31e>
 80216b8:	08024ec5 	.word	0x08024ec5
 80216bc:	08024eb5 	.word	0x08024eb5
 80216c0:	08024b6d 	.word	0x08024b6d
 80216c4:	2110      	movs	r1, #16
 80216c6:	6071      	str	r1, [r6, #4]
 80216c8:	2a07      	cmp	r2, #7
 80216ca:	4461      	add	r1, ip
 80216cc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80216d0:	dd08      	ble.n	80216e4 <_vfiprintf_r+0x788>
 80216d2:	9800      	ldr	r0, [sp, #0]
 80216d4:	aa0e      	add	r2, sp, #56	@ 0x38
 80216d6:	4639      	mov	r1, r7
 80216d8:	f7ff fc0e 	bl	8020ef8 <__sprint_r>
 80216dc:	2800      	cmp	r0, #0
 80216de:	d166      	bne.n	80217ae <_vfiprintf_r+0x852>
 80216e0:	4b60      	ldr	r3, [pc, #384]	@ (8021864 <_vfiprintf_r+0x908>)
 80216e2:	a811      	add	r0, sp, #68	@ 0x44
 80216e4:	3d10      	subs	r5, #16
 80216e6:	4606      	mov	r6, r0
 80216e8:	e694      	b.n	8021414 <_vfiprintf_r+0x4b8>
 80216ea:	4606      	mov	r6, r0
 80216ec:	e6ac      	b.n	8021448 <_vfiprintf_r+0x4ec>
 80216ee:	9800      	ldr	r0, [sp, #0]
 80216f0:	aa0e      	add	r2, sp, #56	@ 0x38
 80216f2:	4639      	mov	r1, r7
 80216f4:	f7ff fc00 	bl	8020ef8 <__sprint_r>
 80216f8:	2800      	cmp	r0, #0
 80216fa:	d158      	bne.n	80217ae <_vfiprintf_r+0x852>
 80216fc:	ae11      	add	r6, sp, #68	@ 0x44
 80216fe:	e6b5      	b.n	802146c <_vfiprintf_r+0x510>
 8021700:	9800      	ldr	r0, [sp, #0]
 8021702:	aa0e      	add	r2, sp, #56	@ 0x38
 8021704:	4639      	mov	r1, r7
 8021706:	f7ff fbf7 	bl	8020ef8 <__sprint_r>
 802170a:	2800      	cmp	r0, #0
 802170c:	d14f      	bne.n	80217ae <_vfiprintf_r+0x852>
 802170e:	ae11      	add	r6, sp, #68	@ 0x44
 8021710:	e6bc      	b.n	802148c <_vfiprintf_r+0x530>
 8021712:	2110      	movs	r1, #16
 8021714:	6071      	str	r1, [r6, #4]
 8021716:	2a07      	cmp	r2, #7
 8021718:	4461      	add	r1, ip
 802171a:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802171e:	dd08      	ble.n	8021732 <_vfiprintf_r+0x7d6>
 8021720:	9800      	ldr	r0, [sp, #0]
 8021722:	aa0e      	add	r2, sp, #56	@ 0x38
 8021724:	4639      	mov	r1, r7
 8021726:	f7ff fbe7 	bl	8020ef8 <__sprint_r>
 802172a:	2800      	cmp	r0, #0
 802172c:	d13f      	bne.n	80217ae <_vfiprintf_r+0x852>
 802172e:	4b4e      	ldr	r3, [pc, #312]	@ (8021868 <_vfiprintf_r+0x90c>)
 8021730:	a811      	add	r0, sp, #68	@ 0x44
 8021732:	3d10      	subs	r5, #16
 8021734:	4606      	mov	r6, r0
 8021736:	e6b2      	b.n	802149e <_vfiprintf_r+0x542>
 8021738:	4606      	mov	r6, r0
 802173a:	e6ca      	b.n	80214d2 <_vfiprintf_r+0x576>
 802173c:	2010      	movs	r0, #16
 802173e:	4402      	add	r2, r0
 8021740:	2b07      	cmp	r3, #7
 8021742:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8021746:	6070      	str	r0, [r6, #4]
 8021748:	dd06      	ble.n	8021758 <_vfiprintf_r+0x7fc>
 802174a:	9800      	ldr	r0, [sp, #0]
 802174c:	aa0e      	add	r2, sp, #56	@ 0x38
 802174e:	4639      	mov	r1, r7
 8021750:	f7ff fbd2 	bl	8020ef8 <__sprint_r>
 8021754:	bb58      	cbnz	r0, 80217ae <_vfiprintf_r+0x852>
 8021756:	a911      	add	r1, sp, #68	@ 0x44
 8021758:	3c10      	subs	r4, #16
 802175a:	460e      	mov	r6, r1
 802175c:	e6bd      	b.n	80214da <_vfiprintf_r+0x57e>
 802175e:	460e      	mov	r6, r1
 8021760:	e6d6      	b.n	8021510 <_vfiprintf_r+0x5b4>
 8021762:	9800      	ldr	r0, [sp, #0]
 8021764:	aa0e      	add	r2, sp, #56	@ 0x38
 8021766:	4639      	mov	r1, r7
 8021768:	f7ff fbc6 	bl	8020ef8 <__sprint_r>
 802176c:	b9f8      	cbnz	r0, 80217ae <_vfiprintf_r+0x852>
 802176e:	ab11      	add	r3, sp, #68	@ 0x44
 8021770:	e6de      	b.n	8021530 <_vfiprintf_r+0x5d4>
 8021772:	9a02      	ldr	r2, [sp, #8]
 8021774:	9904      	ldr	r1, [sp, #16]
 8021776:	1a54      	subs	r4, r2, r1
 8021778:	2c00      	cmp	r4, #0
 802177a:	f77f aedd 	ble.w	8021538 <_vfiprintf_r+0x5dc>
 802177e:	4d39      	ldr	r5, [pc, #228]	@ (8021864 <_vfiprintf_r+0x908>)
 8021780:	2610      	movs	r6, #16
 8021782:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8021786:	2c10      	cmp	r4, #16
 8021788:	f102 0201 	add.w	r2, r2, #1
 802178c:	601d      	str	r5, [r3, #0]
 802178e:	dc1d      	bgt.n	80217cc <_vfiprintf_r+0x870>
 8021790:	605c      	str	r4, [r3, #4]
 8021792:	2a07      	cmp	r2, #7
 8021794:	440c      	add	r4, r1
 8021796:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802179a:	f77f aecd 	ble.w	8021538 <_vfiprintf_r+0x5dc>
 802179e:	9800      	ldr	r0, [sp, #0]
 80217a0:	aa0e      	add	r2, sp, #56	@ 0x38
 80217a2:	4639      	mov	r1, r7
 80217a4:	f7ff fba8 	bl	8020ef8 <__sprint_r>
 80217a8:	2800      	cmp	r0, #0
 80217aa:	f43f aec5 	beq.w	8021538 <_vfiprintf_r+0x5dc>
 80217ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80217b0:	07d9      	lsls	r1, r3, #31
 80217b2:	d405      	bmi.n	80217c0 <_vfiprintf_r+0x864>
 80217b4:	89bb      	ldrh	r3, [r7, #12]
 80217b6:	059a      	lsls	r2, r3, #22
 80217b8:	d402      	bmi.n	80217c0 <_vfiprintf_r+0x864>
 80217ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80217bc:	f7fc f851 	bl	801d862 <__retarget_lock_release_recursive>
 80217c0:	89bb      	ldrh	r3, [r7, #12]
 80217c2:	065b      	lsls	r3, r3, #25
 80217c4:	f57f abfb 	bpl.w	8020fbe <_vfiprintf_r+0x62>
 80217c8:	f7ff bbf6 	b.w	8020fb8 <_vfiprintf_r+0x5c>
 80217cc:	3110      	adds	r1, #16
 80217ce:	2a07      	cmp	r2, #7
 80217d0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80217d4:	605e      	str	r6, [r3, #4]
 80217d6:	dc02      	bgt.n	80217de <_vfiprintf_r+0x882>
 80217d8:	3308      	adds	r3, #8
 80217da:	3c10      	subs	r4, #16
 80217dc:	e7d1      	b.n	8021782 <_vfiprintf_r+0x826>
 80217de:	9800      	ldr	r0, [sp, #0]
 80217e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80217e2:	4639      	mov	r1, r7
 80217e4:	f7ff fb88 	bl	8020ef8 <__sprint_r>
 80217e8:	2800      	cmp	r0, #0
 80217ea:	d1e0      	bne.n	80217ae <_vfiprintf_r+0x852>
 80217ec:	ab11      	add	r3, sp, #68	@ 0x44
 80217ee:	e7f4      	b.n	80217da <_vfiprintf_r+0x87e>
 80217f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80217f2:	b913      	cbnz	r3, 80217fa <_vfiprintf_r+0x89e>
 80217f4:	2300      	movs	r3, #0
 80217f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80217f8:	e7d9      	b.n	80217ae <_vfiprintf_r+0x852>
 80217fa:	9800      	ldr	r0, [sp, #0]
 80217fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80217fe:	4639      	mov	r1, r7
 8021800:	f7ff fb7a 	bl	8020ef8 <__sprint_r>
 8021804:	2800      	cmp	r0, #0
 8021806:	d0f5      	beq.n	80217f4 <_vfiprintf_r+0x898>
 8021808:	e7d1      	b.n	80217ae <_vfiprintf_r+0x852>
 802180a:	ea54 0205 	orrs.w	r2, r4, r5
 802180e:	f8cd a010 	str.w	sl, [sp, #16]
 8021812:	f43f ada6 	beq.w	8021362 <_vfiprintf_r+0x406>
 8021816:	2b01      	cmp	r3, #1
 8021818:	f43f aedf 	beq.w	80215da <_vfiprintf_r+0x67e>
 802181c:	2b02      	cmp	r3, #2
 802181e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8021822:	f43f af28 	beq.w	8021676 <_vfiprintf_r+0x71a>
 8021826:	f004 0307 	and.w	r3, r4, #7
 802182a:	08e4      	lsrs	r4, r4, #3
 802182c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8021830:	08ed      	lsrs	r5, r5, #3
 8021832:	3330      	adds	r3, #48	@ 0x30
 8021834:	ea54 0105 	orrs.w	r1, r4, r5
 8021838:	464a      	mov	r2, r9
 802183a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802183e:	d1f2      	bne.n	8021826 <_vfiprintf_r+0x8ca>
 8021840:	9904      	ldr	r1, [sp, #16]
 8021842:	07c8      	lsls	r0, r1, #31
 8021844:	d506      	bpl.n	8021854 <_vfiprintf_r+0x8f8>
 8021846:	2b30      	cmp	r3, #48	@ 0x30
 8021848:	d004      	beq.n	8021854 <_vfiprintf_r+0x8f8>
 802184a:	2330      	movs	r3, #48	@ 0x30
 802184c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8021850:	f1a2 0902 	sub.w	r9, r2, #2
 8021854:	ab3a      	add	r3, sp, #232	@ 0xe8
 8021856:	eba3 0309 	sub.w	r3, r3, r9
 802185a:	9c01      	ldr	r4, [sp, #4]
 802185c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8021860:	9301      	str	r3, [sp, #4]
 8021862:	e5bb      	b.n	80213dc <_vfiprintf_r+0x480>
 8021864:	08024ec5 	.word	0x08024ec5
 8021868:	08024eb5 	.word	0x08024eb5

0802186c <__sbprintf>:
 802186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802186e:	461f      	mov	r7, r3
 8021870:	898b      	ldrh	r3, [r1, #12]
 8021872:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8021876:	f023 0302 	bic.w	r3, r3, #2
 802187a:	f8ad 300c 	strh.w	r3, [sp, #12]
 802187e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8021880:	9319      	str	r3, [sp, #100]	@ 0x64
 8021882:	89cb      	ldrh	r3, [r1, #14]
 8021884:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021888:	69cb      	ldr	r3, [r1, #28]
 802188a:	9307      	str	r3, [sp, #28]
 802188c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802188e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021890:	ab1a      	add	r3, sp, #104	@ 0x68
 8021892:	9300      	str	r3, [sp, #0]
 8021894:	9304      	str	r3, [sp, #16]
 8021896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802189a:	4615      	mov	r5, r2
 802189c:	4606      	mov	r6, r0
 802189e:	9302      	str	r3, [sp, #8]
 80218a0:	9305      	str	r3, [sp, #20]
 80218a2:	a816      	add	r0, sp, #88	@ 0x58
 80218a4:	2300      	movs	r3, #0
 80218a6:	460c      	mov	r4, r1
 80218a8:	9306      	str	r3, [sp, #24]
 80218aa:	f7fb ffd7 	bl	801d85c <__retarget_lock_init_recursive>
 80218ae:	462a      	mov	r2, r5
 80218b0:	463b      	mov	r3, r7
 80218b2:	4669      	mov	r1, sp
 80218b4:	4630      	mov	r0, r6
 80218b6:	f7ff fb51 	bl	8020f5c <_vfiprintf_r>
 80218ba:	1e05      	subs	r5, r0, #0
 80218bc:	db07      	blt.n	80218ce <__sbprintf+0x62>
 80218be:	4669      	mov	r1, sp
 80218c0:	4630      	mov	r0, r6
 80218c2:	f7fd fe05 	bl	801f4d0 <_fflush_r>
 80218c6:	2800      	cmp	r0, #0
 80218c8:	bf18      	it	ne
 80218ca:	f04f 35ff 	movne.w	r5, #4294967295
 80218ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80218d2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80218d4:	065b      	lsls	r3, r3, #25
 80218d6:	bf42      	ittt	mi
 80218d8:	89a3      	ldrhmi	r3, [r4, #12]
 80218da:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80218de:	81a3      	strhmi	r3, [r4, #12]
 80218e0:	f7fb ffbd 	bl	801d85e <__retarget_lock_close_recursive>
 80218e4:	4628      	mov	r0, r5
 80218e6:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80218ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080218ec <__sfvwrite_r>:
 80218ec:	6893      	ldr	r3, [r2, #8]
 80218ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218f2:	4606      	mov	r6, r0
 80218f4:	460c      	mov	r4, r1
 80218f6:	4691      	mov	r9, r2
 80218f8:	b91b      	cbnz	r3, 8021902 <__sfvwrite_r+0x16>
 80218fa:	2000      	movs	r0, #0
 80218fc:	b003      	add	sp, #12
 80218fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021902:	898b      	ldrh	r3, [r1, #12]
 8021904:	0718      	lsls	r0, r3, #28
 8021906:	d550      	bpl.n	80219aa <__sfvwrite_r+0xbe>
 8021908:	690b      	ldr	r3, [r1, #16]
 802190a:	2b00      	cmp	r3, #0
 802190c:	d04d      	beq.n	80219aa <__sfvwrite_r+0xbe>
 802190e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021912:	f8d9 8000 	ldr.w	r8, [r9]
 8021916:	f013 0702 	ands.w	r7, r3, #2
 802191a:	d16b      	bne.n	80219f4 <__sfvwrite_r+0x108>
 802191c:	f013 0301 	ands.w	r3, r3, #1
 8021920:	f000 809c 	beq.w	8021a5c <__sfvwrite_r+0x170>
 8021924:	4638      	mov	r0, r7
 8021926:	46ba      	mov	sl, r7
 8021928:	46bb      	mov	fp, r7
 802192a:	f1bb 0f00 	cmp.w	fp, #0
 802192e:	f000 8103 	beq.w	8021b38 <__sfvwrite_r+0x24c>
 8021932:	b950      	cbnz	r0, 802194a <__sfvwrite_r+0x5e>
 8021934:	465a      	mov	r2, fp
 8021936:	210a      	movs	r1, #10
 8021938:	4650      	mov	r0, sl
 802193a:	f7de fc51 	bl	80001e0 <memchr>
 802193e:	2800      	cmp	r0, #0
 8021940:	f000 8100 	beq.w	8021b44 <__sfvwrite_r+0x258>
 8021944:	3001      	adds	r0, #1
 8021946:	eba0 070a 	sub.w	r7, r0, sl
 802194a:	6820      	ldr	r0, [r4, #0]
 802194c:	6921      	ldr	r1, [r4, #16]
 802194e:	68a5      	ldr	r5, [r4, #8]
 8021950:	6963      	ldr	r3, [r4, #20]
 8021952:	455f      	cmp	r7, fp
 8021954:	463a      	mov	r2, r7
 8021956:	bf28      	it	cs
 8021958:	465a      	movcs	r2, fp
 802195a:	4288      	cmp	r0, r1
 802195c:	f240 80f5 	bls.w	8021b4a <__sfvwrite_r+0x25e>
 8021960:	441d      	add	r5, r3
 8021962:	42aa      	cmp	r2, r5
 8021964:	f340 80f1 	ble.w	8021b4a <__sfvwrite_r+0x25e>
 8021968:	4651      	mov	r1, sl
 802196a:	462a      	mov	r2, r5
 802196c:	f7ff fa44 	bl	8020df8 <memmove>
 8021970:	6823      	ldr	r3, [r4, #0]
 8021972:	442b      	add	r3, r5
 8021974:	6023      	str	r3, [r4, #0]
 8021976:	4621      	mov	r1, r4
 8021978:	4630      	mov	r0, r6
 802197a:	f7fd fda9 	bl	801f4d0 <_fflush_r>
 802197e:	2800      	cmp	r0, #0
 8021980:	d167      	bne.n	8021a52 <__sfvwrite_r+0x166>
 8021982:	1b7f      	subs	r7, r7, r5
 8021984:	f040 80f9 	bne.w	8021b7a <__sfvwrite_r+0x28e>
 8021988:	4621      	mov	r1, r4
 802198a:	4630      	mov	r0, r6
 802198c:	f7fd fda0 	bl	801f4d0 <_fflush_r>
 8021990:	2800      	cmp	r0, #0
 8021992:	d15e      	bne.n	8021a52 <__sfvwrite_r+0x166>
 8021994:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021998:	1b5b      	subs	r3, r3, r5
 802199a:	44aa      	add	sl, r5
 802199c:	ebab 0b05 	sub.w	fp, fp, r5
 80219a0:	f8c9 3008 	str.w	r3, [r9, #8]
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	d1c0      	bne.n	802192a <__sfvwrite_r+0x3e>
 80219a8:	e7a7      	b.n	80218fa <__sfvwrite_r+0xe>
 80219aa:	4621      	mov	r1, r4
 80219ac:	4630      	mov	r0, r6
 80219ae:	f000 f8e9 	bl	8021b84 <__swsetup_r>
 80219b2:	2800      	cmp	r0, #0
 80219b4:	d0ab      	beq.n	802190e <__sfvwrite_r+0x22>
 80219b6:	f04f 30ff 	mov.w	r0, #4294967295
 80219ba:	e79f      	b.n	80218fc <__sfvwrite_r+0x10>
 80219bc:	e9d8 a500 	ldrd	sl, r5, [r8]
 80219c0:	f108 0808 	add.w	r8, r8, #8
 80219c4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80219c8:	69e1      	ldr	r1, [r4, #28]
 80219ca:	2d00      	cmp	r5, #0
 80219cc:	d0f6      	beq.n	80219bc <__sfvwrite_r+0xd0>
 80219ce:	42bd      	cmp	r5, r7
 80219d0:	462b      	mov	r3, r5
 80219d2:	4652      	mov	r2, sl
 80219d4:	bf28      	it	cs
 80219d6:	463b      	movcs	r3, r7
 80219d8:	4630      	mov	r0, r6
 80219da:	47d8      	blx	fp
 80219dc:	2800      	cmp	r0, #0
 80219de:	dd38      	ble.n	8021a52 <__sfvwrite_r+0x166>
 80219e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80219e4:	1a1b      	subs	r3, r3, r0
 80219e6:	4482      	add	sl, r0
 80219e8:	1a2d      	subs	r5, r5, r0
 80219ea:	f8c9 3008 	str.w	r3, [r9, #8]
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	d1e8      	bne.n	80219c4 <__sfvwrite_r+0xd8>
 80219f2:	e782      	b.n	80218fa <__sfvwrite_r+0xe>
 80219f4:	f04f 0a00 	mov.w	sl, #0
 80219f8:	4f61      	ldr	r7, [pc, #388]	@ (8021b80 <__sfvwrite_r+0x294>)
 80219fa:	4655      	mov	r5, sl
 80219fc:	e7e2      	b.n	80219c4 <__sfvwrite_r+0xd8>
 80219fe:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8021a02:	f108 0808 	add.w	r8, r8, #8
 8021a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a0a:	6820      	ldr	r0, [r4, #0]
 8021a0c:	68a2      	ldr	r2, [r4, #8]
 8021a0e:	f1ba 0f00 	cmp.w	sl, #0
 8021a12:	d0f4      	beq.n	80219fe <__sfvwrite_r+0x112>
 8021a14:	0599      	lsls	r1, r3, #22
 8021a16:	d563      	bpl.n	8021ae0 <__sfvwrite_r+0x1f4>
 8021a18:	4552      	cmp	r2, sl
 8021a1a:	d836      	bhi.n	8021a8a <__sfvwrite_r+0x19e>
 8021a1c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8021a20:	d033      	beq.n	8021a8a <__sfvwrite_r+0x19e>
 8021a22:	6921      	ldr	r1, [r4, #16]
 8021a24:	6965      	ldr	r5, [r4, #20]
 8021a26:	eba0 0b01 	sub.w	fp, r0, r1
 8021a2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021a2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021a32:	f10b 0201 	add.w	r2, fp, #1
 8021a36:	106d      	asrs	r5, r5, #1
 8021a38:	4452      	add	r2, sl
 8021a3a:	4295      	cmp	r5, r2
 8021a3c:	bf38      	it	cc
 8021a3e:	4615      	movcc	r5, r2
 8021a40:	055b      	lsls	r3, r3, #21
 8021a42:	d53d      	bpl.n	8021ac0 <__sfvwrite_r+0x1d4>
 8021a44:	4629      	mov	r1, r5
 8021a46:	4630      	mov	r0, r6
 8021a48:	f7fc f840 	bl	801dacc <_malloc_r>
 8021a4c:	b948      	cbnz	r0, 8021a62 <__sfvwrite_r+0x176>
 8021a4e:	230c      	movs	r3, #12
 8021a50:	6033      	str	r3, [r6, #0]
 8021a52:	89a3      	ldrh	r3, [r4, #12]
 8021a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021a58:	81a3      	strh	r3, [r4, #12]
 8021a5a:	e7ac      	b.n	80219b6 <__sfvwrite_r+0xca>
 8021a5c:	461f      	mov	r7, r3
 8021a5e:	469a      	mov	sl, r3
 8021a60:	e7d1      	b.n	8021a06 <__sfvwrite_r+0x11a>
 8021a62:	465a      	mov	r2, fp
 8021a64:	6921      	ldr	r1, [r4, #16]
 8021a66:	9001      	str	r0, [sp, #4]
 8021a68:	f7fb fefc 	bl	801d864 <memcpy>
 8021a6c:	89a2      	ldrh	r2, [r4, #12]
 8021a6e:	9b01      	ldr	r3, [sp, #4]
 8021a70:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8021a74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8021a78:	81a2      	strh	r2, [r4, #12]
 8021a7a:	6123      	str	r3, [r4, #16]
 8021a7c:	6165      	str	r5, [r4, #20]
 8021a7e:	445b      	add	r3, fp
 8021a80:	eba5 050b 	sub.w	r5, r5, fp
 8021a84:	6023      	str	r3, [r4, #0]
 8021a86:	4652      	mov	r2, sl
 8021a88:	60a5      	str	r5, [r4, #8]
 8021a8a:	4552      	cmp	r2, sl
 8021a8c:	bf28      	it	cs
 8021a8e:	4652      	movcs	r2, sl
 8021a90:	6820      	ldr	r0, [r4, #0]
 8021a92:	9201      	str	r2, [sp, #4]
 8021a94:	4639      	mov	r1, r7
 8021a96:	f7ff f9af 	bl	8020df8 <memmove>
 8021a9a:	68a3      	ldr	r3, [r4, #8]
 8021a9c:	9a01      	ldr	r2, [sp, #4]
 8021a9e:	1a9b      	subs	r3, r3, r2
 8021aa0:	60a3      	str	r3, [r4, #8]
 8021aa2:	6823      	ldr	r3, [r4, #0]
 8021aa4:	4413      	add	r3, r2
 8021aa6:	4655      	mov	r5, sl
 8021aa8:	6023      	str	r3, [r4, #0]
 8021aaa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021aae:	1b5b      	subs	r3, r3, r5
 8021ab0:	442f      	add	r7, r5
 8021ab2:	ebaa 0a05 	sub.w	sl, sl, r5
 8021ab6:	f8c9 3008 	str.w	r3, [r9, #8]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d1a3      	bne.n	8021a06 <__sfvwrite_r+0x11a>
 8021abe:	e71c      	b.n	80218fa <__sfvwrite_r+0xe>
 8021ac0:	462a      	mov	r2, r5
 8021ac2:	4630      	mov	r0, r6
 8021ac4:	f7fe ff66 	bl	8020994 <_realloc_r>
 8021ac8:	4603      	mov	r3, r0
 8021aca:	2800      	cmp	r0, #0
 8021acc:	d1d5      	bne.n	8021a7a <__sfvwrite_r+0x18e>
 8021ace:	6921      	ldr	r1, [r4, #16]
 8021ad0:	4630      	mov	r0, r6
 8021ad2:	f7fb ff3b 	bl	801d94c <_free_r>
 8021ad6:	89a3      	ldrh	r3, [r4, #12]
 8021ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8021adc:	81a3      	strh	r3, [r4, #12]
 8021ade:	e7b6      	b.n	8021a4e <__sfvwrite_r+0x162>
 8021ae0:	6923      	ldr	r3, [r4, #16]
 8021ae2:	4283      	cmp	r3, r0
 8021ae4:	d302      	bcc.n	8021aec <__sfvwrite_r+0x200>
 8021ae6:	6961      	ldr	r1, [r4, #20]
 8021ae8:	4551      	cmp	r1, sl
 8021aea:	d915      	bls.n	8021b18 <__sfvwrite_r+0x22c>
 8021aec:	4552      	cmp	r2, sl
 8021aee:	bf28      	it	cs
 8021af0:	4652      	movcs	r2, sl
 8021af2:	4639      	mov	r1, r7
 8021af4:	4615      	mov	r5, r2
 8021af6:	f7ff f97f 	bl	8020df8 <memmove>
 8021afa:	68a3      	ldr	r3, [r4, #8]
 8021afc:	6822      	ldr	r2, [r4, #0]
 8021afe:	1b5b      	subs	r3, r3, r5
 8021b00:	442a      	add	r2, r5
 8021b02:	60a3      	str	r3, [r4, #8]
 8021b04:	6022      	str	r2, [r4, #0]
 8021b06:	2b00      	cmp	r3, #0
 8021b08:	d1cf      	bne.n	8021aaa <__sfvwrite_r+0x1be>
 8021b0a:	4621      	mov	r1, r4
 8021b0c:	4630      	mov	r0, r6
 8021b0e:	f7fd fcdf 	bl	801f4d0 <_fflush_r>
 8021b12:	2800      	cmp	r0, #0
 8021b14:	d0c9      	beq.n	8021aaa <__sfvwrite_r+0x1be>
 8021b16:	e79c      	b.n	8021a52 <__sfvwrite_r+0x166>
 8021b18:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8021b1c:	4553      	cmp	r3, sl
 8021b1e:	bf28      	it	cs
 8021b20:	4653      	movcs	r3, sl
 8021b22:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8021b24:	fb93 f3f1 	sdiv	r3, r3, r1
 8021b28:	463a      	mov	r2, r7
 8021b2a:	434b      	muls	r3, r1
 8021b2c:	4630      	mov	r0, r6
 8021b2e:	69e1      	ldr	r1, [r4, #28]
 8021b30:	47a8      	blx	r5
 8021b32:	1e05      	subs	r5, r0, #0
 8021b34:	dcb9      	bgt.n	8021aaa <__sfvwrite_r+0x1be>
 8021b36:	e78c      	b.n	8021a52 <__sfvwrite_r+0x166>
 8021b38:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8021b3c:	2000      	movs	r0, #0
 8021b3e:	f108 0808 	add.w	r8, r8, #8
 8021b42:	e6f2      	b.n	802192a <__sfvwrite_r+0x3e>
 8021b44:	f10b 0701 	add.w	r7, fp, #1
 8021b48:	e6ff      	b.n	802194a <__sfvwrite_r+0x5e>
 8021b4a:	4293      	cmp	r3, r2
 8021b4c:	dc08      	bgt.n	8021b60 <__sfvwrite_r+0x274>
 8021b4e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8021b50:	69e1      	ldr	r1, [r4, #28]
 8021b52:	4652      	mov	r2, sl
 8021b54:	4630      	mov	r0, r6
 8021b56:	47a8      	blx	r5
 8021b58:	1e05      	subs	r5, r0, #0
 8021b5a:	f73f af12 	bgt.w	8021982 <__sfvwrite_r+0x96>
 8021b5e:	e778      	b.n	8021a52 <__sfvwrite_r+0x166>
 8021b60:	4651      	mov	r1, sl
 8021b62:	9201      	str	r2, [sp, #4]
 8021b64:	f7ff f948 	bl	8020df8 <memmove>
 8021b68:	9a01      	ldr	r2, [sp, #4]
 8021b6a:	68a3      	ldr	r3, [r4, #8]
 8021b6c:	1a9b      	subs	r3, r3, r2
 8021b6e:	60a3      	str	r3, [r4, #8]
 8021b70:	6823      	ldr	r3, [r4, #0]
 8021b72:	4413      	add	r3, r2
 8021b74:	6023      	str	r3, [r4, #0]
 8021b76:	4615      	mov	r5, r2
 8021b78:	e703      	b.n	8021982 <__sfvwrite_r+0x96>
 8021b7a:	2001      	movs	r0, #1
 8021b7c:	e70a      	b.n	8021994 <__sfvwrite_r+0xa8>
 8021b7e:	bf00      	nop
 8021b80:	7ffffc00 	.word	0x7ffffc00

08021b84 <__swsetup_r>:
 8021b84:	b538      	push	{r3, r4, r5, lr}
 8021b86:	4b29      	ldr	r3, [pc, #164]	@ (8021c2c <__swsetup_r+0xa8>)
 8021b88:	4605      	mov	r5, r0
 8021b8a:	6818      	ldr	r0, [r3, #0]
 8021b8c:	460c      	mov	r4, r1
 8021b8e:	b118      	cbz	r0, 8021b98 <__swsetup_r+0x14>
 8021b90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8021b92:	b90b      	cbnz	r3, 8021b98 <__swsetup_r+0x14>
 8021b94:	f7fb fd10 	bl	801d5b8 <__sinit>
 8021b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b9c:	0719      	lsls	r1, r3, #28
 8021b9e:	d422      	bmi.n	8021be6 <__swsetup_r+0x62>
 8021ba0:	06da      	lsls	r2, r3, #27
 8021ba2:	d407      	bmi.n	8021bb4 <__swsetup_r+0x30>
 8021ba4:	2209      	movs	r2, #9
 8021ba6:	602a      	str	r2, [r5, #0]
 8021ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021bac:	81a3      	strh	r3, [r4, #12]
 8021bae:	f04f 30ff 	mov.w	r0, #4294967295
 8021bb2:	e033      	b.n	8021c1c <__swsetup_r+0x98>
 8021bb4:	0758      	lsls	r0, r3, #29
 8021bb6:	d512      	bpl.n	8021bde <__swsetup_r+0x5a>
 8021bb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021bba:	b141      	cbz	r1, 8021bce <__swsetup_r+0x4a>
 8021bbc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8021bc0:	4299      	cmp	r1, r3
 8021bc2:	d002      	beq.n	8021bca <__swsetup_r+0x46>
 8021bc4:	4628      	mov	r0, r5
 8021bc6:	f7fb fec1 	bl	801d94c <_free_r>
 8021bca:	2300      	movs	r3, #0
 8021bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8021bce:	89a3      	ldrh	r3, [r4, #12]
 8021bd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021bd4:	81a3      	strh	r3, [r4, #12]
 8021bd6:	2300      	movs	r3, #0
 8021bd8:	6063      	str	r3, [r4, #4]
 8021bda:	6923      	ldr	r3, [r4, #16]
 8021bdc:	6023      	str	r3, [r4, #0]
 8021bde:	89a3      	ldrh	r3, [r4, #12]
 8021be0:	f043 0308 	orr.w	r3, r3, #8
 8021be4:	81a3      	strh	r3, [r4, #12]
 8021be6:	6923      	ldr	r3, [r4, #16]
 8021be8:	b94b      	cbnz	r3, 8021bfe <__swsetup_r+0x7a>
 8021bea:	89a3      	ldrh	r3, [r4, #12]
 8021bec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021bf4:	d003      	beq.n	8021bfe <__swsetup_r+0x7a>
 8021bf6:	4621      	mov	r1, r4
 8021bf8:	4628      	mov	r0, r5
 8021bfa:	f000 f8c9 	bl	8021d90 <__smakebuf_r>
 8021bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c02:	f013 0201 	ands.w	r2, r3, #1
 8021c06:	d00a      	beq.n	8021c1e <__swsetup_r+0x9a>
 8021c08:	2200      	movs	r2, #0
 8021c0a:	60a2      	str	r2, [r4, #8]
 8021c0c:	6962      	ldr	r2, [r4, #20]
 8021c0e:	4252      	negs	r2, r2
 8021c10:	61a2      	str	r2, [r4, #24]
 8021c12:	6922      	ldr	r2, [r4, #16]
 8021c14:	b942      	cbnz	r2, 8021c28 <__swsetup_r+0xa4>
 8021c16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021c1a:	d1c5      	bne.n	8021ba8 <__swsetup_r+0x24>
 8021c1c:	bd38      	pop	{r3, r4, r5, pc}
 8021c1e:	0799      	lsls	r1, r3, #30
 8021c20:	bf58      	it	pl
 8021c22:	6962      	ldrpl	r2, [r4, #20]
 8021c24:	60a2      	str	r2, [r4, #8]
 8021c26:	e7f4      	b.n	8021c12 <__swsetup_r+0x8e>
 8021c28:	2000      	movs	r0, #0
 8021c2a:	e7f7      	b.n	8021c1c <__swsetup_r+0x98>
 8021c2c:	20000150 	.word	0x20000150

08021c30 <__fputwc>:
 8021c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021c34:	4680      	mov	r8, r0
 8021c36:	460f      	mov	r7, r1
 8021c38:	4614      	mov	r4, r2
 8021c3a:	f7fd fc81 	bl	801f540 <__locale_mb_cur_max>
 8021c3e:	2801      	cmp	r0, #1
 8021c40:	4605      	mov	r5, r0
 8021c42:	d11b      	bne.n	8021c7c <__fputwc+0x4c>
 8021c44:	1e7b      	subs	r3, r7, #1
 8021c46:	2bfe      	cmp	r3, #254	@ 0xfe
 8021c48:	d818      	bhi.n	8021c7c <__fputwc+0x4c>
 8021c4a:	f88d 7004 	strb.w	r7, [sp, #4]
 8021c4e:	2600      	movs	r6, #0
 8021c50:	f10d 0904 	add.w	r9, sp, #4
 8021c54:	42ae      	cmp	r6, r5
 8021c56:	d021      	beq.n	8021c9c <__fputwc+0x6c>
 8021c58:	68a3      	ldr	r3, [r4, #8]
 8021c5a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8021c5e:	3b01      	subs	r3, #1
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	60a3      	str	r3, [r4, #8]
 8021c64:	da04      	bge.n	8021c70 <__fputwc+0x40>
 8021c66:	69a2      	ldr	r2, [r4, #24]
 8021c68:	4293      	cmp	r3, r2
 8021c6a:	db1b      	blt.n	8021ca4 <__fputwc+0x74>
 8021c6c:	290a      	cmp	r1, #10
 8021c6e:	d019      	beq.n	8021ca4 <__fputwc+0x74>
 8021c70:	6823      	ldr	r3, [r4, #0]
 8021c72:	1c5a      	adds	r2, r3, #1
 8021c74:	6022      	str	r2, [r4, #0]
 8021c76:	7019      	strb	r1, [r3, #0]
 8021c78:	3601      	adds	r6, #1
 8021c7a:	e7eb      	b.n	8021c54 <__fputwc+0x24>
 8021c7c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8021c80:	463a      	mov	r2, r7
 8021c82:	a901      	add	r1, sp, #4
 8021c84:	4640      	mov	r0, r8
 8021c86:	f000 f845 	bl	8021d14 <_wcrtomb_r>
 8021c8a:	1c43      	adds	r3, r0, #1
 8021c8c:	4605      	mov	r5, r0
 8021c8e:	d1de      	bne.n	8021c4e <__fputwc+0x1e>
 8021c90:	89a3      	ldrh	r3, [r4, #12]
 8021c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021c96:	81a3      	strh	r3, [r4, #12]
 8021c98:	f04f 37ff 	mov.w	r7, #4294967295
 8021c9c:	4638      	mov	r0, r7
 8021c9e:	b003      	add	sp, #12
 8021ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ca4:	4622      	mov	r2, r4
 8021ca6:	4640      	mov	r0, r8
 8021ca8:	f000 f8ae 	bl	8021e08 <__swbuf_r>
 8021cac:	3001      	adds	r0, #1
 8021cae:	d1e3      	bne.n	8021c78 <__fputwc+0x48>
 8021cb0:	e7f2      	b.n	8021c98 <__fputwc+0x68>

08021cb2 <_fputwc_r>:
 8021cb2:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8021cb4:	07db      	lsls	r3, r3, #31
 8021cb6:	b570      	push	{r4, r5, r6, lr}
 8021cb8:	4605      	mov	r5, r0
 8021cba:	460e      	mov	r6, r1
 8021cbc:	4614      	mov	r4, r2
 8021cbe:	d405      	bmi.n	8021ccc <_fputwc_r+0x1a>
 8021cc0:	8993      	ldrh	r3, [r2, #12]
 8021cc2:	0598      	lsls	r0, r3, #22
 8021cc4:	d402      	bmi.n	8021ccc <_fputwc_r+0x1a>
 8021cc6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8021cc8:	f7fb fdca 	bl	801d860 <__retarget_lock_acquire_recursive>
 8021ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cd0:	0499      	lsls	r1, r3, #18
 8021cd2:	d406      	bmi.n	8021ce2 <_fputwc_r+0x30>
 8021cd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021cd8:	81a3      	strh	r3, [r4, #12]
 8021cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021cdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021ce0:	6663      	str	r3, [r4, #100]	@ 0x64
 8021ce2:	4622      	mov	r2, r4
 8021ce4:	4628      	mov	r0, r5
 8021ce6:	4631      	mov	r1, r6
 8021ce8:	f7ff ffa2 	bl	8021c30 <__fputwc>
 8021cec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021cee:	07da      	lsls	r2, r3, #31
 8021cf0:	4605      	mov	r5, r0
 8021cf2:	d405      	bmi.n	8021d00 <_fputwc_r+0x4e>
 8021cf4:	89a3      	ldrh	r3, [r4, #12]
 8021cf6:	059b      	lsls	r3, r3, #22
 8021cf8:	d402      	bmi.n	8021d00 <_fputwc_r+0x4e>
 8021cfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021cfc:	f7fb fdb1 	bl	801d862 <__retarget_lock_release_recursive>
 8021d00:	4628      	mov	r0, r5
 8021d02:	bd70      	pop	{r4, r5, r6, pc}

08021d04 <abort>:
 8021d04:	b508      	push	{r3, lr}
 8021d06:	2006      	movs	r0, #6
 8021d08:	f000 f8f0 	bl	8021eec <raise>
 8021d0c:	2001      	movs	r0, #1
 8021d0e:	f7e2 f86d 	bl	8003dec <_exit>
	...

08021d14 <_wcrtomb_r>:
 8021d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d16:	4c09      	ldr	r4, [pc, #36]	@ (8021d3c <_wcrtomb_r+0x28>)
 8021d18:	b085      	sub	sp, #20
 8021d1a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8021d1e:	4605      	mov	r5, r0
 8021d20:	461e      	mov	r6, r3
 8021d22:	b909      	cbnz	r1, 8021d28 <_wcrtomb_r+0x14>
 8021d24:	460a      	mov	r2, r1
 8021d26:	a901      	add	r1, sp, #4
 8021d28:	47b8      	blx	r7
 8021d2a:	1c43      	adds	r3, r0, #1
 8021d2c:	bf01      	itttt	eq
 8021d2e:	2300      	moveq	r3, #0
 8021d30:	6033      	streq	r3, [r6, #0]
 8021d32:	238a      	moveq	r3, #138	@ 0x8a
 8021d34:	602b      	streq	r3, [r5, #0]
 8021d36:	b005      	add	sp, #20
 8021d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d3a:	bf00      	nop
 8021d3c:	2000068c 	.word	0x2000068c

08021d40 <__swhatbuf_r>:
 8021d40:	b570      	push	{r4, r5, r6, lr}
 8021d42:	460c      	mov	r4, r1
 8021d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d48:	2900      	cmp	r1, #0
 8021d4a:	b096      	sub	sp, #88	@ 0x58
 8021d4c:	4615      	mov	r5, r2
 8021d4e:	461e      	mov	r6, r3
 8021d50:	da07      	bge.n	8021d62 <__swhatbuf_r+0x22>
 8021d52:	89a1      	ldrh	r1, [r4, #12]
 8021d54:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8021d58:	d117      	bne.n	8021d8a <__swhatbuf_r+0x4a>
 8021d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021d5e:	4608      	mov	r0, r1
 8021d60:	e00f      	b.n	8021d82 <__swhatbuf_r+0x42>
 8021d62:	466a      	mov	r2, sp
 8021d64:	f000 f8ca 	bl	8021efc <_fstat_r>
 8021d68:	2800      	cmp	r0, #0
 8021d6a:	dbf2      	blt.n	8021d52 <__swhatbuf_r+0x12>
 8021d6c:	9901      	ldr	r1, [sp, #4]
 8021d6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021d72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021d76:	4259      	negs	r1, r3
 8021d78:	4159      	adcs	r1, r3
 8021d7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8021d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021d82:	6031      	str	r1, [r6, #0]
 8021d84:	602b      	str	r3, [r5, #0]
 8021d86:	b016      	add	sp, #88	@ 0x58
 8021d88:	bd70      	pop	{r4, r5, r6, pc}
 8021d8a:	2100      	movs	r1, #0
 8021d8c:	2340      	movs	r3, #64	@ 0x40
 8021d8e:	e7e6      	b.n	8021d5e <__swhatbuf_r+0x1e>

08021d90 <__smakebuf_r>:
 8021d90:	898b      	ldrh	r3, [r1, #12]
 8021d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021d94:	079d      	lsls	r5, r3, #30
 8021d96:	4606      	mov	r6, r0
 8021d98:	460c      	mov	r4, r1
 8021d9a:	d507      	bpl.n	8021dac <__smakebuf_r+0x1c>
 8021d9c:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8021da0:	6023      	str	r3, [r4, #0]
 8021da2:	6123      	str	r3, [r4, #16]
 8021da4:	2301      	movs	r3, #1
 8021da6:	6163      	str	r3, [r4, #20]
 8021da8:	b003      	add	sp, #12
 8021daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021dac:	ab01      	add	r3, sp, #4
 8021dae:	466a      	mov	r2, sp
 8021db0:	f7ff ffc6 	bl	8021d40 <__swhatbuf_r>
 8021db4:	9f00      	ldr	r7, [sp, #0]
 8021db6:	4605      	mov	r5, r0
 8021db8:	4639      	mov	r1, r7
 8021dba:	4630      	mov	r0, r6
 8021dbc:	f7fb fe86 	bl	801dacc <_malloc_r>
 8021dc0:	b948      	cbnz	r0, 8021dd6 <__smakebuf_r+0x46>
 8021dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021dc6:	059a      	lsls	r2, r3, #22
 8021dc8:	d4ee      	bmi.n	8021da8 <__smakebuf_r+0x18>
 8021dca:	f023 0303 	bic.w	r3, r3, #3
 8021dce:	f043 0302 	orr.w	r3, r3, #2
 8021dd2:	81a3      	strh	r3, [r4, #12]
 8021dd4:	e7e2      	b.n	8021d9c <__smakebuf_r+0xc>
 8021dd6:	89a3      	ldrh	r3, [r4, #12]
 8021dd8:	6020      	str	r0, [r4, #0]
 8021dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021dde:	81a3      	strh	r3, [r4, #12]
 8021de0:	9b01      	ldr	r3, [sp, #4]
 8021de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021de6:	b15b      	cbz	r3, 8021e00 <__smakebuf_r+0x70>
 8021de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021dec:	4630      	mov	r0, r6
 8021dee:	f000 f897 	bl	8021f20 <_isatty_r>
 8021df2:	b128      	cbz	r0, 8021e00 <__smakebuf_r+0x70>
 8021df4:	89a3      	ldrh	r3, [r4, #12]
 8021df6:	f023 0303 	bic.w	r3, r3, #3
 8021dfa:	f043 0301 	orr.w	r3, r3, #1
 8021dfe:	81a3      	strh	r3, [r4, #12]
 8021e00:	89a3      	ldrh	r3, [r4, #12]
 8021e02:	431d      	orrs	r5, r3
 8021e04:	81a5      	strh	r5, [r4, #12]
 8021e06:	e7cf      	b.n	8021da8 <__smakebuf_r+0x18>

08021e08 <__swbuf_r>:
 8021e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e0a:	460e      	mov	r6, r1
 8021e0c:	4614      	mov	r4, r2
 8021e0e:	4605      	mov	r5, r0
 8021e10:	b118      	cbz	r0, 8021e1a <__swbuf_r+0x12>
 8021e12:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8021e14:	b90b      	cbnz	r3, 8021e1a <__swbuf_r+0x12>
 8021e16:	f7fb fbcf 	bl	801d5b8 <__sinit>
 8021e1a:	69a3      	ldr	r3, [r4, #24]
 8021e1c:	60a3      	str	r3, [r4, #8]
 8021e1e:	89a3      	ldrh	r3, [r4, #12]
 8021e20:	0719      	lsls	r1, r3, #28
 8021e22:	d501      	bpl.n	8021e28 <__swbuf_r+0x20>
 8021e24:	6923      	ldr	r3, [r4, #16]
 8021e26:	b943      	cbnz	r3, 8021e3a <__swbuf_r+0x32>
 8021e28:	4621      	mov	r1, r4
 8021e2a:	4628      	mov	r0, r5
 8021e2c:	f7ff feaa 	bl	8021b84 <__swsetup_r>
 8021e30:	b118      	cbz	r0, 8021e3a <__swbuf_r+0x32>
 8021e32:	f04f 37ff 	mov.w	r7, #4294967295
 8021e36:	4638      	mov	r0, r7
 8021e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e3e:	b2f6      	uxtb	r6, r6
 8021e40:	049a      	lsls	r2, r3, #18
 8021e42:	4637      	mov	r7, r6
 8021e44:	d406      	bmi.n	8021e54 <__swbuf_r+0x4c>
 8021e46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021e4a:	81a3      	strh	r3, [r4, #12]
 8021e4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021e4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8021e52:	6663      	str	r3, [r4, #100]	@ 0x64
 8021e54:	6823      	ldr	r3, [r4, #0]
 8021e56:	6922      	ldr	r2, [r4, #16]
 8021e58:	1a98      	subs	r0, r3, r2
 8021e5a:	6963      	ldr	r3, [r4, #20]
 8021e5c:	4283      	cmp	r3, r0
 8021e5e:	dc05      	bgt.n	8021e6c <__swbuf_r+0x64>
 8021e60:	4621      	mov	r1, r4
 8021e62:	4628      	mov	r0, r5
 8021e64:	f7fd fb34 	bl	801f4d0 <_fflush_r>
 8021e68:	2800      	cmp	r0, #0
 8021e6a:	d1e2      	bne.n	8021e32 <__swbuf_r+0x2a>
 8021e6c:	68a3      	ldr	r3, [r4, #8]
 8021e6e:	3b01      	subs	r3, #1
 8021e70:	60a3      	str	r3, [r4, #8]
 8021e72:	6823      	ldr	r3, [r4, #0]
 8021e74:	1c5a      	adds	r2, r3, #1
 8021e76:	6022      	str	r2, [r4, #0]
 8021e78:	701e      	strb	r6, [r3, #0]
 8021e7a:	6962      	ldr	r2, [r4, #20]
 8021e7c:	1c43      	adds	r3, r0, #1
 8021e7e:	429a      	cmp	r2, r3
 8021e80:	d004      	beq.n	8021e8c <__swbuf_r+0x84>
 8021e82:	89a3      	ldrh	r3, [r4, #12]
 8021e84:	07db      	lsls	r3, r3, #31
 8021e86:	d5d6      	bpl.n	8021e36 <__swbuf_r+0x2e>
 8021e88:	2e0a      	cmp	r6, #10
 8021e8a:	d1d4      	bne.n	8021e36 <__swbuf_r+0x2e>
 8021e8c:	4621      	mov	r1, r4
 8021e8e:	4628      	mov	r0, r5
 8021e90:	f7fd fb1e 	bl	801f4d0 <_fflush_r>
 8021e94:	2800      	cmp	r0, #0
 8021e96:	d0ce      	beq.n	8021e36 <__swbuf_r+0x2e>
 8021e98:	e7cb      	b.n	8021e32 <__swbuf_r+0x2a>

08021e9a <_raise_r>:
 8021e9a:	291f      	cmp	r1, #31
 8021e9c:	b538      	push	{r3, r4, r5, lr}
 8021e9e:	4605      	mov	r5, r0
 8021ea0:	460c      	mov	r4, r1
 8021ea2:	d904      	bls.n	8021eae <_raise_r+0x14>
 8021ea4:	2316      	movs	r3, #22
 8021ea6:	6003      	str	r3, [r0, #0]
 8021ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8021eac:	bd38      	pop	{r3, r4, r5, pc}
 8021eae:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8021eb2:	b112      	cbz	r2, 8021eba <_raise_r+0x20>
 8021eb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021eb8:	b94b      	cbnz	r3, 8021ece <_raise_r+0x34>
 8021eba:	4628      	mov	r0, r5
 8021ebc:	f000 f852 	bl	8021f64 <_getpid_r>
 8021ec0:	4622      	mov	r2, r4
 8021ec2:	4601      	mov	r1, r0
 8021ec4:	4628      	mov	r0, r5
 8021ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021eca:	f000 b839 	b.w	8021f40 <_kill_r>
 8021ece:	2b01      	cmp	r3, #1
 8021ed0:	d00a      	beq.n	8021ee8 <_raise_r+0x4e>
 8021ed2:	1c59      	adds	r1, r3, #1
 8021ed4:	d103      	bne.n	8021ede <_raise_r+0x44>
 8021ed6:	2316      	movs	r3, #22
 8021ed8:	6003      	str	r3, [r0, #0]
 8021eda:	2001      	movs	r0, #1
 8021edc:	e7e6      	b.n	8021eac <_raise_r+0x12>
 8021ede:	2100      	movs	r1, #0
 8021ee0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021ee4:	4620      	mov	r0, r4
 8021ee6:	4798      	blx	r3
 8021ee8:	2000      	movs	r0, #0
 8021eea:	e7df      	b.n	8021eac <_raise_r+0x12>

08021eec <raise>:
 8021eec:	4b02      	ldr	r3, [pc, #8]	@ (8021ef8 <raise+0xc>)
 8021eee:	4601      	mov	r1, r0
 8021ef0:	6818      	ldr	r0, [r3, #0]
 8021ef2:	f7ff bfd2 	b.w	8021e9a <_raise_r>
 8021ef6:	bf00      	nop
 8021ef8:	20000150 	.word	0x20000150

08021efc <_fstat_r>:
 8021efc:	b538      	push	{r3, r4, r5, lr}
 8021efe:	4d07      	ldr	r5, [pc, #28]	@ (8021f1c <_fstat_r+0x20>)
 8021f00:	2300      	movs	r3, #0
 8021f02:	4604      	mov	r4, r0
 8021f04:	4608      	mov	r0, r1
 8021f06:	4611      	mov	r1, r2
 8021f08:	602b      	str	r3, [r5, #0]
 8021f0a:	f7e1 ffbf 	bl	8003e8c <_fstat>
 8021f0e:	1c43      	adds	r3, r0, #1
 8021f10:	d102      	bne.n	8021f18 <_fstat_r+0x1c>
 8021f12:	682b      	ldr	r3, [r5, #0]
 8021f14:	b103      	cbz	r3, 8021f18 <_fstat_r+0x1c>
 8021f16:	6023      	str	r3, [r4, #0]
 8021f18:	bd38      	pop	{r3, r4, r5, pc}
 8021f1a:	bf00      	nop
 8021f1c:	2000d4ac 	.word	0x2000d4ac

08021f20 <_isatty_r>:
 8021f20:	b538      	push	{r3, r4, r5, lr}
 8021f22:	4d06      	ldr	r5, [pc, #24]	@ (8021f3c <_isatty_r+0x1c>)
 8021f24:	2300      	movs	r3, #0
 8021f26:	4604      	mov	r4, r0
 8021f28:	4608      	mov	r0, r1
 8021f2a:	602b      	str	r3, [r5, #0]
 8021f2c:	f7e1 ffbe 	bl	8003eac <_isatty>
 8021f30:	1c43      	adds	r3, r0, #1
 8021f32:	d102      	bne.n	8021f3a <_isatty_r+0x1a>
 8021f34:	682b      	ldr	r3, [r5, #0]
 8021f36:	b103      	cbz	r3, 8021f3a <_isatty_r+0x1a>
 8021f38:	6023      	str	r3, [r4, #0]
 8021f3a:	bd38      	pop	{r3, r4, r5, pc}
 8021f3c:	2000d4ac 	.word	0x2000d4ac

08021f40 <_kill_r>:
 8021f40:	b538      	push	{r3, r4, r5, lr}
 8021f42:	4d07      	ldr	r5, [pc, #28]	@ (8021f60 <_kill_r+0x20>)
 8021f44:	2300      	movs	r3, #0
 8021f46:	4604      	mov	r4, r0
 8021f48:	4608      	mov	r0, r1
 8021f4a:	4611      	mov	r1, r2
 8021f4c:	602b      	str	r3, [r5, #0]
 8021f4e:	f7e1 ff3d 	bl	8003dcc <_kill>
 8021f52:	1c43      	adds	r3, r0, #1
 8021f54:	d102      	bne.n	8021f5c <_kill_r+0x1c>
 8021f56:	682b      	ldr	r3, [r5, #0]
 8021f58:	b103      	cbz	r3, 8021f5c <_kill_r+0x1c>
 8021f5a:	6023      	str	r3, [r4, #0]
 8021f5c:	bd38      	pop	{r3, r4, r5, pc}
 8021f5e:	bf00      	nop
 8021f60:	2000d4ac 	.word	0x2000d4ac

08021f64 <_getpid_r>:
 8021f64:	f7e1 bf2a 	b.w	8003dbc <_getpid>

08021f68 <atan2>:
 8021f68:	f000 bdce 	b.w	8022b08 <__ieee754_atan2>

08021f6c <pow>:
 8021f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f6e:	ed2d 8b02 	vpush	{d8}
 8021f72:	eeb0 8a40 	vmov.f32	s16, s0
 8021f76:	eef0 8a60 	vmov.f32	s17, s1
 8021f7a:	ec55 4b11 	vmov	r4, r5, d1
 8021f7e:	f000 fe8b 	bl	8022c98 <__ieee754_pow>
 8021f82:	4622      	mov	r2, r4
 8021f84:	462b      	mov	r3, r5
 8021f86:	4620      	mov	r0, r4
 8021f88:	4629      	mov	r1, r5
 8021f8a:	ec57 6b10 	vmov	r6, r7, d0
 8021f8e:	f7de fdcd 	bl	8000b2c <__aeabi_dcmpun>
 8021f92:	2800      	cmp	r0, #0
 8021f94:	d13b      	bne.n	802200e <pow+0xa2>
 8021f96:	ec51 0b18 	vmov	r0, r1, d8
 8021f9a:	2200      	movs	r2, #0
 8021f9c:	2300      	movs	r3, #0
 8021f9e:	f7de fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8021fa2:	b1b8      	cbz	r0, 8021fd4 <pow+0x68>
 8021fa4:	2200      	movs	r2, #0
 8021fa6:	2300      	movs	r3, #0
 8021fa8:	4620      	mov	r0, r4
 8021faa:	4629      	mov	r1, r5
 8021fac:	f7de fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8021fb0:	2800      	cmp	r0, #0
 8021fb2:	d146      	bne.n	8022042 <pow+0xd6>
 8021fb4:	ec45 4b10 	vmov	d0, r4, r5
 8021fb8:	f000 fabe 	bl	8022538 <finite>
 8021fbc:	b338      	cbz	r0, 802200e <pow+0xa2>
 8021fbe:	2200      	movs	r2, #0
 8021fc0:	2300      	movs	r3, #0
 8021fc2:	4620      	mov	r0, r4
 8021fc4:	4629      	mov	r1, r5
 8021fc6:	f7de fd89 	bl	8000adc <__aeabi_dcmplt>
 8021fca:	b300      	cbz	r0, 802200e <pow+0xa2>
 8021fcc:	f7fb fc1c 	bl	801d808 <__errno>
 8021fd0:	2322      	movs	r3, #34	@ 0x22
 8021fd2:	e01b      	b.n	802200c <pow+0xa0>
 8021fd4:	ec47 6b10 	vmov	d0, r6, r7
 8021fd8:	f000 faae 	bl	8022538 <finite>
 8021fdc:	b9e0      	cbnz	r0, 8022018 <pow+0xac>
 8021fde:	eeb0 0a48 	vmov.f32	s0, s16
 8021fe2:	eef0 0a68 	vmov.f32	s1, s17
 8021fe6:	f000 faa7 	bl	8022538 <finite>
 8021fea:	b1a8      	cbz	r0, 8022018 <pow+0xac>
 8021fec:	ec45 4b10 	vmov	d0, r4, r5
 8021ff0:	f000 faa2 	bl	8022538 <finite>
 8021ff4:	b180      	cbz	r0, 8022018 <pow+0xac>
 8021ff6:	4632      	mov	r2, r6
 8021ff8:	463b      	mov	r3, r7
 8021ffa:	4630      	mov	r0, r6
 8021ffc:	4639      	mov	r1, r7
 8021ffe:	f7de fd95 	bl	8000b2c <__aeabi_dcmpun>
 8022002:	2800      	cmp	r0, #0
 8022004:	d0e2      	beq.n	8021fcc <pow+0x60>
 8022006:	f7fb fbff 	bl	801d808 <__errno>
 802200a:	2321      	movs	r3, #33	@ 0x21
 802200c:	6003      	str	r3, [r0, #0]
 802200e:	ecbd 8b02 	vpop	{d8}
 8022012:	ec47 6b10 	vmov	d0, r6, r7
 8022016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022018:	2200      	movs	r2, #0
 802201a:	2300      	movs	r3, #0
 802201c:	4630      	mov	r0, r6
 802201e:	4639      	mov	r1, r7
 8022020:	f7de fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8022024:	2800      	cmp	r0, #0
 8022026:	d0f2      	beq.n	802200e <pow+0xa2>
 8022028:	eeb0 0a48 	vmov.f32	s0, s16
 802202c:	eef0 0a68 	vmov.f32	s1, s17
 8022030:	f000 fa82 	bl	8022538 <finite>
 8022034:	2800      	cmp	r0, #0
 8022036:	d0ea      	beq.n	802200e <pow+0xa2>
 8022038:	ec45 4b10 	vmov	d0, r4, r5
 802203c:	f000 fa7c 	bl	8022538 <finite>
 8022040:	e7c3      	b.n	8021fca <pow+0x5e>
 8022042:	4f01      	ldr	r7, [pc, #4]	@ (8022048 <pow+0xdc>)
 8022044:	2600      	movs	r6, #0
 8022046:	e7e2      	b.n	802200e <pow+0xa2>
 8022048:	3ff00000 	.word	0x3ff00000

0802204c <sqrt>:
 802204c:	b538      	push	{r3, r4, r5, lr}
 802204e:	ed2d 8b02 	vpush	{d8}
 8022052:	ec55 4b10 	vmov	r4, r5, d0
 8022056:	f000 fa7b 	bl	8022550 <__ieee754_sqrt>
 802205a:	4622      	mov	r2, r4
 802205c:	462b      	mov	r3, r5
 802205e:	4620      	mov	r0, r4
 8022060:	4629      	mov	r1, r5
 8022062:	eeb0 8a40 	vmov.f32	s16, s0
 8022066:	eef0 8a60 	vmov.f32	s17, s1
 802206a:	f7de fd5f 	bl	8000b2c <__aeabi_dcmpun>
 802206e:	b990      	cbnz	r0, 8022096 <sqrt+0x4a>
 8022070:	2200      	movs	r2, #0
 8022072:	2300      	movs	r3, #0
 8022074:	4620      	mov	r0, r4
 8022076:	4629      	mov	r1, r5
 8022078:	f7de fd30 	bl	8000adc <__aeabi_dcmplt>
 802207c:	b158      	cbz	r0, 8022096 <sqrt+0x4a>
 802207e:	f7fb fbc3 	bl	801d808 <__errno>
 8022082:	2321      	movs	r3, #33	@ 0x21
 8022084:	6003      	str	r3, [r0, #0]
 8022086:	2200      	movs	r2, #0
 8022088:	2300      	movs	r3, #0
 802208a:	4610      	mov	r0, r2
 802208c:	4619      	mov	r1, r3
 802208e:	f7de fbdd 	bl	800084c <__aeabi_ddiv>
 8022092:	ec41 0b18 	vmov	d8, r0, r1
 8022096:	eeb0 0a48 	vmov.f32	s0, s16
 802209a:	eef0 0a68 	vmov.f32	s1, s17
 802209e:	ecbd 8b02 	vpop	{d8}
 80220a2:	bd38      	pop	{r3, r4, r5, pc}
 80220a4:	0000      	movs	r0, r0
	...

080220a8 <atan>:
 80220a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220ac:	ec55 4b10 	vmov	r4, r5, d0
 80220b0:	4bbf      	ldr	r3, [pc, #764]	@ (80223b0 <atan+0x308>)
 80220b2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80220b6:	429e      	cmp	r6, r3
 80220b8:	46ab      	mov	fp, r5
 80220ba:	d918      	bls.n	80220ee <atan+0x46>
 80220bc:	4bbd      	ldr	r3, [pc, #756]	@ (80223b4 <atan+0x30c>)
 80220be:	429e      	cmp	r6, r3
 80220c0:	d801      	bhi.n	80220c6 <atan+0x1e>
 80220c2:	d109      	bne.n	80220d8 <atan+0x30>
 80220c4:	b144      	cbz	r4, 80220d8 <atan+0x30>
 80220c6:	4622      	mov	r2, r4
 80220c8:	462b      	mov	r3, r5
 80220ca:	4620      	mov	r0, r4
 80220cc:	4629      	mov	r1, r5
 80220ce:	f7de f8dd 	bl	800028c <__adddf3>
 80220d2:	4604      	mov	r4, r0
 80220d4:	460d      	mov	r5, r1
 80220d6:	e006      	b.n	80220e6 <atan+0x3e>
 80220d8:	f1bb 0f00 	cmp.w	fp, #0
 80220dc:	f340 812b 	ble.w	8022336 <atan+0x28e>
 80220e0:	a597      	add	r5, pc, #604	@ (adr r5, 8022340 <atan+0x298>)
 80220e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80220e6:	ec45 4b10 	vmov	d0, r4, r5
 80220ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220ee:	4bb2      	ldr	r3, [pc, #712]	@ (80223b8 <atan+0x310>)
 80220f0:	429e      	cmp	r6, r3
 80220f2:	d813      	bhi.n	802211c <atan+0x74>
 80220f4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80220f8:	429e      	cmp	r6, r3
 80220fa:	d80c      	bhi.n	8022116 <atan+0x6e>
 80220fc:	a392      	add	r3, pc, #584	@ (adr r3, 8022348 <atan+0x2a0>)
 80220fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022102:	4620      	mov	r0, r4
 8022104:	4629      	mov	r1, r5
 8022106:	f7de f8c1 	bl	800028c <__adddf3>
 802210a:	4bac      	ldr	r3, [pc, #688]	@ (80223bc <atan+0x314>)
 802210c:	2200      	movs	r2, #0
 802210e:	f7de fd03 	bl	8000b18 <__aeabi_dcmpgt>
 8022112:	2800      	cmp	r0, #0
 8022114:	d1e7      	bne.n	80220e6 <atan+0x3e>
 8022116:	f04f 3aff 	mov.w	sl, #4294967295
 802211a:	e029      	b.n	8022170 <atan+0xc8>
 802211c:	f000 f9b0 	bl	8022480 <fabs>
 8022120:	4ba7      	ldr	r3, [pc, #668]	@ (80223c0 <atan+0x318>)
 8022122:	429e      	cmp	r6, r3
 8022124:	ec55 4b10 	vmov	r4, r5, d0
 8022128:	f200 80bc 	bhi.w	80222a4 <atan+0x1fc>
 802212c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8022130:	429e      	cmp	r6, r3
 8022132:	f200 809e 	bhi.w	8022272 <atan+0x1ca>
 8022136:	4622      	mov	r2, r4
 8022138:	462b      	mov	r3, r5
 802213a:	4620      	mov	r0, r4
 802213c:	4629      	mov	r1, r5
 802213e:	f7de f8a5 	bl	800028c <__adddf3>
 8022142:	4b9e      	ldr	r3, [pc, #632]	@ (80223bc <atan+0x314>)
 8022144:	2200      	movs	r2, #0
 8022146:	f7de f89f 	bl	8000288 <__aeabi_dsub>
 802214a:	2200      	movs	r2, #0
 802214c:	4606      	mov	r6, r0
 802214e:	460f      	mov	r7, r1
 8022150:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8022154:	4620      	mov	r0, r4
 8022156:	4629      	mov	r1, r5
 8022158:	f7de f898 	bl	800028c <__adddf3>
 802215c:	4602      	mov	r2, r0
 802215e:	460b      	mov	r3, r1
 8022160:	4630      	mov	r0, r6
 8022162:	4639      	mov	r1, r7
 8022164:	f7de fb72 	bl	800084c <__aeabi_ddiv>
 8022168:	f04f 0a00 	mov.w	sl, #0
 802216c:	4604      	mov	r4, r0
 802216e:	460d      	mov	r5, r1
 8022170:	4622      	mov	r2, r4
 8022172:	462b      	mov	r3, r5
 8022174:	4620      	mov	r0, r4
 8022176:	4629      	mov	r1, r5
 8022178:	f7de fa3e 	bl	80005f8 <__aeabi_dmul>
 802217c:	4602      	mov	r2, r0
 802217e:	460b      	mov	r3, r1
 8022180:	4680      	mov	r8, r0
 8022182:	4689      	mov	r9, r1
 8022184:	f7de fa38 	bl	80005f8 <__aeabi_dmul>
 8022188:	a371      	add	r3, pc, #452	@ (adr r3, 8022350 <atan+0x2a8>)
 802218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802218e:	4606      	mov	r6, r0
 8022190:	460f      	mov	r7, r1
 8022192:	f7de fa31 	bl	80005f8 <__aeabi_dmul>
 8022196:	a370      	add	r3, pc, #448	@ (adr r3, 8022358 <atan+0x2b0>)
 8022198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802219c:	f7de f876 	bl	800028c <__adddf3>
 80221a0:	4632      	mov	r2, r6
 80221a2:	463b      	mov	r3, r7
 80221a4:	f7de fa28 	bl	80005f8 <__aeabi_dmul>
 80221a8:	a36d      	add	r3, pc, #436	@ (adr r3, 8022360 <atan+0x2b8>)
 80221aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ae:	f7de f86d 	bl	800028c <__adddf3>
 80221b2:	4632      	mov	r2, r6
 80221b4:	463b      	mov	r3, r7
 80221b6:	f7de fa1f 	bl	80005f8 <__aeabi_dmul>
 80221ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8022368 <atan+0x2c0>)
 80221bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221c0:	f7de f864 	bl	800028c <__adddf3>
 80221c4:	4632      	mov	r2, r6
 80221c6:	463b      	mov	r3, r7
 80221c8:	f7de fa16 	bl	80005f8 <__aeabi_dmul>
 80221cc:	a368      	add	r3, pc, #416	@ (adr r3, 8022370 <atan+0x2c8>)
 80221ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221d2:	f7de f85b 	bl	800028c <__adddf3>
 80221d6:	4632      	mov	r2, r6
 80221d8:	463b      	mov	r3, r7
 80221da:	f7de fa0d 	bl	80005f8 <__aeabi_dmul>
 80221de:	a366      	add	r3, pc, #408	@ (adr r3, 8022378 <atan+0x2d0>)
 80221e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221e4:	f7de f852 	bl	800028c <__adddf3>
 80221e8:	4642      	mov	r2, r8
 80221ea:	464b      	mov	r3, r9
 80221ec:	f7de fa04 	bl	80005f8 <__aeabi_dmul>
 80221f0:	a363      	add	r3, pc, #396	@ (adr r3, 8022380 <atan+0x2d8>)
 80221f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221f6:	4680      	mov	r8, r0
 80221f8:	4689      	mov	r9, r1
 80221fa:	4630      	mov	r0, r6
 80221fc:	4639      	mov	r1, r7
 80221fe:	f7de f9fb 	bl	80005f8 <__aeabi_dmul>
 8022202:	a361      	add	r3, pc, #388	@ (adr r3, 8022388 <atan+0x2e0>)
 8022204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022208:	f7de f83e 	bl	8000288 <__aeabi_dsub>
 802220c:	4632      	mov	r2, r6
 802220e:	463b      	mov	r3, r7
 8022210:	f7de f9f2 	bl	80005f8 <__aeabi_dmul>
 8022214:	a35e      	add	r3, pc, #376	@ (adr r3, 8022390 <atan+0x2e8>)
 8022216:	e9d3 2300 	ldrd	r2, r3, [r3]
 802221a:	f7de f835 	bl	8000288 <__aeabi_dsub>
 802221e:	4632      	mov	r2, r6
 8022220:	463b      	mov	r3, r7
 8022222:	f7de f9e9 	bl	80005f8 <__aeabi_dmul>
 8022226:	a35c      	add	r3, pc, #368	@ (adr r3, 8022398 <atan+0x2f0>)
 8022228:	e9d3 2300 	ldrd	r2, r3, [r3]
 802222c:	f7de f82c 	bl	8000288 <__aeabi_dsub>
 8022230:	4632      	mov	r2, r6
 8022232:	463b      	mov	r3, r7
 8022234:	f7de f9e0 	bl	80005f8 <__aeabi_dmul>
 8022238:	a359      	add	r3, pc, #356	@ (adr r3, 80223a0 <atan+0x2f8>)
 802223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802223e:	f7de f823 	bl	8000288 <__aeabi_dsub>
 8022242:	4632      	mov	r2, r6
 8022244:	463b      	mov	r3, r7
 8022246:	f7de f9d7 	bl	80005f8 <__aeabi_dmul>
 802224a:	4602      	mov	r2, r0
 802224c:	460b      	mov	r3, r1
 802224e:	4640      	mov	r0, r8
 8022250:	4649      	mov	r1, r9
 8022252:	f7de f81b 	bl	800028c <__adddf3>
 8022256:	4622      	mov	r2, r4
 8022258:	462b      	mov	r3, r5
 802225a:	f7de f9cd 	bl	80005f8 <__aeabi_dmul>
 802225e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8022262:	4602      	mov	r2, r0
 8022264:	460b      	mov	r3, r1
 8022266:	d148      	bne.n	80222fa <atan+0x252>
 8022268:	4620      	mov	r0, r4
 802226a:	4629      	mov	r1, r5
 802226c:	f7de f80c 	bl	8000288 <__aeabi_dsub>
 8022270:	e72f      	b.n	80220d2 <atan+0x2a>
 8022272:	4b52      	ldr	r3, [pc, #328]	@ (80223bc <atan+0x314>)
 8022274:	2200      	movs	r2, #0
 8022276:	4620      	mov	r0, r4
 8022278:	4629      	mov	r1, r5
 802227a:	f7de f805 	bl	8000288 <__aeabi_dsub>
 802227e:	4b4f      	ldr	r3, [pc, #316]	@ (80223bc <atan+0x314>)
 8022280:	4606      	mov	r6, r0
 8022282:	460f      	mov	r7, r1
 8022284:	2200      	movs	r2, #0
 8022286:	4620      	mov	r0, r4
 8022288:	4629      	mov	r1, r5
 802228a:	f7dd ffff 	bl	800028c <__adddf3>
 802228e:	4602      	mov	r2, r0
 8022290:	460b      	mov	r3, r1
 8022292:	4630      	mov	r0, r6
 8022294:	4639      	mov	r1, r7
 8022296:	f7de fad9 	bl	800084c <__aeabi_ddiv>
 802229a:	f04f 0a01 	mov.w	sl, #1
 802229e:	4604      	mov	r4, r0
 80222a0:	460d      	mov	r5, r1
 80222a2:	e765      	b.n	8022170 <atan+0xc8>
 80222a4:	4b47      	ldr	r3, [pc, #284]	@ (80223c4 <atan+0x31c>)
 80222a6:	429e      	cmp	r6, r3
 80222a8:	d21c      	bcs.n	80222e4 <atan+0x23c>
 80222aa:	4b47      	ldr	r3, [pc, #284]	@ (80223c8 <atan+0x320>)
 80222ac:	2200      	movs	r2, #0
 80222ae:	4620      	mov	r0, r4
 80222b0:	4629      	mov	r1, r5
 80222b2:	f7dd ffe9 	bl	8000288 <__aeabi_dsub>
 80222b6:	4b44      	ldr	r3, [pc, #272]	@ (80223c8 <atan+0x320>)
 80222b8:	4606      	mov	r6, r0
 80222ba:	460f      	mov	r7, r1
 80222bc:	2200      	movs	r2, #0
 80222be:	4620      	mov	r0, r4
 80222c0:	4629      	mov	r1, r5
 80222c2:	f7de f999 	bl	80005f8 <__aeabi_dmul>
 80222c6:	4b3d      	ldr	r3, [pc, #244]	@ (80223bc <atan+0x314>)
 80222c8:	2200      	movs	r2, #0
 80222ca:	f7dd ffdf 	bl	800028c <__adddf3>
 80222ce:	4602      	mov	r2, r0
 80222d0:	460b      	mov	r3, r1
 80222d2:	4630      	mov	r0, r6
 80222d4:	4639      	mov	r1, r7
 80222d6:	f7de fab9 	bl	800084c <__aeabi_ddiv>
 80222da:	f04f 0a02 	mov.w	sl, #2
 80222de:	4604      	mov	r4, r0
 80222e0:	460d      	mov	r5, r1
 80222e2:	e745      	b.n	8022170 <atan+0xc8>
 80222e4:	4622      	mov	r2, r4
 80222e6:	462b      	mov	r3, r5
 80222e8:	4938      	ldr	r1, [pc, #224]	@ (80223cc <atan+0x324>)
 80222ea:	2000      	movs	r0, #0
 80222ec:	f7de faae 	bl	800084c <__aeabi_ddiv>
 80222f0:	f04f 0a03 	mov.w	sl, #3
 80222f4:	4604      	mov	r4, r0
 80222f6:	460d      	mov	r5, r1
 80222f8:	e73a      	b.n	8022170 <atan+0xc8>
 80222fa:	4b35      	ldr	r3, [pc, #212]	@ (80223d0 <atan+0x328>)
 80222fc:	4e35      	ldr	r6, [pc, #212]	@ (80223d4 <atan+0x32c>)
 80222fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8022302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022306:	f7dd ffbf 	bl	8000288 <__aeabi_dsub>
 802230a:	4622      	mov	r2, r4
 802230c:	462b      	mov	r3, r5
 802230e:	f7dd ffbb 	bl	8000288 <__aeabi_dsub>
 8022312:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8022316:	4602      	mov	r2, r0
 8022318:	460b      	mov	r3, r1
 802231a:	e9d6 0100 	ldrd	r0, r1, [r6]
 802231e:	f7dd ffb3 	bl	8000288 <__aeabi_dsub>
 8022322:	f1bb 0f00 	cmp.w	fp, #0
 8022326:	4604      	mov	r4, r0
 8022328:	460d      	mov	r5, r1
 802232a:	f6bf aedc 	bge.w	80220e6 <atan+0x3e>
 802232e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022332:	461d      	mov	r5, r3
 8022334:	e6d7      	b.n	80220e6 <atan+0x3e>
 8022336:	a51c      	add	r5, pc, #112	@ (adr r5, 80223a8 <atan+0x300>)
 8022338:	e9d5 4500 	ldrd	r4, r5, [r5]
 802233c:	e6d3      	b.n	80220e6 <atan+0x3e>
 802233e:	bf00      	nop
 8022340:	54442d18 	.word	0x54442d18
 8022344:	3ff921fb 	.word	0x3ff921fb
 8022348:	8800759c 	.word	0x8800759c
 802234c:	7e37e43c 	.word	0x7e37e43c
 8022350:	e322da11 	.word	0xe322da11
 8022354:	3f90ad3a 	.word	0x3f90ad3a
 8022358:	24760deb 	.word	0x24760deb
 802235c:	3fa97b4b 	.word	0x3fa97b4b
 8022360:	a0d03d51 	.word	0xa0d03d51
 8022364:	3fb10d66 	.word	0x3fb10d66
 8022368:	c54c206e 	.word	0xc54c206e
 802236c:	3fb745cd 	.word	0x3fb745cd
 8022370:	920083ff 	.word	0x920083ff
 8022374:	3fc24924 	.word	0x3fc24924
 8022378:	5555550d 	.word	0x5555550d
 802237c:	3fd55555 	.word	0x3fd55555
 8022380:	2c6a6c2f 	.word	0x2c6a6c2f
 8022384:	bfa2b444 	.word	0xbfa2b444
 8022388:	52defd9a 	.word	0x52defd9a
 802238c:	3fadde2d 	.word	0x3fadde2d
 8022390:	af749a6d 	.word	0xaf749a6d
 8022394:	3fb3b0f2 	.word	0x3fb3b0f2
 8022398:	fe231671 	.word	0xfe231671
 802239c:	3fbc71c6 	.word	0x3fbc71c6
 80223a0:	9998ebc4 	.word	0x9998ebc4
 80223a4:	3fc99999 	.word	0x3fc99999
 80223a8:	54442d18 	.word	0x54442d18
 80223ac:	bff921fb 	.word	0xbff921fb
 80223b0:	440fffff 	.word	0x440fffff
 80223b4:	7ff00000 	.word	0x7ff00000
 80223b8:	3fdbffff 	.word	0x3fdbffff
 80223bc:	3ff00000 	.word	0x3ff00000
 80223c0:	3ff2ffff 	.word	0x3ff2ffff
 80223c4:	40038000 	.word	0x40038000
 80223c8:	3ff80000 	.word	0x3ff80000
 80223cc:	bff00000 	.word	0xbff00000
 80223d0:	08024ed8 	.word	0x08024ed8
 80223d4:	08024ef8 	.word	0x08024ef8

080223d8 <cos>:
 80223d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80223da:	ec53 2b10 	vmov	r2, r3, d0
 80223de:	4826      	ldr	r0, [pc, #152]	@ (8022478 <cos+0xa0>)
 80223e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80223e4:	4281      	cmp	r1, r0
 80223e6:	d806      	bhi.n	80223f6 <cos+0x1e>
 80223e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8022470 <cos+0x98>
 80223ec:	b005      	add	sp, #20
 80223ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80223f2:	f000 ba05 	b.w	8022800 <__kernel_cos>
 80223f6:	4821      	ldr	r0, [pc, #132]	@ (802247c <cos+0xa4>)
 80223f8:	4281      	cmp	r1, r0
 80223fa:	d908      	bls.n	802240e <cos+0x36>
 80223fc:	4610      	mov	r0, r2
 80223fe:	4619      	mov	r1, r3
 8022400:	f7dd ff42 	bl	8000288 <__aeabi_dsub>
 8022404:	ec41 0b10 	vmov	d0, r0, r1
 8022408:	b005      	add	sp, #20
 802240a:	f85d fb04 	ldr.w	pc, [sp], #4
 802240e:	4668      	mov	r0, sp
 8022410:	f001 f986 	bl	8023720 <__ieee754_rem_pio2>
 8022414:	f000 0003 	and.w	r0, r0, #3
 8022418:	2801      	cmp	r0, #1
 802241a:	d00b      	beq.n	8022434 <cos+0x5c>
 802241c:	2802      	cmp	r0, #2
 802241e:	d015      	beq.n	802244c <cos+0x74>
 8022420:	b9d8      	cbnz	r0, 802245a <cos+0x82>
 8022422:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022426:	ed9d 0b00 	vldr	d0, [sp]
 802242a:	f000 f9e9 	bl	8022800 <__kernel_cos>
 802242e:	ec51 0b10 	vmov	r0, r1, d0
 8022432:	e7e7      	b.n	8022404 <cos+0x2c>
 8022434:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022438:	ed9d 0b00 	vldr	d0, [sp]
 802243c:	f000 faa8 	bl	8022990 <__kernel_sin>
 8022440:	ec53 2b10 	vmov	r2, r3, d0
 8022444:	4610      	mov	r0, r2
 8022446:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 802244a:	e7db      	b.n	8022404 <cos+0x2c>
 802244c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022450:	ed9d 0b00 	vldr	d0, [sp]
 8022454:	f000 f9d4 	bl	8022800 <__kernel_cos>
 8022458:	e7f2      	b.n	8022440 <cos+0x68>
 802245a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802245e:	ed9d 0b00 	vldr	d0, [sp]
 8022462:	2001      	movs	r0, #1
 8022464:	f000 fa94 	bl	8022990 <__kernel_sin>
 8022468:	e7e1      	b.n	802242e <cos+0x56>
 802246a:	bf00      	nop
 802246c:	f3af 8000 	nop.w
	...
 8022478:	3fe921fb 	.word	0x3fe921fb
 802247c:	7fefffff 	.word	0x7fefffff

08022480 <fabs>:
 8022480:	ec51 0b10 	vmov	r0, r1, d0
 8022484:	4602      	mov	r2, r0
 8022486:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802248a:	ec43 2b10 	vmov	d0, r2, r3
 802248e:	4770      	bx	lr

08022490 <sin>:
 8022490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022492:	ec53 2b10 	vmov	r2, r3, d0
 8022496:	4826      	ldr	r0, [pc, #152]	@ (8022530 <sin+0xa0>)
 8022498:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802249c:	4281      	cmp	r1, r0
 802249e:	d807      	bhi.n	80224b0 <sin+0x20>
 80224a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8022528 <sin+0x98>
 80224a4:	2000      	movs	r0, #0
 80224a6:	b005      	add	sp, #20
 80224a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80224ac:	f000 ba70 	b.w	8022990 <__kernel_sin>
 80224b0:	4820      	ldr	r0, [pc, #128]	@ (8022534 <sin+0xa4>)
 80224b2:	4281      	cmp	r1, r0
 80224b4:	d908      	bls.n	80224c8 <sin+0x38>
 80224b6:	4610      	mov	r0, r2
 80224b8:	4619      	mov	r1, r3
 80224ba:	f7dd fee5 	bl	8000288 <__aeabi_dsub>
 80224be:	ec41 0b10 	vmov	d0, r0, r1
 80224c2:	b005      	add	sp, #20
 80224c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80224c8:	4668      	mov	r0, sp
 80224ca:	f001 f929 	bl	8023720 <__ieee754_rem_pio2>
 80224ce:	f000 0003 	and.w	r0, r0, #3
 80224d2:	2801      	cmp	r0, #1
 80224d4:	d00c      	beq.n	80224f0 <sin+0x60>
 80224d6:	2802      	cmp	r0, #2
 80224d8:	d011      	beq.n	80224fe <sin+0x6e>
 80224da:	b9e8      	cbnz	r0, 8022518 <sin+0x88>
 80224dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80224e0:	ed9d 0b00 	vldr	d0, [sp]
 80224e4:	2001      	movs	r0, #1
 80224e6:	f000 fa53 	bl	8022990 <__kernel_sin>
 80224ea:	ec51 0b10 	vmov	r0, r1, d0
 80224ee:	e7e6      	b.n	80224be <sin+0x2e>
 80224f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80224f4:	ed9d 0b00 	vldr	d0, [sp]
 80224f8:	f000 f982 	bl	8022800 <__kernel_cos>
 80224fc:	e7f5      	b.n	80224ea <sin+0x5a>
 80224fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022502:	ed9d 0b00 	vldr	d0, [sp]
 8022506:	2001      	movs	r0, #1
 8022508:	f000 fa42 	bl	8022990 <__kernel_sin>
 802250c:	ec53 2b10 	vmov	r2, r3, d0
 8022510:	4610      	mov	r0, r2
 8022512:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8022516:	e7d2      	b.n	80224be <sin+0x2e>
 8022518:	ed9d 1b02 	vldr	d1, [sp, #8]
 802251c:	ed9d 0b00 	vldr	d0, [sp]
 8022520:	f000 f96e 	bl	8022800 <__kernel_cos>
 8022524:	e7f2      	b.n	802250c <sin+0x7c>
 8022526:	bf00      	nop
	...
 8022530:	3fe921fb 	.word	0x3fe921fb
 8022534:	7fefffff 	.word	0x7fefffff

08022538 <finite>:
 8022538:	b082      	sub	sp, #8
 802253a:	ed8d 0b00 	vstr	d0, [sp]
 802253e:	9801      	ldr	r0, [sp, #4]
 8022540:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8022544:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8022548:	0fc0      	lsrs	r0, r0, #31
 802254a:	b002      	add	sp, #8
 802254c:	4770      	bx	lr
	...

08022550 <__ieee754_sqrt>:
 8022550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022554:	4a68      	ldr	r2, [pc, #416]	@ (80226f8 <__ieee754_sqrt+0x1a8>)
 8022556:	ec55 4b10 	vmov	r4, r5, d0
 802255a:	43aa      	bics	r2, r5
 802255c:	462b      	mov	r3, r5
 802255e:	4621      	mov	r1, r4
 8022560:	d110      	bne.n	8022584 <__ieee754_sqrt+0x34>
 8022562:	4622      	mov	r2, r4
 8022564:	4620      	mov	r0, r4
 8022566:	4629      	mov	r1, r5
 8022568:	f7de f846 	bl	80005f8 <__aeabi_dmul>
 802256c:	4602      	mov	r2, r0
 802256e:	460b      	mov	r3, r1
 8022570:	4620      	mov	r0, r4
 8022572:	4629      	mov	r1, r5
 8022574:	f7dd fe8a 	bl	800028c <__adddf3>
 8022578:	4604      	mov	r4, r0
 802257a:	460d      	mov	r5, r1
 802257c:	ec45 4b10 	vmov	d0, r4, r5
 8022580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022584:	2d00      	cmp	r5, #0
 8022586:	dc0e      	bgt.n	80225a6 <__ieee754_sqrt+0x56>
 8022588:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802258c:	4322      	orrs	r2, r4
 802258e:	d0f5      	beq.n	802257c <__ieee754_sqrt+0x2c>
 8022590:	b19d      	cbz	r5, 80225ba <__ieee754_sqrt+0x6a>
 8022592:	4622      	mov	r2, r4
 8022594:	4620      	mov	r0, r4
 8022596:	4629      	mov	r1, r5
 8022598:	f7dd fe76 	bl	8000288 <__aeabi_dsub>
 802259c:	4602      	mov	r2, r0
 802259e:	460b      	mov	r3, r1
 80225a0:	f7de f954 	bl	800084c <__aeabi_ddiv>
 80225a4:	e7e8      	b.n	8022578 <__ieee754_sqrt+0x28>
 80225a6:	152a      	asrs	r2, r5, #20
 80225a8:	d115      	bne.n	80225d6 <__ieee754_sqrt+0x86>
 80225aa:	2000      	movs	r0, #0
 80225ac:	e009      	b.n	80225c2 <__ieee754_sqrt+0x72>
 80225ae:	0acb      	lsrs	r3, r1, #11
 80225b0:	3a15      	subs	r2, #21
 80225b2:	0549      	lsls	r1, r1, #21
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d0fa      	beq.n	80225ae <__ieee754_sqrt+0x5e>
 80225b8:	e7f7      	b.n	80225aa <__ieee754_sqrt+0x5a>
 80225ba:	462a      	mov	r2, r5
 80225bc:	e7fa      	b.n	80225b4 <__ieee754_sqrt+0x64>
 80225be:	005b      	lsls	r3, r3, #1
 80225c0:	3001      	adds	r0, #1
 80225c2:	02dc      	lsls	r4, r3, #11
 80225c4:	d5fb      	bpl.n	80225be <__ieee754_sqrt+0x6e>
 80225c6:	1e44      	subs	r4, r0, #1
 80225c8:	1b12      	subs	r2, r2, r4
 80225ca:	f1c0 0420 	rsb	r4, r0, #32
 80225ce:	fa21 f404 	lsr.w	r4, r1, r4
 80225d2:	4323      	orrs	r3, r4
 80225d4:	4081      	lsls	r1, r0
 80225d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80225da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80225de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80225e2:	07d2      	lsls	r2, r2, #31
 80225e4:	bf5c      	itt	pl
 80225e6:	005b      	lslpl	r3, r3, #1
 80225e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80225ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80225f0:	bf58      	it	pl
 80225f2:	0049      	lslpl	r1, r1, #1
 80225f4:	2600      	movs	r6, #0
 80225f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80225fa:	106d      	asrs	r5, r5, #1
 80225fc:	0049      	lsls	r1, r1, #1
 80225fe:	2016      	movs	r0, #22
 8022600:	4632      	mov	r2, r6
 8022602:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8022606:	1917      	adds	r7, r2, r4
 8022608:	429f      	cmp	r7, r3
 802260a:	bfde      	ittt	le
 802260c:	193a      	addle	r2, r7, r4
 802260e:	1bdb      	suble	r3, r3, r7
 8022610:	1936      	addle	r6, r6, r4
 8022612:	0fcf      	lsrs	r7, r1, #31
 8022614:	3801      	subs	r0, #1
 8022616:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 802261a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802261e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8022622:	d1f0      	bne.n	8022606 <__ieee754_sqrt+0xb6>
 8022624:	4604      	mov	r4, r0
 8022626:	2720      	movs	r7, #32
 8022628:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802262c:	429a      	cmp	r2, r3
 802262e:	eb00 0e0c 	add.w	lr, r0, ip
 8022632:	db02      	blt.n	802263a <__ieee754_sqrt+0xea>
 8022634:	d113      	bne.n	802265e <__ieee754_sqrt+0x10e>
 8022636:	458e      	cmp	lr, r1
 8022638:	d811      	bhi.n	802265e <__ieee754_sqrt+0x10e>
 802263a:	f1be 0f00 	cmp.w	lr, #0
 802263e:	eb0e 000c 	add.w	r0, lr, ip
 8022642:	da42      	bge.n	80226ca <__ieee754_sqrt+0x17a>
 8022644:	2800      	cmp	r0, #0
 8022646:	db40      	blt.n	80226ca <__ieee754_sqrt+0x17a>
 8022648:	f102 0801 	add.w	r8, r2, #1
 802264c:	1a9b      	subs	r3, r3, r2
 802264e:	458e      	cmp	lr, r1
 8022650:	bf88      	it	hi
 8022652:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8022656:	eba1 010e 	sub.w	r1, r1, lr
 802265a:	4464      	add	r4, ip
 802265c:	4642      	mov	r2, r8
 802265e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8022662:	3f01      	subs	r7, #1
 8022664:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8022668:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802266c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8022670:	d1dc      	bne.n	802262c <__ieee754_sqrt+0xdc>
 8022672:	4319      	orrs	r1, r3
 8022674:	d01b      	beq.n	80226ae <__ieee754_sqrt+0x15e>
 8022676:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80226fc <__ieee754_sqrt+0x1ac>
 802267a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8022700 <__ieee754_sqrt+0x1b0>
 802267e:	e9da 0100 	ldrd	r0, r1, [sl]
 8022682:	e9db 2300 	ldrd	r2, r3, [fp]
 8022686:	f7dd fdff 	bl	8000288 <__aeabi_dsub>
 802268a:	e9da 8900 	ldrd	r8, r9, [sl]
 802268e:	4602      	mov	r2, r0
 8022690:	460b      	mov	r3, r1
 8022692:	4640      	mov	r0, r8
 8022694:	4649      	mov	r1, r9
 8022696:	f7de fa2b 	bl	8000af0 <__aeabi_dcmple>
 802269a:	b140      	cbz	r0, 80226ae <__ieee754_sqrt+0x15e>
 802269c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80226a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80226a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80226a8:	d111      	bne.n	80226ce <__ieee754_sqrt+0x17e>
 80226aa:	3601      	adds	r6, #1
 80226ac:	463c      	mov	r4, r7
 80226ae:	1072      	asrs	r2, r6, #1
 80226b0:	0863      	lsrs	r3, r4, #1
 80226b2:	07f1      	lsls	r1, r6, #31
 80226b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80226b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80226bc:	bf48      	it	mi
 80226be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80226c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80226c6:	4618      	mov	r0, r3
 80226c8:	e756      	b.n	8022578 <__ieee754_sqrt+0x28>
 80226ca:	4690      	mov	r8, r2
 80226cc:	e7be      	b.n	802264c <__ieee754_sqrt+0xfc>
 80226ce:	f7dd fddd 	bl	800028c <__adddf3>
 80226d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80226d6:	4602      	mov	r2, r0
 80226d8:	460b      	mov	r3, r1
 80226da:	4640      	mov	r0, r8
 80226dc:	4649      	mov	r1, r9
 80226de:	f7de f9fd 	bl	8000adc <__aeabi_dcmplt>
 80226e2:	b120      	cbz	r0, 80226ee <__ieee754_sqrt+0x19e>
 80226e4:	1ca0      	adds	r0, r4, #2
 80226e6:	bf08      	it	eq
 80226e8:	3601      	addeq	r6, #1
 80226ea:	3402      	adds	r4, #2
 80226ec:	e7df      	b.n	80226ae <__ieee754_sqrt+0x15e>
 80226ee:	1c63      	adds	r3, r4, #1
 80226f0:	f023 0401 	bic.w	r4, r3, #1
 80226f4:	e7db      	b.n	80226ae <__ieee754_sqrt+0x15e>
 80226f6:	bf00      	nop
 80226f8:	7ff00000 	.word	0x7ff00000
 80226fc:	20000800 	.word	0x20000800
 8022700:	200007f8 	.word	0x200007f8
 8022704:	00000000 	.word	0x00000000

08022708 <floor>:
 8022708:	ec51 0b10 	vmov	r0, r1, d0
 802270c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022714:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8022718:	2e13      	cmp	r6, #19
 802271a:	460c      	mov	r4, r1
 802271c:	4605      	mov	r5, r0
 802271e:	4680      	mov	r8, r0
 8022720:	dc34      	bgt.n	802278c <floor+0x84>
 8022722:	2e00      	cmp	r6, #0
 8022724:	da17      	bge.n	8022756 <floor+0x4e>
 8022726:	a332      	add	r3, pc, #200	@ (adr r3, 80227f0 <floor+0xe8>)
 8022728:	e9d3 2300 	ldrd	r2, r3, [r3]
 802272c:	f7dd fdae 	bl	800028c <__adddf3>
 8022730:	2200      	movs	r2, #0
 8022732:	2300      	movs	r3, #0
 8022734:	f7de f9f0 	bl	8000b18 <__aeabi_dcmpgt>
 8022738:	b150      	cbz	r0, 8022750 <floor+0x48>
 802273a:	2c00      	cmp	r4, #0
 802273c:	da55      	bge.n	80227ea <floor+0xe2>
 802273e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8022742:	432c      	orrs	r4, r5
 8022744:	2500      	movs	r5, #0
 8022746:	42ac      	cmp	r4, r5
 8022748:	4c2b      	ldr	r4, [pc, #172]	@ (80227f8 <floor+0xf0>)
 802274a:	bf08      	it	eq
 802274c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8022750:	4621      	mov	r1, r4
 8022752:	4628      	mov	r0, r5
 8022754:	e023      	b.n	802279e <floor+0x96>
 8022756:	4f29      	ldr	r7, [pc, #164]	@ (80227fc <floor+0xf4>)
 8022758:	4137      	asrs	r7, r6
 802275a:	ea01 0307 	and.w	r3, r1, r7
 802275e:	4303      	orrs	r3, r0
 8022760:	d01d      	beq.n	802279e <floor+0x96>
 8022762:	a323      	add	r3, pc, #140	@ (adr r3, 80227f0 <floor+0xe8>)
 8022764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022768:	f7dd fd90 	bl	800028c <__adddf3>
 802276c:	2200      	movs	r2, #0
 802276e:	2300      	movs	r3, #0
 8022770:	f7de f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 8022774:	2800      	cmp	r0, #0
 8022776:	d0eb      	beq.n	8022750 <floor+0x48>
 8022778:	2c00      	cmp	r4, #0
 802277a:	bfbe      	ittt	lt
 802277c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8022780:	4133      	asrlt	r3, r6
 8022782:	18e4      	addlt	r4, r4, r3
 8022784:	ea24 0407 	bic.w	r4, r4, r7
 8022788:	2500      	movs	r5, #0
 802278a:	e7e1      	b.n	8022750 <floor+0x48>
 802278c:	2e33      	cmp	r6, #51	@ 0x33
 802278e:	dd0a      	ble.n	80227a6 <floor+0x9e>
 8022790:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022794:	d103      	bne.n	802279e <floor+0x96>
 8022796:	4602      	mov	r2, r0
 8022798:	460b      	mov	r3, r1
 802279a:	f7dd fd77 	bl	800028c <__adddf3>
 802279e:	ec41 0b10 	vmov	d0, r0, r1
 80227a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80227aa:	f04f 37ff 	mov.w	r7, #4294967295
 80227ae:	40df      	lsrs	r7, r3
 80227b0:	4207      	tst	r7, r0
 80227b2:	d0f4      	beq.n	802279e <floor+0x96>
 80227b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80227f0 <floor+0xe8>)
 80227b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ba:	f7dd fd67 	bl	800028c <__adddf3>
 80227be:	2200      	movs	r2, #0
 80227c0:	2300      	movs	r3, #0
 80227c2:	f7de f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 80227c6:	2800      	cmp	r0, #0
 80227c8:	d0c2      	beq.n	8022750 <floor+0x48>
 80227ca:	2c00      	cmp	r4, #0
 80227cc:	da0a      	bge.n	80227e4 <floor+0xdc>
 80227ce:	2e14      	cmp	r6, #20
 80227d0:	d101      	bne.n	80227d6 <floor+0xce>
 80227d2:	3401      	adds	r4, #1
 80227d4:	e006      	b.n	80227e4 <floor+0xdc>
 80227d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80227da:	2301      	movs	r3, #1
 80227dc:	40b3      	lsls	r3, r6
 80227de:	441d      	add	r5, r3
 80227e0:	4545      	cmp	r5, r8
 80227e2:	d3f6      	bcc.n	80227d2 <floor+0xca>
 80227e4:	ea25 0507 	bic.w	r5, r5, r7
 80227e8:	e7b2      	b.n	8022750 <floor+0x48>
 80227ea:	2500      	movs	r5, #0
 80227ec:	462c      	mov	r4, r5
 80227ee:	e7af      	b.n	8022750 <floor+0x48>
 80227f0:	8800759c 	.word	0x8800759c
 80227f4:	7e37e43c 	.word	0x7e37e43c
 80227f8:	bff00000 	.word	0xbff00000
 80227fc:	000fffff 	.word	0x000fffff

08022800 <__kernel_cos>:
 8022800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022804:	ec57 6b10 	vmov	r6, r7, d0
 8022808:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 802280c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8022810:	ed8d 1b00 	vstr	d1, [sp]
 8022814:	d206      	bcs.n	8022824 <__kernel_cos+0x24>
 8022816:	4630      	mov	r0, r6
 8022818:	4639      	mov	r1, r7
 802281a:	f7de f99d 	bl	8000b58 <__aeabi_d2iz>
 802281e:	2800      	cmp	r0, #0
 8022820:	f000 8088 	beq.w	8022934 <__kernel_cos+0x134>
 8022824:	4632      	mov	r2, r6
 8022826:	463b      	mov	r3, r7
 8022828:	4630      	mov	r0, r6
 802282a:	4639      	mov	r1, r7
 802282c:	f7dd fee4 	bl	80005f8 <__aeabi_dmul>
 8022830:	4b51      	ldr	r3, [pc, #324]	@ (8022978 <__kernel_cos+0x178>)
 8022832:	2200      	movs	r2, #0
 8022834:	4604      	mov	r4, r0
 8022836:	460d      	mov	r5, r1
 8022838:	f7dd fede 	bl	80005f8 <__aeabi_dmul>
 802283c:	a340      	add	r3, pc, #256	@ (adr r3, 8022940 <__kernel_cos+0x140>)
 802283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022842:	4682      	mov	sl, r0
 8022844:	468b      	mov	fp, r1
 8022846:	4620      	mov	r0, r4
 8022848:	4629      	mov	r1, r5
 802284a:	f7dd fed5 	bl	80005f8 <__aeabi_dmul>
 802284e:	a33e      	add	r3, pc, #248	@ (adr r3, 8022948 <__kernel_cos+0x148>)
 8022850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022854:	f7dd fd1a 	bl	800028c <__adddf3>
 8022858:	4622      	mov	r2, r4
 802285a:	462b      	mov	r3, r5
 802285c:	f7dd fecc 	bl	80005f8 <__aeabi_dmul>
 8022860:	a33b      	add	r3, pc, #236	@ (adr r3, 8022950 <__kernel_cos+0x150>)
 8022862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022866:	f7dd fd0f 	bl	8000288 <__aeabi_dsub>
 802286a:	4622      	mov	r2, r4
 802286c:	462b      	mov	r3, r5
 802286e:	f7dd fec3 	bl	80005f8 <__aeabi_dmul>
 8022872:	a339      	add	r3, pc, #228	@ (adr r3, 8022958 <__kernel_cos+0x158>)
 8022874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022878:	f7dd fd08 	bl	800028c <__adddf3>
 802287c:	4622      	mov	r2, r4
 802287e:	462b      	mov	r3, r5
 8022880:	f7dd feba 	bl	80005f8 <__aeabi_dmul>
 8022884:	a336      	add	r3, pc, #216	@ (adr r3, 8022960 <__kernel_cos+0x160>)
 8022886:	e9d3 2300 	ldrd	r2, r3, [r3]
 802288a:	f7dd fcfd 	bl	8000288 <__aeabi_dsub>
 802288e:	4622      	mov	r2, r4
 8022890:	462b      	mov	r3, r5
 8022892:	f7dd feb1 	bl	80005f8 <__aeabi_dmul>
 8022896:	a334      	add	r3, pc, #208	@ (adr r3, 8022968 <__kernel_cos+0x168>)
 8022898:	e9d3 2300 	ldrd	r2, r3, [r3]
 802289c:	f7dd fcf6 	bl	800028c <__adddf3>
 80228a0:	4622      	mov	r2, r4
 80228a2:	462b      	mov	r3, r5
 80228a4:	f7dd fea8 	bl	80005f8 <__aeabi_dmul>
 80228a8:	4622      	mov	r2, r4
 80228aa:	462b      	mov	r3, r5
 80228ac:	f7dd fea4 	bl	80005f8 <__aeabi_dmul>
 80228b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80228b4:	4604      	mov	r4, r0
 80228b6:	460d      	mov	r5, r1
 80228b8:	4630      	mov	r0, r6
 80228ba:	4639      	mov	r1, r7
 80228bc:	f7dd fe9c 	bl	80005f8 <__aeabi_dmul>
 80228c0:	460b      	mov	r3, r1
 80228c2:	4602      	mov	r2, r0
 80228c4:	4629      	mov	r1, r5
 80228c6:	4620      	mov	r0, r4
 80228c8:	f7dd fcde 	bl	8000288 <__aeabi_dsub>
 80228cc:	4b2b      	ldr	r3, [pc, #172]	@ (802297c <__kernel_cos+0x17c>)
 80228ce:	4598      	cmp	r8, r3
 80228d0:	4606      	mov	r6, r0
 80228d2:	460f      	mov	r7, r1
 80228d4:	d810      	bhi.n	80228f8 <__kernel_cos+0xf8>
 80228d6:	4602      	mov	r2, r0
 80228d8:	460b      	mov	r3, r1
 80228da:	4650      	mov	r0, sl
 80228dc:	4659      	mov	r1, fp
 80228de:	f7dd fcd3 	bl	8000288 <__aeabi_dsub>
 80228e2:	460b      	mov	r3, r1
 80228e4:	4926      	ldr	r1, [pc, #152]	@ (8022980 <__kernel_cos+0x180>)
 80228e6:	4602      	mov	r2, r0
 80228e8:	2000      	movs	r0, #0
 80228ea:	f7dd fccd 	bl	8000288 <__aeabi_dsub>
 80228ee:	ec41 0b10 	vmov	d0, r0, r1
 80228f2:	b003      	add	sp, #12
 80228f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228f8:	4b22      	ldr	r3, [pc, #136]	@ (8022984 <__kernel_cos+0x184>)
 80228fa:	4921      	ldr	r1, [pc, #132]	@ (8022980 <__kernel_cos+0x180>)
 80228fc:	4598      	cmp	r8, r3
 80228fe:	bf8c      	ite	hi
 8022900:	4d21      	ldrhi	r5, [pc, #132]	@ (8022988 <__kernel_cos+0x188>)
 8022902:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8022906:	2400      	movs	r4, #0
 8022908:	4622      	mov	r2, r4
 802290a:	462b      	mov	r3, r5
 802290c:	2000      	movs	r0, #0
 802290e:	f7dd fcbb 	bl	8000288 <__aeabi_dsub>
 8022912:	4622      	mov	r2, r4
 8022914:	4680      	mov	r8, r0
 8022916:	4689      	mov	r9, r1
 8022918:	462b      	mov	r3, r5
 802291a:	4650      	mov	r0, sl
 802291c:	4659      	mov	r1, fp
 802291e:	f7dd fcb3 	bl	8000288 <__aeabi_dsub>
 8022922:	4632      	mov	r2, r6
 8022924:	463b      	mov	r3, r7
 8022926:	f7dd fcaf 	bl	8000288 <__aeabi_dsub>
 802292a:	4602      	mov	r2, r0
 802292c:	460b      	mov	r3, r1
 802292e:	4640      	mov	r0, r8
 8022930:	4649      	mov	r1, r9
 8022932:	e7da      	b.n	80228ea <__kernel_cos+0xea>
 8022934:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8022970 <__kernel_cos+0x170>
 8022938:	e7db      	b.n	80228f2 <__kernel_cos+0xf2>
 802293a:	bf00      	nop
 802293c:	f3af 8000 	nop.w
 8022940:	be8838d4 	.word	0xbe8838d4
 8022944:	bda8fae9 	.word	0xbda8fae9
 8022948:	bdb4b1c4 	.word	0xbdb4b1c4
 802294c:	3e21ee9e 	.word	0x3e21ee9e
 8022950:	809c52ad 	.word	0x809c52ad
 8022954:	3e927e4f 	.word	0x3e927e4f
 8022958:	19cb1590 	.word	0x19cb1590
 802295c:	3efa01a0 	.word	0x3efa01a0
 8022960:	16c15177 	.word	0x16c15177
 8022964:	3f56c16c 	.word	0x3f56c16c
 8022968:	5555554c 	.word	0x5555554c
 802296c:	3fa55555 	.word	0x3fa55555
 8022970:	00000000 	.word	0x00000000
 8022974:	3ff00000 	.word	0x3ff00000
 8022978:	3fe00000 	.word	0x3fe00000
 802297c:	3fd33332 	.word	0x3fd33332
 8022980:	3ff00000 	.word	0x3ff00000
 8022984:	3fe90000 	.word	0x3fe90000
 8022988:	3fd20000 	.word	0x3fd20000
 802298c:	00000000 	.word	0x00000000

08022990 <__kernel_sin>:
 8022990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022994:	ec55 4b10 	vmov	r4, r5, d0
 8022998:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802299c:	b085      	sub	sp, #20
 802299e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80229a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80229a6:	4680      	mov	r8, r0
 80229a8:	d205      	bcs.n	80229b6 <__kernel_sin+0x26>
 80229aa:	4620      	mov	r0, r4
 80229ac:	4629      	mov	r1, r5
 80229ae:	f7de f8d3 	bl	8000b58 <__aeabi_d2iz>
 80229b2:	2800      	cmp	r0, #0
 80229b4:	d052      	beq.n	8022a5c <__kernel_sin+0xcc>
 80229b6:	4622      	mov	r2, r4
 80229b8:	462b      	mov	r3, r5
 80229ba:	4620      	mov	r0, r4
 80229bc:	4629      	mov	r1, r5
 80229be:	f7dd fe1b 	bl	80005f8 <__aeabi_dmul>
 80229c2:	4682      	mov	sl, r0
 80229c4:	468b      	mov	fp, r1
 80229c6:	4602      	mov	r2, r0
 80229c8:	460b      	mov	r3, r1
 80229ca:	4620      	mov	r0, r4
 80229cc:	4629      	mov	r1, r5
 80229ce:	f7dd fe13 	bl	80005f8 <__aeabi_dmul>
 80229d2:	a342      	add	r3, pc, #264	@ (adr r3, 8022adc <__kernel_sin+0x14c>)
 80229d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229d8:	e9cd 0100 	strd	r0, r1, [sp]
 80229dc:	4650      	mov	r0, sl
 80229de:	4659      	mov	r1, fp
 80229e0:	f7dd fe0a 	bl	80005f8 <__aeabi_dmul>
 80229e4:	a33f      	add	r3, pc, #252	@ (adr r3, 8022ae4 <__kernel_sin+0x154>)
 80229e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ea:	f7dd fc4d 	bl	8000288 <__aeabi_dsub>
 80229ee:	4652      	mov	r2, sl
 80229f0:	465b      	mov	r3, fp
 80229f2:	f7dd fe01 	bl	80005f8 <__aeabi_dmul>
 80229f6:	a33d      	add	r3, pc, #244	@ (adr r3, 8022aec <__kernel_sin+0x15c>)
 80229f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229fc:	f7dd fc46 	bl	800028c <__adddf3>
 8022a00:	4652      	mov	r2, sl
 8022a02:	465b      	mov	r3, fp
 8022a04:	f7dd fdf8 	bl	80005f8 <__aeabi_dmul>
 8022a08:	a33a      	add	r3, pc, #232	@ (adr r3, 8022af4 <__kernel_sin+0x164>)
 8022a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a0e:	f7dd fc3b 	bl	8000288 <__aeabi_dsub>
 8022a12:	4652      	mov	r2, sl
 8022a14:	465b      	mov	r3, fp
 8022a16:	f7dd fdef 	bl	80005f8 <__aeabi_dmul>
 8022a1a:	a338      	add	r3, pc, #224	@ (adr r3, 8022afc <__kernel_sin+0x16c>)
 8022a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a20:	f7dd fc34 	bl	800028c <__adddf3>
 8022a24:	4606      	mov	r6, r0
 8022a26:	460f      	mov	r7, r1
 8022a28:	f1b8 0f00 	cmp.w	r8, #0
 8022a2c:	d11b      	bne.n	8022a66 <__kernel_sin+0xd6>
 8022a2e:	4602      	mov	r2, r0
 8022a30:	460b      	mov	r3, r1
 8022a32:	4650      	mov	r0, sl
 8022a34:	4659      	mov	r1, fp
 8022a36:	f7dd fddf 	bl	80005f8 <__aeabi_dmul>
 8022a3a:	a325      	add	r3, pc, #148	@ (adr r3, 8022ad0 <__kernel_sin+0x140>)
 8022a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a40:	f7dd fc22 	bl	8000288 <__aeabi_dsub>
 8022a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022a48:	f7dd fdd6 	bl	80005f8 <__aeabi_dmul>
 8022a4c:	4602      	mov	r2, r0
 8022a4e:	460b      	mov	r3, r1
 8022a50:	4620      	mov	r0, r4
 8022a52:	4629      	mov	r1, r5
 8022a54:	f7dd fc1a 	bl	800028c <__adddf3>
 8022a58:	4604      	mov	r4, r0
 8022a5a:	460d      	mov	r5, r1
 8022a5c:	ec45 4b10 	vmov	d0, r4, r5
 8022a60:	b005      	add	sp, #20
 8022a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8022ad8 <__kernel_sin+0x148>)
 8022a6c:	2200      	movs	r2, #0
 8022a6e:	f7dd fdc3 	bl	80005f8 <__aeabi_dmul>
 8022a72:	4632      	mov	r2, r6
 8022a74:	4680      	mov	r8, r0
 8022a76:	4689      	mov	r9, r1
 8022a78:	463b      	mov	r3, r7
 8022a7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022a7e:	f7dd fdbb 	bl	80005f8 <__aeabi_dmul>
 8022a82:	4602      	mov	r2, r0
 8022a84:	460b      	mov	r3, r1
 8022a86:	4640      	mov	r0, r8
 8022a88:	4649      	mov	r1, r9
 8022a8a:	f7dd fbfd 	bl	8000288 <__aeabi_dsub>
 8022a8e:	4652      	mov	r2, sl
 8022a90:	465b      	mov	r3, fp
 8022a92:	f7dd fdb1 	bl	80005f8 <__aeabi_dmul>
 8022a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022a9a:	f7dd fbf5 	bl	8000288 <__aeabi_dsub>
 8022a9e:	a30c      	add	r3, pc, #48	@ (adr r3, 8022ad0 <__kernel_sin+0x140>)
 8022aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022aa4:	4606      	mov	r6, r0
 8022aa6:	460f      	mov	r7, r1
 8022aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022aac:	f7dd fda4 	bl	80005f8 <__aeabi_dmul>
 8022ab0:	4602      	mov	r2, r0
 8022ab2:	460b      	mov	r3, r1
 8022ab4:	4630      	mov	r0, r6
 8022ab6:	4639      	mov	r1, r7
 8022ab8:	f7dd fbe8 	bl	800028c <__adddf3>
 8022abc:	4602      	mov	r2, r0
 8022abe:	460b      	mov	r3, r1
 8022ac0:	4620      	mov	r0, r4
 8022ac2:	4629      	mov	r1, r5
 8022ac4:	f7dd fbe0 	bl	8000288 <__aeabi_dsub>
 8022ac8:	e7c6      	b.n	8022a58 <__kernel_sin+0xc8>
 8022aca:	bf00      	nop
 8022acc:	f3af 8000 	nop.w
 8022ad0:	55555549 	.word	0x55555549
 8022ad4:	3fc55555 	.word	0x3fc55555
 8022ad8:	3fe00000 	.word	0x3fe00000
 8022adc:	5acfd57c 	.word	0x5acfd57c
 8022ae0:	3de5d93a 	.word	0x3de5d93a
 8022ae4:	8a2b9ceb 	.word	0x8a2b9ceb
 8022ae8:	3e5ae5e6 	.word	0x3e5ae5e6
 8022aec:	57b1fe7d 	.word	0x57b1fe7d
 8022af0:	3ec71de3 	.word	0x3ec71de3
 8022af4:	19c161d5 	.word	0x19c161d5
 8022af8:	3f2a01a0 	.word	0x3f2a01a0
 8022afc:	1110f8a6 	.word	0x1110f8a6
 8022b00:	3f811111 	.word	0x3f811111
 8022b04:	00000000 	.word	0x00000000

08022b08 <__ieee754_atan2>:
 8022b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b0c:	ec57 6b11 	vmov	r6, r7, d1
 8022b10:	4273      	negs	r3, r6
 8022b12:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8022c90 <__ieee754_atan2+0x188>
 8022b16:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8022b1a:	4333      	orrs	r3, r6
 8022b1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8022b20:	4543      	cmp	r3, r8
 8022b22:	ec51 0b10 	vmov	r0, r1, d0
 8022b26:	4635      	mov	r5, r6
 8022b28:	d809      	bhi.n	8022b3e <__ieee754_atan2+0x36>
 8022b2a:	4244      	negs	r4, r0
 8022b2c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8022b30:	4304      	orrs	r4, r0
 8022b32:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8022b36:	4544      	cmp	r4, r8
 8022b38:	468e      	mov	lr, r1
 8022b3a:	4681      	mov	r9, r0
 8022b3c:	d907      	bls.n	8022b4e <__ieee754_atan2+0x46>
 8022b3e:	4632      	mov	r2, r6
 8022b40:	463b      	mov	r3, r7
 8022b42:	f7dd fba3 	bl	800028c <__adddf3>
 8022b46:	ec41 0b10 	vmov	d0, r0, r1
 8022b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b4e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8022b52:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8022b56:	4334      	orrs	r4, r6
 8022b58:	d103      	bne.n	8022b62 <__ieee754_atan2+0x5a>
 8022b5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b5e:	f7ff baa3 	b.w	80220a8 <atan>
 8022b62:	17bc      	asrs	r4, r7, #30
 8022b64:	f004 0402 	and.w	r4, r4, #2
 8022b68:	ea53 0909 	orrs.w	r9, r3, r9
 8022b6c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8022b70:	d107      	bne.n	8022b82 <__ieee754_atan2+0x7a>
 8022b72:	2c02      	cmp	r4, #2
 8022b74:	d05f      	beq.n	8022c36 <__ieee754_atan2+0x12e>
 8022b76:	2c03      	cmp	r4, #3
 8022b78:	d1e5      	bne.n	8022b46 <__ieee754_atan2+0x3e>
 8022b7a:	a141      	add	r1, pc, #260	@ (adr r1, 8022c80 <__ieee754_atan2+0x178>)
 8022b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022b80:	e7e1      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022b82:	4315      	orrs	r5, r2
 8022b84:	d106      	bne.n	8022b94 <__ieee754_atan2+0x8c>
 8022b86:	f1be 0f00 	cmp.w	lr, #0
 8022b8a:	da5f      	bge.n	8022c4c <__ieee754_atan2+0x144>
 8022b8c:	a13e      	add	r1, pc, #248	@ (adr r1, 8022c88 <__ieee754_atan2+0x180>)
 8022b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022b92:	e7d8      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022b94:	4542      	cmp	r2, r8
 8022b96:	d10f      	bne.n	8022bb8 <__ieee754_atan2+0xb0>
 8022b98:	4293      	cmp	r3, r2
 8022b9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8022b9e:	d107      	bne.n	8022bb0 <__ieee754_atan2+0xa8>
 8022ba0:	2c02      	cmp	r4, #2
 8022ba2:	d84c      	bhi.n	8022c3e <__ieee754_atan2+0x136>
 8022ba4:	4b34      	ldr	r3, [pc, #208]	@ (8022c78 <__ieee754_atan2+0x170>)
 8022ba6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022bae:	e7ca      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022bb0:	2c02      	cmp	r4, #2
 8022bb2:	d848      	bhi.n	8022c46 <__ieee754_atan2+0x13e>
 8022bb4:	4b31      	ldr	r3, [pc, #196]	@ (8022c7c <__ieee754_atan2+0x174>)
 8022bb6:	e7f6      	b.n	8022ba6 <__ieee754_atan2+0x9e>
 8022bb8:	4543      	cmp	r3, r8
 8022bba:	d0e4      	beq.n	8022b86 <__ieee754_atan2+0x7e>
 8022bbc:	1a9b      	subs	r3, r3, r2
 8022bbe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8022bc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8022bc6:	da1e      	bge.n	8022c06 <__ieee754_atan2+0xfe>
 8022bc8:	2f00      	cmp	r7, #0
 8022bca:	da01      	bge.n	8022bd0 <__ieee754_atan2+0xc8>
 8022bcc:	323c      	adds	r2, #60	@ 0x3c
 8022bce:	db1e      	blt.n	8022c0e <__ieee754_atan2+0x106>
 8022bd0:	4632      	mov	r2, r6
 8022bd2:	463b      	mov	r3, r7
 8022bd4:	f7dd fe3a 	bl	800084c <__aeabi_ddiv>
 8022bd8:	ec41 0b10 	vmov	d0, r0, r1
 8022bdc:	f7ff fc50 	bl	8022480 <fabs>
 8022be0:	f7ff fa62 	bl	80220a8 <atan>
 8022be4:	ec51 0b10 	vmov	r0, r1, d0
 8022be8:	2c01      	cmp	r4, #1
 8022bea:	d013      	beq.n	8022c14 <__ieee754_atan2+0x10c>
 8022bec:	2c02      	cmp	r4, #2
 8022bee:	d015      	beq.n	8022c1c <__ieee754_atan2+0x114>
 8022bf0:	2c00      	cmp	r4, #0
 8022bf2:	d0a8      	beq.n	8022b46 <__ieee754_atan2+0x3e>
 8022bf4:	a318      	add	r3, pc, #96	@ (adr r3, 8022c58 <__ieee754_atan2+0x150>)
 8022bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bfa:	f7dd fb45 	bl	8000288 <__aeabi_dsub>
 8022bfe:	a318      	add	r3, pc, #96	@ (adr r3, 8022c60 <__ieee754_atan2+0x158>)
 8022c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c04:	e014      	b.n	8022c30 <__ieee754_atan2+0x128>
 8022c06:	a118      	add	r1, pc, #96	@ (adr r1, 8022c68 <__ieee754_atan2+0x160>)
 8022c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c0c:	e7ec      	b.n	8022be8 <__ieee754_atan2+0xe0>
 8022c0e:	2000      	movs	r0, #0
 8022c10:	2100      	movs	r1, #0
 8022c12:	e7e9      	b.n	8022be8 <__ieee754_atan2+0xe0>
 8022c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022c18:	4619      	mov	r1, r3
 8022c1a:	e794      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022c1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8022c58 <__ieee754_atan2+0x150>)
 8022c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c22:	f7dd fb31 	bl	8000288 <__aeabi_dsub>
 8022c26:	4602      	mov	r2, r0
 8022c28:	460b      	mov	r3, r1
 8022c2a:	a10d      	add	r1, pc, #52	@ (adr r1, 8022c60 <__ieee754_atan2+0x158>)
 8022c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c30:	f7dd fb2a 	bl	8000288 <__aeabi_dsub>
 8022c34:	e787      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022c36:	a10a      	add	r1, pc, #40	@ (adr r1, 8022c60 <__ieee754_atan2+0x158>)
 8022c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c3c:	e783      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022c3e:	a10c      	add	r1, pc, #48	@ (adr r1, 8022c70 <__ieee754_atan2+0x168>)
 8022c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c44:	e77f      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022c46:	2000      	movs	r0, #0
 8022c48:	2100      	movs	r1, #0
 8022c4a:	e77c      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022c4c:	a106      	add	r1, pc, #24	@ (adr r1, 8022c68 <__ieee754_atan2+0x160>)
 8022c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c52:	e778      	b.n	8022b46 <__ieee754_atan2+0x3e>
 8022c54:	f3af 8000 	nop.w
 8022c58:	33145c07 	.word	0x33145c07
 8022c5c:	3ca1a626 	.word	0x3ca1a626
 8022c60:	54442d18 	.word	0x54442d18
 8022c64:	400921fb 	.word	0x400921fb
 8022c68:	54442d18 	.word	0x54442d18
 8022c6c:	3ff921fb 	.word	0x3ff921fb
 8022c70:	54442d18 	.word	0x54442d18
 8022c74:	3fe921fb 	.word	0x3fe921fb
 8022c78:	08024f30 	.word	0x08024f30
 8022c7c:	08024f18 	.word	0x08024f18
 8022c80:	54442d18 	.word	0x54442d18
 8022c84:	c00921fb 	.word	0xc00921fb
 8022c88:	54442d18 	.word	0x54442d18
 8022c8c:	bff921fb 	.word	0xbff921fb
 8022c90:	7ff00000 	.word	0x7ff00000
 8022c94:	00000000 	.word	0x00000000

08022c98 <__ieee754_pow>:
 8022c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c9c:	b091      	sub	sp, #68	@ 0x44
 8022c9e:	ed8d 1b00 	vstr	d1, [sp]
 8022ca2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8022ca6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8022caa:	ea5a 0001 	orrs.w	r0, sl, r1
 8022cae:	ec57 6b10 	vmov	r6, r7, d0
 8022cb2:	d113      	bne.n	8022cdc <__ieee754_pow+0x44>
 8022cb4:	19b3      	adds	r3, r6, r6
 8022cb6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8022cba:	4152      	adcs	r2, r2
 8022cbc:	4298      	cmp	r0, r3
 8022cbe:	4b98      	ldr	r3, [pc, #608]	@ (8022f20 <__ieee754_pow+0x288>)
 8022cc0:	4193      	sbcs	r3, r2
 8022cc2:	f080 84ea 	bcs.w	802369a <__ieee754_pow+0xa02>
 8022cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022cca:	4630      	mov	r0, r6
 8022ccc:	4639      	mov	r1, r7
 8022cce:	f7dd fadd 	bl	800028c <__adddf3>
 8022cd2:	ec41 0b10 	vmov	d0, r0, r1
 8022cd6:	b011      	add	sp, #68	@ 0x44
 8022cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cdc:	4a91      	ldr	r2, [pc, #580]	@ (8022f24 <__ieee754_pow+0x28c>)
 8022cde:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8022ce2:	4590      	cmp	r8, r2
 8022ce4:	463d      	mov	r5, r7
 8022ce6:	4633      	mov	r3, r6
 8022ce8:	d806      	bhi.n	8022cf8 <__ieee754_pow+0x60>
 8022cea:	d101      	bne.n	8022cf0 <__ieee754_pow+0x58>
 8022cec:	2e00      	cmp	r6, #0
 8022cee:	d1ea      	bne.n	8022cc6 <__ieee754_pow+0x2e>
 8022cf0:	4592      	cmp	sl, r2
 8022cf2:	d801      	bhi.n	8022cf8 <__ieee754_pow+0x60>
 8022cf4:	d10e      	bne.n	8022d14 <__ieee754_pow+0x7c>
 8022cf6:	b169      	cbz	r1, 8022d14 <__ieee754_pow+0x7c>
 8022cf8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8022cfc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8022d00:	431d      	orrs	r5, r3
 8022d02:	d1e0      	bne.n	8022cc6 <__ieee754_pow+0x2e>
 8022d04:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022d08:	18db      	adds	r3, r3, r3
 8022d0a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8022d0e:	4152      	adcs	r2, r2
 8022d10:	429d      	cmp	r5, r3
 8022d12:	e7d4      	b.n	8022cbe <__ieee754_pow+0x26>
 8022d14:	2d00      	cmp	r5, #0
 8022d16:	46c3      	mov	fp, r8
 8022d18:	da3a      	bge.n	8022d90 <__ieee754_pow+0xf8>
 8022d1a:	4a83      	ldr	r2, [pc, #524]	@ (8022f28 <__ieee754_pow+0x290>)
 8022d1c:	4592      	cmp	sl, r2
 8022d1e:	d84d      	bhi.n	8022dbc <__ieee754_pow+0x124>
 8022d20:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8022d24:	4592      	cmp	sl, r2
 8022d26:	f240 84c7 	bls.w	80236b8 <__ieee754_pow+0xa20>
 8022d2a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8022d2e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8022d32:	2a14      	cmp	r2, #20
 8022d34:	dd0f      	ble.n	8022d56 <__ieee754_pow+0xbe>
 8022d36:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8022d3a:	fa21 f402 	lsr.w	r4, r1, r2
 8022d3e:	fa04 f202 	lsl.w	r2, r4, r2
 8022d42:	428a      	cmp	r2, r1
 8022d44:	f040 84b8 	bne.w	80236b8 <__ieee754_pow+0xa20>
 8022d48:	f004 0401 	and.w	r4, r4, #1
 8022d4c:	f1c4 0402 	rsb	r4, r4, #2
 8022d50:	2900      	cmp	r1, #0
 8022d52:	d158      	bne.n	8022e06 <__ieee754_pow+0x16e>
 8022d54:	e00e      	b.n	8022d74 <__ieee754_pow+0xdc>
 8022d56:	2900      	cmp	r1, #0
 8022d58:	d154      	bne.n	8022e04 <__ieee754_pow+0x16c>
 8022d5a:	f1c2 0214 	rsb	r2, r2, #20
 8022d5e:	fa4a f402 	asr.w	r4, sl, r2
 8022d62:	fa04 f202 	lsl.w	r2, r4, r2
 8022d66:	4552      	cmp	r2, sl
 8022d68:	f040 84a3 	bne.w	80236b2 <__ieee754_pow+0xa1a>
 8022d6c:	f004 0401 	and.w	r4, r4, #1
 8022d70:	f1c4 0402 	rsb	r4, r4, #2
 8022d74:	4a6d      	ldr	r2, [pc, #436]	@ (8022f2c <__ieee754_pow+0x294>)
 8022d76:	4592      	cmp	sl, r2
 8022d78:	d12e      	bne.n	8022dd8 <__ieee754_pow+0x140>
 8022d7a:	f1b9 0f00 	cmp.w	r9, #0
 8022d7e:	f280 8494 	bge.w	80236aa <__ieee754_pow+0xa12>
 8022d82:	496a      	ldr	r1, [pc, #424]	@ (8022f2c <__ieee754_pow+0x294>)
 8022d84:	4632      	mov	r2, r6
 8022d86:	463b      	mov	r3, r7
 8022d88:	2000      	movs	r0, #0
 8022d8a:	f7dd fd5f 	bl	800084c <__aeabi_ddiv>
 8022d8e:	e7a0      	b.n	8022cd2 <__ieee754_pow+0x3a>
 8022d90:	2400      	movs	r4, #0
 8022d92:	bbc1      	cbnz	r1, 8022e06 <__ieee754_pow+0x16e>
 8022d94:	4a63      	ldr	r2, [pc, #396]	@ (8022f24 <__ieee754_pow+0x28c>)
 8022d96:	4592      	cmp	sl, r2
 8022d98:	d1ec      	bne.n	8022d74 <__ieee754_pow+0xdc>
 8022d9a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8022d9e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8022da2:	431a      	orrs	r2, r3
 8022da4:	f000 8479 	beq.w	802369a <__ieee754_pow+0xa02>
 8022da8:	4b61      	ldr	r3, [pc, #388]	@ (8022f30 <__ieee754_pow+0x298>)
 8022daa:	4598      	cmp	r8, r3
 8022dac:	d908      	bls.n	8022dc0 <__ieee754_pow+0x128>
 8022dae:	f1b9 0f00 	cmp.w	r9, #0
 8022db2:	f2c0 8476 	blt.w	80236a2 <__ieee754_pow+0xa0a>
 8022db6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022dba:	e78a      	b.n	8022cd2 <__ieee754_pow+0x3a>
 8022dbc:	2402      	movs	r4, #2
 8022dbe:	e7e8      	b.n	8022d92 <__ieee754_pow+0xfa>
 8022dc0:	f1b9 0f00 	cmp.w	r9, #0
 8022dc4:	f04f 0000 	mov.w	r0, #0
 8022dc8:	f04f 0100 	mov.w	r1, #0
 8022dcc:	da81      	bge.n	8022cd2 <__ieee754_pow+0x3a>
 8022dce:	e9dd 0300 	ldrd	r0, r3, [sp]
 8022dd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8022dd6:	e77c      	b.n	8022cd2 <__ieee754_pow+0x3a>
 8022dd8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8022ddc:	d106      	bne.n	8022dec <__ieee754_pow+0x154>
 8022dde:	4632      	mov	r2, r6
 8022de0:	463b      	mov	r3, r7
 8022de2:	4630      	mov	r0, r6
 8022de4:	4639      	mov	r1, r7
 8022de6:	f7dd fc07 	bl	80005f8 <__aeabi_dmul>
 8022dea:	e772      	b.n	8022cd2 <__ieee754_pow+0x3a>
 8022dec:	4a51      	ldr	r2, [pc, #324]	@ (8022f34 <__ieee754_pow+0x29c>)
 8022dee:	4591      	cmp	r9, r2
 8022df0:	d109      	bne.n	8022e06 <__ieee754_pow+0x16e>
 8022df2:	2d00      	cmp	r5, #0
 8022df4:	db07      	blt.n	8022e06 <__ieee754_pow+0x16e>
 8022df6:	ec47 6b10 	vmov	d0, r6, r7
 8022dfa:	b011      	add	sp, #68	@ 0x44
 8022dfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e00:	f7ff bba6 	b.w	8022550 <__ieee754_sqrt>
 8022e04:	2400      	movs	r4, #0
 8022e06:	ec47 6b10 	vmov	d0, r6, r7
 8022e0a:	9302      	str	r3, [sp, #8]
 8022e0c:	f7ff fb38 	bl	8022480 <fabs>
 8022e10:	9b02      	ldr	r3, [sp, #8]
 8022e12:	ec51 0b10 	vmov	r0, r1, d0
 8022e16:	bb53      	cbnz	r3, 8022e6e <__ieee754_pow+0x1d6>
 8022e18:	4b44      	ldr	r3, [pc, #272]	@ (8022f2c <__ieee754_pow+0x294>)
 8022e1a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8022e1e:	429a      	cmp	r2, r3
 8022e20:	d002      	beq.n	8022e28 <__ieee754_pow+0x190>
 8022e22:	f1b8 0f00 	cmp.w	r8, #0
 8022e26:	d122      	bne.n	8022e6e <__ieee754_pow+0x1d6>
 8022e28:	f1b9 0f00 	cmp.w	r9, #0
 8022e2c:	da05      	bge.n	8022e3a <__ieee754_pow+0x1a2>
 8022e2e:	4602      	mov	r2, r0
 8022e30:	460b      	mov	r3, r1
 8022e32:	2000      	movs	r0, #0
 8022e34:	493d      	ldr	r1, [pc, #244]	@ (8022f2c <__ieee754_pow+0x294>)
 8022e36:	f7dd fd09 	bl	800084c <__aeabi_ddiv>
 8022e3a:	2d00      	cmp	r5, #0
 8022e3c:	f6bf af49 	bge.w	8022cd2 <__ieee754_pow+0x3a>
 8022e40:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8022e44:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8022e48:	ea58 0804 	orrs.w	r8, r8, r4
 8022e4c:	d108      	bne.n	8022e60 <__ieee754_pow+0x1c8>
 8022e4e:	4602      	mov	r2, r0
 8022e50:	460b      	mov	r3, r1
 8022e52:	4610      	mov	r0, r2
 8022e54:	4619      	mov	r1, r3
 8022e56:	f7dd fa17 	bl	8000288 <__aeabi_dsub>
 8022e5a:	4602      	mov	r2, r0
 8022e5c:	460b      	mov	r3, r1
 8022e5e:	e794      	b.n	8022d8a <__ieee754_pow+0xf2>
 8022e60:	2c01      	cmp	r4, #1
 8022e62:	f47f af36 	bne.w	8022cd2 <__ieee754_pow+0x3a>
 8022e66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022e6a:	4619      	mov	r1, r3
 8022e6c:	e731      	b.n	8022cd2 <__ieee754_pow+0x3a>
 8022e6e:	0feb      	lsrs	r3, r5, #31
 8022e70:	3b01      	subs	r3, #1
 8022e72:	ea53 0204 	orrs.w	r2, r3, r4
 8022e76:	d102      	bne.n	8022e7e <__ieee754_pow+0x1e6>
 8022e78:	4632      	mov	r2, r6
 8022e7a:	463b      	mov	r3, r7
 8022e7c:	e7e9      	b.n	8022e52 <__ieee754_pow+0x1ba>
 8022e7e:	3c01      	subs	r4, #1
 8022e80:	431c      	orrs	r4, r3
 8022e82:	d016      	beq.n	8022eb2 <__ieee754_pow+0x21a>
 8022e84:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8022f10 <__ieee754_pow+0x278>
 8022e88:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8022e8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022e90:	f240 8112 	bls.w	80230b8 <__ieee754_pow+0x420>
 8022e94:	4b28      	ldr	r3, [pc, #160]	@ (8022f38 <__ieee754_pow+0x2a0>)
 8022e96:	459a      	cmp	sl, r3
 8022e98:	4b25      	ldr	r3, [pc, #148]	@ (8022f30 <__ieee754_pow+0x298>)
 8022e9a:	d916      	bls.n	8022eca <__ieee754_pow+0x232>
 8022e9c:	4598      	cmp	r8, r3
 8022e9e:	d80b      	bhi.n	8022eb8 <__ieee754_pow+0x220>
 8022ea0:	f1b9 0f00 	cmp.w	r9, #0
 8022ea4:	da0b      	bge.n	8022ebe <__ieee754_pow+0x226>
 8022ea6:	2000      	movs	r0, #0
 8022ea8:	b011      	add	sp, #68	@ 0x44
 8022eaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eae:	f000 bee7 	b.w	8023c80 <__math_oflow>
 8022eb2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8022f18 <__ieee754_pow+0x280>
 8022eb6:	e7e7      	b.n	8022e88 <__ieee754_pow+0x1f0>
 8022eb8:	f1b9 0f00 	cmp.w	r9, #0
 8022ebc:	dcf3      	bgt.n	8022ea6 <__ieee754_pow+0x20e>
 8022ebe:	2000      	movs	r0, #0
 8022ec0:	b011      	add	sp, #68	@ 0x44
 8022ec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ec6:	f000 bed3 	b.w	8023c70 <__math_uflow>
 8022eca:	4598      	cmp	r8, r3
 8022ecc:	d20c      	bcs.n	8022ee8 <__ieee754_pow+0x250>
 8022ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ed2:	2200      	movs	r2, #0
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	f7dd fe01 	bl	8000adc <__aeabi_dcmplt>
 8022eda:	3800      	subs	r0, #0
 8022edc:	bf18      	it	ne
 8022ede:	2001      	movne	r0, #1
 8022ee0:	f1b9 0f00 	cmp.w	r9, #0
 8022ee4:	daec      	bge.n	8022ec0 <__ieee754_pow+0x228>
 8022ee6:	e7df      	b.n	8022ea8 <__ieee754_pow+0x210>
 8022ee8:	4b10      	ldr	r3, [pc, #64]	@ (8022f2c <__ieee754_pow+0x294>)
 8022eea:	4598      	cmp	r8, r3
 8022eec:	f04f 0200 	mov.w	r2, #0
 8022ef0:	d924      	bls.n	8022f3c <__ieee754_pow+0x2a4>
 8022ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ef6:	2300      	movs	r3, #0
 8022ef8:	f7dd fdf0 	bl	8000adc <__aeabi_dcmplt>
 8022efc:	3800      	subs	r0, #0
 8022efe:	bf18      	it	ne
 8022f00:	2001      	movne	r0, #1
 8022f02:	f1b9 0f00 	cmp.w	r9, #0
 8022f06:	dccf      	bgt.n	8022ea8 <__ieee754_pow+0x210>
 8022f08:	e7da      	b.n	8022ec0 <__ieee754_pow+0x228>
 8022f0a:	bf00      	nop
 8022f0c:	f3af 8000 	nop.w
 8022f10:	00000000 	.word	0x00000000
 8022f14:	3ff00000 	.word	0x3ff00000
 8022f18:	00000000 	.word	0x00000000
 8022f1c:	bff00000 	.word	0xbff00000
 8022f20:	fff00000 	.word	0xfff00000
 8022f24:	7ff00000 	.word	0x7ff00000
 8022f28:	433fffff 	.word	0x433fffff
 8022f2c:	3ff00000 	.word	0x3ff00000
 8022f30:	3fefffff 	.word	0x3fefffff
 8022f34:	3fe00000 	.word	0x3fe00000
 8022f38:	43f00000 	.word	0x43f00000
 8022f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80230a8 <__ieee754_pow+0x410>)
 8022f3e:	f7dd f9a3 	bl	8000288 <__aeabi_dsub>
 8022f42:	a351      	add	r3, pc, #324	@ (adr r3, 8023088 <__ieee754_pow+0x3f0>)
 8022f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f48:	4604      	mov	r4, r0
 8022f4a:	460d      	mov	r5, r1
 8022f4c:	f7dd fb54 	bl	80005f8 <__aeabi_dmul>
 8022f50:	a34f      	add	r3, pc, #316	@ (adr r3, 8023090 <__ieee754_pow+0x3f8>)
 8022f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f56:	4606      	mov	r6, r0
 8022f58:	460f      	mov	r7, r1
 8022f5a:	4620      	mov	r0, r4
 8022f5c:	4629      	mov	r1, r5
 8022f5e:	f7dd fb4b 	bl	80005f8 <__aeabi_dmul>
 8022f62:	4b52      	ldr	r3, [pc, #328]	@ (80230ac <__ieee754_pow+0x414>)
 8022f64:	4682      	mov	sl, r0
 8022f66:	468b      	mov	fp, r1
 8022f68:	2200      	movs	r2, #0
 8022f6a:	4620      	mov	r0, r4
 8022f6c:	4629      	mov	r1, r5
 8022f6e:	f7dd fb43 	bl	80005f8 <__aeabi_dmul>
 8022f72:	4602      	mov	r2, r0
 8022f74:	460b      	mov	r3, r1
 8022f76:	a148      	add	r1, pc, #288	@ (adr r1, 8023098 <__ieee754_pow+0x400>)
 8022f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022f7c:	f7dd f984 	bl	8000288 <__aeabi_dsub>
 8022f80:	4622      	mov	r2, r4
 8022f82:	462b      	mov	r3, r5
 8022f84:	f7dd fb38 	bl	80005f8 <__aeabi_dmul>
 8022f88:	4602      	mov	r2, r0
 8022f8a:	460b      	mov	r3, r1
 8022f8c:	2000      	movs	r0, #0
 8022f8e:	4948      	ldr	r1, [pc, #288]	@ (80230b0 <__ieee754_pow+0x418>)
 8022f90:	f7dd f97a 	bl	8000288 <__aeabi_dsub>
 8022f94:	4622      	mov	r2, r4
 8022f96:	4680      	mov	r8, r0
 8022f98:	4689      	mov	r9, r1
 8022f9a:	462b      	mov	r3, r5
 8022f9c:	4620      	mov	r0, r4
 8022f9e:	4629      	mov	r1, r5
 8022fa0:	f7dd fb2a 	bl	80005f8 <__aeabi_dmul>
 8022fa4:	4602      	mov	r2, r0
 8022fa6:	460b      	mov	r3, r1
 8022fa8:	4640      	mov	r0, r8
 8022faa:	4649      	mov	r1, r9
 8022fac:	f7dd fb24 	bl	80005f8 <__aeabi_dmul>
 8022fb0:	a33b      	add	r3, pc, #236	@ (adr r3, 80230a0 <__ieee754_pow+0x408>)
 8022fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fb6:	f7dd fb1f 	bl	80005f8 <__aeabi_dmul>
 8022fba:	4602      	mov	r2, r0
 8022fbc:	460b      	mov	r3, r1
 8022fbe:	4650      	mov	r0, sl
 8022fc0:	4659      	mov	r1, fp
 8022fc2:	f7dd f961 	bl	8000288 <__aeabi_dsub>
 8022fc6:	4602      	mov	r2, r0
 8022fc8:	460b      	mov	r3, r1
 8022fca:	4680      	mov	r8, r0
 8022fcc:	4689      	mov	r9, r1
 8022fce:	4630      	mov	r0, r6
 8022fd0:	4639      	mov	r1, r7
 8022fd2:	f7dd f95b 	bl	800028c <__adddf3>
 8022fd6:	2400      	movs	r4, #0
 8022fd8:	4632      	mov	r2, r6
 8022fda:	463b      	mov	r3, r7
 8022fdc:	4620      	mov	r0, r4
 8022fde:	460d      	mov	r5, r1
 8022fe0:	f7dd f952 	bl	8000288 <__aeabi_dsub>
 8022fe4:	4602      	mov	r2, r0
 8022fe6:	460b      	mov	r3, r1
 8022fe8:	4640      	mov	r0, r8
 8022fea:	4649      	mov	r1, r9
 8022fec:	f7dd f94c 	bl	8000288 <__aeabi_dsub>
 8022ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ff4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022ff8:	2300      	movs	r3, #0
 8022ffa:	9304      	str	r3, [sp, #16]
 8022ffc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8023000:	4606      	mov	r6, r0
 8023002:	460f      	mov	r7, r1
 8023004:	4652      	mov	r2, sl
 8023006:	465b      	mov	r3, fp
 8023008:	e9dd 0100 	ldrd	r0, r1, [sp]
 802300c:	f7dd f93c 	bl	8000288 <__aeabi_dsub>
 8023010:	4622      	mov	r2, r4
 8023012:	462b      	mov	r3, r5
 8023014:	f7dd faf0 	bl	80005f8 <__aeabi_dmul>
 8023018:	e9dd 2300 	ldrd	r2, r3, [sp]
 802301c:	4680      	mov	r8, r0
 802301e:	4689      	mov	r9, r1
 8023020:	4630      	mov	r0, r6
 8023022:	4639      	mov	r1, r7
 8023024:	f7dd fae8 	bl	80005f8 <__aeabi_dmul>
 8023028:	4602      	mov	r2, r0
 802302a:	460b      	mov	r3, r1
 802302c:	4640      	mov	r0, r8
 802302e:	4649      	mov	r1, r9
 8023030:	f7dd f92c 	bl	800028c <__adddf3>
 8023034:	4652      	mov	r2, sl
 8023036:	465b      	mov	r3, fp
 8023038:	4606      	mov	r6, r0
 802303a:	460f      	mov	r7, r1
 802303c:	4620      	mov	r0, r4
 802303e:	4629      	mov	r1, r5
 8023040:	f7dd fada 	bl	80005f8 <__aeabi_dmul>
 8023044:	460b      	mov	r3, r1
 8023046:	4602      	mov	r2, r0
 8023048:	4680      	mov	r8, r0
 802304a:	4689      	mov	r9, r1
 802304c:	4630      	mov	r0, r6
 802304e:	4639      	mov	r1, r7
 8023050:	f7dd f91c 	bl	800028c <__adddf3>
 8023054:	4b17      	ldr	r3, [pc, #92]	@ (80230b4 <__ieee754_pow+0x41c>)
 8023056:	4299      	cmp	r1, r3
 8023058:	4604      	mov	r4, r0
 802305a:	460d      	mov	r5, r1
 802305c:	468a      	mov	sl, r1
 802305e:	468b      	mov	fp, r1
 8023060:	f340 82ef 	ble.w	8023642 <__ieee754_pow+0x9aa>
 8023064:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8023068:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 802306c:	4303      	orrs	r3, r0
 802306e:	f000 81e8 	beq.w	8023442 <__ieee754_pow+0x7aa>
 8023072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023076:	2200      	movs	r2, #0
 8023078:	2300      	movs	r3, #0
 802307a:	f7dd fd2f 	bl	8000adc <__aeabi_dcmplt>
 802307e:	3800      	subs	r0, #0
 8023080:	bf18      	it	ne
 8023082:	2001      	movne	r0, #1
 8023084:	e710      	b.n	8022ea8 <__ieee754_pow+0x210>
 8023086:	bf00      	nop
 8023088:	60000000 	.word	0x60000000
 802308c:	3ff71547 	.word	0x3ff71547
 8023090:	f85ddf44 	.word	0xf85ddf44
 8023094:	3e54ae0b 	.word	0x3e54ae0b
 8023098:	55555555 	.word	0x55555555
 802309c:	3fd55555 	.word	0x3fd55555
 80230a0:	652b82fe 	.word	0x652b82fe
 80230a4:	3ff71547 	.word	0x3ff71547
 80230a8:	3ff00000 	.word	0x3ff00000
 80230ac:	3fd00000 	.word	0x3fd00000
 80230b0:	3fe00000 	.word	0x3fe00000
 80230b4:	408fffff 	.word	0x408fffff
 80230b8:	4bd5      	ldr	r3, [pc, #852]	@ (8023410 <__ieee754_pow+0x778>)
 80230ba:	402b      	ands	r3, r5
 80230bc:	2200      	movs	r2, #0
 80230be:	b92b      	cbnz	r3, 80230cc <__ieee754_pow+0x434>
 80230c0:	4bd4      	ldr	r3, [pc, #848]	@ (8023414 <__ieee754_pow+0x77c>)
 80230c2:	f7dd fa99 	bl	80005f8 <__aeabi_dmul>
 80230c6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80230ca:	468b      	mov	fp, r1
 80230cc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80230d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80230d4:	4413      	add	r3, r2
 80230d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80230d8:	4bcf      	ldr	r3, [pc, #828]	@ (8023418 <__ieee754_pow+0x780>)
 80230da:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80230de:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80230e2:	459b      	cmp	fp, r3
 80230e4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80230e8:	dd08      	ble.n	80230fc <__ieee754_pow+0x464>
 80230ea:	4bcc      	ldr	r3, [pc, #816]	@ (802341c <__ieee754_pow+0x784>)
 80230ec:	459b      	cmp	fp, r3
 80230ee:	f340 81a5 	ble.w	802343c <__ieee754_pow+0x7a4>
 80230f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80230f4:	3301      	adds	r3, #1
 80230f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80230f8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80230fc:	f04f 0a00 	mov.w	sl, #0
 8023100:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8023104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023106:	4bc6      	ldr	r3, [pc, #792]	@ (8023420 <__ieee754_pow+0x788>)
 8023108:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802310c:	ed93 7b00 	vldr	d7, [r3]
 8023110:	4629      	mov	r1, r5
 8023112:	ec53 2b17 	vmov	r2, r3, d7
 8023116:	ed8d 7b06 	vstr	d7, [sp, #24]
 802311a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802311e:	f7dd f8b3 	bl	8000288 <__aeabi_dsub>
 8023122:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023126:	4606      	mov	r6, r0
 8023128:	460f      	mov	r7, r1
 802312a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802312e:	f7dd f8ad 	bl	800028c <__adddf3>
 8023132:	4602      	mov	r2, r0
 8023134:	460b      	mov	r3, r1
 8023136:	2000      	movs	r0, #0
 8023138:	49ba      	ldr	r1, [pc, #744]	@ (8023424 <__ieee754_pow+0x78c>)
 802313a:	f7dd fb87 	bl	800084c <__aeabi_ddiv>
 802313e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8023142:	4602      	mov	r2, r0
 8023144:	460b      	mov	r3, r1
 8023146:	4630      	mov	r0, r6
 8023148:	4639      	mov	r1, r7
 802314a:	f7dd fa55 	bl	80005f8 <__aeabi_dmul>
 802314e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023152:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8023156:	106d      	asrs	r5, r5, #1
 8023158:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 802315c:	f04f 0b00 	mov.w	fp, #0
 8023160:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8023164:	4661      	mov	r1, ip
 8023166:	2200      	movs	r2, #0
 8023168:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802316c:	4658      	mov	r0, fp
 802316e:	46e1      	mov	r9, ip
 8023170:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8023174:	4614      	mov	r4, r2
 8023176:	461d      	mov	r5, r3
 8023178:	f7dd fa3e 	bl	80005f8 <__aeabi_dmul>
 802317c:	4602      	mov	r2, r0
 802317e:	460b      	mov	r3, r1
 8023180:	4630      	mov	r0, r6
 8023182:	4639      	mov	r1, r7
 8023184:	f7dd f880 	bl	8000288 <__aeabi_dsub>
 8023188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802318c:	4606      	mov	r6, r0
 802318e:	460f      	mov	r7, r1
 8023190:	4620      	mov	r0, r4
 8023192:	4629      	mov	r1, r5
 8023194:	f7dd f878 	bl	8000288 <__aeabi_dsub>
 8023198:	4602      	mov	r2, r0
 802319a:	460b      	mov	r3, r1
 802319c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80231a0:	f7dd f872 	bl	8000288 <__aeabi_dsub>
 80231a4:	465a      	mov	r2, fp
 80231a6:	464b      	mov	r3, r9
 80231a8:	f7dd fa26 	bl	80005f8 <__aeabi_dmul>
 80231ac:	4602      	mov	r2, r0
 80231ae:	460b      	mov	r3, r1
 80231b0:	4630      	mov	r0, r6
 80231b2:	4639      	mov	r1, r7
 80231b4:	f7dd f868 	bl	8000288 <__aeabi_dsub>
 80231b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80231bc:	f7dd fa1c 	bl	80005f8 <__aeabi_dmul>
 80231c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80231c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80231c8:	4610      	mov	r0, r2
 80231ca:	4619      	mov	r1, r3
 80231cc:	f7dd fa14 	bl	80005f8 <__aeabi_dmul>
 80231d0:	a37d      	add	r3, pc, #500	@ (adr r3, 80233c8 <__ieee754_pow+0x730>)
 80231d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d6:	4604      	mov	r4, r0
 80231d8:	460d      	mov	r5, r1
 80231da:	f7dd fa0d 	bl	80005f8 <__aeabi_dmul>
 80231de:	a37c      	add	r3, pc, #496	@ (adr r3, 80233d0 <__ieee754_pow+0x738>)
 80231e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e4:	f7dd f852 	bl	800028c <__adddf3>
 80231e8:	4622      	mov	r2, r4
 80231ea:	462b      	mov	r3, r5
 80231ec:	f7dd fa04 	bl	80005f8 <__aeabi_dmul>
 80231f0:	a379      	add	r3, pc, #484	@ (adr r3, 80233d8 <__ieee754_pow+0x740>)
 80231f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231f6:	f7dd f849 	bl	800028c <__adddf3>
 80231fa:	4622      	mov	r2, r4
 80231fc:	462b      	mov	r3, r5
 80231fe:	f7dd f9fb 	bl	80005f8 <__aeabi_dmul>
 8023202:	a377      	add	r3, pc, #476	@ (adr r3, 80233e0 <__ieee754_pow+0x748>)
 8023204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023208:	f7dd f840 	bl	800028c <__adddf3>
 802320c:	4622      	mov	r2, r4
 802320e:	462b      	mov	r3, r5
 8023210:	f7dd f9f2 	bl	80005f8 <__aeabi_dmul>
 8023214:	a374      	add	r3, pc, #464	@ (adr r3, 80233e8 <__ieee754_pow+0x750>)
 8023216:	e9d3 2300 	ldrd	r2, r3, [r3]
 802321a:	f7dd f837 	bl	800028c <__adddf3>
 802321e:	4622      	mov	r2, r4
 8023220:	462b      	mov	r3, r5
 8023222:	f7dd f9e9 	bl	80005f8 <__aeabi_dmul>
 8023226:	a372      	add	r3, pc, #456	@ (adr r3, 80233f0 <__ieee754_pow+0x758>)
 8023228:	e9d3 2300 	ldrd	r2, r3, [r3]
 802322c:	f7dd f82e 	bl	800028c <__adddf3>
 8023230:	4622      	mov	r2, r4
 8023232:	4606      	mov	r6, r0
 8023234:	460f      	mov	r7, r1
 8023236:	462b      	mov	r3, r5
 8023238:	4620      	mov	r0, r4
 802323a:	4629      	mov	r1, r5
 802323c:	f7dd f9dc 	bl	80005f8 <__aeabi_dmul>
 8023240:	4602      	mov	r2, r0
 8023242:	460b      	mov	r3, r1
 8023244:	4630      	mov	r0, r6
 8023246:	4639      	mov	r1, r7
 8023248:	f7dd f9d6 	bl	80005f8 <__aeabi_dmul>
 802324c:	465a      	mov	r2, fp
 802324e:	4604      	mov	r4, r0
 8023250:	460d      	mov	r5, r1
 8023252:	464b      	mov	r3, r9
 8023254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023258:	f7dd f818 	bl	800028c <__adddf3>
 802325c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023260:	f7dd f9ca 	bl	80005f8 <__aeabi_dmul>
 8023264:	4622      	mov	r2, r4
 8023266:	462b      	mov	r3, r5
 8023268:	f7dd f810 	bl	800028c <__adddf3>
 802326c:	465a      	mov	r2, fp
 802326e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023272:	464b      	mov	r3, r9
 8023274:	4658      	mov	r0, fp
 8023276:	4649      	mov	r1, r9
 8023278:	f7dd f9be 	bl	80005f8 <__aeabi_dmul>
 802327c:	4b6a      	ldr	r3, [pc, #424]	@ (8023428 <__ieee754_pow+0x790>)
 802327e:	2200      	movs	r2, #0
 8023280:	4606      	mov	r6, r0
 8023282:	460f      	mov	r7, r1
 8023284:	f7dd f802 	bl	800028c <__adddf3>
 8023288:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802328c:	f7dc fffe 	bl	800028c <__adddf3>
 8023290:	46d8      	mov	r8, fp
 8023292:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8023296:	460d      	mov	r5, r1
 8023298:	465a      	mov	r2, fp
 802329a:	460b      	mov	r3, r1
 802329c:	4640      	mov	r0, r8
 802329e:	4649      	mov	r1, r9
 80232a0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80232a4:	f7dd f9a8 	bl	80005f8 <__aeabi_dmul>
 80232a8:	465c      	mov	r4, fp
 80232aa:	4680      	mov	r8, r0
 80232ac:	4689      	mov	r9, r1
 80232ae:	4b5e      	ldr	r3, [pc, #376]	@ (8023428 <__ieee754_pow+0x790>)
 80232b0:	2200      	movs	r2, #0
 80232b2:	4620      	mov	r0, r4
 80232b4:	4629      	mov	r1, r5
 80232b6:	f7dc ffe7 	bl	8000288 <__aeabi_dsub>
 80232ba:	4632      	mov	r2, r6
 80232bc:	463b      	mov	r3, r7
 80232be:	f7dc ffe3 	bl	8000288 <__aeabi_dsub>
 80232c2:	4602      	mov	r2, r0
 80232c4:	460b      	mov	r3, r1
 80232c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80232ca:	f7dc ffdd 	bl	8000288 <__aeabi_dsub>
 80232ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80232d2:	f7dd f991 	bl	80005f8 <__aeabi_dmul>
 80232d6:	4622      	mov	r2, r4
 80232d8:	4606      	mov	r6, r0
 80232da:	460f      	mov	r7, r1
 80232dc:	462b      	mov	r3, r5
 80232de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80232e2:	f7dd f989 	bl	80005f8 <__aeabi_dmul>
 80232e6:	4602      	mov	r2, r0
 80232e8:	460b      	mov	r3, r1
 80232ea:	4630      	mov	r0, r6
 80232ec:	4639      	mov	r1, r7
 80232ee:	f7dc ffcd 	bl	800028c <__adddf3>
 80232f2:	4606      	mov	r6, r0
 80232f4:	460f      	mov	r7, r1
 80232f6:	4602      	mov	r2, r0
 80232f8:	460b      	mov	r3, r1
 80232fa:	4640      	mov	r0, r8
 80232fc:	4649      	mov	r1, r9
 80232fe:	f7dc ffc5 	bl	800028c <__adddf3>
 8023302:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8023306:	a33c      	add	r3, pc, #240	@ (adr r3, 80233f8 <__ieee754_pow+0x760>)
 8023308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802330c:	4658      	mov	r0, fp
 802330e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8023312:	460d      	mov	r5, r1
 8023314:	f7dd f970 	bl	80005f8 <__aeabi_dmul>
 8023318:	465c      	mov	r4, fp
 802331a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802331e:	4642      	mov	r2, r8
 8023320:	464b      	mov	r3, r9
 8023322:	4620      	mov	r0, r4
 8023324:	4629      	mov	r1, r5
 8023326:	f7dc ffaf 	bl	8000288 <__aeabi_dsub>
 802332a:	4602      	mov	r2, r0
 802332c:	460b      	mov	r3, r1
 802332e:	4630      	mov	r0, r6
 8023330:	4639      	mov	r1, r7
 8023332:	f7dc ffa9 	bl	8000288 <__aeabi_dsub>
 8023336:	a332      	add	r3, pc, #200	@ (adr r3, 8023400 <__ieee754_pow+0x768>)
 8023338:	e9d3 2300 	ldrd	r2, r3, [r3]
 802333c:	f7dd f95c 	bl	80005f8 <__aeabi_dmul>
 8023340:	a331      	add	r3, pc, #196	@ (adr r3, 8023408 <__ieee754_pow+0x770>)
 8023342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023346:	4606      	mov	r6, r0
 8023348:	460f      	mov	r7, r1
 802334a:	4620      	mov	r0, r4
 802334c:	4629      	mov	r1, r5
 802334e:	f7dd f953 	bl	80005f8 <__aeabi_dmul>
 8023352:	4602      	mov	r2, r0
 8023354:	460b      	mov	r3, r1
 8023356:	4630      	mov	r0, r6
 8023358:	4639      	mov	r1, r7
 802335a:	f7dc ff97 	bl	800028c <__adddf3>
 802335e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023360:	4b32      	ldr	r3, [pc, #200]	@ (802342c <__ieee754_pow+0x794>)
 8023362:	4413      	add	r3, r2
 8023364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023368:	f7dc ff90 	bl	800028c <__adddf3>
 802336c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023370:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023372:	f7dd f8d7 	bl	8000524 <__aeabi_i2d>
 8023376:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023378:	4b2d      	ldr	r3, [pc, #180]	@ (8023430 <__ieee754_pow+0x798>)
 802337a:	4413      	add	r3, r2
 802337c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023380:	4606      	mov	r6, r0
 8023382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023386:	460f      	mov	r7, r1
 8023388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802338c:	f7dc ff7e 	bl	800028c <__adddf3>
 8023390:	4642      	mov	r2, r8
 8023392:	464b      	mov	r3, r9
 8023394:	f7dc ff7a 	bl	800028c <__adddf3>
 8023398:	4632      	mov	r2, r6
 802339a:	463b      	mov	r3, r7
 802339c:	f7dc ff76 	bl	800028c <__adddf3>
 80233a0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80233a4:	4632      	mov	r2, r6
 80233a6:	463b      	mov	r3, r7
 80233a8:	4658      	mov	r0, fp
 80233aa:	460d      	mov	r5, r1
 80233ac:	f7dc ff6c 	bl	8000288 <__aeabi_dsub>
 80233b0:	4642      	mov	r2, r8
 80233b2:	464b      	mov	r3, r9
 80233b4:	f7dc ff68 	bl	8000288 <__aeabi_dsub>
 80233b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80233bc:	f7dc ff64 	bl	8000288 <__aeabi_dsub>
 80233c0:	465c      	mov	r4, fp
 80233c2:	4602      	mov	r2, r0
 80233c4:	e036      	b.n	8023434 <__ieee754_pow+0x79c>
 80233c6:	bf00      	nop
 80233c8:	4a454eef 	.word	0x4a454eef
 80233cc:	3fca7e28 	.word	0x3fca7e28
 80233d0:	93c9db65 	.word	0x93c9db65
 80233d4:	3fcd864a 	.word	0x3fcd864a
 80233d8:	a91d4101 	.word	0xa91d4101
 80233dc:	3fd17460 	.word	0x3fd17460
 80233e0:	518f264d 	.word	0x518f264d
 80233e4:	3fd55555 	.word	0x3fd55555
 80233e8:	db6fabff 	.word	0xdb6fabff
 80233ec:	3fdb6db6 	.word	0x3fdb6db6
 80233f0:	33333303 	.word	0x33333303
 80233f4:	3fe33333 	.word	0x3fe33333
 80233f8:	e0000000 	.word	0xe0000000
 80233fc:	3feec709 	.word	0x3feec709
 8023400:	dc3a03fd 	.word	0xdc3a03fd
 8023404:	3feec709 	.word	0x3feec709
 8023408:	145b01f5 	.word	0x145b01f5
 802340c:	be3e2fe0 	.word	0xbe3e2fe0
 8023410:	7ff00000 	.word	0x7ff00000
 8023414:	43400000 	.word	0x43400000
 8023418:	0003988e 	.word	0x0003988e
 802341c:	000bb679 	.word	0x000bb679
 8023420:	08024f68 	.word	0x08024f68
 8023424:	3ff00000 	.word	0x3ff00000
 8023428:	40080000 	.word	0x40080000
 802342c:	08024f48 	.word	0x08024f48
 8023430:	08024f58 	.word	0x08024f58
 8023434:	460b      	mov	r3, r1
 8023436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802343a:	e5d7      	b.n	8022fec <__ieee754_pow+0x354>
 802343c:	f04f 0a01 	mov.w	sl, #1
 8023440:	e65e      	b.n	8023100 <__ieee754_pow+0x468>
 8023442:	a3b4      	add	r3, pc, #720	@ (adr r3, 8023714 <__ieee754_pow+0xa7c>)
 8023444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023448:	4630      	mov	r0, r6
 802344a:	4639      	mov	r1, r7
 802344c:	f7dc ff1e 	bl	800028c <__adddf3>
 8023450:	4642      	mov	r2, r8
 8023452:	e9cd 0100 	strd	r0, r1, [sp]
 8023456:	464b      	mov	r3, r9
 8023458:	4620      	mov	r0, r4
 802345a:	4629      	mov	r1, r5
 802345c:	f7dc ff14 	bl	8000288 <__aeabi_dsub>
 8023460:	4602      	mov	r2, r0
 8023462:	460b      	mov	r3, r1
 8023464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023468:	f7dd fb56 	bl	8000b18 <__aeabi_dcmpgt>
 802346c:	2800      	cmp	r0, #0
 802346e:	f47f ae00 	bne.w	8023072 <__ieee754_pow+0x3da>
 8023472:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8023476:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802347a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 802347e:	fa43 fa0a 	asr.w	sl, r3, sl
 8023482:	44da      	add	sl, fp
 8023484:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8023488:	489d      	ldr	r0, [pc, #628]	@ (8023700 <__ieee754_pow+0xa68>)
 802348a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 802348e:	4108      	asrs	r0, r1
 8023490:	ea00 030a 	and.w	r3, r0, sl
 8023494:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8023498:	f1c1 0114 	rsb	r1, r1, #20
 802349c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80234a0:	fa4a fa01 	asr.w	sl, sl, r1
 80234a4:	f1bb 0f00 	cmp.w	fp, #0
 80234a8:	4640      	mov	r0, r8
 80234aa:	4649      	mov	r1, r9
 80234ac:	f04f 0200 	mov.w	r2, #0
 80234b0:	bfb8      	it	lt
 80234b2:	f1ca 0a00 	rsblt	sl, sl, #0
 80234b6:	f7dc fee7 	bl	8000288 <__aeabi_dsub>
 80234ba:	4680      	mov	r8, r0
 80234bc:	4689      	mov	r9, r1
 80234be:	4632      	mov	r2, r6
 80234c0:	463b      	mov	r3, r7
 80234c2:	4640      	mov	r0, r8
 80234c4:	4649      	mov	r1, r9
 80234c6:	f7dc fee1 	bl	800028c <__adddf3>
 80234ca:	2400      	movs	r4, #0
 80234cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80236c0 <__ieee754_pow+0xa28>)
 80234ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234d2:	4620      	mov	r0, r4
 80234d4:	460d      	mov	r5, r1
 80234d6:	f7dd f88f 	bl	80005f8 <__aeabi_dmul>
 80234da:	4642      	mov	r2, r8
 80234dc:	e9cd 0100 	strd	r0, r1, [sp]
 80234e0:	464b      	mov	r3, r9
 80234e2:	4620      	mov	r0, r4
 80234e4:	4629      	mov	r1, r5
 80234e6:	f7dc fecf 	bl	8000288 <__aeabi_dsub>
 80234ea:	4602      	mov	r2, r0
 80234ec:	460b      	mov	r3, r1
 80234ee:	4630      	mov	r0, r6
 80234f0:	4639      	mov	r1, r7
 80234f2:	f7dc fec9 	bl	8000288 <__aeabi_dsub>
 80234f6:	a374      	add	r3, pc, #464	@ (adr r3, 80236c8 <__ieee754_pow+0xa30>)
 80234f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234fc:	f7dd f87c 	bl	80005f8 <__aeabi_dmul>
 8023500:	a373      	add	r3, pc, #460	@ (adr r3, 80236d0 <__ieee754_pow+0xa38>)
 8023502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023506:	4680      	mov	r8, r0
 8023508:	4689      	mov	r9, r1
 802350a:	4620      	mov	r0, r4
 802350c:	4629      	mov	r1, r5
 802350e:	f7dd f873 	bl	80005f8 <__aeabi_dmul>
 8023512:	4602      	mov	r2, r0
 8023514:	460b      	mov	r3, r1
 8023516:	4640      	mov	r0, r8
 8023518:	4649      	mov	r1, r9
 802351a:	f7dc feb7 	bl	800028c <__adddf3>
 802351e:	4604      	mov	r4, r0
 8023520:	460d      	mov	r5, r1
 8023522:	4602      	mov	r2, r0
 8023524:	460b      	mov	r3, r1
 8023526:	e9dd 0100 	ldrd	r0, r1, [sp]
 802352a:	f7dc feaf 	bl	800028c <__adddf3>
 802352e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023532:	4680      	mov	r8, r0
 8023534:	4689      	mov	r9, r1
 8023536:	f7dc fea7 	bl	8000288 <__aeabi_dsub>
 802353a:	4602      	mov	r2, r0
 802353c:	460b      	mov	r3, r1
 802353e:	4620      	mov	r0, r4
 8023540:	4629      	mov	r1, r5
 8023542:	f7dc fea1 	bl	8000288 <__aeabi_dsub>
 8023546:	4642      	mov	r2, r8
 8023548:	4606      	mov	r6, r0
 802354a:	460f      	mov	r7, r1
 802354c:	464b      	mov	r3, r9
 802354e:	4640      	mov	r0, r8
 8023550:	4649      	mov	r1, r9
 8023552:	f7dd f851 	bl	80005f8 <__aeabi_dmul>
 8023556:	a360      	add	r3, pc, #384	@ (adr r3, 80236d8 <__ieee754_pow+0xa40>)
 8023558:	e9d3 2300 	ldrd	r2, r3, [r3]
 802355c:	4604      	mov	r4, r0
 802355e:	460d      	mov	r5, r1
 8023560:	f7dd f84a 	bl	80005f8 <__aeabi_dmul>
 8023564:	a35e      	add	r3, pc, #376	@ (adr r3, 80236e0 <__ieee754_pow+0xa48>)
 8023566:	e9d3 2300 	ldrd	r2, r3, [r3]
 802356a:	f7dc fe8d 	bl	8000288 <__aeabi_dsub>
 802356e:	4622      	mov	r2, r4
 8023570:	462b      	mov	r3, r5
 8023572:	f7dd f841 	bl	80005f8 <__aeabi_dmul>
 8023576:	a35c      	add	r3, pc, #368	@ (adr r3, 80236e8 <__ieee754_pow+0xa50>)
 8023578:	e9d3 2300 	ldrd	r2, r3, [r3]
 802357c:	f7dc fe86 	bl	800028c <__adddf3>
 8023580:	4622      	mov	r2, r4
 8023582:	462b      	mov	r3, r5
 8023584:	f7dd f838 	bl	80005f8 <__aeabi_dmul>
 8023588:	a359      	add	r3, pc, #356	@ (adr r3, 80236f0 <__ieee754_pow+0xa58>)
 802358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802358e:	f7dc fe7b 	bl	8000288 <__aeabi_dsub>
 8023592:	4622      	mov	r2, r4
 8023594:	462b      	mov	r3, r5
 8023596:	f7dd f82f 	bl	80005f8 <__aeabi_dmul>
 802359a:	a357      	add	r3, pc, #348	@ (adr r3, 80236f8 <__ieee754_pow+0xa60>)
 802359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235a0:	f7dc fe74 	bl	800028c <__adddf3>
 80235a4:	4622      	mov	r2, r4
 80235a6:	462b      	mov	r3, r5
 80235a8:	f7dd f826 	bl	80005f8 <__aeabi_dmul>
 80235ac:	4602      	mov	r2, r0
 80235ae:	460b      	mov	r3, r1
 80235b0:	4640      	mov	r0, r8
 80235b2:	4649      	mov	r1, r9
 80235b4:	f7dc fe68 	bl	8000288 <__aeabi_dsub>
 80235b8:	4604      	mov	r4, r0
 80235ba:	460d      	mov	r5, r1
 80235bc:	4602      	mov	r2, r0
 80235be:	460b      	mov	r3, r1
 80235c0:	4640      	mov	r0, r8
 80235c2:	4649      	mov	r1, r9
 80235c4:	f7dd f818 	bl	80005f8 <__aeabi_dmul>
 80235c8:	2200      	movs	r2, #0
 80235ca:	e9cd 0100 	strd	r0, r1, [sp]
 80235ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80235d2:	4620      	mov	r0, r4
 80235d4:	4629      	mov	r1, r5
 80235d6:	f7dc fe57 	bl	8000288 <__aeabi_dsub>
 80235da:	4602      	mov	r2, r0
 80235dc:	460b      	mov	r3, r1
 80235de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80235e2:	f7dd f933 	bl	800084c <__aeabi_ddiv>
 80235e6:	4632      	mov	r2, r6
 80235e8:	4604      	mov	r4, r0
 80235ea:	460d      	mov	r5, r1
 80235ec:	463b      	mov	r3, r7
 80235ee:	4640      	mov	r0, r8
 80235f0:	4649      	mov	r1, r9
 80235f2:	f7dd f801 	bl	80005f8 <__aeabi_dmul>
 80235f6:	4632      	mov	r2, r6
 80235f8:	463b      	mov	r3, r7
 80235fa:	f7dc fe47 	bl	800028c <__adddf3>
 80235fe:	4602      	mov	r2, r0
 8023600:	460b      	mov	r3, r1
 8023602:	4620      	mov	r0, r4
 8023604:	4629      	mov	r1, r5
 8023606:	f7dc fe3f 	bl	8000288 <__aeabi_dsub>
 802360a:	4642      	mov	r2, r8
 802360c:	464b      	mov	r3, r9
 802360e:	f7dc fe3b 	bl	8000288 <__aeabi_dsub>
 8023612:	460b      	mov	r3, r1
 8023614:	4602      	mov	r2, r0
 8023616:	493b      	ldr	r1, [pc, #236]	@ (8023704 <__ieee754_pow+0xa6c>)
 8023618:	2000      	movs	r0, #0
 802361a:	f7dc fe35 	bl	8000288 <__aeabi_dsub>
 802361e:	ec41 0b10 	vmov	d0, r0, r1
 8023622:	ee10 3a90 	vmov	r3, s1
 8023626:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802362a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802362e:	da30      	bge.n	8023692 <__ieee754_pow+0x9fa>
 8023630:	4650      	mov	r0, sl
 8023632:	f000 fa71 	bl	8023b18 <scalbn>
 8023636:	ec51 0b10 	vmov	r0, r1, d0
 802363a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802363e:	f7ff bbd2 	b.w	8022de6 <__ieee754_pow+0x14e>
 8023642:	4c31      	ldr	r4, [pc, #196]	@ (8023708 <__ieee754_pow+0xa70>)
 8023644:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8023648:	42a3      	cmp	r3, r4
 802364a:	d91a      	bls.n	8023682 <__ieee754_pow+0x9ea>
 802364c:	4b2f      	ldr	r3, [pc, #188]	@ (802370c <__ieee754_pow+0xa74>)
 802364e:	440b      	add	r3, r1
 8023650:	4303      	orrs	r3, r0
 8023652:	d009      	beq.n	8023668 <__ieee754_pow+0x9d0>
 8023654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023658:	2200      	movs	r2, #0
 802365a:	2300      	movs	r3, #0
 802365c:	f7dd fa3e 	bl	8000adc <__aeabi_dcmplt>
 8023660:	3800      	subs	r0, #0
 8023662:	bf18      	it	ne
 8023664:	2001      	movne	r0, #1
 8023666:	e42b      	b.n	8022ec0 <__ieee754_pow+0x228>
 8023668:	4642      	mov	r2, r8
 802366a:	464b      	mov	r3, r9
 802366c:	f7dc fe0c 	bl	8000288 <__aeabi_dsub>
 8023670:	4632      	mov	r2, r6
 8023672:	463b      	mov	r3, r7
 8023674:	f7dd fa46 	bl	8000b04 <__aeabi_dcmpge>
 8023678:	2800      	cmp	r0, #0
 802367a:	d1eb      	bne.n	8023654 <__ieee754_pow+0x9bc>
 802367c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 802371c <__ieee754_pow+0xa84>
 8023680:	e6f7      	b.n	8023472 <__ieee754_pow+0x7da>
 8023682:	469a      	mov	sl, r3
 8023684:	4b22      	ldr	r3, [pc, #136]	@ (8023710 <__ieee754_pow+0xa78>)
 8023686:	459a      	cmp	sl, r3
 8023688:	f63f aef3 	bhi.w	8023472 <__ieee754_pow+0x7da>
 802368c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8023690:	e715      	b.n	80234be <__ieee754_pow+0x826>
 8023692:	ec51 0b10 	vmov	r0, r1, d0
 8023696:	4619      	mov	r1, r3
 8023698:	e7cf      	b.n	802363a <__ieee754_pow+0x9a2>
 802369a:	491a      	ldr	r1, [pc, #104]	@ (8023704 <__ieee754_pow+0xa6c>)
 802369c:	2000      	movs	r0, #0
 802369e:	f7ff bb18 	b.w	8022cd2 <__ieee754_pow+0x3a>
 80236a2:	2000      	movs	r0, #0
 80236a4:	2100      	movs	r1, #0
 80236a6:	f7ff bb14 	b.w	8022cd2 <__ieee754_pow+0x3a>
 80236aa:	4630      	mov	r0, r6
 80236ac:	4639      	mov	r1, r7
 80236ae:	f7ff bb10 	b.w	8022cd2 <__ieee754_pow+0x3a>
 80236b2:	460c      	mov	r4, r1
 80236b4:	f7ff bb5e 	b.w	8022d74 <__ieee754_pow+0xdc>
 80236b8:	2400      	movs	r4, #0
 80236ba:	f7ff bb49 	b.w	8022d50 <__ieee754_pow+0xb8>
 80236be:	bf00      	nop
 80236c0:	00000000 	.word	0x00000000
 80236c4:	3fe62e43 	.word	0x3fe62e43
 80236c8:	fefa39ef 	.word	0xfefa39ef
 80236cc:	3fe62e42 	.word	0x3fe62e42
 80236d0:	0ca86c39 	.word	0x0ca86c39
 80236d4:	be205c61 	.word	0xbe205c61
 80236d8:	72bea4d0 	.word	0x72bea4d0
 80236dc:	3e663769 	.word	0x3e663769
 80236e0:	c5d26bf1 	.word	0xc5d26bf1
 80236e4:	3ebbbd41 	.word	0x3ebbbd41
 80236e8:	af25de2c 	.word	0xaf25de2c
 80236ec:	3f11566a 	.word	0x3f11566a
 80236f0:	16bebd93 	.word	0x16bebd93
 80236f4:	3f66c16c 	.word	0x3f66c16c
 80236f8:	5555553e 	.word	0x5555553e
 80236fc:	3fc55555 	.word	0x3fc55555
 8023700:	fff00000 	.word	0xfff00000
 8023704:	3ff00000 	.word	0x3ff00000
 8023708:	4090cbff 	.word	0x4090cbff
 802370c:	3f6f3400 	.word	0x3f6f3400
 8023710:	3fe00000 	.word	0x3fe00000
 8023714:	652b82fe 	.word	0x652b82fe
 8023718:	3c971547 	.word	0x3c971547
 802371c:	4090cc00 	.word	0x4090cc00

08023720 <__ieee754_rem_pio2>:
 8023720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023724:	ec57 6b10 	vmov	r6, r7, d0
 8023728:	4bc5      	ldr	r3, [pc, #788]	@ (8023a40 <__ieee754_rem_pio2+0x320>)
 802372a:	b08d      	sub	sp, #52	@ 0x34
 802372c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8023730:	4598      	cmp	r8, r3
 8023732:	4604      	mov	r4, r0
 8023734:	9704      	str	r7, [sp, #16]
 8023736:	d807      	bhi.n	8023748 <__ieee754_rem_pio2+0x28>
 8023738:	2200      	movs	r2, #0
 802373a:	2300      	movs	r3, #0
 802373c:	ed80 0b00 	vstr	d0, [r0]
 8023740:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023744:	2500      	movs	r5, #0
 8023746:	e028      	b.n	802379a <__ieee754_rem_pio2+0x7a>
 8023748:	4bbe      	ldr	r3, [pc, #760]	@ (8023a44 <__ieee754_rem_pio2+0x324>)
 802374a:	4598      	cmp	r8, r3
 802374c:	d878      	bhi.n	8023840 <__ieee754_rem_pio2+0x120>
 802374e:	9b04      	ldr	r3, [sp, #16]
 8023750:	4dbd      	ldr	r5, [pc, #756]	@ (8023a48 <__ieee754_rem_pio2+0x328>)
 8023752:	2b00      	cmp	r3, #0
 8023754:	4630      	mov	r0, r6
 8023756:	a3ac      	add	r3, pc, #688	@ (adr r3, 8023a08 <__ieee754_rem_pio2+0x2e8>)
 8023758:	e9d3 2300 	ldrd	r2, r3, [r3]
 802375c:	4639      	mov	r1, r7
 802375e:	dd38      	ble.n	80237d2 <__ieee754_rem_pio2+0xb2>
 8023760:	f7dc fd92 	bl	8000288 <__aeabi_dsub>
 8023764:	45a8      	cmp	r8, r5
 8023766:	4606      	mov	r6, r0
 8023768:	460f      	mov	r7, r1
 802376a:	d01a      	beq.n	80237a2 <__ieee754_rem_pio2+0x82>
 802376c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8023a10 <__ieee754_rem_pio2+0x2f0>)
 802376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023772:	f7dc fd89 	bl	8000288 <__aeabi_dsub>
 8023776:	4602      	mov	r2, r0
 8023778:	460b      	mov	r3, r1
 802377a:	4680      	mov	r8, r0
 802377c:	4689      	mov	r9, r1
 802377e:	4630      	mov	r0, r6
 8023780:	4639      	mov	r1, r7
 8023782:	f7dc fd81 	bl	8000288 <__aeabi_dsub>
 8023786:	a3a2      	add	r3, pc, #648	@ (adr r3, 8023a10 <__ieee754_rem_pio2+0x2f0>)
 8023788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802378c:	f7dc fd7c 	bl	8000288 <__aeabi_dsub>
 8023790:	e9c4 8900 	strd	r8, r9, [r4]
 8023794:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023798:	2501      	movs	r5, #1
 802379a:	4628      	mov	r0, r5
 802379c:	b00d      	add	sp, #52	@ 0x34
 802379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237a2:	a39d      	add	r3, pc, #628	@ (adr r3, 8023a18 <__ieee754_rem_pio2+0x2f8>)
 80237a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237a8:	f7dc fd6e 	bl	8000288 <__aeabi_dsub>
 80237ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8023a20 <__ieee754_rem_pio2+0x300>)
 80237ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237b2:	4606      	mov	r6, r0
 80237b4:	460f      	mov	r7, r1
 80237b6:	f7dc fd67 	bl	8000288 <__aeabi_dsub>
 80237ba:	4602      	mov	r2, r0
 80237bc:	460b      	mov	r3, r1
 80237be:	4680      	mov	r8, r0
 80237c0:	4689      	mov	r9, r1
 80237c2:	4630      	mov	r0, r6
 80237c4:	4639      	mov	r1, r7
 80237c6:	f7dc fd5f 	bl	8000288 <__aeabi_dsub>
 80237ca:	a395      	add	r3, pc, #596	@ (adr r3, 8023a20 <__ieee754_rem_pio2+0x300>)
 80237cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237d0:	e7dc      	b.n	802378c <__ieee754_rem_pio2+0x6c>
 80237d2:	f7dc fd5b 	bl	800028c <__adddf3>
 80237d6:	45a8      	cmp	r8, r5
 80237d8:	4606      	mov	r6, r0
 80237da:	460f      	mov	r7, r1
 80237dc:	d018      	beq.n	8023810 <__ieee754_rem_pio2+0xf0>
 80237de:	a38c      	add	r3, pc, #560	@ (adr r3, 8023a10 <__ieee754_rem_pio2+0x2f0>)
 80237e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237e4:	f7dc fd52 	bl	800028c <__adddf3>
 80237e8:	4602      	mov	r2, r0
 80237ea:	460b      	mov	r3, r1
 80237ec:	4680      	mov	r8, r0
 80237ee:	4689      	mov	r9, r1
 80237f0:	4630      	mov	r0, r6
 80237f2:	4639      	mov	r1, r7
 80237f4:	f7dc fd48 	bl	8000288 <__aeabi_dsub>
 80237f8:	a385      	add	r3, pc, #532	@ (adr r3, 8023a10 <__ieee754_rem_pio2+0x2f0>)
 80237fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237fe:	f7dc fd45 	bl	800028c <__adddf3>
 8023802:	f04f 35ff 	mov.w	r5, #4294967295
 8023806:	e9c4 8900 	strd	r8, r9, [r4]
 802380a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802380e:	e7c4      	b.n	802379a <__ieee754_rem_pio2+0x7a>
 8023810:	a381      	add	r3, pc, #516	@ (adr r3, 8023a18 <__ieee754_rem_pio2+0x2f8>)
 8023812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023816:	f7dc fd39 	bl	800028c <__adddf3>
 802381a:	a381      	add	r3, pc, #516	@ (adr r3, 8023a20 <__ieee754_rem_pio2+0x300>)
 802381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023820:	4606      	mov	r6, r0
 8023822:	460f      	mov	r7, r1
 8023824:	f7dc fd32 	bl	800028c <__adddf3>
 8023828:	4602      	mov	r2, r0
 802382a:	460b      	mov	r3, r1
 802382c:	4680      	mov	r8, r0
 802382e:	4689      	mov	r9, r1
 8023830:	4630      	mov	r0, r6
 8023832:	4639      	mov	r1, r7
 8023834:	f7dc fd28 	bl	8000288 <__aeabi_dsub>
 8023838:	a379      	add	r3, pc, #484	@ (adr r3, 8023a20 <__ieee754_rem_pio2+0x300>)
 802383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802383e:	e7de      	b.n	80237fe <__ieee754_rem_pio2+0xde>
 8023840:	4b82      	ldr	r3, [pc, #520]	@ (8023a4c <__ieee754_rem_pio2+0x32c>)
 8023842:	4598      	cmp	r8, r3
 8023844:	f200 80d1 	bhi.w	80239ea <__ieee754_rem_pio2+0x2ca>
 8023848:	f7fe fe1a 	bl	8022480 <fabs>
 802384c:	ec57 6b10 	vmov	r6, r7, d0
 8023850:	a375      	add	r3, pc, #468	@ (adr r3, 8023a28 <__ieee754_rem_pio2+0x308>)
 8023852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023856:	4630      	mov	r0, r6
 8023858:	4639      	mov	r1, r7
 802385a:	f7dc fecd 	bl	80005f8 <__aeabi_dmul>
 802385e:	4b7c      	ldr	r3, [pc, #496]	@ (8023a50 <__ieee754_rem_pio2+0x330>)
 8023860:	2200      	movs	r2, #0
 8023862:	f7dc fd13 	bl	800028c <__adddf3>
 8023866:	f7dd f977 	bl	8000b58 <__aeabi_d2iz>
 802386a:	4605      	mov	r5, r0
 802386c:	f7dc fe5a 	bl	8000524 <__aeabi_i2d>
 8023870:	4602      	mov	r2, r0
 8023872:	460b      	mov	r3, r1
 8023874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023878:	a363      	add	r3, pc, #396	@ (adr r3, 8023a08 <__ieee754_rem_pio2+0x2e8>)
 802387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802387e:	f7dc febb 	bl	80005f8 <__aeabi_dmul>
 8023882:	4602      	mov	r2, r0
 8023884:	460b      	mov	r3, r1
 8023886:	4630      	mov	r0, r6
 8023888:	4639      	mov	r1, r7
 802388a:	f7dc fcfd 	bl	8000288 <__aeabi_dsub>
 802388e:	a360      	add	r3, pc, #384	@ (adr r3, 8023a10 <__ieee754_rem_pio2+0x2f0>)
 8023890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023894:	4682      	mov	sl, r0
 8023896:	468b      	mov	fp, r1
 8023898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802389c:	f7dc feac 	bl	80005f8 <__aeabi_dmul>
 80238a0:	2d1f      	cmp	r5, #31
 80238a2:	4606      	mov	r6, r0
 80238a4:	460f      	mov	r7, r1
 80238a6:	dc0c      	bgt.n	80238c2 <__ieee754_rem_pio2+0x1a2>
 80238a8:	4b6a      	ldr	r3, [pc, #424]	@ (8023a54 <__ieee754_rem_pio2+0x334>)
 80238aa:	1e6a      	subs	r2, r5, #1
 80238ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80238b0:	4543      	cmp	r3, r8
 80238b2:	d006      	beq.n	80238c2 <__ieee754_rem_pio2+0x1a2>
 80238b4:	4632      	mov	r2, r6
 80238b6:	463b      	mov	r3, r7
 80238b8:	4650      	mov	r0, sl
 80238ba:	4659      	mov	r1, fp
 80238bc:	f7dc fce4 	bl	8000288 <__aeabi_dsub>
 80238c0:	e00e      	b.n	80238e0 <__ieee754_rem_pio2+0x1c0>
 80238c2:	463b      	mov	r3, r7
 80238c4:	4632      	mov	r2, r6
 80238c6:	4650      	mov	r0, sl
 80238c8:	4659      	mov	r1, fp
 80238ca:	f7dc fcdd 	bl	8000288 <__aeabi_dsub>
 80238ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80238d2:	9305      	str	r3, [sp, #20]
 80238d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80238d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80238dc:	2b10      	cmp	r3, #16
 80238de:	dc02      	bgt.n	80238e6 <__ieee754_rem_pio2+0x1c6>
 80238e0:	e9c4 0100 	strd	r0, r1, [r4]
 80238e4:	e039      	b.n	802395a <__ieee754_rem_pio2+0x23a>
 80238e6:	a34c      	add	r3, pc, #304	@ (adr r3, 8023a18 <__ieee754_rem_pio2+0x2f8>)
 80238e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80238f0:	f7dc fe82 	bl	80005f8 <__aeabi_dmul>
 80238f4:	4606      	mov	r6, r0
 80238f6:	460f      	mov	r7, r1
 80238f8:	4602      	mov	r2, r0
 80238fa:	460b      	mov	r3, r1
 80238fc:	4650      	mov	r0, sl
 80238fe:	4659      	mov	r1, fp
 8023900:	f7dc fcc2 	bl	8000288 <__aeabi_dsub>
 8023904:	4602      	mov	r2, r0
 8023906:	460b      	mov	r3, r1
 8023908:	4680      	mov	r8, r0
 802390a:	4689      	mov	r9, r1
 802390c:	4650      	mov	r0, sl
 802390e:	4659      	mov	r1, fp
 8023910:	f7dc fcba 	bl	8000288 <__aeabi_dsub>
 8023914:	4632      	mov	r2, r6
 8023916:	463b      	mov	r3, r7
 8023918:	f7dc fcb6 	bl	8000288 <__aeabi_dsub>
 802391c:	a340      	add	r3, pc, #256	@ (adr r3, 8023a20 <__ieee754_rem_pio2+0x300>)
 802391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023922:	4606      	mov	r6, r0
 8023924:	460f      	mov	r7, r1
 8023926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802392a:	f7dc fe65 	bl	80005f8 <__aeabi_dmul>
 802392e:	4632      	mov	r2, r6
 8023930:	463b      	mov	r3, r7
 8023932:	f7dc fca9 	bl	8000288 <__aeabi_dsub>
 8023936:	4602      	mov	r2, r0
 8023938:	460b      	mov	r3, r1
 802393a:	4606      	mov	r6, r0
 802393c:	460f      	mov	r7, r1
 802393e:	4640      	mov	r0, r8
 8023940:	4649      	mov	r1, r9
 8023942:	f7dc fca1 	bl	8000288 <__aeabi_dsub>
 8023946:	9a05      	ldr	r2, [sp, #20]
 8023948:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802394c:	1ad3      	subs	r3, r2, r3
 802394e:	2b31      	cmp	r3, #49	@ 0x31
 8023950:	dc20      	bgt.n	8023994 <__ieee754_rem_pio2+0x274>
 8023952:	e9c4 0100 	strd	r0, r1, [r4]
 8023956:	46c2      	mov	sl, r8
 8023958:	46cb      	mov	fp, r9
 802395a:	e9d4 8900 	ldrd	r8, r9, [r4]
 802395e:	4650      	mov	r0, sl
 8023960:	4642      	mov	r2, r8
 8023962:	464b      	mov	r3, r9
 8023964:	4659      	mov	r1, fp
 8023966:	f7dc fc8f 	bl	8000288 <__aeabi_dsub>
 802396a:	463b      	mov	r3, r7
 802396c:	4632      	mov	r2, r6
 802396e:	f7dc fc8b 	bl	8000288 <__aeabi_dsub>
 8023972:	9b04      	ldr	r3, [sp, #16]
 8023974:	2b00      	cmp	r3, #0
 8023976:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802397a:	f6bf af0e 	bge.w	802379a <__ieee754_rem_pio2+0x7a>
 802397e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8023982:	6063      	str	r3, [r4, #4]
 8023984:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023988:	f8c4 8000 	str.w	r8, [r4]
 802398c:	60a0      	str	r0, [r4, #8]
 802398e:	60e3      	str	r3, [r4, #12]
 8023990:	426d      	negs	r5, r5
 8023992:	e702      	b.n	802379a <__ieee754_rem_pio2+0x7a>
 8023994:	a326      	add	r3, pc, #152	@ (adr r3, 8023a30 <__ieee754_rem_pio2+0x310>)
 8023996:	e9d3 2300 	ldrd	r2, r3, [r3]
 802399a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802399e:	f7dc fe2b 	bl	80005f8 <__aeabi_dmul>
 80239a2:	4606      	mov	r6, r0
 80239a4:	460f      	mov	r7, r1
 80239a6:	4602      	mov	r2, r0
 80239a8:	460b      	mov	r3, r1
 80239aa:	4640      	mov	r0, r8
 80239ac:	4649      	mov	r1, r9
 80239ae:	f7dc fc6b 	bl	8000288 <__aeabi_dsub>
 80239b2:	4602      	mov	r2, r0
 80239b4:	460b      	mov	r3, r1
 80239b6:	4682      	mov	sl, r0
 80239b8:	468b      	mov	fp, r1
 80239ba:	4640      	mov	r0, r8
 80239bc:	4649      	mov	r1, r9
 80239be:	f7dc fc63 	bl	8000288 <__aeabi_dsub>
 80239c2:	4632      	mov	r2, r6
 80239c4:	463b      	mov	r3, r7
 80239c6:	f7dc fc5f 	bl	8000288 <__aeabi_dsub>
 80239ca:	a31b      	add	r3, pc, #108	@ (adr r3, 8023a38 <__ieee754_rem_pio2+0x318>)
 80239cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239d0:	4606      	mov	r6, r0
 80239d2:	460f      	mov	r7, r1
 80239d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80239d8:	f7dc fe0e 	bl	80005f8 <__aeabi_dmul>
 80239dc:	4632      	mov	r2, r6
 80239de:	463b      	mov	r3, r7
 80239e0:	f7dc fc52 	bl	8000288 <__aeabi_dsub>
 80239e4:	4606      	mov	r6, r0
 80239e6:	460f      	mov	r7, r1
 80239e8:	e764      	b.n	80238b4 <__ieee754_rem_pio2+0x194>
 80239ea:	4b1b      	ldr	r3, [pc, #108]	@ (8023a58 <__ieee754_rem_pio2+0x338>)
 80239ec:	4598      	cmp	r8, r3
 80239ee:	d935      	bls.n	8023a5c <__ieee754_rem_pio2+0x33c>
 80239f0:	4632      	mov	r2, r6
 80239f2:	463b      	mov	r3, r7
 80239f4:	4630      	mov	r0, r6
 80239f6:	4639      	mov	r1, r7
 80239f8:	f7dc fc46 	bl	8000288 <__aeabi_dsub>
 80239fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023a00:	e9c4 0100 	strd	r0, r1, [r4]
 8023a04:	e69e      	b.n	8023744 <__ieee754_rem_pio2+0x24>
 8023a06:	bf00      	nop
 8023a08:	54400000 	.word	0x54400000
 8023a0c:	3ff921fb 	.word	0x3ff921fb
 8023a10:	1a626331 	.word	0x1a626331
 8023a14:	3dd0b461 	.word	0x3dd0b461
 8023a18:	1a600000 	.word	0x1a600000
 8023a1c:	3dd0b461 	.word	0x3dd0b461
 8023a20:	2e037073 	.word	0x2e037073
 8023a24:	3ba3198a 	.word	0x3ba3198a
 8023a28:	6dc9c883 	.word	0x6dc9c883
 8023a2c:	3fe45f30 	.word	0x3fe45f30
 8023a30:	2e000000 	.word	0x2e000000
 8023a34:	3ba3198a 	.word	0x3ba3198a
 8023a38:	252049c1 	.word	0x252049c1
 8023a3c:	397b839a 	.word	0x397b839a
 8023a40:	3fe921fb 	.word	0x3fe921fb
 8023a44:	4002d97b 	.word	0x4002d97b
 8023a48:	3ff921fb 	.word	0x3ff921fb
 8023a4c:	413921fb 	.word	0x413921fb
 8023a50:	3fe00000 	.word	0x3fe00000
 8023a54:	08024f78 	.word	0x08024f78
 8023a58:	7fefffff 	.word	0x7fefffff
 8023a5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8023a60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8023a64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8023a68:	4630      	mov	r0, r6
 8023a6a:	460f      	mov	r7, r1
 8023a6c:	f7dd f874 	bl	8000b58 <__aeabi_d2iz>
 8023a70:	f7dc fd58 	bl	8000524 <__aeabi_i2d>
 8023a74:	4602      	mov	r2, r0
 8023a76:	460b      	mov	r3, r1
 8023a78:	4630      	mov	r0, r6
 8023a7a:	4639      	mov	r1, r7
 8023a7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023a80:	f7dc fc02 	bl	8000288 <__aeabi_dsub>
 8023a84:	4b22      	ldr	r3, [pc, #136]	@ (8023b10 <__ieee754_rem_pio2+0x3f0>)
 8023a86:	2200      	movs	r2, #0
 8023a88:	f7dc fdb6 	bl	80005f8 <__aeabi_dmul>
 8023a8c:	460f      	mov	r7, r1
 8023a8e:	4606      	mov	r6, r0
 8023a90:	f7dd f862 	bl	8000b58 <__aeabi_d2iz>
 8023a94:	f7dc fd46 	bl	8000524 <__aeabi_i2d>
 8023a98:	4602      	mov	r2, r0
 8023a9a:	460b      	mov	r3, r1
 8023a9c:	4630      	mov	r0, r6
 8023a9e:	4639      	mov	r1, r7
 8023aa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023aa4:	f7dc fbf0 	bl	8000288 <__aeabi_dsub>
 8023aa8:	4b19      	ldr	r3, [pc, #100]	@ (8023b10 <__ieee754_rem_pio2+0x3f0>)
 8023aaa:	2200      	movs	r2, #0
 8023aac:	f7dc fda4 	bl	80005f8 <__aeabi_dmul>
 8023ab0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8023ab4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8023ab8:	f04f 0803 	mov.w	r8, #3
 8023abc:	2600      	movs	r6, #0
 8023abe:	2700      	movs	r7, #0
 8023ac0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8023ac4:	4632      	mov	r2, r6
 8023ac6:	463b      	mov	r3, r7
 8023ac8:	46c2      	mov	sl, r8
 8023aca:	f108 38ff 	add.w	r8, r8, #4294967295
 8023ace:	f7dc fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8023ad2:	2800      	cmp	r0, #0
 8023ad4:	d1f4      	bne.n	8023ac0 <__ieee754_rem_pio2+0x3a0>
 8023ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8023b14 <__ieee754_rem_pio2+0x3f4>)
 8023ad8:	9301      	str	r3, [sp, #4]
 8023ada:	2302      	movs	r3, #2
 8023adc:	9300      	str	r3, [sp, #0]
 8023ade:	462a      	mov	r2, r5
 8023ae0:	4653      	mov	r3, sl
 8023ae2:	4621      	mov	r1, r4
 8023ae4:	a806      	add	r0, sp, #24
 8023ae6:	f000 f8d3 	bl	8023c90 <__kernel_rem_pio2>
 8023aea:	9b04      	ldr	r3, [sp, #16]
 8023aec:	2b00      	cmp	r3, #0
 8023aee:	4605      	mov	r5, r0
 8023af0:	f6bf ae53 	bge.w	802379a <__ieee754_rem_pio2+0x7a>
 8023af4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8023af8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023afc:	e9c4 2300 	strd	r2, r3, [r4]
 8023b00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8023b04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023b08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8023b0c:	e740      	b.n	8023990 <__ieee754_rem_pio2+0x270>
 8023b0e:	bf00      	nop
 8023b10:	41700000 	.word	0x41700000
 8023b14:	08024ff8 	.word	0x08024ff8

08023b18 <scalbn>:
 8023b18:	b570      	push	{r4, r5, r6, lr}
 8023b1a:	ec55 4b10 	vmov	r4, r5, d0
 8023b1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8023b22:	4606      	mov	r6, r0
 8023b24:	462b      	mov	r3, r5
 8023b26:	b991      	cbnz	r1, 8023b4e <scalbn+0x36>
 8023b28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8023b2c:	4323      	orrs	r3, r4
 8023b2e:	d03d      	beq.n	8023bac <scalbn+0x94>
 8023b30:	4b35      	ldr	r3, [pc, #212]	@ (8023c08 <scalbn+0xf0>)
 8023b32:	4620      	mov	r0, r4
 8023b34:	4629      	mov	r1, r5
 8023b36:	2200      	movs	r2, #0
 8023b38:	f7dc fd5e 	bl	80005f8 <__aeabi_dmul>
 8023b3c:	4b33      	ldr	r3, [pc, #204]	@ (8023c0c <scalbn+0xf4>)
 8023b3e:	429e      	cmp	r6, r3
 8023b40:	4604      	mov	r4, r0
 8023b42:	460d      	mov	r5, r1
 8023b44:	da0f      	bge.n	8023b66 <scalbn+0x4e>
 8023b46:	a328      	add	r3, pc, #160	@ (adr r3, 8023be8 <scalbn+0xd0>)
 8023b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b4c:	e01e      	b.n	8023b8c <scalbn+0x74>
 8023b4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8023b52:	4291      	cmp	r1, r2
 8023b54:	d10b      	bne.n	8023b6e <scalbn+0x56>
 8023b56:	4622      	mov	r2, r4
 8023b58:	4620      	mov	r0, r4
 8023b5a:	4629      	mov	r1, r5
 8023b5c:	f7dc fb96 	bl	800028c <__adddf3>
 8023b60:	4604      	mov	r4, r0
 8023b62:	460d      	mov	r5, r1
 8023b64:	e022      	b.n	8023bac <scalbn+0x94>
 8023b66:	460b      	mov	r3, r1
 8023b68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8023b6c:	3936      	subs	r1, #54	@ 0x36
 8023b6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8023b72:	4296      	cmp	r6, r2
 8023b74:	dd0d      	ble.n	8023b92 <scalbn+0x7a>
 8023b76:	2d00      	cmp	r5, #0
 8023b78:	a11d      	add	r1, pc, #116	@ (adr r1, 8023bf0 <scalbn+0xd8>)
 8023b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b7e:	da02      	bge.n	8023b86 <scalbn+0x6e>
 8023b80:	a11d      	add	r1, pc, #116	@ (adr r1, 8023bf8 <scalbn+0xe0>)
 8023b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023b86:	a31a      	add	r3, pc, #104	@ (adr r3, 8023bf0 <scalbn+0xd8>)
 8023b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b8c:	f7dc fd34 	bl	80005f8 <__aeabi_dmul>
 8023b90:	e7e6      	b.n	8023b60 <scalbn+0x48>
 8023b92:	1872      	adds	r2, r6, r1
 8023b94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8023b98:	428a      	cmp	r2, r1
 8023b9a:	dcec      	bgt.n	8023b76 <scalbn+0x5e>
 8023b9c:	2a00      	cmp	r2, #0
 8023b9e:	dd08      	ble.n	8023bb2 <scalbn+0x9a>
 8023ba0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8023ba4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8023ba8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023bac:	ec45 4b10 	vmov	d0, r4, r5
 8023bb0:	bd70      	pop	{r4, r5, r6, pc}
 8023bb2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8023bb6:	da08      	bge.n	8023bca <scalbn+0xb2>
 8023bb8:	2d00      	cmp	r5, #0
 8023bba:	a10b      	add	r1, pc, #44	@ (adr r1, 8023be8 <scalbn+0xd0>)
 8023bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023bc0:	dac1      	bge.n	8023b46 <scalbn+0x2e>
 8023bc2:	a10f      	add	r1, pc, #60	@ (adr r1, 8023c00 <scalbn+0xe8>)
 8023bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023bc8:	e7bd      	b.n	8023b46 <scalbn+0x2e>
 8023bca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8023bce:	3236      	adds	r2, #54	@ 0x36
 8023bd0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8023bd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023bd8:	4620      	mov	r0, r4
 8023bda:	4b0d      	ldr	r3, [pc, #52]	@ (8023c10 <scalbn+0xf8>)
 8023bdc:	4629      	mov	r1, r5
 8023bde:	2200      	movs	r2, #0
 8023be0:	e7d4      	b.n	8023b8c <scalbn+0x74>
 8023be2:	bf00      	nop
 8023be4:	f3af 8000 	nop.w
 8023be8:	c2f8f359 	.word	0xc2f8f359
 8023bec:	01a56e1f 	.word	0x01a56e1f
 8023bf0:	8800759c 	.word	0x8800759c
 8023bf4:	7e37e43c 	.word	0x7e37e43c
 8023bf8:	8800759c 	.word	0x8800759c
 8023bfc:	fe37e43c 	.word	0xfe37e43c
 8023c00:	c2f8f359 	.word	0xc2f8f359
 8023c04:	81a56e1f 	.word	0x81a56e1f
 8023c08:	43500000 	.word	0x43500000
 8023c0c:	ffff3cb0 	.word	0xffff3cb0
 8023c10:	3c900000 	.word	0x3c900000

08023c14 <with_errno>:
 8023c14:	b510      	push	{r4, lr}
 8023c16:	ed2d 8b02 	vpush	{d8}
 8023c1a:	eeb0 8a40 	vmov.f32	s16, s0
 8023c1e:	eef0 8a60 	vmov.f32	s17, s1
 8023c22:	4604      	mov	r4, r0
 8023c24:	f7f9 fdf0 	bl	801d808 <__errno>
 8023c28:	eeb0 0a48 	vmov.f32	s0, s16
 8023c2c:	eef0 0a68 	vmov.f32	s1, s17
 8023c30:	ecbd 8b02 	vpop	{d8}
 8023c34:	6004      	str	r4, [r0, #0]
 8023c36:	bd10      	pop	{r4, pc}

08023c38 <xflow>:
 8023c38:	4603      	mov	r3, r0
 8023c3a:	b507      	push	{r0, r1, r2, lr}
 8023c3c:	ec51 0b10 	vmov	r0, r1, d0
 8023c40:	b183      	cbz	r3, 8023c64 <xflow+0x2c>
 8023c42:	4602      	mov	r2, r0
 8023c44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8023c48:	e9cd 2300 	strd	r2, r3, [sp]
 8023c4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023c50:	f7dc fcd2 	bl	80005f8 <__aeabi_dmul>
 8023c54:	ec41 0b10 	vmov	d0, r0, r1
 8023c58:	2022      	movs	r0, #34	@ 0x22
 8023c5a:	b003      	add	sp, #12
 8023c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023c60:	f7ff bfd8 	b.w	8023c14 <with_errno>
 8023c64:	4602      	mov	r2, r0
 8023c66:	460b      	mov	r3, r1
 8023c68:	e7ee      	b.n	8023c48 <xflow+0x10>
 8023c6a:	0000      	movs	r0, r0
 8023c6c:	0000      	movs	r0, r0
	...

08023c70 <__math_uflow>:
 8023c70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8023c78 <__math_uflow+0x8>
 8023c74:	f7ff bfe0 	b.w	8023c38 <xflow>
 8023c78:	00000000 	.word	0x00000000
 8023c7c:	10000000 	.word	0x10000000

08023c80 <__math_oflow>:
 8023c80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8023c88 <__math_oflow+0x8>
 8023c84:	f7ff bfd8 	b.w	8023c38 <xflow>
 8023c88:	00000000 	.word	0x00000000
 8023c8c:	70000000 	.word	0x70000000

08023c90 <__kernel_rem_pio2>:
 8023c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c94:	ed2d 8b02 	vpush	{d8}
 8023c98:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8023c9c:	f112 0f14 	cmn.w	r2, #20
 8023ca0:	9306      	str	r3, [sp, #24]
 8023ca2:	9104      	str	r1, [sp, #16]
 8023ca4:	4bbe      	ldr	r3, [pc, #760]	@ (8023fa0 <__kernel_rem_pio2+0x310>)
 8023ca6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8023ca8:	9008      	str	r0, [sp, #32]
 8023caa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023cae:	9300      	str	r3, [sp, #0]
 8023cb0:	9b06      	ldr	r3, [sp, #24]
 8023cb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8023cb6:	bfa8      	it	ge
 8023cb8:	1ed4      	subge	r4, r2, #3
 8023cba:	9305      	str	r3, [sp, #20]
 8023cbc:	bfb2      	itee	lt
 8023cbe:	2400      	movlt	r4, #0
 8023cc0:	2318      	movge	r3, #24
 8023cc2:	fb94 f4f3 	sdivge	r4, r4, r3
 8023cc6:	f06f 0317 	mvn.w	r3, #23
 8023cca:	fb04 3303 	mla	r3, r4, r3, r3
 8023cce:	eb03 0b02 	add.w	fp, r3, r2
 8023cd2:	9b00      	ldr	r3, [sp, #0]
 8023cd4:	9a05      	ldr	r2, [sp, #20]
 8023cd6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8023f90 <__kernel_rem_pio2+0x300>
 8023cda:	eb03 0802 	add.w	r8, r3, r2
 8023cde:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8023ce0:	1aa7      	subs	r7, r4, r2
 8023ce2:	ae20      	add	r6, sp, #128	@ 0x80
 8023ce4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8023ce8:	2500      	movs	r5, #0
 8023cea:	4545      	cmp	r5, r8
 8023cec:	dd13      	ble.n	8023d16 <__kernel_rem_pio2+0x86>
 8023cee:	9b06      	ldr	r3, [sp, #24]
 8023cf0:	aa20      	add	r2, sp, #128	@ 0x80
 8023cf2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8023cf6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8023cfa:	f04f 0800 	mov.w	r8, #0
 8023cfe:	9b00      	ldr	r3, [sp, #0]
 8023d00:	4598      	cmp	r8, r3
 8023d02:	dc31      	bgt.n	8023d68 <__kernel_rem_pio2+0xd8>
 8023d04:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8023f90 <__kernel_rem_pio2+0x300>
 8023d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023d10:	462f      	mov	r7, r5
 8023d12:	2600      	movs	r6, #0
 8023d14:	e01b      	b.n	8023d4e <__kernel_rem_pio2+0xbe>
 8023d16:	42ef      	cmn	r7, r5
 8023d18:	d407      	bmi.n	8023d2a <__kernel_rem_pio2+0x9a>
 8023d1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8023d1e:	f7dc fc01 	bl	8000524 <__aeabi_i2d>
 8023d22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8023d26:	3501      	adds	r5, #1
 8023d28:	e7df      	b.n	8023cea <__kernel_rem_pio2+0x5a>
 8023d2a:	ec51 0b18 	vmov	r0, r1, d8
 8023d2e:	e7f8      	b.n	8023d22 <__kernel_rem_pio2+0x92>
 8023d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023d34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8023d38:	f7dc fc5e 	bl	80005f8 <__aeabi_dmul>
 8023d3c:	4602      	mov	r2, r0
 8023d3e:	460b      	mov	r3, r1
 8023d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023d44:	f7dc faa2 	bl	800028c <__adddf3>
 8023d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023d4c:	3601      	adds	r6, #1
 8023d4e:	9b05      	ldr	r3, [sp, #20]
 8023d50:	429e      	cmp	r6, r3
 8023d52:	f1a7 0708 	sub.w	r7, r7, #8
 8023d56:	ddeb      	ble.n	8023d30 <__kernel_rem_pio2+0xa0>
 8023d58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023d5c:	f108 0801 	add.w	r8, r8, #1
 8023d60:	ecaa 7b02 	vstmia	sl!, {d7}
 8023d64:	3508      	adds	r5, #8
 8023d66:	e7ca      	b.n	8023cfe <__kernel_rem_pio2+0x6e>
 8023d68:	9b00      	ldr	r3, [sp, #0]
 8023d6a:	f8dd 8000 	ldr.w	r8, [sp]
 8023d6e:	aa0c      	add	r2, sp, #48	@ 0x30
 8023d70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023d74:	930a      	str	r3, [sp, #40]	@ 0x28
 8023d76:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8023d78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d7e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8023d82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023d84:	ab98      	add	r3, sp, #608	@ 0x260
 8023d86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023d8a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8023d8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023d92:	ac0c      	add	r4, sp, #48	@ 0x30
 8023d94:	ab70      	add	r3, sp, #448	@ 0x1c0
 8023d96:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8023d9a:	46a1      	mov	r9, r4
 8023d9c:	46c2      	mov	sl, r8
 8023d9e:	f1ba 0f00 	cmp.w	sl, #0
 8023da2:	f1a5 0508 	sub.w	r5, r5, #8
 8023da6:	dc77      	bgt.n	8023e98 <__kernel_rem_pio2+0x208>
 8023da8:	4658      	mov	r0, fp
 8023daa:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023dae:	f7ff feb3 	bl	8023b18 <scalbn>
 8023db2:	ec57 6b10 	vmov	r6, r7, d0
 8023db6:	2200      	movs	r2, #0
 8023db8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8023dbc:	4630      	mov	r0, r6
 8023dbe:	4639      	mov	r1, r7
 8023dc0:	f7dc fc1a 	bl	80005f8 <__aeabi_dmul>
 8023dc4:	ec41 0b10 	vmov	d0, r0, r1
 8023dc8:	f7fe fc9e 	bl	8022708 <floor>
 8023dcc:	4b75      	ldr	r3, [pc, #468]	@ (8023fa4 <__kernel_rem_pio2+0x314>)
 8023dce:	ec51 0b10 	vmov	r0, r1, d0
 8023dd2:	2200      	movs	r2, #0
 8023dd4:	f7dc fc10 	bl	80005f8 <__aeabi_dmul>
 8023dd8:	4602      	mov	r2, r0
 8023dda:	460b      	mov	r3, r1
 8023ddc:	4630      	mov	r0, r6
 8023dde:	4639      	mov	r1, r7
 8023de0:	f7dc fa52 	bl	8000288 <__aeabi_dsub>
 8023de4:	460f      	mov	r7, r1
 8023de6:	4606      	mov	r6, r0
 8023de8:	f7dc feb6 	bl	8000b58 <__aeabi_d2iz>
 8023dec:	9002      	str	r0, [sp, #8]
 8023dee:	f7dc fb99 	bl	8000524 <__aeabi_i2d>
 8023df2:	4602      	mov	r2, r0
 8023df4:	460b      	mov	r3, r1
 8023df6:	4630      	mov	r0, r6
 8023df8:	4639      	mov	r1, r7
 8023dfa:	f7dc fa45 	bl	8000288 <__aeabi_dsub>
 8023dfe:	f1bb 0f00 	cmp.w	fp, #0
 8023e02:	4606      	mov	r6, r0
 8023e04:	460f      	mov	r7, r1
 8023e06:	dd6c      	ble.n	8023ee2 <__kernel_rem_pio2+0x252>
 8023e08:	f108 31ff 	add.w	r1, r8, #4294967295
 8023e0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8023e0e:	9d02      	ldr	r5, [sp, #8]
 8023e10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023e14:	f1cb 0018 	rsb	r0, fp, #24
 8023e18:	fa43 f200 	asr.w	r2, r3, r0
 8023e1c:	4415      	add	r5, r2
 8023e1e:	4082      	lsls	r2, r0
 8023e20:	1a9b      	subs	r3, r3, r2
 8023e22:	aa0c      	add	r2, sp, #48	@ 0x30
 8023e24:	9502      	str	r5, [sp, #8]
 8023e26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8023e2a:	f1cb 0217 	rsb	r2, fp, #23
 8023e2e:	fa43 f902 	asr.w	r9, r3, r2
 8023e32:	f1b9 0f00 	cmp.w	r9, #0
 8023e36:	dd64      	ble.n	8023f02 <__kernel_rem_pio2+0x272>
 8023e38:	9b02      	ldr	r3, [sp, #8]
 8023e3a:	2200      	movs	r2, #0
 8023e3c:	3301      	adds	r3, #1
 8023e3e:	9302      	str	r3, [sp, #8]
 8023e40:	4615      	mov	r5, r2
 8023e42:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8023e46:	4590      	cmp	r8, r2
 8023e48:	f300 80b8 	bgt.w	8023fbc <__kernel_rem_pio2+0x32c>
 8023e4c:	f1bb 0f00 	cmp.w	fp, #0
 8023e50:	dd07      	ble.n	8023e62 <__kernel_rem_pio2+0x1d2>
 8023e52:	f1bb 0f01 	cmp.w	fp, #1
 8023e56:	f000 80bf 	beq.w	8023fd8 <__kernel_rem_pio2+0x348>
 8023e5a:	f1bb 0f02 	cmp.w	fp, #2
 8023e5e:	f000 80c6 	beq.w	8023fee <__kernel_rem_pio2+0x35e>
 8023e62:	f1b9 0f02 	cmp.w	r9, #2
 8023e66:	d14c      	bne.n	8023f02 <__kernel_rem_pio2+0x272>
 8023e68:	4632      	mov	r2, r6
 8023e6a:	463b      	mov	r3, r7
 8023e6c:	494e      	ldr	r1, [pc, #312]	@ (8023fa8 <__kernel_rem_pio2+0x318>)
 8023e6e:	2000      	movs	r0, #0
 8023e70:	f7dc fa0a 	bl	8000288 <__aeabi_dsub>
 8023e74:	4606      	mov	r6, r0
 8023e76:	460f      	mov	r7, r1
 8023e78:	2d00      	cmp	r5, #0
 8023e7a:	d042      	beq.n	8023f02 <__kernel_rem_pio2+0x272>
 8023e7c:	4658      	mov	r0, fp
 8023e7e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8023f98 <__kernel_rem_pio2+0x308>
 8023e82:	f7ff fe49 	bl	8023b18 <scalbn>
 8023e86:	4630      	mov	r0, r6
 8023e88:	4639      	mov	r1, r7
 8023e8a:	ec53 2b10 	vmov	r2, r3, d0
 8023e8e:	f7dc f9fb 	bl	8000288 <__aeabi_dsub>
 8023e92:	4606      	mov	r6, r0
 8023e94:	460f      	mov	r7, r1
 8023e96:	e034      	b.n	8023f02 <__kernel_rem_pio2+0x272>
 8023e98:	4b44      	ldr	r3, [pc, #272]	@ (8023fac <__kernel_rem_pio2+0x31c>)
 8023e9a:	2200      	movs	r2, #0
 8023e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ea0:	f7dc fbaa 	bl	80005f8 <__aeabi_dmul>
 8023ea4:	f7dc fe58 	bl	8000b58 <__aeabi_d2iz>
 8023ea8:	f7dc fb3c 	bl	8000524 <__aeabi_i2d>
 8023eac:	4b40      	ldr	r3, [pc, #256]	@ (8023fb0 <__kernel_rem_pio2+0x320>)
 8023eae:	2200      	movs	r2, #0
 8023eb0:	4606      	mov	r6, r0
 8023eb2:	460f      	mov	r7, r1
 8023eb4:	f7dc fba0 	bl	80005f8 <__aeabi_dmul>
 8023eb8:	4602      	mov	r2, r0
 8023eba:	460b      	mov	r3, r1
 8023ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ec0:	f7dc f9e2 	bl	8000288 <__aeabi_dsub>
 8023ec4:	f7dc fe48 	bl	8000b58 <__aeabi_d2iz>
 8023ec8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8023ecc:	f849 0b04 	str.w	r0, [r9], #4
 8023ed0:	4639      	mov	r1, r7
 8023ed2:	4630      	mov	r0, r6
 8023ed4:	f7dc f9da 	bl	800028c <__adddf3>
 8023ed8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023ee0:	e75d      	b.n	8023d9e <__kernel_rem_pio2+0x10e>
 8023ee2:	d107      	bne.n	8023ef4 <__kernel_rem_pio2+0x264>
 8023ee4:	f108 33ff 	add.w	r3, r8, #4294967295
 8023ee8:	aa0c      	add	r2, sp, #48	@ 0x30
 8023eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023eee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8023ef2:	e79e      	b.n	8023e32 <__kernel_rem_pio2+0x1a2>
 8023ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8023fb4 <__kernel_rem_pio2+0x324>)
 8023ef6:	2200      	movs	r2, #0
 8023ef8:	f7dc fe04 	bl	8000b04 <__aeabi_dcmpge>
 8023efc:	2800      	cmp	r0, #0
 8023efe:	d143      	bne.n	8023f88 <__kernel_rem_pio2+0x2f8>
 8023f00:	4681      	mov	r9, r0
 8023f02:	2200      	movs	r2, #0
 8023f04:	2300      	movs	r3, #0
 8023f06:	4630      	mov	r0, r6
 8023f08:	4639      	mov	r1, r7
 8023f0a:	f7dc fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8023f0e:	2800      	cmp	r0, #0
 8023f10:	f000 80bf 	beq.w	8024092 <__kernel_rem_pio2+0x402>
 8023f14:	f108 33ff 	add.w	r3, r8, #4294967295
 8023f18:	2200      	movs	r2, #0
 8023f1a:	9900      	ldr	r1, [sp, #0]
 8023f1c:	428b      	cmp	r3, r1
 8023f1e:	da6e      	bge.n	8023ffe <__kernel_rem_pio2+0x36e>
 8023f20:	2a00      	cmp	r2, #0
 8023f22:	f000 8089 	beq.w	8024038 <__kernel_rem_pio2+0x3a8>
 8023f26:	f108 38ff 	add.w	r8, r8, #4294967295
 8023f2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8023f2c:	f1ab 0b18 	sub.w	fp, fp, #24
 8023f30:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d0f6      	beq.n	8023f26 <__kernel_rem_pio2+0x296>
 8023f38:	4658      	mov	r0, fp
 8023f3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8023f98 <__kernel_rem_pio2+0x308>
 8023f3e:	f7ff fdeb 	bl	8023b18 <scalbn>
 8023f42:	f108 0301 	add.w	r3, r8, #1
 8023f46:	00da      	lsls	r2, r3, #3
 8023f48:	9205      	str	r2, [sp, #20]
 8023f4a:	ec55 4b10 	vmov	r4, r5, d0
 8023f4e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8023f50:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8023fac <__kernel_rem_pio2+0x31c>
 8023f54:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8023f58:	4646      	mov	r6, r8
 8023f5a:	f04f 0a00 	mov.w	sl, #0
 8023f5e:	2e00      	cmp	r6, #0
 8023f60:	f280 80cf 	bge.w	8024102 <__kernel_rem_pio2+0x472>
 8023f64:	4644      	mov	r4, r8
 8023f66:	2c00      	cmp	r4, #0
 8023f68:	f2c0 80fd 	blt.w	8024166 <__kernel_rem_pio2+0x4d6>
 8023f6c:	4b12      	ldr	r3, [pc, #72]	@ (8023fb8 <__kernel_rem_pio2+0x328>)
 8023f6e:	461f      	mov	r7, r3
 8023f70:	ab70      	add	r3, sp, #448	@ 0x1c0
 8023f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023f76:	9306      	str	r3, [sp, #24]
 8023f78:	f04f 0a00 	mov.w	sl, #0
 8023f7c:	f04f 0b00 	mov.w	fp, #0
 8023f80:	2600      	movs	r6, #0
 8023f82:	eba8 0504 	sub.w	r5, r8, r4
 8023f86:	e0e2      	b.n	802414e <__kernel_rem_pio2+0x4be>
 8023f88:	f04f 0902 	mov.w	r9, #2
 8023f8c:	e754      	b.n	8023e38 <__kernel_rem_pio2+0x1a8>
 8023f8e:	bf00      	nop
	...
 8023f9c:	3ff00000 	.word	0x3ff00000
 8023fa0:	08025140 	.word	0x08025140
 8023fa4:	40200000 	.word	0x40200000
 8023fa8:	3ff00000 	.word	0x3ff00000
 8023fac:	3e700000 	.word	0x3e700000
 8023fb0:	41700000 	.word	0x41700000
 8023fb4:	3fe00000 	.word	0x3fe00000
 8023fb8:	08025100 	.word	0x08025100
 8023fbc:	f854 3b04 	ldr.w	r3, [r4], #4
 8023fc0:	b945      	cbnz	r5, 8023fd4 <__kernel_rem_pio2+0x344>
 8023fc2:	b123      	cbz	r3, 8023fce <__kernel_rem_pio2+0x33e>
 8023fc4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8023fc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8023fcc:	2301      	movs	r3, #1
 8023fce:	3201      	adds	r2, #1
 8023fd0:	461d      	mov	r5, r3
 8023fd2:	e738      	b.n	8023e46 <__kernel_rem_pio2+0x1b6>
 8023fd4:	1acb      	subs	r3, r1, r3
 8023fd6:	e7f7      	b.n	8023fc8 <__kernel_rem_pio2+0x338>
 8023fd8:	f108 32ff 	add.w	r2, r8, #4294967295
 8023fdc:	ab0c      	add	r3, sp, #48	@ 0x30
 8023fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023fe2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023fe6:	a90c      	add	r1, sp, #48	@ 0x30
 8023fe8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8023fec:	e739      	b.n	8023e62 <__kernel_rem_pio2+0x1d2>
 8023fee:	f108 32ff 	add.w	r2, r8, #4294967295
 8023ff2:	ab0c      	add	r3, sp, #48	@ 0x30
 8023ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023ff8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8023ffc:	e7f3      	b.n	8023fe6 <__kernel_rem_pio2+0x356>
 8023ffe:	a90c      	add	r1, sp, #48	@ 0x30
 8024000:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8024004:	3b01      	subs	r3, #1
 8024006:	430a      	orrs	r2, r1
 8024008:	e787      	b.n	8023f1a <__kernel_rem_pio2+0x28a>
 802400a:	3401      	adds	r4, #1
 802400c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8024010:	2a00      	cmp	r2, #0
 8024012:	d0fa      	beq.n	802400a <__kernel_rem_pio2+0x37a>
 8024014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024016:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 802401a:	eb0d 0503 	add.w	r5, sp, r3
 802401e:	9b06      	ldr	r3, [sp, #24]
 8024020:	aa20      	add	r2, sp, #128	@ 0x80
 8024022:	4443      	add	r3, r8
 8024024:	f108 0701 	add.w	r7, r8, #1
 8024028:	3d98      	subs	r5, #152	@ 0x98
 802402a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 802402e:	4444      	add	r4, r8
 8024030:	42bc      	cmp	r4, r7
 8024032:	da04      	bge.n	802403e <__kernel_rem_pio2+0x3ae>
 8024034:	46a0      	mov	r8, r4
 8024036:	e6a2      	b.n	8023d7e <__kernel_rem_pio2+0xee>
 8024038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802403a:	2401      	movs	r4, #1
 802403c:	e7e6      	b.n	802400c <__kernel_rem_pio2+0x37c>
 802403e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024040:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8024044:	f7dc fa6e 	bl	8000524 <__aeabi_i2d>
 8024048:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8024310 <__kernel_rem_pio2+0x680>
 802404c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8024050:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024058:	46b2      	mov	sl, r6
 802405a:	f04f 0800 	mov.w	r8, #0
 802405e:	9b05      	ldr	r3, [sp, #20]
 8024060:	4598      	cmp	r8, r3
 8024062:	dd05      	ble.n	8024070 <__kernel_rem_pio2+0x3e0>
 8024064:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024068:	3701      	adds	r7, #1
 802406a:	eca5 7b02 	vstmia	r5!, {d7}
 802406e:	e7df      	b.n	8024030 <__kernel_rem_pio2+0x3a0>
 8024070:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8024074:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024078:	f7dc fabe 	bl	80005f8 <__aeabi_dmul>
 802407c:	4602      	mov	r2, r0
 802407e:	460b      	mov	r3, r1
 8024080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024084:	f7dc f902 	bl	800028c <__adddf3>
 8024088:	f108 0801 	add.w	r8, r8, #1
 802408c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024090:	e7e5      	b.n	802405e <__kernel_rem_pio2+0x3ce>
 8024092:	f1cb 0000 	rsb	r0, fp, #0
 8024096:	ec47 6b10 	vmov	d0, r6, r7
 802409a:	f7ff fd3d 	bl	8023b18 <scalbn>
 802409e:	ec55 4b10 	vmov	r4, r5, d0
 80240a2:	4b9d      	ldr	r3, [pc, #628]	@ (8024318 <__kernel_rem_pio2+0x688>)
 80240a4:	2200      	movs	r2, #0
 80240a6:	4620      	mov	r0, r4
 80240a8:	4629      	mov	r1, r5
 80240aa:	f7dc fd2b 	bl	8000b04 <__aeabi_dcmpge>
 80240ae:	b300      	cbz	r0, 80240f2 <__kernel_rem_pio2+0x462>
 80240b0:	4b9a      	ldr	r3, [pc, #616]	@ (802431c <__kernel_rem_pio2+0x68c>)
 80240b2:	2200      	movs	r2, #0
 80240b4:	4620      	mov	r0, r4
 80240b6:	4629      	mov	r1, r5
 80240b8:	f7dc fa9e 	bl	80005f8 <__aeabi_dmul>
 80240bc:	f7dc fd4c 	bl	8000b58 <__aeabi_d2iz>
 80240c0:	4606      	mov	r6, r0
 80240c2:	f7dc fa2f 	bl	8000524 <__aeabi_i2d>
 80240c6:	4b94      	ldr	r3, [pc, #592]	@ (8024318 <__kernel_rem_pio2+0x688>)
 80240c8:	2200      	movs	r2, #0
 80240ca:	f7dc fa95 	bl	80005f8 <__aeabi_dmul>
 80240ce:	460b      	mov	r3, r1
 80240d0:	4602      	mov	r2, r0
 80240d2:	4629      	mov	r1, r5
 80240d4:	4620      	mov	r0, r4
 80240d6:	f7dc f8d7 	bl	8000288 <__aeabi_dsub>
 80240da:	f7dc fd3d 	bl	8000b58 <__aeabi_d2iz>
 80240de:	ab0c      	add	r3, sp, #48	@ 0x30
 80240e0:	f10b 0b18 	add.w	fp, fp, #24
 80240e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80240e8:	f108 0801 	add.w	r8, r8, #1
 80240ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80240f0:	e722      	b.n	8023f38 <__kernel_rem_pio2+0x2a8>
 80240f2:	4620      	mov	r0, r4
 80240f4:	4629      	mov	r1, r5
 80240f6:	f7dc fd2f 	bl	8000b58 <__aeabi_d2iz>
 80240fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80240fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8024100:	e71a      	b.n	8023f38 <__kernel_rem_pio2+0x2a8>
 8024102:	ab0c      	add	r3, sp, #48	@ 0x30
 8024104:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8024108:	f7dc fa0c 	bl	8000524 <__aeabi_i2d>
 802410c:	4622      	mov	r2, r4
 802410e:	462b      	mov	r3, r5
 8024110:	f7dc fa72 	bl	80005f8 <__aeabi_dmul>
 8024114:	4652      	mov	r2, sl
 8024116:	e967 0102 	strd	r0, r1, [r7, #-8]!
 802411a:	465b      	mov	r3, fp
 802411c:	4620      	mov	r0, r4
 802411e:	4629      	mov	r1, r5
 8024120:	f7dc fa6a 	bl	80005f8 <__aeabi_dmul>
 8024124:	3e01      	subs	r6, #1
 8024126:	4604      	mov	r4, r0
 8024128:	460d      	mov	r5, r1
 802412a:	e718      	b.n	8023f5e <__kernel_rem_pio2+0x2ce>
 802412c:	9906      	ldr	r1, [sp, #24]
 802412e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8024132:	9106      	str	r1, [sp, #24]
 8024134:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8024138:	f7dc fa5e 	bl	80005f8 <__aeabi_dmul>
 802413c:	4602      	mov	r2, r0
 802413e:	460b      	mov	r3, r1
 8024140:	4650      	mov	r0, sl
 8024142:	4659      	mov	r1, fp
 8024144:	f7dc f8a2 	bl	800028c <__adddf3>
 8024148:	3601      	adds	r6, #1
 802414a:	4682      	mov	sl, r0
 802414c:	468b      	mov	fp, r1
 802414e:	9b00      	ldr	r3, [sp, #0]
 8024150:	429e      	cmp	r6, r3
 8024152:	dc01      	bgt.n	8024158 <__kernel_rem_pio2+0x4c8>
 8024154:	42b5      	cmp	r5, r6
 8024156:	dae9      	bge.n	802412c <__kernel_rem_pio2+0x49c>
 8024158:	ab48      	add	r3, sp, #288	@ 0x120
 802415a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802415e:	e9c5 ab00 	strd	sl, fp, [r5]
 8024162:	3c01      	subs	r4, #1
 8024164:	e6ff      	b.n	8023f66 <__kernel_rem_pio2+0x2d6>
 8024166:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8024168:	2b02      	cmp	r3, #2
 802416a:	dc0b      	bgt.n	8024184 <__kernel_rem_pio2+0x4f4>
 802416c:	2b00      	cmp	r3, #0
 802416e:	dc39      	bgt.n	80241e4 <__kernel_rem_pio2+0x554>
 8024170:	d05d      	beq.n	802422e <__kernel_rem_pio2+0x59e>
 8024172:	9b02      	ldr	r3, [sp, #8]
 8024174:	f003 0007 	and.w	r0, r3, #7
 8024178:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 802417c:	ecbd 8b02 	vpop	{d8}
 8024180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024184:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8024186:	2b03      	cmp	r3, #3
 8024188:	d1f3      	bne.n	8024172 <__kernel_rem_pio2+0x4e2>
 802418a:	9b05      	ldr	r3, [sp, #20]
 802418c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8024190:	eb0d 0403 	add.w	r4, sp, r3
 8024194:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8024198:	4625      	mov	r5, r4
 802419a:	46c2      	mov	sl, r8
 802419c:	f1ba 0f00 	cmp.w	sl, #0
 80241a0:	f1a5 0508 	sub.w	r5, r5, #8
 80241a4:	dc6b      	bgt.n	802427e <__kernel_rem_pio2+0x5ee>
 80241a6:	4645      	mov	r5, r8
 80241a8:	2d01      	cmp	r5, #1
 80241aa:	f1a4 0408 	sub.w	r4, r4, #8
 80241ae:	f300 8087 	bgt.w	80242c0 <__kernel_rem_pio2+0x630>
 80241b2:	9c05      	ldr	r4, [sp, #20]
 80241b4:	ab48      	add	r3, sp, #288	@ 0x120
 80241b6:	441c      	add	r4, r3
 80241b8:	2000      	movs	r0, #0
 80241ba:	2100      	movs	r1, #0
 80241bc:	f1b8 0f01 	cmp.w	r8, #1
 80241c0:	f300 809c 	bgt.w	80242fc <__kernel_rem_pio2+0x66c>
 80241c4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80241c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80241cc:	f1b9 0f00 	cmp.w	r9, #0
 80241d0:	f040 80a6 	bne.w	8024320 <__kernel_rem_pio2+0x690>
 80241d4:	9b04      	ldr	r3, [sp, #16]
 80241d6:	e9c3 7800 	strd	r7, r8, [r3]
 80241da:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80241de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80241e2:	e7c6      	b.n	8024172 <__kernel_rem_pio2+0x4e2>
 80241e4:	9d05      	ldr	r5, [sp, #20]
 80241e6:	ab48      	add	r3, sp, #288	@ 0x120
 80241e8:	441d      	add	r5, r3
 80241ea:	4644      	mov	r4, r8
 80241ec:	2000      	movs	r0, #0
 80241ee:	2100      	movs	r1, #0
 80241f0:	2c00      	cmp	r4, #0
 80241f2:	da35      	bge.n	8024260 <__kernel_rem_pio2+0x5d0>
 80241f4:	f1b9 0f00 	cmp.w	r9, #0
 80241f8:	d038      	beq.n	802426c <__kernel_rem_pio2+0x5dc>
 80241fa:	4602      	mov	r2, r0
 80241fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024200:	9c04      	ldr	r4, [sp, #16]
 8024202:	e9c4 2300 	strd	r2, r3, [r4]
 8024206:	4602      	mov	r2, r0
 8024208:	460b      	mov	r3, r1
 802420a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 802420e:	f7dc f83b 	bl	8000288 <__aeabi_dsub>
 8024212:	ad4a      	add	r5, sp, #296	@ 0x128
 8024214:	2401      	movs	r4, #1
 8024216:	45a0      	cmp	r8, r4
 8024218:	da2b      	bge.n	8024272 <__kernel_rem_pio2+0x5e2>
 802421a:	f1b9 0f00 	cmp.w	r9, #0
 802421e:	d002      	beq.n	8024226 <__kernel_rem_pio2+0x596>
 8024220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024224:	4619      	mov	r1, r3
 8024226:	9b04      	ldr	r3, [sp, #16]
 8024228:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802422c:	e7a1      	b.n	8024172 <__kernel_rem_pio2+0x4e2>
 802422e:	9c05      	ldr	r4, [sp, #20]
 8024230:	ab48      	add	r3, sp, #288	@ 0x120
 8024232:	441c      	add	r4, r3
 8024234:	2000      	movs	r0, #0
 8024236:	2100      	movs	r1, #0
 8024238:	f1b8 0f00 	cmp.w	r8, #0
 802423c:	da09      	bge.n	8024252 <__kernel_rem_pio2+0x5c2>
 802423e:	f1b9 0f00 	cmp.w	r9, #0
 8024242:	d002      	beq.n	802424a <__kernel_rem_pio2+0x5ba>
 8024244:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024248:	4619      	mov	r1, r3
 802424a:	9b04      	ldr	r3, [sp, #16]
 802424c:	e9c3 0100 	strd	r0, r1, [r3]
 8024250:	e78f      	b.n	8024172 <__kernel_rem_pio2+0x4e2>
 8024252:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024256:	f7dc f819 	bl	800028c <__adddf3>
 802425a:	f108 38ff 	add.w	r8, r8, #4294967295
 802425e:	e7eb      	b.n	8024238 <__kernel_rem_pio2+0x5a8>
 8024260:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8024264:	f7dc f812 	bl	800028c <__adddf3>
 8024268:	3c01      	subs	r4, #1
 802426a:	e7c1      	b.n	80241f0 <__kernel_rem_pio2+0x560>
 802426c:	4602      	mov	r2, r0
 802426e:	460b      	mov	r3, r1
 8024270:	e7c6      	b.n	8024200 <__kernel_rem_pio2+0x570>
 8024272:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8024276:	f7dc f809 	bl	800028c <__adddf3>
 802427a:	3401      	adds	r4, #1
 802427c:	e7cb      	b.n	8024216 <__kernel_rem_pio2+0x586>
 802427e:	ed95 7b00 	vldr	d7, [r5]
 8024282:	ed8d 7b00 	vstr	d7, [sp]
 8024286:	ed95 7b02 	vldr	d7, [r5, #8]
 802428a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802428e:	ec53 2b17 	vmov	r2, r3, d7
 8024292:	ed8d 7b06 	vstr	d7, [sp, #24]
 8024296:	f7db fff9 	bl	800028c <__adddf3>
 802429a:	4602      	mov	r2, r0
 802429c:	460b      	mov	r3, r1
 802429e:	4606      	mov	r6, r0
 80242a0:	460f      	mov	r7, r1
 80242a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80242a6:	f7db ffef 	bl	8000288 <__aeabi_dsub>
 80242aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80242ae:	f7db ffed 	bl	800028c <__adddf3>
 80242b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80242b6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80242ba:	e9c5 6700 	strd	r6, r7, [r5]
 80242be:	e76d      	b.n	802419c <__kernel_rem_pio2+0x50c>
 80242c0:	ed94 7b00 	vldr	d7, [r4]
 80242c4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80242c8:	ec51 0b17 	vmov	r0, r1, d7
 80242cc:	4652      	mov	r2, sl
 80242ce:	465b      	mov	r3, fp
 80242d0:	ed8d 7b00 	vstr	d7, [sp]
 80242d4:	f7db ffda 	bl	800028c <__adddf3>
 80242d8:	4602      	mov	r2, r0
 80242da:	460b      	mov	r3, r1
 80242dc:	4606      	mov	r6, r0
 80242de:	460f      	mov	r7, r1
 80242e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80242e4:	f7db ffd0 	bl	8000288 <__aeabi_dsub>
 80242e8:	4652      	mov	r2, sl
 80242ea:	465b      	mov	r3, fp
 80242ec:	f7db ffce 	bl	800028c <__adddf3>
 80242f0:	3d01      	subs	r5, #1
 80242f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80242f6:	e9c4 6700 	strd	r6, r7, [r4]
 80242fa:	e755      	b.n	80241a8 <__kernel_rem_pio2+0x518>
 80242fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024300:	f7db ffc4 	bl	800028c <__adddf3>
 8024304:	f108 38ff 	add.w	r8, r8, #4294967295
 8024308:	e758      	b.n	80241bc <__kernel_rem_pio2+0x52c>
 802430a:	bf00      	nop
 802430c:	f3af 8000 	nop.w
	...
 8024318:	41700000 	.word	0x41700000
 802431c:	3e700000 	.word	0x3e700000
 8024320:	9b04      	ldr	r3, [sp, #16]
 8024322:	9a04      	ldr	r2, [sp, #16]
 8024324:	601f      	str	r7, [r3, #0]
 8024326:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 802432a:	605c      	str	r4, [r3, #4]
 802432c:	609d      	str	r5, [r3, #8]
 802432e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8024332:	60d3      	str	r3, [r2, #12]
 8024334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8024338:	6110      	str	r0, [r2, #16]
 802433a:	6153      	str	r3, [r2, #20]
 802433c:	e719      	b.n	8024172 <__kernel_rem_pio2+0x4e2>
 802433e:	bf00      	nop

08024340 <_init>:
 8024340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024342:	bf00      	nop
 8024344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024346:	bc08      	pop	{r3}
 8024348:	469e      	mov	lr, r3
 802434a:	4770      	bx	lr

0802434c <_fini>:
 802434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802434e:	bf00      	nop
 8024350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024352:	bc08      	pop	{r3}
 8024354:	469e      	mov	lr, r3
 8024356:	4770      	bx	lr
